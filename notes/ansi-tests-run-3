Doing 19358 pending test of 19358 tests total.

 CL-TEST::SYMBOL-&ALLOW-OTHER-KEYS
 CL-TEST::SYMBOL-&AUX
 CL-TEST::SYMBOL-&BODY
 CL-TEST::SYMBOL-&ENVIRONMENT
 CL-TEST::SYMBOL-&KEY
 CL-TEST::SYMBOL-&OPTIONAL
 CL-TEST::SYMBOL-&REST
 CL-TEST::SYMBOL-&WHOLE
 CL-TEST::SYMBOL-*
 CL-TEST::SYMBOL-**
 CL-TEST::SYMBOL-***
 CL-TEST::SYMBOL-*BREAK-ON-SIGNALS*
 CL-TEST::SYMBOL-*COMPILE-FILE-PATHNAME*
 CL-TEST::SYMBOL-*COMPILE-FILE-TRUENAME*
 CL-TEST::SYMBOL-*COMPILE-PRINT*
 CL-TEST::SYMBOL-*COMPILE-VERBOSE*
 CL-TEST::SYMBOL-*DEBUG-IO*
 CL-TEST::SYMBOL-*DEBUGGER-HOOK*
 CL-TEST::SYMBOL-*DEFAULT-PATHNAME-DEFAULTS*
 CL-TEST::SYMBOL-*ERROR-OUTPUT*
 CL-TEST::SYMBOL-*FEATURES*
 CL-TEST::SYMBOL-*GENSYM-COUNTER*
 CL-TEST::SYMBOL-*LOAD-PATHNAME*
 CL-TEST::SYMBOL-*LOAD-PRINT*
 CL-TEST::SYMBOL-*LOAD-TRUENAME*
 CL-TEST::SYMBOL-*LOAD-VERBOSE*
 CL-TEST::SYMBOL-*MACROEXPAND-HOOK*
 CL-TEST::SYMBOL-*MODULES*
 CL-TEST::SYMBOL-*PACKAGE*
 CL-TEST::SYMBOL-*PRINT-ARRAY*
 CL-TEST::SYMBOL-*PRINT-BASE*
 CL-TEST::SYMBOL-*PRINT-CASE*
 CL-TEST::SYMBOL-*PRINT-CIRCLE*
 CL-TEST::SYMBOL-*PRINT-ESCAPE*
 CL-TEST::SYMBOL-*PRINT-GENSYM*
 CL-TEST::SYMBOL-*PRINT-LENGTH*
 CL-TEST::SYMBOL-*PRINT-LEVEL*
 CL-TEST::SYMBOL-*PRINT-LINES*
 CL-TEST::SYMBOL-*PRINT-MISER-WIDTH*
 CL-TEST::SYMBOL-*PRINT-PPRINT-DISPATCH*
 CL-TEST::SYMBOL-*PRINT-PRETTY*
 CL-TEST::SYMBOL-*PRINT-RADIX*
 CL-TEST::SYMBOL-*PRINT-READABLY*
 CL-TEST::SYMBOL-*PRINT-RIGHT-MARGIN*
 CL-TEST::SYMBOL-*QUERY-IO*
 CL-TEST::SYMBOL-*RANDOM-STATE*
 CL-TEST::SYMBOL-*READ-BASE*
 CL-TEST::SYMBOL-*READ-DEFAULT-FLOAT-FORMAT*
 CL-TEST::SYMBOL-*READ-EVAL*
 CL-TEST::SYMBOL-*READ-SUPPRESS*
 CL-TEST::SYMBOL-*READTABLE*
 CL-TEST::SYMBOL-*STANDARD-INPUT*
 CL-TEST::SYMBOL-*STANDARD-OUTPUT*
 CL-TEST::SYMBOL-*TERMINAL-IO*
 CL-TEST::SYMBOL-*TRACE-OUTPUT*
 CL-TEST::SYMBOL-+
 CL-TEST::SYMBOL-++
 CL-TEST::SYMBOL-+++
 CL-TEST::SYMBOL--
 CL-TEST::SYMBOL-/
 CL-TEST::SYMBOL-//
 CL-TEST::SYMBOL-///
 CL-TEST::SYMBOL-/=
 CL-TEST::SYMBOL-1+
 CL-TEST::SYMBOL-1-
 CL-TEST::SYMBOL-<
 CL-TEST::SYMBOL-<=
 CL-TEST::SYMBOL-=
 CL-TEST::SYMBOL->
 CL-TEST::SYMBOL->=
 CL-TEST::SYMBOL-ABORT
 CL-TEST::SYMBOL-ABS
 CL-TEST::SYMBOL-ACONS
 CL-TEST::SYMBOL-ACOS
 CL-TEST::SYMBOL-ACOSH
 CL-TEST::SYMBOL-ADD-METHOD
 CL-TEST::SYMBOL-ADJOIN
 CL-TEST::SYMBOL-ADJUST-ARRAY
 CL-TEST::SYMBOL-ADJUSTABLE-ARRAY-P
 CL-TEST::SYMBOL-ALLOCATE-INSTANCE
 CL-TEST::SYMBOL-ALPHA-CHAR-P
 CL-TEST::SYMBOL-ALPHANUMERICP
 CL-TEST::SYMBOL-AND
 CL-TEST::SYMBOL-APPEND
 CL-TEST::SYMBOL-APPLY
 CL-TEST::SYMBOL-APROPOS
 CL-TEST::SYMBOL-APROPOS-LIST
 CL-TEST::SYMBOL-AREF
 CL-TEST::SYMBOL-ARITHMETIC-ERROR
 CL-TEST::SYMBOL-ARITHMETIC-ERROR-OPERANDS
 CL-TEST::SYMBOL-ARITHMETIC-ERROR-OPERATION
 CL-TEST::SYMBOL-ARRAY
 CL-TEST::SYMBOL-ARRAY-DIMENSION
 CL-TEST::SYMBOL-ARRAY-DIMENSION-LIMIT
 CL-TEST::SYMBOL-ARRAY-DIMENSIONS
 CL-TEST::SYMBOL-ARRAY-DISPLACEMENT
 CL-TEST::SYMBOL-ARRAY-ELEMENT-TYPE
 CL-TEST::SYMBOL-ARRAY-HAS-FILL-POINTER-P
 CL-TEST::SYMBOL-ARRAY-IN-BOUNDS-P
 CL-TEST::SYMBOL-ARRAY-RANK
 CL-TEST::SYMBOL-ARRAY-RANK-LIMIT
 CL-TEST::SYMBOL-ARRAY-ROW-MAJOR-INDEX
 CL-TEST::SYMBOL-ARRAY-TOTAL-SIZE
 CL-TEST::SYMBOL-ARRAY-TOTAL-SIZE-LIMIT
 CL-TEST::SYMBOL-ARRAYP
 CL-TEST::SYMBOL-ASH
 CL-TEST::SYMBOL-ASIN
 CL-TEST::SYMBOL-ASINH
 CL-TEST::SYMBOL-ASSERT
 CL-TEST::SYMBOL-ASSOC
 CL-TEST::SYMBOL-ASSOC-IF
 CL-TEST::SYMBOL-ASSOC-IF-NOT
 CL-TEST::SYMBOL-ATAN
 CL-TEST::SYMBOL-ATANH
 CL-TEST::SYMBOL-ATOM
 CL-TEST::SYMBOL-BASE-CHAR
 CL-TEST::SYMBOL-BASE-STRING
 CL-TEST::SYMBOL-BIGNUM
 CL-TEST::SYMBOL-BIT
 CL-TEST::SYMBOL-BIT-AND
 CL-TEST::SYMBOL-BIT-ANDC1
 CL-TEST::SYMBOL-BIT-ANDC2
 CL-TEST::SYMBOL-BIT-EQV
 CL-TEST::SYMBOL-BIT-IOR
 CL-TEST::SYMBOL-BIT-NAND
 CL-TEST::SYMBOL-BIT-NOR
 CL-TEST::SYMBOL-BIT-NOT
 CL-TEST::SYMBOL-BIT-ORC1
 CL-TEST::SYMBOL-BIT-ORC2
 CL-TEST::SYMBOL-BIT-VECTOR
 CL-TEST::SYMBOL-BIT-VECTOR-P
 CL-TEST::SYMBOL-BIT-XOR
 CL-TEST::SYMBOL-BLOCK
 CL-TEST::SYMBOL-BOOLE
 CL-TEST::SYMBOL-BOOLE-1
 CL-TEST::SYMBOL-BOOLE-2
 CL-TEST::SYMBOL-BOOLE-AND
 CL-TEST::SYMBOL-BOOLE-ANDC1
 CL-TEST::SYMBOL-BOOLE-ANDC2
 CL-TEST::SYMBOL-BOOLE-C1
 CL-TEST::SYMBOL-BOOLE-C2
 CL-TEST::SYMBOL-BOOLE-CLR
 CL-TEST::SYMBOL-BOOLE-EQV
 CL-TEST::SYMBOL-BOOLE-IOR
 CL-TEST::SYMBOL-BOOLE-NAND
 CL-TEST::SYMBOL-BOOLE-NOR
 CL-TEST::SYMBOL-BOOLE-ORC1
 CL-TEST::SYMBOL-BOOLE-ORC2
 CL-TEST::SYMBOL-BOOLE-SET
 CL-TEST::SYMBOL-BOOLE-XOR
 CL-TEST::SYMBOL-BOOLEAN
 CL-TEST::SYMBOL-BOTH-CASE-P
 CL-TEST::SYMBOL-BOUNDP
 CL-TEST::SYMBOL-BREAK
 CL-TEST::SYMBOL-BROADCAST-STREAM
 CL-TEST::SYMBOL-BROADCAST-STREAM-STREAMS
 CL-TEST::SYMBOL-BUILT-IN-CLASS
 CL-TEST::SYMBOL-BUTLAST
 CL-TEST::SYMBOL-BYTE
 CL-TEST::SYMBOL-BYTE-POSITION
 CL-TEST::SYMBOL-BYTE-SIZE
 CL-TEST::SYMBOL-CAAAAR
 CL-TEST::SYMBOL-CAAADR
 CL-TEST::SYMBOL-CAAAR
 CL-TEST::SYMBOL-CAADAR
 CL-TEST::SYMBOL-CAADDR
 CL-TEST::SYMBOL-CAADR
 CL-TEST::SYMBOL-CAAR
 CL-TEST::SYMBOL-CADAAR
 CL-TEST::SYMBOL-CADADR
 CL-TEST::SYMBOL-CADAR
 CL-TEST::SYMBOL-CADDAR
 CL-TEST::SYMBOL-CADDDR
 CL-TEST::SYMBOL-CADDR
 CL-TEST::SYMBOL-CADR
 CL-TEST::SYMBOL-CALL-ARGUMENTS-LIMIT
 CL-TEST::SYMBOL-CALL-METHOD
 CL-TEST::SYMBOL-CALL-NEXT-METHOD
 CL-TEST::SYMBOL-CAR
 CL-TEST::SYMBOL-CASE
 CL-TEST::SYMBOL-CATCH
 CL-TEST::SYMBOL-CCASE
 CL-TEST::SYMBOL-CDAAAR
 CL-TEST::SYMBOL-CDAADR
 CL-TEST::SYMBOL-CDAAR
 CL-TEST::SYMBOL-CDADAR
 CL-TEST::SYMBOL-CDADDR
 CL-TEST::SYMBOL-CDADR
 CL-TEST::SYMBOL-CDAR
 CL-TEST::SYMBOL-CDDAAR
 CL-TEST::SYMBOL-CDDADR
 CL-TEST::SYMBOL-CDDAR
 CL-TEST::SYMBOL-CDDDAR
 CL-TEST::SYMBOL-CDDDDR
 CL-TEST::SYMBOL-CDDDR
 CL-TEST::SYMBOL-CDDR
 CL-TEST::SYMBOL-CDR
 CL-TEST::SYMBOL-CEILING
 CL-TEST::SYMBOL-CELL-ERROR
 CL-TEST::SYMBOL-CELL-ERROR-NAME
 CL-TEST::SYMBOL-CERROR
 CL-TEST::SYMBOL-CHANGE-CLASS
 CL-TEST::SYMBOL-CHAR
 CL-TEST::SYMBOL-CHAR-CODE
 CL-TEST::SYMBOL-CHAR-CODE-LIMIT
 CL-TEST::SYMBOL-CHAR-DOWNCASE
 CL-TEST::SYMBOL-CHAR-EQUAL
 CL-TEST::SYMBOL-CHAR-GREATERP
 CL-TEST::SYMBOL-CHAR-INT
 CL-TEST::SYMBOL-CHAR-LESSP
 CL-TEST::SYMBOL-CHAR-NAME
 CL-TEST::SYMBOL-CHAR-NOT-EQUAL
 CL-TEST::SYMBOL-CHAR-NOT-GREATERP
 CL-TEST::SYMBOL-CHAR-NOT-LESSP
 CL-TEST::SYMBOL-CHAR-UPCASE
 CL-TEST::SYMBOL-CHAR/=
 CL-TEST::SYMBOL-CHAR<
 CL-TEST::SYMBOL-CHAR<=
 CL-TEST::SYMBOL-CHAR=
 CL-TEST::SYMBOL-CHAR>
 CL-TEST::SYMBOL-CHAR>=
 CL-TEST::SYMBOL-CHARACTER
 CL-TEST::SYMBOL-CHARACTERP
 CL-TEST::SYMBOL-CHECK-TYPE
 CL-TEST::SYMBOL-CIS
 CL-TEST::SYMBOL-CLASS
 CL-TEST::SYMBOL-CLASS-NAME
 CL-TEST::SYMBOL-CLASS-OF
 CL-TEST::SYMBOL-CLEAR-INPUT
 CL-TEST::SYMBOL-CLEAR-OUTPUT
 CL-TEST::SYMBOL-CLOSE
 CL-TEST::SYMBOL-CLRHASH
 CL-TEST::SYMBOL-CODE-CHAR
 CL-TEST::SYMBOL-COERCE
 CL-TEST::SYMBOL-COMPILATION-SPEED
 CL-TEST::SYMBOL-COMPILE
 CL-TEST::SYMBOL-COMPILE-FILE
 CL-TEST::SYMBOL-COMPILE-FILE-PATHNAME
 CL-TEST::SYMBOL-COMPILED-FUNCTION
 CL-TEST::SYMBOL-COMPILED-FUNCTION-P
 CL-TEST::SYMBOL-COMPILER-MACRO
 CL-TEST::SYMBOL-COMPILER-MACRO-FUNCTION
 CL-TEST::SYMBOL-COMPLEMENT
 CL-TEST::SYMBOL-COMPLEX
 CL-TEST::SYMBOL-COMPLEXP
 CL-TEST::SYMBOL-COMPUTE-APPLICABLE-METHODS
 CL-TEST::SYMBOL-COMPUTE-RESTARTS
 CL-TEST::SYMBOL-CONCATENATE
 CL-TEST::SYMBOL-CONCATENATED-STREAM
 CL-TEST::SYMBOL-CONCATENATED-STREAM-STREAMS
 CL-TEST::SYMBOL-COND
 CL-TEST::SYMBOL-CONDITION
 CL-TEST::SYMBOL-CONJUGATE
 CL-TEST::SYMBOL-CONS
 CL-TEST::SYMBOL-CONSP
 CL-TEST::SYMBOL-CONSTANTLY
 CL-TEST::SYMBOL-CONSTANTP
 CL-TEST::SYMBOL-CONTINUE
 CL-TEST::SYMBOL-CONTROL-ERROR
 CL-TEST::SYMBOL-COPY-ALIST
 CL-TEST::SYMBOL-COPY-LIST
 CL-TEST::SYMBOL-COPY-PPRINT-DISPATCH
 CL-TEST::SYMBOL-COPY-READTABLE
 CL-TEST::SYMBOL-COPY-SEQ
 CL-TEST::SYMBOL-COPY-STRUCTURE
 CL-TEST::SYMBOL-COPY-SYMBOL
 CL-TEST::SYMBOL-COPY-TREE
 CL-TEST::SYMBOL-COS
 CL-TEST::SYMBOL-COSH
 CL-TEST::SYMBOL-COUNT
 CL-TEST::SYMBOL-COUNT-IF
 CL-TEST::SYMBOL-COUNT-IF-NOT
 CL-TEST::SYMBOL-CTYPECASE
 CL-TEST::SYMBOL-DEBUG
 CL-TEST::SYMBOL-DECF
 CL-TEST::SYMBOL-DECLAIM
 CL-TEST::SYMBOL-DECLARATION
 CL-TEST::SYMBOL-DECLARE
 CL-TEST::SYMBOL-DECODE-FLOAT
 CL-TEST::SYMBOL-DECODE-UNIVERSAL-TIME
 CL-TEST::SYMBOL-DEFCLASS
 CL-TEST::SYMBOL-DEFCONSTANT
 CL-TEST::SYMBOL-DEFGENERIC
 CL-TEST::SYMBOL-DEFINE-COMPILER-MACRO
 CL-TEST::SYMBOL-DEFINE-CONDITION
 CL-TEST::SYMBOL-DEFINE-METHOD-COMBINATION
 CL-TEST::SYMBOL-DEFINE-MODIFY-MACRO
 CL-TEST::SYMBOL-DEFINE-SETF-EXPANDER
 CL-TEST::SYMBOL-DEFINE-SYMBOL-MACRO
 CL-TEST::SYMBOL-DEFMACRO
 CL-TEST::SYMBOL-DEFMETHOD
 CL-TEST::SYMBOL-DEFPACKAGE
 CL-TEST::SYMBOL-DEFPARAMETER
 CL-TEST::SYMBOL-DEFSETF
 CL-TEST::SYMBOL-DEFSTRUCT
 CL-TEST::SYMBOL-DEFTYPE
 CL-TEST::SYMBOL-DEFUN
 CL-TEST::SYMBOL-DEFVAR
 CL-TEST::SYMBOL-DELETE
 CL-TEST::SYMBOL-DELETE-DUPLICATES
 CL-TEST::SYMBOL-DELETE-FILE
 CL-TEST::SYMBOL-DELETE-IF
 CL-TEST::SYMBOL-DELETE-IF-NOT
 CL-TEST::SYMBOL-DELETE-PACKAGE
 CL-TEST::SYMBOL-DENOMINATOR
 CL-TEST::SYMBOL-DEPOSIT-FIELD
 CL-TEST::SYMBOL-DESCRIBE
 CL-TEST::SYMBOL-DESCRIBE-OBJECT
 CL-TEST::SYMBOL-DESTRUCTURING-BIND
 CL-TEST::SYMBOL-DIGIT-CHAR
 CL-TEST::SYMBOL-DIGIT-CHAR-P
 CL-TEST::SYMBOL-DIRECTORY
 CL-TEST::SYMBOL-DIRECTORY-NAMESTRING
 CL-TEST::SYMBOL-DISASSEMBLE
 CL-TEST::SYMBOL-DIVISION-BY-ZERO
 CL-TEST::SYMBOL-DO
 CL-TEST::SYMBOL-DO*
 CL-TEST::SYMBOL-DO-ALL-SYMBOLS
 CL-TEST::SYMBOL-DO-EXTERNAL-SYMBOLS
 CL-TEST::SYMBOL-DO-SYMBOLS
 CL-TEST::SYMBOL-DOCUMENTATION
 CL-TEST::SYMBOL-DOLIST
 CL-TEST::SYMBOL-DOTIMES
 CL-TEST::SYMBOL-DOUBLE-FLOAT
 CL-TEST::SYMBOL-DOUBLE-FLOAT-EPSILON
 CL-TEST::SYMBOL-DOUBLE-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-DPB
 CL-TEST::SYMBOL-DRIBBLE
 CL-TEST::SYMBOL-DYNAMIC-EXTENT
 CL-TEST::SYMBOL-ECASE
 CL-TEST::SYMBOL-ECHO-STREAM
 CL-TEST::SYMBOL-ECHO-STREAM-INPUT-STREAM
 CL-TEST::SYMBOL-ECHO-STREAM-OUTPUT-STREAM
 CL-TEST::SYMBOL-ED
 CL-TEST::SYMBOL-EIGHTH
 CL-TEST::SYMBOL-ELT
 CL-TEST::SYMBOL-ENCODE-UNIVERSAL-TIME
 CL-TEST::SYMBOL-END-OF-FILE
 CL-TEST::SYMBOL-ENDP
 CL-TEST::SYMBOL-ENOUGH-NAMESTRING
 CL-TEST::SYMBOL-ENSURE-DIRECTORIES-EXIST
 CL-TEST::SYMBOL-ENSURE-GENERIC-FUNCTION
 CL-TEST::SYMBOL-EQ
 CL-TEST::SYMBOL-EQL
 CL-TEST::SYMBOL-EQUAL
 CL-TEST::SYMBOL-EQUALP
 CL-TEST::SYMBOL-ERROR
 CL-TEST::SYMBOL-ETYPECASE
 CL-TEST::SYMBOL-EVAL
 CL-TEST::SYMBOL-EVAL-WHEN
 CL-TEST::SYMBOL-EVENP
 CL-TEST::SYMBOL-EVERY
 CL-TEST::SYMBOL-EXP
 CL-TEST::SYMBOL-EXPORT
 CL-TEST::SYMBOL-EXPT
 CL-TEST::SYMBOL-EXTENDED-CHAR
 CL-TEST::SYMBOL-FBOUNDP
 CL-TEST::SYMBOL-FCEILING
 CL-TEST::SYMBOL-FDEFINITION
 CL-TEST::SYMBOL-FFLOOR
 CL-TEST::SYMBOL-FIFTH
 CL-TEST::SYMBOL-FILE-AUTHOR
 CL-TEST::SYMBOL-FILE-ERROR
 CL-TEST::SYMBOL-FILE-ERROR-PATHNAME
 CL-TEST::SYMBOL-FILE-LENGTH
 CL-TEST::SYMBOL-FILE-NAMESTRING
 CL-TEST::SYMBOL-FILE-POSITION
 CL-TEST::SYMBOL-FILE-STREAM
 CL-TEST::SYMBOL-FILE-STRING-LENGTH
 CL-TEST::SYMBOL-FILE-WRITE-DATE
 CL-TEST::SYMBOL-FILL
 CL-TEST::SYMBOL-FILL-POINTER
 CL-TEST::SYMBOL-FIND
 CL-TEST::SYMBOL-FIND-ALL-SYMBOLS
 CL-TEST::SYMBOL-FIND-CLASS
 CL-TEST::SYMBOL-FIND-IF
 CL-TEST::SYMBOL-FIND-IF-NOT
 CL-TEST::SYMBOL-FIND-METHOD
 CL-TEST::SYMBOL-FIND-PACKAGE
 CL-TEST::SYMBOL-FIND-RESTART
 CL-TEST::SYMBOL-FIND-SYMBOL
 CL-TEST::SYMBOL-FINISH-OUTPUT
 CL-TEST::SYMBOL-FIRST
 CL-TEST::SYMBOL-FIXNUM
 CL-TEST::SYMBOL-FLET
 CL-TEST::SYMBOL-FLOAT
 CL-TEST::SYMBOL-FLOAT-DIGITS
 CL-TEST::SYMBOL-FLOAT-PRECISION
 CL-TEST::SYMBOL-FLOAT-RADIX
 CL-TEST::SYMBOL-FLOAT-SIGN
 CL-TEST::SYMBOL-FLOATING-POINT-INEXACT
 CL-TEST::SYMBOL-FLOATING-POINT-INVALID-OPERATION
 CL-TEST::SYMBOL-FLOATING-POINT-OVERFLOW
 CL-TEST::SYMBOL-FLOATING-POINT-UNDERFLOW
 CL-TEST::SYMBOL-FLOATP
 CL-TEST::SYMBOL-FLOOR
 CL-TEST::SYMBOL-FMAKUNBOUND
 CL-TEST::SYMBOL-FORCE-OUTPUT
 CL-TEST::SYMBOL-FORMAT
 CL-TEST::SYMBOL-FORMATTER
 CL-TEST::SYMBOL-FOURTH
 CL-TEST::SYMBOL-FRESH-LINE
 CL-TEST::SYMBOL-FROUND
 CL-TEST::SYMBOL-FTRUNCATE
 CL-TEST::SYMBOL-FTYPE
 CL-TEST::SYMBOL-FUNCALL
 SYMBOL-FUNCTION
 CL-TEST::SYMBOL-FUNCTION-KEYWORDS
 CL-TEST::SYMBOL-FUNCTION-LAMBDA-EXPRESSION
 CL-TEST::SYMBOL-FUNCTIONP
 CL-TEST::SYMBOL-GCD
 CL-TEST::SYMBOL-GENERIC-FUNCTION
 CL-TEST::SYMBOL-GENSYM
 CL-TEST::SYMBOL-GENTEMP
 CL-TEST::SYMBOL-GET
 CL-TEST::SYMBOL-GET-DECODED-TIME
 CL-TEST::SYMBOL-GET-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-GET-INTERNAL-REAL-TIME
 CL-TEST::SYMBOL-GET-INTERNAL-RUN-TIME
 CL-TEST::SYMBOL-GET-MACRO-CHARACTER
 CL-TEST::SYMBOL-GET-OUTPUT-STREAM-STRING
 CL-TEST::SYMBOL-GET-PROPERTIES
 CL-TEST::SYMBOL-GET-SETF-EXPANSION
 CL-TEST::SYMBOL-GET-UNIVERSAL-TIME
 CL-TEST::SYMBOL-GETF
 CL-TEST::SYMBOL-GETHASH
 CL-TEST::SYMBOL-GO
 CL-TEST::SYMBOL-GRAPHIC-CHAR-P
 CL-TEST::SYMBOL-HANDLER-BIND
 CL-TEST::SYMBOL-HANDLER-CASE
 CL-TEST::SYMBOL-HASH-TABLE
 CL-TEST::SYMBOL-HASH-TABLE-COUNT
 CL-TEST::SYMBOL-HASH-TABLE-P
 CL-TEST::SYMBOL-HASH-TABLE-REHASH-SIZE
 CL-TEST::SYMBOL-HASH-TABLE-REHASH-THRESHOLD
 CL-TEST::SYMBOL-HASH-TABLE-SIZE
 CL-TEST::SYMBOL-HASH-TABLE-TEST
 CL-TEST::SYMBOL-HOST-NAMESTRING
 CL-TEST::SYMBOL-IDENTITY
 CL-TEST::SYMBOL-IF
 CL-TEST::SYMBOL-IGNORABLE
 CL-TEST::SYMBOL-IGNORE
 CL-TEST::SYMBOL-IGNORE-ERRORS
 CL-TEST::SYMBOL-IMAGPART
 CL-TEST::SYMBOL-IMPORT
 CL-TEST::SYMBOL-IN-PACKAGE
 CL-TEST::SYMBOL-INCF
 CL-TEST::SYMBOL-INITIALIZE-INSTANCE
 CL-TEST::SYMBOL-INLINE
 CL-TEST::SYMBOL-INPUT-STREAM-P
 CL-TEST::SYMBOL-INSPECT
 CL-TEST::SYMBOL-INTEGER
 CL-TEST::SYMBOL-INTEGER-DECODE-FLOAT
 CL-TEST::SYMBOL-INTEGER-LENGTH
 CL-TEST::SYMBOL-INTEGERP
 CL-TEST::SYMBOL-INTERACTIVE-STREAM-P
 CL-TEST::SYMBOL-INTERN
 CL-TEST::SYMBOL-INTERNAL-TIME-UNITS-PER-SECOND
 CL-TEST::SYMBOL-INTERSECTION
 CL-TEST::SYMBOL-INVALID-METHOD-ERROR
 CL-TEST::SYMBOL-INVOKE-DEBUGGER
 CL-TEST::SYMBOL-INVOKE-RESTART
 CL-TEST::SYMBOL-INVOKE-RESTART-INTERACTIVELY
 CL-TEST::SYMBOL-ISQRT
 CL-TEST::SYMBOL-KEYWORD
 CL-TEST::SYMBOL-KEYWORDP
 CL-TEST::SYMBOL-LABELS
 CL-TEST::SYMBOL-LAMBDA
 CL-TEST::SYMBOL-LAMBDA-LIST-KEYWORDS
 CL-TEST::SYMBOL-LAMBDA-PARAMETERS-LIMIT
 CL-TEST::SYMBOL-LAST
 CL-TEST::SYMBOL-LCM
 CL-TEST::SYMBOL-LDB
 CL-TEST::SYMBOL-LDB-TEST
 CL-TEST::SYMBOL-LDIFF
 CL-TEST::SYMBOL-LEAST-NEGATIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-LENGTH
 CL-TEST::SYMBOL-LET
 CL-TEST::SYMBOL-LET*
 CL-TEST::SYMBOL-LISP-IMPLEMENTATION-TYPE
 CL-TEST::SYMBOL-LISP-IMPLEMENTATION-VERSION
 CL-TEST::SYMBOL-LIST
 CL-TEST::SYMBOL-LIST*
 CL-TEST::SYMBOL-LIST-ALL-PACKAGES
 CL-TEST::SYMBOL-LIST-LENGTH
 CL-TEST::SYMBOL-LISTEN
 CL-TEST::SYMBOL-LISTP
 CL-TEST::SYMBOL-LOAD
 CL-TEST::SYMBOL-LOAD-LOGICAL-PATHNAME-TRANSLATIONS
 CL-TEST::SYMBOL-LOAD-TIME-VALUE
 CL-TEST::SYMBOL-LOCALLY
 CL-TEST::SYMBOL-LOG
 CL-TEST::SYMBOL-LOGAND
 CL-TEST::SYMBOL-LOGANDC1
 CL-TEST::SYMBOL-LOGANDC2
 CL-TEST::SYMBOL-LOGBITP
 CL-TEST::SYMBOL-LOGCOUNT
 CL-TEST::SYMBOL-LOGEQV
 CL-TEST::SYMBOL-LOGICAL-PATHNAME
 CL-TEST::SYMBOL-LOGICAL-PATHNAME-TRANSLATIONS
 CL-TEST::SYMBOL-LOGIOR
 CL-TEST::SYMBOL-LOGNAND
 CL-TEST::SYMBOL-LOGNOR
 CL-TEST::SYMBOL-LOGNOT
 CL-TEST::SYMBOL-LOGORC1
 CL-TEST::SYMBOL-LOGORC2
 CL-TEST::SYMBOL-LOGTEST
 CL-TEST::SYMBOL-LOGXOR
 CL-TEST::SYMBOL-LONG-FLOAT
 CL-TEST::SYMBOL-LONG-FLOAT-EPSILON
 CL-TEST::SYMBOL-LONG-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-LONG-SITE-NAME
 CL-TEST::SYMBOL-LOOP
 CL-TEST::SYMBOL-LOOP-FINISH
 CL-TEST::SYMBOL-LOWER-CASE-P
 CL-TEST::SYMBOL-MACHINE-INSTANCE
 CL-TEST::SYMBOL-MACHINE-TYPE
 CL-TEST::SYMBOL-MACHINE-VERSION
 CL-TEST::SYMBOL-MACRO-FUNCTION
 CL-TEST::SYMBOL-MACROEXPAND
 CL-TEST::SYMBOL-MACROEXPAND-1
 SYMBOL-MACROLET
 CL-TEST::SYMBOL-MAKE-ARRAY
 CL-TEST::SYMBOL-MAKE-BROADCAST-STREAM
 CL-TEST::SYMBOL-MAKE-CONCATENATED-STREAM
 CL-TEST::SYMBOL-MAKE-CONDITION
 CL-TEST::SYMBOL-MAKE-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-MAKE-ECHO-STREAM
 CL-TEST::SYMBOL-MAKE-HASH-TABLE
 CL-TEST::SYMBOL-MAKE-INSTANCE
 CL-TEST::SYMBOL-MAKE-INSTANCES-OBSOLETE
 CL-TEST::SYMBOL-MAKE-LIST
 CL-TEST::SYMBOL-MAKE-LOAD-FORM
 CL-TEST::SYMBOL-MAKE-LOAD-FORM-SAVING-SLOTS
 CL-TEST::SYMBOL-MAKE-METHOD
 CL-TEST::SYMBOL-MAKE-PACKAGE
 CL-TEST::SYMBOL-MAKE-PATHNAME
 CL-TEST::SYMBOL-MAKE-RANDOM-STATE
 CL-TEST::SYMBOL-MAKE-SEQUENCE
 CL-TEST::SYMBOL-MAKE-STRING
 CL-TEST::SYMBOL-MAKE-STRING-INPUT-STREAM
 CL-TEST::SYMBOL-MAKE-STRING-OUTPUT-STREAM
 CL-TEST::SYMBOL-MAKE-SYMBOL
 CL-TEST::SYMBOL-MAKE-SYNONYM-STREAM
 CL-TEST::SYMBOL-MAKE-TWO-WAY-STREAM
 CL-TEST::SYMBOL-MAKUNBOUND
 CL-TEST::SYMBOL-MAP
 CL-TEST::SYMBOL-MAP-INTO
 CL-TEST::SYMBOL-MAPC
 CL-TEST::SYMBOL-MAPCAN
 CL-TEST::SYMBOL-MAPCAR
 CL-TEST::SYMBOL-MAPCON
 CL-TEST::SYMBOL-MAPHASH
 CL-TEST::SYMBOL-MAPL
 CL-TEST::SYMBOL-MAPLIST
 CL-TEST::SYMBOL-MASK-FIELD
 CL-TEST::SYMBOL-MAX
 CL-TEST::SYMBOL-MEMBER
 CL-TEST::SYMBOL-MEMBER-IF
 CL-TEST::SYMBOL-MEMBER-IF-NOT
 CL-TEST::SYMBOL-MERGE
 CL-TEST::SYMBOL-MERGE-PATHNAMES
 CL-TEST::SYMBOL-METHOD
 CL-TEST::SYMBOL-METHOD-COMBINATION
 CL-TEST::SYMBOL-METHOD-COMBINATION-ERROR
 CL-TEST::SYMBOL-METHOD-QUALIFIERS
 CL-TEST::SYMBOL-MIN
 CL-TEST::SYMBOL-MINUSP
 CL-TEST::SYMBOL-MISMATCH
 CL-TEST::SYMBOL-MOD
 CL-TEST::SYMBOL-MOST-NEGATIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-FIXNUM
 CL-TEST::SYMBOL-MOST-NEGATIVE-LONG-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-FIXNUM
 CL-TEST::SYMBOL-MOST-POSITIVE-LONG-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-MUFFLE-WARNING
 CL-TEST::SYMBOL-MULTIPLE-VALUE-BIND
 CL-TEST::SYMBOL-MULTIPLE-VALUE-CALL
 CL-TEST::SYMBOL-MULTIPLE-VALUE-LIST
 CL-TEST::SYMBOL-MULTIPLE-VALUE-PROG1
 CL-TEST::SYMBOL-MULTIPLE-VALUE-SETQ
 CL-TEST::SYMBOL-MULTIPLE-VALUES-LIMIT
 CL-TEST::SYMBOL-NAME-CHAR
 CL-TEST::SYMBOL-NAMESTRING
 CL-TEST::SYMBOL-NBUTLAST
 CL-TEST::SYMBOL-NCONC
 CL-TEST::SYMBOL-NEXT-METHOD-P
 CL-TEST::SYMBOL-NIL
 CL-TEST::SYMBOL-NINTERSECTION
 CL-TEST::SYMBOL-NINTH
 CL-TEST::SYMBOL-NO-APPLICABLE-METHOD
 CL-TEST::SYMBOL-NO-NEXT-METHOD
 CL-TEST::SYMBOL-NOT
 CL-TEST::SYMBOL-NOTANY
 CL-TEST::SYMBOL-NOTEVERY
 CL-TEST::SYMBOL-NOTINLINE
 CL-TEST::SYMBOL-NRECONC
 CL-TEST::SYMBOL-NREVERSE
 CL-TEST::SYMBOL-NSET-DIFFERENCE
 CL-TEST::SYMBOL-NSET-EXCLUSIVE-OR
 CL-TEST::SYMBOL-NSTRING-CAPITALIZE
 CL-TEST::SYMBOL-NSTRING-DOWNCASE
 CL-TEST::SYMBOL-NSTRING-UPCASE
 CL-TEST::SYMBOL-NSUBLIS
 CL-TEST::SYMBOL-NSUBST
 CL-TEST::SYMBOL-NSUBST-IF
 CL-TEST::SYMBOL-NSUBST-IF-NOT
 CL-TEST::SYMBOL-NSUBSTITUTE
 CL-TEST::SYMBOL-NSUBSTITUTE-IF
 CL-TEST::SYMBOL-NSUBSTITUTE-IF-NOT
 CL-TEST::SYMBOL-NTH
 CL-TEST::SYMBOL-NTH-VALUE
 CL-TEST::SYMBOL-NTHCDR
 CL-TEST::SYMBOL-NULL
 CL-TEST::SYMBOL-NUMBER
 CL-TEST::SYMBOL-NUMBERP
 CL-TEST::SYMBOL-NUMERATOR
 CL-TEST::SYMBOL-NUNION
 CL-TEST::SYMBOL-ODDP
 CL-TEST::SYMBOL-OPEN
 CL-TEST::SYMBOL-OPEN-STREAM-P
 CL-TEST::SYMBOL-OPTIMIZE
 CL-TEST::SYMBOL-OR
 CL-TEST::SYMBOL-OTHERWISE
 CL-TEST::SYMBOL-OUTPUT-STREAM-P
 SYMBOL-PACKAGE
 CL-TEST::SYMBOL-PACKAGE-ERROR
 CL-TEST::SYMBOL-PACKAGE-ERROR-PACKAGE
 CL-TEST::SYMBOL-PACKAGE-NAME
 CL-TEST::SYMBOL-PACKAGE-NICKNAMES
 CL-TEST::SYMBOL-PACKAGE-SHADOWING-SYMBOLS
 CL-TEST::SYMBOL-PACKAGE-USE-LIST
 CL-TEST::SYMBOL-PACKAGE-USED-BY-LIST
 CL-TEST::SYMBOL-PACKAGEP
 CL-TEST::SYMBOL-PAIRLIS
 CL-TEST::SYMBOL-PARSE-ERROR
 CL-TEST::SYMBOL-PARSE-INTEGER
 CL-TEST::SYMBOL-PARSE-NAMESTRING
 CL-TEST::SYMBOL-PATHNAME
 CL-TEST::SYMBOL-PATHNAME-DEVICE
 CL-TEST::SYMBOL-PATHNAME-DIRECTORY
 CL-TEST::SYMBOL-PATHNAME-HOST
 CL-TEST::SYMBOL-PATHNAME-MATCH-P
 CL-TEST::SYMBOL-PATHNAME-NAME
 CL-TEST::SYMBOL-PATHNAME-TYPE
 CL-TEST::SYMBOL-PATHNAME-VERSION
 CL-TEST::SYMBOL-PATHNAMEP
 CL-TEST::SYMBOL-PEEK-CHAR
 CL-TEST::SYMBOL-PHASE
 CL-TEST::SYMBOL-PI
 CL-TEST::SYMBOL-PLUSP
 CL-TEST::SYMBOL-POP
 CL-TEST::SYMBOL-POSITION
 CL-TEST::SYMBOL-POSITION-IF
 CL-TEST::SYMBOL-POSITION-IF-NOT
 CL-TEST::SYMBOL-PPRINT
 CL-TEST::SYMBOL-PPRINT-DISPATCH
 CL-TEST::SYMBOL-PPRINT-EXIT-IF-LIST-EXHAUSTED
 CL-TEST::SYMBOL-PPRINT-FILL
 CL-TEST::SYMBOL-PPRINT-INDENT
 CL-TEST::SYMBOL-PPRINT-LINEAR
 CL-TEST::SYMBOL-PPRINT-LOGICAL-BLOCK
 CL-TEST::SYMBOL-PPRINT-NEWLINE
 CL-TEST::SYMBOL-PPRINT-POP
 CL-TEST::SYMBOL-PPRINT-TAB
 CL-TEST::SYMBOL-PPRINT-TABULAR
 CL-TEST::SYMBOL-PRIN1
 CL-TEST::SYMBOL-PRIN1-TO-STRING
 CL-TEST::SYMBOL-PRINC
 CL-TEST::SYMBOL-PRINC-TO-STRING
 CL-TEST::SYMBOL-PRINT
 CL-TEST::SYMBOL-PRINT-NOT-READABLE
 CL-TEST::SYMBOL-PRINT-NOT-READABLE-OBJECT
 CL-TEST::SYMBOL-PRINT-OBJECT
 CL-TEST::SYMBOL-PRINT-UNREADABLE-OBJECT
 CL-TEST::SYMBOL-PROBE-FILE
 CL-TEST::SYMBOL-PROCLAIM
 CL-TEST::SYMBOL-PROG
 CL-TEST::SYMBOL-PROG*
 CL-TEST::SYMBOL-PROG1
 CL-TEST::SYMBOL-PROG2
 CL-TEST::SYMBOL-PROGN
 CL-TEST::SYMBOL-PROGRAM-ERROR
 CL-TEST::SYMBOL-PROGV
 CL-TEST::SYMBOL-PROVIDE
 CL-TEST::SYMBOL-PSETF
 CL-TEST::SYMBOL-PSETQ
 CL-TEST::SYMBOL-PUSH
 CL-TEST::SYMBOL-PUSHNEW
 CL-TEST::SYMBOL-QUOTE
 CL-TEST::SYMBOL-RANDOM
 CL-TEST::SYMBOL-RANDOM-STATE
 CL-TEST::SYMBOL-RANDOM-STATE-P
 CL-TEST::SYMBOL-RASSOC
 CL-TEST::SYMBOL-RASSOC-IF
 CL-TEST::SYMBOL-RASSOC-IF-NOT
 CL-TEST::SYMBOL-RATIO
 CL-TEST::SYMBOL-RATIONAL
 CL-TEST::SYMBOL-RATIONALIZE
 CL-TEST::SYMBOL-RATIONALP
 CL-TEST::SYMBOL-READ
 CL-TEST::SYMBOL-READ-BYTE
 CL-TEST::SYMBOL-READ-CHAR
 CL-TEST::SYMBOL-READ-CHAR-NO-HANG
 CL-TEST::SYMBOL-READ-DELIMITED-LIST
 CL-TEST::SYMBOL-READ-FROM-STRING
 CL-TEST::SYMBOL-READ-LINE
 CL-TEST::SYMBOL-READ-PRESERVING-WHITESPACE
 CL-TEST::SYMBOL-READ-SEQUENCE
 CL-TEST::SYMBOL-READER-ERROR
 CL-TEST::SYMBOL-READTABLE
 CL-TEST::SYMBOL-READTABLE-CASE
 CL-TEST::SYMBOL-READTABLEP
 CL-TEST::SYMBOL-REAL
 CL-TEST::SYMBOL-REALP
 CL-TEST::SYMBOL-REALPART
 CL-TEST::SYMBOL-REDUCE
 CL-TEST::SYMBOL-REINITIALIZE-INSTANCE
 CL-TEST::SYMBOL-REM
 CL-TEST::SYMBOL-REMF
 CL-TEST::SYMBOL-REMHASH
 CL-TEST::SYMBOL-REMOVE
 CL-TEST::SYMBOL-REMOVE-DUPLICATES
 CL-TEST::SYMBOL-REMOVE-IF
 CL-TEST::SYMBOL-REMOVE-IF-NOT
 CL-TEST::SYMBOL-REMOVE-METHOD
 CL-TEST::SYMBOL-REMPROP
 CL-TEST::SYMBOL-RENAME-FILE
 CL-TEST::SYMBOL-RENAME-PACKAGE
 CL-TEST::SYMBOL-REPLACE
 CL-TEST::SYMBOL-REQUIRE
 CL-TEST::SYMBOL-REST
 CL-TEST::SYMBOL-RESTART
 CL-TEST::SYMBOL-RESTART-BIND
 CL-TEST::SYMBOL-RESTART-CASE
 CL-TEST::SYMBOL-RESTART-NAME
 CL-TEST::SYMBOL-RETURN
 CL-TEST::SYMBOL-RETURN-FROM
 CL-TEST::SYMBOL-REVAPPEND
 CL-TEST::SYMBOL-REVERSE
 CL-TEST::SYMBOL-ROOM
 CL-TEST::SYMBOL-ROTATEF
 CL-TEST::SYMBOL-ROUND
 CL-TEST::SYMBOL-ROW-MAJOR-AREF
 CL-TEST::SYMBOL-RPLACA
 CL-TEST::SYMBOL-RPLACD
 CL-TEST::SYMBOL-SAFETY
 CL-TEST::SYMBOL-SATISFIES
 CL-TEST::SYMBOL-SBIT
 CL-TEST::SYMBOL-SCALE-FLOAT
 CL-TEST::SYMBOL-SCHAR
 CL-TEST::SYMBOL-SEARCH
 CL-TEST::SYMBOL-SECOND
 CL-TEST::SYMBOL-SEQUENCE
 CL-TEST::SYMBOL-SERIOUS-CONDITION
 CL-TEST::SYMBOL-SET
 CL-TEST::SYMBOL-SET-DIFFERENCE
 CL-TEST::SYMBOL-SET-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-SET-EXCLUSIVE-OR
 CL-TEST::SYMBOL-SET-MACRO-CHARACTER
 CL-TEST::SYMBOL-SET-PPRINT-DISPATCH
 CL-TEST::SYMBOL-SET-SYNTAX-FROM-CHAR
 CL-TEST::SYMBOL-SETF
 CL-TEST::SYMBOL-SETQ
 CL-TEST::SYMBOL-SEVENTH
 CL-TEST::SYMBOL-SHADOW
 CL-TEST::SYMBOL-SHADOWING-IMPORT
 CL-TEST::SYMBOL-SHARED-INITIALIZE
 CL-TEST::SYMBOL-SHIFTF
 CL-TEST::SYMBOL-SHORT-FLOAT
 CL-TEST::SYMBOL-SHORT-FLOAT-EPSILON
 CL-TEST::SYMBOL-SHORT-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-SHORT-SITE-NAME
 CL-TEST::SYMBOL-SIGNAL
 CL-TEST::SYMBOL-SIGNED-BYTE
 CL-TEST::SYMBOL-SIGNUM
 CL-TEST::SYMBOL-SIMPLE-ARRAY
 CL-TEST::SYMBOL-SIMPLE-BASE-STRING
 CL-TEST::SYMBOL-SIMPLE-BIT-VECTOR
 CL-TEST::SYMBOL-SIMPLE-BIT-VECTOR-P
 CL-TEST::SYMBOL-SIMPLE-CONDITION
 CL-TEST::SYMBOL-SIMPLE-CONDITION-FORMAT-ARGUMENTS
 CL-TEST::SYMBOL-SIMPLE-CONDITION-FORMAT-CONTROL
 CL-TEST::SYMBOL-SIMPLE-ERROR
 CL-TEST::SYMBOL-SIMPLE-STRING
 CL-TEST::SYMBOL-SIMPLE-STRING-P
 CL-TEST::SYMBOL-SIMPLE-TYPE-ERROR
 CL-TEST::SYMBOL-SIMPLE-VECTOR
 CL-TEST::SYMBOL-SIMPLE-VECTOR-P
 CL-TEST::SYMBOL-SIMPLE-WARNING
 CL-TEST::SYMBOL-SIN
 CL-TEST::SYMBOL-SINGLE-FLOAT
 CL-TEST::SYMBOL-SINGLE-FLOAT-EPSILON
 CL-TEST::SYMBOL-SINGLE-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-SINH
 CL-TEST::SYMBOL-SIXTH
 CL-TEST::SYMBOL-SLEEP
 CL-TEST::SYMBOL-SLOT-BOUNDP
 CL-TEST::SYMBOL-SLOT-EXISTS-P
 CL-TEST::SYMBOL-SLOT-MAKUNBOUND
 CL-TEST::SYMBOL-SLOT-MISSING
 CL-TEST::SYMBOL-SLOT-UNBOUND
 CL-TEST::SYMBOL-SLOT-VALUE
 CL-TEST::SYMBOL-SOFTWARE-TYPE
 CL-TEST::SYMBOL-SOFTWARE-VERSION
 CL-TEST::SYMBOL-SOME
 CL-TEST::SYMBOL-SORT
 CL-TEST::SYMBOL-SPACE
 CL-TEST::SYMBOL-SPECIAL
 CL-TEST::SYMBOL-SPECIAL-OPERATOR-P
 CL-TEST::SYMBOL-SPEED
 CL-TEST::SYMBOL-SQRT
 CL-TEST::SYMBOL-STABLE-SORT
 CL-TEST::SYMBOL-STANDARD
 CL-TEST::SYMBOL-STANDARD-CHAR
 CL-TEST::SYMBOL-STANDARD-CHAR-P
 CL-TEST::SYMBOL-STANDARD-CLASS
 CL-TEST::SYMBOL-STANDARD-GENERIC-FUNCTION
 CL-TEST::SYMBOL-STANDARD-METHOD
 CL-TEST::SYMBOL-STANDARD-OBJECT
 CL-TEST::SYMBOL-STEP
 CL-TEST::SYMBOL-STORAGE-CONDITION
 CL-TEST::SYMBOL-STORE-VALUE
 CL-TEST::SYMBOL-STREAM
 CL-TEST::SYMBOL-STREAM-ELEMENT-TYPE
 CL-TEST::SYMBOL-STREAM-ERROR
 CL-TEST::SYMBOL-STREAM-ERROR-STREAM
 CL-TEST::SYMBOL-STREAM-EXTERNAL-FORMAT
 CL-TEST::SYMBOL-STREAMP
 CL-TEST::SYMBOL-STRING
 CL-TEST::SYMBOL-STRING-CAPITALIZE
 CL-TEST::SYMBOL-STRING-DOWNCASE
 CL-TEST::SYMBOL-STRING-EQUAL
 CL-TEST::SYMBOL-STRING-GREATERP
 CL-TEST::SYMBOL-STRING-LEFT-TRIM
 CL-TEST::SYMBOL-STRING-LESSP
 CL-TEST::SYMBOL-STRING-NOT-EQUAL
 CL-TEST::SYMBOL-STRING-NOT-GREATERP
 CL-TEST::SYMBOL-STRING-NOT-LESSP
 CL-TEST::SYMBOL-STRING-RIGHT-TRIM
 CL-TEST::SYMBOL-STRING-STREAM
 CL-TEST::SYMBOL-STRING-TRIM
 CL-TEST::SYMBOL-STRING-UPCASE
 CL-TEST::SYMBOL-STRING/=
 CL-TEST::SYMBOL-STRING<
 CL-TEST::SYMBOL-STRING<=
 CL-TEST::SYMBOL-STRING=
 CL-TEST::SYMBOL-STRING>
 CL-TEST::SYMBOL-STRING>=
 CL-TEST::SYMBOL-STRINGP
 CL-TEST::SYMBOL-STRUCTURE
 CL-TEST::SYMBOL-STRUCTURE-CLASS
 CL-TEST::SYMBOL-STRUCTURE-OBJECT
 CL-TEST::SYMBOL-STYLE-WARNING
 CL-TEST::SYMBOL-SUBLIS
 CL-TEST::SYMBOL-SUBSEQ
 CL-TEST::SYMBOL-SUBSETP
 CL-TEST::SYMBOL-SUBST
 CL-TEST::SYMBOL-SUBST-IF
 CL-TEST::SYMBOL-SUBST-IF-NOT
 CL-TEST::SYMBOL-SUBSTITUTE
 CL-TEST::SYMBOL-SUBSTITUTE-IF
 CL-TEST::SYMBOL-SUBSTITUTE-IF-NOT
 CL-TEST::SYMBOL-SUBTYPEP
 CL-TEST::SYMBOL-SVREF
 CL-TEST::SYMBOL-SXHASH
 CL-TEST::SYMBOL-SYMBOL
 CL-TEST::SYMBOL-SYMBOL-FUNCTION
 CL-TEST::SYMBOL-SYMBOL-MACROLET
 CL-TEST::SYMBOL-SYMBOL-NAME
 CL-TEST::SYMBOL-SYMBOL-PACKAGE
 CL-TEST::SYMBOL-SYMBOL-PLIST
 CL-TEST::SYMBOL-SYMBOL-VALUE
 CL-TEST::SYMBOL-SYMBOLP
 CL-TEST::SYMBOL-SYNONYM-STREAM
 CL-TEST::SYMBOL-SYNONYM-STREAM-SYMBOL
 CL-TEST::SYMBOL-T
 CL-TEST::SYMBOL-TAGBODY
 CL-TEST::SYMBOL-TAILP
 CL-TEST::SYMBOL-TAN
 CL-TEST::SYMBOL-TANH
 CL-TEST::SYMBOL-TENTH
 CL-TEST::SYMBOL-TERPRI
 CL-TEST::SYMBOL-THE
 CL-TEST::SYMBOL-THIRD
 CL-TEST::SYMBOL-THROW
 CL-TEST::SYMBOL-TIME
 CL-TEST::SYMBOL-TRACE
 CL-TEST::SYMBOL-TRANSLATE-LOGICAL-PATHNAME
 CL-TEST::SYMBOL-TRANSLATE-PATHNAME
 CL-TEST::SYMBOL-TREE-EQUAL
 CL-TEST::SYMBOL-TRUENAME
 CL-TEST::SYMBOL-TRUNCATE
 CL-TEST::SYMBOL-TWO-WAY-STREAM
 CL-TEST::SYMBOL-TWO-WAY-STREAM-INPUT-STREAM
 CL-TEST::SYMBOL-TWO-WAY-STREAM-OUTPUT-STREAM
 CL-TEST::SYMBOL-TYPE
 CL-TEST::SYMBOL-TYPE-ERROR
 CL-TEST::SYMBOL-TYPE-ERROR-DATUM
 CL-TEST::SYMBOL-TYPE-ERROR-EXPECTED-TYPE
 CL-TEST::SYMBOL-TYPE-OF
 CL-TEST::SYMBOL-TYPECASE
 CL-TEST::SYMBOL-TYPEP
 CL-TEST::SYMBOL-UNBOUND-SLOT
 CL-TEST::SYMBOL-UNBOUND-SLOT-INSTANCE
 CL-TEST::SYMBOL-UNBOUND-VARIABLE
 CL-TEST::SYMBOL-UNDEFINED-FUNCTION
 CL-TEST::SYMBOL-UNEXPORT
 CL-TEST::SYMBOL-UNINTERN
 CL-TEST::SYMBOL-UNION
 CL-TEST::SYMBOL-UNLESS
 CL-TEST::SYMBOL-UNREAD-CHAR
 CL-TEST::SYMBOL-UNSIGNED-BYTE
 CL-TEST::SYMBOL-UNTRACE
 CL-TEST::SYMBOL-UNUSE-PACKAGE
 CL-TEST::SYMBOL-UNWIND-PROTECT
 CL-TEST::SYMBOL-UPDATE-INSTANCE-FOR-DIFFERENT-CLASS
 CL-TEST::SYMBOL-UPDATE-INSTANCE-FOR-REDEFINED-CLASS
 CL-TEST::SYMBOL-UPGRADED-ARRAY-ELEMENT-TYPE
 CL-TEST::SYMBOL-UPGRADED-COMPLEX-PART-TYPE
 CL-TEST::SYMBOL-UPPER-CASE-P
 CL-TEST::SYMBOL-USE-PACKAGE
 CL-TEST::SYMBOL-USE-VALUE
 CL-TEST::SYMBOL-USER-HOMEDIR-PATHNAME
 CL-TEST::SYMBOL-VALUES
 CL-TEST::SYMBOL-VALUES-LIST
 CL-TEST::SYMBOL-VARIABLE
 CL-TEST::SYMBOL-VECTOR
 CL-TEST::SYMBOL-VECTOR-POP
 CL-TEST::SYMBOL-VECTOR-PUSH
 CL-TEST::SYMBOL-VECTOR-PUSH-EXTEND
 CL-TEST::SYMBOL-VECTORP
 CL-TEST::SYMBOL-WARN
 CL-TEST::SYMBOL-WARNING
 CL-TEST::SYMBOL-WHEN
 CL-TEST::SYMBOL-WILD-PATHNAME-P
 CL-TEST::SYMBOL-WITH-ACCESSORS
 CL-TEST::SYMBOL-WITH-COMPILATION-UNIT
 CL-TEST::SYMBOL-WITH-CONDITION-RESTARTS
 CL-TEST::SYMBOL-WITH-HASH-TABLE-ITERATOR
 CL-TEST::SYMBOL-WITH-INPUT-FROM-STRING
 CL-TEST::SYMBOL-WITH-OPEN-FILE
 CL-TEST::SYMBOL-WITH-OPEN-STREAM
 CL-TEST::SYMBOL-WITH-OUTPUT-TO-STRING
 CL-TEST::SYMBOL-WITH-PACKAGE-ITERATOR
 CL-TEST::SYMBOL-WITH-SIMPLE-RESTART
 CL-TEST::SYMBOL-WITH-SLOTS
 CL-TEST::SYMBOL-WITH-STANDARD-IO-SYNTAX
 CL-TEST::SYMBOL-WRITE
 CL-TEST::SYMBOL-WRITE-BYTE
 CL-TEST::SYMBOL-WRITE-CHAR
 CL-TEST::SYMBOL-WRITE-LINE
 CL-TEST::SYMBOL-WRITE-SEQUENCE
 CL-TEST::SYMBOL-WRITE-STRING
 CL-TEST::SYMBOL-WRITE-TO-STRING
 CL-TEST::SYMBOL-Y-OR-N-P
 CL-TEST::SYMBOL-YES-OR-NO-P
 CL-TEST::SYMBOL-ZEROP
 CL-TEST::KEYWORD-PACKAGE-NICKNAMES
 CL-TEST::COMMON-LISP-PACKAGE-NICKNAMES
 CL-TEST::COMMON-LISP-USER-PACKAGE-NICKNAMES
 CL-TEST::NO-EXTRA-SYMBOLS-EXPORTED-FROM-COMMON-LISP
 CL-TEST::KEYWORD-BEHAVIOR
Test CL-TEST::CL-FUNCTION-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN (APPEND CL-TEST::*CL-FUNCTION-SYMBOLS* CL-TEST::*CL-ACCESSOR-SYMBOLS*) WHEN (OR (NOT (FBOUNDP CL-TEST::S)) (MACRO-FUNCTION CL-TEST::S) (SPECIAL-OPERATOR-P CL-TEST::S) (NOT (SYMBOL-FUNCTION CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ACOS ACOSH APROPOS APROPOS-LIST ASIN ASINH ASSOC-IF-NOT ASSOC-IF ATANH BIT-AND BIT-ANDC1 BIT-ANDC2 BIT-EQV BIT-IOR BIT-NAND BIT-NOR BIT-NOT BIT-ORC1 BIT-ORC2 BIT-XOR CHAR-NOT-EQUAL CHAR/= CHARACTER CIS CONCATENATED-STREAM-STREAMS CONJUGATE COPY-ALIST COPY-SYMBOL COPY-TREE COSH DECODE-FLOAT DECODE-UNIVERSAL-TIME DELETE-IF-NOT DENOMINATOR DEPOSIT-FIELD DIGIT-CHAR DISASSEMBLE ENOUGH-NAMESTRING EXP FCEILING FFLOOR FILE-AUTHOR FILE-LENGTH FILE-STRING-LENGTH FLOAT-DIGITS FLOAT-PRECISION FLOAT-SIGN FROUND GCD GET-DECODED-TIME HOST-NAMESTRING INPUT-STREAM-P INSPECT INTERACTIVE-STREAM-P INVALID-METHOD-ERROR ISQRT LCM LOAD-LOGICAL-PATHNAME-TRANSLATIONS LOGCOUNT LOGICAL-PATHNAME MAKE-CONCATENATED-STREAM MAKE-LOAD-FORM-SAVING-SLOTS MAKE-SEQUENCE MAP-INTO MAPCON MAPL MEMBER-IF-NOT MERGE METHOD-COMBINATION-ERROR MISMATCH NBUTLAST NINTERSECTION NSET-DIFFERENCE NSET-EXCLUSIVE-OR NSTRING-CAPITALIZE NSUBLIS NSUBST NSUBST-IF NSUBST-IF-NOT NSUBSTITUTE NSUBSTITUTE-IF NSUBSTITUTE-IF-NOT NUMERATOR NUNION OPEN-STREAM-P OUTPUT-STREAM-P PACKAGE-SHADOWING-SYMBOLS PHASE POSITION-IF-NOT PPRINT-DISPATCH PPRINT-FILL PPRINT-LINEAR PPRINT-TABULAR RASSOC RASSOC-IF RASSOC-IF-NOT RATIONALIZE RATIONALP READ-CHAR-NO-HANG READ-DELIMITED-LIST SCALE-FLOAT SET-EXCLUSIVE-OR SHADOWING-IMPORT SIMPLE-BIT-VECTOR-P SINH SLEEP STREAM-EXTERNAL-FORMAT STRING-CAPITALIZE STRING-GREATERP STRING-LESSP STRING-NOT-EQUAL STRING-NOT-GREATERP STRING-NOT-LESSP STRING-RIGHT-TRIM STRING-TRIM STRING/= STRING<= STRING> STRING>= SUBSETP SUBST-IF SUBST-IF-NOT SUBSTITUTE-IF-NOT TAN TANH TREE-EQUAL FTRUNCATE UNBOUND-SLOT-INSTANCE UNEXPORT UNUSE-PACKAGE UPGRADED-COMPLEX-PART-TYPE LOGICAL-PATHNAME-TRANSLATIONS MASK-FIELD) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-MACRO-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* WHEN (OR (NOT (FBOUNDP CL-TEST::S)) (NOT (MACRO-FUNCTION CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-CONSTANT-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-CONSTANT-SYMBOLS* WHEN (OR (NOT (BOUNDP CL-TEST::S)) (NOT (CONSTANTP CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LAMBDA-PARAMETERS-LIMIT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LONG-FLOAT-EPSILON LONG-FLOAT-NEGATIVE-EPSILON MULTIPLE-VALUES-LIMIT SHORT-FLOAT-EPSILON SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON) [Actual value: #<error during printing>

 NIL
 CL-TEST::CL-VARIABLE-SYMBOLS.1
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (FIND-CLASS CL-TEST::S NIL) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (FIND-CLASS CL-TEST::S NIL NIL) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((CL-TEST::%FOO (&ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) NIL CL-TEST::ENV)))) (CL-TEST::%FOO)))) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-PACKAGE.ERROR.1
 CL-TEST::SYMBOL-PACKAGE.ERROR.2
 CL-TEST::SYMBOL-PACKAGE.ERROR.3
 CL-TEST::SYMBOL-PLIST.ERROR.1
 CL-TEST::SYMBOL-PLIST.ERROR.2
 CL-TEST::SYMBOL-PLIST.ERROR.3
 CL-TEST::SYMBOL-PLIST.ERROR.4
 CL-TEST::SYMBOL-VALUE.ERROR.1
 CL-TEST::SYMBOL-VALUE.ERROR.2
 CL-TEST::SYMBOL-VALUE.ERROR.3
 CL-TEST::SYMBOL-VALUE.ERROR.4
 CL-TEST::SYMBOL-VALUE.ERROR.5
 CL-TEST::SYMBOLP.1
 CL-TEST::SYMBOLP.2
 CL-TEST::SYMBOLP.3
 CL-TEST::SYMBOLP.ERROR.1
 CL-TEST::SYMBOLP.ERROR.2
 CL-TEST::KEYWORDP.1
 CL-TEST::KEYWORDP.2
 CL-TEST::KEYWORDP.3
 CL-TEST::KEYWORDP.4
 CL-TEST::KEYWORDP.5
 CL-TEST::KEYWORDP.6
 CL-TEST::KEYWORDP.7
 CL-TEST::KEYWORDP.8
 CL-TEST::KEYWORDP.9
 CL-TEST::KEYWORDP.10
 CL-TEST::KEYWORDP.12
 CL-TEST::KEYWORDP.13
 CL-TEST::KEYWORDP.ORDER.1
 CL-TEST::KEYWORDP.ERROR.1
 CL-TEST::KEYWORDP.ERROR.2
 CL-TEST::MAKE-SYMBOL.1
 CL-TEST::MAKE-SYMBOL.2
 CL-TEST::MAKE-SYMBOL.3
 CL-TEST::MAKE-SYMBOL.4
 CL-TEST::MAKE-SYMBOL.5
 CL-TEST::MAKE-SYMBOL.6
 CL-TEST::MAKE-SYMBOL.7
 CL-TEST::MAKE-SYMBOL.8
 CL-TEST::MAKE-SYMBOL.9
 CL-TEST::MAKE-SYMBOL.10
 CL-TEST::MAKE-SYMBOL.12
 CL-TEST::MAKE-SYMBOL.13
 CL-TEST::MAKE-SYMBOL.14
 CL-TEST::MAKE-SYMBOL.15
 CL-TEST::MAKE-SYMBOL.16
 CL-TEST::MAKE-SYMBOL.ORDER.1
 CL-TEST::MAKE-SYMBOL.ERROR.1
 CL-TEST::MAKE-SYMBOL.ERROR.9
 CL-TEST::MAKE-SYMBOL.ERROR.10
 CL-TEST::MAKE-SYMBOL.ERROR.11
Test CL-TEST::COPY-SYMBOL.1 failed
Form: (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X))) (AND (NULL (SYMBOL-PLIST CL-TEST::Y)) (SYMBOLP CL-TEST::Y) (NOT (BOUNDP CL-TEST::Y)) (NOT (FBOUNDP CL-TEST::Y)) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X) (SYMBOL-NAME CL-TEST::Y)) (SYMBOLP (COPY-SYMBOL CL-TEST::Y)))))) (QUOTE (NIL T CL-TEST::A CL-TEST::B CL-TEST::\a CL-TEST::123))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.2 failed
Form: (PROGN (SETF (SYMBOL-PLIST (QUOTE CL-TEST::\f\o\o)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (MAKUNBOUND (QUOTE CL-TEST::\f\o\o)) (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X T))) (AND (EQUAL (SYMBOL-PLIST CL-TEST::Y) (SYMBOL-PLIST CL-TEST::X)) (SYMBOLP CL-TEST::Y) (IF (BOUNDP CL-TEST::X) (BOUNDP CL-TEST::Y) (NOT (BOUNDP CL-TEST::Y))) (IF (FBOUNDP CL-TEST::X) (FBOUNDP CL-TEST::Y) (NOT (FBOUNDP CL-TEST::Y))) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X)BOL-NAME CL-TEST::Y)))))) (QUOTE (NIL T CL-TEST::A CL-TEST::B CL-TEST::\f\o\o CL-TEST::\a CL-TEST::123)))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.3 failed
Form: (PROGN (SETF (SYMBOL-PLIST (QUOTE CL-TEST::\f\o\o)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SYMBOL-VALUE (QUOTE CL-TEST::\a)) 12345) (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X T))) (AND (EQL (LENGTH (SYMBOL-PLIST CL-TEST::Y)) (LENGTH (SYMBOL-PLIST CL-TEST::X))) (EVERY (FUNCTION EQ) (SYMBOL-PLIST CL-TEST::Y) (SYMBOL-PLIST CL-TEST::X)) (SYMBOLP CL-TEST::Y) (IF (BOUNDP CL-TEST::X) (CL-TEST::EQT (SYMBOL-VALUE CL-TEST::X) (SYMBOL-VALUE CL-TEST::Y)) (NOT (BOUNDP CL-TEST::Y))) (IF (FBOUNDP CL-TEST::X) (FBOUNDP CL-TEST::Y) (NOT (FBOUNDP CL-TEST::Y))) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X) (SYMBOL-NAME CL-TEST::Y)) (EQL (LENGTH (SYMBOLL-TEST::123)))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.4 failed
Form: (CL-TEST::EQT (COPY-SYMBOL (QUOTE CL-TEST::A)) (COPY-SYMBOL (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.5 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y (CL-TEST::S (QUOTE #:\x))) (LET ((CL-TEST::S2 (COPY-SYMBOL (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::S) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) NIL)))) (VALUES (SYMBOL-NAME CL-TEST::S2) (EQ CL-TEST::S CL-TEST::S2) CL-TEST::I CL-TEST::X CL-TEST::Y)))
Expected value:
          "x"
          NIL
          2
          1
          2
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-SYMBOL) PROGERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-SYMBOL (QUOTE CL-TEST::A) T (QUOTE CL-TEST::FOO)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
 CL-TEST::GENSYM.1
 CL-TEST::GENSYM.2
 CL-TEST::GENSYM.3
 CL-TEST::GENSYM.4
 CL-TEST::GENSYM.5
 CL-TEST::GENSYM.6
 CL-TEST::GENSYM.7
 CL-TEST::GENSYM.8
 CL-TEST::GENSYM.9
 CL-TEST::GENSYM.12
 CL-TEST::GENSYM.13
 CL-TEST::GENSYM-COUNTER.1
 CL-TEST::GENSYM.ERROR.1
 CL-TEST::GENSYM.ERROR.7
 CL-TEST::GENSYM.ERROR.8
 CL-TEST::GENSYM.ERROR.9
 CL-TEST::GENTEMP.1
 CL-TEST::GENTEMP.2
 CL-TEST::GENTEMP.3
 CL-TEST::GENTEMP.4
 CL-TEST::GENTEMP.5
 CL-TEST::GENTEMP.6
 CL-TEST::GENTEMP.ERROR.1
 CL-TEST::GENTEMP.ERROR.2
 CL-TEST::GENTEMP.ERROR.3
 CL-TEST::SYMBOL-FUNCTION.1
 CL-TEST::SYMBOL-FUNCTION.ERROR.1
 CL-TEST::SYMBOL-FUNCTION.ERROR.2
 CL-TEST::SYMBOL-FUNCTION.ERROR.3
 CL-TEST::SYMBOL-FUNCTION.ERROR.4
 CL-TEST::SYMBOL-FUNCTION.ERROR.5
 CL-TEST::SYMBOL-NAME.1
 CL-TEST::SYMBOL-NAME.2
 CL-TEST::SYMBOL-NAME.3
 CL-TEST::SYMBOL-NAME.ERROR.1
 CL-TEST::SYMBOL-NAME.ERROR.2
 CL-TEST::SYMBOL-NAME.ERROR.3
 CL-TEST::BOUNDP.ERROR.1
 CL-TEST::BOUNDP.ERROR.2
 CL-TEST::BOUNDP.ERROR.3
 CL-TEST::BOUNDP.ERROR.4
 CL-TEST::BOUNDP.ERROR.5
 CL-TEST::BOUNDP.ERROR.6
 CL-TEST::BOUNDP.1
 CL-TEST::BOUNDP.2
 CL-TEST::BOUNDP.3
 CL-TEST::BOUNDP.4
 CL-TEST::BOUNDP.5
 CL-TEST::BOUNDP.6
 CL-TEST::BOUNDP.ORDER.1
 CL-TEST::SPECIAL-OPERATOR-P.1
 CL-TEST::SPECIAL-OPERATOR-P.2
 CL-TEST::SPECIAL-OPERATOR-P.ORDER.1
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.1
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.2
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.3
 CL-TEST::MAKUNBOUND.1
 CL-TEST::MAKUNBOUND.2
 CL-TEST::MAKUNBOUND.ERROR.1
 CL-TEST::MAKUNBOUND.ERROR.2
 CL-TEST::MAKUNBOUND.ERROR.3
 CL-TEST::SET.1
 CL-TEST::SET.2
 CL-TEST::SET.ERROR.1
 CL-TEST::SET.ERROR.2
 CL-TEST::SET.ERROR.3
 CL-TEST::SET.ERROR.4
Test CL-TEST::REMPROP.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (REMPROP CL-TEST::SYM :FOO)) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (NIL)
          NIL
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.2 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (QUOTE (:FOO 0)))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:FOO 0)
          (T)
          NIL
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.3 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (LIST :BAR 1 :FOO 0 :BAZ 2))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (COPY-LIST (SYMBOL-PLIST CL-TEST::SYM)) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:BAR 1 :FOO 0 :BAZ 2)
          (T)
          (:BAR 1 :BAZ 2)
          (NIL)
          (:BAR 1 :BAZ 2)
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.4 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (LIST :BAR 1 :FOO 0 :BAZ 2 :FOO 3))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (COPY-LIST (SYMBOL-PLIST CL-TEST::SYM)) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:BAR 1 :FOO 0 :BAZ 2 :FOO 3)
          (T2 :FOO 3)
          (T)
          (:BAR 1 :BAZ 2)
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
 CL-TEST::REMPROP.ERROR.1
 CL-TEST::REMPROP.ERROR.2
 CL-TEST::REMPROP.ERROR.3
 CL-TEST::REMPROP.ERROR.4
 CL-TEST::GET.1
 CL-TEST::GET.2
 CL-TEST::GET.3
 CL-TEST::GET.4
 CL-TEST::GET.5
 CL-TEST::GET.6
 CL-TEST::GET.ORDER.1
 CL-TEST::GET.ORDER.2
 CL-TEST::GET.ORDER.3
 CL-TEST::GET.ORDER.4
 CL-TEST::GET.ERROR.1
 CL-TEST::GET.ERROR.2
 CL-TEST::GET.ERROR.3
 CL-TEST::GET.ERROR.4
 CL-TEST::GET.ERROR.5
 CL-TEST::EVAL.1
 CL-TEST::EVAL.2
 CL-TEST::EVAL.3
 CL-TEST::EVAL.4
 CL-TEST::EVAL.5
 CL-TEST::EVAL.6
 CL-TEST::EVAL.ORDER.1
 CL-TEST::EVAL.ERROR.1
 CL-TEST::EVAL.ERROR.2
 CL-TEST::EVAL.ERROR.3
 CL-TEST::EVAL.ERROR.4
 CL-TEST::EVAL-AND-COMPILE-FNS
Test CL-TEST::EVAL-AND-COMPILE-MACROS failed
Form: (REMOVE-IF (FUNCTION MACRO-FUNCTION) CL-TEST::*EVAL-AND-COMPILE-MACROS*)
Expected value:
          NIL
Actual value:
          (DEFINE-SYMBOL-MACRO) [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPILE.1 failed
Form: (PROGN (FMAKUNBOUND (QUOTE CL-TEST::COMPILE.1-FN)) (VALUES (EVAL (QUOTE (DEFUN CL-TEST::COMPILE.1-FN (CL-TEST::X) CL-TEST::X))) (COMPILED-FUNCTION-P (QUOTE CL-TEST::COMPILE.1-FN)) (LET ((CL-TEST::X (COMPILE (QUOTE CL-TEST::COMPILE.1-FN)))) (OR (CL-TEST::EQT CL-TEST::X (QUOTE CL-TEST::COMPILE.1-FN)) (CL-TEST::NOTNOT (COMPILED-FUNCTION-P CL-TEST::X)))) (COMPILED-FUNCTION-P (QUOTE CL-TEST::COMPILE.1-FN)) (NOT (COMPILED-FUNCTION-P (FUNCTION CL-TEST::COMPILE.1-FN))) (FMAKUNBOUND (QUOTE CL-TEST::COMPILE.1-FN))))
Expected value:
          CL-TEST::COMPILE.1-FN
          NIL
          T
          NIL
          NIL
          CL-TEST::COMPILE.1-FN
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::+FUNCTION-TYPE-INTERPRETED-FUNCTION+> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILE.2
 CL-TEST::COMPILE.3
 CL-TEST::COMPILE.4
 CL-TEST::COMPILE.5
 CL-TEST::COMPILE.6
 CL-TEST::COMPILE.7
 CL-TEST::COMPILE.8
 CL-TEST::COMPILE.9
 CL-TEST::COMPILE.ERROR.1
 CL-TEST::COMPILE.ERROR.2
 CL-TEST::CONSTANTP.ERROR.1
 CL-TEST::CONSTANTP.ERROR.2
 CL-TEST::CONSTANTP.1
 CL-TEST::CONSTANTP.2
 CL-TEST::CONSTANTP.3
 CL-TEST::CONSTANTP.4
 CL-TEST::CONSTANTP.5
 CL-TEST::CONSTANTP.6
 CL-TEST::CONSTANTP.7
 CL-TEST::CONSTANTP.8
 CL-TEST::CONSTANTP.9
 CL-TEST::CONSTANTP.10
 CL-TEST::CONSTANTP.11
 CL-TEST::CONSTANTP.ORDER.1
 CL-TEST::CONSTANTP.ORDER.2
 CL-TEST::LAMBDA.1
 CL-TEST::LAMBDA.2
 CL-TEST::LAMBDA.3
 CL-TEST::LAMBDA.4
 CL-TEST::LAMBDA.5
 CL-TEST::LAMBDA.6
 CL-TEST::LAMBDA.7
 CL-TEST::LAMBDA.8
 CL-TEST::LAMBDA.9
 CL-TEST::LAMBDA.10
 CL-TEST::LAMBDA.11
 CL-TEST::LAMBDA.12
 CL-TEST::LAMBDA.13
 CL-TEST::LAMBDA.14
 CL-TEST::LAMBDA.15
 CL-TEST::LAMBDA.16
 CL-TEST::LAMBDA.17
 CL-TEST::LAMBDA.18
 CL-TEST::LAMBDA.19
 CL-TEST::LAMBDA.20
Test CL-TEST::LAMBDA.21 failed
Form: (FLET ((CL-TEST::%F NIL (LOCALLY (DECLARE (SPECIAL CL-TEST::*X*)) (INCF CL-TEST::*X*)))) ((LAMBDA (CL-TEST::*X*) (DECLARE (SPECIAL CL-TEST::*X*)) (CL-TEST::%F) CL-TEST::*X*) 10))
Expected value:
          11
Actual value:
          #<Unbound-Variable CL-TEST::*X*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.22 failed
Form: (FLET ((CL-TEST::%F NIL (LOCALLY (DECLARE (SPECIAL CL-TEST::*X*)) (1+ CL-TEST::*X*)))) ((LAMBDA (CL-TEST::*X*) (DECLARE (SPECIAL CL-TEST::*X*)) (CL-TEST::%F)) 15))
Expected value:
          16
Actual value:
          #<Unbound-Variable CL-TEST::*X*> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.23
 CL-TEST::LAMBDA.24
 CL-TEST::LAMBDA.25
 CL-TEST::LAMBDA.26
Test CL-TEST::LAMBDA.27 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.28 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS T :FOO T)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.29 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.30 failed
Form: ((LAMBDA (&KEY CL-TEST::X) CL-TEST::X) :ALLOW-OTHER-KEYS T :X 10 :ALLOW-OTHER-KEYS NIL :FOO T)
Expected value:
          10
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.31
Test CL-TEST::LAMBDA.32 failed
Form: ((LAMBDA (&REST CL-TEST::X &KEY) CL-TEST::X) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (:ALLOW-OTHER-KEYS NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :AL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.33 failed
Form: ((LAMBDA (&REST CL-TEST::X &KEY) CL-TEST::X) :W 5 :ALLOW-OTHER-KEYS T :X 10)
Expected value:
          (:W 5 :ALLOW-OTHER-KEYS T :X 10)
Actual value:
          #<Simple-Error Unknown &KEY argument :W.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.34
 CL-TEST::LAMBDA.35
Test CL-TEST::LAMBDA.36 failed
Form: ((LAMBDA (&KEY (CL-TEST::A 1 CL-TEST::A-P) (CL-TEST::B 2 CL-TEST::B-P) (CL-TEST::C 3 CL-TEST::C-P)) (LIST CL-TEST::A (CL-TEST::NOTNOT CL-TEST::A-P) CL-TEST::B (CL-TEST::NOTNOT CL-TEST::B-P) CL-TEST::C (CL-TEST::NOTNOT CL-TEST::C-P))) :C 5 :A 0 :ALLOW-OTHER-KEYS T (QUOTE CL-TEST::B) 100)
Expected value:
          (0 T 2 NIL 5 T)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.37
 CL-TEST::LAMBDA.38
 CL-TEST::LAMBDA.39
 CL-TEST::LAMBDA.40
 CL-TEST::LAMBDA.41
 CL-TEST::LAMBDA.42
 CL-TEST::LAMBDA.43
 CL-TEST::LAMBDA.
 CL-TEST::LAMBDA.45
 CL-TEST::LAMBDA.46
Test CL-TEST::LAMBDA.47 failed
Form: ((LAMBDA (&KEY CL-TEST::A CL-TEST::B CL-TEST::ALLOW-OTHER-KEYS) (LIST CL-TEST::ALLOW-OTHER-KEYS CL-TEST::A CL-TEST::B)) :C 10 :ALLOW-OTHER-KEYS T :A 1 :B 2 :D 20)
Expected value:
          (T 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.48
 CL-TEST::LAMBDA.49
Test CL-TEST::LAMBDA.50 failed
Form: ((LAMBDA (&KEY CL-TEST::A CL-TEST::B ((:ALLOW-OTHER-KEYS CL-TEST::AOK))) (LIST CL-TEST::AOK CL-TEST::A CL-TEST::B)) :D 40 :A 1 :ALLOW-OTHER-KEYS T :B 2 :C 20)
Expected value:
          (T 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :D.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.51
 CL-TEST::LAMBDA.52
 CL-TEST::LAMBDA.53
 CL-TEST::LAMBDA.54
 CL-TEST::LAMBDA.55
 CL-TEST::LAMBDA.56
Test CL-TEST::LAMBDA.63 failed
Form: (LET ((CL-TEST::Y :BAD1)) (DECLARE (IGNORE CL-TEST::Y)) (LET ((CL-TEST::Y :BAD2)) (DECLARE (SPECIAL CL-TEST::Y)) (FLET ((CL-TEST::%F NIL CL-TEST::Y)) ((LAMBDA (CL-TEST::X &AUX (CL-TEST::Y :GOOD)) (DECLARE (SPECIAL CL-TEST::Y) (IGNORE CL-TEST::X)) (CL-TEST::%F)) NIL))))
Expected value:
          :GOOD
Actual value:
          :BAD2 [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.64 failed
Form: (LET ((CL-TEST::X :BAD)) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) ((LAMBDA (CL-TEST::X &AUX (CL-TEST::Y (CL-TEST::%F))) (DECLARE (TYPE T CL-TEST::Y) (SPECIAL CL-TEST::X)) CL-TEST::Y) :GOOD)))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.MACRO.1
 CL-TEST::LAMBDA.MACRO.2
 CL-TEST::LAMBDA.ERROR.1
 CL-TEST::LAMBDA.ERROR.2
 CL-TEST::LAMBDA.ERROR.3;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/generated-eval-when-test-file.lisp 8180EED7>
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (LET :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLOR*)))
;; Loading (LET NIL (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (LET :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN NIL (PUSH (QUOTE (LET)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (:LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (:EXEOR*))
;; Loading (EVAL-WHEN NIL (PUSH (QUOTE NIL) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Compiling file "generated-eval-when-test-file.lisp".
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (LET :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.;; Compiling form (LET NIL (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (LET :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN NIL (PUSH (QUOTE (LET)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (:LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTO Compiling form (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (:EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN NIL (PUSH (QUOTE NIL) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/generated-eval-when-test-file.llf 81C2B987>

 CL-TEST::EVAL-WHEN.1
 CL-TEST::EVAL-WHEN.2
 CL-TEST::EVAL-WHEN.3
 CL-TEST::EVAL-WHEN.4
 CL-TEST::EVAL-WHEN.5
 CL-TEST::EVAL-WHEN.6
 CL-TEST::EVAL-WHEN.7
 CL-TEST::EVAL-WHEN.8
 CL-TEST::EVAL-WHEN.9
 CL-TEST::EVAL-WHEN.10
 CL-TEST::EVAL-WHEN.11
 CL-TEST::EVAL-WHEN.12
 CL-TEST::EVAL-WHEN.13
 CL-TEST::EVAL-WHEN.14
 CL-TEST::EVAL-WHEN.15
 CL-TEST::EVAL-WHEN.16
 CL-TEST::EVAL-WHEN.17
 CL-TEST::EVAL-WHEN.18
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.1
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.2
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.3
 CL-TEST::DEFINE-COMPILER-MACRO.1
 CL-TEST::DEFINE-COMPILER-MACRO.2
Test CL-TEST::DEFINE-COMPILER-MACRO.3 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (&WHOLE CL-TEST::FORM &REST CL-TEST::ARGS) (DECLARE (SPECIAL CL-TEST::*X*) (IGNORE CL-TEST::ARGS)) (SETF CL-TEST::*X* T) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::FORM)))) (CL-TEST::ORDINARY-MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X) CL-TEST::X)))) (VALUES (CL-TEST::EQUALT (LIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (EVAL CL-TEST::ORDINARY-MACRO-DEF-FORM))) (CL-TEST::EQUALT (LIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (EVAL CL-TEST::MACRO-DEF-FORM))) (CL-TEST::NOTNOT (TYPEP (COMPILER-MACRO-FUNCTION CL-TEST::SYM) (QUOTE FUNCTION))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (QUOTE CL-TEST::A)))) (LET ((CL-TEST::FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::A)))))) (LET ((CL-TEST::*X* NIL)) (DECLARE (SPECIAL CL-TEST::*X*)) (LIST (FUNCALL CL-TEST::FN (QUOTE CL-TEST::B)) CL-TEST::*X*)))))
Expected value:
          T
          T
          T
          CL-TEST::A
          (CL-TEST::B NIL)
Actual value:
         Function #:G78145> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-COMPILER-MACRO.4
 CL-TEST::DEFINE-COMPILER-MACRO.5
 CL-TEST::DEFINE-COMPILER-MACRO.6
Test CL-TEST::DEFINE-COMPILER-MACRO.7 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::*X*)) (SETF CL-TEST::*X* :BAD) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)))))) (CL-TEST::FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (LIST CL-TEST::X CL-TEST::Y))))) (EVAL CL-TEST::FORM) (EVAL CL-TEST::FORM2) (COMPILE CL-TEST::SYM) (LET ((CL-TEST::*X* :GOOD)) (DECLARE (SPECIAL CL-TEST::*X*)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A CL-TEST::B) (DECLARE (NOTINLINE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM))) ((SYSTEM.INTERNALS::BQ-COMMA CL value:
          (5 11)
          :GOOD
Actual value:
          (5 11) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-COMPILER-MACRO.8 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::*X*)) (SETF CL-TEST::*X* :BAD) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)))))) (CL-TEST::FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y))))))) (EVAL CL-TEST::FORM) (EVAL CL-TEST::FORM2) (LET ((CL-TEST::*X* :GOOD)) (DECLARE (SPECIAL CL-TEST::*X*)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A CL-TEST::B) (DECLARE (NOTINLINE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM))) ((SYSTEM.INT    (7 23)
          :GOOD
Actual value:
          (7 23) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO CL-TEST::NONEXISTENT-SYMBOL-MACRO NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO CL-TEST::NONEXISTENT-SYMBOL-MACRO NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [ActuaGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.1-MACRO (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST 1 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) 2 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y) 3))) (QUOTE CL-TEST::DEFMACRO.1-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE CL-TEST::DEFMACRO.1-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.1-MACRO (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))))
Expected value:
          (1 CL-TEST::A 2 CL-TEST::B 3)
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.1-MACRO (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST 1 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) 2 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y) 3))) (QUOTE CL-TEST::DEFMACRO.1-MACRO)).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.2 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.2-MACRO (CL-TEST::X CL-TEST::Y) (RETURN-FROM CL-TEST::DEFMACRO.2-MACRO (SYSTEM.INTERNALS::BACKQUOTE (CONS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INION (QUOTE CL-TEST::DEFMACRO.2-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.2-MACRO (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))))
Expected value:
          (CL-TEST::A . CL-TEST::B)
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.2-MACRO (CL-TEST::X CL-TEST::Y) (RETURN-FROM CL-TEST::DEFMACRO.2-MACRO (SYSTEM.INTERNALS::BACKQUOTE (CONS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y))))) (QUOTE CL-TEST::DEFMACRO.2-MACRO)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFMACRO.3
Test CL-TEST::DEFMACRO.4 failed
Form: (LET ((CL-TEST::Y :GOOD)) (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.4-MACRO (&OPTIONAL (CL-TEST::X CL-TEST::Y)) (DECLARE (SPECIAL CL-TEST::Y)) CL-TEST::X) (QUOTE CL-TEST::DEFMACRO.4-MACRO))) (LET ((CL-TEST::Y :BAD)) (DECLARE (SPECIAL CL-TEST::Y)) (VALUES (MACROEXPAND-1 (QUOTE (CL-TEST::DEFMACRO.4-MACRO))))))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMA:X CL-TEST::Y)) (DECLARE (SPECIAL CL-TEST::Y)) CL-TEST::X) (QUOTE CL-TEST::DEFMACRO.4-MACRO)).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.5 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE CL-TEST::DEFMACRO.5-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.5-MACRO))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE CL-TEST::DEFMACRO.5-MACRO)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFMACRO.6
 CL-TEST::DEFMACRO.7
 CL-TEST::DEFMACRO.8
 CL-TEST::DEFMACRO.9
 CL-TEST::DEFMACRO.10
 CL-TEST::DEFMACRO.11
 CL-TEST::DEFMACRO.12
 CL-TEST::DEFMACRO.13
 CL-TEST::DEFMACRO.14
 CL-TEST::DEFMACRO.15
 CL-TEST::DEFMACRO.16
 CL-TEST::DEFMACRO.17
 CL-TEST::DEFMACRO.17A
 CL-TEST::DEFMACRO.18
 CL-TEST::DEFMACRO.19
 CL-TEST::DEFMACRO.20
Test CL-TEST::DEFMACRO.21 failed
Form: (PROGN (DEFMACRO CL-TEST::DEFMACRO.21-MACRO (&KEY CL-TEST::X CL-TEST::Y CL-TEST::Z) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Z))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((CL-TEST::DEFMACRO.21-MACRO) (CL-TEST::DEFMACRO.21-MACRO :X CL-TEST::A) (CL-TEST::DEFMACRO.21-MACRO :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C) (CL-TEST::DEFMACRO.21-MACRO :X CL-TEST::A :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :X CL-TEST::A) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :X CL-TEST::A :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS NIL) (CL-TEST::DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS T :FOO CL-TEST::BAR)))))
Expected value:
          ((NIL NIL NIL) (CL-TEST::A NIL NIL) (NIL CL-TEST::B NIL) (NIL NIL CL-TEST::C) (CL-TEST::A CL-TEST::B NIL) (NIL CL-TEST::B CL-TEST::C) (CL-TEST::A NIL CL-TEST::C) (CL-TEST::A CL-TEST::B CL-TEST::C) (NIL NIL NIL) (NIL NIL NIL))
Actual value:
          #<Simple-Error Invalid keyword :ALLOW-OTHER-KEYS. Wanted one of (:Z :Y :X).> [Actual value: #<error during printing>

 NIL
 CL-TEST::THE.1
 CL-TEST::THE.2
 CL-TEST::THE.3
 CL-TEST::THE.4
 CL-TEST::THE.5
 CL-TEST::THE.6
 CL-TEST::THE.7
 CL-TEST::THE.8
 CL-TEST::THE.9
 CL-TEST::THE.10
 CL-TEST::THE.11
 CL-TEST::THE.12
 CL-TEST::THE.13
 CL-TEST::THE.14
 CL-TEST::THE.15
 CL-TEST::THE.16
 CL-TEST::THE.17
 CL-TEST::THE.18
 CL-TEST::THE.19
 CL-TEST::THE.20
 CL-TEST::THE.21
 CL-TEST::THE.22
 CL-TEST::THE.23
 CL-TEST::THE.24
 CL-TEST::THE.25
 CL-TEST::SYMBOL-MACROLET.1
 CL-TEST::SYMBOL-MACROLET.2
 CL-TEST::SYMBOL-MACROLET.3
 CL-TEST::SYMBOL-MACROLET.4
 CL-TEST::SYMBOL-MACROLET.5
 CL-TEST::SYMBOL-MACROLET.6
 CL-TEST::SYMBOL-MACROLET.7
 CL-TEST::SYMBOL-MACROLET.8
Test CL-TEST::SYMBOL-MACROLET.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::X 10)) (DECLARE (SPECIAL CL-TEST::X)) 20) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-MACROLET.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2 (QUOTE CL-TEST::A))) CL-TEST::CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-MACROLET.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::*PATHNAMES* 19)) CL-TEST::*PATHNAMES*) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-MACROLET.9
 CL-TEST::PROCLAIM.1
 CL-TEST::PROCLAIM.2
 CL-TEST::PROCLAIM.3
 CL-TEST::PROCLAIM.ERROR.1
 CL-TEST::PROCLAIM.ERROR.2
Test CL-TEST::PROCLAIM.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (OPTIMIZE . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::PROCLAIM.ERROR.4
 CL-TEST::PROCLAIM.ERROR.5
Test CL-TEST::PROCLAIM.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (TYPE . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (FTYPE . CL-TEST::FOO))) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (TYPE INTEGER . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (INTEGER . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (DECLARATION . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (FTYPE (FUNCTION (T) T) . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DECLAIM.1
 CL-TEST::DECLAIM.2
 CL-TEST::DECLAIM.3
 CL-TEST::DECLAIM.4
 CL-TEST::DECLAIM.5
 CL-TEST::DECLAIM.6
 CL-TEST::DECLAIM.7
 CL-TEST::DECLAIM.8
 CL-TEST::DECLAIM.9
 CL-TEST::DECLAIM.10
 CL-TEST::DECLAIM.11
 CL-TEST::LOCALLY.1
 CL-TEST::LOCALLY.2
 CL-TEST::LOCALLY.3
 CL-TEST::LOCALLY.4
 CL-TEST::LOCALLY.5
 CL-TEST::LOCALLY.6
 CL-TEST::LOCALLY.7
 CL-TEST::LOCALLY.8
 CL-TEST::IGNORE.1
 CL-TEST::IGNORE.2
 CL-TEST::IGNORE.3
 CL-TEST::IGNORE.4
 CL-TEST::IGNORE.5
 CL-TEST::IGNORE.6
 CL-TEST::IGNORABLE.1
 CL-TEST::IGNORABLE.2
 CL-TEST::IGNORABLE.3
 CL-TEST::IGNORABLE.4
 CL-TEST::IGNORABLE.5
Test CL-TEST::IGNORABLE.6 failed
Form: (FLET (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (DECLARE (IGNORABLE (FUNCTION (SETF CL-TEST::%F)))) (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (VALUES (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)))
Expected value:
          CL-TEST::C
          (CL-TEST::C . CL-TEST::B)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::IGNORABLE.7
Test CL-TEST::IGNORABLE.8 failed
Form: (LABELS (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (DECLARE (IGNORABLE (FUNCTION (SETF CL-TEST::%F)))) (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (VALUES (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)))
Expected value:
          CL-TEST::C
          (CL-TEST::C . CL-TEST::B)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.1
 CL-TEST::DYNAMIC-EXTENT.2
 CL-TEST::DYNAMIC-EXTENT.3
 CL-TEST::DYNAMIC-EXTENT.4
 CL-TEST::DYNAMIC-EXTENT.5
 CL-TEST::DYNAMIC-EXTENT.6
 CL-TEST::DYNAMIC-EXTENT.7
Test CL-TEST::DYNAMIC-EXTENT.8 failed
Form: (LET ((CL-TEST::X (+ MOST-POSITIVE-FIXNUM 2))) (DECLARE (DYNAMIC-EXTENT CL-TEST::X) (OPTIMIZE SPEED (SAFETY 0))) (1- CL-TEST::X))
Expected value:
          1152921504606846976
Actual value:
          1152921504606846976 [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.9
 CL-TEST::DYNAMIC-EXTENT.10
 CL-TEST::DYNAMIC-EXTENT.11
Test CL-TEST::DYNAMIC-EXTENT.12 failed
Form: (LET* ((CL-TEST::CONTENTS (QUOTE (1 0 0 1 1 0 1 1 0 1))) (CL-TEST::N (LENGTH CL-TEST::CONTENTS))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 32 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) CL-TEST::FOR CL-TEST::FORM1 = (SYSTEM.INTERNALS::BACKQUOTE (MAKE-ARRAY (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))) :INITIAL-CONTENTS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::CONTENTS)) :ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) CL-TEST::FOR CL-TEST::FORM2 = (SYSTEM.INTERNALS::BACKQUOTE (LET ((CL-TEST::A (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FORM1))) (DECLARE (DYNAMIC-EXTENT CL-TEST::A)) (DECLARE (TYPE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA TYPE) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))))) (DECLARE (NOTINLINE COERCE)) (DECLARE (OPTIMIZE SPEED (SAFETY 0))) (EQUAL (COERCE CL-TEST::A (QUOTE LIST)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::CONTENTS))))) UNLESS (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FORM2))))) CL-TEST::COLLECT CL-TEST::I))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.13
 CL-TEST::DYNAMIC-EXTENT.14
 CL-TEST::DYNAMIC-EXTENT.15
 CL-TEST::DYNAMIC-EXTENT.16
 CL-TEST::OPTIMIZE.1
 CL-TEST::OPTIMIZE.2
 CL-TEST::OPTIMIZE.3
 CL-TEST::OPTIMIZE.4
 CL-TEST::OPTIMIZE.5
 CL-TEST::OPTIMIZE.6
 CL-TEST::OPTIMIZE.7
 CL-TEST::OPTIMIZE.8
 CL-TEST::SPECIAL.1
 CL-TEST::SPECIAL.2
 CL-TEST::SPECIAL.3
 CL-TEST::MACROEXPAND.ERROR.1
 CL-TEST::MACROEXPAND.ERROR.2
 CL-TEST::MACROEXPAND.1
 CL-TEST::MACROEXPAND.2
 CL-TEST::MACROEXPAND.3
 CL-TEST::MACROEXPAND.4
 CL-TEST::MACROEXPAND.5
 CL-TEST::MACROEXPAND.6
 CL-TEST::MACROEXPAND-1.ERROR.1
 CL-TEST::MACROEXPAND-1.ERROR.2
 CL-TEST::MACROEXPAND-1.1
 CL-TEST::MACROEXPAND-1.2
 CL-TEST::MACROEXPAND-1.3
 CL-TEST::MACROEXPAND-1.4
 CL-TEST::MACROEXPAND-1.5
 CL-TEST::MACROEXPAND-1.6
 CL-TEST::DECLARATION.1
 CL-TEST::DECLARATION.2
 CL-TEST::DECLARATION.3
 CL-TEST::TYPE.1
 CL-TEST::TYPE.2
 CL-TEST::TYPE.3
 CL-TEST::TYPE.4
 CL-TEST::TYPE.5
 CL-TEST::TYPE.6
Test CL-TEST::MACRO-FUNCTION.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION CL-TEST::N) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACRO-FUNCTION.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION CL-TEST::N NIL) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACRO-FUNCTION.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((CL-TEST::%M (CL-TEST::S &ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION CL-TEST::S CL-TEST::ENV)))) (CL-TEST::%M (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))))) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
 CL-TEST::MACRO-FUNCTION.4
 CL-TEST::MACRO-FUNCTION.5
 CL-TEST::MACRO-FUNCTION.6
 CL-TEST::MACRO-FUNCTION.7
 CL-TEST::MACRO-FUNCTION.8
 CL-TEST::MACRO-FUNCTION.9
 CL-TEST::MACRO-FUNCTION.10
 CL-TEST::MACRO-FUNCTION.11
 CL-TEST::MACRO-FUNCTION.12
 CL-TEST::MACRO-FUNCTION.13
 CL-TEST::MACRO-FUNCTION.14
 CL-TEST::MACRO-FUNCTION.15
 CL-TEST::MACRO-FUNCTION.ERROR.1
 CL-TEST::MACRO-FUNCTION.ERROR.2
 CL-TEST::DCF-FUNS
Test CL-TEST::DCF-MACROS failed
Form: (REMOVE-IF (FUNCTION MACRO-FUNCTION) CL-TEST::*DCF-MACROS*)
Expected value:
          NIL
Actual value:
          (CCASE DEFSETF) [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF.ORDER.1
 CL-TEST::SETF.ORDER.2
 CL-TEST::INCF.ORDER.1
 CL-TEST::DECF.ORDER.1
 CL-TEST::SETF-VAR
Test CL-TEST::SETF-VALUES.1 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3)))
Expected value:
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.2 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3)) (VALUES CL-TEST::Z CL-TEST::Y CL-TEST::X))
Expected value:
          3
          2
          1
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.3 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::X CL-TEST::X) (VALUES 1 2 3)) CL-TEST::X)
Expected value:
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.4 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (SETF (VALUES (CAR CL-TEST::X) (CADR CL-TEST::X)) (VALUES 1 2)) CL-TEST::X)
Expected value:
          (1 2)
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.5 failed
Form: (LET ((CL-TEST::A (VECTOR NIL NIL)) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (SETF (VALUES (AREF CL-TEST::A (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 0)) (AREF CL-TEST::A (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) 1))) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (VALUES (QUOTE CL-TEST::FOO) (QUOTE CL-TEST::BAR)))) (VALUES CL-TEST::A CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #(CL-TEST::FOO CL-TEST::BAR)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.6 failed
Form: (SETF (VALUES) (VAlue:
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-THE.1 failed
Form: (LET ((CL-TEST::X 1)) (SETF (THE INTEGER CL-TEST::X) 2) CL-TEST::X)
Expected value:
          2
Actual value:
          #<Unbound-Variable INTEGER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-THE.2 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A)))) (VALUES (SETF (THE SYMBOL (CAR CL-TEST::X)) (QUOTE CL-TEST::B)) CL-TEST::X))
Expected value:
          CL-TEST::B
          (CL-TEST::B)
Actual value:
          #<Unbound-Variable SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.1 failed
Form: (LET ((CL-TEST::X (VECTOR 0 1 2 3 4 5))) (SETF (APPLY (FUNCTION AREF) CL-TEST::X (QUOTE (0))) 10) CL-TEST::X)
Expected value:
          #(10 1 2 3 4 5)
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.2 failed
Form: (LET ((CL-TEST::A (MAKE-AR0 0)))))) (SETF (APPLY (FUNCTION AREF) CL-TEST::A 1 1 NIL) (QUOTE CL-TEST::A)) (EQUALP CL-TEST::A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 CL-TEST::A))))))
Expected value:
          T
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.3 failed
Form: (LET ((CL-TEST::BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION BIT) CL-TEST::BV 4 NIL) 1) CL-TEST::BV)
Expected value:
          #*0000100000
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.4 failed
Form: (LET ((CL-TEST::BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION SBIT) CL-TEST::BV 4 NIL) 1) CL-TEST::BV)
Expected value:
          #*0000100000
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF-MACRO.1
 CL-TEST::SETF-MACRO.3
 CL-TEST::SETF-MACRO.4
 CL-TEST::SETF-SYMBOL-MACRO.1
Test CL-TEST::SETF-SYMBOL-MACROT::X CL-TEST::Y)) (LET ((CL-TEST::Y NIL)) (VALUES (SETQ CL-TEST::X 1) CL-TEST::X CL-TEST::Y)))
Expected value:
          1
          1
          1
Actual value:
          #<Type-Error C1DEC9E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-SYMBOL-MACRO.3 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (VALUES CL-TEST::Y CL-TEST::Z))) (LET ((CL-TEST::Y NIL) (CL-TEST::Z NIL)) (VALUES (SETQ CL-TEST::X (VALUES 1 2)) CL-TEST::X CL-TEST::Y CL-TEST::Z)))
Expected value:
          1
          1
          1
          2
Actual value:
          #<Type-Error C1DF6E47> [Actual value: #<error during printing>

 NIL
 CL-TEST::SETQ.1
 CL-TEST::SETQ.2
 CL-TEST::SETQ.3
 CL-TEST::SETQ.4
 CL-TEST::SETQ.5
 CL-TEST::SETQ.6
 CL-TEST::SETQ.7
 CL-TEST::SETF.1
 CL-TEST::SETF.2
 CL-TEST::SETF.3
 CL-TEST::SETF.4
 CL-TEST::SETF.5
 CL-TEST::SETF.6
 CL-TEST::SETF.7
 CL-TEST::SETF.8
 CL-TEST::PSETQ.1
 CL-TEST::PSETQ.2
 CL-TEST::PSETQ.3
 CL-TEST::PSETQ.4
 CL-TEST::PSETQ.5
 CL-TEST::PSETQ.6
Test CL-TEST::PSETQ.7 failed
Form: (SYCL-TEST::A (INCF CL-TEST::I))) (CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I)))) (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETQ CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I)))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETQ.8
 CL-TEST::PSETQ.9
 CL-TEST::PSETQ.10
 CL-TEST::PSETQ.ERROR.1
 CL-TEST::PSETQ.ERROR.2
 CL-TEST::PSETQ.ERROR.3
Test CL-TEST::PSETF.ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) (VALUES CL-TEST::X CL-TEST::I))
Expected value:
          #(NIL 2 NIL NIL)
          2
Actual value:
          #(NIL NIL 1 NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETF.ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (PSETF (AREF CL-TESTNCF CL-TEST::I)) (INCF CL-TEST::I) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I 10)) (VALUES CL-TEST::X CL-TEST::I))
Expected value:
          #(NIL 2 NIL 13)
          13
Actual value:
          #<Simple-Error Subscript 12 is invalid for axis, should be non-negative and less than 4.> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.1
 CL-TEST::PSETF.2
 CL-TEST::PSETF.3
 CL-TEST::PSETF.4
 CL-TEST::PSETF.5
 CL-TEST::PSETF.6
Test CL-TEST::PSETF.7 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I))) (CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I)))) (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETF CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I)))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETF.8 failed
Form: (LET ((CL-TEST::A (COPY-SEQ #(0-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.9
 CL-TEST::PSETF.10
 CL-TEST::PSETF.11
 CL-TEST::PSETF.ERROR.1
 CL-TEST::PSETF.12
 CL-TEST::PSETF.12A
 CL-TEST::PSETF.13
 CL-TEST::PSETF.13A
 CL-TEST::PSETF.14
 CL-TEST::PSETF.15
 CL-TEST::PSETF.16
 CL-TEST::PSETF.17
 CL-TEST::PSETF.18
 CL-TEST::PSETF.18A
Test CL-TEST::PSETF.19 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100))) (PSETF (BIT CL-TEST::X 1) 0 (BIT CL-TEST::X 2) 1 (BIT CL-TEST::Y 4) 1 (BIT CL-TEST::Y 0) 0) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          #*10100
          #*01101
Actual value:
          #<Undefined-Function (SETF BIT)> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.20
Test CL-TEST::PSETF.21EQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100))) (PSETF (SBIT CL-TEST::X 1) 0 (SBIT CL-TEST::X 2) 1 (SBIT CL-TEST::Y 4) 1 (SBIT CL-TEST::Y 0) 0) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          #*10100
          #*01101
Actual value:
          #<Undefined-Function (SETF SBIT)> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.22
 CL-TEST::PSETF.23
 CL-TEST::PSETF.24
 CL-TEST::PSETF.25
 CL-TEST::PSETF.26
 CL-TEST::PSETF.27
 CL-TEST::PSETF.28
 CL-TEST::PSETF.29
 CL-TEST::PSETF.30
 CL-TEST::PSETF.31
 CL-TEST::PSETF.32
 CL-TEST::PSETF.33
 CL-TEST::PSETF.34
 CL-TEST::PSETF.35
 CL-TEST::PSETF.36
Test CL-TEST::PSETF.37 failed
Form: (LET ((CL-TEST::B1 (BYTE 3 1)) (CL-TEST::B2 (BYTE 4 2)) (CL-TEST::X 51925) (CL-TEST::Y 13638) (CL-TEST::M1 21869) (CL-TEST::M2 15541)) (PSETF (MASK-FIELD CL-TEST::B1 CL-TEST::X) CL-TEST::M1 (MASK-FIELD CL-TEST::B2 CL-TEST::Y) CL-TEST::M2) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          51933
          13686
Actual value:
          #<Undefined-Function (SETF MASctual value: #<error during printing>

 NIL
 CL-TEST::PSETF.39
 CL-TEST::PSETF.40
Test CL-TEST::SHIFTF-ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (CL-TEST::I 2)) (VALUES (SHIFTF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected value:
          CL-TEST::D
          #(CL-TEST::A CL-TEST::B CL-TEST::C 4 CL-TEST::E)
          4
Actual value:
          #<Simple-Error Subscript 5 is invalid for axis, should be non-negative and less than 5.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHIFTF-ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) (QUOTE CL-TEST::G) (QUOTE CL-TEST::H))) (CL-TEST::I 2)) (VALUES (SHIFTF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected value:
          CL-TEST::D
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E 5 CL-TEST::F CL-TEST::G CL-TEST::H)
          5
Actual value:
          CL-TEST::D [Actual value: #<error during printing>

 NIL
 CL-TEST::SHIFTF.1
 CL-TEST::SHIFTF.2
 CL-TEST::SHIFTF.3
 CL-TEST::SHIFTF.4
 CL-TEST::SHIFTF.5
 CL-TEST::SHIFTF.6
Test CL-TEST::ROTATEF-ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (CL-TEST::I 2)) (VALUES (ROTATEF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I))) CL-TEST::X CL-TEST::I))
Expected value:
          NIL
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E CL-TEST::D CL-TEST::F)
          4
Actual value:
          #<Simple-Error Subscript 6 is invalid for axis, should be non-negative and less than 6.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ROTATEF-ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (CL-TEST::I 2)) (VALUES (ROTATEF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I))) CL-TEST::X CL-TEST::I))
Expected value:
     NIL
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E CL-TEST::F CL-TEST::D)
          5
Actual value:
          #<Simple-Error Subscript 6 is invalid for axis, should be non-negative and less than 6.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.1
 CL-TEST::ROTATEF.2
 CL-TEST::ROTATEF.3
 CL-TEST::ROTATEF.4
 CL-TEST::ROTATEF.5
 CL-TEST::ROTATEF.6
 CL-TEST::ROTATEF.7
 CL-TEST::ROTATEF.8
 CL-TEST::ROTATEF.9
 CL-TEST::ROTATEF.10
 CL-TEST::ROTATEF.11
 CL-TEST::ROTATEF.12
 CL-TEST::ROTATEF.13
 CL-TEST::ROTATEF.14
 CL-TEST::ROTATEF.15
 CL-TEST::ROTATEF.16
Test CL-TEST::ROTATEF.17 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100)) (CL-TEST::Z 1)) (ROTATEF (BIT CL-TEST::X 1) (BIT CL-TEST::Y 3) CL-TEST::Z) (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*10000
          #*11110
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.18
Test CL-TEST::ROTATEF.21 failed
FoQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100)) (CL-TEST::Z 1)) (ROTATEF (BIT CL-TEST::X 1) (BIT CL-TEST::Y 3) CL-TEST::Z) (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*10000
          #*11110
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.22
 CL-TEST::ROTATEF.23
 CL-TEST::ROTATEF.24
 CL-TEST::ROTATEF.25
 CL-TEST::ROTATEF.26
 CL-TEST::ROTATEF.27
 CL-TEST::ROTATEF.28
 CL-TEST::ROTATEF.29
 CL-TEST::ROTATEF.30
 CL-TEST::ROTATEF.31
 CL-TEST::ROTATEF.32
 CL-TEST::ROTATEF.33
 CL-TEST::ROTATEF.34
 CL-TEST::ROTATEF.35
 CL-TEST::ROTATEF.36
 CL-TEST::ROTATEF.37
 CL-TEST::RETURN.ERROR.1
 CL-TEST::RETURN.ERROR.2
 CL-TEST::RETURN.ERROR.3
 CL-TEST::RETURN.1
 CL-TEST::RETURN.2
 CL-TEST::RETURN.3
 CL-TEST::RETURN-FROM.1
 CL-TEST::RETURN-FROM.2
 CL-TEST::RETURN-FROM.3
 CL-TEST::DEFINE-SETF-EXPANDER.ERROR.1
 CL-TEST::DEFINE-SETF-EXPANDER.1
 CL-TEST::DEFINE-SETF-EXPANDER.2
 CL-TEST::DEFINE-SETF-EXPANDER.3
Test CL-TEST::DEFINE-SETF-EXPANDER.4 failed
Form: (LET ((CL-TEST::A (LIST (LIST 1)))) (VALUES (COPY-TREE CL-TEST::A) (CL-TEST::MY-CAR (CL-TEST::MY-CAR CL-TEST::A)) (SETF (CL-TEST::MY-CAR (CL-TEST::MY-CAR CL-TEST::A)) 2) CL-TEST::A))
Expected value:
          ((1))
          1
          2
          ((2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SETF-EXPANDER.5 failed
Form: (LET ((CL-TEST::X NIL)) (VALUES (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::FOO) CL-TEST::X) 1) (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::FOO) CL-TEST::X) 2) (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::BAR) CL-TEST::X) 3) (COPY-TREE CL-TEST::X)))
Expected value:
          NIL
          1
          ((CL-TEST::FOO . 1))
          2
          ((CL-TEST::FOO . 2))
          3
          ((CL-TEST::BAR . 3) (CL-TEST::FOO . 2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-SETF-EXPANDER.6
 CL-TEST::DEFINE-SETF-EXPANDER.7
 CL-TEST::AND.1
 CL-TEST::AND.2
 CL-TEST::AND.3
 CL-TEST::AND.4
 CL-TEST::AND.5
 CL-TEST::AND.6
 CL-TEST::AND.7
 CL-TEST::AND.8
 CL-TEST::AND.9
.10
 CL-TEST::AND.ORDER.1
 CL-TEST::AND.ORDER.2
 CL-TEST::AND.ERROR.1
 CL-TEST::AND.ERROR.2
 CL-TEST::AND.ERROR.3
 CL-TEST::APPLY.ERROR.1
 CL-TEST::APPLY.ERROR.2
 CL-TEST::APPLY.ERROR.3
 CL-TEST::APPLY.ERROR.4
 CL-TEST::APPLY.1
 CL-TEST::APPLY.2
 CL-TEST::APPLY.3
Test CL-TEST::APPLY.4 failed
Form: (LET ((CL-TEST::ZEROS (MAKE-LIST (MIN 10000 (1- CALL-ARGUMENTS-LIMIT)) :INITIAL-ELEMENT 1))) (APPLY (FUNCTION +) CL-TEST::ZEROS))
Expected value:
          499
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::APPLY.5
 CL-TEST::APPLY.6
 CL-TEST::APPLY.7
 CL-TEST::APPLY.8
 CL-TEST::APPLY.ORDER.1
 CL-TEST::BLOCK.1
 CL-TEST::BLOCK.2
 CL-TEST::BLOCK.3
 CL-TEST::BLOCK.4
 CL-TEST::BLOCK.5
 CL-TEST::BLOCK.6
 CL-TEST::BLOCK.7
 CL-TEST::BLOCK.8
 CL-TEST::BLOCK.9
 CL-TEST::BLOCK.10
 CL-TEST::BLOCK.11
 CL-TEST::BLOCK.12
 CL-TEST::CALL-ARGUMENTS-LIMIT.1
 CL-TEST::CALL-ARGUMENTS-LIMIT.2
 CL-TEST::CALL-ARGUMENTMENTS-LIMIT.4
Test CL-TEST::CALL-ARGUMENTS-LIMIT.5 failed
Form: (< CALL-ARGUMENTS-LIMIT LAMBDA-PARAMETERS-LIMIT)
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.1
 CL-TEST::CASE.2
 CL-TEST::CASE.3
 CL-TEST::CASE.4
Test CL-TEST::CASE.5 failed
Form: (CASE (1+ MOST-POSITIVE-FIXNUM) (1152921504606846976 (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.6
 CL-TEST::CASE.7
 CL-TEST::CASE.8
 CL-TEST::CASE.9
 CL-TEST::CASE.10
 CL-TEST::CASE.11
 CL-TEST::CASE.12
 CL-TEST::CASE.13
 CL-TEST::CASE.14
 CL-TEST::CASE.15
 CL-TEST::CASE.16
 CL-TEST::CASE.17
 CL-TEST::CASE.18
 CL-TEST::CASE.19
 CL-TEST::CASE.20
 CL-TEST::CASE.21
 CL-TEST::CASE.22
 CL-TEST::CASE.23
 CL-TEST::CASE.24
 CL-TEST::CASE.25
 CL-TEST::CASE.26
 CL-TEST::CASE.27
 CL-TEST::CASE.28
 CL-TEST::CASE.29
 CL-TEST::CASE.30
 CL-TEST::CASE.31
Test CL-TEST::CASE.32 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::A) (T (QUOTE CL-TEST::B)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::CASE.33 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)) (T))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::CASE.34 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)) (OTHERWISE))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.35
 CL-TEST::CASE.36
 CL-TEST::CASE.37
 CL-TEST::CASE.ERROR.1
 CL-TEST::CASE.ERROR.2
 CL-TEST::CASE.ERROR.3
 CL-TEST::CATCH.1
 CL-TEST::CATCH.2
 CL-TEST::CATCH.3
 CL-TEST::CATCH.4
 CL-TEST::CATCH.5
 CL-TEST::CATCH.7
 CL-TEST::CATCH.8
 CL-TEST::CATCH.9
 CL-TEST::CATCH.10
 CL-TEST::CATCH.11
 CL-TEST::CATCH.12
 CL-TEST::CATCH.13
 CL-TEST::CATCH.14
 CL-TEST::CATCH.15
 CL-TEST::CATCH.16
 CL-TEST::THROW-ERROR
Test CL-TEST::CCASE.1 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (T NIL)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (OTHERWISE NIL)))
Expected value:
          T
Actual value:
          #<UndefineFunction CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.6 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::Z) 1) ((CL-TEST::Y CL-TEST::B CL-TEST::W) 2) ((CL-TEST::B CL-TEST::C) 3)))
Expected value:
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.7 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::Z))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::B CL-TEST::C) 1) ((CL-TEST::D CL-TEST::E) 2) ((CL-TEST::F CL-TEST::Z CL-TEST::G) 3)))
Expected value:
          3
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.8 failed
Form: (LET ((CL-TEST::X (1+ MOST-POSITIVE-FIXNUM))) (CCASE CL-TEST::X (1152921504606846976 (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.9 failed
Form: (CL-TEST:L-TEST::X NIL (CCASE CL-TEST::X (NIL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.10 failed
Form: (LET (CL-TEST::X) (CCASE CL-TEST::X ((NIL) (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.11 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::A (VALUES 1 2 3)) (CL-TEST::C NIL)))
Expected value:
          1
          2
          3
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.12 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (CCASE CL-TEST::X (CL-TEST::A 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.13 failed
Form: (LET ((CL-TEST::X T)) pected value:
          10
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.14 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((CL-TEST::Y (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)))) (CCASE CL-TEST::Y (((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) 1) (CL-TEST::A 2))))))
Expected value:
          1
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.15 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE OTHERWISE) (CCASE CL-TEST::X ((T) 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.16 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (CCASE CL-TEST::X ((OTHERWISE) 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

ailed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) (OTHERWISE 2)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.19 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((T) 2)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.20 failed
Form: (LET ((CL-TEST::X #\a)) (CCASE CL-TEST::X ((#\b #\c) 10) ((#\d #\e #\A) 20) (NIL 30) ((#\z #\a #\y) 40)))
Expected value:
          40
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.21 failed
Form: (LET ((CL-TEST::X 1)) (CCASE CL-TEST::X (1 (VALUES)) (2 (QUOTE CL-TEST::A))))
Expected value:
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during prifailed
Form: (LET ((CL-TEST::X 1)) (CCASE CL-TEST::X (1 (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.25 failed
Form: (LET ((CL-TEST::A (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (CL-TEST::I 1)) (VALUES (CCASE (AREF CL-TEST::A (INCF CL-TEST::I)) (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4)) CL-TEST::I))
Expected value:
          3
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.26 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::B CL-TEST::C) 10) (CL-TEST::B 20)))
Expected value:
          10
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::B 20) ((CL-TEST::A CL-TEST::B CL-TEST::C) 10)))
Expected value:
          20
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.28 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::B 20) (CL-TEST::B 10) (CL-TEST::D 0)))
Expected value:
          20
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.29 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y 2)) (VALUES (CCASE CL-TEST::Y (1 (SETQ CL-TEST::X (QUOTE CL-TEST::A)) (QUOTE CL-TEST::W)) (2 (SETQ CL-TEST::X (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y)) (3 (SETQ CL-TEST::X (QUOTE CL-TEST::C)) (QUOTE CL-TEST::Z))) CL-TEST::X))
Expected value:
          CL-TEST::Y
          CL-TEST::B
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.30 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A)))          NIL
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.31 failed
Form: (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (STORE-VALUE 7 CL-TEST::C))))) (LET ((CL-TEST::X 0)) (CCASE CL-TEST::X (1 :BAD) (7 :GOOD) (2 NIL))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.32 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::A (GO 10) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::BAD))))) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.33 failed
Form: (LET ((CL-TEST::X :B)) (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CCASE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)) (:A :BAD1) (:ctual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL(FUNCALL #<Function COMPILED-FUNCTION-P 2CAD5C> #<Function CONS 281AAC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2CAD5C> #<Function CAR 209D3C>) 617C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2CAD5C> #<Function VALUES 2BF13C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2CAD5C> #<Function (MACRO-FUNCTION COND) 50D0CC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2CAD5C> #<Function CL-TEST::MEANINGLESS-USER-FUNCTION-FOR-UNIVERSE 197CACC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2CAD5C> #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 407911C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2CAD5C> #<System.Eval::Interpreted-Function SYSTEM.EVAL::INTERPRETED-FUNCTION 40A356C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2CAD5C> #<Function (LAMBDA :IN NIL) 40A907C>) failed
Test CL-TEST::COMPILED-FUNCTION-P.1 failed
Form: (CL-TEST::CHECK-TYPE-PREDICATE (FUNCTION COMPILED-FUNCTION-P) (QUOTE COMPILED-FUNCTION))
Expected value:
          NIL
Actual value:
          (#<Function CONS 281AAC> #<Function CAR 209D3C> #<Function APPEND 3A617C> #<Function VALUES 2BF13C> #<Function (MACRO-FUNCTION COND) 50D0CNCTION-FOR-UNIVERSE 197CACC> #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 407911C> #<System.Eval::Interpreted-Function SYSTEM.EVAL::INTERPRETED-FUNCTION 40A356C> #<Function (LAMBDA :IN NIL) 40A907C>) [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILED-FUNCTION-P.2
Test CL-TEST::COMPILED-FUNCTION-P.3 failed
Form: (CL-TEST::NOTNOT-MV (COMPILED-FUNCTION-P (COMPILE NIL (QUOTE (LAMBDA (CL-TEST::Y CL-TEST::X) (CONS CL-TEST::X CL-TEST::Y))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::+FUNCTION-TYPE-INTERPRETED-FUNCTION+> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILED-FUNCTION-P.ORDER.1
 CL-TEST::COMPILED-FUNCTION-P.ERROR.1
 CL-TEST::COMPILED-FUNCTION-P.ERROR.2
 CL-TEST::COMPLEMENT.1
 CL-TEST::COMPLEMENT.2
 CL-TEST::COMPLEMENT.3
 CL-TEST::COMPLEMENT.4
 CL-TEST::COMPLEMENT.5
 CL-TEST::COMPLEMENT.6
 CL-TEST::COMPLEMENT.7
Test CL-TEST::COMPLEMENT.8 failed
Form: (FLET ((CL-TEST::%F (&KEY CL-TEST::X CL-TEST::Y) (IF CL-TEST::X (NOT CL-TEST::Y) CL-TEST::Y))) (LET ((CL-TEST::CF (COMPLEMENT (FUNCTION CL-TEST::%F)))) (VALUES (LIST (CL-TEST::%F) (CL-TEST::%F :X NIL) (CL-TEST::%F :X T) (CL-TEST::%F :Y NIL) (CL-TEST::%F :Y T :Y NIL) (CL-TEST::%F :X NIL :Y NIL) (CL-TEST::%F :X T :Y NIL) (CL-TEST::%F :Y T :X NIL) (CL-TEST::%F :X T :Y T)) (LIST (FUNCALL CL-TEST::CF) (FUNCALL CL-TEST::CF :X NIL) (FUNCALL CL-TEST::CF :X T) (FUNCALL CL-TEST::CF :Y NIL) (FUNCALL CL-TEST::CF :Y T) (FUNCALL CL-TEST::CF :X NIL :Y NIL) (FUNCALL CL-TEST::CF :X T :Y NIL) (FUNCALL CL-TEST::CF :Y T :X NIL) (FUNCALL CL-TEST::CF :X T :Y T :X NIL)) (LIST (FUNCALL CL-TEST::CF :X NIL :Y T :FOO NIL :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::CF :X NIL :Y T :ALLOW-OTHER-KEYS NIL)))))
Expected value:
          (NIL NIL T NIL T NIL T T NIL)
          (T T NIL T NIL T NIL NIL T)
          (NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :FOO.> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPLEMENT.9
 CL-TEST::COMPLEMENT.10
 CL-TEST::COMPLEMENT.ORDER.1
 CL-TEST::COMPLEMENT.ERROR.1
 CL-TEST::COMPLEMENT.ERROR.2
 CL-TEST::COMPLEMENT.ERROR.3
 CL-TEST::COMPLEMENT.ERROR.4
Test CL-TEST::COMPLEMENT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :FOO T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :FOO.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (CL-TEST::X &REST CL-TEST::Y) (AND CL-TEST::X (EVENP (LENGTH CL-TEST::Y))))))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::X &REST CL-TEST::Y)> [Actual value: #<error during printing>

 NIL
 CL-TEST::COND.1
 CL-TEST::COND.2
 CL-TEST::COND.3
 CL-TEST::COND.4
 CL-TEST::COND.5
 CL-TEST::COND.6
 CL-TEST::COND.7
 CL-TEST::COND.8
 CL-TEST::COND.9
 CL-TEST::COND.10
 CL-TEST::COND.11
 CL-TEST::COND.12
 CL-TEST::COND.13
 CL-TEST::COND.14
 CL-TEST::COND.15
 CL-TEST::COND.16
 CL-TEST::COND.17
 CL-TEST::COND.ERROR.1
 CL-TEST::COND.ERROR.2
 CL-TEST::COND.ERROR.3
 CL-TEST::CONSTANTLY.1
 CL-TEST::CONSTANTLY.2
 CL-TEST::CONSTANTLY.3
 CL-TEST::CONSTANTLY.ERROR.1
 CL-TEST::CONSTANTLY.ERROR.2
Test CL-TEST::CTYPECASE.1 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (QUOTE CL-TEST::A)) (T (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (CTYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A))))) (FUNCTION SYMBOLP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.3 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A)) (T (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::B
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.4 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (VALUES))))
Expected value:
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.5 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (VALUES)) (T (QUOTE CL-TEST::A))))
Expected value:
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.6 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (BIT (QUOTE CL-TEST::A)) (INTEGER (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.7 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.8 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.9 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (T NIL)))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.10 failed
Form: (LET ((CL-TEST::X 0) (CL-TEST::Y 1)) (VALUES (CTYPECASE CL-TEST::Y (BIT (INCF CL-TEST::X) (QUOTE CL-TEST::A)) (INTEGER (INCF CL-TEST::X 2) (QUOTE CL-TEST::B)) (T (INCF CL-TEST::X 4) (QUOTE CL-TEST::C))) CL-TEST::X))
Expected value:
          CL-TEST::A
          1
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.11 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER) (T (QUOTE CL-TEST::A))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.12 failed
Form: (LET ((CL-TEST::X 1)) (VALUES (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (EQL (TYPE-ERROR-DATUM CL-TEST::C) 1)) (ASSERT (NOT (TYPEP 1 (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) (STORE-VALUE (QUOTE CL-TEST::A) CL-TEST::C))))) (CTYPECASE CL-TEST::X (SYMBOL :GOOD) (FLOAT :BAD))) CL-TEST::X))
Expected value:
          :GOOD
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.13 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CTYPECASE CL-TEST::X (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL C00B44B7> (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.14 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CTYPECASE CL-TEST::X (SYMBOL (GO 10) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::BAD))))) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.15 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CTYPECASE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :FOO)) (INTEGER :BAD1) (KEYWORD :GOOD) (SYMBOL :BAD2)))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.16 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CTYPECASE :FOO (INTEGER (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :BAD1))) (KEYWORD (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :GOOD))) (SYMBOL (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :BAD2)))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCONSTANT.1
 CL-TEST::DEFCONSTANT.2
 CL-TEST::DEFCONSTANT.3
Test CL-TEST::DEFCONSTANT.4 failed
Form: (DOCUMENTATION (QUOTE CL-TEST::TEST-CONSTANT-2) (QUOTE VARIABLE))
Expected value:
          "This is the documentation."
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCONSTANT.5
 CL-TEST::DEFCONSTANT.ERROR.1
 CL-TEST::DEFCONSTANT.ERROR.2
 CL-TEST::DEFCONSTANT.ERROR.3
Test CL-TEST::DEFINE-MODIFY-MACRO.1 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::DMM1-APPENDF (&REST CL-TEST::ARGS) APPEND "Append lists onto a list"))) (EVAL (QUOTE (LET ((CL-TEST::U (QUOTE (CL-TEST::P CL-TEST::Q CL-TEST::R))) CL-TEST::V) (LIST (SETQ CL-TEST::V CL-TEST::U) (CL-TEST::DMM1-APPENDF CL-TEST::U (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::DMM1-APPENDF CL-TEST::U NIL) (CL-TEST::DMM1-APPENDF CL-TEST::U (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G))) CL-TEST::U CL-TEST::V)))))
Expected value:
          CL-TEST::DMM1-APPENDF
          ((CL-TEST::P CL-TEST::Q CL-TEST::R) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R))
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::DMM1-APPENDF) 3D8368C> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.2 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::I 10)) (LIST (CL-TEST::NEW-INCF CL-TEST::I) (CL-TEST::NEW-INCF CL-TEST::I 100) CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF
          (11 111 111)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF) 3D96B3C> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.3 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF1 (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::A (VECTOR 0 0 0 0 0)) (CL-TEST::I 1)) (LIST (CL-TEST::NEW-INCF1 (AREF CL-TEST::A (INCF CL-TEST::I))) CL-TEST::A CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF1
          (1 #(0 0 1 0 0) 2)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF1) 3DA29EC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.4 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF2 (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::A (VECTOR 0 0 0 0 0)) (CL-TEST::I 1)) (LIST (CL-TEST::NEW-INCF2 (AREF CL-TEST::A (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::A CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF2
          (3 #(0 0 3 0 0) 3)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF2) 3DAAC6C> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-MODIFY-MACRO.ERROR.1
 CL-TEST::DEFINE-MODIFY-MACRO.DOCUMENTATION.1
 CL-TEST::DEFINE-MODIFY-MACRO.DOCUMENTATION.2
 CL-TEST::DEFPARAMETER.1
 CL-TEST::DEFPARAMETER.2
 CL-TEST::DEFPARAMETER.3
Test CL-TEST::DEFPARAMETER.4 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "Whatever."
          200
Actual value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPARAMETER.5 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2* (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 300 "And ever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "Whatever."
          200
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "And ever."
          300
Actual value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFPARAMETER.ERROR.1
 CL-TEST::DEFPARAMETER.ERROR.2
 CL-TEST::DEFPARAMETER.ERROR.3
 CL-TEST::DEFUN.1
 CL-TEST::DEFUN.2
Test CL-TEST::DEFUN.3 failed
Form: (CL-TEST::DEFUN-TEST-FUN-3)
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          CL-TEST::A [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFUN.4
 CL-TEST::DEFUN.5
 CL-TEST::DEFUN.6
 CL-TEST::DEFUN.7
 CL-TEST::DEFUN.8
 CL-TEST::DEFUN.ERROR.1
 CL-TEST::DEFUN.ERROR.2
 CL-TEST::DEFUN.ERROR.3
Test CL-TEST::DEFUN.ERROR.4 failed
Form: (LET* ((CL-TEST::NAME (GENSYM))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW (MIN 100 LAMBDA-PARAMETERS-LIMIT) CL-TEST::FOR CL-TEST::PARAMS = NIL CL-TEST::THEN (CONS (GENSYM) CL-TEST::PARAMS) CL-TEST::FOR CL-TEST::ARGS = NIL CL-TEST::THEN (CONS NIL CL-TEST::ARGS) CL-TEST::FOR CL-TEST::EXPECTED = (QUOTE (1 2 3)) CL-TEST::FOR CL-TEST::FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (PROG2 (PROCLAIM (QUOTE (OPTIMIZE (SAFETY 0)))) (DEFUN (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::PARAMS) (VALUES (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::EXPECTED))) (PROCLAIM (QUOTE (OPTIMIZE SAFETY)))))) WHEN (COND ((NOT (EQUAL (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN CL-TEST::ARGS)) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL1)) ((NOT (EQUAL (MULTIPLE-VALUE-LIST (APPLY (SYMBOL-FUNCTION CL-TEST::FN) CL-TEST::ARGS)) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL2)) ((NOT (EQUAL (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::ARGS))))) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL3)) ((AND (> CL-TEST::I 0) (LET ((CL-TEST::VAL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDR CL-TEST::ARGS))) PROGRAM-ERROR))))) (AND (NOT (EQ CL-TEST::VAL T)) :FAIL4)))) ((AND (< CL-TEST::I (1- CALL-ARGUMENTS-LIMIT)) (LET ((CL-TEST::VAL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::ARGS)) PROGRAM-ERROR))))) (AND (NOT (EQ CL-TEST::VAL T)) :FAIL5))))) CL-TEST::COLLECT CL-TEST::IT))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFVAR.1
 CL-TEST::DEFVAR.2
 CL-TEST::DEFVAR.3
Test CL-TEST::DEFVAR.4 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*)) (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "Whatever."
          200
Actual value:
          CL-TEST::*DEFVAR-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFVAR.5 failed
Form: (LET ((CL-TEST::X 0)) (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*)) (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2* (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* (INCF CL-TEST::X) "And ever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2* CL-TEST::X))
Expected value:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "Whatever."
          200
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "And ever."
          200
          0
Actual value:
          CL-TEST::*DEFVAR-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFVAR.ERROR.1
 CL-TEST::DEFVAR.ERROR.2
 CL-TEST::DEFVAR.ERROR.3
 CL-TEST::DESTRUCTURING-BIND.1
 CL-TEST::DESTRUCTURING-BIND.2
 CL-TEST::DESTRUCTURING-BIND.3
 CL-TEST::DESTRUCTURING-BIND.4
 CL-TEST::DESTRUCTURING-BIND.5
 CL-TEST::DESTRUCTURING-BIND.6
 CL-TEST::DESTRUCTURING-BIND.7
 CL-TEST::DESTRUCTURING-BIND.7A
 CL-TEST::DESTRUCTURING-BIND.8
 CL-TEST::DESTRUCTURING-BIND.9
 CL-TEST::DESTRUCTURING-BIND.10
 CL-TEST::DESTRUCTURING-BIND.11
 CL-TEST::DESTRUCTURING-BIND.12
 CL-TEST::DESTRUCTURING-BIND.12A
 CL-TEST::DESTRUCTURING-BIND.13
 CL-TEST::DESTRUCTURING-BIND.14
 CL-TEST::DESTRUCTURING-BIND.15
 CL-TEST::DESTRUCTURING-BIND.16
 CL-TEST::DESTRUCTURING-BIND.17
 CL-TEST::DESTRUCTURING-BIND.17A
 CL-TEST::DESTRUCTURING-BIND.17C
 CL-TEST::DESTRUCTURING-BIND.18
 CL-TEST::DESTRUCTURING-BIND.19
Test CL-TEST::DESTRUCTURING-BIND.20 failed
Form: (DESTRUCTURING-BIND (&WHOLE (CL-TEST::A . CL-TEST::B) CL-TEST::C . CL-TEST::D) (QUOTE (1 . 2)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))
Expected value:
          (1 2 1 2)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::NAME is (CL-TEST::A . CL-TEST::B), which is not of type SYMBOL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DESTRUCTURING-BIND.21
 CL-TEST::DESTRUCTURING-BIND.22
 CL-TEST::DESTRUCTURING-BIND.23
 CL-TEST::DESTRUCTURING-BIND.24
 CL-TEST::DESTRUCTURING-BIND.25
 CL-TEST::DESTRUCTURING-BIND.26
 CL-TEST::DESTRUCTURING-BIND.27
 CL-TEST::DESTRUCTURING-BIND.28
 CL-TEST::DESTRUCTURING-BIND.29
 CL-TEST::DESTRUCTURING-BIND.30
 CL-TEST::DESTRUCTURING-BIND.31
 CL-TEST::DESTRUCTURING-BIND.ERROR.7
 CL-TEST::DESTRUCTURING-BIND.ERROR.8
 CL-TEST::DESTRUCTURING-BIND.ERROR.9
 CL-TEST::ECASE.1
Test CL-TEST::ECASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (CL-TEST::C CL-TEST::B CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (T NIL)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (T)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (OTHERWISE NIL)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (OTHERWISE)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.6
 CL-TEST::ECASE.7
Test CL-TEST::ECASE.8 failed
Form: (ECASE (1+ MOST-POSITIVE-FIXNUM) (1152921504606846976 (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error 1152921504606846976 fell through ECASE expression. Wanted one of (1152921504606846976)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X NIL (ECASE CL-TEST::X (NIL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Simple-Error NIL fell through ECASE expression. Wanted one of NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.10
 CL-TEST::ECASE.11
Test CL-TEST::ECASE.12 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (ECASE CL-TEST::X (CL-TEST::A 10)))
Expected value:
          T
Actual value:
          #<Simple-Error T fell through ECASE expression. Wanted one of (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.13
 CL-TEST::ECASE.14
Test CL-TEST::ECASE.15 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE OTHERWISE) (ECASE CL-TEST::X ((T) 10)))
Expected value:
          T
Actual value:
          #<Simple-Error OTHERWISE fell through ECASE expression. Wanted one of (T)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.16 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (ECASE CL-TEST::X ((OTHERWISE) 10)))
Expected value:
          T
Actual value:
          #<Simple-Error T fell through ECASE expression. Wanted one of (OTHERWISE)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.17 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) (OTHERWISE 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (OTHERWISE CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.18 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((OTHERWISE) 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (OTHERWISE CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.19 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((T) 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (T CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.20
 CL-TEST::ECASE.21
 CL-TEST::ECASE.23
 CL-TEST::ECASE.25
 CL-TEST::ECASE.26
 CL-TEST::ECASE.27
 CL-TEST::ECASE.28
 CL-TEST::ECASE.29
 CL-TEST::ECASE.31
Test CL-TEST::ECASE.32 failed
Form: (ECASE (QUOTE CL-TEST::A) (CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.33
 CL-TEST::ECASE.34
 CL-TEST::ECASE.ERROR.1
 CL-TEST::ECASE.ERROR.2
 CL-TEST::ECASE.ERROR.3
 CL-TEST::EQL.1
 CL-TEST::EQL.2
 CL-TEST::EQL.3
 CL-TEST::EQL.4
Test CL-TEST::EQL.5 failed
Form: (CL-TEST::EQLT 12345678901234567890 12345678901234567890)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.7
Test CL-TEST::EQL.8 failed
Form: (CL-TEST::EQLT #C(1 -2) #C(1 -2))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.9
 CL-TEST::EQL.10
Test CL-TEST::EQL.11 failed
Form: (CL-TEST::EQLT #C(1 -2) (- #C(-1 2)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.ORDER.1
 CL-TEST::EQL.ERROR.1
 CL-TEST::EQL.ERROR.2
 CL-TEST::EQL.ERROR.3
 CL-TEST::EQ.ERROR.1
 CL-TEST::EQ.ERROR.2
 CL-TEST::EQ.ERROR.3
 CL-TEST::EQUAL.1
 CL-TEST::EQUAL.2
 CL-TEST::EQUAL.3
 CL-TEST::EQUAL.4
 CL-TEST::EQUAL.5
 CL-TEST::EQUAL.6
 CL-TEST::EQUAL.7
 CL-TEST::EQUAL.8
 CL-TEST::EQUAL.9
 CL-TEST::EQUAL.10
Test CL-TEST::EQUAL.11 failed
Form: (CL-TEST::EQUALT (COPY-SEQ #*000110) (COPY-SEQ #*000110))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUAL.12
 CL-TEST::EQUAL.15
 CL-TEST::EQUAL.16
 CL-TEST::EQUAL.17
Test CL-TEST::EQUAL.18 failed
Form: (LET ((CL-TEST::B (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*0110001110 :FILL-POINTER 5))) (VALUES (CL-TEST::EQUALT #*01100 CL-TEST::B) (CL-TEST::EQUALT #*01100 CL-TEST::B)))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUAL.19
 CL-TEST::EQUAL.ORDER.1
 CL-TEST::EQUAL.ERROR.1
 CL-TEST::EQUAL.ERROR.2
 CL-TEST::EQUAL.ERROR.3
 CL-TEST::EQUALP.1
 CL-TEST::EQUALP.2
 CL-TEST::EQUALP.3
 CL-TEST::EQUALP.4
Test CL-TEST::EQUALP.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::VAL = (RANDOM CL-TEST::BOUND) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY NIL :INITIAL-ELEMENT CL-TEST::VAL :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY NIL :INITIAL-ELEMENT CL-TEST::VAL) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VAL))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::N = (1+ (RANDOM 20)) CL-TEST::FOR CL-TEST::VALS = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (RANDOM CL-TEST::BOUND)) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VALS))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.9 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::N = (1+ (RANDOM 20)) CL-TEST::FOR CL-TEST::VALS = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (- (RANDOM CL-TEST::BOUND) (/ CL-TEST::BOUND 2))) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VALS))
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.10
 CL-TEST::EQUALP.11
 CL-TEST::EQUALP.12
 CL-TEST::EQUALP.13
 CL-TEST::EQUALP.14
 CL-TEST::EQUALP.15
 CL-TEST::EQUALP.16
Test CL-TEST::EQUALP.17 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW 8192 CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0S0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0F0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0F0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0D0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0D0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.20 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0L0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0L0> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.21
 CL-TEST::EQUALP.22
 CL-TEST::EQUALP.23
 CL-TEST::EQUALP.24
 CL-TEST::EQUALP.25
 CL-TEST::EQUALP.26
 CL-TEST::EQUALP.27
 CL-TEST::EQUALP.28
 CL-TEST::EQUALP.29
 CL-TEST::EQUALP.30
 CL-TEST::EQUALP.31
Test CL-TEST::EQUALP.32 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH #\a CL-TEST::HT1) T) (SETF (GETHASH #\A CL-TEST::HT2) T) (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          T
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.33 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH #\a CL-TEST::HT1) "a") (SETF (GETHASH #\a CL-TEST::HT2) "A") (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          T
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.34 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH (QUOTE #:A) CL-TEST::HT1) T) (SETF (GETHASH (QUOTE #:A) CL-TEST::HT2) T) (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          NIL
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.35 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TEST CL-TEST::IN (QUOTE (EQ EQL EQUAL EQUALP)) CL-TEST::COLLECT (FLET ((CL-TEST::%MAKE-TABLE NIL (APPLY (FUNCTION MAKE-HASH-TABLE) :TEST CL-TEST::TEST (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :SIZE (RANDOM 100)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :REHASH-SIZE (1+ (RANDOM 50))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :REHASH-THRESHOLD (RANDOM 1.0))))))))) (LOOP CL-TEST::REPEAT 200 COUNT (LET ((CL-TEST::HT1 (CL-TEST::%MAKE-TABLE)) (CL-TEST::HT2 (CL-TEST::%MAKE-TABLE)) (CL-TEST::PAIRS (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW (RANDOM 100) CL-TEST::COLLECT (CONS (GENSYM) CL-TEST::I)))) (LOOP CL-TEST::FOR (CL-TEST::K . CL-TEST::V) CL-TEST::IN CL-TEST::PAIRS DO (SETF (GETHASH CL-TEST::K CL-TEST::HT1) CL-TEST::V)) (SETF CL-TEST::PAIRS (CL-TEST:RANDOM-PERMUTE CL-TEST::PAIRS)) (LOOP CL-TEST::FOR (CL-TEST::K . CL-TEST::V) CL-TEST::IN CL-TEST::PAIRS DO (SETF (GETHASH CL-TEST::K CL-TEST::HT2) CL-TEST::V)) (NOT (EQUALP CL-TEST::HT1 CL-TEST::HT2))))))
Expected value:
          (0 0 0 0)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.ORDER.1
 CL-TEST::EQUALP.ERROR.1
 CL-TEST::EQUALP.ERROR.2
 CL-TEST::EQUALP.ERROR.3
 CL-TEST::ETYPECASE.1
 CL-TEST::ETYPECASE.2
 CL-TEST::ETYPECASE.3
 CL-TEST::ETYPECASE.4
 CL-TEST::ETYPECASE.5
 CL-TEST::ETYPECASE.6
 CL-TEST::ETYPECASE.7
 CL-TEST::ETYPECASE.8
 CL-TEST::ETYPECASE.9
 CL-TEST::ETYPECASE.10
Test CL-TEST::ETYPECASE.11 failed
Form: (ETYPECASE 1 (INTEGER) (T (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::ETYPECASE.12 failed
Form: (ETYPECASE (QUOTE CL-TEST::A) (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL 800B59E7> (QUOTE CL-TEST::GOOD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Type-Error 81CA6AF7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.13
 CL-TEST::ETYPECASE.14
Test CL-TEST::ETYPECASE.15 failed
Form: (LET* ((CL-TEST::U (COERCE CL-TEST:*UNIVERSE* (QUOTE VECTOR))) (CL-TEST::LEN1 (LENGTH CL-TEST::U)) (CL-TEST::TYPES (COERCE CL-TEST::*CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (CL-TEST::LEN2 (LENGTH CL-TEST::TYPES))) (LOOP CL-TEST::FOR CL-TEST::N = (RANDOM 10) CL-TEST::FOR CL-TEST::MY-TYPES = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (ELT CL-TEST::TYPES (RANDOM CL-TEST::LEN2))) CL-TEST::FOR CL-TEST::VAL = (ELT CL-TEST::U (RANDOM CL-TEST::LEN1)) CL-TEST::FOR CL-TEST::I = (POSITION CL-TEST::VAL CL-TEST::MY-TYPES :TEST (FUNCTION TYPEP)) CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA (CL-TEST::X) (CL-TEST::HANDLER-CASE (ETYPECASE CL-TEST::X (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::FOR TYPE CL-TEST::IN CL-TEST::MY-TYPES CL-TEST::COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I)))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (EQL CL-TEST::X (TYPE-ERROR-DATUM CL-TEST::C))) (LET* ((CL-TEST::EXPECTED (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C))) (LET ((CL-TEST::EQUIV (CL-TEST::CHECK-EQUIVALENCE CL-TEST::EXPECTED (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (CONS (QUOTE OR) CL-TEST::MY-TYPES)))))) (ASSERT (NULL CL-TEST::EQUIV) NIL "EQUIV = ~A" CL-TEST::EQUIV))) NIL))))) CL-TEST::FOR CL-TEST::J = (FUNCALL (EVAL CL-TEST::FORM) CL-TEST::VAL) CL-TEST::REPEAT 200 UNLESS (EQL CL-TEST::I CL-TEST::J) CL-TEST::COLLECT (LIST CL-TEST::N CL-TEST::MY-TYPES CL-TEST::VAL CL-TEST::I CL-TEST::FORM CL-TEST::J)))
Expected value:
          NIL
Actual value:
          #<Simple-Error EQUIV = (((SUBTYPEP (QUOTE (AND (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING) (NOT (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING)))) NIL) ==> NIL T) ((SUBTYPEP (QUOTE (AND (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING) (NOT (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING)))) NIL) ==> NIL T) ((SUBTYPEP (QUOTE (AND (NOT (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING)) (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING))) NIL) ==> NIL T) ((SUBTYPEP (QUOTE (AND (NOT (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING)) (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING))) NIL) ==> NIL T) ((SUBTYPEP T (QUOTE (OR (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING) (NOT (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING))))) ==> NIL T) ((SUBTYPEP T (QUOTE (OR (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING) (NOT (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING))))) ==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING)) (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING)))) ==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT (OR LONG-FLOAT SIGNED-BYTE SIMPLE-ARRAY SIMPLE-BASE-STRING)) (OR LONG-FLOAT SIGNED-BYTE SIMPLEAY SIMPLE-BASE-STRING)))) ==> NIL T))> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.16
 CL-TEST::ETYPECASE.17
 CL-TEST::ETYPECASE.ERROR.1
 CL-TEST::ETYPECASE.ERROR.2
 CL-TEST::ETYPECASE.ERROR.3
 CL-TEST::EVERY.1
 CL-TEST::EVERY.2
 CL-TEST::EVERY.3
 CL-TEST::EVERY.4
 CL-TEST::EVERY.5
 CL-TEST::EVERY.6
 CL-TEST::EVERY.7
 CL-TEST::EVERY.8
 CL-TEST::EVERY.9
 CL-TEST::EVERY.10
 CL-TEST::EVERY.11
 CL-TEST::EVERY.12
 CL-TEST::EVERY.13
 CL-TEST::EVERY.14
 CL-TEST::EVERY.15
 CL-TEST::EVERY.16
 CL-TEST::EVERY.17
Test CL-TEST::EVERY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 1 1 1 1 1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (EVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (EVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.20
 CL-TEST::EVERY.21
 CL-TEST::EVERY.22
 CL-TEST::EVERY.23
Test CL-TEST::EVERY.24 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (EVERY (QUOTE EVENP) CL-TEST::V1)) (EVERY (FUNCTION EVENP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.25 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (EVERY (QUOTE EVENP) CL-TEST::V1)) (EVERY (FUNCTION EVENP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.26
 CL-TEST::EVERY.27
 CL-TEST::EVERY.28
 CL-TEST::EVERY.29
Test CL-TEST::EVERY.30 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.31 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 -1)))) UNLESS (EVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.32 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION COMPLEXP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 21 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.ORDER.1
 CL-TEST::EVERY.ORDER.2
 CL-TEST::EVERY.ERROR.1
 CL-TEST::EVERY.ERROR.2
 CL-TEST::EVERY.ERROR.3
 CL-TEST::EVERY.ERROR.8
 CL-TEST::EVERY.ERROR.9
 CL-TEST::EVERY.ERROR.10
 CL-TEST::EVERY.ERROR.11
 CL-TEST::EVERY.ERROR.12
 CL-TEST::EVERY.ERROR.13
 CL-TEST::EVERY.ERROR.14
 CL-TEST::FBOUNDP.1
 CL-TEST::FBOUNDP.2
 CL-TEST::FBOUNDP.3
 CL-TEST::FBOUNDP.4
 CL-TEST::FBOUNDP.5
 CL-TEST::FBOUNDP.6
 CL-TEST::FBOUNDP.7
Test CL-TEST::FBOUNDP.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* WHEN (AND (FBOUNDP CL-TEST::X) (NOT (EQ CL-TEST::X (QUOTE ED)))) CL-TEST::COLLECT CL-TEST::X)
Expected value:
          NIL
Actual value:
          (STRUCTURE-CLASS) [Actual value: #<error during printing>

 NIL
 CL-TEST::FBOUNDP.ORDER.1
Test CL-TEST::FBOUNDP.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FBOUNDP) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (CL-TEST::X)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (CL-TEST::X).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF CL-TEST::FOO . CL-TEST::BAR)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH (SETF CL-TEST::FOO . CL-TEST::BAR) CL-TEST::BAR) [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF CL-TEST::FOO CL-TEST::BAR)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (SETF CL-TEST::FOO CL-TEST::BAR).> [Actual value: #<error during printing>

 NIL
 CL-TEST::FBOUNDP.ERROR.6
 CL-TEST::FBOUNDP.ERROR.7
Test CL-TEST::FBOUNDP.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FBOUNDP 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 1.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF . CL-TEST::FOO)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH (SETF . CL-TEST::FOO) CL-TEST::FOO) [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.10 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FBOUNDP (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C042E2F7> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C042E2F7>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C047AF57> #<Simple-Error Invalid function name (SETF #<Hash-Table C047AF57>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C00026B7> #<Simple-Error Invalid function name (SETF #<Readtable C00026B7>).>) (#<Cl-Test::Foo-Structure C030EF17> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C030EF17>).>) (#<Function CONS 281AAC> #<Simple-Error Invalid function name (SETF #<Function CONS 281AAC>).>) (#<Random-State C0479F97> #<Simple-Error Invalid function name (SETF #<Random-State C0479F97>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0476C27> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0476C27>).>)) [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.ERROR.1
 CL-TEST::FDEFINITION.ERROR.2
 CL-TEST::FDEFINITION.ERROR.3
Test CL-TEST::FDEFINITION.ERROR.4 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FDEFINITION 10) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 10.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . CL-TEST::FOO) (SETF CL-TEST::FOO . CL-TEST::BAR) (SETF CL-TEST::FOO CL-TEST::BAR))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C042E2F7> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C042E2F7>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C047AF57> #<Simple-Error Invalid function name (SETF #<Hash-Table C047AF57>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C00026B7> #<Simple-Error Invalid function name (SETF #<Readtable C00026B7>).>) (#<Cl-Test::Foo-Structure C030EF17> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C030EF17>).>) (#<Function CONS 281AAC> #<Simple-Error Invalid function name (SETF #<Function CONS 281AAC>).>) (#<Random-State C0479F97> #<Simple-Error Invalid function name (SETF #<Random-State C0479F97>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0476C27> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0476C27>).>)) [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.1
 CL-TEST::FDEFINITION.2
Test CL-TEST::FDEFINITION.3 failed
Form: (PROGN (FDEFINITION (QUOTE SETQ)) :GOOD)
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function SETQ> [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.4
 CL-TEST::FDEFINITION.5
Test CL-TEST::FDEFINITION.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (FDEFINITION (PROGN (INCF CL-TEST::I) (QUOTE SETQ))) CL-TEST::I)
Expected value:
          1
Actual value:
          #<Undefined-Function SETQ> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.1
 CL-TEST::FLET.2
 CL-TEST::FLET.3
 CL-TEST::FLET.4
 CL-TEST::FLET.4A
 CL-TEST::FLET.5
 CL-TEST::FLET.6
 CL-TEST::FLET.7
 CL-TEST::FLET.8
 CL-TEST::FLET.9
 CL-TEST::FLET.10
 CL-TEST::FLET.11
Test CL-TEST::FLET.12 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :C 4)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.13 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.14 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.15 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F 1 2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.16 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A) CL-TEST::A)) (CL-TEST::%F (QUOTE (CL-TEST::FOO)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.17 failed
Form: (FLET (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (LET ((CL-TEST::Z (LIST 1 2))) (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::A)) CL-TEST::Z))
Expected value:
          (CL-TEST::A 2)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.18
 CL-TEST::FLET.19
Test CL-TEST::FLET.20 failed
Form: (LET* ((CL-TEST::N (MIN (1- LAMBDA-PARAMETERS-LIMIT) 1024)) (CL-TEST::VARS (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (GENSYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::EQLT (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) (FLET ((CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (+ (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::VARS)))) (CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::VARS CL-TEST::COLLECT 1))))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.21
 CL-TEST::FLET.22
 CL-TEST::FLET.23
 CL-TEST::FLET.24
 CL-TEST::FLET.25
Test CL-TEST::FLET.26 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :WHATEVER NIL :ALLOW-OTHER-KEYS T) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ILLEGAL T :FOO (QUOTE CL-TEST::Z) :ALLOW-OTHER-KEYS T)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:FOO CL-TEST::H :WHATEVER NIL :ALLOW-OTHER-KEYS T) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:BAR CL-TEST::I :ILLEGAL T :FOO CL-TEST::Z :ALLOW-OTHER-KEYS T) CL-TEST::Z CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :WHATEVER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.27 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :ALLOW-OTHER-KEYS NIL) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ALLOW-OTHER-KEYS NIL)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:FOO CL-TEST::H :ALLOW-OTHER-KEYS NIL) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:BAR CL-TEST::I :ALLOW-OTHER-KEYS NIL) NIL CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.28 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR CL-TEST::ALLOW-OTHER-KEYS) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::ALLOW-OTHER-KEYS CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :WHATEVER NIL :ALLOW-OTHER-KEYS 100) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ILLEGAL T :FOO (QUOTE CL-TEST::Z) :ALLOW-OTHER-KEYS 200)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T 100 (:FOO CL-TEST::H :WHATEVER NIL :ALLOW-OTHER-KEYS 100) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T 200 (:BAR CL-TEST::I :ILLEGAL T :FOO CL-TEST::Z :ALLOW-OTHER-KEYS 200) CL-TEST::Z CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :WHATEVER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.29
 CL-TEST::FLET.30
 CL-TEST::FLET.31
 CL-TEST::FLET.32
 CL-TEST::FLET.33
 CL-TEST::FLET.34
Test CL-TEST::FLET.35 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G (QUOTE CL-TEST::GOOD)))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.36 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&AUX (CL-TEST::X (QUOTE CL-TEST::GOOD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.37 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&REST CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G (QUOTE CL-TEST::GOOD)))))
Expected value:
          (CL-TEST::GOOD)
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.38 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&KEY (CL-TEST::X (QUOTE CL-TEST::GOOD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.39 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&KEY (CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G :X (QUOTE CL-TEST::GOOD)))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.40
 CL-TEST::FLET.45
 CL-TEST::FLET.46
 CL-TEST::FLET.47
 CL-TEST::FLET.48
 CL-TEST::FLET.49
 CL-TEST::FLET.50
Test CL-TEST::FLET.51 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (FLET (((SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) (&REST CL-TEST::ARGS) (DECLARE (IGNORE CL-TEST::ARGS)) (QUOTE CL-TEST::A))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) 10)))) UNLESS (EQ (EVAL CL-TEST::FORM) (QUOTE CL-TEST::A)) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (WARNING VARIABLE UNSIGNED-BYTE UNDEFINED-FUNCTION UNBOUND-VARIABLE UNBOUND-SLOT TYPE-ERROR TYPE TWO-WAY-STREAM T SYNONYM-STREAM SYMBOL STYLE-WARNING STRUCTURE-OBJECT STRUCTURE-CLASS STRUCTURE STRING-STREAM STREAM-ERROR STREAM STORAGE-CONDITION STANDARD-OBJECT STANDARD-METHOD STANDARD-GENERIC-FUNCTION STANDARD-CLASS STANDARD-CHAR STANDARD SPEED SPECIAL SPACE SINGLE-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT SIMPLE-WARNING SIMPLE-VECTOR SIMPLE-TYPE-ERROR SIMPLE-STRING SIMPLE-ERROR SIMPLE-CONDITION SIMPLE-BIT-VECTOR SIMPLE-BASE-STRING SIMPLE-ARRAY SIGNED-BYTE SHORT-FLOAT-NEGATIVE-EPSILON SHORT-FLOAT-EPSILON SHORT-FLOAT SERIOUS-CONDITION SEQUENCE SATISFIES SAFETY RESTART REAL READTABLE READER-ERROR RATIO RANDOM-STATE PROGRAM-ERROR PRINT-NOT-READABLE PI PARSE-ERROR PACKAGE-ERROR PACKAGE OTHERWISE OPTIMIZE NUMBER NOTINLINE NIL MULTIPLE-VALUES-LIMIT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-LONG-FLOAT MOST-POSITIVE-FIXNUM MOST-POSITIVE-DOUBLE-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-LONG-FLOAT MOST-NEGATIVE-FIXNUM MOST-NEGATIVE-DOUBLE-FLOAT METHOD-COMBINATION METHOD LONG-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-EPSILON LONG-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LAMBDA-PARAMETERS-LIMIT LAMBDA-LIST-KEYWORDS KEYWORD INTERNAL-TIME-UNITS-PER-SECOND INTEGER INLINE IGNORE IGNORABLE HASH-TABLE GENERIC-FUNCTION FTYPE FLOATING-POINT-UNDERFLOW FLOATING-POINT-OVERFLOW FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-INEXACT FIXNUM FILE-STREAM FILE-ERROR EXTENDED-CHAR END-OF-FILE ECHO-STREAM DYNAMIC-EXTENT DOUBLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT DIVISION-BY-ZERO DECLARATION DEBUG CONTROL-ERROR CONDITION CONCATENATED-STREAM COMPILER-MACRO COMPILED-FUNCTION COMPILATION-SPEED CLASS CHAR-CODE-LIMIT CELL-ERROR CALL-ARGUMENTS-LIMIT BUILT-IN-CLASS BROADCAST-STREAM BOOLEAN BOOLE-XOR BOOLE-SET BOOLE-ORC2 BOOLE-ORC1 BOOLE-NOR BOOLE-NAND BOOLE-IOR BOOLE-EQV BOOLE-CLR BOOLE-C2 BOOLE-C1 BOOLE-ANDC2 BOOLE-ANDC1 BOOLE-AND BOOLE-2 BOOLE-1 BIT-VECTOR BIGNUM BASE-STRING BASE-CHAR ARRAY-TOTAL-SIZE-LIMIT ARRAY-RANK-LIMIT ARRAY-DIMENSION-LIMIT ARRAY ARITHMETIC-ERROR /// // +++ ++ *TRACE-OUTPUT* *TERMINAL-IO* *STANDARD-OUTPUT* *STANDARD-INPUT* *READTABLE* *READ-SUPPRESS* *READ-EVAL* *READ-DEFAULT-FLOAT-FORMAT* *READ-BASE* *RANDOM-STATE* *QUERY-IO* *PRINT-RIGHT-MARGIN* *PRINT-READABLY* *PRINT-RADIX* *PRINT-PRETTY* *PRINT-PPRINT-DISPATCH* *PRINT-MISER-WIDTH* *PRINT-LINES* *PRINT-LEVEL* *PRINT-LENGTH* *PRINT-GENSYM* *PRINT-ESCAPE* *PRINT-CIRCLE* *PRINT-CASE* *PRINT-BASE* *PRINT-ARRAY* *PACKAGE* *MODULES* *MACROEXPAND-HOOK* *LOAD-VERBOSE* *LOAD-TRUENAME* *LOAD-PRINT* *LOAD-PATHNAME* *GENSYM-COUNTER* *FEATURES* *ERROR-OUTPUT* *DEFAULT-PATHNAME-DEFAULTS* *DEBUGGER-HOOK* *DEBUG-IO* *COMPILE-VERBOSE* *COMPILE-PRINT* *COMPILE-FILE-TRUENAME* *COMPILE-FILE-PATHNAME* *BREAK-ON-SIGNALS* *** ** &WHOLE &REST &OPTIONAL &KEY &ENVIRONMENT &BODY &AUX &ALLOW-OTHER-KEYS) [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.52
 CL-TEST::FLET.53
 CL-TEST::FLET.54
 CL-TEST::FLET.55
 CL-TEST::FLET.56
Test CL-TEST::FLET.57 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.58 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.59 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T :A 1 :B 2))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.60
Test CL-TEST::FLET.61 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY) :BAD)) (CL-TEST::%F NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.62
 CL-TEST::FLET.63
 CL-TEST::FLET.64
 CL-TEST::FLET.65
 CL-TEST::FLET.66
 CL-TEST::FLET.67
 CL-TEST::FLET.68
 CL-TEST::FLET.69
 CL-TEST::FLET.70
 CL-TEST::FLET.71
 CL-TEST::FLET.72
Test CL-TEST::FLET.73 failed
Form: (FLET ((CL-TEST::FLET.73 NIL :GOOD)) (CL-TEST::FLET.73))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.74
 CL-TEST::FMAKUNBOUND.1
 CL-TEST::FMAKUNBOUND.2
 CL-TEST::FMAKUNBOUND.3
 CL-TEST::FMAKUNBOUND.4
Test CL-TEST::FMAKUNBOUND.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . CL-TEST::FOO) (SETF CL-TEST::FOO . CL-TEST::BAR) (SETF CL-TEST::FOO CL-TEST::BAR))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (CL-TEST::X)) (FMAKUNBOUND CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (CL-TEST::X).> [Actual value: #<error during printing>

 NIL
 CL-TEST::FMAKUNBOUND.ERROR.4
 CL-TEST::FMAKUNBOUND.ERROR.5
Test CL-TEST::FMAKUNBOUND.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FMAKUNBOUND 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 1.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FMAKUNBOUND (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C059AB27> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C059AB27>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C05A0DF7> #<Simple-Error Invalid function name (SETF #<Hash-Table C05A0DF7>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C00026F7> #<Simple-Error Invalid function name (SETF #<Readtable C00026F7>).>) (#<Cl-Test::Foo-Structure C059EC77> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C059EC77>).>) (#<Function CONS 281AAC> #<Simple-Error Invalid function name (SETF #<Function CONS 281AAC>).>) (#<Random-State C059FF17> #<Simple-Error Invalid function name (SETF #<Random-State C059FF17>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C059CB77> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C059CB77>).>)) [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCALL.1
 CL-TEST::FUNCALL.2
 CL-TEST::FUNCALL.3
 CL-TEST::FUNCALL.4
 CL-TEST::FUNCALL.5
 CL-TEST::FUNCALL.6
 CL-TEST::FUNCALL.7
 CL-TEST::FUNCALL.8
 CL-TEST::FUNCALL.9
 CL-TEST::FUNCALL.ORDER.1
 CL-TEST::FUNCALL.ORDER.2
 CL-TEST::FUNCALL.ERROR.1
 CL-TEST::FUNCALL.ERROR.2
 CL-TEST::FUNCALL.ERROR.3
 CL-TEST::FUNCALL.ERROR.4
 CL-TEST::FUNCALL.ERROR.5
 CL-TEST::FUNCALL.ERROR.6
 CL-TEST::FUNCALL.ERROR.7
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.2
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.3
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ORDER.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ERROR.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ERROR.2
 CL-TEST::FUNCTION.1
 CL-TEST::FUNCTION.2
 CL-TEST::FUNCTION.3
 CL-TEST::FUNCTION.4
 CL-TEST::FUNCTION.5
 CL-TEST::FUNCTION.6
 CL-TEST::FUNCTION.7
 CL-TEST::FUNCTION.8
 CL-TEST::FUNCTION.9
 CL-TEST::FUNCTION.10
 CL-TEST::FUNCTION.11
 CL-TEST::FUNCTION.12
 CL-TEST::FUNCTION.13
 CL-TEST::FUNCTION.14
 CL-TEST::FUNCTION.15
 CL-TEST::FUNCTION.16
Test CL-TEST::FUNCTION.17 failed
Form: (FLET ((CL-TEST::%F (&OPTIONAL CL-TEST::X) CL-TEST::X)) (DECLARE (FTYPE (FUNCTION (&OPTIONAL INTEGER) T) CL-TEST::%F)) (VALUES (CL-TEST::%F) (CL-TEST::%F 10) (CL-TEST::%F) (CL-TEST::%F (1+ MOST-POSITIVE-FIXNUM))))
Expected value:
          NIL
          10
          NIL
          1152921504606846976
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCTION.18
 CL-TEST::FUNCTION.19
Test CL-TEST::FUNCTION.20 failed
Form: (FLET ((CL-TEST::%F (&KEY CL-TEST::FOO) CL-TEST::FOO)) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO T) (:ALLOW-OTHER-KEYS T)) T) CL-TEST::%F)) (VALUES (CL-TEST::%F) (CL-TEST::%F :FOO (QUOTE CL-TEST::A)) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL) (CL-TEST::%F :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::Z))))
Expected value:
          NIL
          CL-TEST::A
          NIL
          CL-TEST::Z
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCTION.21
 CL-TEST::FUNCTION.22
 CL-TEST::FUNCTION.23
 CL-TEST::FUNCTION.24
 CL-TEST::FUNCTIONP.1
 CL-TEST::FUNCTIONP.2
 CL-TEST::FUNCTIONP.3
 CL-TEST::FUNCTIONP.4
 CL-TEST::FUNCTIONP.5
 CL-TEST::FUNCTIONP.6
 CL-TEST::FUNCTIONP.7
 CL-TEST::FUNCTIONP.8
 CL-TEST::FUNCTIONP.9
 CL-TEST::FUNCTIONP.10
 CL-TEST::FUNCTIONP.11
 CL-TEST::FUNCTIONP.12
 CL-TEST::FUNCTIONP.ORDER.1
 CL-TEST::FUNCTIONP.ERROR.1
 CL-TEST::FUNCTIONP.ERROR.2
 CL-TEST::GET-SETF-EXPANSION.ERROR.1
 CL-TEST::GET-SETF-EXPANSION.ERROR.2
Test CL-TEST::GET-SETF-EXPANSION.1 failed
Form: (LET* ((CL-TEST::FN (GENSYM)) (CL-TEST::VALS (MULTIPLE-VALUE-LIST (GET-SETF-EXPANSION (LIST CL-TEST::FN))))) (VALUES (LENGTH CL-TEST::VALS) (FIRST CL-TEST::VALS) (SECOND CL-TEST::VALS) (LENGTH (THIRD CL-TEST::VALS)) (BLOCK CL-TEST::DONE (SUBST-IF NIL (FUNCTION (LAMBDA (CL-TEST::TERM) (WHEN (EQUAL CL-TEST::TERM (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FN))))) (RETURN-FROM CL-TEST::DONE :GOOD)))) (FOURTH CL-TEST::VALS))) (IF (EQUAL (FIFTH CL-TEST::VALS) (LIST CL-TEST::FN)) :GOOD (FIFTH CL-TEST::VALS))))
Expected value:
          5
          NIL
          NIL
          1
          :GOOD
          :GOOD
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
 CL-TEST::GET-SETF-EXPANSION.2
 CL-TEST::GET-SETF-EXPANSION.3
 CL-TEST::IDENTITY.1
 CL-TEST::IDENTITY.2
 CL-TEST::IDENTITY.3
 CL-TEST::IDENTITY.ORDER.1
 CL-TEST::IDENTITY.ERROR.1
 CL-TEST::IDENTITY.ERROR.2
 CL-TEST::IF.1
 CL-TEST::IF.2
 CL-TEST::IF.3
 CL-TEST::IF.4
 CL-TEST::IF.5
 CL-TEST::IF.6
 CL-TEST::IF.7
 CL-TEST::IF.8
 CL-TEST::IF.9
 CL-TEST::IF.10
 CL-TEST::IF.11
 CL-TEST::IF.12
 CL-TEST::IF.13
 CL-TEST::IF.ORDER.1
 CL-TEST::LABELS.1
 CL-TEST::LABELS.2
 CL-TEST::LABELS.3
 CL-TEST::LABELS.4
 CL-TEST::LABELS.4A
 CL-TEST::LABELS.5
 CL-TEST::LABELS.6
 CL-TEST::LABELS.7
 CL-TEST::LABELS.7B
 CL-TEST::LABELS.7C
 CL-TEST::LABELS.7D
 CL-TEST::LABELS.8
 CL-TEST::LABELS.9
 CL-TEST::LABELS.10
 CL-TEST::LABELS.11
Test CL-TEST::LABELS.12 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :C 4)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.13 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.14 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.15 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F 1 2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.16 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A) CL-TEST::A)) (CL-TEST::%F (QUOTE (CL-TEST::FOO)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.17 failed
Form: (LABELS (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (LET ((CL-TEST::Z (LIST 1 2))) (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::A)) CL-TEST::Z))
Expected value:
          (CL-TEST::A 2)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.18
 CL-TEST::LABELS.19
Test CL-TEST::LABELS.20 failed
Form: (LET* ((CL-TEST::N (MIN (1- LAMBDA-PARAMETERS-LIMIT) 1024)) (CL-TEST::VARS (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (GENSYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::EQLT (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) (LABELS ((CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (+ (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::VARS)))) (CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::VARS CL-TEST::COLLECT 1))))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.21
 CL-TEST::LABELS.22
 CL-TEST::LABELS.23
 CL-TEST::LABELS.24
 CL-TEST::LABELS.25
Test CL-TEST::LABELS.26 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (LABELS (((SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) (&REST CL-TEST::ARGS) (DECLARE (IGNORE CL-TEST::ARGS)) (QUOTE CL-TEST::A))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) 10)))) UNLESS (EQ (EVAL CL-TEST::FORM) (QUOTE CL-TEST::A)) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (WARNING VARIABLE UNSIGNED-BYTE UNDEFINED-FUNCTION UNBOUND-VARIABLE UNBOUND-SLOT TYPE-ERROR TYPE TWO-WAY-STREAM T SYNONYM-STREAM SYMBOL STYLE-WARNING STRUCTURE-OBJECT STRUCTURE-CLASS STRUCTURE STRING-STREAM STREAM-ERROR STREAM STORAGE-CONDITION STANDARD-OBJECT STANDARD-METHOD STANDARD-GENERIC-FUNCTION STANDARD-CLASS STANDARD-CHAR STANDARD SPEED SPECIAL SPACE SINGLE-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT SIMPLE-WARNING SIMPLE-VECTOR SIMPLE-TYPE-ERROR SIMPLE-STRING SIMPLE-ERROR SIMPLE-CONDITION SIMPLE-BIT-VECTOR SIMPLE-BASE-STRING SIMPLE-ARRAY SIGNED-BYTE SHORT-FLOAT-NEGATIVE-EPSILON SHORT-FLOAT-EPSILON SHORT-FLOAT SERIOUS-CONDITION SEQUENCE SATISFIES SAFETY RESTART REAL READTABLE READER-ERROR RATIO RANDOM-STATE PROGRAM-ERROR PRINT-NOT-READABLE PI PARSE-ERROR PACKAGE-ERROR PACKAGE OTHERWISE OPTIMIZE NUMBER NOTINLINE NIL MULTIPLE-VALUES-LIMIT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-LONG-FLOAT MOST-POSITIVE-FIXNUM MOST-POSITIVE-DOUBLE-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-LONG-FLOAT MOST-NEGATIVE-FIXNUM MOST-NEGATIVE-DOUBLE-FLOAT METHOD-COMBINATION METHOD LONG-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-EPSILON LONG-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LAMBDA-PARAMETERS-LIMIT LAMBDA-LIST-KEYWORDS KEYWORD INTERNAL-TIME-UNITS-PER-SECOND INTEGER INLINE IGNORE IGNORABLE HASH-TABLE GENERIC-FUNCTION FTYPE FLOATING-POINT-UNDERFLOW FLOATING-POINT-OVERFLOW FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-INEXACT FIXNUM FILE-STREAM FILE-ERROR EXTENDED-CHAR END-OF-FILE ECHO-STREAM DYNAMIC-EXTENT DOUBLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT DIVISION-BY-ZERO DECLARATION DEBUG CONTROL-ERROR CONDITION CONCATENATED-STREAM COMPILER-MACRO COMPILED-FUNCTION COMPILATION-SPEED CLASS CHAR-CODE-LIMIT CELL-ERROR CALL-ARGUMENTS-LIMIT BUILT-IN-CLASS BROADCAST-STREAM BOOLEAN BOOLE-XOR BOOLE-SET BOOLE-ORC2 BOOLE-ORC1 BOOLE-NOR BOOLE-NAND BOOLE-IOR BOOLE-EQV BOOLE-CLR BOOLE-C2 BOOLE-C1 BOOLE-ANDC2 BOOLE-ANDC1 BOOLE-AND BOOLE-2 BOOLE-1 BIT-VECTOR BIGNUM BASE-STRING BASE-CHAR ARRAY-TOTAL-SIZE-LIMIT ARRAY-RANK-LIMIT ARRAY-DIMENSION-LIMIT ARRAY ARITHMETIC-ERROR /// // +++ ++ *TRACE-OUTPUT* *TERMINAL-IO* *STANDARD-OUTPUT* *STANDARD-INPUT* *READTABLE* *READ-SUPPRESS* *READ-EVAL* *READ-DEFAULT-FLOAT-FORMAT* *READ-BASE* *RANDOM-STATE* *QUERY-IO* *PRINT-RIGHT-MARGIN* *PRINT-READABLY* *PRINT-RADIX* *PRINT-PRETTY* *PRINT-PPRINT-DISPATCH* *PRINT-MISER-WIDTH* *PRINT-LINES* *PRINT-LEVEL* *PRINT-LENGTH* *PRINT-GENSYM* *PRINT-ESCAPE* *PRINT-CIRCLE* *PRINT-CASE* *PRINT-BASE* *PRINT-ARRAY* *PACKAGE* *MODULES* *MACROEXPAND-HOOK* *LOAD-VERBOSE* *LOAD-TRUENAME* *LOAD-PRINT* *LOAD-PATHNAME* *GENSYM-COUNTER* *FEATURES* *ERROR-OUTPUT* *DEFAULT-PATHNAME-DEFAULTS* *DEBUGGER-HOOK* *DEBUG-IO* *COMPILE-VERBOSE* *COMPILE-PRINT* *COMPILE-FILE-TRUENAME* *COMPILE-FILE-PATHNAME* *BREAK-ON-SIGNALS* *** ** &WHOLE &REST &OPTIONAL &KEY &ENVIRONMENT &BODY &AUX &ALLOW-OTHER-KEYS) [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.27
 CL-TEST::LABELS.28
 CL-TEST::LABELS.29
 CL-TEST::LABELS.30
 CL-TEST::LABELS.31
Test CL-TEST::LABELS.32 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.33 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.34 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T :A 1 :B 2))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.35
Test CL-TEST::LABELS.36 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY) :BAD)) (CL-TEST::%F NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.37
 CL-TEST::LABELS.38
 CL-TEST::LABELS.39
 CL-TEST::LABELS.40
 CL-TEST::LABELS.41
 CL-TEST::LABELS.42
 CL-TEST::LABELS.43
 CL-TEST::LABELS.44
 CL-TEST::LABELS.45
 CL-TEST::LABELS.46
 CL-TEST::LABELS.47
 CL-TEST::LABELS.48
 CL-TEST::LABELS.49
 CL-TEST::LABELS.50
Test CL-TEST::LABELS.51 failed
Form: (LABELS ((CL-TEST::LABELS.51 NIL :GOOD)) (CL-TEST::LABELS.51))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.52
 CL-TEST::LAMBDA-LIST-KEYWORDS.1
 CL-TEST::LAMBDA-LIST-KEYWORDS.2
 CL-TEST::LAMBDA-LIST-KEYWORDS.3
 CL-TEST::LAMBDA-LIST-KEYWORDS.5
Test CL-TEST::LAMBDA-PARAMETERS-LIMIT.1 failed
Form: (NOT (TYPEP LAMBDA-PARAMETERS-LIMIT (QUOTE INTEGER)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA-PARAMETERS-LIMIT.2 failed
Form: (< LAMBDA-PARAMETERS-LIMIT 50)
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::LET.1
 CL-TEST::LET.2
 CL-TEST::LET.3
 CL-TEST::LET.4
 CL-TEST::LET.5
 CL-TEST::LET.6
 CL-TEST::LET.7
 CL-TEST::LET.9
 CL-TEST::LET.11
Test CL-TEST::LET.14 failed
Form: (LET* ((CL-TEST::N 100) (CL-TEST::VARS (MAPCAR (FUNCTION GENSYM) (MAKE-LIST CL-TEST::N :INITIAL-ELEMENT "G"))) (CL-TEST::EXPR (SYSTEM.INTERNALS::BACKQUOTE (LET (SYSTEM.INTERNALS::BQ-COMMA (LET ((CL-TEST::I 0)) (MAPCAR (FUNCTION (LAMBDA (CL-TEST::V) (LIST CL-TEST::V (INCF CL-TEST::I)))) CL-TEST::VARS))) (SYSTEM.INTERNALS::BQ-COMMA (LET ((CL-TEST::SUMEXPR 0)) (DOLIST (CL-TEST::V CL-TEST::VARS) (SETQ CL-TEST::SUMEXPR (SYSTEM.INTERNALS::BACKQUOTE (+ (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::V) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SUMEXPR))))) CL-TEST::SUMEXPR))))) (CL-TEST::VAL (EVAL CL-TEST::EXPR))) (OR (CL-TEST::EQLT CL-TEST::VAL (/ (* CL-TEST::N (1+ CL-TEST::N)) 2)) (LIST CL-TEST::VAL)))
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::THING is NIL, which is not of type (OR STRING (INTEGER 0)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LET.15
 CL-TEST::LET.16
 CL-TEST::LET.17
 CL-TEST::LET.17A
 CL-TEST::LET.18
 CL-TEST::LET.19
 CL-TEST::LET.20
 CL-TEST::LET.21
 CL-TEST::LET*.1
 CL-TEST::LET*.2
 CL-TEST::LET*.3
 CL-TEST::LET*.4
 CL-TEST::LET*.5
 CL-TEST::LET*.6
 CL-TEST::LET*.7
 CL-TEST::LET*.8
 CL-TEST::LET*.9
 CL-TEST::LET*.10
 CL-TEST::LET*.11
 CL-TEST::LET*.12
Test CL-TEST::LET*.14 failed
Form: (LET* ((CL-TEST::N 100) (CL-TEST::VARS (MAPCAR (FUNCTION GENSYM) (MAKE-LIST CL-TEST::N :INITIAL-ELEMENT "G"))) (CL-TEST::EXPR (SYSTEM.INTERNALS::BACKQUOTE (LET* (SYSTEM.INTERNALS::BQ-COMMA (LET ((CL-TEST::I 0)) (MAPCAR (FUNCTION (LAMBDA (CL-TEST::V) (LIST CL-TEST::V (INCF CL-TEST::I)))) CL-TEST::VARS))) (SYSTEM.INTERNALS::BQ-COMMA (LET ((CL-TEST::SUMEXPR 0)) (DOLIST (CL-TEST::V CL-TEST::VARS) (SETQ CL-TEST::SUMEXPR (SYSTEM.INTERNALS::BACKQUOTE (+ (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::V) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SUMEXPR))))) CL-TEST::SUMEXPR))))) (CL-TEST::VAL (EVAL CL-TEST::EXPR))) (OR (CL-TEST::EQLT CL-TEST::VAL (/ (* CL-TEST::N (1+ CL-TEST::N)) 2)) (LIST CL-TEST::VAL)))
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::THING is NIL, which is not of type (OR STRING (INTEGER 0)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LET*.15
 CL-TEST::LET*.16
 CL-TEST::LET*.17
 CL-TEST::LET*.17A
 CL-TEST::LET*.18
 CL-TEST::LET*.19
 CL-TEST::LET*.20
 CL-TEST::LET*.21
 CL-TEST::LET*.22
 CL-TEST::LET*.23
 CL-TEST::MACROLET.1
 CL-TEST::MACROLET.2
 CL-TEST::MACROLET.3
 CL-TEST::MACROLET.4
 CL-TEST::MACROLET.5
 CL-TEST::MACROLET.6
 CL-TEST::MACROLET.7
 CL-TEST::MACROLET.8
 CL-TEST::MACROLET.9
 CL-TEST::MACROLET.10
 CL-TEST::MACROLET.11
 CL-TEST::MACROLET.12
 CL-TEST::MACROLET.13
 CL-TEST::MACROLET.14
 CL-TEST::MACROLET.15
 CL-TEST::MACROLET.16
 CL-TEST::MACROLET.17
 CL-TEST::MACROLET.18
 CL-TEST::MACROLET.19
 CL-TEST::MACROLET.20
 CL-TEST::MACROLET.21
 CL-TEST::MACROLET.22
 CL-TEST::MACROLET.22A
 CL-TEST::MACROLET.23
 CL-TEST::MACROLET.24
 CL-TEST::MACROLET.25
 CL-TEST::MACROLET.26
 CL-TEST::MACROLET.27
 CL-TEST::MACROLET.28
 CL-TEST::MACROLET.29
 CL-TEST::MACROLET.30
 CL-TEST::MACROLET.31
Test CL-TEST::MACROLET.32 failed
Form: (MACROLET ((CL-TEST::%M (&KEY CL-TEST::A CL-TEST::B CL-TEST::C) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::A) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::B) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C)))))) (VALUES (CL-TEST::%M :ALLOW-OTHER-KEYS NIL) (CL-TEST::%M :A 1 :ALLOW-OTHER-KEYS NIL) (CL-TEST::%M :ALLOW-OTHER-KEYS T) (CL-TEST::%M :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T) (CL-TEST::%M :ALLOW-OTHER-KEYS T :C 1 :B 2 :A 3) (CL-TEST::%M :ALLOW-OTHER-KEYS NIL :C 1 :B 2 :A 3)))
Expected value:
          (NIL NIL NIL)
          (1 NIL NIL)
          (NIL NIL NIL)
          (NIL NIL NIL)
          (3 2 1)
          (3 2 1)
Actual value:
          #<Simple-Error Invalid keyword :ALLOW-OTHER-KEYS. Wanted one of (:C :B :A).> [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.33
 CL-TEST::MACROLET.34
 CL-TEST::MACROLET.35
Test CL-TEST::MACROLET.36 failed
Form: (MACROLET ((CL-TEST::%M (&WHOLE (CL-TEST::M CL-TEST::A CL-TEST::B) CL-TEST::C CL-TEST::D) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::M) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::A) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::B) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::D)))))) (CL-TEST::%M 1 2))
Expected value:
          (CL-TEST::%M 1 2 1 2)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::NAME is (CL-TEST::M CL-TEST::A CL-TEST::B), which is not of type SYMBOL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACROLET.37 failed
Form: (MACROLET ((CL-TEST::%F NIL :BAD)) (FLET ((CL-TEST::%F NIL :GOOD)) (CL-TEST::%F)))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.38
Test CL-TEST::MACROLET.39 failed
Form: (MACROLET ((CL-TEST::%M (NIL) :GOOD)) (CL-TEST::%M NIL))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error Cannot bind over constant NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.40
 CL-TEST::MACROLET.41
 CL-TEST::MACROLET.42
 CL-TEST::MACROLET.43
 CL-TEST::MACROLET.44
 CL-TEST::MACROLET.45
 CL-TEST::MACROLET.46
 CL-TEST::MACROLET.47
 CL-TEST::MACROLET.48
 CL-TEST::MACROLET.49
 CL-TEST::MACROLET.50
 CL-TEST::MACROLET.51
 CL-TEST::MACROLET.52
 CL-TEST::MULTIPLE-VALUE-BIND.1
 CL-TEST::MULTIPLE-VALUE-BIND.2
 CL-TEST::MULTIPLE-VALUE-BIND.3
 CL-TEST::MULTIPLE-VALUE-BIND.4
 CL-TEST::MULTIPLE-VALUE-BIND.5
 CL-TEST::MULTIPLE-VALUE-BIND.6
Test CL-TEST::MULTIPLE-VALUE-BIND.7 failed
Form: (LET ((CL-TEST::Z 0) CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::Z)) (VALUES (FLET ((CL-TEST::%X NIL (SYMBOL-VALUE (QUOTE CL-TEST::X))) (CL-TEST::%Y NIL (SYMBOL-VALUE (QUOTE CL-TEST::Y))) (CL-TEST::%Z NIL (SYMBOL-VALUE (QUOTE CL-TEST::Z)))) (MULTIPLE-VALUE-BIND (CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3) (DECLARE (SPECIAL CL-TEST::X CL-TEST::Y)) (LIST (CL-TEST::%X) (CL-TEST::%Y) (CL-TEST::%Z)))) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 0)
          NIL
          NIL
          0
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-BIND.8
 CL-TEST::MULTIPLE-VALUE-BIND.9
 CL-TEST::MULTIPLE-VALUE-BIND.10
 CL-TEST::MULTIPLE-VALUE-BIND.11
 CL-TEST::MULTIPLE-VALUE-BIND.12
 CL-TEST::MULTIPLE-VALUE-BIND.13
 CL-TEST::MULTIPLE-VALUE-BIND.14
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.1
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.2
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.3
 CL-TEST::MULTIPLE-VALUE-CALL.1
 CL-TEST::MULTIPLE-VALUE-CALL.2
 CL-TEST::MULTIPLE-VALUE-CALL.3
 CL-TEST::MULTIPLE-VALUE-CALL.4
 CL-TEST::MULTIPLE-VALUE-CALL.5
 CL-TEST::MULTIPLE-VALUE-PROG1.1
 CL-TEST::MULTIPLE-VALUE-PROG1.2
 CL-TEST::MULTIPLE-VALUE-PROG1.3
 CL-TEST::MULTIPLE-VALUE-PROG1.4
 CL-TEST::MULTIPLE-VALUE-PROG1.5
 CL-TEST::MULTIPLE-VALUE-PROG1.6
 CL-TEST::MULTIPLE-VALUE-PROG1.7
Test CL-TEST::MULTIPLE-VALUE-PROG1.8 failed
Form: (LET* ((CL-TEST::N (MIN 100 MULTIPLE-VALUES-LIMIT))) (CL-TEST::NOT-MV (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW CL-TEST::N CL-TEST::FOR CL-TEST::X = (CL-TEST::MAKE-INT-LIST CL-TEST::I) CL-TEST::ALWAYS (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MULTIPLE-VALUE-PROG1 (VALUES-LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ CL-TEST::X)))) NIL)))) CL-TEST::X))))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-PROG1.9
 CL-TEST::MULTIPLE-VALUE-PROG1.10
 CL-TEST::MULTIPLE-VALUE-PROG1.11
 CL-TEST::MULTIPLE-VALUE-PROG1.12
Test CL-TEST::MULTIPLE-VALUE-SETQ.1 failed
Form: (LET ((CL-TEST::X 1) (CL-TEST::Y 2)) (VALUES (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::Y) (VALUES 3 4))) CL-TEST::X CL-TEST::Y))
Expected value:
          (3)
          3
          4
Actual value:
          (4) [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.2
Test CL-TEST::MULTIPLE-VALUE-SETQ.3 failed
Form: (LET (CL-TEST::X) (SYMBOL-MACROLET ((CL-TEST::Y CL-TEST::X)) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) (VALUES 1 2)) CL-TEST::X))
Expected value:
          1
Actual value:
          #<Type-Error C1DFA2A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.4 failed
Form: (LET ((CL-TEST::X (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) (VALUES 1 2)) CL-TEST::X))
Expected value:
          (1)
Actual value:
          #<Type-Error C1E05537> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.5 failed
Form: (LET ((CL-TEST::I 0) (CL-TEST::X (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR (PROGN (INCF CL-TEST::I) CL-TEST::X)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) CL-TEST::I)) CL-TEST::X)
Expected value:
          (1)
Actual value:
          #<Type-Error C1E10F87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.6 failed
Form: (LET ((CL-TEST::X (LIST NIL)) CL-TEST::Z) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::Z) (VALUES 1 2))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (1)
          2
Actual value:
          #<Type-Error C1E1E307> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.7 failed
Form: (LET ((CL-TEST::X (LIST NIL)) (CL-TEST::Z (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X)) (CL-TEST::W (CAR CL-TEST::Z))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::W) (VALUES 1 2))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (1)
          (2)
Actual value:
          #<Type-Error C1E2BEA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.8 failed
Form: (LET ((CL-TEST::X (LIST NIL)) (CL-TEST::Z (LIST NIL)) (CL-TEST::I 0)) (SYMBOL-MACROLET ((CL-TEST::Y (CAR (PROGN (INCF CL-TEST::I 3) CL-TEST::X))) (CL-TEST::W (CAR (PROGN (INCF CL-TEST::I CL-TEST::I) CL-TEST::Z)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::W) (VALUES CL-TEST::I 10))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (6)
          (10)
Actual value:
          #<Type-Error C1E3ACD7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.9 failed
Form: (LET (CL-TEST::X) (VALUES (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::X) (VALUES 1 2)) CL-TEST::X))
Expected value:
          1
          2
Actual value:
          2 [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.10 failed
Form: (LET (CL-TEST::X) (VALUES (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::X) (VALUES 1)) CL-TEST::X))
Expected value:
          1
          NIL
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.11
Test CL-TEST::MULTIPLE-VALUE-SETQ.12 failed
Form: (LET ((CL-TEST::N (MIN 100 MULTIPLE-VALUES-LIMIT)) (CL-TEST::VARS NIL) (CL-TEST::RESULT NIL)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::BELOW CL-TEST::N CL-TEST::FOR CL-TEST::FORM = (PROGN (PUSH (GENSYM) CL-TEST::VARS) (PUSH CL-TEST::I CL-TEST::RESULT) (SYSTEM.INTERNALS::BACKQUOTE (LET (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (AND (EQL (MULTIPLE-VALUE-SETQ (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (VALUES-LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT)))) (SYSTEM.INTERNALS::BQ-COMMA (CAR CL-TEST::RESULT))) (EQUAL (SYSTEM.INTERNALS::BQ-COMMA (CL-TEST::MAKE-LIST-EXPR CL-TEST::VARS)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT))))))) UNLESS (EVAL CL-TEST::FORM) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::FORM)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.13 failed
Form: (MULTIPLE-VALUE-SETQ NIL :GOOD)
Expected value:
          :GOOD
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.14
Test CL-TEST::MULTIPLE-VALUE-SETQ.15 failed
Form: (MULTIPLE-VALUE-SETQ NIL (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.16 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X :BAD)) (SYMBOL-MACROLET ((CL-TEST::Z (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Z) :GOOD)) CL-TEST::X))
Expected value:
          :GOOD
Actual value:
          #<Type-Error C1E91687> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.17
 CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.1
 CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.2
 CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.3
 CL-TEST::MULTIPLE-VALUE-LIST.1
 CL-TEST::MULTIPLE-VALUE-LIST.2
 CL-TEST::MULTIPLE-VALUE-LIST.3
 CL-TEST::MULTIPLE-VALUE-LIST.4
 CL-TEST::MULTIPLE-VALUE-LIST.5
 CL-TEST::MULTIPLE-VALUE-LIST.6
Test CL-TEST::MULTIPLE-VALUE-LIST.7 failed
Form: (NOT (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW (MIN MULTIPLE-VALUES-LIMIT 100) CL-TEST::FOR CL-TEST::X = (MAKE-LIST CL-TEST::I :INITIAL-ELEMENT (QUOTE CL-TEST::A)) CL-TEST::ALWAYS (EQUAL CL-TEST::X (MULTIPLE-VALUE-LIST (VALUES-LIST CL-TEST::X)))))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-LIST.8
 CL-TEST::MULTIPLE-VALUE-LIST.9
 CL-TEST::MULTIPLE-VALUE-LIST.ORDER.1
 CL-TEST::MULTIPLE-VALUE-LIST.ERROR.1
 CL-TEST::MULTIPLE-VALUE-LIST.ERROR.2
 CL-TEST::MULTIPLE-VALUE-LIST.ERROR.3
 CL-TEST::NIL.1
 CL-TEST::NIL.2
 CL-TEST::NIL.3
 CL-TEST::NIL.4
 CL-TEST::NIL.5
 CL-TEST::NIL.6
 CL-TEST::NIL.7
 CL-TEST::NIL.8
 CL-TEST::NULL.1
 CL-TEST::NULL.2
 CL-TEST::NULL.3
 CL-TEST::NULL.4
 CL-TEST::NULL.ERROR.1
 CL-TEST::NULL.ERROR.2
 CL-TEST::NOT.1
 CL-TEST::NOT.2
 CL-TEST::NOT.3
 CL-TEST::NOT.4
 CL-TEST::NOT.ERROR.1
 CL-TEST::NOT.ERROR.2
 CL-TEST::NOTANY.1
Test CL-TEST::NOTANY.2 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION IDENTITY) #()))
Expected value:
          NIL
Actual value:
          #<Type-Error 8183A607> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.3
 CL-TEST::NOTANY.4
 CL-TEST::NOTANY.5
 CL-TEST::NOTANY.6
Test CL-TEST::NOTANY.7 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND CL-TEST::X CL-TEST::Y))) (QUOTE (NIL T T NIL T)) #(T NIL NIL T NIL NIL)))
Expected value:
          NIL
Actual value:
          #<Type-Error 8184C937> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.8
Test CL-TEST::NOTANY.9 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION ZEROP) #*11111111111111))
Expected value:
          NIL
Actual value:
          #<Type-Error 819303F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.10 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION ZEROP) #*))
Expected value:
          NIL
Actual value:
          #<Type-Error 81938007> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.11 failed
Form: (NOTANY (FUNCTION ZEROP) #*1111111011111)
Expected value:
          NIL
Actual value:
          #<Type-Error 8193F407> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.12 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaaaa"))
Expected value:
          NIL
Actual value:
          #<Type-Error 81946DD7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.13 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X #\a))) ""))
Expected value:
          NIL
Actual value:
          #<Type-Error 8194FE07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.14 failed
Form: (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaabaaaa")
Expected value:
          NIL
Actual value:
          #<Type-Error 81958557> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.15
 CL-TEST::NOTANY.16
Test CL-TEST::NOTANY.17 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION PLUSP) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 81967DF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::IN (QUOTE (0 0 0 0 1 2 3 4 5 6)) CL-TEST::COLLECT (MOD CL-TEST::J (ASH 1 CL-TEST::I))) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION PLUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error 8198A797> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION MINUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.20 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 819BFB87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.21 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 819D2C07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.22 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V)) (SETF (AREF CL-TEST::V 2) #\0) (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V)))
Expected value:
          T
          #\0
          NIL
Actual value:
          #<Type-Error 819E1637> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.23 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) WHEN (NOTANY (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 819F5337> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.24 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :FILL-POINTER 6 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) UNLESS (NOTANY (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 81A0B317> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.25 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (NOTANY (COMPLEMENT (FUNCTION COMPLEXP)) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 81A229B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.26 failed
Form: (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (NOTANY (FUNCTION ODDP) CL-TEST::V1) (CL-TEST::NOTNOT (NOTANY (FUNCTION ODDP) CL-TEST::V2))))
Expected value:
          NIL
          T
Actual value:
          #<Type-Error 81A35C07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (NOTANY (QUOTE ODDP) CL-TEST::V1)) (NOTANY (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error 81A48037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.28 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (NOTANY (QUOTE ODDP) CL-TEST::V1)) (NOTANY (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.29 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (NOT (NOTANY (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error 81A779B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.30 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (NOT (NOTANY (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error 81A8BBC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.31 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (NOTANY (FUNCTION MINUSP) CL-TEST::V))))
Expected value:
          T
          NIL
Actual value:
          #<Type-Error 81A9C157> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.32 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)))))
Expected value:
          T
          T
Actual value:
          #<Type-Error 81AAA1C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.ORDER.1
 CL-TEST::NOTANY.ERROR.1
 CL-TEST::NOTANY.ERROR.4
Test CL-TEST::NOTANY.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NOTANY (FUNCTION EQL) NIL CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          ((0 (NIL T)) (#\Space (NIL T)) (#<Arithmetic-Error 80478767> (NIL T)) (#<Package "Cl"> (NIL T)) (#<Hash-Table 8047EB07> (NIL T)) (#P"THAT-MAC-THING:foo" (NIL T)) (#<Synonym-Stream for *TERMINAL-IO*> (NIL T)) (#<Readtable 80002757> (NIL T)) (#<Cl-Test::Foo-Structure 8047C7B7> (NIL T)) (#<Function CONS 281AAC> (NIL T)) (#<Random-State 8047DB47> (NIL T)) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 8047A7A7> (NIL T))) [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.ERROR.8
 CL-TEST::NOTANY.ERROR.9
 CL-TEST::NOTANY.ERROR.10
 CL-TEST::NOTANY.ERROR.11
 CL-TEST::NOTANY.ERROR.12
 CL-TEST::NOTANY.ERROR.13
 CL-TEST::NOTEVERY.1
 CL-TEST::NOTEVERY.2
 CL-TEST::NOTEVERY.3
 CL-TEST::NOTEVERY.4
 CL-TEST::NOTEVERY.5
 CL-TEST::NOTEVERY.6
 CL-TEST::NOTEVERY.7
 CL-TEST::NOTEVERY.8
 CL-TEST::NOTEVERY.9
 CL-TEST::NOTEVERY.10
 CL-TEST::NOTEVERY.11
 CL-TEST::NOTEVERY.12
 CL-TEST::NOTEVERY.13
 CL-TEST::NOTEVERY.14
 CL-TEST::NOTEVERY.15
 CL-TEST::NOTEVERY.16
 CL-TEST::NOTEVERY.17
Test CL-TEST::NOTEVERY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 1 1 1 1 1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.20
 CL-TEST::NOTEVERY.21
 CL-TEST::NOTEVERY.22
 CL-TEST::NOTEVERY.23
Test CL-TEST::NOTEVERY.24 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOTEVERY (QUOTE EVENP) CL-TEST::V1) (NOT (NOTEVERY (FUNCTION EVENP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.25 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOTEVERY (QUOTE EVENP) CL-TEST::V1) (NOT (NOTEVERY (FUNCTION EVENP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.26
 CL-TEST::NOTEVERY.27
 CL-TEST::NOTEVERY.28
 CL-TEST::NOTEVERY.29
Test CL-TEST::NOTEVERY.30 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6)))) WHEN (NOTEVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.31 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 -1)))) WHEN (NOTEVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.32 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) WHEN (NOTEVERY (FUNCTION COMPLEXP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 21 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.ORDER.1
 CL-TEST::NOTEVERY.ERROR.1
 CL-TEST::NOTEVERY.ERROR.4
 CL-TEST::NOTEVERY.ERROR.7
 CL-TEST::NOTEVERY.ERROR.8
 CL-TEST::NOTEVERY.ERROR.9
 CL-TEST::NOTEVERY.ERROR.10
 CL-TEST::NOTEVERY.ERROR.11
 CL-TEST::NOTEVERY.ERROR.12
 CL-TEST::NOTEVERY.ERROR.13
 CL-TEST::NTH-VALUE.1
 CL-TEST::NTH-VALUE.2
 CL-TEST::NTH-VALUE.3
 CL-TEST::NTH-VALUE.4
 CL-TEST::NTH-VALUE.5
 CL-TEST::NTH-VALUE.6
 CL-TEST::NTH-VALUE.7
 CL-TEST::NTH-VALUE.ORDER.1
 CL-TEST::NTH-VALUE.ERROR.1
 CL-TEST::NTH-VALUE.ERROR.2
 CL-TEST::NTH-VALUE.ERROR.3
 CL-TEST::OR.1
 CL-TEST::OR.2
 CL-TEST::OR.3
 CL-TEST::OR.4
 CL-TEST::OR.5
 CL-TEST::OR.6
 CL-TEST::OR.7
 CL-TEST::OR.8
 CL-TEST::OR.9
 CL-TEST::OR.10
 CL-TEST::OR.11
 CL-TEST::OR.ERROR.1
 CL-TEST::OR.ERROR.2
 CL-TEST::OR.ERROR.3
 CL-TEST::PROG.1
 CL-TEST::PROG.2
 CL-TEST::PROG.3
 CL-TEST::PROG.4
 CL-TEST::PROG.5
 CL-TEST::PROG.6
 CL-TEST::PROG.7
 CL-TEST::PROG.8
 CL-TEST::PROG.9
 CL-TEST::PROG.10
 CL-TEST::PROG.11
 CL-TEST::PROG.12
 CL-TEST::PROG.ERROR.1
 CL-TEST::PROG*.1
 CL-TEST::PROG*.2
 CL-TEST::PROG*.3
 CL-TEST::PROG*.4
 CL-TEST::PROG*.5
 CL-TEST::PROG*.6
 CL-TEST::PROG*.7
 CL-TEST::PROG*.8
 CL-TEST::PROG*.9
 CL-TEST::PROG*.10
 CL-TEST::PROG*.11
 CL-TEST::PROG*.12
 CL-TEST::PROG*.ERROR.1
 CL-TEST::PROG1.1
 CL-TEST::PROG1.2
 CL-TEST::PROG1.3
 CL-TEST::PROG1.4
 CL-TEST::PROG1.5
 CL-TEST::PROG1.6
 CL-TEST::PROG1.7
 CL-TEST::PROG1.ERROR.1
 CL-TEST::PROG2.1
 CL-TEST::PROG2.2
 CL-TEST::PROG2.3
 CL-TEST::PROG2.4
 CL-TEST::PROG2.5
 CL-TEST::PROG2.6
 CL-TEST::PROG2.7
 CL-TEST::PROG2.8
 CL-TEST::PROG2.ERROR.1
 CL-TEST::PROGN.1
 CL-TEST::PROGN.2
 CL-TEST::PROGN.3
 CL-TEST::PROGN.4
 CL-TEST::PROGN.5
 CL-TEST::PROGN.6
 CL-TEST::PROGN.7
 CL-TEST::PROGN.8
 CL-TEST::PROGN.9
 CL-TEST::PROGN.10
 CL-TEST::PROGV.1
 CL-TEST::PROGV.2
 CL-TEST::PROGV.3
 CL-TEST::PROGV.4
 CL-TEST::PROGV.5
 CL-TEST::PROGV.6
 CL-TEST::PROGV.6A
 CL-TEST::PROGV.7
 CL-TEST::PROGV.8
 CL-TEST::PROGV.9
 CL-TEST::PROGV.10
 CL-TEST::PROGV.11
 CL-TEST::PROGV.12
 CL-TEST::PROGV.13
 CL-TEST::PROGV.14
 CL-TEST::PROGV.15
 CL-TEST::PROGV.16
 CL-TEST::PROGV.17
 CL-TEST::SOME.1
Test CL-TEST::SOME.2 failed
Form: (SOME (FUNCTION IDENTITY) #())
Expected value:
          NIL
Actual value:
          #<Type-Error C1759887> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.3
 CL-TEST::SOME.4
 CL-TEST::SOME.5
 CL-TEST::SOME.6
Test CL-TEST::SOME.7 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND CL-TEST::X CL-TEST::Y))) (QUOTE (NIL T T NIL T)) #(T NIL NIL T NIL NIL))
Expected value:
          NIL
Actual value:
          #<Type-Error C176A647> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.8
Test CL-TEST::SOME.9 failed
Form: (SOME (FUNCTION ZEROP) #*11111111111111)
Expected value:
          NIL
Actual value:
          #<Type-Error C177B217> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.10 failed
Form: (SOME (FUNCTION ZEROP) #*)
Expected value:
          NIL
Actual value:
          #<Type-Error C17821C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.11 failed
Form: (CL-TEST::NOT-MV (SOME (FUNCTION ZEROP) #*1111111011111))
Expected value:
          NIL
Actual value:
          #<Type-Error C1789027> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.12 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaaaa")
Expected value:
          NIL
Actual value:
          #<Type-Error C1790B97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.13 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X #\a))) "")
Expected value:
          NIL
Actual value:
          #<Type-Error C1798F67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.14 failed
Form: (CL-TEST::NOT-MV (SOME (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaabaaaa"))
Expected value:
          NIL
Actual value:
          #<Type-Error C17A1117> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.15
 CL-TEST::SOME.16
Test CL-TEST::SOME.17 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION PLUSP) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error C17B0C37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::IN (QUOTE (0 0 0 0 1 2 3 4 5 6)) CL-TEST::COLLECT (MOD CL-TEST::J (ASH 1 CL-TEST::I))) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION PLUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error C17D3857> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION MINUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.20 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error C1809167> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.21 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error C181C467> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.22 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V) (SETF (AREF CL-TEST::V 2) #\0) (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          NIL
          #\0
          T
Actual value:
          #<Type-Error C182AFE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.23 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) UNLESS (SOME (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error C183EB87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.24 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :FILL-POINTER 6 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) WHEN (SOME (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error C18548C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.25 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) WHEN (SOME (COMPLEMENT (FUNCTION COMPLEXP)) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error C186BB47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.26 failed
Form: (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (CL-TEST::NOTNOT (SOME (FUNCTION ODDP) CL-TEST::V1)) (SOME (FUNCTION ODDP) CL-TEST::V2)))
Expected value:
          T
          NIL
Actual value:
          #<Type-Error C187EC07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (SOME (QUOTE ODDP) CL-TEST::V1)) (NOT (SOME (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error C1890C07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.28 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (SOME (QUOTE ODDP) CL-TEST::V1) (NOT (SOME (FUNCTION ODDP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.29 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error C18C0027> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.30 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error C18D44B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.31 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (SOME (FUNCTION MINUSP) CL-TEST::V) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (CL-TEST::NOTNOT (SOME (FUNCTION MINUSP) CL-TEST::V)))))
Expected value:
          NIL
          T
Actual value:
          #<Type-Error C18E4B97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.32 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (SOME (FUNCTION MINUSP) CL-TEST::V) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (SOME (FUNCTION MINUSP) CL-TEST::V))))
Expected value:
          NIL
          NIL
Actual value:
          #<Type-Error C18F2817> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.ORDER.1
 CL-TEST::SOME.ORDER.2
 CL-TEST::SOME.ERROR.1
 CL-TEST::SOME.ERROR.4
Test CL-TEST::SOME.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (SOME (FUNCTION EQL) NIL CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          ((0 (NIL NIL)) (#\Space (NIL NIL)) (#<Arithmetic-Error C057AF27> (NIL NIL)) (#<Package "Cl"> (NIL NIL)) (#<Hash-Table C0581647> (NIL NIL)) (#P"THAT-MAC-THING:foo" (NIL NIL)) (#<Synonym-Stream for *TERMINAL-IO*> (NIL NIL)) (#<Readtable C0002757> (NIL NIL)) (#<Cl-Test::Foo-Structure C057F5E7> (NIL NIL)) (#<Function CONS 281AAC> (NIL NIL)) (#<Random-State C0580887> (NIL NIL)) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C057D1D7> (NIL NIL))) [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.ERROR.8
 CL-TEST::SOME.ERROR.9
 CL-TEST::SOME.ERROR.10
 CL-TEST::SOME.ERROR.11
 CL-TEST::SOME.ERROR.12
 CL-TEST::SOME.ERROR.13
 CL-TEST::SOME.ERROR.14
 CL-TEST::T.1
 CL-TEST::T.2
 CL-TEST::T.3
 CL-TEST::T.4
 CL-TEST::TAGBODY.1
 CL-TEST::TAGBODY.2
 CL-TEST::TAGBODY.3
 CL-TEST::TAGBODY.4
 CL-TEST::TAGBODY.5
 CL-TEST::TAGBODY.6
 CL-TEST::TAGBODY.7
 CL-TEST::TAGBODY.8
 CL-TEST::TAGBODY.9
 CL-TEST::TAGBODY.10
 CL-TEST::TAGBODY.11
 CL-TEST::TAGBODY.12
 CL-TEST::TAGBODY.13
 CL-TEST::TAGBODY.14
Test CL-TEST::TAGBODY.15 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (GO CL-TEST::AROUND) 1152921504606846976 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD)) CL-TEST::AROUND (GO 1152921504606846976)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No GO-tag named 1152921504606846976.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TAGBODY.16 failed
Form: (LET* ((CL-TEST::T1 (1+ MOST-POSITIVE-FIXNUM)) (CL-TEST::T2 (1+ MOST-POSITIVE-FIXNUM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (BLOCK CL-TEST::DONE (TAGBODY (GO CL-TEST::AROUND) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::T1) (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD)) CL-TEST::AROUND (GO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::T2))))))) (EVAL CL-TEST::FORM))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No GO-tag named 1152921504606846976.> [Actual value: #<error during printing>

 NIL
 CL-TEST::TAGBODY.17
 CL-TEST::TAGBODY.18
 CL-TEST::TYPECASE.1
 CL-TEST::TYPECASE.2
 CL-TEST::TYPECASE.3
 CL-TEST::TYPECASE.4
 CL-TEST::TYPECASE.5
 CL-TEST::TYPECASE.6
 CL-TEST::TYPECASE.7
 CL-TEST::TYPECASE.8
 CL-TEST::TYPECASE.9
 CL-TEST::TYPECASE.10
 CL-TEST::TYPECASE.11
Test CL-TEST::TYPECASE.12 failed
Form: (TYPECASE 1 (INTEGER) (T (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.13 failed
Form: (TYPECASE 1 (SYMBOL (QUOTE CL-TEST::A)) (T))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.14 failed
Form: (TYPECASE 1 (SYMBOL (QUOTE CL-TEST::A)) (OTHERWISE))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.15 failed
Form: (TYPECASE (QUOTE CL-TEST::A) (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL C00B5717> (QUOTE CL-TEST::GOOD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Type-Error C1A4B967> [Actual value: #<error during printing>

 NIL
 CL-TEST::TYPECASE.16
 CL-TEST::TYPECASE.17
 CL-TEST::TYPECASE.18
Test CL-TEST::TYPECASE.19 failed
Form: (LET* ((CL-TEST::U (COERCE CL-TEST:*UNIVERSE* (QUOTE VECTOR))) (CL-TEST::LEN1 (LENGTH CL-TEST::U)) (CL-TEST::TYPES (COERCE CL-TEST::*CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (CL-TEST::LEN2 (LENGTH CL-TEST::TYPES))) (LOOP CL-TEST::FOR CL-TEST::N = (RANDOM 10) CL-TEST::FOR CL-TEST::MY-TYPES = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (ELT CL-TEST::TYPES (RANDOM CL-TEST::LEN2))) CL-TEST::FOR CL-TEST::VAL = (ELT CL-TEST::U (RANDOM CL-TEST::LEN1)) CL-TEST::FOR CL-TEST::I = (POSITION CL-TEST::VAL CL-TEST::MY-TYPES :TEST (FUNCTION TYPEP)) CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (TYPECASE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VAL)) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::FOR TYPE CL-TEST::IN CL-TEST::MY-TYPES CL-TEST::COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))))) (OTHERWISE NIL))) CL-TEST::FOR CL-TEST::J = (EVAL CL-TEST::FORM) CL-TEST::REPEAT 1000 UNLESS (EQL CL-TEST::I CL-TEST::J) CL-TEST::COLLECT (LIST CL-TEST::N CL-TEST::MY-TYPES CL-TEST::VAL CL-TEST::I CL-TEST::FORM CL-TEST::J)))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of CHARACTER is *PRINT-READABLY*, which is not of type CHARACTER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::TYPECASE.20
 CL-TEST::TYPECASE.21
 CL-TEST::TYPECASE.ERROR.1
 CL-TEST::TYPECASE.ERROR.2
 CL-TEST::TYPECASE.ERROR.3
 CL-TEST::UNLESS.1
 CL-TEST::UNLESS.2
 CL-TEST::UNLESS.3
 CL-TEST::UNLESS.4
 CL-TEST::UNLESS.5
 CL-TEST::UNLESS.6
 CL-TEST::UNLESS.7
 CL-TEST::UNLESS.8
 CL-TEST::UNLESS.9
 CL-TEST::UNLESS.10
 CL-TEST::UNLESS.11
 CL-TEST::UNLESS.12
 CL-TEST::UNLESS.13
 CL-TEST::UNLESS.ERROR.1
 CL-TEST::UNLESS.ERROR.2
 CL-TEST::UNLESS.ERROR.3
 CL-TEST::UNWIND-PROTECT.1
 CL-TEST::UNWIND-PROTECT.2
 CL-TEST::UNWIND-PROTECT.3
 CL-TEST::UNWIND-PROTECT.4
 CL-TEST::UNWIND-PROTECT.5
 CL-TEST::UNWIND-PROTECT.6
 CL-TEST::UNWIND-PROTECT.7
 CL-TEST::UNWIND-PROTECT.8
 CL-TEST::UNWIND-PROTECT.9
 CL-TEST::UNWIND-PROTECT.10
 CL-TEST::UNWIND-PROTECT.11
 CL-TEST::UNWIND-PROTECT.12
 CL-TEST::UNWIND-PROTECT.13
 CL-TEST::VALUES-LIST.ERROR.1
 CL-TEST::VALUES-LIST.ERROR.2
 CL-TEST::VALUES-LIST.ERROR.3
 CL-TEST::VALUES-LIST.ERROR.4
 CL-TEST::VALUES-LIST.1
 CL-TEST::VALUES-LIST.2
 CL-TEST::VALUES-LIST.3
 CL-TEST::VALUES-LIST.4
Test CL-TEST::VALUES-LIST.5 failed
Form: (LET ((CL-TEST::X (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO (MIN 1000 (1- CALL-ARGUMENTS-LIMIT) (1- MULTIPLE-VALUES-LIMIT)) CL-TEST::COLLECT CL-TEST::I))) (CL-TEST::EQUALT CL-TEST::X (MULTIPLE-VALUE-LIST (VALUES-LIST CL-TEST::X))))
Expected value:
          T
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.0
 CL-TEST::VALUES.1
 CL-TEST::VALUES.2
 CL-TEST::VALUES.3
 CL-TEST::VALUES.4
 CL-TEST::VALUES.10
 CL-TEST::VALUES.15
 CL-TEST::VALUES.19
Test CL-TEST::VALUES.20 failed
Form: (LET ((CL-TEST::A T) (CL-TEST::B T) (CL-TEST::C T) (CL-TEST::D T) (CL-TEST::E T) (CL-TEST::F T)) (SETF (VALUES CL-TEST::A (VALUES CL-TEST::B CL-TEST::C) (VALUES CL-TEST::D) (VALUES CL-TEST::E CL-TEST::F)) (VALUES 0 1 2 3 4 5 6)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))
Expected value:
          (0 1 NIL 2 3 NIL)
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VALUES.21 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F) (SETF (VALUES CL-TEST::A (VALUES CL-TEST::B CL-TEST::C) (VALUES CL-TEST::D) (VALUES CL-TEST::E CL-TEST::F)) (VALUES 0 1 2 3 4 5 6)))
Expected value:
          0
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.A
 CL-TEST::VALUES.B
Test CL-TEST::VALUES.C failed
Form: (LET ((CL-TEST::X (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO (MIN 1000 (1- CALL-ARGUMENTS-LIMIT) (1- MULTIPLE-VALUES-LIMIT)) CL-TEST::COLLECT CL-TEST::I))) (CL-TEST::EQUALT CL-TEST::X (MULTIPLE-VALUE-LIST (APPLY (FUNCTION VALUES) CL-TEST::X))))
Expected value:
          T
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.ORDER.1
 CL-TEST::WHEN.1
 CL-TEST::WHEN.2
 CL-TEST::WHEN.3
 CL-TEST::WHEN.4
 CL-TEST::WHEN.5
 CL-TEST::WHEN.6
 CL-TEST::WHEN.7
 CL-TEST::WHEN.8
 CL-TEST::WHEN.9
 CL-TEST::WHEN.10
 CL-TEST::WHEN.11
 CL-TEST::WHEN.ERROR.1
 CL-TEST::WHEN.ERROR.2
 CL-TEST::WHEN.ERROR.3
 CL-TEST::DO.1
 CL-TEST::DO.2
 CL-TEST::DO.3
 CL-TEST::DO.4
 CL-TEST::DO.5
 CL-TEST::DO.6
 CL-TEST::DO.7
 CL-TEST::DO.8
 CL-TEST::DO.9
 CL-TEST::DO.10
 CL-TEST::DO.11
 CL-TEST::DO.12
 CL-TEST::DO.13
 CL-TEST::DO.14
 CL-TEST::DO.15
 CL-TEST::DO.16
 CL-TEST::DO.17
 CL-TEST::DO.18
 CL-TEST::DO.19
 CL-TEST::DO.20
 CL-TEST::DO.21
 CL-TEST::DO.22
 CL-TEST::DO.23
 CL-TEST::DO.ERROR.1
 CL-TEST::DO*.1
 CL-TEST::DO*.2
 CL-TEST::DO*.3
 CL-TEST::DO*.4
 CL-TEST::DO*.5
 CL-TEST::DO*.6
 CL-TEST::DO*.7
 CL-TEST::DO*.8
 CL-TEST::DO*.9
 CL-TEST::DO*.10
 CL-TEST::DO*.11
 CL-TEST::DO*.12
 CL-TEST::DO*.13
 CL-TEST::DO*.14
 CL-TEST::DO*.15
 CL-TEST::DO*.16
 CL-TEST::DO*.17
 CL-TEST::DO*.18
 CL-TEST::DO*.19
 CL-TEST::DO*.20
 CL-TEST::DO*.21
 CL-TEST::DO*.22
 CL-TEST::DO*.23
 CL-TEST::DO*.ERROR.1
 CL-TEST::DOLIST.1
 CL-TEST::DOLIST.2
 CL-TEST::DOLIST.3
 CL-TEST::DOLIST.4
 CL-TEST::DOLIST.5
 CL-TEST::DOLIST.6
 CL-TEST::DOLIST.7
 CL-TEST::DOLIST.8
 CL-TEST::DOLIST.9
 CL-TEST::DOLIST.10
 CL-TEST::DOLIST.11
 CL-TEST::DOLIST.12
Test CL-TEST::DOLIST.13 failed
Form: (DOLIST (CL-TEST::E (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::E> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DOLIST.14 failed
Form: (LET ((CL-TEST::E 1)) (DOLIST (CL-TEST::E (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (SETF CL-TEST::E 2))) CL-TEST::E)
Expected value:
          1
Actual value:
          2 [Actual value: #<error during printing>

 NIL
 CL-TEST::DOLIST.15
 CL-TEST::DOLIST.16
Test CL-TEST::DOLIST.17 failed
Form: (LET ((CL-TEST::X :GOOD)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X :BAD)) (DOLIST (CL-TEST::E NIL CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)))))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::DOLIST.18
 CL-TEST::DOLIST.19
 CL-TEST::DOLIST.ERROR.1
 CL-TEST::DOTIMES.1
 CL-TEST::DOTIMES.2
 CL-TEST::DOTIMES.3
 CL-TEST::DOTIMES.3A
 CL-TEST::DOTIMES.4
 CL-TEST::DOTIMES.5
 CL-TEST::DOTIMES.6
 CL-TEST::DOTIMES.7
 CL-TEST::DOTIMES.8
 CL-TEST::DOTIMES.9
 CL-TEST::DOTIMES.10
 CL-TEST::DOTIMES.11
 CL-TEST::DOTIMES.12
 CL-TEST::DOTIMES.13
 CL-TEST::DOTIMES.14
 CL-TEST::DOTIMES.15
 CL-TEST::DOTIMES.16
 CL-TEST::DOTIMES.17
 CL-TEST::DOTIMES.17A
 CL-TEST::DOTIMES.18
 CL-TEST::DOTIMES.18A
 CL-TEST::DOTIMES.19
 CL-TEST::DOTIMES.20
 CL-TEST::DOTIMES.21
 CL-TEST::DOTIMES.22
 CL-TEST::DOTIMES.23
 CL-TEST::DOTIMES.23A
 CL-TEST::DOTIMES.24
 CL-TEST::DOTIMES.25
 CL-TEST::DOTIMES.26
 CL-TEST::DOTIMES.ERROR.1
 CL-TEST::SLOOP.1
 CL-TEST::SLOOP.2
 CL-TEST::SLOOP.3
 CL-TEST::SLOOP.4
 CL-TEST::SLOOP.5
 CL-TEST::SLOOP.6
 CL-TEST::SLOOP.7
 CL-TEST::LOOP.ERROR.1
 CL-TEST::LOOP-FINISH.ERROR.1
 CL-TEST::LOOP.1.1
 CL-TEST::LOOP.1.2
 CL-TEST::LOOP.1.3
 CL-TEST::LOOP.1.4
 CL-TEST::LOOP.1.5
 CL-TEST::LOOP.1.6
 CL-TEST::LOOP.1.7
Test CL-TEST::LOOP.1.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::FROM 1.0 CL-TEST::TO 5.0 COUNT CL-TEST::X)
Expected value:
          5
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.9
 CL-TEST::LOOP.1.10
 CL-TEST::LOOP.1.11
 CL-TEST::LOOP.1.12
Test CL-TEST::LOOP.1.13 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO 10 CL-TEST::FROM 1 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (1 3 5 7 9)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.14 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO 10 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 2 4 6 8 10)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.15
 CL-TEST::LOOP.1.16
 CL-TEST::LOOP.1.17
 CL-TEST::LOOP.1.18
 CL-TEST::LOOP.1.19
 CL-TEST::LOOP.1.20
Test CL-TEST::LOOP.1.21 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::FROM 0 CL-TEST::TO 5 CL-TEST::BY CL-TEST::1/2 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 CL-TEST::1/2 1 CL-TEST::3/2 2 CL-TEST::5/2 3 CL-TEST::7/2 4 CL-TEST::9/2 5)
Actual value:
          #<Unbound-Variable CL-TEST::1/2> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.22
 CL-TEST::LOOP.1.23
 CL-TEST::LOOP.1.24
 CL-TEST::LOOP.1.25
 CL-TEST::LOOP.1.26
Test CL-TEST::LOOP.1.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::ABOVE 6 CL-TEST::FROM 14 CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (14 12 10 8)
Actual value:
          #<Simple-Error CL-TEST::ABOVE is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::ABOVE 6 CL-TEST::FROM).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.28
 CL-TEST::LOOP.1.29
 CL-TEST::LOOP.1.30
 CL-TEST::LOOP.1.31
Test CL-TEST::LOOP.1.32 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C (CL-TEST::I 0)) (VALUES (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY (PROGN (SETQ CL-TEST::C (INCF CL-TEST::I)) 2) CL-TEST::BELOW (PROGN (SETQ CL-TEST::B (INCF CL-TEST::I)) 9) CL-TEST::FROM (PROGN (SETQ CL-TEST::A (INCF CL-TEST::I)) 0) CL-TEST::COLLECT CL-TEST::X) CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::I))
Expected value:
          (0 2 4 6 8)
          3
          2
          1
          3
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY (PROGN (SETQ CL-TEST::C (INCF CL-TEST::I)) 2) CL-TEST::BELOW).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.33
 CL-TEST::LOOP.1.34
 CL-TEST::LOOP.1.35
 CL-TEST::LOOP.1.36
Test CL-TEST::LOOP.1.37 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 3 CL-TEST::BELOW 20 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 3 6 9 12 15 18)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 3 CL-TEST::BELOW).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.38
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.44 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1))
Actual value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.45 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1))
Actual value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(5 1) evaluated to #C(5 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(5 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.46 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(5 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(5 1) #C(4 1) #C(3 1) #C(2 1) #C(1 1))
Actual value:
          (#C(5 1) #C(4 1) #C(3 1) #C(2 1) #C(1 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(10 1) evaluated to #C(10 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(10 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.47 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(10 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(10 1) #C(8 1) #C(6 1) #C(4 1) #C(2 1))
Actual value:
          (#C(10 1) #C(8 1) #C(6 1) #C(4 1) #C(2 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.48 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1))
Actual value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.49 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1))
Actual value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.50 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 10 CL-TEST::TO 15 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.51 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 10 CL-TEST::BELOW 15 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.52
Test CL-TEST::LOOP.1.53 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 0 CL-TEST::TO 10 CL-TEST::BY 2 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.54 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 1 CL-TEST::TO 4 CL-TEST::FOR NIL CL-TEST::FROM 1 CL-TEST::TO 10 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.55 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 5 CL-TEST::DOWNTO 0 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.56 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 5 CL-TEST::ABOVE 0 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.57
 CL-TEST::LOOP.1.58
 CL-TEST::LOOP.1.59
 CL-TEST::LOOP.1.60
 CL-TEST::LOOP.1.61
 CL-TEST::LOOP.1.62
 CL-TEST::LOOP.1.63
 CL-TEST::LOOP.1.64
 CL-TEST::LOOP.1.65
 CL-TEST::LOOP.2.1
 CL-TEST::LOOP.2.2
 CL-TEST::LOOP.2.3
 CL-TEST::LOOP.2.4
 CL-TEST::LOOP.2.5
 CL-TEST::LOOP.2.6
 CL-TEST::LOOP.2.7
 CL-TEST::LOOP.2.8
 CL-TEST::LOOP.2.9
 CL-TEST::LOOP.2.10
 CL-TEST::LOOP.2.11
 CL-TEST::LOOP.2.12
 CL-TEST::LOOP.2.13
Test CL-TEST::LOOP.2.14 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) CL-TEST::COLLECT CL-TEST::X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.2.15 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR (CL-TEST::X . CL-TEST::X) CL-TEST::IN (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) CL-TEST::COLLECT CL-TEST::X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR (CL-TEST::X . CL-TEST::X) CL-TEST::IN (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.2.16
 CL-TEST::LOOP.2.17
 CL-TEST::LOOP.2.18
 CL-TEST::LOOP.2.19
 CL-TEST::LOOP.2.20
 CL-TEST::LOOP.2.21
 CL-TEST::LOOP.2.22
 CL-TEST::LOOP.2.23
 CL-TEST::LOOP.2.24
 CL-TEST::LOOP.2.25
 CL-TEST::LOOP.2.26
 CL-TEST::DEFCLASS-1-DEFCLASS-RETURNS-CLASS
 CL-TEST::DEFCLASS-1-IS-IN-ITS-METACLASS
Test CL-TEST::DEFCLASS-1S-ARE-STANDARD-OBJECTS failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::DEFCLASS-1) (QUOTE STANDARD-OBJECT))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS-1-ALLOCATE-INSTANCE
 CL-TEST::DEFCLASS-2-DEFCLASS-RETURNS-CLASS
 CL-TEST::DEFCLASS-2-IS-IN-ITS-METACLASS
Test CL-TEST::DEFCLASS-2S-ARE-STANDARD-OBJECTS failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::DEFCLASS-2) (QUOTE STANDARD-OBJECT))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS-2-HAS-SLOT-NAMED-SLOT1
 CL-TEST::DEFCLASS-2-HAS-SLOT-NAMED-SLOT2
 CL-TEST::DEFCLASS-2-HAS-SLOT-NAMED-SLOT3
 CL-TEST::DEFCLASS-2-ALLOCATE-INSTANCE
 CL-TEST::DEFCLASS-3-DEFCLASS-RETURNS-CLASS
 CL-TEST::DEFCLASS-3-IS-IN-ITS-METACLASS
Test CL-TEST::DEFCLASS-3S-ARE-STANDARD-OBJECTS failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::DEFCLASS-3) (QUOTE STANDARD-OBJECT))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS-3-ALLOCATE-INSTANCE
 CL-TEST::DEFCLASS-4-DEFCLASS-RETURNS-CLASS
 CL-TEST::DEFCLASS-4-IS-IN-ITS-METACLASS
Test CL-TEST::DEFCLASS-4S-ARE-STANDARD-OBJECTS failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::DEFCLASS-4) (QUOTE STANDARD-OBJECT))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS-4-HAS-SLOT-NAMED-SLOT1
 CL-TEST::DEFCLASS-4-HAS-SLOT-NAMED-SLOT4
 CL-TEST::DEFCLASS-4-ALLOCATE-INSTANCE
 CL-TEST::CLASS-READERS/WRITERS/ACCESSORS-ARE-GENERIC-FUNCTIONS
 CL-TEST::CLASS-ACCESSORS-HAVE-GENERIC-SETF-FUNCTIONS
 CL-TEST::CLASS-01.1
 CL-TEST::CLASS-01.2
 CL-TEST::CLASS-01.3
 CL-TEST::CLASS-02.1
 CL-TEST::CLASS-02.2
 CL-TEST::CLASS-02.3
 CL-TEST::CLASS-03.1
 CL-TEST::CLASS-03.2
 CL-TEST::CLASS-03.3
 CL-TEST::CLASS-04.1
Test CL-TEST::CLASS-04.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION CL-TEST::S1-R) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-04.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION CL-TEST::S2-W) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-04.4 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION CL-TEST::S3-A) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-04.5 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION (SETF CL-TEST::S3-A)) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-05.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-05))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-05)))) (VALUES (NOT (EQL CL-TEST::C1 CL-TEST::C2)) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S1)) 12) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S1)) 17) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S1)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S1))) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S2)) (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S2)) (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S2)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S2))) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (QUOTE CL-TEST::X)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S3)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S3)) (QUOTE CL-TEST::Y)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S3)) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (QUOTE CL-TEST::Z)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S3))) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-05)) (QUOTE CL-TEST::S3))))
Expected value:
          T
          (12 17 12 17)
          (CL-TEST::A CL-TEST::B CL-TEST::A CL-TEST::B)
          (CL-TEST::X CL-TEST::X CL-TEST::X CL-TEST::Y CL-TEST::Y CL-TEST::Y CL-TEST::Z CL-TEST::Z CL-TEST::Z)
          CL-TEST::Z
Actual value:
          #<Simple-Error The slot CL-TEST::S3 is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-05 800B6907>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-06.1
 CL-TEST::CLASS-06.2
 CL-TEST::CLASS-07.1
 CL-TEST::CLASS-07.2
 CL-TEST::CLASS-07.3
 CL-TEST::CLASS-07.4
 CL-TEST::CLASS-07.5
 CL-TEST::CLASS-07.6
 CL-TEST::CLASS-07.7
 CL-TEST::CLASS-07.8
 CL-TEST::CLASS-07.9
 CL-TEST::CLASS-07.10
 CL-TEST::CLASS-07.11
 CL-TEST::CLASS-07.12
 CL-TEST::CLASS-08.1
 CL-TEST::CLASS-09.1
 CL-TEST::CLASS-09.2
 CL-TEST::CLASS-09.3
 CL-TEST::CLASS-09.4
 CL-TEST::CLASS-10.1
 CL-TEST::CLASS-10.2
 CL-TEST::CLASS-11.1
 CL-TEST::CLASS-11.2
 CL-TEST::CLASS-12.1
 CL-TEST::CLASS-12.2
Test CL-TEST::CLASS-13.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-13))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-13) :S1 (QUOTE CL-TEST::FOO)))) (VALUES (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S1)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S1))))
Expected value:
          CL-TEST::FOO
          CL-TEST::FOO
Actual value:
          #<Simple-Error The slot CL-TEST::S1 is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-13 800B51B7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-14.1
 CL-TEST::CLASS-15.2
 CL-TEST::CLASS-15.3
 CL-TEST::CLASS-15.4
 CL-TEST::CLASS-15.5
 CL-TEST::CLASS-15.6
 CL-TEST::CLASS-15.7
 CL-TEST::CLASS-16.1
 CL-TEST::CLASS-16.2
 CL-TEST::CLASS-16.3
 CL-TEST::CLASS-17.1
 CL-TEST::CLASS-17.2
 CL-TEST::CLASS-17.3
 CL-TEST::CLASS-18.1
 CL-TEST::CLASS-18.2
 CL-TEST::CLASS-18.3
 CL-TEST::CLASS-18.4
 CL-TEST::CLASS-18.5
 CL-TEST::CLASS-19.1
 CL-TEST::CLASS-19.2
 CL-TEST::CLASS-19.3
 CL-TEST::CLASS-20.1
 CL-TEST::CLASS-20.2
 CL-TEST::CLASS-20.3
 CL-TEST::CLASS-21.1
 CL-TEST::CLASS-21.2
 CL-TEST::CLASS-21.3
 CL-TEST::CLASS-21.4
 CL-TEST::CLASS-21.5
 CL-TEST::CLASS-22.1
 CL-TEST::CLASS-23.1
 CL-TEST::CLASS-23.2
 CL-TEST::CLASS-23.3
 CL-TEST::CLASS-23.4
 CL-TEST::CLASS-24.1
 CL-TEST::CLASS-24.2
 CL-TEST::CLASS-24.3
 CL-TEST::CLASS-24.4
 CL-TEST::CLASS-25.1
 CL-TEST::CLASS-25.2
 CL-TEST::CLASS-25.3
 CL-TEST::CLASS-25.4
 CL-TEST::CLASS-25.5
 CL-TEST::CLASS-25.6
Test CL-TEST::CLASS-26.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-26)))) (VALUES (SLOT-BOUNDP CL-TEST::C (QUOTE CL-TEST::S1-26)) (SETF (CL-TEST::S1-26 CL-TEST::C) (QUOTE CL-TEST::X)) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::S1-26)) (CL-TEST::TYPEP* (FUNCTION (SETF CL-TEST::S1-26)) (QUOTE GENERIC-FUNCTION))))
Expected value:
          NIL
          CL-TEST::X
          CL-TEST::X
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-27.1 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::CLASS-27)))) (VALUES (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CLASS-27) (QUOTE STANDARD-OBJECT)) (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CLASS-27) T) (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CLASS-27) (FIND-CLASS (QUOTE STANDARD-OBJECT))) (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CLASS-27) (FIND-CLASS T)) (CL-TEST::SUBTYPEP* CLASS (QUOTE STANDARD-OBJECT)) (CL-TEST::SUBTYPEP* CLASS T) (CL-TEST::SUBTYPEP* CLASS (FIND-CLASS (QUOTE STANDARD-OBJECT))) (CL-TEST::SUBTYPEP* CLASS (FIND-CLASS T))))
Expected value:
          T
          T
          T
          T
          T
          T
          T
          T
Actual value:
          #<Simple-Error The slot SYSTEM.INTERNALS::CLASS-PRECEDENCE-LIST is missing from the class #<Standard-Class SYMBOL C0006AC7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-27.2
 CL-TEST::CLASS-27.3
Test CL-TEST::CLASS-28.1 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::CLASS-28)))) (FUNCALL CL-TEST::*CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*) (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-28)))) (LIST (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CLASS-28)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::S1 CL-TEST::S2))) (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*)))))
Expected value:
          ((5 10) (T T T (6 11) (6 11)))
Actual value:
          #<Type-Error C177D4A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-28.2 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::CLASS-28)))) (FUNCALL CL-TEST::*CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*) (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-28) :S1 17))) (LIST (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CLASS-28)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::S1 CL-TEST::S2))) (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*)))))
Expected value:
          ((5 10) (T T T (17 11) (5 11)))
Actual value:
          #<Type-Error C1792FE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-28.3 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::CLASS-28)))) (FUNCALL CL-TEST::*CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*) (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-28) :S2 17))) (LIST (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CLASS-28)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::S1 CL-TEST::S2))) (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*)))))
Expected value:
          ((5 10) (T T T (6 17) (6 10)))
Actual value:
          #<Type-Error C17A8E37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0201.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0201)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A)) (CL-TEST::MAP-TYPEP* CL-TEST::C (LIST (QUOTE CL-TEST::CLASS-0201) (QUOTE CL-TEST::CLASS-0202) (FIND-CLASS (QUOTE CL-TEST::CLASS-0201)) (FIND-CLASS (QUOTE CL-TEST::CLASS-0202)))) (CLASS-NAME (CLASS-OF CL-TEST::C))))
Expected value:
          (T NIL NIL)
          (T T T)
          CL-TEST::X
          (T NIL T NIL)
          CL-TEST::CLASS-0201
Actual value:
          #<Type-Error C17BEEE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0202.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0202)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::E))) (CL-TEST::MAP-TYPEP* CL-TEST::C (LIST (QUOTE CL-TEST::CLASS-0201) (QUOTE CL-TEST::CLASS-0202) (FIND-CLASS (QUOTE CL-TEST::CLASS-0201)) (FIND-CLASS (QUOTE CL-TES02)))) (CLASS-NAME (CLASS-OF CL-TEST::C))))
Expected value:
          (T NIL NIL NIL T NIL)
          (CL-TEST::X CL-TEST::Y)
          (T T T T)
          CL-TEST::CLASS-0202
Actual value:
          #<Type-Error C17D73A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0203.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0203))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0204)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::EQT (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) CL-TEST::C1) (CL-TEST::MAP-SLOT CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          (NIL NIL)
          (NIL NIL NIL NIL)
          CL-TEST::X
          (T NIL)
          (T NIL NIL NIL)
          CL-TEST::X
          CL-TEST::X
          T
          (NIL NIL)
          (NIL NIL NIL NIL)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0203 C00BA3F7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0203.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0203))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0204)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TES-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::EQT (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::A)) CL-TEST::C2) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          (NIL NIL)
          (NIL NIL NIL NIL)
          CL-TEST::X
          (T NIL)
          (T NIL NIL NIL)
          CL-TEST::X
          CL-TEST::X
          T
          (NIL NIL)
          (NIL NIL NIL NIL)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0203 C00BA3F7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0205A.1
 CL-TEST::CLASS-0205B.1
Test CL-TEST::CLASS-0206.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0206A))) (CL-TEST::C2 (MAKE-INSTANCSS-0206B)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B))) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (PROGN (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::B)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X))) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B))) (PROGN (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL) (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::B)) NIL)))
Expected value:
          (NIL NIL)
          (NIL NIL)
          CL-TEST::X
          CL-TEST::Y
          (T T)
          (NIL NIL)
          (CL-TEST::X CL-TEST::Y)
          CL-TEST::X
          CL-TEST::Y
          (NIL NIL)
          (T T)
          (CL-TEST::X CL-TEST::Y)
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0206A C00B6C77>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0207.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0207A))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0207B))) (CL-TEST::C3 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0207C)))) (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C3 (QUOTE CL-TEST::A)) (VALUES (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (CL-TEST::SLOT-BOUNDP* CL-TEST:(QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::Y)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::Z)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::X
          T
          NIL
          NIL
          CL-TEST::X
          CL-TEST::Y
          T
          T
          NIL
 -TEST::Y
          CL-TEST::Z
          T
          T
          T
          CL-TEST::X
          CL-TEST::Y
          CL-TEST::Z
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0207A C00B6F67>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0208.1 failed
Form: (VALUES (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0208A)) (QUOTE CL-TEST::A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0208B)) (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::X
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0208A C00B8407>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-REDEFINITION.1 failed
Form: (LET* ((CL-TEST::COBJ1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0209A NIL ((CL-TEST::A :ALLOCATION :CLASS :INITFORM (QUOTE CL-TEST::X))))))) (CL-TEST::COBJ2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0209B (CL-LASS-0209A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ3 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0209A NIL ((CL-TEST::A :ALLOCATION :CLASS :INITFORM (QUOTE CL-TEST::X))))))) (CL-TEST::COBJ4 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0209B (CL-TEST::CLASS-0209A) ((CL-TEST::A :ALLOCATION :INSTANCE))))))) (VALUES (CL-TEST::EQT CL-TEST::COBJ1 CL-TEST::COBJ3) (CL-TEST::EQT CL-TEST::COBJ2 CL-TEST::COBJ4) (CLASS-NAME CL-TEST::COBJ1) (CLASS-NAME CL-TEST::COBJ2) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0209A)) (QUOTE CL-TEST::A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0209B)) (QUOTE CL-TEST::A))))
Expected value:
          T
          T
          CL-TEST::CLASS-0209A
          CL-TEST::CLASS-0209B
          CL-TEST::X
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0209A C18B1197>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-REDEFINITION.2 failed
Form: (LET* ((CL-TEST::COBJ1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210A NIL ((CL-TEST::A :ALLOCATION :CLASS)))))) (CL-TEST::COBJ2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210B (CL-TEST::CLASS-0210A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ3 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210C (CL-TEST::CLASS-0210B) ((CL-TEST::A :ALLOCATION :CLASS)))))) (CL-TEST::DUMMY (PROGN (SETF (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210A)) (QUOTE CL-TEST::A)) :BAD1) (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210B)) (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210C)) NIL)) (CL-TEST::COBJ4 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210A NIL ((CL-TEST::A :ALLOCATION :CLASS)))))) (CL-TEST::COBJ5 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210B (CL-TEST::CLASS-0210A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ6 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210C (CL-TEST::CLASS-0210B) ((CL-TEST::A :ALLOCATION :CLASS))))))) (LIST (CL-TEST::EQT CL-TEST::COBJ1 CL-TEST::COBJ4) (CL-TESTT CL-TEST::COBJ2 CL-TEST::COBJ5) (CL-TEST::EQT CL-TEST::COBJ3 CL-TEST::COBJ6) (CLASS-NAME CL-TEST::COBJ1) (CLASS-NAME CL-TEST::COBJ2) (CLASS-NAME CL-TEST::COBJ3) (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210A))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210B))) (CL-TEST::C3 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210C)))) (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C3 (QUOTE CL-TEST::A)) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A))) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::Y)) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A))) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::Z)) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A))) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A))) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A)))))))
Expected value:
          (T T T CL-TEST::CLASS-0210A CL-TEST::CLASS-0210B CL-TEST::CLASS-0210C (CL-TEST::X CL-TEST::X NIL NIL CL-TEST::Y CL-TEST::X CL-TEST::Y NIL CL-TEST::Z CL-TEST::X CL-TEST::Y CL-TEST::Z))
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0210A C18D8507>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-REDEFINITION.3 failed
Form: (LET* ((CL-TEST::COBJ1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-REDEF-03A NIL ((CL-TEST::A :ALLOCATION :CLASS :INITFORM (QUOTE CL-AL (QUOTE (DEFCLASS CL-TEST::CLASS-REDEF-03B (CL-TEST::CLASS-REDEF-03A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ4 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-REDEF-03B (CL-TEST::CLASS-REDEF-03A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ3 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-REDEF-03A NIL ((CL-TEST::A :ALLOCATION :CLASS :INITFORM (QUOTE CL-TEST::X)))))))) (VALUES (CL-TEST::EQT CL-TEST::COBJ1 CL-TEST::COBJ3) (CL-TEST::EQT CL-TEST::COBJ2 CL-TEST::COBJ4) (CLASS-NAME CL-TEST::COBJ1) (CLASS-NAME CL-TEST::COBJ2) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-REDEF-03A)) (QUOTE CL-TEST::A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-REDEF-03B)) (QUOTE CL-TEST::A))))
Expected value:
          T
          T
          CL-TEST::CLASS-REDEF-03A
          CL-TEST::CLASS-REDEF-03B
          CL-TEST::X
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-REDEF-03A C1935F07>.> [Actual value: #<error 211.1 failed
Form: (VALUES (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0211A)) (QUOTE CL-TEST::A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0211B)) (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::X
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0211B C00B7C67>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0212.1
 CL-TEST::CLASS-0212.2
 CL-TEST::CLASS-0212.3
 CL-TEST::CLASS-0212.4
 CL-TEST::CLASS-0212.5
 CL-TEST::CLASS-0213.1
 CL-TEST::CLASS-0213.2
Test CL-TEST::CLASS-0214.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0214A) :A1 (QUOTE CL-TEST::X)))) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0214A)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0214B)) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A)) (SLOT-EXISTS-P CL-TEST::C (QUOTE CL-TEST::B))))
Expected value:
          T
          NIL
          CL-TEST::X
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0214A C00B5D07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0214.2 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0214B) :A1 (QUOTE CL-TEST::Y)))) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0214A)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0214B)) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C (QUOTE CL-TEST::B))))
Expected value:
          T
          T
          CL-TEST::Y
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0214B C00B85C7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0215.1
Test CL-TEST::CLASS-0215.2 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0215B) :A1 (QUOTE CL-TEST::Y)))) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0215A)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0215B)) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A))))
Expected value:
          T
          T
          CL-TEST::Y
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0215B C00B7BC7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0216.1
 CL-TEST::CLASS-0216.2
 CL-TEST::CLASS-0217.1
 CL-TEST::CLASS-0217.2
 CL-TEST::CLASS-0217.3
 CL-TEST::CLASS-0217.4
 CL-TEST::CLASS-0218.1
 CL-TEST::CLASS-0218.2
 CL-TEST::CLASS-0219.1
 CL-TEST::CLASS-0219.2
 CL-TEST::CLASS-0220.1
 CL-TEST::CLASS-0220.2
 CL-TEST::CLASS-0220.3
 CL-TEST::CLASS-0220.4
 CL-TEST::CLASS-0221.1
 CL-TEST::CLASS-0221.2
 CL-TEST::CLASS-0221.3
 CL-TEST::CLASS-0222.1
 CL-TEST::CLASS-0222.2
 CL-TEST::CLASS-0223.1
Test CL-TEST::CLASS-0301.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0301C)))) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0301A)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0301B)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0301C)) (CL-TEST::TYPEP* CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CLASS-0301A))) (CL-TEST::TYPEP* CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CLASS-0301B))) (CL-TEST::TYPEP* CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CLASS-0301C))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A)) (QUOTE CL-TEST::W)) (SETF (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::B)) (QUOTE CL-TEST::X)) (SETF (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::C)) (QUOTE CL-TEST::Y)) (SETF (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::D)) (QUOTE CL-TEST::Z)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          T
          T
          T
          T
          T
          T
          (NIL NIL NIL NIL)
          CL-TEST::W
          CL-TEST::X
          CL-TEST::Y
          CL-TEST::Z
          (T T T T)
          (CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z)
Actual value:
          #<Type-Error C1A01C87> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0302.1
Test CL-TEST::CLASS-0303.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0303A))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0303B))) (CL-TEST::C3 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0303C)))) (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::B)) (VALUES (LOOP CL-TEST::FOR CL-TEST::C CL-TEST::IN (LIST CL-TEST::C1 CL-TEST::C2 CL-TEST::C3) CL-TEST::COLLECT (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B)))) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X1)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A))) (LIST (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X2)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A))) (LIST (SETF (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X3)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A))) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TECL-TEST::Y1)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::B)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::B))) (LIST (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y2)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::B)) (SLOT-BOUNDP CL-TEST::C3 (QUOTE CL-TEST::B))) (LIST (SETF (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y3)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::B)))))
Expected value:
          ((NIL NIL) (NIL NIL) (NIL NIL))
          (CL-TEST::X1 NIL CL-TEST::X1)
          (CL-TEST::X2 CL-TEST::X1 CL-TEST::X2 CL-TEST::X1)
          (CL-TEST::X3 CL-TEST::X3 CL-TEST::X2 CL-TEST::X3)
          (CL-TEST::Y1 CL-TEST::Y1 NIL NIL)
          (CL-TEST::Y2 CL-TEST::Y1 CL-TEST::Y2 NIL)
          (CL-TEST::Y3 CL-TEST::Y1 CL-TEST::Y2 CL-TEST::Y3)
Actual value:
          #<Simple-Error The slot CL-TEST::Ainstance
slot in the class #<Standard-Class CL-TEST::CLASS-0303A C00B84A7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0304.1
 CL-TEST::CLASS-0305.1
 CL-TEST::CLASS-0306.1
 CL-TEST::CLASS-0306.2
 CL-TEST::CLASS-0307.1
 CL-TEST::CLASS-0308.1
Test CL-TEST::CLASS-0309.1 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::CLASS-0309)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0309 NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C)))))) (CL-TEST::OBJ1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0309)))) (SETF (CLASS-NAME CL-TEST::CLASS1) NIL) (LET ((CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0309 NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C))))))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ1) CL-TEST::CLASS1) (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::CLASS2) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS1) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS2)))))
Expected value:
          T
          NIL
          T
          NIL
Actual value:
          #<Type-Error C1ABB847> [Actuduring printing>

 NIL
Test CL-TEST::CLASS-0310.1 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::CLASS-0310A)) NIL (FIND-CLASS (QUOTE CL-TEST::CLASS-0310B)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0310A NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C)))))) (CL-TEST::OBJ1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0310A)))) (SETF (CLASS-NAME CL-TEST::CLASS1) (QUOTE CL-TEST::CLASS-0310B)) (LET ((CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0310A NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C))))))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ1) CL-TEST::CLASS1) (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::CLASS2) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS1) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS2) (CLASS-NAME CL-TEST::CLASS1) (CLASS-NAME CL-TEST::CLASS2)))))
Expected value:
          T
          NIL
          T
          NIL
          CL-TEST::CLASS-0310B
          CL-TEST::CLASS-0310A
Actual value:
          #<Type-Error C1ADED67> [Actual value: #<error during printing>

 NIL
TeTEST::CLASS-0311.1 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::CLASS-0311)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0311 NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C)))))) (CL-TEST::OBJ1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0311)))) (SETF (FIND-CLASS (QUOTE CL-TEST::CLASS-0311)) NIL) (LET ((CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0311 NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C))))))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ1) CL-TEST::CLASS1) (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::CLASS2) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS1) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS2) (CLASS-NAME CL-TEST::CLASS1) (CLASS-NAME CL-TEST::CLASS2) (CL-TEST::EQT (FIND-CLASS (QUOTE CL-TEST::CLASS-0311)) CL-TEST::CLASS1) (CL-TEST::EQT (FIND-CLASS (QUOTE CL-TEST::CLASS-0311)) CL-TEST::CLASS2)))))
Expected value:
          T
          NIL
          T
          NIL
          CL-TEST::CLASS-0311
          CL-TEST::CLASS-0311
          NIL
          T
Actual value:
       Type-Error C1B05BC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.1 NIL (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::B CL-TEST::E)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.2 NIL ((CL-TEST::S1 :INITARG :FOO)) (:DEFAULT-INITARGS :FOO 1 :FOO 2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.3 NIL ((CL-TEST::S1 :INITFORM 0 :INITFORM 2))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.4 NIL ((CL-TEST::S1 :INITFORM 0 :INITFORM 0))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.5 NIL ((CL-TEST::S1 :TYPE FIXNUM :TYPE CHARACTER))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.6 NIL ((CL-TEST::S1 :TYPE T :TYPE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.7 NIL ((CL-TEST::S1 :DOCUMENTATION "foo" :DOCUMENTATION "bar"))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.9 NIL ((CL-TEST::S1 :ALLOCATION :CLASS :ALLOCATION :INSTANCE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.10 NIL ((CL-TEST::S1 :ALLOCATION :CLASS :ALLOCATION :CLASS))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.11 NIL ((CL-TEST::S1 :ALLOCATION :INSTANCE :ALLOCATION :INSTANCE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.12 NIL ((CL-TEST::S1 #:G21265 NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.13 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.13 NIL (CL-TEST::A CL-TEST::B CL-TEST::C) (#:G21266)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.14 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-14 NIL (CL-TEST::FOO CL-TEST::FOO)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.15 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-15 NIL (CL-TEST::FOO (CL-TEST::FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.16 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-16 NIL ((CL-TEST::FOO :INITARG CL-TEST::F1)) (:DEFAULT-INITARGS :F1 10 :F1 20)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.17 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-17 NIL ((CL-TEST::FOO :INITFORM 10 :INITFORM 20 :READER CL-TEST::DEFCLASS-ERROR-4/FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.18 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-18 NIL ((CL-TEST::FOO :INITFORM 10 :INITFORM 10 :READER CL-TEST::DEFCLASS-ERROR-5/FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.19 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-19 NIL ((CL-TEST::FOO :INITARG CL-TEST::F1 :TYPE T :TYPE T :READER CL-TEST::DEFCLASS-ERROR-6/FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.20 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-20 NIL ((CL-TEST::FOO :INITARG CL-TEST::F1 :DOCUMENTATION "x" :READER CL-TEST::DEFCLASS-ERROR-7/FOO :DOCUMENTATION "x"))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.21 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-21 NIL ((CL-TEST::FOO #:UNKNOWN-SLOT-OPTION NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.22 failed
Form: (LET ((CL-TEST::OPTION (GENTEMP "UNKNOWN-OPTION" (SYMBOL-PACKAGE :FOO)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-22 NIL (CL-TEST::FOO CL-TEST::BAR) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::OPTION) NIL)) PROGRAM-ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS.ERROR.23
 CL-TEST::DEFCLASS.ERROR.24
Test CL-TEST::DEFCLASS.FORWARD-REF.1 failed
Form: (LET ((CL-TEST::C1 (GENSYM)) (CL-TEST::C2 (GENSYM))) (LET ((CL-TEST::CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2)) NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS1 (QUOTE CLASS))) 1 (LET ((CL-TEST::CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) NIL NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS2 (QUOTE CLASS))) 2 (LET ((CL-TEST::I1 (MAKE-INSTANCE CL-TEST::C1)) (CL-TEST::I2 (MAKE-INSTANCE CL-TEST::C2))) (COND ((NOT (TYPEP CL-TEST::I1 CL-TEST::C1)) 3) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS1)) 4) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C2)) 5) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS2)) 6) ((TYPEP CL-TEST::I2 CL-TEST::C1) 7) ((TYPEP CL-TEST::I2 CL-TEST::CLASS1) 8) ((NOT (TYPEP CL-TEST::I2 CL-TEST::C2)) 9) ((NOT (TYPEP CL-TEST::I2 CL-TEST::CLASS2)) 10) (T (QUOTE CL-TEST::GOOD)))))))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No class named #:G112533.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.FORWARD-REF.2 failed
Form: (LET ((CL-TEST::C1 (GENSYM)) (CL-TEST::C2 (GENSYM)) (CL-TEST::C3 (GENSYM))) (LET ((CL-TEST::CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) (SYSTEM.INTS::BQ-COMMA CL-TEST::C3)) NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS1 (QUOTE CLASS))) 1 (LET ((CL-TEST::CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) NIL NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS2 (QUOTE CLASS))) 2 (LET ((CL-TEST::CLASS3 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3) NIL NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS3 (QUOTE CLASS))) 3 (LET ((CL-TEST::I1 (MAKE-INSTANCE CL-TEST::C1)) (CL-TEST::I2 (MAKE-INSTANCE CL-TEST::C2)) (CL-TEST::I3 (MAKE-INSTANCE CL-TEST::C3))) (COND ((NOT (TYPEP CL-TEST::I1 CL-TEST::C1)) 4) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS1)) 5) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C2)) 6) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS2)) 7) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C3)) 8) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS3)) 9) ((TYPEP CL-TEST::I2 CL-TEST::C1) 10) ((TYPEP CL-TEST::I2 CL-TEST::CLASS1) 11) ((TYPEP CL-TEST::I3 CL-TEST::C1) 12) ((TYPEP CL-TEST::I3 CL-TEST::CLASS1) 13) ((NOT (TYPEP CL-TEST::I2 CL-TEST::C2ST::CLASS2)) 15) ((NOT (TYPEP CL-TEST::I3 CL-TEST::C3)) 16) ((NOT (TYPEP CL-TEST::I3 CL-TEST::CLASS3)) 17) ((TYPEP CL-TEST::I2 CL-TEST::C3) 18) ((TYPEP CL-TEST::I2 CL-TEST::CLASS3) 19) ((TYPEP CL-TEST::I3 CL-TEST::C2) 20) ((TYPEP CL-TEST::I3 CL-TEST::CLASS2) 21) (T (QUOTE CL-TEST::GOOD)))))))))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No class named #:G112535.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.FORWARD-REF.3 failed
Form: (LET ((CL-TEST::C1 (GENSYM)) (CL-TEST::C2 (GENSYM)) (CL-TEST::C3 (GENSYM))) (LET ((CL-TEST::CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2)) NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS1 (QUOTE CLASS))) 1 (LET ((CL-TEST::CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3)) NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS2 (QUOTE CLASS))) 2 (LET ((CL-TEST::CLASS3 (EVUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3) NIL NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS3 (QUOTE CLASS))) 3 (LET ((CL-TEST::I1 (MAKE-INSTANCE CL-TEST::C1)) (CL-TEST::I2 (MAKE-INSTANCE CL-TEST::C2)) (CL-TEST::I3 (MAKE-INSTANCE CL-TEST::C3))) (COND ((NOT (TYPEP CL-TEST::I1 CL-TEST::C1)) 4) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS1)) 5) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C2)) 6) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS2)) 7) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C3)) 8) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS3)) 9) ((TYPEP CL-TEST::I2 CL-TEST::C1) 10) ((TYPEP CL-TEST::I2 CL-TEST::CLASS1) 11) ((TYPEP CL-TEST::I3 CL-TEST::C1) 12) ((TYPEP CL-TEST::I3 CL-TEST::CLASS1) 13) ((NOT (TYPEP CL-TEST::I2 CL-TEST::C2)) 14) ((NOT (TYPEP CL-TEST::I2 CL-TEST::CLASS2)) 15) ((NOT (TYPEP CL-TEST::I3 CL-TEST::C3)) 16) ((NOT (TYPEP CL-TEST::I3 CL-TEST::CLASS3)) 17) ((NOT (TYPEP CL-TEST::I2 CL-TEST::C3)) 18) ((NOT (TYPEP CL-TEST::I2 CL-TEST::CLASS3)) 19) ((TYPEP CL-TEST::I3 CL-TEST::C2) 20) ((TYPEP CL-TEST::I3 CL-TEST::CLASS2) 21alue:
          #<Simple-Error No class named #:G112538.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.FORWARD-REF.4 failed
Form: (BLOCK NIL (LET ((CL-TEST::C1 (GENSYM)) (CL-TEST::C2 (GENSYM)) (CL-TEST::C3 (GENSYM)) (CL-TEST::C4 (GENSYM)) (CL-TEST::C5 (GENSYM))) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C4) NIL NIL))) (QUOTE CLASS)) (RETURN 1)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C5) NIL NIL))) (QUOTE CLASS)) (RETURN 2)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3)) NIL))) (QUOTE CLASS)) (RETURN 3)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C4) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C5)) NIL))) (QUOTE CLASS)) (RETURN 4)) (CL-TEST::HANDLER-CASN (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C5) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C4)) NIL) (MAKE-INSTANCE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1)))))) (ERROR NIL :GOOD))))
Expected value:
          :GOOD
Actual value:
          1 [Actual value: #<error during printing>

 NIL
 CL-TEST::ENSURE-GENERIC-FUNCTION.1
 CL-TEST::ENSURE-GENERIC-FUNCTION.2
 CL-TEST::ENSURE-GENERIC-FUNCTION.3
Test CL-TEST::ENSURE-GENERIC-FUNCTION.4 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-4))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (VALUES (FBOUNDP CL-TEST::F) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (TYPEP (SYMBOL-FUNCTION CL-TEST::F) (QUOTE GENERIC-FUNCTION)))))
Expected value:
          NIL
          T
          T
          T
Actual value:
          NIL [Actual value: #<error during printingST::EGF-FUN-5))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (VALUES (FBOUNDP CL-TEST::F) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X CL-TEST::Y))) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (TYPEP (SYMBOL-FUNCTION CL-TEST::F) (QUOTE GENERIC-FUNCTION)))))
Expected value:
          NIL
          T
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.6 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-6))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (VALUES (FBOUNDP CL-TEST::F) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-(CL-TEST::B T) (CL-TEST::C T)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F)) :LAMBDA-LIST (QUOTE (CL-TEST::X CL-TEST::Y))) ERROR)))))
Expected value:
          NIL
          T
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.7 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-7))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:METHOD ((CL-TEST::X SYMBOL)) (LIST CL-TEST::X :A)) (:METHOD ((CL-TEST::X INTEGER)) (LIST CL-TEST::X :B)) (:METHOD ((CL-TEST::X T)) (LIST CL-TEST::X :C))))))) (VALUES (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::X 2 CL-TEST::3/2))) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)))) (MAPCAR CL-TEST::FN (QUOTTEST::3/2))))))
Expected value:
          ((CL-TEST::X :A) (2 :B) (CL-TEST::3/2 :C))
          T
          ((CL-TEST::X :A) (2 :B) (CL-TEST::3/2 :C))
Actual value:
          #<Type-Error C1DCD607> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.8 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-8))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X CL-TEST::Y) (:METHOD ((CL-TEST::X T) (CL-TEST::Y SYMBOL)) 1) (:METHOD ((CL-TEST::X SYMBOL) (CL-TEST::Y T)) 2)))))) (VALUES (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::A CL-TEST::A 3)) (QUOTE (CL-TEST::B 4 CL-TEST::B))) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X CL-TEST::Y)) :ARGUMENT-PRECEDENCE-ORDER (QUOTE (CL-TEST::Y CL-TEST::X)))) (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::A CL-TEST::A 3)) (QUOTE (CL-TEST::B 4 CL-TEST::B))))))
Expected value:
          (2 2 1)
     #<Type-Error C1DEF6D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.9 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-9))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:METHOD-COMBINATION +) (:METHOD + ((CL-TEST::X T)) 1) (:METHOD + ((CL-TEST::X SYMBOL)) 2) (:METHOD + ((CL-TEST::X (EQL NIL))) 4)))))) (VALUES (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::3/2 CL-TEST::A NIL))) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :METHOD-CLASS (QUOTE STANDARD-METHOD))) (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::3/2 CL-TEST::A NIL))) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :METHOD-CLASS (FIND-CLASS (QUOTE STANDARD-METHOD)))) (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::3/2 CL-TEST::A NIL))))))
Expected value:
          (1 3 7)
          T
          (1 3 7)
                 #<Simple-Error Unknown &KEY argument :METHOD-COMBINATION. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.10 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-10))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:METHOD ((CL-TEST::X T)) 1)))))) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :GENERIC-FUNCTION-CLASS (QUOTE STANDARD-GENERIC-FUNCTION))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :GENERIC-FUNCTION-CLASS (FIND-CLASS (QUOTE STANDARD-GENERIC-FUNCTION)))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)))))
Expected value:
          1
          T
          1
          T
         ue:
          #<Type-Error C1E317D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.11 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-11))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:METHOD ((CL-TEST::X T)) 1)))))) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (CL-TEST::EQLT CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (ENSURE-GENERIC-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F)) :LAMBDA-LIST (QUOTE (CL-TEST::X)) :ENVIRONMENT CL-TEST::ENV))) (CL-TEST::%M))))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)))))
Expected value:
          1
          T
          1
Actual value:
          #<Type-Error C1E500E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.12 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-12))) (WHEN (FBOUNDP CL-TEST::FNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:DOCUMENTATION "foo") (:METHOD ((CL-TEST::X T)) 1)))))) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (OR (DOCUMENTATION CL-TEST::F (QUOTE FUNCTION)) "foo") (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :DOCUMENTATION "bar")) (OR (DOCUMENTATION CL-TEST::F (QUOTE FUNCTION)) "bar") (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)))))
Expected value:
          1
          "foo"
          T
          "bar"
          1
Actual value:
          #<Type-Error C1E6C017> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.13 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-13))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X CL-TEST::Y) (DECLARE (OPTIMIZE SAFETY (SPEED 0) (DEBUG ) (:METHOD ((CL-TEST::X T) (CL-TEST::Y T)) (LIST CL-TEST::X CL-TEST::Y))))))) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X CL-TEST::Y)) :DECLARE (QUOTE ((OPTIMIZE (SAFETY 0) (DEBUG 2) SPEED (SPACE 1)))))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) 1))))
Expected value:
          (CL-TEST::A CL-TEST::B)
          T
          (CL-TEST::A 1)
Actual value:
          #<Simple-Error Unknown &KEY argument DECLARE. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.14 failed
Form: (LET ((CL-TEST::F (QUOTE (SETF CL-TEST::EGF-FUN-14)))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::VAL CL-TEST::X) (:METHOD ((CL-TEST::VAL T) (CL-TEST::X CONS)) (SETF (CAR CL-TEST::X) CL-TEST::VAL))))))) (Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (LIST (SETF (CL-TEST::EGF-FUN-14 CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::VAL CL-TEST::X)))) (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (LIST (SETF (CL-TEST::EGF-FUN-14 CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)))))
Expected value:
          (CL-TEST::C (CL-TEST::C . CL-TEST::B))
          T
          (CL-TEST::C (CL-TEST::C . CL-TEST::B))
Actual value:
          (CL-TEST::C (CL-TEST::C . CL-TEST::B)) [Actual value: #<error during printing>

 NIL
 CL-TEST::ENSURE-GENERIC-FUNCTION.ERROR.1
Test CL-TEST::ENSURE-GENERIC-FUNCTION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (GENSYM) :LAMBDA-LIST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.1 failed
Form: (LET* ((CLASS (FIND-CLASS LASS-01))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))))
Expected value:
          T
          T
          T
          (NIL NIL NIL NIL NIL NIL)
Actual value:
          #<Type-Error C1EE5F57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.2 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS :FOO T :A 10 :B 12 :C 1.0 :D (QUOTE CL-TEST::A) :E 17 :F NIL :BAR T))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::          T
          T
          T
          (NIL NIL NIL NIL NIL NIL)
Actual value:
          #<Type-Error C1EF9277> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.3 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS :ALLOW-OTHER-KEYS NIL :XYZZY T))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))))
Expected value:
          T
          T
          T
          (NIL NIL NIL NIL NIL NIL)
Actual value:
          #<Type-Error C1F0D867> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.4 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-02)))) (SETF (SLOT-VALUE (ALLOCATE-INSTANCE CLASS) (QUOTE CL-TEST::B)) (QUOTE CL-TEST::X))L-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-02)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::SLOT-BOUNDP* CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)))))
Expected value:
          T
          T
          T
          NIL
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::ALLOCATE-INSTANCE-CLASS-02 C00B99A7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.5 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-STRUCT-01))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (SETF (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-A CL-TEST::OBJ) (QUOTE CL-TEST::X) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-B CL-TEST::OBJ) 1234567890 (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-C CL-TEST::OBJ) #\Z (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-D CL-TEST::OBJ) (QU (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-STRUCT-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-A CL-TEST::OBJ) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-B CL-TEST::OBJ) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-C CL-TEST::OBJ) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-D CL-TEST::OBJ)))
Expected value:
          T
          T
          T
          CL-TEST::X
          1234567890
          #\Z
          CL-TEST::FOO
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function ALLOCATE-INSTANCE 3A6134C>.
Dispatching on class #<Standard-Class STRUCTURE-CLASS C0007477>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.ORDER.1 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01))) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W (CL-TEST::OBJ (ALLOCATE-INSTANCE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I))CL-TEST::Y (INCF CL-TEST::I)) :B (SETF CL-TEST::Z (INCF CL-TEST::I)) :E (SETF CL-TEST::W (INCF CL-TEST::I))))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          T
          T
          T
          4
          1
          2
          3
          4
Actual value:
          #<Type-Error C1F671F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (ALLOCATE-INSTANCE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function ALLOCATE-INSTANCE 3A6134C>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::REINITIALIZE-INSTANCE.1
 CL-TEST::REINITIALIZE-INSTANCE.2
 CL-TEST::REINITIALIZE-INSTANCE.3
 CL-TEST::REINITIALIZE-INSTANCE.4
 CL-TEST::REINITIALIZE-INSTANCE CL-TEST::REINITIALIZE-INSTANCE.6
 CL-TEST::REINITIALIZE-INSTANCE.7
 CL-TEST::REINITIALIZE-INSTANCE.8
 CL-TEST::REINITIALIZE-INSTANCE.9
 CL-TEST::REINITIALIZE-INSTANCE.10
 CL-TEST::REINITIALIZE-INSTANCE.ORDER.1
Test CL-TEST::REINITIALIZE-INSTANCE.ERROR.1 failed
Form: (CL-TEST::HANDLER-CASE (EVAL (QUOTE (REINITIALIZE-INSTANCE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-01)) :GARBAGE T))) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          #<Cl-Test::Class-01 C1FC1627> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REINITIALIZE-INSTANCE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (REINITIALIZE-INSTANCE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function REINITIALIZE-INSTANCE 3A639BC>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHARED-INITIALIZE.1.1
 CL-TEST::SHARED-INITIALIZE.1.2
 CL-TEST::SHARED-INITIALIZE.1.3
 CL-TEST::SHARED-INITIALIZE.1.4
 CL-TEST::SHARED-INITIALIZE.1.5
 CL-TEST::SHARED-INITIALIZE.1.6
 CL-TEST::SHARED-INITIALIZE.1.7
 CL-TEST::SHARED-INITIALIZE.1.8
 CL-TEST::SHARED-INITIALIZE.1.9
 CL-TEST::SHARED-INITIALIZE.1.10
 CL-TEST::SHARED-INITIALIZE.2.1
 CL-TEST::SHARED-INITIALIZE.2.2
 CL-TEST::SHARED-INITIALIZE.2.3
 CL-TEST::SHARED-INITIALIZE.2.4
 CL-TEST::SHARED-INITIALIZE.2.5
 CL-TEST::SHARED-INITIALIZE.2.6
 CL-TEST::SHARED-INITIALIZE.3.1
 CL-TEST::SHARED-INITIALIZE.4.1
 CL-TEST::SHARED-INITIALIZE.4.2
 CL-TEST::SHARED-INITIALIZE.4.3
 CL-TEST::SHARED-INITIALIZE.4.4
 CL-TEST::SHARED-INITIALIZE.4.5
 CL-TEST::SHARED-INITIALIZE.4.6
 CL-TEST::SHARED-INITIALIZE.4.7
Test CL-TEST::SHARED-INITIALIZE.5.1 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-05))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ T)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          T
          (NIL T)
          CL-TEST::FOO
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-05 800B6F77>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHARED-INITIALIZE.5.2 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-05))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ (QUOTE (CL-TEST::B)))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          T
          (NIL T)
          CL-TEST::FOO
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-05 800B6F77>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHARED-INITIALIZE.5.3 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-05))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS)) (CL-TEST::OBJ2 (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ T :A 117)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          T
          (T T)
          (117 CL-TEST::FOO)
          (117 CL-TEST::FOO)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<StandCL-TEST::SHARED-INIT-CLASS-05 800B6F77>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHARED-INITIALIZE.5.4 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-05))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS)) (CL-TEST::OBJ2 (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (VALUES (SETF (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)) (QUOTE CL-TEST::BAR)) (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ T :A 117)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          CL-TEST::BAR
          T
          (T T)
          (117 CL-TEST::BAR)
          (117 CL-TEST::BAR)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-05 800B6F77>.> [Actual value: #<error during printing NIL
 CL-TEST::SHARED-INITIALIZE.6.1
 CL-TEST::SHARED-INITIALIZE.6.2
 CL-TEST::SHARED-INITIALIZE.6.3
 CL-TEST::SHARED-INITIALIZE.6.4
 CL-TEST::SHARED-INITIALIZE.6.5
 CL-TEST::SHARED-INITIALIZE.6.6
 CL-TEST::SHARED-INITIALIZE.6.7
 CL-TEST::SHARED-INITIALIZE.6.8
 CL-TEST::SHARED-INITIALIZE.6.9
 CL-TEST::SHARED-INITIALIZE.7.1
 CL-TEST::SHARED-INITIALIZE.7.2
 CL-TEST::SHARED-INITIALIZE.8.1
 CL-TEST::SHARED-INITIALIZE.8.2
 CL-TEST::SHARED-INITIALIZE.8.3
Test CL-TEST::SHARED-INITIALIZE.9.1 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-09))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ (QUOTE (CL-TEST::B)))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          (NIL NIL)
          T
          (NIL T)
          CL-TEST::Y
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-09 800B7AC7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHARED-INITIALIZE.ORDER.1
Test CL-TEST::SHARED-INITIALIZE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SHARED-INITIALIZE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function SHARED-INITIALIZE 3A6414C>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHARED-INITIALIZE.ERROR.2
Test CL-TEST::SHARED-INITIALIZE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-01))))) (SHARED-INITIALIZE CL-TEST::OBJ NIL :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHARED-INITIALIZE.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-01))))) (SHARED-INITIALIZE CL-TEST::OBJ NIL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::CHANGE-CLASS.1.1
 CL-TEST::CHANGE-CLASS.1.2
 CL-TEST::CHANGE-CLASS.1.3
 CL-TEST::CHANGE-CLASS.1.4
 CL-TEST::CHANGE-CLASS.1.5
 CL-TEST::CHANGE-CLASS.1.6
 CL-TEST::CHANGE-CLASS.1.7
 CL-TEST::CHANGE-CLASS.1.8
 CL-TEST::CHANGE-CLASS.1.9
 CL-TEST::CHANGE-CLASS.1.10
Test CL-TEST::CHANGE-CLASS.1.11 failed
Form: (CL-TEST::HANDLER-CASE (EVAL (QUOTE (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01B)))) (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS :NONSENSE T))))) (ERROR NIL :EXPECTED-ERROR))
Expected value:
          :EXPECTED-ERROR
Actual value:
          T [Actual value: #<error during printing>

 NIL
 CL-TEST::CHANGE-CLASS.1.12
Test CL-TEST::CHANGE-CLASS.2.1 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)) (CL-TEST::MAP-SLOT-BOUNDP* (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          (NIL NIL)
          T
          NIL
          T
          (NIL NIL)
          (NIL NIL)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-02A 800B6B97>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.2.2 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (CL-TEST::OBJ2 (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) CL-TEST::OBJ3 (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)))) (SETF (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (QUOTE CL-TEST::FOO)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST:NGE-CLASS-CLASS-02B)) (CL-TEST::MAP-SLOT-BOUNDP* (SETF CL-TEST::OBJ3 (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ3 (QUOTE CL-TEST::A)) (CL-TEST::EQT CL-TEST::OBJ CL-TEST::OBJ2) (CL-TEST::EQT CL-TEST::OBJ CL-TEST::OBJ3) (CL-TEST::EQT CL-TEST::OBJ2 CL-TEST::OBJ3)))
Expected value:
          (T NIL)
          CL-TEST::FOO
          CL-TEST::FOO
          T
          NIL
          T
          (T NIL)
          (T NIL)
          CL-TEST::FOO
          CL-TEST::FOO
          CL-TEST::FOO
          NIL
          NIL
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-02A 800B6B97>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.2.3 failed
Form: (LET ((CL-TESTTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (CL-TEST::OBJ2 (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)))) (SETF (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) 1 (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)) 16) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (PROGN (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::B)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST:        (T T)
          T
          NIL
          T
          (T T)
          (T T)
          (T T)
          (T T)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-02A 800B6B97>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.3.1 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03B))) (CL-TEST::OBJ2 (MAKE-INSTANCE CL-TEST::NEW-CLASS)) CL-TEST::OBJ3) (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::B)) (VALUES (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03B)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::EQT (SETQ CL-TEST::OBJ3 (MAKE-INSTANCE CL-TEST::NEW-CLASOBJ) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ3 (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          T
          NIL
          T
          T
          NIL
          (NIL NIL)
          (NIL NIL)
          (NIL NIL)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-03B 800B3297>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.3.2 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03A) :A 1)) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03B))) (CL-TEST::OBJ2 (MAKE-INSTANCE CL-TEST::NEW-CLASS)) CL-TEST::OBJ3) (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::OBJ2 (QUOTE CL-TEST::B)) 17) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B)::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03B)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::EQT (SETQ CL-TEST::OBJ3 (MAKE-INSTANCE CL-TEST::NEW-CLASS)) CL-TEST::OBJ) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ3 (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::OBJ2 (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::OBJ3 (QUOTE CL-TEST::B))))
Expected value:
          (NIL T)
          T
          NIL
          T
          T
          NIL
          (NIL T)
          (NIL T)
          (NIL T)
          17
          17
          17
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-03B 800B3297>.> [Actual value CL-TEST::CHANGE-CLASS.4.1
 CL-TEST::CHANGE-CLASS.4.2
 CL-TEST::CHANGE-CLASS.4.3
 CL-TEST::CHANGE-CLASS.4.4
 CL-TEST::CHANGE-CLASS.4.5
 CL-TEST::CHANGE-CLASS.5
 CL-TEST::CHANGE-CLASS.6.1
 CL-TEST::CHANGE-CLASS.6.2
 CL-TEST::CHANGE-CLASS.7.1
 CL-TEST::CHANGE-CLASS.7.2
 CL-TEST::CHANGE-CLASS.7.3
 CL-TEST::CHANGE-CLASS.7.4
 CL-TEST::CHANGE-CLASS.7.5
 CL-TEST::CHANGE-CLASS.7.6
 CL-TEST::CHANGE-CLASS.8.1
 CL-TEST::CHANGE-CLASS.8.2
 CL-TEST::CHANGE-CLASS.8.3
Test CL-TEST::CHANGE-CLASS.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (CHANGE-CLASS) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function CHANGE-CLASS 3A6497C>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (CHANGE-CLASS (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function CHANGE-CLASS 3A6497C>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01B)))) (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS :C2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01B)))) (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS (QUOTE (CL-TEST::NONSENSE)) (QUOTE CL-TEST::A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.5 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST:*MINI-UNIVERSE* CL-TEST::FOR CLASS = (CLASS-OF CL-TEST::E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (CL-TEST::HANDLER-CASE (PROGN (CHANGE-CLASS (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A)) CLASS) T) (ERROR NIL NIL))) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.6 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST:*MINI-UNIVERSE* CL-TEST::FOR CLASS = (CLASS-OF CL-TEST::E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (CL-TEST::HANDLER-CASE (PROGN (CHANGE-CLASS CL-TEST::E (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) T) (ERROR NIL NIL))) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.1 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UIFDC-CLASS-01A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::UIFDC-CLASS-01B))) (CL-TEST::*UIFDC-01-OBJ* CL-TEST::OBJ)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          (NIL NIL)
          T
          T
          (NIL NIL)
Actual value:
          #<Type-Error 81A4BE07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.2 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UIFDC-CLASS-01A) :A 1)) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::UIFDC-CLASS-01B))) (CL-TEST::*UIFDC-01-OBJ* CL-TEST::OBJ)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          (T NIL)
          T
          T
          (NIL T)
          1
Actual value:
          #<Type-Error 81A66897> [Actual value: #<error during rinting>

 NIL
Test CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.3 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UIFDC-CLASS-01A) :B 1)) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::UIFDC-CLASS-01B))) (CL-TEST::*UIFDC-01-OBJ* CL-TEST::OBJ)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A))))
Expected value:
          (NIL T)
          T
          T
          (T NIL)
          1
Actual value:
          #<Type-Error 81A82B07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.4 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UIFDC-CLASS-01A) :A 1 :B 2)) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::UIFDC-CLASS-01B))) (CL-TEST::*UIFDC-01-OBJ* CL-TEST::OBJ)) (T::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          (T T)
          T
          T
          (T T)
          2
          1
Actual value:
          #<Type-Error 81AA0A37> [Actual value: #<error during printing>

 NIL
 CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.5
 CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.6
 CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.7
 CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.8
 CL-TEST::SLOT-BOUNDP.1
 CL-TEST::SLOT-BOUNDP.2
 CL-TEST::SLOT-BOUNDP.3
 CL-TEST::SLOT-BOUNDP.4
 CL-TEST::SLOT-BOUNDP.5
 CL-TEST::SLOT-BOUNDP.ORDER.1
 CL-TEST::SLOT-BOUNDP.ERROR.1
 CL-TEST::SLOT-BOUNDP.ERROR.2
 CL-TEST::SLOT-BOUNDP.ERROR.3
 CL-TEST::SLOT-BOUNDP.ERROR.4
Test CL-TEST::SLOT-BOUNDP.ERROR.5 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST:*MINI-UNIVERSE* CL-TEST::FOR CLASS = (CLASS-OF CL-TEST::E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (CL-TEST::HANDLER-CASE (PROGN (SLOT-BOUNDP CL-TEST::E (QUOTE CL-TEST::FOO)) T) (ERROR NIL NIL))) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-EXISTS-P.1
 CL-TEST::SLOT-EXISTS-P.2
 CL-TEST::SLOT-EXISTS-P.3
 CL-TEST::SLOT-EXISTS-P.4
 CL-TEST::SLOT-EXISTS-P.5
 CL-TEST::SLOT-EXISTS-P.6
 CL-TEST::SLOT-EXISTS-P.7
Test CL-TEST::SLOT-EXISTS-P.8 failed
Form: (LET ((CL-TEST::SLOT-NAME (GENSYM))) (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::X) (NOT (SLOT-EXISTS-P CL-TEST::X CL-TEST::SLOT-NAME))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function SYSTEM.CLOSETTE:SLOT-EXISTS-P-USING-CLASS 3A5F15C>.
Dispatching on class #<Structure-Class 800048B7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-EXISTS-P.9
 CL-TEST::SLOT-EXISTS-P.10
Test CL-TEST::SLOT-EXISTS-P.11 failed
Form: (LET ((CL-TEST::OBJ (CL-TEST::MAKE-SLOT-EXISTS-P-STRUCT-01))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::Z NIL))))
Expected value:
          (T T T NIL NIL)
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function SYSTEM.CLOSETTE:SLOT-EXISTS-P-USING-CLASS 3A5F15C>.
Dispatching on class #<Structure-Class 81B8B527>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-EXISTS-P.12 failed
Form: (LET ((CL-TEST::OBJ (CL-TEST::MAKE-SLOT-EXISTS-P-STRUCT-01 :A 1 :B 2 :C 3))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::Z NIL))))
Expected value:
          (T T T NIL NIL)
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function SYSTEM.CLOSETTE:SLOT-EXISTS-P-USING-CLASS 3A5F15C>.
Dispatching on class #<Structure-Class 81B8B527>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-EXISTS-P.13 failed
Form: (LET ((CL-TEST::OBJ (CL-TEST::MAKE-SLOT-EXISTS-P-STRUCT-02))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::Z NIL))))
Expected value:
          (T T T T T NIL NIL NIL)
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function SYSTEM.CLOSETTE:SLOT-EXISTS-P-USING-CLASS 3A5F15C>.
Dispatching on class #<Structure-Class 81BC5167>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-EXISTS-P.14 failed
Form: (LET ((CL-TEST::OBJ (CL-TEST::MAKE-SLOT-EXISTS-P-STRUCT-02 :A 1 :B 3 :E 5))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::Z NIL))))
Expected value:
          (T T T T T NIL NIL NIL)
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function SYSTEM.CLOSETTE:SLOT-EXISTS-P-USING-CLASS 3A5F15C>.
Dispatching on class #<Structure-Class 81BC5167>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-EXISTS-P.15
 CL-TEST::SLOT-EXISTS-P.16
 CL-TEST::SLOT-EXISTS-P.ORDER.1
 CL-TEST::SLOT-EXISTS-P.ORDER.2
 CL-TEST::SLOT-EXISTS-P.ORDER.3
 CL-TEST::SLOT-EXISTS-P.ERROR.1
 CL-TEST::SLOT-EXISTS-P.ERROR.2
Test CL-TEST::SLOT-EXISTS-P.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SLOT-EXISTS-P (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-EXISTS-P-CLASS-01))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-EXISTS-P-CLASS-01 800B6DF7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-EXISTS-P.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SLOT-EXISTS-P (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-EXISTS-P-CLASS-01)) (QUOTE CL-TEST::A) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-EXISTS-P-CLASS-01 800B6DF7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::SLOT-NAME CL-TEST::IN (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) UNLESS (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))))) (AND (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (SLOT-MAKUNBOUND CL-TEST::OBJ CL-TEST::SLOT-NAME)) (LIST CL-TEST::OBJ)) (NOT (SLOT-BOUNDP CL-TEST::OBJ CL-TEST::SLOT-NAME)))) CL-TEST::COLLECT CL-TEST::SLOT-NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B1F07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::SLOT-NAME CL-TEST::IN (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) CL-TEST::FOR SLOT-VALUE CL-TEST::IN (QUOTE (T T T 10 T (QUOTE (CL-TEST::A)))) UNLESS (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))))) (SETF (SLOT-VALUE CL-TEST::OBJ CL-TEST::SLOT-NAME) SLOT-VALUE) (AND (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (SLOT-MAKUNBOUND CL-TEST::OBJ CL-TEST::SLOT-NAME)) (LIST CL-TEST::OBJ)) (NOT (SLOT-BOUNDP CL-TEST::OBJ CL-TEST::SLOT-NAME)))) CL-TEST::COLLECT CL-TEST::SLOT-NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B1F07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.ORDER.1 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (CL-TEST::EQT (SLOT-MAKUNBOUND (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::OBJ) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::A))) CL-TEST::OBJ) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          T
          2
          1
          2
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B1F07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.ORDER.2 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (SETF (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) T) (VALUES (CL-TEST::EQT (SLOT-MAKUNBOUND (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::OBJ) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::A))) CL-TEST::OBJ) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          T
          2
          1
          2
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B1F07>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-MAKUNBOUND.ERROR.1
Test CL-TEST::SLOT-MAKUNBOUND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SLOT-MAKUNBOUND (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B1F07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SLOT-MAKUNBOUND (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01)) (QUOTE CL-TEST::A) NIL) PROGRAM-ERROR)
Expece:
          T
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B1F07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.ERROR.4 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST:*MINI-UNIVERSE* CL-TEST::FOR CLASS = (CLASS-OF CL-TEST::E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (CL-TEST::HANDLER-CASE (PROGN (SLOT-MAKUNBOUND CL-TEST::E (QUOTE CL-TEST::FOO)) T) (ERROR NIL NIL))) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-VALUE.1
Test CL-TEST::SLOT-VALUE.2 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-VALUE-CLASS-02))) (CL-TEST::SLOT-NAMES CL-TEST::*SLOT-VALUE-TEST-SLOT-NAMES*) (CL-TEST::SLOT-VALUES CL-TEST::*SLOT-VALUE-TEST-SLOT-VALUES*))(LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::SLOT-NAMES CL-TEST::FOR CL-TEST::VAL CL-TEST::IN CL-TEST::SLOT-VALUES UNLESS (AND (EQUAL (MULTIPLE-VALUE-LIST (SETF (SLOT-VALUE CL-TEST::OBJ CL-TEST::NAME) CL-TEST::VAL)) (LIST CL-TEST::VAL)) (EQUAL (MULTIPLE-VALUE-LIST (SLOT-VALUE CL-TEST::OBJ CL-TEST::NAME)) (LIST CL-TEST::VAL))) CL-TEST::COLLECT CL-TEST::NAME))
Expected value:
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-VALUE-CLASS-02 800B3337>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-VALUE.ORDER.1
 CL-TEST::SLOT-VALUE.ORDER.2
 CL-TEST::SLOT-VALUE.ERROR.1
 CL-TEST::SLOT-VALUE.ERROR.2
 CL-TEST::SLOT-VALUE.ERROR.3
 CL-TEST::SLOT-VALUE.ERROR.4
Test CL-TEST::SLOT-VALUE.ERROR.5 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS))) (CL-TEST::SLOT-NAME (GENSYM))) (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::E) (LET ((CLASS (CLASS-OF CL-TEST::E))) (OR (NOT (EQ (CLASS-OF CLASS) BUILT-IN-CLASS)) (CL-TEST::HANDLER-CASE (PROGN (SLOT-VALUE CL-TEST::E CL-TEST::SLOT-NAME) NIL) (ERROR NIL T))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-VALUE.ERROR.6 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS))) (CL-TEST::SLOT-NAME (GENSYM))) (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::E) (LET ((CLASS (CLASS-OF CL-TEST::E))) (OR (NOT (EQ (CLASS-OF CLASS) BUILT-IN-CLASS)) (CL-TEST::HANDLER-CASE (SETF (SLOT-VALUE CL-TEST::E CL-TEST::SLOT-NAME) NIL) (ERROR NIL T))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::METHOD-QUALIFIERS.1
 CL-TEST::METHOD-QUALIFIERS.2
 L-TEST::METHOD-QUALIFIERS.3
 CL-TEST::METHOD-QUALIFIERS.4
 CL-TEST::METHOD-QUALIFIERS.ERROR.1
 CL-TEST::METHOD-QUALIFIERS.ERROR.2
 CL-TEST::NO-APPLICABLE-METHOD.1
 CL-TEST::NO-NEXT-METHOD.1
 CL-TEST::NO-NEXT-METHOD.2
Test CL-TEST::REMOVE-METHOD.1 failed
Form: (AND (CL-TEST::EQT (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::*REMOVE-METH-GF-02-METHOD-T*) CL-TEST::*REMOVE-METH-GF-01*) (CL-TEST::REMOVE-METH-GF-01 :GOOD))
Expected value:
          :GOOD
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.2 failed
Form: (LET (CL-TEST::METH) (VALUES (CL-TEST::REMOVE-METH-GF-01 10) (PROGN (SETF CL-TEST::METH (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1+ CL-TEST::X))))) NIL) (CL-TEST::REMOVE-METH-GF-01 10) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH)) (CL-TEST::REMOVE-METH-GF-01 10)))
Expected value:
          10
          NIL
          11
          T
          10
Actual val   10 [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.3 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X SYMBOL)) (LIST CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))))
Expected value:
          (19 CL-TEST::A)
          (19 (CL-TEST::A))
          (20 (CL-TEST::A))
          T
          (20 CL-TEST::A)
          T
          (19 CL-TEST::A)
Actual value:
          (19 CL-TEST::A) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.4 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X SYMBOL)) (LIST CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))))
Expected value:
          (19 CL-TEST::A)
          (19 (CL-TEST::A))
          (20 (CL-TEST::A))
          T
          (19 (CL-TEST::A))
          T
          (19 CL-TEST::A)
Actual value:
          (19 CL-TEST::A) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.5 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1- CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (CL-TEST::EQT CL-TESTVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))))
Expected value:
          (10 20.0)
          (9 20.0)
          (9 21.0)
          T
          (11 21.0)
          T
          (10 20.0)
Actual value:
          (10 20.0) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.6 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1- CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (CL-TEST:::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))))
Expected value:
          (10 20.0)
          (9 20.0)
          (9 21.0)
          T
          (9 20.0)
          T
          (10 20.0)
Actual value:
          (10 20.0) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.7 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1- CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (CL-TEST::EQT CL-TEST::*REMOVE-METCL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))))
Expected value:
          (10 20.0)
          (11 21.0)
          (9 21.0)
          T
          (9 20.0)
          T
          (10 20.0)
Actual value:
          (10 20.0) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.8 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1- CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL (QUOTE (10 20.0)))))
Expected value:
          (10 20.0)
          (11 21.0)
          (9 21.0)
          T
          (11 21.0)
          T
          (10 20.0)
Actual value:
          (10 20.0) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.9 failed
Form: (LET (CL-TEST::METH (CL-TEST::*RMGF-03-VAR* 0)) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A))) (PROGN (SETF CL-TEST::METH (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-03 :BEFORE ((CL-TEST::X NUMBER)) (INCF CL-TEST::*RMGF-03-VAR*))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-03* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-03* CL-TEST::METH)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))))
Expected value:
          ((0 5) (0 CL-TEST::A))
          ((1 5) (1 CL-TEST::A))
          T
          ((1 5) (1 CL-TEST::A))
Actual value:
          ((0 5) (0 CL-TEST::A)) [Actual value: #<error during printing>

 NIL
Test C) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A))) (PROGN (SETF CL-TEST::METH (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-03 :AFTER ((CL-TEST::X NUMBER)) (INCF CL-TEST::*RMGF-03-VAR*))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-03* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-03* CL-TEST::METH)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))))
Expected value:
          ((0 5) (0 CL-TEST::A))
          ((0 5) (1 CL-TEST::A))
          T
          ((1 5) (1 CL-TEST::A))
Actual value:
          ((0 5) (0 CL-TEST::A)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.11 failed
Form: (LET (CL-TEST::METH (CL-TEST::*RMGF-03-VAR* 0)) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A))) (PROGN (SETF CL-TEST::METH (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-03 :AROUND ((CL-TEST::X NUMBER)) (INCF CL-TEST::*RMGF-03-VAR*) (PROG1 (CALL-NEXT-METHOD) (DEEMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-03* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-03* CL-TEST::METH)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))))
Expected value:
          ((0 5) (0 CL-TEST::A))
          ((1 5) (0 CL-TEST::A))
          T
          ((0 5) (0 CL-TEST::A))
Actual value:
          ((0 5) (0 CL-TEST::A)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-INSTANCE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function MAKE-INSTANCE 3A624DC>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-INSTANCE (QUOTE CL-TEST::MAKE-INSTANCE-CLASS-01) :A) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERRSE (PROGN (EVAL (QUOTE (MAKE-INSTANCE (QUOTE CL-TEST::MAKE-INSTANCE-CLASS-01) :Z 1))) T) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.4 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (MAKE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::MAKE-INSTANCE-CLASS-01)) :Z 1))) T) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LET NIL (MAKE-INSTANCE) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function MAKE-INSTANCE 3A624DC>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-INSTANCE.ERROR.6
 CL-TEST::MAKE-INSTANCE.1
 CL-TEST::MAKE-INSTANCE.2
 CL-TEST::MAKE-INSTANCE.ORDER.1
 CL-TEST::MAKE-INSTANCE.ORDER.2
 CL-TEST::MAKE-INSTANCE.ORDER.3
Test CL-TEST::MAKE-INSTANCES-OBSOLETE.1 failed
Form: (LET* ((CL-TEST::CLASS-DESIGNATOR (QUOTE CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01)) (CLASS (FIND-CLASS CL-TEST::CLASS-DESIGNATOR)) (CL-TEST::OBJ (MAKE-INSTANCE CLASS :A (QUOTE CL-TEST::X) :B (QUOTE CL-TEST::Y) :C (QUOTE CL-TEST::Z) :D 17))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (LET ((CL-TEST::VAL (MAKE-INSTANCES-OBSOLETE CLASS))) (OR (CL-TEST::EQT CL-TEST::VAL CL-TEST::CLASS-DESIGNATOR) (CL-TEST::EQT CL-TEST::VAL CLASS))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          T
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 17)
          T
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 17)
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01 C00B63F7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCES-OBSOLETE.2 failed
Form: (LET* ((CL-TEST::CLASS-DESIGNATOR (QUOTE CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01)) (CLASS (FIND-CLASS CL-TEST::CLASS-DESIGNATOR)) (CL-TEST::OBJ (MAKE-INSTANCE CLASS :A (QUOTE CL-TEST::X) :B (QUOTE CL-TEST::Y) :C (QUOTE CL-TEST::Z) :D 17))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (LET ((CL-TEST::VAL (MAKE-INSTANCES-OBSOLETE CL-TEST::CLASS-DESIGNATOR))) (OR (CL-TEST::EQT CL-TEST::VAL CL-TEST::CLASS-DESIGNATOR) (CL-TEST::EQT CL-TEST::VAL CLASS))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          T
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 17)
          T
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 17)
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01 C00B63F7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAANCES-OBSOLETE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-INSTANCES-OBSOLETE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAKE-INSTANCES-OBSOLETE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCES-OBSOLETE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-INSTANCES-OBSOLETE (FIND-CLASS (QUOTE CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01)) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAKE-INSTANCES-OBSOLETE> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SLOTS.1
 CL-TEST::WITH-SLOTS.2
 CL-TEST::WITH-SLOTS.3
 CL-TEST::WITH-SLOTS.4
 CL-TEST::WITH-SLOTS.5
 CL-TEST::WITH-SLOTS.6
 CL-TEST::WITH-SLOTS.7
 CL-TEST::WITH-SLOTS.8
Test CL-TEST::WITH-SLOTS.9 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::WITH-SLOTS-CLASS-01) :A (QUOTE CL-TEST::X) :B (QUOTE CL-TEST::Y) :C (QUOTE CL-TEST::Z)))) (WITH-SLOTS (CL-TEST::A CL-TEST::B CL-TEST::C) CL-TEST::OBJ (VALUES (SETQ CL-TESTA (QUOTE CL-TEST::P)) (SETQ CL-TEST::B (QUOTE CL-TEST::Q)) (SETQ CL-TEST::C (QUOTE CL-TEST::R)) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))))
Expected value:
          CL-TEST::P
          CL-TEST::Q
          CL-TEST::R
          (CL-TEST::P CL-TEST::Q CL-TEST::R)
Actual value:
          #<Type-Error C179CBC7> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SLOTS.10
 CL-TEST::WITH-SLOTS.11
Test CL-TEST::WITH-SLOTS.12 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::WITH-SLOTS-CLASS-01) :A (QUOTE CL-TEST::X) :B (QUOTE CL-TEST::Y) :C (QUOTE CL-TEST::Z)))) (WITH-SLOTS ((CL-TEST::A2 CL-TEST::A) (CL-TEST::B2 CL-TEST::B) (CL-TEST::C2 CL-TEST::C)) CL-TEST::OBJ (VALUES (SETQ CL-TEST::A2 (QUOTE CL-TEST::P)) (SETQ CL-TEST::B2 (QUOTE CL-TEST::Q)) (SETQ CL-TEST::C2 (QUOTE CL-TEST::R)) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))))
Expected value:
          CL-TEST::P
          CL-TEST::Q
          CL-TEST::R
        -TEST::P CL-TEST::Q CL-TEST::R)
Actual value:
          #<Type-Error C17BB797> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SLOTS.13
 CL-TEST::WITH-SLOTS.14
 CL-TEST::WITH-SLOTS.15
 CL-TEST::WITH-SLOTS.16
 CL-TEST::WITH-SLOTS.17
Test CL-TEST::WITH-SLOTS.18 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::WITH-SLOTS-CLASS-01)))) (WITH-SLOTS (CL-TEST::A CL-TEST::B CL-TEST::C) CL-TEST::OBJ (VALUES CL-TEST::A CL-TEST::B CL-TEST::C)))
Expected value:
          CL-TEST::MISSING
          CL-TEST::MISSING
          CL-TEST::MISSING
Actual value:
          #<Simple-Error The slot CL-TEST::A is unbound in the object #<Cl-Test::With-Slots-Class-01 C17E6D57>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SLOTS.19
 CL-TEST::WITH-SLOTS.20
 CL-TEST::WITH-SLOTS.21
Test CL-TEST::DEFGENERIC.ERROR.1 failed
Form: (LET* ((CL-TEST::NAME (QUOTE CL-TEST::DEFGENERIC-TESTFN-01)) (CL-TEST::FN (SYMBOL-FUNCTION CL-TEST::NAME))) (IF (NOT (TYPEP CL-TEST::FN (QUOTE GENERIC-FUNCTION))) (CL-TESTE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL))) :BAD) (PROGRAM-ERROR NIL :GOOD)) :GOOD))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error CL-TEST::DEFGENERIC-TESTFN-01 is already defined as a non-generic function or macro.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.2 failed
Form: (LET* ((CL-TEST::NAME (QUOTE CL-TEST::DEFGENERIC-TESTMACRO-02))) (CL-TEST::HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL))) :BAD) (PROGRAM-ERROR NIL :GOOD)))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error CL-TEST::DEFGENERIC-TESTMACRO-02 is already defined as a non-generic function or macro.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-SPECIAL-OPERATOR-SYMBOLS* CL-TEST::FOR CL-TEST::RESULT = (CL-TEST::HANDLER-CASE (PROGN (EVALSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL))) T) (PROGRAM-ERROR NIL NIL)) WHEN CL-TEST::RESULT CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error BLOCK names a special operator> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.4 (CL-TEST::X CL-TEST::Y) (:ARGUMENT-PRECEDENCE-ORDER CL-TEST::X CL-TEST::Y CL-TEST::X)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ARGUMENT-PRECEDENCE-ORDER. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.5 (CL-TEST::X) (:DOCUMENTATION "some documentation") (:DOCUMENTATION "illegally repeated documentation")) PROGRAM-ERROR)
Expected value:
          T
Actu          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.6 (CL-TEST::X) (CL-TEST::UNKNOWN-OPTION NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument CL-TEST::UNKNOWN-OPTION. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.7 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.7 (CL-TEST::X CL-TEST::Y) (:METHOD ((CL-TEST::X T)) CL-TEST::X)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.8 (CL-TEST::X CL-TEST::Y) (:ARGUMENT-PRECEDENCE-ORDER CL-TEST::X)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ARGUMENT-PRECEDENCE-ORDER. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.9 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.9 (CL-TEST::X) (:METHOD ((CL-TEST::X T) (CL-TEST::Y T)) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.10 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.10 (CL-TEST::X &OPTIONAL CL-TEST::Y) (:METHOD ((CL-TEST::X T)) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.11 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.11 (CL-TEST::X &OPTIONAL CL-TEST::Y) (:METHOD (CL-TEST::X &OPTIONAL CL-TEST::Y CL-TEST::Z) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.12 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.12 (CL-TEST::X &REST CL-TEST::Y) (:METHOD (CL-TEST::X) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.13 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.13 (CL-TEST::X) (:METHOD (CL-TEST::X &REST CL-TEST::Y) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
        :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.14 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.14 (CL-TEST::X &KEY) (:METHOD (CL-TEST::X) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.15 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.15 (CL-TEST::X &KEY CL-TEST::Y) (:METHOD (CL-TEST::X) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.16 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.16 (CL-TEST::X) (:METHOD (CL-TEST::X &KEY) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.17 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.17 (CL-TEST::X) (:METHOD (CL-TEST::X &KEY CL-TEST::FOO) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.18 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.18 (CL-TEST::X &KEY CL-TEST::FOO) (:METHOD (CL-TEST::X &KEY) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.19 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.19 (CL-TEST::X &KEY CL-TEST::FOO) (:METHOD (CL-TEST::X &KEY CL-TEST::BAR) T)))) :BAD) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.20 failed
Form(CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::FN (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.20 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))) (FUNCALL CL-TEST::FN 1 :BAR (QUOTE CL-TEST::A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Type-Error C19960D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.21 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::FN (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.21 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO &ALLOW-OTHER-KEYS) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Type-Error C19AEA17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.22 : (PROGN (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.22 (CL-TEST::X)) (DEFMETHOD CL-TEST::DEFGENERIC-ERROR-FN.22 ((CL-TEST::X T)) NIL) (CL-TEST::HANDLER-CASE (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.22 (CL-TEST::X CL-TEST::Y)))) (ERROR NIL :GOOD)))
Expected value:
          :GOOD
Actual value:
          #<Standard-Generic-Function CL-TEST::DEFGENERIC-ERROR-FN.22 3B4ED6C> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.1 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.1 (CL-TEST::X CL-TEST::Y CL-TEST::Z) (:METHOD ((CL-TEST::X T) (CL-TEST::Y T) (CL-TEST::Z T)) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (APPLY CL-TEST::FN 1 2 3 NIL) (APPLY CL-TEST::FN (LIST 4 5 6)) (MAPCAR CL-TEST::FN (QUOTE (1 2)) (QUOTE)) (CL-TEST::DEFGENERIC.FUN.1 (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))))
Expected value:
          T
          T
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (1 2 3)
          (4 5 6)
          ((1 3 5) (2 4 6))
          (CL-TEST::D CL-TEST::E CL-TEST::F)
Actual value:
          #<Type-Error C19D5EB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.2 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.2 (CL-TEST::X CL-TEST::Y CL-TEST::Z) (:DOCUMENTATION "boo!") (:METHOD ((CL-TEST::X T) (CL-TEST::Y T) (CL-TEST::Z T)) (VECTOR CL-TEST::X CL-TEST::Y CL-TEST::Z))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::DEFGENERIC.FUN.2 (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F)) (LET ((CL-TEST::DOC (DOCUMENTATION CL-TEST::FT::DOC) (CL-TEST::STRING=T CL-TEST::DOC "boo!")))) (LET ((CL-TEST::DOC (DOCUMENTATION CL-TEST::FN (QUOTE FUNCTION)))) (OR (NOT CL-TEST::DOC) (AND (STRINGP CL-TEST::DOC) (CL-TEST::STRING=T CL-TEST::DOC "boo!")))) (SETF (DOCUMENTATION CL-TEST::FN T) "foo") (LET ((CL-TEST::DOC (DOCUMENTATION CL-TEST::FN T))) (OR (NOT CL-TEST::DOC) (AND (STRINGP CL-TEST::DOC) (CL-TEST::STRING=T CL-TEST::DOC "foo")))) (SETF (DOCUMENTATION CL-TEST::FN (QUOTE FUNCTION)) "bar") (LET ((CL-TEST::DOC (DOCUMENTATION CL-TEST::FN T))) (OR (NOT CL-TEST::DOC) (AND (STRINGP CL-TEST::DOC) (CL-TEST::STRING=T CL-TEST::DOC "bar"))))))
Expected value:
          T
          T
          #(CL-TEST::A CL-TEST::B CL-TEST::C)
          #(CL-TEST::D CL-TEST::E CL-TEST::F)
          T
          T
          "foo"
          T
          "bar"
          T
Actual value:
          #<Type-Error C19F55C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.3 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.3 (CL- CL-TEST::Y)) (:METHOD ((CL-TEST::X SYMBOL) (CL-TEST::Y T)) (LIST CL-TEST::Y CL-TEST::X))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::FN 1 (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::B) 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))))
Expected value:
          T
          T
          (1 CL-TEST::A)
          (2 CL-TEST::B)
          (CL-TEST::B CL-TEST::A)
Actual value:
          #<Type-Error C1A26287> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.4 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.4 (CL-TEST::X CL-TEST::Y) (:ARGUMENT-PRECEDENCE-ORDER CL-TEST::Y CL-TEST::X) (:METHOD ((CL-TEST::X T) (CL-TEST::Y SYMBOL)) (LIST CL-TEST::X CL-TEST::Y)) (:METHOD ((CL-TEST::X SYMBOL) (CL-TEST::Y T)) (LIST CL-TEST::Y CL-TEST::X))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::FN 1 (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::B) 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))))
Expected value:
          T
          T
          (1 CL-TEST::A)
          (2 CL-TEST::B)
          (CL-TEST::A CL-TEST::B)
Actual value:
          #<Simple-Error Unknown &KEY argument :ARGUMENT-PRECEDENCE-ORDER. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.5 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.5 NIL (:METHOD NIL (VALUES))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN)) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.5)) (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN NIL))))
Expected value:
          T
          T
                 #<Type-Error C1A5B0E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.6 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.6 NIL (:METHOD NIL (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN)) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.6)) (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN NIL))))
Expected value:
          T
          T
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Type-Error C1A700C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.7 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.7 NIL (:METHOD NIL (RETURN-FROM CL-TEST::DEFGENERIC.FUN.7 (QUOTE C (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN)) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.7)) (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN NIL))))
Expected value:
          T
          T
          (CL-TEST::A)
          (CL-TEST::A)
          (CL-TEST::A)
Actual value:
          #<Type-Error C1A88B77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.8 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.8 (CL-TEST::X &OPTIONAL CL-TEST::Y CL-TEST::Z) (:METHOD ((CL-TEST::X NUMBER) &OPTIONAL CL-TEST::Y CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) (:METHOD ((CL-TEST::P SYMBOL) &OPTIONAL CL-TEST::Q CL-TEST::R) (LIST CL-TEST::R CL-TEST::Q CL-TEST::P))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN 1)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN 1 2)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN 1 2 3)) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.8 (QUOTE CL-TEST::A))) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.8 (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.8 (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN (QUOTE (CL-TEST::X CL-TEST::Y CL-TEST::Z))))))
Expected value:
          T
          T
          ((1 NIL NIL))
          ((1 2 NIL))
          ((1 2 3))
          ((NIL NIL CL-TEST::A))
          ((NIL CL-TEST::B CL-TEST::A))
          ((CL-TEST::C CL-TEST::B CL-TEST::A))
          ((CL-TEST::Z CL-TEST::Y CL-TEST::X))
Actual value:
          #<Type-Error C1AA31B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.9 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.9 (CL-TEST::X &OPTIONAL CL-TEST::Y CL-TEST::Z) (:METHOD ) (CL-TEST::Z 20)) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) (:METHOD ((CL-TEST::P SYMBOL) &OPTIONAL (CL-TEST::Q (QUOTE CL-TEST::S)) (CL-TEST::R (QUOTE T))) (LIST CL-TEST::R CL-TEST::Q CL-TEST::P))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 2) (FUNCALL CL-TEST::FN 1 2 3) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))))
Expected value:
          (1 10 20)
          (1 2 20)
          (1 2 3)
          (T CL-TEST::S CL-TEST::A)
          (T CL-TEST::B CL-TEST::A)
          (CL-TEST::C CL-TEST::B CL-TEST::A)
Actual value:
          #<Type-Error C1ACDFE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.10 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.10 (CL-TEST::X &REST CL-TEST::Y) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO))))))) (DECLCL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A)) (CL-TEST::DEFGENERIC.FUN.10 CL-TEST::5/3 :FOO (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y)) (CL-TEST::DEFGENERIC.FUN.10 10 :BAR T :ALLOW-OTHER-KEYS T) (CL-TEST::DEFGENERIC.FUN.10 20 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE CL-TEST::X))))
Expected value:
          (1 NIL)
          (1 CL-TEST::A)
          (CL-TEST::5/3 CL-TEST::X)
          (10 NIL)
          (20 CL-TEST::X)
Actual value:
          #<Type-Error C1AEC977> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.11 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.11 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A)) (CL-TEST::DEFGENERIC.FUN.11 CL-TEST::5/3 :FOO (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y)) (CL-TEST::DEFGENERIC.FUN.11 11 :BAR T :ALLOW-OTHER-KEYS T) (CL-TEST::DEFGENTE CL-TEST::X))))
Expected value:
          (1 NIL)
          (1 CL-TEST::A)
          (CL-TEST::5/3 CL-TEST::X)
          (11 NIL)
          (20 CL-TEST::X)
Actual value:
          #<Type-Error C1B06517> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.12 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.12 (CL-TEST::X &KEY CL-TEST::FOO CL-TEST::BAR CL-TEST::BAZ) (:METHOD ((CL-TEST::X NUMBER) &REST CL-TEST::Y) (LIST CL-TEST::X CL-TEST::Y))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A)) (CL-TEST::DEFGENERIC.FUN.12 CL-TEST::5/3 :FOO (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y) :BAR (QUOTE CL-TEST::Z)) (CL-TEST::DEFGENERIC.FUN.12 11 :ZZZ T :ALLOW-OTHER-KEYS T) (CL-TEST::DEFGENERIC.FUN.12 20 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE CL-TEST::X))))
Expected value:
          (1 NIL)
          (1 (:FOO CL-TEST::A))
          (CL-TEST::5/3 (:FOO CL-TEST::X :FOO CL-TEST::Y :BAR CL-TEST::Z))
         ZZ T :ALLOW-OTHER-KEYS T))
          (20 (:ALLOW-OTHER-KEYS NIL :FOO CL-TEST::X))
Actual value:
          #<Type-Error C1B1FE47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.13 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.13 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B))))
Expected value:
          (1 NIL)
          (CL-TEST::A NIL)
          (1 2)
          (CL-TEST::A CL-TEST::B)
Actual value:
          #<Type-Error C1B3FBC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.14 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.14 (CL-TEST::X &KEY &ALLOW-OTH &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN 1 :FOO 2 :BAR 3) (FUNCALL CL-TEST::FN 1 :BAR 4) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :FOO (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :FOO (QUOTE CL-TEST::C) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN 1 :BAZ 10) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :BAZ 10) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE CL-TEST::B))))
Expected value:
          (1 NIL)
          (CL-TEST::A NIL)
          (1 2)
          (1 2)
          (1 NIL)
          (CL-TEST::A NIL)
          (CL-TEST::A CL-TEST::B)
          (CL-TEST::A CL-TEST::B)
          T::A NIL)
          (1 NIL)
          (CL-TEST::A NIL)
Actual value:
          #<Type-Error C1B598A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.15 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.15 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO &ALLOW-OTHER-KEYS) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN 1 :FOO 2 :BAR 3) (FUNCALL CL-TEST::FN 1 :BAR 4) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :FOO (QUOTE CL-TEST::C) :BAR (QUOTE CL-TEST::B) :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::FN 1 :BAZ 10) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE CL   (1 NIL)
          (CL-TEST::A NIL)
          (1 2)
          (1 2)
          (1 NIL)
          (CL-TEST::A NIL)
          (CL-TEST::A CL-TEST::B)
          (CL-TEST::A CL-TEST::B)
          (1 NIL)
          (1 NIL)
Actual value:
          #<Type-Error C1B84287> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.16 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.16 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY (CL-TEST::FOO (QUOTE CL-TEST::A))) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO NIL) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO NIL) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y))))
Expected value:
          (1 CL-TEST::A)
          (1 NIL)
          (1 2)
          (CL-TEST::X NIL)

Actual value:
          #<Type-Error C1BAAFC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.17 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.17 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY (CL-TEST::FOO (QUOTE CL-TEST::A) CL-TEST::FOO-P)) (LIST CL-TEST::X CL-TEST::FOO (CL-TEST::NOTNOT CL-TEST::FOO-P))) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO NIL) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO NIL) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y))))
Expected value:
          (1 CL-TEST::A NIL)
          (1 NIL T)
          (1 2 T)
          (CL-TEST::X NIL)
          (CL-TEST::X NIL)
          (CL-TEST::X CL-TEST::Y)
Actual value:
          #<Type-Error C1BC8C27> [Actual value: #<error during printing>

 NIL
Test CL-E (DEFGENERIC CL-TEST::DEFGENERIC.FUN.18 (CL-TEST::X &OPTIONAL CL-TEST::Y) (:METHOD ((CL-TEST::X NUMBER) &OPTIONAL (CL-TEST::Y (QUOTE CL-TEST::A))) (LIST CL-TEST::X CL-TEST::Y)) (:METHOD ((CL-TEST::X SYMBOL) &OPTIONAL (CL-TEST::Z NIL CL-TEST::Z-P)) (LIST CL-TEST::X CL-TEST::Z (CL-TEST::NOTNOT CL-TEST::Z-P)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 NIL) (FUNCALL CL-TEST::FN 1 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) NIL) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) (QUOTE CL-TEST::Y))))
Expected value:
          (1 CL-TEST::A)
          (1 NIL)
          (1 2)
          (CL-TEST::X NIL NIL)
          (CL-TEST::X NIL T)
          (CL-TEST::X CL-TEST::Y T)
Actual value:
          #<Type-Error C1BE7E17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.19 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.19 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY ((:BAR C-TEST::A) CL-TEST::FOO-P)) (LIST CL-TEST::X CL-TEST::FOO (CL-TEST::NOTNOT CL-TEST::FOO-P)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :BAR NIL) (FUNCALL CL-TEST::FN 1 :BAR 2)))
Expected value:
          (1 CL-TEST::A NIL)
          (1 NIL T)
          (1 2 T)
Actual value:
          #<Type-Error C1C04897> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.20 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.20 (CL-TEST::X &OPTIONAL CL-TEST::Y CL-TEST::Z) (:METHOD ((CL-TEST::X NUMBER) &OPTIONAL (CL-TEST::Y (1+ CL-TEST::X) CL-TEST::Y-P) (CL-TEST::Z (IF CL-TEST::Y-P (1+ CL-TEST::Y) (+ CL-TEST::X 10)) CL-TEST::Z-P)) (LIST CL-TEST::X CL-TEST::Y (CL-TEST::NOTNOT CL-TEST::Y-P) CL-TEST::Z (CL-TEST::NOTNOT CL-TEST::Z-P)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 5) (FUNCALL CL-TEST::FN 1 5 9)))
Expected value:
          (1 2 NIL 11 NIL)
          (1 5 T 6 Nvalue:
          #<Type-Error C1C194F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.21 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.21 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY (CL-TEST::Y (1+ CL-TEST::X) CL-TEST::Y-P) (CL-TEST::Z (IF CL-TEST::Y-P (1+ CL-TEST::Y) (+ CL-TEST::X 10)) CL-TEST::Z-P)) (LIST CL-TEST::X CL-TEST::Y (CL-TEST::NOTNOT CL-TEST::Y-P) CL-TEST::Z (CL-TEST::NOTNOT CL-TEST::Z-P)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :Y 5) (FUNCALL CL-TEST::FN 1 :Y 5 :Z 9) (FUNCALL CL-TEST::FN 1 :Z 8) (FUNCALL CL-TEST::FN 1 :Z 8 :Y 4)))
Expected value:
          (1 2 NIL 11 NIL)
          (1 5 T 6 NIL)
          (1 5 T 9 T)
          (1 2 NIL 8 T)
          (1 4 T 8 T)
Actual value:
          #<Type-Error C1C314D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.22 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.22 (CL-TEX NUMBER) &KEY ((:ALLOW-OTHER-KEYS CL-TEST::Y))) (LIST CL-TEST::X CL-TEST::Y))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS NIL) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::X) :ALLOW-OTHER-KEYS T :BAR (QUOTE CL-TEST::Y)) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::X) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS T (QUOTE CL-TEST::FOO) (QUOTE CL-TEST::Y) :ALLOW-OTHER-KEYS NIL) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:FOO) (QUOTE CL-TEST::Z))))
Expected value:
          (1 NIL)
          (1 NIL)
          (1 T)
          (1 T)
          (1 T)
          (1 NIL)
          (1 T)
          (1 T)
          (1 T)
Actual value:
          #<Type-Error C1C4B8F7> [Actual value: #<error during printing>

 NIRIC.23 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.23 (CL-TEST::X) (:METHOD ((CL-TEST::X NUMBER) &AUX (CL-TEST::Y (1+ CL-TEST::X))) (LIST CL-TEST::X CL-TEST::Y)) (:METHOD ((CL-TEST::X SYMBOL) &AUX (CL-TEST::Z (LIST CL-TEST::X))) (LIST CL-TEST::X CL-TEST::Z))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A))))
Expected value:
          (1 2)
          (CL-TEST::A (CL-TEST::A))
Actual value:
          #<Type-Error C1C71097> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.24 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.24 (CL-TEST::X) (:METHOD ((CL-TEST::X NUMBER) &AUX (CL-TEST::Y (1+ CL-TEST::X)) (CL-TEST::Z (1+ CL-TEST::Y))) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) (:METHOD ((CL-TEST::X SYMBOL) &AUX (CL-TEST::Y (LIST CL-TEST::X)) (CL-TEST::Z (LIST CL-TEST::X CL-TEST::Y))) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z))))))) (VALUES (FUNCALL CL-TEST::FN 1) (FL-TEST::A))))
Expected value:
          (1 2 3)
          (CL-TEST::A (CL-TEST::A) (CL-TEST::A (CL-TEST::A)))
Actual value:
          #<Type-Error C1C87E97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.25 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.25 (CL-TEST::X &OPTIONAL CL-TEST::Y &KEY) (:METHOD ((CL-TEST::X SYMBOL) &OPTIONAL (CL-TEST::Y (QUOTE CL-TEST::D) CL-TEST::Y-P) &KEY ((:FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y) CL-TEST::BAR-P) &AUX (CL-TEST::Z (LIST CL-TEST::X CL-TEST::Y (CL-TEST::NOTNOT CL-TEST::Y-P) CL-TEST::BAR (CL-TEST::NOTNOT CL-TEST::BAR-P)))) CL-TEST::Z)))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) :FOO (QUOTE CL-TEST::C))))
Expected value:
          (CL-TEST::A CL-TEST::D NIL (CL-TEST::A CL-TEST::D) NIL)
          (CL-TEST::A CL-TEST::B T (CL-TEST::A CL-TEST::Bue:
          #<Type-Error C1C9E857> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.26 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.26 (CL-TEST::X) (DECLARE (OPTIMIZE (SAFETY 3))) (:METHOD ((CL-TEST::X SYMBOL)) CL-TEST::X) (DECLARE (OPTIMIZE (DEBUG 3)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error Unknown &KEY argument DECLARE. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.28 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.28 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X INTEGER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR)) (:METHOD ((CL-TEST::X T) &KEY CL-TEST::BAZ) (LIST CL-TEST::X CL-TEST::BAZ))))))) (DECLARE (TYPE FUNCTION CL-TESTEST::FN 1 :FOO (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN 1 :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN 1 :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN 1 :BAR (QUOTE CL-TEST::B) :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A) :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B) :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN CL-TEST::5/3) (FUNCALL CL-TEST::FN CL-TEST::5/3 :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN CL-TEST::5/3 :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN CL-TEST::5/3 :BAR (QUOTE CL-TEST::B) :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :BAZ (QUOTE CL-TEST::C))))
Expected value:
          (1 NIL)
          (1 CL-TEST::A)
          (1 NIL)
          (1 NIL)
          (1 NIL)
          (1 CL-TEST::A)
          (1 CL-TEST::A)
          (1 CL-TEST::A)
          (CL-TEST::5/3 NIL)
          (CL-TEST:  (CL-TEST::5/3 CL-TEST::B)
          (CL-TEST::X NIL)
          (CL-TEST::X CL-TEST::C)
Actual value:
          #<Type-Error C1CD1027> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.29 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.29 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X CL-TEST::DEFGENERIC.29.CLASS.1) &KEY CL-TEST::FOO) CL-TEST::FOO) (:METHOD ((CL-TEST::X CL-TEST::DEFGENERIC.29.CLASS.2) &KEY CL-TEST::BAR) CL-TEST::BAR)))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (LET ((CL-TEST::X (MAKE-INSTANCE (QUOTE CL-TEST::DEFGENERIC.29.CLASS.3)))) (VALUES (FUNCALL CL-TEST::FN CL-TEST::X) (FUNCALL CL-TEST::FN CL-TEST::X :FOO (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN CL-TEST::X :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN CL-TEST::X :FOO (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN CL-TEST::X :BAR (QUOTE CL-TEST::B) :FOO (QUOTE CL-TEST::A)))))
Expected value:
          NIL
          CL-TEST::A
          NIL
          CL-TEST::A
          CL-T917> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFGENERIC.31
Test CL-TEST::DEFGENERIC.32 failed
Form: (PROGN (DEFGENERIC CL-TEST::DEFGENERIC.FUN.32 (CL-TEST::X) (:METHOD ((CL-TEST::X SYMBOL)) :BAD)) (DEFGENERIC CL-TEST::DEFGENERIC.FUN.32 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) :GOOD)) (CL-TEST::DEFGENERIC.FUN.32 (QUOTE CL-TEST::X)))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.33 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC (SETF CL-TEST::DEFGENERIC.FUN.33) (CL-TEST::X CL-TEST::Y &REST CL-TEST::ARGS) (:METHOD (CL-TEST::X (CL-TEST::Y CONS) &REST CL-TEST::ARGS) (ASSERT (NULL CL-TEST::ARGS)) (SETF (CAR CL-TEST::Y) CL-TEST::X)) (:METHOD (CL-TEST::X (CL-TEST::Y ARRAY) &REST CL-TEST::ARGS) (SETF (APPLY (FUNCTION AREF) CL-TEST::Y CL-TEST::ARGS) CL-TEST::X))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (LET ((CL-TEST::Z (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (LIST (SETF (CL-TEST::DEFGENERIC.FUE CL-TEST::C)) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT NIL))) (LIST (SETF (CL-TEST::DEFGENERIC.FUN.33 CL-TEST::A 5) (QUOTE CL-TEST::D)) CL-TEST::A))))
Expected value:
          (CL-TEST::C (CL-TEST::C CL-TEST::B))
          (CL-TEST::D #(NIL NIL NIL NIL NIL CL-TEST::D NIL NIL NIL NIL))
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.34 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC #:DEFGENERIC.FUN.34 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) (LIST CL-TEST::X :GOOD))))))) (FUNCALL CL-TEST::FN 10))
Expected value:
          (10 :GOOD)
Actual value:
          #<Type-Error C1D6D4D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.35 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.35 (CL-TEST::X) (:METHOD ((CL-TEST::X (EQL (QUOTE CL-TEST::A)))) (DECLARE (OPTIMIZE (SPEED 0))) "FOO" (DECLARE (OPTIMIZE (SAFETY 3))) CL-TEST::X)))))) (DECLARE  CL-TEST::A)) (LET ((METHOD (FIRST (COMPUTE-APPLICABLE-METHODS CL-TEST::FN (QUOTE (CL-TEST::A)))))) (AND METHOD (LET ((CL-TEST::DOC (DOCUMENTATION METHOD T))) (LIST (OR (NULL CL-TEST::DOC) (CL-TEST::EQUALT CL-TEST::DOC "FOO")) (SETF (DOCUMENTATION METHOD T) "BAR") (LET ((CL-TEST::DOC (DOCUMENTATION METHOD T))) (OR (NULL CL-TEST::DOC) (CL-TEST::EQUALT CL-TEST::DOC "BAR")))))))))
Expected value:
          CL-TEST::A
          (T "BAR" T)
Actual value:
          #<Type-Error C1D7B777> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLAT::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME NIL) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-CLASS.4
 CL-TEST::FIND-CLASS.5
 CL-TEST::FIND-CLASS.6
Test CL-TEST::FIND-CLASS.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME T NIL) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLAR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME NIL NIL) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.9 failed
Form: (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (LET ((CL-TEST::RESULT (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME NIL CL-TEST::ENV) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT)))))) (CL-TEST::%M))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.10 failed
Form: (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (LET ((CL-TEST::RESULT (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME T CL-TEST::ENV) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT)))))) (CL-TEST::%M))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-CLASS.11
 CL-TEST::FIND-CLASS.12
 CL-TEST::FIND-CLASS.13
 CL-TEST::FIND-CLASS.14
 CL-TEST::FIND-CLASS.15
 CL-TEST::FIND-CLASS.16
 CL-TEST::FIND-CLASS.17
 CL-TEST::FIND-CLASS.18
 CL-TEST::FIND-CLASS.19
 CL-TEST::FIND-CLASS.20
 CL-TEST::FIND-CLASS.21
Test CL-TEST::FIND-CLASS.22 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::FIND-CLASS-GF-01 (CL-TEST::X) (:METHOD ((CL-TEST::X CL-TEST::FIND-CLASS-CLASS-01)) :GOOD) (:METHOD ((CL-TEST::X T)) NIL))))) (CL-TEST::OBJ (MAKE-INSTANCE CL-TEST::CLASS1))) (ASSERT (TYPEP CL-TEST::FN (QUOTE FUNCTION))) (LOCALLY (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN NIL) (FUNCALL CL-TEST::FN CL-TEST::OBJ) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (FUNCALL CL-TEST::FN NIL) (FUNCALL CL-TEST::FN CL-TEST::OBJ)))))
Expected value:
          NIL
          :GOOD
          NIL
          NIL
          :GOOD
Actual value:
          #<Simple-Error Assertion failed: (TYPEP CL-TEST::FN (QUOTE FUNCTION)).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.23 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-02)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-02 (CL-TEST::FIND-CLASS-CLASS-01) NIL)))) (CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::FIND-CLASS-GF-02 (CL-TEST::X) (:METHOD ((CL-TEST::X CL-TEST::FIND-CLASS-CLASS-01)) 1) (:METHOD ((CL-TEST::X CL-TEST::FIND-CLASS-CLASS-02)) 2) (:METHOD ((CL-TEST::X T)) T))))) (CL-TEST::OBJ1 (MAKE-INSTANCE CL-TEST::CLASS1)) (CL-TEST::OBJ2 (MAKE-INSTANCE CL-TEST::CLASS2))) (ASSERT (TYPEP CL-TE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN NIL) (FUNCALL CL-TEST::FN CL-TEST::OBJ1) (FUNCALL CL-TEST::FN CL-TEST::OBJ2) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (FUNCALL CL-TEST::FN NIL) (FUNCALL CL-TEST::FN CL-TEST::OBJ1) (FUNCALL CL-TEST::FN CL-TEST::OBJ2)))))
Expected value:
          T
          1
          2
          NIL
          T
          1
          2
Actual value:
          #<Simple-Error Assertion failed: (TYPEP CL-TEST::FN (QUOTE FUNCTION)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-CLASS.ERROR.1
 CL-TEST::FIND-CLASS.ERROR.2
 CL-TEST::NEXT-METHOD-P.1
 CL-TEST::NEXT-METHOD-P.2
 CL-TEST::NEXT-METHOD-P.3
 CL-TEST::NEXT-METHOD-P.4
 CL-TEST::NEXT-METHOD-P.5
 CL-TEST::NEXT-METHOD-P.6
 CL-TEST::NEXT-METHOD-P.7
 CL-TEST::NEXT-METHOD-P.8
 CL-TEST::NEXT-METHOD-P.9
 CL-TEST::NEXT-METHOD-P.10
Test CL-TEST::NEXT-METHOD-P.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (PROGN (EVAL (QUOTE (DEFMETHOD CL-TEST::NMP-GF-06 ((CL-TEST::X T)) (NEXT-METHOD-P NIL)))) (CL-TESimple-Error No generic function named CL-TEST::NMP-GF-06.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CALL-NEXT-METHOD.1 failed
Form: (MAPCAR (FUNCTION CL-TEST::CNM-GF-01) (QUOTE (0 CL-TEST::2/3 1.299999 #C(1 1) CL-TEST::A)))
Expected value:
          ((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::C CL-TEST::D) (CL-TEST::D) NIL)
Actual value:
          ((CL-TEST::A CL-TEST::D) NIL (CL-TEST::D) NIL NIL) [Actual value: #<error during printing>

 NIL
 CL-TEST::CALL-NEXT-METHOD.2
 CL-TEST::CALL-NEXT-METHOD.3
 CL-TEST::CALL-NEXT-METHOD.4
Test CL-TEST::CALL-NEXT-METHOD.5 failed
Form: (MAPCAR (FUNCTION CL-TEST::CNM-GF-04) (QUOTE (0 1 2 CL-TEST::5/3 CL-TEST::9/2 1.0 #C(1 1))))
Expected value:
          (11 12 13 CL-TEST::8/3 CL-TEST::11/2 2.0 #C(2 1))
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function CL-TEST::CNM-GF-04 3BDAD3C>.
Dispatching on class #<Standard-Class SYMBOL C00B6247>.> [Actual valuMETHOD.6
 CL-TEST::CALL-NEXT-METHOD.7
 CL-TEST::CALL-NEXT-METHOD.8
 CL-TEST::CALL-NEXT-METHOD.9
 CL-TEST::CALL-NEXT-METHOD.10
 CL-TEST::CALL-NEXT-METHOD.11
Test CL-TEST::CALL-NEXT-METHOD.ERROR.1 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::CNM-ORDER-ERROR-GF-01 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CALL-NEXT-METHOD.ERROR.2 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::CNM-ORDER-ERROR-GF-02 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPUTE-APPLICABLE-METHODS.1
 CL-TEST::COMPUTE-APPLICABLE-METHODS.2
 CL-TEST::COMPUTE-APPLICABLE-METHODS.3
 CL-TEST::COMPUTE-APPLICABLE-METHODS.4
 CL-TEST::COMPUTE-APPLICABLE-METHODS.5
Test CL-TEST::COMPUTE-APPLICABLE-METHODS.6 failed
Form: (CL-TEST::EQUALT (COMPUTE-APPLICABLE-METHODS (FUNCTION CL-TEST::CAM-GF-03) (LIST 0)) (LIST CL-TEST::*CAM-GF-03-METHOD1* CL-TEST::*CAM-GF-03-METHOD2* CL-TEST::*CAM-GF-03-METHOD3* CL-TEST::*CAM-GF-03-METHOD4* CL-TEST::*CAM-GF-03-METHOD5*))
Expected value:
          T
Actual value:
          #<Undefined-Function CL-TEST::CAM-GF-03> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPUTE-APPLICABLE-METHODS.7 failed
Form: (CL-TEST::EQUALT (COMPUTE-APPLICABLE-METHODS (FUNCTION CL-TEST::CAM-GF-04) (LIST 0)) (LIST CL-TEST::*CAM-GF-04-METHOD1* CL-TEST::*CAM-GF-04-METHOD2* CL-TEST::*CAM-GF-04-METHOD3* CL-TEST::*CAM-GF-04-METHOD4* CL-TEST::*CAM-GF-04-METHOD5*))
Expected value:
          T
Actual value:
          #<Undefined-Function CL-TEST::CAM-GF-04> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPUTE-APPLICABLE-METHODS.ERROR.1
 CL-TEST::COMPUTE-APPLICABLE-METHODS.ERROR.2
 CL-TEST::COMPUTE-APPLICABLE-METHODS.ERROR.3
 CL-TEST::FIND-METHOD.1
Test CL-TEST::FIND-METHOD.2 failed
Form: (CL-TEST::EQT (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE RATIONAL)))) CL-TEST::*FIND-METHOD-GF-01-METHOD2*)
Expected value:
          T
Actual value:
          #<Simple-Error No class named RATIONAL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-METHOD.3 failed
Form: (CL-TEST::EQT (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE REAL)))) CL-TEST::*FIND-METHOD-GF-01-METHOD3*)
Expected value:
          T
Actual value:
          #<Simple-Error No class named REAL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-METHOD.4
 CL-TEST::FIND-METHOD.5
 CL-TEST::FIND-METHOD.6
Test CL-TEST::FIND-METHOD.7 failed
Form: (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) (LIST :BEFORE) (LIST (FIND-CLASS (QUOTE REAL))) NIL)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named REAL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-METHOD.8 failed
Form: (CL-TEST::EQT (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-02) NIL (LIST (QUOTE (EQL 1234567890)))) CL-TEST::*FIND-METHOD-GF-02-METHOD1*)
Expected value:
          T
Actual value:
          #<Simple-Error No such method for CL-TEST::FIND-METHOD-GF-02.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-METHOD.9 failed
Form: (CL-TEST::EQT (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-02) NIL (LIST (LIST (QUOTE EQL) CL-TEST::*FIND-METHOD-02-METHOD2-VALUE*))) CL-TEST::*FIND-METHOD-GF-02-METHOD2*)
Expected value:
          T
Actual value:
          #<Simple-Error No such method for CL-TEST::FIND-METHOD-GF-02.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-METHOD.ERROR.1
 CL-TEST::FIND-METHOD.ERROR.2
 CL-TEST::FIND-METHOD.ERROR.3
 CL-TEST::FIND-METHOD.ERROR.4
 CL-TEST::FIND-METHOD.ERROR.5
 CL-TEST::FIND-METHOD.ERROR.6
 CL-TEST::FIND-METHOD.ERROR.7
 CL-TEST::FIND-METHOD.ERROR.8
Test CL-TEST::FIND-METHOD.ERROR.9 failed
Form: (CL-TEST::HANDLER-CASE (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) NIL NIL NIL) (ERROR NIL :ERROR))
Expected value:
          :ERROR
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-METHOD.ERROR.10 failed
Form: (CL-TEST::HANDLER-CASE (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE INTEGER)) (FIND-CLASS T)) NIL) (ERROR NIL :ERROR))
Expected value:
          :ERROR
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.1 failed
Form: (LET ((METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-01) NIL (LIST (FIND-CLASS T))))) (CL-TEST::HANDLER-CASE (ADD-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-02) METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Standard-Method CL-TEST::ADD-METHOD-GF-02 NIL (T) 8064E217> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.2 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-03 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-03) NIL (LIST (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-04 (CL-TEST::X CL-TEST::Y)))))) (CL-TEST::HANDLER-CASE (ADD-METHOD CL-TEST::GF2 METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Standard-Method CL-TEST::ADD-METHOD-GF-04 NIL (T) 818433A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.3 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-05 (CL-TEST::X &OPTIONAL CL-TEST::Y) (:METHOD ((CL-TEST::X T) &OPTIONAL CL-TEST::Y) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-05) NIL (LIST (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-06 (CL-TEST::X CL-TEST::Y)))))) (CL-TEST::HANDLER-CASE (ADD-METHOD CL-TEST::GF2 METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Standard-Method CL-TEST::ADD-METHOD-GF-06 NIL (T) 8185C1F7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADD-METHOD.ERROR.4
 CL-TEST::ADD-METHOD.ERROR.5
Test CL-TEST::ADD-METHOD.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-07 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) (QUOTE CL-TEST::A)))))) (METHOD UNCTION CL-TEST::ADD-METHOD-GF-07) NIL (LIST (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-08 (CL-TEST::X)))))) (REMOVE-METHOD CL-TEST::GF METHOD) (ADD-METHOD CL-TEST::GF2 METHOD NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error The slot SYSTEM.CLOSETTE::METHODS is missing from the class #<Standard-Class STANDARD-METHOD 80009B07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.7 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-09 (CL-TEST::X CL-TEST::Y) (:METHOD ((CL-TEST::X T) (CL-TEST::Y T)) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-09) NIL (LIST (FIND-CLASS T) (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-10 (CL-TEST::X &OPTIONAL CL-TEST::Y)))))) (REMOVE-METHOD CL-TEST::GF METHOD) (CL-TEST::HANDLER-CASE (ADD-METHOD CL-TEST::GF2 METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
  LOSETTE::METHODS is missing from the class #<Standard-Class STANDARD-METHOD 80009B07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.8 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-11 (CL-TEST::X &KEY CL-TEST::Y) (:METHOD ((CL-TEST::X T) &KEY CL-TEST::Y) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-11) NIL (LIST (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-12 (CL-TEST::X)))))) (REMOVE-METHOD CL-TEST::GF METHOD) (CL-TEST::HANDLER-CASE (ADD-METHOD CL-TEST::GF2 METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Simple-Error The slot SYSTEM.CLOSETTE::METHODS is missing from the class #<Standard-Class STANDARD-METHOD 80009B07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.1 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-13 (CL-TEST::X) (:METHOD ((CL-TEST::X INTEGER)) (QUOTE CL-TEST::A)EST::B)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-13) NIL (LIST (FIND-CLASS (QUOTE INTEGER))))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-14 (CL-TEST::X)))))) (DECLARE (TYPE GENERIC-FUNCTION CL-TEST::GF CL-TEST::GF2)) (VALUES (FUNCALL CL-TEST::GF 0) (FUNCALL CL-TEST::GF (QUOTE CL-TEST::X)) (CL-TEST::EQT CL-TEST::GF (REMOVE-METHOD CL-TEST::GF METHOD)) (CL-TEST::EQT CL-TEST::GF2 (ADD-METHOD CL-TEST::GF2 METHOD)) (FUNCALL CL-TEST::GF 0) (FUNCALL CL-TEST::GF (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::GF2 0)))
Expected value:
          CL-TEST::A
          CL-TEST::B
          T
          T
          CL-TEST::B
          CL-TEST::B
          CL-TEST::A
Actual value:
          #<Type-Error 81907CB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.2 failed
Form: (LET* ((CL-TEST::SPECIALIZERS (LIST (FIND-CLASS (QUOTE INTEGER)))) (CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-15 (CL-TEST::X) (:METHOD ((CL-TEST::X INTEGER)) (QUOTE CL-TEST::A)) (:METHOST::B)))))) (METHOD (FIND-METHOD CL-TEST::GF NIL CL-TEST::SPECIALIZERS)) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-16 (CL-TEST::X) (:METHOD ((CL-TEST::X INTEGER)) (QUOTE CL-TEST::C)) (:METHOD ((CL-TEST::X T)) (QUOTE CL-TEST::D)))))) (CL-TEST::METHOD2 (FIND-METHOD CL-TEST::GF2 NIL CL-TEST::SPECIALIZERS))) (DECLARE (TYPE GENERIC-FUNCTION CL-TEST::GF CL-TEST::GF2)) (VALUES (FUNCALL CL-TEST::GF 0) (FUNCALL CL-TEST::GF (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::GF2 0) (FUNCALL CL-TEST::GF2 (QUOTE CL-TEST::X)) (CL-TEST::EQT CL-TEST::GF (REMOVE-METHOD CL-TEST::GF METHOD)) (CL-TEST::EQT CL-TEST::GF2 (ADD-METHOD CL-TEST::GF2 METHOD)) (CL-TEST::EQT METHOD (FIND-METHOD CL-TEST::GF2 NIL CL-TEST::SPECIALIZERS)) (CL-TEST::EQT CL-TEST::METHOD2 (FIND-METHOD CL-TEST::GF2 NIL CL-TEST::SPECIALIZERS)) (FUNCALL CL-TEST::GF 0) (FUNCALL CL-TEST::GF (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::GF2 0) (FUNCALL CL-TEST::GF2 (QUOTE CL-TEST::X))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          NIL
          CL-TEST::B
          CL-TEST::B
          CL-TEST::A
          CL-TEST::D
Actual value:
          #<Simple-Error The slot SYSTEM.CLOSETTE::METHODS is missing from the class #<Standard-Class STANDARD-METHOD 80009B07>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-NAME.1
Test CL-TEST::CLASS-NAME.2 failed
Form: (CLASS-NAME (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-NAME-CLASS-01)))
Expected value:
          CL-TEST::SILLY
Actual value:
          #<Simple-Error The slot SYSTEM.CLOSETTE::NAME is missing from the class #<Standard-Class CL-TEST::CLASS-NAME-CLASS-01 800B20E7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-CLASS-NAME.1 failed
Form: (CL-TEST::TYPEP* (FUNCTION (SETF CLASS-NAME)) (QUOTE STANDARD-GENERIC-FUNCTION))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF-CLASS-NAME.2
 CL-TEST::CLASS-NAME.ERROR.1
 CL-TEST::CLASS-NAME.ERROR.2
 CL-TEST::CLASS-OF.ERROR.1
 CL-TEST::CLASS-OF.ERROR.2
Trm: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UBS-CLASS-01)))) (CL-TEST::HANDLER-CASE (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (UNBOUND-SLOT (CL-TEST::C) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CELL-ERROR)) (CL-TEST::EQT (UNBOUND-SLOT-INSTANCE CL-TEST::C) CL-TEST::OBJ) (CELL-ERROR-NAME CL-TEST::C)))))
Expected value:
          T
          T
          CL-TEST::A
Actual value:
          #<Simple-Error The slot CL-TEST::A is unbound in the object #<Cl-Test::Ubs-Class-01 81997F77>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNBOUND-SLOT.2 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UBS-CLASS-02)))) (CL-TEST::HANDLER-CASE (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)) (UNBOUND-SLOT (CL-TEST::C) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CELL-ERROR)) (CL-TEST::EQT (UNBOUND-SLOT-INSTANCE CL-TEST::C) CL-TEST::OBJ) (CELL-ERROR-NAME CL-TEST::C)))))
Expected value:
          T
          T
          CL-TEST::B
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::UBS-CLASS-02 800B5F57>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (CL-TEST::TYPEP* (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X) (LIST CL-TEST::X)))) (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113445.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.2 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNAL) ((CL-TEST::X INTEGER)) (LIST CL-TEST::X)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113446.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.3 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((CL-TEST::X 0)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X (EQL (INCF CL-TEST::X)))) (LIST CL-TEST::X))))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113447.> [Actual value: #<error during printing>

 NIL
Test C-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)) ((CL-TEST::X T) (CL-TEST::Y CONS)) (SETF (CAR CL-TEST::Y) CL-TEST::X)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (FBOUNDP CL-TEST::SYM) (CL-TEST::TYPEP* (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)))) (QUOTE STANDARD-GENERIC-FUNCTION)) (LET ((CL-TEST::X (CONS 1 2))) (LIST (FUNCALL (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)))) 3 CL-TEST::X) CL-TEST::X))))
Expected value:
          T
          NIL
          T
          (3 (3 . 2))
Actual value:
          #<Simple-Error No generic function named (SETF #:G113448).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.5 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER)) (RETURN-FROM (SYSTEM.INTERNALS::BQ-CO) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113449.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.6 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)) ((CL-TEST::X T) (CL-TEST::Y CONS)) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (SETF (CAR CL-TEST::Y) CL-TEST::X))))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (FBOUNDP CL-TEST::SYM) (CL-TEST::TYPEP* (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)))) (QUOTE STANDARD-GENERIC-FUNCTION)) (LET ((CL-TEST::X (CONS 1 2))) (LIST (FUNCALL (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)))) 3 CL-TEST::X)       NIL
          T
          (3 (3 . 2))
Actual value:
          #<Simple-Error No generic function named (SETF #:G113450).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.7 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &AUX (CL-TEST::Y (LIST CL-TEST::X))) CL-TEST::Y))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113451.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.8 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &KEY CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Z)))))) (VALUES (CL-TEST::TYPEP* METHOENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 2 :Z 3) (FUNCALL CL-TEST::SYM 4 :ALLOW-OTHER-KEYS NIL) (FUNCALL CL-TEST::SYM 5 :ALLOW-OTHER-KEYS T :BOGUS 17) (FUNCALL CL-TEST::SYM 6 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BOGUS 17)))
Expected value:
          T
          T
          (1 NIL)
          (2 3)
          (4 NIL)
          (5 NIL)
          (6 NIL)
Actual value:
          #<Simple-Error No generic function named #:G113452.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.9 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &KEY (CL-TEST::Z :MISSING)) (LIST CL-TEST::X CL-TEST::Z)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 2 :Z 3) (FUNCALL CL-TEST::SYM 4 :ALLOW-OTHER-KEYS NIL)))
Expected value:
          T
 e:
          #<Simple-Error No generic function named #:G113453.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.10 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &KEY (CL-TEST::Z :MISSING CL-TEST::Z-P)) (LIST CL-TEST::X CL-TEST::Z (CL-TEST::NOTNOT CL-TEST::Z-P))))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 2 :Z 3) (FUNCALL CL-TEST::SYM 4 :ALLOW-OTHER-KEYS NIL)))
Expected value:
          T
          T
          (1 :MISSING NIL)
          (2 3 T)
          (4 :MISSING NIL)
Actual value:
          #<Simple-Error No generic function named #:G113454.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.11 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALSGER) &REST CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Z)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 2 3)))
Expected value:
          T
          T
          (1 NIL)
          (2 (3))
Actual value:
          #<Simple-Error No generic function named #:G113455.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T)) CL-TEST::X) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.2 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INT (CL-TEST::X CL-TEST::Y)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) (CL-TEST::Y T) (CL-TEST::Z T)) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.3 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y &OPTIONAL CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) (CL-TEST::Y T) (CL-TEST::Z T)) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.4 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) (CL-TEST::Y T) &OPTIONAL) (LIST CL-TEST::X CL-TEST::Y)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.5 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y &OPTIONAL CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) (CL-TEST::Y T) &OPTIONAL CL-TEST::Z CL-TEST::W) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.6 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T)) (LIST CL-TEST::X)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.7 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &REST CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Z)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.8 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X &KEY CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYMR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.9 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Z)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.10 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X &KEY CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY) CL-TEST::X) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>
orm: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X &KEY)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T)) CL-TEST::X) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.12 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY) CL-TEST::X) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.13 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA)) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 2) PROGRAM-ERROR)))))
Expected value:
          T
          T
Actual value:
          #<Simple-Error No generic function named #:G113504.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.14 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY) CL-TEST::X)))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 2) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 :BOGUS T) PROG (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :BOGUS T) PROGRAM-ERROR)))))
Expected value:
          T
          T
          T
          T
Actual value:
          #<Simple-Error No generic function named #:G113505.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.15 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY CL-TEST::Y) CL-TEST::X)))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 :BOGUS T) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 :Y) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 3 NIL) PROGRAM-ERROR)))))
Expected value:
          T
          T
          T
Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION.1
Test CL-TEST::CONDITION.2 failed
Form: (LOOP CL-TEST::FOR (CL-TEST::CND . CL-TEST::SUPERS) CL-TEST::IN CL-TEST::*ALLOWED-CONDITION-INCLUSIONS* APPEND (LOOP CL-TEST::FOR CL-TEST::SUPER CL-TEST::IN CL-TEST::SUPERS UNLESS (SUBTYPEP CL-TEST::CND CL-TEST::SUPER) CL-TEST::COLLECT (LIST CL-TEST::CND CL-TEST::SUPER)))
Expected value:
          NIL
Actual value:
          ((ARITHMETIC-ERROR ERROR) (ARITHMETIC-ERROR SERIOUS-CONDITION) (ARITHMETIC-ERROR CONDITION) (CELL-ERROR ERROR) (CELL-ERROR SERIOUS-CONDITION) (CELL-ERROR CONDITION) (CONTROL-ERROR ERROR) (CONTROL-ERROR SERIOUS-CONDITION) (CONTROL-ERROR CONDITION) (DIVISION-BY-ZERO ARITHMETIC-ERROR) (DIVISION-BY-ZERO ERROR) (DIVISION-BY-ZERO SERIOUS-CONDITION) (DIVISION-BY-ZERO CONDITION) (END-OF-FILE STREAM-ERROR) (END-OF-FILE ERROR) (END-OF-FILE SERIOUS-CONDITION) (END-OF-FILE CONDITION) (ERROR SERIOUS-CONDITION) (ERROR CONDITION) (FILE-ERROR ERROR) (FILE-ERROR SERIOUS-CONDITION) (FILE-ERROR CONDITION) (OR) (FLOATING-POINT-INEXACT ERROR) (FLOATING-POINT-INEXACT SERIOUS-CONDITION) (FLOATING-POINT-INEXACT CONDITION) (FLOATING-POINT-INVALID-OPERATION ARITHMETIC-ERROR) (FLOATING-POINT-INVALID-OPERATION ERROR) (FLOATING-POINT-INVALID-OPERATION SERIOUS-CONDITION) (FLOATING-POINT-INVALID-OPERATION CONDITION) (FLOATING-POINT-OVERFLOW ARITHMETIC-ERROR) (FLOATING-POINT-OVERFLOW ERROR) (FLOATING-POINT-OVERFLOW SERIOUS-CONDITION) (FLOATING-POINT-OVERFLOW CONDITION) (FLOATING-POINT-UNDERFLOW ARITHMETIC-ERROR) (FLOATING-POINT-UNDERFLOW ERROR) (FLOATING-POINT-UNDERFLOW SERIOUS-CONDITION) (FLOATING-POINT-UNDERFLOW CONDITION) (PACKAGE-ERROR ERROR) (PACKAGE-ERROR SERIOUS-CONDITION) (PACKAGE-ERROR CONDITION) (PARSE-ERROR ERROR) (PARSE-ERROR SERIOUS-CONDITION) (PARSE-ERROR CONDITION) (PRINT-NOT-READABLE ERROR) (PRINT-NOT-READABLE SERIOUS-CONDITION) (PRINT-NOT-READABLE CONDITION) (PROGRAM-ERROR ERROR) (PROGRAM-ERROR SERIOUS-CONDITION) (PROGRAM-ERROR CONDITION) (READER-ERROR PARSE-ERROR) (READER-ERROR STREAM-ERROR) (READER-ERROR R CONDITION) (SERIOUS-CONDITION CONDITION) (SIMPLE-CONDITION CONDITION) (SIMPLE-ERROR SIMPLE-CONDITION) (SIMPLE-ERROR ERROR) (SIMPLE-ERROR SERIOUS-CONDITION) (SIMPLE-ERROR CONDITION) (SIMPLE-TYPE-ERROR SIMPLE-CONDITION) (SIMPLE-TYPE-ERROR TYPE-ERROR) (SIMPLE-TYPE-ERROR ERROR) (SIMPLE-TYPE-ERROR SERIOUS-CONDITION) (SIMPLE-TYPE-ERROR CONDITION) (SIMPLE-WARNING SIMPLE-CONDITION) (SIMPLE-WARNING WARNING) (SIMPLE-WARNING CONDITION) (STORAGE-CONDITION SERIOUS-CONDITION) (STORAGE-CONDITION CONDITION) (STREAM-ERROR ERROR) (STREAM-ERROR SERIOUS-CONDITION) (STREAM-ERROR CONDITION) (STYLE-WARNING WARNING) (STYLE-WARNING CONDITION) (TYPE-ERROR ERROR) (TYPE-ERROR SERIOUS-CONDITION) (TYPE-ERROR CONDITION) (UNBOUND-SLOT CELL-ERROR) (UNBOUND-SLOT ERROR) (UNBOUND-SLOT SERIOUS-CONDITION) (UNBOUND-SLOT CONDITION) (UNBOUND-VARIABLE CELL-ERROR) (UNBOUND-VARIABLE ERROR) (UNBOUND-VARIABLE SERIOUS-CONDITION) (UNBOUND-VARIABLE CONDITION) (UNDEFINED-FUNCTION CELL-ERROR) (UNDEFINED-FUNCTION ERROR) (UNDEFINED-FUNCTION SERIOUS-CONDITION)tual value: #<error during printing>

 NIL
 CL-TEST::CONDITION.3
 CL-TEST::CELL-ERROR-NAME.1
 CL-TEST::CELL-ERROR-NAME.2
 CL-TEST::CELL-ERROR-NAME.3
 CL-TEST::CELL-ERROR-NAME.4
Test CL-TEST::CELL-ERROR-NAME.5 failed
Form: (CELL-ERROR-NAME (MAKE-CONDITION (QUOTE UNBOUND-SLOT) :NAME (QUOTE CL-TEST::S)))
Expected value:
          CL-TEST::S
Actual value:
          #<Simple-Error No class named UNBOUND-SLOT.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CELL-ERROR-NAME.6 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (CELL-ERROR-NAME (PROGN (INCF CL-TEST::I) (MAKE-CONDITION (QUOTE UNBOUND-SLOT) :NAME (QUOTE CL-TEST::S)))) CL-TEST::I))
Expected value:
          CL-TEST::S
          1
Actual value:
          #<Simple-Error No class named UNBOUND-SLOT.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CELL-ERROR-NAME.ERROR.1
 CL-TEST::CELL-ERROR-NAME.ERROR.2
 CL-TEST::ASSERT.1
 CL-TEST::ASSERT.2
 CL-TEST::ASSERT.3
 CL-TEST::ASSERT.3A
 CL-TEST::ASSERT.4
 CL-TEST::ASSERT.5
 CL-TEST::ASSERT.6
 CL-TEST::ASSERT.7
 CL-TEST::ASSERT.8
 CL-TEST::ASSERT.9
 CL-TEST::ASSERT.10
 CL-TEST::ASSERT.11
 CL-TEST::ERROR.1
 CL-TEST::ERROR.2
 CL-TEST::ERROR.3
 CL-TEST::ERROR.4
Test CL-TEST::ERROR.5 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Error"))) (CL-TEST::HANDLER-CASE (ERROR CL-TEST::FMT) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::ERROR.6
 CL-TEST::ERROR.7
 CL-TEST::ERROR.8
Test CL-TEST::ERROR.9 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Boo!"))) (CL-TEST::HANDLER-CASE (ERROR (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL CL-TEST::FMT) (SIMPLE-WARNING (CL-TEST::C) (CL-TEST::FROB-SIMPLE-WARNING CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ERROR.10 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Error"))) (CL-TEST::HANDLER-CASE (ERROR (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL CL-TEST::FMT) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ERROR.11 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Error"))) (CL-TEST::HANDLER-CASE (ERROR CL-TEST::FMT) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ERROR.12 failed
Form: (LET* ((CL-TEST::FMT (FORMATTER "Error")) (CL-TEST::CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL CL-TEST::FMT))) (CL-TEST::HANDLER-CASE (ERROR CL-TEST::CND) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 L
 CL-TEST::CERROR.1
 CL-TEST::CERROR.2
Test CL-TEST::CERROR.2A failed
Form: (LET* ((CL-TEST::FMT (FORMATTER "Cerror")) (CL-TEST::CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL CL-TEST::FMT))) (CL-TEST::HANDLER-CASE (CERROR "Continue on." CL-TEST::CND) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::CERROR.3
 CL-TEST::CERROR.4
Test CL-TEST::CERROR.4A failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Cerror: ~A"))) (CL-TEST::HANDLER-CASE (CERROR "On on" CL-TEST::FMT 10) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT 10))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CERROR.5 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Cerror"))) (CL-TEST::HANDLER-CASE (CERROR "Keep going." CL-TEST::FMT) (SIMPLE-ERROR (COB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::CERROR.6
 CL-TEST::CERROR.ERROR.1
 CL-TEST::CERROR.ERROR.2
 CL-TEST::CHECK-TYPE.1
 CL-TEST::CHECK-TYPE.2
 CL-TEST::CHECK-TYPE.8
 CL-TEST::CHECK-TYPE.9
 CL-TEST::WARN.1
 CL-TEST::WARN.3
 CL-TEST::WARN.4
 CL-TEST::WARN.5
 CL-TEST::WARN.6
 CL-TEST::WARN.7
 CL-TEST::WARN.8
 CL-TEST::WARN.9
 CL-TEST::WARN.10
 CL-TEST::WARN.11
Warning: The condition CONDITION was signalled.
Test CL-TEST::WARN.12 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (QUOTE CONDITION)) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Condition >
Test CL-TEST::WARN.13 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (QUOTE SIMPLE-CONDITION)) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::WARN.14 failed
Form: (CLTEST:SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-WARNING)) :FORMAT-CONTROL "Foo") TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid condition designator #<Simple-Warning > (:FORMAT-CONTROL "Foo").> [Actual value: #<error during printing>

 NIL
 CL-TEST::WARN.15
Warning: The condition CONDITION was signalled.
Test CL-TEST::WARN.16 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE CONDITION))) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Condition >
Test CL-TEST::WARN.17 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-CONDITION))) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::WARN.18 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-ERROR))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error > [Actual value: #<error during printing>

 NIL
Test CL-TEST::WARN.19 failed
Form: (LET ((CL-TEST::WARNED NIL)) (CL-TEST::HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (TYPEP CL-TEST::C (QUOTE SIMPLE-WARNING))) (SETF CL-TEST::WARNED T) (MUFFLE-WARNING CL-TEST::C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN (MAKE-CONDITION (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL (FORMATTER "Foo!")))) CL-TEST::WARNED)))
Expected value:
          (NIL)
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::INVOKE-DEBUGGER.1
 CL-TEST::INVOKE-DEBUGGER.ERROR.1
 CL-TEST::INVOKE-DEBUGGER.ERROR.2
Test CL-TEST::INVOKE-DEBUGGER.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA NIL NIL)))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INVOKE-DEBUGGER.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (CL-TEST::C) CL-TEST::C)))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::C)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INVOKE-DEBUGGER.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (CL-TEST::C CL-TEST::HOOK CL-TEST::X) (LIST CL-TEST::C CL-TEST::HOOK CL-TEST::X))))) (INVOKE-DECONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::C CL-TEST::HOOK CL-TEST::X)> [Actual value: #<error during printing>

 NIL
 CL-TEST::HANDLER-BIND.1
 CL-TEST::HANDLER-BIND.2
 CL-TEST::HANDLER-BIND.3
 CL-TEST::HANDLER-BIND.4
 CL-TEST::HANDLER-BIND.5
 CL-TEST::HANDLER-BIND.7
 CL-TEST::HANDLER-BIND.8
 CL-TEST::HANDLER-BIND.9
 CL-TEST::HANDLER-BIND.10
 CL-TEST::HANDLER-BIND.11
 CL-TEST::HANDLER-BIND.12
 CL-TEST::HANDLER-BIND.13
 CL-TEST::HANDLER-BIND.14
 CL-TEST::HANDLER-BIND.15
 CL-TEST::HANDLER-BIND.16
 CL-TEST::HANDLER-CASE.1
 CL-TEST::HANDLER-CASE.2
 CL-TEST::HANDLER-CASE.3
 CL-TEST::HANDLER-CASE.4
 CL-TEST::HANDLER-CASE.6
 CL-TEST::HANDLER-CASE.7
Test CL-TEST::HANDLER-CASE.9 failed
Form: (CL-TEST::HANDLER-CASE (VALUES 1 2 3 4 5 6 7 8) (CONDITION NIL NIL))
Expected value:
          1
          2
          3
          4
          5
          6
          7
    l value:
          1 [Actual value: #<error during printing>

 NIL
 CL-TEST::HANDLER-CASE.11
 CL-TEST::HANDLER-CASE.12
 CL-TEST::HANDLER-CASE.13
Test CL-TEST::HANDLER-CASE.14 failed
Form: (CL-TEST::HANDLER-CASE (ERROR "foo") (ERROR (CL-TEST::C) (VALUES 1 2 3 4 5 6 7 8)))
Expected value:
          1
          2
          3
          4
          5
          6
          7
          8
Actual value:
          1 [Actual value: #<error during printing>

 NIL
 CL-TEST::HANDLER-CASE.15
 CL-TEST::HANDLER-CASE.16
 CL-TEST::HANDLER-CASE.17
 CL-TEST::HANDLER-CASE.18
 CL-TEST::HANDLER-CASE.19
 CL-TEST::HANDLER-CASE.20
 CL-TEST::HANDLER-CASE.21
 CL-TEST::HANDLER-CASE.22
Test CL-TEST::HANDLER-CASE.23 failed
Form: (CL-TEST:SIGNALS-ERROR (CL-TEST::HANDLER-CASE (VALUES 1 2) (:NO-ERROR (CL-TEST::X) CL-TEST::X)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::X)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::HANDLER-CASE.24 failed
Form: (CL-TEST:SIGNALS-ERROR (CL-TEST::HANDLER-CASE (VALUES) (:NO-ERROR (CL-TEST::X) CL-TEST::X)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::X)> [Actual value: #<error during printing>

 NIL
 CL-TEST::HANDLER-CASE.25
 CL-TEST::HANDLER-CASE.26
 CL-TEST::HANDLER-CASE.27
 CL-TEST::HANDLER-CASE.28
 CL-TEST::HANDLER-CASE.29
 CL-TEST::IGNORE-ERRORS.1
 CL-TEST::IGNORE-ERRORS.2
Test CL-TEST::IGNORE-ERRORS.3 failed
Form: (IGNORE-ERRORS (VALUES 1 2 3 4 5 6 7 8))
Expected value:
          1
          2
          3
          4
          5
          6
          7
          8
Actual value:
          1 [Actual value: #<error during printing>

 NIL
 CL-TEST::IGNORE-ERRORS.4
 CL-TEST::IGNORE-ERRORS.5
 CL-TEST::IGNORE-ERRORS.6
Test CL-TEST::CONDITION-1/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-1) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-1/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-1) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-1) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-1))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-1 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-1) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-1/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-1/IS-A/CONDITION
 CL-TEST::CONDITION-1/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-1/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-1/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-1)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1AB6137> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-1/HANDLER-CASE-1
 CL-TEST::CONDITION-1/HANDLER-CASE-2
 CL-TEST::CONDITION-1/HANDLER-CASE-3
Test CL-TEST::CONDITION-2/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-2) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-2/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-2) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-2) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-2))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-2 (NOT CONDITION))) NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-2) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-2/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-2/IS-A/CONDITION
 CL-TEST::CONDITION-2/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-2/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-2/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-2)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1AF2917> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-2/HANDLER-CASE-1
 CL-TEST::CONDITION-2/HANDLER-CASE-2
 CL-TEST::CONDITION-2/HANDLER-CASE-3
Test CL-TEST::CONDITION-3/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE #:CONDITION-3) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-3/IS-S(CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE #:CONDITION-3) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE #:CONDITION-3) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT #:CONDITION-3))) :==> NIL T) ((SUBTYPEP (QUOTE (AND #:CONDITION-3 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT #:CONDITION-3) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-3/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-3/IS-A/CONDITION
 CL-TEST::CONDITION-3/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-3/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-3/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE #:CONDITION-3)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1B2E137> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-3/HANDLER-CASE-1
 CL-TEST::CONDITION-3/HONDITION-3/HANDLER-CASE-3
Test CL-TEST::CONDITION-4/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-4) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-4/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-4) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-4) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-4))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-4 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-4) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-4/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-4/IS-A/CONDITION
 CL-TEST::CONDITION-4/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-4/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TESER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-4)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1B6A8D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-4/HANDLER-CASE-1
 CL-TEST::CONDITION-4/HANDLER-CASE-2
 CL-TEST::CONDITION-4/HANDLER-CASE-3
 CL-TEST::CONDITION-4-SLOTS.1
Test CL-TEST::CONDITION-5/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-5) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-5/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-5) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-5) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-5))) :==> EP (QUOTE (AND CL-TEST::CONDITION-5 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-5) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-5/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-5/IS-A/CONDITION
 CL-TEST::CONDITION-5/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-5/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-5/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-5)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1BABB67> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-5/HANDLER-CASE-1
 CL-TEST::CONDITION-5/HANDLER-CASE-2
 CL-TEST::CONDITION-5/HANDLER-CASE-3
 CL-TEST::CONDITION-5-SLOTS.1
 CL-TEST::CONDITION-5-SLOTS.2
 CL-TEST::CONDITION-5-SLOTS.3
 CL-TEST::CONDITION-5-SLOTS.4
Test CL-TEST::CONDITION-6/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEPON-6) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-6/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-6) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-6) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-6))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-6 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-6) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-6/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-6/IS-A/CONDITION
 CL-TEST::CONDITION-6/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-6/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-6/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-6)))) (CL-TES-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1BF3DD7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-6/HANDLER-CASE-1
 CL-TEST::CONDITION-6/HANDLER-CASE-2
 CL-TEST::CONDITION-6/HANDLER-CASE-3
 CL-TEST::CONDITION-6-SLOTS.1
 CL-TEST::CONDITION-6-SLOTS.2
 CL-TEST::CONDITION-6-SLOTS.3
 CL-TEST::CONDITION-6-SLOTS.4
 CL-TEST::CONDITION-6-SLOTS.5
Test CL-TEST::CONDITION-7/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-7) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-7/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-7) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-7) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-7))) :==> NIL T) ((ST::CONDITION-7 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-7) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-7/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-7/IS-A/CONDITION
 CL-TEST::CONDITION-7/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-7/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-7/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-7)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1C3E967> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-7/HANDLER-CASE-1
 CL-TEST::CONDITION-7/HANDLER-CASE-2
 CL-TEST::CONDITION-7/HANDLER-CASE-3
 CL-TEST::CONDITION-7-SLOTS.1
 CL-TEST::CONDITION-7-SLOTS.2
 CL-TEST::CONDITION-7-SLOTS.3
 CL-TEST::CONDITION-7-SLOTS.4
Test CL-TEST::CONDITION-8/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONxpected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-8/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-8) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-8) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-8))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-8 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-8) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-8/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-8/IS-A/CONDITION
 CL-TEST::CONDITION-8/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-8/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-8/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-8)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TESTION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1C866D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-8/HANDLER-CASE-1
 CL-TEST::CONDITION-8/HANDLER-CASE-2
 CL-TEST::CONDITION-8/HANDLER-CASE-3
 CL-TEST::CONDITION-8-SLOTS.1
Test CL-TEST::CONDITION-9/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-9) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-9/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-9) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-9) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-9))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-9 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-9) CONDITION))) :==> NIL T)) printing>

 NIL
 CL-TEST::CONDITION-9/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-9/IS-A/CONDITION
 CL-TEST::CONDITION-9/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-9/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-9/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-9)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1CC93C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-9/HANDLER-CASE-1
 CL-TEST::CONDITION-9/HANDLER-CASE-2
 CL-TEST::CONDITION-9/HANDLER-CASE-3
 CL-TEST::CONDITION-9-SLOTS.1
 CL-TEST::CONDITION-9-SLOTS.2
 CL-TEST::CONDITION-9-SLOTS.3
 CL-TEST::CONDITION-9-SLOTS.4
 CL-TEST::CONDITION-9-SLOTS.5
 CL-TEST::CONDITION-9-SLOTS.6
Test CL-TEST::CONDITION-14/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-14) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NI CL-TEST::CONDITION-14/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-14) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-14) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-14))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-14 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-14) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-14/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-14/IS-A/CONDITION
 CL-TEST::CONDITION-14/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-14/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-14/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-14)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error Cerror during printing>

 NIL
 CL-TEST::CONDITION-14/HANDLER-CASE-1
 CL-TEST::CONDITION-14/HANDLER-CASE-2
 CL-TEST::CONDITION-14/HANDLER-CASE-3
 CL-TEST::CONDITION-14-SLOTS.1
 CL-TEST::CONDITION-14-SLOTS.2
 CL-TEST::CONDITION-14-SLOTS.3
Test CL-TEST::CONDITION-15/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-15) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-15/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-15) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-15) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-15))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-15 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-15) CONDITION))) :==> NIL T)) [Actual value: #<error durinL-TEST::CONDITION-15/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-15/IS-A/CONDITION
 CL-TEST::CONDITION-15/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-15/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-15/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-15)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1D5C0A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-15/HANDLER-CASE-1
 CL-TEST::CONDITION-15/HANDLER-CASE-2
 CL-TEST::CONDITION-15/HANDLER-CASE-3
Test CL-TEST::CONDITION-16/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-16) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-16/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-16) (QUOTE CONDITION:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-16) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-16))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-16 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-16) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-16/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-16/IS-A/CONDITION
 CL-TEST::CONDITION-16/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-16/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-16/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-16)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1D992A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-16/HANDLER-CASE-1
 CL-TEST::CONDITION-16/HANDLER-CASE-2
 CL-TEST::CONDITION-16/HANDLER-CASE-3
 CL-TEST::CONEST::CONDITION-17/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-17) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-17/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-17) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-17) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-17))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-17 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-17) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-17/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-17/IS-A/CONDITION
 CL-TEST::CONDITION-17/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-17/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-17/IS-A-MEiled
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-17)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1DDE7F7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-17/HANDLER-CASE-1
 CL-TEST::CONDITION-17/HANDLER-CASE-2
 CL-TEST::CONDITION-17/HANDLER-CASE-3
 CL-TEST::CONDITION-17-REPORT.1
Test CL-TEST::CONDITION-18/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-18) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-18/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-18) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-18) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-18))) :==> NIL T) ((SUBND CL-TEST::CONDITION-18 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-18) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-18/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-18/IS-A/CONDITION
 CL-TEST::CONDITION-18/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-18/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-18/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-18)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1E24137> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-18/HANDLER-CASE-1
 CL-TEST::CONDITION-18/HANDLER-CASE-2
 CL-TEST::CONDITION-18/HANDLER-CASE-3
 CL-TEST::CONDITION-18-REPORT.1
Test CL-TEST::CONDITION-19/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-19) (QUOTE CONDITION))
Expected value:
          T
         [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-19/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-19) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-19) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-19))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-19 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-19) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-19/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-19/IS-A/CONDITION
 CL-TEST::CONDITION-19/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-19/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-19/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-19)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
         #<Type-Error C1E6A037> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-19/HANDLER-CASE-1
 CL-TEST::CONDITION-19/HANDLER-CASE-2
 CL-TEST::CONDITION-19/HANDLER-CASE-3
 CL-TEST::CONDITION-19-SLOTS.1
 CL-TEST::CONDITION-19-SLOTS.2
 CL-TEST::CONDITION-19-SLOTS.3
 CL-TEST::CONDITION-19-SLOTS.4
 CL-TEST::CONDITION-19-SLOTS.5
Test CL-TEST::CONDITION-20/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-20) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-20/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-20) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-20) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-20))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-20 (NOT CONDITION))) NIL) :==> NI (OR (NOT CL-TEST::CONDITION-20) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-20/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-20/IS-A/CONDITION
 CL-TEST::CONDITION-20/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-20/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-20/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-20)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1EB83B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-20/HANDLER-CASE-1
 CL-TEST::CONDITION-20/HANDLER-CASE-2
 CL-TEST::CONDITION-20/HANDLER-CASE-3
 CL-TEST::CONDITION-20-SLOTS.1
 CL-TEST::CONDITION-20-SLOTS.2
 CL-TEST::CONDITION-20-SLOTS.3
 CL-TEST::CONDITION-20-SLOTS.4
Test CL-TEST::CONDITION-21/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-21) (QUOTE CONDITION))
Expected value:
        ue:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-21/IS-SUBTYPE-OF/CONDITION-4 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-21) (QUOTE CL-TEST::CONDITION-4))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-21/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-21) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-21) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-21))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-21 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-21) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-21/IS-SUBTYPE-OF-2/CONDITION-4 failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-21) (QUOTE CL-TESTue:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-21) (QUOTE CL-TEST::CONDITION-4)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-4)) (QUOTE (NOT CL-TEST::CONDITION-21))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-21 (NOT CL-TEST::CONDITION-4))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-21) CL-TEST::CONDITION-4))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-21/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-21/IS-NOT-SUPERTYPE-OF/CONDITION-4
 CL-TEST::CONDITION-21/IS-A/CONDITION
 CL-TEST::CONDITION-21/IS-A/CONDITION-4
 CL-TEST::CONDITION-21/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-21/IS-SUBCLASS-OF/CONDITION-4
 CL-TEST::CONDITION-21/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-21/IS-NOT-SUPERCLASS-OF/CONDITION-4
Test CL-TEST::CONDITION-21/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-21)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-C
Expected value:
          T
Actual value:
          #<Type-Error C1F2CEF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-21/IS-A-MEMBER-OF-CLASS/CONDITION-4 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-21)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-4)))))
Expected value:
          T
Actual value:
          #<Type-Error C1F38157> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-21/HANDLER-CASE-1
 CL-TEST::CONDITION-21/HANDLER-CASE-2
 CL-TEST::CONDITION-21/HANDLER-CASE-3
 CL-TEST::CONDITION-21-SLOTS.1
Test CL-TEST::CONDITION-22/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-22) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-22/IS-SUBTYPE-OF/CONDITION-4 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-22) (QUOTE CL-TEST::CONDITION-4))
Expected value:
    ue:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-22/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-22) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-22) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-22))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-22 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-22) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-22/IS-SUBTYPE-OF-2/CONDITION-4 failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-22) (QUOTE CL-TEST::CONDITION-4))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-22) (QUOTE CL-TEST::CONDITION-4)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-4)) (QUOTE (NOT CL-TEST::CONDITION-22))) :==> NIL T) ((SUBTYPEP T::CONDITION-22 (NOT CL-TEST::CONDITION-4))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-22) CL-TEST::CONDITION-4))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-22/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-22/IS-NOT-SUPERTYPE-OF/CONDITION-4
 CL-TEST::CONDITION-22/IS-A/CONDITION
 CL-TEST::CONDITION-22/IS-A/CONDITION-4
 CL-TEST::CONDITION-22/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-22/IS-SUBCLASS-OF/CONDITION-4
 CL-TEST::CONDITION-22/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-22/IS-NOT-SUPERCLASS-OF/CONDITION-4
Test CL-TEST::CONDITION-22/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-22)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1F9C8A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-22/IS-A-MEMBER-OF-CLASS/CONDITION-4 failed
Form: (LET ((CL-TEST::C (MAKE-CONDIMV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-4)))))
Expected value:
          T
Actual value:
          #<Type-Error C1FA7DB7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-22/HANDLER-CASE-1
 CL-TEST::CONDITION-22/HANDLER-CASE-2
 CL-TEST::CONDITION-22/HANDLER-CASE-3
 CL-TEST::CONDITION-22-SLOTS.1
Test CL-TEST::CONDITION-23/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-23) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-23/IS-SUBTYPE-OF/CONDITION-5 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-23) (QUOTE CL-TEST::CONDITION-5))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-23/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-23) (QUOTE CONDITION))
Expected value:
          NIL
Actual valuP (QUOTE CL-TEST::CONDITION-23) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-23))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-23 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-23) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-23/IS-SUBTYPE-OF-2/CONDITION-5 failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-23) (QUOTE CL-TEST::CONDITION-5))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-23) (QUOTE CL-TEST::CONDITION-5)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-5)) (QUOTE (NOT CL-TEST::CONDITION-23))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-23 (NOT CL-TEST::CONDITION-5))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-23) CL-TEST::CONDITION-5))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-23/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-ITION-23/IS-NOT-SUPERTYPE-OF/CONDITION-5
 CL-TEST::CONDITION-23/IS-A/CONDITION
 CL-TEST::CONDITION-23/IS-A/CONDITION-5
 CL-TEST::CONDITION-23/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-23/IS-SUBCLASS-OF/CONDITION-5
 CL-TEST::CONDITION-23/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-23/IS-NOT-SUPERCLASS-OF/CONDITION-5
Test CL-TEST::CONDITION-23/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-23)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 8173A8B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-23/IS-A-MEMBER-OF-CLASS/CONDITION-5 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-23)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-5)))))
Expected value:
          T
Actual value:
          #<Type-Error 81746E57> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-23/HANDLER-CASE-1
 CL-TEST::CONDITION-23/HANDLER-CASE-2
 CL-TEST::CONDITION-23/HANDLER-CASE-3
 CL-TEST::CONDITION-23-SLOTS.1
 CL-TEST::CONDITION-23-SLOTS.2
 CL-TEST::CONDITION-23-SLOTS.3
 CL-TEST::CONDITION-23-SLOTS.4
Test CL-TEST::CONDITION-24/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-24) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-24/IS-SUBTYPE-OF/CONDITION-5 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-24) (QUOTE CL-TEST::CONDITION-5))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-24/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-24) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-24) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-24))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-24 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-24) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-24/IS-SUBTYPE-OF-2/CONDITION-5 failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-24) (QUOTE CL-TEST::CONDITION-5))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-24) (QUOTE CL-TEST::CONDITION-5)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-5)) (QUOTE (NOT CL-TEST::CONDITION-24))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-24 (NOT CL-TEST::CONDITION-5))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-24) CL-TEST::CONDITION-5))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-24/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-24/IS-NOT-SUPERTYPE-OF/CONDITION-5
 CL-TEST::CONDITION-24/IS-A/CONDITION
 CL-TEST::CONDITION-24/IS-A/CONDITION-5
 CL-TEST::CONDITION-24/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-24/IS-SUBCLASS-OF/CONDITION-5
 CL-TEST::CONDITION-24/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-24/IS-NOT-SUPERCLASS-OF/CONDITION-5
Test CL-TEST::CONDITION-24/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-24)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 817B3907> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-24/IS-A-MEMBER-OF-CLASS/CONDITION-5 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-24)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-5)))))
Expected value:
          T
Actual value:
          #<Type-Error 817BER-CASE-1
 CL-TEST::CONDITION-24/HANDLER-CASE-2
 CL-TEST::CONDITION-24/HANDLER-CASE-3
 CL-TEST::CONDITION-24-SLOTS.1
 CL-TEST::CONDITION-24-SLOTS.2
 CL-TEST::CONDITION-24-SLOTS.3
 CL-TEST::CONDITION-24-SLOTS.4
Test CL-TEST::CONDITION-25A/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25A) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25A/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25A) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25A) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-25A))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25A (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25A) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
OF/CONDITION
 CL-TEST::CONDITION-25A/IS-A/CONDITION
 CL-TEST::CONDITION-25A/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-25A/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-25A/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25A)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 818075F7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25A/HANDLER-CASE-1
 CL-TEST::CONDITION-25A/HANDLER-CASE-2
 CL-TEST::CONDITION-25A/HANDLER-CASE-3
Test CL-TEST::CONDITION-25B/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25B) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25B/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25B) (QUOTE CONDITION))
Expected value:
       :
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25B) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-25B))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25B (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25B) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25B/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-25B/IS-A/CONDITION
 CL-TEST::CONDITION-25B/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-25B/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-25B/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25B)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81845087> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25B/HANDLER-CASE-1
 CL-TEST::CONDITION-25B/HANDLER-CASE-2
 CL-TEST::CONDITION-25B/HANDLER-CASE-3
est CL-TEST::CONDITION-25/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF/CONDITION-25A failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25A))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF/CONDITION-25B failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25B))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CONYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-25))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF-2/CONDITION-25A failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25A))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25A)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-25A)) (QUOTE (NOT CL-TEST::CONDITION-25))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25 (NOT CL-TEST::CONDITION-25A))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25) CL-TEST::CONDITION-25A))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF-2/CONDITION-25B failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST:5) (QUOTE CL-TEST::CONDITION-25B))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25B)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-25B)) (QUOTE (NOT CL-TEST::CONDITION-25))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25 (NOT CL-TEST::CONDITION-25B))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25) CL-TEST::CONDITION-25B))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-25/IS-NOT-SUPERTYPE-OF/CONDITION-25A
 CL-TEST::CONDITION-25/IS-NOT-SUPERTYPE-OF/CONDITION-25B
 CL-TEST::CONDITION-25/IS-A/CONDITION
 CL-TEST::CONDITION-25/IS-A/CONDITION-25A
 CL-TEST::CONDITION-25/IS-A/CONDITION-25B
 CL-TEST::CONDITION-25/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-25/IS-SUBCLASS-OF/CONDITION-25A
 CL-TEST::CONDITION-25/IS-SUBCLASS-OF/CONDITION-25B
 CL-TEST::CONDITION-25/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-25/IS-N25/IS-NOT-SUPERCLASS-OF/CONDITION-25B
Test CL-TEST::CONDITION-25/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 818CA597> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-A-MEMBER-OF-CLASS/CONDITION-25A failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-25A)))))
Expected value:
          T
Actual value:
          #<Type-Error 818D5947> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-A-MEMBER-OF-CLASS/CONDITION-25B failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-25B)))))
Expected value:
          T
Actual value:
          #<Type-Error 818E1417> [Actuing printing>

 NIL
 CL-TEST::CONDITION-25/HANDLER-CASE-1
 CL-TEST::CONDITION-25/HANDLER-CASE-2
 CL-TEST::CONDITION-25/HANDLER-CASE-3
 CL-TEST::CONDITION-25-SLOTS.1
 CL-TEST::CONDITION-25-SLOTS.2
 CL-TEST::CONDITION-25-SLOTS.3
 CL-TEST::CONDITION-25-SLOTS.4
 CL-TEST::CONDITION-25-SLOTS.5
Test CL-TEST::CONDITION-26A/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26A) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26A/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26A) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26A) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-26A))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26A (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITIO T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26A/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-26A/IS-A/CONDITION
 CL-TEST::CONDITION-26A/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-26A/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-26A/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26A)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81931017> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26A/HANDLER-CASE-1
 CL-TEST::CONDITION-26A/HANDLER-CASE-2
 CL-TEST::CONDITION-26A/HANDLER-CASE-3
Test CL-TEST::CONDITION-26B/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26B) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26B/IS-SUBTYPE-OF/CONDITION-26A failed
Form: (CL-TEST (QUOTE CL-TEST::CONDITION-26A))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26B/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26B) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26B) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-26B))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26B (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26B) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26B/IS-SUBTYPE-OF-2/CONDITION-26A failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26B) (QUOTE CL-TEST::CONDITION-26A))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26B) (QUOTE CL-TEST::CONDITION-26A)) :==> NIL T) ((SUBTYP-26A)) (QUOTE (NOT CL-TEST::CONDITION-26B))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26B (NOT CL-TEST::CONDITION-26A))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26B) CL-TEST::CONDITION-26A))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26B/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-26B/IS-NOT-SUPERTYPE-OF/CONDITION-26A
 CL-TEST::CONDITION-26B/IS-A/CONDITION
 CL-TEST::CONDITION-26B/IS-A/CONDITION-26A
 CL-TEST::CONDITION-26B/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-26B/IS-SUBCLASS-OF/CONDITION-26A
 CL-TEST::CONDITION-26B/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-26B/IS-NOT-SUPERCLASS-OF/CONDITION-26A
Test CL-TEST::CONDITION-26B/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26B)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81992C37> [Actual value: #<error during printingEMBER-OF-CLASS/CONDITION-26A failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26B)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-26A)))))
Expected value:
          T
Actual value:
          #<Type-Error 8199DEC7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26B/HANDLER-CASE-1
 CL-TEST::CONDITION-26B/HANDLER-CASE-2
 CL-TEST::CONDITION-26B/HANDLER-CASE-3
Test CL-TEST::CONDITION-26C/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26C) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26C/IS-SUBTYPE-OF/CONDITION-26A failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26C) (QUOTE CL-TEST::CONDITION-26A))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26C/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST: CL-TEST::CONDITION-26C) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26C) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-26C))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26C (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26C) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26C/IS-SUBTYPE-OF-2/CONDITION-26A failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26C) (QUOTE CL-TEST::CONDITION-26A))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26C) (QUOTE CL-TEST::CONDITION-26A)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-26A)) (QUOTE (NOT CL-TEST::CONDITION-26C))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26C (NOT CL-TEST::CONDITION-26A))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26C) CL-TEST::CON :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26C/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-26C/IS-NOT-SUPERTYPE-OF/CONDITION-26A
 CL-TEST::CONDITION-26C/IS-A/CONDITION
 CL-TEST::CONDITION-26C/IS-A/CONDITION-26A
 CL-TEST::CONDITION-26C/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-26C/IS-SUBCLASS-OF/CONDITION-26A
 CL-TEST::CONDITION-26C/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-26C/IS-NOT-SUPERCLASS-OF/CONDITION-26A
Test CL-TEST::CONDITION-26C/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26C)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81A00207> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26C/IS-A-MEMBER-OF-CLASS/CONDITION-26A failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26C)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-297> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26C/HANDLER-CASE-1
 CL-TEST::CONDITION-26C/HANDLER-CASE-2
 CL-TEST::CONDITION-26C/HANDLER-CASE-3
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF/CONDITION-26B failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26B))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF/CONDITION-26C failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26C))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-26))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF-2/CONDITION-26B failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26B))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26B)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-26B)) (QUOTE (NOT CL-TEST::CONDITION-26))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26 (NOT CL-TEST::CONDITION-26B))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26) CL-TEST::CONDITION-26B))) :==> NIL T)) [Actual vduring printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF-2/CONDITION-26C failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26C))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26C)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-26C)) (QUOTE (NOT CL-TEST::CONDITION-26))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26 (NOT CL-TEST::CONDITION-26C))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26) CL-TEST::CONDITION-26C))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-26/IS-NOT-SUPERTYPE-OF/CONDITION-26B
 CL-TEST::CONDITION-26/IS-NOT-SUPERTYPE-OF/CONDITION-26C
 CL-TEST::CONDITION-26/IS-A/CONDITION
 CL-TEST::CONDITION-26/IS-A/CONDITION-26B
 CL-TEST::CONDITION-26/IS-A/CONDITION-26C
 CL-TEST::CONDITION-26/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-26/IS-SUBCLASS-O6/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-26/IS-NOT-SUPERCLASS-OF/CONDITION-26B
 CL-TEST::CONDITION-26/IS-NOT-SUPERCLASS-OF/CONDITION-26C
Test CL-TEST::CONDITION-26/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81A90887> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-A-MEMBER-OF-CLASS/CONDITION-26B failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-26B)))))
Expected value:
          T
Actual value:
          #<Type-Error 81A9BA27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-A-MEMBER-OF-CLASS/CONDITION-26C failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUO    T
Actual value:
          #<Type-Error 81AA72E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26/HANDLER-CASE-1
 CL-TEST::CONDITION-26/HANDLER-CASE-2
 CL-TEST::CONDITION-26/HANDLER-CASE-3
 CL-TEST::CONDITION-26-SLOTS.1
 CL-TEST::CONDITION-26-SLOTS.2
Test CL-TEST::CONDITION-27A/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-27A) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-27A/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-27A) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-27A) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-27A))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-27A (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-27A) CONDITIue: #<error during printing>

 NIL
 CL-TEST::CONDITION-27A/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-27A/IS-A/CONDITION
 CL-TEST::CONDITION-27A/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-27A/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-27A/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-27A)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81AEB017> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-27A/HANDLER-CASE-1
 CL-TEST::CONDITION-27A/HANDLER-CASE-2
 CL-TEST::CONDITION-27A/HANDLER-CASE-3
Test CL-TEST::CONDITION-27B/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-27B) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-27B/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPed value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-27B) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-27B))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-27B (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-27B) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-27B/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-27B/IS-A/CONDITION
 CL-TEST::CONDITION-27B/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-27B/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-27B/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-27B)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81B28F07> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-27B/HANDLER-CASE-1
 CL-TEST::CONDITION-27B/HANDLER-CASE-2
 CLE-3
 CL-TEST::CONDITION-27-SLOTS.1
 CL-TEST::CONDITION-27-SLOTS.2
Test CL-TEST::CONDITION-27-READER-IS-GENERIC failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION CL-TEST::CONDITION-27/S1) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-30/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-30) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-30/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-30) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-30) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-30))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-30 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NTION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-30/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-30/IS-A/CONDITION
 CL-TEST::CONDITION-30/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-30/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-30/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-30)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81B743E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-30/HANDLER-CASE-1
 CL-TEST::CONDITION-30/HANDLER-CASE-2
 CL-TEST::CONDITION-30/HANDLER-CASE-3
 CL-TEST::COMPUTE-RESTARTS.1
Test CL-TEST::COMPUTE-RESTARTS.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::R CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::ALWAYS (TYPEP CL-TEST::R (FIND-CLASS (QUOTE RESTART))))
Expected value:
          T
Actual value:
          #<Type-Error 81B95CC7> [Actual value: #<error during printing>

 NSTARTS.4
 CL-TEST::COMPUTE-RESTARTS.5
Test CL-TEST::COMPUTE-RESTARTS.6 failed
Form: (RESTART-CASE (LET* ((CL-TEST::RESTARTS (COMPUTE-RESTARTS)) (CL-TEST::P (POSITION (QUOTE CL-TEST::FOO) CL-TEST::RESTARTS :KEY (FUNCTION RESTART-NAME))) (CL-TEST::R (FIND (QUOTE CL-TEST::FOO) CL-TEST::RESTARTS :START (1+ CL-TEST::P) :KEY (FUNCTION RESTART-NAME)))) (INVOKE-RESTART CL-TEST::R)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :START. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPUTE-RESTARTS.7
 CL-TEST::COMPUTE-RESTARTS.8
Test CL-TEST::COMPUTE-RESTARTS.9 failed
Form: (LET ((CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (BLOCK CL-TEST::DONE (CL-TEST::HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (CL-TEST::C) (DECLARE (IGNORE CL-TEST::C)) (LET* ((CL-TEST::RESTARTS (COMPUTE-RESTARTS CL-TEST::C2)) (CL-TEST::RESTARTS :TEST-NOT (FUNCTION EQ) :KEY (FUNCTION RESTART-NAME)))) (RETURN-FROM CL-TEST::DONE (VALUES CL-TEST::R (MAPCAR (FUNCTION RESTART-NAME) CL-TEST::R)))))))) (RESTART-CASE (ERROR "an error") (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::ALSO-BAD))))))
Expected value:
          NIL
          NIL
Actual value:
          (#<Restart CL-TEST::FOO 81BE7F97> #<Restart CL-TEST::FOO 81BE86C7>) [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-BIND.1
 CL-TEST::RESTART-BIND.2
 CL-TEST::RESTART-BIND.3
 CL-TEST::RESTART-BIND.4
 CL-TEST::RESTART-BIND.5
 CL-TEST::RESTART-BIND.6
 CL-TEST::RESTART-BIND.7
 CL-TEST::RESTART-BIND.8
 CL-TEST::RESTART-BIND.9
 CL-TEST::RESTART-BIND.10
 CL-TEST::RESTART-BIND.11
 CL-TEST::RESTART-BIND.12
 CL-TEST::RESTART-BIND.13
 CL-TEST::RESTART-BIND.14
 CL-TEST::RESTART-BIND.15
 CL-TEST::RESTART-BIND.16
 CL-TEST::RESTART-BIND.17
 CL-TEST::RESTART-BIND.18
 CL-TEST::RESTART-BIND.19
 CL-TEST::RESTART-BIND.21
 CL-TEST::RESTART-BIND.22
Test CL-TEST:RROR (RESTART-BIND ((CL-TEST::FOO (FUNCTION (LAMBDA NIL T)))) (INVOKE-RESTART (QUOTE CL-TEST::FOO) (QUOTE CL-TEST::A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RESTART-BIND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (RESTART-BIND ((CL-TEST::FOO (FUNCTION (LAMBDA (CL-TEST::X) CL-TEST::X)))) (INVOKE-RESTART (QUOTE CL-TEST::FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::X)> [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-BIND.ERROR.3
 CL-TEST::RESTART-BIND.23
 CL-TEST::RESTART-BIND.24
 CL-TEST::RESTART-CASE.1
 CL-TEST::RESTART-CASE.2
Test CL-TEST::RESTART-CASE.3 failed
Form: (RESTART-CASE (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E)d value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          CL-TEST::A [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.4
 CL-TEST::RESTART-CASE.5
Test CL-TEST::RESTART-CASE.6 failed
Form: (RESTART-CASE (PROGN (INVOKE-RESTART (QUOTE CL-TEST::FOO)) (QUOTE CL-TEST::BAD)) (CL-TEST::BAR NIL (QUOTE CL-TEST::BAD2)) (CL-TEST::FOO NIL (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD3)))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD3 [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.7
 CL-TEST::RESTART-CASE.8
 CL-TEST::RESTART-CASE.9
 CL-TEST::RESTART-CASE.10
 CL-TEST::RESTART-CASE.11
 CL-TEST::RESTART-CASE.12
 CL-TEST::RESTART-CASE.13
 CL-TEST::RESTART-CASE.14
 CL-TEST::RESTART-CASE.15
 CL-TEST::RESTART-CASE.16
Test CL-TEST::RESTART-CASE.17 failed
Form: (RESTART-CASE (INVOKE-RESTART (QUOTE CL-TEST::FOO)) (CL-TEST::FOO NIL (VALUES (QUOTE CLCL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          CL-TEST::A [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.18
 CL-TEST::RESTART-CASE.19
Test CL-TEST::RESTART-CASE.20 failed
Form: (WITH-OUTPUT-TO-STRING (CL-TEST::S) (RESTART-CASE (LET ((RESTART (FIND-RESTART (QUOTE CL-TEST::FOO))) (*PRINT-ESCAPE* NIL)) (FORMAT CL-TEST::S "~A" RESTART)) (CL-TEST::FOO NIL :REPORT "A report")))
Expected value:
          "A report"
Actual value:
          #<Simple-Type-Error #<System.Internals::String-Output-Stream 81D48C57> fell through ETYPECASE form> [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.21
 CL-TEST::RESTART-CASE.22
 CL-TEST::RESTART-CASE.23
 CL-TEST::RESTART-CASE.24
 CL-TEST::RESTART-CASE.32
 CL-TEST::RESTART-CASE.33
 CL-TEST::RESTART-CASE.34
Test CL-TEST::RESTART-CASE.3Form: (RESTART-CASE (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 4 CL-TEST::FOR CL-TEST::R CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::COLLECT (RESTART-NAME CL-TEST::R)) (CL-TEST::FOO NIL T) (CL-TEST::BAR NIL T) (CL-TEST::FOO NIL (QUOTE CL-TEST::A)) (NIL NIL :REPORT (LAMBDA (CL-TEST::S) (FORMAT CL-TEST::S "Anonymous restart")) 10))
Expected value:
          (CL-TEST::FOO CL-TEST::BAR CL-TEST::FOO NIL)
Actual value:
          (NIL CL-TEST::FOO CL-TEST::BAR CL-TEST::FOO) [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.36
Test CL-TEST::WITH-CONDITION-RESTARTS.1 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C (CL-TEST::I 0)) (VALUES (WITH-CONDITION-RESTARTS (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) (MAKE-CONDITION (QUOTE ERROR))) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) NIL) (SETF CL-TEST::C (INCF CL-TEST::I))) CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::I))
Expected value:
          3
          1
          2
          3
          3
Actual value:
          #<Undefined-Function WRTS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.2 failed
Form: (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (VALUES))
Expected value:
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.3 failed
Form: (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F)))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.4 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (GO 10) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::BAD))) 10 (RETURN-FROM CL-D))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.5 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C (LIST (FIND-RESTART (QUOTE CL-TEST::FOO))) (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-CONDITION-RESTARTS.6
Test CL-TEST::WITH-CONDITION-RESTARTS.7 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (CL-TEST::HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (CL-TEST::C) (INVOKE-RESTART (QUOTE CL-TEST::FOO)))))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C (LIST (FIND-RESTART (QUOTE CL-TEST::FOO))) (SIGNAL CL-TEST::C2)) (CL-TEST::FOO NIL (QUOTE CL-TEST::GOOD))EST::BAD)))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.8 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (PROGN (WITH-CONDITION-RESTARTS CL-TEST::C (LIST (FIND-RESTART (QUOTE CL-TEST::FOO)))) (INVOKE-RESTART (FIND-RESTART (QUOTE CL-TEST::FOO) CL-TEST::C2))) (CL-TEST::FOO NIL (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SIMPLE-RESTART.1
 CL-TEST::WITH-SIMPLE-RESTART.2
Test CL-TEST::WITH-SIMPLE-RESTART.3 failed
Form: (WITH-SIMPLE-RESTART (CL-TEST::FOO "") (VALUES 1 2 3 4 5 6 7 8 9 10))
Expected value:
          1
          2
          3
          4
          5
          6
          7
          8
          9
          10
Actual valueART.4
 CL-TEST::WITH-SIMPLE-RESTART.5
 CL-TEST::WITH-SIMPLE-RESTART.6
 CL-TEST::WITH-SIMPLE-RESTART.7
 CL-TEST::WITH-SIMPLE-RESTART.8
 CL-TEST::ABORT.1
Test CL-TEST::ABORT.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (ABORT CL-TEST::C2)) (ABORT NIL (QUOTE CL-TEST::BAD)) (ABORT NIL (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::ABORT.3
Test CL-TEST::ABORT.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (ABORT NIL)) (ABORT NIL (QUOTE CL-TEST::GOOD)) (ABORT NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-COIL
Test CL-TEST::ABORT.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (ABORT CL-TEST::C2))) CONTROL-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::MUFFLE-WARNING.1
Test CL-TEST::MUFFLE-WARNING.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (MUFFLE-WARNING CL-TEST::C2)) (MUFFLE-WARNING NIL (QUOTE CL-TEST::BAD)) (MUFFLE-WARNING NIL (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::MUFFLE-WARNING.3
Test CL-TEST::MUFFLE-WARNING.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITIDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (MUFFLE-WARNING NIL)) (MUFFLE-WARNING NIL (QUOTE CL-TEST::GOOD)) (MUFFLE-WARNING NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MUFFLE-WARNING.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (MUFFLE-WARNING CL-TEST::C2))) CONTROL-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONTINUE.1
Test CL-TEST::CONTINUE.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS)))UOTE CL-TEST::BAD)) (CONTINUE NIL (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONTINUE.3
Test CL-TEST::CONTINUE.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (CONTINUE NIL)) (CONTINUE NIL (QUOTE CL-TEST::GOOD)) (CONTINUE NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONTINUE.5 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (CONTINUE CL-TEST::C2)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actuest CL-TEST::STORE-VALUE.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (STORE-VALUE 17 CL-TEST::C2)) (STORE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::BAD))) (STORE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::GOOD)))))
Expected value:
          (17 CL-TEST::GOOD)
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::STORE-VALUE.3
Test CL-TEST::STORE-VALUE.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (STORE-VALUE 18 NIL)) (STORE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::GOOD))) (STORE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::BAD)))))
Expected value:
          (18 CL-TEST::GOOD)
Actual value:
          #<Uor during printing>

 NIL
Test CL-TEST::STORE-VALUE.5 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (STORE-VALUE 21 CL-TEST::C2)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::USE-VALUE.1
Test CL-TEST::USE-VALUE.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (USE-VALUE 17 CL-TEST::C2)) (USE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::BAD))) (USE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::GOOD)))))
Expected value:
          (17 CL-TEST::GOOD)
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
 CL-TEST::USE-VALUE.3
Test CL-TEST::USE-VALUE.4 failed
Form: (LEE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (USE-VALUE 18 NIL)) (USE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::GOOD))) (USE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::BAD)))))
Expected value:
          (18 CL-TEST::GOOD)
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-VALUE.5 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (USE-VALUE 21 CL-TEST::C2)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function WITH-CONDITION-RESTARTS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-CONDITION.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TP CL-TEST::IN CL-TEST::*CL-CONDITION-TYPE-SYMBOLS* CL-TEST::FOR CL-TEST::C = (MAKE-CONDITION CL-TEST::TP) UNLESS (AND (TYPEP CL-TEST::C CL-TEST::TP) (TYPEP CL (LIST CL-TEST::TP CL-TEST::C))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named FLOATING-POINT-INEXACT.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-CONDITION.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TP CL-TEST::IN CL-TEST::*CL-CONDITION-TYPE-SYMBOLS* CL-TEST::FOR CLASS = (FIND-CLASS CL-TEST::TP) CL-TEST::FOR CL-TEST::C = (AND CLASS (MAKE-CONDITION CLASS)) UNLESS (OR (NOT CLASS) (AND (TYPEP CL-TEST::C CL-TEST::TP) (TYPEP CL-TEST::C CLASS) (TYPEP CL-TEST::C (QUOTE CONDITION)))) CL-TEST::COLLECT (LIST CL-TEST::TP CL-TEST::C))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F987D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-CONDITION.3 failed
Form: (LET* ((CL-TEST::TP (QUOTE (OR PROGRAM-ERROR TYPE-ERROR))) (CL-TEST::C (MAKE-CONDITION CL-TEST::TP))) (OR (NOT (AND (SUBTYPEP CL-TEST::TP (QUOTE CONDITION)) (OR (SUBTYPEP (QUOTE PROGRAM-ERROR) CL-TEST::TP) (SUBTYPEP (QUOTE TYPE-ERROR) CL-TEST::TP)))) (CL-TEST::NOTNOT-alue:
          T
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function MAKE-INSTANCE 3A624DC>.
Dispatching on class #<Standard-Class CONS 800B2967>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-CONDITION.4 failed
Form: (LET* ((CL-TEST::TP (QUOTE (AND SIMPLE-ERROR TYPE-ERROR))) (CL-TEST::C (MAKE-CONDITION CL-TEST::TP))) (OR (NOT (AND (SUBTYPEP (QUOTE SIMPLE-ERROR) CL-TEST::TP) (SUBTYPEP (QUOTE TYPE-ERROR) CL-TEST::TP) (SUBTYPEP CL-TEST::TP (QUOTE CONDITION)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C CL-TEST::TP))))
Expected value:
          T
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function MAKE-INSTANCE 3A624DC>.
Dispatching on class #<Standard-Class CONS 800B2967>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-CONDITION.ERROR.1
 CL-TEST::CONS-OF-SYMBOLS
 CL-TEST::CONS-WITH-NIL
 CL-TEST::CONS-EQ-EQUAL
 CL-TEST::CONS-EQUAL-LIST
 CL-TEST::CONS.ORDER.1
 CL-TEST::CEST::CONS.ERROR.3
 CL-TEST::CONSP-LIST
 CL-TEST::CONSP-CONS
 CL-TEST::CONSP-NIL
 CL-TEST::CONSP-EMPTY-LIST
 CL-TEST::CONSP-SINGLE-ELEMENT-LIST
 CL-TEST::CONSP-XOR-ATOM-UNIVERSE
 CL-TEST::CONSP-CONS-UNIVERSE
 CL-TEST::CONSP.ORDER.1
 CL-TEST::CONSP.ERROR.1
 CL-TEST::CONSP.ERROR.2
 CL-TEST::ATOM.1
 CL-TEST::ATOM.2
 CL-TEST::ATOM.ORDER.1
 CL-TEST::ATOM.ERROR.1
 CL-TEST::ATOM.ERROR.2
 CL-TEST::CONS.23
 CL-TEST::CONS.24
 CL-TEST::CONS.25
 CL-TEST::CONS.26
 CL-TEST::CONS.27
 CL-TEST::CONS.28
 CL-TEST::CONS.29
 CL-TEST::CONS.30
 CL-TEST::CONS.31
 CL-TEST::CONS.32
 CL-TEST::CONS.33
 CL-TEST::CONS.34
 CL-TEST::CONS.36
 CL-TEST::CONS.37
 CL-TEST::CONS.38
 CL-TEST::CONS.39
 CL-TEST::CONS.40
 CL-TEST::CONS.41
 CL-TEST::CONS.42
 CL-TEST::CONS.43
 CL-TEST::CONS.44
 CL-TEST::CONS.45
 CL-TEST::CONS.46
 CL-TEST::CONS.47
 CL-TEST::CONS.48
 CL-TEST::CONS.49
 CL-TEST::CONS.50
 CL-TEST::CONS.51
 CL-TEST::CONS.52
 CL-TEST::CONS.53
 CL-TEST::CAR.1
 CL-TEST::CAR-NIL
 CL-TEST::CAR.ERROR.1
 CL-TEST::CAR.ERROR.2
 CL-TEST::CAR.ORDER.1
 CL-TEST::CDR.1
 CL-TEST::CDR-NIL
 CL-TEST::CDR.ORDER.1
 CL-TEST::CDR.ERROR.1
 CL-TEST::CDR.ERROR.2
 CL-TEST::CAAR.ERROR.1
 CL-TEST::CAAR.ERROR.2
 CL-TEST::CADR.ERROR.1
 CL-TEST::CADR.ERROR.2
 CL-TEST::CDAR.ERROR.1
 CL-TEST::CDAR.ERROR.2
 CL-TEST::CDDR.ERROR.1
 CL-TEST::CDDR.ERROR.2
 CL-TEST::CAAAR.ERROR.1
 CL-TEST::CAAAR.ERROR.2
 CL-TEST::CAAAR.ERROR.3
 CL-TEST::CAADR.ERROR.1
 CL-TEST::CAADR.ERROR.2
 CL-TEST::CAADR.ERROR.3
 CL-TEST::CADAR.ERROR.1
 CL-TEST::CADAR.ERROR.2
 CL-TEST::CADAR.ERROR.3
 CL-TEST::CADDR.ERROR.1
 CL-TEST::CADDR.ERROR.2
 CL-TEST::CADDR.ERROR.3
 CL-TEST::CDAAR.ERROR.1
 CL-TEST::CDAAR.ERROR.2
 CL-TEST::CDAAR.ERROR.3
 CL-TEST::CDADR.ERROR.1
 CL-TEST::CDADR.ERROR.2
 CL-TEST::CDADR.ERROR.3
 CL-TEST::CDDAR.ERROR.1
 CL-TEST::CDDAR.ERROR.2
 CL-TEST::CDDAR.ERROR.3
 CL-TEST::CDDDR.ERROR.1
 CL-TEST::CDDDR.ERROR.2
 CL-TEST::CDDDR.ERROR.3
 CL-TEST::CAAAAR.ERROR.1
 CL-TEST::CAAAAR.ERROR.2
 CL-TEST::CAAAAR.ERROR.3
 CL-TEST::CAAAAR.ERROR.4
 CL-TEST::CAAADR.ERROR.1
 CL-TEST::CAAADR.ERROR.2
 CL-TEST::CAAADR.ERROR.3
 CL-TEST::CAAADR.ERROR.4
 CL-TEST::CAADAR.ERROR.1
 CL-TEST::CAADAR.ERROR.2
 CL-TEST::CAADAR.ERROR.3
 CL-TEST::CAADAR.ERROR.4
 CL-TEST::CAADDR.ERROR.1
 CL-TEST::CAADDR.ERROR.2
 CL-TEST::CAADDR.ERROR.3
 CL-TEST::CAADDR.ERROR.4
 CL-TEST::CADAAR.ERROR.1
 CL-TEST::CADAAR.ERROR.2
 CL-TEST::CADAAR.ERROR.3
 CL-TEST::CADAAR.ERROR.4
 CL-TEST::CADADR.ERROR.1
 CL-TEST::CADADR.ERROR.2
 CL-TEST::CADADR.ERROR.3
 CL-TEST::CADADR.ERROR.4
 CL-TEST::CADDAR.ERROR.1
 CL-TEST::CADDAR.ERROR.2
 CL-TEST::CADDAR.ERROR.3
 CL-TEST::CADDAR.ERROR.4
 CL-TEST::CADDDR.ERROR.1
 CL-TEST::CADDDR.ERROR.2
 CL-TEST::CADDDR.ERROR.3
 CL-TEST::CADDDR.ERROR.4
 CL-TEST::CDAAAR.ERROR.1
 CL-TEST::CDAAAR.ERROR.2
 CL-TEST::CDAAAR.ERROR.3
 CL-TEST::CDAAAR.ERROR.4
 CL-TEST::CDAADR.ERROR.1
 CL-TEST::CDAADR.ERROR.2
 CL-TEST::CDAADR.ERROR.3
 CL-TEST::CDAADR.ERROR.4
 CL-TEST::CDADAR.ERROR.1
 CL-TEST::CDADAR.ERROR.2
 CL-TEST::CDADAR.ERROR.3
 CL-TEST::CDADAR.ERROR.4
 CL-TEST::CDADDR.ERROR.1
 CL-TEST::CDADDR.ERROR.2
 CL-TEST::CDADDR.ERROR.3
 CL-TEST::CDADDR.ERROR.4
 CL-TEST::CDDAAR.ERROR.1
 CL-TEST::CDDAAR.ERROR.2
 CL-TEST::CDDAAR.ERROR.3
 CL-TEST::CDDAAR.ERROR.4
 CL-TEST::CDDADR.ERROR.1
 CL-TEST::CDDADR.ERROR.2
 CL-TEST::CDDADR.ERROR.3
 CL-TEST::CDDADR.ERROR.4
 CL-TEST::CDDDAR.ERROR.1
 CL-TEST::CDDDAR.ERROR.2
 CL-TEST::CDDDAR.ERROR.3
 CL-TEST::CDDDAR.ERROR.4
 CL-TEST::CDDDDR.ERROR.1
 CL-TEST::CDDDDR.ERROR.2
 CL-TEST::CDDDDR.ERROR.3
 CL-TEST::CDDDDR.ERROR.4
 CL-TEST::CAR-SET-ALT
 CL-TEST::CDR-SET-ALT
 CL-TEST::CAAR-SET-ALT
 CL-TEST::CADR-SET-ALT
 CL-TEST::CDAR-SET-ALT
 CL-TEST::CDDR-SET-ALT
 CL-TEST::CAAAR-SET-ALT
 CL-TEST::CAADR-SET-ALT
 CL-TEST::CADAR-SET-ALT
 CL-TEST::CADDR-SET-ALT
 CL-TEST::CDAAR-SET-ALT
 CL-TEST::CDADR-SET-ALT
 CL-TEST::CDDAR-SET-ALT
 CL-TEST::CDDDR-SET-ALT
 CL-TEST::CAAAAR-SET-ALT
 CL-TEST::CAAADR-SET-ALT
 CL-TEST::CAADAR-SET-ALT
 CL-TEST::CAADDR-SET-ALT
 CL-TEST::CADAAR-SET-ALT
 CL-TEST::CADADR-SET-ALT
 CL-TEST::CADDAR-SET-ALT
 CL-TEST::CADDDR-SET-ALT
 CL-TEST::CDAAAR-SET-ALT
 CL-TEST::CDAADR-SET-ALT
 CL-TEST::CDADAR-SET-ALT
 CL-TEST::CDADDR-SET-ALT
 CL-TEST::CDDAAR-SET-ALT
 CL-TEST::CDDADR-SET-ALT
 CL-TEST::CDDDAR-SET-ALT
 CL-TEST::CDDDDR-SET-ALT
 CL-TEST::FIRST-SET-ALT
 CL-TEST::SECOND-SET-ALT
 CL-TEST::THIRD-SET-ALT
 CL-TEST::FOURTH-SET-ALT
 CL-TEST::FIFTH-SET-ALT
 CL-TEST::SIXTH-SET-ALT
 CL-TEST::SEVENTH-SET-ALT
 CL-TEST::EIGHTH-SET-ALT
 CL-TEST::NINTH-SET-ALT
 CL-TEST::TENTH-SET-ALT
 CL-TEST::RPLACA.1
 CL-TEST::RPLACA.ORDER.1
 CL-TEST::RPLACA.ERROR.1
 CL-TEST::RPLACA.ERROR.2
 CL-TEST::RPLACA.ERROR.3
 CL-TEST::RPLACA.ERROR.4
 CL-TEST::RPLACA.ERROR.6
 CL-TEST::RPLACD.1
 CL-TEST::RPLACD.ORDER.1
 CL-TEST::RPLACD.ERROR.1
 CL-TEST::RPLACD.ERROR.2
 CL-TEST::RPLACD.ERROR.3
 CL-TEST::RPLACD.ERROR.4
 CL-TEST::RPLACD.ERROR.6
Test CL-TEST::COPY-TREE.1 failed
Form: (LET* ((CL-TEST::X (CONS (QUOTE CL-TEST::A) (LIST (CONS (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CONS 1 1.2) (LIST (LIST "abcde" (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT (CONS (QUOTE CL-TEST::E) (QUOTE CL-TEST::F)))) (QUOTE CL-TEST::G))))) (CL-TEST::Y (COPY-TREE CL-TEST::X))) (CL-TEST::CHECK-CONS-COPY CL-TEST::X CL-TEST::Y))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.2 failed
Form: (LET* ((CL-TEST::X (COPY-LIST CL-TEST:*UNIVERSE*)) (CL-TEST::Y (COPY-TREE CL-TEST::X))) (CL-TEST::CHECK-CONS-COPY CL-TEST::X CL-TEST::Y))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (COPY-TREE (PROGN (INCF CL-TEST::I) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))) CL-TEST::I))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          1
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (CO (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.FOLD.2 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (COPY-TREE (QUOTE (CL-TEST::A))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.FOLD.3 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-TREE) PROGRAM-ERROR)
Expected val value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-TREE (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.1 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE ((CL-TEST::A CL-TEST::B) CL-TEST::G (CL-TEST::D CL-TEST::E 10 CL-TEST::G CL-TEST::H) 15 . CL-TEST::G)) (QUOTE ((CL-TEST::E . CL-TEST::E2) (CL-TEST::G . 17))))
Expected value:
          ((CL-TEST::A CL-TEST::B) 17 (CL-TEST::D CL-TEST::E2 10 17 CL-TEST::H) 15 . 17)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.2 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE (CL-TEST::F6 10 (CL-TEST::F4 (CL-TEST::F3 (CL-TEST::F1 CL-TEST::A CL-TEST::B) (CL-TEST::F1 CL-TEST::A CL-TEST::P)) (CL-TEST::F2 CL-TEST::A CL-TEST::B)))) (QUOTE (((CL-TEST::F1 CL-TEST::A CL-TEST::B) CL-TEST::F2 CL-TEST::A CL CL-TEST::B))) :TEST (FUNCTION EQUAL))
Expected value:
          (CL-TEST::F6 10 (CL-TEST::F4 (CL-TEST::F3 (CL-TEST::F2 CL-TEST::A CL-TEST::B) (CL-TEST::F1 CL-TEST::A CL-TEST::P)) (CL-TEST::F1 CL-TEST::A CL-TEST::B)))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.3 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE (10 ((10 20 (CL-TEST::A CL-TEST::B CL-TEST::C) 30)) (((10 20 30 40))))) (QUOTE ((30 . "foo"))))
Expected value:
          (10 ((10 20 (CL-TEST::A CL-TEST::B CL-TEST::C) "foo")) (((10 20 "foo" 40))))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.4 failed
Form: (CL-TEST::CHECK-SUBLIS (SUBLIS (COPY-TREE (QUOTE ((CL-TEST::A . 2) (CL-TEST::B . 4) (CL-TEST::C . 1)))) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::A CL-TEST::D CL-TEST::B) CL-TEST::F)))) (QUOTE ((T . "yes"))) :KEY (FUNCTION (LAGER)) (EVENP CL-TEST::X)))))
Expected value:
          ("yes" "yes" 1 CL-TEST::D CL-TEST::E ("yes" "yes" 1 "yes" CL-TEST::D "yes") CL-TEST::F)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.5 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE ("fee" (("fee" "Fie" "foo")) CL-TEST::FIE ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))))
Expected value:
          ("fee" (("fee" "Fie" "foo")) CL-TEST::FIE ("fee" "fie"))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.6 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE ("fee" CL-TEST::FIE (("fee" "Fie" "foo") 1) ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))) :TEST (QUOTE EQUAL))
Expected value:
          ("fee" CL-TEST::FIE (("fee" "Fie" "foo") 1) ("fee" #\f))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual val-TEST::A CL-TEST::B) (CL-TEST::Z "bb" CL-TEST::D) ((CL-TEST::X . "aa")))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "aa")) . 1) ((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "bb")) . 2))) :TEST (QUOTE EQUAL) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (CONSP CL-TEST::X) (CAR CL-TEST::X) (QUOTE CL-TEST::*NOT-PRESENT*)))))
Expected value:
          (1 (CL-TEST::Z . 2) ((CL-TEST::X . "aa")))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.8 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE (1 2 CL-TEST::A CL-TEST::B)) (QUOTE ((1 . 2) (CL-TEST::A . CL-TEST::B))) :KEY NIL)
Expected value:
          (2 2 CL-TEST::B CL-TEST::B)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.9 failed
Form: (CL-TEST::CHECK-SUBLIS (LIST 0 3 8 20) (QUOTE ((1 . CL-TEST::X) (5 . CL-TEST::Y) (10 . CL-TEST::Z))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (REALP CL-TEST::X) TEST::X CL-TEST::Y CL-TEST::Z 20)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.10 failed
Form: (CL-TEST::CHECK-SUBLIS (LIST 0 3 8 20) (QUOTE ((1 . CL-TEST::X) (5 . CL-TEST::Y) (10 . CL-TEST::Z))) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (NOT (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y))))))
Expected value:
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 20)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBLIS.TEST-AND-TEST-NOT.1
 CL-TEST::SUBLIS.TEST-AND-TEST-NOT.2
Test CL-TEST::SUBLIS.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBLIS (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . CL-TEST::Z)))) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) :TEST (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION EQL)) I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::Z CL-TEST::B CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBLIS (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . CL-TEST::Z)))) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL)))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::Z CL-TEST::B CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during pL (QUOTE CL-TEST::A) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.2 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.3 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.4 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHE
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.5 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.KEYWORDS.6 failed
Form: (SUBLIS (QUOTE ((1 . CL-TEST::A))) (LIST 0 1 2) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (NUMBERP CL-TEST::X) (1+ CL-TEST::X) CL-TEST::X))) :KEY (FUNCTION IDENTITY))
Expected value:
          (CL-TEST::A 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :KEY. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBLIS.ERROR.1
 CL-TEST::SUBLIS.ERROR.2
Test CL-TEST::SUBLIS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS NIL (QUOTE CL-TEST::A) :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS NIL (QUOTE CL-TEST::A) :BAD-KEYWORD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD-KEYWORD. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :TEST. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :KEY. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :TEST-NOT. Expected one of NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBLIS.ERROR.8
Test CL-TEST::SUBLIS.SHARED failed
Form: (LET* ((CL-TEST::SHARED-PIECE (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (CL-TEST::A (LIST CL-TEST::SHARED-PIECE CL-TEST::SHARED-PIECE))) (CL-TEST::CHECK-SUBLIS CL-TEST::A (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::B . CL-TEST::A)))))
Expected value:
          ((CL-EST::A))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.1 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE ((CL-TEST::A CL-TEST::B) CL-TEST::G (CL-TEST::D CL-TEST::E 10 CL-TEST::G CL-TEST::H) 15 . CL-TEST::G)) (QUOTE ((CL-TEST::E . CL-TEST::E2) (CL-TEST::G . 17))))
Expected value:
          ((CL-TEST::A CL-TEST::B) 17 (CL-TEST::D CL-TEST::E2 10 17 CL-TEST::H) 15 . 17)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.2 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE (CL-TEST::F6 10 (CL-TEST::F4 (CL-TEST::F3 (CL-TEST::F1 CL-TEST::A CL-TEST::B) (CL-TEST::F1 CL-TEST::A CL-TEST::P)) (CL-TEST::F2 CL-TEST::A CL-TEST::B)))) (QUOTE (((CL-TEST::F1 CL-TEST::A CL-TEST::B) CL-TEST::F2 CL-TEST::A CL-TEST::B) ((CL-TEST::F2 CL-TEST::A CL-TEST::B) CL-TEST::F1 CL-TEST::A CL-TEST::B))) :TEST (FUNCTION EQUAL))
Expected value:
          (CL-TEST::F6 10 (CL-TEST::F4 (CL-TEST::F3 (CL-TEST::FT::P)) (CL-TEST::F1 CL-TEST::A CL-TEST::B)))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.3 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE (10 ((10 20 (CL-TEST::A CL-TEST::B CL-TEST::C) 30)) (((10 20 30 40))))) (QUOTE ((30 . "foo"))))
Expected value:
          (10 ((10 20 (CL-TEST::A CL-TEST::B CL-TEST::C) "foo")) (((10 20 "foo" 40))))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.4 failed
Form: (CL-TEST::CHECK-NSUBLIS (NSUBLIS (COPY-TREE (QUOTE ((CL-TEST::A . 2) (CL-TEST::B . 4) (CL-TEST::C . 1)))) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::A CL-TEST::D CL-TEST::B) CL-TEST::F)))) (QUOTE ((T . "yes"))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (TYPEP CL-TEST::X (QUOTE INTEGER)) (EVENP CL-TEST::X)))))
Expected value:
          ("yes" "yes" 1 CL-TEST::D CL-TEST::E ("yes" "yes" 1 "yes" CL-        #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.5 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE ("fee" (("fee" "Fie" "foo")) CL-TEST::FIE ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))))
Expected value:
          ("fee" (("fee" "Fie" "foo")) CL-TEST::FIE ("fee" "fie"))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.6 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE ("fee" CL-TEST::FIE (("fee" "Fie" "foo") 1) ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))) :TEST (QUOTE EQUAL))
Expected value:
          ("fee" CL-TEST::FIE (("fee" "Fie" "foo") 1) ("fee" #\f))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.7 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE (("aa" CL-TEST::A CL-TEST::B) (CL-TEST::Z "bb" CL-TESTTERNALS::BQ-COMMA (COPY-SEQ "aa")) . 1) ((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "bb")) . 2))) :TEST (QUOTE EQUAL) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (CONSP CL-TEST::X) (CAR CL-TEST::X) (QUOTE CL-TEST::*NOT-PRESENT*)))))
Expected value:
          (1 (CL-TEST::Z . 2) ((CL-TEST::X . "aa")))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.8 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :BAD-KEYWORD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.9 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE (1 2 CL-TEST::A CL-TEST::B)) (QUOTE ((1 . 2) (CL-TEST::A . CL-TEST::B))) :KEY NIL)
Expected value:
          (2 2 CL-TEST::B CL-TEST::B)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.10 failed
Form: (CL-TEST::CHECK-NSUBLIS (LIST 0 3 8 20) (Q) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y)))))
Expected value:
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 20)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.11 failed
Form: (CL-TEST::CHECK-NSUBLIS (LIST 0 3 8 20) (QUOTE ((1 . CL-TEST::X) (5 . CL-TEST::Y) (10 . CL-TEST::Z))) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (NOT (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y))))))
Expected value:
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 20)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::NSUBLIS.TEST-AND-TEST-NOT.1
 CL-TEST::NSUBLIS.TEST-AND-TEST-NOT.2
Test CL-TEST::NSUBLIS.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBLIS (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . CL-TEST::Z)))) (PROGN (SETF CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) :TEST (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::Z CL-TEST::B CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBLIS (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . CL-TEST::Z)))) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL)))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-       2
          3
          4
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.1 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.2 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.3 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.4 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.5 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.KEYWORDS.6 failed
Form: (NSUBLIS (QUOTE ((1 . CL-TEST::A))) (LIST 0 1 2) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (NUMBERP CL-TEST::X) (1+ CL-TEST::X) CL-TEST::X))) :KEY (FUNCTION IDENTITY))
Expected value:
          (CL-TEST::A 1 2)
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS NIL (QUOTE CL-TEST::A) :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS NIL (QUOTE CL-TEST::A) :BAD-KEYWORD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.6 failEST:SIGNALS-ERROR (NSUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS (QUOTE ((CL-TEST::A . 1) . CL-TEST::BAD)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBLIS> [Actual value: #<error during print CL-TEST::SUBST.1 failed
Form: (CL-TEST::CHECK-SUBST "Z" 30 (COPY-TREE CL-TEST::*SUBST-TREE-1*))
Expected value:
          (10 ("Z" 20 10) (20 10) (10 20 "Z" 40))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.2 failed
Form: (CL-TEST::CHECK-SUBST "A" 0 (COPY-TREE CL-TEST::*SUBST-TREE-1*))
Expected value:
          (10 (30 20 10) (20 10) (10 20 30 40))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.3 failed
Form: (CL-TEST::CHECK-SUBST "Z" 100 (COPY-TREE CL-TEST::*SUBST-TREE-1*) :TEST-NOT (FUNCTION EQL))
Expected value:
          "Z"
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.4 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::GRAPE) (QUOTE CL-TEST::DICK) (QUOTE (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK))))
Expected value:
          (CL-TEST::MELVILLE CL-TEST::WROue:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.5 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::CHA-CHA-CHA) (QUOTE NIL) (QUOTE (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK))))
Expected value:
          (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK . CL-TEST::CHA-CHA-CHA) . CL-TEST::CHA-CHA-CHA)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.6 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE (1 2)) (QUOTE (CL-TEST::FOO . CL-TEST::BAR)) (QUOTE ((CL-TEST::FOO . CL-TEST::BAZ) (CL-TEST::FOO . CL-TEST::BAR) (CL-TEST::BAR . CL-TEST::FOO) (CL-TEST::BAZ CL-TEST::FOO . CL-TEST::BAR))) :TEST (FUNCTION EQUAL))
Expected value:
          ((CL-TEST::FOO . CL-TEST::BAZ) (1 2) (CL-TEST::BAR . CL-TEST::FOO) (CL-TEST::BAZ 1 2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.7 failed
FT (QUOTE CL-TEST::FOO) "aaa" (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (AND (NUMBERP CL-TEST::X) (EVENP CL-TEST::X)) "aaa" NIL))) :TEST (FUNCTION STRING=))
Expected value:
          ((1 . CL-TEST::FOO) (CL-TEST::FOO . 5) (CL-TEST::FOO 7 CL-TEST::FOO 9 CL-TEST::FOO (11 CL-TEST::FOO)))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.8 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::FOO) NIL (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (AND (NUMBERP CL-TEST::X) (EVENP CL-TEST::X)) (COPY-SEQ "aaa") NIL))) :TEST-NOT (FUNCTION EQUAL))
Expected value:
          ((1 . CL-TEST::FOO) (CL-TEST::FOO . 5) (CL-TEST::FOO 7 CL-TEST::FOO 9 CL-TEST::FOO (11 CL-TEST::FOO)))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.9 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)T::B CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::B))) :KEY NIL)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::A)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.10 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y)))))
Expected value:
          (1 2 10 CL-TEST::X CL-TEST::X 4)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.11 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (NOT (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y))))))
Expected value:
          (1 2 10 CL-TEST::X CL-TEST::X 4)
Actual value:
          #<Undefined-Function COPY-TREE> [Act CL-TEST::SUBSET.TEST-AND-TEST-NOT.2
Test CL-TEST::SUBST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBST (PROGN (SETF CL-TEST::V (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE ((10 CL-TEST::A . CL-TEST::A) CL-TEST::A CL-TEST::B CL-TEST::C ((CL-TEST::A)) CL-TEST::Z)))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL))) CL-TEST::I CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          ((10 CL-TEST::B . CL-TEST::B) CL-TEST::B CL-TEST::B CL-TEST::C ((CL-TEST::B)) CL-TEST::Z)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::V CL-TEST:UBST (PROGN (SETF CL-TEST::V (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE ((10 CL-TEST::A . CL-TEST::A) CL-TEST::A CL-TEST::B CL-TEST::C ((CL-TEST::A)) CL-TEST::Z)))) :TEST-NOT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          ((10 CL-TEST::B . CL-TEST::B) CL-TEST::B CL-TEST::B CL-TEST::C ((CL-TEST::B)) CL-TEST::Z)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBST.FOLD.1
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.1 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
 :
          #<System.Internals::Invalid-Arguments 81EC1CD7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.2 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 81ECD6E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.3 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 81ED8E17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.4 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T :BAD T)
Expectual value:
          #<System.Internals::Invalid-Arguments 81EE4867> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.5 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 81EF0737> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.KEYWORDS.6 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :TEST (FUNCTION EQ) :TEST (COMPLEMENT (FUNCTION EQ)))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 81EFCD87> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBST.ERROR.1
 CL-TEST::SUBST.ERROR.2
 CL-TEST::SUBST.ERROR.3
 CL-TEST::SUBST.ERROR.4
 CL-TEST::SUBST.ERROR.5
 CL-TEST::SU-TEST::SUBST.ERROR.7
 CL-TEST::SUBST.ERROR.8
 CL-TEST::SUBST.ERROR.9
 CL-TEST::SUBST.ERROR.10
Test CL-TEST::SUBST-IF.1 failed
Form: (CL-TEST::CHECK-SUBST-IF (QUOTE CL-TEST::A) (FUNCTION CONSP) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.2 failed
Form: (CL-TEST::CHECK-SUBST-IF 17 (COMPLEMENT (FUNCTION LISTP)) (QUOTE (CL-TEST::A (CL-TEST::A CL-TEST::B) (CL-TEST::A CL-TEST::C CL-TEST::D) (CL-TEST::A NIL CL-TEST::E CL-TEST::F CL-TEST::G))))
Expected value:
          (17 (17 17) (17 17 17) (17 NIL 17 17 17))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.3 failed
Form: (CL-TEST::CHECK-SUBST-IF (QUOTE (CL-TEST::Z)) (COMPLEMENT (FUNCTION CONSP)) (QUOTE (CL-TEST::A (CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D CL-TEST::E) (CL-TEST::F CL-TEST::G CL-TEST::H
Expected value:
          ((CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) CL-TEST::Z)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.4 failed
Form: (CL-TEST::CHECK-SUBST-IF (QUOTE CL-TEST::B) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))) :KEY (FUNCTION LISTP))
Expected value:
          CL-TEST::B
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.5 failed
Form: (CL-TEST::CHECK-SUBST-IF 4 (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X 1))) (QUOTE ((1 3) (1) (1 10 20 30) (1 3 CL-TEST::X CL-TEST::Y))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (CONSP CL-TEST::X) (CAR CL-TEST::X)))))
Expected value:
          (4 4 4 4)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during: (CL-TEST::CHECK-SUBST-IF (QUOTE CL-TEST::A) (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X (QUOTE CL-TEST::B)))) (QUOTE ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C) (CL-TEST::D))) :KEY NIL)
Expected value:
          ((CL-TEST::A) (CL-TEST::A) (CL-TEST::C) (CL-TEST::D))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.7 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBST-IF (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X (QUOTE CL-TEST::B))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 2 CL-TEST::A CL-TEST::B CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 CL-TEST::A CL-TEST::A CL-TEST::C)
          4
          1
          2
          3
          4
Acng printing>

 NIL
Test CL-TEST::SUBST-IF.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (SUBST-IF (QUOTE CL-TEST::X) (QUOTE NUMBERP) (QUOTE (CL-TEST::A CL-TEST::B 3 (4) CL-TEST::C CL-TEST::D . 12))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.1 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.2 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.3 fHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.4 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.5 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.KEYWORDS.6 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) (LIST (QUOTE CL-TEST::A) NIL (QUOTE CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.1 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT (QUOTE (CL-TEST::X)) (QUOTE CONSP) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))))
Expected value:
          ((CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) (CL-TEST::X) CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) (CL-TEST::X) (CL-TEST::X) CL-TEST::X) CL-TEST:ue:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.2 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT (QUOTE CL-TEST::A) (COMPLEMENT (FUNCTION LISTP)) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.3 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT (QUOTE CL-TEST::C) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))) :KEY (COMPLEMENT (FUNCTION LISTP)))
Expected value:
          CL-TEST::C
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.4 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT 40 (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X 17)))) (QUOTE ((17) (17 22) (17 22 31) (17 21 34 54))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (CONSP CL-TEST::X) (CAR CL-   #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.5 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X (QUOTE CL-TEST::B))))) (QUOTE ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C) (CL-TEST::D))) :KEY NIL)
Expected value:
          ((CL-TEST::A) (CL-TEST::A) (CL-TEST::C) (CL-TEST::D))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.7 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBST-IF-NOT (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X (QUOTE CL-TEST::B)))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 2 CL-TEST::A CL-TEST::B CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TES        2
          3
          4
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION CONSP) (QUOTE ((1 . 2) 3 . 4))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.1 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.2 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          .ALLOW-OTHER-KEYS.3 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.4 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.5 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.KEYWORDS.6 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE CL-TEST::B)))
Expected value:
    lue: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF-Nual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) (LIST E CL-TEST::A) NIL (QUOTE CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.1 failed
Form: (CL-TEST::CHECK-NSUBST "Z" 30 (COPY-TREE CL-TEST::*NSUBST-TREE-1*))
Expected value:
          (10 ("Z" 20 10) (20 10) (10 20 "Z" 40))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.2 failed
Form: (CL-TEST::CHECK-NSUBST "A" 0 (COPY-TREE CL-TEST::*NSUBST-TREE-1*))
Expected value:
          (10 (30 20 10) (20 10) (10 20 30 40))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.3 failed
Form: (CL-TEST::CHECK-NSUBST "Z" 100 (COPY-TREE CL-TEST::*NSUBST-TREE-1*) :TEST-NOT (FUNCTION EQL))
Expected value:
          "Z"
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST:m: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::GRAPE) (QUOTE CL-TEST::DICK) (QUOTE (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK))))
Expected value:
          (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::GRAPE))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.5 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::CHA-CHA-CHA) (QUOTE NIL) (QUOTE (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK))))
Expected value:
          (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK . CL-TEST::CHA-CHA-CHA) . CL-TEST::CHA-CHA-CHA)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.6 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE (1 2)) (QUOTE (CL-TEST::FOO . CL-TEST::BAR)) (QUOTE ((CL-TEST::FOO . CL-TEST::BAZ) (CL-TEST::FOO . CL-TEST::BAR) (CL-TEST::BAR . CL-TEST::FOO) (CL-TEST::BAZ CL-TEST::FOO . CL-TEST::BAR))) :TEST (FUNCTION EQCL-TEST::FOO . CL-TEST::BAZ) (1 2) (CL-TEST::BAR . CL-TEST::FOO) (CL-TEST::BAZ 1 2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.7 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::FOO) "aaa" (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (AND (NUMBERP CL-TEST::X) (EVENP CL-TEST::X)) "aaa" NIL))) :TEST (FUNCTION STRING=))
Expected value:
          ((1 . CL-TEST::FOO) (CL-TEST::FOO . 5) (CL-TEST::FOO 7 CL-TEST::FOO 9 CL-TEST::FOO (11 CL-TEST::FOO)))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.8 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::FOO) NIL (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (AND (NUMBERP CL-TEST::X) (EVENP CL-TEST::X)) (COPY-SEQ "aaa") NIL))) :TEST-NOT (FUNCTION EQUAL))
Expected value:
          ((1 . CL-TEST::FOO) (CL-TEST::FOO . 5) (CL-TEST::FOO e:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.9 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::B))) :KEY NIL)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::A)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.10 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y)))))
Expected value:
          (1 2 10 CL-TEST::X CL-TEST::X 4)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.11 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST-NOT (FUNCTION (L)))
Expected value:
          (1 2 10 CL-TEST::X CL-TEST::X 4)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::NSUBSET.TEST-AND-TEST-NOT.1
 CL-TEST::NSUBSET.TEST-AND-TEST-NOT.2
Test CL-TEST::NSUBST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBST (PROGN (SETF CL-TEST::V (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE ((10 CL-TEST::A . CL-TEST::A) CL-TEST::A CL-TEST::B CL-TEST::C ((CL-TEST::A)) CL-TEST::Z)))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL))) CL-TEST::I CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          ((10 CL-TEST::B . CL-TEST::B) CL-TEST::B CL-TEST::B CL-TEST::C ((CL-TEST::B)) CL-TEST::Z)
          5
          1
          2
          3
 defined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBST (PROGN (SETF CL-TEST::V (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE ((10 CL-TEST::A . CL-TEST::A) CL-TEST::A CL-TEST::B CL-TEST::C ((CL-TEST::A)) CL-TEST::Z)))) :TEST-NOT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          ((10 CL-TEST::B . CL-TEST::B) CL-TEST::B CL-TEST::B CL-TEST::C ((CL-TEST::B)) CL-TEST::Z)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHE (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.2 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.3 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.4 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE  (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.5 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.KEYWORDS.6 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :TEST (FUNCTION EQ) :TEST (COMPLEMENT (FUNCTION EQ)))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST)        T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) NIL :TEST) PROGRAM-ERROR)
Expected value:
      <Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :KEY (FUNCTION EQUAL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.1 failed
Form: (CL-TEST::CHECK-NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION CONSP) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.2 failed
Form: (CL-TEST::CHECK-NSUBST-IF 17 (COMPLEMENT (FUNCTION LISTP)) (QUOTE (CL-TEST::A (CL-TEST::A CL-TEST::B) (CL-TEST::A CL-TETEST::A NIL CL-TEST::E CL-TEST::F CL-TEST::G))))
Expected value:
          (17 (17 17) (17 17 17) (17 NIL 17 17 17))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.3 failed
Form: (CL-TEST::CHECK-NSUBST-IF (QUOTE (CL-TEST::Z)) (COMPLEMENT (FUNCTION CONSP)) (QUOTE (CL-TEST::A (CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D CL-TEST::E) (CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I))))
Expected value:
          ((CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) CL-TEST::Z)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.4 failed
Form: (CL-TEST::CHECK-NSUBST-IF (QUOTE CL-TEST::B) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))) :KEY (FUNCTION LISTP))
Expected value:
          CL-TEST::B
Actual value:
     rror during printing>

 NIL
Test CL-TEST::NSUBST-IF.5 failed
Form: (CL-TEST::CHECK-NSUBST-IF 4 (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X 1))) (QUOTE ((1 3) (1) (1 10 20 30) (1 3 CL-TEST::X CL-TEST::Y))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (CONSP CL-TEST::X) (CAR CL-TEST::X)))))
Expected value:
          (4 4 4 4)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.6 failed
Form: (CL-TEST::CHECK-NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X (QUOTE CL-TEST::B)))) (QUOTE ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C) (CL-TEST::D))) :KEY NIL)
Expected value:
          ((CL-TEST::A) (CL-TEST::A) (CL-TEST::C) (CL-TEST::D))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.7 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-ST::NSUBST-IF.8 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBST-IF (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X (QUOTE CL-TEST::B))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 2 CL-TEST::A CL-TEST::B CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 CL-TEST::A CL-TEST::A CL-TEST::C)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.1 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
TestUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.3 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.4 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.5 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printind
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.4 failed
Form: (CL-TEIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error ng>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) (LIST (QUOTE CL-TEST::A) NIL (QUOTE CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.1 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT (QUOTE (CL-TEST::X)) (QUOTE CONSP) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))))
Expected value:
          ((CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) (CL-TEST::X) CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) (CL-TEST::X) (CL-TEST::X) CL-TEST::X) CL-TEST::X)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.2 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT (QUOTE CL-TEST::A) (COMPLEMENT (FUNCTION LISTP)) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          CL-TEST::A
      #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.3 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT (QUOTE CL-TEST::C) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))) :KEY (COMPLEMENT (FUNCTION LISTP)))
Expected value:
          CL-TEST::C
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.4 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT 40 (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X 17)))) (QUOTE ((17) (17 22) (17 22 31) (17 21 34 54))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (CONSP CL-TEST::X) (CAR CL-TEST::X)))))
Expected value:
          (40 40 40 40)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.5 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X (QUOTE CL-TEST::B))))) (QUOTE ((CLvalue:
          ((CL-TEST::A) (CL-TEST::A) (CL-TEST::C) (CL-TEST::D))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.6 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.7 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBST-IF-NOT (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X (QUOTE CL-TEST::B)))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 2 CL-TEST::A CL-TEST::B CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 CL-TEST::A CL-Ttual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.1 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.2 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.3 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.4 failed
Form: (NSUB T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.5 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.KEYWORDS.6 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.E2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual v #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) (LIST (QUOTE CL-TEST::A) NIL (QUOTE CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSUBST-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.1 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EEST::A) (QUOTE CL-TEST::A)))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.2 failed
Form: (TREE-EQUAL (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.3 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.4 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actualprinting>

 NIL
Test CL-TEST::TREE-EQUAL.5 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL 1 2 :TEST (FUNCTION <)))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.6 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL 1 2 :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (VALUES (< CL-TEST::X CL-TEST::Y) T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.7 failed
Form: (TREE-EQUAL 1 2 :TEST (FUNCTION >))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.8 failed
Form: (TREE-EQUAL (LIST 1) 2 :TEST (CONSTANTLY T))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.9 failed
Form: (TREE-EQUAL (LISTCL-TEST::X CL-TEST::Y) (OR (AND (CONSP CL-TEST::X) (CONSP CL-TEST::Y)) (EQL CL-TEST::X CL-TEST::Y)))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.10 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE (10 20 . 30)) (QUOTE (11 22 . 34)) :TEST (FUNCTION <)))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.11 failed
Form: (LET* ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (CL-TEST::Y (LIST CL-TEST::X CL-TEST::X)) (CL-TEST::Z (LIST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))))) (CL-TEST::NOTNOT-MV (TREE-EQUAL CL-TEST::Y CL-TEST::Z)))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.12 failed
Form: (TREE-EQUAL (QUOTE CL-TEST::A) (Q-TEST::B)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.13 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A)) (QUOTE (CL-TEST::A CL-TEST::B)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.14 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.15 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (CL-TEST::Y (VECTOR (QUOTE CL-TEST::A) (QUOTE (QUOTE CL-TEST::B)) (QUOTE CL-TEST::C)))) (TREE-EQUAL CL-TEST::X CL-TEST::Y))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREST::Y (COPY-SEQ ""))) (TREE-EQUAL CL-TEST::X CL-TEST::Y))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
 CL-TEST::TREE-EQUAL.TEST-AND-TEST-NOT.1
 CL-TEST::TREE-EQUAL.TEST-AND-TEST-NOT.2
Test CL-TEST::TREE-EQUAL.ALLOW-OTHER-KEYS.1 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :ALLOW-OTHER-KEYS NIL))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ALLOW-OTHER-KEYS.2 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS NIL :TEST (FUNCTION EQL))
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ALLOW-OTHER-KEYS.3 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (LISTLOW-OTHER-KEYS T :FOO T)
Expected value:
          NIL
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ALLOW-OTHER-KEYS.4 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.KEYWORDS.1 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE (CL-TEST::A . CL-TEST::B)) (QUOTE (CL-TEST::B . CL-TEST::A)) :TEST (COMPLEMENT (FUNCTION EQL)) :TEST (FUNCTION EQL)))
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL>inting>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A CL-TEST::B)) (GENSYM) T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A CL-TEST::B)) (GENSYM) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A CL-TEST::B)) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y CL-TEST::Z) (EQ CL-TEST::X CL-TEST::Y)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function TREE-EQUAL> [Actual value: #<error during printing>

 NIL
 CL-TEST::COPY-LIST.1
Test CL-TEST::COPY-LIST.2 failed
Form: (CL-TEST::CHECK-COPY-LIST (QUOTE (CL-TEST::A . CL-TEST::B)))
Expected value:
          (CL-TEST::A . CL-TEST::B)
Actual value:
          #<Type-Error C1D52007> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-LIST.3 failed
Form: (CL-TEST::CHECK-COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C . CL-TEST::D)))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C . CL-TEST::D)
Actual valu [Actual value: #<error during printing>

 NIL
 CL-TEST::COPY-LIST.4
 CL-TEST::COPY-LIST.FOLD.1
Test CL-TEST::COPY-LIST.FOLD.2 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (COPY-LIST (QUOTE (CL-TEST::A . CL-TEST::B))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1D68527> [Actual value: #<error during printing>

 NIL
 CL-TEST::COPY-LIST.ERROR.1
 CL-TEST::COPY-LIST.ERROR.2
 CL-TEST::LIST.1
 CL-TEST::LIST.2
 CL-TEST::LIST.ORDER.1
 CL-TEST::LIST.ORDER.2
 CL-TEST::LIST.ORDER.3
 CL-TEST::LIST.FOLD.1
 CL-TEST::LIST.FOLD.2
 CL-TEST::LIST.FOLD.3
 CL-TEST::LIST*.1
 CL-TEST::LIST*.2
 CL-TEST::LIST-LIST*.1
 CL-TEST::LIST*.3
 CL-TEST::LIST*.ORDER.1
 CL-TEST::LIST*.ORDER.2
 CL-TEST::LIST*.FOLD.1
 CL-TEST::LIST*.FOLD.2
 CL-TEST::LIST*.FOLD.3
 CL-TEST::LIST-LENGTH-NIL
 CL-TEST::LIST-LENGTH-LIST
 CL-TEST::LIST-LENGTH-CIRCULAR-LIST
 CL-TEST::LIST-LENGTH.ORDER.1
Test CL-TEST::LIST-LENGTH.4 faileLENGTH (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          3
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL0
Test CL-TEST::LIST-LENGTH.ERROR.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN (LIST (QUOTE CL-TEST::A) 1 1.0 #\w (MAKE-ARRAY (QUOTE (10))) (QUOTE (CL-TEST::A CL-TEST::B . CL-TEST::C)) (SYMBOL-PACKAGE (QUOTE CONS))) COUNT (NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) (LIST-LENGTH CL-TEST::X))))))
Expected value:
          0
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::LIST-LENGTH.ERROR.2
 CL-TEST::LIST-LENGTH.ERROR.3
 CL-TEST::LIST-LENGTH.ERROR.4
 CL-TEST::LIST-LENGTH.ERROR.5
 CL-TEST::LIST-LENGTH-SYMBOL
Test CL-TEST::LIST-LENGTH-DOTTED-LIST failed
Form: (CL-TEST:SIGNALS-ERROR (LIST-LENGTH (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D . CL-TEST::E)))) TYPE-ERROR)
Expected v:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::LISTP-NIL
 CL-TEST::LISTP-SYMBOL
 CL-TEST::LISTP-SINGLETON-LIST
 CL-TEST::LISTP-CIRCULAR-LIST
 CL-TEST::LISTP-LONGER-LIST
 CL-TEST::LISTP-UNIVERSE
 CL-TEST::LISTP.ORDER.1
 CL-TEST::LISTP.ERROR.1
 CL-TEST::LISTP.ERROR.2
 CL-TEST::MAKE-LIST-EMPTY.1
 CL-TEST::MAKE-LIST-EMPTY.2
 CL-TEST::MAKE-LIST-NO-INITIAL-ELEMENT
Test CL-TEST::MAKE-LIST-WITH-INITIAL-ELEMENT failed
Form: (MAKE-LIST 6 :INITIAL-ELEMENT (QUOTE CL-TEST::A))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          (CL-TEST::A NIL NIL NIL NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.1 failed
Form: (MAKE-LIST 5 :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::A))
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:INITIAL-ELEMENT).> ing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.2 failed
Form: (MAKE-LIST 5 :BAR NIL :ALLOW-OTHER-KEYS T)
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :BAR. Expected one of (:INITIAL-ELEMENT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.3 failed
Form: (MAKE-LIST 5 :ALLOW-OTHER-KEYS NIL)
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:INITIAL-ELEMENT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.4 failed
Form: (MAKE-LIST 5 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE CL-TEST::BAD) T)
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:INITIAL-ELEMENT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.5 failed
Form: (MAKE-LIST  :ALLOW-OTHER-KEYS T)
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:INITIAL-ELEMENT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST-REPEATED-KEYWORD failed
Form: (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE CL-TEST::A) :INITIAL-ELEMENT (QUOTE CL-TEST::B))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          (CL-TEST::A NIL NIL NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (MAKE-LIST (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 5) :INITIAL-ELEMENT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::A))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
          2
          1
          2
Actual value:
          (CL-TEST::A NIL NIL NIL NIL) [Actual value: #<error duri>

 NIL
Test CL-TEST::MAKE-LIST.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (MAKE-LIST (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 5) :INITIAL-ELEMENT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) :INITIAL-ELEMENT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (QUOTE CL-TEST::B))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
          3
          1
          2
          3
Actual value:
          (CL-TEST::A NIL NIL NIL NIL) [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-LIST.FOLD.1
 CL-TEST::MAKE-LIST.FOLD.2
 CL-TEST::MAKE-LIST.ERROR.1
 CL-TEST::MAKE-LIST.ERROR.3
Test CL-TEST::MAKE-LIST.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-LIST 5 :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:INITIAL-ELEMENT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LISd
Form: (CL-TEST:SIGNALS-ERROR (MAKE-LIST 5 :INITIAL-ELEMENT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-LIST 5 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument 1. Expected one of (:INITIAL-ELEMENT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-LIST 5 :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:INITIAL-ELEMENT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-LIST.ERROR.8
 CL-TEST::PUSH.1
 CL-TEST::PUSH.2
Test CL-TEST::PUSH.3 failed
Form: (LET ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A))))) (PUSH CL-TEST::X CL-TEST::X) (AND (CL-TEST::EQT (CAR CL-TEST::X) (CDR CL-Tpected value:
          ((CL-TEST::A) CL-TEST::A)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSH.4
 CL-TEST::PUSH.5
 CL-TEST::PUSH.ORDER.1
 CL-TEST::PUSH.ORDER.2
 CL-TEST::PUSH.ORDER.3
 CL-TEST::PUSH.ERROR.1
Test CL-TEST::POP.1 failed
Form: (LET ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))) (LET ((CL-TEST::Y (POP CL-TEST::X))) (LIST CL-TEST::X CL-TEST::Y)))
Expected value:
          ((CL-TEST::B CL-TEST::C) CL-TEST::A)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::POP.2
 CL-TEST::POP.3
 CL-TEST::POP.ORDER.1
Test CL-TEST::PUSH-AND-POP failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B)))) (CL-TEST::Y CL-TEST::X)) (PUSH (QUOTE CL-TEST::C) CL-TEST::X) (AND (CL-TEST::EQT (CDR CL-TEST::X) CL-TEST::Y) (POP CL-TEST::X)))
Expected value:
          CL-TEST::C
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::POP.ERROR.1
 CL-TEST::PUSHNEW.1
Test CL-TEST::PUSHNEW.2 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::K CL-TEST::F CL-TEST::Q)))) (CL-TEST::Y (PUSHNEW (QUOTE CL-TEST::A) CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          (CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::K CL-TEST::F CL-TEST::Q)
Actual value:
       ion COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.3 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (1 2 3 4 5 6 7 8)))) (CL-TEST::Y (PUSHNEW 7 CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          (1 2 3 4 5 6 7 8)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.4 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::C CL-TEST::D))) CL-TEST::X :TEST (QUOTE EQUAL)))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          ((CL-TEST::C CL-TEST::D) (CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.5 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) 1 "and" CL-TESSHNEW (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B))) CL-TEST::X :TEST (QUOTE EQUAL)))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          ((CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.6 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::E) (CL-TEST::D CL-TEST::F) (CL-TEST::G CL-TEST::H))))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::D CL-TEST::I))) CL-TEST::X :KEY (FUNCTION CAR))) (CL-TEST::Z (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::Z 10))) CL-TEST::X :KEY (FUNCTION CAR)))) (AND (CL-TEST::EQT CL-TEST::Y (CDR CL-TEST::Z)) (CL-TEST::EQT CL-TEST::Z CL-TEST::X) CL-TEST::X))
Expected value:
          ((CL-TEST::Z 10) (CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::E) (CL-TEST::D CL-TEST::F) (CL-TEST::G CL-TEST::H))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during prX (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) CL-TEST::X :KEY (FUNCTION CAR) :TEST (FUNCTION STRING=))) (CL-TEST::Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) CL-TEST::X :KEY (FUNCTION CAR) :TEST (FUNCTION STRING=)))) (AND (CL-TEST::EQT CL-TEST::Y (CDR CL-TEST::X)) (CL-TEST::EQT CL-TEST::X CL-TEST::Z) CL-TEST::X))
Expected value:
          (("xyz" 10) ("abc" 1) ("def" 2) ("ghi" 3))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.8 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) CL-TEST::X :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)))) (CL-TEST::Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) CL-TEST::X :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))))) (AND (CL-TEST::EQT CL-TEST::Y (CDR CL-TEST::X)) (CL-TEST::EQT CL-TEST::X CL-TEST::Z) CL-TEST::X))
Expected value:
   ion COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.9 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) CL-TEST::X :KEY (QUOTE CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)))) (CL-TEST::Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) CL-TEST::X :KEY (QUOTE CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))))) (AND (CL-TEST::EQT CL-TEST::Y (CDR CL-TEST::X)) (CL-TEST::EQT CL-TEST::X CL-TEST::Z) CL-TEST::X))
Expected value:
          (("xyz" 10) ("abc" 1) ("def" 2) ("ghi" 3))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.10
Test CL-TEST::PUSHNEW.11 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B))) CL-TEST::X :TEST (QUOTE EQUAL) :KEY NIL))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expectedfined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.12
Test CL-TEST::PUSHNEW.13 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z (CL-TEST::D (QUOTE (CL-TEST::B CL-TEST::C)))) (VALUES (PUSHNEW (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) CL-TEST::D :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL)))) CL-TEST::D CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.14 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z (CL-TEST::D (QUOTE (CL-TEST::B CL-TEST::C)))) (VALUES (PUSHNEW (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) CL-TEST::D :TEST (PROGN (:I)) (FUNCTION IDENTITY))) CL-TEST::D CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          3
          1
          3
          2
Actual value:
          (CL-TEST::A CL-TEST::B CL-TEST::C) [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.15 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z (CL-TEST::D (QUOTE (CL-TEST::B CL-TEST::C)))) (VALUES (PUSHNEW (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) CL-TEST::D :TEST-NOT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::D CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          3
          1
          3
          2
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>OTE (1 2 3)))) (VALUES (PUSHNEW 10 CL-TEST::X :TEST (FUNCTION >)) CL-TEST::X))
Expected value:
          (1 2 3)
          (1 2 3)
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.18 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 CL-TEST::X :TEST-NOT (FUNCTION >)) CL-TEST::X))
Expected value:
          (10 1 2 3)
          (10 1 2 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.19 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 CL-TEST::X :TEST-NOT (FUNCTION <=)) CL-TEST::X))
Expected value:
          (1 2 3)
          (1 2 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.20
 CL-TEST::PUSHNEW.21
 CL-TEST::PUSHNEW.22
Test CL-TEST::PUSHNEW.23 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X (QUOTE (1)))) (VALUES (PUSHNEW 1 CL-TEST::X :TEST-NOT (CL-TEST:pected value:
          (1 1)
          (1 1)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.24 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X (QUOTE (3)))) (VALUES (PUSHNEW 1 CL-TEST::X :KEY (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (FUNCTION EVENP)))) CL-TEST::X)))
Expected value:
          (3)
          (3)
Actual value:
          (1 3) [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.TEST-AND-TEST-NOT.1
 CL-TEST::PUSHNEW.TEST-AND-TEST-NOT.2
 CL-TEST::PUSHNEW.ORDER.1
 CL-TEST::PUSHNEW.ORDER.2
 CL-TEST::PUSHNEW.ORDER.3
 CL-TEST::PUSHNEW.ERROR.1
Test CL-TEST::PUSHNEW.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B)))) (PUSHNEW (QUOTE CL-TEST::C) CL-TEST::X :TEST-NOT (FUNCTION IDENTITY))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.ERTEST::ADJOIN.3
 CL-TEST::ADJOIN.4
 CL-TEST::ADJOIN.5
 CL-TEST::ADJOIN.6
 CL-TEST::ADJOIN.7
 CL-TEST::ADJOIN.8
 CL-TEST::ADJOIN.9
 CL-TEST::ADJOIN.10
 CL-TEST::ADJOIN.11
Test CL-TEST::ADJOIN.12 failed
Form: (ADJOIN (COPY-SEQ "aaa") (QUOTE (CL-TEST::AAA "AAA" "aaa" #\a)) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)))
Expected value:
          (CL-TEST::AAA "AAA" "aaa" #\a)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.14
 CL-TEST::ADJOIN.15
 CL-TEST::ADJOIN.16
 CL-TEST::ADJOIN.17
Test CL-TEST::ADJOIN.18 failed
Form: (ADJOIN (COPY-SEQ "aaa") (QUOTE (CL-TEST::AAA "AAA" "aaa" #\a)) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)) :KEY NIL)
Expected value:
          (CL-TEST::AAA "AAA" "aaa" #\a)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.19
 CL-TEST::ADJOIN.20
Test CL-TEST::ADJOIN.21 failed
Form: (ADJOIN 10 (QUOTE (1 2 3)) :TEST-NOT (FUNCTION >))
Expected value:
          (10 1 2 3)
Actual valu during printing>

 NIL
Test CL-TEST::ADJOIN.22 failed
Form: (ADJOIN 10 (QUOTE (1 2 3)) :TEST-NOT (FUNCTION <))
Expected value:
          (1 2 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.24 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (VALUES (ADJOIN (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE CL-TEST::A))) (QUOTE (CL-TEST::B CL-TEST::C))) (ADJOIN (QUOTE CL-TEST::A) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE (CL-TEST::B CL-TEST::C))))) (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :TEST)) (QUOTE EQL)) (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::A CL-TEST::A)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :TEST-NOT)) (QUOTE EQL)) (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :TEST (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE EQL)))) (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :TEST (CL-TEST::EXPAND-IN-CURRENT-E) (ADJOIN 1 (QUOTE (1 2 3)) :KEY (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE IDENTITY))))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::A CL-TEST::A)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (1 2 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.TEST-AND-TEST-NOT.1
 CL-TEST::ADJOIN.TEST-AND-TEST-NOT.2
 CL-TEST::ADJOIN.ORDER.1
Test CL-TEST::ADJOIN.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::P) (VALUES (ADJOIN (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE (CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E))) :TEST-NOT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I))-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.FOLD.1
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.1 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.2 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS T :FOO T)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.3 failed
Form: (At :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.4 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.5 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE CL-TEST::BAD) T)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.REPEAT-KEY
 CL-TEST::ADJOIN.ERROR.1
 CL-TEST::ADJOIN.ERROR.2
Test CL-TEST::ADJOIN.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument 1. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :TEST) PROG value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.ERROR.7
Test CL-TEST::ADJOIN.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.ERROR.9
 CL-TEST::ADJOIN.ERROR.10
Test CL-TEST::NTH.1 failed
Form: (CL-TEST::NTH-1-BODY (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 2000 CL-TEST::COLLECT (* 4 CL-TEST::I)))
Expected value:
          0
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
[[Triple fault. Stack overflow during NTH.2]]
