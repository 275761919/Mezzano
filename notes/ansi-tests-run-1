Doing 19343 pending test of 19343 tests total.

 CL-TEST::SYMBOL-&ALLOW-OTHER-KEYS
 CL-TEST::SYMBOL-&AUX
 CL-TEST::SYMBOL-&BODY
 CL-TEST::SYMBOL-&ENVIRONMENT
 CL-TEST::SYMBOL-&KEY
 CL-TEST::SYMBOL-&OPTIONAL
 CL-TEST::SYMBOL-&REST
 CL-TEST::SYMBOL-&WHOLE
Test CL-TEST::SYMBOL-* failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "*")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-**
 CL-TEST::SYMBOL-***
 CL-TEST::SYMBOL-*BREAK-ON-SIGNALS*
 CL-TEST::SYMBOL-*COMPILE-FILE-PATHNAME*
 CL-TEST::SYMBOL-*COMPILE-FILE-TRUENAME*
 CL-TEST::SYMBOL-*COMPILE-PRINT*
 CL-TEST::SYMBOL-*COMPILE-VERBOSE*
 CL-TEST::SYMBOL-*DEBUG-IO*
 CL-TEST::SYMBOL-*DEBUGGER-HOOK*
 CL-TEST::SYMBOL-*DEFAULT-PATHNAME-DEFAULTS*
 CL-TEST::SYMBOL-*ERROR-OUTPUT*
 CL-TEST::SYMBOL-*FEATURES*
 CL-TEST::SYMBOL-*GENSYM-COUNTER*
 CL-TEST::SYMBOL-*LOAD-PATHNAME*
 CL-TEST::SYMBOL-*LOAD-PRINT*
 CL-TEST::SYMBOL-*LOAD-TRUENAME*
 CL-TEST::SYMBOL-*LOAD-VERBOSE*
 CL-TEST::SYMBOL-*MACROEXPAND-HOOK*
 CL-TEST::SYMBOL-*MODULES*
 CL-TEST::SYMBOL-*PACKAGE*
 CL-TEST::SYMBOL-*PRINT-ARRAY*
 CL-TEST::SYMBOL-*PRINT-BASE*
 CL-TEST::SYMBOL-*PRINT-CASE*
 CL-TEST::SYMBOL-*PRINT-CIRCLE*
 CL-TEST::SYMBOL-*PRINT-ESCAPE*
 CL-TEST::SYMBOL-*PRINT-GENSYM*
 CL-TEST::SYMBOL-*PRINT-LENGTH*
 CL-TEST::SYMBOL-*PRINT-LEVEL*
 CL-TEST::SYMBOL-*PRINT-LINES*
 CL-TEST::SYMBOL-*PRINT-MISER-WIDTH*
 CL-TEST::SYMBOL-*PRINT-PPRINT-DISPATCH*
 CL-TEST::SYMBOL-*PRINT-PRETTY*
 CL-TEST::SYMBOL-*PRINT-RADIX*
 CL-TEST::SYMBOL-*PRINT-READABLY*
 CL-TEST::SYMBOL-*PRINT-RIGHT-MARGIN*
 CL-TEST::SYMBOL-*QUERY-IO*
 CL-TEST::SYMBOL-*RANDOM-STATE*
 CL-TEST::SYMBOL-*READ-BASE*
 CL-TEST::SYMBOL-*READ-DEFAULT-FLOAT-FORMAT*
 CL-TEST::SYMBOL-*READ-EVAL*
 CL-TEST::SYMBOL-*READ-SUPPRESS*
 CL-TEST::SYMBOL-*READTABLE*
 CL-TEST::SYMBOL-*STANDARD-INPUT*
 CL-TEST::SYMBOL-*STANDARD-OUTPUT*
 CL-TEST::SYMBOL-*TERMINAL-IO*
 CL-TEST::SYMBOL-*TRACE-OUTPUT*
Test CL-TEST::SYMBOL-+ failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "+")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-++
 CL-TEST::SYMBOL-+++
Test CL-TEST::SYMBOL-- failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "-")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-/ failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "/")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-//
 CL-TEST::SYMBOL-///
Test CL-TEST::SYMBOL-/= failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "/=")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-1+
 CL-TEST::SYMBOL-1-
Test CL-TEST::SYMBOL-< failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "<")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-<= failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "<=")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-= failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "=")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-> failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE ">")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL->= failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE ">=")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-ABORT
 CL-TEST::SYMBOL-ABS
 CL-TEST::SYMBOL-ACONS
 CL-TEST::SYMBOL-ACOS
 CL-TEST::SYMBOL-ACOSH
 CL-TEST::SYMBOL-ADD-METHOD
 CL-TEST::SYMBOL-ADJOIN
 CL-TEST::SYMBOL-ADJUST-ARRAY
 CL-TEST::SYMBOL-ADJUSTABLE-ARRAY-P
 CL-TEST::SYMBOL-ALLOCATE-INSTANCE
 CL-TEST::SYMBOL-ALPHA-CHAR-P
 CL-TEST::SYMBOL-ALPHANUMERICP
 CL-TEST::SYMBOL-AND
 CL-TEST::SYMBOL-APPEND
 CL-TEST::SYMBOL-APPLY
 CL-TEST::SYMBOL-APROPOS
 CL-TEST::SYMBOL-APROPOS-LIST
Test CL-TEST::SYMBOL-AREF failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "aref")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-ARITHMETIC-ERROR
 CL-TEST::SYMBOL-ARITHMETIC-ERROR-OPERANDS
 CL-TEST::SYMBOL-ARITHMETIC-ERROR-OPERATION
 CL-TEST::SYMBOL-ARRAY
 CL-TEST::SYMBOL-ARRAY-DIMENSION
 CL-TEST::SYMBOL-ARRAY-DIMENSION-LIMIT
 CL-TEST::SYMBOL-ARRAY-DIMENSIONS
 CL-TEST::SYMBOL-ARRAY-DISPLACEMENT
 CL-TEST::SYMBOL-ARRAY-ELEMENT-TYPE
 CL-TEST::SYMBOL-ARRAY-HAS-FILL-POINTER-P
 CL-TEST::SYMBOL-ARRAY-IN-BOUNDS-P
 CL-TEST::SYMBOL-ARRAY-RANK
 CL-TEST::SYMBOL-ARRAY-RANK-LIMIT
 CL-TEST::SYMBOL-ARRAY-ROW-MAJOR-INDEX
 CL-TEST::SYMBOL-ARRAY-TOTAL-SIZE
 CL-TEST::SYMBOL-ARRAY-TOTAL-SIZE-LIMIT
 CL-TEST::SYMBOL-ARRAYP
 CL-TEST::SYMBOL-ASH
 CL-TEST::SYMBOL-ASIN
 CL-TEST::SYMBOL-ASINH
 CL-TEST::SYMBOL-ASSERT
 CL-TEST::SYMBOL-ASSOC
 CL-TEST::SYMBOL-ASSOC-IF
 CL-TEST::SYMBOL-ASSOC-IF-NOT
 CL-TEST::SYMBOL-ATAN
 CL-TEST::SYMBOL-ATANH
 CL-TEST::SYMBOL-ATOM
 CL-TEST::SYMBOL-BASE-CHAR
 CL-TEST::SYMBOL-BASE-STRING
 CL-TEST::SYMBOL-BIGNUM
 CL-TEST::SYMBOL-BIT
 CL-TEST::SYMBOL-BIT-AND
 CL-TEST::SYMBOL-BIT-ANDC1
 CL-TEST::SYMBOL-BIT-ANDC2
 CL-TEST::SYMBOL-BIT-EQV
 CL-TEST::SYMBOL-BIT-IOR
 CL-TEST::SYMBOL-BIT-NAND
 CL-TEST::SYMBOL-BIT-NOR
 CL-TEST::SYMBOL-BIT-NOT
 CL-TEST::SYMBOL-BIT-ORC1
 CL-TEST::SYMBOL-BIT-ORC2
 CL-TEST::SYMBOL-BIT-VECTOR
 CL-TEST::SYMBOL-BIT-VECTOR-P
 CL-TEST::SYMBOL-BIT-XOR
 CL-TEST::SYMBOL-BLOCK
 CL-TEST::SYMBOL-BOOLE
 CL-TEST::SYMBOL-BOOLE-1
 CL-TEST::SYMBOL-BOOLE-2
 CL-TEST::SYMBOL-BOOLE-AND
 CL-TEST::SYMBOL-BOOLE-ANDC1
 CL-TEST::SYMBOL-BOOLE-ANDC2
 CL-TEST::SYMBOL-BOOLE-C1
 CL-TEST::SYMBOL-BOOLE-C2
 CL-TEST::SYMBOL-BOOLE-CLR
 CL-TEST::SYMBOL-BOOLE-EQV
 CL-TEST::SYMBOL-BOOLE-IOR
 CL-TEST::SYMBOL-BOOLE-NAND
 CL-TEST::SYMBOL-BOOLE-NOR
 CL-TEST::SYMBOL-BOOLE-ORC1
 CL-TEST::SYMBOL-BOOLE-ORC2
 CL-TEST::SYMBOL-BOOLE-SET
 CL-TEST::SYMBOL-BOOLE-XOR
 CL-TEST::SYMBOL-BOOLEAN
 CL-TEST::SYMBOL-BOTH-CASE-P
 CL-TEST::SYMBOL-BOUNDP
 CL-TEST::SYMBOL-BREAK
 CL-TEST::SYMBOL-BROADCAST-STREAM
 CL-TEST::SYMBOL-BROADCAST-STREAM-STREAMS
 CL-TEST::SYMBOL-BUILT-IN-CLASS
 CL-TEST::SYMBOL-BUTLAST
 CL-TEST::SYMBOL-BYTE
 CL-TEST::SYMBOL-BYTE-POSITION
 CL-TEST::SYMBOL-BYTE-SIZE
 CL-TEST::SYMBOL-CAAAAR
 CL-TEST::SYMBOL-CAAADR
 CL-TEST::SYMBOL-CAAAR
 CL-TEST::SYMBOL-CAADAR
 CL-TEST::SYMBOL-CAADDR
 CL-TEST::SYMBOL-CAADR
 CL-TEST::SYMBOL-CAAR
 CL-TEST::SYMBOL-CADAAR
 CL-TEST::SYMBOL-CADADR
 CL-TEST::SYMBOL-CADAR
 CL-TEST::SYMBOL-CADDAR
 CL-TEST::SYMBOL-CADDDR
 CL-TEST::SYMBOL-CADDR
 CL-TEST::SYMBOL-CADR
 CL-TEST::SYMBOL-CALL-ARGUMENTS-LIMIT
 CL-TEST::SYMBOL-CALL-METHOD
 CL-TEST::SYMBOL-CALL-NEXT-METHOD
 CL-TEST::SYMBOL-CAR
 CL-TEST::SYMBOL-CASE
 CL-TEST::SYMBOL-CATCH
 CL-TEST::SYMBOL-CCASE
 CL-TEST::SYMBOL-CDAAAR
 CL-TEST::SYMBOL-CDAADR
 CL-TEST::SYMBOL-CDAAR
 CL-TEST::SYMBOL-CDADAR
 CL-TEST::SYMBOL-CDADDR
 CL-TEST::SYMBOL-CDADR
 CL-TEST::SYMBOL-CDAR
 CL-TEST::SYMBOL-CDDAAR
 CL-TEST::SYMBOL-CDDADR
 CL-TEST::SYMBOL-CDDAR
 CL-TEST::SYMBOL-CDDDAR
 CL-TEST::SYMBOL-CDDDDR
 CL-TEST::SYMBOL-CDDDR
 CL-TEST::SYMBOL-CDDR
 CL-TEST::SYMBOL-CDR
 CL-TEST::SYMBOL-CEILING
 CL-TEST::SYMBOL-CELL-ERROR
 CL-TEST::SYMBOL-CELL-ERROR-NAME
 CL-TEST::SYMBOL-CERROR
 CL-TEST::SYMBOL-CHANGE-CLASS
 CL-TEST::SYMBOL-CHAR
 CL-TEST::SYMBOL-CHAR-CODE
 CL-TEST::SYMBOL-CHAR-CODE-LIMIT
 CL-TEST::SYMBOL-CHAR-DOWNCASE
 CL-TEST::SYMBOL-CHAR-EQUAL
 CL-TEST::SYMBOL-CHAR-GREATERP
 CL-TEST::SYMBOL-CHAR-INT
 CL-TEST::SYMBOL-CHAR-LESSP
 CL-TEST::SYMBOL-CHAR-NAME
 CL-TEST::SYMBOL-CHAR-NOT-EQUAL
 CL-TEST::SYMBOL-CHAR-NOT-GREATERP
 CL-TEST::SYMBOL-CHAR-NOT-LESSP
 CL-TEST::SYMBOL-CHAR-UPCASE
 CL-TEST::SYMBOL-CHAR/=
 CL-TEST::SYMBOL-CHAR<
 CL-TEST::SYMBOL-CHAR<=
Test CL-TEST::SYMBOL-CHAR= failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "char=")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-CHAR>
 CL-TEST::SYMBOL-CHAR>=
 CL-TEST::SYMBOL-CHARACTER
 CL-TEST::SYMBOL-CHARACTERP
 CL-TEST::SYMBOL-CHECK-TYPE
 CL-TEST::SYMBOL-CIS
 CL-TEST::SYMBOL-CLASS
 CL-TEST::SYMBOL-CLASS-NAME
 CL-TEST::SYMBOL-CLASS-OF
 CL-TEST::SYMBOL-CLEAR-INPUT
 CL-TEST::SYMBOL-CLEAR-OUTPUT
 CL-TEST::SYMBOL-CLOSE
 CL-TBOL-COMPILATION-SPEED
 CL-TEST::SYMBOL-COMPILE
 CL-TEST::SYMBOL-COMPILE-FILE
 CL-TEST::SYMBOL-COMPILE-FILE-PATHNAME
 CL-TEST::SYMBOL-COMPILED-FUNCTION
 CL-TEST::SYMBOL-COMPILED-FUNCTION-P
 CL-TEST::SYMBOL-COMPILER-MACRO
 CL-TEST::SYMBOL-COMPILER-MACRO-FUNCTION
 CL-TEST::SYMBOL-COMPLEMENT
 CL-TEST::SYMBOL-COMPLEX
 CL-TEST::SYMBOL-COMPLEXP
 CL-TEST::SYMBOL-COMPUTE-APPLICABLE-METHODS
 CL-TEST::SYMBOL-COMPUTE-RESTARTS
 CL-TEST::SYMBOL-CONCATENATE
 CL-TEST::SYMBOL-CONCATENATED-STREAM
 CL-TEST::SYMBOL-CONCATENATED-STREAM-STREAMS
 CL-TEST::SYMBOL-COND
 CL-TEST::SYMBOL-CONDITION
 CL-TEST::SYMBOL-CONJUGATE
 CL-TEST::SYMBOL-CONS
 CL-TEST::SYMBOL-CONSP
 CL-TEST::SYMBOL-CONSTANTLY
 CL-TEST::SYMBOL-CONSTANTP
 CL-TEST::SYMBOL-CONTINUE
 CL-TEST::SYMBOL-CONTROL-ERROR
 CL-TEST::SYMBOL-COPY-ALIST
 CL-TEST::SYMBOL-COPY-LIST
 CL-TEST::SYMBOL-COPY-PPRINT-DISPATCH
 CL-TEST::SYMBOL-COPY-READTABLE
 CL-TEST::SYMBOL-COPY-SEQ
 CL-TEST::SYMBOL-COPY-STRUCTURE
 CL-TEST::SYMBOL-COPY-SYMBOL
 CL-TEST::SYMBOL-COPY-TREE
 CL-TEST::SYMBOL-COS
 CL-TEST::SYMBOL-COSH
 CL-TEST::SYMBOL-COUNT
 CL-TEST::SYMBOL-COUNT-IF
 CL-TEST::SYMBOL-COUNT-IF-NOT
 CL-TEST::SYMBOL-CTYPECASE
 CL-TEST::SYMBOL-DEBUG
 CL-TEST::SYMBOL-DECF
 CL-TEST::SYMBOL-DECLAIM
 CL-TEST::SYMBOL-DECLARATION
 CL-TEST::SYMBOL-DECLARE
 CL-TEST::SYMBOL-DECODE-FLOAT
 CL-TEST::SYMBOL-DECODE-UNIVERSAL-TIME
 CL-TEST::SYMBOL-DEFCLASS
 CL-TEST::SYMBOL-DEFCONSTANT
 CL-TEST::SYMBOL-DEFGENERIC
 CL-TEST::SYMBOL-DEFINE-COMPILER-MACRO
 CL-TEST::SYMBOL-DEFINE-CONDITION
 CL-TEST::SYMBOL-DEFINE-METHOD-COMBINATION
 CL-TEST::SYMBOL-DEFINE-MODIFY-MACRO
 CL-TEST::SYMBOL-DEFINE-SETF-EXPANDER
 CL-TEST::SYMBOL-DEFINE-SYMBOL-MACRO
 CL-TEST::SYMBOL-DEFMACRO
 CL-TEST::SYMBOL-DEFMETHOD
 CL-TEST::SYMBOL-DEFPACKAGE
 CL-TEST::SYMBOL-DEFPARAMETER
 CL-TEST::SYMBOL-DEFSETF
 CL-TEST::SYMBOL-DEFSTRUCT
 CL-TEST::SYMBOL-DEFTYPE
 CL-TEST::SYMBOL-DEFUN
 CL-TEST::SYMBOL-DEFVAR
 CL-TEST::SYMBOL-DELETE
 CL-TEST::SYMBOL-DELETE-DUPLICATES
 CL-TEST::SYMBOL-DELETE-FILE
 CL-TEST::SYMBOL-DELETE-IF
 CL-TEST::SYMBOL-DELETE-IF-NOT
 CL-TEST::SYMBOL-DELETE-PACKAGE
 CL-TEST::SYMBOL-DENOMINATOR
 CL-TEST::SYMBOL-DEPOSIT-FIELD
 CL-TEST::SYMBOL-DESCRIBE
 CL-TEST::SYMBOL-DESCRIBE-OBJECT
 CL-TEST::SYMBOL-DESTRUCTURING-BIND
 CL-TEST::SYMBOL-DIGIT-CHAR
 CL-TEST::SYMBOL-DIGIT-CHAR-P
 CL-TEST::SYMBOL-DIRECTORY
 CL-TEST::SYMBOL-DIRECTORY-NAMESTRING
 CL-TEST::SYMBOL-DISASSEMBLE
 CL-TEST::SYMBOL-DIVISION-BY-ZERO
 CL-TEST::SYMBOL-DO
 CL-TEST::SYMBOL-DO*
 CL-TEST::SYMBOL-DO-ALL-SYMBOLS
 CL-TEST::SYMBOL-DO-EXTERNAL-SYMBOLS
 CL-TEST::SYMBOL-DO-SYMBOLS
 CL-TEST::SYMBOL-DOCUMENTATION
 CL-TEST::SYMBOL-DOLIST
 CL-TEST::SYMBOL-DOTIMES
 CL-TEST::SYMBOL-DOUBLE-FLOAT
 CL-TEST::SYMBOL-DOUBLE-FLOAT-EPSILON
 CL-TEST::SYMBOL-DOUBLE-FLOAT-NEGATIVE-EPSILON
Test CL-TEST::SYMBOL-DPB failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "dpb")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-DRIBBLE
 CL-TEST::SYMBOL-DYNAMIC-EXTENT
 CL-TEST::SYMBOL-ECASE
 CL-TEST::SYMBOL-ECHO-STREAM
 CL-TEST::SYMBOL-ECHO-STREAM-INPUT-STREAM
 CL-TEST::SYMBOL-ECHO-STREAM-OUTPUT-STREAM
 CL-TEST::SYMBOL-ED
 CL-TEST::SYMBOL-EIGHTH
 CL-TEST::SYMBOL-ELT
 CL-TEST::SYMBOL-ENCODE-UNIVERSAL-TIME
 CL-TEST::SYMBOL-END-OF-FILE
 CL-TEST::SYMBOL-ENDP
 CL-TEST::SYMBOL-ENOUGH-NAMESTRING
 CL-TEST::SYMBOL-ENSURE-DIRECTORIES-EXIST
 CL-TEST::SYMBOL-ENSURE-GENERIC-FUNCTION
 CL-TEST::SYMBOL-EQ
 CL-TEST::SYMBOL-EQL
Test CL-TEST::SYMBOL-EQUAL failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "equal")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-EQUALP
 CL-TEST::SYMBOL-ERROR
 CL-TEST::SYMBOL-ETYPECASE
 CL-TEST::SYMBOL-EVAL
 CL-TEST::SYMBOL-EVAL-WHEN
 CL-TEST::SYMBOL-EVENP
 CL-TEST::SYMBOL-EVERY
 CL-TEST::SYMBOL-EXP
 CL-TEST::SYMBOL-EXPORT
 CL-TEST::SYMBOL-EXPT
 CL-TEST::SYMBOL-EXTENDED-CHAR
 CL-TEST::SYMBOL-FBOUNDP
 CL-TEST::SYMBOL-FCEILING
 CL-TEST::SYMBOL-FDEFINITION
 CL-TEST::SYMBOL-FFLOOR
 CL-TEST::SYMBOL-FIFTH
 CL-TEST::SYMBOL-FILE-AUTHOR
 CL-TEST::SYMBOL-FILE-ERROR
 CL-TEST::SYMBOL-FILE-ERROR-PATHNAME
 CL-TEST::SYMBOL-FILE-LENGTH
 CL-TEST::SYMBOL-FILE-NAMESTRING
 CL-TEST::SYMBOL-FILE-POSITION
 CL-TEST::SYMBOL-FILE-STREAM
 CL-TEST::SYMBOL-FILE-STRING-LENGTH
 CL-TEST::SYMBOL-FILE-WRITE-DATE
 CL-TEST::SYMBOL-FILL
 CL-TEST::SYMBOL-FILL-POINTER
 CL-TEST::SYMBOL-FIND
 CL-TEST::SYMBOL-FIND-ALL-SYMBOLS
 CL-TEST::SYMBOL-FIND-CLASS
 CL-TEST::SYMBOL-FIND-IF
 CL-TEST::SYMBOL-FIND-IF-NOT
 CL-TEST::SYMBOL-FIND-METHOD
 CL-TEST::SYMBOL-FIND-PACKAGE
 CL-TEST::SYMBOL-FIND-RESTART
 CL-TEST::SYMBOL-FIND-SYMBOL
 CL-TEST::SYMBOL-FINISH-OUTPUT
 CL-TEST::SYMBOL-FIRST
 CL-TEST::SYMBOL-FIXNUM
 CL-TEST::SYMBOL-FLET
 CL-TEST::SYMBOL-FLOAT
 CL-TEST::SYMBOL-FLOAT-DIGITS
 CL-TEST::SYMBOL-FLOAT-PRECISION
 CL-TEST::SYMBOL-FLOAT-RADIX
 CL-TEST::SYMBOL-FLOAT-SIGN
 CL-TEST::SYMBOL-FLOATING-POINT-INEXACT
 CL-TEST::SYMBOL-FLOATING-POINT-INVALID-OPERATION
 CL-TEST::SYMBOL-FLOATING-POINT-OVERFLOW
 CL-TEST::SYMBOL-FLOATING-POINT-UNDERFLOW
 CL-TEST::SYMBOL-FLOATP
 CL-TEST::SYMBOL-FLOOR
 CL-TEST::SYMBOL-FMAKUNBOUND
 CL-TEST::SYMBOL-FORCE-OUTPUT
 CL-TEST::SYMBOL-FORMAT
 CL-TEST::SYMBOL-FORMATTER
 CL-TEST::SYMBOL-FOURTH
 CL-TEST::SYMBOL-FRESH-LINE
 CL-TEST::SYMBOL-FROUND
 CL-TEST::SYMBOL-FTRUNCATE
 CL-TEST::SYMBOL-FTYPE
 CL-TEST::SYMBOL-FUNCALL
 SYMBOL-FUNCTION
 CL-TEST::SYMBOL-FUNCTION-KEYWORDS
 CL-TEST::SYMBOL-FUNCTION-LAMBDA-EXPRESSION
 CL-TEST::SYMBOL-FUNCTIONP
 CL-TEST::SYMBOL-GCD
 CL-TEST::SYMBOL-GENERIC-FUNCTION
 CL-TEST::SYMBOL-GENSYM
 CL-TEST::SYMBOL-GENTEMP
 CL-TEST::SYMBOL-GET
 CL-TEST::SYMBOL-GET-DECODED-TIME
 CL-TEST::SYMBOL-GET-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-GET-INTERNAL-REAL-TIME
 CL-TEST::SYMBOL-GET-INTERNAL-RUN-TIME
 CL-TEST::SYMBOL-GET-MACRO-CHARACTER
 CL-TEST::SYMBOL-GET-OUTPUT-STREAM-STRING
 CL-TEST::SYMBOL-GET-PROPERTIES
 CL-TEST::SYMBOL-GET-SETF-EXPANSION
 CL-TEST::SYMBOL-GET-UNIVERSAL-TIME
 CL-TEST::SYMBOL-GETF
 CL-TEST::SYMBOL-GETHASH
 CL-TEST::SYMBOL-GO
 CL-TEST::SYMBOL-GRAPHIC-CHAR-P
 CL-TEST::SYMBOL-HANDLER-BIND
 CL-TEST::SYMBOL-HANDLER-CASE
 CL-TEST::SYMBOL-HASH-TABLE
 CL-TEST::SYMBOL-HASH-TABLE-COUNT
 CL-TEST::SYMBOL-HASH-TABLE-P
 CL-TEST::SYMBOL-HASH-TABLE-REHASH-SIZE
 CL-TEST::SYMBOL-HASH-TABLE-REHASH-THRESHOLD
 CL-TEST::SYMBOL-HASH-TABLE-SIZE
 CL-TEST::SYMBOL-HASH-TABLE-TEST
 CL-TEST::SYMBOL-HOST-NAMESTRING
 CL-TEST::SYMBOL-IDENTITY
 CL-TEST::SYMBOL-IF
 CL-TEST::SYMBOL-IGNORABLE
 CL-TEST::SYMBOL-IGNORE
 CL-TEST::SYMBOL-IGNORE-ERRORS
 CL-TEST::SYMBOL-IMAGPART
 CL-TEST::SYMBOL-IMPORT
 CL-TEST::SYMBOL-IN-PACKAGE
 CL-TEST::SYMBOL-INCF
 CL-TEST::SYMBOL-INITIALIZE-INSTANCE
 CL-TEST::SYMBOL-INLINE
 CL-TEST::SYMBOL-INPUT-STREAM-P
 CL-TEST::SYMBOL-INSPECT
 CL-TEST::SYMBOL-INTEGER
 CL-TEST::SYMBOL-INTEGER-DECODE-FLOAT
 CL-TEST::SYMBOL-INTEGER-LENGTH
 CL-TEST::SYMBOL-INTEGERP
 CL-TEST::SYMBOL-INTERACTIVE-STREAM-P
 CL-TEST::SYMBOL-INTERN
 CL-TEST::SYMBOL-INTERNAL-TIME-UNITS-PER-SECOND
 CL-TEST::SYMBOL-INTERSECTION
 CL-TEST::SYMBOL-INVALID-METHOD-ERROR
 CL-TEST::SYMBOL-INVOKE-DEBUGGER
 CL-TEST::SYMBOL-INVOKE-RESTART
 CL-TEST::SYMBOL-INVOKE-RESTART-INTERACTIVELY
 CL-TEST::SYMBOL-ISQRT
 CL-TEST::SYMBOL-KEYWORD
 CL-TEST::SYMBOL-KEYWORDP
 CL-TEST::SYMBOL-LABELS
 CL-TEST::SYMBOL-LAMBDA
 CL-TEST::SYMBOL-LAMBDA-LIST-KEYWORDS
 CL-TEST::SYMBOL-LAMBDA-PARAMETERS-LIMIT
 CL-TEST::SYMBOL-LAST
 CL-TEST::SYMBOL-LCM
Test CL-TEST::SYMBOL-LDB failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "ldb")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-LDB-TEST failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "ldb-test")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-LDIFF
 CL-TEST::SYMBOL-LEAST-NEGATIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-LENGTH
 CL-TEST::SYMBOL-LET
 CL-TEST::SYMBOL-LET*
 CL-TEST::SYMBOL-LISP-IMPLEMENTATION-TYPE
 CL-TEST::SYMBOL-LISP-IMPLEMENTATION-VERSION
 CL-TEST::SYMBOL-LIST
 CL-TEST::SYMBOL-LIST*
 CL-TEST::SYMBOL-LIST-ALL-PACKAGES
 CL-TEST::SYMBOL-LIST-LENGTH
 CL-TEST::SYMBOL-LISTEN
 CL-TEST::SYMBOL-LISTP
 CL-TEST::SYMBOL-LOAD
 CL-TEST::SYMBOL-LOAD-LOGICAL-PATHNAME-TRANSLATIONS
 CL-TEST::SYMBOL-LOAD-TIME-VALUE
 CL-TEST::SYMBOL-LOCALLY
 CL-TEST::SYMBOL-LOG
Test CL-TEST::SYMBOL-LOGAND failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "logand")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-LOGANDC1
 CL-TEST::SYMBOL-LOGANDC2
 CL-TEST::SYMBOL-LOGBITP
 CL-TEST::SYMBOL-LOGCOUNT
Test CL-TEST::SYMBOL-LOGEQV failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "logeqv")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-LOGICAL-PATHNAME
 CL-TEST::SYMBOL-LOGICAL-PATHNAME-TRANSLATIONS
Test CL-TEST::SYMBOL-LOGIOR failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "logior")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-LOGNAND
 CL-TEST::SYMBOL-LOGNOR
 CL-TEST::SYMBOL-LOGNOT
 CL-TEST::SYMBOL-LOGORC1
 CL-TEST::SYMBOL-LOGORC2
 CL-TEST::SYMBOL-LOGTEST
Test CL-TEST::SYMBOL-LOGXOR failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "logxor")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-LONG-FLOAT
 CL-TEST::SYMBOL-LONG-FLOAT-EPSILON
 CL-TEST::SYMBOL-LONG-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-LONG-SITE-NAME
 CL-TEST::SYMBOL-LOOP
 CL-TEST::SYMBOL-LOOP-FINISH
 CL-TEST::SYMBOL-LOWER-CASE-P
 CL-TEST::SYMBOL-MACHINE-INSTANCE
 CL-TEST::SYMBOL-MACHINE-TYPE
 CL-TEST::SYMBOL-MACHINE-VERSION
 CL-TEST::SYMBOL-MACRO-FUNCTION
 CL-TEST::SYMBOL-MACROEXPAND
 CL-TEST::SYMBOL-MACROEXPAND-1
 SYMBOL-MACROLET
 CL-TEST::SYMBOL-MAKE-ARRAY
 CL-TEST::SYMBOL-MAKE-BROADCAST-STREAM
 CL-TEST::SYMBOL-MAKE-CONCATENATED-STREAM
 CL-TEST::SYMBOL-MAKE-CONDITION
 CL-TEST::SYMBOL-MAKE-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-MAKE-ECHO-STREAM
 CL-TEST::SYMBOL-MAKE-HASH-TABLE
 CL-TEST::SYMBOL-MAKE-INSTANCE
 CL-TEST::SYMBOL-MAKE-INSTANCES-OBSOLETE
 CL-TEST::SYMBOL-MAKE-LIST
 CL-TEST::SYMBOL-MAKE-LOAD-FORM
 CL-TEST::SYMBOL-MAKE-LOAD-FORM-SAVING-SLOTS
 CL-TEST::SYMBOL-MAKE-METHOD
 CL-TEST::SYMBOL-MAKE-PACKAGE
 CL-TEST::SYMBOL-MAKE-PATHNAME
 CL-TEST::SYMBOL-MAKE-RANDOM-STATE
 CL-TEST::SYMBOL-MAKE-SEQUENCE
 CL-TEST::SYMBOL-MAKE-STRING
 CL-TEST::SYMBOL-MAKE-STRING-INPUT-STREAM
 CL-TEST::SYMBOL-MAKE-STRING-OUTPUT-STREAM
 CL-TEST::SYMBOL-MAKE-SYMBOL
 CL-TEST::SYMBOL-MAKE-SYNONYM-STREAM
 CL-TEST::SYMBOL-MAKE-TWO-WAY-STREAM
 CL-TEST::SYMBOL-MAKUNBOUND
 CL-TEST::SYMBOL-MAP
 CL-TEST::SYMBOL-MAP-INTO
Test CL-TEST::SYMBOL-MAPC failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "mapc")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-MAPCAN
Test CL-TEST::SYMBOL-MAPCAR failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "mapcar")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-MAPCON
 CL-TEST::SYMBOL-MAPHASH
 CL-TEST::SYMBOL-MAPL
Test CL-TEST::SYMBOL-MAPLIST failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "maplist")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-MASK-FIELD
Test CL-TEST::SYMBOL-MAX failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "max")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-MEMBER
 CL-TEST::SYMBOL-MEMBER-IF
 CL-TEST::SYMBOL-MEMBER-IF-NOT
 CL-TEST::SYMBOL-MERGE
 CL-TEST::SYMBOL-MERGE-PATHNAMES
 CL-TEST::SYMBOL-METHOD
 CL-TEST::SYMBOL-METHOD-COMBINATION
 CL-TEST::SYMBOL-METHOD-COMBINATION-ERROR
 CL-TEST::SYMBOL-METHOD-QUALIFIERS
Test CL-TEST::SYMBOL-MIN failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "min")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-MINUSP
 CL-TEST::SYMBOL-MISMATCH
 CL-TEST::SYMBOL-MOD
 CL-TEST::SYMBOL-MOST-NEGATIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-FIXNUM
 CL-TEST::SYMBOL-MOST-NEGATIVE-LONG-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-FIXNUM
 CL-TEST::SYMBOL-MOST-POSITIVE-LONG-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-MUFFLE-WARNING
 CL-TEST::SYMBOL-MULTIPLE-VALUE-BIND
 CL-TEST::SYMBOL-MULTIPLE-VALUE-CALL
 CL-TEST::SYMBOL-MULTIPLE-VALUE-LIST
 CL-TEST::SYMBOL-MULTIPLE-VALUE-PROG1
 CL-TEST::SYMBOL-MULTIPLE-VALUE-SETQ
 CL-TEST::SYMBOL-MULTIPLE-VALUES-LIMIT
 CL-TEST::SYMBOL-NAME-CHAR
 CL-TEST::SYMBOL-NAMESTRING
 CL-TEST::SYMBOL-NBUTLAST
 CL-TEST::SYMBOL-NCONC
 CL-TEST::SYMBOL-NEXT-METHOD-P
 CL-TEST::SYMBOL-NIL
 CL-TEST::SYMBOL-NINTERSECTION
 CL-TEST::SYMBOL-NINTH
 CL-TEST::SYMBOL-NO-APPLICABLE-METHOD
 CL-TEST::SYMBOL-NO-NEXT-METHOD
 CL-TEST::SYMBOL-NOT
 CL-TEST::SYMBOL-NOTANY
 CL-TEST::SYMBOL-NOTEVERY
 CL-TEST::SYMBOL-NOTINLINE
 CL-TEST::SYMBOL-NRECONC
 CL-TEST::SYMBOL-NREVERSE
 CL-TEST::SYMBOL-NSET-DIFFERENCE
 CL-TEST::SYMBOL-NSET-EXCLUSIVE-OR
 CL-TEST::SYMBOL-NSTRING-CAPITALIZE
 CL-TEST::SYMBOL-NSTRING-DOWNCASE
 CL-TEST::SYMBOL-NSTRING-UPCASE
 CL-TEST::SYMBOL-NSUBLIS
 CL-TEST::SYMBOL-NSUBST
 CL-TEST::SYMBOL-NSUBST-IF
 CL-TEST::SYMBOL-NSUBST-IF-NOT
 CL-TEST::SYMBOL-NSUBSTITUTE
 CL-TEST::SYMBOL-NSUBSTITUTE-IF
 CL-TEST::SYMBOL-NSUBSTITUTE-IF-NOT
 CL-TEST::SYMBOL-NTH
 CL-TEST::SYMBOL-NTH-VALUE
 CL-TEST::SYMBOL-NTHCDR
 CL-TEST::SYMBOL-NULL
 CL-TEST::SYMBOL-NUMBER
 CL-TEST::SYMBOL-NUMBERP
 CL-TEST::SYMBOL-NUMERATOR
 CL-TEST::SYMBOL-NUNION
 CL-TEST::SYMBOL-ODDP
 CL-TEST::SYMBOL-OPEN
 CL-TEST::SYMBOL-OPEN-STREAM-P
 CL-TEST::SYMBOL-OPTIMIZE
 CL-TEST::SYMBOL-OR
 CL-TEST::SYMBOL-OTHERWISE
 CL-TEST::SYMBOL-OUTPUT-STREAM-P
 SYMBOL-PACKAGE
 CL-TEST::SYMBOL-PACKAGE-ERROR
 CL-TEST::SYMBOL-PACKAGE-ERROR-PACKAGE
 CL-TEST::SYMBOL-PACKAGE-NAME
 CL-TEST::SYMBOL-PACKAGE-NICKNAMES
 CL-TEST::SYMBOL-PACKAGE-SHADOWING-SYMBOLS
 CL-TEST::SYMBOL-PACKAGE-USE-LIST
 CL-TEST::SYMBOL-PACKAGE-USED-BY-LIST
 CL-TEST::SYMBOL-PACKAGEP
 CL-TEST::SYMBOL-PAIRLIS
 CL-TEST::SYMBOL-PARSE-ERROR
 CL-TEST::SYMBOL-PARSE-INTEGER
 CL-TEST::SYMBOL-PARSE-NAMESTRING
 CL-TEST::SYMBOL-PATHNAME
 CL-TEST::SYMBOL-PATHNAME-DEVICE
 CL-TEST::SYMBOL-PATHNAME-DIRECTORY
 CL-TEST::SYMBOL-PATHNAME-HOST
 CL-TEST::SYMBOL-PATHNAME-MATCH-P
 CL-TEST::SYMBOL-PATHNAME-NAME
 CL-TEST::SYMBOL-PATHNAME-TYPE
 CL-TEST::SYMBOL-PATHNAME-VERSION
 CL-TEST::SYMBOL-PATHNAMEP
 CL-TEST::SYMBOL-PEEK-CHAR
 CL-TEST::SYMBOL-PHASE
 CL-TEST::SYMBOL-PI
 CL-TEST::SYMBOL-PLUSP
 CL-TEST::SYMBOL-POP
 CL-TEST::SYMBOL-POSITION
 CL-TEST::SYMBOL-POSITION-IF
 CL-TEST::SYMBOL-POSITION-IF-NOT
 CL-TEST::SYMBOL-PPRINT
 CL-TEST::SYMBOL-PPRINT-DISPATCH
 CL-TEST::SYMBOL-PPRINT-EXIT-IF-LIST-EXHAUSTED
 CL-TEST::SYMBOL-PPRINT-FILL
 CL-TEST::SYMBOL-PPRINT-INDENT
 CL-TEST::SYMBOL-PPRINT-LINEAR
 CL-TEST::SYMBOL-PPRINT-LOGICAL-BLOCK
 CL-TEST::SYMBOL-PPRINT-NEWLINE
 CL-TEST::SYMBOL-PPRINT-POP
 CL-TEST::SYMBOL-PPRINT-TAB
 CL-TEST::SYMBOL-PPRINT-TABULAR
 CL-TEST::SYMBOL-PRIN1
 CL-TEST::SYMBOL-PRIN1-TO-STRING
 CL-TEST::SYMBOL-PRINC
 CL-TEST::SYMBOL-PRINC-TO-STRING
 CL-TEST::SYMBOL-PRINT
 CL-TEST::SYMBOL-PRINT-NOT-READABLE
 CL-TEST::SYMBOL-PRINT-NOT-READABLE-OBJECT
 CL-TEST::SYMBOL-PRINT-OBJECT
 CL-TEST::SYMBOL-PRINT-UNREADABLE-OBJECT
 CL-TEST::SYMBOL-PROBE-FILE
 CL-TEST::SYMBOL-PROCLAIM
 CL-TEST::SYMBOL-PROG
 CL-TEST::SYMBOL-PROG*
 CL-TEST::SYMBOL-PROG1
 CL-TEST::SYMBOL-PROG2
 CL-TEST::SYMBOL-PROGN
 CL-TEST::SYMBOL-PROGRAM-ERROR
 CL-TEST::SYMBOL-PROGV
 CL-TEST::SYMBOL-PROVIDE
 CL-TEST::SYMBOL-PSETF
 CL-TEST::SYMBOL-PSETQ
 CL-TEST::SYMBOL-PUSH
 CL-TEST::SYMBOL-PUSHNEW
 CL-TEST::SYMBOL-QUOTE
 CL-TEST::SYMBOL-RANDOM
 CL-TEST::SYMBOL-RANDOM-STATE
 CL-TEST::SYMBOL-RANDOM-STATE-P
 CL-TEST::SYMBOL-RASSOC
 CL-TEST::SYMBOL-RASSOC-IF
 CL-TEST::SYMBOL-RASSOC-IF-NOT
 CL-TEST::SYMBOL-RATIO
 CL-TEST::SYMBOL-RATIONAL
 CL-TEST::SYMBOL-RATIONALIZE
 CL-TEST::SYMBOL-RATIONALP
 CL-TEST::SYMBOL-READ
 CL-TEST::SYMBOL-READ-BYTE
 CL-TEST::SYMBOL-READ-CHAR
 CL-TEST::SYMBOL-READ-CHAR-NO-HANG
 CL-TEST::SYMBOL-READ-DELIMITED-LIST
 CL-TEST::SYMBOL-READ-FROM-STRING
 CL-TEST::SYMBOL-READ-LINE
 CL-TEST::SYMBOL-READ-PRESERVING-WHITESPACE
 CL-TEST::SYMBOL-READ-SEQUENCE
 CL-TEST::SYMBOL-READER-ERROR
 CL-TEST::SYMBOL-READTABLE
 CL-TEST::SYMBOL-READTABLE-CASE
 CL-TEST::SYMBOL-READTABLEP
 CL-TEST::SYMBOL-REAL
 CL-TEST::SYMBOL-REALP
 CL-TEST::SYMBOL-REALPART
 CL-TEST::SYMBOL-REDUCE
 CL-TEST::SYMBOL-REINITIALIZE-INSTANCE
 CL-TEST::SYMBOL-REM
 CL-TEST::SYMBOL-REMF
 CL-TEST::SYMBOL-REMHASH
 CL-TEST::SYMBOL-REMOVE
 CL-TEST::SYMBOL-REMOVE-DUPLICATES
 CL-TEST::SYMBOL-REMOVE-IF
 CL-TEST::SYMBOL-REMOVE-IF-NOT
 CL-TEST::SYMBOL-REMOVE-METHOD
 CL-TEST::SYMBOL-REMPROP
 CL-TEST::SYMBOL-RENAME-FILE
 CL-TEST::SYMBOL-RENAME-PACKAGE
 CL-TEST::SYMBOL-REPLACE
 CL-TEST::SYMBOL-REQUIRE
 CL-TEST::SYMBOL-REST
 CL-TEST::SYMBOL-RESTART
 CL-TEST::SYMBOL-RESTART-BIND
 CL-TEST::SYMBOL-RESTART-CASE
 CL-TEST::SYMBOL-RESTART-NAME
 CL-TEST::SYMBOL-RETURN
 CL-TEST::SYMBOL-RETURN-FROM
 CL-TEST::SYMBOL-REVAPPEND
 CL-TEST::SYMBOL-REVERSE
 CL-TEST::SYMBOL-ROOM
 CL-TEST::SYMBOL-ROTATEF
 CL-TEST::SYMBOL-ROUND
 CL-TEST::SYMBOL-ROW-MAJOR-AREF
 CL-TEST::SYMBOL-RPLACA
 CL-TEST::SYMBOL-RPLACD
 CL-TEST::SYMBOL-SAFETY
 CL-TEST::SYMBOL-SATISFIES
 CL-TEST::SYMBOL-SBIT
 CL-TEST::SYMBOL-SCALE-FLOAT
 CL-TEST::SYMBOL-SCHAR
 CL-TEST::SYMBOL-SEARCH
 CL-TEST::SYMBOL-SECOND
 CL-TEST::SYMBOL-SEQUENCE
 CL-TEST::SYMBOL-SERIOUS-CONDITION
 CL-TEST::SYMBOL-SET
 CL-TEST::SYMBOL-SET-DIFFERENCE
 CL-TEST::SYMBOL-SET-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-SET-EXCLUSIVE-OR
 CL-TEST::SYMBOL-SET-MACRO-CHARACTER
 CL-TEST::SYMBOL-SET-PPRINT-DISPATCH
 CL-TEST::SYMBOL-SET-SYNTAX-FROM-CHAR
 CL-TEST::SYMBOL-SETF
 CL-TEST::SYMBOL-SETQ
 CL-TEST::SYMBOL-SEVENTH
 CL-TEST::SYMBOL-SHADOW
 CL-TEST::SYMBOL-SHADOWING-IMPORT
 CL-TEST::SYMBOL-SHARED-INITIALIZE
 CL-TEST::SYMBOL-SHIFTF
 CL-TEST::SYMBOL-SHORT-FLOAT
 CL-TEST::SYMBOL-SHORT-FLOAT-EPSILON
 CL-TEST::SYMBOL-SHORT-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-SHORT-SITE-NAME
 CL-TEST::SYMBOL-SIGNAL
 CL-TEST::SYMBOL-SIGNED-BYTE
 CL-TEST::SYMBOL-SIGNUM
 CL-TEST::SYMBOL-SIMPLE-ARRAY
 CL-TEST::SYMBOL-SIMPLE-BASE-STRING
 CL-TEST::SYMBOL-SIMPLE-BIT-VECTOR
 CL-TEST::SYMBOL-SIMPLE-BIT-VECTOR-P
 CL-TEST::SYMBOL-SIMPLE-CONDITION
 CL-TEST::SYMBOL-SIMPLE-CONDITION-FORMAT-ARGUMENTS
 CL-TEST::SYMBOL-SIMPLE-CONDITION-FORMAT-CONTROL
 CL-TEST::SYMBOL-SIMPLE-ERROR
 CL-TEST::SYMBOL-SIMPLE-STRING
 CL-TEST::SYMBOL-SIMPLE-STRING-P
 CL-TEST::SYMBOL-SIMPLE-TYPE-ERROR
 CL-TEST::SYMBOL-SIMPLE-VECTOR
 CL-TEST::SYMBOL-SIMPLE-VECTOR-P
 CL-TEST::SYMBOL-SIMPLE-WARNING
 CL-TEST::SYMBOL-SIN
 CL-TEST::SYMBOL-SINGLE-FLOAT
 CL-TEST::SYMBOL-SINGLE-FLOAT-EPSILON
 CL-TEST::SYMBOL-SINGLE-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-SINH
 CL-TEST::SYMBOL-SIXTH
 CL-TEST::SYMBOL-SLEEP
 CL-TEST::SYMBOL-SLOT-BOUNDP
 CL-TEST::SYMBOL-SLOT-EXISTS-P
 CL-TEST::SYMBOL-SLOT-MAKUNBOUND
 CL-TEST::SYMBOL-SLOT-MISSING
 CL-TEST::SYMBOL-SLOT-UNBOUND
 CL-TEST::SYMBOL-SLOT-VALUE
 CL-TEST::SYMBOL-SOFTWARE-TYPE
 CL-TEST::SYMBOL-SOFTWARE-VERSION
 CL-TEST::SYMBOL-SOME
 CL-TEST::SYMBOL-SORT
 CL-TEST::SYMBOL-SPACE
 CL-TEST::SYMBOL-SPECIAL
 CL-TEST::SYMBOL-SPECIAL-OPERATOR-P
 CL-TEST::SYMBOL-SPEED
 CL-TEST::SYMBOL-SQRT
 CL-TEST::SYMBOL-STABLE-SORT
 CL-TEST::SYMBOL-STANDARD
 CL-TEST::SYMBOL-STANDARD-CHAR
 CL-TEST::SYMBOL-STANDARD-CHAR-P
 CL-TEST::SYMBOL-STANDARD-CLASS
 CL-TEST::SYMBOL-STANDARD-GENERIC-FUNCTION
 CL-TEST::SYMBOL-STANDARD-METHOD
 CL-TEST::SYMBOL-STANDARD-OBJECT
 CL-TEST::SYMBOL-STEP
 CL-TEST::SYMBOL-STORAGE-CONDITION
 CL-TEST::SYMBOL-STORE-VALUE
 CL-TEST::SYMBOL-STREAM
 CL-TEST::SYMBOL-STREAM-ELEMENT-TYPE
 CL-TEST::SYMBOL-STREAM-ERROR
 CL-TEST::SYMBOL-STREAM-ERROR-STREAM
 CL-TEST::SYMBOL-STREAM-EXTERNAL-FORMAT
 CL-TEST::SYMBOL-STREAMP
 CL-TEST::SYMBOL-STRING
 CL-TEST::SYMBOL-STRING-CAPITALIZE
 CL-TEST::SYMBOL-STRING-DOWNCASE
 CL-TEST::SYMBOL-STRING-EQUAL
 CL-TEST::SYMBOL-STRING-GREATERP
 CL-TEST::SYMBOL-STRING-LEFT-TRIM
 CL-TEST::SYMBOL-STRING-LESSP
 CL-TEST::SYMBOL-STRING-NOT-EQUAL
 CL-TEST::SYMBOL-STRING-NOT-GREATERP
 CL-TEST::SYMBOL-STRING-NOT-LESSP
 CL-TEST::SYMBOL-STRING-RIGHT-TRIM
 CL-TEST::SYMBOL-STRING-STREAM
 CL-TEST::SYMBOL-STRING-TRIM
 CL-TEST::SYMBOL-STRING-UPCASE
 CL-TEST::SYMBOL-STRING/=
 CL-TEST::SYMBOL-STRING<
 CL-TEST::SYMBOL-STRING<=
 CL-TEST::SYMBOL-STRING=
 CL-TEST::SYMBOL-STRING>
 CL-TEST::SYMBOL-STRING>=
 CL-TEST::SYMBOL-STRINGP
 CL-TEST::SYMBOL-STRUCTURE
 CL-TEST::SYMBOL-STRUCTURE-CLASS
 CL-TEST::SYMBOL-STRUCTURE-OBJECT
 CL-TEST::SYMBOL-STYLE-WARNING
 CL-TEST::SYMBOL-SUBLIS
 CL-TEST::SYMBOL-SUBSEQ
 CL-TEST::SYMBOL-SUBSETP
 CL-TEST::SYMBOL-SUBST
 CL-TEST::SYMBOL-SUBST-IF
 CL-TEST::SYMBOL-SUBST-IF-NOT
 CL-TEST::SYMBOL-SUBSTITUTE
 CL-TEST::SYMBOL-SUBSTITUTE-IF
 CL-TEST::SYMBOL-SUBSTITUTE-IF-NOT
 CL-TEST::SYMBOL-SUBTYPEP
 CL-TEST::SYMBOL-SVREF
 CL-TEST::SYMBOL-SXHASH
 CL-TEST::SYMBOL-SYMBOL
 CL-TEST::SYMBOL-SYMBOL-FUNCTION
 CL-TEST::SYMBOL-SYMBOL-MACROLET
 CL-TEST::SYMBOL-SYMBOL-NAME
 CL-TEST::SYMBOL-SYMBOL-PACKAGE
 CL-TEST::SYMBOL-SYMBOL-PLIST
 CL-TEST::SYMBOL-SYMBOL-VALUE
 CL-TEST::SYMBOL-SYMBOLP
 CL-TEST::SYMBOL-SYNONYM-STREAM
 CL-TEST::SYMBOL-SYNONYM-STREAM-SYMBOL
 CL-TEST::SYMBOL-T
 CL-TEST::SYMBOL-TAGBODY
 CL-TEST::SYMBOL-TAILP
 CL-TEST::SYMBOL-TAN
 CL-TEST::SYMBOL-TANH
 CL-TEST::SYMBOL-TENTH
 CL-TEST::SYMBOL-TERPRI
 CL-TEST::SYMBOL-THE
 CL-TEST::SYMBOL-THIRD
 CL-TEST::SYMBOL-THROW
 CL-TEST::SYMBOL-TIME
 CL-TEST::SYMBOL-TRACE
 CL-TEST::SYMBOL-TRANSLATE-LOGICAL-PATHNAME
 CL-TEST::SYMBOL-TRANSLATE-PATHNAME
 CL-TEST::SYMBOL-TREE-EQUAL
 CL-TEST::SYMBOL-TRUENAME
Test CL-TEST::SYMBOL-TRUNCATE failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "truncate")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-TWO-WAY-STREAM
 CL-TEST::SYMBOL-TWO-WAY-STREAM-INPUT-STREAM
 CL-TEST::SYMBOL-TWO-WAY-STREAM-OUTPUT-STREAM
 CL-TEST::SYMBOL-TYPE
 CL-TEST::SYMBOL-TYPE-ERROR
 CL-TEST::SYMBOL-TYPE-ERROR-DATUM
 CL-TEST::SYMBOL-TYPE-ERROR-EXPECTED-TYPE
 CL-TEST::SYMBOL-TYPE-OF
 CL-TEST::SYMBOL-TYPECASE
Test CL-TEST::SYMBOL-TYPEP failed
Form: (CL-TEST::TEST-IF-NOT-IN-CL-PACKAGE "typep")
Expected value:
          NIL
Actual value:
          (COMPILER-MACRO-FUNCTION) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-UNBOUND-SLOT
 CL-TEST::SYMBOL-UNBOUND-SLOT-INSTANCE
 CL-TEST::SYMBOL-UNBOUND-VARIABLE
 CL-TEST::SYMBOL-UNDEFINED-FUNCTION
 CL-TEST::SYMBOL-UNEXPORT
 CL-TEST::SYMBOL-UNINTERN
 CL-TEST::SYMBOL-UNION
 CL-TEST::SYMBOL-UNLESS
 CL-TEST::SYMBOL-UNREAD-CHAR
 CL-TEST::SYMBOL-UNSIGNED-BYTE
 CL-TEST::SYMBOL-UNTRACE
 CL-TEST::SYMBOL-UNUSE-PACKAGE
 CL-TEST::SYMBOL-UNWIND-PROTECT
 CL-TEST::SYMBOL-UPDATE-INSTANCE-FOR-DIFFERENT-CLASS
 CL-TEST::SYMBOL-UPDATE-INSTANCE-FOR-REDEFINED-CLASS
 CL-TEST::SYMBOL-UPGRADED-ARRAY-ELEMENT-TYPE
 CL-TEST::SYMBOL-UPGRADED-COMPLEX-PART-TYPE
 CL-TEST::SYMBOL-UPPER-CASE-P
 CL-TEST::SYMBOL-USE-PACKAGE
 CL-TEST::SYMBOL-USE-VALUE
 CL-TEST::SYMBOL-USER-HOMEDIR-PATHNAME
 CL-TEST::SYMBOL-VALUES
 CL-TEST::SYMBOL-VALUES-LIST
 CL-TEST::SYMBOL-VARIABLE
 CL-TEST::SYMBOL-VECTOR
 CL-TEST::SYMBOL-VECTOR-POP
 CL-TEST::SYMBOL-VECTOR-PUSH
 CL-TEST::SYMBOL-VECTOR-PUSH-EXTEND
 CL-TEST::SYMBOL-VECTORP
 CL-TEST::SYMBOL-WARN
 CL-TEST::SYMBOL-WARNING
 CL-TEST::SYMBOL-WHEN
 CL-TEST::SYMBOL-WILD-PATHNAME-P
 CL-TEST::SYMBOL-WITH-ACCESSORS
 CL-TEST::SYMBOL-WITH-COMPILATION-UNIT
 CL-TEST::SYMBOL-WITH-CONDITION-RESTARTS
 CL-TEST::SYMBOL-WITH-HASH-TABLE-ITERATOR
 CL-TEST::SYMBOL-WITH-INPUT-FROM-STRING
 CL-TEST::SYMBOL-WITH-OPEN-FILE
 CL-TEST::SYMBOL-WITH-OPEN-STREAM
 CL-TEST::SYMBOL-WITH-OUTPUT-TO-STRING
 CL-TEST::SYMBOL-WITH-PACKAGE-ITERATOR
 CL-TEST::SYMBOL-WITH-SIMPLE-RESTART
 CL-TEST::SYMBOL-WITH-SLOTS
 CL-TEST::SYMBOL-WITH-STANDARD-IO-SYNTAX
 CL-TEST::SYMBOL-WRITE
 CL-TEST::SYMBOL-WRITE-BYTE
 CL-TEST::SYMBOL-WRITE-CHAR
 CL-TEST::SYMBOL-WRITE-LINE
 CL-TEST::SYMBOL-WRITE-SEQUENCE
 CL-TEST::SYMBOL-WRITE-STRING
 CL-TEST::SYMBOL-WRITE-TO-STRING
 CL-TEST::SYMBOL-Y-OR-N-P
 CL-TEST::SYMBOL-YES-OR-NO-P
 CL-TEST::SYMBOL-ZEROP
 CL-TEST::KEYWORD-PACKAGE-NICKNAMES
 CL-TEST::COMMON-LISP-PACKAGE-NICKNAMES
 CL-TEST::COMMON-LISP-USER-PACKAGE-NICKNAMES
 CL-TEST::NO-EXTRA-SYMBOLS-EXPORTED-FROM-COMMON-LISP
 CL-TEST::KEYWORD-BEHAVIOR
Test CL-TEST::CL-FUNCTION-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN (APPEND CL-TEST::*CL-FUNCTION-SYMBOLS* CL-TEST::*CL-ACCESSOR-SYMBOLS*) WHEN (OR (NOT (FBOUNDP CL-TEST::S)) (MACRO-FUNCTION CL-TEST::S) (SPECIAL-OPERATOR-P CL-TEST::S) (NOT (SYMBOL-FUNCTION CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ACOS ACOSH APROPOS APROPOS-LIST ASIN ASINH ASSOC-IF-NOT ASSOC-IF ATANH BIT-AND BIT-ANDC1 BIT-ANDC2 BIT-EQV BIT-IOR BIT-NAND BIT-NOR BIT-NOT BIT-ORC1 BIT-ORC2 BIT-XOR CHAR-NOT-EQUAL CHAR/= CHARACTER CIS CONCATENATED-STREAM-STREAMS CONJUGATE COPY-ALIST COPY-SYMBOL COPY-TREE COSH DECODE-FLOAT DECODE-UNIVERSAL-TIME DELETE-IF-NOT DENOMINATOR DEPOSIT-FIELD DIGIT-CHAR DISASSEMBLE DRIBBLE ENOUGH-NAMESTRING EXP FCEILING FFLOOR FILE-AUTHOR FILE-LENGTH FILE-STRING-LENGTH FLOAT-DIGITS FLOAT-PRECISION FLOAT-SIGN FROUND GCD GET-DECODED-TIME HOST-NAMESTRING INPUT-STREAM-P INSPECT INTERACTIVE-STREAM-P INVALID-METHOD-ERROR ISQRT LCM LOAD-LOGICAL-PATHNAME-TRANSLATIONS LOGCOUNT LOGICAL-PATHNAME MAKE-CONCATENATED-STREAM MAKE-LOAD-FORM-SAVING-SLOTS MAKE-SEQUENCE MAP-INTO MAPCON MAPL MEMBER-IF-NOT MERGE METHOD-COMBINATION-ERROR MISMATCH NBUTLAST NINTERSECTION NSET-DIFFERENCE NSET-EXCLUSIVE-OR NSTRING-CAPITALIZE NSUBLIS NSUBST NSUBST-IF NSUBST-IF-NOT NSUBSTITUTE NSUBSTITUTE-IF NSUBSTITUTE-IF-NOT NUMERATOR NUNION OPEN-STREAM-P OUTPUT-STREAM-P PACKAGE-SHADOWING-SYMBOLS PHASE POSITION-IF-NOT PPRINT-DISPATCH PPRINT-FILL PPRINT-LINEAR PPRINT-TABULAR RASSOC RASSOC-IF RASSOC-IF-NOT RATIONALIZE RATIONALP READ-CHAR-NO-HANG READ-DELIMITED-LIST REMPROP SCALE-FLOAT SET SET-EXCLUSIVE-OR SHADOWING-IMPORT SIMPLE-BIT-VECTOR-P SINH SLEEP STREAM-EXTERNAL-FORMAT STRING-CAPITALIZE STRING-GREATERP STRING-LESSP STRING-NOT-EQUAL STRING-NOT-GREATERP STRING-NOT-LESSP STRING-RIGHT-TRIM STRING-TRIM STRING/= STRING<= STRING> STRING>= SUBSETP SUBST-IF SUBST-IF-NOT SUBSTITUTE-IF-NOT TAN TANH TREE-EQUAL FTRUNCATE UNBOUND-SLOT-INSTANCE UNEXPORT UNUSE-PACKAGE UPGRADED-COMPLEX-PART-TYPE LOGICAL-PATHNAME-TRANSLATIONS MASK-FIELD) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-MACRO-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* WHEN (OR (NOT (FBOUNDP CL-TEST::S)) (NOT (MACRO-FUNCTION CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER PROG* REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-CONSTANT-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-CONSTANT-SYMBOLS* WHEN (OR (NOT (BOUNDP CL-TEST::S)) (NOT (CONSTANTP CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LAMBDA-PARAMETERS-LIMIT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LONG-FLOAT-EPSILON LONG-FLOAT-NEGATIVE-EPSILON MULTIPLE-VALUES-LIMIT SHORT-FLOAT-EPSILON SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON) [Actual value: #<error during printing>

 NIL
 CL-TEST::CL-VARIABLE-SYMBOLS.1
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (FIND-CLASS CL-TEST::S NIL) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (FIND-CLASS CL-TEST::S NIL NIL) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((CL-TEST::%FOO (&ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) NIL CL-TEST::ENV)))) (CL-TEST::%FOO)))) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-PACKAGE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-PACKAGE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-PACKAGE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-PACKAGE (QUOTE CONS) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::SYMBOL-PACKAGE.ERROR.3
Test CL-TEST::SYMBOL-PLIST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-PLIST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-PLIST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-PLIST (QUOTE CONS) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::SYMBOL-PLIST.ERROR.3
 CL-TEST::SYMBOL-PLIST.ERROR.4
Test CL-TEST::SYMBOL-VALUE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-VALUE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-VALUE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-VALUE (QUOTE *PACKAGE*) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::SYMBOL-VALUE.ERROR.3Space
 CL-TEST::SYMBOL-VALUE.ERROR.4
 CL-TEST::SYMBOL-VALUE.ERROR.5
 CL-TEST::SYMBOLP.1
 CL-TEST::SYMBOLP.2
 CL-TEST::SYMBOLP.3
Test CL-TEST::SYMBOLP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOLP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOLP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOLP NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::KEYWORDP.1
 CL-TEST::KEYWORDP.2
 CL-TEST::KEYWORDP.3
 CL-TEST::KEYWORDP.4
 CL-TEST::KEYWORDP.5
 CL-TEST::KEYWORDP.6
 CL-TEST::KEYWORDP.7
 CL-TEST::KEYWORDP.8
 CL-TEST::KEYWORDP.9
 CL-TEST::KEYWORDP.10
 CL-TEST::KEYWORDP.12
 CL-TEST::KEYWORDP.13
 CL-TEST::KEYWORDP.ORDER.1
Test CL-TEST::KEYWORDP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (KEYWORDP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::KEYWORDP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (KEYWORDP :X :X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-SYMBOL.1
 CL-TEST::MAKE-SYMBOL.2
 CL-TEST::MAKE-SYMBOL.3
 CL-TEST::MAKE-SYMBOL.4
 CL-TEST::MAKE-SYMBOL.5
 CL-TEST::MAKE-SYMBOL.6
 CL-TEST::MAKE-SYMBOL.7
 CL-TEST::MAKE-SYMBOL.8
 CL-TEST::MAKE-SYMBOL.9
 CL-TEST::MAKE-SYMBOL.10
Test CL-TEST::MAKE-SYMBOL.11 failed
Form: (SYMBOL-NAME (MAKE-SYMBOL (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)))
Expected value:
          ""
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::NAME is #*, which is not of type STRING.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-SYMBOL.12
 CL-TEST::MAKE-SYMBOL.13
 CL-TEST::MAKE-SYMBOL.14
 CL-TEST::MAKE-SYMBOL.15
 CL-TEST::MAKE-SYMBOL.16
 CL-TEST::MAKE-SYMBOL.ORDER.1Space
 CL-TEST::MAKE-SYMBOL.ERROR.1
Test CL-TEST::MAKE-SYMBOL.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-SYMBOL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-SYMBOL.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-SYMBOL "a" "a") PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error "a" fell through ECASE expression. Wanted one of (:STATIC :DYNAMIC NIL)> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-SYMBOL.ERROR.11
Test CL-TEST::COPY-SYMBOL.1 failed
Form: (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X))) (AND (NULL (SYMBOL-PLIST CL-TEST::Y)) (SYMBOLP CL-TEST::Y) (NOT (BOUNDP CL-TEST::Y)) (NOT (FBOUNDP CL-TEST::Y)) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X) (SYMBOL-NAME CL-TEST::Y)) (SYMBOLP (COPY-SYMBOL CL-TEST::Y)))))) (QUOTE (NIL T CL-TEST::A CL-TEST::B CL-TEST::\a CL-TEST::123))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.2 failed
Form: (PROGN (SETF (SYMBOL-PLIST (QUOTE CL-TEST::\f\o\o)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (MAKUNBOUND (QUOTE CL-TEST::\f\o\o)) (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X T))) (AND (EQUAL (SYMBOL-PLIST CL-TEST::Y) (SYMBOL-PLIST CL-TEST::X)) (SYMBOLP CL-TEST::Y) (IF (BOUNDP CL-TEST::X) (BOUNDP CL-TEST::Y) (NOT (BOUNDP CL-TEST::Y))) (IF (FBOUNDP CL-TEST::X) (FBOUNDP CL-TEST::Y) (NOT (FBOUNDP CL-TEST::Y))) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X) (SYMBOL-NAME CL-TEST::Y)))))) (QUOTE (NIL T CL-TEST::A CL-TEST::B CL-TEST::\f\o\o CL-TEST::\a CL-TEST::123)))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.3 failed
Form: (PROGN (SETF (SYMBOL-PLIST (QUOTE CL-TEST::\f\o\o)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SYMBOL-VALUE (QUOTE CL-TEST::\a)) 12345) (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X T))) (AND (EQL (LENGTH (SYMBOL-PLIST CL-TEST::Y)) (LENGTH (SYMBOL-PLIST CL-TEST::X))) (EVERY (FUNCTION EQ) (SYMBOL-PLIST CL-TEST::Y) (SYMBOL-PLIST CL-TEST::X)) (SYMBOLP CL-TEST::Y) (IF (BOUNDP CL-TEST::X) (CL-TEST::EQT (SYMBOL-VALUE CL-TEST::X) (SYMBOL-VALUE CL-TEST::Y)) (NOT (BOUNDP CL-TEST::Y))) (IF (FBOUNDP CL-TEST::X) (FBOUNDP CL-TEST::Y) (NOT (FBOUNDP CL-TEST::Y))) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X) (SYMBOL-NAME CL-TEST::Y)) (EQL (LENGTH (SYMBOL-PLIST CL-TEST::X)) (LENGTH (SYMBOL-PLIST CL-TEST::Y))))))) (QUOTE (NIL T CL-TEST::A CL-TEST::B CL-TEST::\f\o\o CL-TEST::\a CL-TEST::123)))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.4 failed
Form: (CL-TEST::EQT (COPY-SYMBOL (QUOTE CL-TEST::A)) (COPY-SYMBOL (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.5 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y (CL-TEST::S (QUOTE #:\x))) (LET ((CL-TEST::S2 (COPY-SYMBOL (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::S) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) NIL)))) (VALUES (SYMBOL-NAME CL-TEST::S2) (EQ CL-TEST::S CL-TEST::S2) CL-TEST::I CL-TEST::X CL-TEST::Y)))
Expected value:
          "x"
          NIL
          2
          1
          2
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-SYMBOL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-SYMBOL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
Test CLL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-SYMBOL (QUOTE CL-TEST::A) T (QUOTE CL-TEST::FOO)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 NIL
 CL-TEST::GENSYM.1
 CL-TEST::GENSYM.2
 CL-TEST::GENSYM.3
 CL-TEST::GENSYM.4
 CL-TEST::GENSYM.5
 CL-TEST::GENSYM.6
 CL-TEST::GENSYM.7
 CL-TEST::GENSYM.8
 CL-TEST::GENSYM.9
Test CL-TEST::GENSYM.12 failed
Form: (LET ((*GENSYM-COUNTER* 10)) (SYMBOL-NAME (GENSYM 123)))
Expected value:
          "G123"
Actual value:
          "12310" [Actual value: #<error during printing>

 NIL
Test CL-TEST::GENSYM.13 failed
Form: (LET ((*GENSYM-COUNTER* 10)) (GENSYM 123) *GENSYM-COUNTER*)
Expected value:
          10
Actual value:
          11 [Actual value: #<error during printing>

 NIL
 CL-TEST::GENSYM-COUNTER.1
Test CL-TEST::GENSYM.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION GENSYM) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR STRING UNSIGNED-BYTE))))))
Expected value:
          NIL
Actual value:
          ((#\Space (NIL #: 63117)) ((CL-TEST::A CL-TEST::B) (NIL #:(A B)63118)) (#<Arithmetic-Error 80584BE7> (NIL #:T\h\e \c\o\n\d\i\t\i\o\n ARITHMETIC-ERROR \w\a\s \s\i\g\n\a\l\l\e\d.63119)) (#<Package "Cl"> (NIL #:#<P\a\c\k\a\g\e "C\l">63120)) (#(0 0 0 0 0 0 0 0 0 0) (NIL #:#(0 0 0 0 0 0 0 0 0 0)63121)) (#<Hash-Table 8058D507> (NIL #:#<H\a\s\h-T\a\b\l\e 8058D507>63122)) (#P"THAT-MAC-THING:foo" (NILIL63124)) (#<Synonym-Stream for *TERMINAL-IO*> (NIL #:#<S\y\n\o\n\y\m-S\t\r\e\a\m \f\o\r *TERMINAL-IO*>63125)) (#<Readtable 800026B7> (NIL #:#<R\e\a\d\t\a\b\l\e 800026B7>63126)) (#<Cl-Test::Foo-Structure 8058B2A7> (NIL #:#<F\o\o-S\t\r\u\c\t\u\r\e 8058B2A7>63127)) (#<Function CONS 2802BC> (NIL #:#<F\u\n\c\t\i\o\n CONS 2802BC>63128)) (#<Random-State 8058C6D7> (NIL #:#<R\a\n\d\o\m-S\t\a\t\e 8058C6D7>63129)) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 80586AD7> (NIL #:#<S\t\a\n\d\a\r\d-M\e\t\h\o\d CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 80586AD7>63130))) [Actual value: #<error during printing>

 NIL
Test CL-TEST::GENSYM.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (GENSYM 10 (QUOTE CL-TEST::FOO)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GENSYM.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (GENSYM T) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::GENSYM.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (GENSYM "FOO" NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::GENTEMP.1
 CL-TEST::GENTEMP.2
 CL-TEST::GENTEMP.3
 CL-TEST::GENTEMP.4
 CL-TEST::GENTEMP.5
 CL-TEST::GENTEMP.6
Test CL-TEST::GENTEMP.ERROR.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (OR (STRINGP CL-TEST::X) (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) (GENTEMP CL-TEST::X)))) T)) CL-TEST::COLLECT CL-TEST::X)
Expected value:
          NIL
Actual value:
          (0 #\Space (CL-TEST::A CL-TEST::B) #<Arithmetic-Error 80584BE7> #<Package "Cl"> #(0 0 0 0 0 0 0 0 0 0) #<Hash-Table 8058D507> #P"THAT-MAC-THING:foo" NIL #<Synonym-Stream for *TERMINAL-IO*> #<Readtable 800026B7> #<Cl-Test::Foo-Structure 8058B2A7> #<Function CONS 2802BC> #<Random-State 8058C6D7> #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 80586AD7>) [Actual value: #<error during printing>

 NIL
Test CL-TEST::GENTEMP.ERROR.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (OR (TYPEP CL-TEST::X (QUOTE PACKAGE)) (CL-TEST::STRING-DESIGNATOR-P CL-TEST::X) (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) (GENTEMP "T" CL-TEST::X)))) T)) CL-TEST::COLLECT CL-TEST::X)
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GENTEMP.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (GENTEMP "" *PACKAGE* NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-FUNCTION.1
Test CL-TEST::SYMBOL-FUNCTION.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-FUNCTION) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-FUNCTION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-FUNCTION (QUOTE CONS) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::SYMBOL-FUNCTION.ERROR.3Space
 CL-TEST::SYMBOL-FUNCTION.ERROR.4
 CL-TEST::SYMBOL-FUNCTION.ERROR.5
 CL-TEST::SYMBOL-NAME.1
 CL-TEST::SYMBOL-NAME.2
 CL-TEST::SYMBOL-NAME.3
Test CL-TEST::SYMBOL-NAME.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-NAME) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-NAME.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-NAME (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::SYMBOL-NAME.ERROR.3
Test CL-TEST::BOUNDP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BOUNDP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BOUNDP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BOUNDP (QUOTE CL-TEST::A) (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::BOUNDP.ERROR.3
 CL-TEST::BOUNDP.ERROR.4
 CL-TEST::BOUNDP.ERROR.5
 CL-TEST::BOUNDP.ERROR.6
 CL-TEST::BOUNDP.1
 CL-TEST::BOUNDP.2
 CL-TEST::BOUNDP.3
 CL-TEST::BOUNDP.4
 CL-TEST::BOUNDP.5
 CL-TEST::BOUNDP.6
 CL-TEST::BOUNDP.ORDER.1
 CL-TEST::SPECIAL-OPERATOR-P.1
 CL-TEST::SPECIAL-OPERATOR-P.2
 CL-TEST::SPECIAL-OPERATOR-P.ORDER.1Space
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.1
Test CL-TEST::SPECIAL-OPERATOR-P.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SPECIAL-OPERATOR-P) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SPECIAL-OPERATOR-P.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SPECIAL-OPERATOR-P (QUOTE CONS) (QUOTE CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKUNBOUND.1
 CL-TEST::MAKUNBOUND.2
Test CL-TEST::MAKUNBOUND.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKUNBOUND) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKUNBOUND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKUNBOUND (GENSYM) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::MAKUNBOUND.ERROR.3
Test CL-TEST::SET.1 failed
Form: (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A)) (CL-TEST::VAR (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (VALUES CL-TEST::*VAR-USED-IN-SET-TESTS* (SET CL-TEST::VAR (QUOTE CL-TEST::B)) CL-TEST::*VAR-USED-IN-SET-TESTS*))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::B
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.2 failed
Form: (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A)) (CL-TEST::VAR (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (VALUES (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::C))) (LIST (SET CL-TEST::VAR (QUOTE CL-TEST::B)) CL-TEST::*VAR-USED-IN-SET-TESTS* (SYMBOL-VALUE CL-TEST::VAR))) CL-TEST::*VAR-USED-IN-SET-TESTS*))
Expected value:
          (CL-TEST::B CL-TEST::C CL-TEST::B)
          CL-TEST::B
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SET) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (SET (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (SET (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*) NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A)) (CL-TEST::*Y* (QUOTE CL-TEST::B))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (SET (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*) NIL (QUOTE CL-TEST::*Y*) NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (REMPROP CL-TEST::SYM :FOO)) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (NIL)
          NIL
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.2 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (QUOTE (:FOO 0)))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:FOO 0)
          (T)
          NIL
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.3 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (LIST :BAR 1 :FOO 0 :BAZ 2))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (COPY-LIST (SYMBOL-PLIST CL-TEST::SYM)) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:BAR 1 :FOO 0 :BAZ 2)
          (T)
          (:BAR 1 :BAZ 2)
          (NIL)
          (:BAR 1 :BAZ 2)
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.4 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (LIST :BAR 1 :FOO 0 :BAZ 2 :FOO 3))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (COPY-LIST (SYMBOL-PLIST CL-TEST::SYM)) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:BAR 1 :FOO 0 :BAZ 2 :FOO 3)
          (T)
          (:BAR 1 :BAZ 2 :FOO 3)
          (T)
          (:BAR 1 :BAZ 2)
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (REMPROP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (REMPROP (GENSYM)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (REMPROP (GENSYM) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.ERROR.4 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (REMPROP CL-TEST::X NIL))) (FUNCTION SYMBOLP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
 CL-TEST::GET.1
 CL-TEST::GET.2
 CL-TEST::GET.3
 CL-TEST::GET.4
 CL-TEST::GET.5
 CL-TEST::GET.6
 CL-TEST::GET.ORDER.1
 CL-TEST::GET.ORDER.2
 CL-TEST::GET.ORDER.3
 CL-TEST::GET.ORDER.4
Test CL-TEST::GET.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (GET) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GET.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (GET NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GET.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (GET NIL NIL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::GET.ERROR.4Space
 CL-TEST::GET.ERROR.5
 CL-TEST::EVAL.1
 CL-TEST::EVAL.2
 CL-TEST::EVAL.3
 CL-TEST::EVAL.4
 CL-TEST::EVAL.5
 CL-TEST::EVAL.6
 CL-TEST::EVAL.ORDER.1
Test CL-TEST::EVAL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (EVAL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVAL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (EVAL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVAL.ERROR.3
 CL-TEST::EVAL.ERROR.4
 CL-TEST::EVAL-AND-COMPILE-FNS
Test CL-TEST::EVAL-AND-COMPILE-MACROS failed
Form: (REMOVE-IF (FUNCTION MACRO-FUNCTION) CL-TEST::*EVAL-AND-COMPILE-MACROS*)
Expected value:
          NIL
Actual value:
          (DEFINE-SYMBOL-MACRO) [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPILE.1 failed
Form: (PROGN (FMAKUNBOUND (QUOTE CL-TEST::COMPILE.1-FN)) (VALUES (EVAL (QUOTE (DEFUN CL-TEST::COMPILE.1-FN (CL-TEST::X) CL-TEST::X))) (COMPILED-FUNCTION-P (QUOTE CL-TEST::COMPILE.1-FN)) (LET ((CL-TEST::X (COMPILE (QUOTE CL-TEST::COMPILE.1-FN)))) (OR (CL-TEST::EQT CL-TEST::X (QUOTE CL-TEST::COMPILE.1-FN)) (CL-TEST::NOTNOT (COMPILED-FUNCTION-P CL-TEST::X)))) (COMPILED-FUNCTION-P (QUOTE CL-TEST::COMPILE.1-FN)) (NOT (COMPILED-FUNCTION-P (FUNCTION CL-TEST::COMPILE.1-FN))) (FMAKUNBOUND (QUOTE CL-TEST::COMPILE.1-FN))))
Expected value:
          CL-TEST::COMPILE.1-FN
          NIL
          T
          NIL
          NIL
          CL-TEST::COMPILE.1-FN
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::+FUNCTION-TYPE-INTERPRETED-FUNCTION+> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILE.2
 CL-TEST::COMPILE.3
 CL-TEST::COMPILE.4
 CL-TEST::COMPILE.5
 CL-TEST::COMPILE.6
 CL-TEST::COMPILE.7
 CL-TEST::COMPILE.8
 CL-TEST::COMPILE.9
Test CL-TEST::COMPILE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COMPILE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPILE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COMPILE NIL (QUOTE (LAMBDA NIL NIL)) (QUOTE CL-TEST::GARBAGE)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONSTANTP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (CONSTANTP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONSTANTP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (CONSTANTP NIL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONSTANTP.1
 CL-TEST::CONSTANTP.2
 CL-TEST::CONSTANTP.3
 CL-TEST::CONSTANTP.4
 CL-TEST::CONSTANTP.5
 CL-TEST::CONSTANTP.6
 CL-TEST::CONSTANTP.7
 CL-TEST::CONSTANTP.8
 CL-TEST::CONSTANTP.9
 CL-TEST::CONSTANTP.10
 CL-TEST::CONSTANTP.11
 CL-TEST::CONSTANTP.ORDER.1
 CL-TEST::CONSTANTP.ORDER.2
 CL-TEST::LAMBDA.1
 CL-TEST::LAMBDA.2
 CL-TEST::LAMBDA.3
 CL-TEST::LAMBDA.4
 CL-TEST::LAMBDA.5
 CL-TEST::LAMBDA.6
 CL-TEST::LAMBDA.7
 CL-TEST::LAMBDA.8
 CL-TEST::LAMBDA.9
 CL-TEST::LAMBDA.10
 CL-TEST::LAMBDA.11
 CL-TEST::LAMBDA.12
 CL-TEST::LAMBDA.13
 CL-TEST::LAMBDA.14
 CL-TEST::LAMBDA.15
 CL-TEST::LAMBDA.16
 CL-TEST::LAMBDA.17
 CL-TEST::LAMBDA.18
 CL-TEST::LAMBDA.19
 CL-TEST::LAMBDA.20
Test CL-TEST::LAMBDA.21 failed
Form: (FLET ((CL-TEST::%F NIL (LOCALLY (DECLARE (SPECIAL CL-TEST::*X*)) (INCF CL-TEST::*X*)))) ((LAMBDA (CL-TEST::*X*) (DECLARE (SPECIAL CL-TEST::*X*)) (CL-TEST::%F) CL-TEST::*X*) 10))
Expected value:
          11
Actual value:
          #<Unbound-Variable CL-TEST::*X*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.22 failed
Form: (FLET ((CL-TEST::%F NIL (LOCALLY (DECLARE (SPECIAL CL-TEST::*X*)) (1+ CL-TEST::*X*)))) ((LAMBDA (CL-TEST::*X*) (DECLARE (SPECIAL CL-TEST::*X*)) (CL-TEST::%F)) 15))
Expected value:
          16
Actual value:
          #<Unbound-Variable CL-TEST::*X*> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.23
 CL-TEST::LAMBDA.24
 CL-TEST::LAMBDA.25
 CL-TEST::LAMBDA.26
Test CL-TEST::LAMBDA.27 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.28 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS T :FOO T)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.29 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.30 failed
Form: ((LAMBDA (&KEY CL-TEST::X) CL-TEST::X) :ALLOW-OTHER-KEYS T :X 10 :ALLOW-OTHER-KEYS NIL :FOO T)
Expected value:
          10
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.31
Test CL-TEST::LAMBDA.32 failed
Form: ((LAMBDA (&REST CL-TEST::X &KEY) CL-TEST::X) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (:ALLOW-OTHER-KEYS NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.33 failed
Form: ((LAMBDA (&REST CL-TEST::X &KEY) CL-TEST::X) :W 5 :ALLOW-OTHER-KEYS T :X 10)
Expected value:
          (:W 5 :ALLOW-OTHER-KEYS T :X 10)
Actual value:
          #<Simple-Error Unknown &KEY argument :W.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.34
 CL-TEST::LAMBDA.35
Test CL-TEST::LAMBDA.36 failed
Form: ((LAMBDA (&KEY (CL-TEST::A 1 CL-TEST::A-P) (CL-TEST::B 2 CL-TEST::B-P) (CL-TEST::C 3 CL-TEST::C-P)) (LIST CL-TEST::A (CL-TEST::NOTNOT CL-TEST::A-P) CL-TEST::B (CL-TEST::NOTNOT CL-TEST::B-P) CL-TEST::C (CL-TEST::NOTNOT CL-TEST::C-P))) :C 5 :A 0 :ALLOW-OTHER-KEYS T (QUOTE CL-TEST::B) 100)
Expected value:
          (0 T 2 NIL 5 T)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.37
 CL-TEST::LAMBDA.38
 CL-TEST::LAMBDA.39
 CL-TEST::LAMBDA.40
 CL-TEST::LAMBDA.41
 CL-TEST::LAMBDA.42
 CL-TEST::LAMBDA.43
 CL-TEST::LAMBDA.44
 CL-TEST::LAMBDA.45
 CL-TEST::LAMBDA.46
Test CL-TEST::LAMBDA.47 failed
Form: ((LAMBDA (&KEY CL-TEST::A CL-TEST::B CL-TEST::ALLOW-OTHER-KEYS) (LIST CL-TEST::ALLOW-OTHER-KEYS CL-TEST::A CL-TEST::B)) :C 10 :ALLOW-OTHER-KEYS T :A 1 :B 2 :D 20)
Expected value:
          (T 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.48
 CL-TEST::LAMBDA.49
Test CL-TEST::LAMBDA.50 failed
Form: ((LAMBDA (&KEY CL-TEST::A CL-TEST::B ((:ALLOW-OTHER-KEYS CL-TEST::AOK))) (LIST CL-TEST::AOK CL-TEST::A CL-TEST::B)) :D 40 :A 1 :ALLOW-OTHER-KEYS T :B 2 :C 20)
Expected value:
          (T 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :D.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.51
 CL-TEST::LAMBDA.52
 CL-TEST::LAMBDA.53
 CL-TEST::LAMBDA.54
 CL-TEST::LAMBDA.55
 CL-TEST::LAMBDA.56
Test CL-TEST::LAMBDA.63 failed
Form: (LET ((CL-TEST::Y :BAD1)) (DECLARE (IGNORE CL-TEST::Y)) (LET ((CL-TEST::Y :BAD2)) (DECLARE (SPECIAL CL-TEST::Y)) (FLET ((CL-TEST::%F NIL CL-TEST::Y)) ((LAMBDA (CL-TEST::X &AUX (CL-TEST::Y :GOOD)) (DECLARE (SPECIAL CL-TEST::Y) (IGNORE CL-TEST::X)) (CL-TEST::%F)) NIL))))
Expected value:
          :GOOD
Actual value:
          :BAD2 [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.64 failed
Form: (LET ((CL-TEST::X :BAD)) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) ((LAMBDA (CL-TEST::X &AUX (CL-TEST::Y (CL-TEST::%F))) (DECLARE (TYPE T CL-TEST::Y) (SPECIAL CL-TEST::X)) CL-TEST::Y) :GOOD)))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.MACRO.1
 CL-TEST::LAMBDA.MACRO.2
Test CL-TEST::LAMBDA.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LAMBDA))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LAMBDA)) (QUOTE (LAMBDA NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LAMBDA)) (QUOTE (LAMBDA NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/generated-eval-when-test-file.lisp 8198BF77>
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (LET :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (LET :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN NIL (PUSH (QUOTE (LET)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (:LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (:EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN NIL (PUSH (QUOTE NIL) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Compiling file "generated-eval-when-test-file.lisp".
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (LET :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (LET :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN NIL (PUSH (QUOTE (LET)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (:LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (:EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN NIL (PUSH (QUOTE NIL) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/generated-eval-when-test-file.llf 81D61B27>

 CL-TEST::EVAL-WHEN.1
 CL-TEST::EVAL-WHEN.2
 CL-TEST::EVAL-WHEN.3
 CL-TEST::EVAL-WHEN.4
 CL-TEST::EVAL-WHEN.5
 CL-TEST::EVAL-WHEN.6
 CL-TEST::EVAL-WHEN.7
 CL-TEST::EVAL-WHEN.8
 CL-TEST::EVAL-WHEN.9
 CL-TEST::EVAL-WHEN.10
 CL-TEST::EVAL-WHEN.11
 CL-TEST::EVAL-WHEN.12
 CL-TEST::EVAL-WHEN.13
 CL-TEST::EVAL-WHEN.14
 CL-TEST::EVAL-WHEN.15
 CL-TEST::EVAL-WHEN.16
 CL-TEST::EVAL-WHEN.17
 CL-TEST::EVAL-WHEN.18
Test CL-TEST::DEFINE-COMPILER-MACRO.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-COMPILER-MACRO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-COMPILER-MACRO.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-COMPILER-MACRO)) (QUOTE (CL-TEST::DEFINEE-COMPILER-MACRO CL-TEST::NONEXISTENT-FUNCTION NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-COMPILER-MACRO.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-COMPILER-MACRO)) (QUOTE (CL-TEST::DEFINEE-COMPILER-MACRO CL-TEST::NONEXISTENT-FUNCTION NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-COMPILER-MACRO.1
 CL-TEST::DEFINE-COMPILER-MACRO.2
Test CL-TEST::DEFINE-COMPILER-MACRO.3 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (&WHOLE CL-TEST::FORM &REST CL-TEST::ARGS) (DECLARE (SPECIAL CL-TEST::*X*) (IGNORE CL-TEST::ARGS)) (SETF CL-TEST::*X* T) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::FORM)))) (CL-TEST::ORDINARY-MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X) CL-TEST::X)))) (VALUES (CL-TEST::EQUALT (LIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (EVAL CL-TEST::ORDINARY-MACRO-DEF-FORM))) (CL-TEST::EQUALT (LIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (EVAL CL-TEST::MACRO-DEF-FORM))) (CL-TEST::NOTNOT (TYPEP (COMPILER-MACRO-FUNCTION CL-TEST::SYM) (QUOTE FUNCTION))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (QUOTE CL-TEST::A)))) (LET ((CL-TEST::FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::A)))))) (LET ((CL-TEST::*X* NIL)) (DECLARE (SPECIAL CL-TEST::*X*)) (LIST (FUNCALL CL-TEST::FN (QUOTE CL-TEST::B)) CL-TEST::*X*)))))
Expected value:
          T
          T
          T
          CL-TEST::A
          (CL-TEST::B NIL)
Actual value:
          #<Undefined-Function #:G73384> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-COMPILER-MACRO.4
 CL-TEST::DEFINE-COMPILER-MACRO.5
 CL-TEST::DEFINE-COMPILER-MACRO.6
Test CL-TEST::DEFINE-COMPILER-MACRO.7 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::*X*)) (SETF CL-TEST::*X* :BAD) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)))))) (CL-TEST::FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (LIST CL-TEST::X CL-TEST::Y))))) (EVAL CL-TEST::FORM) (EVAL CL-TEST::FORM2) (COMPILE CL-TEST::SYM) (LET ((CL-TEST::*X* :GOOD)) (DECLARE (SPECIAL CL-TEST::*X*)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A CL-TEST::B) (DECLARE (NOTINLINE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM))) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::A CL-TEST::B)))) 5 11) CL-TEST::*X*)))
Expe value:
          (5 11)
          :GOOD
Actual value:
          (5 11) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-COMPILER-MACRO.8 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::*X*)) (SETF CL-TEST::*X* :BAD) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)))))) (CL-TEST::FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y))))))) (EVAL CL-TEST::FORM) (EVAL CL-TEST::FORM2) (LET ((CL-TEST::*X* :GOOD)) (DECLARE (SPECIAL CL-TEST::*X*)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A CL-TEST::B) (DECLARE (NOTINLINE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM))) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::A CL-TEST::B)))) 7 23) CL-TEST::*X*)))
Expected value:
          (7 23)
          :GOOD
Actual value:
          (7 23) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO CL-TEST::NONEXISTENT-SYMBOL-MACRO NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO CL-TEST::NONEXISTENT-SYMBIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFMACRO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFMACRO)) (QUOTE (DEFMACRO CL-TEST::NONEXISTENT-MACRO NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFMACRO)) (QUOTE (DEFMACRO CL-TEST::NONEXISTENT-MACRO NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to functio value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.1 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.1-MACRO (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST 1 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) 2 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y) 3))) (QUOTE CL-TEST::DEFMACRO.1-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE CL-TEST::DEFMACRO.1-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.1-MACRO (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))))
Expected value:
          (1 CL-TEST::A 2 CL-TEST::B 3)
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.1-MACRO (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST 1 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) 2 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y) 3))) (QUOTE CL-TEST::DEFMACRO.1-MACRO)).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.2 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.2-MACRO (CL-TEST::X CL-TEST::Y) (RETURN-FROM CL-TEST::DEFMACRO.2-MACRO (SYSTEM.INTERNALS::BACKQUOTE (CONS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y))))) (QUOTE CL-TEST::DEFMACRO.2-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE CL-TEST::DEFMACRO.2-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.2-MACRO (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))))
Expected value:
          (CL-TEST::A . CL-TEST::B)
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.2-MACRO (CL-TEST::X CL-TEST::Y) (RETURN-FROM CL-TEST::DEFMACRO.2-MACRO (SYSTEM.INTERNALS::BACKQUOTE (CONS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y))))) (QUOTE CL-TEST::DEFMACRO.2-MACRO)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFMACRO.3
Test CL-TEST::DEFMACRO.4 failed
Form: (LET ((CL-TEST::Y :GOOD)) (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.4-MACRO (&OPTIONAL (CL-TEST::X CL-TEST::Y)) (DECLARE (SPECIAL CL-TEST::Y)) CL-TEST::X) (QUOTE CL-TEST::DEFMACRO.4-MACRO))) (LET ((CL-TEST::Y :BAD)) (DECLARE (SPECIAL CL-TEST::Y)) (VALUES (MACROEXPAND-1 (QUOTE (CL-TEST::DEFMACRO.4-MACRO))))))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.4-MACRO (&OPTIONAL (CL-TEST::X CL-TEST::Y)) (DECLARE (SPECIAL CL-TEST::Y)) CL-TEST::X) (QUOTE CL-TEST::DEFMACRO.4-MACRO)).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.5 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE CL-TEST::DEFMACRO.5-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.5-MACRO))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE CL-TEST::DEFMACRO.5-MACRO)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFMACRO.6
 CL-TEST::DEFMACRO.7
 CL-TEST::DEFMACRO.8
 CL-TEST::DEFMACRO.9
 CL-TEST::DEFMACRO.10
 CL-TEST::DEFMACRO.11
 CL-TEST::DEFMACRO.12
 CL-TEST::DEFMACRO.13
 CL-TEST::DEFMACRO.14
 CL-TEST::DEFMACRO.15
 CL-TEST::DEFMACRO.16
 CL-TEST::DEFMACRO.17
 CL-TEST::DEFMACRO.17A
 CL-TEST::DEFMACRO.18
 CL-TEST::DEFMACRO.19
 CL-TEST::DEFMACRO.20
Test CL-TEST::DEFMACRO.21 failed
Form: (PROGN (DEFMACRO CL-TEST::DEFMACRO.21-MACRO (&KEY CL-TEST::X CL-TEST::Y CL-TEST::Z) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Z))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((CL-TEST::DEFMACRO.21-MACRO) (CL-TEST::DEFMACRO.21-MACRO :X CL-TEST::A) (CL-TEST::DEFMACRO.21-MACRO :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C) (CL-TEST::DEFMACRO.21-MACRO :X CL-TEST::A :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :X CL-TEST::A) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :X CL-TEST::A :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS NIL) (CL-TEST::DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS T :FOO CL-TEST::BAR)))))
Expected value:
          ((NIL NIL NIL) (CL-TEST::A NIL NIL) (NIL CL-TEST::B NIL) (NIL NIL CL-TEST::C) (CL-TEST::A CL-TEST::B NIL) (NIL CL-TEST::B CL-TEST::C) (CL-TEST::A NIL CL-TEST::C) (CL-TEST::A CL-TEST::B CL-TEST::C) (NIL NIL NIL) (NIL NIL NIL))
Actual value:
          #<Simple-Error Invalid keyword :ALLOW-OTHER-KEYS. Wanted one of (:Z :Y :X).> [Actual value: #<error during printing>

 NIL
 CL-TEST::THE.1
 CL-TEST::THE.2
 CL-TEST::THE.3
 CL-TEST::THE.4
 CL-TEST::THE.5
 CL-TEST::THE.6
 CL-TEST::THE.7
 CL-TEST::THE.8
 CL-TEST::THE.9
 CL-TEST::THE.10
 CL-TEST::THE.11
 CL-TEST::THE.12
 CL-TEST::THE.13
 CL-TEST::THE.14
 CL-TEST::THE.15
 CL-TEST::THE.16
 CL-TEST::THE.17
 CL-TEST::THE.18
 CL-TEST::THE.19
 CL-TEST::THE.20
 CL-TEST::THE.21
 CL-TEST::THE.22
 CL-TEST::THE.23
 CL-TEST::THE.24
 CL-TEST::THE.25
 CL-TEST::SYMBOL-MACROLET.1
 CL-TEST::SYMBOL-MACROLET.2
 CL-TEST::SYMBOL-MACROLET.3
 CL-TEST::SYMBOL-MACROLET.4
 CL-TEST::SYMBOL-MACROLET.5
 CL-TEST::SYMBOL-MACROLET.6
 CL-TEST::SYMBOL-MACROLET.7
 CL-TEST::SYMBOL-MACROLET.8
Test CL-TEST::SYMBOL-MACROLET.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::X 10)) (DECLARE (SPECIAL CL-TEST::X)) 20) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-MACROLET.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2 (QUOTE CL-TEST::A))) CL-TEST::CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-MACROLET.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::*PATHNAMES* 19)) CL-TEST::*PATHNAMES*) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-MACROLET.9
 CL-TEST::PROCLAIM.1
 CL-TEST::PROCLAIM.2
 CL-TEST::PROCLAIM.3
Test CL-TEST::PROCLAIM.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (OPTIMIZE)) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (OPTIMIZE . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::PROCLAIM.ERROR.4
 CL-TEST::PROCLAIM.ERROR.5
Test CL-TEST::PROCLAIM.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (TYPE . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (FTYPE . CL-TEST::FOO))) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (TYPE INTEGER . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (INTEGER . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (DECLARATION . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (FTYPE (FUNCTION (T) T) . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DECLAIM.1
 CL-TEST::DECLAIM.2
 CL-TEST::DECLAIM.3
 CL-TEST::DECLAIM.4
 CL-TEST::DECLAIM.5
 CL-TEST::DECLAIM.6
 CL-TEST::DECLAIM.7
 CL-TEST::DECLAIM.8
 CL-TEST::DECLAIM.9
 CL-TEST::DECLAIM.10
 CL-TEST::DECLAIM.11
 CL-TEST::LOCALLY.1
 CL-TEST::LOCALLY.2
 CL-TEST::LOCALLY.3
 CL-TEST::LOCALLY.4
 CL-TEST::LOCALLY.5
 CL-TEST::LOCALLY.6
 CL-TEST::LOCALLY.7
 CL-TEST::LOCALLY.8
 CL-TEST::IGNORE.1
 CL-TEST::IGNORE.2
 CL-TEST::IGNORE.3
 CL-TEST::IGNORE.4
 CL-TEST::IGNORE.5
 CL-TEST::IGNORE.6
 CL-TEST::IGNORABLE.1
 CL-TEST::IGNORABLE.2
 CL-TEST::IGNORABLE.3
 CL-TEST::IGNORABLE.4
 CL-TEST::IGNORABLE.5
Test CL-TEST::IGNORABLE.6 failed
Form: (FLET (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (DECLARE (IGNORABLE (FUNCTION (SETF CL-TEST::%F)))) (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (VALUES (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)))
Expected value:
          CL-TEST::C
          (CL-TEST::C . CL-TEST::B)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::IGNORABLE.7
Test CL-TEST::IGNORABLE.8 failed
Form: (LABELS (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (DECLARE (IGNORABLE (FUNCTION (SETF CL-TEST::%F)))) (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (VALUES (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)))
Expected value:
          CL-TEST::C
          (CL-TEST::C . CL-TEST::B)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.1
 CL-TEST::DYNAMIC-EXTENT.2
 CL-TEST::DYNAMIC-EXTENT.3
 CL-TEST::DYNAMIC-EXTENT.4
 CL-TEST::DYNAMIC-EXTENT.5
 CL-TEST::DYNAMIC-EXTENT.6
 CL-TEST::DYNAMIC-EXTENT.7
Test CL-TEST::DYNAMIC-EXTENT.8 failed
Form: (LET ((CL-TEST::X (+ MOST-POSITIVE-FIXNUM 2))) (DECLARE (DYNAMIC-EXTENT CL-TEST::X) (OPTIMIZE SPEED (SAFETY 0))) (1- CL-TEST::X))
Expected value:
          1152921504606846976
Actual value:
          1152921504606846976 [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.9
 CL-TEST::DYNAMIC-EXTENT.10
 CL-TEST::DYNAMIC-EXTENT.11
Test CL-TEST::DYNAMIC-EXTENT.12 failed
Form: (LET* ((CL-TEST::CONTENTS (QUOTE (1 0 0 1 1 0 1 1 0 1))) (CL-TEST::N (LENGTH CL-TEST::CONTENTS))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 32 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) CL-TEST::FOR CL-TEST::FORM1 = (SYSTEM.INTERNALS::BACKQUOTE (MAKE-ARRAY (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))) :INITIAL-CONTENTS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::CONTENTS)) :ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) CL-TEST::FOR CL-TEST::FORM2 = (SYSTEM.INTERNALS::BACKQUOTE (LET ((CL-TEST::A (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FORM1))) (DECLARE (DYNAMIC-EXTENT CL-TEST::A)) (DECLARE (TYPE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA TYPE) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))))) (DECLARE (NOTINLINE COERCE)) (DECLARE (OPTIMIZE SPEED (SAFETY 0))) (EQUAL (COERCE CL-TEST::A (QUOTE LIST)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::CONTENTS))))) UNLESS (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FORM2))))) CL-TEST::COLLECT CL-TEST::I))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.13
 CL-TEST::DYNAMIC-EXTENT.14
 CL-TEST::DYNAMIC-EXTENT.15
 CL-TEST::DYNAMIC-EXTENT.16
 CL-TEST::OPTIMIZE.1
 CL-TEST::OPTIMIZE.2
 CL-TEST::OPTIMIZE.3
 CL-TEST::OPTIMIZE.4
 CL-TEST::OPTIMIZE.5
 CL-TEST::OPTIMIZE.6
 CL-TEST::OPTIMIZE.7
 CL-TEST::OPTIMIZE.8
 CL-TEST::SPECIAL.1
 CL-TEST::SPECIAL.2
 CL-TEST::SPECIAL.3
Test CL-TEST::MACROEXPAND.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (MACROEXPAND) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACROEXPAND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MACROEXPAND (QUOTE CL-TEST::X) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROEXPAND.1
 CL-TEST::MACROEXPAND.2
 CL-TEST::MACROEXPAND.3
 CL-TEST::MACROEXPAND.4
 CL-TEST::MACROEXPAND.5
 CL-TEST::MACROEXPAND.6
Test CL-TEST::MACROEXPAND-1.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (MACROEXPAND-1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACROEXPAND-1.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MACROEXPAND-1 (QUOTE CL-TEST::X) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROEXPAND-1.1
 CL-TEST::MACROEXPAND-1.2
 CL-TEST::MACROEXPAND-1.3
 CL-TEST::MACROEXPAND-1.4
 CL-TEST::MACROEXPAND-1.5
 CL-TEST::MACROEXPAND-1.6
 CL-TEST::DECLARATION.1
 CL-TEST::DECLARATION.2
 CL-TEST::DECLARATION.3
 CL-TEST::TYPE.1
 CL-TEST::TYPE.2
 CL-TEST::TYPE.3
 CL-TEST::TYPE.4
 CL-TEST::TYPE.5
 CL-TEST::TYPE.6
Test CL-TEST::MACRO-FUNCTION.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION CL-TEST::N) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER PROG* REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACRO-FUNCTION.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION CL-TEST::N NIL) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER PROG* REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACRO-FUNCTION.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((CL-TEST::%M (CL-TEST::S &ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION CL-TEST::S CL-TEST::ENV)))) (CL-TEST::%M (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))))) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER PROG* REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
 CL-TEST::MACRO-FUNCTION.4
 CL-TEST::MACRO-FUNCTION.5
 CL-TEST::MACRO-FUNCTION.6
 CL-TEST::MACRO-FUNCTION.7
 CL-TEST::MACRO-FUNCTION.8
 CL-TEST::MACRO-FUNCTION.9
 CL-TEST::MACRO-FUNCTION.10
 CL-TEST::MACRO-FUNCTION.11
 CL-TEST::MACRO-FUNCTION.12
 CL-TEST::MACRO-FUNCTION.13
 CL-TEST::MACRO-FUNCTION.14
 CL-TEST::MACRO-FUNCTION.15
Test CL-TEST::MACRO-FUNCTION.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (MACRO-FUNCTION) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACRO-FUNCTION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MACRO-FUNCTION (QUOTE POP) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DCF-FUNS
Test CL-TEST::DCF-MACROS failed
Form: (REMOVE-IF (FUNCTION MACRO-FUNCTION) CL-TEST::*DCF-MACROS*)
Expected value:
          NIL
Actual value:
          (CCASE PROG* DEFSETF) [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF.ORDER.1
 CL-TEST::SETF.ORDER.2
 CL-TEST::INCF.ORDER.1
 CL-TEST::DECF.ORDER.1
 CL-TEST::SETF-VAR
Test CL-TEST::SETF-VALUES.1 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3)))
Expected value:
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.2 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3)) (VALUES CL-TEST::Z CL-TEST::Y CL-TEST::X))
Expected value:
          3
          2
          1
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.3 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::X CL-TEST::X) (VALUES 1 2 3)) CL-TEST::X)
Expected value:
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.4 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (SETF (VALUES (CAR CL-TEST::X) (CADR CL-TEST::X)) (VALUES 1 2)) CL-TEST::X)
Expected value:
          (1 2)
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.5 failed
Form: (LET ((CL-TEST::A (VECTOR NIL NIL)) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (SETF (VALUES (AREF CL-TEST::A (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 0)) (AREF CL-TEST::A (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) 1))) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (VALUES (QUOTE CL-TEST::FOO) (QUOTE CL-TEST::BAR)))) (VALUES CL-TEST::A CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #(CL-TEST::FOO CL-TEST::BAR)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.6 failed
Form: (SETF (VALUES) (VALUES))
Expected value:
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-THE.1 failed
Form: (LET ((CL-TEST::X 1)) (SETF (THE INTEGER CL-TEST::X) 2) CL-TEST::X)
Expected value:
          2
Actual value:
          #<Unbound-Variable INTEGER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-THE.2 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A)))) (VALUES (SETF (THE SYMBOL (CAR CL-TEST::X)) (QUOTE CL-TEST::B)) CL-TEST::X))
Expected value:
          CL-TEST::B
          (CL-TEST::B)
Actual value:
          #<Unbound-Variable SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.1 failed
Form: (LET ((CL-TEST::X (VECTOR 0 1 2 3 4 5))) (SETF (APPLY (FUNCTION AREF) CL-TEST::X (QUOTE (0))) 10) CL-TEST::X)
Expected value:
          #(10 1 2 3 4 5)
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.2 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0)))))) (SETF (APPLY (FUNCTION AREF) CL-TEST::A 1 1 NIL) (QUOTE CL-TEST::A)) (EQUALP CL-TEST::A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 CL-TEST::A))))))
Expected value:
          T
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.3 failed
Form: (LET ((CL-TEST::BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION BIT) CL-TEST::BV 4 NIL) 1) CL-TEST::BV)
Expected value:
          #*0000100000
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.4 failed
Form: (LET ((CL-TEST::BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION SBIT) CL-TEST::BV 4 NIL) 1) CL-TEST::BV)
Expected value:
          #*0000100000
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF-MACRO.1
 CL-TEST::SETF-MACRO.3
 CL-TEST::SETF-MACRO.4
 CL-TEST::SETF-SYMBOL-MACRO.1
Test CL-TEST::SETF-SYMBOL-MACRO.2 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X CL-TEST::Y)) (LET ((CL-TEST::Y NIL)) (VALUES (SETQ CL-TEST::X 1) CL-TEST::X CL-TEST::Y)))
Expected value:
          1
          1
          1
Actual value:
          #<Type-Error C1E8DA97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-SYMBOL-MACRO.3 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (VALUES CL-TEST::Y CL-TEST::Z))) (LET ((CL-TEST::Y NIL) (CL-TEST::Z NIL)) (VALUES (SETQ CL-TEST::X (VALUES 1 2)) CL-TEST::X CL-TEST::Y CL-TEST::Z)))
Expected value:
          1
          1
          1
          2
Actual value:
          #<Type-Error C1E97EF7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SETQ.1
 CL-TEST::SETQ.2
 CL-TEST::SETQ.3
 CL-TEST::SETQ.4
 CL-TEST::SETQ.5
 CL-TEST::SETQ.6
 CL-TEST::SETQ.7
 CL-TEST::SETF.1
 CL-TEST::SETF.2
 CL-TEST::SETF.3
 CL-TEST::SETF.4
 CL-TEST::SETF.5
 CL-TEST::SETF.6
 CL-TEST::SETF.7
 CL-TEST::SETF.8
 CL-TEST::PSETQ.1
 CL-TEST::PSETQ.2
 CL-TEST::PSETQ.3
 CL-TEST::PSETQ.4
 CL-TEST::PSETQ.5
 CL-TEST::PSETQ.6
Test CL-TEST::PSETQ.7 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I))) (CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I)))) (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETQ CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I)))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETQ.8
 CL-TEST::PSETQ.9
 CL-TEST::PSETQ.10
Test CL-TEST::PSETQ.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETQ))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETQ.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETQ)) (QUOTE (PSETQ))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETQ.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETQ)) (QUOTE (PSETQ)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETF.ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) (VALUES CL-TEST::X CL-TEST::I))
Expected value:
          #(NIL 2 NIL NIL)
          2
Actual value:
          #(NIL NIL 1 NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETF.ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I 10)) (VALUES CL-TEST::X CL-TEST::I))
Expected value:
          #(NIL 2 NIL 13)
          13
Actual value:
          #<Simple-Error Subscript 12 is invalid for axis, should be non-negative and less than 4.> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.1
 CL-TEST::PSETF.2
 CL-TEST::PSETF.3
 CL-TEST::PSETF.4
 CL-TEST::PSETF.5
 CL-TEST::PSETF.6
Test CL-TEST::PSETF.7 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I))) (CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I)))) (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETF CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I)))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETF.8 failed
Form: (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.9
 CL-TEST::PSETF.10
 CL-TEST::PSETF.11
Test CL-TEST::PSETF.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETF))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETF)) (QUOTE (PSETF))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETF)) (QUOTE (PSETF)) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.12
 CL-TEST::PSETF.12A
 CL-TEST::PSETF.13
 CL-TEST::PSETF.13A
 CL-TEST::PSETF.14
 CL-TEST::PSETF.15
 CL-TEST::PSETF.16
 CL-TEST::PSETF.17
 CL-TEST::PSETF.18
 CL-TEST::PSETF.18A
Test CL-TEST::PSETF.19 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100))) (PSETF (BIT CL-TEST::X 1) 0 (BIT CL-TEST::X 2) 1 (BIT CL-TEST::Y 4) 1 (BIT CL-TEST::Y 0) 0) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          #*10100
          #*01101
Actual value:
          #<Undefined-Function (SETF BIT)> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.20
Test CL-TEST::PSETF.21 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100))) (PSETF (SBIT CL-TEST::X 1) 0 (SBIT CL-TEST::X 2) 1 (SBIT CL-TEST::Y 4) 1 (SBIT CL-TEST::Y 0) 0) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          #*10100
          #*01101
Actual value:
          #<Undefined-Function (SETF SBIT)> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.22
 CL-TEST::PSETF.23
 CL-TEST::PSETF.24
 CL-TEST::PSETF.25
 CL-TEST::PSETF.26
 CL-TEST::PSETF.27
 CL-TEST::PSETF.28
 CL-TEST::PSETF.29
 CL-TEST::PSETF.30
 CL-TEST::PSETF.31
 CL-TEST::PSETF.32
 CL-TEST::PSETF.33
 CL-TEST::PSETF.34
 CL-TEST::PSETF.35
 CL-TEST::PSETF.36
Test CL-TEST::PSETF.37 failed
Form: (LET ((CL-TEST::B1 (BYTE 3 1)) (CL-TEST::B2 (BYTE 4 2)) (CL-TEST::X 51925) (CL-TEST::Y 13638) (CL-TEST::M1 21869) (CL-TEST::M2 15541)) (PSETF (MASK-FIELD CL-TEST::B1 CL-TEST::X) CL-TEST::M1 (MASK-FIELD CL-TEST::B2 CL-TEST::Y) CL-TEST::M2) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          51933
          13686
Actual value:
          #<Undefined-Function (SETF MASK-FIELD)> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.39
 CL-TEST::PSETF.40
Test CL-TEST::SHIFTF-ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (CL-TEST::I 2)) (VALUES (SHIFTF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected value:
          CL-TEST::D
          #(CL-TEST::A CL-TEST::B CL-TEST::C 4 CL-TEST::E)
          4
Actual value:
          #<Simple-Error Subscript 5 is invalid for axis, should be non-negative and less than 5.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHIFTF-ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) (QUOTE CL-TEST::G) (QUOTE CL-TEST::H))) (CL-TEST::I 2)) (VALUES (SHIFTF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected value:
          CL-TEST::D
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E 5 CL-TEST::F CL-TEST::G CL-TEST::H)
          5
Actual value:
          CL-TEST::D [Actual value: #<error during printing>

 NIL
 CL-TEST::SHIFTF.1
 CL-TEST::SHIFTF.2
 CL-TEST::SHIFTF.3
 CL-TEST::SHIFTF.4
 CL-TEST::SHIFTF.5
 CL-TEST::SHIFTF.6
Test CL-TEST::ROTATEF-ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (CL-TEST::I 2)) (VALUES (ROTATEF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I))) CL-TEST::X CL-TEST::I))
Expected value:
          NIL
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E CL-TEST::D CL-TEST::F)
          4
Actual value:
          #<Simple-Error Subscript 6 is invalid for axis, should be non-negative and less than 6.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ROTATEF-ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (CL-TEST::I 2)) (VALUES (ROTATEF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I))) CL-TEST::X CL-TEST::I))
Expected value:
          NIL
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E CL-TEST::F CL-TEST::D)
          5
Actual value:
          #<Simple-Error Subscript 6 is invalid for axis, should be non-negative and less than 6.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.1
 CL-TEST::ROTATEF.2
 CL-TEST::ROTATEF.3
 CL-TEST::ROTATEF.4
 CL-TEST::ROTATEF.5
 CL-TEST::ROTATEF.6
 CL-TEST::ROTATEF.7
 CL-TEST::ROTATEF.8
 CL-TEST::ROTATEF.9
 CL-TEST::ROTATEF.10
 CL-TEST::ROTATEF.11
 CL-TEST::ROTATEF.12
 CL-TEST::ROTATEF.13
 CL-TEST::ROTATEF.14
 CL-TEST::ROTATEF.15
 CL-TEST::ROTATEF.16
Test CL-TEST::ROTATEF.17 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100)) (CL-TEST::Z 1)) (ROTATEF (BIT CL-TEST::X 1) (BIT CL-TEST::Y 3) CL-TEST::Z) (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*10000
          #*11110
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.18
Test CL-TEST::ROTATEF.21 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100)) (CL-TEST::Z 1)) (ROTATEF (BIT CL-TEST::X 1) (BIT CL-TEST::Y 3) CL-TEST::Z) (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*10000
          #*11110
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.22
 CL-TEST::ROTATEF.23
 CL-TEST::ROTATEF.24
 CL-TEST::ROTATEF.25
 CL-TEST::ROTATEF.26
 CL-TEST::ROTATEF.27
 CL-TEST::ROTATEF.28
 CL-TEST::ROTATEF.29
 CL-TEST::ROTATEF.30
 CL-TEST::ROTATEF.31
 CL-TEST::ROTATEF.32
 CL-TEST::ROTATEF.33
 CL-TEST::ROTATEF.34
 CL-TEST::ROTATEF.35
 CL-TEST::ROTATEF.36
 CL-TEST::ROTATEF.37
Test CL-TEST::RETURN.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE RETURN))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RETURN.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE RETURN)) (QUOTE (RETURN NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RETURN.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE RETURN)) (QUOTE (RETURN NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::RETURN.1
 CL-TEST::RETURN.2
 CL-TEST::RETURN.3
 CL-TEST::RETURN-FROM.1
 CL-TEST::RETURN-FROM.2
 CL-TEST::RETURN-FROM.3
Test CL-TEST::DEFINE-SETF-EXPANDER.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SETF-EXPANDER))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SETF-EXPANDER)) (QUOTE (DEFINE-SETF-EXPANDER CL-TEST::NONEXISTENT-ACCESS-FN (CL-TEST::X)))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SETF-EXPANDER)) (QUOTE (DEFINE-SETF-EXPANDER CL-TEST::NONEXISTENT-ACCESS-FN (CL-TEST::X))) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-SETF-EXPANDER.1
 CL-TEST::DEFINE-SETF-EXPANDER.2
 CL-TEST::DEFINE-SETF-EXPANDER.3
Test CL-TEST::DEFINE-SETF-EXPANDER.4 failed
Form: (LET ((CL-TEST::A (LIST (LIST 1)))) (VALUES (COPY-TREE CL-TEST::A) (CL-TEST::MY-CAR (CL-TEST::MY-CAR CL-TEST::A)) (SETF (CL-TEST::MY-CAR (CL-TEST::MY-CAR CL-TEST::A)) 2) CL-TEST::A))
Expected value:
          ((1))
          1
          2
          ((2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SETF-EXPANDER.5 failed
Form: (LET ((CL-TEST::X NIL)) (VALUES (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::FOO) CL-TEST::X) 1) (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::FOO) CL-TEST::X) 2) (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::BAR) CL-TEST::X) 3) (COPY-TREE CL-TEST::X)))
Expected value:
          NIL
          1
          ((CL-TEST::FOO . 1))
          2
          ((CL-TEST::FOO . 2))
          3
          ((CL-TEST::BAR . 3) (CL-TEST::FOO . 2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-SETF-EXPANDER.6
 CL-TEST::DEFINE-SETF-EXPANDER.7
 CL-TEST::AND.1
 CL-TEST::AND.2
 CL-TEST::AND.3
 CL-TEST::AND.4
 CL-TEST::AND.5
 CL-TEST::AND.6
 CL-TEST::AND.7
 CL-TEST::AND.8
 CL-TEST::AND.9
 CL-TEST::AND.10
 CL-TEST::AND.ORDER.1
 CL-TEST::AND.ORDER.2
Test CL-TEST::AND.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE AND))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::AND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE AND)) (QUOTE (AND))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::AND.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE AND)) (QUOTE (AND)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::APPLY.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (APPLY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::APPLY.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (APPLY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::APPLY.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (APPLY (FUNCTION CONS) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::APPLY.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (APPLY (FUNCTION CONS) (LIST 1 2 3)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::APPLY.1
 CL-TEST::APPLY.2
 CL-TEST::APPLY.3
Test CL-TEST::APPLY.4 failed
Form: (LET ((CL-TEST::ZEROS (MAKE-LIST (MIN 10000 (1- CALL-ARGUMENTS-LIMIT)) :INITIAL-ELEMENT 1))) (APPLY (FUNCTION +) CL-TEST::ZEROS))
Expected value:
          499
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::APPLY.5
 CL-TEST::APPLY.6
 CL-TEST::APPLY.7
 CL-TEST::APPLY.8
 CL-TEST::APPLY.ORDER.1
 CL-TEST::BLOCK.1
 CL-TEST::BLOCK.2
 CL-TEST::BLOCK.3
 CL-TEST::BLOCK.4
 CL-TEST::BLOCK.5
 CL-TEST::BLOCK.6
 CL-TEST::BLOCK.7
 CL-TEST::BLOCK.8
 CL-TEST::BLOCK.9
 CL-TEST::BLOCK.10
 CL-TEST::BLOCK.11
 CL-TEST::BLOCK.12
 CL-TEST::CALL-ARGUMENTS-LIMIT.1
 CL-TEST::CALL-ARGUMENTS-LIMIT.2
 CL-TEST::CALL-ARGUMENTS-LIMIT.3
 CL-TEST::CALL-ARGUMENTS-LIMIT.4
Test CL-TEST::CALL-ARGUMENTS-LIMIT.5 failed
Form: (< CALL-ARGUMENTS-LIMIT LAMBDA-PARAMETERS-LIMIT)
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.1
 CL-TEST::CASE.2
 CL-TEST::CASE.3
 CL-TEST::CASE.4
Test CL-TEST::CASE.5 failed
Form: (CASE (1+ MOST-POSITIVE-FIXNUM) (1152921504606846976 (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.6
 CL-TEST::CASE.7
 CL-TEST::CASE.8
 CL-TEST::CASE.9
 CL-TEST::CASE.10
 CL-TEST::CASE.11
 CL-TEST::CASE.12
 CL-TEST::CASE.13
 CL-TEST::CASE.14
 CL-TEST::CASE.15
 CL-TEST::CASE.16
 CL-TEST::CASE.17
 CL-TEST::CASE.18
 CL-TEST::CASE.19
 CL-TEST::CASE.20
 CL-TEST::CASE.21
 CL-TEST::CASE.22
 CL-TEST::CASE.23
 CL-TEST::CASE.24
 CL-TEST::CASE.25
 CL-TEST::CASE.26
 CL-TEST::CASE.27
 CL-TEST::CASE.28
 CL-TEST::CASE.29
 CL-TEST::CASE.30
 CL-TEST::CASE.31
Test CL-TEST::CASE.32 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::A) (T (QUOTE CL-TEST::B)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::CASE.33 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)) (T))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::CASE.34 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)) (OTHERWISE))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.35
 CL-TEST::CASE.36
 CL-TEST::CASE.37
Test CL-TEST::CASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CASE)) (QUOTE (CASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CASE)) (QUOTE (CASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CATCH.1
 CL-TEST::CATCH.2
 CL-TEST::CATCH.3
 CL-TEST::CATCH.4
 CL-TEST::CATCH.5
 CL-TEST::CATCH.7
 CL-TEST::CATCH.8
 CL-TEST::CATCH.9
 CL-TEST::CATCH.10
 CL-TEST::CATCH.11
 CL-TEST::CATCH.12
 CL-TEST::CATCH.13
 CL-TEST::CATCH.14
 CL-TEST::CATCH.15
 CL-TEST::CATCH.16
 CL-TEST::THROW-ERROR
Test CL-TEST::CCASE.1 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (T NIL)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (OTHERWISE NIL)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.6 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::Z) 1) ((CL-TEST::Y CL-TEST::B CL-TEST::W) 2) ((CL-TEST::B CL-TEST::C) 3)))
Expected value:
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.7 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::Z))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::B CL-TEST::C) 1) ((CL-TEST::D CL-TEST::E) 2) ((CL-TEST::F CL-TEST::Z CL-TEST::G) 3)))
Expected value:
          3
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.8 failed
Form: (LET ((CL-TEST::X (1+ MOST-POSITIVE-FIXNUM))) (CCASE CL-TEST::X (1152921504606846976 (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X NIL (CCASE CL-TEST::X (NIL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.10 failed
Form: (LET (CL-TEST::X) (CCASE CL-TEST::X ((NIL) (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.11 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::A (VALUES 1 2 3)) (CL-TEST::C NIL)))
Expected value:
          1
          2
          3
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.12 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (CCASE CL-TEST::X (CL-TEST::A 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.13 failed
Form: (LET ((CL-TEST::X T)) (CCASE CL-TEST::X ((T) 10) (T 20)))
Expected value:
          10
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.14 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((CL-TEST::Y (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)))) (CCASE CL-TEST::Y (((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) 1) (CL-TEST::A 2))))))
Expected value:
          1
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.15 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE OTHERWISE) (CCASE CL-TEST::X ((T) 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.16 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (CCASE CL-TEST::X ((OTHERWISE) 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.17 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) (OTHERWISE 2)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.19 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((T) 2)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.20 failed
Form: (LET ((CL-TEST::X #\a)) (CCASE CL-TEST::X ((#\b #\c) 10) ((#\d #\e #\A) 20) (NIL 30) ((#\z #\a #\y) 40)))
Expected value:
          40
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.21 failed
Form: (LET ((CL-TEST::X 1)) (CCASE CL-TEST::X (1 (VALUES)) (2 (QUOTE CL-TEST::A))))
Expected value:
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.23 failed
Form: (LET ((CL-TEST::X 1)) (CCASE CL-TEST::X (1 (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.25 failed
Form: (LET ((CL-TEST::A (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (CL-TEST::I 1)) (VALUES (CCASE (AREF CL-TEST::A (INCF CL-TEST::I)) (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4)) CL-TEST::I))
Expected value:
          3
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.26 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::B CL-TEST::C) 10) (CL-TEST::B 20)))
Expected value:
          10
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.27 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::B 20) ((CL-TEST::A CL-TEST::B CL-TEST::C) 10)))
Expected value:
          20
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.28 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::B 20) (CL-TEST::B 10) (CL-TEST::D 0)))
Expected value:
          20
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.29 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y 2)) (VALUES (CCASE CL-TEST::Y (1 (SETQ CL-TEST::X (QUOTE CL-TEST::A)) (QUOTE CL-TEST::W)) (2 (SETQ CL-TEST::X (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y)) (3 (SETQ CL-TEST::X (QUOTE CL-TEST::C)) (QUOTE CL-TEST::Z))) CL-TEST::X))
Expected value:
          CL-TEST::Y
          CL-TEST::B
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.30 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.31 failed
Form: (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (STORE-VALUE 7 CL-TEST::C))))) (LET ((CL-TEST::X 0)) (CCASE CL-TEST::X (1 :BAD) (7 :GOOD) (2 NIL))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.32 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::A (GO 10) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::BAD))))) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.33 failed
Form: (LET ((CL-TEST::X :B)) (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CCASE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)) (:A :BAD1) (:B :GOOD) (:C :BAD2))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<Function CONS 2802BC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<Function CAR 209ABC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<Function APPEND 39BEBC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<Function VALUES 2BC6BC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<Function (MACRO-FUNCTION COND) 4FE81C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<Function CL-TEST::MEANINGLESS-USER-FUNCTION-FOR-UNIVERSE 265AAC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 3D6938C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<System.Eval::Interpreted-Function SYSTEM.EVAL::INTERPRETED-FUNCTION 3DA1F7C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2C78AC> #<Function (LAMBDA :IN NIL) 3DA78FC>) failed
Test CL-TEST::COMPILED-FUNCTION-P.1 failed
Form: (CL-TEST::CHECK-TYPE-PREDICATE (FUNCTION COMPILED-FUNCTION-P) (QUOTE COMPILED-FUNCTION))
Expected value:
          NIL
Actual value:
          (#<Function CONS 2802BC> #<Function CAR 209ABC> #<Function APPEND 39BEBC> #<Function VALUES 2BC6BC> #<Function (MACRO-FUNCTION COND) 4FE81C> #<Function CL-TEST::MEANINGLESS-USER-FUNCTION-FOR-UNIVERSE 265AAC> #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 3D6938C> #<System.Eval::Interpreted-Function SYSTEM.EVAL::INTERPRETED-FUNCTION 3DA1F7C> #<Function (LAMBDA :IN NIL) 3DA78FC>) [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILED-FUNCTION-P.2
Test CL-TEST::COMPILED-FUNCTION-P.3 failed
Form: (CL-TEST::NOTNOT-MV (COMPILED-FUNCTION-P (COMPILE NIL (QUOTE (LAMBDA (CL-TEST::Y CL-TEST::X) (CONS CL-TEST::X CL-TEST::Y))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::+FUNCTION-TYPE-INTERPRETED-FUNCTION+> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILED-FUNCTION-P.ORDER.1
Test CL-TEST::COMPILED-FUNCTION-P.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COMPILED-FUNCTION-P) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPILED-FUNCTION-P.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COMPILED-FUNCTION-P NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPLEMENT.1
 CL-TEST::COMPLEMENT.2
 CL-TEST::COMPLEMENT.3
 CL-TEST::COMPLEMENT.4
 CL-TEST::COMPLEMENT.5
 CL-TEST::COMPLEMENT.6
 CL-TEST::COMPLEMENT.7
Test CL-TEST::COMPLEMENT.8 failed
Form: (FLET ((CL-TEST::%F (&KEY CL-TEST::X CL-TEST::Y) (IF CL-TEST::X (NOT CL-TEST::Y) CL-TEST::Y))) (LET ((CL-TEST::CF (COMPLEMENT (FUNCTION CL-TEST::%F)))) (VALUES (LIST (CL-TEST::%F) (CL-TEST::%F :X NIL) (CL-TEST::%F :X T) (CL-TEST::%F :Y NIL) (CL-TEST::%F :Y T :Y NIL) (CL-TEST::%F :X NIL :Y NIL) (CL-TEST::%F :X T :Y NIL) (CL-TEST::%F :Y T :X NIL) (CL-TEST::%F :X T :Y T)) (LIST (FUNCALL CL-TEST::CF) (FUNCALL CL-TEST::CF :X NIL) (FUNCALL CL-TEST::CF :X T) (FUNCALL CL-TEST::CF :Y NIL) (FUNCALL CL-TEST::CF :Y T) (FUNCALL CL-TEST::CF :X NIL :Y NIL) (FUNCALL CL-TEST::CF :X T :Y NIL) (FUNCALL CL-TEST::CF :Y T :X NIL) (FUNCALL CL-TEST::CF :X T :Y T :X NIL)) (LIST (FUNCALL CL-TEST::CF :X NIL :Y T :FOO NIL :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::CF :X NIL :Y T :ALLOW-OTHER-KEYS NIL)))))
Expected value:
          (NIL NIL T NIL T NIL T T NIL)
          (T T NIL T NIL T NIL NIL T)
          (NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :FOO.> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPLEMENT.9
 CL-TEST::COMPLEMENT.10
 CL-TEST::COMPLEMENT.ORDER.1
Test CL-TEST::COMPLEMENT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COMPLEMENT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COMPLEMENT (FUNCTION NOT) T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION IDENTITY))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION IDENTITY)) T T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :FOO T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :FOO.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (CL-TEST::X &REST CL-TEST::Y) (AND CL-TEST::X (EVENP (LENGTH CL-TEST::Y))))))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::X &REST CL-TEST::Y)> [Actual value: #<error during printing>

 NIL
 CL-TEST::COND.1
 CL-TEST::COND.2
 CL-TEST::COND.3
 CL-TEST::COND.4
 CL-TEST::COND.5
 CL-TEST::COND.6
 CL-TEST::COND.7
 CL-TEST::COND.8
 CL-TEST::COND.9
 CL-TEST::COND.10
 CL-TEST::COND.11
 CL-TEST::COND.12
 CL-TEST::COND.13
 CL-TEST::COND.14
 CL-TEST::COND.15
 CL-TEST::COND.16
 CL-TEST::COND.17
Test CL-TEST::COND.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE COND))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE COND)) (QUOTE (COND))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COND.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE COND)) (QUOTE (COND)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONSTANTLY.1
 CL-TEST::CONSTANTLY.2
 CL-TEST::CONSTANTLY.3
Test CL-TEST::CONSTANTLY.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (CONSTANTLY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONSTANTLY.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (CONSTANTLY 1 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.1 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (QUOTE CL-TEST::A)) (T (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (CTYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A))))) (FUNCTION SYMBOLP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.3 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A)) (T (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::B
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.4 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (VALUES))))
Expected value:
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.5 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (VALUES)) (T (QUOTE CL-TEST::A))))
Expected value:
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.6 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (BIT (QUOTE CL-TEST::A)) (INTEGER (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.7 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.8 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.9 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (T NIL)))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.10 failed
Form: (LET ((CL-TEST::X 0) (CL-TEST::Y 1)) (VALUES (CTYPECASE CL-TEST::Y (BIT (INCF CL-TEST::X) (QUOTE CL-TEST::A)) (INTEGER (INCF CL-TEST::X 2) (QUOTE CL-TEST::B)) (T (INCF CL-TEST::X 4) (QUOTE CL-TEST::C))) CL-TEST::X))
Expected value:
          CL-TEST::A
          1
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.11 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER) (T (QUOTE CL-TEST::A))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.12 failed
Form: (LET ((CL-TEST::X 1)) (VALUES (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (EQL (TYPE-ERROR-DATUM CL-TEST::C) 1)) (ASSERT (NOT (TYPEP 1 (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) (STORE-VALUE (QUOTE CL-TEST::A) CL-TEST::C))))) (CTYPECASE CL-TEST::X (SYMBOL :GOOD) (FLOAT :BAD))) CL-TEST::X))
Expected value:
          :GOOD
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.13 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CTYPECASE CL-TEST::X (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL C00AF037> (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.14 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CTYPECASE CL-TEST::X (SYMBOL (GO 10) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::BAD))))) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.15 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CTYPECASE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :FOO)) (INTEGER :BAD1) (KEYWORD :GOOD) (SYMBOL :BAD2)))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.16 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CTYPECASE :FOO (INTEGER (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :BAD1))) (KEYWORD (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :GOOD))) (SYMBOL (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :BAD2)))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCONSTANT.1
 CL-TEST::DEFCONSTANT.2
 CL-TEST::DEFCONSTANT.3
Test CL-TEST::DEFCONSTANT.4 failed
Form: (DOCUMENTATION (QUOTE CL-TEST::TEST-CONSTANT-2) (QUOTE VARIABLE))
Expected value:
          "This is the documentation."
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCONSTANT.5
Test CL-TEST::DEFCONSTANT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFCONSTANT))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCONSTANT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFCONSTANT)) (QUOTE (DEFCONSTANT CL-TEST::+NONEXISTENT-CONSTANT+ 0))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCONSTANT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFCONSTANT)) (QUOTE (DEFCONSTANT CL-TEST::+NONEXISTENT-CONSTANT+ 0)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.1 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::DMM1-APPENDF (&REST CL-TEST::ARGS) APPEND "Append lists onto a list"))) (EVAL (QUOTE (LET ((CL-TEST::U (QUOTE (CL-TEST::P CL-TEST::Q CL-TEST::R))) CL-TEST::V) (LIST (SETQ CL-TEST::V CL-TEST::U) (CL-TEST::DMM1-APPENDF CL-TEST::U (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::DMM1-APPENDF CL-TEST::U NIL) (CL-TEST::DMM1-APPENDF CL-TEST::U (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G))) CL-TEST::U CL-TEST::V)))))
Expected value:
          CL-TEST::DMM1-APPENDF
          ((CL-TEST::P CL-TEST::Q CL-TEST::R) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R))
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::DMM1-APPENDF) 3E209BC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.2 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::I 10)) (LIST (CL-TEST::NEW-INCF CL-TEST::I) (CL-TEST::NEW-INCF CL-TEST::I 100) CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF
          (11 111 111)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF) 3E314FC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.3 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF1 (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::A (VECTOR 0 0 0 0 0)) (CL-TEST::I 1)) (LIST (CL-TEST::NEW-INCF1 (AREF CL-TEST::A (INCF CL-TEST::I))) CL-TEST::A CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF1
          (1 #(0 0 1 0 0) 2)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF1) 3E4080C> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.4 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF2 (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::A (VECTOR 0 0 0 0 0)) (CL-TEST::I 1)) (LIST (CL-TEST::NEW-INCF2 (AREF CL-TEST::A (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::A CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF2
          (3 #(0 0 3 0 0) 3)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF2) 3E4814C> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-MODIFY-MACRO))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-MODIFY-MACRO)) (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NONEXISTENT-MODIFY-MACRO NIL CL-TEST::FOO))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-MODIFY-MACRO)) (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NONEXISTENT-MODIFY-MACRO NIL CL-TEST::FOO)) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-MODIFY-MACRO.DOCUMENTATION.1
 CL-TEST::DEFINE-MODIFY-MACRO.DOCUMENTATION.2
 CL-TEST::DEFPARAMETER.1
 CL-TEST::DEFPARAMETER.2
 CL-TEST::DEFPARAMETER.3
Test CL-TEST::DEFPARAMETER.4 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "Whatever."
          200
Actual value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPARAMETER.5 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2* (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 300 "And ever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "Whatever."
          200
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "And ever."
          300
Actual value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPARAMETER.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFPARAMETER))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPARAMETER.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFPARAMETER)) (QUOTE (DEFPARAMETER CL-TEST::*NONEXISTENT-VARIABLE* NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPARAMETER.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFPARAMETER)) (QUOTE (DEFPARAMETER CL-TEST::*NONEXISTENT-VARIABLE* NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFUN.1
 CL-TEST::DEFUN.2
Test CL-TEST::DEFUN.3 failed
Form: (CL-TEST::DEFUN-TEST-FUN-3)
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          CL-TEST::A [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFUN.4
 CL-TEST::DEFUN.5
 CL-TEST::DEFUN.6
 CL-TEST::DEFUN.7
 CL-TEST::DEFUN.8
Test CL-TEST::DEFUN.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFUN))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFUN.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFUN)) (QUOTE (DEFUN CL-TEST::NONEXISTENT-FUNCTION NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFUN.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFUN)) (QUOTE (DEFUN CL-TEST::NONEXISTENT-FUNCTION NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFUN.ERROR.4 failed
Form: (LET* ((CL-TEST::NAME (GENSYM))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW (MIN 100 LAMBDA-PARAMETERS-LIMIT) CL-TEST::FOR CL-TEST::PARAMS = NIL CL-TEST::THEN (CONS (GENSYM) CL-TEST::PARAMS) CL-TEST::FOR CL-TEST::ARGS = NIL CL-TEST::THEN (CONS NIL CL-TEST::ARGS) CL-TEST::FOR CL-TEST::EXPECTED = (QUOTE (1 2 3)) CL-TEST::FOR CL-TEST::FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (PROG2 (PROCLAIM (QUOTE (OPTIMIZE (SAFETY 0)))) (DEFUN (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::PARAMS) (VALUES (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::EXPECTED))) (PROCLAIM (QUOTE (OPTIMIZE SAFETY)))))) WHEN (COND ((NOT (EQUAL (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN CL-TEST::ARGS)) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL1)) ((NOT (EQUAL (MULTIPLE-VALUE-LIST (APPLY (SYMBOL-FUNCTION CL-TEST::FN) CL-TEST::ARGS)) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL2)) ((NOT (EQUAL (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::ARGS))))) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL3)) ((AND (> CL-TEST::I 0) (LET ((CL-TEST::VAL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDR CL-TEST::ARGS))) PROGRAM-ERROR))))) (AND (NOT (EQ CL-TEST::VAL T)) :FAIL4)))) ((AND (< CL-TEST::I (1- CALL-ARGUMENTS-LIMIT)) (LET ((CL-TEST::VAL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::ARGS)) PROGRAM-ERROR))))) (AND (NOT (EQ CL-TEST::VAL T)) :FAIL5))))) CL-TEST::COLLECT CL-TEST::IT))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFVAR.1
 CL-TEST::DEFVAR.2
 CL-TEST::DEFVAR.3
Test CL-TEST::DEFVAR.4 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*)) (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "Whatever."
          200
Actual value:
          CL-TEST::*DEFVAR-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFVAR.5 failed
Form: (LET ((CL-TEST::X 0)) (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*)) (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2* (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* (INCF CL-TEST::X) "And ever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2* CL-TEST::X))
Expected value:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "Whatever."
          200
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "And ever."
          200
          0
Actual value:
          CL-TEST::*DEFVAR-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFVAR.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFVAR))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFVAR.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFVAR)) (QUOTE (DEFVAR CL-TEST::*NONEXISTENT-VARIABLE* NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFVAR.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFVAR)) (QUOTE (DEFVAR CL-TEST::*NONEXISTENT-VARIABLE* NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DESTRUCTURING-BIND.1
 CL-TEST::DESTRUCTURING-BIND.2
 CL-TEST::DESTRUCTURING-BIND.3
 CL-TEST::DESTRUCTURING-BIND.4
 CL-TEST::DESTRUCTURING-BIND.5
 CL-TEST::DESTRUCTURING-BIND.6
 CL-TEST::DESTRUCTURING-BIND.7
 CL-TEST::DESTRUCTURING-BIND.7A
 CL-TEST::DESTRUCTURING-BIND.8
 CL-TEST::DESTRUCTURING-BIND.9
 CL-TEST::DESTRUCTURING-BIND.10
 CL-TEST::DESTRUCTURING-BIND.11
 CL-TEST::DESTRUCTURING-BIND.12
 CL-TEST::DESTRUCTURING-BIND.12A
 CL-TEST::DESTRUCTURING-BIND.13
 CL-TEST::DESTRUCTURING-BIND.14
 CL-TEST::DESTRUCTURING-BIND.15
 CL-TEST::DESTRUCTURING-BIND.16
 CL-TEST::DESTRUCTURING-BIND.17
 CL-TEST::DESTRUCTURING-BIND.17A
 CL-TEST::DESTRUCTURING-BIND.17C
 CL-TEST::DESTRUCTURING-BIND.18
 CL-TEST::DESTRUCTURING-BIND.19
Test CL-TEST::DESTRUCTURING-BIND.20 failed
Form: (DESTRUCTURING-BIND (&WHOLE (CL-TEST::A . CL-TEST::B) CL-TEST::C . CL-TEST::D) (QUOTE (1 . 2)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))
Expected value:
          (1 2 1 2)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::NAME is (CL-TEST::A . CL-TEST::B), which is not of type SYMBOL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DESTRUCTURING-BIND.21
 CL-TEST::DESTRUCTURING-BIND.22
 CL-TEST::DESTRUCTURING-BIND.23
 CL-TEST::DESTRUCTURING-BIND.24
 CL-TEST::DESTRUCTURING-BIND.25
 CL-TEST::DESTRUCTURING-BIND.26
 CL-TEST::DESTRUCTURING-BIND.27
 CL-TEST::DESTRUCTURING-BIND.28
 CL-TEST::DESTRUCTURING-BIND.29
 CL-TEST::DESTRUCTURING-BIND.30
 CL-TEST::DESTRUCTURING-BIND.31
Test CL-TEST::DESTRUCTURING-BIND.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DESTRUCTURING-BIND))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DESTRUCTURING-BIND.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DESTRUCTURING-BIND)) (QUOTE (DESTRUCTURING-BIND (CL-TEST::A . CL-TEST::B) (QUOTE (1 2)) NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DESTRUCTURING-BIND.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DESTRUCTURING-BIND)) (QUOTE (DESTRUCTURING-BIND (CL-TEST::A . CL-TEST::B) (QUOTE (1 2)) NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.1
Test CL-TEST::ECASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (CL-TEST::C CL-TEST::B CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (T NIL)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (T)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (OTHERWISE NIL)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (OTHERWISE)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.6
 CL-TEST::ECASE.7
Test CL-TEST::ECASE.8 failed
Form: (ECASE (1+ MOST-POSITIVE-FIXNUM) (1152921504606846976 (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error 1152921504606846976 fell through ECASE expression. Wanted one of (1152921504606846976)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X NIL (ECASE CL-TEST::X (NIL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Simple-Error NIL fell through ECASE expression. Wanted one of NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.10
 CL-TEST::ECASE.11
Test CL-TEST::ECASE.12 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (ECASE CL-TEST::X (CL-TEST::A 10)))
Expected value:
          T
Actual value:
          #<Simple-Error T fell through ECASE expression. Wanted one of (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.13
 CL-TEST::ECASE.14
Test CL-TEST::ECASE.15 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE OTHERWISE) (ECASE CL-TEST::X ((T) 10)))
Expected value:
          T
Actual value:
          #<Simple-Error OTHERWISE fell through ECASE expression. Wanted one of (T)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.16 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (ECASE CL-TEST::X ((OTHERWISE) 10)))
Expected value:
          T
Actual value:
          #<Simple-Error T fell through ECASE expression. Wanted one of (OTHERWISE)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.17 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) (OTHERWISE 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (OTHERWISE CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.18 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((OTHERWISE) 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (OTHERWISE CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.19 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((T) 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (T CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.20
 CL-TEST::ECASE.21
 CL-TEST::ECASE.23
 CL-TEST::ECASE.25
 CL-TEST::ECASE.26
 CL-TEST::ECASE.27
 CL-TEST::ECASE.28
 CL-TEST::ECASE.29
 CL-TEST::ECASE.31
Test CL-TEST::ECASE.32 failed
Form: (ECASE (QUOTE CL-TEST::A) (CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.33
 CL-TEST::ECASE.34
Test CL-TEST::ECASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ECASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ECASE)) (QUOTE (ECASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ECASE)) (QUOTE (ECASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.1
 CL-TEST::EQL.2
 CL-TEST::EQL.3
 CL-TEST::EQL.4
Test CL-TEST::EQL.5 failed
Form: (CL-TEST::EQLT 12345678901234567890 12345678901234567890)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.7
Test CL-TEST::EQL.8 failed
Form: (CL-TEST::EQLT #C(1 -2) #C(1 -2))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.9
 CL-TEST::EQL.10
Test CL-TEST::EQL.11 failed
Form: (CL-TEST::EQLT #C(1 -2) (- #C(-1 2)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.ORDER.1
Test CL-TEST::EQL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (EQL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (EQL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQL.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (EQL NIL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQ.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (EQ) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQ.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (EQ NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQ.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (EQ NIL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUAL.1
 CL-TEST::EQUAL.2
 CL-TEST::EQUAL.3
 CL-TEST::EQUAL.4
 CL-TEST::EQUAL.5
 CL-TEST::EQUAL.6
 CL-TEST::EQUAL.7
 CL-TEST::EQUAL.8
 CL-TEST::EQUAL.9
 CL-TEST::EQUAL.10
Test CL-TEST::EQUAL.11 failed
Form: (CL-TEST::EQUALT (COPY-SEQ #*000110) (COPY-SEQ #*000110))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUAL.12
Test CL-TEST::EQUAL.13 failed
Form: (LET ((CL-TEST::X (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (CL-TEST::Y (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (CL-TEST::EQUALT CL-TEST::X CL-TEST::Y))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUAL.14 failed
Form: (AND (CL-TEST::EQUALT (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) "") (CL-TEST::EQUALT "" (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUAL.15
 CL-TEST::EQUAL.16
 CL-TEST::EQUAL.17
Test CL-TEST::EQUAL.18 failed
Form: (LET ((CL-TEST::B (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*0110001110 :FILL-POINTER 5))) (VALUES (CL-TEST::EQUALT #*01100 CL-TEST::B) (CL-TEST::EQUALT #*01100 CL-TEST::B)))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUAL.19
 CL-TEST::EQUAL.ORDER.1
Test CL-TEST::EQUAL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (EQUAL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUAL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (EQUAL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUAL.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (EQUAL NIL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.1
 CL-TEST::EQUALP.2
 CL-TEST::EQUALP.3
 CL-TEST::EQUALP.4
 CL-TEST::EQUALP.5
 CL-TEST::EQUALP.6
Test CL-TEST::EQUALP.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::VAL = (RANDOM CL-TEST::BOUND) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY NIL :INITIAL-ELEMENT CL-TEST::VAL :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY NIL :INITIAL-ELEMENT CL-TEST::VAL) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VAL))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::N = (1+ (RANDOM 20)) CL-TEST::FOR CL-TEST::VALS = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (RANDOM CL-TEST::BOUND)) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VALS))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.9 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::N = (1+ (RANDOM 20)) CL-TEST::FOR CL-TEST::VALS = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (- (RANDOM CL-TEST::BOUND) (/ CL-TEST::BOUND 2))) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VALS))
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.10
 CL-TEST::EQUALP.11
 CL-TEST::EQUALP.12
 CL-TEST::EQUALP.13
 CL-TEST::EQUALP.14
 CL-TEST::EQUALP.15
 CL-TEST::EQUALP.16
Test CL-TEST::EQUALP.17 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW 8192 CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0S0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0F0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0F0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0D0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0D0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.20 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0L0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0L0> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.21
 CL-TEST::EQUALP.22
 CL-TEST::EQUALP.23
 CL-TEST::EQUALP.24
 CL-TEST::EQUALP.25
 CL-TEST::EQUALP.26
 CL-TEST::EQUALP.27
 CL-TEST::EQUALP.28
 CL-TEST::EQUALP.29
 CL-TEST::EQUALP.30
 CL-TEST::EQUALP.31
Test CL-TEST::EQUALP.32 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH #\a CL-TEST::HT1) T) (SETF (GETHASH #\A CL-TEST::HT2) T) (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          T
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.33 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH #\a CL-TEST::HT1) "a") (SETF (GETHASH #\a CL-TEST::HT2) "A") (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          T
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.34 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH (QUOTE #:A) CL-TEST::HT1) T) (SETF (GETHASH (QUOTE #:A) CL-TEST::HT2) T) (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          NIL
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.35 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TEST CL-TEST::IN (QUOTE (EQ EQL EQUAL EQUALP)) CL-TEST::COLLECT (FLET ((CL-TEST::%MAKE-TABLE NIL (APPLY (FUNCTION MAKE-HASH-TABLE) :TEST CL-TEST::TEST (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :SIZE (RANDOM 100)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :REHASH-SIZE (1+ (RANDOM 50))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :REHASH-THRESHOLD (RANDOM 1.0))))))))) (LOOP CL-TEST::REPEAT 200 COUNT (LET ((CL-TEST::HT1 (CL-TEST::%MAKE-TABLE)) (CL-TEST::HT2 (CL-TEST::%MAKE-TABLE)) (CL-TEST::PAIRS (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW (RANDOM 100) CL-TEST::COLLECT (CONS (GENSYM) CL-TEST::I)))) (LOOP CL-TEST::FOR (CL-TEST::K . CL-TEST::V) CL-TEST::IN CL-TEST::PAIRS DO (SETF (GETHASH CL-TEST::K CL-TEST::HT1) CL-TEST::V)) (SETF CL-TEST::PAIRS (CL-TEST:RANDOM-PERMUTE CL-TEST::PAIRS)) (LOOP CL-TEST::FOR (CL-TEST::K . CL-TEST::V) CL-TEST::IN CL-TEST::PAIRS DO (SETF (GETHASH CL-TEST::K CL-TEST::HT2) CL-TEST::V)) (NOT (EQUALP CL-TEST::HT1 CL-TEST::HT2))))))
Expected value:
          (0 0 0 0)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.ORDER.1
Test CL-TEST::EQUALP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (EQUALP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (EQUALP NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (EQUALP NIL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.1
Test CL-TEST::ETYPECASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ETYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.3
 CL-TEST::ETYPECASE.4
 CL-TEST::ETYPECASE.5
 CL-TEST::ETYPECASE.6
 CL-TEST::ETYPECASE.7
 CL-TEST::ETYPECASE.8
 CL-TEST::ETYPECASE.9
 CL-TEST::ETYPECASE.10
Test CL-TEST::ETYPECASE.11 failed
Form: (ETYPECASE 1 (INTEGER) (T (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::ETYPECASE.12 failed
Form: (ETYPECASE (QUOTE CL-TEST::A) (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL 800B2EA7> (QUOTE CL-TEST::GOOD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Type-Error 81B8B8C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.13
 CL-TEST::ETYPECASE.14
Test CL-TEST::ETYPECASE.15 failed
Form: (LET* ((CL-TEST::U (COERCE CL-TEST:*UNIVERSE* (QUOTE VECTOR))) (CL-TEST::LEN1 (LENGTH CL-TEST::U)) (CL-TEST::TYPES (COERCE CL-TEST::*CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (CL-TEST::LEN2 (LENGTH CL-TEST::TYPES))) (LOOP CL-TEST::FOR CL-TEST::N = (RANDOM 10) CL-TEST::FOR CL-TEST::MY-TYPES = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (ELT CL-TEST::TYPES (RANDOM CL-TEST::LEN2))) CL-TEST::FOR CL-TEST::VAL = (ELT CL-TEST::U (RANDOM CL-TEST::LEN1)) CL-TEST::FOR CL-TEST::I = (POSITION CL-TEST::VAL CL-TEST::MY-TYPES :TEST (FUNCTION TYPEP)) CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA (CL-TEST::X) (CL-TEST::HANDLER-CASE (ETYPECASE CL-TEST::X (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::FOR TYPE CL-TEST::IN CL-TEST::MY-TYPES CL-TEST::COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I)))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (EQL CL-TEST::X (TYPE-ERROR-DATUM CL-TEST::C))) (LET* ((CL-TEST::EXPECTED (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C))) (LET ((CL-TEST::EQUIV (CL-TEST::CHECK-EQUIVALENCE CL-TEST::EXPECTED (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (CONS (QUOTE OR) CL-TEST::MY-TYPES)))))) (ASSERT (NULL CL-TEST::EQUIV) NIL "EQUIV = ~A" CL-TEST::EQUIV))) NIL))))) CL-TEST::FOR CL-TEST::J = (FUNCALL (EVAL CL-TEST::FORM) CL-TEST::VAL) CL-TEST::REPEAT 200 UNLESS (EQL CL-TEST::I CL-TEST::J) CL-TEST::COLLECT (LIST CL-TEST::N CL-TEST::MY-TYPES CL-TEST::VAL CL-TEST::I CL-TEST::FORM CL-TEST::J)))
Expected value:
          NIL
Actual value:
          #<Simple-Error 127 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.16
 CL-TEST::ETYPECASE.17
Test CL-TEST::ETYPECASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ETYPECASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ETYPECASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ETYPECASE)) (QUOTE (ETYPECASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ETYPECASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ETYPECASE)) (QUOTE (ETYPECASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.1
 CL-TEST::EVERY.2
 CL-TEST::EVERY.3
 CL-TEST::EVERY.4
 CL-TEST::EVERY.5
 CL-TEST::EVERY.6
 CL-TEST::EVERY.7
 CL-TEST::EVERY.8
 CL-TEST::EVERY.9
 CL-TEST::EVERY.10
 CL-TEST::EVERY.11
 CL-TEST::EVERY.12
 CL-TEST::EVERY.13
 CL-TEST::EVERY.14
 CL-TEST::EVERY.15
 CL-TEST::EVERY.16
 CL-TEST::EVERY.17
Test CL-TEST::EVERY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 1 1 1 1 1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (EVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (EVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.20
 CL-TEST::EVERY.21
 CL-TEST::EVERY.22
 CL-TEST::EVERY.23
Test CL-TEST::EVERY.24 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (EVERY (QUOTE EVENP) CL-TEST::V1)) (EVERY (FUNCTION EVENP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.25 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (EVERY (QUOTE EVENP) CL-TEST::V1)) (EVERY (FUNCTION EVENP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.26
 CL-TEST::EVERY.27
 CL-TEST::EVERY.28
 CL-TEST::EVERY.29
Test CL-TEST::EVERY.30 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.31 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 -1)))) UNLESS (EVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.32 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION COMPLEXP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 21 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.ORDER.1
 CL-TEST::EVERY.ORDER.2Space
 CL-TEST::EVERY.ERROR.1
Test CL-TEST::EVERY.ERROR.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (EVERY (FUNCTION NULL) CL-TEST::X))) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE SEQUENCE)))))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.ERROR.3 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (EVERY (FUNCTION EQ) NIL CL-TEST::X))) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE SEQUENCE)))))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (EVERY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (EVERY (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.ERROR.10
Test CL-TEST::EVERY.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (EVERY (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (EVERY (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.ERROR.13
 CL-TEST::EVERY.ERROR.14
 CL-TEST::FBOUNDP.1
 CL-TEST::FBOUNDP.2
 CL-TEST::FBOUNDP.3
 CL-TEST::FBOUNDP.4
 CL-TEST::FBOUNDP.5
 CL-TEST::FBOUNDP.6
 CL-TEST::FBOUNDP.7
Test CL-TEST::FBOUNDP.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* WHEN (AND (FBOUNDP CL-TEST::X) (NOT (EQ CL-TEST::X (QUOTE ED)))) CL-TEST::COLLECT CL-TEST::X)
Expected value:
          NIL
Actual value:
          (STRUCTURE-CLASS) [Actual value: #<error during printing>

 NIL
 CL-TEST::FBOUNDP.ORDER.1
Test CL-TEST::FBOUNDP.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FBOUNDP) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (CL-TEST::X)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (CL-TEST::X).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF CL-TEST::FOO . CL-TEST::BAR)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH (SETF CL-TEST::FOO . CL-TEST::BAR) CL-TEST::BAR) [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF CL-TEST::FOO CL-TEST::BAR)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (SETF CL-TEST::FOO CL-TEST::BAR).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (FBOUNDP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (FBOUNDP (QUOTE CONS) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FBOUNDP 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 1.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF . CL-TEST::FOO)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH (SETF . CL-TEST::FOO) CL-TEST::FOO) [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.10 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FBOUNDP (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C05850D7> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C05850D7>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C058D947> #<Simple-Error Invalid function name (SETF #<Hash-Table C058D947>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C00026B7> #<Simple-Error Invalid function name (SETF #<Readtable C00026B7>).>) (#<Cl-Test::Foo-Structure C058B647> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C058B647>).>) (#<Function CONS 2802BC> #<Simple-Error Invalid function name (SETF #<Function CONS 2802BC>).>) (#<Random-State C058CAE7> #<Simple-Error Invalid function name (SETF #<Random-State C058CAE7>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0586F07> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0586F07>).>)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FDEFINITION) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FDEFINITION (QUOTE CONS) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.ERROR.3
Test CL-TEST::FDEFINITION.ERROR.4 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FDEFINITION 10) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 10.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . CL-TEST::FOO) (SETF CL-TEST::FOO . CL-TEST::BAR) (SETF CL-TEST::FOO CL-TEST::BAR))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C05850D7> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C05850D7>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C058D947> #<Simple-Error Invalid function name (SETF #<Hash-Table C058D947>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C00026B7> #<Simple-Error Invalid function name (SETF #<Readtable C00026B7>).>) (#<Cl-Test::Foo-Structure C058B647> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C058B647>).>) (#<Function CONS 2802BC> #<Simple-Error Invalid function name (SETF #<Function CONS 2802BC>).>) (#<Random-State C058CAE7> #<Simple-Error Invalid function name (SETF #<Random-State C058CAE7>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0586F07> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0586F07>).>)) [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.1
 CL-TEST::FDEFINITION.2
Test CL-TEST::FDEFINITION.3 failed
Form: (PROGN (FDEFINITION (QUOTE SETQ)) :GOOD)
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function SETQ> [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.4
 CL-TEST::FDEFINITION.5
Test CL-TEST::FDEFINITION.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (FDEFINITION (PROGN (INCF CL-TEST::I) (QUOTE SETQ))) CL-TEST::I)
Expected value:
          1
Actual value:
          #<Undefined-Function SETQ> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.1
 CL-TEST::FLET.2
 CL-TEST::FLET.3
 CL-TEST::FLET.4
 CL-TEST::FLET.4A
 CL-TEST::FLET.5
 CL-TEST::FLET.6
 CL-TEST::FLET.7
 CL-TEST::FLET.8
 CL-TEST::FLET.9
 CL-TEST::FLET.10
 CL-TEST::FLET.11
Test CL-TEST::FLET.12 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :C 4)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.13 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.14 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.15 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F 1 2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.16 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A) CL-TEST::A)) (CL-TEST::%F (QUOTE (CL-TEST::FOO)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.17 failed
Form: (FLET (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (LET ((CL-TEST::Z (LIST 1 2))) (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::A)) CL-TEST::Z))
Expected value:
          (CL-TEST::A 2)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.18
 CL-TEST::FLET.19
Test CL-TEST::FLET.20 failed
Form: (LET* ((CL-TEST::N (MIN (1- LAMBDA-PARAMETERS-LIMIT) 1024)) (CL-TEST::VARS (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (GENSYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::EQLT (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) (FLET ((CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (+ (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::VARS)))) (CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::VARS CL-TEST::COLLECT 1))))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.21
 CL-TEST::FLET.22
 CL-TEST::FLET.23
 CL-TEST::FLET.24
 CL-TEST::FLET.25
Test CL-TEST::FLET.26 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :WHATEVER NIL :ALLOW-OTHER-KEYS T) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ILLEGAL T :FOO (QUOTE CL-TEST::Z) :ALLOW-OTHER-KEYS T)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:FOO CL-TEST::H :WHATEVER NIL :ALLOW-OTHER-KEYS T) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:BAR CL-TEST::I :ILLEGAL T :FOO CL-TEST::Z :ALLOW-OTHER-KEYS T) CL-TEST::Z CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :WHATEVER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.27 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :ALLOW-OTHER-KEYS NIL) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ALLOW-OTHER-KEYS NIL)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:FOO CL-TEST::H :ALLOW-OTHER-KEYS NIL) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:BAR CL-TEST::I :ALLOW-OTHER-KEYS NIL) NIL CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.28 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR CL-TEST::ALLOW-OTHER-KEYS) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::ALLOW-OTHER-KEYS CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :WHATEVER NIL :ALLOW-OTHER-KEYS 100) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ILLEGAL T :FOO (QUOTE CL-TEST::Z) :ALLOW-OTHER-KEYS 200)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T 100 (:FOO CL-TEST::H :WHATEVER NIL :ALLOW-OTHER-KEYS 100) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T 200 (:BAR CL-TEST::I :ILLEGAL T :FOO CL-TEST::Z :ALLOW-OTHER-KEYS 200) CL-TEST::Z CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :WHATEVER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.29
 CL-TEST::FLET.30
 CL-TEST::FLET.31
 CL-TEST::FLET.32
 CL-TEST::FLET.33
 CL-TEST::FLET.34
Test CL-TEST::FLET.35 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G (QUOTE CL-TEST::GOOD)))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.36 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&AUX (CL-TEST::X (QUOTE CL-TEST::GOOD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.37 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&REST CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G (QUOTE CL-TEST::GOOD)))))
Expected value:
          (CL-TEST::GOOD)
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.38 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&KEY (CL-TEST::X (QUOTE CL-TEST::GOOD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.39 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&KEY (CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G :X (QUOTE CL-TEST::GOOD)))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.40
 CL-TEST::FLET.45
 CL-TEST::FLET.46
 CL-TEST::FLET.47
 CL-TEST::FLET.48
 CL-TEST::FLET.49
 CL-TEST::FLET.50
Test CL-TEST::FLET.51 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (FLET (((SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) (&REST CL-TEST::ARGS) (DECLARE (IGNORE CL-TEST::ARGS)) (QUOTE CL-TEST::A))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) 10)))) UNLESS (EQ (EVAL CL-TEST::FORM) (QUOTE CL-TEST::A)) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (WARNING VARIABLE UNSIGNED-BYTE UNDEFINED-FUNCTION UNBOUND-VARIABLE UNBOUND-SLOT TYPE-ERROR TYPE TWO-WAY-STREAM T SYNONYM-STREAM SYMBOL STYLE-WARNING STRUCTURE-OBJECT STRUCTURE-CLASS STRUCTURE STRING-STREAM STREAM-ERROR STREAM STORAGE-CONDITION STANDARD-OBJECT STANDARD-METHOD STANDARD-GENERIC-FUNCTION STANDARD-CLASS STANDARD-CHAR STANDARD SPEED SPECIAL SPACE SINGLE-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT SIMPLE-WARNING SIMPLE-VECTOR SIMPLE-TYPE-ERROR SIMPLE-STRING SIMPLE-ERROR SIMPLE-CONDITION SIMPLE-BIT-VECTOR SIMPLE-BASE-STRING SIMPLE-ARRAY SIGNED-BYTE SHORT-FLOAT-NEGATIVE-EPSILON SHORT-FLOAT-EPSILON SHORT-FLOAT SERIOUS-CONDITION SEQUENCE SATISFIES SAFETY RESTART REAL READTABLE READER-ERROR RATIO RANDOM-STATE PROGRAM-ERROR PRINT-NOT-READABLE PI PARSE-ERROR PACKAGE-ERROR PACKAGE OTHERWISE OPTIMIZE NUMBER NOTINLINE NIL MULTIPLE-VALUES-LIMIT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-LONG-FLOAT MOST-POSITIVE-FIXNUM MOST-POSITIVE-DOUBLE-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-LONG-FLOAT MOST-NEGATIVE-FIXNUM MOST-NEGATIVE-DOUBLE-FLOAT METHOD-COMBINATION METHOD LONG-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-EPSILON LONG-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LAMBDA-PARAMETERS-LIMIT LAMBDA-LIST-KEYWORDS KEYWORD INTERNAL-TIME-UNITS-PER-SECOND INTEGER INLINE IGNORE IGNORABLE HASH-TABLE GENERIC-FUNCTION FTYPE FLOATING-POINT-UNDERFLOW FLOATING-POINT-OVERFLOW FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-INEXACT FIXNUM FILE-STREAM FILE-ERROR EXTENDED-CHAR END-OF-FILE ECHO-STREAM DYNAMIC-EXTENT DOUBLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT DIVISION-BY-ZERO DECLARATION DEBUG CONTROL-ERROR CONDITION CONCATENATED-STREAM COMPILER-MACRO COMPILED-FUNCTION COMPILATION-SPEED CLASS CHAR-CODE-LIMIT CELL-ERROR CALL-ARGUMENTS-LIMIT BUILT-IN-CLASS BROADCAST-STREAM BOOLEAN BOOLE-XOR BOOLE-SET BOOLE-ORC2 BOOLE-ORC1 BOOLE-NOR BOOLE-NAND BOOLE-IOR BOOLE-EQV BOOLE-CLR BOOLE-C2 BOOLE-C1 BOOLE-ANDC2 BOOLE-ANDC1 BOOLE-AND BOOLE-2 BOOLE-1 BIT-VECTOR BIGNUM BASE-STRING BASE-CHAR ARRAY-TOTAL-SIZE-LIMIT ARRAY-RANK-LIMIT ARRAY-DIMENSION-LIMIT ARRAY ARITHMETIC-ERROR /// // +++ ++ *TRACE-OUTPUT* *TERMINAL-IO* *STANDARD-OUTPUT* *STANDARD-INPUT* *READTABLE* *READ-SUPPRESS* *READ-EVAL* *READ-DEFAULT-FLOAT-FORMAT* *READ-BASE* *RANDOM-STATE* *QUERY-IO* *PRINT-RIGHT-MARGIN* *PRINT-READABLY* *PRINT-RADIX* *PRINT-PRETTY* *PRINT-PPRINT-DISPATCH* *PRINT-MISER-WIDTH* *PRINT-LINES* *PRINT-LEVEL* *PRINT-LENGTH* *PRINT-GENSYM* *PRINT-ESCAPE* *PRINT-CIRCLE* *PRINT-CASE* *PRINT-BASE* *PRINT-ARRAY* *PACKAGE* *MODULES* *MACROEXPAND-HOOK* *LOAD-VERBOSE* *LOAD-TRUENAME* *LOAD-PRINT* *LOAD-PATHNAME* *GENSYM-COUNTER* *FEATURES* *ERROR-OUTPUT* *DEFAULT-PATHNAME-DEFAULTS* *DEBUGGER-HOOK* *DEBUG-IO* *COMPILE-VERBOSE* *COMPILE-PRINT* *COMPILE-FILE-TRUENAME* *COMPILE-FILE-PATHNAME* *BREAK-ON-SIGNALS* *** ** &WHOLE &REST &OPTIONAL &KEY &ENVIRONMENT &BODY &AUX &ALLOW-OTHER-KEYS) [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.52
 CL-TEST::FLET.53
 CL-TEST::FLET.54
 CL-TEST::FLET.55
 CL-TEST::FLET.56
Test CL-TEST::FLET.57 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.58 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.59 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T :A 1 :B 2))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.60
Test CL-TEST::FLET.61 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY) :BAD)) (CL-TEST::%F NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.62
 CL-TEST::FLET.63
 CL-TEST::FLET.64
 CL-TEST::FLET.65
 CL-TEST::FLET.66
 CL-TEST::FLET.67
 CL-TEST::FLET.68
 CL-TEST::FLET.69
 CL-TEST::FLET.70
 CL-TEST::FLET.71
 CL-TEST::FLET.72
Test CL-TEST::FLET.73 failed
Form: (FLET ((CL-TEST::FLET.73 NIL :GOOD)) (CL-TEST::FLET.73))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.74
 CL-TEST::FMAKUNBOUND.1
 CL-TEST::FMAKUNBOUND.2
 CL-TEST::FMAKUNBOUND.3
 CL-TEST::FMAKUNBOUND.4
Test CL-TEST::FMAKUNBOUND.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . CL-TEST::FOO) (SETF CL-TEST::FOO . CL-TEST::BAR) (SETF CL-TEST::FOO CL-TEST::BAR))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (CL-TEST::X)) (FMAKUNBOUND CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (CL-TEST::X).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (FMAKUNBOUND) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (FMAKUNBOUND (GENSYM) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FMAKUNBOUND 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 1.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FMAKUNBOUND (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C058CC37> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C058CC37>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C05956C7> #<Simple-Error Invalid function name (SETF #<Hash-Table C05956C7>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C00026F7> #<Simple-Error Invalid function name (SETF #<Readtable C00026F7>).>) (#<Cl-Test::Foo-Structure C05933B7> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C05933B7>).>) (#<Function CONS 2802BC> #<Simple-Error Invalid function name (SETF #<Function CONS 2802BC>).>) (#<Random-State C05947E7> #<Simple-Error Invalid function name (SETF #<Random-State C05947E7>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C058EB17> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C058EB17>).>)) [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCALL.1
 CL-TEST::FUNCALL.2
 CL-TEST::FUNCALL.3
 CL-TEST::FUNCALL.4
 CL-TEST::FUNCALL.5
 CL-TEST::FUNCALL.6
 CL-TEST::FUNCALL.7
 CL-TEST::FUNCALL.8
 CL-TEST::FUNCALL.9
 CL-TEST::FUNCALL.ORDER.1
 CL-TEST::FUNCALL.ORDER.2
 CL-TEST::FUNCALL.ERROR.1
 CL-TEST::FUNCALL.ERROR.2
 CL-TEST::FUNCALL.ERROR.3
Test CL-TEST::FUNCALL.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FUNCALL.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FUNCALL.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (FUNCTION CONS) 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCALL.ERROR.7
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.2
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.3
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ORDER.1
Test CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCTION-LAMBDA-EXPRESSION) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCTION-LAMBDA-EXPRESSION (FUNCTION CONS) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCTION.1
 CL-TEST::FUNCTION.2
 CL-TEST::FUNCTION.3
 CL-TEST::FUNCTION.4
 CL-TEST::FUNCTION.5
 CL-TEST::FUNCTION.6
 CL-TEST::FUNCTION.7
 CL-TEST::FUNCTION.8
 CL-TEST::FUNCTION.9
 CL-TEST::FUNCTION.10
 CL-TEST::FUNCTION.11
 CL-TEST::FUNCTION.12
 CL-TEST::FUNCTION.13
 CL-TEST::FUNCTION.14
 CL-TEST::FUNCTION.15
 CL-TEST::FUNCTION.16
Test CL-TEST::FUNCTION.17 failed
Form: (FLET ((CL-TEST::%F (&OPTIONAL CL-TEST::X) CL-TEST::X)) (DECLARE (FTYPE (FUNCTION (&OPTIONAL INTEGER) T) CL-TEST::%F)) (VALUES (CL-TEST::%F) (CL-TEST::%F 10) (CL-TEST::%F) (CL-TEST::%F (1+ MOST-POSITIVE-FIXNUM))))
Expected value:
          NIL
          10
          NIL
          1152921504606846976
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCTION.18
 CL-TEST::FUNCTION.19
Test CL-TEST::FUNCTION.20 failed
Form: (FLET ((CL-TEST::%F (&KEY CL-TEST::FOO) CL-TEST::FOO)) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO T) (:ALLOW-OTHER-KEYS T)) T) CL-TEST::%F)) (VALUES (CL-TEST::%F) (CL-TEST::%F :FOO (QUOTE CL-TEST::A)) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL) (CL-TEST::%F :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::Z))))
Expected value:
          NIL
          CL-TEST::A
          NIL
          CL-TEST::Z
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCTION.21
 CL-TEST::FUNCTION.22
 CL-TEST::FUNCTION.23
 CL-TEST::FUNCTION.24
 CL-TEST::FUNCTIONP.1
 CL-TEST::FUNCTIONP.2
 CL-TEST::FUNCTIONP.3
 CL-TEST::FUNCTIONP.4
 CL-TEST::FUNCTIONP.5
 CL-TEST::FUNCTIONP.6
 CL-TEST::FUNCTIONP.7
 CL-TEST::FUNCTIONP.8
 CL-TEST::FUNCTIONP.9
 CL-TEST::FUNCTIONP.10
 CL-TEST::FUNCTIONP.11
 CL-TEST::FUNCTIONP.12
 CL-TEST::FUNCTIONP.ORDER.1
Test CL-TEST::FUNCTIONP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCTIONP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FUNCTIONP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCTIONP (FUNCTION CONS) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GET-SETF-EXPANSION.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (GET-SETF-EXPANSION) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GET-SETF-EXPANSION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (GET-SETF-EXPANSION (QUOTE CL-TEST::X) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GET-SETF-EXPANSION.1 failed
Form: (LET* ((CL-TEST::FN (GENSYM)) (CL-TEST::VALS (MULTIPLE-VALUE-LIST (GET-SETF-EXPANSION (LIST CL-TEST::FN))))) (VALUES (LENGTH CL-TEST::VALS) (FIRST CL-TEST::VALS) (SECOND CL-TEST::VALS) (LENGTH (THIRD CL-TEST::VALS)) (BLOCK CL-TEST::DONE (SUBST-IF NIL (FUNCTION (LAMBDA (CL-TEST::TERM) (WHEN (EQUAL CL-TEST::TERM (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FN))))) (RETURN-FROM CL-TEST::DONE :GOOD)))) (FOURTH CL-TEST::VALS))) (IF (EQUAL (FIFTH CL-TEST::VALS) (LIST CL-TEST::FN)) :GOOD (FIFTH CL-TEST::VALS))))
Expected value:
          5
          NIL
          NIL
          1
          :GOOD
          :GOOD
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
 CL-TEST::GET-SETF-EXPANSION.2
 CL-TEST::GET-SETF-EXPANSION.3
 CL-TEST::IDENTITY.1
 CL-TEST::IDENTITY.2
 CL-TEST::IDENTITY.3
 CL-TEST::IDENTITY.ORDER.1
Test CL-TEST::IDENTITY.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (IDENTITY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::IDENTITY.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (IDENTITY (QUOTE CL-TEST::A) (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::IF.1
 CL-TEST::IF.2
 CL-TEST::IF.3
 CL-TEST::IF.4
 CL-TEST::IF.5
 CL-TEST::IF.6
 CL-TEST::IF.7
 CL-TEST::IF.8
 CL-TEST::IF.9
 CL-TEST::IF.10
 CL-TEST::IF.11
 CL-TEST::IF.12
 CL-TEST::IF.13
 CL-TEST::IF.ORDER.1
 CL-TEST::LABELS.1
 CL-TEST::LABELS.2
 CL-TEST::LABELS.3
 CL-TEST::LABELS.4
 CL-TEST::LABELS.4A
 CL-TEST::LABELS.5
 CL-TEST::LABELS.6
 CL-TEST::LABELS.7
 CL-TEST::LABELS.7B
 CL-TEST::LABELS.7C
 CL-TEST::LABELS.7D
 CL-TEST::LABELS.8
 CL-TEST::LABELS.9
 CL-TEST::LABELS.10
 CL-TEST::LABELS.11
Test CL-TEST::LABELS.12 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :C 4)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.13 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.14 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.15 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F 1 2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.16 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A) CL-TEST::A)) (CL-TEST::%F (QUOTE (CL-TEST::FOO)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.17 failed
Form: (LABELS (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (LET ((CL-TEST::Z (LIST 1 2))) (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::A)) CL-TEST::Z))
Expected value:
          (CL-TEST::A 2)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.18
 CL-TEST::LABELS.19
Test CL-TEST::LABELS.20 failed
Form: (LET* ((CL-TEST::N (MIN (1- LAMBDA-PARAMETERS-LIMIT) 1024)) (CL-TEST::VARS (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (GENSYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::EQLT (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) (LABELS ((CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (+ (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::VARS)))) (CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::VARS CL-TEST::COLLECT 1))))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.21
 CL-TEST::LABELS.22
 CL-TEST::LABELS.23
 CL-TEST::LABELS.24
 CL-TEST::LABELS.25
Test CL-TEST::LABELS.26 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (LABELS (((SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) (&REST CL-TEST::ARGS) (DECLARE (IGNORE CL-TEST::ARGS)) (QUOTE CL-TEST::A))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) 10)))) UNLESS (EQ (EVAL CL-TEST::FORM) (QUOTE CL-TEST::A)) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (WARNING VARIABLE UNSIGNED-BYTE UNDEFINED-FUNCTION UNBOUND-VARIABLE UNBOUND-SLOT TYPE-ERROR TYPE TWO-WAY-STREAM T SYNONYM-STREAM SYMBOL STYLE-WARNING STRUCTURE-OBJECT STRUCTURE-CLASS STRUCTURE STRING-STREAM STREAM-ERROR STREAM STORAGE-CONDITION STANDARD-OBJECT STANDARD-METHOD STANDARD-GENERIC-FUNCTION STANDARD-CLASS STANDARD-CHAR STANDARD SPEED SPECIAL SPACE SINGLE-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT SIMPLE-WARNING SIMPLE-VECTOR SIMPLE-TYPE-ERROR SIMPLE-STRING SIMPLE-ERROR SIMPLE-CONDITION SIMPLE-BIT-VECTOR SIMPLE-BASE-STRING SIMPLE-ARRAY SIGNED-BYTE SHORT-FLOAT-NEGATIVE-EPSILON SHORT-FLOAT-EPSILON SHORT-FLOAT SERIOUS-CONDITION SEQUENCE SATISFIES SAFETY RESTART REAL READTABLE READER-ERROR RATIO RANDOM-STATE PROGRAM-ERROR PRINT-NOT-READABLE PI PARSE-ERROR PACKAGE-ERROR PACKAGE OTHERWISE OPTIMIZE NUMBER NOTINLINE NIL MULTIPLE-VALUES-LIMIT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-LONG-FLOAT MOST-POSITIVE-FIXNUM MOST-POSITIVE-DOUBLE-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-LONG-FLOAT MOST-NEGATIVE-FIXNUM MOST-NEGATIVE-DOUBLE-FLOAT METHOD-COMBINATION METHOD LONG-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-EPSILON LONG-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LAMBDA-PARAMETERS-LIMIT LAMBDA-LIST-KEYWORDS KEYWORD INTERNAL-TIME-UNITS-PER-SECOND INTEGER INLINE IGNORE IGNORABLE HASH-TABLE GENERIC-FUNCTION FTYPE FLOATING-POINT-UNDERFLOW FLOATING-POINT-OVERFLOW FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-INEXACT FIXNUM FILE-STREAM FILE-ERROR EXTENDED-CHAR END-OF-FILE ECHO-STREAM DYNAMIC-EXTENT DOUBLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT DIVISION-BY-ZERO DECLARATION DEBUG CONTROL-ERROR CONDITION CONCATENATED-STREAM COMPILER-MACRO COMPILED-FUNCTION COMPILATION-SPEED CLASS CHAR-CODE-LIMIT CELL-ERROR CALL-ARGUMENTS-LIMIT BUILT-IN-CLASS BROADCAST-STREAM BOOLEAN BOOLE-XOR BOOLE-SET BOOLE-ORC2 BOOLE-ORC1 BOOLE-NOR BOOLE-NAND BOOLE-IOR BOOLE-EQV BOOLE-CLR BOOLE-C2 BOOLE-C1 BOOLE-ANDC2 BOOLE-ANDC1 BOOLE-AND BOOLE-2 BOOLE-1 BIT-VECTOR BIGNUM BASE-STRING BASE-CHAR ARRAY-TOTAL-SIZE-LIMIT ARRAY-RANK-LIMIT ARRAY-DIMENSION-LIMIT ARRAY ARITHMETIC-ERROR /// // +++ ++ *TRACE-OUTPUT* *TERMINAL-IO* *STANDARD-OUTPUT* *STANDARD-INPUT* *READTABLE* *READ-SUPPRESS* *READ-EVAL* *READ-DEFAULT-FLOAT-FORMAT* *READ-BASE* *RANDOM-STATE* *QUERY-IO* *PRINT-RIGHT-MARGIN* *PRINT-READABLY* *PRINT-RADIX* *PRINT-PRETTY* *PRINT-PPRINT-DISPATCH* *PRINT-MISER-WIDTH* *PRINT-LINES* *PRINT-LEVEL* *PRINT-LENGTH* *PRINT-GENSYM* *PRINT-ESCAPE* *PRINT-CIRCLE* *PRINT-CASE* *PRINT-BASE* *PRINT-ARRAY* *PACKAGE* *MODULES* *MACROEXPAND-HOOK* *LOAD-VERBOSE* *LOAD-TRUENAME* *LOAD-PRINT* *LOAD-PATHNAME* *GENSYM-COUNTER* *FEATURES* *ERROR-OUTPUT* *DEFAULT-PATHNAME-DEFAULTS* *DEBUGGER-HOOK* *DEBUG-IO* *COMPILE-VERBOSE* *COMPILE-PRINT* *COMPILE-FILE-TRUENAME* *COMPILE-FILE-PATHNAME* *BREAK-ON-SIGNALS* *** ** &WHOLE &REST &OPTIONAL &KEY &ENVIRONMENT &BODY &AUX &ALLOW-OTHER-KEYS) [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.27
 CL-TEST::LABELS.28
 CL-TEST::LABELS.29
 CL-TEST::LABELS.30
 CL-TEST::LABELS.31
Test CL-TEST::LABELS.32 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.33 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.34 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T :A 1 :B 2))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.35
Test CL-TEST::LABELS.36 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY) :BAD)) (CL-TEST::%F NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.37
 CL-TEST::LABELS.38
 CL-TEST::LABELS.39
 CL-TEST::LABELS.40
 CL-TEST::LABELS.41
 CL-TEST::LABELS.42
 CL-TEST::LABELS.43
 CL-TEST::LABELS.44
 CL-TEST::LABELS.45
 CL-TEST::LABELS.46
 CL-TEST::LABELS.47
 CL-TEST::LABELS.48
 CL-TEST::LABELS.49
 CL-TEST::LABELS.50
Test CL-TEST::LABELS.51 failed
Form: (LABELS ((CL-TEST::LABELS.51 NIL :GOOD)) (CL-TEST::LABELS.51))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.52
 CL-TEST::LAMBDA-LIST-KEYWORDS.1
 CL-TEST::LAMBDA-LIST-KEYWORDS.2
 CL-TEST::LAMBDA-LIST-KEYWORDS.3
 CL-TEST::LAMBDA-LIST-KEYWORDS.5
Test CL-TEST::LAMBDA-PARAMETERS-LIMIT.1 failed
Form: (NOT (TYPEP LAMBDA-PARAMETERS-LIMIT (QUOTE INTEGER)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA-PARAMETERS-LIMIT.2 failed
Form: (< LAMBDA-PARAMETERS-LIMIT 50)
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::LET.1
 CL-TEST::LET.2
 CL-TEST::LET.3
 CL-TEST::LET.4
 CL-TEST::LET.5
 CL-TEST::LET.6
 CL-TEST::LET.7
 CL-TEST::LET.9
 CL-TEST::LET.11
 CL-TEST::LET.14
 CL-TEST::LET.15
 CL-TEST::LET.16
 CL-TEST::LET.17
 CL-TEST::LET.17A
 CL-TEST::LET.18
 CL-TEST::LET.19
 CL-TEST::LET.20
 CL-TEST::LET.21
 CL-TEST::LET*.1
 CL-TEST::LET*.2
 CL-TEST::LET*.3
 CL-TEST::LET*.4
 CL-TEST::LET*.5
 CL-TEST::LET*.6
 CL-TEST::LET*.7
 CL-TEST::LET*.8
 CL-TEST::LET*.9
 CL-TEST::LET*.10
 CL-TEST::LET*.11
 CL-TEST::LET*.12
 CL-TEST::LET*.14
 CL-TEST::LET*.15
 CL-TEST::LET*.16
 CL-TEST::LET*.17
 CL-TEST::LET*.17A
 CL-TEST::LET*.18
 CL-TEST::LET*.19
 CL-TEST::LET*.20
 CL-TEST::LET*.21
 CL-TEST::LET*.22
 CL-TEST::LET*.23
 CL-TEST::MACROLET.1
 CL-TEST::MACROLET.2
 CL-TEST::MACROLET.3
 CL-TEST::MACROLET.4
 CL-TEST::MACROLET.5
 CL-TEST::MACROLET.6
 CL-TEST::MACROLET.7
 CL-TEST::MACROLET.8
 CL-TEST::MACROLET.9
 CL-TEST::MACROLET.10
 CL-TEST::MACROLET.11
 CL-TEST::MACROLET.12
 CL-TEST::MACROLET.13
 CL-TEST::MACROLET.14
 CL-TEST::MACROLET.15
 CL-TEST::MACROLET.16
 CL-TEST::MACROLET.17
 CL-TEST::MACROLET.18
 CL-TEST::MACROLET.19
 CL-TEST::MACROLET.20
 CL-TEST::MACROLET.21
 CL-TEST::MACROLET.22
 CL-TEST::MACROLET.22A
 CL-TEST::MACROLET.23
 CL-TEST::MACROLET.24
 CL-TEST::MACROLET.25
 CL-TEST::MACROLET.26
 CL-TEST::MACROLET.27
 CL-TEST::MACROLET.28
 CL-TEST::MACROLET.29
 CL-TEST::MACROLET.30
 CL-TEST::MACROLET.31
Test CL-TEST::MACROLET.32 failed
Form: (MACROLET ((CL-TEST::%M (&KEY CL-TEST::A CL-TEST::B CL-TEST::C) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::A) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::B) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C)))))) (VALUES (CL-TEST::%M :ALLOW-OTHER-KEYS NIL) (CL-TEST::%M :A 1 :ALLOW-OTHER-KEYS NIL) (CL-TEST::%M :ALLOW-OTHER-KEYS T) (CL-TEST::%M :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T) (CL-TEST::%M :ALLOW-OTHER-KEYS T :C 1 :B 2 :A 3) (CL-TEST::%M :ALLOW-OTHER-KEYS NIL :C 1 :B 2 :A 3)))
Expected value:
          (NIL NIL NIL)
          (1 NIL NIL)
          (NIL NIL NIL)
          (NIL NIL NIL)
          (3 2 1)
          (3 2 1)
Actual value:
          #<Simple-Error Invalid keyword :ALLOW-OTHER-KEYS. Wanted one of (:C :B :A).> [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.33
 CL-TEST::MACROLET.34
 CL-TEST::MACROLET.35
Test CL-TEST::MACROLET.36 failed
Form: (MACROLET ((CL-TEST::%M (&WHOLE (CL-TEST::M CL-TEST::A CL-TEST::B) CL-TEST::C CL-TEST::D) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::M) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::A) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::B) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::D)))))) (CL-TEST::%M 1 2))
Expected value:
          (CL-TEST::%M 1 2 1 2)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::NAME is (CL-TEST::M CL-TEST::A CL-TEST::B), which is not of type SYMBOL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACROLET.37 failed
Form: (MACROLET ((CL-TEST::%F NIL :BAD)) (FLET ((CL-TEST::%F NIL :GOOD)) (CL-TEST::%F)))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.38
Test CL-TEST::MACROLET.39 failed
Form: (MACROLET ((CL-TEST::%M (NIL) :GOOD)) (CL-TEST::%M NIL))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error Cannot bind over constant NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.40
 CL-TEST::MACROLET.41
 CL-TEST::MACROLET.42
 CL-TEST::MACROLET.43
 CL-TEST::MACROLET.44
 CL-TEST::MACROLET.45
 CL-TEST::MACROLET.46
 CL-TEST::MACROLET.47
 CL-TEST::MACROLET.48
 CL-TEST::MACROLET.49
 CL-TEST::MACROLET.50
 CL-TEST::MACROLET.51
 CL-TEST::MACROLET.52
 CL-TEST::MULTIPLE-VALUE-BIND.1
 CL-TEST::MULTIPLE-VALUE-BIND.2
 CL-TEST::MULTIPLE-VALUE-BIND.3
 CL-TEST::MULTIPLE-VALUE-BIND.4
 CL-TEST::MULTIPLE-VALUE-BIND.5
 CL-TEST::MULTIPLE-VALUE-BIND.6
Test CL-TEST::MULTIPLE-VALUE-BIND.7 failed
Form: (LET ((CL-TEST::Z 0) CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::Z)) (VALUES (FLET ((CL-TEST::%X NIL (SYMBOL-VALUE (QUOTE CL-TEST::X))) (CL-TEST::%Y NIL (SYMBOL-VALUE (QUOTE CL-TEST::Y))) (CL-TEST::%Z NIL (SYMBOL-VALUE (QUOTE CL-TEST::Z)))) (MULTIPLE-VALUE-BIND (CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3) (DECLARE (SPECIAL CL-TEST::X CL-TEST::Y)) (LIST (CL-TEST::%X) (CL-TEST::%Y) (CL-TEST::%Z)))) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 0)
          NIL
          NIL
          0
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-BIND.8
 CL-TEST::MULTIPLE-VALUE-BIND.9
 CL-TEST::MULTIPLE-VALUE-BIND.10
 CL-TEST::MULTIPLE-VALUE-BIND.11
 CL-TEST::MULTIPLE-VALUE-BIND.12
 CL-TEST::MULTIPLE-VALUE-BIND.13
 CL-TEST::MULTIPLE-VALUE-BIND.14
Test CL-TEST::MULTIPLE-VALUE-BIND.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-BIND))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-BIND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-BIND)) (QUOTE (MULTIPLE-VALUE-BIND NIL NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-BIND.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-BIND)) (QUOTE (MULTIPLE-VALUE-BIND NIL NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-CALL.1
 CL-TEST::MULTIPLE-VALUE-CALL.2
 CL-TEST::MULTIPLE-VALUE-CALL.3
 CL-TEST::MULTIPLE-VALUE-CALL.4
 CL-TEST::MULTIPLE-VALUE-CALL.5
 CL-TEST::MULTIPLE-VALUE-PROG1.1
 CL-TEST::MULTIPLE-VALUE-PROG1.2
 CL-TEST::MULTIPLE-VALUE-PROG1.3
 CL-TEST::MULTIPLE-VALUE-PROG1.4
 CL-TEST::MULTIPLE-VALUE-PROG1.5
 CL-TEST::MULTIPLE-VALUE-PROG1.6
 CL-TEST::MULTIPLE-VALUE-PROG1.7
Test CL-TEST::MULTIPLE-VALUE-PROG1.8 failed
Form: (LET* ((CL-TEST::N (MIN 100 MULTIPLE-VALUES-LIMIT))) (CL-TEST::NOT-MV (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW CL-TEST::N CL-TEST::FOR CL-TEST::X = (CL-TEST::MAKE-INT-LIST CL-TEST::I) CL-TEST::ALWAYS (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MULTIPLE-VALUE-PROG1 (VALUES-LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ CL-TEST::X)))) NIL)))) CL-TEST::X))))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-PROG1.9
 CL-TEST::MULTIPLE-VALUE-PROG1.10
 CL-TEST::MULTIPLE-VALUE-PROG1.11
 CL-TEST::MULTIPLE-VALUE-PROG1.12
Test CL-TEST::MULTIPLE-VALUE-SETQ.1 failed
Form: (LET ((CL-TEST::X 1) (CL-TEST::Y 2)) (VALUES (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::Y) (VALUES 3 4))) CL-TEST::X CL-TEST::Y))
Expected value:
          (3)
          3
          4
Actual value:
          (4) [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.2
Test CL-TEST::MULTIPLE-VALUE-SETQ.3 failed
Form: (LET (CL-TEST::X) (SYMBOL-MACROLET ((CL-TEST::Y CL-TEST::X)) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) (VALUES 1 2)) CL-TEST::X))
Expected value:
          1
Actual value:
          #<Type-Error C1B047D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.4 failed
Form: (LET ((CL-TEST::X (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) (VALUES 1 2)) CL-TEST::X))
Expected value:
          (1)
Actual value:
          #<Type-Error C1B0FA67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.5 failed
Form: (LET ((CL-TEST::I 0) (CL-TEST::X (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR (PROGN (INCF CL-TEST::I) CL-TEST::X)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) CL-TEST::I)) CL-TEST::X)
Expected value:
          (1)
Actual value:
          #<Type-Error C1B1B4B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.6 failed
Form: (LET ((CL-TEST::X (LIST NIL)) CL-TEST::Z) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::Z) (VALUES 1 2))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (1)
          2
Actual value:
          #<Type-Error C1B28837> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.7 failed
Form: (LET ((CL-TEST::X (LIST NIL)) (CL-TEST::Z (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X)) (CL-TEST::W (CAR CL-TEST::Z))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::W) (VALUES 1 2))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (1)
          (2)
Actual value:
          #<Type-Error C1B363D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.8 failed
Form: (LET ((CL-TEST::X (LIST NIL)) (CL-TEST::Z (LIST NIL)) (CL-TEST::I 0)) (SYMBOL-MACROLET ((CL-TEST::Y (CAR (PROGN (INCF CL-TEST::I 3) CL-TEST::X))) (CL-TEST::W (CAR (PROGN (INCF CL-TEST::I CL-TEST::I) CL-TEST::Z)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::W) (VALUES CL-TEST::I 10))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (6)
          (10)
Actual value:
          #<Type-Error C1B45207> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.9 failed
Form: (LET (CL-TEST::X) (VALUES (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::X) (VALUES 1 2)) CL-TEST::X))
Expected value:
          1
          2
Actual value:
          2 [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.10 failed
Form: (LET (CL-TEST::X) (VALUES (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::X) (VALUES 1)) CL-TEST::X))
Expected value:
          1
          NIL
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.11
Test CL-TEST::MULTIPLE-VALUE-SETQ.12 failed
Form: (LET ((CL-TEST::N (MIN 100 MULTIPLE-VALUES-LIMIT)) (CL-TEST::VARS NIL) (CL-TEST::RESULT NIL)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::BELOW CL-TEST::N CL-TEST::FOR CL-TEST::FORM = (PROGN (PUSH (GENSYM) CL-TEST::VARS) (PUSH CL-TEST::I CL-TEST::RESULT) (SYSTEM.INTERNALS::BACKQUOTE (LET (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (AND (EQL (MULTIPLE-VALUE-SETQ (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (VALUES-LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT)))) (SYSTEM.INTERNALS::BQ-COMMA (CAR CL-TEST::RESULT))) (EQUAL (SYSTEM.INTERNALS::BQ-COMMA (CL-TEST::MAKE-LIST-EXPR CL-TEST::VARS)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT))))))) UNLESS (EVAL CL-TEST::FORM) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::FORM)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.13 failed
Form: (MULTIPLE-VALUE-SETQ NIL :GOOD)
Expected value:
          :GOOD
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.14
Test CL-TEST::MULTIPLE-VALUE-SETQ.15 failed
Form: (MULTIPLE-VALUE-SETQ NIL (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.16 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X :BAD)) (SYMBOL-MACROLET ((CL-TEST::Z (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Z) :GOOD)) CL-TEST::X))
Expected value:
          :GOOD
Actual value:
          #<Type-Error C1B9BBB7> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.17
Test CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-SETQ))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-SETQ)) (QUOTE (MULTIPLE-VALUE-SETQ NIL NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-SETQ)) (QUOTE (MULTIPLE-VALUE-SETQ NIL NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-LIST.1
 CL-TEST::MULTIPLE-VALUE-LIST.2
 CL-TEST::MULTIPLE-VALUE-LIST.3
 CL-TEST::MULTIPLE-VALUE-LIST.4
 CL-TEST::MULTIPLE-VALUE-LIST.5
 CL-TEST::MULTIPLE-VALUE-LIST.6
Test CL-TEST::MULTIPLE-VALUE-LIST.7 failed
Form: (NOT (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW (MIN MULTIPLE-VALUES-LIMIT 100) CL-TEST::FOR CL-TEST::X = (MAKE-LIST CL-TEST::I :INITIAL-ELEMENT (QUOTE CL-TEST::A)) CL-TEST::ALWAYS (EQUAL CL-TEST::X (MULTIPLE-VALUE-LIST (VALUES-LIST CL-TEST::X)))))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-LIST.8
 CL-TEST::MULTIPLE-VALUE-LIST.9
 CL-TEST::MULTIPLE-VALUE-LIST.ORDER.1
Test CL-TEST::MULTIPLE-VALUE-LIST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-LIST))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-LIST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-LIST)) (QUOTE (MULTIPLE-VALUE-LIST NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-LIST.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-LIST)) (QUOTE (MULTIPLE-VALUE-LIST NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::NIL.1
 CL-TEST::NIL.2
 CL-TEST::NIL.3
 CL-TEST::NIL.4
 CL-TEST::NIL.5
 CL-TEST::NIL.6
 CL-TEST::NIL.7
 CL-TEST::NIL.8
 CL-TEST::NULL.1
 CL-TEST::NULL.2
 CL-TEST::NULL.3
 CL-TEST::NULL.4
Test CL-TEST::NULL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NULL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NULL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NULL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOT.1
 CL-TEST::NOT.2
 CL-TEST::NOT.3
 CL-TEST::NOT.4
Test CL-TEST::NOT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NOT NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.1
Test CL-TEST::NOTANY.2 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION IDENTITY) #()))
Expected value:
          NIL
Actual value:
          #<Type-Error C1E78327> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.3
 CL-TEST::NOTANY.4
 CL-TEST::NOTANY.5
 CL-TEST::NOTANY.6
Test CL-TEST::NOTANY.7 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND CL-TEST::X CL-TEST::Y))) (QUOTE (NIL T T NIL T)) #(T NIL NIL T NIL NIL)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1E89997> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.8
Test CL-TEST::NOTANY.9 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION ZEROP) #*11111111111111))
Expected value:
          NIL
Actual value:
          #<Type-Error C1F6C5B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.10 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION ZEROP) #*))
Expected value:
          NIL
Actual value:
          #<Type-Error C1F741C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.11 failed
Form: (NOTANY (FUNCTION ZEROP) #*1111111011111)
Expected value:
          NIL
Actual value:
          #<Type-Error C1F7B5C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.12 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaaaa"))
Expected value:
          NIL
Actual value:
          #<Type-Error C1F82F97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.13 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X #\a))) ""))
Expected value:
          NIL
Actual value:
          #<Type-Error C1F8BFC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.14 failed
Form: (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaabaaaa")
Expected value:
          NIL
Actual value:
          #<Type-Error C1F94717> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.15
 CL-TEST::NOTANY.16
Test CL-TEST::NOTANY.17 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION PLUSP) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error C1FA3F67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::IN (QUOTE (0 0 0 0 1 2 3 4 5 6)) CL-TEST::COLLECT (MOD CL-TEST::J (ASH 1 CL-TEST::I))) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION PLUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error C1FC67E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION MINUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.20 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 8007DCB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.21 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 816AF397> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.22 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V)) (SETF (AREF CL-TEST::V 2) #\0) (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V)))
Expected value:
          T
          #\0
          NIL
Actual value:
          #<Type-Error 816BE427> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.23 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) WHEN (NOTANY (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 816D20A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.24 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :FILL-POINTER 6 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) UNLESS (NOTANY (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 816E8007> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.25 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (NOTANY (COMPLEMENT (FUNCTION COMPLEXP)) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 816FF5E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.26 failed
Form: (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (NOTANY (FUNCTION ODDP) CL-TEST::V1) (CL-TEST::NOTNOT (NOTANY (FUNCTION ODDP) CL-TEST::V2))))
Expected value:
          NIL
          T
Actual value:
          #<Type-Error 817392B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (NOTANY (QUOTE ODDP) CL-TEST::V1)) (NOTANY (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error 8174B657> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.28 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (NOTANY (QUOTE ODDP) CL-TEST::V1)) (NOTANY (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.29 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (NOT (NOTANY (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error 8177BB77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.30 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (NOT (NOTANY (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error 8178FCF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.31 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (NOTANY (FUNCTION MINUSP) CL-TEST::V))))
Expected value:
          T
          NIL
Actual value:
          #<Type-Error 817A0287> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.32 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)))))
Expected value:
          T
          T
Actual value:
          #<Type-Error 817AE2F7> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.ORDER.1Space
 CL-TEST::NOTANY.ERROR.1Space
 CL-TEST::NOTANY.ERROR.4
Test CL-TEST::NOTANY.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NOTANY (FUNCTION EQL) NIL CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          ((0 (NIL T)) (#\Space (NIL T)) (#<Arithmetic-Error 8057AD27> (NIL T)) (#<Package "Cl"> (NIL T)) (#<Hash-Table 805835C7> (NIL T)) (#P"THAT-MAC-THING:foo" (NIL T)) (#<Synonym-Stream for *TERMINAL-IO*> (NIL T)) (#<Readtable 80002757> (NIL T)) (#<Cl-Test::Foo-Structure 805812B7> (NIL T)) (#<Function CONS 2802BC> (NIL T)) (#<Random-State 80582767> (NIL T)) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 8057CB77> (NIL T))) [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NOTANY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NOTANY (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.ERROR.10
Test CL-TEST::NOTANY.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (NOTANY (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (NOTANY (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (1 2 4)) (QUOTE (CL-TEST::G CL-TEST::H CL-TEST::J))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.ERROR.13
 CL-TEST::NOTEVERY.1
 CL-TEST::NOTEVERY.2
 CL-TEST::NOTEVERY.3
 CL-TEST::NOTEVERY.4
 CL-TEST::NOTEVERY.5
 CL-TEST::NOTEVERY.6
 CL-TEST::NOTEVERY.7
 CL-TEST::NOTEVERY.8
 CL-TEST::NOTEVERY.9
 CL-TEST::NOTEVERY.10
 CL-TEST::NOTEVERY.11
 CL-TEST::NOTEVERY.12
 CL-TEST::NOTEVERY.13
 CL-TEST::NOTEVERY.14
 CL-TEST::NOTEVERY.15
 CL-TEST::NOTEVERY.16
 CL-TEST::NOTEVERY.17
Test CL-TEST::NOTEVERY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 1 1 1 1 1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.20
 CL-TEST::NOTEVERY.21
 CL-TEST::NOTEVERY.22
 CL-TEST::NOTEVERY.23
Test CL-TEST::NOTEVERY.24 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOTEVERY (QUOTE EVENP) CL-TEST::V1) (NOT (NOTEVERY (FUNCTION EVENP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.25 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOTEVERY (QUOTE EVENP) CL-TEST::V1) (NOT (NOTEVERY (FUNCTION EVENP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.26
 CL-TEST::NOTEVERY.27
 CL-TEST::NOTEVERY.28
 CL-TEST::NOTEVERY.29
Test CL-TEST::NOTEVERY.30 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6)))) WHEN (NOTEVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.31 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 -1)))) WHEN (NOTEVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.32 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) WHEN (NOTEVERY (FUNCTION COMPLEXP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 21 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.ORDER.1Space
 CL-TEST::NOTEVERY.ERROR.1
Test CL-TEST::NOTEVERY.ERROR.4 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NOTEVERY (FUNCTION NULL) CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NOTEVERY (FUNCTION EQL) NIL CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NOTEVERY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NOTEVERY (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.ERROR.10
Test CL-TEST::NOTEVERY.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (NOTEVERY (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (NOTEVERY (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (1 2 4)) (QUOTE (CL-TEST::G CL-TEST::H CL-TEST::J))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.ERROR.13
 CL-TEST::NTH-VALUE.1
 CL-TEST::NTH-VALUE.2
 CL-TEST::NTH-VALUE.3
 CL-TEST::NTH-VALUE.4
 CL-TEST::NTH-VALUE.5
 CL-TEST::NTH-VALUE.6
 CL-TEST::NTH-VALUE.7
 CL-TEST::NTH-VALUE.ORDER.1
Test CL-TEST::NTH-VALUE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE NTH-VALUE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NTH-VALUE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE NTH-VALUE)) (QUOTE (NTH-VALUE 1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NTH-VALUE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE NTH-VALUE)) (QUOTE (NTH-VALUE 1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::OR.1
 CL-TEST::OR.2
 CL-TEST::OR.3
 CL-TEST::OR.4
 CL-TEST::OR.5
 CL-TEST::OR.6
 CL-TEST::OR.7
 CL-TEST::OR.8
 CL-TEST::OR.9
 CL-TEST::OR.10
 CL-TEST::OR.11
Test CL-TEST::OR.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE OR))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::OR.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE OR)) (QUOTE (OR))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::OR.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE OR)) (QUOTE (OR)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::PROG.1
 CL-TEST::PROG.2
 CL-TEST::PROG.3
 CL-TEST::PROG.4
 CL-TEST::PROG.5
 CL-TEST::PROG.6
 CL-TEST::PROG.7
 CL-TEST::PROG.8
 CL-TEST::PROG.9
 CL-TEST::PROG.10
 CL-TEST::PROG.11
 CL-TEST::PROG.12
Test CL-TEST::PROG.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG)) (QUOTE (PROG NIL))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG)) (QUOTE (PROG NIL)) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.1 failed
Form: (PROG* NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.2 failed
Form: (PROG* NIL (QUOTE CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.3 failed
Form: (PROG* NIL (RETURN (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.4 failed
Form: (PROG* NIL (RETURN (VALUES 1 2 3 4 5)))
Expected value:
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.5 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (PROG* ((CL-TEST::Z CL-TEST::X) (CL-TEST::X (QUOTE CL-TEST::B)) (CL-TEST::Y CL-TEST::X)) (DECLARE (TYPE SYMBOL CL-TEST::X CL-TEST::Y)) (RETURN (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z))))
Expected value:
          CL-TEST::B
          CL-TEST::B
          CL-TEST::A
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.6 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (PROG* (CL-TEST::X) (SETQ CL-TEST::X (QUOTE CL-TEST::B))) CL-TEST::X)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.7 failed
Form: (PROG* ((CL-TEST::I 1) (CL-TEST::S 0)) (DECLARE (TYPE FIXNUM CL-TEST::I CL-TEST::S)) CL-TEST::AGAIN (WHEN (> CL-TEST::I 10) (RETURN CL-TEST::S)) (INCF CL-TEST::S CL-TEST::I) (INCF CL-TEST::I) (GO CL-TEST::AGAIN))
Expected value:
          55
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.8 failed
Form: (LET ((CL-TEST::X 0)) (PROG* ((CL-TEST::Y (INCF CL-TEST::X)) (CL-TEST::Z (INCF CL-TEST::X))) (RETURN (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z))))
Expected value:
          2
          1
          2
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.9 failed
Form: (FLET ((CL-TEST::%F NIL (LOCALLY (DECLARE (SPECIAL CL-TEST::Z)) CL-TEST::Z))) (PROG* ((CL-TEST::Z 10)) (DECLARE (SPECIAL CL-TEST::Z)) (RETURN (CL-TEST::%F))))
Expected value:
          10
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.10 failed
Form: (PROG* NIL (RETURN (1+ (PROG* NIL (GO CL-TEST::END) CL-TEST::DONE (RETURN 1) CL-TEST::END (GO CL-TEST::DONE)))) CL-TEST::DONE (RETURN (QUOTE CL-TEST::BAD)))
Expected value:
          2
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.11 failed
Form: (LET ((CL-TEST::X :BAD)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X :GOOD)) (PROG* ((CL-TEST::Y CL-TEST::X)) (DECLARE (SPECIAL CL-TEST::X)) (RETURN CL-TEST::Y))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.12 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (PROG* ((CL-TEST::X (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :GOOD)))) (RETURN CL-TEST::X)))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function PROG*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROG*.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG*))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG*)) (QUOTE (PROG* NIL))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG*)) (QUOTE (PROG* NIL)) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::PROG1.1
 CL-TEST::PROG1.2
 CL-TEST::PROG1.3
 CL-TEST::PROG1.4
 CL-TEST::PROG1.5
 CL-TEST::PROG1.6
 CL-TEST::PROG1.7
Test CL-TEST::PROG1.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG1))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG1)) (QUOTE (PROG1 NIL))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG1)) (QUOTE (PROG1 NIL)) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::PROG2.1
 CL-TEST::PROG2.2
 CL-TEST::PROG2.3
 CL-TEST::PROG2.4
 CL-TEST::PROG2.5
 CL-TEST::PROG2.6
 CL-TEST::PROG2.7
 CL-TEST::PROG2.8
Test CL-TEST::PROG2.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG2))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG2)) (QUOTE (PROG2 NIL NIL))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PROG2)) (QUOTE (PROG2 NIL NIL)) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::PROGN.1
 CL-TEST::PROGN.2
 CL-TEST::PROGN.3
 CL-TEST::PROGN.4
 CL-TEST::PROGN.5
 CL-TEST::PROGN.6
 CL-TEST::PROGN.7
 CL-TEST::PROGN.8
 CL-TEST::PROGN.9
 CL-TEST::PROGN.10
 CL-TEST::PROGV.1
 CL-TEST::PROGV.2
 CL-TEST::PROGV.3
 CL-TEST::PROGV.4
 CL-TEST::PROGV.5
 CL-TEST::PROGV.6
 CL-TEST::PROGV.6A
 CL-TEST::PROGV.7
 CL-TEST::PROGV.8
 CL-TEST::PROGV.9
 CL-TEST::PROGV.10
 CL-TEST::PROGV.11
 CL-TEST::PROGV.12
 CL-TEST::PROGV.13
 CL-TEST::PROGV.14
 CL-TEST::PROGV.15
 CL-TEST::PROGV.16
 CL-TEST::PROGV.17
 CL-TEST::SOME.1
Test CL-TEST::SOME.2 failed
Form: (SOME (FUNCTION IDENTITY) #())
Expected value:
          NIL
Actual value:
          #<Type-Error 81D674B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.3
 CL-TEST::SOME.4
 CL-TEST::SOME.5
 CL-TEST::SOME.6
Test CL-TEST::SOME.7 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND CL-TEST::X CL-TEST::Y))) (QUOTE (NIL T T NIL T)) #(T NIL NIL T NIL NIL))
Expected value:
          NIL
Actual value:
          #<Type-Error 81D775B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.8
Test CL-TEST::SOME.9 failed
Form: (SOME (FUNCTION ZEROP) #*11111111111111)
Expected value:
          NIL
Actual value:
          #<Type-Error 81D872E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.10 failed
Form: (SOME (FUNCTION ZEROP) #*)
Expected value:
          NIL
Actual value:
          #<Type-Error 81D8E297> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.11 failed
Form: (CL-TEST::NOT-MV (SOME (FUNCTION ZEROP) #*1111111011111))
Expected value:
          NIL
Actual value:
          #<Type-Error 81D950F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.12 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaaaa")
Expected value:
          NIL
Actual value:
          #<Type-Error 81D9CC67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.13 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X #\a))) "")
Expected value:
          NIL
Actual value:
          #<Type-Error 81DA5037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.14 failed
Form: (CL-TEST::NOT-MV (SOME (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaabaaaa"))
Expected value:
          NIL
Actual value:
          #<Type-Error 81DAD1E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.15
 CL-TEST::SOME.16
Test CL-TEST::SOME.17 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION PLUSP) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 81DBCCB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::IN (QUOTE (0 0 0 0 1 2 3 4 5 6)) CL-TEST::COLLECT (MOD CL-TEST::J (ASH 1 CL-TEST::I))) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION PLUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error 81DDF7B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION MINUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.20 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 81E14327> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.21 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 81E275D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.22 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V) (SETF (AREF CL-TEST::V 2) #\0) (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          NIL
          #\0
          T
Actual value:
          #<Type-Error 81E36157> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.23 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) UNLESS (SOME (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 81E49C77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.24 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :FILL-POINTER 6 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) WHEN (SOME (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 81E5F937> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.25 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) WHEN (SOME (COMPLEMENT (FUNCTION COMPLEXP)) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 81E76AF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.26 failed
Form: (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (CL-TEST::NOTNOT (SOME (FUNCTION ODDP) CL-TEST::V1)) (SOME (FUNCTION ODDP) CL-TEST::V2)))
Expected value:
          T
          NIL
Actual value:
          #<Type-Error 81E89BB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (SOME (QUOTE ODDP) CL-TEST::V1)) (NOT (SOME (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error 81E9BB27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.28 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (SOME (QUOTE ODDP) CL-TEST::V1) (NOT (SOME (FUNCTION ODDP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.29 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error 81ECAE27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.30 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error 81EDF227> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.31 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (SOME (FUNCTION MINUSP) CL-TEST::V) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (CL-TEST::NOTNOT (SOME (FUNCTION MINUSP) CL-TEST::V)))))
Expected value:
          NIL
          T
Actual value:
          #<Type-Error 81EEF907> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.32 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (SOME (FUNCTION MINUSP) CL-TEST::V) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (SOME (FUNCTION MINUSP) CL-TEST::V))))
Expected value:
          NIL
          NIL
Actual value:
          #<Type-Error 81EFD587> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.ORDER.1
 CL-TEST::SOME.ORDER.2Space
 CL-TEST::SOME.ERROR.1Space
 CL-TEST::SOME.ERROR.4
Test CL-TEST::SOME.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (SOME (FUNCTION EQL) NIL CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          ((0 (NIL NIL)) (#\Space (NIL NIL)) (#<Arithmetic-Error 8057AD27> (NIL NIL)) (#<Package "Cl"> (NIL NIL)) (#<Hash-Table 805835C7> (NIL NIL)) (#P"THAT-MAC-THING:foo" (NIL NIL)) (#<Synonym-Stream for *TERMINAL-IO*> (NIL NIL)) (#<Readtable 80002757> (NIL NIL)) (#<Cl-Test::Foo-Structure 805812B7> (NIL NIL)) (#<Function CONS 2802BC> (NIL NIL)) (#<Random-State 80582767> (NIL NIL)) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 8057CB77> (NIL NIL))) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (SOME) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (SOME (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.ERROR.10
Test CL-TEST::SOME.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (SOME (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.ERROR.12
Test CL-TEST::SOME.ERROR.13 failed
Form: (CL-TEST:SIGNALS-ERROR (SOME (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (CL-TEST::B CL-TEST::C CL-TEST::D)) (QUOTE (CL-TEST::C CL-TEST::D CL-TEST::E))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.ERROR.14
 CL-TEST::T.1
 CL-TEST::T.2
 CL-TEST::T.3
 CL-TEST::T.4
 CL-TEST::TAGBODY.1
 CL-TEST::TAGBODY.2
 CL-TEST::TAGBODY.3
 CL-TEST::TAGBODY.4
 CL-TEST::TAGBODY.5
 CL-TEST::TAGBODY.6
 CL-TEST::TAGBODY.7
 CL-TEST::TAGBODY.8
 CL-TEST::TAGBODY.9
 CL-TEST::TAGBODY.10
 CL-TEST::TAGBODY.11
 CL-TEST::TAGBODY.12
 CL-TEST::TAGBODY.13
 CL-TEST::TAGBODY.14
Test CL-TEST::TAGBODY.15 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (GO CL-TEST::AROUND) 1152921504606846976 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD)) CL-TEST::AROUND (GO 1152921504606846976)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No GO-tag named 1152921504606846976.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TAGBODY.16 failed
Form: (LET* ((CL-TEST::T1 (1+ MOST-POSITIVE-FIXNUM)) (CL-TEST::T2 (1+ MOST-POSITIVE-FIXNUM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (BLOCK CL-TEST::DONE (TAGBODY (GO CL-TEST::AROUND) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::T1) (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD)) CL-TEST::AROUND (GO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::T2))))))) (EVAL CL-TEST::FORM))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No GO-tag named 1152921504606846976.> [Actual value: #<error during printing>

 NIL
 CL-TEST::TAGBODY.17
 CL-TEST::TAGBODY.18
 CL-TEST::TYPECASE.1
 CL-TEST::TYPECASE.2
 CL-TEST::TYPECASE.3
 CL-TEST::TYPECASE.4
 CL-TEST::TYPECASE.5
 CL-TEST::TYPECASE.6
 CL-TEST::TYPECASE.7
 CL-TEST::TYPECASE.8
 CL-TEST::TYPECASE.9
 CL-TEST::TYPECASE.10
 CL-TEST::TYPECASE.11
Test CL-TEST::TYPECASE.12 failed
Form: (TYPECASE 1 (INTEGER) (T (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.13 failed
Form: (TYPECASE 1 (SYMBOL (QUOTE CL-TEST::A)) (T))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.14 failed
Form: (TYPECASE 1 (SYMBOL (QUOTE CL-TEST::A)) (OTHERWISE))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.15 failed
Form: (TYPECASE (QUOTE CL-TEST::A) (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL C00B1797> (QUOTE CL-TEST::GOOD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Type-Error C172D267> [Actual value: #<error during printing>

 NIL
 CL-TEST::TYPECASE.16
 CL-TEST::TYPECASE.17
 CL-TEST::TYPECASE.18
Test CL-TEST::TYPECASE.19 failed
Form: (LET* ((CL-TEST::U (COERCE CL-TEST:*UNIVERSE* (QUOTE VECTOR))) (CL-TEST::LEN1 (LENGTH CL-TEST::U)) (CL-TEST::TYPES (COERCE CL-TEST::*CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (CL-TEST::LEN2 (LENGTH CL-TEST::TYPES))) (LOOP CL-TEST::FOR CL-TEST::N = (RANDOM 10) CL-TEST::FOR CL-TEST::MY-TYPES = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (ELT CL-TEST::TYPES (RANDOM CL-TEST::LEN2))) CL-TEST::FOR CL-TEST::VAL = (ELT CL-TEST::U (RANDOM CL-TEST::LEN1)) CL-TEST::FOR CL-TEST::I = (POSITION CL-TEST::VAL CL-TEST::MY-TYPES :TEST (FUNCTION TYPEP)) CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (TYPECASE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VAL)) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::FOR TYPE CL-TEST::IN CL-TEST::MY-TYPES CL-TEST::COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))))) (OTHERWISE NIL))) CL-TEST::FOR CL-TEST::J = (EVAL CL-TEST::FORM) CL-TEST::REPEAT 1000 UNLESS (EQL CL-TEST::I CL-TEST::J) CL-TEST::COLLECT (LIST CL-TEST::N CL-TEST::MY-TYPES CL-TEST::VAL CL-TEST::I CL-TEST::FORM CL-TEST::J)))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of CHARACTER is -140737488355328, which is not of type CHARACTER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::TYPECASE.20
 CL-TEST::TYPECASE.21
Test CL-TEST::TYPECASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE TYPECASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE TYPECASE)) (QUOTE (TYPECASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE TYPECASE)) (QUOTE (TYPECASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNLESS.1
 CL-TEST::UNLESS.2
 CL-TEST::UNLESS.3
 CL-TEST::UNLESS.4
 CL-TEST::UNLESS.5
 CL-TEST::UNLESS.6
 CL-TEST::UNLESS.7
 CL-TEST::UNLESS.8
 CL-TEST::UNLESS.9
 CL-TEST::UNLESS.10
 CL-TEST::UNLESS.11
 CL-TEST::UNLESS.12
 CL-TEST::UNLESS.13
Test CL-TEST::UNLESS.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE UNLESS))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNLESS.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE UNLESS)) (QUOTE (UNLESS T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNLESS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE UNLESS)) (QUOTE (UNLESS T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNWIND-PROTECT.1
 CL-TEST::UNWIND-PROTECT.2
 CL-TEST::UNWIND-PROTECT.3
 CL-TEST::UNWIND-PROTECT.4
 CL-TEST::UNWIND-PROTECT.5
 CL-TEST::UNWIND-PROTECT.6
 CL-TEST::UNWIND-PROTECT.7
 CL-TEST::UNWIND-PROTECT.8
 CL-TEST::UNWIND-PROTECT.9
 CL-TEST::UNWIND-PROTECT.10
 CL-TEST::UNWIND-PROTECT.11
 CL-TEST::UNWIND-PROTECT.12
 CL-TEST::UNWIND-PROTECT.13
Test CL-TEST::VALUES-LIST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (VALUES-LIST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VALUES-LIST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (VALUES-LIST NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES-LIST.ERROR.3
 CL-TEST::VALUES-LIST.ERROR.4
 CL-TEST::VALUES-LIST.1
 CL-TEST::VALUES-LIST.2
 CL-TEST::VALUES-LIST.3
 CL-TEST::VALUES-LIST.4
Test CL-TEST::VALUES-LIST.5 failed
Form: (LET ((CL-TEST::X (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO (MIN 1000 (1- CALL-ARGUMENTS-LIMIT) (1- MULTIPLE-VALUES-LIMIT)) CL-TEST::COLLECT CL-TEST::I))) (CL-TEST::EQUALT CL-TEST::X (MULTIPLE-VALUE-LIST (VALUES-LIST CL-TEST::X))))
Expected value:
          T
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.0
 CL-TEST::VALUES.1
 CL-TEST::VALUES.2
 CL-TEST::VALUES.3
 CL-TEST::VALUES.4
 CL-TEST::VALUES.10
 CL-TEST::VALUES.15
 CL-TEST::VALUES.19
Test CL-TEST::VALUES.20 failed
Form: (LET ((CL-TEST::A T) (CL-TEST::B T) (CL-TEST::C T) (CL-TEST::D T) (CL-TEST::E T) (CL-TEST::F T)) (SETF (VALUES CL-TEST::A (VALUES CL-TEST::B CL-TEST::C) (VALUES CL-TEST::D) (VALUES CL-TEST::E CL-TEST::F)) (VALUES 0 1 2 3 4 5 6)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))
Expected value:
          (0 1 NIL 2 3 NIL)
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VALUES.21 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F) (SETF (VALUES CL-TEST::A (VALUES CL-TEST::B CL-TEST::C) (VALUES CL-TEST::D) (VALUES CL-TEST::E CL-TEST::F)) (VALUES 0 1 2 3 4 5 6)))
Expected value:
          0
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.A
 CL-TEST::VALUES.B
Test CL-TEST::VALUES.C failed
Form: (LET ((CL-TEST::X (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO (MIN 1000 (1- CALL-ARGUMENTS-LIMIT) (1- MULTIPLE-VALUES-LIMIT)) CL-TEST::COLLECT CL-TEST::I))) (CL-TEST::EQUALT CL-TEST::X (MULTIPLE-VALUE-LIST (APPLY (FUNCTION VALUES) CL-TEST::X))))
Expected value:
          T
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.ORDER.1
 CL-TEST::WHEN.1
 CL-TEST::WHEN.2
 CL-TEST::WHEN.3
 CL-TEST::WHEN.4
 CL-TEST::WHEN.5
 CL-TEST::WHEN.6
 CL-TEST::WHEN.7
 CL-TEST::WHEN.8
 CL-TEST::WHEN.9
 CL-TEST::WHEN.10
 CL-TEST::WHEN.11
Test CL-TEST::WHEN.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE WHEN))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WHEN.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE WHEN)) (QUOTE (WHEN T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WHEN.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE WHEN)) (QUOTE (WHEN T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DO.1
 CL-TEST::DO.2
 CL-TEST::DO.3
 CL-TEST::DO.4
 CL-TEST::DO.5
 CL-TEST::DO.6
 CL-TEST::DO.7
 CL-TEST::DO.8
 CL-TEST::DO.9
 CL-TEST::DO.10
 CL-TEST::DO.11
 CL-TEST::DO.12
 CL-TEST::DO.13
 CL-TEST::DO.14
 CL-TEST::DO.15
 CL-TEST::DO.16
 CL-TEST::DO.17
 CL-TEST::DO.18
 CL-TEST::DO.19
 CL-TEST::DO.20
 CL-TEST::DO.21
 CL-TEST::DO.22
 CL-TEST::DO.23
Test CL-TEST::DO.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DO))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DO)) (QUOTE (DO ((CL-TEST::I 0 (1+ CL-TEST::I))) ((= CL-TEST::I 5) (QUOTE CL-TEST::A))))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DO)) (QUOTE (DO ((CL-TEST::I 0 (1+ CL-TEST::I))) ((= CL-TEST::I 5) (QUOTE CL-TEST::A)))) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DO*.1
 CL-TEST::DO*.2
 CL-TEST::DO*.3
 CL-TEST::DO*.4
 CL-TEST::DO*.5
 CL-TEST::DO*.6
 CL-TEST::DO*.7
 CL-TEST::DO*.8
 CL-TEST::DO*.9
 CL-TEST::DO*.10
 CL-TEST::DO*.11
 CL-TEST::DO*.12
 CL-TEST::DO*.13
 CL-TEST::DO*.14
 CL-TEST::DO*.15
 CL-TEST::DO*.16
 CL-TEST::DO*.17
 CL-TEST::DO*.18
 CL-TEST::DO*.19
 CL-TEST::DO*.20
 CL-TEST::DO*.21
 CL-TEST::DO*.22
 CL-TEST::DO*.23
Test CL-TEST::DO*.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DO*))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DO*)) (QUOTE (DO* ((CL-TEST::I 0 (1+ CL-TEST::I))) ((= CL-TEST::I 5) (QUOTE CL-TEST::A))))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DO*)) (QUOTE (DO* ((CL-TEST::I 0 (1+ CL-TEST::I))) ((= CL-TEST::I 5) (QUOTE CL-TEST::A)))) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DOLIST.1
 CL-TEST::DOLIST.2
 CL-TEST::DOLIST.3
 CL-TEST::DOLIST.4
 CL-TEST::DOLIST.5
 CL-TEST::DOLIST.6
 CL-TEST::DOLIST.7
 CL-TEST::DOLIST.8
 CL-TEST::DOLIST.9
 CL-TEST::DOLIST.10
 CL-TEST::DOLIST.11
 CL-TEST::DOLIST.12
Test CL-TEST::DOLIST.13 failed
Form: (DOLIST (CL-TEST::E (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::E> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DOLIST.14 failed
Form: (LET ((CL-TEST::E 1)) (DOLIST (CL-TEST::E (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (SETF CL-TEST::E 2))) CL-TEST::E)
Expected value:
          1
Actual value:
          2 [Actual value: #<error during printing>

 NIL
 CL-TEST::DOLIST.15
 CL-TEST::DOLIST.16
Test CL-TEST::DOLIST.17 failed
Form: (LET ((CL-TEST::X :GOOD)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X :BAD)) (DOLIST (CL-TEST::E NIL CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)))))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::DOLIST.18
 CL-TEST::DOLIST.19
Test CL-TEST::DOLIST.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DOLIST))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DOLIST)) (QUOTE (DOLIST (CL-TEST::X NIL)))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DOLIST)) (QUOTE (DOLIST (CL-TEST::X NIL))) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DOTIMES.1
 CL-TEST::DOTIMES.2
 CL-TEST::DOTIMES.3
 CL-TEST::DOTIMES.3A
 CL-TEST::DOTIMES.4
 CL-TEST::DOTIMES.5
 CL-TEST::DOTIMES.6
 CL-TEST::DOTIMES.7
 CL-TEST::DOTIMES.8
 CL-TEST::DOTIMES.9
 CL-TEST::DOTIMES.10
 CL-TEST::DOTIMES.11
 CL-TEST::DOTIMES.12
 CL-TEST::DOTIMES.13
 CL-TEST::DOTIMES.14
 CL-TEST::DOTIMES.15
 CL-TEST::DOTIMES.16
 CL-TEST::DOTIMES.17
 CL-TEST::DOTIMES.17A
 CL-TEST::DOTIMES.18
 CL-TEST::DOTIMES.18A
 CL-TEST::DOTIMES.19
 CL-TEST::DOTIMES.20
 CL-TEST::DOTIMES.21
 CL-TEST::DOTIMES.22
 CL-TEST::DOTIMES.23
 CL-TEST::DOTIMES.23A
 CL-TEST::DOTIMES.24
 CL-TEST::DOTIMES.25
 CL-TEST::DOTIMES.26
Test CL-TEST::DOTIMES.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DOTIMES))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DOTIMES)) (QUOTE (DOTIMES (CL-TEST::I 10)))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DOTIMES)) (QUOTE (DOTIMES (CL-TEST::I 10))) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOOP.1
 CL-TEST::SLOOP.2
 CL-TEST::SLOOP.3
 CL-TEST::SLOOP.4
 CL-TEST::SLOOP.5
 CL-TEST::SLOOP.6
 CL-TEST::SLOOP.7
Test CL-TEST::LOOP.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LOOP))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LOOP)) (QUOTE (LOOP))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LOOP)) (QUOTE (LOOP)) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP-FINISH.ERROR.1 failed
Form: (BLOCK CL-TEST::DONE (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 10 DO (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (LET ((CL-TEST::MFN (MACRO-FUNCTION (QUOTE LOOP-FINISH) CL-TEST::ENV))) (COND ((NOT CL-TEST::MFN) (QUOTE (RETURN-FROM CL-TEST::DONE :FAIL1))) ((NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (FUNCALL (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::MFN)) PROGRAM-ERROR)))) (QUOTE (RETURN-FROM CL-TEST::DONE :FAIL2))) ((NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (FUNCALL (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::MFN) (QUOTE (LOOP-FINISH))) PROGRAM-ERROR)))) (QUOTE (RETURN-FROM CL-TEST::DONE :FAIL3))) ((NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (FUNCALL (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::MFN) (QUOTE (LOOP-FINISH)) NIL NIL) PROGRAM-ERROR)))) (QUOTE (RETURN-FROM CL-TEST::DONE :FAIL4))) (T (QUOTE (RETURN-FROM CL-TEST::DONE :GOOD))))))) (CL-TEST::%M))))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error Invalid arguments to function.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.1
 CL-TEST::LOOP.1.2
 CL-TEST::LOOP.1.3
 CL-TEST::LOOP.1.4
 CL-TEST::LOOP.1.5
 CL-TEST::LOOP.1.6
 CL-TEST::LOOP.1.7
Test CL-TEST::LOOP.1.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::FROM 1.0 CL-TEST::TO 5.0 COUNT CL-TEST::X)
Expected value:
          5
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.9
 CL-TEST::LOOP.1.10
 CL-TEST::LOOP.1.11
 CL-TEST::LOOP.1.12
Test CL-TEST::LOOP.1.13 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO 10 CL-TEST::FROM 1 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (1 3 5 7 9)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.14 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO 10 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 2 4 6 8 10)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.15
 CL-TEST::LOOP.1.16
 CL-TEST::LOOP.1.17
 CL-TEST::LOOP.1.18
 CL-TEST::LOOP.1.19
 CL-TEST::LOOP.1.20
Test CL-TEST::LOOP.1.21 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::FROM 0 CL-TEST::TO 5 CL-TEST::BY CL-TEST::1/2 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 CL-TEST::1/2 1 CL-TEST::3/2 2 CL-TEST::5/2 3 CL-TEST::7/2 4 CL-TEST::9/2 5)
Actual value:
          #<Unbound-Variable CL-TEST::1/2> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.22
 CL-TEST::LOOP.1.23
 CL-TEST::LOOP.1.24
 CL-TEST::LOOP.1.25
 CL-TEST::LOOP.1.26
Test CL-TEST::LOOP.1.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::ABOVE 6 CL-TEST::FROM 14 CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (14 12 10 8)
Actual value:
          #<Simple-Error CL-TEST::ABOVE is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::ABOVE 6 CL-TEST::FROM).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.28
 CL-TEST::LOOP.1.29
 CL-TEST::LOOP.1.30
 CL-TEST::LOOP.1.31
Test CL-TEST::LOOP.1.32 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C (CL-TEST::I 0)) (VALUES (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY (PROGN (SETQ CL-TEST::C (INCF CL-TEST::I)) 2) CL-TEST::BELOW (PROGN (SETQ CL-TEST::B (INCF CL-TEST::I)) 9) CL-TEST::FROM (PROGN (SETQ CL-TEST::A (INCF CL-TEST::I)) 0) CL-TEST::COLLECT CL-TEST::X) CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::I))
Expected value:
          (0 2 4 6 8)
          3
          2
          1
          3
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY (PROGN (SETQ CL-TEST::C (INCF CL-TEST::I)) 2) CL-TEST::BELOW).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.33
 CL-TEST::LOOP.1.34
 CL-TEST::LOOP.1.35
 CL-TEST::LOOP.1.36
Test CL-TEST::LOOP.1.37 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 3 CL-TEST::BELOW 20 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 3 6 9 12 15 18)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 3 CL-TEST::BELOW).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.38
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.44 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1))
Actual value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.45 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1))
Actual value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(5 1) evaluated to #C(5 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(5 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.46 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(5 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(5 1) #C(4 1) #C(3 1) #C(2 1) #C(1 1))
Actual value:
          (#C(5 1) #C(4 1) #C(3 1) #C(2 1) #C(1 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(10 1) evaluated to #C(10 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(10 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.47 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(10 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(10 1) #C(8 1) #C(6 1) #C(4 1) #C(2 1))
Actual value:
          (#C(10 1) #C(8 1) #C(6 1) #C(4 1) #C(2 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.48 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1))
Actual value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.49 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1))
Actual value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.50 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 10 CL-TEST::TO 15 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.51 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 10 CL-TEST::BELOW 15 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.52
Test CL-TEST::LOOP.1.53 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 0 CL-TEST::TO 10 CL-TEST::BY 2 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.54 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 1 CL-TEST::TO 4 CL-TEST::FOR NIL CL-TEST::FROM 1 CL-TEST::TO 10 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.55 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 5 CL-TEST::DOWNTO 0 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.56 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 5 CL-TEST::ABOVE 0 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.57
 CL-TEST::LOOP.1.58
 CL-TEST::LOOP.1.59
 CL-TEST::LOOP.1.60
 CL-TEST::LOOP.1.61
 CL-TEST::LOOP.1.62
 CL-TEST::LOOP.1.63
 CL-TEST::LOOP.1.64
 CL-TEST::LOOP.1.65
 CL-TEST::LOOP.2.1
 CL-TEST::LOOP.2.2
 CL-TEST::LOOP.2.3
 CL-TEST::LOOP.2.4
 CL-TEST::LOOP.2.5
 CL-TEST::LOOP.2.6
 CL-TEST::LOOP.2.7
 CL-TEST::LOOP.2.8
 CL-TEST::LOOP.2.9
 CL-TEST::LOOP.2.10
 CL-TEST::LOOP.2.11
 CL-TEST::LOOP.2.12
 CL-TEST::LOOP.2.13
Test CL-TEST::LOOP.2.14 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) CL-TEST::COLLECT CL-TEST::X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.2.15 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR (CL-TEST::X . CL-TEST::X) CL-TEST::IN (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) CL-TEST::COLLECT CL-TEST::X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR (CL-TEST::X . CL-TEST::X) CL-TEST::IN (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.2.16
 CL-TEST::LOOP.2.17
 CL-TEST::LOOP.2.18
 CL-TEST::LOOP.2.19
 CL-TEST::LOOP.2.20
 CL-TEST::LOOP.2.21
 CL-TEST::LOOP.2.22
 CL-TEST::LOOP.2.23
 CL-TEST::LOOP.2.24
 CL-TEST::LOOP.2.25
 CL-TEST::LOOP.2.26
 CL-TEST::LOOP.3.1
 CL-TEST::LOOP.3.2
 CL-TEST::LOOP.3.3
 CL-TEST::LOOP.3.4
 CL-TEST::LOOP.3.5
 CL-TEST::LOOP.3.6
 CL-TEST::LOOP.3.7
 CL-TEST::LOOP.3.8
 CL-TEST::LOOP.3.9
 CL-TEST::LOOP.3.10
 CL-TEST::LOOP.3.11
 CL-TEST::LOOP.3.12
 CL-TEST::LOOP.3.13
Test CL-TEST::LOOP.3.14 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::ON (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) CL-TEST::FOR CL-TEST::X CL-TEST::ON (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) CL-TEST::COLLECT CL-TEST::X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::ON (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.3.15 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR (CL-TEST::X . CL-TEST::X) CL-TEST::ON (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) CL-TEST::COLLECT CL-TEST::X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR (CL-TEST::X . CL-TEST::X) CL-TEST::ON (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.3.16
 CL-TEST::LOOP.3.17
 CL-TEST::LOOP.3.18
 CL-TEST::LOOP.3.19
 CL-TEST::LOOP.3.20
 CL-TEST::LOOP.3.21
 CL-TEST::LOOP.3.22
 CL-TEST::LOOP.3.23
 CL-TEST::LOOP.3.24
 CL-TEST::LOOP.3.25
 CL-TEST::LOOP.3.26
 CL-TEST::LOOP.3.27
 CL-TEST::LOOP.4.1
 CL-TEST::LOOP.4.2
 CL-TEST::LOOP.4.3
 CL-TEST::LOOP.4.4
 CL-TEST::LOOP.4.5
Test CL-TEST::LOOP.4.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR (CL-TEST::X . CL-TEST::X) = (QUOTE (NIL NIL NIL)) CL-TEST::UNTIL CL-TEST::X COUNT T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR (CL-TEST::X . CL-TEST::X) = (QUOTE (NIL NIL NIL)) CL-TEST::UNTIL).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.4.7 failed
Form: (CL-TEST:SIGNALS-ERROR (MACROEXPAND (QUOTE (LOOP CL-TEST::FOR (CL-TEST::X . CL-TEST::X) = (QUOTE (NIL NIL NIL)) CL-TEST::UNTIL CL-TEST::X COUNT T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR (CL-TEST::X . CL-TEST::X) = (QUOTE (NIL NIL NIL)) CL-TEST::UNTIL).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.4.8 failed
Form: (CL-TEST:SIGNALS-ERROR (MACROEXPAND (QUOTE (LOOP CL-TEST::FOR CL-TEST::X = (QUOTE (NIL NIL NIL)) CL-TEST::FOR CL-TEST::X = 1 COUNT CL-TEST::X CL-TEST::UNTIL T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR CL-TEST::X = 1 COUNT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.4.9
 CL-TEST::LOOP.4.10
 CL-TEST::LOOP.4.11
 CL-TEST::LOOP.4.12
 CL-TEST::LOOP.4.13
 CL-TEST::LOOP.5.1
 CL-TEST::LOOP.5.2
 CL-TEST::LOOP.5.3
 CL-TEST::LOOP.5.4
 CL-TEST::LOOP.5.5
 CL-TEST::LOOP.5.6
 CL-TEST::LOOP.5.7
 CL-TEST::LOOP.5.8
 CL-TEST::LOOP.5.10
 CL-TEST::LOOP.5.11
 CL-TEST::LOOP.5.12
 CL-TEST::LOOP.5.13
 CL-TEST::LOOP.5.14
 CL-TEST::LOOP.5.20
 CL-TEST::LOOP.5.21
 CL-TEST::LOOP.5.22
 CL-TEST::LOOP.5.23
 CL-TEST::LOOP.5.30
 CL-TEST::LOOP.5.32
 CL-TEST::LOOP.5.33
 CL-TEST::LOOP.5.34
 CL-TEST::LOOP.5.35
 CL-TEST::LOOP.5.36
 CL-TEST::LOOP.5.37
 CL-TEST::LOOP.5.38
 CL-TEST::LOOP.5.39
Test CL-TEST::LOOP.5.40 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 1 1 0 1 1 1 0 0)) :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::R = (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::ACROSS CL-TEST::V CL-TEST::COLLECT CL-TEST::X) UNLESS (EQUAL CL-TEST::R (QUOTE (0 0 1 1 0 1 1 1 0 0))) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::R))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.5.41 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 -1 -1 0 -1 -1 -1 0 0)) :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::R = (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::ACROSS CL-TEST::V CL-TEST::COLLECT CL-TEST::X) UNLESS (EQUAL CL-TEST::R (QUOTE (0 0 -1 -1 0 -1 -1 -1 0 0))) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::R))
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.5.42 failed
Form: (LET ((CL-TEST::VALS (QUOTE (0 0 1 1 0 1 1 1 0 0)))) (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::FVALS = (LOOP CL-TEST::FOR CL-TEST::V CL-TEST::IN CL-TEST::VALS CL-TEST::COLLECT (COERCE CL-TEST::V TYPE)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS CL-TEST::FVALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::R = (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::ACROSS CL-TEST::V CL-TEST::COLLECT CL-TEST::X) UNLESS (EQUAL CL-TEST::R CL-TEST::FVALS) CL-TEST::COLLECT (LIST CL-TEST::FVALS CL-TEST::R)))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Don't know how to coerce 0 to type (COMPLEX SHORT-FLOAT).
Available restarts:
0 ABORT: Return to READ-EVAL-PRINT loop.

10000DD80 C623FC SYSTEM.INTERNALS::MAP-BACKTRACE
10000DDE0 C6319C SYSTEM.INTERNALS::BACKTRACE
10000DE50 C5EE2C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000DE80 C5A52C INVOKE-DEBUGGER
10000DEB0 1A0081C ERROR
10000DEE0 177C73C COERCE
10000DF10 D2C74C SYSTEM.EVAL::EVAL-CONS
10000DF40 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000DF70 D2C74C SYSTEM.EVAL::EVAL-CONS
10000DFA0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000DFD0 D21DCC (SYSTEM.EVAL::SPECIAL-FORM SETQ)
10000E000 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E030 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E060 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E090 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E0C0 D2C74C SYSTEM.EVAL::EVAL-CONS
Enter a restart number or evaluate a form.
0] :up
Frame 1(10000DE80): #<Function INVOKE-DEBUGGER C5A52C>
0] :up
Frame 2(10000DEB0): #<Function ERROR 1A0081C>
0] :up
Frame 3(10000DEE0): #<Function COERCE 177C73C>
0] :up
Frame 4(10000DF10): #<Function SYSTEM.EVAL::EVAL-CONS D2C74C>
0] :up:u:vars
Frame 4(10000DF10): #<Function SYSTEM.EVAL::EVAL-CONS D2C74C>
Locals:
  SYSTEM.EVAL::FORM: (COERCE CL-TEST::V TYPE)
  SYSTEM.EVAL::ENV: ((:TAGBODY #<Function (LAMBDA :IN (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)) 40014DC> SYS.LOOP::NEXT-LOOP SYS.LOOP::END-LOOP) (:BLOCK NIL #<Function (LAMBDA :IN (SYSTEM.EVAL::SPECIAL-FORM BLOCK)) 400144C>) (:BINDING #:LOOP-LIST-TAIL-107811 (NIL)) (:BINDING #:LOOP-LIST-HEAD-107810 (NIL)) (:BINDING #:LOOP-LIST-107809 (0 1 1 0 1 1 1 0 0)) (:BINDING CL-TEST::V 0) (:TAGBODY #<Function (LAMBDA :IN (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)) 3FFF7AC> SYS.LOOP::NEXT-LOOP SYS.LOOP::END-LOOP) (:BLOCK NIL #<Function (LAMBDA :IN (SYSTEM.EVAL::SPECIAL-FORM BLOCK)) 3FFF74C>) (:BINDING #:LOOP-LIST-TAIL-107808 (NIL)) (:BINDING #:LOOP-LIST-HEAD-107807 (NIL)) (:BINDING CL-TEST::R NIL) (:BINDING CL-TEST::V NIL) (:BINDING CL-TEST::FVALS NIL) (:BINDING TYPE (COMPLEX SHORT-FLOAT)) (:BINDING #:LOOP-LIST-107806 (SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) (:BINDING CL-TEST::ETYPE SHORT-FLOAT) (:BINDING CL-TEST::VALS (0 0 1 1 0 1 1 1 0 0)))
  SYSTEM.EVAL::FN: NIL
0] :up
Frame 5(10000DF40): #<Function SYSTEM.EVAL::EVAL-IN-LEXENV D2CFDC>
0] :up
Frame 6(10000DF70): #<Function SYSTEM.EVAL::EVAL-CONS D2C74C>
0] :up
Frame 7(10000DFA0): #<Function SYSTEM.EVAL::EVAL-IN-LEXENV D2CFDC>
0] :up
Frame 8(10000DFD0): #<Function (SYSTEM.EVAL::SPECIAL-FORM SETQ) D21DCC>
0] :up
Frame 9(10000E000): #<Function SYSTEM.EVAL::EVAL-CONS D2C74C>
0] :up
Frame 10(10000E030): #<Function SYSTEM.EVAL::EVAL-IN-LEXENV D2CFDC>
0] :up
Frame 11(10000E060): #<Function SYSTEM.EVAL::EVAL-CONS D2C74C>
0] :up
Frame 12(10000E090): #<Function SYSTEM.EVAL::EVAL-IN-LEXENV D2CFDC>
0] :up
Frame 13(10000E0C0): #<Function SYSTEM.EVAL::EVAL-CONS D2C74C>
0] :up
Frame 14(10000E0F0): #<Function SYSTEM.EVAL::EVAL-IN-LEXENV D2CFDC>
0] (sys.int::backtrace)

10000DCF0 C623FC SYSTEM.INTERNALS::MAP-BACKTRACE
10000DD50 C6319C SYSTEM.INTERNALS::BACKTRACE
10000DD80 D2C74C SYSTEM.EVAL::EVAL-CONS
10000DDB0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000DDE0 3AE6FDC EVAL
10000DE50 C5EE2C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000DE80 C5A52C INVOKE-DEBUGGER
10000DEB0 1A0081C ERROR
10000DEE0 177C73C COERCE
10000DF10 D2C74C SYSTEM.EVAL::EVAL-CONS
10000DF40 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000DF70 D2C74C SYSTEM.EVAL::EVAL-CONS
10000DFA0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000DFD0 D21DCC (SYSTEM.EVAL::SPECIAL-FORM SETQ)
10000E000 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E030 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E060 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E090 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E0C0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E0F0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E150 D2770C (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)
10000E180 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E1B0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E1E0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E210 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E240 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E2A0 C8195C (SYSTEM.EVAL::SPECIAL-FORM BLOCK)
10000E2D0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E300 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E330 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E360 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E890 D0766C (SYSTEM.EVAL::SPECIAL-FORM LET*)
10000E8C0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E8F0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E920 D2C74C SYSTEM.EVAL::EVAL-CONS
10000E950 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000E980 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E9B0 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E9F0 C86E6C (SYSTEM.EVAL::SPECIAL-FORM LET)
10000EA20 D2C74C SYSTEM.EVAL::EVAL-CONS
10000EA50 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000EA80 D2C74C SYSTEM.EVAL::EVAL-CONS
10000EAB0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000EAE0 D21DCC (SYSTEM.EVAL::SPECIAL-FORM SETQ)
10000EB10 D2C74C SYSTEM.EVAL::EVAL-CONS
10000EB40 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000EB70 D2C74C SYSTEM.EVAL::EVAL-CONS
10000EBA0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000EC00 D2770C (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)
10000EC30 D2C74C SYSTEM.EVAL::EVAL-CONS
10000EC60 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000EC90 D2C74C SYSTEM.EVAL::EVAL-CONS
10000ECC0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000ECF0 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000ED50 C8195C (SYSTEM.EVAL::SPECIAL-FORM BLOCK)
10000ED80 D2C74C SYSTEM.EVAL::EVAL-CONS
10000EDB0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000EDE0 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000EE10 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F340 D0766C (SYSTEM.EVAL::SPECIAL-FORM LET*)
10000F370 D2C74C SYSTEM.EVAL::EVAL-CONS
10000F3A0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000F3D0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000F400 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000F430 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F460 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F4A0 C86E6C (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F4D0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000F500 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000F530 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F560 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F5A0 C86E6C (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F5D0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000F600 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000F630 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F660 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F6A0 C86E6C (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F6D0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000F700 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000F730 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F760 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F7A0 C86E6C (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F7D0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000F800 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000F830 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F860 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F8A0 C86E6C (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F8D0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000F900 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000F930 D2C74C SYSTEM.EVAL::EVAL-CONS
10000F960 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000F990 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F9C0 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000FA00 C86E6C (SYSTEM.EVAL::SPECIAL-FORM LET)
10000FA30 D2C74C SYSTEM.EVAL::EVAL-CONS
10000FA60 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000FA90 3AE6FDC EVAL
10000FB80 18C3A7C (LAMBDA :IN REGRESSION-TEST::DO-ENTRY)
10000FBE0 2C9AEC SYSTEM.INTERNALS::%CATCH
10000FC10 18C586C REGRESSION-TEST::DO-ENTRY
10000FC40 18DA47C REGRESSION-TEST::DO-ENTRIES
10000FC80 18D7B1C REGRESSION-TEST:DO-TESTS
10000FCB0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000FCE0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000FD10 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000FD40 D20F0C (SYSTEM.EVAL::SPECIAL-FORM PROGN)
10000FD70 D2C74C SYSTEM.EVAL::EVAL-CONS
10000FDA0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000FDD0 C7FF9C SYSTEM.EVAL::EVAL-PROGN-BODY
10000FE00 C8052C SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000FE30 C7DFBC SYSTEM.EVAL::INTERPRET-FUNCTION
10000FE60 C7512C SYSTEM.INTERNALS::%TIME
10000FE90 D2C74C SYSTEM.EVAL::EVAL-CONS
10000FEC0 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000FEF0 D2C74C SYSTEM.EVAL::EVAL-CONS
10000FF20 D2CFDC SYSTEM.EVAL::EVAL-IN-LEXENV
10000FF50 3AE6FDC EVAL
10000FFC0 177831C SYSTEM.INTERNALS::REPL
10000FFF0 266A9C SYSTEM.INTERNALS::REINITIALIZE-LISP
NIL
0] (throw '*in-test*)
Test CL-TEST::LOOP.5.43 failed
Form: (LET ((CL-TEST::VALS (QUOTE (0 0 1 1 0 1 1 1 0 0)))) (LOOP CL-TEST::FOR CL-TEST::ETYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ETYPE))) CL-TEST::FOR CL-TEST::FVALS = (LOOP CL-TEST::FOR CL-TEST::V CL-TEST::IN CL-TEST::VALS CL-TEST::COLLECT (COERCE CL-TEST::V TYPE)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS CL-TEST::FVALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::R = (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::ACROSS CL-TEST::V CL-TEST::COLLECT CL-TEST::X) UNLESS (EQUAL CL-TEST::R CL-TEST::FVALS) CL-TEST::COLLECT (LIST CL-TEST::FVALS CL-TEST::R)))
Expected value:
          NIL
Actual value:
          #<Simple-Error ((QUOTE *IN-TEST*)) does not match destructuring sublist (SYSTEM.EVAL::TAG SYSTEM.EVAL::RESULT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.5.44
 CL-TEST::LOOP.5.45
Test CL-TEST::LOOP.5.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR (CL-TEST::E . CL-TEST::E) CL-TEST::ACROSS (VECTOR (QUOTE (CL-TEST::X . CL-TEST::Y)) (QUOTE (CL-TEST::U . CL-TEST::V))) CL-TEST::COLLECT CL-TEST::E) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::E.
Current LOOP context: (CL-TEST::FOR (CL-TEST::E . CL-TEST::E) CL-TEST::ACROSS (VECTOR (QUOTE (CL-TEST::X . CL-TEST::Y)) (QUOTE (CL-TEST::U . CL-TEST::V))) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.5.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::ACROSS (VECTOR (QUOTE (CL-TEST::X . CL-TEST::Y)) (QUOTE (CL-TEST::U . CL-TEST::V))) CL-TEST::FOR CL-TEST::E CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::COLLECT CL-TEST::E) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::E.
Current LOOP context: (CL-TEST::FOR CL-TEST::E CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.5.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (MACROEXPAND (QUOTE (LOOP CL-TEST::FOR (CL-TEST::E . CL-TEST::E) CL-TEST::ACROSS (VECTOR (QUOTE (CL-TEST::X . CL-TEST::Y)) (QUOTE (CL-TEST::U . CL-TEST::V))) CL-TEST::COLLECT CL-TEST::E))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::E.
Current LOOP context: (CL-TEST::FOR (CL-TEST::E . CL-TEST::E) CL-TEST::ACROSS (VECTOR (QUOTE (CL-TEST::X . CL-TEST::Y)) (QUOTE (CL-TEST::U . CL-TEST::V))) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.5.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (MACROEXPAND (QUOTE (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::ACROSS (VECTOR (QUOTE (CL-TEST::X . CL-TEST::Y)) (QUOTE (CL-TEST::U . CL-TEST::V))) CL-TEST::FOR CL-TEST::E CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::COLLECT CL-TEST::E))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::E.
Current LOOP context: (CL-TEST::FOR CL-TEST::E CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.6.1
 CL-TEST::LOOP.6.2
 CL-TEST::LOOP.6.3
 CL-TEST::LOOP.6.4
 CL-TEST::LOOP.6.5
 CL-TEST::LOOP.6.6
 CL-TEST::LOOP.6.7
 CL-TEST::LOOP.6.8
 CL-TEST::LOOP.6.9
 CL-TEST::LOOP.6.10
 CL-TEST::LOOP.6.11
 CL-TEST::LOOP.6.12
 CL-TEST::LOOP.6.13
 CL-TEST::LOOP.6.14
 CL-TEST::LOOP.6.15
 CL-TEST::LOOP.6.16
 CL-TEST::LOOP.6.17
 CL-TEST::LOOP.6.18
Test CL-TEST::LOOP.6.19 failed
Form: (LOOP CL-TEST::FOR NIL CL-TEST::BEING THE CL-TEST::HASH-VALUES CL-TEST::OF CL-TEST::*LOOP.6.HASH.5* COUNT T)
Expected value:
          3
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.6.20 failed
Form: (LOOP CL-TEST::FOR NIL CL-TEST::BEING THE CL-TEST::HASH-KEYS CL-TEST::OF CL-TEST::*LOOP.6.HASH.5* COUNT T)
Expected value:
          3
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is (CL-TEST::A1 . CL-TEST::A2), which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL

[System seemed to get stuck after this and was killed]
