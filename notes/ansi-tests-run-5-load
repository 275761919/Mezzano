qemu: I believe we found a multiboot image!
multiboot: mh_header_addr = 0x200138
multiboot: mh_load_addr = 0x200000
multiboot: mh_load_end_addr = 0x3400000
multiboot: mh_bss_end_addr = 0x8c00000
qemu: loading multiboot kernel (0x8a00000 bytes) at 0x200000
multiboot loading module: init.llf
mod00: 0000000008c01000 - 0000000008c0ea62
mod_start: 0x14da0b000
mod_end:   0x14da18a62
  cmdline: 0000000008c00020
multiboot loading module: system/file-compiler.llf
mod01: 0000000008c0f000 - 0000000008c25482
mod_start: 0x14da19000
mod_end:   0x14da2f482
  cmdline: 0000000008c00029
multiboot: mh_entry_addr = 0x200a1c
           mb_buf_phys   = 0000000000200000
           mod_start     = 0000000008c01000
           mb_mods_count = 2
DMA bump pointer at 8008C26000, region length 389902336.
Scanning PCI bus...
00:0:0: 8086 1237 "Intel Corporation" "440FX - 82441FX PMC [Natoma]"
00:1:0: 8086 7000 "Intel Corporation" "82371SB PIIX3 ISA [Natoma/Triton II]"
00:1:1: 8086 7010 "Intel Corporation" "82371SB PIIX3 IDE [Natoma/Triton II]"
00:1:3: 8086 7113 "Intel Corporation" "82371AB/EB/MB PIIX4 ACPI"
00:2:0: 1234 1111 NIL NIL
00:3:0: 1AF4 1000 "Red Hat, Inc" "Virtio network device"
00:4:0: 1274 5000 "Ensoniq" "ES1370 [AudioPCI]"
Registering drivers...
Virtio-net device at #<Pci-Device 00:3:0> has features 711F8060
Virtqueue 0 has size 256. Computed size is 12288
Virtqueue allocated at 8C26000
Virtqueue 1 has size 256. Computed size is 12288
Virtqueue allocated at 8C29000
Mac is 52:54:00:12:34:56
RX buffer at 08C2C000
TX buffer at 08C38000
Hello, world.
Loading module "init.llf".
Loading module "system/file-compiler.llf".
Bochs VBE adaptor present. Version 4
 Maximum resolution: 1600x1200x32
 8MB of display memory available.
 Framebuffer at #xF0000000
Detected :MF2-KEYBOARD on PS/2 :KEY port.
Detected :STANDARD-MOUSE on PS/2 :AUX port.

*OK
SYS.INT> (load "tmp3.lisp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS/tmp3.lisp C0917037>
;; Loading (IN-PACKAGE :SYS.INT)
;; Loading (SETF *DEFAULT-PATHNAME-DEFAULTS* (PARSE-NAMESTRING (QUOTE "/Users/henry/Documents/LispOS-home/source/ansi-tests/")))
;; Loading (LOAD "/Users/henry/Documents/LispOS/tmp4.llf")
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS/tmp4.llf C09496B7>
;; Loading (DEFUN INTEGER-DECODE-FLOAT (X) (VALUES 0 0 0))
;; Loading (DEFUN FLOAT-RADIX (X) 2)
;; Loading (DEFUN RATIONAL (X) X)
;; Loading (IN-PACKAGE :CLOS)
;; Loading (DEFUN ENSURE-CLASS (NAME &REST ALL-KEYS &KEY (METACLASS THE-CLASS-STANDARD-CLASS) &ALLOW-OTHER-KEYS) (SETF (FIND-CLASS NAME NIL) NIL) (IF (FIND-CLASS NAME NIL) (ERROR "Can't redefine the class named ~S." NAME) (LET ((CLASS (APPLY (COND ((EQ METACLASS THE-CLASS-STANDARD-CLASS) (FUNCTION MAKE-INSTANCE-STANDARD-CLASS)) ((EQ METACLASS THE-CLASS-FUNCALLABLE-STANDARD-CLASS) (FUNCTION MAKE-INSTANCE-FUNCALLABLE-STANDARD-CLASS)) (T (FUNCTION MAKE-INSTANCE))) METACLASS :NAME NAME ALL-KEYS))) (SETF (FIND-CLASS NAME) CLASS) CLASS)))
;; Loading (IN-PACKAGE :SYS.INT)
;; Loading (DEFUN DRIBBLE (&OPTIONAL PATHNAME) (COND (PATHNAME (WITH-OPEN-FILE (DRIBBLE-STREAM PATHNAME :DIRECTION :OUTPUT :IF-EXISTS :APPEND :IF-DOES-NOT-EXIST :CREATE) (LET ((*STANDARD-OUTPUT* (MAKE-BROADCAST-STREAM *STANDARD-OUTPUT* DRIBBLE-STREAM)) (*ERROR-OUTPUT* (MAKE-BROADCAST-STREAM *ERROR-OUTPUT* DRIBBLE-STREAM)) (*STANDARD-INPUT* (MAKE-ECHO-STREAM *STANDARD-INPUT* DRIBBLE-STREAM))) (CATCH (QUOTE END-OF-DRIBBLE) (REPL))))) (T (THROW (QUOTE END-OF-DRIBBLE) (VALUES)))))
T
SYS.INT> (in-package "d(in-package "cl-user")(in-package "cl-user"(in-package "cl-user(in-package "cl-use(in-package "cl-us(in-package "cl-u(in-package "cl-(in-package "cl(in-package "c(in-package "(in-package :cl-user)
#<Package "Cl-User">
CL-USER> (l(time (load "doit.lsi(time (load "doit.lsp"))
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/doit.lsp C0AB6387>
;; Loading (LET* ((FN (COMPILE-FILE-PATHNAME "doit.lsp")) (TYPE (PATHNAME-TYPE FN)) (DIR-PATHNAME (MAKE-PATHNAME :NAME :WILD :TYPE TYPE)) (FILES (DIRECTORY DIR-PATHNAME))) (ASSERT TYPE) (ASSERT (NOT (STRING-EQUAL TYPE "lsp"))) (MAPC (FUNCTION DELETE-FILE) FILES))
;; Loading (LOAD "gclload1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/gclload1.lsp C0AEF0A7>
;; Loading (LET (*LOAD-VERBOSE* *LOAD-PRINT* *COMPILE-VERBOSE* *COMPILE-PRINT*) (LOAD "compile-and-load.lsp"))
;; Loading (LET (*LOAD-VERBOSE* *LOAD-PRINT* *COMPILE-VERBOSE* *COMPILE-PRINT*) (LOAD "rt-package.lsp") (COMPILE-AND-LOAD "rt.lsp") (LOAD "cl-test-package.lsp") (IN-PACKAGE :CL-TEST) (COMPILE-AND-LOAD "ansi-aux-macros.lsp") (HANDLER-BIND NIL (LOAD "universe.lsp")) (COMPILE-AND-LOAD "random-aux.lsp") (COMPILE-AND-LOAD "ansi-aux.lsp") (LOAD "cl-symbol-names.lsp") (LOAD "notes.lsp"))
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/rt.lsp".
;; Compiling form (IN-PACKAGE :REGRESSION-TEST).
;; Compiling form (DECLAIM (FTYPE (FUNCTION (T) T) GET-ENTRY EXPANDED-EVAL DO-ENTRIES)).
;; Compiling form (DECLAIM (TYPE LIST *ENTRIES*)).
;; Compiling form (DECLAIM (FTYPE (FUNCTION (T &REST T) T) REPORT-ERROR)).
;; Compiling form (DECLAIM (FTYPE (FUNCTION (T &OPTIONAL T) T) DO-ENTRY)).
;; Compiling form (DEFVAR *TEST* NIL "Current test name").
;; Compiling form (DEFVAR *DO-TESTS-WHEN-DEFINED* NIL).
;; Compiling form (DEFVAR *ENTRIES* (LIST NIL) "Test database.  Has a leading dummy cell that does not contain an entry.").
;; Compiling form (DEFVAR *ENTRIES-TAIL* *ENTRIES* "Tail of the *entries* list").
;; Compiling form (DEFVAR *ENTRIES-TABLE* (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL)) "Map the names of entries to the cons cell in *entries* that precedes the one whose car is the entry.").
;; Compiling form (DEFVAR *IN-TEST* NIL "Used by TEST").
;; Compiling form (DEFVAR *DEBUG* NIL "For debugging").
;; Compiling form (DEFVAR *CATCH-ERRORS* T "When true, causes errors in a test to be caught.").
;; Compiling form (DEFVAR *PRINT-CIRCLE-ON-FAILURE* NIL "Failure reports are printed with *PRINT-CIRCLE* bound to this value.").
;; Compiling form (DEFVAR *COMPILE-TESTS* NIL "When true, compile the tests before running them.").
;; Compiling form (DEFVAR *EXPANDED-EVAL* NIL "When true, convert the tests into a form that is less likely to have compiler optimizations.").
;; Compiling form (DEFVAR *OPTIMIZATION-SETTINGS* (QUOTE ((SAFETY 3)))).
;; Compiling form (DEFVAR *FAILED-TESTS* NIL "After DO-TESTS, becomes the list of names of tests that have failed").
;; Compiling form (DEFVAR *PASSED-TESTS* NIL "After DO-TESTS, becomes the list of names of tests that have passed").
;; Compiling form (DEFVAR *EXPECTED-FAILURES* NIL "A list of test names that are expected to fail.").
;; Compiling form (DEFVAR *NOTES* (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)) "A mapping from names of notes to note objects.").
;; Compiling form (DEFSTRUCT (ENTRY (:CONC-NAME NIL)) PEND NAME PROPS FORM VALS).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFSTRUCT NOTE NAME CONTENTS DISABLED).
;; Compiling form (DEFMACRO DEFN (ENTRY) (LET ((VAR (GENSYM))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR) (SYSTEM.INTERNALS::BQ-COMMA ENTRY))) (LIST* (NAME (SYSTEM.INTERNALS::BQ-COMMA VAR)) (FORM (SYSTEM.INTERNALS::BQ-COMMA VAR)) (VALS (SYSTEM.INTERNALS::BQ-COMMA VAR))))))).
;; Compiling form (DEFUN ENTRY-NOTES (ENTRY) (LET* ((PROPS (PROPS ENTRY)) (NOTES (GETF PROPS :NOTES))) (IF (LISTP NOTES) NOTES (LIST NOTES)))).
;; Compiling form (DEFUN HAS-DISABLED-NOTE (ENTRY) (LET ((NOTES (ENTRY-NOTES ENTRY))) (LOOP FOR N IN NOTES FOR NOTE = (IF (NOTE-P N) N (GETHASH N *NOTES*)) THEREIS (AND NOTE (NOTE-DISABLED NOTE))))).
;; Compiling form (DEFUN HAS-NOTE (ENTRY NOTE) (UNLESS (NOTE-P NOTE) (LET ((NEW-NOTE (GETHASH NOTE *NOTES*))) (SETF NOTE NEW-NOTE))) (AND NOTE (NOT (NOT (MEMBER NOTE (ENTRY-NOTES ENTRY)))))).
;; Compiling form (DEFUN PENDING-TESTS NIL (LOOP FOR ENTRY IN (CDR *ENTRIES*) WHEN (AND (PEND ENTRY) (NOT (HAS-DISABLED-NOTE ENTRY))) COLLECT (NAME ENTRY))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN REM-ALL-TESTS NIL (SETQ *ENTRIES* (LIST NIL)) (SETQ *ENTRIES-TAIL* *ENTRIES*) (CLRHASH *ENTRIES-TABLE*) NIL).
;; Compiling form (DEFUN REM-TEST (&OPTIONAL (NAME *TEST*)) (LET ((PRED (GETHASH NAME *ENTRIES-TABLE*))) (WHEN PRED (IF (NULL (CDDR PRED)) (SETQ *ENTRIES-TAIL* PRED) (SETF (GETHASH (NAME (CADDR PRED)) *ENTRIES-TABLE*) PRED)) (SETF (CDR PRED) (CDDR PRED)) (REMHASH NAME *ENTRIES-TABLE*) NAME))).
;; Compiling form (DEFUN GET-TEST (&OPTIONAL (NAME *TEST*)) (DEFN (GET-ENTRY NAME))).
;; Compiling form (DEFUN GET-ENTRY (NAME) (LET ((ENTRY (CADR (GETHASH NAME *ENTRIES-TABLE*)))) (WHEN (NULL ENTRY) (REPORT-ERROR T "~%No test with name ~:@(~S~)." NAME)) ENTRY)).
;; Compiling form (DEFMACRO DEFTEST (NAME &REST BODY) (LET* ((P BODY) (PROPERTIES (LOOP WHILE (KEYWORDP (FIRST P)) UNLESS (CADR P) DO (ERROR "Poorly formed deftest: ~A~%" (LIST* (QUOTE DEFTEST) NAME BODY)) APPEND (LIST (POP P) (POP P)))) (FORM (POP P)) (VALS P)) (SYSTEM.INTERNALS::BACKQUOTE (ADD-ENTRY (MAKE-ENTRY :PEND T :NAME (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)) :PROPS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA PROPERTIES)) :FORM (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FORM)) :VALS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA VALS))))))).
;; Compiling form (DEFUN ADD-ENTRY (ENTRY) (SETQ ENTRY (COPY-ENTRY ENTRY)) (LET* ((PRED (GETHASH (NAME ENTRY) *ENTRIES-TABLE*))) (COND (PRED (SETF (CADR PRED) ENTRY) (REPORT-ERROR NIL "Redefining test ~:@(~S~)" (NAME ENTRY))) (T (SETF (GETHASH (NAME ENTRY) *ENTRIES-TABLE*) *ENTRIES-TAIL*) (SETF (CDR *ENTRIES-TAIL*) (CONS ENTRY NIL)) (SETF *ENTRIES-TAIL* (CDR *ENTRIES-TAIL*))))) (WHEN *DO-TESTS-WHEN-DEFINED* (DO-ENTRY ENTRY)) (SETQ *TEST* (NAME ENTRY))).
;; Compiling form (DEFUN REPORT-ERROR (ERROR? &REST ARGS) (COND (*DEBUG* (APPLY (FUNCTION FORMAT) T ARGS) (IF ERROR? (THROW (QUOTE *DEBUG*) NIL))) (ERROR? (APPLY (FUNCTION ERROR) ARGS)) (T (APPLY (FUNCTION WARN) ARGS))) NIL).
;; Compiling form (DEFUN DO-TEST (&OPTIONAL (NAME *TEST*) &REST KEY-ARGS) (FLET ((%PARSE-KEY-ARGS (&KEY ((:CATCH-ERRORS *CATCH-ERRORS*) *CATCH-ERRORS*) ((:COMPILE *COMPILE-TESTS*) *COMPILE-TESTS*)) (DO-ENTRY (GET-ENTRY NAME)))) (APPLY (FUNCTION %PARSE-KEY-ARGS) KEY-ARGS))).
;; Compiling form (DEFUN MY-AREF (A &REST ARGS) (APPLY (FUNCTION AREF) A ARGS)).
;; Compiling form (DEFUN MY-ROW-MAJOR-AREF (A INDEX) (ROW-MAJOR-AREF A INDEX)).
;; Compiling form (DEFUN EQUALP-WITH-CASE (X Y) "Like EQUALP, but doesn't do case conversion of characters.
   Currently doesn't work on arrays of dimension > 2." (COND ((EQ X Y) T) ((CONSP X) (AND (CONSP Y) (EQUALP-WITH-CASE (CAR X) (CAR Y)) (EQUALP-WITH-CASE (CDR X) (CDR Y)))) ((AND (TYPEP X (QUOTE ARRAY)) (= (ARRAY-RANK X) 0)) (EQUALP-WITH-CASE (MY-AREF X) (MY-AREF Y))) ((TYPEP X (QUOTE VECTOR)) (AND (TYPEP Y (QUOTE VECTOR)) (LET ((X-LEN (LENGTH X)) (Y-LEN (LENGTH Y))) (AND (EQL X-LEN Y-LEN) (LOOP FOR I FROM 0 BELOW X-LEN FOR E1 = (MY-AREF X I) FOR E2 = (MY-AREF Y I) ALWAYS (EQUALP-WITH-CASE E1 E2)))))) ((AND (TYPEP X (QUOTE ARRAY)) (TYPEP Y (QUOTE ARRAY)) (NOT (EQUAL (ARRAY-DIMENSIONS X) (ARRAY-DIMENSIONS Y)))) NIL) ((TYPEP X (QUOTE ARRAY)) (AND (TYPEP Y (QUOTE ARRAY)) (LET ((SIZE (ARRAY-TOTAL-SIZE X))) (LOOP FOR I FROM 0 BELOW SIZE ALWAYS (EQUALP-WITH-CASE (MY-ROW-MAJOR-AREF X I) (MY-ROW-MAJOR-AREF Y I)))))) ((TYPEP X (QUOTE PATHNAME)) (EQUAL X Y)) (T (EQL X Y)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN DO-ENTRY (ENTRY &OPTIONAL (S *STANDARD-OUTPUT*)) (ASSERT (SYSTEM.INTERNALS::%INTERRUPT-STATE)) (CATCH (QUOTE *IN-TEST*) (SETQ *TEST* (NAME ENTRY)) (SETF (PEND ENTRY) T) (LET* ((*IN-TEST* T) (ABORTED NIL) R) (BLOCK ABORTED (SETF R (FLET ((%DO NIL (HANDLER-BIND NIL (COND (*COMPILE-TESTS* (MULTIPLE-VALUE-LIST (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN *OPTIMIZATION-SETTINGS*))) (SYSTEM.INTERNALS::BQ-COMMA (FORM ENTRY)))))))) (*EXPANDED-EVAL* (MULTIPLE-VALUE-LIST (EXPANDED-EVAL (FORM ENTRY)))) (T (MULTIPLE-VALUE-LIST (EVAL (FORM ENTRY)))))))) (IF *CATCH-ERRORS* (HANDLER-BIND ((STYLE-WARNING (FUNCTION (LAMBDA (C) (IF (HAS-NOTE ENTRY :DO-NOT-MUFFLE-WARNINGS) C (MUFFLE-WARNING C))))) (ERROR (FUNCTION (LAMBDA (C) (SETF ABORTED T) (SETF R (LIST C)) (RETURN-FROM ABORTED NIL))))) (%DO)) (%DO))))) (SETF (PEND ENTRY) (OR ABORTED (NOT (EQUALP-WITH-CASE R (VALS ENTRY))))) (WHEN (PEND ENTRY) (LET ((*PRINT-CIRCLE* *PRINT-CIRCLE-ON-FAILURE*)) (FORMAT S "~&Test ~:@(~S~) failed~%Form: ~S~%Expected value~P:~%" *TEST* (FORM ENTRY) (LENGTH (VALS ENTRY))) (DOLIST (V (VALS ENTRY)) (FORMAT S "~10t~S~%" V)) (HANDLER-CASE (PROGN (FORMAT S "Actual value~P:~%" (LENGTH R)) (DOLIST (V R) (FORMAT S "~10t~S~:[~; [~2:*~A]~]~%" V (TYPEP V (QUOTE CONDITION))))) (ERROR NIL (FORMAT S "Actual value: #<error during printing>~%"))) (FINISH-OUTPUT S))))) (WHEN (NOT (PEND ENTRY)) *TEST*)).
;; Compiling form (DEFUN EXPANDED-EVAL (FORM) "Split off top level of a form and eval separately.  This reduces the chance that
   compiler optimizations will fold away runtime computation." (IF (NOT (CONSP FORM)) (EVAL FORM) (LET ((OP (CAR FORM))) (COND ((EQ OP (QUOTE LET)) (LET* ((BINDINGS (LOOP FOR B IN (CADR FORM) COLLECT (IF (CONSP B) B (LIST B NIL)))) (VARS (MAPCAR (FUNCTION CAR) BINDINGS)) (BINDING-FORMS (MAPCAR (FUNCTION CADR) BINDINGS))) (APPLY (THE FUNCTION (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (SYSTEM.INTERNALS::BQ-COMMA VARS) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDDR FORM)))))) (MAPCAR (FUNCTION EVAL) BINDING-FORMS)))) ((AND (EQ OP (QUOTE LET*)) (CADR FORM)) (LET* ((BINDINGS (LOOP FOR B IN (CADR FORM) COLLECT (IF (CONSP B) B (LIST B NIL)))) (VARS (MAPCAR (FUNCTION CAR) BINDINGS)) (BINDING-FORMS (MAPCAR (FUNCTION CADR) BINDINGS))) (FUNCALL (THE FUNCTION (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA ((SYSTEM.INTERNALS::BQ-COMMA (CAR VARS)) &AUX (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDR BINDINGS))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDDR FORM)))))) (EVAL (CAR BINDING-FORMS))))) ((EQ OP (QUOTE PROGN)) (LOOP FOR E ON (CDR FORM) DO (IF (NULL (CDR E)) (RETURN (EVAL (CAR E))) (EVAL (CAR E))))) ((AND (SYMBOLP OP) (FBOUNDP OP) (NOT (MACRO-FUNCTION OP)) (NOT (SPECIAL-OPERATOR-P OP))) (APPLY (SYMBOL-FUNCTION OP) (MAPCAR (FUNCTION EVAL) (CDR FORM)))) (T (EVAL FORM)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN CONTINUE-TESTING NIL (IF *IN-TEST* (THROW (QUOTE *IN-TEST*) NIL) (DO-ENTRIES *STANDARD-OUTPUT*))).
;; Compiling form (DEFUN DO-TESTS (&KEY (OUT *STANDARD-OUTPUT*) ((:CATCH-ERRORS *CATCH-ERRORS*) *CATCH-ERRORS*) ((:COMPILE *COMPILE-TESTS*) *COMPILE-TESTS*)) (SETQ *FAILED-TESTS* NIL *PASSED-TESTS* NIL) (DOLIST (ENTRY (CDR *ENTRIES*)) (SETF (PEND ENTRY) T)) (IF (STREAMP OUT) (DO-ENTRIES OUT) (WITH-OPEN-FILE (STREAM OUT :DIRECTION :OUTPUT) (DO-ENTRIES STREAM)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN DO-ENTRIES (S) (FORMAT S "~&Doing ~A pending test~:P ~
             of ~A tests total.~%" (COUNT T (THE LIST (CDR *ENTRIES*)) :KEY (FUNCTION PEND)) (LENGTH (CDR *ENTRIES*))) (FINISH-OUTPUT S) (DOLIST (ENTRY (CDR *ENTRIES*)) (WHEN (AND (PEND ENTRY) (NOT (HAS-DISABLED-NOTE ENTRY))) (LET ((SUCCESS? (DO-ENTRY ENTRY S))) (IF SUCCESS? (PUSH (NAME ENTRY) *PASSED-TESTS*) (PUSH (NAME ENTRY) *FAILED-TESTS*)) (FORMAT S "~@[~<~%~:; ~:@(~S~)~>~]" SUCCESS?)) (FINISH-OUTPUT S))) (LET ((PENDING (PENDING-TESTS)) (EXPECTED-TABLE (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL)))) (DOLIST (EX *EXPECTED-FAILURES*) (SETF (GETHASH EX EXPECTED-TABLE) T)) (LET ((NEW-FAILURES (LOOP FOR PEND IN PENDING UNLESS (GETHASH PEND EXPECTED-TABLE) COLLECT PEND))) (IF (NULL PENDING) (FORMAT S "~&No tests failed.") (PROGN (FORMAT T "~&~A out of ~A total tests failed: ~%(~{~a~^~%~})" (LENGTH PENDING) (LENGTH (CDR *ENTRIES*)) PENDING) (IF (NULL NEW-FAILURES) (FORMAT S "~&No unexpected failures.") (WHEN *EXPECTED-FAILURES* (FORMAT S "~&~A unexpected failures: ~
                   ~:@(~{~<~%   ~1:;~S~>~
                         ~^, ~}~)." (LENGTH NEW-FAILURES) NEW-FAILURES))) (WHEN *EXPECTED-FAILURES* (LET ((PENDING-TABLE (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL)))) (DOLIST (EX PENDING) (SETF (GETHASH EX PENDING-TABLE) T)) (LET ((UNEXPECTED-SUCCESSES (LOOP :FOR EX :IN *EXPECTED-FAILURES* :UNLESS (GETHASH EX PENDING-TABLE) :COLLECT EX))) (IF UNEXPECTED-SUCCESSES (FORMAT T "~&~:D unexpected successes: ~
                   ~:@(~{~<~%   ~1:;~S~>~
                         ~^, ~}~)." (LENGTH UNEXPECTED-SUCCESSES) UNEXPECTED-SUCCESSES) (FORMAT T "~&No unexpected successes."))))))) (FINISH-OUTPUT S) (NULL PENDING)))).
;; Compiling form (DEFMACRO DEFNOTE (NAME CONTENTS &OPTIONAL DISABLED) (SYSTEM.INTERNALS::BACKQUOTE (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (LET ((NOTE (MAKE-NOTE :NAME (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)) :CONTENTS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CONTENTS)) :DISABLED (QUOTE (SYSTEM.INTERNALS::BQ-COMMA DISABLED))))) (SETF (GETHASH (NOTE-NAME NOTE) *NOTES*) NOTE) NOTE)))).
;; Compiling form (DEFUN DISABLE-NOTE (N) (LET ((NOTE (IF (NOTE-P N) N (SETF N (GETHASH N *NOTES*))))) (UNLESS NOTE (ERROR "~A is not a note or note name." N)) (SETF (NOTE-DISABLED NOTE) T) NOTE)).
;; Compiling form (DEFUN ENABLE-NOTE (N) (LET ((NOTE (IF (NOTE-P N) N (SETF N (GETHASH N *NOTES*))))) (UNLESS NOTE (ERROR "~A is not a note or note name." N)) (SETF (NOTE-DISABLED NOTE) NIL) NOTE)).
;; Compiling form (DEFUN DO-EXTENDED-TESTS (&KEY (TESTS *PASSED-TESTS*) (COUNT NIL) ((:CATCH-ERRORS *CATCH-ERRORS*) *CATCH-ERRORS*) ((:COMPILE *COMPILE-TESTS*) *COMPILE-TESTS*)) "Execute randomly chosen tests from TESTS until one fails or until
   COUNT is an integer and that many tests have been executed." (LET ((TEST-VECTOR (COERCE TESTS (QUOTE SIMPLE-VECTOR)))) (LET ((N (LENGTH TEST-VECTOR))) (WHEN (= N 0) (ERROR "Must provide at least one test.")) (LOOP FOR I FROM 0 FOR NAME = (SVREF TEST-VECTOR (RANDOM N)) UNTIL (EQL I COUNT) DO (PRINT NAME) UNLESS (DO-TEST NAME) RETURN (VALUES NAME (1+ I)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/ansi-aux-macros.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DECLAIM (OPTIMIZE (SAFETY 3))).
;; Compiling form (DEFMACRO HANDLER-CASE (FORM &REST CASES) (SYSTEM.INTERNALS::BACKQUOTE (LET NIL (COMMON-LISP:HANDLER-CASE (SYSTEM.INTERNALS::BQ-COMMA FORM) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CASES))))).
;; Compiling form (DEFMACRO HANDLER-BIND (HANDLERS &REST BODY) (SYSTEM.INTERNALS::BACKQUOTE (LET NIL (COMMON-LISP:HANDLER-BIND (SYSTEM.INTERNALS::BQ-COMMA HANDLERS) (NORMALLY (PROGN (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN BODY))))))).
;; Compiling form (DEFVAR *SHOULD-ALWAYS-BE-TRUE* T).
;; Compiling form (DECLAIM (NOTINLINE SHOULD-NEVER-BE-CALLED)).
;; Compiling form (DEFUN SHOULD-NEVER-BE-CALLED NIL NIL).
;; Compiling form (DEFMACRO NORMALLY (FORM &OPTIONAL (DEFAULT-FORM (QUOTE (SHOULD-NEVER-BE-CALLED)))) (SYSTEM.INTERNALS::BACKQUOTE (IF *SHOULD-ALWAYS-BE-TRUE* (SYSTEM.INTERNALS::BQ-COMMA FORM) (SYSTEM.INTERNALS::BQ-COMMA DEFAULT-FORM)))).
;; Compiling form (DEFPARAMETER *REPORT-AND-IGNORE-ERRORS-BREAK* NIL "When true, REPORT-AND-IGNORE-ERRORS breaks instead of discarding the error condition.").
;; Compiling form (DEFMACRO REPORT-AND-IGNORE-ERRORS (&BODY BODY) (SYSTEM.INTERNALS::BACKQUOTE (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (PROGN (HANDLER-CASE (PROGN (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN BODY)) (ERROR (CONDITION) (PRINC CONDITION) (TERPRI) (WHEN *REPORT-AND-IGNORE-ERRORS-BREAK* (BREAK)) (VALUES NIL CONDITION))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/random-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DECLAIM (SPECIAL +STANDARD-CHARS+ *CL-SYMBOLS-VECTOR*)).
;; Compiling form (DEFVAR *MAXIMUM-RANDOM-INT-BITS* (MAX 36 (1+ (INTEGER-LENGTH MOST-POSITIVE-FIXNUM)))).
;; Compiling form (DEFUN RANDOM-FROM-SEQ (SEQ) "Generate a random member of a sequence." (LET ((LEN (LENGTH SEQ))) (ASSERT (> LEN 0)) (ELT SEQ (RANDOM LEN)))).
;; Compiling form (DEFMACRO RANDOM-CASE (&BODY CASES) (LET ((LEN (LENGTH CASES))) (ASSERT (> LEN 0)) (SYSTEM.INTERNALS::BACKQUOTE (CASE (RANDOM (SYSTEM.INTERNALS::BQ-COMMA LEN)) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR I FROM 0 FOR E IN CASES COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA I) (SYSTEM.INTERNALS::BQ-COMMA E))))) (T (ERROR "Can't happen?! (in random-case)~%")))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMACRO RCASE (&BODY CASES) "Usage: (RCASE (<weight> <form>+)+), where <weight> is a positive real
   indicating the relative probability of executing the associated implicit
   progn." (ASSERT CASES) (LET* ((WEIGHTS (MAPCAR (FUNCTION CAR) CASES)) (CUMULATIVE-WEIGHTS (LET ((SUM 0)) (LOOP FOR W IN WEIGHTS COLLECT (INCF SUM W)))) (TOTAL (CAR (LAST CUMULATIVE-WEIGHTS))) (R (GENSYM))) (ASSERT (EVERY (FUNCTION PLUSP) WEIGHTS)) (WHEN (TYPEP TOTAL (QUOTE RATIO)) (SETF TOTAL (COERCE TOTAL (QUOTE DOUBLE-FLOAT)))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA R) (RANDOM (SYSTEM.INTERNALS::BQ-COMMA TOTAL)))) (COND (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR CASE IN (BUTLAST CASES) FOR CW IN CUMULATIVE-WEIGHTS COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((< (SYSTEM.INTERNALS::BQ-COMMA R) (SYSTEM.INTERNALS::BQ-COMMA CW)) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDR CASE)))))) (T (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDAR (LAST CASES))))))))).
;; Compiling form (DEFMACRO RSELECT (CUMULATIV(A (GENSYM "A")) (MAX (GENSYM "MAX")) (R (GENSYM "R")) (P (GENSYM "P")) (DONE (GENSYM "DONE"))) (ASSERT (> LEN 0)) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA CUMULATIVE-FREQUENCY-ARRAY))) (ASSERT (EQL (SYSTEM.INTERNALS::BQ-COMMA LEN) (LENGTH (SYSTEM.INTERNALS::BQ-COMMA A)))) (LET* (((SYSTEM.INTERNALS::BQ-COMMA MAX) (AREF (SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA (1- LEN)))) ((SYSTEM.INTERNALS::BQ-COMMA R) (RANDOM (SYSTEM.INTERNALS::BQ-COMMA MAX)))) (BLOCK (SYSTEM.INTERNALS::BQ-COMMA DONE) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR I FROM 0 FOR C IN CASES COLLECT (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA P) (AREF (SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA I)))) (WHEN (< (SYSTEM.INTERNALS::BQ-COMMA R) (SYSTEM.INTERNALS::BQ-COMMA P)) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA DONE) (SYSTEM.INTERNALS::BQ-COMMA C))))))) (ERROR "Should not happen!"))))))).
;; Compiling form (DEFUN MAKE-RANDOM-INTEGER-RANGE (&OPTIONAL VAR) "Generate a list (LO HI) of integers, LO <= HI.  This is used
   for generating integer types." (DECLARE (IGNORE VAR)) (RCASE (1 (FLET ((%R NIL (LET ((R (ASH 1 (1+ (RANDOM *MAXIMUM-RANDOM-INT-BITS*))))) (- (RANDOM R) (FLOOR (/ R 2)))))) (LET ((X (%R)) (Y (%R))) (LIST (MIN X Y) (MAX X Y))))) (1 (LET* ((B (ASH 1 (1+ (RANDOM *MAXIMUM-RANDOM-INT-BITS*)))) (B2 (FLOOR (/ B 2)))) (LET ((X (- (RANDOM B) B2)) (Y (- (RANDOM B) B2))) (LIST (MIN X Y) (MAX X Y))))))).
;; Compiling form (DEFUN RANDOM-NONNEGATIVE-REAL NIL (IF (COIN 3) (RANDOM-CASE (/ (RANDOM 10000) (1+ (RANDOM 1000))) (/ (RANDOM 1000000) (1+ (RANDOM 100000))) (/ (RANDOM 100000000) (1+ (RANDOM 10000000))) (/ (RANDOM 1000000000000) (1+ (RANDOM 10000000)))) (RANDOM (RANDOM-CASE 1000 100000 10000000 1000000000 (EXPT 2.0 (RANDOM 15)) (EXPT 2.0 (RANDOM 32)) (EXPT 2.0 (RANDOM 32)) (EXPT 2.0 (RANDOM 32)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MAKE-RANDOM-INTEGER NIL (LET ((R (ASH 1 (1+ (RANDOM *MAXIMUM-RANDOM-INT-BITS*))))) (RCASE (6 (- (RANDOM R) (FLOOR (/ R 2)))) (1 (- R (RANDOM (MIN 10 R)))) (1 (+ (FLOOR (/ R 2)) (RANDOM (MIN 10 R))))))).
;; Compiling form (DEFUN MAKE-RANDOM-RATIONAL NIL (LET* ((R (ASH 1 (1+ (RANDOM *MAXIMUM-RANDOM-INT-BITS*)))) (N (RANDOM R))) (ASSERT (>= R 2)) (LET ((D (LOOP FOR X = (RANDOM R) UNLESS (ZEROP X) DO (RETURN X)))) (IF (COIN) (/ N D) (- (/ N D)))))).
;; Compiling form (DEFUN MAKE-RANDOM-NONNEGATIVE-RATIONAL NIL (LET* ((R (ASH 1 (1+ (RANDOM *MAXIMUM-RANDOM-INT-BITS*)))) (N (RANDOM R))) (ASSERT (>= R 2)) (LET ((D (LOOP FOR X = (RANDOM R) UNLESS (ZEROP X) DO (RETURN X)))) (/ N D)))).
;; Compiling form (DEFUN MAKE-RANDOM-POSITIVE-RATIONAL NIL (LET* ((R (ASH 1 (1+ (RANDOM *MAXIMUM-RANDOM-INT-BITS*)))) (N (1+ (RANDOM R)))) (ASSERT (>= R 2)) (LET ((D (LOOP FOR X = (RANDOM R) UNLESS (ZEROP X) DO (RETURN X)))) (/ N D)))).
;; Compiling form (DEFUN MAKE-RANDOM-BOUNDED-RATIONAL (UPPER-LIMIT LOWER-INCLUSIVE UPPER-INCLUSIVE) (ASSERT (RATIONALP UPPER-LIMIT)) (ASSERT (NOT (MINUSP UPPER-LIMIT))) (COND ((= UPPER-LIMIT 0) 0) ((<= UPPER-LIMIT 1/1000000) (/ (MAKE-RANDOM-BOUNDED-RATIONAL (* 1000000 UPPER-LIMIT) LOWER-INCLUSIVE UPPER-INCLUSIVE) 1000000)) ((>= UPPER-LIMIT 1000000) (* (RANDOM 1000000) (MAKE-RANDOM-BOUNDED-RATIONAL (/ UPPER-LIMIT 1000000) LOWER-INCLUSIVE UPPER-INCLUSIVE))) (T (ASSERT (< 1/1000000 UPPER-LIMIT 1000000)) (LET ((X 0)) (LOOP DO (SETQ X (* UPPER-LIMIT (RATIONAL (RANDOM 1.0)))) WHILE (OR (AND (NOT LOWER-INCLUSIVE) (ZEROP X)) (AND (NOT UPPER-INCLUSIVE) (= X UPPER-LIMIT))) FINALLY (RETURN X)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MAKE-RANDOM-FLOAT NIL (RCASE (1 (RANDOM MOST-POSITIVE-SHORT-FLOAT)) (1 (RANDOM MOST-POSITIVE-SINGLE-FLOAT)) (1 (RANDOM MOST-POSITIVE-DOUBLE-FLOAT)) (1 (RANDOM MOST-POSITIVE-LONG-FLOAT)))).
;; Compiling form (DEFUN MAKE-RANDOM-SYMBOL NIL (RCASE (3 (RANDOM-FROM-SEQ #(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z))) (2 (RANDOM-FROM-SEQ *CL-SYMBOLS-VECTOR*)) (1 (GENSYM)))).
;; Compiling form (DEFUN RANDOM-REAL NIL (IF (COIN) (RANDOM-NONNEGATIVE-REAL) (- (RANDOM-NONNEGATIVE-REAL)))).
;; Compiling form (DEFUN RANDOM-FIXNUM NIL (+ (RANDOM (1+ (- MOST-POSITIVE-FIXNUM MOST-NEGATIVE-FIXNUM))) MOST-NEGATIVE-FIXNUM)).
;; Compiling form (DEFUN RANDOM-THING (N) (IF (<= N 1) (RANDOM-LEAF) (RCASE (1 (APPLY (FUNCTION CONS) (MAPCAR (FUNCTION RANDOM-THING) (RANDOM-PARTITION (1- N) 2)))) (1 (APPLY (FUNCTION VECTOR) (MAPCAR (FUNCTION RANDOM-THING) (RANDOM-PARTITION (1- N) (MAX 10 (1- N))))))))).
;; Compiling form (DEFPARAMETER *USE-RANDOM-BYTE* T).
;; Compiling form (DEFPARAMETER *RANDOM-READABLE* NIL).
;; Compiling form (DEFUN MAKE-RANDOM-STRING (SIZE-SPEC &KEY SIMPLE) (LET* ((SIZE (IF (EQL SIZE-SPEC (QUOTE *)) (RANDOM 30) SIZE-SPEC)) (USE-RANDOM-BYTE NIL) (ETYPE (QUOTE CHARACTER)) (S (RANDOM-CASE (PROGN (SETF USE-RANDOM-BYTE *USE-RANDOM-BYTE*) (MAKE-STRING SIZE :ELEMENT-TYPE (QUOTE CHARACTER))) (PROGN (SETF USE-RANDOM-BYTE *USE-RANDOM-BYTE*) (MAKE-ARRAY SIZE :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\a)) (MAKE-ARRAY SIZE :ELEMENT-TYPE (SETF ETYPE (IF *RANDOM-READABLE* (QUOTE CHARACTER) (QUOTE STANDARD-CHAR))) :ADJUSTABLE (AND (NOT SIMPLE) (NOT *RANDOM-READABLE*) (RCASE (3 NIL) (1 T))) :FILL-POINTER (AND (NOT SIMPLE) (NOT *RANDOM-READABLE*) (RCASE (3 NIL) (1 (RANDOM (1+ SIZE))))) :INITIAL-ELEMENT #\a) (MAKE-ARRAY SIZE :ELEMENT-TYPE (SETF ETYPE (IF *RANDOM-READABLE* (QUOTE CHARACTER) (QUOTE BASE-CHAR))) :ADJUSTABLE (AND (NOT SIMPLE) (NOT *RANDOM-READABLE*) (RCASE (3 NIL) (1 T))) :FILL-POINTER (AND (NOT SIMPLE) (NOT *RANDOM-READABLE*) (RCASE (3 NIL) (1 (RANDOM (1+ SIZE))))) :INITIAL-ELEMENT #\a)))) (IF (COIN) (DOTIMES (I SIZE) (SETF (CHAR S I) (ELT #(#\a #\b #\A #\B) (RANDOM 4)))) (DOTIMES (I SIZE) (SETF (CHAR S I) (OR (AND (EQL ETYPE (QUOTE CHARACTER)) USE-RANDOM-BYTE (OR (CODE-CHAR (RANDOM (MIN CHAR-CODE-LIMIT (ASH 1 16)))) (CODE-CHAR (RANDOM 256)))) (ELT "abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" (RANDOM 62)))))) (WHEN (AND (NOT SIMPLE) (NOT *RANDOM-READABLE*) (COIN 5)) (LET ((LEN (+ (RANDOM (1+ SIZE)) SIZE))) (SETQ S (MAKE-RANDOM-STRING LEN)) (SETQ ETYPE (ARRAY-ELEMENT-TYPE S))KE-ARRAY SIZE :ELEMENT-TYPE ETYPE :DISPLACED-TO S :DISPLACED-INDEX-OFFSET (RANDOM (1+ (- LEN SIZE))))))) S)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN RANDOM-LEAF NIL (RCASE (1 (LET ((K (ASH 1 (1+ (RANDOM 40))))) (RANDOM-FROM-INTERVAL K (- K)))) (1 (RANDOM-FROM-SEQ +STANDARD-CHARS+)) (1 (RANDOM-REAL)) (1 (MAKE-RANDOM-STRING (RANDOM 20))) (1 (GENSYM)) (1 (MAKE-SYMBOL (MAKE-RANDOM-STRING (RANDOM 20)))) (1 (RANDOM-FROM-SEQ *CL-SYMBOLS-VECTOR*)))).
;; Compiling form (DEFUN RANDOM-FROM-INTERVAL (UPPER &OPTIONAL (LOWER (- UPPER))) (+ (RANDOM (- UPPER LOWER)) LOWER)).
;; Compiling form (DEFUN COIN (&OPTIONAL (N 2)) "Flip an n-sided coin." (EQL (RANDOM N) 0)).
;; Compiling form (DEFUN RANDOM-PERMUTE (SEQ) (SETQ SEQ (COPY-SEQ SEQ)) (LET ((LEN (LENGTH SEQ))) (LOOP FOR I FROM LEN DOWNTO 2 DO (LET ((R (RANDOM I))) (ROTATEF (ELT SEQ R) (ELT SEQ (1- I)))))) SEQ).
;; Compiling form (DEFUN BINOMIAL-DISTRIBUTION-TEST (N FN) (LET* ((COUNT (LOOP REPEAT N COUNT (FUNCALL FN))) (SIGMA (/ (SQRT N) 2.0)) (BOUND (* SIGMA 6)) (EXPECTED (/ N 2.0))) (<= (- EXPECTED BOUND) COUNT (+ EXPECTED BOUND)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN RANDOM-PARTITION* (N P) "Partition n into p numbers, each >= 0.  Return list of numbers." (ASSERT (<= 1 P)) (COND ((= P 1) (LIST N)) ((= N 0) (MAKE-LIST P :INITIAL-ELEMENT 0)) (T (LET* ((R (RANDOM P)) (N1 (RANDOM (1+ N)))) (COND ((= R 0) (CONS N1 (RANDOM-PARTITION* (- N N1) (1- P)))) ((= R (1- P)) (APPEND (RANDOM-PARTITION* (- N N1) (1- P)) (LIST N1))) (T (LET* ((N2 (RANDOM (1+ (- N N1)))) (N3 (- N N1 N2))) (APPEND (RANDOM-PARTITION* N2 R) (LIST N1) (RANDOM-PARTITION* N3 (- P 1 R)))))))))).
;; Compiling form (DEFUN RANDOM-PARTITION (N P) "Partition n into p numbers, each >= 1 (if possible.)" (COND ((<= N P) (MAKE-LIST P :INITIAL-ELEMENT 1)) (T (MAPCAR (FUNCTION 1+) (RANDOM-PARTITION* (- N P) P))))).
;; Compiling form (DEFUN POSITIVE-INTEGER-QUALIFIER-P (QUALIFIERS) (TYPEP QUALIFIERS (QUOTE (CONS (INTEGER 1) NULL)))).
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/ansi-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DECLAIM (OPTIMIZE (SAFETY 3))).
;; Compiling form (DEFUN NOTNOT (X) (NOT (NOT X))).
;; Compiling form (DEFMACRO NOTNOT-MV (FORM) (SYSTEM.INTERNALS::BACKQUOTE (NOTNOT-MV-FN (MULTIPLE-VALUE-LIST (SYSTEM.INTERNALS::BQ-COMMA FORM))))).
;; Compiling form (DEFUN NOTNOT-MV-FN (RESULTS) (IF (NULL RESULTS) (VALUES) (APPLY (FUNCTION VALUES) (NOT (NOT (FIRST RESULTS))) (REST RESULTS)))).
;; Compiling form (DEFMACRO NOT-MV (FORM) (SYSTEM.INTERNALS::BACKQUOTE (NOT-MV-FN (MULTIPLE-VALUE-LIST (SYSTEM.INTERNALS::BQ-COMMA FORM))))).
;; Compiling form (DEFUN NOT-MV-FN (RESULTS) (IF (NULL RESULTS) (VALUES) (APPLY (FUNCTION VALUES) (NOT (FIRST RESULTS)) (REST RESULTS)))).
;; Compiling form (DECLAIM (FTYPE (FUNCTION (T) FUNCTION) TO-FUNCTION)).
;; Compiling form (DEFUN TO-FUNCTION (FN) (ETYPECASE FN (FUNCTION FN) (SYMBOL (SYMBOL-FUNCTION FN)) ((CONS (EQL SETF) (CONS SYMBOL NULL)) (FDEFINITION FN)))).
;; Compiling form (DEFMACRO CHECK-VALUES (FORM &OPTIONAL (NUM 1)) (LET ((V (GENSYM)) (N (GENSYM))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA V) (MULTIPLE-VALUE-LIST (SYSTEM.INTERNALS::BQ-COMMA FORM))) ((SYSTEM.INTERNALS::BQ-COMMA N) (SYSTEM.INTERNALS::BQ-COMMA NUM))) (CHECK-VALUES-LENGTH (SYSTEM.INTERNALS::BQ-COMMA V) (SYSTEM.INTERNALS::BQ-COMMA N) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FORM))) (CAR (SYSTEM.INTERNALS::BQ-COMMA V)))))).
;; Compiling form (DEFUN CHECK-VALUES-LENGTH (RESULTS EXPECTED-NUMBER FORM) (DECLARE (TYPE FIXNUM EXPECTED-NUMBER)) (LET ((N EXPECTED-NUMBER)) (DECLARE (TYPE FIXNUM N)) (DOLIST (E RESULTS) (DECLARE (IGNORE E)) (DECF N)) (UNLESS (= N 0) (ERROR "Expected ~A results from ~A, got ~A results instead.~%~
Results: ~A~%" EXPECTED-NUMBER FORM N RESULTS)))).
;; Compiling form (DEFMACRO MULTIPLE-VALUE-BIND* ((&REST VARS) FORM &BODY BODY) (LET ((LEN (LENGTH VARS)) (V (GENSYM))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA V) (MULTIPLE-VALUE-LIST (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (CHECK-VALUES-LENGTH (SYSTEM.INTERNALS::BQ-COMMA V) (SYSTEM.INTERNALS::BQ-COMMA LEN) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FORM))) (DESTRUCTURING-BIND (SYSTEM.INTERNALS::BQ-COMMA VARS) (SYSTEM.INTERNALS::BQ-COMMA V) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN BODY)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN EQT (X Y) "Like EQ, but guaranteed to return T for true." (APPLY (FUNCTION VALUES) (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (EQ X Y))))).
;; Compiling form (DEFUN EQLT (X Y) "Like EQL, but guaranteed to return T for true." (APPLY (FUNCTION VALUES) (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (EQL X Y))))).
;; Compiling form (DEFUN EQUALT (X Y) "Like EQUAL, but guaranteed to return T for true." (APPLY (FUNCTION VALUES) (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (EQUAL X Y))))).
;; Compiling form (DEFUN EQUALPT (X Y) "Like EQUALP, but guaranteed to return T for true." (APPLY (FUNCTION VALUES) (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (EQUALP X Y))))).
;; Compiling form (DEFUN EQUALPT-OR-REPORT (X Y) "Like EQUALPT, but return either T or a list of the arguments." (OR (EQUALPT X Y) (LIST X Y))).
;; Compiling form (DEFUN STRING=T (X Y) (NOTNOT-MV (STRING= X Y))).
;; Compiling form (DEFUN =T (X &REST ARGS) "Like =, but guaranteed to return T for true." (APPLY (FUNCTION VALUES) (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (APPLY (FUNCTION =) X ARGS))))).
;; Compiling form (DEFUN <=T (X &REST ARGS) "Like <=, but guaranteed to return T for true." (APPLY (FUNCTION VALUES) (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (APPLY (FUNCTION <=) X ARGS))))).
;; Compiling form (DEFUN MAKE-INT-LIST (N) (LOOP FOR I FROM 0 BELOW N COLLECT I)).
;; Compiling form (DEFUN MAKE-INT-ARRAY (N &OPTIONAL (FN (FUNCTION MAKE-ARRAY))) (WHEN (SYMBOLP FN) (ASSERT (FBOUNDP FN)) (SETF FN (SYMBOL-FUNCTION (THE SYMBOL FN)))) (LET ((A (FUNCALL (THE FUNCTION FN) N))) (DECLARE (TYPE (ARRAY * *) A)) (LOOP FOR I FROM 0 BELOW N DO (SETF (AREF A I) I)) A)).
;; Compiling form (DEFUN EQUAL-ARRAY (A1 A2) (AND (TYPEP A1 (QUOTE ARRAY)) (TYPEP A2 (QUOTE ARRAY)) (= (ARRAY-RANK A1) (ARRAY-RANK A2)) (IF (= (ARRAY-RANK A1) 0) (EQUAL (MY-AREF A1) (MY-AREF A2)) (LET ((AD (ARRAY-DIMENSIONS A1))) (AND (EQUAL AD (ARRAY-DIMENSIONS A2)) (LOCALLY (DECLARE (TYPE (ARRAY * *) A1 A2)) (IF (= (ARRAY-RANK A1) 1) (LET ((AS (FIRST AD))) (LOOP FOR I FROM 0 BELOW AS ALWAYS (EQUAL (MY-AREF A1 I) (MY-AREF A2 I)))) (LET ((AS (ARRAY-TOTAL-SIZE A1))) (AND (= AS (ARRAY-TOTAL-SIZE A2)) (LOOP FOR I FROM 0 BELOW AS ALWAYS (EQUAL (REGRESSION-TEST::MY-ROW-MAJOR-AREF A1 I) (REGRESSION-TEST::MY-ROW-MAJOR-AREF A2 I)))))))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DECLAIM (SPECIAL *UNIVERSE*)).
;; Compiling form (DEFUN EMPIRICAL-SUBTYPEP (TYPE1 TYPE2) (MULTIPLE-VALUE-BIND (SUB GOOD) (SUBTYPEP* TYPE1 TYPE2) (IF GOOD SUB (LOOP FOR E IN *UNIVERSE* ALWAYS (OR (NOT (TYPEP E TYPE1)) (TYPEP E TYPE2)))))).
;; Compiling form (DEFUN CHECK-TYPE-PREDICATE (P TYPE) "Check that a predicate P is the same as #'(lambda (x) (typep x TYPE))
   by applying both to all elements of *UNIVERSE*.  Print message
   when a mismatch is found, and return number of mistakes." (WHEN (SYMBOLP P) (ASSERT (FBOUNDP P)) (SETF P (SYMBOL-FUNCTION P))) (ASSERT (TYPEP P (QUOTE FUNCTION))) (LOOP FOR X IN *UNIVERSE* WHEN (BLOCK FAILED (LET ((P1 (HANDLER-CASE (NORMALLY (FUNCALL (THE FUNCTION P) X)) (ERROR NIL (FORMAT T "(FUNCALL ~S ~S) failed~%" P X) (RETURN-FROM FAILED T)))) (P2 (HANDLER-CASE (NORMALLY (TYPEP X TYPE)) (ERROR NIL (FORMAT T "(TYPEP ~S '~S) failed~%" X TYPE) (RETURN-FROM FAILED T))))) (WHEN (OR (AND P1 (NOT P2)) (AND (NOT P1) P2)) (FORMAT T "(FUNCALL ~S ~S) = ~S, (TYPEP ~S '~S) = ~S~%" P X P1 X TYPE P2) T))) COLLECT X)).
;; Compiling form (DEFUN CHECK-PREDICATE (PREDICATE &OPTIONAL GUARD (UNIVERSE *UNIVERSE*)) "Return all elements of UNIVERSE for which the guard (if present) is false
   and for which PREDICATE is false." (REMOVE-IF (FUNCTION (LAMBDA (E) (OR (AND GUARD (FUNCALL GUARD E)) (FUNCALL PREDICATE E)))) UNIVERSE)).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
;; Compiling form (DECLAIM (SPECIAL *CATCH-ERROR-TYPE*)).
;; Compiling form (DEFUN CATCH-CONTINUE-DEBUGGER-HOOK (CONDITION DBH) "Function that when used as *debugger-hook*, causes
   continuable errors to be continued without user intervention." (DECLARE (IGNORE DBH)) (LET ((R (FIND-RESTART (QUOTE CONTINUE) CONDITION))) (COND ((AND *CATCH-ERROR-TYPE* (NOT (TYPEP CONDITION *CATCH-ERROR-TYPE*))) (FORMAT T "Condition ~S is not a ~A~%" CONDITION *CATCH-ERROR-TYPE*) (COND (R (FORMAT T "Its continue restart is ~S~%" R)) (T (FORMAT T "It has no continue restart~%"))) (THROW (QUOTE CONTINUE-FAILED) NIL)) (R (INVOKE-RESTART R)) (T (THROW (QUOTE CONTINUE-FAILED) NIL))))).
;; Compiling form (DEFMACRO CATCH-TYPE-ERROR (FORM) "Evaluate form in safe mode, returning its value if there is no error.
If an error does occur, return type-error on TYPE-ERRORs, or the error
condition itself on other errors." (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (NORMALLY (SYSTEM.INTERNALS::BQ-COMMA FORM)) (TYPE-ERROR NIL (QUOTE TYPE-ERROR)) (ERROR (C) C))))).
;; Compiling form (DEFMACRO CLASSIFY-ERROR* (FORM) "Evaluate form in safe mode, returning its value if there is no error.
If an error does occur, return a symbol classify the error, or allow
the condition to go uncaught if it cannot be classified." (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (NORMALLY (SYSTEM.INTERNALS::BQ-COMMA FORM)) (UNDEFINED-FUNCTION NIL (QUOTE UNDEFINED-FUNCTION)) (PROGRAM-ERROR NIL (QUOTE PROGRAM-ERROR)) (PACKAGE-ERROR NIL (QUOTE PACKAGE-ERROR)) (TYPE-ERROR NIL (QUOTE TYPE-ERROR)) (CONTROL-ERROR NIL (QUOTE CONTROL-ERROR)) (PARSE-ERROR NIL (QUOTE PARSE-ERROR)) (STREAM-ERROR NIL (QUOTE STREAM-ERROR)) (READER-ERROR NIL (QUOTE READER-ERROR)) (FILE-ERROR NIL (QUOTE FILE-ERROR)) (CELL-ERROR NIL (QUOTE CELL-ERROR)) (DIVISION-BY-ZERO NIL (QUOTE DIVISION-BY-ZERO)) (FLOATING-POINT-OVERFLOW NIL (QUOTE FLOATING-POINT-OVERFLOW)) (FLOATING-POINT-UNDERFLOW NIL (QUOTE FLOATING-POINT-UNDERFLOW)) (ARITHMETIC-ERROR NIL (QUOTE ARITHMETIC-ERROR)) (ERROR NIL (QUOTE ERROR)))))).
;; Compiling form (DEFUN CLASSIFY-ERROR** (FORM) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (MUFFLE-WARNING))))) (PROCLAIM (QUOTE (OPTIMIZE (SAFETY 3)))) (CLASSIFY-ERROR* (IF *COMPILE-TESTS* (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 3))) (SYSTEM.INTERNALS::BQ-COMMA FORM))))) (EVAL FORM))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMACRO CLASSIFY-ERROR (FORM) (SYSTEM.INTERNALS::BACKQUOTE (CLASSIFY-ERROR** (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FORM))))).
;; Compiling form (DEFMACRO SIGNALS-ERROR (FORM ERROR-NAME &KEY (SAFETY 3) (NAME NIL NAME-P) (INLINE NIL)) (SYSTEM.INTERNALS::BACKQUOTE (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (MUFFLE-WARNING))))) (PROCLAIM (QUOTE (OPTIMIZE (SAFETY 3)))) (HANDLER-CASE (APPLY (FUNCTION VALUES) NIL (MULTIPLE-VALUE-LIST (SYSTEM.INTERNALS::BQ-COMMA (COND (INLINE FORM) (*COMPILE-TESTS* (SYSTEM.INTERNALS::BACKQUOTE (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY (SYSTEM.INTERNALS::BQ-COMMA SAFETY)))) (SYSTEM.INTERNALS::BQ-COMMA FORM))))))) (T (SYSTEM.INTERNALS::BACKQUOTE (EVAL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FORM))))))))) ((SYSTEM.INTERNALS::BQ-COMMA ERROR-NAME) (C) (COND (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CASE ERROR-NAME (TYPE-ERROR (SYSTEM.INTERNALS::BACKQUOTE (((TYPEP (TYPE-ERROR-DATUM C) (TYPE-ERROR-EXPECTED-TYPE C)) (VALUES NIL (LIST (LIST (QUOTE TYPEP) (LIST (QUOTE QUOTE) (TYPE-ERROR-DATUM C)) (LIST (QUOTE QUOTE) (TYPE-ERROR-EXPECTED-TYPE C))) "==> true")))))) ((UNDEFINED-FUNCTION UNBOUND-VARIABLE) (AND NAME-P (SYSTEM.INTERNALS::BACKQUOTE (((NOT (EQ (CELL-ERROR-NAME C) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)))) (VALUES NIL (LIST (QUOTE CELL-ERROR-NAME) "==>" (CELL-ERROR-NAME C)))))))) ((STREAM-ERROR END-OF-FILE READER-ERROR) (SYSTEM.INTERNALS::BACKQUOTE (((NOT (STREAMP (STREAM-ERROR-STREAM C))) (VALUES NIL (LIST (QUOTE STREAM-ERROR-STREAM) "==>" (STREAM-ERROR-STREAM C))))))) (FILE-ERROR (SYSTEM.INTERNALS::BACKQUOTE (((NOT (PATHNAMEP (PATHNAME (FILE-ERROR-PATHNAME C)))) (VALUES NIL (LIST (QUOTE FILE-ERROR-PATHNAME) "==>" (FILE-ERROR-PATHNAME C))))))) (T NIL))) (T (PRINTABLE-P C)))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMACRO SIGNALS-ERROR-ALWAYS (FORM ERROR-NAME) (SYSTEM.INTERNALS::BACKQUOTE (VALUES (SIGNALS-ERROR (SYSTEM.INTERNALS::BQ-COMMA FORM) (SYSTEM.INTERNALS::BQ-COMMA ERROR-NAME)) (SIGNALS-ERROR (SYSTEM.INTERNALS::BQ-COMMA FORM) (SYSTEM.INTERNALS::BQ-COMMA ERROR-NAME) :SAFETY 0)))).
;; Compiling form (DEFMACRO SIGNALS-TYPE-ERROR (VAR DATUM-FORM FORM &KEY (SAFETY 3) (INLINE NIL)) (LET ((LAMBDA-FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA ((SYSTEM.INTERNALS::BQ-COMMA VAR)) (DECLARE (OPTIMIZE (SAFETY (SYSTEM.INTERNALS::BQ-COMMA SAFETY)))) (SYSTEM.INTERNALS::BQ-COMMA FORM))))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR) (SYSTEM.INTERNALS::BQ-COMMA DATUM-FORM))) (DECLARE (OPTIMIZE SAFETY)) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (MUFFLE-WARNING))))) (HANDLER-CASE (APPLY (FUNCTION VALUES) NIL (MULTIPLE-VALUE-LIST (FUNCALL (SYSTEM.INTERNALS::BQ-COMMA (COND (INLINE (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA LAMBDA-FORM)))) (*COMPILE-TESTS* (SYSTEM.INTERNALS::BACKQUOTE (COMPILE NIL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA LAMBDA-FORM))))) (T (SYSTEM.INTERNALS::BACKQUOTE (EVAL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA LAMBDA-FORM))))))) (SYSTEM.INTERNALS::BQ-COMMA VAR)))) (TYPE-ERROR (C) (LET ((DATUM (TYPE-ERROR-DATUM C)) (EXPECTED-TYPE (TYPE-ERROR-EXPECTED-TYPE C))) (COND ((NOT (EQL (SYSTEM.INTERNALS::BQ-COMMA VAR) DATUM)) (LIST :DATUM-MISMATCH (SYSTEM.INTERNALS::BQ-COMMA VAR) DATUM)) ((TYPEP DATUM EXPECTED-TYPE) (LIST :IS-TYPEP DATUM EXPECTED-TYPE)) (T (PRINTABLE-P C))))))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DECLAIM (SPECIAL *MINI-UNIVERSE*)).
;; Compiling form (DEFUN CHECK-TYPE-ERROR* (PRED-FN GUARD-FN &OPTIONAL (UNIVERSE *MINI-UNIVERSE*)) "Check that for all elements in some set, either guard-fn is true or
   pred-fn signals a type error." (LET (VAL) (LOOP FOR E IN UNIVERSE UNLESS (OR (FUNCALL GUARD-FN E) (EQUAL (SETF VAL (MULTIPLE-VALUE-LIST (SIGNALS-TYPE-ERROR X E (FUNCALL PRED-FN X) :INLINE T))) (QUOTE (T)))) COLLECT (LIST E VAL)))).
;; Compiling form (DEFMACRO CHECK-TYPE-ERROR (&BODY ARGS) (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (CHECK-TYPE-ERROR* (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS))))).
;; Compiling form (DEFUN PRINTABLE-P (OBJ) "Returns T iff obj can be printed to a string." (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL)) (DECLARE (OPTIMIZE SAFETY)) (HANDLER-CASE (AND (STRINGP (WRITE-TO-STRING OBJ)) T) (CONDITION (C) (DECLARE (IGNORE C)) NIL))))).
;; Compiling form (DEFUN SUBTYPEP* (TYPE1 TYPE2) (APPLY (FUNCTION VALUES) (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (SUBTYPEP TYPE1 TYPE2))))).
GC in progress...
(cocoa) warning unknow keycode 0x37
(cocoa) warning unknow keycode 0x37
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN SUBTYPEP*-OR-FAIL (TYPE1 TYPE2) (LET ((RESULTS (MULTIPLE-VALUE-LIST (SUBTYPEP TYPE1 TYPE2)))) (AND (= (LENGTH RESULTS) 2) (OR (NOT (SECOND RESULTS)) (NOTNOT (FIRST RESULTS)))))).
;; Compiling form (DEFUN SUBTYPEP*-NOT-OR-FAIL (TYPE1 TYPE2) (LET ((RESULTS (MULTIPLE-VALUE-LIST (SUBTYPEP TYPE1 TYPE2)))) (AND (= (LENGTH RESULTS) 2) (OR (NOT (SECOND RESULTS)) (NOT (FIRST RESULTS)))))).
;; Compiling form (DEFUN COMPOSE (&REST FNS) (LET ((RFNS (REVERSE FNS))) (FUNCTION (LAMBDA (X) (LOOP FOR F IN RFNS DO (SETF X (FUNCALL (THE FUNCTION F) X))) X)))).
;; Compiling form (DEFUN EVENDIGITP (C) (NOTNOT (FIND C "02468"))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
;; Compiling form (DEFUN ODDDIGITP (C) (NOTNOT (FIND C "13579"))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
;; Compiling form (DEFUN NEXTDIGIT (C) (CADR (MEMBER C (QUOTE (#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))))).
;; Compiling form (DEFUN IS-EQ-P (X) (FUNCTION (LAMBDA (Y) (EQT X Y)))).
;; Compiling form (DEFUN IS-NOT-EQ-P (X) (FUNCTION (LAMBDA (Y) (NOT (EQT X Y))))).
;; Compiling form (DEFUN IS-EQL-P (X) (FUNCTION (LAMBDA (Y) (EQLT X Y)))).
;; Compiling form (DEFUN IS-NOT-EQL-P (X) (FUNCTION (LAMBDA (Y) (NOT (EQLT X Y))))).
;; Compiling form (DEFUN ONEP (X) (EQL X 1)).
;; Compiling form (DEFUN CHAR-INVERTCASE (C) (IF (UPPER-CASE-P C) (CHAR-DOWNCASE C) (CHAR-UPCASE C))).
;; Compiling form (DEFUN STRING-INVERTCASE (S) (MAP (QUOTE STRING) (FUNCTION CHAR-INVERTCASE) S)).
;; Compiling form (DEFUN SYMBOL< (X &REST ARGS) (APPLY (FUNCTION STRING<) (SYMBOL-NAME X) (MAPCAR (FUNCTION SYMBOL-NAME) ARGS))).
;; Compiling form (DEFUN MAKE-LIST-EXPR (ARGS) "Build an expression for computing (LIST . args), but that evades
   CALL-ARGUMENTS-LIMIT." (IF (CDDDDR ARGS) (LIST (QUOTE LIST*) (FIRST ARGS) (SECOND ARGS) (THIRD ARGS) (FOURTH ARGS) (MAKE-LIST-EXPR (CDDDDR ARGS))) (CONS (QUOTE LIST) ARGS))).
;; Compiling form (DEFPARAMETER +STANDARD-CHARS+ (COERCE "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789~!@#$%^&*()_+|\\=-`{}[]:\";'<>?,./
 " (QUOTE SIMPLE-BASE-STRING))).
;; Compiling form (DEFPARAMETER +BASE-CHARS+ "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<,>.?/\"':;[{]}~`!@#$%^&*()_-+= \\|").
;; Compiling form (DECLAIM (TYPE SIMPLE-BASE-STRING +BASE-CHARS+)).
;; Compiling form (DEFPARAMETER +NUM-BASE-CHARS+ (LENGTH +BASE-CHARS+)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFPARAMETER +ALPHA-CHARS+ (SUBSEQ +STANDARD-CHARS+ 0 52)).
;; Compiling form (DEFPARAMETER +LOWER-CASE-CHARS+ (SUBSEQ +ALPHA-CHARS+ 0 26)).
;; Compiling form (DEFPARAMETER +UPPER-CASE-CHARS+ (SUBSEQ +ALPHA-CHARS+ 26 52)).
;; Compiling form (DEFPARAMETER +ALPHANUMERIC-CHARS+ (SUBSEQ +STANDARD-CHARS+ 0 62)).
;; Compiling form (DEFPARAMETER +DIGIT-CHARS+ "0123456789").
;; Compiling form (DEFPARAMETER +EXTENDED-DIGIT-CHARS+ (COERCE "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" (QUOTE SIMPLE-BASE-STRING))).
;; Compiling form (DECLAIM (TYPE SIMPLE-BASE-STRING +ALPHA-CHARS+ +LOWER-CASE-CHARS+ +UPPER-CASE-CHARS+ +ALPHANUMERIC-CHARS+ +EXTENDED-DIGIT-CHARS+ +STANDARD-CHARS+)).
;; Compiling form (DEFPARAMETER +CODE-CHARS+ (COERCE (LOOP FOR I FROM 0 BELOW 256 FOR C = (CODE-CHAR I) WHEN C COLLECT C) (QUOTE SIMPLE-STRING))).
;; Compiling form (DECLAIM (TYPE SIMPLE-STRING +CODE-CHARS+)).
;; Compiling form (DEFPARAMETER +REV-CODE-CHARS+ (REVERSE +CODE-CHARS+)).
;; Compiling form (DEFUN HAS-NON-ABORT-RESTART (C) (THROW (QUOTE HANDLED) (IF (POSITION (QUOTE ABORT) (THE LIST (COMPUTE-RESTARTS C)) :KEY (FUNCTION RESTART-NAME) :TEST-NOT (FUNCTION EQ)) (QUOTE SUCCESS) (QUOTE FAIL)))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
;; Compiling form (DEFMACRO HANDLE-NON-ABORT-RESTART (&BODY BODY) (SYSTEM.INTERNALS::BACKQUOTE (CATCH (QUOTE HANDLED) (HANDLER-BIND ((ERROR (FUNCTION HAS-NON-ABORT-RESTART))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN BODY))))).
;; Compiling form (DEFUN ELT-V-6-BODY NIL (LET ((X (MAKE-INT-LIST 1000))) (LET ((A (MAKE-ARRAY (QUOTE (1000)) :INITIAL-CONTENTS X))) (LOOP FOR I FROM 0 TO 999 DO (UNLESS (EQL I (ELT A I)) (RETURN NIL)) FINALLY (RETURN T))))).
;; Compiling form (DEFUN MAKE-ADJ-ARRAY (N &KEY INITIAL-CONTENTS) (IF INITIAL-CONTENTS (MAKE-ARRAY N :ADJUSTABLE T :INITIAL-CONTENTS INITIAL-CONTENTS) (MAKE-ARRAY N :ADJUSTABLE T))).
;; Compiling form (DEFUN ELT-ADJ-ARRAY-6-BODY NIL (LET ((X (MAKE-INT-LIST 1000))) (LET ((A (MAKE-ADJ-ARRAY (QUOTE (1000)) :INITIAL-CONTENTS X))) (LOOP FOR I FROM 0 TO 999 DO (UNLESS (EQL I (ELT A I)) (RETURN NIL)) FINALLY (RETURN T))))).
;; Compiling form (DEFPARAMETER *DISPLACED* (MAKE-INT-ARRAY 100000)).
;; Compiling form (DEFUN MAKE-DISPLACED-ARRAY (N DISPLACEMENT) (MAKE-ARRAY N :DISPLACED-TO *DISPLACED* :DISPLACED-INDEX-OFFSET DISPLACEMENT)).
;; Compiling form (DEFUN ARRAY-UNSIGNED-BYTE-FILL-TEST-FN (BYTE-SIZE &REST FILL-ARGS) (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (LIST (QUOTE UNSIGNED-BYTE) BYTE-SIZE) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)))) (B (APPLY (FUNCTION FILL) A FILL-ARGS))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A)))).
;; Compiling form (DEFUN ARRAY-STRING-FILL-TEST-FN (A &REST FILL-ARGS) (SETQ A (COPY-SEQ A)) (LET ((B (APPLY (FUNCTION FILL) A FILL-ARGS))) (VALUES (EQT A B) B))).
;; Compiling form (DEFPARAMETER +FLOAT-TYPES+ (QUOTE (LONG-FLOAT DOUBLE-FLOAT SHORT-FLOAT SINGLE-FLOAT))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFPARAMETER *SUBTYPE-TABLE* (LET ((TABLE (QUOTE ((NULL SYMBOL) (SYMBOL T) (BOOLEAN SYMBOL) (STANDARD-OBJECT T) (FUNCTION T) (COMPILED-FUNCTION FUNCTION) (GENERIC-FUNCTION FUNCTION) (STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION) (CLASS STANDARD-OBJECT) (BUILT-IN-CLASS CLASS) (STRUCTURE-CLASS CLASS) (STANDARD-CLASS CLASS) (METHOD STANDARD-OBJECT) (STANDARD-METHOD METHOD) (STRUCTURE-OBJECT T) (METHOD-COMBINATION T) (CONDITION T) (SERIOUS-CONDITION CONDITION) (ERROR SERIOUS-CONDITION) (TYPE-ERROR ERROR) (SIMPLE-TYPE-ERROR TYPE-ERROR) (SIMPLE-CONDITION CONDITION) (SIMPLE-TYPE-ERROR SIMPLE-CONDITION) (PARSE-ERROR ERROR) (HASH-TABLE T) (CELL-ERROR ERROR) (UNBOUND-SLOT CELL-ERROR) (WARNING CONDITION) (STYLE-WARNING WARNING) (STORAGE-CONDITION SERIOUS-CONDITION) (SIMPLE-WARNING WARNING) (SIMPLE-WARNING SIMPLE-CONDITION) (KEYWORD SYMBOL) (UNBOUND-VARIABLE CELL-ERROR) (CONTROL-ERROR ERROR) (PROGRAM-ERROR ERROR) (UNDEFINED-FUNCTION CELL-ERROR) (PACKAGE T) (PACKAGE-ERROR ERROR) (RANDOM-STATE T) (NUMBER T) (REAL NUMBER) (COMPLEX NUMBER) (FLOAT REAL) (SHORT-FLOAT FLOAT) (SINGLE-FLOAT FLOAT) (DOUBLE-FLOAT FLOAT) (LONG-FLOAT FLOAT) (RATIONAL REAL) (INTEGER RATIONAL) (RATIO RATIONAL) (SIGNED-BYTE INTEGER) (INTEGER SIGNED-BYTE) (UNSIGNED-BYTE SIGNED-BYTE) (BIT UNSIGNED-BYTE) (FIXNUM INTEGER) (BIGNUM INTEGER) (BIT FIXNUM) (ARITHMETIC-ERROR ERROR) (DIVISION-BY-ZERO ARITHMETIC-ERROR) (FLOATING-POINT-INVALID-OPERATION ARITHMETIC-ERROR) (FLOATING-POINT-INEXACT ARITHMETIC-ERROR) (FLOATING-POINT-OVERFLOW ARITHMETIC-ERROR) (FLOATING-POINT-UNDERFLOW ARITHMETIC-ERROR) (CHARACTER T) (BASE-CHAR CHARACTER) (STANDARD-CHAR BASE-CHAR) (EXTENDED-CHAR CHARACTER) (SEQUENCE T) (LIST SEQUENCE) (NULL LIST) (NULL BOOLEAN) (CONS LIST) (ARRAY T) (SIMPLE-ARRAY ARRAY) (VECTOR SEQUENCE) (VECTOR ARRAY) (STRING VECTOR) (BIT-VECTOR VECTOR) (SIMPLE-VECTOR VECTOR) (SIMPLE-VECTOR SIMPLE-ARRAY) (SIMPLE-BIT-VECTOR BIT-VECTOR) (SIMPLE-BIT-VECTOR SIMPLE-ARRAY) (BASE-STRING STRING) (SIMPLE-STRING STRING) (SIMPLE-STRING SIMPLE-ARRAY) (SIMPLE-BASE-STRING BASE-STRING) (SIMPLE-BASE-STRING SIMPLE-STRING) (PATHNAME T) (LOGICAL-PATHNAME PATHNAME) (FILE-ERROR ERROR) (STREAM T) (BROADCAST-STREAM STREAM) (CONCATENATED-STREAM STREAM) (ECHO-STREAM STREAM) (FILE-STREAM STREAM) (STRING-STREAM STREAM) (SYNONYM-STREAM STREAM) (TWO-WAY-STREAM STREAM) (STREAM-ERROR ERROR) (END-OF-FILE STREAM-ERROR) (PRINT-NOT-READABLE ERROR) (READTABLE T) (READER-ERROR PARSE-ERROR) (READER-ERROR STREAM-ERROR))))) (WHEN (SUBTYPEP* (QUOTE CHARACTER) (QUOTE BASE-CHAR)) (SETQ TABLE (APPEND (QUOTE ((CHARACTER BASE-CHAR))) TABLE))) TABLE)).
;; Compiling form (DEFPARAMETER *DISJOINT-TYPES-LIST* (QUOTE (CONS SYMBOL ARRAY NUMBER CHARACTER HASH-TABLE FUNCTION READTABLE PACKAGE PATHNAME STREAM RANDOM-STATE CONDITION RESTART))).
;; Compiling form (DEFPARAMETER *DISJOINT-TYPES-LIST2* (SYSTEM.INTERNALS::BACKQUOTE ((CONS (CONS T T) (CONS T (CONS T T)) (EQL (NIL))) (SYMBOL KEYWORD BOOLEAN NULL (EQL A) (EQL NIL) (EQL T) (EQL *)) (ARRAY VECTOR SIMPLE-ARRAY SIMPLE-VECTOR STRING SIMPLE-STRING BASE-STRING SIMPLE-BASE-STRING (EQL #())) (CHARACTER BASE-CHAR STANDARD-CHAR (EQL #\a) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (IF (SUBTYPEP (QUOTE CHARACTER) (QUOTE BASE-CHAR)) NIL (LIST (QUOTE EXTENDED-CHAR))))) (FUNCTION COMPILED-FUNCTION GENERIC-FUNCTION STANDARD-GENERIC-FUNCTION (EQL (SYSTEM.INTERNALS::BQ-COMMA (FUNCTION CAR)))) (PACKAGE (EQL (SYSTEM.INTERNALS::BQ-COMMA (FIND-PACKAGE "COMMON-LISP")))) (PATHNAME LOGICAL-PATHNAME (EQL (PARSE-NAMESTRING (QUOTE "")))) (STREAM BROADCAST-STREAM CONCATENATED-STREAM ECHO-STREAM FILE-STREAM STRING-STREAM SYNONYM-STREAM TWO-WAY-STREAM) (NUMBER REAL COMPLEX FLOAT INTEGER RATIONAL RATIO FIXNUM BIT (INTEGER 0 100) (FLOAT 0.0 100.0) (INTEGER 0 *) (RATIONAL 0 *) (MOD 10) (EQL 0) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (AND (NOT (SUBTYPEP (QUOTE BIGNUM) NIL)) (LIST (QUOTE BIGNUM))))) (RANDOM-STATE) (SYSTEM.INTERNALS::BQ-COMMA *CONDITION-TYPES*) (RESTART) (READTABLE)))).
;; Compiling form (DEFPARAMETER *TYPES-LIST3* (REDUCE (FUNCTION APPEND) (REVERSE *DISJOINT-TYPES-LIST2*))).
;; Compiling form (DEFUN TRIM-LIST (LIST N) (LET ((LEN (LENGTH LIST))) (IF (<= LEN N) LIST (APPEND (SUBSEQ LIST 0 N) (FORMAT NIL "And ~A more omitted." (- LEN N)))))).
;; Compiling form (DEFUN IS-T-OR-NIL (E) (OR (EQT E T) (EQT E NIL))).
;; Compiling form (DEFUN IS-BUILTIN-CLASS (TYPE) (WHEN (SYMBOLP TYPE) (SETQ TYPE (FIND-CLASS TYPE NIL))) (TYPEP TYPE (QUOTE BUILT-IN-CLASS))).
;; Compiling form (DEFUN EVEN-SIZE-P (A) (SOME (FUNCTION EVENP) (ARRAY-DIMENSIONS A))).
;; Compiling form (DEFUN SAFE-ELT (X N) (CLASSIFY-ERROR* (ELT X N))).
;; Compiling form (DEFMACRO DEFSTRUCT* (&BODY ARGS) (SYSTEM.INTERNALS::BACKQUOTE (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (HANDLER-CASE (EVAL (QUOTE (DEFSTRUCT (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)))) (SERIOUS-CONDITION NIL NIL))))).
;; Compiling form (DEFUN SAFELY-DELETE-PACKAGE (PACKAGE-DESIGNATOR) (LET ((PACKAGE (FIND-PACKAGE PACKAGE-DESIGNATOR))) (WHEN PACKAGE (LET ((USED-BY (PACKAGE-USED-BY-LIST PACKAGE))) (DOLIST (USING-PACKAGE USED-BY) (UNUSE-PACKAGE PACKAGE USING-PACKAGE))) (DELETE-PACKAGE PACKAGE)))).
;; Compiling form (DEFUN DELETE-ALL-VERSIONS (PATHSPEC) "Replace the versions field of the pathname specified by pathspec with
   :wild, and delete all the files this refers to." (LET* ((WILD-PATHNAME (MAKE-PATHNAME :VERSION :WILD :DEFAULTS (PATHNAME PATHSPEC))) (TRUENAMES (DIRECTORY WILD-PATHNAME))) (MAPC (FUNCTION DELETE-FILE) TRUENAMES))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFCONSTANT +FAIL-COUNT-LIMIT+ 20).
;; Compiling form (DEFUN FROB-SIMPLE-CONDITION (C EXPECTED-FMT &REST EXPECTED-ARGS) "Try out the format control and format arguments of a simple-condition C,
   but make no assumptions about what they print as, only that they
   do print." (DECLARE (IGNORE EXPECTED-FMT EXPECTED-ARGS)) (AND (TYPEP C (QUOTE SIMPLE-CONDITION)) (LET ((FC (SIMPLE-CONDITION-FORMAT-CONTROL C)) (ARGS (SIMPLE-CONDITION-FORMAT-ARGUMENTS C))) (AND (STRINGP (APPLY (FUNCTION FORMAT) NIL FC ARGS)) T)))).
;; Compiling form (DEFUN FROB-SIMPLE-ERROR (C EXPECTED-FMT &REST EXPECTED-ARGS) (AND (TYPEP C (QUOTE SIMPLE-ERROR)) (APPLY (FUNCTION FROB-SIMPLE-CONDITION) C EXPECTED-FMT EXPECTED-ARGS))).
;; Compiling form (DEFUN FROB-SIMPLE-WARNING (C EXPECTED-FMT &REST EXPECTED-ARGS) (AND (TYPEP C (QUOTE SIMPLE-WARNING)) (APPLY (FUNCTION FROB-SIMPLE-CONDITION) C EXPECTED-FMT EXPECTED-ARGS))).
;; Compiling form (DEFPARAMETER *ARRAY-ELEMENT-TYPES* (QUOTE (T (INTEGER 0 0) BIT (UNSIGNED-BYTE 8) (UNSIGNED-BYTE 16) (UNSIGNED-BYTE 32) FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT NIL CHARACTER BASE-CHAR SYMBOL BOOLEAN NULL))).
;; Compiling form (DEFUN COLLECT-PROPERTIES (PLIST PROP) "Collect all the properties in plist for a property prop." (LOOP FOR E ON PLIST BY (FUNCTION CDDR) WHEN (EQL (CAR E) PROP) COLLECT (CADR E))).
;; Compiling form (DEFMACRO DEF-MACRO-TEST (TEST-NAME MACRO-FORM) (LET ((MACRO-NAME (CAR MACRO-FORM))) (ASSERT (SYMBOLP MACRO-NAME)) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (VALUES (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA MACRO-NAME)))) PROGRAM-ERROR) (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA MACRO-NAME))) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA MACRO-FORM))) PROGRAM-ERROR) (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA MACRO-NAME))) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA MACRO-FORM)) NIL NIL) PROGRAM-ERROR)) T T T)))).
;; Compiling form (DEFUN TYPEP* (ELEMENT TYPE) (NOT (NOT (TYPEP ELEMENT TYPE)))).
;; Compiling form (DEFUN APPLYF (FN &REST ARGS) (ETYPECASE FN (SYMBOL (FUNCTION (LAMBDA (&REST MORE-ARGS) (APPLY (THE SYMBOL FN) (APPEND ARGS MORE-ARGS))))) (FUNCTION (FUNCTION (LAMBDA (&REST MORE-ARGS) (APPLY (THE FUNCTION FN) (APPEND ARGS MORE-ARGS))))))).
;; Compiling form (DEFUN SLOT-BOUNDP* (OBJECT SLOT) (NOTNOT (SLOT-BOUNDP OBJECT SLOT))).
;; Compiling form (DEFUN SLOT-EXISTS-P* (OBJECT SLOT) (NOTNOT (SLOT-EXISTS-P OBJECT SLOT))).
;; Compiling form (DEFUN MAP-SLOT-BOUNDP* (C SLOTS) (MAPCAR (APPLYF (FUNCTION SLOT-BOUNDP) C) SLOTS)).
;; Compiling form (DEFUN MAP-SLOT-EXISTS-P* (C SLOTS) (MAPCAR (APPLYF (FUNCTION SLOT-EXISTS-P*) C) SLOTS)).
;; Compiling form (DEFUN MAP-SLOT-VALUE (C SLOTS) (MAPCAR (APPLYF (FUNCTION SLOT-VALUE) C) SLOTS)).
;; Compiling form (DEFUN MAP-TYPEP* (OBJECT TYPES) (MAPCAR (APPLYF (FUNCTION TYPEP*) OBJECT) TYPES)).
;; Compiling form (DEFUN SLOT-VALUE-OR-NIL (OBJECT SLOT-NAME) (AND (SLOT-EXISTS-P OBJECT SLOT-NAME) (SLOT-BOUNDP OBJECT SLOT-NAME) (SLOT-VALUE OBJECT SLOT-NAME))).
;; Compiling form (DEFUN IS-NONCONTIGUOUS-SUBLIST-OF (LIST1 LIST2) (LOOP FOR X IN LIST1 DO (LOOP WHEN (NULL LIST2) DO (RETURN-FROM IS-NONCONTIGUOUS-SUBLIST-OF NIL) WHEN (EQL X (POP LIST2)) DO (RETURN)) FINALLY (RETURN T))).
;; Compiling form (DEFMACRO DEFHARMLESS (NAME FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (BLOCK DONE (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (&REST ARGS) (DECLARE (IGNORE ARGS)) (RETURN-FROM DONE :GOOD))))) (HANDLER-CASE (UNWIND-PROTECT (EVAL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FORM))) (RETURN-FROM DONE :GOOD)) (CONDITION NIL :GOOD)))) :GOOD))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN RATIONAL-SAFELY (X) "Rational a floating point number, making sure the rational
   number isn't 'too big'.  This is important in implementations such
   as clisp where the floating bounds can be very large." (ASSERT (FLOATP X)) (MULTIPLE-VALUE-BIND (SIGNIFICAND EXPONENT SIGN) (INTEGER-DECODE-FLOAT X) (LET ((LIMIT 1000) (RADIX (FLOAT-RADIX X))) (COND ((< EXPONENT (- LIMIT)) (* SIGNIFICAND (EXPT RADIX (- LIMIT)) SIGN)) ((> EXPONENT LIMIT) (* SIGNIFICAND (EXPT RADIX LIMIT) SIGN)) (T (RATIONAL X)))))).
;; Compiling form (DECLAIM (SPECIAL *SIMILARITY-LIST*)).
;; Compiling form (DEFUN IS-SIMILAR (X Y) (LET ((*SIMILARITY-LIST* NIL)) (IS-SIMILAR* X Y))).
;; Compiling form (DEFGENERIC IS-SIMILAR* (X Y)).
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X NUMBER) (Y NUMBER)) (AND (EQ (CLASS-OF X) (CLASS-OF Y)) (= X Y) T)).
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X CHARACTER) (Y CHARACTER)) (AND (CHAR= X Y) T)).
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X SYMBOL) (Y SYMBOL)) (IF (NULL (SYMBOL-PACKAGE X)) (AND (NULL (SYMBOL-PACKAGE Y)) (IS-SIMILAR* (SYMBOL-NAME X) (SYMBOL-NAME Y))) (EQ X Y)) T).
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X RANDOM-STATE) (Y RANDOM-STATE)) (LET ((COPY-OF-X (MAKE-RANDOM-STATE X)) (COPY-OF-Y (MAKE-RANDOM-STATE Y)) (BOUND (1- (ASH 1 24)))) (AND (LOOP REPEAT 50 ALWAYS (EQL (RANDOM BOUND COPY-OF-X) (RANDOM BOUND COPY-OF-Y))) T))).
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X CONS) (Y CONS)) (OR (AND (EQ X Y) T) (AND (LOOP FOR (X2 . Y2) IN *SIMILARITY-LIST* THEREIS (AND (EQ X X2) (EQ Y Y2))) T) (LET ((*SIMILARITY-LIST* (CONS (CONS X Y) *SIMILARITY-LIST*))) (AND (IS-SIMILAR* (CAR X) (CAR Y)) (IS-SIMILAR* (CDR X) (CDR Y)))))).
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X VECTOR) (Y VECTOR)) (OR (AND (EQ X Y) T) (AND (OR (NOT (TYPEP X (QUOTE SIMPLE-ARRAY))) (TYPEP X (QUOTE SIMPLE-ARRAY))) (= (LENGTH X) (LENGTH Y)) (IS-SIMILAR* (ARRAY-ELEMENT-TYPE X) (ARRAY-ELEMENT-TYPE Y)) (LOOP FOR I BELOW (LENGTH X) ALWAYS (IS-SIMILAR* (AREF X I) (AREF Y I))) T))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X ARRAY) (Y ARRAY)) (OR (AND (EQ X Y) T) (AND (OR (NOT (TYPEP X (QUOTE SIMPLE-ARRAY))) (TYPEP X (QUOTE SIMPLE-ARRAY))) (= (ARRAY-RANK X) (ARRAY-RANK Y)) (EQUAL (ARRAY-DIMENSIONS X) (ARRAY-DIMENSIONS Y)) (IS-SIMILAR* (ARRAY-ELEMENT-TYPE X) (ARRAY-ELEMENT-TYPE Y)) (LET ((*SIMILARITY-LIST* (CONS (CONS X Y) *SIMILARITY-LIST*))) (LOOP FOR I BELOW (ARRAY-TOTAL-SIZE X) ALWAYS (IS-SIMILAR* (ROW-MAJOR-AREF X I) (ROW-MAJOR-AREF Y I)))) T))).
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X HASH-TABLE) (Y HASH-TABLE)) (ERROR "Sorry, we're not computing this yet.")).
Style-Warning: #<Simple-Style-Warning Unused variable X.>
Style-Warning: #<Simple-Style-Warning Unused variable Y.>
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X PATHNAME) (Y PATHNAME)) (AND (IS-SIMILAR* (PATHNAME-HOST X) (PATHNAME-HOST Y)) (IS-SIMILAR* (PATHNAME-DEVICE X) (PATHNAME-DEVICE Y)) (IS-SIMILAR* (PATHNAME-DIRECTORY X) (PATHNAME-DIRECTORY Y)) (IS-SIMILAR* (PATHNAME-NAME X) (PATHNAME-NAME Y)) (IS-SIMILAR* (PATHNAME-TYPE X) (PATHNAME-TYPE Y)) (IS-SIMILAR* (PATHNAME-VERSION X) (PATHNAME-VERSION Y)) T)).
;; Compiling form (DEFMETHOD IS-SIMILAR* ((X T) (Y T)) (AND (EQL X Y) T)).
;; Compiling form (DEFPARAMETER *INITIAL-PRINT-PPRINT-DISPATCH* (IF (BOUNDP (QUOTE *PRINT-PPRINT-DISPATCH*)) *PRINT-PPRINT-DISPATCH* NIL)).
;; Compiling form (DEFMACRO MY-WITH-STANDARD-IO-SYNTAX (&BODY BODY) (SYSTEM.INTERNALS::BACKQUOTE (LET ((*PACKAGE* (FIND-PACKAGE "COMMON-LISP-USER")) (*PRINT-ARRAY* T) (*PRINT-BASE* 10) (*PRINT-CASE* :UPCASE) (*PRINT-CIRCLE* NIL) (*PRINT-ESCAPE* T) (*PRINT-GENSYM* T) (*PRINT-LENGTH* NIL) (*PRINT-LEVEL* NIL) (*PRINT-LINES* NIL) (*PRINT-MISER-WIDTH* NIL) (*PRINT-PPRINT-DISPATCH* *INITIAL-PRINT-PPRINT-DISPATCH*) (*PRINT-PRETTY* NIL) (*PRINT-RADIX* NIL) (*PRINT-READABLY* T) (*PRINT-RIGHT-MARGIN* NIL) (*READ-BASE* 10) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SINGLE-FLOAT)) (*READ-EVAL* T) (*READ-SUPPRESS* NIL) (*READTABLE* (COPY-READTABLE NIL))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN BODY)))).
;; Compiling form (DEFUN MAKE-SPECIAL-STRING (STRING &KEY FILL ADJUST DISPLACE BASE) (LET* ((LEN (LENGTH STRING)) (LEN2 (IF FILL (+ LEN 4) LEN)) (ETYPE (IF BASE (QUOTE BASE-CHAR) (QUOTE CHARACTER)))) (IF DISPLACE (LET ((S0 (MAKE-ARRAY (+ LEN2 5) :INITIAL-CONTENTS (CONCATENATE (QUOTE STRING) (MAKE-STRING 2 :INITIAL-ELEMENT #\X) STRING (MAKE-STRING (IF FILL 7 3) :INITIAL-ELEMENT #\Y)) :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY LEN2 :ELEMENT-TYPE ETYPE :ADJUSTABLE ADJUST :FILL-POINTER (IF FILL LEN NIL) :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 2)) (MAKE-ARRAY LEN2 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS (IF FILL (CONCATENATE (QUOTE STRING) STRING "ZZZZ") STRING) :FILL-POINTER (IF FILL LEN NIL) :ADJUSTABLE ADJUST)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMACRO DO-SPECIAL-STRINGS ((VAR STRING-FORM &OPTIONAL RET-FORM) &BODY FORMS) (LET ((STRING (GENSYM)) (FILL (GENSYM "FILL")) (ADJUST (GENSYM "ADJUST")) (BASE (GENSYM "BASE")) (DISPLACE (GENSYM "DISPLACE"))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA STRING) (SYSTEM.INTERNALS::BQ-COMMA STRING-FORM))) (DOLIST ((SYSTEM.INTERNALS::BQ-COMMA FILL) (QUOTE (NIL T)) (SYSTEM.INTERNALS::BQ-COMMA RET-FORM)) (DOLIST ((SYSTEM.INTERNALS::BQ-COMMA ADJUST) (QUOTE (NIL T))) (DOLIST ((SYSTEM.INTERNALS::BQ-COMMA BASE) (QUOTE (NIL T))) (DOLIST ((SYSTEM.INTERNALS::BQ-COMMA DISPLACE) (QUOTE (NIL T))) (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR) (MAKE-SPECIAL-STRING (SYSTEM.INTERNALS::BQ-COMMA STRING) :FILL (SYSTEM.INTERNALS::BQ-COMMA FILL) :ADJUST (SYSTEM.INTERNALS::BQ-COMMA ADJUST) :BASE (SYSTEM.INTERNALS::BQ-COMMA BASE) :DISPLACE (SYSTEM.INTERNALS::BQ-COMMA DISPLACE)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN FORMS)))))))))).
;; Compiling form (DEFUN MAKE-SPECIAL-INTEGER-VECTOR (CONTENTS &KEY FILL ADJUST DISPLACE (ETYPE (QUOTE INTEGER))) (LET* ((LEN (LENGTH CONTENTS)) (MIN (REDUCE (FUNCTION MIN) CONTENTS)) (MAX (REDUCE (FUNCTION MAX) CONTENTS)) (LEN2 (IF FILL (+ LEN 4) LEN))) (UNLESS (AND (TYPEP MIN ETYPE) (TYPEP MAX ETYPE)) (SETQ ETYPE (SYSTEM.INTERNALS::BACKQUOTE (INTEGER (SYSTEM.INTERNALS::BQ-COMMA MIN) (SYSTEM.INTERNALS::BQ-COMMA MAX))))) (IF DISPLACE (LET ((S0 (MAKE-ARRAY (+ LEN2 5) :INITIAL-CONTENTS (CONCATENATE (QUOTE LIST) (MAKE-LIST 2 :INITIAL-ELEMENT (IF (TYPEP 0 ETYPE) 0 MIN)) CONTENTS (MAKE-LIST (IF FILL 7 3) :INITIAL-ELEMENT (IF (TYPEP 1 ETYPE) 1 MAX))) :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY LEN2 :ELEMENT-TYPE ETYPE :ADJUSTABLE ADJUST :FILL-POINTER (IF FILL LEN NIL) :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 2)) (MAKE-ARRAY LEN2 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS (IF FILL (CONCATENATE (QUOTE LIST) CONTENTS (MAKE-LIST 4 :INITIAL-ELEMENT (IF (TYPEP 2 ETYPE) 2 (FLOOR (+ MIN MAX) 2)))) CONTENTS) :FILL-POINTER (IF FILL LEN NIL) :ADJUSTABLE ADJUST)))).
;; Compiling form (DEFMACRO DO-SPECIAL-INTEGER-VECTORS ((VAR VEC-FORM &OPTIONAL RET-FORM) &BODY FORMS) (LET ((VECTOR (GENSYM)) (FILL (GENSYM "FILL")) (ADJUST (GENSYM "ADJUST")) (ETYPE (GENSYM "ETYPE")) (DISPLACE (GENSYM "DISPLACE"))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA VECTOR) (SYSTEM.INTERNALS::BQ-COMMA VEC-FORM))) (DOLIST ((SYSTEM.INTERNALS::BQ-COMMA FILL) (QUOTE (NIL T)) (SYSTEM.INTERNALS::BQ-COMMA RET-FORM)) (DOLIST ((SYSTEM.INTERNALS::BQ-COMMA ADJUST) (QUOTE (NIL T))) (DOLIST ((SYSTEM.INTERNALS::BQ-COMMA ETYPE) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (APPEND (LOOP FOR I FROM 1 TO 32 COLLECT (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))) (LOOP FOR I FROM 2 TO 32 COLLECT (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))) (QUOTE (INTEGER)))))) (DOLIST ((SYSTEM.INTERNALS::BQ-COMMA DISPLACE) (QUOTE (NIL T))) (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR) (MAKE-SPECIAL-INTEGER-VECTOR (SYSTEM.INTERNALS::BQ-COMMA VECTOR) :FILL (SYSTEM.INTERNALS::BQ-COMMA FILL) :ADJUST (SYSTEM.INTERNALS::BQ-COMMA ADJUST) :ETYPE (SYSTEM.INTERNALS::BQ-COMMA ETYPE) :DISPLACE (SYSTEM.INTERNALS::BQ-COMMA DISPLACE)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN FORMS)))))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN STRING-DESIGNATOR-P (X) (HANDLER-CASE (PROGN (STRING X) T) (ERROR NIL))).
;; Compiling form (DEFUN APPROX= (X Y &OPTIONAL (EPS (EPSILON X))) (<= (ABS (/ (- X Y) (MAX (ABS X) 1))) EPS)).
;; Compiling form (DEFUN EPSILON (NUMBER) (ETYPECASE NUMBER (COMPLEX (* 2 (EPSILON (REALPART NUMBER)))) (SHORT-FLOAT SHORT-FLOAT-EPSILON) (SINGLE-FLOAT SINGLE-FLOAT-EPSILON) (DOUBLE-FLOAT DOUBLE-FLOAT-EPSILON) (LONG-FLOAT LONG-FLOAT-EPSILON) (RATIONAL 0))).
;; Compiling form (DEFUN NEGATIVE-EPSILON (NUMBER) (ETYPECASE NUMBER (COMPLEX (* 2 (NEGATIVE-EPSILON (REALPART NUMBER)))) (SHORT-FLOAT SHORT-FLOAT-NEGATIVE-EPSILON) (SINGLE-FLOAT SINGLE-FLOAT-NEGATIVE-EPSILON) (DOUBLE-FLOAT DOUBLE-FLOAT-NEGATIVE-EPSILON) (LONG-FLOAT LONG-FLOAT-NEGATIVE-EPSILON) (RATIONAL 0))).
;; Compiling form (DEFUN SEQUENCEP (X) (TYPEP X (QUOTE SEQUENCE))).
;; Compiling form (DEFUN TYPEF (TYPE) (FUNCTION (LAMBDA (X) (TYPEP X TYPE)))).
;; Compiling form (DEFUN PACKAGE-DESIGNATOR-P (X) "TRUE if x could be a package designator.  The package need not
   actually exist." (OR (PACKAGEP X) (HANDLER-CASE (AND (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (STRING X)) T) (TYPE-ERROR NIL NIL)))).
;; Compiling form (DEFMACRO DEF-FOLD-TEST (NAME FORM) "Create a test that FORM, which should produce a fresh value,
   does not improperly introduce sharing during constant folding." (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (FLET ((%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (SYSTEM.INTERNALS::BQ-COMMA FORM))) (EQ (%F) (%F))) NIL))).
;; Compiling form (DEFMACRO EXPAND-IN-CURRENT-ENV (MACRO-FORM &ENVIRONMENT ENV) (MACROEXPAND MACRO-FORM ENV)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (SETQ *COMPILE-VERBOSE* NIL *COMPILE-PRINT* NIL *LOAD-VERBOSE* NIL)
;; Loading (LOAD "gclload2.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/gclload2.lsp 809DFEC7>
;; Loading (LOAD "load-symbols.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-symbols.lsp 809F5687>
;; Loading (COMPILE-AND-LOAD "cl-symbols-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/cl-symbols-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DECLAIM (OPTIMIZE (SAFETY 3))).
;; Compiling form (DEFUN IS-EXTERNAL-SYMBOL-OF (SYM PACKAGE) (MULTIPLE-VALUE-BIND (SYM2 STATUS) (FIND-SYMBOL (SYMBOL-NAME SYM) PACKAGE) (AND (EQT SYM SYM2) (EQT STATUS :EXTERNAL)))).
;; Compiling form (DEFUN TEST-IF-NOT-IN-CL-PACKAGE (STR) (MULTIPLE-VALUE-BIND (SYM STATUS) (FIND-SYMBOL (STRING-UPCASE STR) (QUOTE COMMON-LISP)) (OR (NOT (EQT STATUS :EXTERNAL)) (LET ((PLIST (SYMBOL-PLIST SYM))) (LOOP FOR E = PLIST THEN (CDDR E) FOR INDICATOR = (CAR E) WHILE E WHEN (AND (SYMBOLP INDICATOR) (OR (IS-EXTERNAL-SYMBOL-OF INDICATOR "COMMON-LISP") (IS-EXTERNAL-SYMBOL-OF INDICATOR "KEYWORD") (EQT INDICATOR (FIND-SYMBOL (SYMBOL-NAME INDICATOR) "COMMON-LISP-USER")))) COLLECT INDICATOR))))).
;; Compiling form (DEFUN SAFE-SYMBOL-NAME (SYM) (CATCH-TYPE-ERROR (SYMBOL-NAME SYM))).
;; Compiling form (DEFUN SAFE-MAKE-SYMBOL (NAME) (CATCH-TYPE-ERROR (MAKE-SYMBOL NAME))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cl-symbols-aux.llf 80EBC3A7>
;; Loading (LOAD "cl-symbols.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cl-symbols.lsp 80F49157>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST SYMBOL-&ALLOW-OTHER-KEYS (TEST-IF-NOT-IN-CL-PACKAGE "&allow-other-keys") NIL)
;; Loading (DEFTEST SYMBOL-&AUX (TEST-IF-NOT-IN-CL-PACKAGE "&aux") NIL)
;; Loading (DEFTEST SYMBOL-&BODY (TEST-IF-NOT-IN-CL-PACKAGE "&body") NIL)
;; Loading (DEFTEST SYMBOL-&ENVIRONMENT (TEST-IF-NOT-IN-CL-PACKAGE "&environment") NIL)
;; Loading (DEFTEST SYMBOL-&KEY (TEST-IF-NOT-IN-CL-PACKAGE "&key") NIL)
;; Loading (DEFTEST SYMBOL-&OPTIONAL (TEST-IF-NOT-IN-CL-PACKAGE "&optional") NIL)
;; Loading (DEFTEST SYMBOL-&REST (TEST-IF-NOT-IN-CL-PACKAGE "&rest") NIL)
;; Loading (DEFTEST SYMBOL-&WHOLE (TEST-IF-NOT-IN-CL-PACKAGE "&whole") NIL)
;; Loading (DEFTEST SYMBOL-* (TEST-IF-NOT-IN-CL-PACKAGE "*") NIL)
;; Loading (DEFTEST SYMBOL-** (TEST-IF-NOT-IN-CL-PACKAGE "**") NIL)
;; Loading (DEFTEST SYMBOL-*** (TEST-IF-NOT-IN-CL-PACKAGE "***") NIL)
;; Loading (DEFTEST SYMBOL-*BREAK-ON-SIGNALS* (TEST-IF-NOT-IN-CL-PACKAGE "*break-on-signals*") NIL)
;; Loading (DEFTEST SYMBOL-*COMPILE-FILE-PATHNAME* (TEST-IF-NOT-IN-CL-PACKAGE "*compile-file-pathname*") NIL)
;; Loading (DEFTEST SYMBOL-*COMPILE-FILE-TRUENAME* (TEST-IF-NOT-IN-CL-PACKAGE "*compile-file-truename*") NIL)
;; Loading (DEFTEST SYMBOL-*COMPILE-PRINT* (TEST-IF-NOT-IN-CL-PACKAGE "*compile-print*") NIL)
;; Loading (DEFTEST SYMBOL-*COMPILE-VERBOSE* (TEST-IF-NOT-IN-CL-PACKAGE "*compile-verbose*") NIL)
;; Loading (DEFTEST SYMBOL-*DEBUG-IO* (TEST-IF-NOT-IN-CL-PACKAGE "*debug-io*") NIL)
;; Loading (DEFTEST SYMBOL-*DEBUGGER-HOOK* (TEST-IF-NOT-IN-CL-PACKAGE "*debugger-hook*") NIL)
;; Loading (DEFTEST SYMBOL-*DEFAULT-PATHNAME-DEFAULTS* (TEST-IF-NOT-IN-CL-PACKAGE "*default-pathname-defaults*") NIL)
;; Loading (DEFTEST SYMBOL-*ERROR-OUTPUT* (TEST-IF-NOT-IN-CL-PACKAGE "*error-output*") NIL)
;; Loading (DEFTEST SYMBOL-*FEATURES* (TEST-IF-NOT-IN-CL-PACKAGE "*features*") NIL)
;; Loading (DEFTEST SYMBOL-*GENSYM-COUNTER* (TEST-IF-NOT-IN-CL-PACKAGE "*gensym-counter*") NIL)
;; Loading (DEFTEST SYMBOL-*LOAD-PATHNAME* (TEST-IF-NOT-IN-CL-PACKAGE "*load-pathname*") NIL)
;; Loading (DEFTEST SYMBOL-*LOAD-PRINT* (TEST-IF-NOT-IN-CL-PACKAGE "*load-print*") NIL)
;; Loading (DEFTEST SYMBOL-*LOAD-TRUENAME* (TEST-IF-NOT-IN-CL-PACKAGE "*load-truename*") NIL)
;; Loading (DEFTEST SYMBOL-*LOAD-VERBOSE* (TEST-IF-NOT-IN-CL-PACKAGE "*load-verbose*") NIL)
;; Loading (DEFTEST SYMBOL-*MACROEXPAND-HOOK* (TEST-IF-NOT-IN-CL-PACKAGE "*macroexpand-hook*") NIL)
;; Loading (DEFTEST SYMBOL-*MODULES* (TEST-IF-NOT-IN-CL-PACKAGE "*modules*") NIL)
;; Loading (DEFTEST SYMBOL-*PACKAGE* (TEST-IF-NOT-IN-CL-PACKAGE "*package*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-ARRAY* (TEST-IF-NOT-IN-CL-PACKAGE "*print-array*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-BASE* (TEST-IF-NOT-IN-CL-PACKAGE "*print-base*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-CASE* (TEST-IF-NOT-IN-CL-PACKAGE "*print-case*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-CIRCLE* (TEST-IF-NOT-IN-CL-PACKAGE "*print-circle*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-ESCAPE* (TEST-IF-NOT-IN-CL-PACKAGE "*print-escape*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-GENSYM* (TEST-IF-NOT-IN-CL-PACKAGE "*print-gensym*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-LENGTH* (TEST-IF-NOT-IN-CL-PACKAGE "*print-length*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-LEVEL* (TEST-IF-NOT-IN-CL-PACKAGE "*print-level*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-LINES* (TEST-IF-NOT-IN-CL-PACKAGE "*print-lines*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-MISER-WIDTH* (TEST-IF-NOT-IN-CL-PACKAGE "*print-miser-width*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-PPRINT-DISPATCH* (TEST-IF-NOT-IN-CL-PACKAGE "*print-pprint-dispatch*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-PRETTY* (TEST-IF-NOT-IN-CL-PACKAGE "*print-pretty*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-RADIX* (TEST-IF-NOT-IN-CL-PACKAGE "*print-radix*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-READABLY* (TEST-IF-NOT-IN-CL-PACKAGE "*print-readably*") NIL)
;; Loading (DEFTEST SYMBOL-*PRINT-RIGHT-MARGIN* (TEST-IF-NOT-IN-CL-PACKAGE "*print-right-margin*") NIL)
;; Loading (DEFTEST SYMBOL-*QUERY-IO* (TEST-IF-NOT-IN-CL-PACKAGE "*query-io*") NIL)
;; Loading (DEFTEST SYMBOL-*RANDOM-STATE* (TEST-IF-NOT-IN-CL-PACKAGE "*random-state*") NIL)
;; Loading (DEFTEST SYMBOL-*READ-BASE* (TEST-IF-NOT-IN-CL-PACKAGE "*read-base*") NIL)
;; Loading (DEFTEST SYMBOL-*READ-DEFAULT-FLOAT-FORMAT* (TEST-IF-NOT-IN-CL-PACKAGE "*read-default-float-format*") NIL)
;; Loading (DEFTEST SYMBOL-*READ-EVAL* (TEST-IF-NOT-IN-CL-PACKAGE "*read-eval*") NIL)
;; Loading (DEFTEST SYMBOL-*READ-SUPPRESS* (TEST-IF-NOT-IN-CL-PACKAGE "*read-suppress*") NIL)
;; Loading (DEFTEST SYMBOL-*READTABLE* (TEST-IF-NOT-IN-CL-PACKAGE "*readtable*") NIL)
;; Loading (DEFTEST SYMBOL-*STANDARD-INPUT* (TEST-IF-NOT-IN-CL-PACKAGE "*standard-input*") NIL)
;; Loading (DEFTEST SYMBOL-*STANDARD-OUTPUT* (TEST-IF-NOT-IN-CL-PACKAGE "*standard-output*") NIL)
;; Loading (DEFTEST SYMBOL-*TERMINAL-IO* (TEST-IF-NOT-IN-CL-PACKAGE "*terminal-io*") NIL)
;; Loading (DEFTEST SYMBOL-*TRACE-OUTPUT* (TEST-IF-NOT-IN-CL-PACKAGE "*trace-output*") NIL)
;; Loading (DEFTEST SYMBOL-+ (TEST-IF-NOT-IN-CL-PACKAGE "+") NIL)
;; Loading (DEFTEST SYMBOL-++ (TEST-IF-NOT-IN-CL-PACKAGE "++") NIL)
;; Loading (DEFTEST SYMBOL-+++ (TEST-IF-NOT-IN-CL-PACKAGE "+++") NIL)
;; Loading (DEFTEST SYMBOL-- (TEST-IF-NOT-IN-CL-PACKAGE "-") NIL)
;; Loading (DEFTEST SYMBOL-/ (TEST-IF-NOT-IN-CL-PACKAGE "/") NIL)
;; Loading (DEFTEST SYMBOL-// (TEST-IF-NOT-IN-CL-PACKAGE "//") NIL)
;; Loading (DEFTEST SYMBOL-/// (TEST-IF-NOT-IN-CL-PACKAGE "///") NIL)
;; Loading (DEFTEST SYMBOL-/= (TEST-IF-NOT-IN-CL-PACKAGE "/=") NIL)
;; Loading (DEFTEST SYMBOL-1+ (TEST-IF-NOT-IN-CL-PACKAGE "1+") NIL)
;; Loading (DEFTEST SYMBOL-1- (TEST-IF-NOT-IN-CL-PACKAGE "1-") NIL)
;; Loading (DEFTEST SYMBOL-< (TEST-IF-NOT-IN-CL-PACKAGE "<") NIL)
;; Loading (DEFTEST SYMBOL-<= (TEST-IF-NOT-IN-CL-PACKAGE "<=") NIL)
;; Loading (DEFTEST SYMBOL-= (TEST-IF-NOT-IN-CL-PACKAGE "=") NIL)
;; Loading (DEFTEST SYMBOL-> (TEST-IF-NOT-IN-CL-PACKAGE ">") NIL)
;; Loading (DEFTEST SYMBOL->= (TEST-IF-NOT-IN-CL-PACKAGE ">=") NIL)
;; Loading (DEFTEST SYMBOL-ABORT (TEST-IF-NOT-IN-CL-PACKAGE "abort") NIL)
;; Loading (DEFTEST SYMBOL-ABS (TEST-IF-NOT-IN-CL-PACKAGE "abs") NIL)
;; Loading (DEFTEST SYMBOL-ACONS (TEST-IF-NOT-IN-CL-PACKAGE "acons") NIL)
;; Loading (DEFTEST SYMBOL-ACOS (TEST-IF-NOT-IN-CL-PACKAGE "acos") NIL)
;; Loading (DEFTEST SYMBOL-ACOSH (TEST-IF-NOT-IN-CL-PACKAGE "acosh") NIL)
;; Loading (DEFTEST SYMBOL-ADD-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "add-method") NIL)
;; Loading (DEFTEST SYMBOL-ADJOIN (TEST-IF-NOT-IN-CL-PACKAGE "adjoin") NIL)
;; Loading (DEFTEST SYMBOL-ADJUST-ARRAY (TEST-IF-NOT-IN-CL-PACKAGE "adjust-array") NIL)
;; Loading (DEFTEST SYMBOL-ADJUSTABLE-ARRAY-P (TEST-IF-NOT-IN-CL-PACKAGE "adjustable-array-p") NIL)
;; Loading (DEFTEST SYMBOL-ALLOCATE-INSTANCE (TEST-IF-NOT-IN-CL-PACKAGE "allocate-instance") NIL)
;; Loading (DEFTEST SYMBOL-ALPHA-CHAR-P (TEST-IF-NOT-IN-CL-PACKAGE "alpha-char-p") NIL)
;; Loading (DEFTEST SYMBOL-ALPHANUMERICP (TEST-IF-NOT-IN-CL-PACKAGE "alphanumericp") NIL)
;; Loading (DEFTEST SYMBOL-AND (TEST-IF-NOT-IN-CL-PACKAGE "and") NIL)
;; Loading (DEFTEST SYMBOL-APPEND (TEST-IF-NOT-IN-CL-PACKAGE "append") NIL)
;; Loading (DEFTEST SYMBOL-APPLY (TEST-IF-NOT-IN-CL-PACKAGE "apply") NIL)
;; Loading (DEFTEST SYMBOL-APROPOS (TEST-IF-NOT-IN-CL-PACKAGE "apropos") NIL)
;; Loading (DEFTEST SYMBOL-APROPOS-LIST (TEST-IF-NOT-IN-CL-PACKAGE "apropos-list") NIL)
;; Loading (DEFTEST SYMBOL-AREF (TEST-IF-NOT-IN-CL-PACKAGE "aref") NIL)
;; Loading (DEFTEST SYMBOL-ARITHMETIC-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "arithmetic-error") NIL)
;; Loading (DEFTEST SYMBOL-ARITHMETIC-ERROR-OPERANDS (TEST-IF-NOT-IN-CL-PACKAGE "arithmetic-error-operands") NIL)
;; Loading (DEFTEST SYMBOL-ARITHMETIC-ERROR-OPERATION (TEST-IF-NOT-IN-CL-PACKAGE "arithmetic-error-operation") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY (TEST-IF-NOT-IN-CL-PACKAGE "array") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-DIMENSION (TEST-IF-NOT-IN-CL-PACKAGE "array-dimension") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-DIMENSION-LIMIT (TEST-IF-NOT-IN-CL-PACKAGE "array-dimension-limit") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-DIMENSIONS (TEST-IF-NOT-IN-CL-PACKAGE "array-dimensions") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-DISPLACEMENT (TEST-IF-NOT-IN-CL-PACKAGE "array-displacement") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-ELEMENT-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "array-element-type") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-HAS-FILL-POINTER-P (TEST-IF-NOT-IN-CL-PACKAGE "array-has-fill-pointer-p") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-IN-BOUNDS-P (TEST-IF-NOT-IN-CL-PACKAGE "array-in-bounds-p") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-RANK (TEST-IF-NOT-IN-CL-PACKAGE "array-rank") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-RANK-LIMIT (TEST-IF-NOT-IN-CL-PACKAGE "array-rank-limit") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-ROW-MAJOR-INDEX (TEST-IF-NOT-IN-CL-PACKAGE "array-row-major-index") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-TOTAL-SIZE (TEST-IF-NOT-IN-CL-PACKAGE "array-total-size") NIL)
;; Loading (DEFTEST SYMBOL-ARRAY-TOTAL-SIZE-LIMIT (TEST-IF-NOT-IN-CL-PACKAGE "array-total-size-limit") NIL)
;; Loading (DEFTEST SYMBOL-ARRAYP (TEST-IF-NOT-IN-CL-PACKAGE "arrayp") NIL)
;; Loading (DEFTEST SYMBOL-ASH (TEST-IF-NOT-IN-CL-PACKAGE "ash") NIL)
;; Loading (DEFTEST SYMBOL-ASIN (TEST-IF-NOT-IN-CL-PACKAGE "asin") NIL)
;; Loading (DEFTEST SYMBOL-ASINH (TEST-IF-NOT-IN-CL-PACKAGE "asinh") NIL)
;; Loading (DEFTEST SYMBOL-ASSERT (TEST-IF-NOT-IN-CL-PACKAGE "assert") NIL)
;; Loading (DEFTEST SYMBOL-ASSOC (TEST-IF-NOT-IN-CL-PACKAGE "assoc") NIL)
;; Loading (DEFTEST SYMBOL-ASSOC-IF (TEST-IF-NOT-IN-CL-PACKAGE "assoc-if") NIL)
;; Loading (DEFTEST SYMBOL-ASSOC-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "assoc-if-not") NIL)
;; Loading (DEFTEST SYMBOL-ATAN (TEST-IF-NOT-IN-CL-PACKAGE "atan") NIL)
;; Loading (DEFTEST SYMBOL-ATANH (TEST-IF-NOT-IN-CL-PACKAGE "atanh") NIL)
;; Loading (DEFTEST SYMBOL-ATOM (TEST-IF-NOT-IN-CL-PACKAGE "atom") NIL)
;; Loading (DEFTEST SYMBOL-BASE-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "base-char") NIL)
;; Loading (DEFTEST SYMBOL-BASE-STRING (TEST-IF-NOT-IN-CL-PACKAGE "base-string") NIL)
;; Loading (DEFTEST SYMBOL-BIGNUM (TEST-IF-NOT-IN-CL-PACKAGE "bignum") NIL)
;; Loading (DEFTEST SYMBOL-BIT (TEST-IF-NOT-IN-CL-PACKAGE "bit") NIL)
;; Loading (DEFTEST SYMBOL-BIT-AND (TEST-IF-NOT-IN-CL-PACKAGE "bit-and") NIL)
;; Loading (DEFTEST SYMBOL-BIT-ANDC1 (TEST-IF-NOT-IN-CL-PACKAGE "bit-andc1") NIL)
;; Loading (DEFTEST SYMBOL-BIT-ANDC2 (TEST-IF-NOT-IN-CL-PACKAGE "bit-andc2") NIL)
;; Loading (DEFTEST SYMBOL-BIT-EQV (TEST-IF-NOT-IN-CL-PACKAGE "bit-eqv") NIL)
;; Loading (DEFTEST SYMBOL-BIT-IOR (TEST-IF-NOT-IN-CL-PACKAGE "bit-ior") NIL)
;; Loading (DEFTEST SYMBOL-BIT-NAND (TEST-IF-NOT-IN-CL-PACKAGE "bit-nand") NIL)
;; Loading (DEFTEST SYMBOL-BIT-NOR (TEST-IF-NOT-IN-CL-PACKAGE "bit-nor") NIL)
;; Loading (DEFTEST SYMBOL-BIT-NOT (TEST-IF-NOT-IN-CL-PACKAGE "bit-not") NIL)
;; Loading (DEFTEST SYMBOL-BIT-ORC1 (TEST-IF-NOT-IN-CL-PACKAGE "bit-orc1") NIL)
;; Loading (DEFTEST SYMBOL-BIT-ORC2 (TEST-IF-NOT-IN-CL-PACKAGE "bit-orc2") NIL)
;; Loading (DEFTEST SYMBOL-BIT-VECTOR (TEST-IF-NOT-IN-CL-PACKAGE "bit-vector") NIL)
;; Loading (DEFTEST SYMBOL-BIT-VECTOR-P (TEST-IF-NOT-IN-CL-PACKAGE "bit-vector-p") NIL)
;; Loading (DEFTEST SYMBOL-BIT-XOR (TEST-IF-NOT-IN-CL-PACKAGE "bit-xor") NIL)
;; Loading (DEFTEST SYMBOL-BLOCK (TEST-IF-NOT-IN-CL-PACKAGE "block") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE (TEST-IF-NOT-IN-CL-PACKAGE "boole") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-1 (TEST-IF-NOT-IN-CL-PACKAGE "boole-1") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-2 (TEST-IF-NOT-IN-CL-PACKAGE "boole-2") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-AND (TEST-IF-NOT-IN-CL-PACKAGE "boole-and") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-ANDC1 (TEST-IF-NOT-IN-CL-PACKAGE "boole-andc1") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-ANDC2 (TEST-IF-NOT-IN-CL-PACKAGE "boole-andc2") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-C1 (TEST-IF-NOT-IN-CL-PACKAGE "boole-c1") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-C2 (TEST-IF-NOT-IN-CL-PACKAGE "boole-c2") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-CLR (TEST-IF-NOT-IN-CL-PACKAGE "boole-clr") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-EQV (TEST-IF-NOT-IN-CL-PACKAGE "boole-eqv") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-IOR (TEST-IF-NOT-IN-CL-PACKAGE "boole-ior") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-NAND (TEST-IF-NOT-IN-CL-PACKAGE "boole-nand") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-NOR (TEST-IF-NOT-IN-CL-PACKAGE "boole-nor") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-ORC1 (TEST-IF-NOT-IN-CL-PACKAGE "boole-orc1") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-ORC2 (TEST-IF-NOT-IN-CL-PACKAGE "boole-orc2") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-SET (TEST-IF-NOT-IN-CL-PACKAGE "boole-set") NIL)
;; Loading (DEFTEST SYMBOL-BOOLE-XOR (TEST-IF-NOT-IN-CL-PACKAGE "boole-xor") NIL)
;; Loading (DEFTEST SYMBOL-BOOLEAN (TEST-IF-NOT-IN-CL-PACKAGE "boolean") NIL)
;; Loading (DEFTEST SYMBOL-BOTH-CASE-P (TEST-IF-NOT-IN-CL-PACKAGE "both-case-p") NIL)
;; Loading (DEFTEST SYMBOL-BOUNDP (TEST-IF-NOT-IN-CL-PACKAGE "boundp") NIL)
;; Loading (DEFTEST SYMBOL-BREAK (TEST-IF-NOT-IN-CL-PACKAGE "break") NIL)
;; Loading (DEFTEST SYMBOL-BROADCAST-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "broadcast-stream") NIL)
;; Loading (DEFTEST SYMBOL-BROADCAST-STREAM-STREAMS (TEST-IF-NOT-IN-CL-PACKAGE "broadcast-stream-streams") NIL)
;; Loading (DEFTEST SYMBOL-BUILT-IN-CLASS (TEST-IF-NOT-IN-CL-PACKAGE "built-in-class") NIL)
;; Loading (DEFTEST SYMBOL-BUTLAST (TEST-IF-NOT-IN-CL-PACKAGE "butlast") NIL)
;; Loading (DEFTEST SYMBOL-BYTE (TEST-IF-NOT-IN-CL-PACKAGE "byte") NIL)
;; Loading (DEFTEST SYMBOL-BYTE-POSITION (TEST-IF-NOT-IN-CL-PACKAGE "byte-position") NIL)
;; Loading (DEFTEST SYMBOL-BYTE-SIZE (TEST-IF-NOT-IN-CL-PACKAGE "byte-size") NIL)
;; Loading (DEFTEST SYMBOL-CAAAAR (TEST-IF-NOT-IN-CL-PACKAGE "caaaar") NIL)
;; Loading (DEFTEST SYMBOL-CAAADR (TEST-IF-NOT-IN-CL-PACKAGE "caaadr") NIL)
;; Loading (DEFTEST SYMBOL-CAAAR (TEST-IF-NOT-IN-CL-PACKAGE "caaar") NIL)
;; Loading (DEFTEST SYMBOL-CAADAR (TEST-IF-NOT-IN-CL-PACKAGE "caadar") NIL)
;; Loading (DEFTEST SYMBOL-CAADDR (TEST-IF-NOT-IN-CL-PACKAGE "caaddr") NIL)
;; Loading (DEFTEST SYMBOL-CAADR (TEST-IF-NOT-IN-CL-PACKAGE "caadr") NIL)
;; Loading (DEFTEST SYMBOL-CAAR (TEST-IF-NOT-IN-CL-PACKAGE "caar") NIL)
;; Loading (DEFTEST SYMBOL-CADAAR (TEST-IF-NOT-IN-CL-PACKAGE "cadaar") NIL)
;; Loading (DEFTEST SYMBOL-CADADR (TEST-IF-NOT-IN-CL-PACKAGE "cadadr") NIL)
;; Loading (DEFTEST SYMBOL-CADAR (TEST-IF-NOT-IN-CL-PACKAGE "cadar") NIL)
;; Loading (DEFTEST SYMBOL-CADDAR (TEST-IF-NOT-IN-CL-PACKAGE "caddar") NIL)
;; Loading (DEFTEST SYMBOL-CADDDR (TEST-IF-NOT-IN-CL-PACKAGE "cadddr") NIL)
;; Loading (DEFTEST SYMBOL-CADDR (TEST-IF-NOT-IN-CL-PACKAGE "caddr") NIL)
;; Loading (DEFTEST SYMBOL-CADR (TEST-IF-NOT-IN-CL-PACKAGE "cadr") NIL)
;; Loading (DEFTEST SYMBOL-CALL-ARGUMENTS-LIMIT (TEST-IF-NOT-IN-CL-PACKAGE "call-arguments-limit") NIL)
;; Loading (DEFTEST SYMBOL-CALL-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "call-method") NIL)
;; Loading (DEFTEST SYMBOL-CALL-NEXT-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "call-next-method") NIL)
;; Loading (DEFTEST SYMBOL-CAR (TEST-IF-NOT-IN-CL-PACKAGE "car") NIL)
;; Loading (DEFTEST SYMBOL-CASE (TEST-IF-NOT-IN-CL-PACKAGE "case") NIL)
;; Loading (DEFTEST SYMBOL-CATCH (TEST-IF-NOT-IN-CL-PACKAGE "catch") NIL)
;; Loading (DEFTEST SYMBOL-CCASE (TEST-IF-NOT-IN-CL-PACKAGE "ccase") NIL)
;; Loading (DEFTEST SYMBOL-CDAAAR (TEST-IF-NOT-IN-CL-PACKAGE "cdaaar") NIL)
;; Loading (DEFTEST SYMBOL-CDAADR (TEST-IF-NOT-IN-CL-PACKAGE "cdaadr") NIL)
;; Loading (DEFTEST SYMBOL-CDAAR (TEST-IF-NOT-IN-CL-PACKAGE "cdaar") NIL)
;; Loading (DEFTEST SYMBOL-CDADAR (TEST-IF-NOT-IN-CL-PACKAGE "cdadar") NIL)
;; Loading (DEFTEST SYMBOL-CDADDR (TEST-IF-NOT-IN-CL-PACKAGE "cdaddr") NIL)
;; Loading (DEFTEST SYMBOL-CDADR (TEST-IF-NOT-IN-CL-PACKAGE "cdadr") NIL)
;; Loading (DEFTEST SYMBOL-CDAR (TEST-IF-NOT-IN-CL-PACKAGE "cdar") NIL)
;; Loading (DEFTEST SYMBOL-CDDAAR (TEST-IF-NOT-IN-CL-PACKAGE "cddaar") NIL)
;; Loading (DEFTEST SYMBOL-CDDADR (TEST-IF-NOT-IN-CL-PACKAGE "cddadr") NIL)
;; Loading (DEFTEST SYMBOL-CDDAR (TEST-IF-NOT-IN-CL-PACKAGE "cddar") NIL)
;; Loading (DEFTEST SYMBOL-CDDDAR (TEST-IF-NOT-IN-CL-PACKAGE "cdddar") NIL)
;; Loading (DEFTEST SYMBOL-CDDDDR (TEST-IF-NOT-IN-CL-PACKAGE "cddddr") NIL)
;; Loading (DEFTEST SYMBOL-CDDDR (TEST-IF-NOT-IN-CL-PACKAGE "cdddr") NIL)
;; Loading (DEFTEST SYMBOL-CDDR (TEST-IF-NOT-IN-CL-PACKAGE "cddr") NIL)
;; Loading (DEFTEST SYMBOL-CDR (TEST-IF-NOT-IN-CL-PACKAGE "cdr") NIL)
;; Loading (DEFTEST SYMBOL-CEILING (TEST-IF-NOT-IN-CL-PACKAGE "ceiling") NIL)
;; Loading (DEFTEST SYMBOL-CELL-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "cell-error") NIL)
;; Loading (DEFTEST SYMBOL-CELL-ERROR-NAME (TEST-IF-NOT-IN-CL-PACKAGE "cell-error-name") NIL)
;; Loading (DEFTEST SYMBOL-CERROR (TEST-IF-NOT-IN-CL-PACKAGE "cerror") NIL)
;; Loading (DEFTEST SYMBOL-CHANGE-CLASS (TEST-IF-NOT-IN-CL-PACKAGE "change-class") NIL)
;; Loading (DEFTEST SYMBOL-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "char") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-CODE (TEST-IF-NOT-IN-CL-PACKAGE "char-code") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-CODE-LIMIT (TEST-IF-NOT-IN-CL-PACKAGE "char-code-limit") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-DOWNCASE (TEST-IF-NOT-IN-CL-PACKAGE "char-downcase") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-EQUAL (TEST-IF-NOT-IN-CL-PACKAGE "char-equal") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-GREATERP (TEST-IF-NOT-IN-CL-PACKAGE "char-greaterp") NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SYMBOL-CHAR-INT (TEST-IF-NOT-IN-CL-PACKAGE "char-int") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-LESSP (TEST-IF-NOT-IN-CL-PACKAGE "char-lessp") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-NAME (TEST-IF-NOT-IN-CL-PACKAGE "char-name") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-NOT-EQUAL (TEST-IF-NOT-IN-CL-PACKAGE "char-not-equal") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-NOT-GREATERP (TEST-IF-NOT-IN-CL-PACKAGE "char-not-greaterp") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-NOT-LESSP (TEST-IF-NOT-IN-CL-PACKAGE "char-not-lessp") NIL)
;; Loading (DEFTEST SYMBOL-CHAR-UPCASE (TEST-IF-NOT-IN-CL-PACKAGE "char-upcase") NIL)
;; Loading (DEFTEST SYMBOL-CHAR/= (TEST-IF-NOT-IN-CL-PACKAGE "char/=") NIL)
;; Loading (DEFTEST SYMBOL-CHAR< (TEST-IF-NOT-IN-CL-PACKAGE "char<") NIL)
;; Loading (DEFTEST SYMBOL-CHAR<= (TEST-IF-NOT-IN-CL-PACKAGE "char<=") NIL)
;; Loading (DEFTEST SYMBOL-CHAR= (TEST-IF-NOT-IN-CL-PACKAGE "char=") NIL)
;; Loading (DEFTEST SYMBOL-CHAR> (TEST-IF-NOT-IN-CL-PACKAGE "char>") NIL)
;; Loading (DEFTEST SYMBOL-CHAR>= (TEST-IF-NOT-IN-CL-PACKAGE "char>=") NIL)
;; Loading (DEFTEST SYMBOL-CHARACTER (TEST-IF-NOT-IN-CL-PACKAGE "character") NIL)
;; Loading (DEFTEST SYMBOL-CHARACTERP (TEST-IF-NOT-IN-CL-PACKAGE "characterp") NIL)
;; Loading (DEFTEST SYMBOL-CHECK-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "check-type") NIL)
;; Loading (DEFTEST SYMBOL-CIS (TEST-IF-NOT-IN-CL-PACKAGE "cis") NIL)
;; Loading (DEFTEST SYMBOL-CLASS (TEST-IF-NOT-IN-CL-PACKAGE "class") NIL)
;; Loading (DEFTEST SYMBOL-CLASS-NAME (TEST-IF-NOT-IN-CL-PACKAGE "class-name") NIL)
;; Loading (DEFTEST SYMBOL-CLASS-OF (TEST-IF-NOT-IN-CL-PACKAGE "class-of") NIL)
;; Loading (DEFTEST SYMBOL-CLEAR-INPUT (TEST-IF-NOT-IN-CL-PACKAGE "clear-input") NIL)
;; Loading (DEFTEST SYMBOL-CLEAR-OUTPUT (TEST-IF-NOT-IN-CL-PACKAGE "clear-output") NIL)
;; Loading (DEFTEST SYMBOL-CLOSE (TEST-IF-NOT-IN-CL-PACKAGE "close") NIL)
;; Loading (DEFTEST SYMBOL-CLRHASH (TEST-IF-NOT-IN-CL-PACKAGE "clrhash") NIL)
;; Loading (DEFTEST SYMBOL-CODE-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "code-char") NIL)
;; Loading (DEFTEST SYMBOL-COERCE (TEST-IF-NOT-IN-CL-PACKAGE "coerce") NIL)
;; Loading (DEFTEST SYMBOL-COMPILATION-SPEED (TEST-IF-NOT-IN-CL-PACKAGE "compilation-speed") NIL)
;; Loading (DEFTEST SYMBOL-COMPILE (TEST-IF-NOT-IN-CL-PACKAGE "compile") NIL)
;; Loading (DEFTEST SYMBOL-COMPILE-FILE (TEST-IF-NOT-IN-CL-PACKAGE "compile-file") NIL)
;; Loading (DEFTEST SYMBOL-COMPILE-FILE-PATHNAME (TEST-IF-NOT-IN-CL-PACKAGE "compile-file-pathname") NIL)
;; Loading (DEFTEST SYMBOL-COMPILED-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "compiled-function") NIL)
;; Loading (DEFTEST SYMBOL-COMPILED-FUNCTION-P (TEST-IF-NOT-IN-CL-PACKAGE "compiled-function-p") NIL)
;; Loading (DEFTEST SYMBOL-COMPILER-MACRO (TEST-IF-NOT-IN-CL-PACKAGE "compiler-macro") NIL)
;; Loading (DEFTEST SYMBOL-COMPILER-MACRO-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "compiler-macro-function") NIL)
;; Loading (DEFTEST SYMBOL-COMPLEMENT (TEST-IF-NOT-IN-CL-PACKAGE "complement") NIL)
;; Loading (DEFTEST SYMBOL-COMPLEX (TEST-IF-NOT-IN-CL-PACKAGE "complex") NIL)
;; Loading (DEFTEST SYMBOL-COMPLEXP (TEST-IF-NOT-IN-CL-PACKAGE "complexp") NIL)
;; Loading (DEFTEST SYMBOL-COMPUTE-APPLICABLE-METHODS (TEST-IF-NOT-IN-CL-PACKAGE "compute-applicable-methods") NIL)
;; Loading (DEFTEST SYMBOL-COMPUTE-RESTARTS (TEST-IF-NOT-IN-CL-PACKAGE "compute-restarts") NIL)
;; Loading (DEFTEST SYMBOL-CONCATENATE (TEST-IF-NOT-IN-CL-PACKAGE "concatenate") NIL)
;; Loading (DEFTEST SYMBOL-CONCATENATED-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "concatenated-stream") NIL)
;; Loading (DEFTEST SYMBOL-CONCATENATED-STREAM-STREAMS (TEST-IF-NOT-IN-CL-PACKAGE "concatenated-stream-streams") NIL)
;; Loading (DEFTEST SYMBOL-COND (TEST-IF-NOT-IN-CL-PACKAGE "cond") NIL)
;; Loading (DEFTEST SYMBOL-CONDITION (TEST-IF-NOT-IN-CL-PACKAGE "condition") NIL)
;; Loading (DEFTEST SYMBOL-CONJUGATE (TEST-IF-NOT-IN-CL-PACKAGE "conjugate") NIL)
;; Loading (DEFTEST SYMBOL-CONS (TEST-IF-NOT-IN-CL-PACKAGE "cons") NIL)
;; Loading (DEFTEST SYMBOL-CONSP (TEST-IF-NOT-IN-CL-PACKAGE "consp") NIL)
;; Loading (DEFTEST SYMBOL-CONSTANTLY (TEST-IF-NOT-IN-CL-PACKAGE "constantly") NIL)
;; Loading (DEFTEST SYMBOL-CONSTANTP (TEST-IF-NOT-IN-CL-PACKAGE "constantp") NIL)
;; Loading (DEFTEST SYMBOL-CONTINUE (TEST-IF-NOT-IN-CL-PACKAGE "continue") NIL)
;; Loading (DEFTEST SYMBOL-CONTROL-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "control-error") NIL)
;; Loading (DEFTEST SYMBOL-COPY-ALIST (TEST-IF-NOT-IN-CL-PACKAGE "copy-alist") NIL)
;; Loading (DEFTEST SYMBOL-COPY-LIST (TEST-IF-NOT-IN-CL-PACKAGE "copy-list") NIL)
;; Loading (DEFTEST SYMBOL-COPY-PPRINT-DISPATCH (TEST-IF-NOT-IN-CL-PACKAGE "copy-pprint-dispatch") NIL)
;; Loading (DEFTEST SYMBOL-COPY-READTABLE (TEST-IF-NOT-IN-CL-PACKAGE "copy-readtable") NIL)
;; Loading (DEFTEST SYMBOL-COPY-SEQ (TEST-IF-NOT-IN-CL-PACKAGE "copy-seq") NIL)
;; Loading (DEFTEST SYMBOL-COPY-STRUCTURE (TEST-IF-NOT-IN-CL-PACKAGE "copy-structure") NIL)
;; Loading (DEFTEST SYMBOL-COPY-SYMBOL (TEST-IF-NOT-IN-CL-PACKAGE "copy-symbol") NIL)
;; Loading (DEFTEST SYMBOL-COPY-TREE (TEST-IF-NOT-IN-CL-PACKAGE "copy-tree") NIL)
;; Loading (DEFTEST SYMBOL-COS (TEST-IF-NOT-IN-CL-PACKAGE "cos") NIL)
;; Loading (DEFTEST SYMBOL-COSH (TEST-IF-NOT-IN-CL-PACKAGE "cosh") NIL)
;; Loading (DEFTEST SYMBOL-COUNT (TEST-IF-NOT-IN-CL-PACKAGE "count") NIL)
;; Loading (DEFTEST SYMBOL-COUNT-IF (TEST-IF-NOT-IN-CL-PACKAGE "count-if") NIL)
;; Loading (DEFTEST SYMBOL-COUNT-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "count-if-not") NIL)
;; Loading (DEFTEST SYMBOL-CTYPECASE (TEST-IF-NOT-IN-CL-PACKAGE "ctypecase") NIL)
;; Loading (DEFTEST SYMBOL-DEBUG (TEST-IF-NOT-IN-CL-PACKAGE "debug") NIL)
;; Loading (DEFTEST SYMBOL-DECF (TEST-IF-NOT-IN-CL-PACKAGE "decf") NIL)
;; Loading (DEFTEST SYMBOL-DECLAIM (TEST-IF-NOT-IN-CL-PACKAGE "declaim") NIL)
;; Loading (DEFTEST SYMBOL-DECLARATION (TEST-IF-NOT-IN-CL-PACKAGE "declaration") NIL)
;; Loading (DEFTEST SYMBOL-DECLARE (TEST-IF-NOT-IN-CL-PACKAGE "declare") NIL)
;; Loading (DEFTEST SYMBOL-DECODE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "decode-float") NIL)
;; Loading (DEFTEST SYMBOL-DECODE-UNIVERSAL-TIME (TEST-IF-NOT-IN-CL-PACKAGE "decode-universal-time") NIL)
;; Loading (DEFTEST SYMBOL-DEFCLASS (TEST-IF-NOT-IN-CL-PACKAGE "defclass") NIL)
;; Loading (DEFTEST SYMBOL-DEFCONSTANT (TEST-IF-NOT-IN-CL-PACKAGE "defconstant") NIL)
;; Loading (DEFTEST SYMBOL-DEFGENERIC (TEST-IF-NOT-IN-CL-PACKAGE "defgeneric") NIL)
;; Loading (DEFTEST SYMBOL-DEFINE-COMPILER-MACRO (TEST-IF-NOT-IN-CL-PACKAGE "define-compiler-macro") NIL)
;; Loading (DEFTEST SYMBOL-DEFINE-CONDITION (TEST-IF-NOT-IN-CL-PACKAGE "define-condition") NIL)
;; Loading (DEFTEST SYMBOL-DEFINE-METHOD-COMBINATION (TEST-IF-NOT-IN-CL-PACKAGE "define-method-combination") NIL)
;; Loading (DEFTEST SYMBOL-DEFINE-MODIFY-MACRO (TEST-IF-NOT-IN-CL-PACKAGE "define-modify-macro") NIL)
;; Loading (DEFTEST SYMBOL-DEFINE-SETF-EXPANDER (TEST-IF-NOT-IN-CL-PACKAGE "define-setf-expander") NIL)
;; Loading (DEFTEST SYMBOL-DEFINE-SYMBOL-MACRO (TEST-IF-NOT-IN-CL-PACKAGE "define-symbol-macro") NIL)
;; Loading (DEFTEST SYMBOL-DEFMACRO (TEST-IF-NOT-IN-CL-PACKAGE "defmacro") NIL)
;; Loading (DEFTEST SYMBOL-DEFMETHOD (TEST-IF-NOT-IN-CL-PACKAGE "defmethod") NIL)
;; Loading (DEFTEST SYMBOL-DEFPACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "defpackage") NIL)
;; Loading (DEFTEST SYMBOL-DEFPARAMETER (TEST-IF-NOT-IN-CL-PACKAGE "defparameter") NIL)
;; Loading (DEFTEST SYMBOL-DEFSETF (TEST-IF-NOT-IN-CL-PACKAGE "defsetf") NIL)
;; Loading (DEFTEST SYMBOL-DEFSTRUCT (TEST-IF-NOT-IN-CL-PACKAGE "defstruct") NIL)
;; Loading (DEFTEST SYMBOL-DEFTYPE (TEST-IF-NOT-IN-CL-PACKAGE "deftype") NIL)
;; Loading (DEFTEST SYMBOL-DEFUN (TEST-IF-NOT-IN-CL-PACKAGE "defun") NIL)
;; Loading (DEFTEST SYMBOL-DEFVAR (TEST-IF-NOT-IN-CL-PACKAGE "defvar") NIL)
;; Loading (DEFTEST SYMBOL-DELETE (TEST-IF-NOT-IN-CL-PACKAGE "delete") NIL)
;; Loading (DEFTEST SYMBOL-DELETE-DUPLICATES (TEST-IF-NOT-IN-CL-PACKAGE "delete-duplicates") NIL)
;; Loading (DEFTEST SYMBOL-DELETE-FILE (TEST-IF-NOT-IN-CL-PACKAGE "delete-file") NIL)
;; Loading (DEFTEST SYMBOL-DELETE-IF (TEST-IF-NOT-IN-CL-PACKAGE "delete-if") NIL)
;; Loading (DEFTEST SYMBOL-DELETE-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "delete-if-not") NIL)
;; Loading (DEFTEST SYMBOL-DELETE-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "delete-package") NIL)
;; Loading (DEFTEST SYMBOL-DENOMINATOR (TEST-IF-NOT-IN-CL-PACKAGE "denominator") NIL)
;; Loading (DEFTEST SYMBOL-DEPOSIT-FIELD (TEST-IF-NOT-IN-CL-PACKAGE "deposit-field") NIL)
;; Loading (DEFTEST SYMBOL-DESCRIBE (TEST-IF-NOT-IN-CL-PACKAGE "describe") NIL)
;; Loading (DEFTEST SYMBOL-DESCRIBE-OBJECT (TEST-IF-NOT-IN-CL-PACKAGE "describe-object") NIL)
;; Loading (DEFTEST SYMBOL-DESTRUCTURING-BIND (TEST-IF-NOT-IN-CL-PACKAGE "destructuring-bind") NIL)
;; Loading (DEFTEST SYMBOL-DIGIT-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "digit-char") NIL)
;; Loading (DEFTEST SYMBOL-DIGIT-CHAR-P (TEST-IF-NOT-IN-CL-PACKAGE "digit-char-p") NIL)
;; Loading (DEFTEST SYMBOL-DIRECTORY (TEST-IF-NOT-IN-CL-PACKAGE "directory") NIL)
;; Loading (DEFTEST SYMBOL-DIRECTORY-NAMESTRING (TEST-IF-NOT-IN-CL-PACKAGE "directory-namestring") NIL)
;; Loading (DEFTEST SYMBOL-DISASSEMBLE (TEST-IF-NOT-IN-CL-PACKAGE "disassemble") NIL)
;; Loading (DEFTEST SYMBOL-DIVISION-BY-ZERO (TEST-IF-NOT-IN-CL-PACKAGE "division-by-zero") NIL)
;; Loading (DEFTEST SYMBOL-DO (TEST-IF-NOT-IN-CL-PACKAGE "do") NIL)
;; Loading (DEFTEST SYMBOL-DO* (TEST-IF-NOT-IN-CL-PACKAGE "do*") NIL)
;; Loading (DEFTEST SYMBOL-DO-ALL-SYMBOLS (TEST-IF-NOT-IN-CL-PACKAGE "do-all-symbols") NIL)
;; Loading (DEFTEST SYMBOL-DO-EXTERNAL-SYMBOLS (TEST-IF-NOT-IN-CL-PACKAGE "do-external-symbols") NIL)
;; Loading (DEFTEST SYMBOL-DO-SYMBOLS (TEST-IF-NOT-IN-CL-PACKAGE "do-symbols") NIL)
;; Loading (DEFTEST SYMBOL-DOCUMENTATION (TEST-IF-NOT-IN-CL-PACKAGE "documentation") NIL)
;; Loading (DEFTEST SYMBOL-DOLIST (TEST-IF-NOT-IN-CL-PACKAGE "dolist") NIL)
;; Loading (DEFTEST SYMBOL-DOTIMES (TEST-IF-NOT-IN-CL-PACKAGE "dotimes") NIL)
;; Loading (DEFTEST SYMBOL-DOUBLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "double-float") NIL)
;; Loading (DEFTEST SYMBOL-DOUBLE-FLOAT-EPSILON (TEST-IF-NOT-IN-CL-PACKAGE "double-float-epsilon") NIL)
;; Loading (DEFTEST SYMBOL-DOUBLE-FLOAT-NEGATIVE-EPSILON (TEST-IF-NOT-IN-CL-PACKAGE "double-float-negative-epsilon") NIL)
;; Loading (DEFTEST SYMBOL-DPB (TEST-IF-NOT-IN-CL-PACKAGE "dpb") NIL)
;; Loading (DEFTEST SYMBOL-DRIBBLE (TEST-IF-NOT-IN-CL-PACKAGE "dribble") NIL)
;; Loading (DEFTEST SYMBOL-DYNAMIC-EXTENT (TEST-IF-NOT-IN-CL-PACKAGE "dynamic-extent") NIL)
;; Loading (DEFTEST SYMBOL-ECASE (TEST-IF-NOT-IN-CL-PACKAGE "ecase") NIL)
;; Loading (DEFTEST SYMBOL-ECHO-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "echo-stream") NIL)
;; Loading (DEFTEST SYMBOL-ECHO-STREAM-INPUT-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "echo-stream-input-stream") NIL)
;; Loading (DEFTEST SYMBOL-ECHO-STREAM-OUTPUT-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "echo-stream-output-stream") NIL)
;; Loading (DEFTEST SYMBOL-ED (TEST-IF-NOT-IN-CL-PACKAGE "ed") NIL)
;; Loading (DEFTEST SYMBOL-EIGHTH (TEST-IF-NOT-IN-CL-PACKAGE "eighth") NIL)
;; Loading (DEFTEST SYMBOL-ELT (TEST-IF-NOT-IN-CL-PACKAGE "elt") NIL)
;; Loading (DEFTEST SYMBOL-ENCODE-UNIVERSAL-TIME (TEST-IF-NOT-IN-CL-PACKAGE "encode-universal-time") NIL)
;; Loading (DEFTEST SYMBOL-END-OF-FILE (TEST-IF-NOT-IN-CL-PACKAGE "end-of-file") NIL)
;; Loading (DEFTEST SYMBOL-ENDP (TEST-IF-NOT-IN-CL-PACKAGE "endp") NIL)
;; Loading (DEFTEST SYMBOL-ENOUGH-NAMESTRING (TEST-IF-NOT-IN-CL-PACKAGE "enough-namestring") NIL)
;; Loading (DEFTEST SYMBOL-ENSURE-DIRECTORIES-EXIST (TEST-IF-NOT-IN-CL-PACKAGE "ensure-directories-exist") NIL)
;; Loading (DEFTEST SYMBOL-ENSURE-GENERIC-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "ensure-generic-function") NIL)
;; Loading (DEFTEST SYMBOL-EQ (TEST-IF-NOT-IN-CL-PACKAGE "eq") NIL)
;; Loading (DEFTEST SYMBOL-EQL (TEST-IF-NOT-IN-CL-PACKAGE "eql") NIL)
;; Loading (DEFTEST SYMBOL-EQUAL (TEST-IF-NOT-IN-CL-PACKAGE "equal") NIL)
;; Loading (DEFTEST SYMBOL-EQUALP (TEST-IF-NOT-IN-CL-PACKAGE "equalp") NIL)
;; Loading (DEFTEST SYMBOL-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "error") NIL)
;; Loading (DEFTEST SYMBOL-ETYPECASE (TEST-IF-NOT-IN-CL-PACKAGE "etypecase") NIL)
;; Loading (DEFTEST SYMBOL-EVAL (TEST-IF-NOT-IN-CL-PACKAGE "eval") NIL)
;; Loading (DEFTEST SYMBOL-EVAL-WHEN (TEST-IF-NOT-IN-CL-PACKAGE "eval-when") NIL)
;; Loading (DEFTEST SYMBOL-EVENP (TEST-IF-NOT-IN-CL-PACKAGE "evenp") NIL)
;; Loading (DEFTEST SYMBOL-EVERY (TEST-IF-NOT-IN-CL-PACKAGE "every") NIL)
;; Loading (DEFTEST SYMBOL-EXP (TEST-IF-NOT-IN-CL-PACKAGE "exp") NIL)
;; Loading (DEFTEST SYMBOL-EXPORT (TEST-IF-NOT-IN-CL-PACKAGE "export") NIL)
;; Loading (DEFTEST SYMBOL-EXPT (TEST-IF-NOT-IN-CL-PACKAGE "expt") NIL)
;; Loading (DEFTEST SYMBOL-EXTENDED-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "extended-char") NIL)
;; Loading (DEFTEST SYMBOL-FBOUNDP (TEST-IF-NOT-IN-CL-PACKAGE "fboundp") NIL)
;; Loading (DEFTEST SYMBOL-FCEILING (TEST-IF-NOT-IN-CL-PACKAGE "fceiling") NIL)
;; Loading (DEFTEST SYMBOL-FDEFINITION (TEST-IF-NOT-IN-CL-PACKAGE "fdefinition") NIL)
;; Loading (DEFTEST SYMBOL-FFLOOR (TEST-IF-NOT-IN-CL-PACKAGE "ffloor") NIL)
;; Loading (DEFTEST SYMBOL-FIFTH (TEST-IF-NOT-IN-CL-PACKAGE "fifth") NIL)
;; Loading (DEFTEST SYMBOL-FILE-AUTHOR (TEST-IF-NOT-IN-CL-PACKAGE "file-author") NIL)
;; Loading (DEFTEST SYMBOL-FILE-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "file-error") NIL)
;; Loading (DEFTEST SYMBOL-FILE-ERROR-PATHNAME (TEST-IF-NOT-IN-CL-PACKAGE "file-error-pathname") NIL)
;; Loading (DEFTEST SYMBOL-FILE-LENGTH (TEST-IF-NOT-IN-CL-PACKAGE "file-length") NIL)
;; Loading (DEFTEST SYMBOL-FILE-NAMESTRING (TEST-IF-NOT-IN-CL-PACKAGE "file-namestring") NIL)
;; Loading (DEFTEST SYMBOL-FILE-POSITION (TEST-IF-NOT-IN-CL-PACKAGE "file-position") NIL)
;; Loading (DEFTEST SYMBOL-FILE-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "file-stream") NIL)
;; Loading (DEFTEST SYMBOL-FILE-STRING-LENGTH (TEST-IF-NOT-IN-CL-PACKAGE "file-string-length") NIL)
;; Loading (DEFTEST SYMBOL-FILE-WRITE-DATE (TEST-IF-NOT-IN-CL-PACKAGE "file-write-date") NIL)
;; Loading (DEFTEST SYMBOL-FILL (TEST-IF-NOT-IN-CL-PACKAGE "fill") NIL)
;; Loading (DEFTEST SYMBOL-FILL-POINTER (TEST-IF-NOT-IN-CL-PACKAGE "fill-pointer") NIL)
;; Loading (DEFTEST SYMBOL-FIND (TEST-IF-NOT-IN-CL-PACKAGE "find") NIL)
;; Loading (DEFTEST SYMBOL-FIND-ALL-SYMBOLS (TEST-IF-NOT-IN-CL-PACKAGE "find-all-symbols") NIL)
;; Loading (DEFTEST SYMBOL-FIND-CLASS (TEST-IF-NOT-IN-CL-PACKAGE "find-class") NIL)
;; Loading (DEFTEST SYMBOL-FIND-IF (TEST-IF-NOT-IN-CL-PACKAGE "find-if") NIL)
;; Loading (DEFTEST SYMBOL-FIND-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "find-if-not") NIL)
;; Loading (DEFTEST SYMBOL-FIND-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "find-method") NIL)
;; Loading (DEFTEST SYMBOL-FIND-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "find-package") NIL)
;; Loading (DEFTEST SYMBOL-FIND-RESTART (TEST-IF-NOT-IN-CL-PACKAGE "find-restart") NIL)
;; Loading (DEFTEST SYMBOL-FIND-SYMBOL (TEST-IF-NOT-IN-CL-PACKAGE "find-symbol") NIL)
;; Loading (DEFTEST SYMBOL-FINISH-OUTPUT (TEST-IF-NOT-IN-CL-PACKAGE "finish-output") NIL)
;; Loading (DEFTEST SYMBOL-FIRST (TEST-IF-NOT-IN-CL-PACKAGE "first") NIL)
;; Loading (DEFTEST SYMBOL-FIXNUM (TEST-IF-NOT-IN-CL-PACKAGE "fixnum") NIL)
;; Loading (DEFTEST SYMBOL-FLET (TEST-IF-NOT-IN-CL-PACKAGE "flet") NIL)
;; Loading (DEFTEST SYMBOL-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "float") NIL)
;; Loading (DEFTEST SYMBOL-FLOAT-DIGITS (TEST-IF-NOT-IN-CL-PACKAGE "float-digits") NIL)
;; Loading (DEFTEST SYMBOL-FLOAT-PRECISION (TEST-IF-NOT-IN-CL-PACKAGE "float-precision") NIL)
;; Loading (DEFTEST SYMBOL-FLOAT-RADIX (TEST-IF-NOT-IN-CL-PACKAGE "float-radix") NIL)
;; Loading (DEFTEST SYMBOL-FLOAT-SIGN (TEST-IF-NOT-IN-CL-PACKAGE "float-sign") NIL)
;; Loading (DEFTEST SYMBOL-FLOATING-POINT-INEXACT (TEST-IF-NOT-IN-CL-PACKAGE "floating-point-inexact") NIL)
;; Loading (DEFTEST SYMBOL-FLOATING-POINT-INVALID-OPERATION (TEST-IF-NOT-IN-CL-PACKAGE "floating-point-invalid-operation") NIL)
;; Loading (DEFTEST SYMBOL-FLOATING-POINT-OVERFLOW (TEST-IF-NOT-IN-CL-PACKAGE "floating-point-overflow") NIL)
;; Loading (DEFTEST SYMBOL-FLOATING-POINT-UNDERFLOW (TEST-IF-NOT-IN-CL-PACKAGE "floating-point-underflow") NIL)
;; Loading (DEFTEST SYMBOL-FLOATP (TEST-IF-NOT-IN-CL-PACKAGE "floatp") NIL)
;; Loading (DEFTEST SYMBOL-FLOOR (TEST-IF-NOT-IN-CL-PACKAGE "floor") NIL)
;; Loading (DEFTEST SYMBOL-FMAKUNBOUND (TEST-IF-NOT-IN-CL-PACKAGE "fmakunbound") NIL)
;; Loading (DEFTEST SYMBOL-FORCE-OUTPUT (TEST-IF-NOT-IN-CL-PACKAGE "force-output") NIL)
;; Loading (DEFTEST SYMBOL-FORMAT (TEST-IF-NOT-IN-CL-PACKAGE "format") NIL)
;; Loading (DEFTEST SYMBOL-FORMATTER (TEST-IF-NOT-IN-CL-PACKAGE "formatter") NIL)
;; Loading (DEFTEST SYMBOL-FOURTH (TEST-IF-NOT-IN-CL-PACKAGE "fourth") NIL)
;; Loading (DEFTEST SYMBOL-FRESH-LINE (TEST-IF-NOT-IN-CL-PACKAGE "fresh-line") NIL)
;; Loading (DEFTEST SYMBOL-FROUND (TEST-IF-NOT-IN-CL-PACKAGE "fround") NIL)
;; Loading (DEFTEST SYMBOL-FTRUNCATE (TEST-IF-NOT-IN-CL-PACKAGE "ftruncate") NIL)
;; Loading (DEFTEST SYMBOL-FTYPE (TEST-IF-NOT-IN-CL-PACKAGE "ftype") NIL)
;; Loading (DEFTEST SYMBOL-FUNCALL (TEST-IF-NOT-IN-CL-PACKAGE "funcall") NIL)
;; Loading (DEFTEST SYMBOL-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "function") NIL)
;; Loading (DEFTEST SYMBOL-FUNCTION-KEYWORDS (TEST-IF-NOT-IN-CL-PACKAGE "function-keywords") NIL)
;; Loading (DEFTEST SYMBOL-FUNCTION-LAMBDA-EXPRESSION (TEST-IF-NOT-IN-CL-PACKAGE "function-lambda-expression") NIL)
;; Loading (DEFTEST SYMBOL-FUNCTIONP (TEST-IF-NOT-IN-CL-PACKAGE "functionp") NIL)
;; Loading (DEFTEST SYMBOL-GCD (TEST-IF-NOT-IN-CL-PACKAGE "gcd") NIL)
;; Loading (DEFTEST SYMBOL-GENERIC-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "generic-function") NIL)
;; Loading (DEFTEST SYMBOL-GENSYM (TEST-IF-NOT-IN-CL-PACKAGE "gensym") NIL)
;; Loading (DEFTEST SYMBOL-GENTEMP (TEST-IF-NOT-IN-CL-PACKAGE "gentemp") NIL)
;; Loading (DEFTEST SYMBOL-GET (TEST-IF-NOT-IN-CL-PACKAGE "get") NIL)
;; Loading (DEFTEST SYMBOL-GET-DECODED-TIME (TEST-IF-NOT-IN-CL-PACKAGE "get-decoded-time") NIL)
;; Loading (DEFTEST SYMBOL-GET-DISPATCH-MACRO-CHARACTER (TEST-IF-NOT-IN-CL-PACKAGE "get-dispatch-macro-character") NIL)
;; Loading (DEFTEST SYMBOL-GET-INTERNAL-REAL-TIME (TEST-IF-NOT-IN-CL-PACKAGE "get-internal-real-time") NIL)
;; Loading (DEFTEST SYMBOL-GET-INTERNAL-RUN-TIME (TEST-IF-NOT-IN-CL-PACKAGE "get-internal-run-time") NIL)
;; Loading (DEFTEST SYMBOL-GET-MACRO-CHARACTER (TEST-IF-NOT-IN-CL-PACKAGE "get-macro-character") NIL)
;; Loading (DEFTEST SYMBOL-GET-OUTPUT-STREAM-STRING (TEST-IF-NOT-IN-CL-PACKAGE "get-output-stream-string") NIL)
;; Loading (DEFTEST SYMBOL-GET-PROPERTIES (TEST-IF-NOT-IN-CL-PACKAGE "get-properties") NIL)
;; Loading (DEFTEST SYMBOL-GET-SETF-EXPANSION (TEST-IF-NOT-IN-CL-PACKAGE "get-setf-expansion") NIL)
;; Loading (DEFTEST SYMBOL-GET-UNIVERSAL-TIME (TEST-IF-NOT-IN-CL-PACKAGE "get-universal-time") NIL)
;; Loading (DEFTEST SYMBOL-GETF (TEST-IF-NOT-IN-CL-PACKAGE "getf") NIL)
;; Loading (DEFTEST SYMBOL-GETHASH (TEST-IF-NOT-IN-CL-PACKAGE "gethash") NIL)
;; Loading (DEFTEST SYMBOL-GO (TEST-IF-NOT-IN-CL-PACKAGE "go") NIL)
;; Loading (DEFTEST SYMBOL-GRAPHIC-CHAR-P (TEST-IF-NOT-IN-CL-PACKAGE "graphic-char-p") NIL)
;; Loading (DEFTEST SYMBOL-HANDLER-BIND (TEST-IF-NOT-IN-CL-PACKAGE "handler-bind") NIL)
;; Loading (DEFTEST SYMBOL-HANDLER-CASE (TEST-IF-NOT-IN-CL-PACKAGE "handler-case") NIL)
;; Loading (DEFTEST SYMBOL-HASH-TABLE (TEST-IF-NOT-IN-CL-PACKAGE "hash-table") NIL)
;; Loading (DEFTEST SYMBOL-HASH-TABLE-COUNT (TEST-IF-NOT-IN-CL-PACKAGE "hash-table-count") NIL)
;; Loading (DEFTEST SYMBOL-HASH-TABLE-P (TEST-IF-NOT-IN-CL-PACKAGE "hash-table-p") NIL)
;; Loading (DEFTEST SYMBOL-HASH-TABLE-REHASH-SIZE (TEST-IF-NOT-IN-CL-PACKAGE "hash-table-rehash-size") NIL)
;; Loading (DEFTEST SYMBOL-HASH-TABLE-REHASH-THRESHOLD (TEST-IF-NOT-IN-CL-PACKAGE "hash-table-rehash-threshold") NIL)
;; Loading (DEFTEST SYMBOL-HASH-TABLE-SIZE (TEST-IF-NOT-IN-CL-PACKAGE "hash-table-size") NIL)
;; Loading (DEFTEST SYMBOL-HASH-TABLE-TEST (TEST-IF-NOT-IN-CL-PACKAGE "hash-table-test") NIL)
;; Loading (DEFTEST SYMBOL-HOST-NAMESTRING (TEST-IF-NOT-IN-CL-PACKAGE "host-namestring") NIL)
;; Loading (DEFTEST SYMBOL-IDENTITY (TEST-IF-NOT-IN-CL-PACKAGE "identity") NIL)
;; Loading (DEFTEST SYMBOL-IF (TEST-IF-NOT-IN-CL-PACKAGE "if") NIL)
;; Loading (DEFTEST SYMBOL-IGNORABLE (TEST-IF-NOT-IN-CL-PACKAGE "ignorable") NIL)
;; Loading (DEFTEST SYMBOL-IGNORE (TEST-IF-NOT-IN-CL-PACKAGE "ignore") NIL)
;; Loading (DEFTEST SYMBOL-IGNORE-ERRORS (TEST-IF-NOT-IN-CL-PACKAGE "ignore-errors") NIL)
;; Loading (DEFTEST SYMBOL-IMAGPART (TEST-IF-NOT-IN-CL-PACKAGE "imagpart") NIL)
;; Loading (DEFTEST SYMBOL-IMPORT (TEST-IF-NOT-IN-CL-PACKAGE "import") NIL)
;; Loading (DEFTEST SYMBOL-IN-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "in-package") NIL)
;; Loading (DEFTEST SYMBOL-INCF (TEST-IF-NOT-IN-CL-PACKAGE "incf") NIL)
;; Loading (DEFTEST SYMBOL-INITIALIZE-INSTANCE (TEST-IF-NOT-IN-CL-PACKAGE "initialize-instance") NIL)
;; Loading (DEFTEST SYMBOL-INLINE (TEST-IF-NOT-IN-CL-PACKAGE "inline") NIL)
;; Loading (DEFTEST SYMBOL-INPUT-STREAM-P (TEST-IF-NOT-IN-CL-PACKAGE "input-stream-p") NIL)
;; Loading (DEFTEST SYMBOL-INSPECT (TEST-IF-NOT-IN-CL-PACKAGE "inspect") NIL)
;; Loading (DEFTEST SYMBOL-INTEGER (TEST-IF-NOT-IN-CL-PACKAGE "integer") NIL)
;; Loading (DEFTEST SYMBOL-INTEGER-DECODE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "integer-decode-float") NIL)
;; Loading (DEFTEST SYMBOL-INTEGER-LENGTH (TEST-IF-NOT-IN-CL-PACKAGE "integer-length") NIL)
;; Loading (DEFTEST SYMBOL-INTEGERP (TEST-IF-NOT-IN-CL-PACKAGE "integerp") NIL)
;; Loading (DEFTEST SYMBOL-INTERACTIVE-STREAM-P (TEST-IF-NOT-IN-CL-PACKAGE "interactive-stream-p") NIL)
;; Loading (DEFTEST SYMBOL-INTERN (TEST-IF-NOT-IN-CL-PACKAGE "intern") NIL)
;; Loading (DEFTEST SYMBOL-INTERNAL-TIME-UNITS-PER-SECOND (TEST-IF-NOT-IN-CL-PACKAGE "internal-time-units-per-second") NIL)
;; Loading (DEFTEST SYMBOL-INTERSECTION (TEST-IF-NOT-IN-CL-PACKAGE "intersection") NIL)
;; Loading (DEFTEST SYMBOL-INVALID-METHOD-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "invalid-method-error") NIL)
;; Loading (DEFTEST SYMBOL-INVOKE-DEBUGGER (TEST-IF-NOT-IN-CL-PACKAGE "invoke-debugger") NIL)
;; Loading (DEFTEST SYMBOL-INVOKE-RESTART (TEST-IF-NOT-IN-CL-PACKAGE "invoke-restart") NIL)
;; Loading (DEFTEST SYMBOL-INVOKE-RESTART-INTERACTIVELY (TEST-IF-NOT-IN-CL-PACKAGE "invoke-restart-interactively") NIL)
;; Loading (DEFTEST SYMBOL-ISQRT (TEST-IF-NOT-IN-CL-PACKAGE "isqrt") NIL)
;; Loading (DEFTEST SYMBOL-KEYWORD (TEST-IF-NOT-IN-CL-PACKAGE "keyword") NIL)
;; Loading (DEFTEST SYMBOL-KEYWORDP (TEST-IF-NOT-IN-CL-PACKAGE "keywordp") NIL)
;; Loading (DEFTEST SYMBOL-LABELS (TEST-IF-NOT-IN-CL-PACKAGE "labels") NIL)
;; Loading (DEFTEST SYMBOL-LAMBDA (TEST-IF-NOT-IN-CL-PACKAGE "lambda") NIL)
;; Loading (DEFTEST SYMBOL-LAMBDA-LIST-KEYWORDS (TEST-IF-NOT-IN-CL-PACKAGE "lambda-list-keywords") NIL)
;; Loading (DEFTEST SYMBOL-LAMBDA-PARAMETERS-LIMIT (TEST-IF-NOT-IN-CL-PACKAGE "lambda-parameters-limit") NIL)
;; Loading (DEFTEST SYMBOL-LAST (TEST-IF-NOT-IN-CL-PACKAGE "last") NIL)
;; Loading (DEFTEST SYMBOL-LCM (TEST-IF-NOT-IN-CL-PACKAGE "lcm") NIL)
;; Loading (DEFTEST SYMBOL-LDB (TEST-IF-NOT-IN-CL-PACKAGE "ldb") NIL)
;; Loading (DEFTEST SYMBOL-LDB-TEST (TEST-IF-NOT-IN-CL-PACKAGE "ldb-test") NIL)
;; Loading (DEFTEST SYMBOL-LDIFF (TEST-IF-NOT-IN-CL-PACKAGE "ldiff") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-NEGATIVE-DOUBLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-negative-double-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-NEGATIVE-LONG-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-negative-long-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-negative-normalized-double-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-negative-normalized-long-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-negative-normalized-short-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-negative-normalized-single-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-NEGATIVE-SHORT-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-negative-short-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-NEGATIVE-SINGLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-negative-single-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-POSITIVE-DOUBLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-positive-double-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-POSITIVE-LONG-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-positive-long-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-positive-normalized-double-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-POSITIVE-NORMALIZED-LONG-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-positive-normalized-long-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-positive-normalized-short-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-positive-normalized-single-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-POSITIVE-SHORT-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-positive-short-float") NIL)
;; Loading (DEFTEST SYMBOL-LEAST-POSITIVE-SINGLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "least-positive-single-float") NIL)
;; Loading (DEFTEST SYMBOL-LENGTH (TEST-IF-NOT-IN-CL-PACKAGE "length") NIL)
;; Loading (DEFTEST SYMBOL-LET (TEST-IF-NOT-IN-CL-PACKAGE "let") NIL)
;; Loading (DEFTEST SYMBOL-LET* (TEST-IF-NOT-IN-CL-PACKAGE "let*") NIL)
;; Loading (DEFTEST SYMBOL-LISP-IMPLEMENTATION-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "lisp-implementation-type") NIL)
;; Loading (DEFTEST SYMBOL-LISP-IMPLEMENTATION-VERSION (TEST-IF-NOT-IN-CL-PACKAGE "lisp-implementation-version") NIL)
;; Loading (DEFTEST SYMBOL-LIST (TEST-IF-NOT-IN-CL-PACKAGE "list") NIL)
;; Loading (DEFTEST SYMBOL-LIST* (TEST-IF-NOT-IN-CL-PACKAGE "list*") NIL)
;; Loading (DEFTEST SYMBOL-LIST-ALL-PACKAGES (TEST-IF-NOT-IN-CL-PACKAGE "list-all-packages") NIL)
;; Loading (DEFTEST SYMBOL-LIST-LENGTH (TEST-IF-NOT-IN-CL-PACKAGE "list-length") NIL)
;; Loading (DEFTEST SYMBOL-LISTEN (TEST-IF-NOT-IN-CL-PACKAGE "listen") NIL)
;; Loading (DEFTEST SYMBOL-LISTP (TEST-IF-NOT-IN-CL-PACKAGE "listp") NIL)
;; Loading (DEFTEST SYMBOL-LOAD (TEST-IF-NOT-IN-CL-PACKAGE "load") NIL)
;; Loading (DEFTEST SYMBOL-LOAD-LOGICAL-PATHNAME-TRANSLATIONS (TEST-IF-NOT-IN-CL-PACKAGE "load-logical-pathname-translations") NIL)
;; Loading (DEFTEST SYMBOL-LOAD-TIME-VALUE (TEST-IF-NOT-IN-CL-PACKAGE "load-time-value") NIL)
;; Loading (DEFTEST SYMBOL-LOCALLY (TEST-IF-NOT-IN-CL-PACKAGE "locally") NIL)
;; Loading (DEFTEST SYMBOL-LOG (TEST-IF-NOT-IN-CL-PACKAGE "log") NIL)
;; Loading (DEFTEST SYMBOL-LOGAND (TEST-IF-NOT-IN-CL-PACKAGE "logand") NIL)
;; Loading (DEFTEST SYMBOL-LOGANDC1 (TEST-IF-NOT-IN-CL-PACKAGE "logandc1") NIL)
;; Loading (DEFTEST SYMBOL-LOGANDC2 (TEST-IF-NOT-IN-CL-PACKAGE "logandc2") NIL)
;; Loading (DEFTEST SYMBOL-LOGBITP (TEST-IF-NOT-IN-CL-PACKAGE "logbitp") NIL)
;; Loading (DEFTEST SYMBOL-LOGCOUNT (TEST-IF-NOT-IN-CL-PACKAGE "logcount") NIL)
;; Loading (DEFTEST SYMBOL-LOGEQV (TEST-IF-NOT-IN-CL-PACKAGE "logeqv") NIL)
;; Loading (DEFTEST SYMBOL-LOGICAL-PATHNAME (TEST-IF-NOT-IN-CL-PACKAGE "logical-pathname") NIL)
;; Loading (DEFTEST SYMBOL-LOGICAL-PATHNAME-TRANSLATIONS (TEST-IF-NOT-IN-CL-PACKAGE "logical-pathname-translations") NIL)
;; Loading (DEFTEST SYMBOL-LOGIOR (TEST-IF-NOT-IN-CL-PACKAGE "logior") NIL)
;; Loading (DEFTEST SYMBOL-LOGNAND (TEST-IF-NOT-IN-CL-PACKAGE "lognand") NIL)
;; Loading (DEFTEST SYMBOL-LOGNOR (TEST-IF-NOT-IN-CL-PACKAGE "lognor") NIL)
;; Loading (DEFTEST SYMBOL-LOGNOT (TEST-IF-NOT-IN-CL-PACKAGE "lognot") NIL)
;; Loading (DEFTEST SYMBOL-LOGORC1 (TEST-IF-NOT-IN-CL-PACKAGE "logorc1") NIL)
;; Loading (DEFTEST SYMBOL-LOGORC2 (TEST-IF-NOT-IN-CL-PACKAGE "logorc2") NIL)
;; Loading (DEFTEST SYMBOL-LOGTEST (TEST-IF-NOT-IN-CL-PACKAGE "logtest") NIL)
;; Loading (DEFTEST SYMBOL-LOGXOR (TEST-IF-NOT-IN-CL-PACKAGE "logxor") NIL)
;; Loading (DEFTEST SYMBOL-LONG-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "long-float") NIL)
;; Loading (DEFTEST SYMBOL-LONG-FLOAT-EPSILON (TEST-IF-NOT-IN-CL-PACKAGE "long-float-epsilon") NIL)
;; Loading (DEFTEST SYMBOL-LONG-FLOAT-NEGATIVE-EPSILON (TEST-IF-NOT-IN-CL-PACKAGE "long-float-negative-epsilon") NIL)
;; Loading (DEFTEST SYMBOL-LONG-SITE-NAME (TEST-IF-NOT-IN-CL-PACKAGE "long-site-name") NIL)
;; Loading (DEFTEST SYMBOL-LOOP (TEST-IF-NOT-IN-CL-PACKAGE "loop") NIL)
;; Loading (DEFTEST SYMBOL-LOOP-FINISH (TEST-IF-NOT-IN-CL-PACKAGE "loop-finish") NIL)
;; Loading (DEFTEST SYMBOL-LOWER-CASE-P (TEST-IF-NOT-IN-CL-PACKAGE "lower-case-p") NIL)
;; Loading (DEFTEST SYMBOL-MACHINE-INSTANCE (TEST-IF-NOT-IN-CL-PACKAGE "machine-instance") NIL)
;; Loading (DEFTEST SYMBOL-MACHINE-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "machine-type") NIL)
;; Loading (DEFTEST SYMBOL-MACHINE-VERSION (TEST-IF-NOT-IN-CL-PACKAGE "machine-version") NIL)
;; Loading (DEFTEST SYMBOL-MACRO-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "macro-function") NIL)
;; Loading (DEFTEST SYMBOL-MACROEXPAND (TEST-IF-NOT-IN-CL-PACKAGE "macroexpand") NIL)
;; Loading (DEFTEST SYMBOL-MACROEXPAND-1 (TEST-IF-NOT-IN-CL-PACKAGE "macroexpand-1") NIL)
;; Loading (DEFTEST SYMBOL-MACROLET (TEST-IF-NOT-IN-CL-PACKAGE "macrolet") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-ARRAY (TEST-IF-NOT-IN-CL-PACKAGE "make-array") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-BROADCAST-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "make-broadcast-stream") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-CONCATENATED-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "make-concatenated-stream") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-CONDITION (TEST-IF-NOT-IN-CL-PACKAGE "make-condition") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-DISPATCH-MACRO-CHARACTER (TEST-IF-NOT-IN-CL-PACKAGE "make-dispatch-macro-character") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-ECHO-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "make-echo-stream") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-HASH-TABLE (TEST-IF-NOT-IN-CL-PACKAGE "make-hash-table") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-INSTANCE (TEST-IF-NOT-IN-CL-PACKAGE "make-instance") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-INSTANCES-OBSOLETE (TEST-IF-NOT-IN-CL-PACKAGE "make-instances-obsolete") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-LIST (TEST-IF-NOT-IN-CL-PACKAGE "make-list") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-LOAD-FORM (TEST-IF-NOT-IN-CL-PACKAGE "make-load-form") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-LOAD-FORM-SAVING-SLOTS (TEST-IF-NOT-IN-CL-PACKAGE "make-load-form-saving-slots") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "make-method") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "make-package") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-PATHNAME (TEST-IF-NOT-IN-CL-PACKAGE "make-pathname") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-RANDOM-STATE (TEST-IF-NOT-IN-CL-PACKAGE "make-random-state") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-SEQUENCE (TEST-IF-NOT-IN-CL-PACKAGE "make-sequence") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-STRING (TEST-IF-NOT-IN-CL-PACKAGE "make-string") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-STRING-INPUT-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "make-string-input-stream") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-STRING-OUTPUT-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "make-string-output-stream") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-SYMBOL (TEST-IF-NOT-IN-CL-PACKAGE "make-symbol") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-SYNONYM-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "make-synonym-stream") NIL)
;; Loading (DEFTEST SYMBOL-MAKE-TWO-WAY-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "make-two-way-stream") NIL)
;; Loading (DEFTEST SYMBOL-MAKUNBOUND (TEST-IF-NOT-IN-CL-PACKAGE "makunbound") NIL)
;; Loading (DEFTEST SYMBOL-MAP (TEST-IF-NOT-IN-CL-PACKAGE "map") NIL)
;; Loading (DEFTEST SYMBOL-MAP-INTO (TEST-IF-NOT-IN-CL-PACKAGE "map-into") NIL)
;; Loading (DEFTEST SYMBOL-MAPC (TEST-IF-NOT-IN-CL-PACKAGE "mapc") NIL)
;; Loading (DEFTEST SYMBOL-MAPCAN (TEST-IF-NOT-IN-CL-PACKAGE "mapcan") NIL)
;; Loading (DEFTEST SYMBOL-MAPCAR (TEST-IF-NOT-IN-CL-PACKAGE "mapcar") NIL)
;; Loading (DEFTEST SYMBOL-MAPCON (TEST-IF-NOT-IN-CL-PACKAGE "mapcon") NIL)
;; Loading (DEFTEST SYMBOL-MAPHASH (TEST-IF-NOT-IN-CL-PACKAGE "maphash") NIL)
;; Loading (DEFTEST SYMBOL-MAPL (TEST-IF-NOT-IN-CL-PACKAGE "mapl") NIL)
;; Loading (DEFTEST SYMBOL-MAPLIST (TEST-IF-NOT-IN-CL-PACKAGE "maplist") NIL)
;; Loading (DEFTEST SYMBOL-MASK-FIELD (TEST-IF-NOT-IN-CL-PACKAGE "mask-field") NIL)
;; Loading (DEFTEST SYMBOL-MAX (TEST-IF-NOT-IN-CL-PACKAGE "max") NIL)
;; Loading (DEFTEST SYMBOL-MEMBER (TEST-IF-NOT-IN-CL-PACKAGE "member") NIL)
;; Loading (DEFTEST SYMBOL-MEMBER-IF (TEST-IF-NOT-IN-CL-PACKAGE "member-if") NIL)
;; Loading (DEFTEST SYMBOL-MEMBER-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "member-if-not") NIL)
;; Loading (DEFTEST SYMBOL-MERGE (TEST-IF-NOT-IN-CL-PACKAGE "merge") NIL)
;; Loading (DEFTEST SYMBOL-MERGE-PATHNAMES (TEST-IF-NOT-IN-CL-PACKAGE "merge-pathnames") NIL)
;; Loading (DEFTEST SYMBOL-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "method") NIL)
;; Loading (DEFTEST SYMBOL-METHOD-COMBINATION (TEST-IF-NOT-IN-CL-PACKAGE "method-combination") NIL)
;; Loading (DEFTEST SYMBOL-METHOD-COMBINATION-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "method-combination-error") NIL)
;; Loading (DEFTEST SYMBOL-METHOD-QUALIFIERS (TEST-IF-NOT-IN-CL-PACKAGE "method-qualifiers") NIL)
;; Loading (DEFTEST SYMBOL-MIN (TEST-IF-NOT-IN-CL-PACKAGE "min") NIL)
;; Loading (DEFTEST SYMBOL-MINUSP (TEST-IF-NOT-IN-CL-PACKAGE "minusp") NIL)
;; Loading (DEFTEST SYMBOL-MISMATCH (TEST-IF-NOT-IN-CL-PACKAGE "mismatch") NIL)
;; Loading (DEFTEST SYMBOL-MOD (TEST-IF-NOT-IN-CL-PACKAGE "mod") NIL)
;; Loading (DEFTEST SYMBOL-MOST-NEGATIVE-DOUBLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "most-negative-double-float") NIL)
;; Loading (DEFTEST SYMBOL-MOST-NEGATIVE-FIXNUM (TEST-IF-NOT-IN-CL-PACKAGE "most-negative-fixnum") NIL)
;; Loading (DEFTEST SYMBOL-MOST-NEGATIVE-LONG-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "most-negative-long-float") NIL)
;; Loading (DEFTEST SYMBOL-MOST-NEGATIVE-SHORT-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "most-negative-short-float") NIL)
;; Loading (DEFTEST SYMBOL-MOST-NEGATIVE-SINGLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "most-negative-single-float") NIL)
;; Loading (DEFTEST SYMBOL-MOST-POSITIVE-DOUBLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "most-positive-double-float") NIL)
;; Loading (DEFTEST SYMBOL-MOST-POSITIVE-FIXNUM (TEST-IF-NOT-IN-CL-PACKAGE "most-positive-fixnum") NIL)
;; Loading (DEFTEST SYMBOL-MOST-POSITIVE-LONG-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "most-positive-long-float") NIL)
;; Loading (DEFTEST SYMBOL-MOST-POSITIVE-SHORT-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "most-positive-short-float") NIL)
;; Loading (DEFTEST SYMBOL-MOST-POSITIVE-SINGLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "most-positive-single-float") NIL)
;; Loading (DEFTEST SYMBOL-MUFFLE-WARNING (TEST-IF-NOT-IN-CL-PACKAGE "muffle-warning") NIL)
;; Loading (DEFTEST SYMBOL-MULTIPLE-VALUE-BIND (TEST-IF-NOT-IN-CL-PACKAGE "multiple-value-bind") NIL)
;; Loading (DEFTEST SYMBOL-MULTIPLE-VALUE-CALL (TEST-IF-NOT-IN-CL-PACKAGE "multiple-value-call") NIL)
;; Loading (DEFTEST SYMBOL-MULTIPLE-VALUE-LIST (TEST-IF-NOT-IN-CL-PACKAGE "multiple-value-list") NIL)
;; Loading (DEFTEST SYMBOL-MULTIPLE-VALUE-PROG1 (TEST-IF-NOT-IN-CL-PACKAGE "multiple-value-prog1") NIL)
;; Loading (DEFTEST SYMBOL-MULTIPLE-VALUE-SETQ (TEST-IF-NOT-IN-CL-PACKAGE "multiple-value-setq") NIL)
;; Loading (DEFTEST SYMBOL-MULTIPLE-VALUES-LIMIT (TEST-IF-NOT-IN-CL-PACKAGE "multiple-values-limit") NIL)
;; Loading (DEFTEST SYMBOL-NAME-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "name-char") NIL)
;; Loading (DEFTEST SYMBOL-NAMESTRING (TEST-IF-NOT-IN-CL-PACKAGE "namestring") NIL)
;; Loading (DEFTEST SYMBOL-NBUTLAST (TEST-IF-NOT-IN-CL-PACKAGE "nbutlast") NIL)
;; Loading (DEFTEST SYMBOL-NCONC (TEST-IF-NOT-IN-CL-PACKAGE "nconc") NIL)
;; Loading (DEFTEST SYMBOL-NEXT-METHOD-P (TEST-IF-NOT-IN-CL-PACKAGE "next-method-p") NIL)
;; Loading (DEFTEST SYMBOL-NIL (TEST-IF-NOT-IN-CL-PACKAGE "nil") NIL)
;; Loading (DEFTEST SYMBOL-NINTERSECTION (TEST-IF-NOT-IN-CL-PACKAGE "nintersection") NIL)
;; Loading (DEFTEST SYMBOL-NINTH (TEST-IF-NOT-IN-CL-PACKAGE "ninth") NIL)
;; Loading (DEFTEST SYMBOL-NO-APPLICABLE-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "no-applicable-method") NIL)
;; Loading (DEFTEST SYMBOL-NO-NEXT-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "no-next-method") NIL)
;; Loading (DEFTEST SYMBOL-NOT (TEST-IF-NOT-IN-CL-PACKAGE "not") NIL)
;; Loading (DEFTEST SYMBOL-NOTANY (TEST-IF-NOT-IN-CL-PACKAGE "notany") NIL)
;; Loading (DEFTEST SYMBOL-NOTEVERY (TEST-IF-NOT-IN-CL-PACKAGE "notevery") NIL)
;; Loading (DEFTEST SYMBOL-NOTINLINE (TEST-IF-NOT-IN-CL-PACKAGE "notinline") NIL)
;; Loading (DEFTEST SYMBOL-NRECONC (TEST-IF-NOT-IN-CL-PACKAGE "nreconc") NIL)
;; Loading (DEFTEST SYMBOL-NREVERSE (TEST-IF-NOT-IN-CL-PACKAGE "nreverse") NIL)
;; Loading (DEFTEST SYMBOL-NSET-DIFFERENCE (TEST-IF-NOT-IN-CL-PACKAGE "nset-difference") NIL)
;; Loading (DEFTEST SYMBOL-NSET-EXCLUSIVE-OR (TEST-IF-NOT-IN-CL-PACKAGE "nset-exclusive-or") NIL)
;; Loading (DEFTEST SYMBOL-NSTRING-CAPITALIZE (TEST-IF-NOT-IN-CL-PACKAGE "nstring-capitalize") NIL)
;; Loading (DEFTEST SYMBOL-NSTRING-DOWNCASE (TEST-IF-NOT-IN-CL-PACKAGE "nstring-downcase") NIL)
;; Loading (DEFTEST SYMBOL-NSTRING-UPCASE (TEST-IF-NOT-IN-CL-PACKAGE "nstring-upcase") NIL)
;; Loading (DEFTEST SYMBOL-NSUBLIS (TEST-IF-NOT-IN-CL-PACKAGE "nsublis") NIL)
;; Loading (DEFTEST SYMBOL-NSUBST (TEST-IF-NOT-IN-CL-PACKAGE "nsubst") NIL)
;; Loading (DEFTEST SYMBOL-NSUBST-IF (TEST-IF-NOT-IN-CL-PACKAGE "nsubst-if") NIL)
;; Loading (DEFTEST SYMBOL-NSUBST-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "nsubst-if-not") NIL)
;; Loading (DEFTEST SYMBOL-NSUBSTITUTE (TEST-IF-NOT-IN-CL-PACKAGE "nsubstitute") NIL)
;; Loading (DEFTEST SYMBOL-NSUBSTITUTE-IF (TEST-IF-NOT-IN-CL-PACKAGE "nsubstitute-if") NIL)
;; Loading (DEFTEST SYMBOL-NSUBSTITUTE-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "nsubstitute-if-not") NIL)
;; Loading (DEFTEST SYMBOL-NTH (TEST-IF-NOT-IN-CL-PACKAGE "nth") NIL)
;; Loading (DEFTEST SYMBOL-NTH-VALUE (TEST-IF-NOT-IN-CL-PACKAGE "nth-value") NIL)
;; Loading (DEFTEST SYMBOL-NTHCDR (TEST-IF-NOT-IN-CL-PACKAGE "nthcdr") NIL)
;; Loading (DEFTEST SYMBOL-NULL (TEST-IF-NOT-IN-CL-PACKAGE "null") NIL)
;; Loading (DEFTEST SYMBOL-NUMBER (TEST-IF-NOT-IN-CL-PACKAGE "number") NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SYMBOL-NUMBERP (TEST-IF-NOT-IN-CL-PACKAGE "numberp") NIL)
;; Loading (DEFTEST SYMBOL-NUMERATOR (TEST-IF-NOT-IN-CL-PACKAGE "numerator") NIL)
;; Loading (DEFTEST SYMBOL-NUNION (TEST-IF-NOT-IN-CL-PACKAGE "nunion") NIL)
;; Loading (DEFTEST SYMBOL-ODDP (TEST-IF-NOT-IN-CL-PACKAGE "oddp") NIL)
;; Loading (DEFTEST SYMBOL-OPEN (TEST-IF-NOT-IN-CL-PACKAGE "open") NIL)
;; Loading (DEFTEST SYMBOL-OPEN-STREAM-P (TEST-IF-NOT-IN-CL-PACKAGE "open-stream-p") NIL)
;; Loading (DEFTEST SYMBOL-OPTIMIZE (TEST-IF-NOT-IN-CL-PACKAGE "optimize") NIL)
;; Loading (DEFTEST SYMBOL-OR (TEST-IF-NOT-IN-CL-PACKAGE "or") NIL)
;; Loading (DEFTEST SYMBOL-OTHERWISE (TEST-IF-NOT-IN-CL-PACKAGE "otherwise") NIL)
;; Loading (DEFTEST SYMBOL-OUTPUT-STREAM-P (TEST-IF-NOT-IN-CL-PACKAGE "output-stream-p") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "package") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "package-error") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE-ERROR-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "package-error-package") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE-NAME (TEST-IF-NOT-IN-CL-PACKAGE "package-name") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE-NICKNAMES (TEST-IF-NOT-IN-CL-PACKAGE "package-nicknames") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE-SHADOWING-SYMBOLS (TEST-IF-NOT-IN-CL-PACKAGE "package-shadowing-symbols") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE-USE-LIST (TEST-IF-NOT-IN-CL-PACKAGE "package-use-list") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE-USED-BY-LIST (TEST-IF-NOT-IN-CL-PACKAGE "package-used-by-list") NIL)
;; Loading (DEFTEST SYMBOL-PACKAGEP (TEST-IF-NOT-IN-CL-PACKAGE "packagep") NIL)
;; Loading (DEFTEST SYMBOL-PAIRLIS (TEST-IF-NOT-IN-CL-PACKAGE "pairlis") NIL)
;; Loading (DEFTEST SYMBOL-PARSE-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "parse-error") NIL)
;; Loading (DEFTEST SYMBOL-PARSE-INTEGER (TEST-IF-NOT-IN-CL-PACKAGE "parse-integer") NIL)
;; Loading (DEFTEST SYMBOL-PARSE-NAMESTRING (TEST-IF-NOT-IN-CL-PACKAGE "parse-namestring") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAME (TEST-IF-NOT-IN-CL-PACKAGE "pathname") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAME-DEVICE (TEST-IF-NOT-IN-CL-PACKAGE "pathname-device") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAME-DIRECTORY (TEST-IF-NOT-IN-CL-PACKAGE "pathname-directory") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAME-HOST (TEST-IF-NOT-IN-CL-PACKAGE "pathname-host") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAME-MATCH-P (TEST-IF-NOT-IN-CL-PACKAGE "pathname-match-p") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAME-NAME (TEST-IF-NOT-IN-CL-PACKAGE "pathname-name") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAME-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "pathname-type") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAME-VERSION (TEST-IF-NOT-IN-CL-PACKAGE "pathname-version") NIL)
;; Loading (DEFTEST SYMBOL-PATHNAMEP (TEST-IF-NOT-IN-CL-PACKAGE "pathnamep") NIL)
;; Loading (DEFTEST SYMBOL-PEEK-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "peek-char") NIL)
;; Loading (DEFTEST SYMBOL-PHASE (TEST-IF-NOT-IN-CL-PACKAGE "phase") NIL)
;; Loading (DEFTEST SYMBOL-PI (TEST-IF-NOT-IN-CL-PACKAGE "pi") NIL)
;; Loading (DEFTEST SYMBOL-PLUSP (TEST-IF-NOT-IN-CL-PACKAGE "plusp") NIL)
;; Loading (DEFTEST SYMBOL-POP (TEST-IF-NOT-IN-CL-PACKAGE "pop") NIL)
;; Loading (DEFTEST SYMBOL-POSITION (TEST-IF-NOT-IN-CL-PACKAGE "position") NIL)
;; Loading (DEFTEST SYMBOL-POSITION-IF (TEST-IF-NOT-IN-CL-PACKAGE "position-if") NIL)
;; Loading (DEFTEST SYMBOL-POSITION-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "position-if-not") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT (TEST-IF-NOT-IN-CL-PACKAGE "pprint") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-DISPATCH (TEST-IF-NOT-IN-CL-PACKAGE "pprint-dispatch") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-EXIT-IF-LIST-EXHAUSTED (TEST-IF-NOT-IN-CL-PACKAGE "pprint-exit-if-list-exhausted") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-FILL (TEST-IF-NOT-IN-CL-PACKAGE "pprint-fill") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-INDENT (TEST-IF-NOT-IN-CL-PACKAGE "pprint-indent") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-LINEAR (TEST-IF-NOT-IN-CL-PACKAGE "pprint-linear") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-LOGICAL-BLOCK (TEST-IF-NOT-IN-CL-PACKAGE "pprint-logical-block") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-NEWLINE (TEST-IF-NOT-IN-CL-PACKAGE "pprint-newline") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-POP (TEST-IF-NOT-IN-CL-PACKAGE "pprint-pop") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-TAB (TEST-IF-NOT-IN-CL-PACKAGE "pprint-tab") NIL)
;; Loading (DEFTEST SYMBOL-PPRINT-TABULAR (TEST-IF-NOT-IN-CL-PACKAGE "pprint-tabular") NIL)
;; Loading (DEFTEST SYMBOL-PRIN1 (TEST-IF-NOT-IN-CL-PACKAGE "prin1") NIL)
;; Loading (DEFTEST SYMBOL-PRIN1-TO-STRING (TEST-IF-NOT-IN-CL-PACKAGE "prin1-to-string") NIL)
;; Loading (DEFTEST SYMBOL-PRINC (TEST-IF-NOT-IN-CL-PACKAGE "princ") NIL)
;; Loading (DEFTEST SYMBOL-PRINC-TO-STRING (TEST-IF-NOT-IN-CL-PACKAGE "princ-to-string") NIL)
;; Loading (DEFTEST SYMBOL-PRINT (TEST-IF-NOT-IN-CL-PACKAGE "print") NIL)
;; Loading (DEFTEST SYMBOL-PRINT-NOT-READABLE (TEST-IF-NOT-IN-CL-PACKAGE "print-not-readable") NIL)
;; Loading (DEFTEST SYMBOL-PRINT-NOT-READABLE-OBJECT (TEST-IF-NOT-IN-CL-PACKAGE "print-not-readable-object") NIL)
;; Loading (DEFTEST SYMBOL-PRINT-OBJECT (TEST-IF-NOT-IN-CL-PACKAGE "print-object") NIL)
;; Loading (DEFTEST SYMBOL-PRINT-UNREADABLE-OBJECT (TEST-IF-NOT-IN-CL-PACKAGE "print-unreadable-object") NIL)
;; Loading (DEFTEST SYMBOL-PROBE-FILE (TEST-IF-NOT-IN-CL-PACKAGE "probe-file") NIL)
;; Loading (DEFTEST SYMBOL-PROCLAIM (TEST-IF-NOT-IN-CL-PACKAGE "proclaim") NIL)
;; Loading (DEFTEST SYMBOL-PROG (TEST-IF-NOT-IN-CL-PACKAGE "prog") NIL)
;; Loading (DEFTEST SYMBOL-PROG* (TEST-IF-NOT-IN-CL-PACKAGE "prog*") NIL)
;; Loading (DEFTEST SYMBOL-PROG1 (TEST-IF-NOT-IN-CL-PACKAGE "prog1") NIL)
;; Loading (DEFTEST SYMBOL-PROG2 (TEST-IF-NOT-IN-CL-PACKAGE "prog2") NIL)
;; Loading (DEFTEST SYMBOL-PROGN (TEST-IF-NOT-IN-CL-PACKAGE "progn") NIL)
;; Loading (DEFTEST SYMBOL-PROGRAM-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "program-error") NIL)
;; Loading (DEFTEST SYMBOL-PROGV (TEST-IF-NOT-IN-CL-PACKAGE "progv") NIL)
;; Loading (DEFTEST SYMBOL-PROVIDE (TEST-IF-NOT-IN-CL-PACKAGE "provide") NIL)
;; Loading (DEFTEST SYMBOL-PSETF (TEST-IF-NOT-IN-CL-PACKAGE "psetf") NIL)
;; Loading (DEFTEST SYMBOL-PSETQ (TEST-IF-NOT-IN-CL-PACKAGE "psetq") NIL)
;; Loading (DEFTEST SYMBOL-PUSH (TEST-IF-NOT-IN-CL-PACKAGE "push") NIL)
;; Loading (DEFTEST SYMBOL-PUSHNEW (TEST-IF-NOT-IN-CL-PACKAGE "pushnew") NIL)
;; Loading (DEFTEST SYMBOL-QUOTE (TEST-IF-NOT-IN-CL-PACKAGE "quote") NIL)
;; Loading (DEFTEST SYMBOL-RANDOM (TEST-IF-NOT-IN-CL-PACKAGE "random") NIL)
;; Loading (DEFTEST SYMBOL-RANDOM-STATE (TEST-IF-NOT-IN-CL-PACKAGE "random-state") NIL)
;; Loading (DEFTEST SYMBOL-RANDOM-STATE-P (TEST-IF-NOT-IN-CL-PACKAGE "random-state-p") NIL)
;; Loading (DEFTEST SYMBOL-RASSOC (TEST-IF-NOT-IN-CL-PACKAGE "rassoc") NIL)
;; Loading (DEFTEST SYMBOL-RASSOC-IF (TEST-IF-NOT-IN-CL-PACKAGE "rassoc-if") NIL)
;; Loading (DEFTEST SYMBOL-RASSOC-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "rassoc-if-not") NIL)
;; Loading (DEFTEST SYMBOL-RATIO (TEST-IF-NOT-IN-CL-PACKAGE "ratio") NIL)
;; Loading (DEFTEST SYMBOL-RATIONAL (TEST-IF-NOT-IN-CL-PACKAGE "rational") NIL)
;; Loading (DEFTEST SYMBOL-RATIONALIZE (TEST-IF-NOT-IN-CL-PACKAGE "rationalize") NIL)
;; Loading (DEFTEST SYMBOL-RATIONALP (TEST-IF-NOT-IN-CL-PACKAGE "rationalp") NIL)
;; Loading (DEFTEST SYMBOL-READ (TEST-IF-NOT-IN-CL-PACKAGE "read") NIL)
;; Loading (DEFTEST SYMBOL-READ-BYTE (TEST-IF-NOT-IN-CL-PACKAGE "read-byte") NIL)
;; Loading (DEFTEST SYMBOL-READ-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "read-char") NIL)
;; Loading (DEFTEST SYMBOL-READ-CHAR-NO-HANG (TEST-IF-NOT-IN-CL-PACKAGE "read-char-no-hang") NIL)
;; Loading (DEFTEST SYMBOL-READ-DELIMITED-LIST (TEST-IF-NOT-IN-CL-PACKAGE "read-delimited-list") NIL)
;; Loading (DEFTEST SYMBOL-READ-FROM-STRING (TEST-IF-NOT-IN-CL-PACKAGE "read-from-string") NIL)
;; Loading (DEFTEST SYMBOL-READ-LINE (TEST-IF-NOT-IN-CL-PACKAGE "read-line") NIL)
;; Loading (DEFTEST SYMBOL-READ-PRESERVING-WHITESPACE (TEST-IF-NOT-IN-CL-PACKAGE "read-preserving-whitespace") NIL)
;; Loading (DEFTEST SYMBOL-READ-SEQUENCE (TEST-IF-NOT-IN-CL-PACKAGE "read-sequence") NIL)
;; Loading (DEFTEST SYMBOL-READER-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "reader-error") NIL)
;; Loading (DEFTEST SYMBOL-READTABLE (TEST-IF-NOT-IN-CL-PACKAGE "readtable") NIL)
;; Loading (DEFTEST SYMBOL-READTABLE-CASE (TEST-IF-NOT-IN-CL-PACKAGE "readtable-case") NIL)
;; Loading (DEFTEST SYMBOL-READTABLEP (TEST-IF-NOT-IN-CL-PACKAGE "readtablep") NIL)
;; Loading (DEFTEST SYMBOL-REAL (TEST-IF-NOT-IN-CL-PACKAGE "real") NIL)
;; Loading (DEFTEST SYMBOL-REALP (TEST-IF-NOT-IN-CL-PACKAGE "realp") NIL)
;; Loading (DEFTEST SYMBOL-REALPART (TEST-IF-NOT-IN-CL-PACKAGE "realpart") NIL)
;; Loading (DEFTEST SYMBOL-REDUCE (TEST-IF-NOT-IN-CL-PACKAGE "reduce") NIL)
;; Loading (DEFTEST SYMBOL-REINITIALIZE-INSTANCE (TEST-IF-NOT-IN-CL-PACKAGE "reinitialize-instance") NIL)
;; Loading (DEFTEST SYMBOL-REM (TEST-IF-NOT-IN-CL-PACKAGE "rem") NIL)
;; Loading (DEFTEST SYMBOL-REMF (TEST-IF-NOT-IN-CL-PACKAGE "remf") NIL)
;; Loading (DEFTEST SYMBOL-REMHASH (TEST-IF-NOT-IN-CL-PACKAGE "remhash") NIL)
;; Loading (DEFTEST SYMBOL-REMOVE (TEST-IF-NOT-IN-CL-PACKAGE "remove") NIL)
;; Loading (DEFTEST SYMBOL-REMOVE-DUPLICATES (TEST-IF-NOT-IN-CL-PACKAGE "remove-duplicates") NIL)
;; Loading (DEFTEST SYMBOL-REMOVE-IF (TEST-IF-NOT-IN-CL-PACKAGE "remove-if") NIL)
;; Loading (DEFTEST SYMBOL-REMOVE-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "remove-if-not") NIL)
;; Loading (DEFTEST SYMBOL-REMOVE-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "remove-method") NIL)
;; Loading (DEFTEST SYMBOL-REMPROP (TEST-IF-NOT-IN-CL-PACKAGE "remprop") NIL)
;; Loading (DEFTEST SYMBOL-RENAME-FILE (TEST-IF-NOT-IN-CL-PACKAGE "rename-file") NIL)
;; Loading (DEFTEST SYMBOL-RENAME-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "rename-package") NIL)
;; Loading (DEFTEST SYMBOL-REPLACE (TEST-IF-NOT-IN-CL-PACKAGE "replace") NIL)
;; Loading (DEFTEST SYMBOL-REQUIRE (TEST-IF-NOT-IN-CL-PACKAGE "require") NIL)
;; Loading (DEFTEST SYMBOL-REST (TEST-IF-NOT-IN-CL-PACKAGE "rest") NIL)
;; Loading (DEFTEST SYMBOL-RESTART (TEST-IF-NOT-IN-CL-PACKAGE "restart") NIL)
;; Loading (DEFTEST SYMBOL-RESTART-BIND (TEST-IF-NOT-IN-CL-PACKAGE "restart-bind") NIL)
;; Loading (DEFTEST SYMBOL-RESTART-CASE (TEST-IF-NOT-IN-CL-PACKAGE "restart-case") NIL)
;; Loading (DEFTEST SYMBOL-RESTART-NAME (TEST-IF-NOT-IN-CL-PACKAGE "restart-name") NIL)
;; Loading (DEFTEST SYMBOL-RETURN (TEST-IF-NOT-IN-CL-PACKAGE "return") NIL)
;; Loading (DEFTEST SYMBOL-RETURN-FROM (TEST-IF-NOT-IN-CL-PACKAGE "return-from") NIL)
;; Loading (DEFTEST SYMBOL-REVAPPEND (TEST-IF-NOT-IN-CL-PACKAGE "revappend") NIL)
;; Loading (DEFTEST SYMBOL-REVERSE (TEST-IF-NOT-IN-CL-PACKAGE "reverse") NIL)
;; Loading (DEFTEST SYMBOL-ROOM (TEST-IF-NOT-IN-CL-PACKAGE "room") NIL)
;; Loading (DEFTEST SYMBOL-ROTATEF (TEST-IF-NOT-IN-CL-PACKAGE "rotatef") NIL)
;; Loading (DEFTEST SYMBOL-ROUND (TEST-IF-NOT-IN-CL-PACKAGE "round") NIL)
;; Loading (DEFTEST SYMBOL-ROW-MAJOR-AREF (TEST-IF-NOT-IN-CL-PACKAGE "row-major-aref") NIL)
;; Loading (DEFTEST SYMBOL-RPLACA (TEST-IF-NOT-IN-CL-PACKAGE "rplaca") NIL)
;; Loading (DEFTEST SYMBOL-RPLACD (TEST-IF-NOT-IN-CL-PACKAGE "rplacd") NIL)
;; Loading (DEFTEST SYMBOL-SAFETY (TEST-IF-NOT-IN-CL-PACKAGE "safety") NIL)
;; Loading (DEFTEST SYMBOL-SATISFIES (TEST-IF-NOT-IN-CL-PACKAGE "satisfies") NIL)
;; Loading (DEFTEST SYMBOL-SBIT (TEST-IF-NOT-IN-CL-PACKAGE "sbit") NIL)
;; Loading (DEFTEST SYMBOL-SCALE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "scale-float") NIL)
;; Loading (DEFTEST SYMBOL-SCHAR (TEST-IF-NOT-IN-CL-PACKAGE "schar") NIL)
;; Loading (DEFTEST SYMBOL-SEARCH (TEST-IF-NOT-IN-CL-PACKAGE "search") NIL)
;; Loading (DEFTEST SYMBOL-SECOND (TEST-IF-NOT-IN-CL-PACKAGE "second") NIL)
;; Loading (DEFTEST SYMBOL-SEQUENCE (TEST-IF-NOT-IN-CL-PACKAGE "sequence") NIL)
;; Loading (DEFTEST SYMBOL-SERIOUS-CONDITION (TEST-IF-NOT-IN-CL-PACKAGE "serious-condition") NIL)
;; Loading (DEFTEST SYMBOL-SET (TEST-IF-NOT-IN-CL-PACKAGE "set") NIL)
;; Loading (DEFTEST SYMBOL-SET-DIFFERENCE (TEST-IF-NOT-IN-CL-PACKAGE "set-difference") NIL)
;; Loading (DEFTEST SYMBOL-SET-DISPATCH-MACRO-CHARACTER (TEST-IF-NOT-IN-CL-PACKAGE "set-dispatch-macro-character") NIL)
;; Loading (DEFTEST SYMBOL-SET-EXCLUSIVE-OR (TEST-IF-NOT-IN-CL-PACKAGE "set-exclusive-or") NIL)
;; Loading (DEFTEST SYMBOL-SET-MACRO-CHARACTER (TEST-IF-NOT-IN-CL-PACKAGE "set-macro-character") NIL)
;; Loading (DEFTEST SYMBOL-SET-PPRINT-DISPATCH (TEST-IF-NOT-IN-CL-PACKAGE "set-pprint-dispatch") NIL)
;; Loading (DEFTEST SYMBOL-SET-SYNTAX-FROM-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "set-syntax-from-char") NIL)
;; Loading (DEFTEST SYMBOL-SETF (TEST-IF-NOT-IN-CL-PACKAGE "setf") NIL)
;; Loading (DEFTEST SYMBOL-SETQ (TEST-IF-NOT-IN-CL-PACKAGE "setq") NIL)
;; Loading (DEFTEST SYMBOL-SEVENTH (TEST-IF-NOT-IN-CL-PACKAGE "seventh") NIL)
;; Loading (DEFTEST SYMBOL-SHADOW (TEST-IF-NOT-IN-CL-PACKAGE "shadow") NIL)
;; Loading (DEFTEST SYMBOL-SHADOWING-IMPORT (TEST-IF-NOT-IN-CL-PACKAGE "shadowing-import") NIL)
;; Loading (DEFTEST SYMBOL-SHARED-INITIALIZE (TEST-IF-NOT-IN-CL-PACKAGE "shared-initialize") NIL)
;; Loading (DEFTEST SYMBOL-SHIFTF (TEST-IF-NOT-IN-CL-PACKAGE "shiftf") NIL)
;; Loading (DEFTEST SYMBOL-SHORT-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "short-float") NIL)
;; Loading (DEFTEST SYMBOL-SHORT-FLOAT-EPSILON (TEST-IF-NOT-IN-CL-PACKAGE "short-float-epsilon") NIL)
;; Loading (DEFTEST SYMBOL-SHORT-FLOAT-NEGATIVE-EPSILON (TEST-IF-NOT-IN-CL-PACKAGE "short-float-negative-epsilon") NIL)
;; Loading (DEFTEST SYMBOL-SHORT-SITE-NAME (TEST-IF-NOT-IN-CL-PACKAGE "short-site-name") NIL)
;; Loading (DEFTEST SYMBOL-SIGNAL (TEST-IF-NOT-IN-CL-PACKAGE "signal") NIL)
;; Loading (DEFTEST SYMBOL-SIGNED-BYTE (TEST-IF-NOT-IN-CL-PACKAGE "signed-byte") NIL)
;; Loading (DEFTEST SYMBOL-SIGNUM (TEST-IF-NOT-IN-CL-PACKAGE "signum") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-ARRAY (TEST-IF-NOT-IN-CL-PACKAGE "simple-array") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-BASE-STRING (TEST-IF-NOT-IN-CL-PACKAGE "simple-base-string") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-BIT-VECTOR (TEST-IF-NOT-IN-CL-PACKAGE "simple-bit-vector") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-BIT-VECTOR-P (TEST-IF-NOT-IN-CL-PACKAGE "simple-bit-vector-p") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-CONDITION (TEST-IF-NOT-IN-CL-PACKAGE "simple-condition") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-CONDITION-FORMAT-ARGUMENTS (TEST-IF-NOT-IN-CL-PACKAGE "simple-condition-format-arguments") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-CONDITION-FORMAT-CONTROL (TEST-IF-NOT-IN-CL-PACKAGE "simple-condition-format-control") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "simple-error") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-STRING (TEST-IF-NOT-IN-CL-PACKAGE "simple-string") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-STRING-P (TEST-IF-NOT-IN-CL-PACKAGE "simple-string-p") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-TYPE-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "simple-type-error") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-VECTOR (TEST-IF-NOT-IN-CL-PACKAGE "simple-vector") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-VECTOR-P (TEST-IF-NOT-IN-CL-PACKAGE "simple-vector-p") NIL)
;; Loading (DEFTEST SYMBOL-SIMPLE-WARNING (TEST-IF-NOT-IN-CL-PACKAGE "simple-warning") NIL)
;; Loading (DEFTEST SYMBOL-SIN (TEST-IF-NOT-IN-CL-PACKAGE "sin") NIL)
;; Loading (DEFTEST SYMBOL-SINGLE-FLOAT (TEST-IF-NOT-IN-CL-PACKAGE "single-float") NIL)
;; Loading (DEFTEST SYMBOL-SINGLE-FLOAT-EPSILON (TEST-IF-NOT-IN-CL-PACKAGE "single-float-epsilon") NIL)
;; Loading (DEFTEST SYMBOL-SINGLE-FLOAT-NEGATIVE-EPSILON (TEST-IF-NOT-IN-CL-PACKAGE "single-float-negative-epsilon") NIL)
;; Loading (DEFTEST SYMBOL-SINH (TEST-IF-NOT-IN-CL-PACKAGE "sinh") NIL)
;; Loading (DEFTEST SYMBOL-SIXTH (TEST-IF-NOT-IN-CL-PACKAGE "sixth") NIL)
;; Loading (DEFTEST SYMBOL-SLEEP (TEST-IF-NOT-IN-CL-PACKAGE "sleep") NIL)
;; Loading (DEFTEST SYMBOL-SLOT-BOUNDP (TEST-IF-NOT-IN-CL-PACKAGE "slot-boundp") NIL)
;; Loading (DEFTEST SYMBOL-SLOT-EXISTS-P (TEST-IF-NOT-IN-CL-PACKAGE "slot-exists-p") NIL)
;; Loading (DEFTEST SYMBOL-SLOT-MAKUNBOUND (TEST-IF-NOT-IN-CL-PACKAGE "slot-makunbound") NIL)
;; Loading (DEFTEST SYMBOL-SLOT-MISSING (TEST-IF-NOT-IN-CL-PACKAGE "slot-missing") NIL)
;; Loading (DEFTEST SYMBOL-SLOT-UNBOUND (TEST-IF-NOT-IN-CL-PACKAGE "slot-unbound") NIL)
;; Loading (DEFTEST SYMBOL-SLOT-VALUE (TEST-IF-NOT-IN-CL-PACKAGE "slot-value") NIL)
;; Loading (DEFTEST SYMBOL-SOFTWARE-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "software-type") NIL)
;; Loading (DEFTEST SYMBOL-SOFTWARE-VERSION (TEST-IF-NOT-IN-CL-PACKAGE "software-version") NIL)
;; Loading (DEFTEST SYMBOL-SOME (TEST-IF-NOT-IN-CL-PACKAGE "some") NIL)
;; Loading (DEFTEST SYMBOL-SORT (TEST-IF-NOT-IN-CL-PACKAGE "sort") NIL)
;; Loading (DEFTEST SYMBOL-SPACE (TEST-IF-NOT-IN-CL-PACKAGE "space") NIL)
;; Loading (DEFTEST SYMBOL-SPECIAL (TEST-IF-NOT-IN-CL-PACKAGE "special") NIL)
;; Loading (DEFTEST SYMBOL-SPECIAL-OPERATOR-P (TEST-IF-NOT-IN-CL-PACKAGE "special-operator-p") NIL)
;; Loading (DEFTEST SYMBOL-SPEED (TEST-IF-NOT-IN-CL-PACKAGE "speed") NIL)
;; Loading (DEFTEST SYMBOL-SQRT (TEST-IF-NOT-IN-CL-PACKAGE "sqrt") NIL)
;; Loading (DEFTEST SYMBOL-STABLE-SORT (TEST-IF-NOT-IN-CL-PACKAGE "stable-sort") NIL)
;; Loading (DEFTEST SYMBOL-STANDARD (TEST-IF-NOT-IN-CL-PACKAGE "standard") NIL)
;; Loading (DEFTEST SYMBOL-STANDARD-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "standard-char") NIL)
;; Loading (DEFTEST SYMBOL-STANDARD-CHAR-P (TEST-IF-NOT-IN-CL-PACKAGE "standard-char-p") NIL)
;; Loading (DEFTEST SYMBOL-STANDARD-CLASS (TEST-IF-NOT-IN-CL-PACKAGE "standard-class") NIL)
;; Loading (DEFTEST SYMBOL-STANDARD-GENERIC-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "standard-generic-function") NIL)
;; Loading (DEFTEST SYMBOL-STANDARD-METHOD (TEST-IF-NOT-IN-CL-PACKAGE "standard-method") NIL)
;; Loading (DEFTEST SYMBOL-STANDARD-OBJECT (TEST-IF-NOT-IN-CL-PACKAGE "standard-object") NIL)
;; Loading (DEFTEST SYMBOL-STEP (TEST-IF-NOT-IN-CL-PACKAGE "step") NIL)
;; Loading (DEFTEST SYMBOL-STORAGE-CONDITION (TEST-IF-NOT-IN-CL-PACKAGE "storage-condition") NIL)
;; Loading (DEFTEST SYMBOL-STORE-VALUE (TEST-IF-NOT-IN-CL-PACKAGE "store-value") NIL)
;; Loading (DEFTEST SYMBOL-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "stream") NIL)
;; Loading (DEFTEST SYMBOL-STREAM-ELEMENT-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "stream-element-type") NIL)
;; Loading (DEFTEST SYMBOL-STREAM-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "stream-error") NIL)
;; Loading (DEFTEST SYMBOL-STREAM-ERROR-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "stream-error-stream") NIL)
;; Loading (DEFTEST SYMBOL-STREAM-EXTERNAL-FORMAT (TEST-IF-NOT-IN-CL-PACKAGE "stream-external-format") NIL)
;; Loading (DEFTEST SYMBOL-STREAMP (TEST-IF-NOT-IN-CL-PACKAGE "streamp") NIL)
;; Loading (DEFTEST SYMBOL-STRING (TEST-IF-NOT-IN-CL-PACKAGE "string") NIL)
;; Loading (DEFTEST SYMBOL-STRING-CAPITALIZE (TEST-IF-NOT-IN-CL-PACKAGE "string-capitalize") NIL)
;; Loading (DEFTEST SYMBOL-STRING-DOWNCASE (TEST-IF-NOT-IN-CL-PACKAGE "string-downcase") NIL)
;; Loading (DEFTEST SYMBOL-STRING-EQUAL (TEST-IF-NOT-IN-CL-PACKAGE "string-equal") NIL)
;; Loading (DEFTEST SYMBOL-STRING-GREATERP (TEST-IF-NOT-IN-CL-PACKAGE "string-greaterp") NIL)
;; Loading (DEFTEST SYMBOL-STRING-LEFT-TRIM (TEST-IF-NOT-IN-CL-PACKAGE "string-left-trim") NIL)
;; Loading (DEFTEST SYMBOL-STRING-LESSP (TEST-IF-NOT-IN-CL-PACKAGE "string-lessp") NIL)
;; Loading (DEFTEST SYMBOL-STRING-NOT-EQUAL (TEST-IF-NOT-IN-CL-PACKAGE "string-not-equal") NIL)
;; Loading (DEFTEST SYMBOL-STRING-NOT-GREATERP (TEST-IF-NOT-IN-CL-PACKAGE "string-not-greaterp") NIL)
;; Loading (DEFTEST SYMBOL-STRING-NOT-LESSP (TEST-IF-NOT-IN-CL-PACKAGE "string-not-lessp") NIL)
;; Loading (DEFTEST SYMBOL-STRING-RIGHT-TRIM (TEST-IF-NOT-IN-CL-PACKAGE "string-right-trim") NIL)
;; Loading (DEFTEST SYMBOL-STRING-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "string-stream") NIL)
;; Loading (DEFTEST SYMBOL-STRING-TRIM (TEST-IF-NOT-IN-CL-PACKAGE "string-trim") NIL)
;; Loading (DEFTEST SYMBOL-STRING-UPCASE (TEST-IF-NOT-IN-CL-PACKAGE "string-upcase") NIL)
;; Loading (DEFTEST SYMBOL-STRING/= (TEST-IF-NOT-IN-CL-PACKAGE "string/=") NIL)
;; Loading (DEFTEST SYMBOL-STRING< (TEST-IF-NOT-IN-CL-PACKAGE "string<") NIL)
;; Loading (DEFTEST SYMBOL-STRING<= (TEST-IF-NOT-IN-CL-PACKAGE "string<=") NIL)
;; Loading (DEFTEST SYMBOL-STRING= (TEST-IF-NOT-IN-CL-PACKAGE "string=") NIL)
;; Loading (DEFTEST SYMBOL-STRING> (TEST-IF-NOT-IN-CL-PACKAGE "string>") NIL)
;; Loading (DEFTEST SYMBOL-STRING>= (TEST-IF-NOT-IN-CL-PACKAGE "string>=") NIL)
;; Loading (DEFTEST SYMBOL-STRINGP (TEST-IF-NOT-IN-CL-PACKAGE "stringp") NIL)
;; Loading (DEFTEST SYMBOL-STRUCTURE (TEST-IF-NOT-IN-CL-PACKAGE "structure") NIL)
;; Loading (DEFTEST SYMBOL-STRUCTURE-CLASS (TEST-IF-NOT-IN-CL-PACKAGE "structure-class") NIL)
;; Loading (DEFTEST SYMBOL-STRUCTURE-OBJECT (TEST-IF-NOT-IN-CL-PACKAGE "structure-object") NIL)
;; Loading (DEFTEST SYMBOL-STYLE-WARNING (TEST-IF-NOT-IN-CL-PACKAGE "style-warning") NIL)
;; Loading (DEFTEST SYMBOL-SUBLIS (TEST-IF-NOT-IN-CL-PACKAGE "sublis") NIL)
;; Loading (DEFTEST SYMBOL-SUBSEQ (TEST-IF-NOT-IN-CL-PACKAGE "subseq") NIL)
;; Loading (DEFTEST SYMBOL-SUBSETP (TEST-IF-NOT-IN-CL-PACKAGE "subsetp") NIL)
;; Loading (DEFTEST SYMBOL-SUBST (TEST-IF-NOT-IN-CL-PACKAGE "subst") NIL)
;; Loading (DEFTEST SYMBOL-SUBST-IF (TEST-IF-NOT-IN-CL-PACKAGE "subst-if") NIL)
;; Loading (DEFTEST SYMBOL-SUBST-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "subst-if-not") NIL)
;; Loading (DEFTEST SYMBOL-SUBSTITUTE (TEST-IF-NOT-IN-CL-PACKAGE "substitute") NIL)
;; Loading (DEFTEST SYMBOL-SUBSTITUTE-IF (TEST-IF-NOT-IN-CL-PACKAGE "substitute-if") NIL)
;; Loading (DEFTEST SYMBOL-SUBSTITUTE-IF-NOT (TEST-IF-NOT-IN-CL-PACKAGE "substitute-if-not") NIL)
;; Loading (DEFTEST SYMBOL-SUBTYPEP (TEST-IF-NOT-IN-CL-PACKAGE "subtypep") NIL)
;; Loading (DEFTEST SYMBOL-SVREF (TEST-IF-NOT-IN-CL-PACKAGE "svref") NIL)
;; Loading (DEFTEST SYMBOL-SXHASH (TEST-IF-NOT-IN-CL-PACKAGE "sxhash") NIL)
;; Loading (DEFTEST SYMBOL-SYMBOL (TEST-IF-NOT-IN-CL-PACKAGE "symbol") NIL)
;; Loading (DEFTEST SYMBOL-SYMBOL-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "symbol-function") NIL)
;; Loading (DEFTEST SYMBOL-SYMBOL-MACROLET (TEST-IF-NOT-IN-CL-PACKAGE "symbol-macrolet") NIL)
;; Loading (DEFTEST SYMBOL-SYMBOL-NAME (TEST-IF-NOT-IN-CL-PACKAGE "symbol-name") NIL)
;; Loading (DEFTEST SYMBOL-SYMBOL-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "symbol-package") NIL)
;; Loading (DEFTEST SYMBOL-SYMBOL-PLIST (TEST-IF-NOT-IN-CL-PACKAGE "symbol-plist") NIL)
;; Loading (DEFTEST SYMBOL-SYMBOL-VALUE (TEST-IF-NOT-IN-CL-PACKAGE "symbol-value") NIL)
;; Loading (DEFTEST SYMBOL-SYMBOLP (TEST-IF-NOT-IN-CL-PACKAGE "symbolp") NIL)
;; Loading (DEFTEST SYMBOL-SYNONYM-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "synonym-stream") NIL)
;; Loading (DEFTEST SYMBOL-SYNONYM-STREAM-SYMBOL (TEST-IF-NOT-IN-CL-PACKAGE "synonym-stream-symbol") NIL)
;; Loading (DEFTEST SYMBOL-T (TEST-IF-NOT-IN-CL-PACKAGE "t") NIL)
;; Loading (DEFTEST SYMBOL-TAGBODY (TEST-IF-NOT-IN-CL-PACKAGE "tagbody") NIL)
;; Loading (DEFTEST SYMBOL-TAILP (TEST-IF-NOT-IN-CL-PACKAGE "tailp") NIL)
;; Loading (DEFTEST SYMBOL-TAN (TEST-IF-NOT-IN-CL-PACKAGE "tan") NIL)
;; Loading (DEFTEST SYMBOL-TANH (TEST-IF-NOT-IN-CL-PACKAGE "tanh") NIL)
;; Loading (DEFTEST SYMBOL-TENTH (TEST-IF-NOT-IN-CL-PACKAGE "tenth") NIL)
;; Loading (DEFTEST SYMBOL-TERPRI (TEST-IF-NOT-IN-CL-PACKAGE "terpri") NIL)
;; Loading (DEFTEST SYMBOL-THE (TEST-IF-NOT-IN-CL-PACKAGE "the") NIL)
;; Loading (DEFTEST SYMBOL-THIRD (TEST-IF-NOT-IN-CL-PACKAGE "third") NIL)
;; Loading (DEFTEST SYMBOL-THROW (TEST-IF-NOT-IN-CL-PACKAGE "throw") NIL)
;; Loading (DEFTEST SYMBOL-TIME (TEST-IF-NOT-IN-CL-PACKAGE "time") NIL)
;; Loading (DEFTEST SYMBOL-TRACE (TEST-IF-NOT-IN-CL-PACKAGE "trace") NIL)
;; Loading (DEFTEST SYMBOL-TRANSLATE-LOGICAL-PATHNAME (TEST-IF-NOT-IN-CL-PACKAGE "translate-logical-pathname") NIL)
;; Loading (DEFTEST SYMBOL-TRANSLATE-PATHNAME (TEST-IF-NOT-IN-CL-PACKAGE "translate-pathname") NIL)
;; Loading (DEFTEST SYMBOL-TREE-EQUAL (TEST-IF-NOT-IN-CL-PACKAGE "tree-equal") NIL)
;; Loading (DEFTEST SYMBOL-TRUENAME (TEST-IF-NOT-IN-CL-PACKAGE "truename") NIL)
;; Loading (DEFTEST SYMBOL-TRUNCATE (TEST-IF-NOT-IN-CL-PACKAGE "truncate") NIL)
;; Loading (DEFTEST SYMBOL-TWO-WAY-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "two-way-stream") NIL)
;; Loading (DEFTEST SYMBOL-TWO-WAY-STREAM-INPUT-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "two-way-stream-input-stream") NIL)
;; Loading (DEFTEST SYMBOL-TWO-WAY-STREAM-OUTPUT-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "two-way-stream-output-stream") NIL)
;; Loading (DEFTEST SYMBOL-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "type") NIL)
;; Loading (DEFTEST SYMBOL-TYPE-ERROR (TEST-IF-NOT-IN-CL-PACKAGE "type-error") NIL)
;; Loading (DEFTEST SYMBOL-TYPE-ERROR-DATUM (TEST-IF-NOT-IN-CL-PACKAGE "type-error-datum") NIL)
;; Loading (DEFTEST SYMBOL-TYPE-ERROR-EXPECTED-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "type-error-expected-type") NIL)
;; Loading (DEFTEST SYMBOL-TYPE-OF (TEST-IF-NOT-IN-CL-PACKAGE "type-of") NIL)
;; Loading (DEFTEST SYMBOL-TYPECASE (TEST-IF-NOT-IN-CL-PACKAGE "typecase") NIL)
;; Loading (DEFTEST SYMBOL-TYPEP (TEST-IF-NOT-IN-CL-PACKAGE "typep") NIL)
;; Loading (DEFTEST SYMBOL-UNBOUND-SLOT (TEST-IF-NOT-IN-CL-PACKAGE "unbound-slot") NIL)
;; Loading (DEFTEST SYMBOL-UNBOUND-SLOT-INSTANCE (TEST-IF-NOT-IN-CL-PACKAGE "unbound-slot-instance") NIL)
;; Loading (DEFTEST SYMBOL-UNBOUND-VARIABLE (TEST-IF-NOT-IN-CL-PACKAGE "unbound-variable") NIL)
;; Loading (DEFTEST SYMBOL-UNDEFINED-FUNCTION (TEST-IF-NOT-IN-CL-PACKAGE "undefined-function") NIL)
;; Loading (DEFTEST SYMBOL-UNEXPORT (TEST-IF-NOT-IN-CL-PACKAGE "unexport") NIL)
;; Loading (DEFTEST SYMBOL-UNINTERN (TEST-IF-NOT-IN-CL-PACKAGE "unintern") NIL)
;; Loading (DEFTEST SYMBOL-UNION (TEST-IF-NOT-IN-CL-PACKAGE "union") NIL)
;; Loading (DEFTEST SYMBOL-UNLESS (TEST-IF-NOT-IN-CL-PACKAGE "unless") NIL)
;; Loading (DEFTEST SYMBOL-UNREAD-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "unread-char") NIL)
;; Loading (DEFTEST SYMBOL-UNSIGNED-BYTE (TEST-IF-NOT-IN-CL-PACKAGE "unsigned-byte") NIL)
;; Loading (DEFTEST SYMBOL-UNTRACE (TEST-IF-NOT-IN-CL-PACKAGE "untrace") NIL)
;; Loading (DEFTEST SYMBOL-UNUSE-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "unuse-package") NIL)
;; Loading (DEFTEST SYMBOL-UNWIND-PROTECT (TEST-IF-NOT-IN-CL-PACKAGE "unwind-protect") NIL)
;; Loading (DEFTEST SYMBOL-UPDATE-INSTANCE-FOR-DIFFERENT-CLASS (TEST-IF-NOT-IN-CL-PACKAGE "update-instance-for-different-class") NIL)
;; Loading (DEFTEST SYMBOL-UPDATE-INSTANCE-FOR-REDEFINED-CLASS (TEST-IF-NOT-IN-CL-PACKAGE "update-instance-for-redefined-class") NIL)
;; Loading (DEFTEST SYMBOL-UPGRADED-ARRAY-ELEMENT-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "upgraded-array-element-type") NIL)
;; Loading (DEFTEST SYMBOL-UPGRADED-COMPLEX-PART-TYPE (TEST-IF-NOT-IN-CL-PACKAGE "upgraded-complex-part-type") NIL)
;; Loading (DEFTEST SYMBOL-UPPER-CASE-P (TEST-IF-NOT-IN-CL-PACKAGE "upper-case-p") NIL)
;; Loading (DEFTEST SYMBOL-USE-PACKAGE (TEST-IF-NOT-IN-CL-PACKAGE "use-package") NIL)
;; Loading (DEFTEST SYMBOL-USE-VALUE (TEST-IF-NOT-IN-CL-PACKAGE "use-value") NIL)
;; Loading (DEFTEST SYMBOL-USER-HOMEDIR-PATHNAME (TEST-IF-NOT-IN-CL-PACKAGE "user-homedir-pathname") NIL)
;; Loading (DEFTEST SYMBOL-VALUES (TEST-IF-NOT-IN-CL-PACKAGE "values") NIL)
;; Loading (DEFTEST SYMBOL-VALUES-LIST (TEST-IF-NOT-IN-CL-PACKAGE "values-list") NIL)
;; Loading (DEFTEST SYMBOL-VARIABLE (TEST-IF-NOT-IN-CL-PACKAGE "variable") NIL)
;; Loading (DEFTEST SYMBOL-VECTOR (TEST-IF-NOT-IN-CL-PACKAGE "vector") NIL)
;; Loading (DEFTEST SYMBOL-VECTOR-POP (TEST-IF-NOT-IN-CL-PACKAGE "vector-pop") NIL)
;; Loading (DEFTEST SYMBOL-VECTOR-PUSH (TEST-IF-NOT-IN-CL-PACKAGE "vector-push") NIL)
;; Loading (DEFTEST SYMBOL-VECTOR-PUSH-EXTEND (TEST-IF-NOT-IN-CL-PACKAGE "vector-push-extend") NIL)
;; Loading (DEFTEST SYMBOL-VECTORP (TEST-IF-NOT-IN-CL-PACKAGE "vectorp") NIL)
;; Loading (DEFTEST SYMBOL-WARN (TEST-IF-NOT-IN-CL-PACKAGE "warn") NIL)
;; Loading (DEFTEST SYMBOL-WARNING (TEST-IF-NOT-IN-CL-PACKAGE "warning") NIL)
;; Loading (DEFTEST SYMBOL-WHEN (TEST-IF-NOT-IN-CL-PACKAGE "when") NIL)
;; Loading (DEFTEST SYMBOL-WILD-PATHNAME-P (TEST-IF-NOT-IN-CL-PACKAGE "wild-pathname-p") NIL)
;; Loading (DEFTEST SYMBOL-WITH-ACCESSORS (TEST-IF-NOT-IN-CL-PACKAGE "with-accessors") NIL)
;; Loading (DEFTEST SYMBOL-WITH-COMPILATION-UNIT (TEST-IF-NOT-IN-CL-PACKAGE "with-compilation-unit") NIL)
;; Loading (DEFTEST SYMBOL-WITH-CONDITION-RESTARTS (TEST-IF-NOT-IN-CL-PACKAGE "with-condition-restarts") NIL)
;; Loading (DEFTEST SYMBOL-WITH-HASH-TABLE-ITERATOR (TEST-IF-NOT-IN-CL-PACKAGE "with-hash-table-iterator") NIL)
;; Loading (DEFTEST SYMBOL-WITH-INPUT-FROM-STRING (TEST-IF-NOT-IN-CL-PACKAGE "with-input-from-string") NIL)
;; Loading (DEFTEST SYMBOL-WITH-OPEN-FILE (TEST-IF-NOT-IN-CL-PACKAGE "with-open-file") NIL)
;; Loading (DEFTEST SYMBOL-WITH-OPEN-STREAM (TEST-IF-NOT-IN-CL-PACKAGE "with-open-stream") NIL)
;; Loading (DEFTEST SYMBOL-WITH-OUTPUT-TO-STRING (TEST-IF-NOT-IN-CL-PACKAGE "with-output-to-string") NIL)
;; Loading (DEFTEST SYMBOL-WITH-PACKAGE-ITERATOR (TEST-IF-NOT-IN-CL-PACKAGE "with-package-iterator") NIL)
;; Loading (DEFTEST SYMBOL-WITH-SIMPLE-RESTART (TEST-IF-NOT-IN-CL-PACKAGE "with-simple-restart") NIL)
;; Loading (DEFTEST SYMBOL-WITH-SLOTS (TEST-IF-NOT-IN-CL-PACKAGE "with-slots") NIL)
;; Loading (DEFTEST SYMBOL-WITH-STANDARD-IO-SYNTAX (TEST-IF-NOT-IN-CL-PACKAGE "with-standard-io-syntax") NIL)
;; Loading (DEFTEST SYMBOL-WRITE (TEST-IF-NOT-IN-CL-PACKAGE "write") NIL)
;; Loading (DEFTEST SYMBOL-WRITE-BYTE (TEST-IF-NOT-IN-CL-PACKAGE "write-byte") NIL)
;; Loading (DEFTEST SYMBOL-WRITE-CHAR (TEST-IF-NOT-IN-CL-PACKAGE "write-char") NIL)
;; Loading (DEFTEST SYMBOL-WRITE-LINE (TEST-IF-NOT-IN-CL-PACKAGE "write-line") NIL)
;; Loading (DEFTEST SYMBOL-WRITE-SEQUENCE (TEST-IF-NOT-IN-CL-PACKAGE "write-sequence") NIL)
;; Loading (DEFTEST SYMBOL-WRITE-STRING (TEST-IF-NOT-IN-CL-PACKAGE "write-string") NIL)
;; Loading (DEFTEST SYMBOL-WRITE-TO-STRING (TEST-IF-NOT-IN-CL-PACKAGE "write-to-string") NIL)
;; Loading (DEFTEST SYMBOL-Y-OR-N-P (TEST-IF-NOT-IN-CL-PACKAGE "y-or-n-p") NIL)
;; Loading (DEFTEST SYMBOL-YES-OR-NO-P (TEST-IF-NOT-IN-CL-PACKAGE "yes-or-no-p") NIL)
;; Loading (DEFTEST SYMBOL-ZEROP (TEST-IF-NOT-IN-CL-PACKAGE "zerop") NIL)
;; Loading (DEFTEST KEYWORD-PACKAGE-NICKNAMES :NOTES :STANDARDIZED-PACKAGE-NICKNAMES (PACKAGE-NICKNAMES (FIND-PACKAGE "KEYWORD")) NIL)
;; Loading (DEFTEST COMMON-LISP-PACKAGE-NICKNAMES :NOTES :STANDARDIZED-PACKAGE-NICKNAMES (PACKAGE-NICKNAMES (FIND-PACKAGE "COMMON-LISP")) ("CL"))
;; Loading (DEFTEST COMMON-LISP-USER-PACKAGE-NICKNAMES :NOTES :STANDARDIZED-PACKAGE-NICKNAMES (PACKAGE-NICKNAMES (FIND-PACKAGE "COMMON-LISP-USER")) ("CL-USER"))
;; Loading (DEFTEST NO-EXTRA-SYMBOLS-EXPORTED-FROM-COMMON-LISP (LET ((HT (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (LOOP FOR N IN *CL-SYMBOL-NAMES* DO (SETF (GETHASH N HT) T)) (LET ((EXTRAS NIL)) (DO-EXTERNAL-SYMBOLS (S "CL") (UNLESS (GETHASH (SYMBOL-NAME S) HT) (PUSH S EXTRAS))) EXTRAS)) NIL)
;; Loading (DEFTEST KEYWORD-BEHAVIOR (LET ((RESULT NIL) (KEYWORD-PACKAGE (FIND-PACKAGE "KEYWORD"))) (DO-SYMBOLS (S KEYWORD-PACKAGE RESULT) (MULTIPLE-VALUE-BIND (SYM STATUS) (FIND-SYMBOL (SYMBOL-NAME S) KEYWORD-PACKAGE) (COND ((NOT (EQT S SYM)) (PUSH (LIST S SYM) RESULT)) ((EQT STATUS :INTERNAL) (PUSH (LIST S STATUS) RESULT)) ((EQT STATUS :EXTERNAL) (UNLESS (AND (EQT (SYMBOL-VALUE S) S) (CONSTANTP S)) (PUSH (LIST S SYM (QUOTE NOT-CONSTANT)) RESULT))))))) NIL)
;; Loading (DEFTEST CL-FUNCTION-SYMBOLS.1 (LOOP FOR S IN (APPEND *CL-FUNCTION-SYMBOLS* *CL-ACCESSOR-SYMBOLS*) WHEN (OR (NOT (FBOUNDP S)) (MACRO-FUNCTION S) (SPECIAL-OPERATOR-P S) (NOT (SYMBOL-FUNCTION S))) COLLECT S) NIL)
;; Loading (DEFTEST CL-MACRO-SYMBOLS.1 (LOOP FOR S IN *CL-MACRO-SYMBOLS* WHEN (OR (NOT (FBOUNDP S)) (NOT (MACRO-FUNCTION S))) COLLECT S) NIL)
;; Loading (DEFTEST CL-CONSTANT-SYMBOLS.1 (LOOP FOR S IN *CL-CONSTANT-SYMBOLS* WHEN (OR (NOT (BOUNDP S)) (NOT (CONSTANTP S))) COLLECT S) NIL)
;; Loading (DEFTEST CL-VARIABLE-SYMBOLS.1 (LOOP FOR S IN *CL-VARIABLE-SYMBOLS* WHEN (NOT (BOUNDP S)) COLLECT S) NIL)
;; Loading (DEFTEST CL-TYPES-THAT-ARE-CLASSES.1 (LOOP FOR S IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* FOR C = (FIND-CLASS S NIL) UNLESS (AND C (EQ (CLASS-NAME C) S) (TYPEP C (QUOTE CLASS))) COLLECT S) NIL)
;; Loading (DEFTEST CL-TYPES-THAT-ARE-CLASSES.2 (LOOP FOR S IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* FOR C = (FIND-CLASS S NIL NIL) UNLESS (AND C (EQ (CLASS-NAME C) S) (TYPEP C (QUOTE CLASS))) COLLECT S) NIL)
;; Loading (DEFTEST CL-TYPES-THAT-ARE-CLASSES.3 (LOOP FOR S IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* FOR C = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%FOO (&ENVIRONMENT ENV) (LIST (QUOTE QUOTE) (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA S)) NIL ENV)))) (%FOO)))) UNLESS (AND C (EQ (CLASS-NAME C) S) (TYPEP C (QUOTE CLASS))) COLLECT S) NIL)
;; Loading (DEFTEST SYMBOL-PACKAGE.ERROR.1 (SIGNALS-ERROR (SYMBOL-PACKAGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-PACKAGE.ERROR.2 (SIGNALS-ERROR (SYMBOL-PACKAGE (QUOTE CONS) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-PACKAGE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SYMBOL-PACKAGE) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST SYMBOL-PLIST.ERROR.1 (SIGNALS-ERROR (SYMBOL-PLIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-PLIST.ERROR.2 (SIGNALS-ERROR (SYMBOL-PLIST (QUOTE CONS) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-PLIST.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SYMBOL-PLIST) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST SYMBOL-PLIST.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SETF (SYMBOL-PLIST X) NIL))) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST SYMBOL-VALUE.ERROR.1 (SIGNALS-ERROR (SYMBOL-VALUE) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-VALUE.ERROR.2 (SIGNALS-ERROR (SYMBOL-VALUE (QUOTE *PACKAGE*) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-VALUE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SYMBOL-VALUE) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST SYMBOL-VALUE.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SETF (SYMBOL-VALUE X) NIL))) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST SYMBOL-VALUE.ERROR.5 (LET ((SYM (GENSYM))) (DECLARE (OPTIMIZE SAFETY)) (HANDLER-CASE (PROGN (SYMBOL-VALUE SYM) :BAD) (UNBOUND-VARIABLE (C) (ASSERT (EQ (CELL-ERROR-NAME C) SYM)) :GOOD))) :GOOD)
;; Loading (LOAD "symbolp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/symbolp.lsp 81113CA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SYMBOLP.1 (NOTNOT-MV (SYMBOLP NIL)) T)
;; Loading (DEFTEST SYMBOLP.2 (CHECK-PREDICATE (FUNCTION SYMBOLP) NIL *SYMBOLS*) NIL)
;; Loading (DEFTEST SYMBOLP.3 (CHECK-PREDICATE (COMPLEMENT (FUNCTION SYMBOLP)) (FUNCTION (LAMBDA (X) (MEMBER X *SYMBOLS*)))) NIL)
;; Loading (DEFTEST SYMBOLP.ERROR.1 (SIGNALS-ERROR (SYMBOLP) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOLP.ERROR.2 (SIGNALS-ERROR (SYMBOLP NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "keywordp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/keywordp.lsp 81148247>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST KEYWORDP.1 (KEYWORDP (QUOTE HEFALUMP)) NIL)
;; Loading (DEFTEST KEYWORDP.2 (KEYWORDP 17) NIL)
;; Loading (DEFTEST KEYWORDP.3 (NOTNOT-MV (KEYWORDP :STREAM)) T)
;; Loading (DEFTEST KEYWORDP.4 (NOTNOT-MV (KEYWORDP (QUOTE :STREAM))) T)
;; Loading (DEFTEST KEYWORDP.5 (KEYWORDP NIL) NIL)
;; Loading (DEFTEST KEYWORDP.6 (NOTNOT-MV (KEYWORDP :NIL)) T)
;; Loading (DEFTEST KEYWORDP.7 (KEYWORDP (QUOTE (:STREAM))) NIL)
;; Loading (DEFTEST KEYWORDP.8 (KEYWORDP "rest") NIL)
;; Loading (DEFTEST KEYWORDP.9 (KEYWORDP ":rest") NIL)
;; Loading (DEFTEST KEYWORDP.10 (KEYWORDP (QUOTE &BODY)) NIL)
;; Loading (DEFTEST KEYWORDP.12 (KEYWORDP T) NIL)
;; Loading (DEFTEST KEYWORDP.13 (LET ((KWP (FIND-PACKAGE "KEYWORD")) (BAD NIL)) (DO-SYMBOLS (S "KEYWORD" BAD) (WHEN (AND (NOT (EQ (SYMBOL-PACKAGE S) KWP)) (KEYWORDP S)) (PUSH S BAD)))) NIL)
;; Loading (DEFTEST KEYWORDP.ORDER.1 (LET ((I 0)) (VALUES (KEYWORDP (PROGN (INCF I) NIL)) I)) NIL 1)
;; Loading (DEFTEST KEYWORDP.ERROR.1 (SIGNALS-ERROR (KEYWORDP) PROGRAM-ERROR) T)
;; Loading (DEFTEST KEYWORDP.ERROR.2 (SIGNALS-ERROR (KEYWORDP :X :X) PROGRAM-ERROR) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (LOAD "make-symbol.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-symbol.lsp C09CF8D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-SYMBOL.1 (NOTNOT-MV (SYMBOLP (MAKE-SYMBOL "FOO"))) T)
;; Loading (DEFTEST MAKE-SYMBOL.2 (SYMBOL-PACKAGE (MAKE-SYMBOL "BAR")) NIL)
;; Loading (DEFTEST MAKE-SYMBOL.3 (SYMBOL-PACKAGE (MAKE-SYMBOL "CL::FOO")) NIL)
;; Loading (DEFTEST MAKE-SYMBOL.4 (SYMBOL-PACKAGE (MAKE-SYMBOL "CL:FOO")) NIL)
;; Loading (DEFTEST MAKE-SYMBOL.5 (SYMBOL-NAME (MAKE-SYMBOL "xyz")) "xyz")
;; Loading (DEFTEST MAKE-SYMBOL.6 (EQT (MAKE-SYMBOL "A") (MAKE-SYMBOL "A")) NIL)
;; Loading (DEFTEST MAKE-SYMBOL.7 (BOUNDP (MAKE-SYMBOL "B")) NIL)
;; Loading (DEFTEST MAKE-SYMBOL.8 (SYMBOL-PLIST (MAKE-SYMBOL "C")) NIL)
;; Loading (DEFTEST MAKE-SYMBOL.9 (FBOUNDP (MAKE-SYMBOL "D")) NIL)
;; Loading (DEFTEST MAKE-SYMBOL.10 (SYMBOL-NAME (MAKE-SYMBOL "")) "")
;; Loading (DEFTEST MAKE-SYMBOL.11 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SYMBOL-NAME (MAKE-SYMBOL (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) "")
;; Loading (DEFTEST MAKE-SYMBOL.12 (LET* ((NAME (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (#\A #\B #\C #\D)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S (MAKE-SYMBOL NAME)) (NAME2 (SYMBOL-NAME S))) (VALUES (SYMBOL-PACKAGE S) (STRING=T NAME2 "ABCD"))) NIL T)
;; Loading (DEFTEST MAKE-SYMBOL.13 (LET* ((NAME (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (#\A #\B #\C #\D #\E #\F)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4)) (S (MAKE-SYMBOL NAME)) (NAME2 (SYMBOL-NAME S))) (VALUES (SYMBOL-PACKAGE S) (STRING=T NAME2 "ABCD"))) NIL T)
;; Loading (DEFTEST MAKE-SYMBOL.14 (LET* ((NAME (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (#\A #\B #\C #\D)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (S (MAKE-SYMBOL NAME)) (NAME2 (SYMBOL-NAME S))) (VALUES (SYMBOL-PACKAGE S) (STRING=T NAME2 "ABCD"))) NIL T)
;; Loading (DEFTEST MAKE-SYMBOL.15 (LET* ((NAME0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (#\0 #\A #\B #\C #\D #\E)) :ELEMENT-TYPE (QUOTE CHARACTER))) (NAME (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)) (S (MAKE-SYMBOL NAME)) (NAME2 (SYMBOL-NAME S))) (VALUES (SYMBOL-PACKAGE S) (STRING=T NAME2 "ABCD"))) NIL T)
;; Loading (DEFTEST MAKE-SYMBOL.16 (LET* ((NAME0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (#\0 #\A #\B #\C #\D #\E)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (NAME (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)) (S (MAKE-SYMBOL NAME)) (NAME2 (SYMBOL-NAME S))) (VALUES (SYMBOL-PACKAGE S) (STRING=T NAME2 "ABCD"))) NIL T)
;; Loading (DEFTEST MAKE-SYMBOL.ORDER.1 (LET ((I 0)) (VALUES (SYMBOL-NAME (MAKE-SYMBOL (PROGN (INCF I) "ABC"))) I)) "ABC" 1)
;; Loading (DEFTEST MAKE-SYMBOL.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION MAKE-SYMBOL) (FUNCTION STRINGP)) NIL)
;; Loading (DEFTEST MAKE-SYMBOL.ERROR.9 (SIGNALS-ERROR (MAKE-SYMBOL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SYMBOL.ERROR.10 (SIGNALS-ERROR (MAKE-SYMBOL "a" "a") PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SYMBOL.ERROR.11 (SIGNALS-TYPE-ERROR X (QUOTE (#\a #\b #\c)) (MAKE-SYMBOL X)) T)
;; Loading (LOAD "copy-symbol.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/copy-symbol.lsp C0AB7497>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COPY-SYMBOL.1 (NOTNOT-MV (EVERY (FUNCTION (LAMBDA (X) (LET ((Y (COPY-SYMBOL X))) (AND (NULL (SYMBOL-PLIST Y)) (SYMBOLP Y) (NOT (BOUNDP Y)) (NOT (FBOUNDP Y)) (NULL (SYMBOL-PACKAGE Y)) (STRING= (SYMBOL-NAME X) (SYMBOL-NAME Y)) (SYMBOLP (COPY-SYMBOL Y)))))) (QUOTE (NIL T A B \a 123)))) T)
;; Loading (DEFTEST COPY-SYMBOL.2 (PROGN (SETF (SYMBOL-PLIST (QUOTE \f\o\o)) (QUOTE (A B C D))) (MAKUNBOUND (QUOTE \f\o\o)) (NOTNOT-MV (EVERY (FUNCTION (LAMBDA (X) (LET ((Y (COPY-SYMBOL X T))) (AND (EQUAL (SYMBOL-PLIST Y) (SYMBOL-PLIST X)) (SYMBOLP Y) (IF (BOUNDP X) (BOUNDP Y) (NOT (BOUNDP Y))) (IF (FBOUNDP X) (FBOUNDP Y) (NOT (FBOUNDP Y))) (NULL (SYMBOL-PACKAGE Y)) (STRING= (SYMBOL-NAME X) (SYMBOL-NAME Y)))))) (QUOTE (NIL T A B \f\o\o \a 123))))) T)
;; Loading (DEFTEST COPY-SYMBOL.3 (PROGN (SETF (SYMBOL-PLIST (QUOTE \f\o\o)) (QUOTE (A B C D))) (SETF (SYMBOL-VALUE (QUOTE \a)) 12345) (NOTNOT-MV (EVERY (FUNCTION (LAMBDA (X) (LET ((Y (COPY-SYMBOL X T))) (AND (EQL (LENGTH (SYMBOL-PLIST Y)) (LENGTH (SYMBOL-PLIST X))) (EVERY (FUNCTION EQ) (SYMBOL-PLIST Y) (SYMBOL-PLIST X)) (SYMBOLP Y) (IF (BOUNDP X) (EQT (SYMBOL-VALUE X) (SYMBOL-VALUE Y)) (NOT (BOUNDP Y))) (IF (FBOUNDP X) (FBOUNDP Y) (NOT (FBOUNDP Y))) (NULL (SYMBOL-PACKAGE Y)) (STRING= (SYMBOL-NAME X) (SYMBOL-NAME Y)) (EQL (LENGTH (SYMBOL-PLIST X)) (LENGTH (SYMBOL-PLIST Y))))))) (QUOTE (NIL T A B \f\o\o \a 123))))) T)
;; Loading (DEFTEST COPY-SYMBOL.4 (EQT (COPY-SYMBOL (QUOTE A)) (COPY-SYMBOL (QUOTE A))) NIL)
;; Loading (DEFTEST COPY-SYMBOL.5 (LET ((I 0) X Y (S (QUOTE #:\x))) (LET ((S2 (COPY-SYMBOL (PROGN (SETF X (INCF I)) S) (PROGN (SETF Y (INCF I)) NIL)))) (VALUES (SYMBOL-NAME S2) (EQ S S2) I X Y))) "x" NIL 2 1 2)
;; Loading (DEFTEST COPY-SYMBOL.ERROR.1 (SIGNALS-ERROR (COPY-SYMBOL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-SYMBOL.ERROR.2 (SIGNALS-ERROR (COPY-SYMBOL (QUOTE A) T (QUOTE FOO)) PROGRAM-ERROR) T)
;; Loading (LOAD "gensym.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/gensym.lsp C0B47E67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST GENSYM.1 (EQUAL (GENSYM) (GENSYM)) NIL)
;; Loading (DEFTEST GENSYM.2 (STRING= (SYMBOL-NAME (GENSYM)) (SYMBOL-NAME (GENSYM))) NIL)
;; Loading (DEFTEST GENSYM.3 (LET ((*GENSYM-COUNTER* 1)) (SYMBOL-NAME (GENSYM))) "G1")
;; Loading (DEFTEST GENSYM.4 (LET ((*GENSYM-COUNTER* 1327)) (SYMBOL-NAME (GENSYM "FOO"))) "FOO1327")
;; Loading (DEFTEST GENSYM.5 (BOUNDP (GENSYM)) NIL)
;; Loading (DEFTEST GENSYM.6 (FBOUNDP (GENSYM)) NIL)
;; Loading (DEFTEST GENSYM.7 (SYMBOL-PLIST (GENSYM)) NIL)
;; Loading (DEFTEST GENSYM.8 (SYMBOL-PACKAGE (GENSYM)) NIL)
;; Loading (DEFTEST GENSYM.9 (LET ((*GENSYM-COUNTER* 12345)) (GENSYM) *GENSYM-COUNTER*) 12346)
;; Loading (DEFTEST GENSYM.10 (LET ((*GENSYM-COUNTER* 1234567890123456789012345678901234567890)) (SYMBOL-NAME (GENSYM))) "G1234567890123456789012345678901234567890")
;; Loading (DEFTEST GENSYM.11 (LET ((*GENSYM-COUNTER* 12345678901234567890123456789012345678901234567890)) (GENSYM) *GENSYM-COUNTER*) 12345678901234567890123456789012345678901234567891)
;; Loading (DEFTEST GENSYM.12 (LET ((*GENSYM-COUNTER* 10)) (SYMBOL-NAME (GENSYM 123))) "G123")
;; Loading (DEFTEST GENSYM.13 (LET ((*GENSYM-COUNTER* 10)) (GENSYM 123) *GENSYM-COUNTER*) 10)
;; Loading (DEFTEST GENSYM-COUNTER.1 (AND (INTEGERP *GENSYM-COUNTER*) (>= *GENSYM-COUNTER* 0) T) T)
;; Loading (DEFTEST GENSYM.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION GENSYM) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR STRING UNSIGNED-BYTE)))))) NIL)
;; Loading (DEFTEST GENSYM.ERROR.7 (SIGNALS-ERROR (GENSYM 10 (QUOTE FOO)) PROGRAM-ERROR) T)
;; Loading (DEFTEST GENSYM.ERROR.8 (SIGNALS-ERROR (LOCALLY (GENSYM T) T) TYPE-ERROR) T)
;; Loading (DEFTEST GENSYM.ERROR.9 (SIGNALS-ERROR (GENSYM "FOO" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "gentemp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/gentemp.lsp C0BDDAA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST GENTEMP.1 (LET* ((PACKAGE-NAME "GENTEMP-TEST-PACKAGE")) (UNWIND-PROTECT (LET* ((PKG (MAKE-PACKAGE PACKAGE-NAME :USE NIL)) (GCOUNTER *GENSYM-COUNTER*) (SYM (LET ((*PACKAGE* PKG)) (GENTEMP))) (SYM-NAME (SYMBOL-NAME SYM))) (VALUES (=T GCOUNTER *GENSYM-COUNTER*) (EQLT (AREF SYM-NAME 0) #\T) (NOTNOT (EVERY (FUNCTION DIGIT-CHAR-P) (SUBSEQ SYM-NAME 1))) (EQL (SYMBOL-PACKAGE SYM) PKG) (DO-EXTERNAL-SYMBOLS (S PKG T) (WHEN (EQL S SYM) (RETURN NIL))))) (DELETE-PACKAGE PACKAGE-NAME))) T T T T T)
;; Loading (DEFTEST GENTEMP.2 (LET* ((PACKAGE-NAME "GENTEMP-TEST-PACKAGE")) (UNWIND-PROTECT (LET* ((PKG (MAKE-PACKAGE PACKAGE-NAME :USE NIL)) (GCOUNTER *GENSYM-COUNTER*) (SYM (LET ((*PACKAGE* PKG)) (GENTEMP "X"))) (SYM-NAME (SYMBOL-NAME SYM))) (VALUES (=T GCOUNTER *GENSYM-COUNTER*) (EQLT (AREF SYM-NAME 0) #\X) (NOTNOT (EVERY (FUNCTION DIGIT-CHAR-P) (SUBSEQ SYM-NAME 1))) (EQL (SYMBOL-PACKAGE SYM) PKG) (DO-EXTERNAL-SYMBOLS (S PKG T) (WHEN (EQL S SYM) (RETURN NIL))))) (DELETE-PACKAGE PACKAGE-NAME))) T T T T T)
;; Loading (DEFTEST GENTEMP.3 (LET* ((PACKAGE-NAME "GENTEMP-TEST-PACKAGE")) (UNWIND-PROTECT (LET* ((PKG (MAKE-PACKAGE PACKAGE-NAME :USE NIL)) (GCOUNTER *GENSYM-COUNTER*) (SYM (GENTEMP "X" PACKAGE-NAME)) (SYM-NAME (SYMBOL-NAME SYM))) (VALUES (=T GCOUNTER *GENSYM-COUNTER*) (EQLT (AREF SYM-NAME 0) #\X) (NOTNOT (EVERY (FUNCTION DIGIT-CHAR-P) (SUBSEQ SYM-NAME 1))) (EQL (SYMBOL-PACKAGE SYM) PKG) (DO-EXTERNAL-SYMBOLS (S PKG T) (WHEN (EQL S SYM) (RETURN NIL))))) (DELETE-PACKAGE PACKAGE-NAME))) T T T T T)
;; Loading (DEFTEST GENTEMP.4 (LET* ((PACKAGE-NAME "GENTEMP-TEST-PACKAGE")) (UNWIND-PROTECT (LET* ((PKG (MAKE-PACKAGE PACKAGE-NAME :USE NIL)) (GCOUNTER *GENSYM-COUNTER*) (SYM (GENTEMP "" (MAKE-SYMBOL PACKAGE-NAME))) (SYM-NAME (SYMBOL-NAME SYM))) (VALUES (=T GCOUNTER *GENSYM-COUNTER*) (NOTNOT (EVERY (FUNCTION DIGIT-CHAR-P) SYM-NAME)) (EQL (SYMBOL-PACKAGE SYM) PKG) (DO-EXTERNAL-SYMBOLS (S PKG T) (WHEN (EQL S SYM) (RETURN NIL))))) (DELETE-PACKAGE PACKAGE-NAME))) T T T T)
;; Loading (DEFTEST GENTEMP.5 (LET* ((PACKAGE-NAME "Z")) (SAFELY-DELETE-PACKAGE PACKAGE-NAME) (UNWIND-PROTECT (LET* ((PKG (MAKE-PACKAGE PACKAGE-NAME :USE NIL)) (GCOUNTER *GENSYM-COUNTER*) (SYM (GENTEMP "Y" #\Z)) (SYM-NAME (SYMBOL-NAME SYM))) (VALUES (=T GCOUNTER *GENSYM-COUNTER*) (EQLT (AREF SYM-NAME 0) #\Y) (NOTNOT (EVERY (FUNCTION DIGIT-CHAR-P) (SUBSEQ SYM-NAME 1))) (EQL (SYMBOL-PACKAGE SYM) PKG) (DO-EXTERNAL-SYMBOLS (S PKG T) (WHEN (EQL S SYM) (RETURN NIL))))) (DELETE-PACKAGE PACKAGE-NAME))) T T T T T)
;; Loading (DEFTEST GENTEMP.6 (LET* ((PACKAGE-NAME "GENTEMP-TEST-PACKAGE")) (UNWIND-PROTECT (LET* ((*PACKAGE* (MAKE-PACKAGE PACKAGE-NAME :USE NIL)) (SYMS (LOOP REPEAT 100 COLLECT (GENTEMP)))) (=T (LENGTH SYMS) (LENGTH (REMOVE-DUPLICATES SYMS)))) (DELETE-PACKAGE PACKAGE-NAME))) T)
;; Loading (DEFTEST GENTEMP.ERROR.1 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (STRINGP X) (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-TYPE-ERROR X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (GENTEMP X)))) T)) COLLECT X) NIL)
;; Loading (DEFTEST GENTEMP.ERROR.2 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (TYPEP X (QUOTE PACKAGE)) (STRING-DESIGNATOR-P X) (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-TYPE-ERROR X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (GENTEMP "T" X)))) T)) COLLECT X) NIL)
;; Loading (DEFTEST GENTEMP.ERROR.3 (SIGNALS-ERROR (GENTEMP "" *PACKAGE* NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "symbol-function.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/symbol-function.lsp C0CE53F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SYMBOL-FUNCTION.1 (LET ((SYM (GENSYM)) (F (FUNCTION (LAMBDA NIL (VALUES 1 2 3))))) (VALUES (EQT (SETF (SYMBOL-FUNCTION SYM) F) F) (MULTIPLE-VALUE-LIST (EVAL (LIST SYM))))) T (1 2 3))
;; Loading (DEFTEST SYMBOL-FUNCTION.ERROR.1 (SIGNALS-ERROR (SYMBOL-FUNCTION) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-FUNCTION.ERROR.2 (SIGNALS-ERROR (SYMBOL-FUNCTION (QUOTE CONS) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-FUNCTION.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SYMBOL-FUNCTION) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST SYMBOL-FUNCTION.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SETF (SYMBOL-FUNCTION X) (FUNCTION IDENTITY)))) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST SYMBOL-FUNCTION.ERROR.5 (LET ((SYM (GENSYM))) (HANDLER-CASE (PROGN (SYMBOL-FUNCTION SYM) NIL) (UNDEFINED-FUNCTION (C) (ASSERT (EQ (CELL-ERROR-NAME C) SYM)) :GOOD))) :GOOD)
;; Loading (LOAD "symbol-name.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/symbol-name.lsp C0D30E87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SYMBOL-NAME.1 (SYMBOL-NAME (QUOTE ABCD)) "ABCD")
;; Loading (DEFTEST SYMBOL-NAME.2 (SYMBOL-NAME (QUOTE 1234\a\b\c\dABCD)) "1234abcdABCD")
;; Loading (DEFTEST SYMBOL-NAME.3 (SYMBOL-NAME :\a\b\c\d\e\f\g) "abcdefg")
;; Loading (DEFTEST SYMBOL-NAME.ERROR.1 (SIGNALS-ERROR (SYMBOL-NAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-NAME.ERROR.2 (SIGNALS-ERROR (SYMBOL-NAME (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-NAME.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SYMBOL-NAME) (FUNCTION SYMBOLP)) NIL)
;; Loading (LOAD "boundp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/boundp.lsp C0D67AB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BOUNDP.ERROR.1 (SIGNALS-ERROR (BOUNDP) PROGRAM-ERROR) T)
;; Loading (DEFTEST BOUNDP.ERROR.2 (SIGNALS-ERROR (BOUNDP (QUOTE A) (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST BOUNDP.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION BOUNDP) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST BOUNDP.ERROR.4 (SIGNALS-TYPE-ERROR X (QUOTE (SETF CAR)) (BOUNDP X)) T)
;; Loading (DEFTEST BOUNDP.ERROR.5 (SIGNALS-TYPE-ERROR X "abc" (BOUNDP X)) T)
;; Loading (DEFTEST BOUNDP.ERROR.6 (SIGNALS-TYPE-ERROR X "abc" (LOCALLY (BOUNDP X) T)) T)
;; Loading (DEFTEST BOUNDP.1 (NOTNOT-MV (BOUNDP (QUOTE T))) T)
;; Loading (DEFTEST BOUNDP.2 (NOTNOT-MV (BOUNDP NIL)) T)
;; Loading (DEFTEST BOUNDP.3 (NOTNOT-MV (BOUNDP :FOO)) T)
;; Loading (DEFTEST BOUNDP.4 (BOUNDP (QUOTE #:FOO)) NIL)
;; Loading (DEFTEST BOUNDP.5 (LOOP FOR X IN *CL-NON-VARIABLE-CONSTANT-SYMBOLS* WHEN (BOUNDP X) COLLECT X) NIL)
;; Loading (DEFTEST BOUNDP.6 (MACROLET ((%M (Z) Z)) (BOUNDP (EXPAND-IN-CURRENT-ENV (%M (QUOTE #:FOO))))) NIL)
;; Loading (DEFTEST BOUNDP.ORDER.1 (LET ((I 0) X) (VALUES (BOUNDP (PROGN (SETF X (INCF I)) (QUOTE #:FOO))) I X)) NIL 1 1)
;; Loading (LOAD "special-operator-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/special-operator-p.lsp C0DC1FB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFPARAMETER +SPECIAL-OPERATORS+ (QUOTE (BLOCK LET* RETURN-FROM CATCH LOAD-TIME-VALUE SETQ EVAL-WHEN LOCALLY SYMBOL-MACROLET FLET MACROLET TAGBODY FUNCTION MULTIPLE-VALUE-CALL THE GO MULTIPLE-VALUE-PROG1 THROW IF PROGN UNWIND-PROTECT LABELS PROGV LET QUOTE)))
;; Loading (DEFTEST SPECIAL-OPERATOR-P.1 (LOOP FOR S IN +SPECIAL-OPERATORS+ UNLESS (SPECIAL-OPERATOR-P S) COLLECT S) NIL)
;; Loading (DEFTEST SPECIAL-OPERATOR-P.2 (LET ((P (FIND-PACKAGE "CL"))) (LOOP FOR NAME IN *CL-SYMBOL-NAMES* UNLESS (OR (MEMBER NAME +SPECIAL-OPERATORS+ :TEST (FUNCTION STRING=)) (LET ((SYM (FIND-SYMBOL NAME P))) (OR (NOT (SPECIAL-OPERATOR-P SYM)) (MACRO-FUNCTION SYM)))) COLLECT NAME)) NIL)
;; Loading (DEFTEST SPECIAL-OPERATOR-P.ORDER.1 (LET ((I 0)) (VALUES (NOTNOT (SPECIAL-OPERATOR-P (PROGN (INCF I) (QUOTE CATCH)))) I)) T 1)
;; Loading (DEFTEST SPECIAL-OPERATOR-P.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION SPECIAL-OPERATOR-P) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST SPECIAL-OPERATOR-P.ERROR.2 (SIGNALS-ERROR (SPECIAL-OPERATOR-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST SPECIAL-OPERATOR-P.ERROR.3 (SIGNALS-ERROR (SPECIAL-OPERATOR-P (QUOTE CONS) (QUOTE CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "makunbound.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/makunbound.lsp C0E22B57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKUNBOUND.1 (LET ((SYM (GENSYM))) (VALUES (BOUNDP SYM) (EQUALT (MULTIPLE-VALUE-LIST (MAKUNBOUND SYM)) (LIST SYM)) (BOUNDP SYM) (SETF (SYMBOL-VALUE SYM) NIL) (NOTNOT (BOUNDP SYM)) (EQUALT (MULTIPLE-VALUE-LIST (MAKUNBOUND SYM)) (LIST SYM)) (BOUNDP SYM))) NIL T NIL NIL T T NIL)
;; Loading (DEFTEST MAKUNBOUND.2 (LET ((SYM (GENSYM))) (VALUES (BOUNDP SYM) (SETF (SYMBOL-VALUE SYM) :FOO) (EQUALT (MULTIPLE-VALUE-LIST (MAKUNBOUND SYM)) (LIST SYM)) (BOUNDP SYM) (HANDLER-CASE (SYMBOL-VALUE SYM) (UNBOUND-VARIABLE (C) (IF (EQ (CELL-ERROR-NAME C) SYM) :GOOD (LIST :BAD SYM (CELL-ERROR-NAME C))))))) NIL :FOO T NIL :GOOD)
;; Loading (DEFTEST MAKUNBOUND.ERROR.1 (SIGNALS-ERROR (MAKUNBOUND) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKUNBOUND.ERROR.2 (SIGNALS-ERROR (MAKUNBOUND (GENSYM) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKUNBOUND.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION MAKUNBOUND) (FUNCTION SYMBOLP)) NIL)
;; Loading (LOAD "set.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/set.lsp C0E71BE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SET.1 (LET ((*VAR-USED-IN-SET-TESTS* (QUOTE A)) (VAR (QUOTE *VAR-USED-IN-SET-TESTS*))) (DECLARE (SPECIAL *VAR-USED-IN-SET-TESTS*)) (VALUES *VAR-USED-IN-SET-TESTS* (SET VAR (QUOTE B)) *VAR-USED-IN-SET-TESTS*)) A B B)
;; Loading (DEFTEST SET.2 (LET ((*VAR-USED-IN-SET-TESTS* (QUOTE A)) (VAR (QUOTE *VAR-USED-IN-SET-TESTS*))) (DECLARE (SPECIAL *VAR-USED-IN-SET-TESTS*)) (VALUES (LET ((*VAR-USED-IN-SET-TESTS* (QUOTE C))) (LIST (SET VAR (QUOTE B)) *VAR-USED-IN-SET-TESTS* (SYMBOL-VALUE VAR))) *VAR-USED-IN-SET-TESTS*)) (B C B) B)
;; Loading (DEFTEST SET.ERROR.1 (SIGNALS-ERROR (SET) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET.ERROR.2 (SIGNALS-ERROR (LET ((*VAR-USED-IN-SET-TESTS* (QUOTE A))) (DECLARE (SPECIAL *VAR-USED-IN-SET-TESTS*)) (SET (QUOTE *VAR-USED-IN-SET-TESTS*))) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET.ERROR.3 (SIGNALS-ERROR (LET ((*VAR-USED-IN-SET-TESTS* (QUOTE A))) (DECLARE (SPECIAL *VAR-USED-IN-SET-TESTS*)) (SET (QUOTE *VAR-USED-IN-SET-TESTS*) NIL NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET.ERROR.4 (SIGNALS-ERROR (LET ((*VAR-USED-IN-SET-TESTS* (QUOTE A)) (*Y* (QUOTE B))) (DECLARE (SPECIAL *VAR-USED-IN-SET-TESTS*)) (SET (QUOTE *VAR-USED-IN-SET-TESTS*) NIL (QUOTE *Y*) NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "remprop.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/remprop.lsp C0ECAE37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REMPROP.1 (LET ((SYM (GENSYM))) (VALUES (SYMBOL-PLIST SYM) (MULTIPLE-VALUE-LIST (REMPROP SYM :FOO)) (SYMBOL-PLIST SYM))) NIL (NIL) NIL)
;; Loading (DEFTEST REMPROP.2 (LET ((SYM (GENSYM))) (VALUES (SYMBOL-PLIST SYM) (COPY-LIST (SETF (SYMBOL-PLIST SYM) (QUOTE (:FOO 0)))) (MULTIPLE-VALUE-LIST (NOTNOT-MV (REMPROP SYM :FOO))) (SYMBOL-PLIST SYM))) NIL (:FOO 0) (T) NIL)
;; Loading (DEFTEST REMPROP.3 (LET ((SYM (GENSYM))) (VALUES (SYMBOL-PLIST SYM) (COPY-LIST (SETF (SYMBOL-PLIST SYM) (LIST :BAR 1 :FOO 0 :BAZ 2))) (MULTIPLE-VALUE-LIST (NOTNOT-MV (REMPROP SYM :FOO))) (COPY-LIST (SYMBOL-PLIST SYM)) (MULTIPLE-VALUE-LIST (NOTNOT-MV (REMPROP SYM :FOO))) (SYMBOL-PLIST SYM))) NIL (:BAR 1 :FOO 0 :BAZ 2) (T) (:BAR 1 :BAZ 2) (NIL) (:BAR 1 :BAZ 2))
;; Loading (DEFTEST REMPROP.4 (LET ((SYM (GENSYM))) (VALUES (SYMBOL-PLIST SYM) (COPY-LIST (SETF (SYMBOL-PLIST SYM) (LIST :BAR 1 :FOO 0 :BAZ 2 :FOO 3))) (MULTIPLE-VALUE-LIST (NOTNOT-MV (REMPROP SYM :FOO))) (COPY-LIST (SYMBOL-PLIST SYM)) (MULTIPLE-VALUE-LIST (NOTNOT-MV (REMPROP SYM :FOO))) (SYMBOL-PLIST SYM))) NIL (:BAR 1 :FOO 0 :BAZ 2 :FOO 3) (T) (:BAR 1 :BAZ 2 :FOO 3) (T) (:BAR 1 :BAZ 2))
;; Loading (DEFTEST REMPROP.ERROR.1 (SIGNALS-ERROR (REMPROP) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMPROP.ERROR.2 (SIGNALS-ERROR (REMPROP (GENSYM)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMPROP.ERROR.3 (SIGNALS-ERROR (REMPROP (GENSYM) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMPROP.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (REMPROP X NIL))) (FUNCTION SYMBOLP)) NIL)
;; Loading (LOAD "get.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/get.lsp C0F3C787>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST GET.1 (LET ((SYM (GENSYM))) (GET SYM :FOO)) NIL)
;; Loading (DEFTEST GET.2 (LET ((SYM (GENSYM))) (GET SYM :FOO :BAR)) :BAR)
;; Loading (DEFTEST GET.3 (LET ((SYM (GENSYM))) (GET SYM :FOO (VALUES :BAR NIL))) :BAR)
;; Loading (DEFTEST GET.4 (LET ((SYM (GENSYM))) (SETF (SYMBOL-PLIST SYM) (LIST :FOO 1 :BAR 2 :FOO 3)) (VALUES (GET SYM :FOO) (GET SYM :BAR))) 1 2)
;; Loading (DEFTEST GET.5 (LET ((EVALUATED NIL) (SYM (GENSYM))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (SETF (GET SYM :FOO) 1)) (QUOTE (1)))) (VALUES (GET SYM :FOO (PROGN (SETF EVALUATED T) NIL)) EVALUATED)) 1 T)
;; Loading (DEFTEST GET.6 (LET ((EVALUATED NIL) (SYM (GENSYM))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (SETF (GET SYM :FOO (PROGN (SETF EVALUATED T) NIL)) 1)) (QUOTE (1)))) (VALUES (GET SYM :FOO) EVALUATED)) 1 T)
;; Loading (DEFTEST GET.ORDER.1 (LET (A B (I 0) (SYM (GENSYM))) (SETF (GET SYM :FOO) T) (VALUES (GET (PROGN (SETF A (INCF I)) SYM) (PROGN (SETF B (INCF I)) :FOO)) A B I)) T 1 2 2)
;; Loading (DEFTEST GET.ORDER.2 (LET (A B (I 0) (SYM (GENSYM))) (VALUES (SETF (GET (PROGN (SETF A (INCF I)) SYM) (PROGN (SETF B (INCF I)) :FOO)) T) A B I (GET SYM :FOO))) T 1 2 2 T)
;; Loading (DEFTEST GET.ORDER.3 (LET (A B C (I 0) (SYM (GENSYM))) (SETF (GET SYM :FOO) T) (VALUES (GET (PROGN (SETF A (INCF I)) SYM) (PROGN (SETF B (INCF I)) :FOO) (PROGN (SETF C (INCF I)) NIL)) A B C I)) T 1 2 3 3)
;; Loading (DEFTEST GET.ORDER.4 (LET (A B C (I 0) (SYM (GENSYM))) (VALUES (SETF (GET (PROGN (SETF A (INCF I)) SYM) (PROGN (SETF B (INCF I)) :FOO) (PROGN (SETF C (INCF I)) NIL)) T) A B C I (GET SYM :FOO))) T 1 2 3 3 T)
;; Loading (DEFTEST GET.ERROR.1 (SIGNALS-ERROR (GET) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET.ERROR.2 (SIGNALS-ERROR (GET NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET.ERROR.3 (SIGNALS-ERROR (GET NIL NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (GET X :FOO))) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST GET.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SETF (GET X :FOO) NIL))) (FUNCTION SYMBOLP)) NIL)
;; Loading (LOAD "load-eval-and-compile.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-eval-and-compile.lsp C0FE0B17>
;; Loading (LOAD "eval.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/eval.lsp C0FF2797>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST EVAL.1 (EVAL 1) 1)
;; Loading (DEFTEST EVAL.2 (LOOP FOR X BEING THE SYMBOLS OF "KEYWORD" ALWAYS (EQ (EVAL X) X)) T)
;; Loading (DEFTEST EVAL.3 (LET ((S "abcd")) (EQLT (EVAL S) S)) T)
;; Loading (DEFTEST EVAL.4 (EVAL (QUOTE (CAR (QUOTE (A . B))))) A)
;; Loading (DEFTEST EVAL.5 (EVAL (QUOTE (LET ((X 0)) X))) 0)
;; Loading (DEFTEST EVAL.6 (FUNCALL (FUNCTION EVAL) 1) 1)
;; Loading (DEFTEST EVAL.ORDER.1 (LET ((I 0)) (VALUES (EVAL (PROGN (INCF I) 10)) I)) 10 1)
;; Loading (DEFTEST EVAL.ERROR.1 (SIGNALS-ERROR (EVAL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EVAL.ERROR.2 (SIGNALS-ERROR (EVAL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EVAL.ERROR.3 (LET ((V (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (EVAL (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA V)))) UNDEFINED-FUNCTION :NAME (SYSTEM.INTERNALS::BQ-COMMA V))))) T)
;; Loading (DEFTEST EVAL.ERROR.4 (LET ((V (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (EVAL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA V))) UNBOUND-VARIABLE :NAME (SYSTEM.INTERNALS::BQ-COMMA V))))) T)
;; Loading (LOAD "eval-and-compile.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/eval-and-compile.lsp C1045777>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFPARAMETER *EVAL-AND-COMPILE-FNS* (QUOTE (COMPILE EVAL MACROEXPAND MACROEXPAND-1 PROCLAIM SPECIAL-OPERATOR-P CONSTANTP)))
;; Loading (DEFTEST EVAL-AND-COMPILE-FNS (REMOVE-IF (FUNCTION FBOUNDP) *EVAL-AND-COMPILE-FNS*) NIL)
;; Loading (DEFPARAMETER *EVAL-AND-COMPILE-MACROS* (QUOTE (LAMBDA DEFINE-COMPILER-MACRO DEFMACRO DEFINE-SYMBOL-MACRO DECLAIM)))
;; Loading (DEFTEST EVAL-AND-COMPILE-MACROS (REMOVE-IF (FUNCTION MACRO-FUNCTION) *EVAL-AND-COMPILE-MACROS*) NIL)
;; Loading (LOAD "compile.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/compile.lsp C1077FE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COMPILE.1 (PROGN (FMAKUNBOUND (QUOTE COMPILE.1-FN)) (VALUES (EVAL (QUOTE (DEFUN COMPILE.1-FN (X) X))) (COMPILED-FUNCTION-P (QUOTE COMPILE.1-FN)) (LET ((X (COMPILE (QUOTE COMPILE.1-FN)))) (OR (EQT X (QUOTE COMPILE.1-FN)) (NOTNOT (COMPILED-FUNCTION-P X)))) (COMPILED-FUNCTION-P (QUOTE COMPILE.1-FN)) (NOT (COMPILED-FUNCTION-P (FUNCTION COMPILE.1-FN))) (FMAKUNBOUND (QUOTE COMPILE.1-FN)))) COMPILE.1-FN NIL T NIL NIL COMPILE.1-FN)
;; Loading (DEFTEST COMPILE.2 (LET* ((RESULTS (MULTIPLE-VALUE-LIST (COMPILE NIL (QUOTE (LAMBDA (X Y) (CONS Y X)))))) (FN (CAR RESULTS))) (VALUES (LENGTH RESULTS) (FUNCALL FN (QUOTE A) (QUOTE B)) (SECOND RESULTS) (THIRD RESULTS))) 3 (B . A) NIL NIL)
;; Loading (DEFTEST COMPILE.3 (LET ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE A) (QUOTE B)))) (AND (NOT (EQT X Y)) (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (EQT (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Y))))))))) NIL)
;; Loading (DEFTEST COMPILE.4 (LET ((X (COPY-SEQ "abc")) (Y (COPY-SEQ "abc"))) (AND (NOT (EQT X Y)) (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (EQT (SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y)))))))) NIL)
;; Loading (DEFTEST COMPILE.5 (LET ((X (COPY-SEQ "abc"))) (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (EQT (SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA X))))))) T)
;; Loading (DEFTEST COMPILE.6 (LET ((X (COPY-SEQ "abc"))) (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (EQT (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)))))))) T)
;; Loading (DEFTEST COMPILE.7 (LET ((X (COPY-SEQ "abc"))) (EQT X (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (SYSTEM.INTERNALS::BQ-COMMA X))))))) T)
;; Loading (DEFTEST COMPILE.8 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (EQT X (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)))))))) T)
;; Loading (DEFTEST COMPILE.9 (LET ((I 0) A B) (VALUES (FUNCALL (COMPILE (PROGN (SETF A (INCF I)) NIL) (PROGN (SETF B (INCF I)) (QUOTE (LAMBDA NIL (QUOTE Z)))))) I A B)) Z 2 1 2)
;; Loading (DEFTEST COMPILE.ERROR.1 (SIGNALS-ERROR (COMPILE) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPILE.ERROR.2 (SIGNALS-ERROR (COMPILE NIL (QUOTE (LAMBDA NIL NIL)) (QUOTE GARBAGE)) PROGRAM-ERROR) T)
;; Loading (LOAD "compiler-macros.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/compiler-macros.lsp C110AB17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (LOAD "constantp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/constantp.lsp C1126E47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CONSTANTP.ERROR.1 (SIGNALS-ERROR (CONSTANTP) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONSTANTP.ERROR.2 (SIGNALS-ERROR (CONSTANTP NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONSTANTP.1 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (OR (SYMBOLP E) (CONSP E) (CONSTANTP E))))) NIL)
;; Loading (DEFTEST CONSTANTP.2 (NOTNOT-MV (CONSTANTP T)) T)
;; Loading (DEFTEST CONSTANTP.3 (NOTNOT-MV (CONSTANTP NIL)) T)
;; Loading (DEFTEST CONSTANTP.4 (NOTNOT-MV (CONSTANTP :FOO)) T)
;; Loading (DEFTEST CONSTANTP.5 (CONSTANTP (GENSYM)) NIL)
;; Loading (DEFCONSTANT CONSTANTP-TEST-SYMBOL 1)
;; Loading (DEFMACRO CONSTANTP-MACRO (FORM &ENVIRONMENT ENV) (NOTNOT-MV (CONSTANTP FORM ENV)))
;; Loading (DEFTEST CONSTANTP.6 (CONSTANTP-MACRO CONSTANTP-TEST-SYMBOL) T)
;; Loading (DEFTEST CONSTANTP.7 (CONSTANTP (QUOTE (INCF X))) NIL)
;; Loading (DEFTEST CONSTANTP.8 (NOTNOT-MV (CONSTANTP 1 NIL)) T)
;; Loading (DEFTEST CONSTANTP.9 (NOTNOT-MV (CONSTANTP (QUOTE (QUOTE (((FOO))))))) T)
;; Loading (DEFTEST CONSTANTP.10 (NOTNOT-MV (CONSTANTP (QUOTE PI))) T)
;; Loading (DEFMACRO MACRO-FOR-CONSTANTP.11 (X) X)
;; Loading (DEFTEST CONSTANTP.11 (MACROLET ((MACRO-FOR-CONSTANTP.11 (Y) (DECLARE (IGNORE Y)) (QUOTE *STANDARD-INPUT*))) (MACROLET ((%M (&ENVIRONMENT ENV) (IF (CONSTANTP (QUOTE (MACRO-FOR-CONSTANTP.11 0)) ENV) :BAD :GOOD))) (%M))) :GOOD)
;; Loading (DEFTEST CONSTANTP.ORDER.1 (LET ((I 0)) (VALUES (NOTNOT (CONSTANTP (PROGN (INCF I) 1))) I)) T 1)
;; Loading (DEFTEST CONSTANTP.ORDER.2 (LET ((I 0) X Y) (VALUES (NOTNOT (CONSTANTP (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) NIL))) I X Y)) T 2 1 2)
;; Loading (LOAD "lambda.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/lambda.lsp C11A28B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LAMBDA.1 ((LAMBDA (X) X) (QUOTE A)) A)
;; Loading (DEFTEST LAMBDA.2 ((LAMBDA NIL (QUOTE A))) A)
;; Loading (DEFTEST LAMBDA.3 ((LAMBDA NIL "documentation" (QUOTE A))) A)
;; Loading (DEFTEST LAMBDA.4 ((LAMBDA (X) (DECLARE (TYPE SYMBOL X)) X) (QUOTE Z)) Z)
;; Loading (DEFTEST LAMBDA.5 ((LAMBDA (&AUX (X (QUOTE A))) X)) A)
;; Loading (DEFTEST LAMBDA.6 ((LAMBDA (&AUX (X (QUOTE A))) (DECLARE (TYPE SYMBOL X)) X)) A)
;; Loading (DEFTEST LAMBDA.7 ((LAMBDA NIL "foo")) "foo")
;; Loading (DEFTEST LAMBDA.8 ((LAMBDA NIL "foo" "bar")) "bar")
;; Loading (DEFTEST LAMBDA.9 ((LAMBDA (X Y) (DECLARE (IGNORE X)) "foo" (DECLARE (IGNORE Y)) "bar") 1 2) "bar")
;; Loading (DEFTEST LAMBDA.10 ((LAMBDA (X) (DECLARE (TYPE SYMBOL X) (IGNORABLE X))) (QUOTE Z)) NIL)
;; Loading (DEFTEST LAMBDA.11 ((LAMBDA (X &OPTIONAL Y Z) (LIST X Y Z)) 1 2) (1 2 NIL))
;; Loading (DEFTEST LAMBDA.12 ((LAMBDA (&OPTIONAL (X (QUOTE A)) (Y (QUOTE B)) (Z (QUOTE C))) (LIST X Y Z)) 1 NIL) (1 NIL C))
;; Loading (DEFTEST LAMBDA.13 ((LAMBDA (&OPTIONAL (X (QUOTE A) X-P) (Y (QUOTE B) Y-P) (Z (QUOTE C) Z-P)) (LIST* X Y Z (MAPCAR (FUNCTION NOTNOT) (LIST X-P Y-P Z-P)))) 1 NIL) (1 NIL C T T NIL))
;; Loading (DEFTEST LAMBDA.14 (LET ((X 1)) ((LAMBDA (&OPTIONAL (X (1+ X))) X))) 2)
;; Loading (DEFTEST LAMBDA.15 ((LAMBDA (Y &OPTIONAL (X (1+ Y))) (LIST Y X)) 10) (10 11))
;; Loading (DEFTEST LAMBDA.16 ((LAMBDA (Y &OPTIONAL (X (1+ Y))) (LIST Y X)) 10 14) (10 14))
;; Loading (DEFTEST LAMBDA.17 ((LAMBDA (&REST X) X) 1 2 3) (1 2 3))
;; Loading (DEFTEST LAMBDA.18 (LET ((B 10)) ((LAMBDA (&OPTIONAL (A B) (B (1+ A))) (LIST A B)) 3 7)) (3 7))
;; Loading (DEFTEST LAMBDA.19 (LET ((B 10)) ((LAMBDA (&OPTIONAL (A B) (B (1+ A))) (LIST A B)) 3)) (3 4))
;; Loading (DEFTEST LAMBDA.20 (LET ((B 10)) ((LAMBDA (&OPTIONAL (A B) (B (1+ A))) (LIST A B)))) (10 11))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST LAMBDA.21 (FLET ((%F NIL (LOCALLY (DECLARE (SPECIAL *X*)) (INCF *X*)))) ((LAMBDA (*X*) (DECLARE (SPECIAL *X*)) (%F) *X*) 10)) 11)
;; Loading (DEFTEST LAMBDA.22 (FLET ((%F NIL (LOCALLY (DECLARE (SPECIAL *X*)) (1+ *X*)))) ((LAMBDA (*X*) (DECLARE (SPECIAL *X*)) (%F)) 15)) 16)
;; Loading (DEFTEST LAMBDA.23 ((LAMBDA (&KEY A) A)) NIL)
;; Loading (DEFTEST LAMBDA.24 ((LAMBDA (&KEY A B C) (LIST A B C))) (NIL NIL NIL))
;; Loading (DEFTEST LAMBDA.25 ((LAMBDA (&KEY (A 1) (B 2) (C 3)) (LIST A B C))) (1 2 3))
;; Loading (DEFTEST LAMBDA.26 ((LAMBDA (&KEY))) NIL)
;; Loading (DEFTEST LAMBDA.27 ((LAMBDA (&KEY) (QUOTE GOOD)) :ALLOW-OTHER-KEYS NIL) GOOD)
;; Loading (DEFTEST LAMBDA.28 ((LAMBDA (&KEY) (QUOTE GOOD)) :ALLOW-OTHER-KEYS T :FOO T) GOOD)
;; Loading (DEFTEST LAMBDA.29 ((LAMBDA (&KEY) (QUOTE GOOD)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T) GOOD)
;; Loading (DEFTEST LAMBDA.30 ((LAMBDA (&KEY X) X) :ALLOW-OTHER-KEYS T :X 10 :ALLOW-OTHER-KEYS NIL :FOO T) 10)
;; Loading (DEFTEST LAMBDA.31 ((LAMBDA (&REST X &KEY) X)) NIL)
;; Loading (DEFTEST LAMBDA.32 ((LAMBDA (&REST X &KEY) X) :ALLOW-OTHER-KEYS NIL) (:ALLOW-OTHER-KEYS NIL))
;; Loading (DEFTEST LAMBDA.33 ((LAMBDA (&REST X &KEY) X) :W 5 :ALLOW-OTHER-KEYS T :X 10) (:W 5 :ALLOW-OTHER-KEYS T :X 10))
;; Loading (DEFTEST LAMBDA.34 ((LAMBDA (&KEY (A 1 A-P) (B 2 B-P) (C 3 C-P)) (LIST A (NOTNOT A-P) B (NOTNOT B-P) C (NOTNOT C-P))) :C 5 :A 0) (0 T 2 NIL 5 T))
;; Loading (DEFTEST LAMBDA.35 ((LAMBDA (&KEY (A 1 A-P) (B 2 B-P) (C 3 C-P)) (LIST A (NOTNOT A-P) B (NOTNOT B-P) C (NOTNOT C-P))) :C 5 :A NIL :A 17 :C 100) (NIL T 2 NIL 5 T))
;; Loading (DEFTEST LAMBDA.36 ((LAMBDA (&KEY (A 1 A-P) (B 2 B-P) (C 3 C-P)) (LIST A (NOTNOT A-P) B (NOTNOT B-P) C (NOTNOT C-P))) :C 5 :A 0 :ALLOW-OTHER-KEYS T (QUOTE B) 100) (0 T 2 NIL 5 T))
;; Loading (DEFTEST LAMBDA.37 (LET ((B 1)) ((LAMBDA (&KEY (A B) B) (LIST A B)) :B (QUOTE X))) (1 X))
;; Loading (DEFTEST LAMBDA.38 (LET ((B 1)) ((LAMBDA (&KEY (A B) B) (LIST A B)) :B (QUOTE X) :A NIL)) (NIL X))
;; Loading (DEFTEST LAMBDA.39 (LET ((A-P :BAD)) (DECLARE (IGNORABLE A-P)) ((LAMBDA (&KEY (A NIL A-P) (B A-P)) (LIST A (NOTNOT A-P) (NOTNOT B))))) (NIL NIL NIL))
;; Loading (DEFTEST LAMBDA.40 (LET ((A-P :BAD)) (DECLARE (IGNORABLE A-P)) ((LAMBDA (&KEY (A NIL A-P) (B A-P)) (LIST A (NOTNOT A-P) (NOTNOT B))) :A 1)) (1 T T))
;; Loading (DEFTEST LAMBDA.41 (LET ((A-P :BAD)) (DECLARE (IGNORABLE A-P)) ((LAMBDA (&KEY (A NIL A-P) (B A-P)) (LIST A (NOTNOT A-P) (NOTNOT B))) :A NIL)) (NIL T T))
;; Loading (DEFTEST LAMBDA.42 ((LAMBDA (&KEY A B &ALLOW-OTHER-KEYS) (LIST A B)) :A 1 :B 2) (1 2))
;; Loading (DEFTEST LAMBDA.43 ((LAMBDA (&KEY A B &ALLOW-OTHER-KEYS) (LIST A B)) :B 2 :A 1) (1 2))
;; Loading (DEFTEST LAMBDA.44 ((LAMBDA (&KEY A B &ALLOW-OTHER-KEYS) (LIST A B)) :Z 10 :B 2 :B NIL :A 1 :A 2 (QUOTE X) 100) (1 2))
;; Loading (DEFTEST LAMBDA.45 ((LAMBDA (&KEY A B &ALLOW-OTHER-KEYS) (LIST A B)) :ALLOW-OTHER-KEYS NIL :Z 10 :B 2 :B NIL :A 1 :A 2 (QUOTE X) 100) (1 2))
;; Loading (DEFTEST LAMBDA.46 ((LAMBDA (&KEY A B ALLOW-OTHER-KEYS) (LIST ALLOW-OTHER-KEYS A B)) :ALLOW-OTHER-KEYS NIL :A 1 :B 2) (NIL 1 2))
;; Loading (DEFTEST LAMBDA.47 ((LAMBDA (&KEY A B ALLOW-OTHER-KEYS) (LIST ALLOW-OTHER-KEYS A B)) :C 10 :ALLOW-OTHER-KEYS T :A 1 :B 2 :D 20) (T 1 2))
;; Loading (DEFTEST LAMBDA.48 ((LAMBDA (&KEY A B ALLOW-OTHER-KEYS &ALLOW-OTHER-KEYS) (LIST ALLOW-OTHER-KEYS A B)) :D 40 :ALLOW-OTHER-KEYS NIL :A 1 :B 2 :C 20) (NIL 1 2))
;; Loading (DEFTEST LAMBDA.49 ((LAMBDA (&KEY A B ALLOW-OTHER-KEYS &ALLOW-OTHER-KEYS) (LIST ALLOW-OTHER-KEYS A B)) :D 40 :A 1 :B 2 :C 20) (NIL 1 2))
;; Loading (DEFTEST LAMBDA.50 ((LAMBDA (&KEY A B ((:ALLOW-OTHER-KEYS AOK))) (LIST AOK A B)) :D 40 :A 1 :ALLOW-OTHER-KEYS T :B 2 :C 20) (T 1 2))
;; Loading (DEFTEST LAMBDA.51 ((LAMBDA (&KEY &ALLOW-OTHER-KEYS)) :A 1 :B 2 :C 3) NIL)
;; Loading (DEFTEST LAMBDA.52 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) ((LAMBDA (&OPTIONAL (Y X)) (DECLARE (SPECIAL X)) Y)))) :GOOD)
;; Loading (DEFTEST LAMBDA.53 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) ((LAMBDA (&KEY (Y X)) (DECLARE (SPECIAL X)) Y)))) :GOOD)
;; Loading (DEFTEST LAMBDA.54 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) ((LAMBDA (&AUX (Y X)) (DECLARE (SPECIAL X)) Y)))) :GOOD)
;; Loading (DEFTEST LAMBDA.55 (LET* ((DOC "LMB55") (FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA NIL (SYSTEM.INTERNALS::BQ-COMMA DOC) NIL))))) (CFN (COMPILE NIL FN))) (VALUES (OR (DOCUMENTATION FN T) DOC) (OR (DOCUMENTATION CFN T) DOC))) "LMB55" "LMB55")
;; Loading (DEFTEST LAMBDA.56 (LET* ((DOC "LMB56") (FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA NIL (SYSTEM.INTERNALS::BQ-COMMA DOC) NIL))))) (CFN (COMPILE NIL FN))) (VALUES (OR (DOCUMENTATION FN (QUOTE FUNCTION)) DOC) (OR (DOCUMENTATION CFN (QUOTE FUNCTION)) DOC))) "LMB56" "LMB56")
;; Loading (DEFTEST LAMBDA.63 (LET ((Y :BAD1)) (DECLARE (IGNORE Y)) (LET ((Y :BAD2)) (DECLARE (SPECIAL Y)) (FLET ((%F NIL Y)) ((LAMBDA (X &AUX (Y :GOOD)) (DECLARE (SPECIAL Y) (IGNORE X)) (%F)) NIL)))) :GOOD)
;; Loading (DEFTEST LAMBDA.64 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (FLET ((%F NIL X)) ((LAMBDA (X &AUX (Y (%F))) (DECLARE (TYPE T Y) (SPECIAL X)) Y) :GOOD))) :GOOD)
;; Loading (DEFTEST LAMBDA.MACRO.1 (NOTNOT (MACRO-FUNCTION (QUOTE LAMBDA))) T)
;; Loading (DEFTEST LAMBDA.MACRO.2 (FUNCALL (EVAL (MACROEXPAND (QUOTE (LAMBDA NIL 10))))) 10)
;; Loading (DEFTEST LAMBDA.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LAMBDA))) PROGRAM-ERROR) T)
;; Loading (DEFTEST LAMBDA.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LAMBDA)) (QUOTE (LAMBDA NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST LAMBDA.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE LAMBDA)) (QUOTE (LAMBDA NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "eval-when.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/eval-when.lsp 80B91687>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFVAR *EVAL-WHEN.1-COLLECTOR*)
;; Loading (DEFTEST EVAL-WHEN.1 (LET ((FORMS NIL) ALL (FF "generated-eval-when-test-file.lisp")) (DOLIST (C (QUOTE (NIL (:COMPILE-TOPLEVEL)))) (DOLIST (L (QUOTE (NIL (:LOAD-TOPLEVEL)))) (DOLIST (X (QUOTE (NIL (:EXECUTE)))) (PUSH (SYSTEM.INTERNALS::BACKQUOTE (EVAL-WHEN ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN C) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN L) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN X)) (PUSH (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN C) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN L) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN X))) *EVAL-WHEN.1-COLLECTOR*))) FORMS)))) (DOLIST (C (QUOTE (NIL (:COMPILE-TOPLEVEL)))) (DOLIST (L (QUOTE (NIL (:LOAD-TOPLEVEL)))) (DOLIST (X (QUOTE (NIL (:EXECUTE)))) (PUSH (SYSTEM.INTERNALS::BACKQUOTE (LET NIL (EVAL-WHEN ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN C) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN L) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN X)) (PUSH (QUOTE (LET (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN C) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN L) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN X))) *EVAL-WHEN.1-COLLECTOR*)))) FORMS)))) (WITH-OPEN-FILE (O FF :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (DOLIST (F FORMS) (PRIN1 F O) (TERPRI O))) (LET ((*EVAL-WHEN.1-COLLECTOR* NIL)) (LOAD FF) (PUSH (CONS "load source" *EVAL-WHEN.1-COLLECTOR*) ALL)) (LET ((*EVAL-WHEN.1-COLLECTOR* NIL)) (COMPILE-FILE FF) (PUSH (CONS "compile source" *EVAL-WHEN.1-COLLECTOR*) ALL)) (LET ((*EVAL-WHEN.1-COLLECTOR* NIL)) (LOAD (COMPILE-FILE-PATHNAME FF)) (PUSH (CONS "load compiled" *EVAL-WHEN.1-COLLECTOR*) ALL)) (DELETE-FILE FF) (DELETE-FILE (COMPILE-FILE-PATHNAME FF)) (NREVERSE ALL)) (("load source" (:EXECUTE) (:LOAD-TOPLEVEL :EXECUTE) (:COMPILE-TOPLEVEL :EXECUTE) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (LET :EXECUTE) (LET :LOAD-TOPLEVEL :EXECUTE) (LET :COMPILE-TOPLEVEL :EXECUTE) (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) ("compile source" (:COMPILE-TOPLEVEL) (:COMPILE-TOPLEVEL :EXECUTE) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) ("load compiled" (:LOAD-TOPLEVEL) (:LOAD-TOPLEVEL :EXECUTE) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (LET :EXECUTE) (LET :LOAD-TOPLEVEL :EXECUTE) (LET :COMPILE-TOPLEVEL :EXECUTE) (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE))))
;; Loading (DEFTEST EVAL-WHEN.2 (EVAL-WHEN NIL :BAD) NIL)
;; Loading (DEFTEST EVAL-WHEN.3 (EVAL-WHEN (:EXECUTE)) NIL)
;; Loading (DEFTEST EVAL-WHEN.4 (EVAL-WHEN (:EXECUTE) :GOOD) :GOOD)
;; Loading (DEFTEST EVAL-WHEN.5 (EVAL-WHEN (:COMPILE-TOPLEVEL) :BAD) NIL)
;; Loading (DEFTEST EVAL-WHEN.6 (EVAL-WHEN (:LOAD-TOPLEVEL) :BAD) NIL)
;; Loading (DEFTEST EVAL-WHEN.7 (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) :GOOD) :GOOD)
;; Loading (DEFTEST EVAL-WHEN.8 (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) :GOOD) :GOOD)
;; Loading (DEFTEST EVAL-WHEN.9 (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL) :BAD) NIL)
;; Loading (DEFTEST EVAL-WHEN.10 (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) :GOOD) :GOOD)
;; Loading (DEFTEST EVAL-WHEN.11 (EVAL-WHEN (:EXECUTE) (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) A B C D)
;; Loading (DEFTEST EVAL-WHEN.12 (LET ((X :GOOD)) (VALUES (EVAL-WHEN (:LOAD-TOPLEVEL) (SETQ X :BAD)) X)) NIL :GOOD)
;; Loading (DEFTEST EVAL-WHEN.13 (LET ((X :GOOD)) (VALUES (EVAL-WHEN (:COMPILE-TOPLEVEL) (SETQ X :BAD)) X)) NIL :GOOD)
;; Loading (DEFTEST EVAL-WHEN.14 (LET ((X :BAD)) (VALUES (EVAL-WHEN (:EXECUTE) (SETQ X :GOOD)) X)) :GOOD :GOOD)
;; Loading (DEFTEST EVAL-WHEN.15 (LET ((X :GOOD)) (VALUES (EVAL-WHEN (LOAD) (SETQ X :BAD)) X)) NIL :GOOD)
;; Loading (DEFTEST EVAL-WHEN.16 (LET ((X :GOOD)) (VALUES (EVAL-WHEN (COMPILE) (SETQ X :BAD)) X)) NIL :GOOD)
;; Loading (DEFTEST EVAL-WHEN.17 (LET ((X :BAD)) (VALUES (EVAL-WHEN (EVAL) (SETQ X :GOOD)) X)) :GOOD :GOOD)
;; Loading (DEFTEST EVAL-WHEN.18 (MACROLET ((%M (Z) Z)) (EVAL-WHEN (:EXECUTE) (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (LOAD "define-compiler-macro.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/define-compiler-macro.lsp 80C7B767>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-COMPILER-MACRO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-COMPILER-MACRO)) (QUOTE (DEFINEE-COMPILER-MACRO NONEXISTENT-FUNCTION NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-COMPILER-MACRO)) (QUOTE (DEFINEE-COMPILER-MACRO NONEXISTENT-FUNCTION NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.1 (LET* ((SYM (GENSYM)) (MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y) (DECLARE (SPECIAL *X*)) (SETF *X* T) (SYSTEM.INTERNALS::BACKQUOTE (+ (SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y) 1))))) (FUN-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y) (+ X Y 1))))) (VALUES (EQUALT (LIST SYM) (MULTIPLE-VALUE-LIST (EVAL FUN-DEF-FORM))) (EQUALT (LIST SYM) (MULTIPLE-VALUE-LIST (EVAL MACRO-DEF-FORM))) (NOTNOT (TYPEP (COMPILER-MACRO-FUNCTION SYM) (QUOTE FUNCTION))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) 6 19))) (LET ((FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B) ((SYSTEM.INTERNALS::BQ-COMMA SYM) A B)))))) (LET ((*X* NIL)) (DECLARE (SPECIAL *X*)) (LIST (FUNCALL FN 12 123) *X*))))) T T T 26 (136 NIL))
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.2 (LET* ((SYM (GENSYM)) (MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (&WHOLE FORM &REST ARGS) (DECLARE (SPECIAL *X*) (IGNORE ARGS)) (SETF *X* T) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA SYM) FORM)))) (FUN-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) X)))) (VALUES (EQUALT (LIST SYM) (MULTIPLE-VALUE-LIST (EVAL FUN-DEF-FORM))) (EQUALT (LIST SYM) (MULTIPLE-VALUE-LIST (EVAL MACRO-DEF-FORM))) (NOTNOT (TYPEP (COMPILER-MACRO-FUNCTION SYM) (QUOTE FUNCTION))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) (QUOTE A)))) (LET ((FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A) ((SYSTEM.INTERNALS::BQ-COMMA SYM) A)))))) (LET ((*X* NIL)) (DECLARE (SPECIAL *X*)) (LIST (FUNCALL FN (QUOTE B)) *X*))))) T T T A (B NIL))
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.3 (LET* ((SYM (GENSYM)) (MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (&WHOLE FORM &REST ARGS) (DECLARE (SPECIAL *X*) (IGNORE ARGS)) (SETF *X* T) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA SYM) FORM)))) (ORDINARY-MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) X)))) (VALUES (EQUALT (LIST SYM) (MULTIPLE-VALUE-LIST (EVAL ORDINARY-MACRO-DEF-FORM))) (EQUALT (LIST SYM) (MULTIPLE-VALUE-LIST (EVAL MACRO-DEF-FORM))) (NOTNOT (TYPEP (COMPILER-MACRO-FUNCTION SYM) (QUOTE FUNCTION))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) (QUOTE A)))) (LET ((FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A) ((SYSTEM.INTERNALS::BQ-COMMA SYM) A)))))) (LET ((*X* NIL)) (DECLARE (SPECIAL *X*)) (LIST (FUNCALL FN (QUOTE B)) *X*))))) T T T A (B NIL))
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.4 (LET* ((SYM (GENSYM)) (FUN-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) (CAR X)))) (SETF-FUN-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)) (NEWVAL X) (SETF (CAR X) NEWVAL)))) (SETF-COMPILER-MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)) (NEWVAL X) (DECLARE (SPECIAL *X*)) (SETF *X* T) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA SYM) (SYSTEM.INTERNALS::BACKQUOTE (SETF (CAR (SYSTEM.INTERNALS::BQ-COMMA X)) (SYSTEM.INTERNALS::BQ-COMMA NEWVAL)))))))) (VALUES (EQUALT (LIST SYM) (MULTIPLE-VALUE-LIST (EVAL FUN-DEF-FORM))) (EQUALT (SYSTEM.INTERNALS::BACKQUOTE ((SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (MULTIPLE-VALUE-LIST (EVAL SETF-FUN-DEF-FORM))) (EQUALT (SYSTEM.INTERNALS::BACKQUOTE ((SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (MULTIPLE-VALUE-LIST (EVAL SETF-COMPILER-MACRO-DEF-FORM))) (NOTNOT (TYPEP (COMPILER-MACRO-FUNCTION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (QUOTE FUNCTION))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) (LIST (QUOTE A) (QUOTE B))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((ARG (LIST 1 2))) (LIST (SETF ((SYSTEM.INTERNALS::BQ-COMMA SYM) ARG) (QUOTE Z)) ARG)))) (LET ((FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (U V) (SETF ((SYSTEM.INTERNALS::BQ-COMMA SYM) U) V)))))) (LET ((*X* NIL) (ARG (LIST 1 2))) (DECLARE (SPECIAL *X*)) (LIST (FUNCALL FN ARG (QUOTE Y)) ARG))))) T T T T A (Z (Z 2)) (Y (Y 2)))
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.5 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) "DCM.5" X))) (FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) "DCM.5-WRONG" X)))) (EVAL FORM) (EVAL FORM2) (OR (DOCUMENTATION SYM (QUOTE COMPILER-MACRO)) "DCM.5")) "DCM.5")
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.6 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) "DCM.6" X))) (FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) "DCM.6-WRONG" X)))) (EVAL FORM2) (EVAL FORM) (OR (DOCUMENTATION SYM (QUOTE COMPILER-MACRO)) "DCM.6")) "DCM.6")
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.7 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y) (DECLARE (SPECIAL *X*)) (SETF *X* :BAD) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y)))))) (FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y) (LIST X Y))))) (EVAL FORM) (EVAL FORM2) (COMPILE SYM) (LET ((*X* :GOOD)) (DECLARE (SPECIAL *X*)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B) (DECLARE (NOTINLINE (SYSTEM.INTERNALS::BQ-COMMA SYM))) ((SYSTEM.INTERNALS::BQ-COMMA SYM) A B)))) 5 11) *X*))) (5 11) :GOOD)
;; Loading (DEFTEST DEFINE-COMPILER-MACRO.8 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y) (DECLARE (SPECIAL *X*)) (SETF *X* :BAD) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y)))))) (FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y))))))) (EVAL FORM) (EVAL FORM2) (LET ((*X* :GOOD)) (DECLARE (SPECIAL *X*)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B) (DECLARE (NOTINLINE (SYSTEM.INTERNALS::BQ-COMMA SYM))) ((SYSTEM.INTERNALS::BQ-COMMA SYM) A B)))) 7 23) *X*))) (7 23) :GOOD)
;; Loading (LOAD "define-symbol-macro.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/define-symbol-macro.lsp 80DD50E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DEFINE-SYMBOL-MACRO.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFINE-SYMBOL-MACRO.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO NONEXISTENT-SYMBOL-MACRO NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFINE-SYMBOL-MACRO.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO NONEXISTENT-SYMBOL-MACRO NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "defmacro.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defmacro.lsp 80E0EB77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DEFMACRO.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFMACRO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFMACRO.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFMACRO)) (QUOTE (DEFMACRO NONEXISTENT-MACRO NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFMACRO.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFMACRO)) (QUOTE (DEFMACRO NONEXISTENT-MACRO NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFMACRO.1 (PROGN (ASSERT (EQ (DEFMACRO DEFMACRO.1-MACRO (X Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST 1 (SYSTEM.INTERNALS::BQ-COMMA X) 2 (SYSTEM.INTERNALS::BQ-COMMA Y) 3))) (QUOTE DEFMACRO.1-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE DEFMACRO.1-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO.1-MACRO (QUOTE A) (QUOTE B))))) (1 A 2 B 3))
;; Loading (DEFTEST DEFMACRO.2 (PROGN (ASSERT (EQ (DEFMACRO DEFMACRO.2-MACRO (X Y) (RETURN-FROM DEFMACRO.2-MACRO (SYSTEM.INTERNALS::BACKQUOTE (CONS (SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y))))) (QUOTE DEFMACRO.2-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE DEFMACRO.2-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO.2-MACRO (QUOTE A) (QUOTE B))))) (A . B))
;; Loading (DEFTEST DEFMACRO.3 (LET (FN) (LET ((X 0)) (SETQ FN (FUNCTION (LAMBDA (N) (SETQ X N)))) (DEFMACRO DEFMACRO.3-MACRO NIL (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X))))) (VALUES (EVAL (QUOTE (DEFMACRO.3-MACRO))) (FUNCALL FN (QUOTE A)) (EVAL (QUOTE (DEFMACRO.3-MACRO))))) 0 A A)
;; Loading (DEFTEST DEFMACRO.4 (LET ((Y :GOOD)) (ASSERT (EQ (DEFMACRO DEFMACRO.4-MACRO (&OPTIONAL (X Y)) (DECLARE (SPECIAL Y)) X) (QUOTE DEFMACRO.4-MACRO))) (LET ((Y :BAD)) (DECLARE (SPECIAL Y)) (VALUES (MACROEXPAND-1 (QUOTE (DEFMACRO.4-MACRO)))))) :GOOD)
;; Loading (DEFTEST DEFMACRO.5 (PROGN (ASSERT (EQ (DEFMACRO DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE DEFMACRO.5-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO.5-MACRO)))) T)
;; Loading (DEFTEST DEFMACRO.6 (PROGN (DEFMACRO DEFMACRO.6-MACRO (&WHOLE W ARG) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA W)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ARG))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO.6-MACRO X)))) ((DEFMACRO.6-MACRO X) X))
;; Loading (DEFTEST DEFMACRO.7 (PROGN (DEFMACRO DEFMACRO.7-MACRO (ARG1 (&WHOLE W ARG2)) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA W)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ARG1)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ARG2))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO.7-MACRO X (Y))))) ((Y) X Y))
;; Loading (DEFTEST DEFMACRO.8 (PROGN (DEFMACRO DEFMACRO.8-MACRO (&KEY FOO BAR) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.8-MACRO :FOO X) (DEFMACRO.8-MACRO :BAR Y) (DEFMACRO.8-MACRO :BAR A :FOO B) (DEFMACRO.8-MACRO :BAR A :FOO B :BAR C))))) ((X NIL) (NIL Y) (B A) (B A)))
;; Loading (DEFTEST DEFMACRO.9 (PROGN (DEFMACRO DEFMACRO.9-MACRO (&KEY (FOO 1) (BAR 2)) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.9-MACRO :FOO X) (DEFMACRO.9-MACRO :BAR Y) (DEFMACRO.9-MACRO :FOO NIL) (DEFMACRO.9-MACRO :BAR NIL) (DEFMACRO.9-MACRO :BAR A :FOO B) (DEFMACRO.9-MACRO :BAR A :FOO B :BAR C))))) ((X 2) (1 Y) (NIL 2) (1 NIL) (B A) (B A)))
;; Loading (DEFTEST DEFMACRO.10 (PROGN (DEFMACRO DEFMACRO.10-MACRO (&KEY (FOO 1 FOO-P) (BAR 2 BAR-P)) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (SYSTEM.INTERNALS::BQ-COMMA (NOTNOT FOO-P)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR)) (SYSTEM.INTERNALS::BQ-COMMA (NOTNOT BAR-P))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.10-MACRO) (DEFMACRO.10-MACRO :FOO X) (DEFMACRO.10-MACRO :BAR Y) (DEFMACRO.10-MACRO :FOO NIL) (DEFMACRO.10-MACRO :BAR NIL) (DEFMACRO.10-MACRO :FOO X :BAR Y) (DEFMACRO.10-MACRO :BAR Y :FOO X) (DEFMACRO.10-MACRO :BAR A :BAR B) (DEFMACRO.10-MACRO :FOO A :FOO B))))) ((1 NIL 2 NIL) (X T 2 NIL) (1 NIL Y T) (NIL T 2 NIL) (1 NIL NIL T) (X T Y T) (X T Y T) (1 NIL A T) (A T 2 NIL)))
;; Loading (DEFTEST DEFMACRO.11 (PROGN (DEFMACRO DEFMACRO.11-MACRO ((&KEY FOO BAR)) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.11-MACRO NIL) (DEFMACRO.11-MACRO (:FOO X)) (DEFMACRO.11-MACRO (:BAR Y)) (DEFMACRO.11-MACRO (:FOO X :BAR Y :FOO Z)) (DEFMACRO.11-MACRO (:BAR Y :BAR Z :FOO X)))))) ((NIL NIL) (X NIL) (NIL Y) (X Y) (X Y)))
;; Loading (DEFTEST DEFMACRO.12 (PROGN (LET ((FOO-DEFAULT 1) (BAR-DEFAULT 2)) (DEFMACRO DEFMACRO.12-MACRO ((&KEY (FOO FOO-DEFAULT) (BAR BAR-DEFAULT))) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR)))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.12-MACRO NIL) (DEFMACRO.12-MACRO (:FOO X)) (DEFMACRO.12-MACRO (:BAR Y)) (DEFMACRO.12-MACRO (:FOO X :BAR Y :FOO Z)) (DEFMACRO.12-MACRO (:BAR Y :BAR Z :FOO X)))))) ((1 2) (X 2) (1 Y) (X Y) (X Y)))
;; Loading (DEFTEST DEFMACRO.13 (PROGN (LET ((FOO-DEFAULT 1) (BAR-DEFAULT 2)) (DEFMACRO DEFMACRO.13-MACRO ((&KEY (FOO FOO-DEFAULT FOO-P) (BAR BAR-DEFAULT BAR-P))) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (SYSTEM.INTERNALS::BQ-COMMA (NOTNOT FOO-P)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR)) (SYSTEM.INTERNALS::BQ-COMMA (NOTNOT BAR-P)))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.13-MACRO NIL) (DEFMACRO.13-MACRO (:FOO X)) (DEFMACRO.13-MACRO (:BAR Y)) (DEFMACRO.13-MACRO (:FOO NIL :BAR NIL :FOO 4 :BAR 14)) (DEFMACRO.13-MACRO (:FOO 1 :BAR 2)) (DEFMACRO.13-MACRO (:FOO X :BAR Y :FOO Z)) (DEFMACRO.13-MACRO (:BAR Y :BAR Z :FOO X)))))) ((1 NIL 2 NIL) (X T 2 NIL) (1 NIL Y T) (NIL T NIL T) (1 T 2 T) (X T Y T) (X T Y T)))
;; Loading (DEFTEST DEFMACRO.14 (PROGN (DEFMACRO DEFMACRO.14-MACRO (FOO &REST BAR) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.14-MACRO X) (DEFMACRO.14-MACRO X Y) (DEFMACRO.14-MACRO X Y Z))))) ((X NIL) (X (Y)) (X (Y Z))))
;; Loading (DEFTEST DEFMACRO.15 (PROGN (DEFMACRO DEFMACRO.15-MACRO (FOO &REST (BAR . BAZ)) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAZ))))) (EVAL (QUOTE (DEFMACRO.15-MACRO X Y Z)))) (X Y (Z)))
;; Loading (DEFTEST DEFMACRO.16 (PROGN (DEFMACRO DEFMACRO.16-MACRO (&WHOLE W FOO &REST BAR) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA W)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FOO)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAR))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.16-MACRO X) (DEFMACRO.16-MACRO X Y) (DEFMACRO.16-MACRO X Y Z))))) (((DEFMACRO.16-MACRO X) X NIL) ((DEFMACRO.16-MACRO X Y) X (Y)) ((DEFMACRO.16-MACRO X Y Z) X (Y Z))))
;; Loading (DEFTEST DEFMACRO.17 (PROGN (DEFMACRO DEFMACRO.17-MACRO (X &ENVIRONMENT ENV) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (MACROEXPAND X ENV))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%M NIL :GOOD)) (DEFMACRO.17-MACRO (%M)))))) :GOOD)
;; Loading (DEFTEST DEFMACRO.17A (PROGN (DEFMACRO DEFMACRO.17A-MACRO (&ENVIRONMENT ENV X) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (MACROEXPAND X ENV))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%M NIL :GOOD)) (DEFMACRO.17A-MACRO (%M)))))) :GOOD)
;; Loading (DEFTEST DEFMACRO.18 (PROGN (DEFMACRO DEFMACRO.18-MACRO (X &OPTIONAL (Y (QUOTE A) Y-P) (Z (QUOTE B) Z-P)) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Y)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Y-P)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Z)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Z-P))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.18-MACRO P) (DEFMACRO.18-MACRO P Q) (DEFMACRO.18-MACRO P Q R))))) ((P A NIL B NIL) (P Q T B NIL) (P Q T R T)))
;; Loading (DEFTEST DEFMACRO.19 (PROGN (DEFMACRO DEFMACRO.19-MACRO (&OPTIONAL ((X . Y) (QUOTE (A . B)))) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Y))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.19-MACRO) (DEFMACRO.19-MACRO (C D)))))) ((A B) (C (D))))
;; Loading (DEFTEST DEFMACRO.20 (PROGN (DEFMACRO DEFMACRO.20-MACRO (&KEY X Y Z &ALLOW-OTHER-KEYS) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Y)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Z))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.20-MACRO) (DEFMACRO.20-MACRO :X A) (DEFMACRO.20-MACRO :Y B) (DEFMACRO.20-MACRO :Z C) (DEFMACRO.20-MACRO :X A :Y B) (DEFMACRO.20-MACRO :Z C :Y B) (DEFMACRO.20-MACRO :Z C :X A) (DEFMACRO.20-MACRO :Z C :X A :Y B) (DEFMACRO.20-MACRO NIL NIL) (DEFMACRO.20-MACRO :ALLOW-OTHER-KEYS NIL) (DEFMACRO.20-MACRO :ALLOW-OTHER-KEYS NIL :FOO BAR) (DEFMACRO.20-MACRO :Z C :Z NIL :X A :ABC 0 :Y B :X T))))) ((NIL NIL NIL) (A NIL NIL) (NIL B NIL) (NIL NIL C) (A B NIL) (NIL B C) (A NIL C) (A B C) (NIL NIL NIL) (NIL NIL NIL) (NIL NIL NIL) (A B C)))
;; Loading (DEFTEST DEFMACRO.21 (PROGN (DEFMACRO DEFMACRO.21-MACRO (&KEY X Y Z) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Y)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Z))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((DEFMACRO.21-MACRO) (DEFMACRO.21-MACRO :X A) (DEFMACRO.21-MACRO :Y B) (DEFMACRO.21-MACRO :Z C) (DEFMACRO.21-MACRO :X A :Y B) (DEFMACRO.21-MACRO :Z C :Y B) (DEFMACRO.21-MACRO :Z C :X A) (DEFMACRO.21-MACRO :Z C :X A :Y B) (DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS NIL) (DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS T :FOO BAR))))) ((NIL NIL NIL) (A NIL NIL) (NIL B NIL) (NIL NIL C) (A B NIL) (NIL B C) (A NIL C) (A B C) (NIL NIL NIL) (NIL NIL NIL)))
;; Loading (LOAD "the.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/the.lsp 810285E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST THE.1 (THE (VALUES) (VALUES)))
;; Loading (DEFTEST THE.2 (THE (VALUES) (QUOTE A)) A)
;; Loading (DEFTEST THE.3 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (LET ((X (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (VALUES) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E)))))))) (AND X (NOT (CDR X)) (EQL (CAR X) E)))))) NIL)
;; Loading (DEFTEST THE.4 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (LET ((X (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (SYSTEM.INTERNALS::BQ-COMMA (TYPE-OF E)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E)))))))) (AND X (NOT (CDR X)) (EQL (CAR X) E)))))) NIL)
;; Loading (DEFTEST THE.5 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (LET ((X (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (VALUES (SYSTEM.INTERNALS::BQ-COMMA (TYPE-OF E))) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E)))))))) (AND X (NOT (CDR X)) (EQL (CAR X) E)))))) NIL)
;; Loading (DEFTEST THE.6 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (LET ((X (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (VALUES (SYSTEM.INTERNALS::BQ-COMMA (TYPE-OF E)) T) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E)))))))) (AND X (NOT (CDR X)) (EQL (CAR X) E)))))) NIL)
;; Loading (DEFTEST THE.7 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (LET ((X (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (VALUES (SYSTEM.INTERNALS::BQ-COMMA (TYPE-OF E))) (VALUES (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E)) :IGNORED))))))) (AND (EQL (LENGTH X) 2) (EQL (CAR X) E) (EQL (CADR X) :IGNORED)))))) NIL)
;; Loading (DEFTEST THE.8 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (OR (NOT (CONSTANTP E)) (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (SYSTEM.INTERNALS::BQ-COMMA (TYPE-OF E)) (SYSTEM.INTERNALS::BQ-COMMA E)))) E))))) NIL)
;; Loading (DEFTEST THE.9 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (OR (NOT (CONSTANTP E)) (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (SYSTEM.INTERNALS::BQ-COMMA (CLASS-OF E)) (SYSTEM.INTERNALS::BQ-COMMA E)))) E))))) NIL)
;; Loading (DEFTEST THE.10 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (SYSTEM.INTERNALS::BQ-COMMA (CLASS-OF E)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E))))) E)))) NIL)
;; Loading (DEFTEST THE.11 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (LET* ((TYPE (TYPE-OF E)) (X (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (THE (SYSTEM.INTERNALS::BQ-COMMA TYPE) (THE (SYSTEM.INTERNALS::BQ-COMMA TYPE) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E))))))))) (AND X (NOT (CDR X)) (EQL (CAR X) E)))))) NIL)
;; Loading (DEFTEST THE.12 (LET ((LEXPR (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (AND (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR E IN *MINI-UNIVERSE* FOR TYPE = (TYPE-OF E) COLLECT (SYSTEM.INTERNALS::BACKQUOTE (EQLT (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E)) (THE (SYSTEM.INTERNALS::BQ-COMMA TYPE) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA E)))))))))))) (FUNCALL (COMPILE NIL LEXPR))) T)
;; Loading (DEFTEST THE.13 (LET ((X 0)) (VALUES (THE (OR SYMBOL INTEGER) (INCF X)) X)) 1 1)
;; Loading (DEFTEST THE.14 (THE (VALUES &REST T) (VALUES (QUOTE A) (QUOTE B))) A B)
;; Loading (DEFTEST THE.15 (THE (VALUES &REST SYMBOL) (VALUES (QUOTE A) (QUOTE B))) A B)
;; Loading (DEFTEST THE.16 (THE (VALUES &REST NULL) (VALUES)))
;; Loading (DEFTEST THE.17 (THE (VALUES SYMBOL INTEGER &REST NULL) (VALUES (QUOTE A) 1)) A 1)
;; Loading (DEFTEST THE.18 (THE (VALUES SYMBOL INTEGER &REST T) (VALUES (QUOTE A) 1 (QUOTE FOO) (QUOTE (X Y)))) A 1 FOO (X Y))
;; Loading (DEFTEST THE.19 (LET NIL (LIST (THE (VALUES) (EVAL (QUOTE (VALUES)))))) (NIL))
;; Loading (DEFTEST THE.20 (LET NIL (LIST (THE (VALUES &OPTIONAL FIXNUM) (EVAL (QUOTE (VALUES)))))) (NIL))
;; Loading (DEFTEST THE.21 (LET NIL (LIST (THE (VALUES &REST T) (EVAL (QUOTE (VALUES)))))) (NIL))
;; Loading (DEFTEST THE.22 (THE (VALUES SYMBOL INTEGER &REST T) (EVAL (QUOTE (VALUES (QUOTE A) 1 (QUOTE FOO) (QUOTE (X Y)))))) A 1 FOO (X Y))
;; Loading (DEFTEST THE.23 (MULTIPLE-VALUE-LIST (THE (VALUES SYMBOL INTEGER &OPTIONAL FIXNUM) (EVAL (QUOTE (VALUES (QUOTE A) 1))))) (A 1))
;; Loading (DEFTEST THE.24 (MACROLET ((%M (Z) Z)) (THE (INTEGER 0 10) (EXPAND-IN-CURRENT-ENV (%M 4)))) 4)
;; Loading (DEFTEST THE.25 (MACROLET ((%M (Z) Z)) (THE (VALUES T T) (EXPAND-IN-CURRENT-ENV (%M (VALUES 1 2))))) 1 2)
;; Loading (LOAD "symbol-macrolet.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/symbol-macrolet.lsp 81118237>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SYMBOL-MACROLET.1 (LOOP FOR S IN *CL-NON-VARIABLE-CONSTANT-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (SYMBOL-MACROLET (((SYSTEM.INTERNALS::BQ-COMMA S) 17)) (SYSTEM.INTERNALS::BQ-COMMA S)))) UNLESS (EQL (EVAL FORM) 17) COLLECT S) NIL)
;; Loading (DEFTEST SYMBOL-MACROLET.2 (SYMBOL-MACROLET NIL) NIL)
;; Loading (DEFTEST SYMBOL-MACROLET.3 (SYMBOL-MACROLET NIL (DECLARE (OPTIMIZE))) NIL)
;; Loading (DEFTEST SYMBOL-MACROLET.4 (SYMBOL-MACROLET ((X 1)) (SYMBOL-MACROLET ((X 2)) X)) 2)
;; Loading (DEFTEST SYMBOL-MACROLET.5 (LET ((X 10)) (SYMBOL-MACROLET ((Y X)) (LIST X Y (LET ((X 20)) X) (LET ((Y 30)) X) (LET ((Y 50)) Y) X Y))) (10 10 20 10 50 10 10))
;; Loading (DEFTEST SYMBOL-MACROLET.6 (SYMBOL-MACROLET NIL (VALUES)))
;; Loading (DEFTEST SYMBOL-MACROLET.7 (SYMBOL-MACROLET NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) A B C D E)
;; Loading (DEFTEST SYMBOL-MACROLET.8 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (SYMBOL-MACROLET NIL (DECLARE (SPECIAL X)) X))) :GOOD)
;; Loading (DEFTEST SYMBOL-MACROLET.ERROR.1 (SIGNALS-ERROR (SYMBOL-MACROLET ((X 10)) (DECLARE (SPECIAL X)) 20) PROGRAM-ERROR) T)
;; Loading (DEFCONSTANT CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2 NIL)
;; Loading (DEFTEST SYMBOL-MACROLET.ERROR.2 (SIGNALS-ERROR (SYMBOL-MACROLET ((CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2 (QUOTE A))) CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-MACROLET.ERROR.3 (SIGNALS-ERROR (SYMBOL-MACROLET ((*PATHNAMES* 19)) *PATHNAMES*) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYMBOL-MACROLET.9 (MACROLET ((%M (Z) Z)) (SYMBOL-MACROLET NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (LOAD "proclaim.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/proclaim.lsp 811920C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PROCLAIM.1 (LET ((SYM (GENSYM))) (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (SPECIAL (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FLET ((%F NIL (SYSTEM.INTERNALS::BQ-COMMA SYM))) (LET (((SYSTEM.INTERNALS::BQ-COMMA SYM) :GOOD)) (%F)))))) :GOOD)
;; Loading (DEFTEST PROCLAIM.2 (LET ((SYM (GENSYM))) (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM)))) NIL) NIL)
;; Loading (DEFTEST PROCLAIM.3 (LET ((I 0)) (PROCLAIM (PROGN (INCF I) (QUOTE (OPTIMIZE)))) I) 1)
;; Loading (DEFTEST PROCLAIM.ERROR.1 (SIGNALS-ERROR (PROCLAIM) PROGRAM-ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.2 (SIGNALS-ERROR (PROCLAIM (QUOTE (OPTIMIZE)) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.3 (SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (OPTIMIZE . FOO))) ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.4 (SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (INLINE . FOO))) ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.5 (SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (NOTINLINE . FOO))) ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.6 (SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (TYPE . FOO))) ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.7 (SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (FTYPE . FOO))) TYPE-ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.8 (SIGNALS-ERROR (PROCLAIM (QUOTE (TYPE INTEGER . FOO))) ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.9 (SIGNALS-ERROR (PROCLAIM (QUOTE (INTEGER . FOO))) ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.10 (SIGNALS-ERROR (PROCLAIM (QUOTE (DECLARATION . FOO))) ERROR) T)
;; Loading (DEFTEST PROCLAIM.ERROR.11 (SIGNALS-ERROR (PROCLAIM (QUOTE (FTYPE (FUNCTION (T) T) . FOO))) ERROR) T)
;; Loading (LOAD "declaim.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/declaim.lsp 812023F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DECLAIM.1 (PROGN (DECLAIM) NIL) NIL)
;; Loading (DEFTEST DECLAIM.2 (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (OPTIMIZE)))) NIL) NIL)
;; Loading (DEFTEST DECLAIM.3 (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (INLINE)))) NIL) NIL)
;; Loading (DEFTEST DECLAIM.4 (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (NOTINLINE)))) NIL) NIL)
;; Loading (DEFTEST DECLAIM.5 (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (TYPE T)))) NIL) NIL)
;; Loading (DEFTEST DECLAIM.6 (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (SPECIAL)))) NIL) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST DECLAIM.7 (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (INTEGER)))) NIL) NIL)
;; Loading (DEFTEST DECLAIM.8 (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (DECLARATION)))) NIL) NIL)
;; Loading (DEFTEST DECLAIM.9 (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (FTYPE (FUNCTION (T) T))))) NIL) NIL)
;; Loading (DEFTEST DECLAIM.10 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM ((SYSTEM.INTERNALS::BQ-COMMA SYM))))) NIL) NIL)
;; Loading (DEFTEST DECLAIM.11 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DECLAIM (OPTIMIZE) (SPECIAL (SYSTEM.INTERNALS::BQ-COMMA SYM)) (INLINE) (SPECIAL)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FLET ((%F NIL (SYSTEM.INTERNALS::BQ-COMMA SYM))) (LET (((SYSTEM.INTERNALS::BQ-COMMA SYM) :GOOD)) (%F)))))) :GOOD)
;; Loading (LOAD "locally.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/locally.lsp C0A74A57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LOCALLY.1 (LOCALLY) NIL)
;; Loading (DEFTEST LOCALLY.2 (LOCALLY (VALUES)))
;; Loading (DEFTEST LOCALLY.3 (LOCALLY (VALUES 1 2 3 4)) 1 2 3 4)
;; Loading (DEFTEST LOCALLY.4 (LOCALLY (DECLARE) T) T)
;; Loading (DEFTEST LOCALLY.5 (LOCALLY (DECLARE) (DECLARE) (DECLARE) T) T)
;; Loading (DEFTEST LOCALLY.6 (LET ((X (QUOTE A))) (DECLARE (SPECIAL X)) (LET ((X (QUOTE B))) (VALUES X (LOCALLY (DECLARE (SPECIAL X)) X) X))) B A B)
;; Loading (DEFTEST LOCALLY.7 (LOCALLY (DECLARE)) NIL)
;; Loading (DEFTEST LOCALLY.8 (MACROLET ((%M (Z) Z)) (LOCALLY (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (LOAD "ignore.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ignore.lsp C0AB8567>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST IGNORE.1 (LET ((X (QUOTE FOO))) (DECLARE (IGNORE X))) NIL)
;; Loading (DEFTEST IGNORE.2 (LET ((X (QUOTE FOO))) (DECLARE (IGNORE X)) X) FOO)
;; Loading (DEFTEST IGNORE.3 (FLET ((%F NIL (QUOTE FOO))) (DECLARE (IGNORE (FUNCTION %F)))) NIL)
;; Loading (DEFTEST IGNORE.4 (FLET ((%F NIL (QUOTE FOO))) (DECLARE (IGNORE (FUNCTION %F))) (%F)) FOO)
;; Loading (DEFTEST IGNORE.5 (FLET (((SETF %F) (X Y) (SETF (CAR Y) X))) (DECLARE (IGNORE (FUNCTION (SETF %F)))) :GOOD) :GOOD)
;; Loading (DEFTEST IGNORE.6 (LABELS (((SETF %F) (X Y) (SETF (CAR Y) X))) (DECLARE (IGNORE (FUNCTION (SETF %F)))) :GOOD) :GOOD)
;; Loading (LOAD "ignorable.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ignorable.lsp C0AF7D77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST IGNORABLE.1 (LET ((X (QUOTE FOO))) (DECLARE (IGNORABLE X))) NIL)
;; Loading (DEFTEST IGNORABLE.2 (LET ((X (QUOTE FOO))) (DECLARE (IGNORABLE X)) X) FOO)
;; Loading (DEFTEST IGNORABLE.3 (FLET ((%F NIL (QUOTE FOO))) (DECLARE (IGNORABLE (FUNCTION %F)))) NIL)
;; Loading (DEFTEST IGNORABLE.4 (FLET ((%F NIL (QUOTE FOO))) (DECLARE (IGNORABLE (FUNCTION %F))) (%F)) FOO)
;; Loading (DEFTEST IGNORABLE.5 (FLET (((SETF %F) (X Y) NIL)) (DECLARE (IGNORABLE (FUNCTION (SETF %F)))) :GOOD) :GOOD)
;; Loading (DEFTEST IGNORABLE.6 (FLET (((SETF %F) (X Y) (SETF (CAR Y) X))) (DECLARE (IGNORABLE (FUNCTION (SETF %F)))) (LET ((Z (CONS (QUOTE A) (QUOTE B)))) (VALUES (SETF (%F Z) (QUOTE C)) Z))) C (C . B))
;; Loading (DEFTEST IGNORABLE.7 (LABELS (((SETF %F) (X Y) NIL)) (DECLARE (IGNORABLE (FUNCTION (SETF %F)))) :GOOD) :GOOD)
;; Loading (DEFTEST IGNORABLE.8 (LABELS (((SETF %F) (X Y) (SETF (CAR Y) X))) (DECLARE (IGNORABLE (FUNCTION (SETF %F)))) (LET ((Z (CONS (QUOTE A) (QUOTE B)))) (VALUES (SETF (%F Z) (QUOTE C)) Z))) C (C . B))
;; Loading (LOAD "dynamic-extent.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/dynamic-extent.lsp C0B51307>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DYNAMIC-EXTENT.1 (LET NIL (DECLARE (DYNAMIC-EXTENT))) NIL)
;; Loading (DEFTEST DYNAMIC-EXTENT.2 (LET ((X (QUOTE A))) (DECLARE (DYNAMIC-EXTENT X) (OPTIMIZE SPEED (SAFETY 0))) X) A)
;; Loading (DEFTEST DYNAMIC-EXTENT.3 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (DECLARE (DYNAMIC-EXTENT X) (OPTIMIZE SPEED (SAFETY 0))) (LENGTH X)) 3)
;; Loading (DEFTEST DYNAMIC-EXTENT.4 (LET ((X (VECTOR (QUOTE A) (QUOTE B) (QUOTE C)))) (DECLARE (DYNAMIC-EXTENT X) (OPTIMIZE SPEED (SAFETY 0))) (LENGTH X)) 3)
;; Loading (DEFTEST DYNAMIC-EXTENT.5 (FLET ((%F (X) (LIST (QUOTE A) X))) (DECLARE (DYNAMIC-EXTENT (FUNCTION %F)) (OPTIMIZE SPEED (SAFETY 0))) (MAPCAR (FUNCTION %F) (QUOTE (1 2 3)))) ((A 1) (A 2) (A 3)))
;; Loading (DEFTEST DYNAMIC-EXTENT.6 (LABELS ((%F (X) (LIST (QUOTE A) X))) (DECLARE (DYNAMIC-EXTENT (FUNCTION %F)) (OPTIMIZE SPEED (SAFETY 0))) (MAPCAR (FUNCTION %F) (QUOTE (1 2 3)))) ((A 1) (A 2) (A 3)))
;; Loading (DEFTEST DYNAMIC-EXTENT.7 (LABELS ((%F (X) (IF (CONSP X) (CONS (%F (CAR X)) (%F (CDR X))) (QUOTE *)))) (DECLARE (DYNAMIC-EXTENT (FUNCTION %F)) (OPTIMIZE SPEED (SAFETY 0))) (MAPCAR (FUNCTION %F) (QUOTE ((1) 2 (3 4 5))))) ((* . *) * (* * * . *)))
;; Loading (DEFTEST DYNAMIC-EXTENT.8 (LET ((X (+ MOST-POSITIVE-FIXNUM 2))) (DECLARE (DYNAMIC-EXTENT X) (OPTIMIZE SPEED (SAFETY 0))) (1- X)) 1152921504606846976)
;; Loading (DEFTEST DYNAMIC-EXTENT.9 (FLET ((F NIL (LIST (QUOTE A) (QUOTE B)))) (LET ((F (LIST (QUOTE C) (QUOTE D)))) (DECLARE (DYNAMIC-EXTENT (FUNCTION F)) (OPTIMIZE SPEED (SAFETY 0))) F)) (C D))
;; Loading (DEFTEST DYNAMIC-EXTENT.10 (LET ((X NIL)) (VALUES X (LOCALLY (DECLARE (DYNAMIC-EXTENT X) (NOTINLINE LENGTH) (OPTIMIZE SPEED (SAFETY 0))) (SETQ X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (PROG1 (LENGTH X) (SETQ X T))) X)) NIL 5 T)
;; Loading (DEFTEST DYNAMIC-EXTENT.11 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (CONS (QUOTE C) X))) (DECLARE (DYNAMIC-EXTENT Y) (OPTIMIZE SPEED (SAFETY 0))) (CDR Y)) (A B))
;; Loading (DEFTEST DYNAMIC-EXTENT.12 (LET* ((CONTENTS (QUOTE (1 0 0 1 1 0 1 1 0 1))) (N (LENGTH CONTENTS))) (LOOP FOR I FROM 1 TO 32 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR FORM1 = (SYSTEM.INTERNALS::BACKQUOTE (MAKE-ARRAY (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA N))) :INITIAL-CONTENTS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CONTENTS)) :ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) FOR FORM2 = (SYSTEM.INTERNALS::BACKQUOTE (LET ((A (SYSTEM.INTERNALS::BQ-COMMA FORM1))) (DECLARE (DYNAMIC-EXTENT A)) (DECLARE (TYPE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA TYPE) ((SYSTEM.INTERNALS::BQ-COMMA N))))) (DECLARE (NOTINLINE COERCE)) (DECLARE (OPTIMIZE SPEED (SAFETY 0))) (EQUAL (COERCE A (QUOTE LIST)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CONTENTS))))) UNLESS (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (SYSTEM.INTERNALS::BQ-COMMA FORM2))))) COLLECT I)) NIL)
;; Loading (DEFTEST DYNAMIC-EXTENT.13 (LET ((S (MAKE-STRING 10 :INITIAL-ELEMENT #\a))) (DECLARE (DYNAMIC-EXTENT S) (OPTIMIZE SPEED (SAFETY 0))) (NOTNOT (EVERY (FUNCTION (LAMBDA (C) (EQL C #\a))) S))) T)
;; Loading (DEFTEST DYNAMIC-EXTENT.14 (LET ((S (MAKE-STRING 10 :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (DECLARE (DYNAMIC-EXTENT S) (NOTINLINE EVERY) (OPTIMIZE SPEED (SAFETY 0))) (NOTNOT (EVERY (FUNCTION (LAMBDA (C) (EQL C #\a))) S))) T)
;; Loading (DEFTEST DYNAMIC-EXTENT.15 (FLET (((SETF %F) (X Y) (SETF (CAR Y) X))) (DECLARE (DYNAMIC-EXTENT (FUNCTION (SETF %F)))) :GOOD) :GOOD)
;; Loading (DEFTEST DYNAMIC-EXTENT.16 (LABELS (((SETF %F) (X Y) (SETF (CAR Y) X))) (DECLARE (DYNAMIC-EXTENT (FUNCTION (SETF %F)))) :GOOD) :GOOD)
;; Loading (LOAD "optimize.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/optimize.lsp C0C30617>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST OPTIMIZE.1 (LOCALLY (DECLARE (OPTIMIZE)) NIL) NIL)
;; Loading (DEFTEST OPTIMIZE.2 (LOCALLY (DECLARE (OPTIMIZE SPEED)) NIL) NIL)
;; Loading (DEFTEST OPTIMIZE.3 (LOCALLY (DECLARE (OPTIMIZE SPACE)) NIL) NIL)
;; Loading (DEFTEST OPTIMIZE.4 (LOCALLY (DECLARE (OPTIMIZE SAFETY)) NIL) NIL)
;; Loading (DEFTEST OPTIMIZE.5 (LOCALLY (DECLARE (OPTIMIZE DEBUG)) NIL) NIL)
;; Loading (DEFTEST OPTIMIZE.6 (LOCALLY (DECLARE (OPTIMIZE COMPILATION-SPEED)) NIL) NIL)
;; Loading (DEFTEST OPTIMIZE.7 (LOOP FOR D IN (QUOTE (SPEED SPACE SAFETY DEBUG COMPILATION-SPEED)) NCONC (LOOP FOR N FROM 0 TO 3 FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE ((SYSTEM.INTERNALS::BQ-COMMA D) (SYSTEM.INTERNALS::BQ-COMMA N)))) T)) FOR VAL = (EVAL FORM) UNLESS (EQL VAL T) COLLECT (LIST D N VAL))) NIL)
;; Loading (DEFTEST OPTIMIZE.8 (LOOP FOR D IN (QUOTE (SPEED SPACE SAFETY DEBUG COMPILATION-SPEED)) NCONC (LOOP FOR N FROM 0 TO 3 FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (DECLARE (OPTIMIZE ((SYSTEM.INTERNALS::BQ-COMMA D) (SYSTEM.INTERNALS::BQ-COMMA N)))) T)) FOR VAL = (FUNCALL (COMPILE NIL FORM)) UNLESS (EQL VAL T) COLLECT (LIST D N VAL))) NIL)
;; Loading (LOAD "special.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/special.lsp C0C8BD27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SPECIAL.1 (LET ((F 1)) (DECLARE (SPECIAL F)) (FLET ((F NIL :GOOD)) (FLET ((G NIL (F))) (FLET ((F NIL :BAD)) (G))))) :GOOD)
;; Loading (DEFTEST SPECIAL.2 (LET ((X (QUOTE A))) (DECLARE (SPECIAL X)) (LET ((X (QUOTE B))) (VALUES X (LOCALLY (DECLARE (SPECIAL X)) X) X))) B A B)
;; Loading (DEFTEST SPECIAL.3 (FLET ((%F NIL (DECLARE (SPECIAL X10)) X10)) (LET ((X10 (QUOTE A))) (DECLARE (SPECIAL X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12)) (%F))) A)
;; Loading (LOAD "macroexpand.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/macroexpand.lsp C0CC5D77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MACROEXPAND.ERROR.1 (SIGNALS-ERROR (MACROEXPAND) PROGRAM-ERROR) T)
;; Loading (DEFTEST MACROEXPAND.ERROR.2 (SIGNALS-ERROR (MACROEXPAND (QUOTE X) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MACROEXPAND.1 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (OR (SYMBOLP X) (CONSP X) (LET ((VALS (MULTIPLE-VALUE-LIST (MACROEXPAND X)))) (AND (= (LENGTH VALS) 2) (EQL (CAR VALS) X) (NULL (CADR VALS)))))))) NIL)
;; Loading (DEFTEST MACROEXPAND.2 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (OR (SYMBOLP X) (CONSP X) (LET ((VALS (MULTIPLE-VALUE-LIST (MACROEXPAND X NIL)))) (AND (= (LENGTH VALS) 2) (EQL (CAR VALS) X) (NULL (CADR VALS)))))))) NIL)
;; Loading (DEFTEST MACROEXPAND.3 (MACROLET ((%M (&ENVIRONMENT ENV) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (OR (SYMBOLP X) (CONSP X) (LET ((VALS (MULTIPLE-VALUE-LIST (MACROEXPAND X ENV)))) (AND (= (LENGTH VALS) 2) (EQL (CAR VALS) X) (NULL (CADR VALS))))))))))))) (%M)) NIL)
;; Loading (DEFTEST MACROEXPAND.4 (MACROLET ((%M NIL (QUOTE (QUOTE FOO)))) (MACROLET ((%M2 (&ENVIRONMENT ENV) (MACROEXPAND (QUOTE (%M)) ENV))) (%M2))) FOO)
;; Loading (DEFTEST MACROEXPAND.5 (LET ((FORM (LIST (GENSYM))) (I 0)) (VALUES (EQUALT (MACROEXPAND (PROGN (INCF I) FORM)) FORM) I)) T 1)
;; Loading (DEFTEST MACROEXPAND.6 (LET ((FORM (LIST (GENSYM))) (I 0) A B) (VALUES (EQUALT (MACROEXPAND (PROGN (SETF A (INCF I)) FORM) (PROGN (SETF B (INCF I)) NIL)) FORM) I A B)) T 2 1 2)
;; Loading (LOAD "macroexpand-1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/macroexpand-1.lsp C0D3AF27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MACROEXPAND-1.ERROR.1 (SIGNALS-ERROR (MACROEXPAND-1) PROGRAM-ERROR) T)
;; Loading (DEFTEST MACROEXPAND-1.ERROR.2 (SIGNALS-ERROR (MACROEXPAND-1 (QUOTE X) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MACROEXPAND-1.1 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (OR (SYMBOLP X) (CONSP X) (LET ((VALS (MULTIPLE-VALUE-LIST (MACROEXPAND-1 X)))) (AND (= (LENGTH VALS) 2) (EQL (CAR VALS) X) (NULL (CADR VALS)))))))) NIL)
;; Loading (DEFTEST MACROEXPAND-1.2 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (OR (SYMBOLP X) (CONSP X) (LET ((VALS (MULTIPLE-VALUE-LIST (MACROEXPAND-1 X NIL)))) (AND (= (LENGTH VALS) 2) (EQL (CAR VALS) X) (NULL (CADR VALS)))))))) NIL)
;; Loading (DEFTEST MACROEXPAND-1.3 (MACROLET ((%M (&ENVIRONMENT ENV) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (OR (SYMBOLP X) (CONSP X) (LET ((VALS (MULTIPLE-VALUE-LIST (MACROEXPAND-1 X ENV)))) (AND (= (LENGTH VALS) 2) (EQL (CAR VALS) X) (NULL (CADR VALS))))))))))))) (%M)) NIL)
;; Loading (DEFTEST MACROEXPAND-1.4 (MACROLET ((%M NIL (QUOTE (QUOTE FOO)))) (MACROLET ((%M2 (&ENVIRONMENT ENV) (MACROEXPAND-1 (QUOTE (%M)) ENV))) (%M2))) FOO)
;; Loading (DEFTEST MACROEXPAND-1.5 (LET ((FORM (LIST (GENSYM))) (I 0)) (VALUES (EQUALT (MACROEXPAND-1 (PROGN (INCF I) FORM)) FORM) I)) T 1)
;; Loading (DEFTEST MACROEXPAND-1.6 (LET ((FORM (LIST (GENSYM))) (I 0) A B) (VALUES (EQUALT (MACROEXPAND-1 (PROGN (SETF A (INCF I)) FORM) (PROGN (SETF B (INCF I)) NIL)) FORM) I A B)) T 2 1 2)
;; Loading (LOAD "declaration.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/declaration.lsp C0DB1777>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DECLARATION.1 (PROGN (DECLAIM (DECLARATION)) NIL) NIL)
;; Loading (DEFTEST DECLARATION.2 (PROGN (PROCLAIM (QUOTE (DECLARATION))) NIL) NIL)
;; Loading (DEFTEST DECLARATION.3 (LET ((SYM (GENSYM)) (SYM2 (GENSYM))) (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM) (SYSTEM.INTERNALS::BQ-COMMA SYM2)))) NIL) NIL)
;; Loading (WHEN (BLOCK DONE (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (RETURN-FROM DONE T))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET NIL (DECLARE ((SYSTEM.INTERNALS::BQ-COMMA (GENSYM)))) NIL))))) (DEFTEST DECLARATION.4 (LET ((SYM (GENSYM))) (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL T) ERROR)))) T T) (DEFTEST DECLARATION.5 (LET ((SYM (GENSYM))) (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (DEFSTRUCT (SYSTEM.INTERNALS::BQ-COMMA SYM) A B C) ERROR)))) T T) (DEFTEST DECLARATION.6 (LET ((SYM (GENSYM))) (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (A B C)) ERROR)))) T T) (DEFTEST DECLARATION.7 (LET ((SYM (GENSYM))) (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (DEFINE-CONDITION (SYSTEM.INTERNALS::BQ-COMMA SYM) (CONDITION) (A B C)) ERROR)))) T T) (DEFTEST DECLARATION.8 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (QUOTE ERROR)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (PROCLAIM (QUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) ERROR)))) T T) (DEFTEST DECLARATION.9 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFSTRUCT (SYSTEM.INTERNALS::BQ-COMMA SYM) A B C))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (PROCLAIM (QUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) ERROR)))) T T) (DEFTEST DECLARATION.10 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (A B C)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (PROCLAIM (QUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) ERROR)))) T T) (DEFTEST DECLARATION.11 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-CONDITION (SYSTEM.INTERNALS::BQ-COMMA SYM) (CONDITION) (A B C)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (PROCLAIM (QUOTE (DECLARATION (SYSTEM.INTERNALS::BQ-COMMA SYM)))) ERROR)))) T T))
;; Loading (LOAD "type.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/type.lsp C0E4A847>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TYPE.1 (LET ((X 1)) (DECLARE (TYPE (INTEGER 0 1) X)) (VALUES X (SETQ X 0) (1+ X))) 1 0 1)
;; Loading (DEFTEST TYPE.2 (LET ((X 1)) (DECLARE (TYPE (INTEGER -1 1) X)) (LOCALLY (DECLARE (TYPE (INTEGER 0 2) X)) (VALUES X (SETQ X 0) (1+ X)))) 1 0 1)
;; Loading (DEFTEST TYPE.3 (LOOP FOR X IN *MINI-UNIVERSE* FOR TP = (TYPE-OF X) FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (LET ((Y (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)))) (DECLARE (TYPE (SYSTEM.INTERNALS::BQ-COMMA TP) Y)) Y)) FOR VAL = (EVAL FORM) UNLESS (EQL VAL X) COLLECT (LIST X TP FORM VAL)) NIL)
;; Loading (DEFTEST TYPE.4 (LOOP FOR X IN *MINI-UNIVERSE* FOR TP = (TYPE-OF X) FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (LET ((Y (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)))) (DECLARE ((SYSTEM.INTERNALS::BQ-COMMA TP) Y)) Y)) FOR VAL = (EVAL FORM) UNLESS (EQL VAL X) COLLECT (LIST X TP FORM VAL)) NIL)
;; Loading (DEFTEST TYPE.5 (LOOP FOR X IN *MINI-UNIVERSE* FOR CLASS = (CLASS-OF X) FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (LET ((Y (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)))) (DECLARE ((SYSTEM.INTERNALS::BQ-COMMA CLASS) Y)) Y)) FOR VAL = (EVAL FORM) UNLESS (EQL VAL X) COLLECT (LIST X CLASS FORM VAL)) NIL)
;; Loading (DEFTEST TYPE.6 (LET ((X 2)) (LET ((Y (+ (DECF X) 2))) (DECLARE (TYPE (INTEGER 0 1) X)) (VALUES X Y))) 1 3)
;; Loading (LOAD "macro-function.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/macro-function.lsp C0EB2D97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MACRO-FUNCTION.1 (LOOP FOR N IN *CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION N) COLLECT N) NIL)
;; Loading (DEFTEST MACRO-FUNCTION.2 (LOOP FOR N IN *CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION N NIL) COLLECT N) NIL)
;; Loading (DEFTEST MACRO-FUNCTION.3 (LOOP FOR N IN *CL-MACRO-SYMBOLS* UNLESS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%M (S &ENVIRONMENT ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION S ENV)))) (%M (SYSTEM.INTERNALS::BQ-COMMA N))))) COLLECT N) NIL)
;; Loading (DEFTEST MACRO-FUNCTION.4 (MACRO-FUNCTION (GENSYM)) NIL)
;; Loading (DEFTEST MACRO-FUNCTION.5 (REMOVE-IF-NOT (FUNCTION MACRO-FUNCTION) *CL-FUNCTION-SYMBOLS*) NIL)
;; Loading (DEFTEST MACRO-FUNCTION.6 (REMOVE-IF-NOT (FUNCTION MACRO-FUNCTION) *CL-ACCESSOR-SYMBOLS*) NIL)
;; Loading (DEFTEST MACRO-FUNCTION.7 (LET ((FN (MACROLET ((%M NIL 16)) (MACROLET ((%N (&ENVIRONMENT ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION (QUOTE %M) ENV)))) (%N))))) (VALUES (NOTNOT (FUNCTIONP FN)) (FUNCALL FN (QUOTE (%M)) NIL))) T 16)
;; Loading (DEFTEST MACRO-FUNCTION.8 (LET ((SYM (GENSYM))) (SETF (MACRO-FUNCTION SYM) (MACRO-FUNCTION (QUOTE POP))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X (QUOTE (A B C)))) (VALUES ((SYSTEM.INTERNALS::BQ-COMMA SYM) X) X))))) A (B C))
;; Loading (DEFTEST MACRO-FUNCTION.9 (LET ((SYM (GENSYM))) (SETF (MACRO-FUNCTION SYM NIL) (MACRO-FUNCTION (QUOTE POP))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X (QUOTE (A B C)))) (VALUES ((SYSTEM.INTERNALS::BQ-COMMA SYM) X) X))))) A (B C))
;; Loading (DEFTEST MACRO-FUNCTION.10 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) :BAD))) (SETF (MACRO-FUNCTION SYM) (MACRO-FUNCTION (QUOTE POP))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X (QUOTE (A B C)))) (VALUES ((SYSTEM.INTERNALS::BQ-COMMA SYM) X) X))))) A (B C))
;; Loading (DEFTEST MACRO-FUNCTION.11 (LET ((FN (FLET ((%M NIL 16)) (MACROLET ((%N (&ENVIRONMENT ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION (QUOTE %M) ENV)))) (%N))))) FN) NIL)
;; Loading (DEFTEST MACRO-FUNCTION.12 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL T))) (LET ((I 0)) (VALUES (FUNCALL (MACRO-FUNCTION (PROGN (INCF I) SYM)) (LIST SYM) NIL) I))) T 1)
;; Loading (DEFTEST MACRO-FUNCTION.13 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL T))) (LET ((I 0) A B) (VALUES (FUNCALL (MACRO-FUNCTION (PROGN (SETF A (INCF I)) SYM) (PROGN (SETF B (INCF I)) NIL)) (LIST SYM) NIL) I A B))) T 2 1 2)
;; Loading (DEFTEST MACRO-FUNCTION.14 (LET ((SYM (GENSYM)) (I 0)) (SETF (MACRO-FUNCTION (PROGN (INCF I) SYM)) (MACRO-FUNCTION (QUOTE POP))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X (QUOTE (A B C)))) (LIST ((SYSTEM.INTERNALS::BQ-COMMA SYM) X) X)))) I)) (A (B C)) 1)
;; Loading (DEFTEST MACRO-FUNCTION.15 (LET ((SYM (GENSYM)) (I 0) A B) (SETF (MACRO-FUNCTION (PROGN (SETF A (INCF I)) SYM) (PROGN (SETF B (INCF I)) NIL)) (MACRO-FUNCTION (QUOTE POP))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X (QUOTE (A B C)))) (LIST ((SYSTEM.INTERNALS::BQ-COMMA SYM) X) X)))) I A B)) (A (B C)) 2 1 2)
;; Loading (DEFTEST MACRO-FUNCTION.ERROR.1 (SIGNALS-ERROR (MACRO-FUNCTION) PROGRAM-ERROR) T)
;; Loading (DEFTEST MACRO-FUNCTION.ERROR.2 (SIGNALS-ERROR (MACRO-FUNCTION (QUOTE POP) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "load-data-and-control-flow.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-data-and-control-flow.lsp C0F8B3E7>
;; Loading (LOAD "data-and-control-flow.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/data-and-control-flow.lsp C0F9E9E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFPARAMETER *DCF-FNS* (QUOTE (APPLY FBOUNDP FMAKUNBOUND FUNCALL FUNCTION-LAMBDA-EXPRESSION FUNCTIONP COMPILED-FUNCTION-P NOT EQ EQL EQUAL EQUALP IDENTITY COMPLEMENT CONSTANTLY EVERY SOME NOTEVERY NOTANY VALUES-LIST GET-SETF-EXPANSION)))
;; Loading (DEFPARAMETER *DCF-MACROS* (QUOTE (DEFUN DEFCONSTANT DEFPARAMETER DEFVAR DESTRUCTURING-BIND PSETQ RETURN AND COND OR WHEN UNLESS CASE CCASE ECASE MULTIPLE-VALUE-LIST MULTIPLE-VALUE-SETQ NTH-VALUE PROG PROG* PROG1 PROG2 DEFINE-MODIFY-MACRO DEFSETF DEFINE-SETF-EXPANDER SETF PSETF SHIFTF ROTATEF)))
;; Loading (DEFTEST DCF-FUNS (REMOVE-IF (FUNCTION FBOUNDP) *DCF-FNS*) NIL)
;; Loading (DEFTEST DCF-MACROS (REMOVE-IF (FUNCTION MACRO-FUNCTION) *DCF-MACROS*) NIL)
;; Loading (LOAD "places.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/places.lsp C1006017>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SETF.ORDER.1 (LET ((X (VECTOR NIL NIL NIL NIL)) (I 0)) (SETF (AREF X (INCF I)) (INCF I)) (VALUES X I)) #(NIL 2 NIL NIL) 2)
;; Loading (DEFTEST SETF.ORDER.2 (LET ((X (VECTOR NIL NIL NIL NIL)) (I 0)) (SETF (AREF X (INCF I)) (INCF I) (AREF X (INCF I)) (INCF I 10)) (VALUES X I)) #(NIL 2 NIL 13) 13)
;; Loading (DEFTEST INCF.ORDER.1 (LET ((X (COPY-SEQ #(0 0 0 0 0))) (I 1)) (VALUES (INCF (AREF X (INCF I)) (INCF I)) X I)) 3 #(0 0 3 0 0) 3)
;; Loading (DEFTEST DECF.ORDER.1 (LET ((X (COPY-SEQ #(0 0 0 0 0))) (I 1)) (VALUES (DECF (AREF X (INCF I)) (INCF I)) X I)) -3 #(0 0 -3 0 0) 3)
;; Loading (DEFTEST SETF-VAR (LET ((X NIL)) (SETF X (QUOTE A)) X) A)
;; Loading (DEFTEST SETF-VALUES.1 (LET ((X NIL) (Y NIL) (Z NIL)) (SETF (VALUES X Y Z) (VALUES 1 2 3))) 1 2 3)
;; Loading (DEFTEST SETF-VALUES.2 (LET ((X NIL) (Y NIL) (Z NIL)) (SETF (VALUES X Y Z) (VALUES 1 2 3)) (VALUES Z Y X)) 3 2 1)
;; Loading (DEFTEST SETF-VALUES.3 (LET ((X NIL) (Y NIL) (Z NIL)) (SETF (VALUES X X X) (VALUES 1 2 3)) X) 3)
;; Loading (DEFTEST SETF-VALUES.4 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (SETF (VALUES (CAR X) (CADR X)) (VALUES 1 2)) X) (1 2))
;; Loading (DEFTEST SETF-VALUES.5 (LET ((A (VECTOR NIL NIL)) (I 0) X Y Z) (SETF (VALUES (AREF A (PROGN (SETF X (INCF I)) 0)) (AREF A (PROGN (SETF Y (INCF I)) 1))) (PROGN (SETF Z (INCF I)) (VALUES (QUOTE FOO) (QUOTE BAR)))) (VALUES A I X Y Z)) #(FOO BAR) 3 1 2 3)
;; Loading (DEFTEST SETF-VALUES.6 (SETF (VALUES) (VALUES)))
;; Loading (DEFTEST SETF-THE.1 (LET ((X 1)) (SETF (THE INTEGER X) 2) X) 2)
;; Loading (DEFTEST SETF-THE.2 (LET ((X (LIST (QUOTE A)))) (VALUES (SETF (THE SYMBOL (CAR X)) (QUOTE B)) X)) B (B))
;; Loading (DEFTEST SETF-APPLY.1 (LET ((X (VECTOR 0 1 2 3 4 5))) (SETF (APPLY (FUNCTION AREF) X (QUOTE (0))) 10) X) #(10 1 2 3 4 5))
;; Loading (DEFTEST SETF-APPLY.2 (LET ((A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0)))))) (SETF (APPLY (FUNCTION AREF) A 1 1 NIL) (QUOTE A)) (EQUALP A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 A)))))) T)
;; Loading (DEFTEST SETF-APPLY.3 (LET ((BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION BIT) BV 4 NIL) 1) BV) #*0000100000)
;; Loading (DEFTEST SETF-APPLY.4 (LET ((BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION SBIT) BV 4 NIL) 1) BV) #*0000100000)
;; Loading (DEFMACRO ACCESSOR-5-1-2-7 (X) (SYSTEM.INTERNALS::BACKQUOTE (CAR (SYSTEM.INTERNALS::BQ-COMMA X))))
;; Loading (DEFTEST SETF-MACRO.1 (LET ((X (LIST 1))) (VALUES (SETF (ACCESSOR-5-1-2-7 X) 2) (1+ (CAR X)))) 2 3)
;; Loading (DEFMACRO ACCESSOR-5-1-2-7B (X) (SYSTEM.INTERNALS::BACKQUOTE (ACCESSOR-5-1-2-7 (SYSTEM.INTERNALS::BQ-COMMA X))))
;; Loading (DEFTEST SETF-MACRO.3 (LET ((X (LIST 1))) (VALUES (SETF (ACCESSOR-5-1-2-7B X) 2) (1+ (CAR X)))) 2 3)
;; Loading (DEFTEST SETF-MACRO.4 (MACROLET ((%M (Y) (SYSTEM.INTERNALS::BACKQUOTE (CAR (SYSTEM.INTERNALS::BQ-COMMA Y))))) (LET ((X (LIST 1))) (VALUES (SETF (%M X) 2) (1+ (CAR X))))) 2 3)
;; Loading (DEFTEST SETF-SYMBOL-MACRO.1 (SYMBOL-MACROLET ((X Y)) (LET ((Y NIL)) (VALUES (SETF X 1) X Y))) 1 1 1)
;; Loading (DEFTEST SETF-SYMBOL-MACRO.2 (SYMBOL-MACROLET ((X Y)) (LET ((Y NIL)) (VALUES (SETQ X 1) X Y))) 1 1 1)
;; Loading (DEFTEST SETF-SYMBOL-MACRO.3 (SYMBOL-MACROLET ((X (VALUES Y Z))) (LET ((Y NIL) (Z NIL)) (VALUES (SETQ X (VALUES 1 2)) X Y Z))) 1 1 1 2)
;; Loading (DEFTEST SETQ.1 (SETQ) NIL)
;; Loading (DEFTEST SETQ.2 (LET ((X 0) (Y 0)) (VALUES (SETQ X 1 Y 2) X Y)) 2 1 2)
;; Loading (DEFTEST SETQ.3 (LET ((X 0) (Y 0)) (VALUES (SETQ X (VALUES 1 3) Y (VALUES 2 4)) X Y)) 2 1 2)
;; Loading (DEFTEST SETQ.4 (LET (X) (SETQ X (VALUES 1 2))) 1)
;; Loading (DEFTEST SETQ.5 (LET ((*X* 0)) (DECLARE (SPECIAL *X*)) (VALUES *X* (SETQ *X* 1) *X*)) 0 1 1)
;; Loading (DEFTEST SETQ.6 (LET ((*X* 0)) (DECLARE (SPECIAL *X*)) (SETQ *X* 1)) 1)
;; Loading (DEFTEST SETQ.7 (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES (SETQ X (EXPAND-IN-CURRENT-ENV (%M :GOOD))) X))) :GOOD :GOOD)
;; Loading (DEFTEST SETF.1 (SETF) NIL)
;; Loading (DEFTEST SETF.2 (LET ((X 0) (Y 0)) (VALUES (SETF X 1 Y 2) X Y)) 2 1 2)
;; Loading (DEFTEST SETF.3 (LET ((X 0) (Y 0)) (VALUES (SETF X (VALUES 1 3) Y (VALUES 2 4)) X Y)) 2 1 2)
;; Loading (DEFTEST SETF.4 (LET (X) (SETF X (VALUES 1 2))) 1)
;; Loading (DEFTEST SETF.5 (LET ((*X* 0)) (DECLARE (SPECIAL *X*)) (VALUES *X* (SETF *X* 1) *X*)) 0 1 1)
;; Loading (DEFTEST SETF.6 (LET ((*X* 0)) (DECLARE (SPECIAL *X*)) (SETF *X* 1)) 1)
;; Loading (DEFTEST SETF.7 (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES X (SETF (EXPAND-IN-CURRENT-ENV (%M X)) T) X))) NIL T T)
;; Loading (DEFTEST SETF.8 (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES X (SETF X (EXPAND-IN-CURRENT-ENV (%M T))) X))) NIL T T)
;; Loading (LOAD "psetq.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/psetq.lsp C1163207>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PSETQ.1 (PSETQ) NIL)
;; Loading (DEFTEST PSETQ.2 (LET ((X 0)) (VALUES (PSETQ X 1) X)) NIL 1)
;; Loading (DEFTEST PSETQ.3 (LET ((X 0) (Y 1)) (VALUES (PSETQ X Y Y X) X Y)) NIL 1 0)
;; Loading (DEFTEST PSETQ.4 (LET ((X 0)) (VALUES (SYMBOL-MACROLET ((X Y)) (LET ((Y 1)) (PSETQ X 2) Y)) X)) 2 0)
;; Loading (DEFTEST PSETQ.5 (LET ((W (LIST NIL))) (VALUES (SYMBOL-MACROLET ((X (CAR W))) (PSETQ X 2)) W)) NIL (2))
;; Loading (DEFTEST PSETQ.6 (LET ((C 0) X Y) (PSETQ X (INCF C) Y (INCF C)) (VALUES C X Y)) 2 1 2)
;; Loading (DEFTEST PSETQ.7 (SYMBOL-MACROLET ((X (AREF A (INCF I))) (Y (AREF A (INCF I)))) (LET ((A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (I 0)) (PSETQ X (AREF A (INCF I)) Y (AREF A (INCF I))) (VALUES A I))) #(0 2 2 4 4 5 6 7 8 9) 4)
;; Loading (DEFTEST PSETQ.8 (LET ((*X* 0) (*Y* 10)) (DECLARE (SPECIAL *X* *Y*)) (VALUES *X* *Y* (PSETQ *X* 6 *Y* 15) *X* *Y*)) 0 10 NIL 6 15)
;; Loading (DEFTEST PSETQ.9 (LET ((*X* 0) (*Y* 10)) (DECLARE (SPECIAL *X* *Y*)) (VALUES *X* *Y* (PSETQ *X* *Y* *Y* *X*) *X* *Y*)) 0 10 NIL 10 0)
;; Loading (DEFTEST PSETQ.10 (MACROLET ((%M (Z) Z)) (LET ((X NIL) (Y NIL)) (VALUES (PSETQ X (EXPAND-IN-CURRENT-ENV (%M 1)) Y (EXPAND-IN-CURRENT-ENV (%M 2))) X Y))) NIL 1 2)
;; Loading (DEFTEST PSETQ.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETQ))) PROGRAM-ERROR) T)
;; Loading (DEFTEST PSETQ.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETQ)) (QUOTE (PSETQ))) PROGRAM-ERROR) T)
;; Loading (DEFTEST PSETQ.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE PSETQ)) (QUOTE (PSETQ)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "psetf.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/psetf.lsp C11E6287>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PSETF.ORDER.1 (LET ((X (VECTOR NIL NIL NIL NIL)) (I 0)) (PSETF (AREF X (INCF I)) (INCF I)) (VALUES X I)) #(NIL 2 NIL NIL) 2)
;; Loading (DEFTEST PSETF.ORDER.2 (LET ((X (VECTOR NIL NIL NIL NIL)) (I 0)) (PSETF (AREF X (INCF I)) (INCF I) (AREF X (INCF I)) (INCF I 10)) (VALUES X I)) #(NIL 2 NIL 13) 13)
;; Loading (DEFTEST PSETF.1 (PSETF) NIL)
;; Loading (DEFTEST PSETF.2 (LET ((X 0)) (VALUES (PSETF X 1) X)) NIL 1)
;; Loading (DEFTEST PSETF.3 (LET ((X 0) (Y 1)) (VALUES (PSETF X Y Y X) X Y)) NIL 1 0)
;; Loading (DEFTEST PSETF.4 (LET ((X 0)) (VALUES (SYMBOL-MACROLET ((X Y)) (LET ((Y 1)) (PSETF X 2) Y)) X)) 2 0)
;; Loading (DEFTEST PSETF.5 (LET ((W (LIST NIL))) (VALUES (SYMBOL-MACROLET ((X (CAR W))) (PSETF X 2)) W)) NIL (2))
;; Loading (DEFTEST PSETF.6 (LET ((C 0) X Y) (PSETF X (INCF C) Y (INCF C)) (VALUES C X Y)) 2 1 2)
;; Loading (DEFTEST PSETF.7 (SYMBOL-MACROLET ((X (AREF A (INCF I))) (Y (AREF A (INCF I)))) (LET ((A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (I 0)) (PSETF X (AREF A (INCF I)) Y (AREF A (INCF I))) (VALUES A I))) #(0 2 2 4 4 5 6 7 8 9) 4)
;; Loading (DEFTEST PSETF.8 (LET ((A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (I 0)) (PSETF (AREF A (INCF I)) (AREF A (INCF I)) (AREF A (INCF I)) (AREF A (INCF I))) (VALUES A I)) #(0 2 2 4 4 5 6 7 8 9) 4)
;; Loading (DEFTEST PSETF.9 (LET ((A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9)))) (PSETF (AREF A 1) (AREF A 2) (AREF A 3) (AREF A 4)) A) #(0 2 2 4 4 5 6 7 8 9))
;; Loading (DEFTEST PSETF.10 (LET ((*X* 0) (*Y* 10)) (DECLARE (SPECIAL *X* *Y*)) (VALUES *X* *Y* (PSETF *X* 6 *Y* 15) *X* *Y*)) 0 10 NIL 6 15)
;; Loading (DEFTEST PSETF.11 (LET ((*X* 0) (*Y* 10)) (DECLARE (SPECIAL *X* *Y*)) (VALUES *X* *Y* (PSETF *X* *Y* *Y* *X*) *X* *Y*)) 0 10 NIL 10 0)
;; Loading (DEF-MACRO-TEST PSETF.ERROR.1 (PSETF))
;; Loading (DEFTEST PSETF.12 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D)))) (PSETF (CAR X) 1 (CAR Y) 2) (VALUES X Y)) (1 B) (2 D))
;; Loading (DEFTEST PSETF.12A (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D)))) (PSETF (FIRST X) 1 (FIRST Y) 2) (VALUES X Y)) (1 B) (2 D))
;; Loading (DEFTEST PSETF.13 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D)))) (PSETF (CDR X) 1 (CDR Y) 2) (VALUES X Y)) (A . 1) (C . 2))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PSETF.13A (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D)))) (PSETF (REST X) 1 (REST Y) 2) (VALUES X Y)) (A . 1) (C . 2))
;; Loading (DEFTEST PSETF.14 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D)))) (PSETF (CADR X) 1 (CADR Y) 2) (VALUES X Y)) (A 1) (C 2))
;; Loading (DEFTEST PSETF.15 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D)))) (PSETF (CDDR X) 1 (CDDR Y) 2) (VALUES X Y)) (A B . 1) (C D . 2))
;; Loading (DEFTEST PSETF.16 (LET* ((X (LIST (LIST (QUOTE A)))) (Y (LIST (LIST (QUOTE C))))) (PSETF (CAAR X) 1 (CAAR Y) 2) (VALUES X Y)) ((1)) ((2)))
;; Loading (DEFTEST PSETF.17 (LET* ((X (LIST (LIST (QUOTE A)))) (Y (LIST (LIST (QUOTE C))))) (PSETF (CDAR X) 1 (CDAR Y) 2) (VALUES X Y)) ((A . 1)) ((C . 2)))
;; Loading (DEFTEST PSETF.18 (LET* ((X (VECTOR (QUOTE A) (QUOTE B))) (Y (VECTOR (QUOTE C) (QUOTE D)))) (PSETF (AREF X 0) 1 (AREF Y 0) 2) (VALUES X Y)) #(1 B) #(2 D))
;; Loading (DEFTEST PSETF.18A (LET* ((X (VECTOR (QUOTE A) (QUOTE B))) (Y (VECTOR (QUOTE C) (QUOTE D)))) (PSETF (SVREF X 0) 1 (SVREF Y 0) 2) (VALUES X Y)) #(1 B) #(2 D))
;; Loading (DEFTEST PSETF.19 (LET* ((X (COPY-SEQ #*11000)) (Y (COPY-SEQ #*11100))) (PSETF (BIT X 1) 0 (BIT X 2) 1 (BIT Y 4) 1 (BIT Y 0) 0) (VALUES X Y)) #*10100 #*01101)
;; Loading (DEFTEST PSETF.20 (LET* ((X (COPY-SEQ "abcde")) (Y (COPY-SEQ "fghij"))) (PSETF (CHAR X 1) #\X (CHAR Y 2) #\Y) (VALUES X Y)) "aXcde" "fgYij")
;; Loading (DEFTEST PSETF.21 (LET* ((X (COPY-SEQ #*11000)) (Y (COPY-SEQ #*11100))) (PSETF (SBIT X 1) 0 (SBIT X 2) 1 (SBIT Y 4) 1 (SBIT Y 0) 0) (VALUES X Y)) #*10100 #*01101)
;; Loading (DEFTEST PSETF.22 (LET* ((X (COPY-SEQ "abcde")) (Y (COPY-SEQ "fghij"))) (PSETF (SCHAR X 1) #\X (SCHAR Y 2) #\Y) (VALUES X Y)) "aXcde" "fgYij")
;; Loading (DEFTEST PSETF.23 (LET* ((X (COPY-SEQ (QUOTE (A B C D E)))) (Y (COPY-SEQ (QUOTE (F G H I J))))) (PSETF (ELT X 1) (QUOTE U) (ELT Y 2) (QUOTE V)) (VALUES X Y)) (A U C D E) (F G V I J))
;; Loading (DEFTEST PSETF.24 (LET ((X 433) (Y 332)) (PSETF (LDB (BYTE 5 1) X) 22 (LDB (BYTE 3 6) Y) 2) (VALUES X Y)) 429 140)
;; Loading (DEFTEST PSETF.25 (LET* ((F1 (GENSYM)) (F2 (GENSYM)) (FN1 (CONSTANTLY :FOO)) (FN2 (CONSTANTLY :BAR))) (PSETF (FDEFINITION F1) FN1 (FDEFINITION F2) FN2) (VALUES (FUNCALL F1) (FUNCALL F2))) :FOO :BAR)
;; Loading (DEFTEST PSETF.26 (LET* ((A1 (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5)) (A2 (MAKE-ARRAY (QUOTE (20)) :FILL-POINTER 7))) (PSETF (FILL-POINTER A1) (1+ (FILL-POINTER A2)) (FILL-POINTER A2) (1- (FILL-POINTER A1))) (VALUES (FILL-POINTER A1) (FILL-POINTER A2))) 8 4)
;; Loading (DEFTEST PSETF.27 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (Y (LIST (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G))) (N1 1) (N2 2) (V1 :FOO) (V2 :BAR)) (PSETF (NTH N1 X) V1 (NTH N2 Y) V2) (VALUES X Y)) (A :FOO C D) (D E :BAR G))
;; Loading (DEFTEST PSETF.28 (LET* ((F1 (GENSYM)) (F2 (GENSYM)) (FN1 (CONSTANTLY :FOO)) (FN2 (CONSTANTLY :BAR))) (PSETF (SYMBOL-FUNCTION F1) FN1 (SYMBOL-FUNCTION F2) FN2) (VALUES (FUNCALL F1) (FUNCALL F2))) :FOO :BAR)
;; Loading (DEFTEST PSETF.29 (LET* ((S1 (GENSYM)) (S2 (GENSYM)) (V1 :FOO) (V2 :BAR)) (PSETF (SYMBOL-VALUE S1) V1 (SYMBOL-VALUE S2) V2) (VALUES (SYMBOL-VALUE S1) (SYMBOL-VALUE S2))) :FOO :BAR)
;; Loading (DEFTEST PSETF.30 (LET* ((S1 (GENSYM)) (S2 (GENSYM)) (V1 (LIST :FOO 1)) (V2 (LIST :BAR 2))) (PSETF (SYMBOL-PLIST S1) V1 (SYMBOL-PLIST S2) V2) (VALUES (SYMBOL-PLIST S1) (SYMBOL-PLIST S2))) (:FOO 1) (:BAR 2))
;; Loading (DEFTEST PSETF.31 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (Y (LIST (QUOTE F) (QUOTE G) (QUOTE H) (QUOTE I) (QUOTE J))) (V1 (LIST 1 2)) (V2 (LIST 3 4 5)) (P1 1) (P2 2) (L1 (LENGTH V1)) (L2 (LENGTH V2))) (PSETF (SUBSEQ X P1 (+ P1 L1)) V1 (SUBSEQ Y P2 (+ P2 L2)) V2) (VALUES X Y)) (A 1 2 D E) (F G 3 4 5))
;; Loading (DEFTEST PSETF.32 (LET* ((X (GENSYM)) (Y (GENSYM)) (K1 :FOO) (K2 :BAR) (V1 1) (V2 2)) (PSETF (GET X K1) V1 (GET Y K2) V2) (VALUES (SYMBOL-PLIST X) (SYMBOL-PLIST Y))) (:FOO 1) (:BAR 2))
;; Loading (DEFTEST PSETF.33 (LET* ((X NIL) (Y NIL) (K1 :FOO) (K2 :BAR) (V1 1) (V2 2)) (PSETF (GETF X K1) V1 (GETF Y K2) V2) (VALUES X Y)) (:FOO 1) (:BAR 2))
;; Loading (DEFTEST PSETF.34 (LET* ((HT1 (MAKE-HASH-TABLE)) (HT2 (MAKE-HASH-TABLE)) (K1 :FOO) (V1 1) (K2 :BAR) (V2 2)) (PSETF (GETHASH K1 HT1) V1 (GETHASH K2 HT2) V2) (VALUES (GETHASH K1 HT1) (GETHASH K2 HT2))) 1 2)
;; Loading (DEFTEST PSETF.35 (LET ((N1 (GENSYM)) (N2 (GENSYM)) (N3 (GENSYM)) (N4 (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA N1) NIL NIL))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA N2) NIL NIL))) (PSETF (FIND-CLASS N3) (FIND-CLASS N1) (FIND-CLASS N4) (FIND-CLASS N2)) (VALUES (EQLT (FIND-CLASS N1) (FIND-CLASS N3)) (EQLT (FIND-CLASS N2) (FIND-CLASS N4)))) T T)
;; Loading (DEFTEST PSETF.36 (LET ((FN1 (CONSTANTLY :FOO)) (FN2 (CONSTANTLY :BAR)) (N1 (GENSYM)) (N2 (GENSYM))) (PSETF (MACRO-FUNCTION N1) FN1 (MACRO-FUNCTION N2) FN2) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA N1)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA N2)))))) :FOO :BAR)
;; Loading (DEFTEST PSETF.37 (LET ((B1 (BYTE 3 1)) (B2 (BYTE 4 2)) (X 51925) (Y 13638) (M1 21869) (M2 15541)) (PSETF (MASK-FIELD B1 X) M1 (MASK-FIELD B2 Y) M2) (VALUES X Y)) 51933 13686)
;; Loading (DEFTEST PSETF.39 (MACROLET ((%M (Z) Z)) (LET ((X 1) (Y 2)) (VALUES (PSETF (EXPAND-IN-CURRENT-ENV (%M X)) Y Y X) X Y))) NIL 2 1)
;; Loading (DEFTEST PSETF.40 (MACROLET ((%M (Z) Z)) (LET ((X 1) (Y 2)) (VALUES (PSETF X (EXPAND-IN-CURRENT-ENV (%M Y)) Y X) X Y))) NIL 2 1)
;; Loading (LOAD "shiftf.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/shiftf.lsp 80BF3E57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SHIFTF-ORDER.1 (LET ((X (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (I 2)) (VALUES (SHIFTF (AREF X (INCF I)) (INCF I)) X I)) D #(A B C 4 E) 4)
;; Loading (DEFTEST SHIFTF-ORDER.2 (LET ((X (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G) (QUOTE H))) (I 2)) (VALUES (SHIFTF (AREF X (INCF I)) (AREF X (INCF I)) (INCF I)) X I)) D #(A B C E 5 F G H) 5)
;; Loading (DEFTEST SHIFTF.1 (LET ((X 0)) (VALUES X (SHIFTF X 1) X)) 0 0 1)
;; Loading (DEFTEST SHIFTF.2 (LET ((X (QUOTE A)) (Y (QUOTE B)) (Z (QUOTE C))) (VALUES X Y Z (SHIFTF X Y Z (QUOTE D)) X Y Z)) A B C A B C D)
;; Loading (DEFTEST SHIFTF.3 (LET ((X (VECTOR 0 1 2 3))) (VALUES (COPY-SEQ X) (SHIFTF (AREF X (AREF X 0)) (AREF X (AREF X 1)) (AREF X (AREF X 2)) (AREF X (AREF X 3)) (QUOTE FOO)) (COPY-SEQ X))) #(0 1 2 3) 0 #(1 2 3 FOO))
;; Loading (DEFTEST SHIFTF.4 (MACROLET ((%M (Z) Z)) (LET ((X 1) (Y 2)) (VALUES (SHIFTF (EXPAND-IN-CURRENT-ENV (%M X)) Y (QUOTE FOO)) X Y))) 1 2 FOO)
;; Loading (DEFTEST SHIFTF.5 (MACROLET ((%M (Z) Z)) (LET ((X 1) (Y 2)) (VALUES (SHIFTF X (EXPAND-IN-CURRENT-ENV (%M Y)) (QUOTE FOO)) X Y))) 1 2 FOO)
;; Loading (DEFTEST SHIFTF.6 (MACROLET ((%M (Z) Z)) (LET ((X 1) (Y 2)) (VALUES (SHIFTF X Y (EXPAND-IN-CURRENT-ENV (%M (QUOTE FOO)))) X Y))) 1 2 FOO)
;; Loading (LOAD "rotatef.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rotatef.lsp 80C646D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ROTATEF-ORDER.1 (LET ((X (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F))) (I 2)) (VALUES (ROTATEF (AREF X (INCF I)) (AREF X (INCF I))) X I)) NIL #(A B C E D F) 4)
;; Loading (DEFTEST ROTATEF-ORDER.2 (LET ((X (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F))) (I 2)) (VALUES (ROTATEF (AREF X (INCF I)) (AREF X (INCF I)) (AREF X (INCF I))) X I)) NIL #(A B C E F D) 5)
;; Loading (DEFTEST ROTATEF.1 (LET ((X (VECTOR 0 1 2))) (VALUES (ROTATEF (AREF X (AREF X 0)) (AREF X (AREF X 1)) (AREF X (AREF X 2))) X)) NIL #(1 2 0))
;; Loading (DEFTEST ROTATEF.2 (LET ((X (VECTOR 0 1 2 3 4 5 6 7 8 9))) (VALUES (ROTATEF (AREF X (AREF X 0)) (AREF X (AREF X 1)) (AREF X (AREF X 2)) (AREF X (AREF X 3)) (AREF X (AREF X 4)) (AREF X (AREF X 5)) (AREF X (AREF X 6)) (AREF X (AREF X 7)) (AREF X (AREF X 8)) (AREF X (AREF X 9))) X)) NIL #(1 2 3 4 5 6 7 8 9 0))
;; Loading (DEFTEST ROTATEF.3 (ROTATEF) NIL)
;; Loading (DEFTEST ROTATEF.4 (LET ((X 10)) (VALUES X (ROTATEF X) X)) 10 NIL 10)
;; Loading (DEFTEST ROTATEF.5 (LET ((X (QUOTE A)) (Y (QUOTE B))) (VALUES X Y (ROTATEF X Y) X Y)) A B NIL B A)
;; Loading (DEFTEST ROTATEF.6 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D))) (Z (QUOTE E))) (ROTATEF (CAR X) (CAR Y) Z) (VALUES X Y Z)) (C B) (E D) A)
;; Loading (DEFTEST ROTATEF.7 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D))) (Z (QUOTE E))) (ROTATEF (FIRST X) (FIRST Y) Z) (VALUES X Y Z)) (C B) (E D) A)
;; Loading (DEFTEST ROTATEF.8 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D))) (Z (QUOTE (E)))) (ROTATEF (CDR X) (CDR Y) Z) (VALUES X Y Z)) (A D) (C E) (B))
;; Loading (DEFTEST ROTATEF.9 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D))) (Z (QUOTE (E)))) (ROTATEF (REST X) (REST Y) Z) (VALUES X Y Z)) (A D) (C E) (B))
;; Loading (DEFTEST ROTATEF.10 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D))) (Z (QUOTE E))) (ROTATEF (CADR X) (CADR Y) Z) (VALUES X Y Z)) (A D) (C E) B)
;; Loading (DEFTEST ROTATEF.11 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST (QUOTE C) (QUOTE D))) (Z (QUOTE E))) (ROTATEF (SECOND X) (SECOND Y) Z) (VALUES X Y Z)) (A D) (C E) B)
;; Loading (DEFTEST ROTATEF.12 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (Y (LIST (QUOTE D) (QUOTE E) (QUOTE F))) (Z (LIST (QUOTE G)))) (ROTATEF (CDDR X) (CDDR Y) Z) (VALUES X Y Z)) (A B F) (D E G) (C))
;; Loading (DEFTEST ROTATEF.13 (LET* ((X (LIST (LIST (QUOTE A)))) (Y (LIST (LIST (QUOTE C)))) (Z (QUOTE E))) (ROTATEF (CAAR X) (CAAR Y) Z) (VALUES X Y Z)) ((C)) ((E)) A)
;; Loading (DEFTEST ROTATEF.14 (LET* ((X (LIST (LIST (QUOTE A) (QUOTE B)))) (Y (LIST (LIST (QUOTE C) (QUOTE D)))) (Z (LIST (QUOTE E)))) (ROTATEF (CDAR X) (CDAR Y) Z) (VALUES X Y Z)) ((A D)) ((C E)) (B))
;; Loading (DEFTEST ROTATEF.15 (LET* ((X (VECTOR (QUOTE A) (QUOTE B))) (Y (VECTOR (QUOTE C) (QUOTE D))) (Z (QUOTE E))) (ROTATEF (AREF X 0) (AREF Y 0) Z) (VALUES X Y Z)) #(C B) #(E D) A)
;; Loading (DEFTEST ROTATEF.16 (LET* ((X (VECTOR (QUOTE A) (QUOTE B))) (Y (VECTOR (QUOTE C) (QUOTE D))) (Z (QUOTE E))) (ROTATEF (SVREF X 0) (SVREF Y 0) Z) (VALUES X Y Z)) #(C B) #(E D) A)
;; Loading (DEFTEST ROTATEF.17 (LET* ((X (COPY-SEQ #*11000)) (Y (COPY-SEQ #*11100)) (Z 1)) (ROTATEF (BIT X 1) (BIT Y 3) Z) (VALUES X Y Z)) #*10000 #*11110 1)
;; Loading (DEFTEST ROTATEF.18 (LET* ((X (COPY-SEQ "abcde")) (Y (COPY-SEQ "fghij")) (Z #\X)) (ROTATEF (CHAR X 1) (CHAR Y 2) Z) (VALUES X Y Z)) "ahcde" "fgXij" #\b)
;; Loading (DEFTEST ROTATEF.21 (LET* ((X (COPY-SEQ #*11000)) (Y (COPY-SEQ #*11100)) (Z 1)) (ROTATEF (BIT X 1) (BIT Y 3) Z) (VALUES X Y Z)) #*10000 #*11110 1)
;; Loading (DEFTEST ROTATEF.22 (LET* ((X (COPY-SEQ "abcde")) (Y (COPY-SEQ "fghij")) (Z #\X)) (ROTATEF (CHAR X 1) (CHAR Y 2) Z) (VALUES X Y Z)) "ahcde" "fgXij" #\b)
;; Loading (DEFTEST ROTATEF.23 (LET* ((X (COPY-SEQ (QUOTE (A B C D E)))) (Y (COPY-SEQ (QUOTE (F G H I J)))) (Z (QUOTE K))) (ROTATEF (ELT X 1) (ELT Y 2) Z) (VALUES X Y Z)) (A H C D E) (F G K I J) B)
;; Loading (DEFTEST ROTATEF.24 (LET ((X 85) (Y 15) (Z 0)) (ROTATEF (LDB (BYTE 4 2) X) (LDB (BYTE 4 1) Y) Z) (VALUES X Y Z)) 93 1 5)
;; Loading (DEFTEST ROTATEF.25 (LET* ((F1 (GENSYM)) (F2 (GENSYM)) (FN1 (CONSTANTLY :FOO)) (FN2 (CONSTANTLY :BAR)) (FN3 (CONSTANTLY :ZZZ))) (SETF (FDEFINITION F1) FN1 (FDEFINITION F2) FN2) (ROTATEF (FDEFINITION F1) (FDEFINITION F2) FN3) (VALUES (FUNCALL F1) (FUNCALL F2) (FUNCALL FN3))) :BAR :ZZZ :FOO)
;; Loading (DEFTEST ROTATEF.26 (LET* ((A1 (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5)) (A2 (MAKE-ARRAY (QUOTE (20)) :FILL-POINTER 7)) (Z 3)) (ROTATEF (FILL-POINTER A1) (FILL-POINTER A2) Z) (VALUES (FILL-POINTER A1) (FILL-POINTER A2) Z)) 7 3 5)
;; Loading (DEFTEST ROTATEF.27 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (Y (LIST (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G))) (N1 1) (N2 2) (Z (QUOTE H))) (ROTATEF (NTH N1 X) (NTH N2 Y) Z) (VALUES X Y Z)) (A F C D) (D E H G) B)
;; Loading (DEFTEST ROTATEF.28 (LET* ((F1 (GENSYM)) (F2 (GENSYM)) (FN1 (CONSTANTLY :FOO)) (FN2 (CONSTANTLY :BAR)) (FN3 (CONSTANTLY :ZZZ))) (SETF (SYMBOL-FUNCTION F1) FN1 (SYMBOL-FUNCTION F2) FN2) (ROTATEF (SYMBOL-FUNCTION F1) (SYMBOL-FUNCTION F2) FN3) (VALUES (FUNCALL F1) (FUNCALL F2) (FUNCALL FN3))) :BAR :ZZZ :FOO)
;; Loading (DEFTEST ROTATEF.29 (LET* ((S1 (GENSYM)) (S2 (GENSYM)) (Z 1)) (SETF (SYMBOL-VALUE S1) :FOO (SYMBOL-VALUE S2) :BAR) (ROTATEF (SYMBOL-VALUE S1) (SYMBOL-VALUE S2) Z) (VALUES (SYMBOL-VALUE S1) (SYMBOL-VALUE S2) Z)) :BAR 1 :FOO)
;; Loading (DEFTEST ROTATEF.30 (LET* ((S1 (GENSYM)) (S2 (GENSYM)) (V1 (LIST :FOO 1)) (V2 (LIST :BAR 2)) (Z NIL)) (SETF (SYMBOL-PLIST S1) V1 (SYMBOL-PLIST S2) V2) (ROTATEF (SYMBOL-PLIST S1) (SYMBOL-PLIST S2) Z) (VALUES (SYMBOL-PLIST S1) (SYMBOL-PLIST S2) Z)) (:BAR 2) NIL (:FOO 1))
;; Loading (DEFTEST ROTATEF.31 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (Y (LIST (QUOTE F) (QUOTE G) (QUOTE H) (QUOTE I) (QUOTE J))) (P1 1) (P2 2) (LEN 3) (Z (QUOTE (10 11 12)))) (ROTATEF (SUBSEQ X P1 (+ P1 LEN)) (SUBSEQ Y P2 (+ P2 LEN)) Z) (VALUES X Y Z)) (A H I J E) (F G 10 11 12) (B C D))
;; Loading (DEFTEST ROTATEF.32 (LET* ((X (GENSYM)) (Y (GENSYM)) (K1 :FOO) (K2 :BAR) (V1 1) (V2 2) (Z 17)) (SETF (GET X K1) V1 (GET Y K2) V2) (ROTATEF (GET X K1) (GET Y K2) Z) (VALUES (SYMBOL-PLIST X) (SYMBOL-PLIST Y) Z)) (:FOO 2) (:BAR 17) 1)
;; Loading (DEFTEST ROTATEF.33 (LET* ((X NIL) (Y NIL) (K1 :FOO) (K2 :BAR) (V1 1) (V2 2) (Z 21)) (SETF (GETF X K1) V1 (GETF Y K2) V2) (ROTATEF (GETF X K1) (GETF Y K2) Z) (VALUES X Y Z)) (:FOO 2) (:BAR 21) 1)
;; Loading (DEFTEST ROTATEF.34 (LET* ((HT1 (MAKE-HASH-TABLE)) (HT2 (MAKE-HASH-TABLE)) (K1 :FOO) (V1 1) (K2 :BAR) (V2 2) (Z 3)) (SETF (GETHASH K1 HT1) V1 (GETHASH K2 HT2) V2) (ROTATEF Z (GETHASH K1 HT1) (GETHASH K2 HT2)) (VALUES Z (GETHASH K1 HT1) (GETHASH K2 HT2))) 1 2 3)
;; Loading (DEFTEST ROTATEF.35 (LET ((N1 (GENSYM)) (N2 (GENSYM)) (N3 (GENSYM)) (N4 (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA N1) NIL NIL))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA N2) NIL NIL))) (SETF (FIND-CLASS N3) (FIND-CLASS N1) (FIND-CLASS N4) (FIND-CLASS N2)) (ROTATEF (FIND-CLASS N3) (FIND-CLASS N4)) (VALUES (EQLT (FIND-CLASS N1) (FIND-CLASS N4)) (EQLT (FIND-CLASS N2) (FIND-CLASS N3)))) T T)
;; Loading (DEFTEST ROTATEF.36 (MACROLET ((%M (Z) Z)) (LET ((X 1) (Y 2)) (ROTATEF (EXPAND-IN-CURRENT-ENV (%M X)) Y) (VALUES X Y))) 2 1)
;; Loading (DEFTEST ROTATEF.37 (MACROLET ((%M (Z) Z)) (LET ((X 1) (Y 2)) (ROTATEF X (EXPAND-IN-CURRENT-ENV (%M Y))) (VALUES X Y))) 2 1)
;; Loading (LOAD "return.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/return.lsp 80E51B77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RETURN.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE RETURN))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RETURN.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE RETURN)) (QUOTE (RETURN NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RETURN.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE RETURN)) (QUOTE (RETURN NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RETURN.1 (BLOCK NIL (RETURN) :BAD) NIL)
;; Loading (DEFTEST RETURN.2 (BLOCK NIL (RETURN :GOOD) :BAD) :GOOD)
;; Loading (DEFTEST RETURN.3 (MACROLET ((%M (Z) Z)) (BLOCK NIL (RETURN (EXPAND-IN-CURRENT-ENV (%M :GOOD))) :BAD)) :GOOD)
;; Loading (LOAD "return-from.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/return-from.lsp 80E93277>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RETURN-FROM.1 (BLOCK XYZ (RETURN-FROM XYZ) :BAD) NIL)
;; Loading (DEFTEST RETURN-FROM.2 (BLOCK NIL (RETURN-FROM NIL :GOOD) :BAD) :GOOD)
;; Loading (DEFTEST RETURN-FROM.3 (MACROLET ((%M (Z) Z)) (BLOCK FOO (RETURN-FROM FOO (EXPAND-IN-CURRENT-ENV (%M :GOOD))))) :GOOD)
;; Loading (LOAD "define-setf-expander.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/define-setf-expander.lsp 80EC2D47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEF-MACRO-TEST DEFINE-SETF-EXPANDER.ERROR.1 (DEFINE-SETF-EXPANDER NONEXISTENT-ACCESS-FN (X)))
;; Loading (DEFUN MY-CAR (X) (CAR X))
;; Loading (IGNORE-ERRORS (DEFPARAMETER *DEFINE-SETF-EXPANDER-VALS.1* (MULTIPLE-VALUE-LIST (DEFINE-SETF-EXPANDER MY-CAR (PLACE &ENVIRONMENT ENV) (MULTIPLE-VALUE-BIND (TEMPS VALS STORES SET-FORM GET-FORM) (GET-SETF-EXPANSION PLACE ENV) (DECLARE (IGNORE STORES SET-FORM)) (LET ((STORE (GENSYM)) (TEMP (GENSYM))) (VALUES (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN TEMPS) (SYSTEM.INTERNALS::BQ-COMMA TEMP))) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN VALS) (SYSTEM.INTERNALS::BQ-COMMA GET-FORM))) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA STORE))) (SYSTEM.INTERNALS::BACKQUOTE (PROGN (RPLACA (SYSTEM.INTERNALS::BQ-COMMA TEMP) (SYSTEM.INTERNALS::BQ-COMMA STORE)) (SYSTEM.INTERNALS::BQ-COMMA STORE))) (SYSTEM.INTERNALS::BACKQUOTE (MY-CAR (SYSTEM.INTERNALS::BQ-COMMA TEMP))))))))))
;; Loading (DEFTEST DEFINE-SETF-EXPANDER.1 *DEFINE-SETF-EXPANDER-VALS.1* (MY-CAR))
;; Loading (DEFTEST DEFINE-SETF-EXPANDER.2 (LET ((A (LIST (QUOTE X) (QUOTE Y)))) (VALUES (COPY-LIST A) (MY-CAR A) (SETF (MY-CAR A) (QUOTE Z)) A)) (X Y) X Z (Z Y))
;; Loading (DEFTEST DEFINE-SETF-EXPANDER.3 (MULTIPLE-VALUE-BIND (TEMPS VALS STORES SET GET) (GET-SETF-EXPANSION (QUOTE (MY-CAR X))) (VALUES (AND (LISTP TEMPS) (NOTNOT (EVERY (FUNCTION SYMBOLP) TEMPS))) (NOTNOT (LISTP VALS)) (AND (LISTP STORES) (= (LENGTH STORES) 1) (NOTNOT (EVERY (FUNCTION SYMBOLP) STORES))) (EQUALT GET (SYSTEM.INTERNALS::BACKQUOTE (MY-CAR (SYSTEM.INTERNALS::BQ-COMMA (SECOND (SECOND SET)))))))) T T T T)
;; Loading (DEFTEST DEFINE-SETF-EXPANDER.4 (LET ((A (LIST (LIST 1)))) (VALUES (COPY-TREE A) (MY-CAR (MY-CAR A)) (SETF (MY-CAR (MY-CAR A)) 2) A)) ((1)) 1 2 ((2)))
;; Loading (DEFUN MY-ASSOC (KEY ALIST) (LOOP FOR PAIR IN ALIST WHEN (AND (CONSP PAIR) (EQL KEY (CAR PAIR))) RETURN PAIR))
;; Loading (IGNORE-ERRORS (DEFINE-SETF-EXPANDER MY-ASSOC (KEY PLACE &ENVIRONMENT ENV) (MULTIPLE-VALUE-BIND (TEMPS VALS STORES SET-FORM GET-FORM) (GET-SETF-EXPANSION PLACE ENV) (LET ((STORE (GENSYM)) (KEY-TEMP (GENSYM)) (PAIR-TEMP (GENSYM)) (PLACE-TEMP (GENSYM))) (RETURN-FROM MY-ASSOC (VALUES (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN TEMPS) (SYSTEM.INTERNALS::BQ-COMMA KEY-TEMP) (SYSTEM.INTERNALS::BQ-COMMA PLACE-TEMP) (SYSTEM.INTERNALS::BQ-COMMA PAIR-TEMP))) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN VALS) (SYSTEM.INTERNALS::BQ-COMMA KEY) (SYSTEM.INTERNALS::BQ-COMMA GET-FORM) (MY-ASSOC (SYSTEM.INTERNALS::BQ-COMMA KEY-TEMP) (SYSTEM.INTERNALS::BQ-COMMA PLACE-TEMP)))) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA STORE))) (SYSTEM.INTERNALS::BACKQUOTE (IF (NULL (SYSTEM.INTERNALS::BQ-COMMA PAIR-TEMP)) (LET (((SYSTEM.INTERNALS::BQ-COMMA (CAR STORES)) (CONS (CONS (SYSTEM.INTERNALS::BQ-COMMA KEY-TEMP) (SYSTEM.INTERNALS::BQ-COMMA STORE)) (SYSTEM.INTERNALS::BQ-COMMA PLACE-TEMP)))) (SYSTEM.INTERNALS::BQ-COMMA SET-FORM) (SYSTEM.INTERNALS::BQ-COMMA STORE)) (SETF (CDR (SYSTEM.INTERNALS::BQ-COMMA PAIR-TEMP)) (SYSTEM.INTERNALS::BQ-COMMA STORE)))) (SYSTEM.INTERNALS::BACKQUOTE (CDR (SYSTEM.INTERNALS::BQ-COMMA PAIR-TEMP)))))))))
;; Loading (DEFTEST DEFINE-SETF-EXPANDER.5 (LET ((X NIL)) (VALUES (COPY-TREE X) (SETF (MY-ASSOC (QUOTE FOO) X) 1) (COPY-TREE X) (SETF (MY-ASSOC (QUOTE FOO) X) 2) (COPY-TREE X) (SETF (MY-ASSOC (QUOTE BAR) X) 3) (COPY-TREE X))) NIL 1 ((FOO . 1)) 2 ((FOO . 2)) 3 ((BAR . 3) (FOO . 2)))
;; Loading (DEFTEST DEFINE-SETF-EXPANDER.6 (LET ((N (GENSYM)) (DOC "D-S-EX.6")) (ASSERT (NULL (DOCUMENTATION N (QUOTE SETF)))) (ASSERT (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-SETF-EXPANDER (SYSTEM.INTERNALS::BQ-COMMA N) NIL (SYSTEM.INTERNALS::BQ-COMMA DOC) (VALUES NIL NIL NIL NIL NIL)))) N)) (OR (DOCUMENTATION N (QUOTE SETF)) DOC)) "D-S-EX.6")
;; Loading (DEFTEST DEFINE-SETF-EXPANDER.7 (LET ((N (GENSYM)) (DOC "D-S-EX.7")) (ASSERT (NULL (DOCUMENTATION N (QUOTE SETF)))) (ASSERT (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-SETF-EXPANDER (SYSTEM.INTERNALS::BQ-COMMA N) NIL (VALUES NIL NIL NIL NIL NIL)))) N)) (ASSERT (NULL (DOCUMENTATION N (QUOTE SETF)))) (VALUES (SETF (DOCUMENTATION N (QUOTE SETF)) DOC) (OR (DOCUMENTATION N (QUOTE SETF)) DOC))) "D-S-EX.7" "D-S-EX.7")
;; Loading (LOAD "and.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/and.lsp 80FA9EA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST AND.1 (AND) T)
;; Loading (DEFTEST AND.2 (AND NIL) NIL)
;; Loading (DEFTEST AND.3 (AND (QUOTE A)) A)
;; Loading (DEFTEST AND.4 (AND (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) A B C)
;; Loading (DEFTEST AND.5 (AND (VALUES)))
;; Loading (DEFTEST AND.6 (AND (VALUES T NIL) (QUOTE A)) A)
;; Loading (DEFTEST AND.7 (AND NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) NIL)
;; Loading (DEFTEST AND.8 (AND (VALUES 1 NIL) (VALUES NIL 2)) NIL 2)
;; Loading (DEFTEST AND.9 (AND (VALUES NIL T) T) NIL)
;; Loading (DEFTEST AND.10 (MACROLET ((%M (Z) Z)) (AND (EXPAND-IN-CURRENT-ENV (%M :A)) (EXPAND-IN-CURRENT-ENV (%M :B)) (EXPAND-IN-CURRENT-ENV (%M :C)))) :C)
;; Loading (DEFTEST AND.ORDER.1 (LET ((X 0)) (VALUES (AND NIL (INCF X)) X)) NIL 0)
;; Loading (DEFTEST AND.ORDER.2 (LET ((I 0) A B C D) (VALUES (AND (SETF A (INCF I)) (SETF B (INCF I)) (SETF C (INCF I)) (SETF D (INCF I))) I A B C D)) 4 4 1 2 3 4)
;; Loading (DEFTEST AND.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE AND))) PROGRAM-ERROR) T)
;; Loading (DEFTEST AND.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE AND)) (QUOTE (AND))) PROGRAM-ERROR) T)
;; Loading (DEFTEST AND.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE AND)) (QUOTE (AND)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "apply.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/apply.lsp 81011CA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST APPLY.ERROR.1 (SIGNALS-ERROR (APPLY) PROGRAM-ERROR) T)
;; Loading (DEFTEST APPLY.ERROR.2 (SIGNALS-ERROR (APPLY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST APPLY.ERROR.3 (SIGNALS-ERROR (APPLY (FUNCTION CONS) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST APPLY.ERROR.4 (SIGNALS-ERROR (APPLY (FUNCTION CONS) (LIST 1 2 3)) PROGRAM-ERROR) T)
;; Loading (DEFTEST APPLY.1 (APPLY (FUNCTION CONS) (QUOTE A) (QUOTE B) NIL) (A . B))
;; Loading (DEFTEST APPLY.2 (APPLY (FUNCTION CONS) (QUOTE A) (QUOTE (B))) (A . B))
;; Loading (DEFTEST APPLY.3 (APPLY (FUNCTION CONS) (QUOTE (A B))) (A . B))
;; Loading (DEFTEST APPLY.4 (LET ((ZEROS (MAKE-LIST (MIN 10000 (1- CALL-ARGUMENTS-LIMIT)) :INITIAL-ELEMENT 1))) (APPLY (FUNCTION +) ZEROS)) 499)
;; Loading (DEFTEST APPLY.5 (APPLY (QUOTE CONS) (QUOTE (A B))) (A . B))
;; Loading (DEFTEST APPLY.6 (MACROLET ((%M (Z) Z)) (APPLY (EXPAND-IN-CURRENT-ENV (%M (QUOTE CONS))) 1 2 NIL)) (1 . 2))
;; Loading (DEFTEST APPLY.7 (MACROLET ((%M (Z) Z)) (APPLY (FUNCTION CONS) (EXPAND-IN-CURRENT-ENV (%M 1)) (QUOTE (2)))) (1 . 2))
;; Loading (DEFTEST APPLY.8 (MACROLET ((%M (Z) Z)) (APPLY (FUNCTION CONS) (EXPAND-IN-CURRENT-ENV (%M (QUOTE (1 2)))))) (1 . 2))
;; Loading (DEFTEST APPLY.ORDER.1 (LET ((I 0) X Y Z) (VALUES (APPLY (PROGN (SETF X (INCF I)) (FUNCTION LIST)) (PROGN (SETF Y (INCF I)) (QUOTE B)) (PROGN (SETF Z (INCF I)) (LIST (QUOTE A)))) I X Y Z)) (B A) 3 1 2 3)
;; Loading (LOAD "block.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/block.lsp 8107EED7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BLOCK.1 (BLOCK FOO (RETURN-FROM FOO 1)) 1)
;; Loading (DEFTEST BLOCK.2 (BLOCK NIL (BLOCK FOO (RETURN (QUOTE GOOD))) (QUOTE BAD)) GOOD)
;; Loading (DEFTEST BLOCK.3 (BLOCK DONE (FLET ((%F (X) (RETURN-FROM DONE X))) (%F (QUOTE GOOD))) (QUOTE BAD)) GOOD)
;; Loading (DEFTEST BLOCK.4 (BLOCK FOO (BLOCK FOO (RETURN-FROM FOO (QUOTE BAD))) (QUOTE GOOD)) GOOD)
;; Loading (DEFTEST BLOCK.5 (BLOCK DONE (FLET ((%F (X) (RETURN-FROM DONE X))) (MAPCAR (FUNCTION %F) (QUOTE (GOOD BAD BAD)))) (QUOTE BAD)) GOOD)
;; Loading (DEFTEST BLOCK.6 (BLOCK B1 (RETURN-FROM B1 (VALUES)) 1))
;; Loading (DEFTEST BLOCK.7 (BLOCK B1 (RETURN-FROM B1 (VALUES 1 2 3 4)) 1) 1 2 3 4)
;; Loading (DEFTEST BLOCK.8 (BLOCK FOO) NIL)
;; Loading (DEFTEST BLOCK.9 (BLOCK FOO (VALUES (QUOTE A) (QUOTE B)) (VALUES (QUOTE C) (QUOTE D))) C D)
;; Loading (DEFTEST BLOCK.10 (BLOCK DONE (FLET ((%F (X) (RETURN-FROM DONE X))) (BLOCK DONE (MAPCAR (FUNCTION %F) (QUOTE (GOOD BAD BAD))))) (QUOTE BAD)) GOOD)
;; Loading (DEFTEST BLOCK.11 (BLOCK DONE (TAGBODY (BLOCK NIL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST BLOCK.12 (MACROLET ((%M (Z) Z)) (BLOCK FOO (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (LOAD "call-arguments-limit.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/call-arguments-limit.lsp 810E53F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CALL-ARGUMENTS-LIMIT.1 (NOTNOT-MV (CONSTANTP (QUOTE CALL-ARGUMENTS-LIMIT))) T)
;; Loading (DEFTEST CALL-ARGUMENTS-LIMIT.2 (NOTNOT-MV (TYPEP CALL-ARGUMENTS-LIMIT (QUOTE INTEGER))) T)
;; Loading (DEFTEST CALL-ARGUMENTS-LIMIT.3 (< CALL-ARGUMENTS-LIMIT 50) NIL)
;; Loading (DEFTEST CALL-ARGUMENTS-LIMIT.4 (LET* ((M (MIN 65536 (1- CALL-ARGUMENTS-LIMIT))) (ARGS (MAKE-LIST M :INITIAL-ELEMENT (QUOTE A)))) (EQUALT (APPLY (FUNCTION LIST) ARGS) ARGS)) T)
;; Loading (DEFTEST CALL-ARGUMENTS-LIMIT.5 (< CALL-ARGUMENTS-LIMIT LAMBDA-PARAMETERS-LIMIT) NIL)
;; Loading (LOAD "case.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/case.lsp 8111E027>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CASE.1 (CASE (QUOTE A)) NIL)
;; Loading (DEFTEST CASE.2 (CASE 10 (10 (QUOTE A))) A)
;; Loading (DEFTEST CASE.3 (CASE (COPY-SEQ "abc") ("abc" (QUOTE A))) NIL)
;; Loading (DEFTEST CASE.4 (CASE (QUOTE Z) ((A B C) 1) ((D E) 2) ((F Z G) 3) (T 4)) 3)
;; Loading (DEFTEST CASE.5 (CASE (1+ MOST-POSITIVE-FIXNUM) (1152921504606846976 (QUOTE A))) A)
;; Loading (DEFTEST CASE.6 (CASE NIL (NIL (QUOTE A)) (T (QUOTE B))) B)
;; Loading (DEFTEST CASE.7 (CASE NIL ((NIL) (QUOTE A)) (T (QUOTE B))) A)
;; Loading (DEFTEST CASE.8 (CASE (QUOTE A) (B 0) (A (VALUES 1 2 3)) (T NIL)) 1 2 3)
;; Loading (DEFTEST CASE.9 (CASE (QUOTE C) (B 0) (A (VALUES 1 2 3)) (T (VALUES (QUOTE X) (QUOTE Y) (QUOTE Z)))) X Y Z)
;; Loading (DEFTEST CASE.10 (CASE (QUOTE Z) (B 1) (A 2) (Z (VALUES)) (T NIL)))
;; Loading (DEFTEST CASE.11 (CASE (QUOTE Z) (B 1) (A 2) (T (VALUES))))
;; Loading (DEFTEST CASE.12 (CASE T (A 10)) NIL)
;; Loading (DEFTEST CASE.13 (CASE T ((T) 10) (T 20)) 10)
;; Loading (DEFTEST CASE.14 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CASE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (((SYSTEM.INTERNALS::BQ-COMMA X)) 1) (T 2))))) 1)
;; Loading (DEFTEST CASE.15 (CASE (QUOTE OTHERWISE) ((T) 10)) NIL)
;; Loading (DEFTEST CASE.16 (CASE T ((OTHERWISE) 10)) NIL)
;; Loading (DEFTEST CASE.17 (CASE (QUOTE A) (B 0) (C 1) (OTHERWISE 2)) 2)
;; Loading (DEFTEST CASE.18 (CASE (QUOTE A) (B 0) (C 1) ((OTHERWISE) 2)) NIL)
;; Loading (DEFTEST CASE.19 (CASE (QUOTE A) (B 0) (C 1) ((T) 2)) NIL)
;; Loading (DEFTEST CASE.20 (CASE #\a ((#\b #\c) 10) ((#\d #\e #\A) 20) (NIL 30) ((#\z #\a #\y) 40)) 40)
;; Loading (DEFTEST CASE.21 (CASE 1 (1 (VALUES))))
;; Loading (DEFTEST CASE.22 (CASE 2 (T (VALUES))))
;; Loading (DEFTEST CASE.23 (CASE 1 (1 (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) A B C)
;; Loading (DEFTEST CASE.24 (CASE 2 (T (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) A B C)
;; Loading (DEFTEST CASE.25 (LET ((X 0)) (VALUES (CASE (PROGN (INCF X) (QUOTE C)) (A 1) (B 2) (C 3) (T 4)) X)) 3 1)
;; Loading (DEFTEST CASE.26 (CASE (QUOTE B) ((A B C) 10) (B 20)) 10)
;; Loading (DEFTEST CASE.27 (CASE (QUOTE B) (B 20) ((A B C) 10)) 20)
;; Loading (DEFTEST CASE.28 (CASE (QUOTE B) (B 20) (B 10) (T 0)) 20)
;; Loading (DEFTEST CASE.29 (LET ((X NIL)) (VALUES (CASE 2 (1 (SETQ X (QUOTE A)) (QUOTE W)) (2 (SETQ X (QUOTE B)) (QUOTE Y)) (T (SETQ X (QUOTE C)) (QUOTE Z))) X)) Y B)
;; Loading (DEFTEST CASE.30 (LET ((X NIL)) (VALUES (CASE 10 (1 (SETQ X (QUOTE A)) (QUOTE W)) (2 (SETQ X (QUOTE B)) (QUOTE Y)) (T (SETQ X (QUOTE C)) (QUOTE Z))) X)) Z C)
;; Loading (DEFTEST CASE.31 (CASE (VALUES (QUOTE B) (QUOTE C)) (C 0) ((A B) 10) (T 20)) 10)
;; Loading (DEFTEST CASE.32 (CASE (QUOTE A) (A) (T (QUOTE B))) NIL)
;; Loading (DEFTEST CASE.33 (CASE (QUOTE A) (B (QUOTE B)) (T)) NIL)
;; Loading (DEFTEST CASE.34 (CASE (QUOTE A) (B (QUOTE B)) (OTHERWISE)) NIL)
;; Loading (DEFTEST CASE.35 (BLOCK DONE (TAGBODY (CASE (QUOTE A) (A (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD)))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST CASE.36 (BLOCK DONE (TAGBODY (CASE (QUOTE B) (A (QUOTE BAD)) (OTHERWISE (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD)))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST CASE.37 (MACROLET ((%M (Z) Z)) (CASE (EXPAND-IN-CURRENT-ENV (%M :B)) (:A :BAD1) (:B :GOOD) (:C :BAD2) (T :BAD3))) :GOOD)
;; Loading (DEFTEST CASE.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CASE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST CASE.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CASE)) (QUOTE (CASE T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST CASE.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CASE)) (QUOTE (CASE T)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "catch.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/catch.lsp 812179D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CATCH.1 (CATCH (QUOTE FOO)) NIL)
;; Loading (DEFTEST CATCH.2 (CATCH (QUOTE FOO) (QUOTE A)) A)
;; Loading (DEFTEST CATCH.3 (CATCH (QUOTE FOO) (VALUES)))
;; Loading (DEFTEST CATCH.4 (CATCH (QUOTE FOO) (VALUES 1 2 3)) 1 2 3)
;; Loading (DEFTEST CATCH.5 (CATCH (QUOTE FOO) (QUOTE A) (THROW (QUOTE FOO) (QUOTE B)) (QUOTE C)) B)
;; Loading (DEFTEST CATCH.7 (CATCH (QUOTE FOO) (QUOTE A) (THROW (QUOTE FOO) (VALUES)) (QUOTE C)))
;; Loading (DEFTEST CATCH.8 (CATCH (QUOTE FOO) (QUOTE A) (THROW (QUOTE FOO) (VALUES 1 2 3)) (QUOTE C)) 1 2 3)
;; Loading (DEFTEST CATCH.9 (LET ((I 0)) (CATCH (PROGN (INCF I) (QUOTE FOO)) (ASSERT (EQL I 1)) (THROW (PROGN (INCF I 2) (QUOTE FOO)) I))) 3)
;; Loading (DEFTEST CATCH.10 (FLET ((%F (X) (THROW (QUOTE FOO) X))) (CATCH (QUOTE FOO) (%F (QUOTE GOOD)) (QUOTE BAD))) GOOD)
;; Loading (DEFUN CATCH.11-FN (X) (THROW (QUOTE FOO) X))
;; Loading (DEFTEST CATCH.11 (CATCH (QUOTE FOO) (CATCH.11-FN (QUOTE GOOD)) (QUOTE BAD)) GOOD)
;; Loading (DEFTEST CATCH.12 (LABELS ((%F (X) (THROW (QUOTE FOO) X))) (CATCH (QUOTE FOO) (%F (QUOTE GOOD)) (QUOTE BAD))) GOOD)
;; Loading (DEFTEST CATCH.13 (BLOCK DONE (TAGBODY (CATCH (QUOTE FOO) (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST CATCH.14 (MACROLET ((%M (Z) Z)) (CATCH (QUOTE FOO) (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (DEFTEST CATCH.15 (MACROLET ((%M (Z) Z)) (CATCH (QUOTE FOO) (THROW (EXPAND-IN-CURRENT-ENV (%M (QUOTE FOO))) :GOOD) :BAD)) :GOOD)
;; Loading (DEFTEST CATCH.16 (MACROLET ((%M (Z) Z)) (CATCH (QUOTE FOO) (THROW (QUOTE FOO) (EXPAND-IN-CURRENT-ENV (%M :GOOD))) :BAD)) :GOOD)
;; Loading (DEFTEST THROW-ERROR (SIGNALS-ERROR (THROW (GENSYM) NIL) CONTROL-ERROR) T)
;; Loading (LOAD "ccase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ccase.lsp C0AA9647>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CCASE.1 (LET ((X (QUOTE B))) (CCASE X (A 1) (B 2) (C 3))) 2)
;; Loading (DEFTEST CCASE.2 (SIGNALS-TYPE-ERROR X 1 (CCASE X)) T)
;; Loading (DEFTEST CCASE.3 (SIGNALS-TYPE-ERROR X 1 (CCASE X (A 1) (B 2) (C 3))) T)
;; Loading (DEFTEST CCASE.4 (SIGNALS-TYPE-ERROR X 1 (CCASE X (T NIL))) T)
;; Loading (DEFTEST CCASE.5 (SIGNALS-TYPE-ERROR X 1 (CCASE X (OTHERWISE NIL))) T)
;; Loading (DEFTEST CCASE.6 (LET ((X (QUOTE B))) (CCASE X ((A Z) 1) ((Y B W) 2) ((B C) 3))) 2)
;; Loading (DEFTEST CCASE.7 (LET ((X (QUOTE Z))) (CCASE X ((A B C) 1) ((D E) 2) ((F Z G) 3))) 3)
;; Loading (DEFTEST CCASE.8 (LET ((X (1+ MOST-POSITIVE-FIXNUM))) (CCASE X (1152921504606846976 (QUOTE A)))) A)
;; Loading (DEFTEST CCASE.9 (SIGNALS-TYPE-ERROR X NIL (CCASE X (NIL (QUOTE A)))) T)
;; Loading (DEFTEST CCASE.10 (LET (X) (CCASE X ((NIL) (QUOTE A)))) A)
;; Loading (DEFTEST CCASE.11 (LET ((X (QUOTE A))) (CCASE X (B 0) (A (VALUES 1 2 3)) (C NIL))) 1 2 3)
;; Loading (DEFTEST CCASE.12 (SIGNALS-TYPE-ERROR X T (CCASE X (A 10))) T)
;; Loading (DEFTEST CCASE.13 (LET ((X T)) (CCASE X ((T) 10) (T 20))) 10)
;; Loading (DEFTEST CCASE.14 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((Y (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)))) (CCASE Y (((SYSTEM.INTERNALS::BQ-COMMA X)) 1) (A 2)))))) 1)
;; Loading (DEFTEST CCASE.15 (SIGNALS-TYPE-ERROR X (QUOTE OTHERWISE) (CCASE X ((T) 10))) T)
;; Loading (DEFTEST CCASE.16 (SIGNALS-TYPE-ERROR X T (CCASE X ((OTHERWISE) 10))) T)
;; Loading (DEFTEST CCASE.17 (SIGNALS-TYPE-ERROR X (QUOTE A) (CCASE X (B 0) (C 1) (OTHERWISE 2))) T)
;; Loading (DEFTEST CCASE.19 (SIGNALS-TYPE-ERROR X (QUOTE A) (CCASE X (B 0) (C 1) ((T) 2))) T)
;; Loading (DEFTEST CCASE.20 (LET ((X #\a)) (CCASE X ((#\b #\c) 10) ((#\d #\e #\A) 20) (NIL 30) ((#\z #\a #\y) 40))) 40)
;; Loading (DEFTEST CCASE.21 (LET ((X 1)) (CCASE X (1 (VALUES)) (2 (QUOTE A)))))
;; Loading (DEFTEST CCASE.23 (LET ((X 1)) (CCASE X (1 (VALUES (QUOTE A) (QUOTE B) (QUOTE C))))) A B C)
;; Loading (DEFTEST CCASE.25 (LET ((A (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (I 1)) (VALUES (CCASE (AREF A (INCF I)) (A 1) (B 2) (C 3) (D 4)) I)) 3 2)
;; Loading (DEFTEST CCASE.26 (LET ((X (QUOTE B))) (CCASE X ((A B C) 10) (B 20))) 10)
;; Loading (DEFTEST CCASE.27 (LET ((X (QUOTE B))) (CCASE X (B 20) ((A B C) 10))) 20)
;; Loading (DEFTEST CCASE.28 (LET ((X (QUOTE B))) (CCASE X (B 20) (B 10) (D 0))) 20)
;; Loading (DEFTEST CCASE.29 (LET ((X NIL) (Y 2)) (VALUES (CCASE Y (1 (SETQ X (QUOTE A)) (QUOTE W)) (2 (SETQ X (QUOTE B)) (QUOTE Y)) (3 (SETQ X (QUOTE C)) (QUOTE Z))) X)) Y B)
;; Loading (DEFTEST CCASE.30 (LET ((X (QUOTE A))) (CCASE X (A))) NIL)
;; Loading (DEFTEST CCASE.31 (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (STORE-VALUE 7 C))))) (LET ((X 0)) (CCASE X (1 :BAD) (7 :GOOD) (2 NIL)))) :GOOD)
;; Loading (DEFTEST CCASE.32 (BLOCK DONE (TAGBODY (LET ((X (QUOTE A))) (CCASE X (A (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST CCASE.33 (LET ((X :B)) (MACROLET ((%M (Z) Z)) (CCASE (EXPAND-IN-CURRENT-ENV (%M X)) (:A :BAD1) (:B :GOOD) (:C :BAD2)))) :GOOD)
;; Loading (DEFTEST CCASE.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST CCASE.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST CCASE.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "compiled-function-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/compiled-function-p.lsp C0BC9EF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COMPILED-FUNCTION-P.1 (CHECK-TYPE-PREDICATE (FUNCTION COMPILED-FUNCTION-P) (QUOTE COMPILED-FUNCTION)) NIL)
;; Loading (DEFTEST COMPILED-FUNCTION-P.2 (COMPILED-FUNCTION-P (QUOTE (LAMBDA (X Y) (CONS Y X)))) NIL)
;; Loading (DEFTEST COMPILED-FUNCTION-P.3 (NOTNOT-MV (COMPILED-FUNCTION-P (COMPILE NIL (QUOTE (LAMBDA (Y X) (CONS X Y)))))) T)
;; Loading (DEFTEST COMPILED-FUNCTION-P.ORDER.1 (LET ((I 0)) (VALUES (COMPILED-FUNCTION-P (PROGN (INCF I) (QUOTE (LAMBDA NIL NIL)))) I)) NIL 1)
;; Loading (DEFTEST COMPILED-FUNCTION-P.ERROR.1 (SIGNALS-ERROR (COMPILED-FUNCTION-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPILED-FUNCTION-P.ERROR.2 (SIGNALS-ERROR (COMPILED-FUNCTION-P NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "complement.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/complement.lsp C0C0B1A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COMPLEMENT.1 (NOTNOT-MV (FUNCALL (COMPLEMENT (FUNCTION IDENTITY)) NIL)) T)
;; Loading (DEFTEST COMPLEMENT.2 (FUNCALL (COMPLEMENT (FUNCTION IDENTITY)) T) NIL)
;; Loading (DEFTEST COMPLEMENT.3 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (EQL (FUNCALL (COMPLEMENT (FUNCTION NOT)) X) (NOT (NOT X)))))) NIL)
;; Loading (DEFTEST COMPLEMENT.4 (LET ((X (QUOTE (#\b)))) (LOOP FOR I FROM 2 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) ALWAYS (PROGN (PUSH #\a X) (APPLY (COMPLEMENT (FUNCTION CHAR=)) X)))) T)
;; Loading (DEFTEST COMPLEMENT.5 (NOTNOT-MV (COMPLEMENT (FUNCTION IDENTITY))) T)
;; Loading (DEFTEST COMPLEMENT.6 (FLET ((%F (&REST ARGS) (NOTNOT (EVENP (LENGTH ARGS))))) (LET ((CF (COMPLEMENT (FUNCTION %F)))) (VALUES (%F) (%F (QUOTE A)) (%F (QUOTE A) (QUOTE B)) (%F (QUOTE A) (QUOTE B) (QUOTE C)) (FUNCALL CF) (FUNCALL CF (QUOTE A)) (FUNCALL CF (QUOTE A) (QUOTE B)) (FUNCALL CF (QUOTE A) (QUOTE B) (QUOTE C))))) T NIL T NIL NIL T NIL T)
;; Loading (DEFTEST COMPLEMENT.7 (FLET ((%F (&OPTIONAL X Y) (IF X (NOT Y) Y))) (LET ((CF (COMPLEMENT (FUNCTION %F)))) (VALUES (%F) (%F NIL) (%F T) (%F NIL NIL) (%F T NIL) (%F NIL T) (%F T T) (FUNCALL CF) (FUNCALL CF NIL) (FUNCALL CF T) (FUNCALL CF NIL NIL) (FUNCALL CF T NIL) (FUNCALL CF NIL T) (FUNCALL CF T T)))) NIL NIL T NIL T T NIL T T NIL T NIL NIL T)
;; Loading (DEFTEST COMPLEMENT.8 (FLET ((%F (&KEY X Y) (IF X (NOT Y) Y))) (LET ((CF (COMPLEMENT (FUNCTION %F)))) (VALUES (LIST (%F) (%F :X NIL) (%F :X T) (%F :Y NIL) (%F :Y T :Y NIL) (%F :X NIL :Y NIL) (%F :X T :Y NIL) (%F :Y T :X NIL) (%F :X T :Y T)) (LIST (FUNCALL CF) (FUNCALL CF :X NIL) (FUNCALL CF :X T) (FUNCALL CF :Y NIL) (FUNCALL CF :Y T) (FUNCALL CF :X NIL :Y NIL) (FUNCALL CF :X T :Y NIL) (FUNCALL CF :Y T :X NIL) (FUNCALL CF :X T :Y T :X NIL)) (LIST (FUNCALL CF :X NIL :Y T :FOO NIL :ALLOW-OTHER-KEYS T) (FUNCALL CF :X NIL :Y T :ALLOW-OTHER-KEYS NIL))))) (NIL NIL T NIL T NIL T T NIL) (T T NIL T NIL T NIL NIL T) (NIL NIL))
;; Loading (DEFTEST COMPLEMENT.9 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X INTEGER) (Y INTEGER)) (EVENP (+ X Y))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) (Y T)) NIL))) (LET ((CF (COMPLEMENT (SYMBOL-FUNCTION SYM)))) (VALUES (FUNCALL CF (QUOTE A) (QUOTE B)) (FUNCALL CF 0 0) (FUNCALL CF 0 1) (FUNCALL CF 1 0) (FUNCALL CF 1 1)))) T NIL T T NIL)
;; Loading (DEFTEST COMPLEMENT.10 (LET ((CF (COMPLEMENT (COMPILE NIL (QUOTE (LAMBDA (X Y) (EVENP (+ X Y)))))))) (VALUES (FUNCALL CF 0 0) (FUNCALL CF 0 1) (FUNCALL CF 1 0) (FUNCALL CF 1 1))) NIL T T NIL)
;; Loading (DEFTEST COMPLEMENT.ORDER.1 (LET ((I 0)) (LET ((FN (COMPLEMENT (PROGN (INCF I) (FUNCTION NULL))))) (VALUES I (MAPCAR FN (QUOTE (A B NIL C 1 NIL T NIL))) I))) 1 (T T NIL T T NIL T NIL) 1)
;; Loading (DEFTEST COMPLEMENT.ERROR.1 (SIGNALS-ERROR (COMPLEMENT) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEMENT.ERROR.2 (SIGNALS-ERROR (COMPLEMENT (FUNCTION NOT) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEMENT.ERROR.3 (SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION IDENTITY))) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEMENT.ERROR.4 (SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION IDENTITY)) T T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEMENT.ERROR.5 (SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :FOO T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEMENT.ERROR.6 (SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEMENT.ERROR.7 (SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (X &REST Y) (AND X (EVENP (LENGTH Y))))))) PROGRAM-ERROR) T)
;; Loading (LOAD "cond.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cond.lsp C0CFA047>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COND.1 (COND) NIL)
;; Loading (DEFTEST COND.2 (COND ((QUOTE A))) A)
;; Loading (DEFTEST COND.3 (COND (NIL)) NIL)
;; Loading (DEFTEST COND.4 (COND (NIL (QUOTE A)) (NIL (QUOTE B))) NIL)
;; Loading (DEFTEST COND.5 (COND (NIL (QUOTE A)) ((QUOTE B))) B)
;; Loading (DEFTEST COND.6 (COND (T (QUOTE A)) (T (QUOTE B))) A)
;; Loading (DEFTEST COND.7 (LET ((X 0)) (VALUES (COND ((PROGN (INCF X) NIL) (QUOTE A)) (T (QUOTE B)) ((INCF X) (QUOTE C))) X)) B 1)
;; Loading (DEFTEST COND.8 (LET ((X 0)) (VALUES (COND (NIL (INCF X) (QUOTE A)) (NIL (INCF X 10) (QUOTE B)) (T (INCF X 2) (QUOTE C)) (T (INCF X 100) (QUOTE D))) X)) C 2)
;; Loading (DEFTEST COND.9 (COND ((VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) A)
;; Loading (DEFTEST COND.10 (COND (T (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) A B C)
;; Loading (DEFTEST COND.11 (COND ((VALUES NIL T) (QUOTE A)) (T (QUOTE B))) B)
;; Loading (DEFTEST COND.12 (COND ((VALUES))) NIL)
;; Loading (DEFTEST COND.13 (COND ((VALUES)) (T (QUOTE A))) A)
;; Loading (DEFTEST COND.14 (COND (T (VALUES))))
;; Loading (DEFTEST COND.15 (BLOCK DONE (TAGBODY (COND (T (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD)))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST COND.16 (MACROLET ((%M (Z) Z)) (COND ((EXPAND-IN-CURRENT-ENV (%M NIL)) :BAD) (T :GOOD))) :GOOD)
;; Loading (DEFTEST COND.17 (MACROLET ((%M (Z) Z)) (COND (NIL :BAD1) ((EXPAND-IN-CURRENT-ENV (%M :GOOD))) (T :BAD2))) :GOOD)
;; Loading (DEFTEST COND.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE COND))) PROGRAM-ERROR) T)
;; Loading (DEFTEST COND.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE COND)) (QUOTE (COND))) PROGRAM-ERROR) T)
;; Loading (DEFTEST COND.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE COND)) (QUOTE (COND)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "constantly.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/constantly.lsp C0D802A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CONSTANTLY.1 (LET ((FN (CONSTANTLY 10)) (X NIL)) (LOOP FOR I FROM 0 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) ALWAYS (PROG1 (EQL (APPLY FN X) 10) (PUSH (QUOTE A) X)))) T)
;; Loading (DEFTEST CONSTANTLY.2 (NOTNOT-MV (CONSTANTLY 1)) T)
;; Loading (DEFTEST CONSTANTLY.3 (LET ((I 0)) (LET ((FN (CONSTANTLY (PROGN (INCF I) (QUOTE A))))) (VALUES I (MAPCAR FN (QUOTE (1 2 3 4))) I))) 1 (A A A A) 1)
;; Loading (DEFTEST CONSTANTLY.ERROR.1 (SIGNALS-ERROR (CONSTANTLY) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONSTANTLY.ERROR.2 (SIGNALS-ERROR (CONSTANTLY 1 1) PROGRAM-ERROR) T)
;; Loading (LOAD "ctypecase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ctypecase.lsp C0DC08E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CTYPECASE.1 (LET ((X 1)) (CTYPECASE X (INTEGER (QUOTE A)) (T (QUOTE B)))) A)
;; Loading (DEFTEST CTYPECASE.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (CTYPECASE X (SYMBOL (QUOTE A))))) (FUNCTION SYMBOLP)) NIL)
;; Loading (DEFTEST CTYPECASE.3 (LET ((X 1)) (CTYPECASE X (SYMBOL (QUOTE A)) (T (QUOTE B)))) B)
;; Loading (DEFTEST CTYPECASE.4 (LET ((X 1)) (CTYPECASE X (T (VALUES)))))
;; Loading (DEFTEST CTYPECASE.5 (LET ((X 1)) (CTYPECASE X (INTEGER (VALUES)) (T (QUOTE A)))))
;; Loading (DEFTEST CTYPECASE.6 (LET ((X 1)) (CTYPECASE X (BIT (QUOTE A)) (INTEGER (QUOTE B)))) A)
;; Loading (DEFTEST CTYPECASE.7 (LET ((X 1)) (CTYPECASE X (T (QUOTE A)))) A)
;; Loading (DEFTEST CTYPECASE.8 (LET ((X 1)) (CTYPECASE X (T (VALUES (QUOTE A) (QUOTE B) (QUOTE C))))) A B C)
;; Loading (DEFTEST CTYPECASE.9 (LET ((X 1)) (CTYPECASE X (INTEGER (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) (T NIL))) A B C)
;; Loading (DEFTEST CTYPECASE.10 (LET ((X 0) (Y 1)) (VALUES (CTYPECASE Y (BIT (INCF X) (QUOTE A)) (INTEGER (INCF X 2) (QUOTE B)) (T (INCF X 4) (QUOTE C))) X)) A 1)
;; Loading (DEFTEST CTYPECASE.11 (LET ((X 1)) (CTYPECASE X (INTEGER) (T (QUOTE A)))) NIL)
;; Loading (DEFTEST CTYPECASE.12 (LET ((X 1)) (VALUES (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (ASSERT (EQL (TYPE-ERROR-DATUM C) 1)) (ASSERT (NOT (TYPEP 1 (TYPE-ERROR-EXPECTED-TYPE C)))) (STORE-VALUE (QUOTE A) C))))) (CTYPECASE X (SYMBOL :GOOD) (FLOAT :BAD))) X)) :GOOD A)
;; Loading (DEFTEST CTYPECASE.13 (LET ((X (QUOTE A))) (CTYPECASE X (NUMBER (QUOTE BAD)) (#<Standard-Class SYMBOL C0310387> (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST CTYPECASE.14 (BLOCK DONE (TAGBODY (LET ((X (QUOTE A))) (CTYPECASE X (SYMBOL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST CTYPECASE.15 (MACROLET ((%M (Z) Z)) (CTYPECASE (EXPAND-IN-CURRENT-ENV (%M :FOO)) (INTEGER :BAD1) (KEYWORD :GOOD) (SYMBOL :BAD2))) :GOOD)
;; Loading (DEFTEST CTYPECASE.16 (MACROLET ((%M (Z) Z)) (CTYPECASE :FOO (INTEGER (EXPAND-IN-CURRENT-ENV (%M :BAD1))) (KEYWORD (EXPAND-IN-CURRENT-ENV (%M :GOOD))) (SYMBOL (EXPAND-IN-CURRENT-ENV (%M :BAD2))))) :GOOD)
;; Loading (DEFTEST CTYPECASE.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST CTYPECASE.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST CTYPECASE.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "defconstant.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defconstant.lsp C0E76797>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCONSTANT TEST-CONSTANT-1 17)
;; Loading (DEFTEST DEFCONSTANT.1 (SYMBOL-VALUE (QUOTE TEST-CONSTANT-1)) 17)
;; Loading (DEFTEST DEFCONSTANT.2 (NOTNOT-MV (CONSTANTP (QUOTE TEST-CONSTANT-1))) T)
;; Loading (DEFTEST DEFCONSTANT.3 (DOCUMENTATION (QUOTE TEST-CONSTANT-1) (QUOTE VARIABLE)) NIL)
;; Loading (DEFCONSTANT TEST-CONSTANT-2 (QUOTE A) "This is the documentation.")
;; Loading (DEFTEST DEFCONSTANT.4 (DOCUMENTATION (QUOTE TEST-CONSTANT-2) (QUOTE VARIABLE)) "This is the documentation.")
;; Loading (DEFTEST DEFCONSTANT.5 (DEFCONSTANT TEST-CONSTANT-3 0) TEST-CONSTANT-3)
;; Loading (DEFTEST DEFCONSTANT.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFCONSTANT))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCONSTANT.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFCONSTANT)) (QUOTE (DEFCONSTANT +NONEXISTENT-CONSTANT+ 0))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCONSTANT.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFCONSTANT)) (QUOTE (DEFCONSTANT +NONEXISTENT-CONSTANT+ 0)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "define-modify-macro.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/define-modify-macro.lsp C0ED4777>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DEFINE-MODIFY-MACRO.1 (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO DMM1-APPENDF (&REST ARGS) APPEND "Append lists onto a list"))) (EVAL (QUOTE (LET ((U (QUOTE (P Q R))) V) (LIST (SETQ V U) (DMM1-APPENDF U (QUOTE (A B C D))) (DMM1-APPENDF U NIL) (DMM1-APPENDF U (QUOTE (E F G))) U V))))) DMM1-APPENDF ((P Q R) (P Q R A B C D) (P Q R A B C D) (P Q R A B C D E F G) (P Q R A B C D E F G) (P Q R)))
;; Loading (DEFTEST DEFINE-MODIFY-MACRO.2 (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO NEW-INCF (&OPTIONAL (DELTA 1)) +))) (EVAL (QUOTE (LET ((I 10)) (LIST (NEW-INCF I) (NEW-INCF I 100) I))))) NEW-INCF (11 111 111))
;; Loading (DEFTEST DEFINE-MODIFY-MACRO.3 (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO NEW-INCF1 (&OPTIONAL (DELTA 1)) +))) (EVAL (QUOTE (LET ((A (VECTOR 0 0 0 0 0)) (I 1)) (LIST (NEW-INCF1 (AREF A (INCF I))) A I))))) NEW-INCF1 (1 #(0 0 1 0 0) 2))
;; Loading (DEFTEST DEFINE-MODIFY-MACRO.4 (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO NEW-INCF2 (&OPTIONAL (DELTA 1)) +))) (EVAL (QUOTE (LET ((A (VECTOR 0 0 0 0 0)) (I 1)) (LIST (NEW-INCF2 (AREF A (INCF I)) (INCF I)) A I))))) NEW-INCF2 (3 #(0 0 3 0 0) 3))
;; Loading (DEF-MACRO-TEST DEFINE-MODIFY-MACRO.ERROR.1 (DEFINE-MODIFY-MACRO NONEXISTENT-MODIFY-MACRO NIL FOO))
;; Loading (DEFTEST DEFINE-MODIFY-MACRO.DOCUMENTATION.1 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-MODIFY-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (&OPTIONAL (DELTA 1)) +))) (VALUES (DOCUMENTATION SYM (QUOTE FUNCTION)) (DOCUMENTATION (MACRO-FUNCTION SYM) (QUOTE FUNCTION)) (DOCUMENTATION (MACRO-FUNCTION SYM) T))) NIL NIL NIL)
;; Loading (DEFTEST DEFINE-MODIFY-MACRO.DOCUMENTATION.2 (LET ((SYM (GENSYM)) (DOC "DMM-DOC")) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-MODIFY-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (&OPTIONAL (DELTA 1)) + (SYSTEM.INTERNALS::BQ-COMMA DOC)))) (VALUES (EQUALT DOC (OR (DOCUMENTATION SYM (QUOTE FUNCTION)) DOC)) (EQUALT DOC (OR (DOCUMENTATION (MACRO-FUNCTION SYM) (QUOTE FUNCTION)) DOC)) (EQUALT DOC (OR (DOCUMENTATION (MACRO-FUNCTION SYM) T) DOC)))) T T T)
;; Loading (LOAD "defparameter.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defparameter.lsp C0F6F377>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFPARAMETER *DEFPARAMETER-TEST-VAR-1* 100)
;; Loading (DEFTEST DEFPARAMETER.1 *DEFPARAMETER-TEST-VAR-1* 100)
;; Loading (DEFTEST DEFPARAMETER.2 (DOCUMENTATION (QUOTE *DEFPARAMETER-TEST-VAR-1*) (QUOTE VARIABLE)) NIL)
;; Loading (DEFTEST DEFPARAMETER.3 (FLET ((%F NIL *DEFPARAMETER-TEST-VAR-1*)) (LET ((*DEFPARAMETER-TEST-VAR-1* 29)) (%F))) 29)
;; Loading (DEFTEST DEFPARAMETER.4 (VALUES (MAKUNBOUND (QUOTE *DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER *DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE *DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) *DEFPARAMETER-TEST-VAR-2*) *DEFPARAMETER-TEST-VAR-2* *DEFPARAMETER-TEST-VAR-2* "Whatever." 200)
;; Loading (DEFTEST DEFPARAMETER.5 (VALUES (MAKUNBOUND (QUOTE *DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER *DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE *DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) *DEFPARAMETER-TEST-VAR-2* (DEFPARAMETER *DEFPARAMETER-TEST-VAR-2* 300 "And ever.") (DOCUMENTATION (QUOTE *DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) *DEFPARAMETER-TEST-VAR-2*) *DEFPARAMETER-TEST-VAR-2* *DEFPARAMETER-TEST-VAR-2* "Whatever." 200 *DEFPARAMETER-TEST-VAR-2* "And ever." 300)
;; Loading (DEFTEST DEFPARAMETER.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFPARAMETER))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFPARAMETER.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFPARAMETER)) (QUOTE (DEFPARAMETER *NONEXISTENT-VARIABLE* NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFPARAMETER.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFPARAMETER)) (QUOTE (DEFPARAMETER *NONEXISTENT-VARIABLE* NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "defun.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defun.lsp C0FE8EB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN DEFUN-TEST-FUN-1 NIL (RETURN-FROM DEFUN-TEST-FUN-1 (QUOTE GOOD)))
;; Loading (DEFTEST DEFUN.1 (DEFUN-TEST-FUN-1) GOOD)
;; Loading (DEFUN DEFUN-TEST-FUN-2 NIL (RETURN-FROM DEFUN-TEST-FUN-2 (VALUES)))
;; Loading (DEFTEST DEFUN.2 (DEFUN-TEST-FUN-2))
;; Loading (DEFUN DEFUN-TEST-FUN-3 NIL (RETURN-FROM DEFUN-TEST-FUN-3 (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F))))
;; Loading (DEFTEST DEFUN.3 (DEFUN-TEST-FUN-3) A B C D E F)
;; Loading (DEFUN DEFUN-TEST-FUN-4 (X) (CAR X))
;; Loading (DEFTEST DEFUN.4 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (VALUES (SETF (DEFUN-TEST-FUN-4 X) (QUOTE C)) X)) C (C B))
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFUN (SETF DEFUN-TEST-FUN-4) (NEWVAL X) (RETURN-FROM DEFUN-TEST-FUN-4 (SETF (CAR X) NEWVAL))))
;; Loading (DEFTEST DEFUN.5 (LET ((X 1)) (DECLARE (SPECIAL X)) (LET ((X 2)) (DEFUN DEFUN-TEST-FUN-5 (&AUX (Y X)) (DECLARE (SPECIAL X)) (VALUES Y X)) (DEFUN-TEST-FUN-5))) 2 1)
;; Loading (DEFTEST DEFUN.6 (LET ((X 1)) (DECLARE (SPECIAL X)) (LET ((X 2)) (DEFUN DEFUN-TEST-FUN-6 (&OPTIONAL (Y X)) (DECLARE (SPECIAL X)) (VALUES Y X)) (DEFUN-TEST-FUN-6))) 2 1)
;; Loading (DEFTEST DEFUN.7 (LET ((X 1)) (DECLARE (SPECIAL X)) (LET ((X 2)) (DEFUN DEFUN-TEST-FUN-7 (&KEY (Y X)) (DECLARE (SPECIAL X)) (VALUES Y X)) (DEFUN-TEST-FUN-7))) 2 1)
;; Loading (DEFTEST DEFUN.8 (LET* ((SYM (GENSYM)) (DOC "DEFUN.8") (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (SYSTEM.INTERNALS::BQ-COMMA DOC) NIL)))) (OR (DOCUMENTATION SYM (QUOTE FUNCTION)) DOC)) "DEFUN.8")
;; Loading (DEFTEST DEFUN.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFUN))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFUN.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFUN)) (QUOTE (DEFUN NONEXISTENT-FUNCTION NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFUN.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFUN)) (QUOTE (DEFUN NONEXISTENT-FUNCTION NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFUN.ERROR.4 (LET* ((NAME (GENSYM))) (LOOP FOR I BELOW (MIN 100 LAMBDA-PARAMETERS-LIMIT) FOR PARAMS = NIL THEN (CONS (GENSYM) PARAMS) FOR ARGS = NIL THEN (CONS NIL ARGS) FOR EXPECTED = (QUOTE (1 2 3)) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (PROG2 (PROCLAIM (QUOTE (OPTIMIZE (SAFETY 0)))) (DEFUN (SYSTEM.INTERNALS::BQ-COMMA NAME) (SYSTEM.INTERNALS::BQ-COMMA PARAMS) (VALUES (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN EXPECTED))) (PROCLAIM (QUOTE (OPTIMIZE SAFETY)))))) WHEN (COND ((NOT (EQUAL (MULTIPLE-VALUE-LIST (APPLY FN ARGS)) EXPECTED)) (LIST I :FAIL1)) ((NOT (EQUAL (MULTIPLE-VALUE-LIST (APPLY (SYMBOL-FUNCTION FN) ARGS)) EXPECTED)) (LIST I :FAIL2)) ((NOT (EQUAL (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS))))) EXPECTED)) (LIST I :FAIL3)) ((AND (> I 0) (LET ((VAL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDR ARGS))) PROGRAM-ERROR))))) (AND (NOT (EQ VAL T)) :FAIL4)))) ((AND (< I (1- CALL-ARGUMENTS-LIMIT)) (LET ((VAL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA NAME) NIL (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)) PROGRAM-ERROR))))) (AND (NOT (EQ VAL T)) :FAIL5))))) COLLECT IT)) NIL)
;; Loading (LOAD "defvar.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defvar.lsp C10B9017>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFVAR *DEFVAR-TEST-VAR-1* 100)
;; Loading (DEFTEST DEFVAR.1 *DEFVAR-TEST-VAR-1* 100)
;; Loading (DEFTEST DEFVAR.2 (DOCUMENTATION (QUOTE *DEFVAR-TEST-VAR-1*) (QUOTE VARIABLE)) NIL)
;; Loading (DEFTEST DEFVAR.3 (FLET ((%F NIL *DEFVAR-TEST-VAR-1*)) (LET ((*DEFVAR-TEST-VAR-1* 29)) (%F))) 29)
;; Loading (DEFTEST DEFVAR.4 (VALUES (MAKUNBOUND (QUOTE *DEFVAR-TEST-VAR-2*)) (DEFVAR *DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE *DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) *DEFVAR-TEST-VAR-2*) *DEFVAR-TEST-VAR-2* *DEFVAR-TEST-VAR-2* "Whatever." 200)
;; Loading (DEFTEST DEFVAR.5 (LET ((X 0)) (VALUES (MAKUNBOUND (QUOTE *DEFVAR-TEST-VAR-2*)) (DEFVAR *DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE *DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) *DEFVAR-TEST-VAR-2* (DEFVAR *DEFVAR-TEST-VAR-2* (INCF X) "And ever.") (DOCUMENTATION (QUOTE *DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) *DEFVAR-TEST-VAR-2* X)) *DEFVAR-TEST-VAR-2* *DEFVAR-TEST-VAR-2* "Whatever." 200 *DEFVAR-TEST-VAR-2* "And ever." 200 0)
;; Loading (DEFTEST DEFVAR.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFVAR))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFVAR.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFVAR)) (QUOTE (DEFVAR *NONEXISTENT-VARIABLE* NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFVAR.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFVAR)) (QUOTE (DEFVAR *NONEXISTENT-VARIABLE* NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "destructuring-bind.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/destructuring-bind.lsp C1127447>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DESTRUCTURING-BIND.1 (DESTRUCTURING-BIND (X Y Z) (QUOTE (A B C)) (VALUES X Y Z)) A B C)
;; Loading (DEFTEST DESTRUCTURING-BIND.2 (DESTRUCTURING-BIND (X Y &REST Z) (QUOTE (A B C D)) (VALUES X Y Z)) A B (C D))
;; Loading (DEFTEST DESTRUCTURING-BIND.3 (DESTRUCTURING-BIND (X Y &OPTIONAL Z) (QUOTE (A B C)) (VALUES X Y Z)) A B C)
;; Loading (DEFTEST DESTRUCTURING-BIND.4 (DESTRUCTURING-BIND (X Y &OPTIONAL Z) (QUOTE (A B)) (VALUES X Y Z)) A B NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.5 (DESTRUCTURING-BIND (X Y &OPTIONAL (Z (QUOTE W))) (QUOTE (A B)) (VALUES X Y Z)) A B W)
;; Loading (DEFTEST DESTRUCTURING-BIND.6 (DESTRUCTURING-BIND (X Y &OPTIONAL (Z (QUOTE W) Z-P)) (QUOTE (A B)) (VALUES X Y Z Z-P)) A B W NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.7 (DESTRUCTURING-BIND (X Y &OPTIONAL (Z (QUOTE W) Z-P)) (QUOTE (A B C)) (VALUES X Y Z (NOTNOT Z-P))) A B C T)
;; Loading (DEFTEST DESTRUCTURING-BIND.7A (DESTRUCTURING-BIND (X Y &OPTIONAL (Z X Z-P)) (QUOTE (A B)) (VALUES X Y Z Z-P)) A B A NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.8 (DESTRUCTURING-BIND (X Y &OPTIONAL Z W) (QUOTE (A B C)) (VALUES X Y Z W)) A B C NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.9 (DESTRUCTURING-BIND ((X Y)) (QUOTE ((A B))) (VALUES X Y)) A B)
;; Loading (DEFTEST DESTRUCTURING-BIND.10 (DESTRUCTURING-BIND (&WHOLE W (X Y)) (QUOTE ((A B))) (VALUES X Y W)) A B ((A B)))
;; Loading (DEFTEST DESTRUCTURING-BIND.11 (DESTRUCTURING-BIND ((X . Y) . W) (QUOTE ((A B) C)) (VALUES X Y W)) A (B) (C))
;; Loading (DEFTEST DESTRUCTURING-BIND.12 (DESTRUCTURING-BIND (X Y &BODY Z) (QUOTE (A B C D)) (VALUES X Y Z)) A B (C D))
;; Loading (DEFTEST DESTRUCTURING-BIND.12A (DESTRUCTURING-BIND ((X Y &BODY Z)) (QUOTE ((A B C D))) (VALUES X Y Z)) A B (C D))
;; Loading (DEFTEST DESTRUCTURING-BIND.13 (DESTRUCTURING-BIND (&WHOLE X Y Z) (QUOTE (A B)) (VALUES X Y Z)) (A B) A B)
;; Loading (DEFTEST DESTRUCTURING-BIND.14 (DESTRUCTURING-BIND (W (&WHOLE X Y Z)) (QUOTE (1 (A B))) (VALUES W X Y Z)) 1 (A B) A B)
;; Loading (DEFTEST DESTRUCTURING-BIND.15 (DESTRUCTURING-BIND (&KEY A B C) (QUOTE (:A 1)) (VALUES A B C)) 1 NIL NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.16 (DESTRUCTURING-BIND (&KEY A B C) (QUOTE (:B 1)) (VALUES A B C)) NIL 1 NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.17 (DESTRUCTURING-BIND (&KEY A B C) (QUOTE (:C 1)) (VALUES A B C)) NIL NIL 1)
;; Loading (DEFTEST DESTRUCTURING-BIND.17A (DESTRUCTURING-BIND (&KEY (A (QUOTE FOO)) (B (QUOTE BAR)) C) (QUOTE (:C 1)) (VALUES A B C)) FOO BAR 1)
;; Loading (DEFTEST DESTRUCTURING-BIND.17C (DESTRUCTURING-BIND (&KEY (A (QUOTE FOO) A-P) (B A B-P) (C (QUOTE ZZZ) C-P)) (QUOTE (:C 1)) (VALUES A B C A-P B-P (NOTNOT C-P))) FOO FOO 1 NIL NIL T)
;; Loading (DEFTEST DESTRUCTURING-BIND.18 (DESTRUCTURING-BIND ((&KEY A B C)) (QUOTE ((:C 1 :B 2))) (VALUES A B C)) NIL 2 1)
;; Loading (DEFTEST DESTRUCTURING-BIND.19 (BLOCK NIL (TAGBODY (DESTRUCTURING-BIND (A . B) (QUOTE (1 2)) (GO 10) 10 (RETURN (QUOTE BAD))) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST DESTRUCTURING-BIND.20 (DESTRUCTURING-BIND (&WHOLE (A . B) C . D) (QUOTE (1 . 2)) (LIST A B C D)) (1 2 1 2))
;; Loading (DEFTEST DESTRUCTURING-BIND.21 (DESTRUCTURING-BIND (X &REST (Y Z)) (QUOTE (1 2 3)) (VALUES X Y Z)) 1 2 3)
;; Loading (DEFTEST DESTRUCTURING-BIND.22 (DESTRUCTURING-BIND (X Y &KEY) (QUOTE (1 2)) (VALUES X Y)) 1 2)
;; Loading (DEFTEST DESTRUCTURING-BIND.23 (DESTRUCTURING-BIND (&REST X &KEY) (QUOTE (:ALLOW-OTHER-KEYS 1)) X) (:ALLOW-OTHER-KEYS 1))
;; Loading (DEFTEST DESTRUCTURING-BIND.24 (DESTRUCTURING-BIND (&REST X &KEY) NIL X) NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.25 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (DESTRUCTURING-BIND (Y) (LIST X) (DECLARE (SPECIAL X)) Y))) :GOOD)
;; Loading (DEFTEST DESTRUCTURING-BIND.26 (DESTRUCTURING-BIND (X) (LIST 1)) NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.27 (DESTRUCTURING-BIND (X) (LIST 1) (DECLARE (OPTIMIZE))) NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.28 (DESTRUCTURING-BIND (X) (LIST 1) (DECLARE (OPTIMIZE)) (DECLARE)) NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.29 (DESTRUCTURING-BIND (X &AUX Y) (QUOTE (:FOO)) (VALUES X Y)) :FOO NIL)
;; Loading (DEFTEST DESTRUCTURING-BIND.30 (DESTRUCTURING-BIND (X &AUX (Y (LIST X))) (QUOTE (:FOO)) (VALUES X Y)) :FOO (:FOO))
;; Loading (DEFTEST DESTRUCTURING-BIND.31 (MACROLET ((%M (Z) Z)) (DESTRUCTURING-BIND (A B C) (EXPAND-IN-CURRENT-ENV (%M (QUOTE (1 2 3)))) (VALUES A B C))) 1 2 3)
;; Loading (DEFTEST DESTRUCTURING-BIND.ERROR.7 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DESTRUCTURING-BIND))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DESTRUCTURING-BIND.ERROR.8 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DESTRUCTURING-BIND)) (QUOTE (DESTRUCTURING-BIND (A . B) (QUOTE (1 2)) NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DESTRUCTURING-BIND.ERROR.9 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DESTRUCTURING-BIND)) (QUOTE (DESTRUCTURING-BIND (A . B) (QUOTE (1 2)) NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "ecase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ecase.lsp C1271157>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ECASE.1 (ECASE (QUOTE B) (A 1) (B 2) (C 3)) 2)
;; Loading (DEFTEST ECASE.2 (SIGNALS-TYPE-ERROR X 1 (ECASE X)) T)
;; Loading (DEFTEST ECASE.3 (SIGNALS-TYPE-ERROR X 1 (ECASE X (A 1) (B 2) (C 3))) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST ECASE.4 (SIGNALS-TYPE-ERROR X 1 (ECASE X (T NIL))) T)
;; Loading (DEFTEST ECASE.5 (SIGNALS-TYPE-ERROR X 1 (ECASE X (OTHERWISE NIL))) T)
;; Loading (DEFTEST ECASE.6 (ECASE (QUOTE B) ((A Z) 1) ((Y B W) 2) ((B C) 3)) 2)
;; Loading (DEFTEST ECASE.7 (ECASE (QUOTE Z) ((A B C) 1) ((D E) 2) ((F Z G) 3)) 3)
;; Loading (DEFTEST ECASE.8 (ECASE (1+ MOST-POSITIVE-FIXNUM) (1152921504606846976 (QUOTE A))) A)
;; Loading (DEFTEST ECASE.9 (SIGNALS-TYPE-ERROR X NIL (ECASE X (NIL (QUOTE A)))) T)
;; Loading (DEFTEST ECASE.10 (ECASE NIL ((NIL) (QUOTE A))) A)
;; Loading (DEFTEST ECASE.11 (ECASE (QUOTE A) (B 0) (A (VALUES 1 2 3)) (C NIL)) 1 2 3)
;; Loading (DEFTEST ECASE.12 (SIGNALS-TYPE-ERROR X T (ECASE X (A 10))) T)
;; Loading (DEFTEST ECASE.13 (ECASE T ((T) 10) (T 20)) 10)
;; Loading (DEFTEST ECASE.14 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (ECASE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (((SYSTEM.INTERNALS::BQ-COMMA X)) 1) (A 2))))) 1)
;; Loading (DEFTEST ECASE.15 (SIGNALS-TYPE-ERROR X (QUOTE OTHERWISE) (ECASE X ((T) 10))) T)
;; Loading (DEFTEST ECASE.16 (SIGNALS-TYPE-ERROR X T (ECASE X ((OTHERWISE) 10))) T)
;; Loading (DEFTEST ECASE.17 (SIGNALS-TYPE-ERROR X (QUOTE A) (ECASE X (B 0) (C 1) (OTHERWISE 2))) T)
;; Loading (DEFTEST ECASE.18 (SIGNALS-TYPE-ERROR X (QUOTE A) (ECASE X (B 0) (C 1) ((OTHERWISE) 2))) T)
;; Loading (DEFTEST ECASE.19 (SIGNALS-TYPE-ERROR X (QUOTE A) (ECASE X (B 0) (C 1) ((T) 2))) T)
;; Loading (DEFTEST ECASE.20 (ECASE #\a ((#\b #\c) 10) ((#\d #\e #\A) 20) (NIL 30) ((#\z #\a #\y) 40)) 40)
;; Loading (DEFTEST ECASE.21 (ECASE 1 (1 (VALUES)) (2 (QUOTE A))))
;; Loading (DEFTEST ECASE.23 (ECASE 1 (1 (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) A B C)
;; Loading (DEFTEST ECASE.25 (LET ((X 0)) (VALUES (ECASE (PROGN (INCF X) (QUOTE C)) (A 1) (B 2) (C 3) (D 4)) X)) 3 1)
;; Loading (DEFTEST ECASE.26 (ECASE (QUOTE B) ((A B C) 10) (B 20)) 10)
;; Loading (DEFTEST ECASE.27 (ECASE (QUOTE B) (B 20) ((A B C) 10)) 20)
;; Loading (DEFTEST ECASE.28 (ECASE (QUOTE B) (B 20) (B 10) (D 0)) 20)
;; Loading (DEFTEST ECASE.29 (LET ((X NIL)) (VALUES (ECASE 2 (1 (SETQ X (QUOTE A)) (QUOTE W)) (2 (SETQ X (QUOTE B)) (QUOTE Y)) (3 (SETQ X (QUOTE C)) (QUOTE Z))) X)) Y B)
;; Loading (DEFTEST ECASE.31 (ECASE (VALUES (QUOTE B) (QUOTE C)) (C 0) ((A B) 10) (D 20)) 10)
;; Loading (DEFTEST ECASE.32 (ECASE (QUOTE A) (A) (B (QUOTE B))) NIL)
;; Loading (DEFTEST ECASE.33 (BLOCK DONE (TAGBODY (ECASE (QUOTE A) (A (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD)))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST ECASE.34 (MACROLET ((%M (Z) Z)) (ECASE (EXPAND-IN-CURRENT-ENV (%M :B)) (:A :BAD1) (:B :GOOD) (:C :BAD2))) :GOOD)
;; Loading (DEFTEST ECASE.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ECASE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST ECASE.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ECASE)) (QUOTE (ECASE T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST ECASE.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ECASE)) (QUOTE (ECASE T)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "eql.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/eql.lsp 80B86F07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST EQL.1 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (EQL X X)))) NIL)
;; Loading (DEFTEST EQL.2 (EQLT 2 (1+ 1)) T)
;; Loading (DEFTEST EQL.3 (LET ((X "abc")) (EQL X (COPY-SEQ X))) NIL)
;; Loading (DEFTEST EQL.4 (EQLT #\a #\a) T)
;; Loading (DEFTEST EQL.5 (EQLT 12345678901234567890 12345678901234567890) T)
;; Loading (DEFTEST EQL.7 (EQL 12.0 12) NIL)
;; Loading (DEFTEST EQL.8 (EQLT #C(1 -2) #C(1 -2)) T)
;; Loading (DEFTEST EQL.9 (LET ((X "abc") (Y "abc")) (IF (EQ X Y) (EQLT X Y) (NOT (EQL X Y)))) T)
;; Loading (DEFTEST EQL.10 (EQL (LIST (QUOTE A)) (LIST (QUOTE B))) NIL)
;; Loading (DEFTEST EQL.11 (EQLT #C(1 -2) (- #C(-1 2))) T)
;; Loading (DEFTEST EQL.ORDER.1 (LET ((I 0) X Y) (VALUES (EQL (SETF X (INCF I)) (SETF Y (INCF I))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST EQL.ERROR.1 (SIGNALS-ERROR (EQL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQL.ERROR.2 (SIGNALS-ERROR (EQL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQL.ERROR.3 (SIGNALS-ERROR (EQL NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQ.ERROR.1 (SIGNALS-ERROR (EQ) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQ.ERROR.2 (SIGNALS-ERROR (EQ NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQ.ERROR.3 (SIGNALS-ERROR (EQ NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "equal.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/equal.lsp 80BF12B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST EQUAL.1 (LOOP FOR X IN *SYMBOLS* ALWAYS (LOOP FOR Y IN *SYMBOLS* ALWAYS (IF (EQ X Y) (EQUAL X Y) (NOT (EQUAL X Y))))) T)
;; Loading (DEFTEST EQUAL.2 (EQUALT (CONS (QUOTE A) (QUOTE B)) (CONS (QUOTE A) (QUOTE B))) T)
;; Loading (DEFTEST EQUAL.3 (EQUALT (CONS (QUOTE A) (QUOTE C)) (CONS (QUOTE A) (QUOTE B))) NIL)
;; Loading (DEFTEST EQUAL.4 (EQUALT (VECTOR 1 2 3) (VECTOR 1 2 3)) NIL)
;; Loading (DEFTEST EQUAL.5 (LOOP FOR C IN *CHARACTERS* ALWAYS (LOOP FOR D IN *CHARACTERS* ALWAYS (IF (EQL C D) (EQUALT C D) (NOT (EQUALT C D))))) T)
;; Loading (DEFTEST EQUAL.6 (EQUALT (MAKE-PATHNAME :NAME (COPY-SEQ "foo")) (MAKE-PATHNAME :NAME (COPY-SEQ "foo"))) T)
;; Loading (DEFTEST EQUAL.7 (EQUALT (MAKE-PATHNAME :NAME (COPY-SEQ "foo")) (MAKE-PATHNAME :NAME (COPY-SEQ "bar"))) NIL)
;; Loading (DEFTEST EQUAL.8 (EQUALT (COPY-SEQ "abcd") (COPY-SEQ "abcd")) T)
;; Loading (DEFTEST EQUAL.9 (EQUALT (COPY-SEQ "abcd") (COPY-SEQ "abc")) NIL)
;; Loading (DEFTEST EQUAL.10 (EQUALT (COPY-SEQ "abcd") (COPY-SEQ "ABCD")) NIL)
;; Loading (DEFTEST EQUAL.11 (EQUALT (COPY-SEQ #*000110) (COPY-SEQ #*000110)) T)
;; Loading (DEFTEST EQUAL.12 (EQUALT (COPY-SEQ #*000110) (COPY-SEQ #*000111)) NIL)
;; Loading (DEFTEST EQUAL.13 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((X (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (Y (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (EQUALT X Y)) T)
;; Loading (DEFTEST EQUAL.14 :NOTES (:NIL-VECTORS-ARE-STRINGS) (AND (EQUALT (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) "") (EQUALT "" (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) T)
;; Loading (DEFTEST EQUAL.15 (EQUALT (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) T)
;; Loading (DEFTEST EQUAL.16 (EQUALT "abc" (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c)))) T)
;; Loading (DEFTEST EQUAL.17 (LET ((S (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "0123456789" :FILL-POINTER 3))) (VALUES (EQUALT S "012") (EQUALT "012" S))) T T)
;; Loading (DEFTEST EQUAL.18 (LET ((B (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*0110001110 :FILL-POINTER 5))) (VALUES (EQUALT #*01100 B) (EQUALT #*01100 B))) T T)
;; Loading (DEFTEST EQUAL.19 (LET ((S (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "0123456789" :FILL-POINTER 3))) (VALUES (EQUALT S "012") (EQUALT "012" S))) T T)
;; Loading (DEFTEST EQUAL.ORDER.1 (LET ((I 0) X Y) (VALUES (EQUAL (SETF X (INCF I)) (SETF Y (INCF I))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST EQUAL.ERROR.1 (SIGNALS-ERROR (EQUAL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQUAL.ERROR.2 (SIGNALS-ERROR (EQUAL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQUAL.ERROR.3 (SIGNALS-ERROR (EQUAL NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "equalp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/equalp.lsp 80CAD767>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "random-aux.lsp")
;; Loading (DEFTEST EQUALP.1 (LOOP FOR C ACROSS +BASE-CHARS+ ALWAYS (LOOP FOR D ACROSS +BASE-CHARS+ ALWAYS (IF (CHAR-EQUAL C D) (EQUALPT C D) (NOT (EQUALPT C D))))) T)
;; Loading (DEFTEST EQUALP.2 (LOOP FOR I FROM 1 TO 100 ALWAYS (LOOP FOR J FROM 1 TO 100 ALWAYS (IF (EQLT I J) (EQUALPT I J) (NOT (EQUALPT I J))))) T)
;; Loading (DEFTEST EQUALP.3 (EQUALPT "abc" "ABC") T)
;; Loading (DEFTEST EQUALP.4 (EQUALPT "abc" "abd") NIL)
;; Loading (DEFTEST EQUALP.5 :NOTES (:ALLOW-NIL-ARRAYS) (EQUALPT (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) #()) T)
;; Loading (DEFTEST EQUALP.6 :NOTES (:ALLOW-NIL-ARRAYS) (EQUALPT (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) "") T)
;; Loading (DEFTEST EQUALP.7 (LOOP FOR NBITS FROM 1 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA NBITS))) FOR BOUND = (ASH 1 NBITS) FOR VAL = (RANDOM BOUND) FOR A1 = (MAKE-ARRAY NIL :INITIAL-ELEMENT VAL :ELEMENT-TYPE TYPE) FOR A2 = (MAKE-ARRAY NIL :INITIAL-ELEMENT VAL) UNLESS (EQUALP A1 A2) COLLECT (LIST NBITS TYPE VAL)) NIL)
;; Loading (DEFTEST EQUALP.8 (LOOP FOR NBITS FROM 1 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA NBITS))) FOR BOUND = (ASH 1 NBITS) FOR N = (1+ (RANDOM 20)) FOR VALS = (LOOP REPEAT N COLLECT (RANDOM BOUND)) FOR A1 = (MAKE-ARRAY N :INITIAL-CONTENTS VALS :ELEMENT-TYPE TYPE) FOR A2 = (MAKE-ARRAY N :INITIAL-CONTENTS VALS) UNLESS (EQUALP A1 A2) COLLECT (LIST NBITS TYPE VALS)) NIL)
;; Loading (DEFTEST EQUALP.9 (LOOP FOR NBITS FROM 1 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA NBITS))) FOR BOUND = (ASH 1 NBITS) FOR N = (1+ (RANDOM 20)) FOR VALS = (LOOP REPEAT N COLLECT (- (RANDOM BOUND) (/ BOUND 2))) FOR A1 = (MAKE-ARRAY N :INITIAL-CONTENTS VALS :ELEMENT-TYPE TYPE) FOR A2 = (MAKE-ARRAY N :INITIAL-CONTENTS VALS) UNLESS (EQUALP A1 A2) COLLECT (LIST NBITS TYPE VALS)) NIL)
;; Loading (DEFTEST EQUALP.10 (EQUALPT #*0010 #(0 0 1 0)) T)
;; Loading (DEFTEST EQUALP.11 (LET ((V1 #(1 2 3)) (V2 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8)) :FILL-POINTER 3))) (EQUALPT V1 V2)) T)
;; Loading (DEFTEST EQUALP.12 (EQUALPT (QUOTE (#\a #\b)) "ab") NIL)
;; Loading (DEFTEST EQUALP.13 (EQUALPT (QUOTE (#\a #\b)) (QUOTE (#\A #\B))) T)
;; Loading (DEFTEST EQUALP.14 (LET ((S1 (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S2 (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)) :ELEMENT-TYPE (QUOTE CHARACTER)))) (EQUALPT S1 S2)) T)
;; Loading (DEFTEST EQUALP.15 (LET ((BV (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (0 0 1 0)) :ELEMENT-TYPE (QUOTE BIT))) (V #(0 0 1 0))) (EQUALPT BV V)) T)
;; Loading (DEFSTRUCT EQUALP-STRUCT-16 A B C)
;; Loading (DEFSTRUCT EQUALP-STRUCT-16-ALT A B C)
;; Loading (DEFTEST EQUALP.16 (LET ((S1 (MAKE-EQUALP-STRUCT-16 :A 1 :B 2 :C #\a)) (S2 (MAKE-EQUALP-STRUCT-16 :A 1.0 :B 2.0 :C #\A)) (S3 (MAKE-EQUALP-STRUCT-16-ALT :A 1.0 :B 2.0 :C #\A))) (VALUES (EQUALPT S1 S2) (EQUALPT S1 S3) (EQUALPT S2 S3))) T NIL NIL)
;; Loading (DEFTEST EQUALP.17 (LOOP FOR I BELOW 8192 FOR F = (FLOAT I 1.0) REPEAT 1000 UNLESS (EQUALP I F) COLLECT (LIST I F)) NIL)
;; Loading (DEFTEST EQUALP.18 (LOOP FOR I = (- (RANDOM 10000000) 5000000) FOR F = (FLOAT I 1.0) REPEAT 1000 UNLESS (EQUALP I F) COLLECT (LIST I F)) NIL)
;; Loading (DEFTEST EQUALP.19 (LOOP FOR I = (- (RANDOM 10000000) 5000000) FOR F = (FLOAT I 1.0) REPEAT 1000 UNLESS (EQUALP I F) COLLECT (LIST I F)) NIL)
;; Loading (DEFTEST EQUALP.20 (LOOP FOR I = (- (RANDOM 10000000) 5000000) FOR F = (FLOAT I 1.0) REPEAT 1000 UNLESS (EQUALP I F) COLLECT (LIST I F)) NIL)
;; Loading (DEFTEST EQUALP.21 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQ))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQL))) (HT3 (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL))) (HT4 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (VALUES (EQUALPT HT1 HT2) (EQUALPT HT1 HT3) (EQUALPT HT1 HT4) (EQUALPT HT2 HT3) (EQUALPT HT2 HT4) (EQUALPT HT3 HT4))) NIL NIL NIL NIL NIL NIL)
;; Loading (DEFTEST EQUALP.22 (EQUALPT (MAKE-HASH-TABLE :TEST (QUOTE EQ)) (MAKE-HASH-TABLE :TEST (FUNCTION EQ))) T)
;; Loading (DEFTEST EQUALP.23 (EQUALPT (MAKE-HASH-TABLE :TEST (QUOTE EQL)) (MAKE-HASH-TABLE :TEST (FUNCTION EQL))) T)
;; Loading (DEFTEST EQUALP.24 (EQUALPT (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)) (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL))) T)
;; Loading (DEFTEST EQUALP.25 (EQUALPT (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)) (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) T)
;; Loading (DEFTEST EQUALP.26 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQ))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQ)))) (SETF (GETHASH #\a HT1) T) (SETF (GETHASH #\A HT2) T) (EQUALPT HT1 HT2)) NIL)
;; Loading (DEFTEST EQUALP.27 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQ))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQ)))) (SETF (GETHASH (QUOTE A) HT1) #\a) (SETF (GETHASH (QUOTE A) HT2) #\A) (EQUALPT HT1 HT2)) T)
;; Loading (DEFTEST EQUALP.28 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQL))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQL)))) (SETF (GETHASH #\a HT1) T) (SETF (GETHASH #\A HT2) T) (EQUALPT HT1 HT2)) NIL)
;; Loading (DEFTEST EQUALP.29 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQL))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQL)))) (SETF (GETHASH #\a HT1) "a") (SETF (GETHASH #\a HT2) "A") (EQUALPT HT1 HT2)) T)
;; Loading (DEFTEST EQUALP.30 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL)))) (SETF (GETHASH #\a HT1) T) (SETF (GETHASH #\A HT2) T) (EQUALPT HT1 HT2)) NIL)
;; Loading (DEFTEST EQUALP.31 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL)))) (SETF (GETHASH #\a HT1) "a") (SETF (GETHASH #\a HT2) "A") (EQUALPT HT1 HT2)) T)
;; Loading (DEFTEST EQUALP.32 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH #\a HT1) T) (SETF (GETHASH #\A HT2) T) (EQUALPT HT1 HT2)) T)
;; Loading (DEFTEST EQUALP.33 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH #\a HT1) "a") (SETF (GETHASH #\a HT2) "A") (EQUALPT HT1 HT2)) T)
;; Loading (DEFTEST EQUALP.34 (LET ((HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH (QUOTE #:A) HT1) T) (SETF (GETHASH (QUOTE #:A) HT2) T) (EQUALPT HT1 HT2)) NIL)
;; Loading (DEFTEST EQUALP.35 (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) COLLECT (FLET ((%MAKE-TABLE NIL (APPLY (FUNCTION MAKE-HASH-TABLE) :TEST TEST (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (COIN) (LIST :SIZE (RANDOM 100)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (COIN) (LIST :REHASH-SIZE (1+ (RANDOM 50))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (COIN) (LIST :REHASH-THRESHOLD (RANDOM 1.0))))))))) (LOOP REPEAT 200 COUNT (LET ((HT1 (%MAKE-TABLE)) (HT2 (%MAKE-TABLE)) (PAIRS (LOOP FOR I BELOW (RANDOM 100) COLLECT (CONS (GENSYM) I)))) (LOOP FOR (K . V) IN PAIRS DO (SETF (GETHASH K HT1) V)) (SETF PAIRS (RANDOM-PERMUTE PAIRS)) (LOOP FOR (K . V) IN PAIRS DO (SETF (GETHASH K HT2) V)) (NOT (EQUALP HT1 HT2)))))) (0 0 0 0))
;; Loading (DEFTEST EQUALP.ORDER.1 (LET ((I 0) X Y) (VALUES (EQUALP (SETF X (INCF I)) (SETF Y (INCF I))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST EQUALP.ERROR.1 (SIGNALS-ERROR (EQUALP) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQUALP.ERROR.2 (SIGNALS-ERROR (EQUALP NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EQUALP.ERROR.3 (SIGNALS-ERROR (EQUALP NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "etypecase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/etypecase.lsp 80EC0FF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/types-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN CLASSES-ARE-DISJOINT (C1 C2) "If either c1 or c2 is a builtin class or the name of a builtin
   class, then check for disjointness.  Return a non-NIL list
   of failed subtypep relationships, if any." (AND (OR (IS-BUILTIN-CLASS C1) (IS-BUILTIN-CLASS C2)) (CHECK-DISJOINTNESS C1 C2))).
;; Compiling form (DECLAIM (SPECIAL *SUBTYPE-TABLE*)).
;; Compiling form (DEFUN TYPES.6-BODY NIL (LOOP FOR P IN *SUBTYPE-TABLE* FOR TP = (CAR P) APPEND (AND (NOT (MEMBER TP (QUOTE (SEQUENCE CONS LIST T)))) (LET ((MESSAGE (CHECK-SUBTYPEP TP (QUOTE ATOM) T T))) (IF MESSAGE (LIST MESSAGE)))))).
;; Compiling form (DEFPARAMETER *TYPE-LIST* NIL).
;; Compiling form (DEFPARAMETER *SUPERTYPE-TABLE* NIL).
;; Compiling form (DEFUN TYPES.9-BODY NIL (LET ((TP-LIST (APPEND (QUOTE (KEYWORD ATOM LIST)) (LOOP FOR P IN *SUBTYPE-TABLE* COLLECT (CAR P)))) (RESULT-LIST)) (SETF TP-LIST (REMOVE-DUPLICATES TP-LIST)) (SETF *TYPE-LIST* TP-LIST) (LET ((SUBS (MAKE-HASH-TABLE :TEST (FUNCTION EQ))) (SUPS (MAKE-HASH-TABLE :TEST (FUNCTION EQ)))) (LOOP FOR X IN TP-LIST DO (LOOP FOR Y IN TP-LIST DO (MULTIPLE-VALUE-BIND (RESULT GOOD) (SUBTYPEP* X Y) (DECLARE (IGNORE GOOD)) (WHEN RESULT (PUSHNEW X (GETHASH Y SUBS)) (PUSHNEW Y (GETHASH X SUPS)))))) (SETF *SUPERTYPE-TABLE* SUPS) (LOOP FOR X IN TP-LIST DO (LET ((SUB-LIST (GETHASH X SUBS)) (SUP-LIST (GETHASH X SUPS))) (LOOP FOR T1 IN SUB-LIST DO (LOOP FOR T2 IN SUP-LIST DO (MULTIPLE-VALUE-BIND (RESULT GOOD) (SUBTYPEP* T1 T2) (WHEN (AND GOOD (NOT RESULT)) (PUSHNEW (LIST T1 X T2) RESULT-LIST :TEST (FUNCTION EQUAL)))))))) RESULT-LIST))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN TYPES.9A-BODY NIL (COND ((NOT (AND *TYPE-LIST* *SUPERTYPE-TABLE*)) (FORMAT NIL "Run test type.9 first~%") NIL) (T (LOOP FOR TP IN *TYPE-LIST* SUM (LET ((SUPS (GETHASH TP *SUPERTYPE-TABLE*))) (LOOP FOR X IN *UNIVERSE* SUM (HANDLER-CASE (COND ((NOT (TYPEP X TP)) 0) (T (LOOP FOR TP2 IN SUPS COUNT (HANDLER-CASE (AND (NOT (TYPEP X TP2)) (PROGN (FORMAT T "Found element of ~S not in ~S: ~S~%" TP TP2 X) T)) (CONDITION (C) (FORMAT T "Error ~S occured: ~S~%" C TP2) T))))) (CONDITION (C) (FORMAT T "Error ~S occured: ~S~%" C TP) 1)))))))).
;; Compiling form (DEFUN CHECK-SUBTYPEP (TYPE1 TYPE2 IS-SUB &OPTIONAL SHOULD-BE-VALID) (MULTIPLE-VALUE-BIND (SUB VALID) (SUBTYPEP TYPE1 TYPE2) (UNLESS (CONSTANTP TYPE1) (SETQ TYPE1 (LIST (QUOTE QUOTE) TYPE1))) (UNLESS (CONSTANTP TYPE2) (SETQ TYPE2 (LIST (QUOTE QUOTE) TYPE2))) (IF (OR (AND VALID SUB (NOT IS-SUB)) (AND VALID (NOT SUB) IS-SUB) (AND (NOT VALID) SHOULD-BE-VALID)) (SYSTEM.INTERNALS::BACKQUOTE (((SUBTYPEP (SYSTEM.INTERNALS::BQ-COMMA TYPE1) (SYSTEM.INTERNALS::BQ-COMMA TYPE2)) :==> (SYSTEM.INTERNALS::BQ-COMMA SUB) (SYSTEM.INTERNALS::BQ-COMMA VALID)))) NIL))).
;; Compiling form (DEFUN CHECK-DISJOINTNESS (TYPE1 TYPE2) (APPEND (CHECK-SUBTYPEP TYPE1 TYPE2 NIL) (CHECK-SUBTYPEP TYPE2 TYPE1 NIL) (CHECK-SUBTYPEP TYPE1 (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) T) (CHECK-SUBTYPEP TYPE2 (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE1) (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) NIL T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE2) (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) NIL T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE1) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)))) TYPE1 T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)) (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) TYPE1 T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE2) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)))) TYPE2 T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)) (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) TYPE2 T) (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)))) T) (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)))) T))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN CHECK-EQUIVALENCE (TYPE1 TYPE2) (APPEND (CHECK-SUBTYPEP TYPE1 TYPE2 T) (CHECK-SUBTYPEP TYPE2 TYPE1 T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE1) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)))) NIL T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE2) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)))) NIL T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)) (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) NIL T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)) (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) NIL T) (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA TYPE1) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)))) T) (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA TYPE2) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)))) T) (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)) (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) T) (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)) (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) T))).
;; Compiling form (DEFUN CHECK-ALL-SUBTYPEP (TYPE1 TYPE2) (APPEND (CHECK-SUBTYPEP TYPE1 TYPE2 T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) T) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE1) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2)))) NIL T) (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)) (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) T))).
;; Compiling form (DEFUN CHECK-ALL-NOT-SUBTYPEP (TYPE1 TYPE2) (APPEND (CHECK-SUBTYPEP TYPE1 TYPE2 NIL) (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1))) NIL))).
;; Compiling form (DEFUN SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT (T1 T2) (MULTIPLE-VALUE-BIND (SUB1 SUCCESS1) (SUBTYPEP* T1 T2) (MULTIPLE-VALUE-BIND (SUB2 SUCCESS2) (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA T2))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA T1)))) (OR (NOT SUCCESS1) (NOT SUCCESS2) (EQLT SUB1 SUB2))))).
;; Compiling form (DEFTYPE EVEN-ARRAY (&OPTIONAL TYPE SIZE) (SYSTEM.INTERNALS::BACKQUOTE (AND (ARRAY (SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA SIZE)) (SATISFIES EVEN-SIZE-P)))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/types-aux.llf 81045DC7>
;; Loading (DEFTEST ETYPECASE.1 (ETYPECASE 1 (INTEGER (QUOTE A)) (T (QUOTE B))) A)
;; Loading (DEFTEST ETYPECASE.2 (SIGNALS-TYPE-ERROR X 1 (ETYPECASE X (SYMBOL (QUOTE A)))) T)
;; Loading (DEFTEST ETYPECASE.3 (ETYPECASE 1 (SYMBOL (QUOTE A)) (T (QUOTE B))) B)
;; Loading (DEFTEST ETYPECASE.4 (ETYPECASE 1 (T (VALUES))))
;; Loading (DEFTEST ETYPECASE.5 (ETYPECASE 1 (INTEGER (VALUES)) (T (QUOTE A))))
;; Loading (DEFTEST ETYPECASE.6 (ETYPECASE 1 (BIT (QUOTE A)) (INTEGER (QUOTE B))) A)
;; Loading (DEFTEST ETYPECASE.7 (ETYPECASE 1 (T (QUOTE A))) A)
;; Loading (DEFTEST ETYPECASE.8 (ETYPECASE 1 (T (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) A B C)
;; Loading (DEFTEST ETYPECASE.9 (ETYPECASE 1 (INTEGER (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) (T NIL)) A B C)
;; Loading (DEFTEST ETYPECASE.10 (LET ((X 0)) (VALUES (ETYPECASE 1 (BIT (INCF X) (QUOTE A)) (INTEGER (INCF X 2) (QUOTE B)) (T (INCF X 4) (QUOTE C))) X)) A 1)
;; Loading (DEFTEST ETYPECASE.11 (ETYPECASE 1 (INTEGER) (T (QUOTE A))) NIL)
;; Loading (DEFTEST ETYPECASE.12 (ETYPECASE (QUOTE A) (NUMBER (QUOTE BAD)) (#<Standard-Class SYMBOL 8032EA67> (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST ETYPECASE.13 (BLOCK NIL (TAGBODY (LET ((X (QUOTE A))) (ETYPECASE X (SYMBOL (GO 10) 10 (RETURN (QUOTE BAD))))) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST ETYPECASE.14 (LOOP FOR X IN (QUOTE (1 A 1.299999 "")) COLLECT (ETYPECASE X (T :GOOD) (INTEGER :BAD) (SYMBOL :BAD) (FLOAT :BAD) (STRING :BAD))) (:GOOD :GOOD :GOOD :GOOD))
;; Loading (DEFTEST ETYPECASE.15 (LET* ((U (COERCE *UNIVERSE* (QUOTE VECTOR))) (LEN1 (LENGTH U)) (TYPES (COERCE *CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (LEN2 (LENGTH TYPES))) (LOOP FOR N = (RANDOM 10) FOR MY-TYPES = (LOOP REPEAT N COLLECT (ELT TYPES (RANDOM LEN2))) FOR VAL = (ELT U (RANDOM LEN1)) FOR I = (POSITION VAL MY-TYPES :TEST (FUNCTION TYPEP)) FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA (X) (HANDLER-CASE (ETYPECASE X (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR I FROM 0 FOR TYPE IN MY-TYPES COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA I)))))) (TYPE-ERROR (C) (ASSERT (EQL X (TYPE-ERROR-DATUM C))) (LET* ((EXPECTED (TYPE-ERROR-EXPECTED-TYPE C))) (LET ((EQUIV (CHECK-EQUIVALENCE EXPECTED (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (CONS (QUOTE OR) MY-TYPES)))))) (ASSERT (NULL EQUIV) NIL "EQUIV = ~A" EQUIV))) NIL))))) FOR J = (FUNCALL (EVAL FORM) VAL) REPEAT 200 UNLESS (EQL I J) COLLECT (LIST N MY-TYPES VAL I FORM J))) NIL)
;; Loading (DEFTEST ETYPECASE.16 (MACROLET ((%M (Z) Z)) (ETYPECASE (EXPAND-IN-CURRENT-ENV (%M :FOO)) (INTEGER :BAD1) (KEYWORD :GOOD) (SYMBOL :BAD2))) :GOOD)
;; Loading (DEFTEST ETYPECASE.17 (MACROLET ((%M (Z) Z)) (ETYPECASE :FOO (INTEGER (EXPAND-IN-CURRENT-ENV (%M :BAD1))) (KEYWORD (EXPAND-IN-CURRENT-ENV (%M :GOOD))) (SYMBOL (EXPAND-IN-CURRENT-ENV (%M :BAD2))))) :GOOD)
;; Loading (DEFTEST ETYPECASE.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ETYPECASE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST ETYPECASE.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ETYPECASE)) (QUOTE (ETYPECASE T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST ETYPECASE.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE ETYPECASE)) (QUOTE (ETYPECASE T)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "every.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/every.lsp 81218957>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST EVERY.1 (NOTNOT-MV (EVERY (FUNCTION IDENTITY) NIL)) T)
;; Loading (DEFTEST EVERY.2 (NOTNOT-MV (EVERY (FUNCTION IDENTITY) #())) T)
;; Loading (DEFTEST EVERY.3 (LET ((COUNT 0)) (VALUES (EVERY (FUNCTION (LAMBDA (X) (INCF COUNT) (< X 10))) (QUOTE (1 2 4 13 5 1))) COUNT)) NIL 4)
;; Loading (DEFTEST EVERY.4 (NOTNOT-MV (EVERY (FUNCTION =) (QUOTE (1 2 3 4)) (QUOTE (1 2 3 4 5)))) T)
;; Loading (DEFTEST EVERY.5 (NOTNOT-MV (EVERY (FUNCTION =) (QUOTE (1 2 3 4 5)) (QUOTE (1 2 3 4)))) T)
;; Loading (DEFTEST EVERY.6 (EVERY (FUNCTION =) (QUOTE (1 2 3 4 5)) (QUOTE (1 2 3 4 6))) NIL)
;; Loading (DEFTEST EVERY.7 (NOTNOT-MV (EVERY (FUNCTION (LAMBDA (X Y) (OR X Y))) (QUOTE (NIL T T NIL T)) #(T NIL T T NIL NIL))) T)
;; Loading (DEFTEST EVERY.8 (LET ((X (QUOTE (1))) (ARGS NIL)) (LOOP FOR I FROM 1 BELOW (1- (MIN 100 CALL-ARGUMENTS-LIMIT)) DO (PUSH X ARGS) ALWAYS (APPLY (FUNCTION EVERY) (FUNCTION =) ARGS))) T)
;; Loading (DEFTEST EVERY.9 (NOTNOT-MV (EVERY (FUNCTION ZEROP) #*000000000000)) T)
;; Loading (DEFTEST EVERY.10 (NOTNOT-MV (EVERY (FUNCTION ZEROP) #*)) T)
;; Loading (DEFTEST EVERY.11 (EVERY (FUNCTION ZEROP) #*0000010000) NIL)
;; Loading (DEFTEST EVERY.12 (NOTNOT-MV (EVERY (FUNCTION (LAMBDA (X) (EQL X #\a))) "aaaaaaaa")) T)
;; Loading (DEFTEST EVERY.13 (NOTNOT-MV (EVERY (FUNCTION (LAMBDA (X) (EQL X #\a))) "")) T)
;; Loading (DEFTEST EVERY.14 (EVERY (FUNCTION (LAMBDA (X) (EQL X #\a))) "aaaaaabaaaa") NIL)
;; Loading (DEFTEST EVERY.15 (EVERY (QUOTE NULL) (QUOTE (NIL NIL T NIL))) NIL)
;; Loading (DEFTEST EVERY.16 (NOTNOT-MV (EVERY (QUOTE NULL) (QUOTE (NIL NIL NIL NIL)))) T)
;; Loading (DEFTEST EVERY.17 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (EVERY (FUNCTION ZEROP) V)))) (T T T T T NIL NIL NIL NIL NIL))
;; Loading (DEFTEST EVERY.18 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 1 1 1 1 1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (EVERY (FUNCTION ZEROP) V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) COLLECT I) NIL)
;; Loading (DEFTEST EVERY.19 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (EVERY (FUNCTION ZEROP) V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) COLLECT I) NIL)
;; Loading (DEFTEST EVERY.20 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (EVERY (FUNCTION ALPHA-CHAR-P) V)))) (T T T T T NIL NIL NIL NIL NIL))
;; Loading (DEFTEST EVERY.21 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (EVERY (FUNCTION ALPHA-CHAR-P) V)))) (T T T T T NIL NIL NIL NIL NIL))
;; Loading (DEFTEST EVERY.22 (LET ((V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (NOTNOT (EVERY (FUNCTION ALPHA-CHAR-P) V)) (SETF (AREF V 2) #\0) (EVERY (FUNCTION ALPHA-CHAR-P) V))) T #\0 NIL)
;; Loading (DEFTEST EVERY.23 (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (EVERY (FUNCTION EVENP) V1) (NOTNOT (EVERY (QUOTE EVENP) V2)))) NIL T)
;; Loading (DEFTEST EVERY.24 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (EVERY (QUOTE EVENP) V1)) (EVERY (FUNCTION EVENP) V2))) COLLECT I) NIL)
;; Loading (DEFTEST EVERY.25 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (EVERY (QUOTE EVENP) V1)) (EVERY (FUNCTION EVENP) V2))) COLLECT I) NIL)
;; Loading (DEFTEST EVERY.26 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP FOR I FROM 0 TO 6 FOR S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET I) COLLECT (NOTNOT (EVERY (QUOTE ALPHA-CHAR-P) S2)))) (NIL NIL T T NIL NIL NIL))
;; Loading (DEFTEST EVERY.27 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP FOR I FROM 0 TO 6 FOR S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET I) COLLECT (NOTNOT (EVERY (QUOTE ALPHA-CHAR-P) S2)))) (NIL NIL T T NIL NIL NIL))
;; Loading (DEFTEST EVERY.28 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (NOTNOT (EVERY (FUNCTION PLUSP) V)) (PROGN (ADJUST-ARRAY V (QUOTE (11)) :INITIAL-ELEMENT -1) (EVERY (FUNCTION PLUSP) V)))) T NIL)
;; Loading (DEFTEST EVERY.29 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (NOTNOT (EVERY (FUNCTION PLUSP) V)) (PROGN (ADJUST-ARRAY V (QUOTE (11)) :INITIAL-ELEMENT -1) (EVERY (FUNCTION PLUSP) V)))) T T)
;; Loading (DEFTEST EVERY.30 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COERCE X TYPE))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION PLUSP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST EVERY.31 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COERCE X TYPE))) (QUOTE (1 2 3 4 5 -1)))) UNLESS (EVERY (FUNCTION PLUSP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST EVERY.32 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) FOR V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COMPLEX X (COERCE X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION COMPLEXP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST EVERY.ORDER.1 (LET ((I 0) X Y) (VALUES (EVERY (PROGN (SETF X (INCF I)) (FUNCTION NULL)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL A NIL)))) I X Y)) NIL 2 1 2)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST EVERY.ORDER.2 (LET ((I 0) X Y Z) (VALUES (EVERY (PROGN (SETF X (INCF I)) (FUNCTION EQUAL)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL A NIL))) (PROGN (SETF Z (INCF I)) (QUOTE (NIL NIL A B)))) I X Y Z)) NIL 3 1 2 3)
;; Loading (DEFTEST EVERY.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (EVERY X (QUOTE (A B C))))) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR FUNCTION SYMBOL)))))) NIL)
;; Loading (DEFTEST EVERY.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (EVERY (FUNCTION NULL) X))) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE SEQUENCE))))) NIL)
;; Loading (DEFTEST EVERY.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (EVERY (FUNCTION EQ) NIL X))) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE SEQUENCE))))) NIL)
;; Loading (DEFTEST EVERY.ERROR.8 (SIGNALS-ERROR (EVERY) PROGRAM-ERROR) T)
;; Loading (DEFTEST EVERY.ERROR.9 (SIGNALS-ERROR (EVERY (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST EVERY.ERROR.10 (SIGNALS-ERROR (LOCALLY (EVERY 1 (QUOTE (A B C))) T) TYPE-ERROR) T)
;; Loading (DEFTEST EVERY.ERROR.11 (SIGNALS-ERROR (EVERY (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST EVERY.ERROR.12 (SIGNALS-ERROR (EVERY (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR) T)
;; Loading (DEFTEST EVERY.ERROR.13 (SIGNALS-ERROR (EVERY (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST EVERY.ERROR.14 (SIGNALS-ERROR (EVERY (FUNCTION IDENTITY) (QUOTE (1 2 3 . 4))) TYPE-ERROR) T)
;; Loading (LOAD "fboundp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fboundp.lsp C0B3E327>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FBOUNDP.1 (NOT-MV (FBOUNDP (QUOTE CAR))) NIL)
;; Loading (DEFTEST FBOUNDP.2 (NOT-MV (FBOUNDP (QUOTE CDR))) NIL)
;; Loading (DEFTEST FBOUNDP.3 (NOT-MV (FBOUNDP (QUOTE DEFUN))) NIL)
;; Loading (DEFTEST FBOUNDP.4 (LET ((G (GENSYM))) (FBOUNDP G)) NIL)
;; Loading (DEFUN FBOUNDP-5-FN (X) X)
;; Loading (DEFTEST FBOUNDP.5 (NOT-MV (FBOUNDP (QUOTE FBOUNDP-5-FN))) NIL)
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFUN (SETF FBOUNDP-6-ACCESSOR) (Y X) (SETF (CAR X) Y)))
;; Loading (DEFTEST FBOUNDP.6 (NOT-MV (FBOUNDP (QUOTE (SETF FBOUNDP-6-ACCESSOR)))) NIL)
;; Loading (DEFTEST FBOUNDP.7 (LET ((G (GENSYM))) (FBOUNDP (LIST (QUOTE SETF) G))) NIL)
;; Loading (DEFTEST FBOUNDP.8 (LOOP FOR X IN *CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* WHEN (AND (FBOUNDP X) (NOT (EQ X (QUOTE ED)))) COLLECT X) NIL)
;; Loading (DEFTEST FBOUNDP.ORDER.1 (LET ((I 0)) (VALUES (NOTNOT (FBOUNDP (PROGN (INCF I) (QUOTE CAR)))) I)) T 1)
;; Loading (DEFTEST FBOUNDP.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION FBOUNDP) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL)))))))) NIL)
;; Loading (DEFTEST FBOUNDP.ERROR.2 (SIGNALS-TYPE-ERROR X (QUOTE (X)) (FBOUNDP X)) T)
;; Loading (DEFTEST FBOUNDP.ERROR.3 (SIGNALS-TYPE-ERROR X (QUOTE (SETF)) (FBOUNDP X)) T)
;; Loading (DEFTEST FBOUNDP.ERROR.4 (SIGNALS-TYPE-ERROR X (QUOTE (SETF FOO . BAR)) (FBOUNDP X)) T)
;; Loading (DEFTEST FBOUNDP.ERROR.5 (SIGNALS-TYPE-ERROR X (QUOTE (SETF FOO BAR)) (FBOUNDP X)) T)
;; Loading (DEFTEST FBOUNDP.ERROR.6 (SIGNALS-ERROR (FBOUNDP) PROGRAM-ERROR) T)
;; Loading (DEFTEST FBOUNDP.ERROR.7 (SIGNALS-ERROR (FBOUNDP (QUOTE CONS) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FBOUNDP.ERROR.8 (SIGNALS-ERROR (LOCALLY (FBOUNDP 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST FBOUNDP.ERROR.9 (SIGNALS-TYPE-ERROR X (QUOTE (SETF . FOO)) (FBOUNDP X)) T)
;; Loading (DEFTEST FBOUNDP.ERROR.10 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (SYMBOLP X) NCONC (HANDLER-CASE (LIST X (FBOUNDP (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA X))))) (TYPE-ERROR (C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM C) (TYPE-ERROR-EXPECTED-TYPE C)))) NIL) (ERROR (C) (LIST (LIST X C))))) NIL)
;; Loading (LOAD "fdefinition.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fdefinition.lsp C0BFE637>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FDEFINITION.ERROR.1 (SIGNALS-ERROR (FDEFINITION) PROGRAM-ERROR) T)
;; Loading (DEFTEST FDEFINITION.ERROR.2 (SIGNALS-ERROR (FDEFINITION (QUOTE CONS) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FDEFINITION.ERROR.3 (LET ((V (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (FDEFINITION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA V))) UNDEFINED-FUNCTION :NAME (SYSTEM.INTERNALS::BQ-COMMA V))))) T)
;; Loading (DEFTEST FDEFINITION.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL)))))))) NIL)
;; Loading (DEFTEST FDEFINITION.ERROR.6 (SIGNALS-ERROR (LOCALLY (FDEFINITION 10) T) TYPE-ERROR) T)
;; Loading (DEFTEST FDEFINITION.ERROR.7 (CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . FOO) (SETF FOO . BAR) (SETF FOO BAR)))) NIL)
;; Loading (DEFTEST FDEFINITION.ERROR.8 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (SYMBOLP X) NCONC (HANDLER-CASE (LIST X (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA X))))) (TYPE-ERROR (C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM C) (TYPE-ERROR-EXPECTED-TYPE C)))) NIL) (ERROR (C) (LIST (LIST X C))))) NIL)
;; Loading (DEFTEST FDEFINITION.1 (LET ((FUN (FDEFINITION (QUOTE CONS)))) (FUNCALL FUN (QUOTE A) (QUOTE B))) (A . B))
;; Loading (DEFTEST FDEFINITION.2 (PROGN (FDEFINITION (QUOTE COND)) :GOOD) :GOOD)
;; Loading (DEFTEST FDEFINITION.3 (PROGN (FDEFINITION (QUOTE SETQ)) :GOOD) :GOOD)
;; Loading (DEFTEST FDEFINITION.4 (LET ((SYM (GENSYM))) (VALUES (FBOUNDP SYM) (PROGN (SETF (FDEFINITION SYM) (FDEFINITION (QUOTE CONS))) (FUNCALL (SYMBOL-FUNCTION SYM) (QUOTE A) (QUOTE B))) (NOTNOT (FBOUNDP SYM)))) NIL (A . B) T)
;; Loading (DEFTEST FDEFINITION.5 (LET* ((SYM (GENSYM)) (FNAME (LIST (QUOTE SETF) SYM))) (VALUES (FBOUNDP FNAME) (PROGN (SETF (FDEFINITION FNAME) (FDEFINITION (QUOTE CONS))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SETF ((SYSTEM.INTERNALS::BQ-COMMA SYM) (QUOTE A)) (QUOTE B))))) (NOTNOT (FBOUNDP FNAME)))) NIL (B . A) T)
;; Loading (DEFTEST FDEFINITION.ORDER.1 (LET ((I 0)) (FDEFINITION (PROGN (INCF I) (QUOTE SETQ))) I) 1)
;; Loading (LOAD "flet.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/flet.lsp C0C8E767>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FLET.1 (FLET ((%F NIL 1)) (%F)) 1)
;; Loading (DEFTEST FLET.2 (FLET ((%F (X) X)) (%F 2)) 2)
;; Loading (DEFTEST FLET.3 (FLET ((%F (&REST ARGS) ARGS)) (%F (QUOTE A) (QUOTE B) (QUOTE C))) (A B C))
;; Loading (DEFTEST FLET.4 (BLOCK %F (FLET ((%F (&OPTIONAL (X (RETURN-FROM %F :GOOD))) NIL)) (%F) :BAD)) :GOOD)
;; Loading (DEFTEST FLET.4A (BLOCK %F (FLET ((%F (&KEY (X (RETURN-FROM %F :GOOD))) NIL)) (%F) :BAD)) :GOOD)
;; Loading (DEFTEST FLET.5 (FLET ((%F NIL (RETURN-FROM %F 15) 35)) (%F)) 15)
;; Loading (DEFTEST FLET.6 (BLOCK %F (FLET ((%F (&AUX (X (RETURN-FROM %F 10))) 20)) (%F))) 10)
;; Loading (DEFTEST FLET.7 (FLET ((%F (X) (+ X 5))) (FLET ((%F (Y) (COND ((EQL Y 20) 30) (T (%F 20))))) (%F 15))) 25)
;; Loading (DEFTEST FLET.8 (FLET ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F)) NIL 0 NIL)
;; Loading (DEFTEST FLET.9 (FLET ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :A 1)) 1 0 NIL)
;; Loading (DEFTEST FLET.10 (FLET ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :B 2)) NIL 2 T)
;; Loading (DEFTEST FLET.11 (FLET ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :B 2 :A 3)) 3 2 T)
;; Loading (DEFTEST FLET.12 (SIGNALS-ERROR (FLET ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :C 4)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLET.13 (SIGNALS-ERROR (FLET ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLET.14 (SIGNALS-ERROR (FLET ((%F (A) A)) (%F)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLET.15 (SIGNALS-ERROR (FLET ((%F (A) A)) (%F 1 2)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLET.16 (SIGNALS-ERROR (FLET ((%F (&KEY A) A)) (%F (QUOTE (FOO)))) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLET.17 (FLET (((SETF %F) (X Y) (SETF (CAR Y) X))) (LET ((Z (LIST 1 2))) (SETF (%F Z) (QUOTE A)) Z)) (A 2))
;; Loading (DEFTEST FLET.18 (FLET ((%F (X) (INCF X) (+ X X))) (%F 10)) 22)
;; Loading (DEFTEST FLET.19 (FLET ((%F (A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 D1 D2 D3 D4 D5 D6 D7 D8 D9 D10 E1 E2 E3 E4 E5 E6 E7 E8 E9 E10) (+ A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 D1 D2 D3 D4 D5 D6 D7 D8 D9 D10 E1 E2 E3 E4 E5 E6 E7 E8 E9 E10))) (%F 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50)) 1275)
;; Loading (DEFTEST FLET.20 (LET* ((N (MIN (1- LAMBDA-PARAMETERS-LIMIT) 1024)) (VARS (LOOP REPEAT N COLLECT (GENSYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (EQLT (SYSTEM.INTERNALS::BQ-COMMA N) (FLET ((%F (SYSTEM.INTERNALS::BQ-COMMA VARS) (+ (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN VARS)))) (%F (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR E IN VARS COLLECT 1)))))))) T)
;; Loading (DEFTEST FLET.21 (FLET ((%F (X) (DECLARE (TYPE FIXNUM X)) "Add one to the fixnum x." (1+ X))) (DECLARE (FTYPE (FUNCTION (FIXNUM) INTEGER) %F)) (%F 10)) 11)
;; Loading (DEFTEST FLET.22 (FLET ((%F (X &OPTIONAL (Y 1 Y-P) (Z 2 Z-P)) (LIST X Y (NOT (NOT Y-P)) Z (NOT (NOT Z-P))))) (VALUES (%F 10) (%F 20 40) (%F (QUOTE A) (QUOTE B) (QUOTE C)))) (10 1 NIL 2 NIL) (20 40 T 2 NIL) (A B T C T))
;; Loading (DEFTEST FLET.23 (FLET ((%F (X &OPTIONAL (Y 1 Y-P) (Z 2 Z-P) &REST R) (LIST X Y (NOT (NOT Y-P)) Z (NOT (NOT Z-P)) R))) (VALUES (%F 10) (%F 20 40) (%F (QUOTE A) (QUOTE B) (QUOTE C)) (%F (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G) (QUOTE H)))) (10 1 NIL 2 NIL NIL) (20 40 T 2 NIL NIL) (A B T C T NIL) (D E T F T (G H)))
;; Loading (DEFTEST FLET.24 (FLET ((%F (X &OPTIONAL (Y 1 Y-P) (Z 2 Z-P) &REST R &KEY FOO BAR) (LIST X Y (NOT (NOT Y-P)) Z (NOT (NOT Z-P)) R FOO BAR))) (VALUES (%F 10) (%F 20 40) (%F (QUOTE A) (QUOTE B) (QUOTE C)) (%F (QUOTE D) (QUOTE E) (QUOTE F) :FOO (QUOTE H)) (%F (QUOTE D) (QUOTE E) (QUOTE F) :BAR (QUOTE I)))) (10 1 NIL 2 NIL NIL NIL NIL) (20 40 T 2 NIL NIL NIL NIL) (A B T C T NIL NIL NIL) (D E T F T (:FOO H) H NIL) (D E T F T (:BAR I) NIL I))
;; Loading (DEFTEST FLET.25 (FLET ((%F (X &OPTIONAL (Y 1 Y-P) (Z 2 Z-P) &REST R &KEY FOO BAR &ALLOW-OTHER-KEYS) (LIST X Y (NOT (NOT Y-P)) Z (NOT (NOT Z-P)) R FOO BAR))) (VALUES (%F 10) (%F 20 40) (%F (QUOTE A) (QUOTE B) (QUOTE C)) (%F (QUOTE D) (QUOTE E) (QUOTE F) :FOO (QUOTE H) :WHATEVER NIL) (%F (QUOTE D) (QUOTE E) (QUOTE F) :BAR (QUOTE I) :ILLEGAL T :FOO (QUOTE Z)))) (10 1 NIL 2 NIL NIL NIL NIL) (20 40 T 2 NIL NIL NIL NIL) (A B T C T NIL NIL NIL) (D E T F T (:FOO H :WHATEVER NIL) H NIL) (D E T F T (:BAR I :ILLEGAL T :FOO Z) Z I))
;; Loading (DEFTEST FLET.26 (FLET ((%F (X &OPTIONAL (Y 1 Y-P) (Z 2 Z-P) &REST R &KEY FOO BAR) (LIST X Y (NOT (NOT Y-P)) Z (NOT (NOT Z-P)) R FOO BAR))) (VALUES (%F 10) (%F 20 40) (%F (QUOTE A) (QUOTE B) (QUOTE C)) (%F (QUOTE D) (QUOTE E) (QUOTE F) :FOO (QUOTE H) :WHATEVER NIL :ALLOW-OTHER-KEYS T) (%F (QUOTE D) (QUOTE E) (QUOTE F) :BAR (QUOTE I) :ILLEGAL T :FOO (QUOTE Z) :ALLOW-OTHER-KEYS T))) (10 1 NIL 2 NIL NIL NIL NIL) (20 40 T 2 NIL NIL NIL NIL) (A B T C T NIL NIL NIL) (D E T F T (:FOO H :WHATEVER NIL :ALLOW-OTHER-KEYS T) H NIL) (D E T F T (:BAR I :ILLEGAL T :FOO Z :ALLOW-OTHER-KEYS T) Z I))
;; Loading (DEFTEST FLET.27 (FLET ((%F (X &OPTIONAL (Y 1 Y-P) (Z 2 Z-P) &REST R &KEY FOO BAR) (LIST X Y (NOT (NOT Y-P)) Z (NOT (NOT Z-P)) R FOO BAR))) (VALUES (%F 10) (%F 20 40) (%F (QUOTE A) (QUOTE B) (QUOTE C)) (%F (QUOTE D) (QUOTE E) (QUOTE F) :FOO (QUOTE H) :ALLOW-OTHER-KEYS NIL) (%F (QUOTE D) (QUOTE E) (QUOTE F) :BAR (QUOTE I) :ALLOW-OTHER-KEYS NIL))) (10 1 NIL 2 NIL NIL NIL NIL) (20 40 T 2 NIL NIL NIL NIL) (A B T C T NIL NIL NIL) (D E T F T (:FOO H :ALLOW-OTHER-KEYS NIL) H NIL) (D E T F T (:BAR I :ALLOW-OTHER-KEYS NIL) NIL I))
;; Loading (DEFTEST FLET.28 (FLET ((%F (X &OPTIONAL (Y 1 Y-P) (Z 2 Z-P) &REST R &KEY FOO BAR ALLOW-OTHER-KEYS) (LIST X Y (NOT (NOT Y-P)) Z (NOT (NOT Z-P)) ALLOW-OTHER-KEYS R FOO BAR))) (VALUES (%F 10) (%F 20 40) (%F (QUOTE A) (QUOTE B) (QUOTE C)) (%F (QUOTE D) (QUOTE E) (QUOTE F) :FOO (QUOTE H) :WHATEVER NIL :ALLOW-OTHER-KEYS 100) (%F (QUOTE D) (QUOTE E) (QUOTE F) :BAR (QUOTE I) :ILLEGAL T :FOO (QUOTE Z) :ALLOW-OTHER-KEYS 200))) (10 1 NIL 2 NIL NIL NIL NIL NIL) (20 40 T 2 NIL NIL NIL NIL NIL) (A B T C T NIL NIL NIL NIL) (D E T F T 100 (:FOO H :WHATEVER NIL :ALLOW-OTHER-KEYS 100) H NIL) (D E T F T 200 (:BAR I :ILLEGAL T :FOO Z :ALLOW-OTHER-KEYS 200) Z I))
;; Loading (DEFTEST FLET.29 (FLET ((%F (X &OPTIONAL (Y 1 Y-P) (Z 2 Z-P) &REST R &KEY FOO BAR ALLOW-OTHER-KEYS &ALLOW-OTHER-KEYS) (LIST X Y (NOT (NOT Y-P)) Z (NOT (NOT Z-P)) ALLOW-OTHER-KEYS R FOO BAR))) (VALUES (%F 10) (%F 20 40) (%F (QUOTE A) (QUOTE B) (QUOTE C)) (%F (QUOTE D) (QUOTE E) (QUOTE F) :FOO (QUOTE H) :WHATEVER NIL :ALLOW-OTHER-KEYS NIL :BLAH T) (%F (QUOTE D) (QUOTE E) (QUOTE F) :BAR (QUOTE I) :ILLEGAL T :FOO (QUOTE Z) :ALLOW-OTHER-KEYS NIL :ZZZ 10))) (10 1 NIL 2 NIL NIL NIL NIL NIL) (20 40 T 2 NIL NIL NIL NIL NIL) (A B T C T NIL NIL NIL NIL) (D E T F T NIL (:FOO H :WHATEVER NIL :ALLOW-OTHER-KEYS NIL :BLAH T) H NIL) (D E T F T NIL (:BAR I :ILLEGAL T :FOO Z :ALLOW-OTHER-KEYS NIL :ZZZ 10) Z I))
;; Loading (DEFTEST FLET.30 (FLET ((%F (&KEY ((FOO BAR) NIL)) BAR)) (VALUES (%F) (%F (QUOTE FOO) 10))) NIL 10)
;; Loading (DEFTEST FLET.31 (FLET ((%F (&KEY ((:FOO BAR) NIL)) BAR)) (VALUES (%F) (%F :FOO 10))) NIL 10)
;; Loading (DEFTEST FLET.32 (FLET ((%F (&KEY A B C) (LIST A B C))) (%F :A 10 :B 20 :C 30 :A 40 :B 50 :C 60)) (10 20 30))
;; Loading (DEFTEST FLET.33 (FLET ((%F (X Y &AUX (A (1+ X)) (B (+ X Y A)) (C (LIST X Y A B))) C)) (%F 5 9)) (5 9 6 20))
;; Loading (DEFTEST FLET.34 (FLET ((%F (X Y &REST R &KEY FOO BAR &AUX (C (LIST X Y R FOO BAR))) C)) (VALUES (%F 1 2) (%F 1 2 :FOO (QUOTE A)) (%F 1 2 :BAR (QUOTE B)) (%F 1 2 :FOO (QUOTE A) :BAR (QUOTE B)) (%F 1 2 :BAR (QUOTE B) :FOO (QUOTE A)))) (1 2 NIL NIL NIL) (1 2 (:FOO A) A NIL) (1 2 (:BAR B) NIL B) (1 2 (:FOO A :BAR B) A B) (1 2 (:BAR B :FOO A) A B))
;; Loading (DEFTEST FLET.35 (LET ((X (QUOTE BAD))) (DECLARE (SPECIAL X)) (FLET ((%F NIL X)) (FLET ((%G (X) (DECLARE (SPECIAL X)) (%F))) (%G (QUOTE GOOD))))) GOOD)
;; Loading (DEFTEST FLET.36 (LET ((X (QUOTE BAD))) (DECLARE (SPECIAL X)) (FLET ((%F NIL X)) (FLET ((%G (&AUX (X (QUOTE GOOD))) (DECLARE (SPECIAL X)) (%F))) (%G)))) GOOD)
;; Loading (DEFTEST FLET.37 (LET ((X (QUOTE BAD))) (DECLARE (SPECIAL X)) (FLET ((%F NIL X)) (FLET ((%G (&REST X) (DECLARE (SPECIAL X)) (%F))) (%G (QUOTE GOOD))))) (GOOD))
;; Loading (DEFTEST FLET.38 (LET ((X (QUOTE BAD))) (DECLARE (SPECIAL X)) (FLET ((%F NIL X)) (FLET ((%G (&KEY (X (QUOTE GOOD))) (DECLARE (SPECIAL X)) (%F))) (%G)))) GOOD)
;; Loading (DEFTEST FLET.39 (LET ((X (QUOTE BAD))) (DECLARE (SPECIAL X)) (FLET ((%F NIL X)) (FLET ((%G (&KEY (X (QUOTE BAD))) (DECLARE (SPECIAL X)) (%F))) (%G :X (QUOTE GOOD))))) GOOD)
;; Loading (DEFTEST FLET.40 (LET ((X (QUOTE GOOD))) (DECLARE (SPECIAL X)) (FLET ((%F NIL X)) (FLET ((%G (&KEY (X (QUOTE BAD))) (%F))) (%G :X (QUOTE WORSE))))) GOOD)
;; Loading (DEFTEST FLET.45 (FLET ((NIL NIL (QUOTE A))) (NIL)) A)
;; Loading (DEFTEST FLET.46 (FLET ((T NIL (QUOTE B))) (T)) B)
;; Loading (DEFTEST FLET.47 (FLET ((:FOO NIL (QUOTE BAR))) (:FOO)) BAR)
;; Loading (DEFTEST FLET.48 (FLET ((:FOO NIL (QUOTE BAR))) (FUNCALL (FUNCTION :FOO))) BAR)
;; Loading (DEFTEST FLET.49 (LOOP FOR S IN *CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (FLET (((SYSTEM.INTERNALS::BQ-COMMA S) NIL (QUOTE A))) ((SYSTEM.INTERNALS::BQ-COMMA S))))) UNLESS (EQ (EVAL FORM) (QUOTE A)) COLLECT S) NIL)
;; Loading (DEFTEST FLET.50 (LOOP FOR S IN *CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (FLET (((SYSTEM.INTERNALS::BQ-COMMA S) NIL (QUOTE A))) (DECLARE (FTYPE (FUNCTION NIL SYMBOL) (SYSTEM.INTERNALS::BQ-COMMA S))) ((SYSTEM.INTERNALS::BQ-COMMA S))))) UNLESS (EQ (EVAL FORM) (QUOTE A)) COLLECT S) NIL)
;; Loading (DEFTEST FLET.51 (LOOP FOR S IN *CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (FLET (((SETF (SYSTEM.INTERNALS::BQ-COMMA S)) (&REST ARGS) (DECLARE (IGNORE ARGS)) (QUOTE A))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA S)) 10)))) UNLESS (EQ (EVAL FORM) (QUOTE A)) COLLECT S) NIL)
;; Loading (DEFTEST FLET.52 (BLOCK DONE (TAGBODY (FLET ((%F NIL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD)))) (%F)) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST FLET.53 (FLET ((%F (&KEY (A (QUOTE WRONG))) A)) (%F :A NIL)) NIL)
;; Loading (DEFTEST FLET.54 (FLET ((%F (&KEY (A (QUOTE WRONG) A-P)) (LIST A (NOT A-P)))) (%F :A NIL)) (NIL NIL))
;; Loading (DEFTEST FLET.55 (FLET ((%F (&KEY ((:A B) (QUOTE WRONG))) B)) (%F :A NIL)) NIL)
;; Loading (DEFTEST FLET.56 (FLET ((%F (&KEY ((:A B) (QUOTE WRONG) PRESENT?)) (LIST B (NOT PRESENT?)))) (%F :A NIL)) (NIL NIL))
;; Loading (DEFTEST FLET.57 (FLET ((%F (&KEY) (QUOTE GOOD))) (%F :ALLOW-OTHER-KEYS NIL)) GOOD)
;; Loading (DEFTEST FLET.58 (FLET ((%F (&KEY) (QUOTE GOOD))) (%F :ALLOW-OTHER-KEYS T)) GOOD)
;; Loading (DEFTEST FLET.59 (FLET ((%F (&KEY) (QUOTE GOOD))) (%F :ALLOW-OTHER-KEYS T :A 1 :B 2)) GOOD)
;; Loading (DEFTEST FLET.60 (FLET ((%F (&KEY &ALLOW-OTHER-KEYS) (QUOTE GOOD))) (%F :A 1 :B 2)) GOOD)
;; Loading (DEFTEST FLET.61 (SIGNALS-ERROR (FLET ((%F (&KEY) :BAD)) (%F NIL NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLET.62 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (FLET ((%F (&OPTIONAL (Y X)) (DECLARE (SPECIAL X)) Y)) (%F)))) :GOOD)
;; Loading (DEFTEST FLET.63 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (FLET ((%F (&KEY (Y X)) (DECLARE (SPECIAL X)) Y)) (%F)))) :GOOD)
;; Loading (DEFTEST FLET.64 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (FLET NIL (DECLARE (SPECIAL X))) X)) :GOOD)
;; Loading (DEFTEST FLET.65 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (FLET ((%F NIL (DECLARE (SPECIAL X))))) X)) :GOOD)
;; Loading (DEFTEST FLET.66 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (FLET ((%F NIL (DECLARE (SPECIAL X)))) X))) :GOOD)
;; Loading (DEFTEST FLET.67 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (FLET ((%F (&AUX (Y X)) (DECLARE (SPECIAL X)) Y)) (%F)))) :GOOD)
;; Loading (DEFTEST FLET.68 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (FLET ((%F NIL X)) (DECLARE (SPECIAL X)) (%F)))) :GOOD)
;; Loading (DEFTEST FLET.69 (LET ((*X* 0)) (DECLARE (SPECIAL *X*)) (FLET ((%F (I) (FUNCTION (LAMBDA (ARG) (DECLARE (IGNORE ARG)) (INCF *X* I))))) (VALUES (MAPCAR (%F 1) (QUOTE (A B C))) (MAPCAR (%F 2) (QUOTE (A B C)))))) (1 2 3) (5 7 9))
;; Loading (DEFTEST FLET.70 (MACROLET ((%M (Z) Z)) (FLET NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (DEFTEST FLET.71 (MACROLET ((%M (Z) Z)) (FLET ((%F NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) (%F))) :GOOD)
;; Loading (DEFUN FLET.72 NIL :BAD)
;; Loading (DEFTEST FLET.72 (FLET ((FLET.72 NIL :GOOD)) (FLET.72)) :GOOD)
;; Loading (DEFMACRO FLET.73 NIL :BAD)
;; Loading (DEFTEST FLET.73 (FLET ((FLET.73 NIL :GOOD)) (FLET.73)) :GOOD)
;; Loading (DEFINE-COMPILER-MACRO FLET.74 (&WHOLE FORM) :BAD)
;; Loading (DEFTEST FLET.74 (FLET ((FLET.74 NIL :GOOD)) (FLET.74)) :GOOD)
;; Loading (LOAD "fmakunbound.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fmakunbound.lsp C0FDD1C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FMAKUNBOUND.1 (LET ((G (GENSYM))) (AND (NOT (FBOUNDP G)) (SETF (SYMBOL-FUNCTION G) (FUNCTION CAR)) (FBOUNDP G) (VALUES (EQT (CHECK-VALUES (FMAKUNBOUND G)) G) (FBOUNDP G)))) T NIL)
;; Loading (DEFTEST FMAKUNBOUND.2 (LET ((G (GENSYM))) (AND (NOT (FBOUNDP G)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA G) NIL NIL))) (FBOUNDP G) (VALUES (EQT (CHECK-VALUES (FMAKUNBOUND G)) G) (FBOUNDP G)))) T NIL)
;; Loading (DEFTEST FMAKUNBOUND.3 (LET ((G (GENSYM))) (AND (NOT (FBOUNDP G)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA G) NIL NIL))) (FBOUNDP G) (VALUES (EQT (CHECK-VALUES (FMAKUNBOUND G)) G) (FBOUNDP G)))) T NIL)
;; Loading (DEFTEST FMAKUNBOUND.4 (LET* ((G (GENSYM)) (N (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA G))))) (AND (NOT (FBOUNDP N)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA N) NIL NIL))) (FBOUNDP N) (VALUES (EQUALT (CHECK-VALUES (FMAKUNBOUND N)) N) (FBOUNDP N)))) T NIL)
;; Loading (DEFTEST FMAKUNBOUND.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL)))))))) NIL)
;; Loading (DEFTEST FMAKUNBOUND.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . FOO) (SETF FOO . BAR) (SETF FOO BAR)))) NIL)
;; Loading (DEFTEST FMAKUNBOUND.ERROR.3 (SIGNALS-TYPE-ERROR X (QUOTE (X)) (FMAKUNBOUND X)) T)
;; Loading (DEFTEST FMAKUNBOUND.ERROR.4 (SIGNALS-ERROR (FMAKUNBOUND) PROGRAM-ERROR) T)
;; Loading (DEFTEST FMAKUNBOUND.ERROR.5 (SIGNALS-ERROR (FMAKUNBOUND (GENSYM) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FMAKUNBOUND.ERROR.6 (SIGNALS-ERROR (LOCALLY (FMAKUNBOUND 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST FMAKUNBOUND.ERROR.7 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (SYMBOLP X) NCONC (HANDLER-CASE (LIST X (FMAKUNBOUND (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA X))))) (TYPE-ERROR (C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM C) (TYPE-ERROR-EXPECTED-TYPE C)))) NIL) (ERROR (C) (LIST (LIST X C))))) NIL)
;; Loading (LOAD "funcall.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/funcall.lsp C1067027>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FUNCALL.1 (LET ((FN (FUNCTION CONS))) (FUNCALL FN (QUOTE A) (QUOTE B))) (A . B))
;; Loading (DEFTEST FUNCALL.2 (FUNCALL (SYMBOL-FUNCTION (QUOTE CONS)) (QUOTE A) (QUOTE B)) (A . B))
;; Loading (DEFTEST FUNCALL.3 (LET ((FN (QUOTE CONS))) (FUNCALL FN (QUOTE A) (QUOTE B))) (A . B))
;; Loading (DEFTEST FUNCALL.4 (FUNCALL (QUOTE CONS) (QUOTE A) (QUOTE B)) (A . B))
;; Loading (DEFTEST FUNCALL.5 (LET ((FN (FUNCTION +))) (FUNCALL FN 1 2 3 4)) 10)
;; Loading (DEFTEST FUNCALL.6 (FUNCALL (FUNCTION (LAMBDA (X Y) (CONS X Y))) (QUOTE A) (QUOTE B)) (A . B))
;; Loading (DEFUN XCONS (X Y) (CONS X Y))
;; Loading (DEFTEST FUNCALL.7 (FLET ((XCONS (X Y) (LIST Y X))) (VALUES (FUNCALL (QUOTE XCONS) 1 2) (FUNCALL (FUNCTION XCONS) 1 2))) (1 . 2) (2 1))
;; Loading (DEFTEST FUNCALL.8 (FLET ((FOO (X Y Z) (VALUES X Y Z))) (FUNCALL (FUNCTION FOO) 1 2 3)) 1 2 3)
;; Loading (DEFTEST FUNCALL.9 (FLET ((FOO NIL (VALUES))) (FUNCALL (FUNCTION FOO))))
;; Loading (DEFTEST FUNCALL.ORDER.1 (LET ((I 0) A B) (VALUES (FUNCALL (PROGN (SETF A (INCF I)) (FUNCTION CAR)) (PROGN (SETF B (INCF I)) (QUOTE (X . Y)))) I A B)) X 2 1 2)
;; Loading (DEFTEST FUNCALL.ORDER.2 (LET ((I 0) A B C) (VALUES (FUNCALL (PROGN (SETF A (INCF I)) (FUNCTION CONS)) (PROGN (SETF B (INCF I)) (QUOTE X)) (PROGN (SETF C (INCF I)) (QUOTE Y))) I A B C)) (X . Y) 3 1 2 3)
;; Loading (DEFTEST FUNCALL.ERROR.1 (SIGNALS-ERROR (FUNCALL (QUOTE QUOTE) 1) UNDEFINED-FUNCTION :NAME QUOTE) T)
;; Loading (DEFTEST FUNCALL.ERROR.2 (SIGNALS-ERROR (FUNCALL (QUOTE PROGN) 1) UNDEFINED-FUNCTION :NAME PROGN) T)
;; Loading (DEFTEST FUNCALL.ERROR.3 (SIGNALS-ERROR (FUNCALL (QUOTE DEFCONSTANT) (QUOTE (DEFCONSTANT X 10))) UNDEFINED-FUNCTION :NAME DEFCONSTANT) T)
;; Loading (DEFTEST FUNCALL.ERROR.4 (SIGNALS-ERROR (FUNCALL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FUNCALL.ERROR.5 (SIGNALS-ERROR (FUNCALL (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FUNCALL.ERROR.6 (SIGNALS-ERROR (FUNCALL (FUNCTION CONS) 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST FUNCALL.ERROR.7 (SIGNALS-TYPE-ERROR X (QUOTE A) (FUNCALL (FUNCTION CAR) X)) T)
;; Loading (LOAD "function-lambda-expression.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/function-lambda-expression.lsp C10FCCF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FUNCTION-LAMBDA-EXPRESSION.1 (LENGTH (MULTIPLE-VALUE-LIST (FUNCTION-LAMBDA-EXPRESSION (FUNCTION CONS)))) 3)
;; Loading (DEFTEST FUNCTION-LAMBDA-EXPRESSION.2 (LET ((X NIL)) (FLET ((%F NIL X)) (LET ((RET-VALS (MULTIPLE-VALUE-LIST (FUNCTION-LAMBDA-EXPRESSION (FUNCTION %F))))) (VALUES (LENGTH RET-VALS) (NOTNOT (SECOND RET-VALS)))))) 3 T)
;; Loading (DEFTEST FUNCTION-LAMBDA-EXPRESSION.3 (LENGTH (MULTIPLE-VALUE-LIST (FUNCTION-LAMBDA-EXPRESSION (FUNCTION MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE)))) 3)
;; Loading (DEFTEST FUNCTION-LAMBDA-EXPRESSION.ORDER.1 (LET ((I 0)) (FUNCTION-LAMBDA-EXPRESSION (PROGN (INCF I) (FUNCTION CONS))) I) 1)
;; Loading (DEFTEST FUNCTION-LAMBDA-EXPRESSION.ERROR.1 (SIGNALS-ERROR (FUNCTION-LAMBDA-EXPRESSION) PROGRAM-ERROR) T)
;; Loading (DEFTEST FUNCTION-LAMBDA-EXPRESSION.ERROR.2 (SIGNALS-ERROR (FUNCTION-LAMBDA-EXPRESSION (FUNCTION CONS) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "function.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/function.lsp C114A0A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FUNCTION.1 (TYPEP NIL (QUOTE FUNCTION)) NIL)
;; Loading (DEFTEST FUNCTION.2 (TYPEP (QUOTE IDENTITY) (QUOTE FUNCTION)) NIL)
;; Loading (DEFTEST FUNCTION.3 (NOT-MV (TYPEP (FUNCTION IDENTITY) (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST FUNCTION.4 (LOOP FOR X IN *CL-SYMBOL-NAMES* FOR S = (FIND-SYMBOL X "CL") FOR F = (AND (FBOUNDP S) (SYMBOL-FUNCTION S) (NOT (SPECIAL-OPERATOR-P S)) (NOT (MACRO-FUNCTION S)) (SYMBOL-FUNCTION S)) UNLESS (OR (NULL F) (TYPEP F (QUOTE FUNCTION))) COLLECT X) NIL)
;; Loading (DEFTEST FUNCTION.5 (TYPEP (QUOTE (SETF CAR)) (QUOTE FUNCTION)) NIL)
;; Loading (DEFTEST FUNCTION.6 (TYPEP (QUOTE (LAMBDA (X) X)) (QUOTE FUNCTION)) NIL)
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFUN (SETF FUNCTION-7-ACCESSOR) (Y X) (SETF (CAR X) Y) Y))
;; Loading (DEFTEST FUNCTION.7 (NOT-MV (TYPEP (FUNCTION (SETF FUNCTION-7-ACCESSOR)) (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST FUNCTION.8 (NOT-MV (TYPEP (FUNCTION (LAMBDA (X) X)) (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST FUNCTION.9 (NOT-MV (TYPEP (COMPILE NIL (QUOTE (LAMBDA (X) X))) (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST FUNCTION.10 (CHECK-PREDICATE (TYPEF (QUOTE (NOT (AND (OR NUMBER CHARACTER SYMBOL CONS ARRAY) FUNCTION))))) NIL)
;; Loading (DEFTEST FUNCTION.11 (FLET ((%F NIL NIL)) (TYPEP (QUOTE %F) (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST FUNCTION.12 (FLET ((%F NIL NIL)) (NOT-MV (TYPEP (FUNCTION %F) (QUOTE FUNCTION)))) NIL)
;; Loading (DEFTEST FUNCTION.13 (LABELS ((%F NIL NIL)) (NOT-MV (TYPEP (FUNCTION %F) (QUOTE FUNCTION)))) NIL)
;; Loading (DEFTEST FUNCTION.14 (FLET ((%F NIL NIL)) (DECLARE (OPTIMIZE SAFETY DEBUG)) (LET ((F (FUNCTION %F))) (DECLARE (TYPE (FUNCTION NIL NULL) F)) (FUNCALL F))) NIL)
;; Loading (DEFTEST FUNCTION.15 (FLET ((%F (X) (DECLARE (IGNORE X)) NIL)) (DECLARE (FTYPE (FUNCTION (NIL) NIL) %F)) :GOOD) :GOOD)
;; Loading (DEFTEST FUNCTION.16 (FLET ((%F (X) (DECLARE (IGNORE X)) NIL)) (DECLARE (FTYPE (FUNCTION (T) NULL) %F)) (VALUES (%F (QUOTE A)) (LOCALLY (DECLARE (FTYPE (FUNCTION (INTEGER) T) %F)) (%F 10)) (%F (QUOTE B)))) NIL NIL NIL)
;; Loading (DEFTEST FUNCTION.17 (FLET ((%F (&OPTIONAL X) X)) (DECLARE (FTYPE (FUNCTION (&OPTIONAL INTEGER) T) %F)) (VALUES (%F) (%F 10) (%F) (%F (1+ MOST-POSITIVE-FIXNUM)))) NIL 10 NIL 1152921504606846976)
;; Loading (DEFTEST FUNCTION.18 (FLET ((%F (&REST X) X)) (DECLARE (FTYPE (FUNCTION (&REST SYMBOL) T) %F)) (VALUES (%F) (%F (QUOTE A)) (%F (QUOTE A) (QUOTE B) (QUOTE C)))) NIL (A) (A B C))
;; Loading (DEFTEST FUNCTION.19 (FLET ((%F (&KEY FOO BAR) (LIST FOO BAR))) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO T) (:BAR T)) LIST) %F)) (VALUES (%F) (%F :FOO 1) (%F :FOO 1 :FOO 2) (%F :BAR (QUOTE A)) (%F :BAR (QUOTE A) :BAR (QUOTE B)) (%F :FOO (QUOTE X) :BAR (QUOTE Y)) (%F :BAR (QUOTE X) :FOO (QUOTE Y)) (%F :BAR (QUOTE X) :FOO (QUOTE Y) :BAR (QUOTE Z) :FOO (QUOTE W)))) (NIL NIL) (1 NIL) (1 NIL) (NIL A) (NIL A) (X Y) (Y X) (Y X))
;; Loading (DEFTEST FUNCTION.20 (FLET ((%F (&KEY FOO) FOO)) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO T) (:ALLOW-OTHER-KEYS T)) T) %F)) (VALUES (%F) (%F :FOO (QUOTE A)) (%F :ALLOW-OTHER-KEYS NIL) (%F :ALLOW-OTHER-KEYS T :FOO (QUOTE Z)))) NIL A NIL Z)
;; Loading (DEFTEST FUNCTION.21 (FLET ((%F (&KEY FOO &ALLOW-OTHER-KEYS) FOO)) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO INTEGER)) T) %F)) (VALUES (%F) (%F :FOO 123))) NIL 123)
;; Loading (DEFTEST FUNCTION.22 (FLET ((%F (&KEY FOO &ALLOW-OTHER-KEYS) FOO)) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO INTEGER) (:BAR T)) T) %F)) (VALUES (%F) (%F :FOO 123) (%F :BAR (QUOTE X)) (%F :FOO 12 :BAR (QUOTE Y)))) NIL 123 NIL 12)
;; Loading (DEFTEST FUNCTION.23 (FLET ((%F (&KEY FOO &ALLOW-OTHER-KEYS) FOO)) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO INTEGER) &ALLOW-OTHER-KEYS) T) %F)) (VALUES (%F) (%F :FOO 123) (%F :BAR (QUOTE X)) (%F :FOO 12 :BAR (QUOTE Y)))) NIL 123 NIL 12)
;; Loading (DEFTEST FUNCTION.24 (FLET ((%F (&REST R &KEY FOO BAR) (LIST R FOO BAR))) (DECLARE (FTYPE (FUNCTION (&REST SYMBOL &KEY (:FOO T) (:BAR T)) LIST) %F)) (VALUES (%F) (%F :FOO (QUOTE A)) (%F :BAR (QUOTE B)) (%F :BAR (QUOTE D) :FOO (QUOTE C)))) (NIL NIL NIL) ((:FOO A) A NIL) ((:BAR B) NIL B) ((:BAR D :FOO C) C D))
;; Loading (LOAD "functionp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/functionp.lsp C12676E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FUNCTIONP.1 (FUNCTIONP NIL) NIL)
;; Loading (DEFTEST FUNCTIONP.2 (FUNCTIONP (QUOTE IDENTITY)) NIL)
;; Loading (DEFTEST FUNCTIONP.3 (NOT (FUNCTIONP (FUNCTION IDENTITY))) NIL)
;; Loading (DEFTEST FUNCTIONP.4 (LOOP FOR X IN *CL-SYMBOL-NAMES* FOR S = (FIND-SYMBOL X "CL") FOR F = (AND (FBOUNDP S) (SYMBOL-FUNCTION S) (NOT (SPECIAL-OPERATOR-P S)) (NOT (MACRO-FUNCTION S)) (SYMBOL-FUNCTION S)) UNLESS (OR (NULL F) (FUNCTIONP F)) COLLECT X) NIL)
;; Loading (DEFTEST FUNCTIONP.5 (FUNCTIONP (QUOTE (SETF CAR))) NIL)
;; Loading (DEFTEST FUNCTIONP.6 (FUNCTIONP (QUOTE (LAMBDA (X) X))) NIL)
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFUN (SETF FUNCTIONP-7-ACCESSOR) (Y X) (SETF (CAR X) Y) Y))
;; Loading (DEFTEST FUNCTIONP.7 (NOT-MV (FUNCTIONP (FUNCTION (SETF FUNCTIONP-7-ACCESSOR)))) NIL)
;; Loading (DEFTEST FUNCTIONP.8 (NOT-MV (FUNCTIONP (FUNCTION (LAMBDA (X) X)))) NIL)
;; Loading (DEFTEST FUNCTIONP.9 (NOT-MV (FUNCTIONP (COMPILE NIL (QUOTE (LAMBDA (X) X))))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FUNCTIONP.10 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (NOT (AND (OR (NUMBERP X) (CHARACTERP X) (SYMBOLP X) (CONSP X) (TYPEP X (QUOTE ARRAY))) (FUNCTIONP X)))))) NIL)
;; Loading (DEFTEST FUNCTIONP.11 (FLET ((%F NIL NIL)) (FUNCTIONP (QUOTE %F))) NIL)
;; Loading (DEFTEST FUNCTIONP.12 (FLET ((%F NIL NIL)) (NOT-MV (FUNCTIONP (FUNCTION %F)))) NIL)
;; Loading (DEFTEST FUNCTIONP.ORDER.1 (LET ((I 0)) (VALUES (NOTNOT (FUNCTIONP (PROGN (INCF I) (FUNCTION CONS)))) I)) T 1)
;; Loading (DEFTEST FUNCTIONP.ERROR.1 (SIGNALS-ERROR (FUNCTIONP) PROGRAM-ERROR) T)
;; Loading (DEFTEST FUNCTIONP.ERROR.2 (SIGNALS-ERROR (FUNCTIONP (FUNCTION CONS) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "get-setf-expansion.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/get-setf-expansion.lsp 80B3FCF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST GET-SETF-EXPANSION.ERROR.1 (SIGNALS-ERROR (GET-SETF-EXPANSION) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-SETF-EXPANSION.ERROR.2 (SIGNALS-ERROR (GET-SETF-EXPANSION (QUOTE X) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-SETF-EXPANSION.1 (LET* ((FN (GENSYM)) (VALS (MULTIPLE-VALUE-LIST (GET-SETF-EXPANSION (LIST FN))))) (VALUES (LENGTH VALS) (FIRST VALS) (SECOND VALS) (LENGTH (THIRD VALS)) (BLOCK DONE (SUBST-IF NIL (FUNCTION (LAMBDA (TERM) (WHEN (EQUAL TERM (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SETF (SYSTEM.INTERNALS::BQ-COMMA FN))))) (RETURN-FROM DONE :GOOD)))) (FOURTH VALS))) (IF (EQUAL (FIFTH VALS) (LIST FN)) :GOOD (FIFTH VALS)))) 5 NIL NIL 1 :GOOD :GOOD)
;; Loading (DEFTEST GET-SETF-EXPANSION.2 (LET* ((FN (GENSYM)) (VALS (MULTIPLE-VALUE-LIST (GET-SETF-EXPANSION (LIST FN) NIL)))) (LENGTH VALS)) 5)
;; Loading (DEFTEST GET-SETF-EXPANSION.3 (LET* ((VAR (GENSYM)) (VALS (MULTIPLE-VALUE-LIST (GET-SETF-EXPANSION VAR)))) (LENGTH VALS)) 5)
;; Loading (LOAD "identity.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/identity.lsp 80BC3477>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST IDENTITY.1 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (EQLT X (CHECK-VALUES (IDENTITY X)))))) NIL)
;; Loading (DEFTEST IDENTITY.2 (LET ((X (ASH 1 100))) (EQLT X (CHECK-VALUES (IDENTITY X)))) T)
;; Loading (DEFTEST IDENTITY.3 (LET ((X 1.0)) (EQLT X (CHECK-VALUES (IDENTITY X)))) T)
;; Loading (DEFTEST IDENTITY.ORDER.1 (LET ((I 0)) (VALUES (IDENTITY (INCF I)) I)) 1 1)
;; Loading (DEFTEST IDENTITY.ERROR.1 (SIGNALS-ERROR (IDENTITY) PROGRAM-ERROR) T)
;; Loading (DEFTEST IDENTITY.ERROR.2 (SIGNALS-ERROR (IDENTITY (QUOTE A) (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (LOAD "if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/if.lsp 80BFDD27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST IF.1 (IF T 1 2) 1)
;; Loading (DEFTEST IF.2 (IF NIL 1 2) 2)
;; Loading (DEFTEST IF.3 (IF T (VALUES) (QUOTE A)))
;; Loading (DEFTEST IF.4 (IF NIL (QUOTE A)) NIL)
;; Loading (DEFTEST IF.5 (IF T (VALUES (QUOTE A) (QUOTE B) (QUOTE C)) (QUOTE D)) A B C)
;; Loading (DEFTEST IF.6 (IF NIL (QUOTE A) (VALUES (QUOTE B) (QUOTE C) (QUOTE D))) B C D)
;; Loading (DEFTEST IF.7 (IF NIL (QUOTE A) (VALUES)))
;; Loading (DEFTEST IF.8 (MACROLET ((%M (Z) Z)) (IF (EXPAND-IN-CURRENT-ENV (%M T)) :GOOD :BAD)) :GOOD)
;; Loading (DEFTEST IF.9 (MACROLET ((%M (Z) Z)) (IF (EXPAND-IN-CURRENT-ENV (%M NIL)) :BAD)) NIL)
;; Loading (DEFTEST IF.10 (MACROLET ((%M (Z) Z)) (IF (EXPAND-IN-CURRENT-ENV (%M T)) :GOOD)) :GOOD)
;; Loading (DEFTEST IF.11 (MACROLET ((%M (Z) Z)) (IF (EXPAND-IN-CURRENT-ENV (%M NIL)) :BAD :GOOD)) :GOOD)
;; Loading (DEFTEST IF.12 (MACROLET ((%M (Z) Z)) (FLET ((%F (X Y) (IF X (EXPAND-IN-CURRENT-ENV (%M Y))))) (DECLARE (NOTINLINE %F)) (VALUES (%F T :GOOD) (%F NIL :BAD)))) :GOOD NIL)
;; Loading (DEFTEST IF.13 (MACROLET ((%M (Z) Z)) (FLET ((%F (X Y Z) (IF X Y (EXPAND-IN-CURRENT-ENV (%M Z))))) (DECLARE (NOTINLINE %F)) (VALUES (%F T :GOOD :BAD) (%F NIL :BAD :GOOD)))) :GOOD :GOOD)
;; Loading (DEFTEST IF.ORDER.1 (LET ((I 0)) (VALUES (IF (= (INCF I) 1) (QUOTE T) NIL) I)) T 1)
;; Loading (LOAD "labels.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/labels.lsp 80C66707>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LABELS.1 (LABELS ((%F NIL 1)) (%F)) 1)
;; Loading (DEFTEST LABELS.2 (LABELS ((%F (X) X)) (%F 2)) 2)
;; Loading (DEFTEST LABELS.3 (LABELS ((%F (&REST ARGS) ARGS)) (%F (QUOTE A) (QUOTE B) (QUOTE C))) (A B C))
;; Loading (DEFTEST LABELS.4 (BLOCK %F (LABELS ((%F (&OPTIONAL (X (RETURN-FROM %F :GOOD))) NIL)) (%F) :BAD)) :GOOD)
;; Loading (DEFTEST LABELS.4A (BLOCK %F (LABELS ((%F (&KEY (X (RETURN-FROM %F :GOOD))) NIL)) (%F) :BAD)) :GOOD)
;; Loading (DEFTEST LABELS.5 (LABELS ((%F NIL (RETURN-FROM %F 15) 35)) (%F)) 15)
;; Loading (DEFTEST LABELS.6 (BLOCK %F (LABELS ((%F (&AUX (X (RETURN-FROM %F 10))) 20)) (%F) :BAD)) 10)
;; Loading (DEFTEST LABELS.7 (LABELS ((%F (X N) (COND ((EQL N 0) X) (T (%F (+ X N) (1- N)))))) (%F 0 10)) 55)
;; Loading (DEFTEST LABELS.7B (LABELS ((%F (X &AUX (B (%G X))) B) (%G (Y) (+ Y Y))) (%F 10)) 20)
;; Loading (DEFTEST LABELS.7C (LABELS ((%F (X &OPTIONAL (B (%G X))) B) (%G (Y) (+ Y Y))) (%F 10)) 20)
;; Loading (DEFTEST LABELS.7D (LABELS ((%F (X &KEY (B (%G X))) B) (%G (Y) (+ Y Y))) (%F 10)) 20)
;; Loading (DEFTEST LABELS.8 (LABELS ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F)) NIL 0 NIL)
;; Loading (DEFTEST LABELS.9 (LABELS ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :A 1)) 1 0 NIL)
;; Loading (DEFTEST LABELS.10 (LABELS ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :B 2)) NIL 2 T)
;; Loading (DEFTEST LABELS.11 (LABELS ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :B 2 :A 3)) 3 2 T)
;; Loading (DEFTEST LABELS.12 (SIGNALS-ERROR (LABELS ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :C 4)) PROGRAM-ERROR) T)
;; Loading (DEFTEST LABELS.13 (SIGNALS-ERROR (LABELS ((%F (&KEY A (B 0 B-P)) (VALUES A B (NOT (NOT B-P))))) (%F :A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST LABELS.14 (SIGNALS-ERROR (LABELS ((%F (A) A)) (%F)) PROGRAM-ERROR) T)
;; Loading (DEFTEST LABELS.15 (SIGNALS-ERROR (LABELS ((%F (A) A)) (%F 1 2)) PROGRAM-ERROR) T)
;; Loading (DEFTEST LABELS.16 (SIGNALS-ERROR (LABELS ((%F (&KEY A) A)) (%F (QUOTE (FOO)))) PROGRAM-ERROR) T)
;; Loading (DEFTEST LABELS.17 (LABELS (((SETF %F) (X Y) (SETF (CAR Y) X))) (LET ((Z (LIST 1 2))) (SETF (%F Z) (QUOTE A)) Z)) (A 2))
;; Loading (DEFTEST LABELS.18 (LABELS ((%F (X) (INCF X) (+ X X))) (%F 10)) 22)
;; Loading (DEFTEST LABELS.19 (LABELS ((%F (A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 D1 D2 D3 D4 D5 D6 D7 D8 D9 D10 E1 E2 E3 E4 E5 E6 E7 E8 E9 E10) (+ A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 D1 D2 D3 D4 D5 D6 D7 D8 D9 D10 E1 E2 E3 E4 E5 E6 E7 E8 E9 E10))) (%F 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50)) 1275)
;; Loading (DEFTEST LABELS.20 (LET* ((N (MIN (1- LAMBDA-PARAMETERS-LIMIT) 1024)) (VARS (LOOP REPEAT N COLLECT (GENSYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (EQLT (SYSTEM.INTERNALS::BQ-COMMA N) (LABELS ((%F (SYSTEM.INTERNALS::BQ-COMMA VARS) (+ (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN VARS)))) (%F (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR E IN VARS COLLECT 1)))))))) T)
;; Loading (DEFTEST LABELS.21 (LABELS ((%F (X) (DECLARE (TYPE FIXNUM X)) "Add one to the fixnum x." (1+ X))) (DECLARE (FTYPE (FUNCTION (FIXNUM) INTEGER) %F)) (%F 10)) 11)
;; Loading (DEFTEST LABELS.22 (LABELS ((:FOO NIL 10) (:BAR NIL (1+ (:FOO)))) (:BAR)) 11)
;; Loading (DEFTEST LABELS.23 (LABELS ((:FOO NIL 10) (:BAR NIL (1+ (FUNCALL (FUNCTION :FOO))))) (FUNCALL (FUNCTION :BAR))) 11)
;; Loading (DEFTEST LABELS.24 (LOOP FOR S IN *CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (LABELS (((SYSTEM.INTERNALS::BQ-COMMA S) (X) (FOO (1- X))) (FOO (Y) (IF (<= Y 0) (QUOTE A) ((SYSTEM.INTERNALS::BQ-COMMA S) (1- Y))))) ((SYSTEM.INTERNALS::BQ-COMMA S) 10)))) UNLESS (EQ (EVAL FORM) (QUOTE A)) COLLECT S) NIL)
;; Loading (DEFTEST LABELS.25 (LOOP FOR S IN *CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (LABELS (((SYSTEM.INTERNALS::BQ-COMMA S) (X) (FOO (1- X))) (FOO (Y) (IF (<= Y 0) (QUOTE A) ((SYSTEM.INTERNALS::BQ-COMMA S) (1- Y))))) (DECLARE (FTYPE (FUNCTION (INTEGER) SYMBOL) FOO (SYSTEM.INTERNALS::BQ-COMMA S))) ((SYSTEM.INTERNALS::BQ-COMMA S) 10)))) UNLESS (EQ (EVAL FORM) (QUOTE A)) COLLECT S) NIL)
;; Loading (DEFTEST LABELS.26 (LOOP FOR S IN *CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (LABELS (((SETF (SYSTEM.INTERNALS::BQ-COMMA S)) (&REST ARGS) (DECLARE (IGNORE ARGS)) (QUOTE A))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA S)) 10)))) UNLESS (EQ (EVAL FORM) (QUOTE A)) COLLECT S) NIL)
;; Loading (DEFTEST LABELS.27 (BLOCK DONE (TAGBODY (LABELS ((%F NIL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD)))) (%F)) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST LABELS.28 (LABELS ((%F (&KEY (A (QUOTE WRONG))) A)) (%F :A NIL)) NIL)
;; Loading (DEFTEST LABELS.29 (LABELS ((%F (&KEY (A (QUOTE WRONG) A-P)) (LIST A (NOT A-P)))) (%F :A NIL)) (NIL NIL))
;; Loading (DEFTEST LABELS.30 (LABELS ((%F (&KEY ((:A B) (QUOTE WRONG))) B)) (%F :A NIL)) NIL)
;; Loading (DEFTEST LABELS.31 (LABELS ((%F (&KEY ((:A B) (QUOTE WRONG) PRESENT?)) (LIST B (NOT PRESENT?)))) (%F :A NIL)) (NIL NIL))
;; Loading (DEFTEST LABELS.32 (LABELS ((%F (&KEY) (QUOTE GOOD))) (%F :ALLOW-OTHER-KEYS NIL)) GOOD)
;; Loading (DEFTEST LABELS.33 (LABELS ((%F (&KEY) (QUOTE GOOD))) (%F :ALLOW-OTHER-KEYS T)) GOOD)
;; Loading (DEFTEST LABELS.34 (LABELS ((%F (&KEY) (QUOTE GOOD))) (%F :ALLOW-OTHER-KEYS T :A 1 :B 2)) GOOD)
;; Loading (DEFTEST LABELS.35 (LABELS ((%F (&KEY &ALLOW-OTHER-KEYS) (QUOTE GOOD))) (%F :A 1 :B 2)) GOOD)
;; Loading (DEFTEST LABELS.36 (SIGNALS-ERROR (LABELS ((%F (&KEY) :BAD)) (%F NIL NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST LABELS.37 (LABELS ((F NIL (QUOTE FOO))) (EQT (FUNCTION F) (FUNCTION F))) T)
;; Loading (DEFTEST LABELS.38 (LABELS ((F NIL (QUOTE FOO))) (DESTRUCTURING-BIND (X Y) (LOOP REPEAT 2 COLLECT (FUNCTION F)) (EQLT X Y))) T)
;; Loading (DEFTEST LABELS.39 (LABELS ((F NIL (FUNCTION F))) (EQLT (F) (FUNCTION F))) T)
;; Loading (DEFTEST LABELS.40 (LET ((X (LABELS ((F NIL (FUNCTION F))) (FUNCTION F)))) (EQLT X (FUNCALL X))) T)
;; Loading (DEFTEST LABELS.41 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LABELS ((%F (&OPTIONAL (Y X)) (DECLARE (SPECIAL X)) Y)) (%F)))) :GOOD)
;; Loading (DEFTEST LABELS.42 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LABELS ((%F (&KEY (Y X)) (DECLARE (SPECIAL X)) Y)) (%F)))) :GOOD)
;; Loading (DEFTEST LABELS.43 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LABELS NIL (DECLARE (SPECIAL X))) X)) :GOOD)
;; Loading (DEFTEST LABELS.44 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LABELS ((%F NIL (DECLARE (SPECIAL X))))) X)) :GOOD)
;; Loading (DEFTEST LABELS.45 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LABELS ((%F NIL (DECLARE (SPECIAL X)))) X))) :GOOD)
;; Loading (DEFTEST LABELS.46 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LABELS ((%F (&AUX (Y X)) (DECLARE (SPECIAL X)) Y)) (%F)))) :GOOD)
;; Loading (DEFTEST LABELS.47 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LABELS ((%F NIL X)) (DECLARE (SPECIAL X)) (%F)))) :GOOD)
;; Loading (DEFTEST LABELS.48 (MACROLET ((%M (Z) Z)) (LABELS NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (DEFTEST LABELS.49 (MACROLET ((%M (Z) Z)) (LABELS ((%F NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) (%F))) :GOOD)
;; Loading (DEFUN LABELS.50 NIL :BAD)
;; Loading (DEFTEST LABELS.50 (LABELS ((LABELS.50 NIL :GOOD)) (LABELS.50)) :GOOD)
;; Loading (DEFMACRO LABELS.51 NIL :BAD)
;; Loading (DEFTEST LABELS.51 (LABELS ((LABELS.51 NIL :GOOD)) (LABELS.51)) :GOOD)
;; Loading (DEFINE-COMPILER-MACRO LABELS.52 (&WHOLE FORM) :BAD)
;; Loading (DEFTEST LABELS.52 (LABELS ((LABELS.52 NIL :GOOD)) (LABELS.52)) :GOOD)
;; Loading (LOAD "lambda-list-keywords.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/lambda-list-keywords.lsp 80E89A17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LAMBDA-LIST-KEYWORDS.1 (NOT-MV (BOUNDP (QUOTE LAMBDA-LIST-KEYWORDS))) NIL)
;; Loading (DEFTEST LAMBDA-LIST-KEYWORDS.2 (NOT-MV (CONSTANTP (QUOTE LAMBDA-LIST-KEYWORDS))) NIL)
;; Loading (DEFTEST LAMBDA-LIST-KEYWORDS.3 (AND (CONSP LAMBDA-LIST-KEYWORDS) (NOT-MV (SET-DIFFERENCE (QUOTE (&ALLOW-OTHER-KEYS &AUX &BODY &ENVIRONMENT &KEY &OPTIONAL &REST &WHOLE)) LAMBDA-LIST-KEYWORDS))) T)
;; Loading (DEFTEST LAMBDA-LIST-KEYWORDS.5 (NOTEVERY (FUNCTION (LAMBDA (SYM) (AND (SYMBOLP SYM) (LET ((NAME (SYMBOL-NAME SYM))) (AND (> (LENGTH NAME) 0) (EQL (AREF NAME 0) #\&)))))) LAMBDA-LIST-KEYWORDS) NIL)
;; Loading (LOAD "lambda-parameters-limit.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/lambda-parameters-limit.lsp 80ED1217>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LAMBDA-PARAMETERS-LIMIT.1 (NOT (TYPEP LAMBDA-PARAMETERS-LIMIT (QUOTE INTEGER))) NIL)
;; Loading (DEFTEST LAMBDA-PARAMETERS-LIMIT.2 (< LAMBDA-PARAMETERS-LIMIT 50) NIL)
;; Loading (LOAD "let.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/let.lsp 80EF75B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LET.1 (LET ((X 0)) X) 0)
;; Loading (DEFTEST LET.2 (LET ((X 0) (Y 1)) (VALUES X Y)) 0 1)
;; Loading (DEFTEST LET.3 (LET ((X 0) (Y 1)) (DECLARE (SPECIAL X Y)) (VALUES X Y)) 0 1)
;; Loading (DEFTEST LET.4 (LET ((X 0)) (LET ((X 1)) X)) 1)
;; Loading (DEFTEST LET.5 (LET ((X 0)) (LET ((#:X 1)) X)) 0)
;; Loading (DEFTEST LET.6 (LET ((X 0)) (DECLARE (SPECIAL X)) (LET ((X 1)) (VALUES X (LOCALLY (DECLARE (SPECIAL X)) X)))) 1 0)
;; Loading (DEFTEST LET.7 (LET ((X (QUOTE (A B C)))) (DECLARE (DYNAMIC-EXTENT X)) X) (A B C))
;; Loading (DEFTEST LET.9 (LET (X Y Z) (VALUES X Y Z)) NIL NIL NIL)
;; Loading (DEFTEST LET.11 (LET ((X 1)) (LIST X (LET (X) (DECLARE (SPECIAL X)) X) X)) (1 NIL 1))
;; Loading (DEFTEST LET.14 (LET* ((N 100) (VARS (MAPCAR (FUNCTION GENSYM) (MAKE-LIST N :INITIAL-ELEMENT "G"))) (EXPR (SYSTEM.INTERNALS::BACKQUOTE (LET (SYSTEM.INTERNALS::BQ-COMMA (LET ((I 0)) (MAPCAR (FUNCTION (LAMBDA (V) (LIST V (INCF I)))) VARS))) (SYSTEM.INTERNALS::BQ-COMMA (LET ((SUMEXPR 0)) (DOLIST (V VARS) (SETQ SUMEXPR (SYSTEM.INTERNALS::BACKQUOTE (+ (SYSTEM.INTERNALS::BQ-COMMA V) (SYSTEM.INTERNALS::BQ-COMMA SUMEXPR))))) SUMEXPR))))) (VAL (EVAL EXPR))) (OR (EQLT VAL (/ (* N (1+ N)) 2)) (LIST VAL))) T)
;; Loading (DEFTEST LET.15 (LOOP FOR S IN *CL-NON-VARIABLE-CONSTANT-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (LET (((SYSTEM.INTERNALS::BQ-COMMA S) 17)) (SYSTEM.INTERNALS::BQ-COMMA S)))) UNLESS (EQL (EVAL FORM) 17) COLLECT S) NIL)
;; Loading (DEFTEST LET.16 (BLOCK DONE (TAGBODY (LET NIL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST LET.17 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LET ((Y X)) (DECLARE (SPECIAL X)) Y))) :GOOD)
;; Loading (DEFTEST LET.17A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LET ((Y X)) (DECLARE (SPECIAL X)) Y))))))) :GOOD)
;; Loading (DEFTEST LET.18 (LET ((FOO (QUOTE SPECIAL))) (DECLARE (SPECIAL FOO)) (LET ((FOO (QUOTE LEXICAL))) (LOCALLY (DECLARE (SPECIAL FOO))) FOO)) LEXICAL)
;; Loading (DEFTEST LET.19 (LOOP FOR K IN LAMBDA-LIST-KEYWORDS UNLESS (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA K) :FOO)) (SYSTEM.INTERNALS::BQ-COMMA K)))) :FOO) COLLECT K) NIL)
;; Loading (DEFTEST LET.20 (MACROLET ((%M (Z) Z)) (LET NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (DEFTEST LET.21 (MACROLET ((%M (Z) Z)) (LET ((X (EXPAND-IN-CURRENT-ENV (%M 1)))) (+ X X X))) 3)
;; Loading (LOAD "letstar.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/letstar.lsp 80FBA527>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LET*.1 (LET* ((X 0)) X) 0)
;; Loading (DEFTEST LET*.2 (LET* ((X 0) (Y 1)) (VALUES X Y)) 0 1)
;; Loading (DEFTEST LET*.3 (LET* ((X 0) (Y 1)) (DECLARE (SPECIAL X Y)) (VALUES X Y)) 0 1)
;; Loading (DEFTEST LET*.4 (LET* ((X 0)) (LET* ((X 1)) X)) 1)
;; Loading (DEFTEST LET*.5 (LET* ((X 0)) (LET* ((#:X 1)) X)) 0)
;; Loading (DEFTEST LET*.6 (LET* ((X 0)) (DECLARE (SPECIAL X)) (LET* ((X 1)) (VALUES X (LOCALLY (DECLARE (SPECIAL X)) X)))) 1 0)
;; Loading (DEFTEST LET*.7 (LET* ((X (QUOTE (A B C)))) (DECLARE (DYNAMIC-EXTENT X)) X) (A B C))
;; Loading (DEFTEST LET*.8 (LET* ((X 0) (X 1)) X) 1)
;; Loading (DEFTEST LET*.9 (LET* (X Y Z) (VALUES X Y Z)) NIL NIL NIL)
;; Loading (DEFTEST LET*.10 (LET* ((X 1) X) X) NIL)
;; Loading (DEFTEST LET*.11 (LET* ((X 1)) (LIST X (LET* (X X X) (DECLARE (SPECIAL X)) X) X)) (1 NIL 1))
;; Loading (DEFTEST LET*.12 (LET* ((X 1) (Y (1+ X)) (X (1+ Y)) (Z (+ X Y))) (VALUES X Y Z)) 3 2 5)
;; Loading (DEFTEST LET*.14 (LET* ((N 100) (VARS (MAPCAR (FUNCTION GENSYM) (MAKE-LIST N :INITIAL-ELEMENT "G"))) (EXPR (SYSTEM.INTERNALS::BACKQUOTE (LET* (SYSTEM.INTERNALS::BQ-COMMA (LET ((I 0)) (MAPCAR (FUNCTION (LAMBDA (V) (LIST V (INCF I)))) VARS))) (SYSTEM.INTERNALS::BQ-COMMA (LET ((SUMEXPR 0)) (DOLIST (V VARS) (SETQ SUMEXPR (SYSTEM.INTERNALS::BACKQUOTE (+ (SYSTEM.INTERNALS::BQ-COMMA V) (SYSTEM.INTERNALS::BQ-COMMA SUMEXPR))))) SUMEXPR))))) (VAL (EVAL EXPR))) (OR (EQLT VAL (/ (* N (1+ N)) 2)) (LIST VAL))) T)
;; Loading (DEFTEST LET*.15 (LOOP FOR S IN *CL-NON-VARIABLE-CONSTANT-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (LET* (((SYSTEM.INTERNALS::BQ-COMMA S) 17)) (SYSTEM.INTERNALS::BQ-COMMA S)))) UNLESS (EQL (EVAL FORM) 17) COLLECT S) NIL)
;; Loading (DEFTEST LET*.16 (BLOCK DONE (TAGBODY (LET NIL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST LET*.17 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LET* ((Y X)) (DECLARE (SPECIAL X)) Y))) :GOOD)
;; Loading (DEFTEST LET*.17A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (LET* ((Y X)) (DECLARE (SPECIAL X)) Y))))))) :GOOD)
;; Loading (DEFTEST LET*.18 (LET ((X :BAD1) (Z :BAD2)) (DECLARE (SPECIAL X Z)) (LET ((X :GOOD) (Z :GOOD)) (LET* ((Y X) (W Z)) (DECLARE (SPECIAL X)) (VALUES Y W)))) :GOOD :GOOD)
;; Loading (DEFTEST LET*.19 (LET ((FOO (QUOTE SPECIAL))) (DECLARE (SPECIAL FOO)) (LET* ((FOO (QUOTE LEXICAL))) (LOCALLY (DECLARE (SPECIAL FOO))) FOO)) LEXICAL)
;; Loading (DEFTEST LET*.20 (LOOP FOR K IN LAMBDA-LIST-KEYWORDS UNLESS (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET* (((SYSTEM.INTERNALS::BQ-COMMA K) :FOO)) (SYSTEM.INTERNALS::BQ-COMMA K)))) :FOO) COLLECT K) NIL)
;; Loading (DEFTEST LET*.21 (MACROLET ((%M (Z) Z)) (LET* NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (DEFTEST LET*.22 (MACROLET ((%M (Z) Z)) (LET* ((X (EXPAND-IN-CURRENT-ENV (%M 1)))) (+ X X X))) 3)
;; Loading (DEFTEST LET*.23 (MACROLET ((%M (Z) Z)) (LET* ((X (EXPAND-IN-CURRENT-ENV (%M 1))) (Y (EXPAND-IN-CURRENT-ENV (%M 2)))) (+ X Y))) 3)
;; Loading (LOAD "macrolet.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/macrolet.lsp 81097CA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MACROLET.1 (LET ((Z (LIST 3 4))) (MACROLET ((%M (X) (SYSTEM.INTERNALS::BACKQUOTE (CAR (SYSTEM.INTERNALS::BQ-COMMA X))))) (LET ((Y (LIST 1 2))) (VALUES (%M Y) (%M Z))))) 1 3)
;; Loading (DEFTEST MACROLET.2 (LET ((Z (LIST 3 4))) (MACROLET ((%M (X) (SYSTEM.INTERNALS::BACKQUOTE (CAR (SYSTEM.INTERNALS::BQ-COMMA X))))) (LET ((Y (LIST 1 2))) (VALUES (SETF (%M Y) 6) (SETF (%M Z) (QUOTE A)) Y Z)))) 6 A (6 2) (A 4))
;; Loading (DEFTEST MACROLET.3 (MACROLET ((%M (W) (SYSTEM.INTERNALS::BACKQUOTE (CADR (SYSTEM.INTERNALS::BQ-COMMA W))))) (LET ((Z (LIST 3 4))) (MACROLET ((%M (X) (SYSTEM.INTERNALS::BACKQUOTE (CAR (SYSTEM.INTERNALS::BQ-COMMA X))))) (LET ((Y (LIST 1 2))) (VALUES (%M Y) (%M Z) (SETF (%M Y) 6) (SETF (%M Z) (QUOTE A)) Y Z))))) 1 3 6 A (6 2) (A 4))
;; Loading (DEFTEST MACROLET.4 (LET ((X NIL)) (MACROLET ((%M (&WHOLE W ARG) (SYSTEM.INTERNALS::BACKQUOTE (PROGN (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA W))) (SYSTEM.INTERNALS::BQ-COMMA ARG))))) (VALUES (%M 1) X))) 1 (%M 1))
;; Loading (DEFTEST MACROLET.5 (LET ((X NIL)) (MACROLET ((%M ((&WHOLE W ARG)) (SYSTEM.INTERNALS::BACKQUOTE (PROGN (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA W))) (SYSTEM.INTERNALS::BQ-COMMA ARG))))) (VALUES (%M (1)) X))) 1 (1))
;; Loading (DEFTEST MACROLET.6 (LET ((X NIL)) (MACROLET ((%M (&KEY (A (QUOTE XXX)) B) (SYSTEM.INTERNALS::BACKQUOTE (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA A)))))) (VALUES (%M :A FOO) X (%M :B BAR) X))) FOO FOO XXX XXX)
;; Loading (DEFTEST MACROLET.7 (LET ((X NIL)) (MACROLET ((%M ((&KEY A B)) (SYSTEM.INTERNALS::BACKQUOTE (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA A)))))) (VALUES (%M (:A FOO)) X (%M (:B BAR)) X))) FOO FOO NIL NIL)
;; Loading (DEFTEST MACROLET.8 (LET ((X NIL)) (MACROLET ((%M ((&KEY (A 10) B)) (SYSTEM.INTERNALS::BACKQUOTE (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA A)))))) (VALUES (%M (:A FOO)) X (%M (:B BAR)) X))) FOO FOO 10 10)
;; Loading (DEFTEST MACROLET.9 (LET ((X NIL)) (MACROLET ((%M (&KEY (A (QUOTE XXX) A-P) B) (SYSTEM.INTERNALS::BACKQUOTE (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (LIST A (NOT (NOT A-P))))))))) (VALUES (%M :A FOO) X (%M :B BAR) X))) (FOO T) (FOO T) (XXX NIL) (XXX NIL))
;; Loading (DEFTEST MACROLET.10 (LET ((X NIL)) (MACROLET ((%M (B &REST A) (SYSTEM.INTERNALS::BACKQUOTE (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA A)))))) (VALUES (%M A1 A2) X))) (A2) (A2))
;; Loading (DEFTEST MACROLET.11 (LET ((X NIL)) (MACROLET ((%M ((B &REST A)) (SYSTEM.INTERNALS::BACKQUOTE (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA A)))))) (VALUES (%M (A1 A2)) X))) (A2) (A2))
;; Loading (DEFTEST MACROLET.12 (LET ((X NIL)) (MACROLET ((%M (&WHOLE W B &REST A) (SYSTEM.INTERNALS::BACKQUOTE (SETQ X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (LIST A W))))))) (VALUES (%M A1 A2) X))) ((A2) (%M A1 A2)) ((A2) (%M A1 A2)))
;; Loading (DEFTEST MACROLET.13 (SYMBOL-MACROLET ((A B)) (MACROLET ((FOO (X &ENVIRONMENT ENV) (LET ((Y (MACROEXPAND X ENV))) (IF (EQ Y (QUOTE A)) 1 2)))) (FOO A))) 2)
;; Loading (DEFTEST MACROLET.14 (SYMBOL-MACROLET ((A B)) (MACROLET ((FOO (X &ENVIRONMENT ENV) (LET ((Y (MACROEXPAND-1 X ENV))) (IF (EQ Y (QUOTE A)) 1 2)))) (FOO A))) 2)
;; Loading (DEFTEST MACROLET.15 (MACROLET ((NIL NIL (QUOTE (QUOTE A)))) (NIL)) A)
;; Loading (DEFTEST MACROLET.16 (LOOP FOR S IN *CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (MACROLET (((SYSTEM.INTERNALS::BQ-COMMA S) NIL (QUOTE (QUOTE A)))) ((SYSTEM.INTERNALS::BQ-COMMA S))))) UNLESS (EQ (EVAL FORM) (QUOTE A)) COLLECT S) NIL)
;; Loading (DEFTEST MACROLET.17 (MACROLET ((%M (&KEY (A T)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA A))))) (%M :A NIL)) NIL)
;; Loading (DEFTEST MACROLET.18 (MACROLET ((%M (&KEY (A T A-P)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA (NOTNOT A-P))))))) (%M :A NIL)) (NIL T))
;; Loading (DEFTEST MACROLET.19 (MACROLET ((%M (X &OPTIONAL Y) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y)))))) (VALUES (%M 1) (%M 2 3))) (1 NIL) (2 3))
;; Loading (DEFTEST MACROLET.20 (MACROLET ((%M (X &OPTIONAL (Y (QUOTE A))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y)))))) (VALUES (%M 1) (%M 2 3))) (1 A) (2 3))
;; Loading (DEFTEST MACROLET.21 (MACROLET ((%M (X &OPTIONAL (Y (QUOTE A) Y-P)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y) (SYSTEM.INTERNALS::BQ-COMMA Y-P)))))) (VALUES (%M 1) (%M 2 3))) (1 A NIL) (2 3 T))
;; Loading (DEFTEST MACROLET.22 (MACROLET ((%M (X &OPTIONAL ((Y Z) (QUOTE (2 3)))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y) (SYSTEM.INTERNALS::BQ-COMMA Z)))))) (VALUES (%M A) (%M A (B C)))) (A 2 3) (A B C))
;; Loading (DEFTEST MACROLET.22A (MACROLET ((%M (X &OPTIONAL ((Y Z) (QUOTE (2 3)) Y-Z-P)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y) (SYSTEM.INTERNALS::BQ-COMMA Z) (SYSTEM.INTERNALS::BQ-COMMA Y-Z-P)))))) (VALUES (%M A) (%M A (B C)))) (A 2 3 NIL) (A B C T))
;; Loading (DEFTEST MACROLET.23 (MACROLET ((%M (&REST Y) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA Y))))) (%M 1 2 3)) (1 2 3))
;; Loading (DEFTEST MACROLET.24 (MACROLET ((%M (&REST (X Y Z)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y) (SYSTEM.INTERNALS::BQ-COMMA Z)))))) (%M 1 2 3)) (1 2 3))
;; Loading (DEFTEST MACROLET.25 (MACROLET ((%M (&BODY (X Y Z)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA Y) (SYSTEM.INTERNALS::BQ-COMMA Z)))))) (%M 1 2 3)) (1 2 3))
;; Loading (DEFTEST MACROLET.26 (MACROLET ((%M (&KEY ((:A B))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA B))))) (VALUES (%M) (%M :A X))) NIL X)
;; Loading (DEFTEST MACROLET.27 (MACROLET ((%M (&KEY ((:A (B C)))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA C) (SYSTEM.INTERNALS::BQ-COMMA B)))))) (%M :A (1 2))) (2 1))
;; Loading (DEFTEST MACROLET.28 (MACROLET ((%M (&KEY ((:A (B C)) (QUOTE (3 4)))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA C) (SYSTEM.INTERNALS::BQ-COMMA B)))))) (VALUES (%M :A (1 2)) (%M :A (1 2) :A (10 11)) (%M))) (2 1) (2 1) (4 3))
;; Loading (DEFTEST MACROLET.29 (MACROLET ((%M (&KEY A (B A)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B)))))) (VALUES (%M) (%M :A 1) (%M :B 2) (%M :A 3 :B 4) (%M :B 5 :A 6) (%M :A 7 :A 8) (%M :A 9 :B NIL) (%M :A 10 :B NIL :B 11))) (NIL NIL) (1 1) (NIL 2) (3 4) (6 5) (7 7) (9 NIL) (10 NIL))
;; Loading (DEFTEST MACROLET.30 (MACROLET ((%M ((&KEY A) &KEY (B A)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B)))))) (VALUES (%M NIL) (%M (:A 1)) (%M NIL :B 2) (%M (:A 3) :B 4) (%M (:A 7 :A 8)) (%M (:A 9) :B NIL) (%M (:A 10) :B NIL :B 11))) (NIL NIL) (1 1) (NIL 2) (3 4) (7 7) (9 NIL) (10 NIL))
;; Loading (DEFTEST MACROLET.31 (MACROLET ((%M (&KEY ((:A (B C)) (QUOTE (3 4)) A-P)) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA (NOTNOT A-P)) (SYSTEM.INTERNALS::BQ-COMMA C) (SYSTEM.INTERNALS::BQ-COMMA B)))))) (VALUES (%M :A (1 2)) (%M :A (1 2) :A (10 11)) (%M))) (T 2 1) (T 2 1) (NIL 4 3))
;; Loading (DEFTEST MACROLET.32 (MACROLET ((%M (&KEY A B C) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B) (SYSTEM.INTERNALS::BQ-COMMA C)))))) (VALUES (%M :ALLOW-OTHER-KEYS NIL) (%M :A 1 :ALLOW-OTHER-KEYS NIL) (%M :ALLOW-OTHER-KEYS T) (%M :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T) (%M :ALLOW-OTHER-KEYS T :C 1 :B 2 :A 3) (%M :ALLOW-OTHER-KEYS NIL :C 1 :B 2 :A 3))) (NIL NIL NIL) (1 NIL NIL) (NIL NIL NIL) (NIL NIL NIL) (3 2 1) (3 2 1))
;; Loading (DEFTEST MACROLET.33 (MACROLET ((%M (&KEY ALLOW-OTHER-KEYS) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ALLOW-OTHER-KEYS))))) (VALUES (%M) (%M :ALLOW-OTHER-KEYS NIL) (%M :ALLOW-OTHER-KEYS T :FOO T))) NIL NIL T)
;; Loading (DEFTEST MACROLET.34 (MACROLET ((%M (&KEY &ALLOW-OTHER-KEYS) :GOOD)) (VALUES (%M) (%M :FOO T) (%M :ALLOW-OTHER-KEYS NIL :FOO T))) :GOOD :GOOD :GOOD)
;; Loading (DEFTEST MACROLET.35 (MACROLET ((%M (&KEY A B &ALLOW-OTHER-KEYS) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B)))))) (VALUES (%M :A 1) (%M :FOO T :B 2) (%M :ALLOW-OTHER-KEYS NIL :A 1 :FOO T :B 2))) (1 NIL) (NIL 2) (1 2))
;; Loading (DEFTEST MACROLET.36 (MACROLET ((%M (&WHOLE (M A B) C D) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA M) (SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B) (SYSTEM.INTERNALS::BQ-COMMA C) (SYSTEM.INTERNALS::BQ-COMMA D)))))) (%M 1 2)) (%M 1 2 1 2))
;; Loading (DEFTEST MACROLET.37 (MACROLET ((%F NIL :BAD)) (FLET ((%F NIL :GOOD)) (%F))) :GOOD)
;; Loading (DEFTEST MACROLET.38 (MACROLET ((FOO NIL 1)) (MACROLET ((%F (&OPTIONAL (X (MACROEXPAND (QUOTE (FOO)) ENV)) &ENVIRONMENT ENV) X)) (%F))) 1)
;; Loading (DEFTEST MACROLET.39 (MACROLET ((%M (NIL) :GOOD)) (%M NIL)) :GOOD)
;; Loading (DEFTEST MACROLET.40 (MACROLET ((%X NIL T)) (DECLARE (OPTIMIZE))) NIL)
;; Loading (DEFTEST MACROLET.41 (MACROLET ((%X NIL T)) (DECLARE (OPTIMIZE)) (DECLARE (NOTINLINE IDENTITY))) NIL)
;; Loading (DEFTEST MACROLET.42 (MACROLET ((%X NIL T)) (DECLARE (OPTIMIZE)) (%X)) T)
;; Loading (DEFTEST MACROLET.43 (LET ((*X-IN-MACROLET.43* NIL)) (DECLARE (SPECIAL *X-IN-MACROLET.43*)) (LET ((*F* (FUNCTION (LAMBDA NIL *X-IN-MACROLET.43*)))) (DECLARE (SPECIAL *F*)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%M (*X-IN-MACROLET.43*) (DECLARE (SPECIAL *F*)) (FUNCALL *F*))) (%M T)))))) NIL)
;; Loading (DEFTEST MACROLET.44 (LET ((*X-IN-MACROLET.44* NIL)) (DECLARE (SPECIAL *X-IN-MACROLET.44*)) (LET ((*F* (FUNCTION (LAMBDA NIL *X-IN-MACROLET.44*)))) (DECLARE (SPECIAL *F*)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%M (*X-IN-MACROLET.44*) (DECLARE (SPECIAL *F* *X-IN-MACROLET.44*)) (FUNCALL *F*))) (%M T)))))) T)
;; Loading (DEFTEST MACROLET.45 (LET ((*X-IN-MACROLET.45* NIL)) (DECLARE (SPECIAL *X-IN-MACROLET.45*)) (LET ((*F* (FUNCTION (LAMBDA NIL *X-IN-MACROLET.45*)))) (DECLARE (SPECIAL *F*)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%M ((*X-IN-MACROLET.45*)) (DECLARE (SPECIAL *F* *X-IN-MACROLET.45*)) (FUNCALL *F*))) (%M (T))))))) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MACROLET.46 (MACROLET ((%M (Z) Z)) (MACROLET NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (DEFTEST MACROLET.47 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (MACROLET NIL (DECLARE (SPECIAL X)) X))) :GOOD)
;; Loading (DEFTEST MACROLET.48 (LET ((X :GOOD)) (LET ((Y :BAD)) (MACROLET NIL (DECLARE (IGNORE Y)) X))) :GOOD)
;; Loading (DEFTEST MACROLET.49 (LET ((X :GOOD)) (LET ((Y :BAD)) (MACROLET NIL (DECLARE (IGNORABLE Y)) X))) :GOOD)
;; Loading (DEFMACRO MACROLET.50 NIL :BAD)
;; Loading (DEFTEST MACROLET.50 (MACROLET ((MACROLET.50 NIL :GOOD)) (MACROLET.50)) :GOOD)
;; Loading (DEFUN MACROLET.51 NIL :BAD)
;; Loading (DEFTEST MACROLET.51 (MACROLET ((MACROLET.51 NIL :GOOD)) (MACROLET.51)) :GOOD)
;; Loading (DEFINE-COMPILER-MACRO MACROLET.52 (&WHOLE FORM) :BAD)
;; Loading (DEFTEST MACROLET.52 (MACROLET ((MACROLET.52 NIL :GOOD)) (MACROLET.52)) :GOOD)
;; Loading (LOAD "multiple-value-bind.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/multiple-value-bind.lsp C0B70867>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.1 (MULTIPLE-VALUE-BIND (X Y Z) (VALUES 1 2 3) (DECLARE (TYPE INTEGER X)) (DECLARE (TYPE INTEGER Y)) (DECLARE (TYPE INTEGER Z)) (LIST Z Y X)) (3 2 1))
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.2 (MULTIPLE-VALUE-BIND (X Y Z) (VALUES 1 2 3) (LET ((X 4)) (LIST X Y Z))) (4 2 3))
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.3 (MULTIPLE-VALUE-BIND (X Y Z) (VALUES 1 2 3 4 5 6) (LIST X Y Z)) (1 2 3))
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.4 (MULTIPLE-VALUE-BIND (X Y Z) (VALUES 1 2) (LIST X Y Z)) (1 2 NIL))
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.5 (MULTIPLE-VALUE-BIND NIL (VALUES 1 2) (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) A B C)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.6 (MULTIPLE-VALUE-BIND (X Y Z) (VALUES) (LIST X Y Z)) (NIL NIL NIL))
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.7 (LET ((Z 0) X Y) (DECLARE (SPECIAL Z)) (VALUES (FLET ((%X NIL (SYMBOL-VALUE (QUOTE X))) (%Y NIL (SYMBOL-VALUE (QUOTE Y))) (%Z NIL (SYMBOL-VALUE (QUOTE Z)))) (MULTIPLE-VALUE-BIND (X Y Z) (VALUES 1 2 3) (DECLARE (SPECIAL X Y)) (LIST (%X) (%Y) (%Z)))) X Y Z)) (1 2 0) NIL NIL 0)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.8 (BLOCK NIL (TAGBODY (MULTIPLE-VALUE-BIND (X) NIL (GO 10) 10 (RETURN (QUOTE BAD))) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.9 (MULTIPLE-VALUE-BIND (X Y Z) :FOO (LIST X Y Z)) (:FOO NIL NIL))
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.10 (MULTIPLE-VALUE-BIND (X) :FOO X) :FOO)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.11 (MULTIPLE-VALUE-BIND NIL :FOO) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.12 (MULTIPLE-VALUE-BIND NIL (VALUES)) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.13 (MULTIPLE-VALUE-BIND NIL (VALUES 1 2 3 4 5)) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.14 (MACROLET ((%M (Z) Z)) (MULTIPLE-VALUE-BIND (X Y Z) (EXPAND-IN-CURRENT-ENV (%M (VALUES 1 2 3))) (LIST X Y Z))) (1 2 3))
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-BIND))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-BIND)) (QUOTE (MULTIPLE-VALUE-BIND NIL NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MULTIPLE-VALUE-BIND.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-BIND)) (QUOTE (MULTIPLE-VALUE-BIND NIL NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "multiple-value-call.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/multiple-value-call.lsp C0C1CBF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MULTIPLE-VALUE-CALL.1 (MULTIPLE-VALUE-CALL (FUNCTION +) (VALUES 1 2) (VALUES) 3 (VALUES 4 5 6)) 21)
;; Loading (DEFTEST MULTIPLE-VALUE-CALL.2 (MULTIPLE-VALUE-CALL (QUOTE LIST)) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-CALL.3 (MULTIPLE-VALUE-CALL (QUOTE LIST) (FLOOR 13 4)) (3 1))
;; Loading (DEFTEST MULTIPLE-VALUE-CALL.4 (MACROLET ((%M (Z) Z)) (MULTIPLE-VALUE-CALL (EXPAND-IN-CURRENT-ENV (%M (FUNCTION LIST))) (VALUES 1 2))) (1 2))
;; Loading (DEFTEST MULTIPLE-VALUE-CALL.5 (MACROLET ((%M (Z) Z)) (MULTIPLE-VALUE-CALL (QUOTE LIST) (EXPAND-IN-CURRENT-ENV (%M (VALUES 1 2))))) (1 2))
;; Loading (LOAD "multiple-value-prog1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/multiple-value-prog1.lsp C0C5BCC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.1 (MULTIPLE-VALUE-PROG1 NIL) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.2 (MULTIPLE-VALUE-PROG1 (QUOTE (A B C))) (A B C))
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.3 (MULTIPLE-VALUE-PROG1 (VALUES-LIST (QUOTE (A B C)))) A B C)
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.4 (MULTIPLE-VALUE-PROG1 (VALUES)))
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.5 (LET ((X 0) (Y 0)) (MULTIPLE-VALUE-PROG1 (VALUES X Y) (INCF X) (INCF Y 2))) 0 0)
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.6 (LET ((X 0) (Y 0)) (MULTIPLE-VALUE-CALL (FUNCTION LIST) (MULTIPLE-VALUE-PROG1 (VALUES X Y) (INCF X) (INCF Y 2)) X Y)) (0 0 1 2))
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.7 (LET ((X 0) (Y 0)) (MULTIPLE-VALUE-CALL (FUNCTION LIST) (MULTIPLE-VALUE-PROG1 (VALUES (INCF X) Y) (INCF X X) (INCF Y 10)) X Y)) (1 0 2 10))
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.8 (LET* ((N (MIN 100 MULTIPLE-VALUES-LIMIT))) (NOT-MV (LOOP FOR I FROM 0 BELOW N FOR X = (MAKE-INT-LIST I) ALWAYS (EQUALT (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MULTIPLE-VALUE-PROG1 (VALUES-LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ X)))) NIL)))) X)))) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.9 (LET ((X 0) (Y 0)) (VALUES (BLOCK FOO (MULTIPLE-VALUE-PROG1 (VALUES (INCF X) (INCF Y 2)) (RETURN-FROM FOO (QUOTE A)))) X Y)) A 1 2)
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.10 (BLOCK NIL (TAGBODY (MULTIPLE-VALUE-PROG1 (VALUES) (GO 10) 10 (RETURN (QUOTE BAD))) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.11 (MACROLET ((%M (Z) Z)) (MULTIPLE-VALUE-PROG1 (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (DEFTEST MULTIPLE-VALUE-PROG1.12 (MACROLET ((%M (Z) Z)) (MULTIPLE-VALUE-PROG1 :GOOD (EXPAND-IN-CURRENT-ENV (%M :FOO)))) :GOOD)
;; Loading (LOAD "multiple-value-setq.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/multiple-value-setq.lsp C0D07287>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.1 (LET ((X 1) (Y 2)) (VALUES (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-SETQ (X Y) (VALUES 3 4))) X Y)) (3) 3 4)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.2 (LET (X) (MULTIPLE-VALUE-SETQ (X) (VALUES 1 2)) X) 1)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.3 (LET (X) (SYMBOL-MACROLET ((Y X)) (MULTIPLE-VALUE-SETQ (Y) (VALUES 1 2)) X)) 1)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.4 (LET ((X (LIST NIL))) (SYMBOL-MACROLET ((Y (CAR X))) (MULTIPLE-VALUE-SETQ (Y) (VALUES 1 2)) X)) (1))
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.5 (LET ((I 0) (X (LIST NIL))) (SYMBOL-MACROLET ((Y (CAR (PROGN (INCF I) X)))) (MULTIPLE-VALUE-SETQ (Y) I)) X) (1))
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.6 (LET ((X (LIST NIL)) Z) (SYMBOL-MACROLET ((Y (CAR X))) (MULTIPLE-VALUE-SETQ (Y Z) (VALUES 1 2))) (VALUES X Z)) (1) 2)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.7 (LET ((X (LIST NIL)) (Z (LIST NIL))) (SYMBOL-MACROLET ((Y (CAR X)) (W (CAR Z))) (MULTIPLE-VALUE-SETQ (Y W) (VALUES 1 2))) (VALUES X Z)) (1) (2))
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.8 (LET ((X (LIST NIL)) (Z (LIST NIL)) (I 0)) (SYMBOL-MACROLET ((Y (CAR (PROGN (INCF I 3) X))) (W (CAR (PROGN (INCF I I) Z)))) (MULTIPLE-VALUE-SETQ (Y W) (VALUES I 10))) (VALUES X Z)) (6) (10))
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.9 (LET (X) (VALUES (MULTIPLE-VALUE-SETQ (X X) (VALUES 1 2)) X)) 1 2)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.10 (LET (X) (VALUES (MULTIPLE-VALUE-SETQ (X X) (VALUES 1)) X)) 1 NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.11 (LET ((X 1) (Y 2) (Z 3)) (MULTIPLE-VALUE-SETQ (X Y Z) (VALUES)) (VALUES X Y Z)) NIL NIL NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.12 (LET ((N (MIN 100 MULTIPLE-VALUES-LIMIT)) (VARS NIL) (RESULT NIL)) (LOOP FOR I FROM 1 BELOW N FOR FORM = (PROGN (PUSH (GENSYM) VARS) (PUSH I RESULT) (SYSTEM.INTERNALS::BACKQUOTE (LET (SYSTEM.INTERNALS::BQ-COMMA VARS) (AND (EQL (MULTIPLE-VALUE-SETQ (SYSTEM.INTERNALS::BQ-COMMA VARS) (VALUES-LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA RESULT)))) (SYSTEM.INTERNALS::BQ-COMMA (CAR RESULT))) (EQUAL (SYSTEM.INTERNALS::BQ-COMMA (MAKE-LIST-EXPR VARS)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA RESULT))))))) UNLESS (EVAL FORM) COLLECT (LIST I FORM))) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.13 (MULTIPLE-VALUE-SETQ NIL :GOOD) :GOOD)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.14 (MULTIPLE-VALUE-SETQ NIL (VALUES)) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.15 (MULTIPLE-VALUE-SETQ NIL (VALUES (QUOTE A) (QUOTE B))) A)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.16 (MACROLET ((%M (Z) Z)) (LET ((X :BAD)) (SYMBOL-MACROLET ((Z (EXPAND-IN-CURRENT-ENV (%M X)))) (MULTIPLE-VALUE-SETQ (Z) :GOOD)) X)) :GOOD)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.17 (MACROLET ((%M (Z) Z)) (LET ((X :BAD)) (VALUES (MULTIPLE-VALUE-SETQ (X) (EXPAND-IN-CURRENT-ENV (%M :GOOD))) X))) :GOOD :GOOD)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-SETQ))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-SETQ)) (QUOTE (MULTIPLE-VALUE-SETQ NIL NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MULTIPLE-VALUE-SETQ.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-SETQ)) (QUOTE (MULTIPLE-VALUE-SETQ NIL NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "multiple-value-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/multiple-value-list.lsp C0DE61A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.1 (MULTIPLE-VALUE-LIST (QUOTE A)) (A))
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.2 (MULTIPLE-VALUE-LIST (VALUES)) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.3 (MULTIPLE-VALUE-LIST (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (A B C D E))
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.4 (MULTIPLE-VALUE-LIST (VALUES (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (A))
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.5 (MULTIPLE-VALUE-LIST (VALUES (QUOTE A))) (A))
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.6 (MULTIPLE-VALUE-LIST (VALUES (QUOTE A) (QUOTE B))) (A B))
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.7 (NOT (LOOP FOR I FROM 0 BELOW (MIN MULTIPLE-VALUES-LIMIT 100) FOR X = (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) ALWAYS (EQUAL X (MULTIPLE-VALUE-LIST (VALUES-LIST X))))) NIL)
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.8 (MACROLET ((%M (Z) Z)) (MULTIPLE-VALUE-LIST (EXPAND-IN-CURRENT-ENV (%M 1)))) (1))
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.9 (MACROLET ((%M (Z) Z)) (MULTIPLE-VALUE-LIST (EXPAND-IN-CURRENT-ENV (%M (VALUES 1 2 3))))) (1 2 3))
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.ORDER.1 (LET ((I 0)) (VALUES (MULTIPLE-VALUE-LIST (INCF I)) I)) (1) 1)
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-LIST))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-LIST)) (QUOTE (MULTIPLE-VALUE-LIST NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MULTIPLE-VALUE-LIST.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-LIST)) (QUOTE (MULTIPLE-VALUE-LIST NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "nil.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nil.lsp C0E61027>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NIL.1 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (NOT (SUBTYPEP (TYPE-OF X) NIL))))) NIL)
;; Loading (DEFTEST NIL.2 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (SUBTYPEP NIL (TYPE-OF X))))) NIL)
;; Loading (DEFTEST NIL.3 (NOT-MV (CONSTANTP NIL)) NIL)
;; Loading (DEFTEST NIL.4 (CAR NIL) NIL)
;; Loading (DEFTEST NIL.5 (CDR NIL) NIL)
;; Loading (DEFTEST NIL.6 (EVAL NIL) NIL)
;; Loading (DEFTEST NIL.7 (SYMBOL-VALUE NIL) NIL)
;; Loading (DEFTEST NIL.8 (EQT NIL (QUOTE NIL)) T)
;; Loading (LOAD "not-and-null.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/not-and-null.lsp C0E993D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NULL.1 (NULL NIL) T)
;; Loading (DEFTEST NULL.2 (NULL T) NIL)
;; Loading (DEFTEST NULL.3 (SOME (FUNCTION (LAMBDA (X) (AND X (NULL X)))) *UNIVERSE*) NIL)
;; Loading (DEFTEST NULL.4 (NOT (SOME (FUNCTION NULL) (SYSTEM.INTERNALS::BACKQUOTE (1 A 1.2 "a" #\w (A) (SYSTEM.INTERNALS::BQ-COMMA *TERMINAL-IO*) (FUNCTION CAR) (MAKE-ARRAY (QUOTE (10))))))) T)
;; Loading (DEFTEST NULL.ERROR.1 (SIGNALS-ERROR (NULL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NULL.ERROR.2 (SIGNALS-ERROR (NULL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOT.1 (NOT NIL) T)
;; Loading (DEFTEST NOT.2 (NOT T) NIL)
;; Loading (DEFTEST NOT.3 (SOME (FUNCTION (LAMBDA (X) (AND X (NOT X)))) *UNIVERSE*) NIL)
;; Loading (DEFTEST NOT.4 (NOT (SOME (FUNCTION NOT) (SYSTEM.INTERNALS::BACKQUOTE (1 A 1.2 "a" #\w (A) (SYSTEM.INTERNALS::BQ-COMMA *TERMINAL-IO*) (FUNCTION CAR) (MAKE-ARRAY (QUOTE (10))))))) T)
;; Loading (DEFTEST NOT.ERROR.1 (SIGNALS-ERROR (NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOT.ERROR.2 (SIGNALS-ERROR (NOT NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "notany.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/notany.lsp C0EEB147>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NOTANY.1 (NOT-MV (NOTANY (FUNCTION IDENTITY) NIL)) NIL)
;; Loading (DEFTEST NOTANY.2 (NOT-MV (NOTANY (FUNCTION IDENTITY) #())) NIL)
;; Loading (DEFTEST NOTANY.3 (LET ((COUNT 0)) (VALUES (NOTANY (FUNCTION (LAMBDA (X) (INCF COUNT) (IF (>= X 10) X NIL))) (QUOTE (1 2 4 13 5 1))) COUNT)) NIL 4)
;; Loading (DEFTEST NOTANY.4 (NOT-MV (NOTANY (FUNCTION /=) (QUOTE (1 2 3 4)) (QUOTE (1 2 3 4 5)))) NIL)
;; Loading (DEFTEST NOTANY.5 (NOT-MV (NOTANY (FUNCTION /=) (QUOTE (1 2 3 4 5)) (QUOTE (1 2 3 4)))) NIL)
;; Loading (DEFTEST NOTANY.6 (NOTANY (FUNCTION /=) (QUOTE (1 2 3 4 5)) (QUOTE (1 2 3 4 6))) NIL)
;; Loading (DEFTEST NOTANY.7 (NOT-MV (NOTANY (FUNCTION (LAMBDA (X Y) (AND X Y))) (QUOTE (NIL T T NIL T)) #(T NIL NIL T NIL NIL))) NIL)
;; Loading (DEFTEST NOTANY.8 (LET* ((X (QUOTE (1))) (ARGS (LIST X))) (NOT (LOOP FOR I FROM 2 BELOW (1- (MIN 100 CALL-ARGUMENTS-LIMIT)) DO (PUSH X ARGS) ALWAYS (APPLY (FUNCTION NOTANY) (FUNCTION /=) ARGS)))) NIL)
;; Loading (DEFTEST NOTANY.9 (NOT-MV (NOTANY (FUNCTION ZEROP) #*11111111111111)) NIL)
;; Loading (DEFTEST NOTANY.10 (NOT-MV (NOTANY (FUNCTION ZEROP) #*)) NIL)
;; Loading (DEFTEST NOTANY.11 (NOTANY (FUNCTION ZEROP) #*1111111011111) NIL)
;; Loading (DEFTEST NOTANY.12 (NOT-MV (NOTANY (FUNCTION (LAMBDA (X) (NOT (EQL X #\a)))) "aaaaaaaa")) NIL)
;; Loading (DEFTEST NOTANY.13 (NOT-MV (NOTANY (FUNCTION (LAMBDA (X) (EQL X #\a))) "")) NIL)
;; Loading (DEFTEST NOTANY.14 (NOTANY (FUNCTION (LAMBDA (X) (NOT (EQL X #\a)))) "aaaaaabaaaa") NIL)
;; Loading (DEFTEST NOTANY.15 (NOT-MV (NOTANY (QUOTE NULL) (QUOTE (1 2 3 4)))) NIL)
;; Loading (DEFTEST NOTANY.16 (NOTANY (QUOTE NULL) (QUOTE (1 2 3 NIL 5))) NIL)
;; Loading (DEFTEST NOTANY.17 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTANY (FUNCTION PLUSP) V)))) (NIL NIL NIL NIL NIL T T T T T))
;; Loading (DEFTEST NOTANY.18 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP FOR J IN (QUOTE (0 0 0 0 1 2 3 4 5 6)) COLLECT (MOD J (ASH 1 I))) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTANY (FUNCTION PLUSP) V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) COLLECT I) NIL)
;; Loading (DEFTEST NOTANY.19 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTANY (FUNCTION MINUSP) V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) COLLECT I) NIL)
;; Loading (DEFTEST NOTANY.20 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTANY (FUNCTION DIGIT-CHAR-P) V)))) (NIL NIL NIL NIL NIL T T T T T))
;; Loading (DEFTEST NOTANY.21 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTANY (FUNCTION DIGIT-CHAR-P) V)))) (NIL NIL NIL NIL NIL T T T T T))
;; Loading (DEFTEST NOTANY.22 (LET ((V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (NOTNOT (NOTANY (FUNCTION DIGIT-CHAR-P) V)) (SETF (AREF V 2) #\0) (NOTANY (FUNCTION DIGIT-CHAR-P) V))) T #\0 NIL)
;; Loading (DEFTEST NOTANY.23 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COERCE X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) WHEN (NOTANY (FUNCTION ZEROP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST NOTANY.24 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :FILL-POINTER 6 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COERCE X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) UNLESS (NOTANY (FUNCTION ZEROP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST NOTANY.25 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) FOR V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COMPLEX X (COERCE X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (NOTANY (COMPLEMENT (FUNCTION COMPLEXP)) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST NOTANY.26 (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (NOTANY (FUNCTION ODDP) V1) (NOTNOT (NOTANY (FUNCTION ODDP) V2)))) NIL T)
;; Loading (DEFTEST NOTANY.27 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (NOTANY (QUOTE ODDP) V1)) (NOTANY (FUNCTION ODDP) V2))) COLLECT I) NIL)
;; Loading (DEFTEST NOTANY.28 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (NOTANY (QUOTE ODDP) V1)) (NOTANY (FUNCTION ODDP) V2))) COLLECT I) NIL)
;; Loading (DEFTEST NOTANY.29 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP FOR I FROM 0 TO 6 FOR S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET I) COLLECT (NOT (NOTANY (QUOTE DIGIT-CHAR-P) S2)))) (T T NIL NIL T T T))
;; Loading (DEFTEST NOTANY.30 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP FOR I FROM 0 TO 6 FOR S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET I) COLLECT (NOT (NOTANY (QUOTE DIGIT-CHAR-P) S2)))) (T T NIL NIL T T T))
;; Loading (DEFTEST NOTANY.31 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (NOTNOT (NOTANY (FUNCTION MINUSP) V)) (PROGN (ADJUST-ARRAY V (QUOTE (11)) :INITIAL-ELEMENT -1) (NOTANY (FUNCTION MINUSP) V)))) T NIL)
;; Loading (DEFTEST NOTANY.32 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (NOTNOT (NOTANY (FUNCTION MINUSP) V)) (PROGN (ADJUST-ARRAY V (QUOTE (11)) :INITIAL-ELEMENT -1) (NOTNOT (NOTANY (FUNCTION MINUSP) V))))) T T)
;; Loading (DEFTEST NOTANY.ORDER.1 (LET ((I 0) A B) (VALUES (NOT (NOTANY (PROGN (SETF A (INCF I)) (QUOTE NULL)) (PROGN (SETF B (INCF I)) (QUOTE (A B C))))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST NOTANY.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NOTANY X (QUOTE (A B C))))) (TYPEF (QUOTE (OR SYMBOL FUNCTION)))) NIL)
;; Loading (DEFTEST NOTANY.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NOTANY (FUNCTION NULL) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST NOTANY.ERROR.7 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NOTANY (FUNCTION EQL) NIL X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST NOTANY.ERROR.8 (SIGNALS-ERROR (NOTANY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOTANY.ERROR.9 (SIGNALS-ERROR (NOTANY (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOTANY.ERROR.10 (SIGNALS-ERROR (LOCALLY (NOTANY 1 (QUOTE (A B C))) T) TYPE-ERROR) T)
;; Loading (DEFTEST NOTANY.ERROR.11 (SIGNALS-ERROR (NOTANY (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOTANY.ERROR.12 (SIGNALS-ERROR (NOTANY (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 4)) (QUOTE (G H J))) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOTANY.ERROR.13 (SIGNALS-ERROR (NOTANY (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (LOAD "notevery.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/notevery.lsp C10D9E57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NOTEVERY.1 (NOTEVERY (FUNCTION IDENTITY) NIL) NIL)
;; Loading (DEFTEST NOTEVERY.2 (NOTEVERY (FUNCTION IDENTITY) #()) NIL)
;; Loading (DEFTEST NOTEVERY.3 (LET ((COUNT 0)) (VALUES (NOT (NOTEVERY (FUNCTION (LAMBDA (X) (INCF COUNT) (< X 10))) (QUOTE (1 2 4 13 5 1)))) COUNT)) NIL 4)
;; Loading (DEFTEST NOTEVERY.4 (NOTEVERY (FUNCTION =) (QUOTE (1 2 3 4)) (QUOTE (1 2 3 4 5))) NIL)
;; Loading (DEFTEST NOTEVERY.5 (NOTEVERY (FUNCTION =) (QUOTE (1 2 3 4 5)) (QUOTE (1 2 3 4))) NIL)
;; Loading (DEFTEST NOTEVERY.6 (NOT-MV (NOTEVERY (FUNCTION =) (QUOTE (1 2 3 4 5)) (QUOTE (1 2 3 4 6)))) NIL)
;; Loading (DEFTEST NOTEVERY.7 (NOTEVERY (FUNCTION (LAMBDA (X Y) (OR X Y))) (QUOTE (NIL T T NIL T)) #(T NIL T T NIL NIL)) NIL)
;; Loading (DEFTEST NOTEVERY.8 (LET ((X (QUOTE (1))) (ARGS NIL)) (NOT (LOOP FOR I FROM 1 BELOW (1- (MIN 100 CALL-ARGUMENTS-LIMIT)) DO (PUSH X ARGS) ALWAYS (NOT (APPLY (FUNCTION NOTEVERY) (FUNCTION =) ARGS))))) NIL)
;; Loading (DEFTEST NOTEVERY.9 (NOTEVERY (FUNCTION ZEROP) #*000000000000) NIL)
;; Loading (DEFTEST NOTEVERY.10 (NOTEVERY (FUNCTION ZEROP) #*) NIL)
;; Loading (DEFTEST NOTEVERY.11 (NOT-MV (NOTEVERY (FUNCTION ZEROP) #*0000010000)) NIL)
;; Loading (DEFTEST NOTEVERY.12 (NOTEVERY (FUNCTION (LAMBDA (X) (EQL X #\a))) "aaaaaaaa") NIL)
;; Loading (DEFTEST NOTEVERY.13 (NOTEVERY (FUNCTION (LAMBDA (X) (EQL X #\a))) "") NIL)
;; Loading (DEFTEST NOTEVERY.14 (NOT-MV (NOTEVERY (FUNCTION (LAMBDA (X) (EQL X #\a))) "aaaaaabaaaa")) NIL)
;; Loading (DEFTEST NOTEVERY.15 (NOT-MV (NOTEVERY (QUOTE NULL) (QUOTE (NIL NIL T NIL)))) NIL)
;; Loading (DEFTEST NOTEVERY.16 (NOTEVERY (QUOTE NULL) (QUOTE (NIL NIL NIL NIL))) NIL)
;; Loading (DEFTEST NOTEVERY.17 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) V)))) (T T T T T NIL NIL NIL NIL NIL))
;; Loading (DEFTEST NOTEVERY.18 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 1 1 1 1 1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) COLLECT I) NIL)
;; Loading (DEFTEST NOTEVERY.19 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) COLLECT I) NIL)
;; Loading (DEFTEST NOTEVERY.20 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTEVERY (FUNCTION ALPHA-CHAR-P) V)))) (T T T T T NIL NIL NIL NIL NIL))
;; Loading (DEFTEST NOTEVERY.21 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOT (NOTEVERY (FUNCTION ALPHA-CHAR-P) V)))) (T T T T T NIL NIL NIL NIL NIL))
;; Loading (DEFTEST NOTEVERY.22 (LET ((V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (NOT (NOTEVERY (FUNCTION ALPHA-CHAR-P) V)) (SETF (AREF V 2) #\0) (NOT (NOTEVERY (FUNCTION ALPHA-CHAR-P) V)))) T #\0 NIL)
;; Loading (DEFTEST NOTEVERY.23 (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (NOT (NOTEVERY (FUNCTION EVENP) V1)) (NOT (NOTEVERY (QUOTE EVENP) V2)))) NIL T)
;; Loading (DEFTEST NOTEVERY.24 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOTEVERY (QUOTE EVENP) V1) (NOT (NOTEVERY (FUNCTION EVENP) V2)))) COLLECT I) NIL)
;; Loading (DEFTEST NOTEVERY.25 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOTEVERY (QUOTE EVENP) V1) (NOT (NOTEVERY (FUNCTION EVENP) V2)))) COLLECT I) NIL)
;; Loading (DEFTEST NOTEVERY.26 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP FOR I FROM 0 TO 6 FOR S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET I) COLLECT (NOT (NOTEVERY (QUOTE ALPHA-CHAR-P) S2)))) (NIL NIL T T NIL NIL NIL))
;; Loading (DEFTEST NOTEVERY.27 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP FOR I FROM 0 TO 6 FOR S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET I) COLLECT (NOT (NOTEVERY (QUOTE ALPHA-CHAR-P) S2)))) (NIL NIL T T NIL NIL NIL))
;; Loading (DEFTEST NOTEVERY.28 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (NOT (NOTEVERY (FUNCTION PLUSP) V)) (PROGN (ADJUST-ARRAY V (QUOTE (11)) :INITIAL-ELEMENT -1) (NOT (NOTEVERY (FUNCTION PLUSP) V))))) T NIL)
;; Loading (DEFTEST NOTEVERY.29 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (NOT (NOTEVERY (FUNCTION PLUSP) V)) (PROGN (ADJUST-ARRAY V (QUOTE (11)) :INITIAL-ELEMENT -1) (NOT (NOTEVERY (FUNCTION PLUSP) V))))) T T)
;; Loading (DEFTEST NOTEVERY.30 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COERCE X TYPE))) (QUOTE (1 2 3 4 5 6)))) WHEN (NOTEVERY (FUNCTION PLUSP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST NOTEVERY.31 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COERCE X TYPE))) (QUOTE (1 2 3 4 5 -1)))) WHEN (NOTEVERY (FUNCTION PLUSP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST NOTEVERY.32 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) FOR V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COMPLEX X (COERCE X TYPE)))) (QUOTE (1 2 3 4 5 6)))) WHEN (NOTEVERY (FUNCTION COMPLEXP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST NOTEVERY.ORDER.1 (LET ((I 0) A B) (VALUES (NOTEVERY (PROGN (SETF A (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF B (INCF I)) (QUOTE (A B C D)))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST NOTEVERY.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NOTEVERY X (QUOTE (A B C))))) (TYPEF (QUOTE (OR SYMBOL FUNCTION)))) NIL)
;; Loading (DEFTEST NOTEVERY.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NOTEVERY (FUNCTION NULL) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST NOTEVERY.ERROR.7 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NOTEVERY (FUNCTION EQL) NIL X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST NOTEVERY.ERROR.8 (SIGNALS-ERROR (NOTEVERY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOTEVERY.ERROR.9 (SIGNALS-ERROR (NOTEVERY (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOTEVERY.ERROR.10 (SIGNALS-ERROR (LOCALLY (NOTEVERY 1 (QUOTE (A B C))) T) TYPE-ERROR) T)
;; Loading (DEFTEST NOTEVERY.ERROR.11 (SIGNALS-ERROR (NOTEVERY (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOTEVERY.ERROR.12 (SIGNALS-ERROR (NOTEVERY (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 4)) (QUOTE (G H J))) PROGRAM-ERROR) T)
;; Loading (DEFTEST NOTEVERY.ERROR.13 (SIGNALS-ERROR (NOTEVERY (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (LOAD "nth-value.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nth-value.lsp C12C9D97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NTH-VALUE.1 (NTH-VALUE 0 (QUOTE A)) A)
;; Loading (DEFTEST NTH-VALUE.2 (NTH-VALUE 1 (QUOTE A)) NIL)
;; Loading (DEFTEST NTH-VALUE.3 (NTH-VALUE 0 (VALUES)) NIL)
;; Loading (DEFTEST NTH-VALUE.4 (LOOP FOR I FROM 0 TO 19 COLLECT (NTH-VALUE I (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G) (QUOTE H) (QUOTE I) (QUOTE J) (QUOTE K) (QUOTE L) (QUOTE M) (QUOTE N) (QUOTE O) (QUOTE P) (QUOTE Q) (QUOTE R) (QUOTE S)))) (A B C D E F G H I J K L M N O P Q R S NIL))
;; Loading (DEFTEST NTH-VALUE.5 (NTH-VALUE 100 (QUOTE A)) NIL)
;; Loading (DEFTEST NTH-VALUE.6 (MACROLET ((%M (Z) Z)) (NTH-VALUE (EXPAND-IN-CURRENT-ENV (%M 1)) (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) B)
;; Loading (DEFTEST NTH-VALUE.7 (MACROLET ((%M (Z) Z)) (NTH-VALUE 1 (EXPAND-IN-CURRENT-ENV (%M (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))))) B)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST NTH-VALUE.ORDER.1 (LET ((I 0) X Y) (VALUES (NTH-VALUE (PROGN (SETF X (INCF I)) 3) (PROGN (SETF Y (INCF I)) (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G)))) I X Y)) D 2 1 2)
;; Loading (DEFTEST NTH-VALUE.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE NTH-VALUE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST NTH-VALUE.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE NTH-VALUE)) (QUOTE (NTH-VALUE 1 (QUOTE (A B C))))) PROGRAM-ERROR) T)
;; Loading (DEFTEST NTH-VALUE.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE NTH-VALUE)) (QUOTE (NTH-VALUE 1 (QUOTE (A B C)))) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "or.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/or.lsp 80B6EDA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST OR.1 (OR) NIL)
;; Loading (DEFTEST OR.2 (OR NIL) NIL)
;; Loading (DEFTEST OR.3 (OR (QUOTE A)) A)
;; Loading (DEFTEST OR.4 (OR (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) A B C)
;; Loading (DEFTEST OR.5 (OR (VALUES)))
;; Loading (DEFTEST OR.6 (OR (VALUES T NIL) (QUOTE A)) T)
;; Loading (DEFTEST OR.7 (OR NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) A B C)
;; Loading (DEFTEST OR.8 (LET ((X 0)) (VALUES (OR T (INCF X)) X)) T 0)
;; Loading (DEFTEST OR.9 (OR (VALUES NIL 1 2) (VALUES 1 NIL 2)) 1 NIL 2)
;; Loading (DEFTEST OR.10 (MACROLET ((%M (Z) Z)) (OR (EXPAND-IN-CURRENT-ENV (%M (QUOTE X))) (EXPAND-IN-CURRENT-ENV (%M NIL)) (EXPAND-IN-CURRENT-ENV (%M (QUOTE Y))) T)) X)
;; Loading (DEFTEST OR.11 (MACROLET ((%M (Z) Z)) (OR (EXPAND-IN-CURRENT-ENV (%M NIL)) (EXPAND-IN-CURRENT-ENV (%M (QUOTE A))) NIL)) A)
;; Loading (DEFTEST OR.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE OR))) PROGRAM-ERROR) T)
;; Loading (DEFTEST OR.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE OR)) (QUOTE (OR))) PROGRAM-ERROR) T)
;; Loading (DEFTEST OR.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE OR)) (QUOTE (OR)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "prog.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/prog.lsp 80BD0D97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PROG.1 (PROG NIL) NIL)
;; Loading (DEFTEST PROG.2 (PROG NIL (QUOTE A)) NIL)
;; Loading (DEFTEST PROG.3 (PROG NIL (RETURN (QUOTE A))) A)
;; Loading (DEFTEST PROG.4 (PROG NIL (RETURN (VALUES 1 2 3 4 5))) 1 2 3 4 5)
;; Loading (DEFTEST PROG.5 (LET ((X (QUOTE A))) (PROG ((X (QUOTE B)) (Y X)) (DECLARE (TYPE SYMBOL X Y)) (RETURN (VALUES X Y)))) B A)
;; Loading (DEFTEST PROG.6 (LET ((X (QUOTE A))) (PROG (X) (SETQ X (QUOTE B))) X) A)
;; Loading (DEFTEST PROG.7 (PROG ((I 1) (S 0)) (DECLARE (TYPE FIXNUM I S)) AGAIN (WHEN (> I 10) (RETURN S)) (INCF S I) (INCF I) (GO AGAIN)) 55)
;; Loading (DEFTEST PROG.8 (LET ((X 0)) (PROG ((Y (INCF X)) (Z (INCF X))) (RETURN (VALUES X Y Z)))) 2 1 2)
;; Loading (DEFTEST PROG.9 (FLET ((%F NIL (LOCALLY (DECLARE (SPECIAL Z)) Z))) (PROG ((Z 10)) (DECLARE (SPECIAL Z)) (RETURN (%F)))) 10)
;; Loading (DEFTEST PROG.10 (PROG NIL (RETURN (1+ (PROG NIL (GO END) DONE (RETURN 1) END (GO DONE)))) DONE (RETURN (QUOTE BAD))) 2)
;; Loading (DEFTEST PROG.11 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (PROG ((Y X)) (DECLARE (SPECIAL X)) (RETURN Y)))) :GOOD)
;; Loading (DEFTEST PROG.12 (MACROLET ((%M (Z) Z)) (PROG ((X (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) (RETURN X))) :GOOD)
;; Loading (DEF-MACRO-TEST PROG.ERROR.1 (PROG NIL))
;; Loading (DEFTEST PROG*.1 (PROG* NIL) NIL)
;; Loading (DEFTEST PROG*.2 (PROG* NIL (QUOTE A)) NIL)
;; Loading (DEFTEST PROG*.3 (PROG* NIL (RETURN (QUOTE A))) A)
;; Loading (DEFTEST PROG*.4 (PROG* NIL (RETURN (VALUES 1 2 3 4 5))) 1 2 3 4 5)
;; Loading (DEFTEST PROG*.5 (LET ((X (QUOTE A))) (PROG* ((Z X) (X (QUOTE B)) (Y X)) (DECLARE (TYPE SYMBOL X Y)) (RETURN (VALUES X Y Z)))) B B A)
;; Loading (DEFTEST PROG*.6 (LET ((X (QUOTE A))) (PROG* (X) (SETQ X (QUOTE B))) X) A)
;; Loading (DEFTEST PROG*.7 (PROG* ((I 1) (S 0)) (DECLARE (TYPE FIXNUM I S)) AGAIN (WHEN (> I 10) (RETURN S)) (INCF S I) (INCF I) (GO AGAIN)) 55)
;; Loading (DEFTEST PROG*.8 (LET ((X 0)) (PROG* ((Y (INCF X)) (Z (INCF X))) (RETURN (VALUES X Y Z)))) 2 1 2)
;; Loading (DEFTEST PROG*.9 (FLET ((%F NIL (LOCALLY (DECLARE (SPECIAL Z)) Z))) (PROG* ((Z 10)) (DECLARE (SPECIAL Z)) (RETURN (%F)))) 10)
;; Loading (DEFTEST PROG*.10 (PROG* NIL (RETURN (1+ (PROG* NIL (GO END) DONE (RETURN 1) END (GO DONE)))) DONE (RETURN (QUOTE BAD))) 2)
;; Loading (DEFTEST PROG*.11 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (PROG* ((Y X)) (DECLARE (SPECIAL X)) (RETURN Y)))) :GOOD)
;; Loading (DEFTEST PROG*.12 (MACROLET ((%M (Z) Z)) (PROG* ((X (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) (RETURN X))) :GOOD)
;; Loading (DEF-MACRO-TEST PROG*.ERROR.1 (PROG* NIL))
;; Loading (LOAD "prog1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/prog1.lsp 80C98667>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PROG1.1 (PROG1 (QUOTE A)) A)
;; Loading (DEFTEST PROG1.2 (PROG1 (QUOTE A) (QUOTE B)) A)
;; Loading (DEFTEST PROG1.3 (PROG1 (VALUES (QUOTE A) (QUOTE B)) (QUOTE C)) A)
;; Loading (DEFTEST PROG1.4 (PROG1 (VALUES) (QUOTE C)) NIL)
;; Loading (DEFTEST PROG1.5 (LET ((X 0)) (VALUES (PROG1 X (INCF X)) X)) 0 1)
;; Loading (DEFTEST PROG1.6 (BLOCK NIL (TAGBODY (RETURN (PROG1 (QUOTE BAD) (GO 10) 10)) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST PROG1.7 (MACROLET ((%M (Z) Z)) (PROG1 (EXPAND-IN-CURRENT-ENV (%M (QUOTE GOOD))))) GOOD)
;; Loading (DEF-MACRO-TEST PROG1.ERROR.1 (PROG1 NIL))
;; Loading (LOAD "prog2.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/prog2.lsp 80CD8A87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PROG2.1 (PROG2 (QUOTE A) (QUOTE B)) B)
;; Loading (DEFTEST PROG2.2 (PROG2 (QUOTE A) (QUOTE B) (QUOTE C)) B)
;; Loading (DEFTEST PROG2.3 (PROG2 (QUOTE A) (VALUES) (QUOTE C)) NIL)
;; Loading (DEFTEST PROG2.4 (PROG2 (QUOTE A) (VALUES (QUOTE B) (QUOTE D)) (QUOTE C)) B)
;; Loading (DEFTEST PROG2.5 (LET ((X 0)) (VALUES (PROG2 (INCF X) (INCF X) (INCF X)) X)) 2 3)
;; Loading (DEFTEST PROG2.6 (LET ((X 1)) (VALUES (PROG2 (INCF X (1+ X)) (INCF X (+ 2 X)) (INCF X 100)) X)) 8 108)
;; Loading (DEFTEST PROG2.7 (BLOCK NIL (TAGBODY (RETURN (PROG2 17 (QUOTE BAD) (GO 10) 10)) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST PROG2.8 (MACROLET ((%M (Z) Z)) (PROG2 (EXPAND-IN-CURRENT-ENV (%M (QUOTE BAD1))) (EXPAND-IN-CURRENT-ENV (%M (QUOTE GOOD))) (EXPAND-IN-CURRENT-ENV (%M (QUOTE BAD2))))) GOOD)
;; Loading (DEF-MACRO-TEST PROG2.ERROR.1 (PROG2 NIL NIL))
;; Loading (LOAD "progn.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/progn.lsp 80D27AD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PROGN.1 (PROGN) NIL)
;; Loading (DEFTEST PROGN.2 (PROGN (QUOTE A)) A)
;; Loading (DEFTEST PROGN.3 (PROGN (QUOTE B) (QUOTE A)) A)
;; Loading (DEFTEST PROGN.4 (LET ((X 0)) (VALUES (PROGN (INCF X) X) X)) 1 1)
;; Loading (DEFTEST PROGN.5 (PROGN (VALUES)))
;; Loading (DEFTEST PROGN.6 (PROGN (VALUES 1 2) (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) A B C D E)
;; Loading (DEFTEST PROGN.7 (LET ((X 0)) (PROG NIL (PROGN (GO X) X (QUOTE A)) (RETURN (QUOTE BAD)) X (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST PROGN.8 (BLOCK NIL (TAGBODY (PROGN (GO 10) 10 (RETURN (QUOTE BAD))) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST PROGN.9 (MACROLET ((%M (Z) Z)) (PROGN (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (DEFTEST PROGN.10 (MACROLET ((%M (Z) Z)) (PROGN (EXPAND-IN-CURRENT-ENV (%M :BAD)) (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (LOAD "progv.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/progv.lsp 80D779C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PROGV.1 (PROGV NIL NIL T) T)
;; Loading (DEFTEST PROGV.2 (PROGV (QUOTE (X)) (QUOTE (1)) (NOT (NOT (BOUNDP (QUOTE X))))) T)
;; Loading (DEFTEST PROGV.3 (PROGV (QUOTE (X)) (QUOTE (1)) (SYMBOL-VALUE (QUOTE X))) 1)
;; Loading (DEFTEST PROGV.4 (PROGV (QUOTE (X)) (QUOTE (1)) (LOCALLY (DECLARE (SPECIAL X)) X)) 1)
;; Loading (DEFTEST PROGV.5 (LET ((X 0)) (PROGV (QUOTE (X)) (QUOTE (1)) X)) 0)
;; Loading (DEFTEST PROGV.6 (LET ((X 0)) (DECLARE (SPECIAL X)) (PROGV (QUOTE (X)) NIL (BOUNDP (QUOTE X)))) NIL)
;; Loading (DEFTEST PROGV.6A (LET ((X 0)) (DECLARE (SPECIAL X)) (PROGV (QUOTE (X)) NIL (SETQ X 1)) X) 0)
;; Loading (DEFTEST PROGV.7 (PROGV (QUOTE (X Y Z)) (QUOTE (1 2 3)) (LOCALLY (DECLARE (SPECIAL X Y Z)) (VALUES X Y Z))) 1 2 3)
;; Loading (DEFTEST PROGV.8 (PROGV (QUOTE (X Y Z)) (QUOTE (1 2 3 4 5 6 7 8)) (LOCALLY (DECLARE (SPECIAL X Y Z)) (VALUES X Y Z))) 1 2 3)
;; Loading (DEFTEST PROGV.9 (LET ((X 0)) (DECLARE (SPECIAL X)) (PROGV (QUOTE (X Y Z W)) (QUOTE (1)) (VALUES (NOT (NOT (BOUNDP (QUOTE X)))) (BOUNDP (QUOTE Y)) (BOUNDP (QUOTE Z)) (BOUNDP (QUOTE W))))) T NIL NIL NIL)
;; Loading (DEFTEST PROGV.10 (LET ((X 0) (Y 0) (C 0)) (PROGV (PROGN (SETF X (INCF C)) NIL) (PROGN (SETF Y (INCF C)) NIL) (VALUES X Y C))) 1 2 2)
;; Loading (DEFTEST PROGV.11 (BLOCK NIL (TAGBODY (PROGV NIL NIL (GO 10) 10 (RETURN (QUOTE BAD))) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST PROGV.12 (PROGV (QUOTE (X Y)) (QUOTE (1)) (LOCALLY (DECLARE (SPECIAL X Y) (TYPE NIL Y)) (VALUES X (BOUNDP (QUOTE Y))))) 1 NIL)
;; Loading (DEFTEST PROGV.13 (MACROLET ((%M (Z) Z)) (PROGV (EXPAND-IN-CURRENT-ENV (%M (QUOTE (X)))) (QUOTE (:GOOD)) (LOCALLY (DECLARE (SPECIAL X)) X))) :GOOD)
;; Loading (DEFTEST PROGV.14 (MACROLET ((%M (Z) Z)) (PROGV (LIST (EXPAND-IN-CURRENT-ENV (%M (QUOTE X)))) (QUOTE (:GOOD)) (LOCALLY (DECLARE (SPECIAL X)) X))) :GOOD)
;; Loading (DEFTEST PROGV.15 (MACROLET ((%M (Z) Z)) (PROGV (QUOTE (X)) (EXPAND-IN-CURRENT-ENV (%M (QUOTE (:GOOD)))) (LOCALLY (DECLARE (SPECIAL X)) X))) :GOOD)
;; Loading (DEFTEST PROGV.16 (MACROLET ((%M (Z) Z)) (PROGV (QUOTE (X)) (LIST (EXPAND-IN-CURRENT-ENV (%M :GOOD))) (LOCALLY (DECLARE (SPECIAL X)) X))) :GOOD)
;; Loading (DEFTEST PROGV.17 (MACROLET ((%M (Z) Z)) (PROGV NIL NIL (EXPAND-IN-CURRENT-ENV (%M :GOOD)))) :GOOD)
;; Loading (LOAD "some.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/some.lsp 80E1C4D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SOME.1 (SOME (FUNCTION IDENTITY) NIL) NIL)
;; Loading (DEFTEST SOME.2 (SOME (FUNCTION IDENTITY) #()) NIL)
;; Loading (DEFTEST SOME.3 (LET ((COUNT 0)) (VALUES (SOME (FUNCTION (LAMBDA (X) (INCF COUNT) (IF (>= X 10) X NIL))) (QUOTE (1 2 4 13 5 1))) COUNT)) 13 4)
;; Loading (DEFTEST SOME.4 (SOME (FUNCTION /=) (QUOTE (1 2 3 4)) (QUOTE (1 2 3 4 5))) NIL)
;; Loading (DEFTEST SOME.5 (SOME (FUNCTION /=) (QUOTE (1 2 3 4 5)) (QUOTE (1 2 3 4))) NIL)
;; Loading (DEFTEST SOME.6 (NOT-MV (SOME (FUNCTION /=) (QUOTE (1 2 3 4 5)) (QUOTE (1 2 3 4 6)))) NIL)
;; Loading (DEFTEST SOME.7 (SOME (FUNCTION (LAMBDA (X Y) (AND X Y))) (QUOTE (NIL T T NIL T)) #(T NIL NIL T NIL NIL)) NIL)
;; Loading (DEFTEST SOME.8 (LET ((X (QUOTE (1))) (ARGS NIL)) (LOOP FOR I FROM 1 BELOW (1- (MIN 100 CALL-ARGUMENTS-LIMIT)) DO (PUSH X ARGS) ALWAYS (APPLY (FUNCTION SOME) (FUNCTION /=) ARGS))) NIL)
;; Loading (DEFTEST SOME.9 (SOME (FUNCTION ZEROP) #*11111111111111) NIL)
;; Loading (DEFTEST SOME.10 (SOME (FUNCTION ZEROP) #*) NIL)
;; Loading (DEFTEST SOME.11 (NOT-MV (SOME (FUNCTION ZEROP) #*1111111011111)) NIL)
;; Loading (DEFTEST SOME.12 (SOME (FUNCTION (LAMBDA (X) (NOT (EQL X #\a)))) "aaaaaaaa") NIL)
;; Loading (DEFTEST SOME.13 (SOME (FUNCTION (LAMBDA (X) (EQL X #\a))) "") NIL)
;; Loading (DEFTEST SOME.14 (NOT-MV (SOME (FUNCTION (LAMBDA (X) (NOT (EQL X #\a)))) "aaaaaabaaaa")) NIL)
;; Loading (DEFTEST SOME.15 (SOME (QUOTE NULL) (QUOTE (1 2 3 4))) NIL)
;; Loading (DEFTEST SOME.16 (NOT-MV (SOME (QUOTE NULL) (QUOTE (1 2 3 NIL 5)))) NIL)
;; Loading (DEFTEST SOME.17 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (SOME (FUNCTION PLUSP) V)))) (NIL NIL NIL NIL NIL T T T T T))
;; Loading (DEFTEST SOME.18 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP FOR J IN (QUOTE (0 0 0 0 1 2 3 4 5 6)) COLLECT (MOD J (ASH 1 I))) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (SOME (FUNCTION PLUSP) V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) COLLECT I) NIL)
;; Loading (DEFTEST SOME.19 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (SOME (FUNCTION MINUSP) V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) COLLECT I) NIL)
;; Loading (DEFTEST SOME.20 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) V)))) (NIL NIL NIL NIL NIL T T T T T))
;; Loading (DEFTEST SOME.21 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP FOR J FROM 0 TO 9 DO (SETF (FILL-POINTER V) J) COLLECT (NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) V)))) (NIL NIL NIL NIL NIL T T T T T))
;; Loading (DEFTEST SOME.22 (LET ((V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (SOME (FUNCTION DIGIT-CHAR-P) V) (SETF (AREF V 2) #\0) (NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) V)))) NIL #\0 T)
;; Loading (DEFTEST SOME.23 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COERCE X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) UNLESS (SOME (FUNCTION ZEROP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST SOME.24 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :FILL-POINTER 6 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COERCE X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) WHEN (SOME (FUNCTION ZEROP) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST SOME.25 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) FOR V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (X) (COMPLEX X (COERCE X TYPE)))) (QUOTE (1 2 3 4 5 6)))) WHEN (SOME (COMPLEMENT (FUNCTION COMPLEXP)) V) COLLECT (LIST TYPE V)) NIL)
;; Loading (DEFTEST SOME.26 (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (NOTNOT (SOME (FUNCTION ODDP) V1)) (SOME (FUNCTION ODDP) V2))) T NIL)
;; Loading (DEFTEST SOME.27 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (SOME (QUOTE ODDP) V1)) (NOT (SOME (FUNCTION ODDP) V2))) COLLECT I) NIL)
;; Loading (DEFTEST SOME.28 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) UNLESS (LET* ((V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (SOME (QUOTE ODDP) V1) (NOT (SOME (FUNCTION ODDP) V2)))) COLLECT I) NIL)
;; Loading (DEFTEST SOME.29 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP FOR I FROM 0 TO 6 FOR S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET I) COLLECT (NOTNOT (SOME (QUOTE DIGIT-CHAR-P) S2)))) (T T NIL NIL T T T))
;; Loading (DEFTEST SOME.30 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP FOR I FROM 0 TO 6 FOR S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET I) COLLECT (NOTNOT (SOME (QUOTE DIGIT-CHAR-P) S2)))) (T T NIL NIL T T T))
;; Loading (DEFTEST SOME.31 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (SOME (FUNCTION MINUSP) V) (PROGN (ADJUST-ARRAY V (QUOTE (11)) :INITIAL-ELEMENT -1) (NOTNOT (SOME (FUNCTION MINUSP) V))))) NIL T)
;; Loading (DEFTEST SOME.32 (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (SOME (FUNCTION MINUSP) V) (PROGN (ADJUST-ARRAY V (QUOTE (11)) :INITIAL-ELEMENT -1) (SOME (FUNCTION MINUSP) V)))) NIL NIL)
;; Loading (DEFTEST SOME.ORDER.1 (LET ((I 0) X Y) (VALUES (SOME (PROGN (SETF X (INCF I)) (FUNCTION NULL)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D)))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST SOME.ORDER.2 (LET ((I 0) X Y Z) (VALUES (SOME (PROGN (SETF X (INCF I)) (FUNCTION EQ)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D))) (PROGN (SETF Z (INCF I)) (QUOTE (E F G H)))) I X Y Z)) NIL 3 1 2 3)
;; Loading (DEFTEST SOME.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SOME X (QUOTE (A B C))))) (TYPEF (QUOTE (OR SYMBOL FUNCTION)))) NIL)
;; Loading (DEFTEST SOME.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SOME (FUNCTION NULL) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST SOME.ERROR.7 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SOME (FUNCTION EQL) NIL X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST SOME.ERROR.8 (SIGNALS-ERROR (SOME) PROGRAM-ERROR) T)
;; Loading (DEFTEST SOME.ERROR.9 (SIGNALS-ERROR (SOME (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SOME.ERROR.10 (SIGNALS-ERROR (LOCALLY (SOME 1 (QUOTE (A B C))) T) TYPE-ERROR) T)
;; Loading (DEFTEST SOME.ERROR.11 (SIGNALS-ERROR (SOME (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST SOME.ERROR.12 (SIGNALS-ERROR (SOME (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST SOME.ERROR.13 (SIGNALS-ERROR (SOME (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (B C D)) (QUOTE (C D E))) PROGRAM-ERROR) T)
;; Loading (DEFTEST SOME.ERROR.14 (SIGNALS-ERROR (SOME (FUNCTION NULL) (QUOTE (A B . C))) TYPE-ERROR) T)
;; Loading (LOAD "t.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/t.lsp 81037DC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST T.1 T T)
;; Loading (DEFTEST T.2 (NOT-MV (CONSTANTP T)) NIL)
;; Loading (DEFTEST T.3 (EQT T (QUOTE T)) T)
;; Loading (DEFTEST T.4 (SYMBOL-VALUE T) T)
;; Loading (LOAD "tagbody.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/tagbody.lsp 8105F5D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TAGBODY.1 (TAGBODY) NIL)
;; Loading (DEFTEST TAGBODY.2 (TAGBODY (QUOTE A)) NIL)
;; Loading (DEFTEST TAGBODY.3 (TAGBODY (VALUES)) NIL)
;; Loading (DEFTEST TAGBODY.4 (TAGBODY (VALUES 1 2 3 4 5)) NIL)
;; Loading (DEFTEST TAGBODY.5 (LET ((X 0)) (VALUES (TAGBODY (SETQ X 1) (GO A) (SETQ X 2) A) X)) NIL 1)
;; Loading (DEFTEST TAGBODY.6 (LET ((X 0)) (TAGBODY (SETQ X 1) (GO A) B (SETQ X 2) (GO C) A (SETQ X 3) (GO B) C) X) 2)
;; Loading (DEFTEST TAGBODY.7 (LET ((X 0)) (MACROLET ((%M NIL (QUOTE A))) (TAGBODY (TAGBODY (GO A) (%M) (SETQ X 1)) A)) X) 0)
;; Loading (DEFTEST TAGBODY.8 (LET ((X 0)) (TAGBODY (FLET ((%F (Y) (SETQ X Y) (GO A))) (%F 10)) (SETQ X 1) A) X) 10)
;; Loading (DEFTEST TAGBODY.9 (LET (RESULT) (TAGBODY (FLET ((A (X) X)) (SETQ RESULT (A 10)) (GO A)) A) RESULT) 10)
;; Loading (DEFTEST TAGBODY.10 (LET (RESULT) (TAGBODY (BLOCK A (SETQ RESULT 10) (GO A)) (SETQ RESULT 20) A) RESULT) 10)
;; Loading (DEFTEST TAGBODY.11 (LET (RESULT) (TAGBODY (CATCH (QUOTE A) (SETQ RESULT 10) (GO A)) (SETQ RESULT 20) A) RESULT) 10)
;; Loading (DEFTEST TAGBODY.12 (LET (RESULT) (TAGBODY (BLOCK A (SETQ RESULT 10) (RETURN-FROM A NIL)) (SETQ RESULT 20) A) RESULT) 20)
;; Loading (DEFTEST TAGBODY.13 (BLOCK DONE (TAGBODY (GO AROUND) 10 (RETURN-FROM DONE (QUOTE GOOD)) AROUND (GO 10))) GOOD)
;; Loading (DEFTEST TAGBODY.14 (BLOCK DONE (TAGBODY (GO AROUND) -10 (RETURN-FROM DONE (QUOTE GOOD)) AROUND (GO -10))) GOOD)
;; Loading (DEFTEST TAGBODY.15 (BLOCK DONE (TAGBODY (GO AROUND) 1152921504606846976 (RETURN-FROM DONE (QUOTE GOOD)) AROUND (GO 1152921504606846976))) GOOD)
;; Loading (DEFTEST TAGBODY.16 (LET* ((T1 (1+ MOST-POSITIVE-FIXNUM)) (T2 (1+ MOST-POSITIVE-FIXNUM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (BLOCK DONE (TAGBODY (GO AROUND) (SYSTEM.INTERNALS::BQ-COMMA T1) (RETURN-FROM DONE (QUOTE GOOD)) AROUND (GO (SYSTEM.INTERNALS::BQ-COMMA T2))))))) (EVAL FORM)) GOOD)
;; Loading (DEFTEST TAGBODY.17 (BLOCK DONE (TAGBODY (MACROLET ((FOO NIL (QUOTE TAG))) (LET (TAG) (TAGBODY (GO TAG) (FOO) (RETURN-FROM DONE :BAD)))) TAG (RETURN-FROM DONE :GOOD))) :GOOD)
;; Loading (DEFTEST TAGBODY.18 (MACROLET ((%M (Z) Z)) (TAGBODY (EXPAND-IN-CURRENT-ENV (%M :FOO)))) NIL)
;; Loading (LOAD "typecase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/typecase.lsp 8110BAC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TYPECASE.1 (TYPECASE 1 (INTEGER (QUOTE A)) (T (QUOTE B))) A)
;; Loading (DEFTEST TYPECASE.2 (TYPECASE 1 (SYMBOL (QUOTE A))) NIL)
;; Loading (DEFTEST TYPECASE.3 (TYPECASE 1 (SYMBOL (QUOTE A)) (T (QUOTE B))) B)
;; Loading (DEFTEST TYPECASE.4 (TYPECASE 1 (T (VALUES))))
;; Loading (DEFTEST TYPECASE.5 (TYPECASE 1 (INTEGER (VALUES)) (T (QUOTE A))))
;; Loading (DEFTEST TYPECASE.6 (TYPECASE 1 (BIT (QUOTE A)) (INTEGER (QUOTE B))) A)
;; Loading (DEFTEST TYPECASE.7 (TYPECASE 1 (OTHERWISE (QUOTE A))) A)
;; Loading (DEFTEST TYPECASE.8 (TYPECASE 1 (T (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) A B C)
;; Loading (DEFTEST TYPECASE.9 (TYPECASE 1 (INTEGER (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) (T NIL)) A B C)
;; Loading (DEFTEST TYPECASE.10 (LET ((X 0)) (VALUES (TYPECASE 1 (BIT (INCF X) (QUOTE A)) (INTEGER (INCF X 2) (QUOTE B)) (T (INCF X 4) (QUOTE C))) X)) A 1)
;; Loading (DEFTEST TYPECASE.11 (TYPECASE 1 (OTHERWISE (QUOTE A))) A)
;; Loading (DEFTEST TYPECASE.12 (TYPECASE 1 (INTEGER) (T (QUOTE A))) NIL)
;; Loading (DEFTEST TYPECASE.13 (TYPECASE 1 (SYMBOL (QUOTE A)) (T)) NIL)
;; Loading (DEFTEST TYPECASE.14 (TYPECASE 1 (SYMBOL (QUOTE A)) (OTHERWISE)) NIL)
;; Loading (DEFTEST TYPECASE.15 (TYPECASE (QUOTE A) (NUMBER (QUOTE BAD)) (#<Standard-Class SYMBOL 803106F7> (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST TYPECASE.16 (BLOCK DONE (TAGBODY (TYPECASE (QUOTE A) (SYMBOL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD)))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST TYPECASE.17 (BLOCK DONE (TAGBODY (TYPECASE (QUOTE A) (INTEGER (QUOTE BAD)) (T (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD)))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST TYPECASE.18 (LOOP FOR X IN (QUOTE (A 1 1.399999 "c")) COLLECT (TYPECASE X (T :GOOD) (OTHERWISE :BAD))) (:GOOD :GOOD :GOOD :GOOD))
;; Loading (DEFTEST TYPECASE.19 (LET* ((U (COERCE *UNIVERSE* (QUOTE VECTOR))) (LEN1 (LENGTH U)) (TYPES (COERCE *CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (LEN2 (LENGTH TYPES))) (LOOP FOR N = (RANDOM 10) FOR MY-TYPES = (LOOP REPEAT N COLLECT (ELT TYPES (RANDOM LEN2))) FOR VAL = (ELT U (RANDOM LEN1)) FOR I = (POSITION VAL MY-TYPES :TEST (FUNCTION TYPEP)) FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (TYPECASE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA VAL)) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR I FROM 0 FOR TYPE IN MY-TYPES COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA I))))) (OTHERWISE NIL))) FOR J = (EVAL FORM) REPEAT 1000 UNLESS (EQL I J) COLLECT (LIST N MY-TYPES VAL I FORM J))) NIL)
;; Loading (DEFTEST TYPECASE.20 (MACROLET ((%M (Z) Z)) (TYPECASE (EXPAND-IN-CURRENT-ENV (%M 2)) ((INTEGER 0 1) :BAD1) ((INTEGER 2 10) :GOOD) (T :BAD2))) :GOOD)
;; Loading (DEFTEST TYPECASE.21 (MACROLET ((%M (Z) Z)) (TYPECASE 2 ((INTEGER 0 1) (EXPAND-IN-CURRENT-ENV (%M :BAD1))) ((INTEGER 2 10) (EXPAND-IN-CURRENT-ENV (%M :GOOD))) (T (EXPAND-IN-CURRENT-ENV (%M :BAD2))))) :GOOD)
;; Loading (DEFTEST TYPECASE.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE TYPECASE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPECASE.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE TYPECASE)) (QUOTE (TYPECASE T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPECASE.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE TYPECASE)) (QUOTE (TYPECASE T)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "unless.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/unless.lsp 811E1A97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST UNLESS.1 (UNLESS T) NIL)
;; Loading (DEFTEST UNLESS.2 (UNLESS NIL) NIL)
;; Loading (DEFTEST UNLESS.3 (UNLESS (QUOTE B) (QUOTE A)) NIL)
;; Loading (DEFTEST UNLESS.4 (UNLESS NIL (QUOTE A)) A)
;; Loading (DEFTEST UNLESS.5 (UNLESS NIL (VALUES)))
;; Loading (DEFTEST UNLESS.6 (UNLESS NIL (VALUES 1 2 3 4)) 1 2 3 4)
;; Loading (DEFTEST UNLESS.7 (UNLESS 1 (VALUES)) NIL)
;; Loading (DEFTEST UNLESS.8 (UNLESS #() (VALUES 1 2 3 4)) NIL)
;; Loading (DEFTEST UNLESS.9 (LET ((X 0)) (VALUES (UNLESS NIL (INCF X) (QUOTE A)) X)) A 1)
;; Loading (DEFTEST UNLESS.10 (BLOCK DONE (TAGBODY (UNLESS NIL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST UNLESS.11 (MACROLET ((%M (Z) Z)) (UNLESS (EXPAND-IN-CURRENT-ENV (%M NIL)) :GOOD)) :GOOD)
;; Loading (DEFTEST UNLESS.12 (MACROLET ((%M (Z) Z)) (UNLESS (EXPAND-IN-CURRENT-ENV (%M T)) :BAD)) NIL)
;; Loading (DEFTEST UNLESS.13 (MACROLET ((%M (Z) Z)) (LET ((X 1) (P NIL)) (VALUES (UNLESS P (EXPAND-IN-CURRENT-ENV (%M (INCF X)))) X))) 2 2)
;; Loading (DEFTEST UNLESS.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE UNLESS))) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNLESS.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE UNLESS)) (QUOTE (UNLESS T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNLESS.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE UNLESS)) (QUOTE (UNLESS T)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "unwind-protect.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/unwind-protect.lsp 81253B17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST UNWIND-PROTECT.1 (LET ((X NIL)) (UNWIND-PROTECT (PUSH 1 X) (INCF (CAR X)))) (2))
;; Loading (DEFTEST UNWIND-PROTECT.2 (LET ((X NIL)) (BLOCK FOO (UNWIND-PROTECT (PROGN (PUSH 1 X) (RETURN-FROM FOO X)) (INCF (CAR X))))) (2))
;; Loading (DEFTEST UNWIND-PROTECT.3 (LET ((X NIL)) (TAGBODY (UNWIND-PROTECT (PROGN (PUSH 1 X) (GO DONE)) (INCF (CAR X))) DONE) X) (2))
;; Loading (DEFTEST UNWIND-PROTECT.4 (LET ((X NIL)) (CATCH (QUOTE DONE) (UNWIND-PROTECT (PROGN (PUSH 1 X) (THROW (QUOTE DONE) X)) (INCF (CAR X))))) (2))
;; Loading (DEFTEST UNWIND-PROTECT.5 (LET ((X NIL)) (IGNORE-ERRORS (UNWIND-PROTECT (PROGN (PUSH 1 X) (ERROR "Boo!")) (INCF (CAR X)))) X) (2))
;; Loading (DEFTEST UNWIND-PROTECT.6 (LET ((X NIL)) (BLOCK DONE (FLET ((%F NIL (RETURN-FROM DONE NIL))) (UNWIND-PROTECT (%F) (PUSH (QUOTE A) X)))) X) (A))
;; Loading (DEFTEST UNWIND-PROTECT.7 (LET ((X NIL)) (BLOCK DONE (FLET ((%F NIL (RETURN-FROM DONE NIL))) (UNWIND-PROTECT (UNWIND-PROTECT (%F) (PUSH (QUOTE B) X)) (PUSH (QUOTE A) X)))) X) (A B))
;; Loading (DEFTEST UNWIND-PROTECT.8 (LET ((X NIL)) (BLOCK DONE (UNWIND-PROTECT (FLET ((%F NIL (RETURN-FROM DONE NIL))) (UNWIND-PROTECT (UNWIND-PROTECT (%F) (PUSH (QUOTE B) X)) (PUSH (QUOTE A) X))) (PUSH (QUOTE C) X))) X) (C A B))
;; Loading (DEFTEST UNWIND-PROTECT.9 (LET ((X NIL)) (HANDLER-CASE (FLET ((%F NIL (ERROR (QUOTE TYPE-ERROR) :DATUM (QUOTE FOO) :EXPECTED-TYPE NIL))) (UNWIND-PROTECT (HANDLER-CASE (%F)) (PUSH (QUOTE A) X))) (TYPE-ERROR NIL X))) (A))
;; Loading (DEFTEST UNWIND-PROTECT.10 (BLOCK DONE (TAGBODY (UNWIND-PROTECT (QUOTE FOO) (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST UNWIND-PROTECT.11 (LET ((X NIL) (Y NIL)) (VALUES (BLOCK NIL (UNWIND-PROTECT (RETURN (QUOTE A)) (SETF Y (QUOTE C)) (SETF X (QUOTE B)))) X Y)) A B C)
;; Loading (DEFTEST UNWIND-PROTECT.12 (MACROLET ((%M (Z) Z)) (UNWIND-PROTECT (EXPAND-IN-CURRENT-ENV (%M :GOOD)) :BAD)) :GOOD)
;; Loading (DEFTEST UNWIND-PROTECT.13 (MACROLET ((%M (Z) Z)) (UNWIND-PROTECT :GOOD (EXPAND-IN-CURRENT-ENV (%M :BAD)))) :GOOD)
;; Loading (LOAD "values-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/values-list.lsp 812F05B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST VALUES-LIST.ERROR.1 (SIGNALS-ERROR (VALUES-LIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST VALUES-LIST.ERROR.2 (SIGNALS-ERROR (VALUES-LIST NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST VALUES-LIST.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION VALUES-LIST) (FUNCTION LIST)) NIL)
;; Loading (DEFTEST VALUES-LIST.ERROR.4 (SIGNALS-ERROR (VALUES-LIST (QUOTE (A B C . D))) TYPE-ERROR) T)
;; Loading (DEFTEST VALUES-LIST.1 (VALUES-LIST NIL))
;; Loading (DEFTEST VALUES-LIST.2 (VALUES-LIST (QUOTE (1))) 1)
;; Loading (DEFTEST VALUES-LIST.3 (VALUES-LIST (QUOTE (1 2))) 1 2)
;; Loading (DEFTEST VALUES-LIST.4 (VALUES-LIST (QUOTE (A B C D E F G H I J))) A B C D E F G H I J)
;; Loading (DEFTEST VALUES-LIST.5 (LET ((X (LOOP FOR I FROM 1 TO (MIN 1000 (1- CALL-ARGUMENTS-LIMIT) (1- MULTIPLE-VALUES-LIMIT)) COLLECT I))) (EQUALT X (MULTIPLE-VALUE-LIST (VALUES-LIST X)))) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (LOAD "values.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/values.lsp C0B17CC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST VALUES.0 (VALUES))
;; Loading (DEFTEST VALUES.1 (VALUES 1) 1)
;; Loading (DEFTEST VALUES.2 (VALUES 1 2) 1 2)
;; Loading (DEFTEST VALUES.3 (VALUES 1 2 3) 1 2 3)
;; Loading (DEFTEST VALUES.4 (VALUES 1 2 3 4) 1 2 3 4)
;; Loading (DEFTEST VALUES.10 (VALUES 1 2 3 4 5 6 7 8 9 10) 1 2 3 4 5 6 7 8 9 10)
;; Loading (DEFTEST VALUES.15 (VALUES 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
;; Loading (DEFTEST VALUES.19 (VALUES 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)
;; Loading (DEFTEST VALUES.20 (LET ((A T) (B T) (C T) (D T) (E T) (F T)) (SETF (VALUES A (VALUES B C) (VALUES D) (VALUES E F)) (VALUES 0 1 2 3 4 5 6)) (LIST A B C D E F)) (0 1 NIL 2 3 NIL))
;; Loading (DEFTEST VALUES.21 (LET (A B C D E F) (SETF (VALUES A (VALUES B C) (VALUES D) (VALUES E F)) (VALUES 0 1 2 3 4 5 6))) 0 1 2 3)
;; Loading (DEFTEST VALUES.A (VALUES (VALUES 1 2) (VALUES 3 4 5) (VALUES) (VALUES 10)) 1 3 NIL 10)
;; Loading (DEFTEST VALUES.B (FUNCALL (FUNCTION VALUES) 1 2 3 4) 1 2 3 4)
;; Loading (DEFTEST VALUES.C (LET ((X (LOOP FOR I FROM 1 TO (MIN 1000 (1- CALL-ARGUMENTS-LIMIT) (1- MULTIPLE-VALUES-LIMIT)) COLLECT I))) (EQUALT X (MULTIPLE-VALUE-LIST (APPLY (FUNCTION VALUES) X)))) T)
;; Loading (DEFTEST VALUES.ORDER.1 (LET ((I 0) A B C) (VALUES (MULTIPLE-VALUE-LIST (VALUES (SETF A (INCF I)) (SETF B (INCF I)) (SETF C (INCF I)))) I A B C)) (1 2 3) 3 1 2 3)
;; Loading (LOAD "when.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/when.lsp C0BE25C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WHEN.1 (WHEN T) NIL)
;; Loading (DEFTEST WHEN.2 (WHEN NIL (QUOTE A)) NIL)
;; Loading (DEFTEST WHEN.3 (WHEN T (VALUES)))
;; Loading (DEFTEST WHEN.4 (WHEN T (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) A B C D)
;; Loading (DEFTEST WHEN.5 (WHEN NIL (VALUES)) NIL)
;; Loading (DEFTEST WHEN.6 (WHEN NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) NIL)
;; Loading (DEFTEST WHEN.7 (LET ((X 0)) (VALUES (WHEN T (INCF X) (QUOTE A)) X)) A 1)
;; Loading (DEFTEST WHEN.8 (BLOCK DONE (TAGBODY (WHEN T (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST WHEN.9 (MACROLET ((%M (Z) Z)) (WHEN (EXPAND-IN-CURRENT-ENV (%M T)) :GOOD)) :GOOD)
;; Loading (DEFTEST WHEN.10 (MACROLET ((%M (Z) Z)) (WHEN (EXPAND-IN-CURRENT-ENV (%M NIL)) :BAD)) NIL)
;; Loading (DEFTEST WHEN.11 (MACROLET ((%M (Z) Z)) (LET ((X T)) (VALUES (WHEN X (EXPAND-IN-CURRENT-ENV (%M (SETF X (QUOTE FOO))))) X))) FOO FOO)
;; Loading (DEFTEST WHEN.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE WHEN))) PROGRAM-ERROR) T)
;; Loading (DEFTEST WHEN.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE WHEN)) (QUOTE (WHEN T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST WHEN.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE WHEN)) (QUOTE (WHEN T)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "load-iteration.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-iteration.lsp C0C53407>
;; Loading (LOAD "do.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/do.lsp C0C65107>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DO.1 (DO ((I 0 (1+ I))) ((>= I 10) I)) 10)
;; Loading (DEFTEST DO.2 (DO ((I 0 (1+ J)) (J 0 (1+ I))) ((>= I 10) (+ I J))) 20)
;; Loading (DEFTEST DO.3 (LET ((X NIL)) (DO ((I 0 (1+ I))) ((>= I 10) X) (PUSH I X))) (9 8 7 6 5 4 3 2 1 0))
;; Loading (DEFTEST DO.4 (LET ((X NIL)) (DO ((I 0 (1+ I))) ((>= I 10) X) (DECLARE (FIXNUM I)) (PUSH I X))) (9 8 7 6 5 4 3 2 1 0))
;; Loading (DEFTEST DO.5 (DO ((I 0 (1+ I))) (NIL) (WHEN (> I 10) (RETURN I))) 11)
;; Loading (DEFTEST DO.6 (DO ((I 0 (+ I 10))) ((> I -1) I) (RETURN (QUOTE BAD))) 0)
;; Loading (DEFTEST DO.7 (LET ((X NIL)) (DO ((I 0 (1+ I))) ((>= I 10) X) (GO AROUND) SMALL (PUSH (QUOTE A) X) (GO DONE) BIG (PUSH (QUOTE B) X) (GO DONE) AROUND (IF (> I 4) (GO BIG) (GO SMALL)) DONE)) (B B B B B A A A A A))
;; Loading (DEFTEST DO.8 (DO ((I 0 (1+ I)) (X NIL)) ((>= I 10) X) (PUSH (QUOTE A) X)) (A A A A A A A A A A))
;; Loading (DEFTEST DO.9 (LET ((I 0)) (DO NIL ((>= I 10) I) (INCF I))) 10)
;; Loading (DEFTEST DO.10 (DO ((I 0 (1+ I))) ((> I 10) (VALUES))))
;; Loading (DEFTEST DO.11 (DO ((I 0 (1+ I))) ((> I 10) (VALUES I (1+ I)))) 11 12)
;; Loading (DEFTEST DO.12 (DO ((I 0 (1+ I))) ((> I 10) (INCF I) (INCF I) I)) 13)
;; Loading (DEFTEST DO.13 (DO ((I 0 (1+ I))) ((> I 10))) NIL)
;; Loading (DEFTEST DO.14 (LET ((X 0)) (FLET ((%F NIL (LOCALLY (DECLARE (SPECIAL I)) (INCF X I)))) (DO ((I 0 (1+ I))) ((>= I 10) X) (DECLARE (SPECIAL I)) (%F)))) 45)
;; Loading (DEFTEST DO.15 (MAPCAR (FUNCTION FUNCALL) (LET ((X NIL)) (DO ((I 0 (1+ I))) ((= I 5) X) (PUSH (FUNCTION (LAMBDA NIL I)) X)))) (5 5 5 5 5))
;; Loading (DEFTEST DO.16 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (DO ((I (RETURN-FROM DONE X) 0)) (T NIL) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DO.17 (BLOCK DONE (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO ((I 0 (RETURN-FROM DONE X))) (NIL NIL) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DO.18 (BLOCK DONE (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO ((I 0 0)) ((RETURN-FROM DONE X) NIL) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DO.19 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO NIL (T X) (DECLARE (SPECIAL X))))) :GOOD)
;; Loading (DEFTEST DO.20 (LET ((RESULT NIL)) (MACROLET ((%M (Z) Z)) (DO ((X (EXPAND-IN-CURRENT-ENV (%M 0)) (+ X 2))) ((> X 10) RESULT) (PUSH X RESULT)))) (10 8 6 4 2 0))
;; Loading (DEFTEST DO.21 (LET ((RESULT NIL)) (MACROLET ((%M (Z) Z)) (DO ((X 0 (EXPAND-IN-CURRENT-ENV (%M (+ X 2))))) ((> X 10) RESULT) (PUSH X RESULT)))) (10 8 6 4 2 0))
;; Loading (DEFTEST DO.22 (LET ((RESULT NIL)) (MACROLET ((%M (Z) Z)) (DO ((X 0 (+ X 2))) ((EXPAND-IN-CURRENT-ENV (%M (> X 10))) RESULT) (PUSH X RESULT)))) (10 8 6 4 2 0))
;; Loading (DEFTEST DO.23 (LET ((RESULT NIL)) (MACROLET ((%M (Z) Z)) (DO ((X 0 (+ X 2))) ((> X 10) (EXPAND-IN-CURRENT-ENV (%M RESULT))) (PUSH X RESULT)))) (10 8 6 4 2 0))
;; Loading (DEF-MACRO-TEST DO.ERROR.1 (DO ((I 0 (1+ I))) ((= I 5) (QUOTE A))))
;; Loading (LOAD "dostar.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/dostar.lsp C0D4F307>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DO*.1 (DO* ((I 0 (1+ I))) ((>= I 10) I)) 10)
;; Loading (DEFTEST DO*.2 (DO* ((I 0 (1+ J)) (J 0 (1+ I))) ((>= I 10) (+ I J))) 23)
;; Loading (DEFTEST DO*.3 (LET ((X NIL)) (DO* ((I 0 (1+ I))) ((>= I 10) X) (PUSH I X))) (9 8 7 6 5 4 3 2 1 0))
;; Loading (DEFTEST DO*.4 (LET ((X NIL)) (DO* ((I 0 (1+ I))) ((>= I 10) X) (DECLARE (FIXNUM I)) (PUSH I X))) (9 8 7 6 5 4 3 2 1 0))
;; Loading (DEFTEST DO*.5 (DO* ((I 0 (1+ I))) (NIL) (WHEN (> I 10) (RETURN I))) 11)
;; Loading (DEFTEST DO*.6 (DO* ((I 0 (+ I 10))) ((> I -1) I) (RETURN (QUOTE BAD))) 0)
;; Loading (DEFTEST DO*.7 (LET ((X NIL)) (DO* ((I 0 (1+ I))) ((>= I 10) X) (GO AROUND) SMALL (PUSH (QUOTE A) X) (GO DONE) BIG (PUSH (QUOTE B) X) (GO DONE) AROUND (IF (> I 4) (GO BIG) (GO SMALL)) DONE)) (B B B B B A A A A A))
;; Loading (DEFTEST DO*.8 (DO* ((I 0 (1+ I)) (X NIL)) ((>= I 10) X) (PUSH (QUOTE A) X)) (A A A A A A A A A A))
;; Loading (DEFTEST DO*.9 (LET ((I 0)) (DO* NIL ((>= I 10) I) (INCF I))) 10)
;; Loading (DEFTEST DO*.10 (DO* ((I 0 (1+ I))) ((> I 10) (VALUES))))
;; Loading (DEFTEST DO*.11 (DO* ((I 0 (1+ I))) ((> I 10) (VALUES I (1+ I)))) 11 12)
;; Loading (DEFTEST DO*.12 (DO* ((I 0 (1+ I))) ((> I 10) (INCF I) (INCF I) I)) 13)
;; Loading (DEFTEST DO*.13 (DO* ((I 0 (1+ I))) ((> I 10))) NIL)
;; Loading (DEFTEST DO*.14 (LET ((X 0)) (FLET ((%F NIL (LOCALLY (DECLARE (SPECIAL I)) (INCF X I)))) (DO* ((I 0 (1+ I))) ((>= I 10) X) (DECLARE (SPECIAL I)) (%F)))) 45)
;; Loading (DEFTEST DO*.15 (MAPCAR (FUNCTION FUNCALL) (LET ((X NIL)) (DO* ((I 0 (1+ I))) ((= I 5) X) (PUSH (FUNCTION (LAMBDA NIL I)) X)))) (5 5 5 5 5))
;; Loading (DEFTEST DO*.16 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (DO* ((I (RETURN-FROM DONE X) 0)) (T NIL) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DO*.17 (BLOCK DONE (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO* ((I 0 (RETURN-FROM DONE X))) (NIL NIL) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DO*.18 (BLOCK DONE (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO* ((I 0 0)) ((RETURN-FROM DONE X) NIL) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DO*.19 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO* NIL (T X) (DECLARE (SPECIAL X))))) :GOOD)
;; Loading (DEFTEST DO*.20 (LET ((RESULT 0)) (MACROLET ((%M (Z) Z)) (DO* ((X (EXPAND-IN-CURRENT-ENV (%M 1)) (1+ X))) ((> X 10) RESULT) (INCF RESULT X)))) 55)
;; Loading (DEFTEST DO*.21 (LET ((RESULT 0)) (MACROLET ((%M (Z) Z)) (DO* ((X 1 (EXPAND-IN-CURRENT-ENV (%M (1+ X))))) ((> X 10) RESULT) (INCF RESULT X)))) 55)
;; Loading (DEFTEST DO*.22 (LET ((RESULT 0)) (MACROLET ((%M (Z) Z)) (DO* ((X 1 (1+ X))) ((EXPAND-IN-CURRENT-ENV (%M (> X 10))) RESULT) (INCF RESULT X)))) 55)
;; Loading (DEFTEST DO*.23 (LET ((RESULT 0)) (MACROLET ((%M (Z) Z)) (DO* ((X 1 (1+ X))) ((> X 10) (EXPAND-IN-CURRENT-ENV (%M RESULT))) (INCF RESULT X)))) 55)
;; Loading (DEF-MACRO-TEST DO*.ERROR.1 (DO* ((I 0 (1+ I))) ((= I 5) (QUOTE A))))
;; Loading (LOAD "dolist.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/dolist.lsp C0E377A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DOLIST.1 (LET ((COUNT 0)) (DOLIST (X (QUOTE (A B NIL D))) (INCF COUNT)) COUNT) 4)
;; Loading (DEFTEST DOLIST.2 (LET ((COUNT 0)) (DOLIST (X (QUOTE (A NIL C D)) COUNT) (INCF COUNT))) 4)
;; Loading (DEFTEST DOLIST.3 (LET ((COUNT 0)) (DOLIST (X NIL COUNT) (INCF COUNT))) 0)
;; Loading (DEFTEST DOLIST.4 (LET ((Y NIL)) (FLET ((%F NIL (LOCALLY (DECLARE (SPECIAL E)) (PUSH E Y)))) (DOLIST (E (QUOTE (A B C)) (REVERSE Y)) (DECLARE (SPECIAL E)) (%F)))) (A B C))
;; Loading (DEFTEST DOLIST.5 (LET ((EVEN NIL) (ODD NIL)) (DOLIST (I (QUOTE (1 2 3 4 5 6 7 8)) (VALUES (REVERSE EVEN) (REVERSE ODD))) (WHEN (EVENP I) (GO EVEN)) (PUSH I ODD) (GO DONE) EVEN (PUSH I EVEN) DONE)) (2 4 6 8) (1 3 5 7))
;; Loading (DEFTEST DOLIST.6 (LET ((I 0) (Y NIL)) (DECLARE (SPECIAL I)) (FLET ((%F NIL I)) (DOLIST (I (QUOTE (1 2 3 4))) (PUSH (%F) Y))) Y) (0 0 0 0))
;; Loading (DEFTEST DOLIST.7 (DOLIST (X (QUOTE (A B)) (VALUES))))
;; Loading (DEFTEST DOLIST.8 (LET ((COUNT 0)) (DOLIST (X (QUOTE (A B C)) (VALUES COUNT COUNT)) (INCF COUNT))) 3 3)
;; Loading (DEFTEST DOLIST.9 (BLOCK NIL (EQLT (DOLIST (X (QUOTE (A B C))) (RETURN 1)) 1)) T)
;; Loading (DEFTEST DOLIST.10 (BLOCK NIL (EQLT (DOLIST (X (QUOTE (A B C))) (RETURN-FROM NIL 1)) 1)) T)
;; Loading (DEFTEST DOLIST.11 (BLOCK NIL (DOLIST (X (RETURN 1))) 2) 2)
;; Loading (DEFTEST DOLIST.12 (BLOCK NIL (DOLIST (X (QUOTE (A B)) (RETURN 1))) 2) 2)
;; Loading (DEFTEST DOLIST.13 (DOLIST (E (QUOTE (A B C)) E)) NIL)
;; Loading (DEFTEST DOLIST.14 (LET ((E 1)) (DOLIST (E (QUOTE (A B C)) (SETF E 2))) E) 1)
;; Loading (DEFTEST DOLIST.15 (LET ((X NIL)) (DOLIST (E (QUOTE (A B C D E F))) (PUSH E X) (WHEN (EQ E (QUOTE C)) (RETURN X)))) (C B A))
;; Loading (DEFTEST DOLIST.16 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (DOLIST (E (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DOLIST.17 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DOLIST (E NIL X) (DECLARE (SPECIAL X))))) :GOOD)
;; Loading (DEFTEST DOLIST.18 (LET ((RESULT NIL)) (MACROLET ((%M (Z) Z)) (DOLIST (X (EXPAND-IN-CURRENT-ENV (%M (QUOTE (A B C)))) RESULT) (PUSH X RESULT)))) (C B A))
;; Loading (DEFTEST DOLIST.19 (LET ((RESULT NIL)) (MACROLET ((%M (Z) Z)) (DOLIST (X (QUOTE (A B C)) (EXPAND-IN-CURRENT-ENV (%M RESULT))) (PUSH X RESULT)))) (C B A))
;; Loading (DEF-MACRO-TEST DOLIST.ERROR.1 (DOLIST (X NIL)))
;; Loading (LOAD "dotimes.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/dotimes.lsp C0EF0B57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DOTIMES.1 (DOTIMES (I 10)) NIL)
;; Loading (DEFTEST DOTIMES.2 (DOTIMES (I 10 (QUOTE A))) A)
;; Loading (DEFTEST DOTIMES.3 (DOTIMES (I 10 (VALUES))))
;; Loading (DEFTEST DOTIMES.3A (DOTIMES (I 10 (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) A B C)
;; Loading (DEFTEST DOTIMES.4 (LET ((X NIL)) (DOTIMES (I 5 X) (PUSH I X))) (4 3 2 1 0))
;; Loading (DEFTEST DOTIMES.5 (LET ((X NIL)) (DOTIMES (I 0 X) (PUSH I X))) NIL)
;; Loading (DEFTEST DOTIMES.6 (BLOCK DONE (DOTIMES (I -1 (QUOTE GOOD)) (RETURN-FROM DONE (QUOTE BAD)))) GOOD)
;; Loading (DEFTEST DOTIMES.7 (BLOCK DONE (DOTIMES (I (1- MOST-NEGATIVE-FIXNUM) (QUOTE GOOD)) (RETURN-FROM DONE (QUOTE BAD)))) GOOD)
;; Loading (DEFTEST DOTIMES.8 (BLOCK NIL (DOTIMES (I (RETURN 1))) 2) 2)
;; Loading (DEFTEST DOTIMES.9 (BLOCK NIL (DOTIMES (I 10 (RETURN 1))) 2) 2)
;; Loading (DEFTEST DOTIMES.10 (BLOCK NIL (DOTIMES (I 10) (RETURN 1)) 2) 2)
;; Loading (DEFTEST DOTIMES.11 (LET ((X NIL)) (DOTIMES (I 10) (PUSH I X) (WHEN (= I 5) (RETURN X)))) (5 4 3 2 1 0))
;; Loading (DEFTEST DOTIMES.12 (LET ((EVEN NIL) (ODD NIL)) (DOTIMES (I 8 (VALUES (REVERSE EVEN) (REVERSE ODD))) (WHEN (EVENP I) (GO EVEN)) (PUSH I ODD) (GO DONE) EVEN (PUSH I EVEN) DONE)) (0 2 4 6) (1 3 5 7))
;; Loading (DEFTEST DOTIMES.13 (LET ((I 100)) (DOTIMES (I 10 I))) 10)
;; Loading (DEFTEST DOTIMES.14 (LET ((I 100)) (DOTIMES (I 0 I))) 0)
;; Loading (DEFTEST DOTIMES.15 (LET ((I 100)) (DOTIMES (I -1 I))) 0)
;; Loading (DEFTEST DOTIMES.16 (LET ((I NIL)) (VALUES I (DOTIMES (I (PROGN (SETF I (QUOTE A)) 10) I)) I)) NIL 10 A)
;; Loading (DEFTEST DOTIMES.17 (LET ((I 0) (Y NIL)) (DECLARE (SPECIAL I)) (FLET ((%F NIL I)) (DOTIMES (I 4) (PUSH (%F) Y))) Y) (0 0 0 0))
;; Loading (DEFTEST DOTIMES.17A (LET ((I 0) (Y NIL) (BOUND 4)) (DECLARE (SPECIAL I)) (FLET ((%F NIL I)) (DOTIMES (I BOUND) (PUSH (%F) Y))) Y) (0 0 0 0))
;; Loading (DEFTEST DOTIMES.18 (LET ((I 0) (Y NIL)) (DECLARE (SPECIAL I)) (FLET ((%F NIL I)) (DOTIMES (I 4) (DECLARE (SPECIAL I)) (PUSH (%F) Y))) Y) (3 2 1 0))
;; Loading (DEFTEST DOTIMES.18A (LET ((I 0) (Y NIL) (BOUND 4)) (DECLARE (SPECIAL I)) (FLET ((%F NIL I)) (DOTIMES (I BOUND) (DECLARE (SPECIAL I)) (PUSH (%F) Y))) Y) (3 2 1 0))
;; Loading (DEFTEST DOTIMES.19 (DOTIMES (I 100 I)) 100)
;; Loading (DEFTEST DOTIMES.20 (DOTIMES (I -100 I)) 0)
;; Loading (DEFTEST DOTIMES.21 (LET ((X 0)) (DOTIMES (I (1- MOST-NEGATIVE-FIXNUM) (VALUES I X)) (DECLARE (TYPE FIXNUM I)) (INCF X))) 0 0)
;; Loading (DEFTEST DOTIMES.22 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (DOTIMES (I (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DOTIMES.23 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DOTIMES (I 10 X) (DECLARE (SPECIAL X))))) :GOOD)
;; Loading (DEFTEST DOTIMES.23A (LET ((X :GOOD) (BOUND 10)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DOTIMES (I BOUND X) (DECLARE (SPECIAL X))))) :GOOD)
;; Loading (DEFTEST DOTIMES.24 (LET ((BOUND 4) (J 0)) (VALUES (DOTIMES (I BOUND) (INCF J) (DECF BOUND)) BOUND J)) NIL 0 4)
;; Loading (DEFTEST DOTIMES.25 (MACROLET ((%M (Z) Z)) (LET (RESULT) (DOTIMES (I (EXPAND-IN-CURRENT-ENV (%M 4)) RESULT) (PUSH I RESULT)))) (3 2 1 0))
;; Loading (DEFTEST DOTIMES.26 (MACROLET ((%M (Z) Z)) (LET (RESULT) (DOTIMES (I 4 (EXPAND-IN-CURRENT-ENV (%M RESULT))) (PUSH I RESULT)))) (3 2 1 0))
;; Loading (DEF-MACRO-TEST DOTIMES.ERROR.1 (DOTIMES (I 10)))
;; Loading (LOAD "loop.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/loop.lsp C0FE80C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SLOOP.1 (LOOP (RETURN (QUOTE A))) A)
;; Loading (DEFTEST SLOOP.2 (LOOP (RETURN (VALUES))))
;; Loading (DEFTEST SLOOP.3 (LOOP (RETURN (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) A B C D)
;; Loading (DEFTEST SLOOP.4 (BLOCK NIL (LOOP (RETURN (QUOTE A))) (QUOTE B)) B)
;; Loading (DEFTEST SLOOP.5 (LET ((I 0) (X NIL)) (LOOP (WHEN (>= I 4) (RETURN X)) (INCF I) (PUSH (QUOTE A) X))) (A A A A))
;; Loading (DEFTEST SLOOP.6 (LET ((I 0) (X NIL)) (BLOCK FOO (TAGBODY (LOOP (WHEN (>= I 4) (GO A)) (INCF I) (PUSH (QUOTE A) X)) A (RETURN-FROM FOO X)))) (A A A A))
;; Loading (DEFTEST SLOOP.7 (CATCH (QUOTE FOO) (LET ((I 0) (X NIL)) (LOOP (WHEN (>= I 4) (THROW (QUOTE FOO) X)) (INCF I) (PUSH (QUOTE A) X)))) (A A A A))
;; Loading (DEF-MACRO-TEST LOOP.ERROR.1 (LOOP))
;; Loading (DEFTEST LOOP-FINISH.ERROR.1 (BLOCK DONE (LOOP FOR I FROM 1 TO 10 DO (MACROLET ((%M (&ENVIRONMENT ENV) (LET ((MFN (MACRO-FUNCTION (QUOTE LOOP-FINISH) ENV))) (COND ((NOT MFN) (QUOTE (RETURN-FROM DONE :FAIL1))) ((NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (FUNCALL (SYSTEM.INTERNALS::BQ-COMMA MFN)) PROGRAM-ERROR)))) (QUOTE (RETURN-FROM DONE :FAIL2))) ((NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (FUNCALL (SYSTEM.INTERNALS::BQ-COMMA MFN) (QUOTE (LOOP-FINISH))) PROGRAM-ERROR)))) (QUOTE (RETURN-FROM DONE :FAIL3))) ((NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (FUNCALL (SYSTEM.INTERNALS::BQ-COMMA MFN) (QUOTE (LOOP-FINISH)) NIL NIL) PROGRAM-ERROR)))) (QUOTE (RETURN-FROM DONE :FAIL4))) (T (QUOTE (RETURN-FROM DONE :GOOD))))))) (%M)))) :GOOD)
;; Loading (LOAD "loop1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/loop1.lsp C1087F57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LOOP.1.1 (LOOP FOR X FROM 1 TO 10 COLLECT X) (1 2 3 4 5 6 7 8 9 10))
;; Loading (DEFTEST LOOP.1.2 (LOOP FOR X FROM 6 DOWNTO 1 COLLECT X) (6 5 4 3 2 1))
;; Loading (DEFTEST LOOP.1.3 (LOOP FOR X FROM 1 TO 1 COLLECT X) (1))
;; Loading (DEFTEST LOOP.1.4 (LOOP FOR X FROM 1 TO 0 COLLECT X) NIL)
;; Loading (DEFTEST LOOP.1.5 (LOOP FOR X TO 5 COLLECT X) (0 1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.6 (LOOP FOR X DOWNFROM 5 TO 0 COLLECT X) (5 4 3 2 1 0))
;; Loading (DEFTEST LOOP.1.7 (LOOP FOR X UPFROM 1 TO 5 COLLECT X) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.8 (LOOP FOR X FROM 1.0 TO 5.0 COUNT X) 5)
;; Loading (DEFTEST LOOP.1.9 (LOOP FOR X FROM 1 TO 9 BY 2 COLLECT X) (1 3 5 7 9))
;; Loading (DEFTEST LOOP.1.10 (LOOP FOR X FROM 1 TO 10 BY 2 COLLECT X) (1 3 5 7 9))
;; Loading (DEFTEST LOOP.1.11 (LOOP FOR X TO 10 FROM 1 COLLECT X) (1 2 3 4 5 6 7 8 9 10))
;; Loading (DEFTEST LOOP.1.12 (LOOP FOR X TO 10 BY 2 FROM 1 COLLECT X) (1 3 5 7 9))
;; Loading (DEFTEST LOOP.1.13 (LOOP FOR X BY 2 TO 10 FROM 1 COLLECT X) (1 3 5 7 9))
;; Loading (DEFTEST LOOP.1.14 (LOOP FOR X BY 2 TO 10 COLLECT X) (0 2 4 6 8 10))
;; Loading (DEFTEST LOOP.1.15 (LOOP FOR X TO 10 BY 2 COLLECT X) (0 2 4 6 8 10))
;; Loading (DEFTEST LOOP.1.16 (LET ((N 0)) (LOOP FOR X FROM (INCF N) TO (+ N 5) COLLECT X)) (1 2 3 4 5 6))
;; Loading (DEFTEST LOOP.1.17 (LET ((N 0)) (LOOP FOR X TO (+ N 5) FROM (INCF N) COLLECT X)) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.18 (LET ((N 0)) (LOOP FOR X FROM (INCF N) TO (+ N 9) BY (INCF N) COLLECT X)) (1 3 5 7 9))
;; Loading (DEFTEST LOOP.1.19 (LET ((N 0)) (LOOP FOR X FROM (INCF N) BY (INCF N) TO (+ N 9) COLLECT X)) (1 3 5 7 9 11))
;; Loading (DEFTEST LOOP.1.20 (LET ((A 0) (B 5) (C 1)) (LOOP FOR X FROM A TO B BY C COLLECT (PROGN (INCF A) (INCF B 2) (INCF C 3) X))) (0 1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.21 (LOOP FOR X FROM 0 TO 5 BY 1/2 COLLECT X) (0 1/2 1 3/2 2 5/2 3 7/2 4 9/2 5))
;; Loading (DEFTEST LOOP.1.22 (LOOP FOR X FROM 1 BELOW 5 COLLECT X) (1 2 3 4))
;; Loading (DEFTEST LOOP.1.23 (LOOP FOR X FROM 1 BELOW 5.01 COLLECT X) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.24 (LOOP FOR X BELOW 5 FROM 2 COLLECT X) (2 3 4))
;; Loading (DEFTEST LOOP.1.25 (LOOP FOR X FROM 10 ABOVE 4 COLLECT X) (10 9 8 7 6 5))
;; Loading (DEFTEST LOOP.1.26 (LOOP FOR X FROM 14 ABOVE 6 BY 2 COLLECT X) (14 12 10 8))
;; Loading (DEFTEST LOOP.1.27 (LOOP FOR X ABOVE 6 FROM 14 BY 2 COLLECT X) (14 12 10 8))
;; Loading (DEFTEST LOOP.1.28 (LOOP FOR X DOWNFROM 16 ABOVE 7 BY 3 COLLECT X) (16 13 10))
;; Loading (DEFTEST LOOP.1.29 (LET (A B C (I 0)) (VALUES (LOOP FOR X FROM (PROGN (SETQ A (INCF I)) 0) BELOW (PROGN (SETQ B (INCF I)) 9) BY (PROGN (SETQ C (INCF I)) 2) COLLECT X) A B C I)) (0 2 4 6 8) 1 2 3 3)
;; Loading (DEFTEST LOOP.1.30 (LET (A B C (I 0)) (VALUES (LOOP FOR X FROM (PROGN (SETQ A (INCF I)) 0) BY (PROGN (SETQ C (INCF I)) 2) BELOW (PROGN (SETQ B (INCF I)) 9) COLLECT X) A B C I)) (0 2 4 6 8) 1 3 2 3)
;; Loading (DEFTEST LOOP.1.31 (LET (A B C (I 0)) (VALUES (LOOP FOR X BELOW (PROGN (SETQ B (INCF I)) 9) BY (PROGN (SETQ C (INCF I)) 2) FROM (PROGN (SETQ A (INCF I)) 0) COLLECT X) A B C I)) (0 2 4 6 8) 3 1 2 3)
;; Loading (DEFTEST LOOP.1.32 (LET (A B C (I 0)) (VALUES (LOOP FOR X BY (PROGN (SETQ C (INCF I)) 2) BELOW (PROGN (SETQ B (INCF I)) 9) FROM (PROGN (SETQ A (INCF I)) 0) COLLECT X) A B C I)) (0 2 4 6 8) 3 2 1 3)
;; Loading (DEFTEST LOOP.1.33 (LOOP FOR X FROM 1 UPTO 5 COLLECT X) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.34 (LOOP FOR X FROM 1 TO 4.0 COLLECT X) (1 2 3 4))
;; Loading (DEFTEST LOOP.1.35 (LOOP FOR X BELOW 5 COLLECT X) (0 1 2 3 4))
;; Loading (DEFTEST LOOP.1.36 (LOOP FOR X BELOW 20 BY 3 COLLECT X) (0 3 6 9 12 15 18))
;; Loading (DEFTEST LOOP.1.37 (LOOP FOR X BY 3 BELOW 20 COLLECT X) (0 3 6 9 12 15 18))
;; Loading (DEFTEST LOOP.1.38 (LOOP FOR X OF-TYPE FIXNUM FROM 1 TO 5 COLLECT X) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.44 (LOOP FOR I FROM 1 TO 5 FOR C FROM #C(0 1) COLLECT C) (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1)))
;; Loading (DEFTEST LOOP.1.45 (LOOP FOR I FROM 1 TO 5 FOR C FROM #C(0 1) BY 2 COLLECT C) (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1)))
;; Loading (DEFTEST LOOP.1.46 (LOOP FOR I FROM 1 TO 5 FOR C DOWNFROM #C(5 1) COLLECT C) (#C(5 1) #C(4 1) #C(3 1) #C(2 1) #C(1 1)))
;; Loading (DEFTEST LOOP.1.47 (LOOP FOR I FROM 1 TO 5 FOR C DOWNFROM #C(10 1) BY 2 COLLECT C) (#C(10 1) #C(8 1) #C(6 1) #C(4 1) #C(2 1)))
;; Loading (DEFTEST LOOP.1.48 (LOOP FOR I FROM 1 TO 5 FOR C UPFROM #C(0 1) COLLECT C) (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1)))
;; Loading (DEFTEST LOOP.1.49 (LOOP FOR I FROM 1 TO 5 FOR C UPFROM #C(0 1) BY 2 COLLECT C) (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1)))
;; Loading (DEFTEST LOOP.1.50 (LET ((I 0)) (LOOP FOR NIL FROM 10 TO 15 COLLECT (INCF I))) (1 2 3 4 5 6))
;; Loading (DEFTEST LOOP.1.51 (LET ((I 0)) (LOOP FOR NIL FROM 10 BELOW 15 COLLECT (INCF I))) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.52 (LOOP FOR NIL FROM 10 TO 0 COLLECT (QUOTE A)) NIL)
;; Loading (DEFTEST LOOP.1.53 (LET ((I 0)) (LOOP FOR NIL FROM 0 TO 10 BY 2 COLLECT (INCF I))) (1 2 3 4 5 6))
;; Loading (DEFTEST LOOP.1.54 (LET ((I 0)) (LOOP FOR NIL FROM 1 TO 4 FOR NIL FROM 1 TO 10 COLLECT (INCF I))) (1 2 3 4))
;; Loading (DEFTEST LOOP.1.55 (LET ((I 0)) (LOOP FOR NIL FROM 5 DOWNTO 0 COLLECT (INCF I))) (1 2 3 4 5 6))
;; Loading (DEFTEST LOOP.1.56 (LET ((I 0)) (LOOP FOR NIL FROM 5 ABOVE 0 COLLECT (INCF I))) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.57 (MACROLET ((%M (Z) Z)) (LOOP FOR I FROM (EXPAND-IN-CURRENT-ENV (%M 1)) TO 5 COLLECT I)) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.58 (MACROLET ((%M (Z) Z)) (LOOP FOR I FROM 1 TO (EXPAND-IN-CURRENT-ENV (%M 5)) COLLECT I)) (1 2 3 4 5))
;; Loading (DEFTEST LOOP.1.59 (MACROLET ((%M (Z) Z)) (LOOP FOR I FROM 1 TO 5 BY (EXPAND-IN-CURRENT-ENV (%M 2)) COLLECT I)) (1 3 5))
;; Loading (DEFTEST LOOP.1.60 (MACROLET ((%M (Z) Z)) (LOOP FOR I DOWNFROM (EXPAND-IN-CURRENT-ENV (%M 10)) TO 3 COLLECT I)) (10 9 8 7 6 5 4 3))
;; Loading (DEFTEST LOOP.1.61 (MACROLET ((%M (Z) Z)) (LOOP FOR I DOWNFROM 10 TO (EXPAND-IN-CURRENT-ENV (%M 3)) COLLECT I)) (10 9 8 7 6 5 4 3))
;; Loading (DEFTEST LOOP.1.62 (MACROLET ((%M (Z) Z)) (LOOP FOR I FROM (EXPAND-IN-CURRENT-ENV (%M 10)) DOWNTO 3 COLLECT I)) (10 9 8 7 6 5 4 3))
;; Loading (DEFTEST LOOP.1.63 (MACROLET ((%M (Z) Z)) (LOOP FOR I FROM 10 DOWNTO (EXPAND-IN-CURRENT-ENV (%M 3)) COLLECT I)) (10 9 8 7 6 5 4 3))
;; Loading (DEFTEST LOOP.1.64 (MACROLET ((%M (Z) Z)) (LOOP FOR I FROM (EXPAND-IN-CURRENT-ENV (%M 1)) BELOW 5 COLLECT I)) (1 2 3 4))
;; Loading (DEFTEST LOOP.1.65 (MACROLET ((%M (Z) Z)) (LOOP FOR I FROM 1 BELOW (EXPAND-IN-CURRENT-ENV (%M 5)) COLLECT I)) (1 2 3 4))
;; Loading (LOAD "loop2.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/loop2.lsp C1263F27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LOOP.2.1 (LOOP FOR X IN (QUOTE (1 2 3)) SUM X) 6)
;; Loading (DEFTEST LOOP.2.2 (LOOP FOR X IN (QUOTE (1 2 3 4)) DO (WHEN (EVENP X) (RETURN X))) 2)
;; Loading (DEFTEST LOOP.2.3 (SIGNALS-ERROR (LOOP FOR X IN (QUOTE (A . B)) COLLECT X) TYPE-ERROR) T)
;; Loading (DEFTEST LOOP.2.4 (LET ((X NIL)) (LOOP FOR E IN (QUOTE (A B C D)) DO (PUSH E X)) X) (D C B A))
;; Loading (DEFTEST LOOP.2.5 (LOOP FOR E IN (QUOTE (A B C D E F)) BY (FUNCTION CDDR) COLLECT E) (A C E))
;; Loading (DEFTEST LOOP.2.6 (LOOP FOR E IN (QUOTE (A B C D E F G)) BY (FUNCTION CDDR) COLLECT E) (A C E G))
;; Loading (DEFTEST LOOP.2.7 (LOOP FOR E IN (QUOTE (A B C D E F)) BY (FUNCTION (LAMBDA (L) (AND (CDR L) (CONS (CAR L) (CDDR L))))) COLLECT E) (A A A A A A))
;; Loading (DEFTEST LOOP.2.8 (LOOP FOR (X . Y) IN (QUOTE ((A . B) (C . D) (E . F))) COLLECT (LIST X Y)) ((A B) (C D) (E F)))
;; Loading (DEFTEST LOOP.2.9 (LOOP FOR (X NIL Y) IN (QUOTE ((A B C) (D E F) (G H I))) COLLECT (LIST X Y)) ((A C) (D F) (G I)))
;; Loading (DEFTEST LOOP.2.10 (LOOP FOR (X Y) OF-TYPE FIXNUM IN (QUOTE ((1 2) (3 4) (5 6))) COLLECT (+ X Y)) (3 7 11))
;; Loading (DEFTEST LOOP.2.11 (LOOP FOR (X Y) OF-TYPE FIXNUM IN (QUOTE ((1 2) (3 4) (5 6))) COLLECT (+ X Y)) (3 7 11))
;; Loading (DEFTEST LOOP.2.12 (LOOP FOR (X Y) OF-TYPE (FIXNUM FIXNUM) IN (QUOTE ((1 2) (3 4) (5 6))) COLLECT (+ X Y)) (3 7 11))
;; Loading (DEFTEST LOOP.2.13 (LOOP FOR (X . Y) OF-TYPE (FIXNUM . FIXNUM) IN (QUOTE ((1 . 2) (3 . 4) (5 . 6))) COLLECT (+ X Y)) (3 7 11))
;; Loading (DEFTEST LOOP.2.14 (SIGNALS-ERROR (LOOP FOR X IN (QUOTE (A B C)) FOR X IN (QUOTE (D E F)) COLLECT X) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOOP.2.15 (SIGNALS-ERROR (LOOP FOR (X . X) IN (QUOTE ((A B) (C D))) COLLECT X) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOOP.2.16 (LOOP FOR NIL IN NIL DO (RETURN T)) NIL)
;; Loading (DEFTEST LOOP.2.17 (LET ((X (QUOTE (A B C)))) (VALUES X (LOOP FOR X IN (QUOTE (D E F)) COLLECT (LIST X)) X)) (A B C) ((D) (E) (F)) (A B C))
;; Loading (DEFTEST LOOP.2.18 (LOOP FOR X OF-TYPE (INTEGER 0 10) IN (QUOTE (2 4 6 7)) SUM X) 19)
;; Loading (DEFTEST LOOP.2.19 (LOOP AS X IN (QUOTE (1 2 3)) SUM X) 6)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST LOOP.2.20 (LOOP AS X IN (QUOTE (A B C)) AS Y IN (QUOTE (1 2 3)) COLLECT (LIST X Y)) ((A 1) (B 2) (C 3)))
;; Loading (DEFTEST LOOP.2.21 (LOOP AS X IN (QUOTE (A B C)) FOR Y IN (QUOTE (1 2 3)) COLLECT (LIST X Y)) ((A 1) (B 2) (C 3)))
;; Loading (DEFTEST LOOP.2.22 (LOOP FOR X IN (QUOTE (A B C)) AS Y IN (QUOTE (1 2 3)) COLLECT (LIST X Y)) ((A 1) (B 2) (C 3)))
;; Loading (DEFTEST LOOP.2.23 (LET (A B (I 0)) (VALUES (LOOP FOR E IN (PROGN (SETF A (INCF I)) (QUOTE (A B C D E F G))) BY (PROGN (SETF B (INCF I)) (FUNCTION CDDR)) COLLECT E) A B I)) (A C E G) 1 2 2)
;; Loading (DEFTEST LOOP.2.24 (MACROLET ((%M (Z) Z)) (LOOP FOR X IN (EXPAND-IN-CURRENT-ENV (%M (QUOTE (1 2 3)))) SUM X)) 6)
;; Loading (DEFTEST LOOP.2.25 (MACROLET ((%M (Z) Z)) (LOOP FOR (X . Y) IN (EXPAND-IN-CURRENT-ENV (%M (QUOTE ((A . B) (C . D) (E . F))))) COLLECT (LIST X Y))) ((A B) (C D) (E F)))
;; Loading (DEFTEST LOOP.2.26 (MACROLET ((%M (Z) Z)) (LOOP AS X IN (EXPAND-IN-CURRENT-ENV (%M (QUOTE (1 2 3)))) SUM X)) 6)
;; Loading (LOAD "load-objects.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-objects.lsp 80BD9C27>
;; Loading (COMPILE-AND-LOAD "defclass-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/defclass-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN MAKE-DEFCLASS-TEST-NAME (&REST ARGS) (INTERN (APPLY (FUNCTION CONCATENATE) (QUOTE STRING) (MAPCAR (FUNCTION STRING) ARGS)) (FIND-PACKAGE :CL-TEST))).
;; Compiling form (DEFPARAMETER *DEFCLASS-SLOT-READERS* NIL).
;; Compiling form (DEFPARAMETER *DEFCLASS-SLOT-WRITERS* NIL).
;; Compiling form (DEFPARAMETER *DEFCLASS-SLOT-ACCESSORS* NIL).
;; Compiling form (DEFSTRUCT MY-CLASS (NAME NIL :TYPE SYMBOL) (DIRECT-SUPERCLASS-NAMES NIL :TYPE LIST) (SLOTS NIL :TYPE LIST) (DEFAULT-INITARGS NIL :TYPE LIST) (METACLASS (QUOTE STANDARD-CLASS) :TYPE SYMBOL) (DOCUMENTATION NIL :TYPE (OR NULL STRING)) (PREDS NIL :TYPE LIST) (SUCCS NIL :TYPE LIST) (COUNT 0 :TYPE INTEGER) (INDEX NIL) (MIN-PRED-INDEX 1000000)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFSTRUCT MY-SLOT (NAME NIL :TYPE SYMBOL) (HAS-INITFORM NIL :TYPE BOOLEAN) INITFORM (INITARGS NIL :TYPE LIST) (DOCUMENTATION NIL :TYPE (OR NULL STRING)) (READERS NIL :TYPE LIST) (WRITERS NIL :TYPE LIST) (ACCESSORS NIL :TYPE LIST) (ALLOCATION :INSTANCE :TYPE (MEMBER :INSTANCE :CLASS)) (TYPE T)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFPARAMETER *MY-CLASSES* (MAKE-HASH-TABLE) "Hash table mapping names of classes defined using DEFCLASS-WITH-TESTS
   to their my-class objects.").
;; Compiling form (DEFUN FIND-MY-CLASS (CLASS-NAME) (GETHASH CLASS-NAME *MY-CLASSES*)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMACRO DEFCLASS-WITH-TESTS (&WHOLE ARGS CLASS-NAME SUPERCLASSES SLOT-SPECIFIERS &REST CLASS-OPTIONS) (ASSERT (TYPEP CLASS-NAME (QUOTE (AND (NOT NULL) SYMBOL)))) (ASSERT (LISTP SUPERCLASSES)) (ASSERT (EVERY (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (AND (NOT NULL) SYMBOL))))) SUPERCLASSES)) (ASSERT (LISTP SLOT-SPECIFIERS)) (ASSERT (EVERY (FUNCTION (LAMBDA (S) (OR (SYMBOLP S) (AND (CONSP S) (SYMBOLP (CAR S)))))) SLOT-SPECIFIERS)) (ASSERT (EVERY (FUNCTION (LAMBDA (X) (AND (CONSP X) (MEMBER (CAR X) (QUOTE (:DEFAULT-INITARGS :DOCUMENTATION :METACLASS)))))) CLASS-OPTIONS)) (ASSERT (EQL (LENGTH CLASS-OPTIONS) (LENGTH (REMOVE-DUPLICATES CLASS-OPTIONS)))) (LET* ((DEFAULT-INITARGS (REST (ASSOC :DEFAULT-INITARGS CLASS-OPTIONS))) (METACLASS (OR (SECOND (ASSOC :METACLASS CLASS-OPTIONS)) (QUOTE STANDARD-CLASS))) (DOC (SECOND (ASSOC :DOCUMENTATION CLASS-OPTIONS))) (SLOT-NAMES (LOOP FOR SLOT-SPEC IN SLOT-SPECIFIERS COLLECT (COND ((SYMBOLP SLOT-SPEC) SLOT-SPEC) (T (ASSERT (CONSP SLOT-SPEC)) (ASSERT (SYMBOLP (CAR SLOT-SPEC))) (CAR SLOT-SPEC))))) (SLOT-OPTIONS (LOOP FOR SLOT-SPEC IN SLOT-SPECIFIERS COLLECT (IF (CONSP SLOT-SPEC) (CDR SLOT-SPEC) NIL))) (READERS (LOOP FOR SLOT-OPTION IN SLOT-OPTIONS APPEND (COLLECT-PROPERTIES SLOT-OPTION :READER))) (WRITERS (LOOP FOR SLOT-OPTION IN SLOT-OPTIONS APPEND (COLLECT-PROPERTIES SLOT-OPTION :WRITER))) (ACCESSORS (LOOP FOR SLOT-OPTION IN SLOT-OPTIONS APPEND (COLLECT-PROPERTIES SLOT-OPTION :ACCESSOR))) (ALLOCATIONS (LOOP FOR SLOT-OPTION IN SLOT-OPTIONS COLLECT (OR (GET SLOT-OPTION :ALLOCATION) :INSTANCE))) (INITARGS (LOOP FOR SLOT-OPTION IN SLOT-OPTIONS COLLECT (COLLECT-PROPERTIES SLOT-OPTION :INITARG))) (TYPES (LOOP FOR SLOT-OPTION IN SLOT-OPTIONS COLLECT (COLLECT-PROPERTIES SLOT-OPTION :TYPE))) (INITFORMS (LOOP FOR SLOT-OPTION IN SLOT-OPTIONS COLLECT (COLLECT-PROPERTIES SLOT-OPTION :INITFORM))) (CLASS-VAR-NAME (INTERN (CONCATENATE (QUOTE STRING) "*CLASS-" (SYMBOL-NAME CLASS-NAME) "-RETURNED-BY-DEFCLASS*") (FIND-PACKAGE :CL-TEST)))) (DECLARE (IGNORABLE READERS WRITERS ACCESSORS ALLOCATIONS INITARGS TYPES INITFORMS DEFAULT-INITARGS DOC)) (ASSERT (LOOP FOR E IN TYPES ALWAYS (< (LENGTH E) 2))) (ASSERT (LOOP FOR E IN INITFORMS ALWAYS (< (LENGTH E) 2))) (SETF *DEFCLASS-SLOT-READERS* (APPEND READERS *DEFCLASS-SLOT-READERS*)) (SETF *DEFCLASS-SLOT-WRITERS* (APPEND WRITERS *DEFCLASS-SLOT-WRITERS*)) (SETF *DEFCLASS-SLOT-ACCESSORS* (APPEND ACCESSORS *DEFCLASS-SLOT-ACCESSORS*)) (LET* ((MY-SLOTS (LOOP FOR NAME IN SLOT-NAMES FOR SLOT-OPTION IN SLOT-OPTIONS FOR READERS = (COLLECT-PROPERTIES SLOT-OPTION :READER) FOR WRITERS = (COLLECT-PROPERTIES SLOT-OPTION :WRITER) FOR ACCESSORS = (COLLECT-PROPERTIES SLOT-OPTION :ACCESSOR) FOR DOCUMENTATION = (GETF SLOT-OPTION :DOCUMENTATION) FOR INITARG-LIST IN INITARGS FOR TYPE-LIST IN TYPES FOR INITFORM-LIST IN INITFORMS FOR ALLOCATION IN ALLOCATIONS COLLECT (MAKE-MY-SLOT :NAME NAME :HAS-INITFORM (NOTNOT INITFORM-LIST) :INITFORM (FIRST INITFORM-LIST) :DOCUMENTATION DOCUMENTATION :READERS READERS :WRITERS WRITERS :ACCESSORS ACCESSORS :TYPE (IF TYPE-LIST (FIRST TYPE-LIST) T)))) (MY-CLASS-OBJ (MAKE-MY-CLASS :NAME CLASS-NAME :DIRECT-SUPERCLASS-NAMES SUPERCLASSES :DEFAULT-INITARGS DEFAULT-INITARGS :DOCUMENTATION DOC :METACLASS METACLASS :SLOTS MY-SLOTS))) (SETF (GETHASH CLASS-NAME *MY-CLASSES*) MY-CLASS-OBJ)) (SYSTEM.INTERNALS::BACKQUOTE (PROGN (DECLAIM (SPECIAL (SYSTEM.INTERNALS::BQ-COMMA CLASS-VAR-NAME))) (REPORT-AND-IGNORE-ERRORS (SETQ (SYSTEM.INTERNALS::BQ-COMMA CLASS-VAR-NAME) (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDR ARGS))))) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEFCLASS-TEST-NAME CLASS-NAME "-DEFCLASS-RETURNS-CLASS")) (EQT (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CLASS-NAME))) (SYSTEM.INTERNALS::BQ-COMMA CLASS-VAR-NAME)) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEFCLASS-TEST-NAME CLASS-NAME "-IS-IN-ITS-METACLASS")) (NOTNOT-MV (TYPEP (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CLASS-NAME))) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA METACLASS)))) T) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (EQ METACLASS (QUOTE STANDARD-CLASS)) (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEFCLASS-TEST-NAME CLASS-NAME "S-ARE-STANDARD-OBJECTS")) (SUBTYPEP* (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CLASS-NAME)) (QUOTE STANDARD-OBJECT)) T T))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR SLOT-NAME IN SLOT-NAMES COLLECT (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEFCLASS-TEST-NAME CLASS-NAME "-HAS-SLOT-NAMED-" SLOT-NAME)) (NOTNOT-MV (SLOT-EXISTS-P (MAKE-INSTANCE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CLASS-NAME))) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA SLOT-NAME)))) T)))) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEFCLASS-TEST-NAME CLASS-NAME "-ALLOCATE-INSTANCE")) (DEFCLASS-ALLOCATE-INSTANCE-TEST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CLASS-NAME)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA SLOT-NAMES))) NIL))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN DEFCLASS-ALLOCATE-INSTANCE-TEST (CLASS-NAME SLOT-NAMES) (LET* ((CLASS (FIND-CLASS CLASS-NAME)) (INSTANCE (ALLOCATE-INSTANCE CLASS))) (APPEND (UNLESS (EQL (CLASS-OF INSTANCE) CLASS) (LIST (LIST (QUOTE NOT-INSTANCE-OF) CLASS-NAME))) (LOOP FOR SLOT IN SLOT-NAMES WHEN (SLOT-BOUNDP INSTANCE SLOT) COLLECT (LIST (QUOTE IS-BOUND) SLOT)) (LOOP FOR SLOT IN SLOT-NAMES UNLESS (EQUAL (MULTIPLE-VALUE-LIST (NOTNOT-MV (SLOT-EXISTS-P INSTANCE SLOT))) (QUOTE (T))) COLLECT (LIST (QUOTE DOES-NOT-EXIST) SLOT)) (LET ((BAD-SLOT (QUOTE #:FOO))) (WHEN (SLOT-EXISTS-P INSTANCE BAD-SLOT) (LIST (LIST (QUOTE SHOULD-NOT-EXIST) BAD-SLOT))))))).
;; Compiling form (DEFMACRO GENERATE-SLOT-TESTS NIL "Generate generic tests from the read/writer/accessor functions
   for slots from defclass-with-tests." (LET ((FUNS (REMOVE-DUPLICATES (APPEND *DEFCLASS-SLOT-READERS* *DEFCLASS-SLOT-WRITERS* *DEFCLASS-SLOT-ACCESSORS*)))) (SYSTEM.INTERNALS::BACKQUOTE (PROGN (DEFTEST CLASS-READERS/WRITERS/ACCESSORS-ARE-GENERIC-FUNCTIONS (LOOP FOR SYM IN (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FUNS)) UNLESS (TYPEP (SYMBOL-FUNCTION SYM) (QUOTE GENERIC-FUNCTION)) COLLECT SYM) NIL) (DEFTEST CLASS-ACCESSORS-HAVE-GENERIC-SETF-FUNCTIONS (APPEND (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR SYM IN *DEFCLASS-SLOT-ACCESSORS* COLLECT (SYSTEM.INTERNALS::BACKQUOTE (AND (NOT (TYPEP (FUNCTION (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM))) (QUOTE GENERIC-FUNCTION))) (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM)))))))) NIL))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MY-COMPUTE-CLASS-PRECEDENCE-LIST (CLASS-NAME) "Compute the class precdence list for classes defined using
   DEFCLASS-WITH-TESTS." (LET ((CLASS-NAMES NIL) (CLASS-NAMES-TO-CONSIDER (LIST CLASS-NAME)) CLASSES) (LOOP WHILE CLASS-NAMES-TO-CONSIDER DO (LET ((NAME (POP CLASS-NAMES-TO-CONSIDER))) (UNLESS (MEMBER NAME CLASS-NAMES) (PUSH NAME CLASS-NAMES) (LET ((MY-CLASS (FIND-MY-CLASS NAME))) (ASSERT MY-CLASS) (SETQ CLASS-NAMES-TO-CONSIDER (APPEND (MY-CLASS-DIRECT-SUPERCLASS-NAMES MY-CLASS) CLASS-NAMES-TO-CONSIDER)))))) (SETQ CLASS-NAMES (REVERSE CLASS-NAMES)) (ASSERT (EQ CLASS-NAME (FIRST CLASS-NAMES))) (SETQ CLASSES (MAPCAR (FUNCTION FIND-MY-CLASS) CLASS-NAMES)) (LOOP FOR C IN CLASSES FOR DSNS = (MY-CLASS-DIRECT-SUPERCLASS-NAMES C) DO (LET ((PRED C)) (LOOP FOR SUPERCLASS-NAME IN DSNS FOR SUPERCLASS = (FIND-MY-CLASS SUPERCLASS-NAME) DO (PUSH PRED (MY-CLASS-PREDS SUPERCLASS)) DO (PUSHNEW SUPERCLASS (MY-CLASS-SUCCS PRED)) DO (INCF (MY-CLASS-COUNT SUPERCLASS)) DO (SETQ PRED SUPERCLASS)))) (LET ((CANDIDATES (LOOP FOR C IN CLASSES WHEN (ZEROP (MY-CLASS-COUNT C)) COLLECT C)) (N 0) (RESULT NIL)) (ASSERT (EQUAL CANDIDATES (LIST (FIRST CLASSES)))) (LOOP WHILE CANDIDATES DO (LET* ((NEXT (FIRST CANDIDATES)) (MIN-PRED-INDEX (MY-CLASS-MIN-PRED-INDEX NEXT))) (LOOP FOR C IN (REST CANDIDATES) FOR C-MIN-PRED-INDEX = (MY-CLASS-MIN-PRED-INDEX C) DO (COND ((< C-MIN-PRED-INDEX MIN-PRED-INDEX) (SETQ NEXT C MIN-PRED-INDEX C-MIN-PRED-INDEX)) (T (ASSERT (NOT (= C-MIN-PRED-INDEX MIN-PRED-INDEX)))))) (SETQ CANDIDATES (REMOVE NEXT CANDIDATES)) (SETF (MY-CLASS-INDEX NEXT) (INCF N)) (PUSH NEXT RESULT) (LOOP FOR SUCC IN (MY-CLASS-SUCCS NEXT) DO (DECF (MY-CLASS-COUNT SUCC)) DO (SETF (MY-CLASS-MIN-PRED-INDEX SUCC) (MIN (MY-CLASS-MIN-PRED-INDEX SUCC) N)) DO (WHEN (ZEROP (MY-CLASS-COUNT SUCC)) (PUSH SUCC CANDIDATES))))) (ASSERT (EQL (LENGTH RESULT) (LENGTH CLASSES))) (SETQ RESULT (REVERSE RESULT)) (MAPCAR (FUNCTION MY-CLASS-NAME) RESULT)))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defclass-aux.llf C153C247>
;; Loading (LOAD "defclass.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defclass.lsp C189EDC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS-WITH-TESTS DEFCLASS-1 NIL NIL)
;; Loading (DEFCLASS-WITH-TESTS DEFCLASS-2 NIL (SLOT1 SLOT2 SLOT3))
;; Loading (DEFCLASS-WITH-TESTS DEFCLASS-3 (DEFCLASS-1) NIL)
;; Loading (DEFCLASS-WITH-TESTS DEFCLASS-4 (DEFCLASS-1 DEFCLASS-2) (SLOT1 SLOT4))
;; Loading (GENERATE-SLOT-TESTS)
;; Loading (LOAD "defclass-01.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defclass-01.lsp C192B4B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS CLASS-01 NIL (S1 S2 S3))
;; Loading (DEFTEST CLASS-01.1 (NOTNOT-MV (TYPEP (MAKE-INSTANCE (QUOTE CLASS-01)) (QUOTE CLASS-01))) T)
;; Loading (DEFTEST CLASS-01.2 (NOTNOT-MV (TYPEP (MAKE-INSTANCE (FIND-CLASS (QUOTE CLASS-01))) (QUOTE CLASS-01))) T)
;; Loading (DEFTEST CLASS-01.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-01)))) (VALUES (SETF (SLOT-VALUE C (QUOTE S1)) 12) (SETF (SLOT-VALUE C (QUOTE S2)) 18) (SETF (SLOT-VALUE C (QUOTE S3)) 27) (LOOP FOR S IN (QUOTE (S1 S2 S3)) COLLECT (SLOT-VALUE C S)))) 12 18 27 (12 18 27))
;; Loading (DEFCLASS CLASS-02 NIL ((S1) (S2) (S3)))
;; Loading (DEFTEST CLASS-02.1 (NOTNOT-MV (TYPEP (MAKE-INSTANCE (QUOTE CLASS-02)) (QUOTE CLASS-02))) T)
;; Loading (DEFTEST CLASS-02.2 (NOTNOT-MV (TYPEP (MAKE-INSTANCE (FIND-CLASS (QUOTE CLASS-02))) (QUOTE CLASS-02))) T)
;; Loading (DEFTEST CLASS-02.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-02)))) (VALUES (SETF (SLOT-VALUE C (QUOTE S1)) 12) (SETF (SLOT-VALUE C (QUOTE S2)) 18) (SETF (SLOT-VALUE C (QUOTE S3)) 27) (LOOP FOR S IN (QUOTE (S1 S2 S3)) COLLECT (SLOT-VALUE C S)))) 12 18 27 (12 18 27))
;; Loading (DEFCLASS CLASS-03 NIL ((S1 :TYPE INTEGER) (S2 :TYPE T) (S3 :TYPE FIXNUM)))
;; Loading (DEFTEST CLASS-03.1 (NOTNOT-MV (TYPEP (MAKE-INSTANCE (QUOTE CLASS-03)) (QUOTE CLASS-03))) T)
;; Loading (DEFTEST CLASS-03.2 (NOTNOT-MV (TYPEP (MAKE-INSTANCE (FIND-CLASS (QUOTE CLASS-03))) (QUOTE CLASS-03))) T)
;; Loading (DEFTEST CLASS-03.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-03)))) (VALUES (SETF (SLOT-VALUE C (QUOTE S1)) 12) (SETF (SLOT-VALUE C (QUOTE S2)) (QUOTE A)) (SETF (SLOT-VALUE C (QUOTE S3)) 27) (LOOP FOR S IN (QUOTE (S1 S2 S3)) COLLECT (SLOT-VALUE C S)))) 12 A 27 (12 A 27))
;; Loading (DEFCLASS CLASS-04 NIL ((S1 :READER S1-R) (S2 :WRITER S2-W) (S3 :ACCESSOR S3-A)))
;; Loading (DEFTEST CLASS-04.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-04)))) (VALUES (SETF (SLOT-VALUE C (QUOTE S1)) (QUOTE A)) (SETF (SLOT-VALUE C (QUOTE S2)) (QUOTE B)) (SETF (SLOT-VALUE C (QUOTE S3)) (QUOTE C)) (S1-R C) (SLOT-VALUE C (QUOTE S2)) (S2-W (QUOTE D) C) (SLOT-VALUE C (QUOTE S2)) (S3-A C) (SETF (S3-A C) (QUOTE E)) (SLOT-VALUE C (QUOTE S3)) (S3-A C))) A B C A B D D C E E E)
;; Loading (DEFTEST CLASS-04.2 (NOTNOT-MV (TYPEP (FUNCTION S1-R) (QUOTE GENERIC-FUNCTION))) T)
;; Loading (DEFTEST CLASS-04.3 (NOTNOT-MV (TYPEP (FUNCTION S2-W) (QUOTE GENERIC-FUNCTION))) T)
;; Loading (DEFTEST CLASS-04.4 (NOTNOT-MV (TYPEP (FUNCTION S3-A) (QUOTE GENERIC-FUNCTION))) T)
;; Loading (DEFTEST CLASS-04.5 (NOTNOT-MV (TYPEP (FUNCTION (SETF S3-A)) (QUOTE GENERIC-FUNCTION))) T)
;; Loading (DEFCLASS CLASS-05 NIL (S1 (S2 :ALLOCATION :INSTANCE) (S3 :ALLOCATION :CLASS)))
;; Loading (DEFTEST CLASS-05.1 (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-05))) (C2 (MAKE-INSTANCE (QUOTE CLASS-05)))) (VALUES (NOT (EQL C1 C2)) (LIST (SETF (SLOT-VALUE C1 (QUOTE S1)) 12) (SETF (SLOT-VALUE C2 (QUOTE S1)) 17) (SLOT-VALUE C1 (QUOTE S1)) (SLOT-VALUE C2 (QUOTE S1))) (LIST (SETF (SLOT-VALUE C1 (QUOTE S2)) (QUOTE A)) (SETF (SLOT-VALUE C2 (QUOTE S2)) (QUOTE B)) (SLOT-VALUE C1 (QUOTE S2)) (SLOT-VALUE C2 (QUOTE S2))) (LIST (SETF (SLOT-VALUE C1 (QUOTE S3)) (QUOTE X)) (SLOT-VALUE C1 (QUOTE S3)) (SLOT-VALUE C2 (QUOTE S3)) (SETF (SLOT-VALUE C2 (QUOTE S3)) (QUOTE Y)) (SLOT-VALUE C1 (QUOTE S3)) (SLOT-VALUE C2 (QUOTE S3)) (SETF (SLOT-VALUE C1 (QUOTE S3)) (QUOTE Z)) (SLOT-VALUE C1 (QUOTE S3)) (SLOT-VALUE C2 (QUOTE S3))) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-05)) (QUOTE S3)))) T (12 17 12 17) (A B A B) (X X X Y Y Y Z Z Z) Z)
;; Loading (DEFCLASS CLASS-06 NIL ((S1 :READER S1-R1 :READER S1-R2 :WRITER S1-W1 :WRITER S1-W2)))
;; Loading (DEFCLASS CLASS-06A NIL ((S1 :READER S1-R1) S3))
;; Loading (DEFTEST CLASS-06.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-06)))) (VALUES (SETF (SLOT-VALUE C (QUOTE S1)) (QUOTE X)) (SLOT-VALUE C (QUOTE S1)) (S1-R1 C) (S1-R2 C) (S1-W1 (QUOTE Y) C) (SLOT-VALUE C (QUOTE S1)) (S1-R1 C) (S1-R2 C) (S1-W2 (QUOTE Z) C) (SLOT-VALUE C (QUOTE S1)) (S1-R1 C) (S1-R2 C))) X X X X Y Y Y Y Z Z Z Z)
;; Loading (DEFTEST CLASS-06.2 (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-06))) (C2 (MAKE-INSTANCE (QUOTE CLASS-06A)))) (VALUES (SETF (SLOT-VALUE C1 (QUOTE S1)) (QUOTE X)) (SETF (SLOT-VALUE C2 (QUOTE S1)) (QUOTE Y)) (MAPCAR (FUNCTION S1-R1) (LIST C1 C2)))) X Y (X Y))
;; Loading (DEFCLASS CLASS-07 NIL ((S1 :INITARG :S1A :INITARG :S1B :READER S1) (S2 :INITARG :S2 :READER S2)))
;; Loading (DEFTEST CLASS-07.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07)))) (VALUES (SLOT-BOUNDP C (QUOTE S1)) (SLOT-BOUNDP C (QUOTE S2)))) NIL NIL)
;; Loading (DEFTEST CLASS-07.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1A (QUOTE X)))) (VALUES (NOTNOT (SLOT-BOUNDP C (QUOTE S1))) (S1 C) (SLOT-BOUNDP C (QUOTE S2)))) T X NIL)
;; Loading (DEFTEST CLASS-07.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1B (QUOTE X)))) (VALUES (NOTNOT (SLOT-BOUNDP C (QUOTE S1))) (S1 C) (SLOT-BOUNDP C (QUOTE S2)))) T X NIL)
;; Loading (DEFTEST CLASS-07.4 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1A (QUOTE Y) :S1B (QUOTE X)))) (VALUES (NOTNOT (SLOT-BOUNDP C (QUOTE S1))) (S1 C) (SLOT-BOUNDP C (QUOTE S2)))) T Y NIL)
;; Loading (DEFTEST CLASS-07.5 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1B (QUOTE Y) :S1A (QUOTE X)))) (VALUES (NOTNOT (SLOT-BOUNDP C (QUOTE S1))) (S1 C) (SLOT-BOUNDP C (QUOTE S2)))) T Y NIL)
;; Loading (DEFTEST CLASS-07.6 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1A (QUOTE Y) :S1A (QUOTE X)))) (VALUES (NOTNOT (SLOT-BOUNDP C (QUOTE S1))) (S1 C) (SLOT-BOUNDP C (QUOTE S2)))) T Y NIL)
;; Loading (DEFTEST CLASS-07.7 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S2 (QUOTE A) :S1A (QUOTE B)))) (VALUES (NOTNOT (SLOT-BOUNDP C (QUOTE S1))) (NOTNOT (SLOT-BOUNDP C (QUOTE S2))) (S1 C) (S2 C))) T T B A)
;; Loading (DEFTEST CLASS-07.8 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S2 (QUOTE A) :S1A (QUOTE B) :S2 (QUOTE X) :S1A (QUOTE Y) :S1B (QUOTE Z)))) (VALUES (NOTNOT (SLOT-BOUNDP C (QUOTE S1))) (NOTNOT (SLOT-BOUNDP C (QUOTE S2))) (S1 C) (S2 C))) T T B A)
;; Loading (DEFTEST CLASS-07.9 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1B (QUOTE X) :S1A (QUOTE Y)))) (VALUES (NOTNOT (SLOT-BOUNDP C (QUOTE S1))) (SLOT-BOUNDP C (QUOTE S2)) (S1 C))) T NIL X)
;; Loading (DEFTEST CLASS-07.10 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1A (QUOTE X) :S2 (QUOTE Y) :ALLOW-OTHER-KEYS NIL))) (VALUES (S1 C) (S2 C))) X Y)
;; Loading (DEFTEST CLASS-07.11 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1A (QUOTE A) :S2 (QUOTE B) :GARBAGE (QUOTE Z) :ALLOW-OTHER-KEYS T))) (VALUES (S1 C) (S2 C))) A B)
;; Loading (DEFTEST CLASS-07.12 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-07) :S1A (QUOTE D) :S2 (QUOTE C) :GARBAGE (QUOTE Z) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL))) (VALUES (S1 C) (S2 C))) D C)
;; Loading (DECLAIM (SPECIAL *CLASS-08-S2-INITVAR*))
;; Loading (DEFCLASS CLASS-08 NIL ((S1 :INITFORM 0) (S2 :INITFORM *CLASS-08-S2-INITVAR*)))
;; Loading (DEFTEST CLASS-08.1 (LET* ((*CLASS-08-S2-INITVAR* (QUOTE X)) (C (MAKE-INSTANCE (QUOTE CLASS-08)))) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)))) 0 X)
;; Loading (DECLAIM (SPECIAL *CLASS-09-S2-INITVAR*))
;; Loading (DEFCLASS CLASS-09 NIL ((S1 :INITFORM 0 :INITARG :S1) (S2 :INITFORM *CLASS-09-S2-INITVAR* :INITARG :S2)))
;; Loading (DEFTEST CLASS-09.1 (LET* ((*CLASS-09-S2-INITVAR* (QUOTE X)) (C (MAKE-INSTANCE (QUOTE CLASS-09)))) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)))) 0 X)
;; Loading (DEFTEST CLASS-09.2 (LET* ((*CLASS-09-S2-INITVAR* (QUOTE X)) (C (MAKE-INSTANCE (QUOTE CLASS-09) :S1 1))) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)))) 1 X)
;; Loading (DEFTEST CLASS-09.3 (LET* ((C (MAKE-INSTANCE (QUOTE CLASS-09) :S2 (QUOTE A)))) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)))) 0 A)
;; Loading (DEFTEST CLASS-09.4 (LET* ((C (MAKE-INSTANCE (QUOTE CLASS-09) :S2 (QUOTE A) :S1 10 :S1 (QUOTE BAD) :S2 (QUOTE BAD)))) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)))) 10 A)
;; Loading (DECLAIM (SPECIAL *CLASS-10-S1-INITVAR*))
;; Loading (DEFCLASS CLASS-10 NIL ((S1 :INITFORM (INCF *CLASS-10-S1-INITVAR*) :INITARG :S1)))
;; Loading (DEFTEST CLASS-10.1 (LET* ((*CLASS-10-S1-INITVAR* 0) (C (MAKE-INSTANCE (QUOTE CLASS-10)))) (VALUES *CLASS-10-S1-INITVAR* (SLOT-VALUE C (QUOTE S1)))) 1 1)
;; Loading (DEFTEST CLASS-10.2 (LET* ((*CLASS-10-S1-INITVAR* 0) (C (MAKE-INSTANCE (QUOTE CLASS-10) :S1 10))) (VALUES *CLASS-10-S1-INITVAR* (SLOT-VALUE C (QUOTE S1)))) 0 10)
;; Loading (LET ((X 7)) (DEFCLASS CLASS-11 NIL ((S1 :INITFORM X :INITARG :S1))))
;; Loading (DEFTEST CLASS-11.1 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-11)) (QUOTE S1)) 7)
;; Loading (DEFTEST CLASS-11.2 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-11) :S1 100) (QUOTE S1)) 100)
;; Loading (FLET ((%F NIL (QUOTE X))) (DEFCLASS CLASS-12 NIL ((S1 :INITFORM (%F) :INITARG :S1))))
;; Loading (DEFTEST CLASS-12.1 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-12)) (QUOTE S1)) X)
;; Loading (DEFTEST CLASS-12.2 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-12) :S1 (QUOTE Y)) (QUOTE S1)) Y)
;; Loading (DEFCLASS CLASS-13 NIL ((S1 :ALLOCATION :CLASS :INITARG :S1)))
;; Loading (DEFTEST CLASS-13.1 (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-13))) (C2 (MAKE-INSTANCE (QUOTE CLASS-13) :S1 (QUOTE FOO)))) (VALUES (SLOT-VALUE C1 (QUOTE S1)) (SLOT-VALUE C2 (QUOTE S1)))) FOO FOO)
;; Loading (DEFCLASS CLASS-14 NIL ((S1 :INITARG NIL :READER S1)))
;; Loading (DEFTEST CLASS-14.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-14) NIL (QUOTE X)))) (S1 C)) X)
;; Loading (DEFCLASS CLASS-15 NIL ((S1 :INITARG :ALLOW-OTHER-KEYS :READER S1)))
;; Loading (DEFTEST CLASS-15.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-15) :ALLOW-OTHER-KEYS NIL))) (S1 C)) NIL)
;; Loading (DEFTEST CLASS-15.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-15) :ALLOW-OTHER-KEYS T))) (S1 C)) T)
;; Loading (DEFTEST CLASS-15.4 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-15) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL))) (S1 C)) T)
;; Loading (DEFTEST CLASS-15.5 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-15) :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T))) (S1 C)) NIL)
;; Loading (DEFTEST CLASS-15.6 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-15) :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)))) (S1 C)) T)
;; Loading (DEFTEST CLASS-15.7 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-15) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO (QUOTE BAR)))) (S1 C)) T)
;; Loading (DEFCLASS CLASS-16 NIL ((S1 :INITARG :S1)) (:DEFAULT-INITARGS :S1 (QUOTE X)))
;; Loading (DEFTEST CLASS-16.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-16)))) (SLOT-VALUE C (QUOTE S1))) X)
;; Loading (DEFTEST CLASS-16.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-16) :S1 (QUOTE Y)))) (SLOT-VALUE C (QUOTE S1))) Y)
;; Loading (DEFTEST CLASS-16.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-16) :S1 NIL))) (SLOT-VALUE C (QUOTE S1))) NIL)
;; Loading (DEFCLASS CLASS-17 NIL ((S1 :INITARG :S1 :INITFORM (QUOTE FOO))) (:DEFAULT-INITARGS :S1 (QUOTE BAR)))
;; Loading (DEFTEST CLASS-17.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-17)))) (SLOT-VALUE C (QUOTE S1))) BAR)
;; Loading (DEFTEST CLASS-17.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-17) :S1 (QUOTE Z)))) (SLOT-VALUE C (QUOTE S1))) Z)
;; Loading (DEFTEST CLASS-17.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-17) :S1 NIL))) (SLOT-VALUE C (QUOTE S1))) NIL)
;; Loading (DEFCLASS CLASS-18 NIL ((S1 :INITARG :S1 :INITARG :S1B)) (:DEFAULT-INITARGS :S1 (QUOTE X) :S1B (QUOTE Y)))
;; Loading (DEFTEST CLASS-18.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-18)))) (SLOT-VALUE C (QUOTE S1))) X)
;; Loading (DEFTEST CLASS-18.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-18) :S1 (QUOTE Z)))) (SLOT-VALUE C (QUOTE S1))) Z)
;; Loading (DEFTEST CLASS-18.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-18) :S1 NIL))) (SLOT-VALUE C (QUOTE S1))) NIL)
;; Loading (DEFTEST CLASS-18.4 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-18) :S1B (QUOTE Z)))) (SLOT-VALUE C (QUOTE S1))) Z)
;; Loading (DEFTEST CLASS-18.5 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-18) :S1B NIL))) (SLOT-VALUE C (QUOTE S1))) NIL)
;; Loading (DECLAIM (SPECIAL *CLASS-19-S1-INITVAR*))
;; Loading (DEFCLASS CLASS-19 NIL ((S1 :INITARG :S1)) (:DEFAULT-INITARGS :S1 (SETF *CLASS-19-S1-INITVAR* (QUOTE A))))
;; Loading (DEFTEST CLASS-19.1 (LET* ((*CLASS-19-S1-INITVAR* NIL) (C (MAKE-INSTANCE (QUOTE CLASS-19)))) (DECLARE (SPECIAL *CLASS-19-S1-INITVAR*)) (VALUES (SLOT-VALUE C (QUOTE S1)) *CLASS-19-S1-INITVAR*)) A A)
;; Loading (DEFTEST CLASS-19.2 (LET* ((*CLASS-19-S1-INITVAR* NIL) (C (MAKE-INSTANCE (QUOTE CLASS-19) :S1 NIL))) (DECLARE (SPECIAL *CLASS-19-S1-INITVAR*)) (VALUES (SLOT-VALUE C (QUOTE S1)) *CLASS-19-S1-INITVAR*)) NIL NIL)
;; Loading (DEFTEST CLASS-19.3 (LET* ((*CLASS-19-S1-INITVAR* NIL) (C (MAKE-INSTANCE (QUOTE CLASS-19) :S1 (QUOTE X)))) (DECLARE (SPECIAL *CLASS-19-S1-INITVAR*)) (VALUES (SLOT-VALUE C (QUOTE S1)) *CLASS-19-S1-INITVAR*)) X NIL)
;; Loading (DECLAIM (SPECIAL *CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2*))
;; Loading (DEFCLASS CLASS-20 NIL ((S1 :INITARG :S1 :INITARG :S1B)) (:DEFAULT-INITARGS :S1 (SETF *CLASS-20-S1-INITVAR-1* (QUOTE A)) :S1B (SETF *CLASS-20-S1-INITVAR-2* (QUOTE B))))
;; Loading (DEFTEST CLASS-20.1 (LET* (*CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2* (C (MAKE-INSTANCE (QUOTE CLASS-20)))) (DECLARE (SPECIAL *CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2*)) (VALUES (SLOT-VALUE C (QUOTE S1)) *CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2*)) A A B)
;; Loading (DEFTEST CLASS-20.2 (LET* (*CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2* (C (MAKE-INSTANCE (QUOTE CLASS-20) :S1 (QUOTE X)))) (DECLARE (SPECIAL *CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2*)) (VALUES (SLOT-VALUE C (QUOTE S1)) *CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2*)) X NIL B)
;; Loading (DEFTEST CLASS-20.3 (LET* (*CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2* (C (MAKE-INSTANCE (QUOTE CLASS-20) :S1B (QUOTE Y)))) (DECLARE (SPECIAL *CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2*)) (VALUES (SLOT-VALUE C (QUOTE S1)) *CLASS-20-S1-INITVAR-1* *CLASS-20-S1-INITVAR-2*)) Y A NIL)
;; Loading (DECLAIM (SPECIAL *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*))
;; Loading (LET ((*CLASS-21-S1-INITVAR-1* 0) (*CLASS-21-S1-INITVAR-2* 0)) (DEFCLASS CLASS-21 NIL ((S1 :INITARG :S1 :INITARG :S1B) (S2 :INITARG :S1B :INITARG :S2)) (:DEFAULT-INITARGS :S1 (INCF *CLASS-21-S1-INITVAR-1*) :S1B (INCF *CLASS-21-S1-INITVAR-2*))))
;; Loading (DEFTEST CLASS-21.1 (LET* ((*CLASS-21-S1-INITVAR-1* 10) (*CLASS-21-S1-INITVAR-2* 20) (C (MAKE-INSTANCE (QUOTE CLASS-21)))) (DECLARE (SPECIAL *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)) *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) 11 21 11 21)
;; Loading (DEFTEST CLASS-21.2 (LET* ((*CLASS-21-S1-INITVAR-1* 10) (*CLASS-21-S1-INITVAR-2* 20) (C (MAKE-INSTANCE (QUOTE CLASS-21) :S1 (QUOTE X)))) (DECLARE (SPECIAL *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)) *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) X 21 10 21)
;; Loading (DEFTEST CLASS-21.3 (LET* ((*CLASS-21-S1-INITVAR-1* 10) (*CLASS-21-S1-INITVAR-2* 20) (C (MAKE-INSTANCE (QUOTE CLASS-21) :S1 (QUOTE X) :S1B (QUOTE Y)))) (DECLARE (SPECIAL *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)) *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) X Y 10 20)
;; Loading (DEFTEST CLASS-21.4 (LET* ((*CLASS-21-S1-INITVAR-1* 10) (*CLASS-21-S1-INITVAR-2* 20) (C (MAKE-INSTANCE (QUOTE CLASS-21) :S1B (QUOTE Y)))) (DECLARE (SPECIAL *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)) *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) Y Y 11 20)
;; Loading (DEFTEST CLASS-21.5 (LET* ((*CLASS-21-S1-INITVAR-1* 10) (*CLASS-21-S1-INITVAR-2* 20) (C (MAKE-INSTANCE (QUOTE CLASS-21) :S2 (QUOTE Y)))) (DECLARE (SPECIAL *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) (VALUES (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)) *CLASS-21-S1-INITVAR-1* *CLASS-21-S1-INITVAR-2*)) 11 Y 11 21)
;; Loading (DEFCLASS CLASS-22 NIL ((S1 :DOCUMENTATION "This is slot s1 in class class-22")))
;; Loading (DEFTEST CLASS-22.1 (NOTNOT-MV (TYPEP (MAKE-INSTANCE (QUOTE CLASS-22)) (QUOTE CLASS-22))) T)
;; Loading (DEFCLASS CLASS-23 NIL (S1 S2 S3) (:DOCUMENTATION "This is class-23 in ansi-tests"))
;; Loading (DEFTEST CLASS-23.1 (NOTNOT-MV (TYPEP (MAKE-INSTANCE (QUOTE CLASS-23)) (QUOTE CLASS-23))) T)
;; Loading (DEFTEST CLASS-23.2 (LET ((DOC (DOCUMENTATION (QUOTE CLASS-23) (QUOTE TYPE)))) (OR (NULL DOC) (EQUALT DOC "This is class-23 in ansi-tests"))) T)
;; Loading (DEFTEST CLASS-23.3 (LET ((DOC (DOCUMENTATION (FIND-CLASS (QUOTE CLASS-23)) (QUOTE TYPE)))) (OR (NULL DOC) (EQUALT DOC "This is class-23 in ansi-tests"))) T)
;; Loading (DEFTEST CLASS-23.4 (LET ((DOC (DOCUMENTATION (FIND-CLASS (QUOTE CLASS-23)) T))) (OR (NULL DOC) (EQUALT DOC "This is class-23 in ansi-tests"))) T)
;; Loading (DEFCLASS CLASS-24 NIL ((S1 :INITARG :ALLOW-OTHER-KEYS :READER S1)) (:DEFAULT-INITARGS :ALLOW-OTHER-KEYS T))
;; Loading (DEFTEST CLASS-24.1 (S1 (MAKE-INSTANCE (QUOTE CLASS-24))) T)
;; Loading (DEFTEST CLASS-24.2 (S1 (MAKE-INSTANCE (QUOTE CLASS-24) :NONSENSE T)) T)
;; Loading (DEFTEST CLASS-24.3 (S1 (MAKE-INSTANCE (QUOTE CLASS-24) :ALLOW-OTHER-KEYS NIL)) NIL)
;; Loading (DEFTEST CLASS-24.4 (S1 (MAKE-INSTANCE (QUOTE CLASS-24) :ALLOW-OTHER-KEYS (QUOTE A) :FOO T)) A)
;; Loading (DEFCLASS CLASS-25 NIL ((S1 :INITARG :ALLOW-OTHER-KEYS :READER S1)) (:DEFAULT-INITARGS :ALLOW-OTHER-KEYS NIL))
;; Loading (DEFTEST CLASS-25.1 (S1 (MAKE-INSTANCE (QUOTE CLASS-25))) NIL)
;; Loading (DEFTEST CLASS-25.2 (S1 (MAKE-INSTANCE (QUOTE CLASS-25) :ALLOW-OTHER-KEYS T)) T)
;; Loading (DEFTEST CLASS-25.3 (S1 (MAKE-INSTANCE (QUOTE CLASS-25) :ALLOW-OTHER-KEYS T :FOO NIL)) T)
;; Loading (DEFTEST CLASS-25.4 (S1 (MAKE-INSTANCE (QUOTE CLASS-25) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL)) T)
;; Loading (DEFTEST CLASS-25.5 (S1 (MAKE-INSTANCE (QUOTE CLASS-25) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T)) T)
;; Loading (DEFTEST CLASS-25.6 (S1 (MAKE-INSTANCE (QUOTE CLASS-25) :ALLOW-OTHER-KEYS (QUOTE FOO) :ALLOW-OTHER-KEYS (QUOTE BAR))) FOO)
;; Loading (DEFCLASS CLASS-26 NIL ((S1-26 :WRITER (SETF S1-26))))
;; Loading (DEFTEST CLASS-26.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-26)))) (VALUES (SLOT-BOUNDP C (QUOTE S1-26)) (SETF (S1-26 C) (QUOTE X)) (SLOT-VALUE C (QUOTE S1-26)) (TYPEP* (FUNCTION (SETF S1-26)) (QUOTE GENERIC-FUNCTION)))) NIL X X T)
;; Loading (DEFCLASS CLASS-27 NIL (A (B :INITFORM 10) (C :INITARG :C) (D :INITARG :D)) (:METACLASS STANDARD-CLASS) (:DEFAULT-INITARGS :D 17))
;; Loading (DEFTEST CLASS-27.1 (LET ((CLASS (FIND-CLASS (QUOTE CLASS-27)))) (VALUES (SUBTYPEP* (QUOTE CLASS-27) (QUOTE STANDARD-OBJECT)) (SUBTYPEP* (QUOTE CLASS-27) T) (SUBTYPEP* (QUOTE CLASS-27) (FIND-CLASS (QUOTE STANDARD-OBJECT))) (SUBTYPEP* (QUOTE CLASS-27) (FIND-CLASS T)) (SUBTYPEP* CLASS (QUOTE STANDARD-OBJECT)) (SUBTYPEP* CLASS T) (SUBTYPEP* CLASS (FIND-CLASS (QUOTE STANDARD-OBJECT))) (SUBTYPEP* CLASS (FIND-CLASS T)))) T T T T T T T T)
;; Loading (DEFTEST CLASS-27.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-27)))) (VALUES (SLOT-BOUNDP* C (QUOTE A)) (SLOT-VALUE C (QUOTE B)) (SLOT-BOUNDP* C (QUOTE C)) (SLOT-VALUE C (QUOTE D)))) NIL 10 NIL 17)
;; Loading (DEFTEST CLASS-27.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-27) :C 26 :D 43))) (VALUES (SLOT-BOUNDP* C (QUOTE A)) (SLOT-VALUE C (QUOTE B)) (SLOT-VALUE C (QUOTE C)) (SLOT-VALUE C (QUOTE D)))) NIL 10 26 43)
;; Loading (DECLAIM (SPECIAL *CLASS-28-RESET-FN* *CLASS-28-QUERY-FN*))
;; Loading (DECLAIM (TYPE FUNCTION *CLASS-28-RESET-FN* *CLASS-28-QUERY-FN*))
;; Loading (LET ((X 0) (Y 0)) (FLET ((%RESET (A B) (SETF X A Y B)) (%QUERY NIL (LIST X Y))) (SETF *CLASS-28-RESET-FN* (FUNCTION %RESET) *CLASS-28-QUERY-FN* (FUNCTION %QUERY)) (DEFCLASS CLASS-28 NIL ((S1 :INITFORM (INCF X) :INITARG :S1) (S2 :INITARG :S2)) (:DEFAULT-INITARGS :S2 (INCF Y)))))
;; Loading (DEFTEST CLASS-28.1 (LET ((CLASS (FIND-CLASS (QUOTE CLASS-28)))) (FUNCALL *CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL *CLASS-28-QUERY-FN*) (LET ((OBJ (MAKE-INSTANCE (QUOTE CLASS-28)))) (LIST (TYPEP* OBJ (QUOTE CLASS-28)) (TYPEP* OBJ CLASS) (EQT (CLASS-OF OBJ) CLASS) (MAP-SLOT-VALUE OBJ (QUOTE (S1 S2))) (FUNCALL *CLASS-28-QUERY-FN*))))) ((5 10) (T T T (6 11) (6 11))))
;; Loading (DEFTEST CLASS-28.2 (LET ((CLASS (FIND-CLASS (QUOTE CLASS-28)))) (FUNCALL *CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL *CLASS-28-QUERY-FN*) (LET ((OBJ (MAKE-INSTANCE (QUOTE CLASS-28) :S1 17))) (LIST (TYPEP* OBJ (QUOTE CLASS-28)) (TYPEP* OBJ CLASS) (EQT (CLASS-OF OBJ) CLASS) (MAP-SLOT-VALUE OBJ (QUOTE (S1 S2))) (FUNCALL *CLASS-28-QUERY-FN*))))) ((5 10) (T T T (17 11) (5 11))))
;; Loading (DEFTEST CLASS-28.3 (LET ((CLASS (FIND-CLASS (QUOTE CLASS-28)))) (FUNCALL *CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL *CLASS-28-QUERY-FN*) (LET ((OBJ (MAKE-INSTANCE (QUOTE CLASS-28) :S2 17))) (LIST (TYPEP* OBJ (QUOTE CLASS-28)) (TYPEP* OBJ CLASS) (EQT (CLASS-OF OBJ) CLASS) (MAP-SLOT-VALUE OBJ (QUOTE (S1 S2))) (FUNCALL *CLASS-28-QUERY-FN*))))) ((5 10) (T T T (6 17) (6 10))))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (LOAD "defclass-02.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defclass-02.lsp 80B697C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS CLASS-0201 NIL ((A :INITFORM (QUOTE X)) (B :ALLOCATION :INSTANCE) (C :READER CLASS-0201-C)))
;; Loading (DEFCLASS CLASS-0202 (CLASS-0201) (D (E :INITFORM (QUOTE Y)) (F :ALLOCATION :INSTANCE)))
;; Loading (DEFTEST CLASS-0201.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0201)))) (VALUES (MAP-SLOT-BOUNDP* C (QUOTE (A B C))) (MAP-SLOT-EXISTS-P* C (QUOTE (A B C))) (SLOT-VALUE C (QUOTE A)) (MAP-TYPEP* C (LIST (QUOTE CLASS-0201) (QUOTE CLASS-0202) (FIND-CLASS (QUOTE CLASS-0201)) (FIND-CLASS (QUOTE CLASS-0202)))) (CLASS-NAME (CLASS-OF C)))) (T NIL NIL) (T T T) X (T NIL T NIL) CLASS-0201)
;; Loading (DEFTEST CLASS-0202.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0202)))) (VALUES (MAP-SLOT-BOUNDP* C (QUOTE (A B C D E F))) (MAP-SLOT-VALUE C (QUOTE (A E))) (MAP-TYPEP* C (LIST (QUOTE CLASS-0201) (QUOTE CLASS-0202) (FIND-CLASS (QUOTE CLASS-0201)) (FIND-CLASS (QUOTE CLASS-0202)))) (CLASS-NAME (CLASS-OF C)))) (T NIL NIL NIL T NIL) (X Y) (T T T T) CLASS-0202)
;; Loading (DEFCLASS CLASS-0203 NIL ((A :ALLOCATION :CLASS) (B :ALLOCATION :INSTANCE)))
;; Loading (DEFCLASS CLASS-0204 (CLASS-0203) (C D))
;; Loading (DEFTEST CLASS-0203.1 (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-0203))) (C2 (MAKE-INSTANCE (QUOTE CLASS-0204)))) (VALUES (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B C D))) (SETF (SLOT-VALUE C1 (QUOTE A)) (QUOTE X)) (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B C D))) (SLOT-VALUE C1 (QUOTE A)) (SLOT-VALUE C2 (QUOTE A)) (EQT (SLOT-MAKUNBOUND C1 (QUOTE A)) C1) (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B C D))))) (NIL NIL) (NIL NIL NIL NIL) X (T NIL) (T NIL NIL NIL) X X T (NIL NIL) (NIL NIL NIL NIL))
;; Loading (DEFTEST CLASS-0203.2 (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-0203))) (C2 (MAKE-INSTANCE (QUOTE CLASS-0204)))) (VALUES (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B C D))) (SETF (SLOT-VALUE C1 (QUOTE A)) (QUOTE X)) (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B C D))) (SLOT-VALUE C1 (QUOTE A)) (SLOT-VALUE C2 (QUOTE A)) (EQT (SLOT-MAKUNBOUND C2 (QUOTE A)) C2) (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B C D))))) (NIL NIL) (NIL NIL NIL NIL) X (T NIL) (T NIL NIL NIL) X X T (NIL NIL) (NIL NIL NIL NIL))
;; Loading (DEFCLASS CLASS-0205A NIL ((A :INITFORM (QUOTE X)) (B :INITFORM (QUOTE Y)) C))
;; Loading (DEFCLASS CLASS-0205B (CLASS-0205A) ((A :INITFORM (QUOTE Z)) B (C :INITFORM (QUOTE W))))
;; Loading (DEFTEST CLASS-0205A.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0205A)))) (VALUES (SLOT-VALUE C (QUOTE A)) (SLOT-VALUE C (QUOTE B)) (SLOT-BOUNDP C (QUOTE C)))) X Y NIL)
;; Loading (DEFTEST CLASS-0205B.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0205B)))) (MAP-SLOT-VALUE C (QUOTE (A B C)))) (Z Y W))
;; Loading (DEFCLASS CLASS-0206A NIL ((A :ALLOCATION :INSTANCE) (B :ALLOCATION :CLASS)))
;; Loading (DEFCLASS CLASS-0206B (CLASS-0206A) ((A :ALLOCATION :CLASS) (B :ALLOCATION :INSTANCE)))
;; Loading (DEFTEST CLASS-0206.1 (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-0206A))) (C2 (MAKE-INSTANCE (QUOTE CLASS-0206B)))) (VALUES (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B))) (SETF (SLOT-VALUE C1 (QUOTE A)) (QUOTE X)) (SETF (SLOT-VALUE C1 (QUOTE B)) (QUOTE Y)) (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B))) (MAP-SLOT-VALUE C1 (QUOTE (A B))) (PROGN (SLOT-MAKUNBOUND C1 (QUOTE A)) (SLOT-MAKUNBOUND C1 (QUOTE B)) (SETF (SLOT-VALUE C2 (QUOTE A)) (QUOTE X))) (SETF (SLOT-VALUE C2 (QUOTE B)) (QUOTE Y)) (MAP-SLOT-BOUNDP* C1 (QUOTE (A B))) (MAP-SLOT-BOUNDP* C2 (QUOTE (A B))) (MAP-SLOT-VALUE C2 (QUOTE (A B))) (PROGN (SLOT-MAKUNBOUND C2 (QUOTE A)) (SLOT-MAKUNBOUND C2 (QUOTE B)) NIL))) (NIL NIL) (NIL NIL) X Y (T T) (NIL NIL) (X Y) X Y (NIL NIL) (T T) (X Y) NIL)
;; Loading (DEFCLASS CLASS-0207A NIL ((A :ALLOCATION :CLASS)))
;; Loading (DEFCLASS CLASS-0207B (CLASS-0207A) ((A :ALLOCATION :INSTANCE)))
;; Loading (DEFCLASS CLASS-0207C (CLASS-0207B) ((A :ALLOCATION :CLASS)))
;; Loading (DEFTEST CLASS-0207.1 (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-0207A))) (C2 (MAKE-INSTANCE (QUOTE CLASS-0207B))) (C3 (MAKE-INSTANCE (QUOTE CLASS-0207C)))) (SLOT-MAKUNBOUND C1 (QUOTE A)) (SLOT-MAKUNBOUND C2 (QUOTE A)) (SLOT-MAKUNBOUND C3 (QUOTE A)) (VALUES (SETF (SLOT-VALUE C1 (QUOTE A)) (QUOTE X)) (SLOT-BOUNDP* C1 (QUOTE A)) (SLOT-BOUNDP* C2 (QUOTE A)) (SLOT-BOUNDP* C3 (QUOTE A)) (SLOT-VALUE C1 (QUOTE A)) (SETF (SLOT-VALUE C2 (QUOTE A)) (QUOTE Y)) (SLOT-BOUNDP* C1 (QUOTE A)) (SLOT-BOUNDP* C2 (QUOTE A)) (SLOT-BOUNDP* C3 (QUOTE A)) (SLOT-VALUE C1 (QUOTE A)) (SLOT-VALUE C2 (QUOTE A)) (SETF (SLOT-VALUE C3 (QUOTE A)) (QUOTE Z)) (SLOT-BOUNDP* C1 (QUOTE A)) (SLOT-BOUNDP* C2 (QUOTE A)) (SLOT-BOUNDP* C3 (QUOTE A)) (SLOT-VALUE C1 (QUOTE A)) (SLOT-VALUE C2 (QUOTE A)) (SLOT-VALUE C3 (QUOTE A)))) X T NIL NIL X Y T T NIL X Y Z T T T X Y Z)
;; Loading (DEFCLASS CLASS-0208A NIL ((A :ALLOCATION :CLASS :INITFORM (QUOTE X))))
;; Loading (DEFCLASS CLASS-0208B (CLASS-0208A) ((A :ALLOCATION :INSTANCE)))
;; Loading (DEFTEST CLASS-0208.1 (VALUES (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0208A)) (QUOTE A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0208B)) (QUOTE A))) X X)
;; Loading (DEFTEST CLASS-REDEFINITION.1 (LET* ((COBJ1 (EVAL (QUOTE (DEFCLASS CLASS-0209A NIL ((A :ALLOCATION :CLASS :INITFORM (QUOTE X))))))) (COBJ2 (EVAL (QUOTE (DEFCLASS CLASS-0209B (CLASS-0209A) ((A :ALLOCATION :INSTANCE)))))) (COBJ3 (EVAL (QUOTE (DEFCLASS CLASS-0209A NIL ((A :ALLOCATION :CLASS :INITFORM (QUOTE X))))))) (COBJ4 (EVAL (QUOTE (DEFCLASS CLASS-0209B (CLASS-0209A) ((A :ALLOCATION :INSTANCE))))))) (VALUES (EQT COBJ1 COBJ3) (EQT COBJ2 COBJ4) (CLASS-NAME COBJ1) (CLASS-NAME COBJ2) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0209A)) (QUOTE A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0209B)) (QUOTE A)))) T T CLASS-0209A CLASS-0209B X X)
;; Loading (DEFTEST CLASS-REDEFINITION.2 (LET* ((COBJ1 (EVAL (QUOTE (DEFCLASS CLASS-0210A NIL ((A :ALLOCATION :CLASS)))))) (COBJ2 (EVAL (QUOTE (DEFCLASS CLASS-0210B (CLASS-0210A) ((A :ALLOCATION :INSTANCE)))))) (COBJ3 (EVAL (QUOTE (DEFCLASS CLASS-0210C (CLASS-0210B) ((A :ALLOCATION :CLASS)))))) (DUMMY (PROGN (SETF (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0210A)) (QUOTE A)) :BAD1) (MAKE-INSTANCE (QUOTE CLASS-0210B)) (MAKE-INSTANCE (QUOTE CLASS-0210C)) NIL)) (COBJ4 (EVAL (QUOTE (DEFCLASS CLASS-0210A NIL ((A :ALLOCATION :CLASS)))))) (COBJ5 (EVAL (QUOTE (DEFCLASS CLASS-0210B (CLASS-0210A) ((A :ALLOCATION :INSTANCE)))))) (COBJ6 (EVAL (QUOTE (DEFCLASS CLASS-0210C (CLASS-0210B) ((A :ALLOCATION :CLASS))))))) (LIST (EQT COBJ1 COBJ4) (EQT COBJ2 COBJ5) (EQT COBJ3 COBJ6) (CLASS-NAME COBJ1) (CLASS-NAME COBJ2) (CLASS-NAME COBJ3) (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-0210A))) (C2 (MAKE-INSTANCE (QUOTE CLASS-0210B))) (C3 (MAKE-INSTANCE (QUOTE CLASS-0210C)))) (SLOT-MAKUNBOUND C1 (QUOTE A)) (SLOT-MAKUNBOUND C2 (QUOTE A)) (SLOT-MAKUNBOUND C3 (QUOTE A)) (LIST (SETF (SLOT-VALUE C1 (QUOTE A)) (QUOTE X)) (AND (SLOT-BOUNDP* C1 (QUOTE A)) (SLOT-VALUE C1 (QUOTE A))) (SLOT-BOUNDP* C2 (QUOTE A)) (SLOT-BOUNDP* C3 (QUOTE A)) (SETF (SLOT-VALUE C2 (QUOTE A)) (QUOTE Y)) (AND (SLOT-BOUNDP* C1 (QUOTE A)) (SLOT-VALUE C1 (QUOTE A))) (AND (SLOT-BOUNDP* C2 (QUOTE A)) (SLOT-VALUE C2 (QUOTE A))) (SLOT-BOUNDP* C3 (QUOTE A)) (SETF (SLOT-VALUE C3 (QUOTE A)) (QUOTE Z)) (AND (SLOT-BOUNDP* C1 (QUOTE A)) (SLOT-VALUE C1 (QUOTE A))) (AND (SLOT-BOUNDP* C2 (QUOTE A)) (SLOT-VALUE C2 (QUOTE A))) (AND (SLOT-BOUNDP* C3 (QUOTE A)) (SLOT-VALUE C3 (QUOTE A))))))) (T T T CLASS-0210A CLASS-0210B CLASS-0210C (X X NIL NIL Y X Y NIL Z X Y Z)))
;; Loading (DEFTEST CLASS-REDEFINITION.3 (LET* ((COBJ1 (EVAL (QUOTE (DEFCLASS CLASS-REDEF-03A NIL ((A :ALLOCATION :CLASS :INITFORM (QUOTE X))))))) (COBJ2 (EVAL (QUOTE (DEFCLASS CLASS-REDEF-03B (CLASS-REDEF-03A) ((A :ALLOCATION :INSTANCE)))))) (COBJ4 (EVAL (QUOTE (DEFCLASS CLASS-REDEF-03B (CLASS-REDEF-03A) ((A :ALLOCATION :INSTANCE)))))) (COBJ3 (EVAL (QUOTE (DEFCLASS CLASS-REDEF-03A NIL ((A :ALLOCATION :CLASS :INITFORM (QUOTE X)))))))) (VALUES (EQT COBJ1 COBJ3) (EQT COBJ2 COBJ4) (CLASS-NAME COBJ1) (CLASS-NAME COBJ2) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-REDEF-03A)) (QUOTE A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-REDEF-03B)) (QUOTE A)))) T T CLASS-REDEF-03A CLASS-REDEF-03B X X)
;; Loading (DEFCLASS CLASS-0211A NIL ((A :ALLOCATION :INSTANCE :INITFORM (QUOTE X))))
;; Loading (DEFCLASS CLASS-0211B (CLASS-0211A) ((A :ALLOCATION :CLASS)))
;; Loading (DEFTEST CLASS-0211.1 (VALUES (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0211A)) (QUOTE A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0211B)) (QUOTE A))) X X)
;; Loading (DEFCLASS CLASS-0212A NIL ((A :INITARG :A1)))
;; Loading (DEFCLASS CLASS-0212B (CLASS-0212A) ((A :INITARG :A2) (B :INITARG :B)))
;; Loading (DEFTEST CLASS-0212.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0212A) :A1 (QUOTE X)))) (VALUES (TYPEP* C (QUOTE CLASS-0212A)) (TYPEP* C (QUOTE CLASS-0212B)) (SLOT-VALUE C (QUOTE A)) (SLOT-EXISTS-P C (QUOTE B)))) T NIL X NIL)
;; Loading (DEFTEST CLASS-0212.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0212B) :A1 (QUOTE X)))) (VALUES (TYPEP* C (QUOTE CLASS-0212A)) (TYPEP* C (QUOTE CLASS-0212B)) (SLOT-VALUE C (QUOTE A)) (SLOT-BOUNDP* C (QUOTE B)))) T T X NIL)
;; Loading (DEFTEST CLASS-0212.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0212B) :A2 (QUOTE X) :B (QUOTE Y)))) (VALUES (TYPEP* C (QUOTE CLASS-0212A)) (TYPEP* C (QUOTE CLASS-0212B)) (SLOT-VALUE C (QUOTE A)) (SLOT-VALUE C (QUOTE B)))) T T X Y)
;; Loading (DEFTEST CLASS-0212.4 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0212B) :A1 (QUOTE Z) :A2 (QUOTE X) :B (QUOTE Y)))) (VALUES (TYPEP* C (QUOTE CLASS-0212A)) (TYPEP* C (QUOTE CLASS-0212B)) (SLOT-VALUE C (QUOTE A)) (SLOT-VALUE C (QUOTE B)))) T T Z Y)
;; Loading (DEFTEST CLASS-0212.5 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0212B) :A2 (QUOTE X) :B (QUOTE Y) :A1 (QUOTE Z)))) (VALUES (TYPEP* C (QUOTE CLASS-0212A)) (TYPEP* C (QUOTE CLASS-0212B)) (SLOT-VALUE C (QUOTE A)) (SLOT-VALUE C (QUOTE B)))) T T X Y)
;; Loading (DEFCLASS CLASS-0213A NIL ((A :INITARG :A1)))
;; Loading (DEFCLASS CLASS-0213B (CLASS-0213A) (B))
;; Loading (DEFTEST CLASS-0213.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0213A) :A1 (QUOTE X)))) (VALUES (TYPEP* C (QUOTE CLASS-0213A)) (TYPEP* C (QUOTE CLASS-0213B)) (SLOT-VALUE C (QUOTE A)) (SLOT-EXISTS-P C (QUOTE B)))) T NIL X NIL)
;; Loading (DEFTEST CLASS-0213.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0213B) :A1 (QUOTE X)))) (VALUES (TYPEP* C (QUOTE CLASS-0213A)) (TYPEP* C (QUOTE CLASS-0213B)) (SLOT-VALUE C (QUOTE A)) (SLOT-BOUNDP* C (QUOTE B)))) T T X NIL)
;; Loading (DEFCLASS CLASS-0214A NIL ((A :INITARG :A1 :ALLOCATION :CLASS)))
;; Loading (DEFCLASS CLASS-0214B (CLASS-0214A) (B))
;; Loading (DEFTEST CLASS-0214.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0214A) :A1 (QUOTE X)))) (VALUES (TYPEP* C (QUOTE CLASS-0214A)) (TYPEP* C (QUOTE CLASS-0214B)) (SLOT-VALUE C (QUOTE A)) (SLOT-EXISTS-P C (QUOTE B)))) T NIL X NIL)
;; Loading (DEFTEST CLASS-0214.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0214B) :A1 (QUOTE Y)))) (VALUES (TYPEP* C (QUOTE CLASS-0214A)) (TYPEP* C (QUOTE CLASS-0214B)) (SLOT-VALUE C (QUOTE A)) (SLOT-BOUNDP* C (QUOTE B)))) T T Y NIL)
;; Loading (DEFCLASS CLASS-0215A NIL ((A :INITARG :A1 :ALLOCATION :INSTANCE)))
;; Loading (DEFCLASS CLASS-0215B (CLASS-0215A) ((A :ALLOCATION :CLASS)))
;; Loading (DEFTEST CLASS-0215.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0215A) :A1 (QUOTE X)))) (VALUES (TYPEP* C (QUOTE CLASS-0215A)) (TYPEP* C (QUOTE CLASS-0215B)) (SLOT-VALUE C (QUOTE A)))) T NIL X)
;; Loading (DEFTEST CLASS-0215.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0215B) :A1 (QUOTE Y)))) (VALUES (TYPEP* C (QUOTE CLASS-0215A)) (TYPEP* C (QUOTE CLASS-0215B)) (SLOT-VALUE C (QUOTE A)))) T T Y)
;; Loading (DEFCLASS CLASS-0216A NIL ((A :INITARG :A1) (B :INITARG :B1)))
;; Loading (DEFCLASS CLASS-0216B (CLASS-0216A) NIL (:DEFAULT-INITARGS :A1 (QUOTE X)))
;; Loading (DEFTEST CLASS-0216.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0216A)))) (VALUES (TYPEP* C (QUOTE CLASS-0216A)) (TYPEP* C (QUOTE CLASS-0216B)) (SLOT-BOUNDP C (QUOTE A)) (SLOT-BOUNDP C (QUOTE B)))) T NIL NIL NIL)
;; Loading (DEFTEST CLASS-0216.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0216B)))) (VALUES (TYPEP* C (QUOTE CLASS-0216A)) (TYPEP* C (QUOTE CLASS-0216B)) (SLOT-VALUE C (QUOTE A)) (SLOT-BOUNDP C (QUOTE B)))) T T X NIL)
;; Loading (DEFCLASS CLASS-0217A NIL ((A :INITARG :A1) (B :INITARG :B1) (C :INITARG :C1) (D :INITARG :D1)) (:DEFAULT-INITARGS :A1 10 :B1 20))
;; Loading (DEFCLASS CLASS-0217B (CLASS-0217A) NIL (:DEFAULT-INITARGS :A1 30 :C1 40))
;; Loading (DEFTEST CLASS-0217.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0217A)))) (VALUES (MAP-SLOT-BOUNDP* C (QUOTE (A B C D))) (MAP-SLOT-VALUE C (QUOTE (A B))))) (T T NIL NIL) (10 20))
;; Loading (DEFTEST CLASS-0217.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0217A) :A1 (QUOTE X) :C1 (QUOTE Y)))) (VALUES (MAP-SLOT-BOUNDP* C (QUOTE (A B C D))) (MAP-SLOT-VALUE C (QUOTE (A B C))))) (T T T NIL) (X 20 Y))
;; Loading (DEFTEST CLASS-0217.3 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0217B)))) (VALUES (MAP-SLOT-BOUNDP* C (QUOTE (A B C D))) (MAP-SLOT-VALUE C (QUOTE (A B C))))) (T T T NIL) (30 20 40))
;; Loading (DEFTEST CLASS-0217.4 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0217B) :A1 (QUOTE X) :D1 (QUOTE Y)))) (VALUES (MAP-SLOT-BOUNDP* C (QUOTE (A B C D))) (MAP-SLOT-VALUE C (QUOTE (A B C D))))) (T T T T) (X 20 40 Y))
;; Loading (DEFCLASS CLASS-0218A NIL ((A :INITARG :A1)) (:DEFAULT-INITARGS :A1 (QUOTE X)))
;; Loading (DEFCLASS CLASS-0218B (CLASS-0218A) ((A :INITFORM (QUOTE Y))))
;; Loading (DEFTEST CLASS-0218.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0218A)))) (SLOT-VALUE C (QUOTE A))) X)
;; Loading (DEFTEST CLASS-0218.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0218B)))) (SLOT-VALUE C (QUOTE A))) X)
;; Loading (DECLAIM (SPECIAL *CLASS-0219-A-1* *CLASS-0219-A-2*))
;; Loading (DEFCLASS CLASS-0219A NIL ((A :INITARG :A1)) (:DEFAULT-INITARGS :A1 (SETF *CLASS-0219-A-1* (QUOTE X))))
;; Loading (DEFCLASS CLASS-0219B NIL ((A :INITARG :A1)) (:DEFAULT-INITARGS :A1 (SETF *CLASS-0219-A-2* (QUOTE Y))))
;; Loading (DEFTEST CLASS-0219.1 (LET ((*CLASS-0219-A-1* NIL)) (VALUES (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0219A)) (QUOTE A)) *CLASS-0219-A-1*)) X X)
;; Loading (DEFTEST CLASS-0219.2 (LET ((*CLASS-0219-A-1* NIL) (*CLASS-0219-A-2* NIL)) (VALUES (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0219B)) (QUOTE A)) *CLASS-0219-A-1* *CLASS-0219-A-2*)) Y NIL Y)
;; Loading (DEFCLASS CLASS-0220A NIL ((A :TYPE (INTEGER 0 10) :INITARG :A)))
;; Loading (DEFCLASS CLASS-0220B (CLASS-0220A) ((A :TYPE (INTEGER -5 5))))
;; Loading (DEFTEST CLASS-0220.1 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0220A) :A 10) (QUOTE A)) 10)
;; Loading (DEFTEST CLASS-0220.2 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0220A) :A 0) (QUOTE A)) 0)
;; Loading (DEFTEST CLASS-0220.3 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0220B) :A 0) (QUOTE A)) 0)
;; Loading (DEFTEST CLASS-0220.4 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0220B) :A 5) (QUOTE A)) 5)
;; Loading (DEFCLASS CLASS-0221A NIL (A B C) (:DOCUMENTATION "This is class class-0221a"))
;; Loading (DEFCLASS CLASS-0221B (CLASS-0221A) NIL)
;; Loading (DEFCLASS CLASS-0221C (CLASS-0221A) NIL (:DOCUMENTATION "This is class class-0221c"))
;; Loading (DEFTEST CLASS-0221.1 (LET* ((CL (FIND-CLASS (QUOTE CLASS-0221A))) (DOC (DOCUMENTATION CL T))) (OR (NULL DOC) (EQUALT DOC "This is class class-0221a"))) T)
;; Loading (DEFTEST CLASS-0221.2 (LET* ((CL (FIND-CLASS (QUOTE CLASS-0221B))) (DOC (DOCUMENTATION CL T))) DOC) NIL)
;; Loading (DEFTEST CLASS-0221.3 (LET* ((CL (FIND-CLASS (QUOTE CLASS-0221C))) (DOC (DOCUMENTATION CL T))) (OR (NULL DOC) (EQUALT DOC "This is class class-0221c"))) T)
;; Loading (DEFCLASS CLASS-0222A NIL ((S1 :READER S1-R :WRITER S1-W :ACCESSOR S1-ACC)))
;; Loading (DEFCLASS CLASS-0222B (CLASS-0222A) NIL)
;; Loading (DEFTEST CLASS-0222.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0222A)))) (VALUES (S1-W (QUOTE X) C) (S1-R C) (S1-ACC C) (SETF (S1-ACC C) (QUOTE Y)) (S1-R C))) X X X Y Y)
;; Loading (DEFTEST CLASS-0222.2 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0222B)))) (VALUES (S1-W (QUOTE X) C) (S1-R C) (S1-ACC C) (SETF (S1-ACC C) (QUOTE Y)) (S1-R C))) X X X Y Y)
;; Loading (DEFCLASS CLASS-0223A NIL ((S1 :READER S-R :WRITER S-W :ACCESSOR S-ACC)))
;; Loading (DEFCLASS CLASS-0223B (CLASS-0223A) ((S2 :READER S-R :WRITER S-W :ACCESSOR S-ACC)))
;; Loading (DEFTEST CLASS-0223.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0223B)))) (VALUES (SETF (SLOT-VALUE C (QUOTE S1)) (QUOTE X)) (SETF (SLOT-VALUE C (QUOTE S2)) (QUOTE Y)) (S-R C) (S-ACC C) (S-W (QUOTE Z) C) (SLOT-VALUE C (QUOTE S1)) (SLOT-VALUE C (QUOTE S2)) (S-R C) (S-ACC C))) X Y Y Y Z X Z Z Z)
;; Loading (LOAD "defclass-03.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defclass-03.lsp 8105D3F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS CLASS-0301A NIL (A B))
;; Loading (DEFCLASS CLASS-0301B NIL (A C))
;; Loading (DEFCLASS CLASS-0301C (CLASS-0301A CLASS-0301B) (D))
;; Loading (DEFTEST CLASS-0301.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0301C)))) (VALUES (TYPEP* C (QUOTE CLASS-0301A)) (TYPEP* C (QUOTE CLASS-0301B)) (TYPEP* C (QUOTE CLASS-0301C)) (TYPEP* C (FIND-CLASS (QUOTE CLASS-0301A))) (TYPEP* C (FIND-CLASS (QUOTE CLASS-0301B))) (TYPEP* C (FIND-CLASS (QUOTE CLASS-0301C))) (MAP-SLOT-BOUNDP* C (QUOTE (A B C D))) (SETF (SLOT-VALUE C (QUOTE A)) (QUOTE W)) (SETF (SLOT-VALUE C (QUOTE B)) (QUOTE X)) (SETF (SLOT-VALUE C (QUOTE C)) (QUOTE Y)) (SETF (SLOT-VALUE C (QUOTE D)) (QUOTE Z)) (MAP-SLOT-BOUNDP* C (QUOTE (A B C D))) (MAP-SLOT-VALUE C (QUOTE (A B C D))))) T T T T T T (NIL NIL NIL NIL) W X Y Z (T T T T) (W X Y Z))
;; Loading (DEFCLASS CLASS-0302A NIL ((A :INITFORM (QUOTE X)) B (C :INITFORM (QUOTE W))))
;; Loading (DEFCLASS CLASS-0302B NIL ((A :INITFORM (QUOTE Y)) (B :INITFORM (QUOTE Z))))
;; Loading (DEFCLASS CLASS-0302C (CLASS-0302A CLASS-0302B) (A B (C :INITFORM (QUOTE V)) D))
;; Loading (DEFTEST CLASS-0302.1 (LET ((C (MAKE-INSTANCE (QUOTE CLASS-0302C)))) (VALUES (MAP-SLOT-BOUNDP* C (QUOTE (A B C D))) (MAP-SLOT-VALUE C (QUOTE (A B C))))) (T T T NIL) (X Z V))
;; Loading (DEFCLASS CLASS-0303A NIL ((A :ALLOCATION :CLASS) B))
;; Loading (DEFCLASS CLASS-0303B NIL (A (B :ALLOCATION :CLASS)))
;; Loading (DEFCLASS CLASS-0303C (CLASS-0303A CLASS-0303B) NIL)
;; Loading (DEFTEST CLASS-0303.1 (LET ((C1 (MAKE-INSTANCE (QUOTE CLASS-0303A))) (C2 (MAKE-INSTANCE (QUOTE CLASS-0303B))) (C3 (MAKE-INSTANCE (QUOTE CLASS-0303C)))) (SLOT-MAKUNBOUND C1 (QUOTE A)) (SLOT-MAKUNBOUND C2 (QUOTE B)) (VALUES (LOOP FOR C IN (LIST C1 C2 C3) COLLECT (MAP-SLOT-BOUNDP* C (QUOTE (A B)))) (LIST (SETF (SLOT-VALUE C1 (QUOTE A)) (QUOTE X1)) (SLOT-BOUNDP* C2 (QUOTE A)) (SLOT-VALUE C3 (QUOTE A))) (LIST (SETF (SLOT-VALUE C2 (QUOTE A)) (QUOTE X2)) (SLOT-VALUE C1 (QUOTE A)) (SLOT-VALUE C2 (QUOTE A)) (SLOT-VALUE C3 (QUOTE A))) (LIST (SETF (SLOT-VALUE C3 (QUOTE A)) (QUOTE X3)) (SLOT-VALUE C1 (QUOTE A)) (SLOT-VALUE C2 (QUOTE A)) (SLOT-VALUE C3 (QUOTE A))) (LIST (SETF (SLOT-VALUE C1 (QUOTE B)) (QUOTE Y1)) (SLOT-VALUE C1 (QUOTE B)) (SLOT-BOUNDP* C2 (QUOTE B)) (SLOT-BOUNDP* C3 (QUOTE B))) (LIST (SETF (SLOT-VALUE C2 (QUOTE B)) (QUOTE Y2)) (SLOT-VALUE C1 (QUOTE B)) (SLOT-VALUE C2 (QUOTE B)) (SLOT-BOUNDP C3 (QUOTE B))) (LIST (SETF (SLOT-VALUE C3 (QUOTE B)) (QUOTE Y3)) (SLOT-VALUE C1 (QUOTE B)) (SLOT-VALUE C2 (QUOTE B)) (SLOT-VALUE C3 (QUOTE B))))) ((NIL NIL) (NIL NIL) (NIL NIL)) (X1 NIL X1) (X2 X1 X2 X1) (X3 X3 X2 X3) (Y1 Y1 NIL NIL) (Y2 Y1 Y2 NIL) (Y3 Y1 Y2 Y3))
;; Loading (DEFCLASS CLASS-0304A NIL ((A :INITFORM (QUOTE X))))
;; Loading (DEFCLASS CLASS-0304B (CLASS-0304A) NIL)
;; Loading (DEFCLASS CLASS-0304C (CLASS-0304A) ((A :INITFORM (QUOTE Y))))
;; Loading (DEFCLASS CLASS-0304D (CLASS-0304B CLASS-0304C) NIL)
;; Loading (DEFTEST CLASS-0304.1 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0304D)) (QUOTE A)) Y)
;; Loading (DEFCLASS CLASS-0305A NIL ((A :INITARG :A)) (:DEFAULT-INITARGS :A (QUOTE X)))
;; Loading (DEFCLASS CLASS-0305B (CLASS-0305A) NIL)
;; Loading (DEFCLASS CLASS-0305C (CLASS-0305A) NIL (:DEFAULT-INITARGS :A (QUOTE Y)))
;; Loading (DEFCLASS CLASS-0305D (CLASS-0305B CLASS-0305C) NIL)
;; Loading (DEFTEST CLASS-0305.1 (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0305D)) (QUOTE A)) Y)
;; Loading (DEFCLASS CLASS-0306A NIL ((A :INITFORM NIL :READER A-SLOT)))
;; Loading (DEFCLASS CLASS-0306B (CLASS-0306A) ((A :INITFORM (QUOTE X))))
;; Loading (DEFCLASS CLASS-0306C (CLASS-0306A) ((A :INITFORM (QUOTE Y))))
;; Loading (DEFCLASS CLASS-0306D (CLASS-0306B) NIL)
;; Loading (DEFCLASS CLASS-0306E (CLASS-0306B) NIL)
;; Loading (DEFCLASS CLASS-0306F (CLASS-0306D CLASS-0306C) NIL)
;; Loading (DEFCLASS CLASS-0306G (CLASS-0306E) NIL)
;; Loading (DEFCLASS CLASS-0306H (CLASS-0306F CLASS-0306G) NIL)
;; Loading (DEFTEST CLASS-0306.1 (LOOP FOR OBJ IN (MAPCAR (FUNCTION MAKE-INSTANCE) (QUOTE (CLASS-0306A CLASS-0306B CLASS-0306C CLASS-0306D CLASS-0306E CLASS-0306F CLASS-0306G CLASS-0306H))) COLLECT (SLOT-VALUE OBJ (QUOTE A))) (NIL X Y X X X X Y))
;; Loading (DEFTEST CLASS-0306.2 (LOOP FOR OBJ IN (MAPCAR (FUNCTION MAKE-INSTANCE) (QUOTE (CLASS-0306A CLASS-0306B CLASS-0306C CLASS-0306D CLASS-0306E CLASS-0306F CLASS-0306G CLASS-0306H))) COLLECT (A-SLOT OBJ)) (NIL X Y X X X X Y))
;; Loading (DEFTEST CLASS-0307.1 (PROGN (SETF (FIND-CLASS (QUOTE CLASS-0307A)) NIL (FIND-CLASS (QUOTE CLASS-0307B)) NIL) (EVAL (QUOTE (DEFCLASS CLASS-0307A NIL NIL))) (EVAL (QUOTE (DEFCLASS CLASS-0307B (CLASS-0307A) (A)))) (EVAL (QUOTE (DEFCLASS CLASS-0307A NIL ((A :INITFORM NIL))))) (EVAL (QUOTE (DEFCLASS CLASS-0307B (CLASS-0307A) ((A :INITFORM (QUOTE X)))))) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0307B)) (QUOTE A))) X)
;; Loading (DEFTEST CLASS-0308.1 (PROGN (SETF (FIND-CLASS (QUOTE CLASS-0308A)) NIL (FIND-CLASS (QUOTE CLASS-0308B)) NIL) (EVAL (QUOTE (DEFCLASS CLASS-0308A NIL NIL))) (EVAL (QUOTE (DEFCLASS CLASS-0308B (CLASS-0308A) (A)))) (EVAL (QUOTE (DEFCLASS CLASS-0308A NIL ((A :INITARG :A))))) (EVAL (QUOTE (DEFCLASS CLASS-0308B (CLASS-0308A) NIL))) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CLASS-0308B) :A (QUOTE X)) (QUOTE A))) X)
;; Loading (DEFTEST CLASS-0309.1 (PROGN (SETF (FIND-CLASS (QUOTE CLASS-0309)) NIL) (LET* ((CLASS1 (EVAL (QUOTE (DEFCLASS CLASS-0309 NIL ((A) (B) (C)))))) (OBJ1 (MAKE-INSTANCE (QUOTE CLASS-0309)))) (SETF (CLASS-NAME CLASS1) NIL) (LET ((CLASS2 (EVAL (QUOTE (DEFCLASS CLASS-0309 NIL ((A) (B) (C))))))) (VALUES (EQT (CLASS-OF OBJ1) CLASS1) (EQT CLASS1 CLASS2) (TYPEP* OBJ1 CLASS1) (TYPEP* OBJ1 CLASS2))))) T NIL T NIL)
;; Loading (DEFTEST CLASS-0310.1 (PROGN (SETF (FIND-CLASS (QUOTE CLASS-0310A)) NIL (FIND-CLASS (QUOTE CLASS-0310B)) NIL) (LET* ((CLASS1 (EVAL (QUOTE (DEFCLASS CLASS-0310A NIL ((A) (B) (C)))))) (OBJ1 (MAKE-INSTANCE (QUOTE CLASS-0310A)))) (SETF (CLASS-NAME CLASS1) (QUOTE CLASS-0310B)) (LET ((CLASS2 (EVAL (QUOTE (DEFCLASS CLASS-0310A NIL ((A) (B) (C))))))) (VALUES (EQT (CLASS-OF OBJ1) CLASS1) (EQT CLASS1 CLASS2) (TYPEP* OBJ1 CLASS1) (TYPEP* OBJ1 CLASS2) (CLASS-NAME CLASS1) (CLASS-NAME CLASS2))))) T NIL T NIL CLASS-0310B CLASS-0310A)
;; Loading (DEFTEST CLASS-0311.1 (PROGN (SETF (FIND-CLASS (QUOTE CLASS-0311)) NIL) (LET* ((CLASS1 (EVAL (QUOTE (DEFCLASS CLASS-0311 NIL ((A) (B) (C)))))) (OBJ1 (MAKE-INSTANCE (QUOTE CLASS-0311)))) (SETF (FIND-CLASS (QUOTE CLASS-0311)) NIL) (LET ((CLASS2 (EVAL (QUOTE (DEFCLASS CLASS-0311 NIL ((A) (B) (C))))))) (VALUES (EQT (CLASS-OF OBJ1) CLASS1) (EQT CLASS1 CLASS2) (TYPEP* OBJ1 CLASS1) (TYPEP* OBJ1 CLASS2) (CLASS-NAME CLASS1) (CLASS-NAME CLASS2) (EQT (FIND-CLASS (QUOTE CLASS-0311)) CLASS1) (EQT (FIND-CLASS (QUOTE CLASS-0311)) CLASS2))))) T NIL T NIL CLASS-0311 CLASS-0311 NIL T)
;; Loading (LOAD "defclass-errors.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defclass-errors.lsp 812867B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DEFCLASS.ERROR.1 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.1 NIL (A B C D B E)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.2 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.2 NIL ((S1 :INITARG :FOO)) (:DEFAULT-INITARGS :FOO 1 :FOO 2)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.3 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.3 NIL ((S1 :INITFORM 0 :INITFORM 2))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.4 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.4 NIL ((S1 :INITFORM 0 :INITFORM 0))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.5 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.5 NIL ((S1 :TYPE FIXNUM :TYPE CHARACTER))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.6 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.6 NIL ((S1 :TYPE T :TYPE T))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.7 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.7 NIL ((S1 :DOCUMENTATION "foo" :DOCUMENTATION "bar"))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.9 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.9 NIL ((S1 :ALLOCATION :CLASS :ALLOCATION :INSTANCE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.10 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.10 NIL ((S1 :ALLOCATION :CLASS :ALLOCATION :CLASS))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.11 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.11 NIL ((S1 :ALLOCATION :INSTANCE :ALLOCATION :INSTANCE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.12 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.12 NIL ((S1 #:G21224 NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.13 (SIGNALS-ERROR (DEFCLASS ERRONEOUS-CLASS.13 NIL (A B C) (#:G21225)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.14 (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-14 NIL (FOO FOO)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.15 (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-15 NIL (FOO (FOO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.16 (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-16 NIL ((FOO :INITARG F1)) (:DEFAULT-INITARGS :F1 10 :F1 20)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.17 (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-17 NIL ((FOO :INITFORM 10 :INITFORM 20 :READER DEFCLASS-ERROR-4/FOO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.18 (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-18 NIL ((FOO :INITFORM 10 :INITFORM 10 :READER DEFCLASS-ERROR-5/FOO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.19 (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-19 NIL ((FOO :INITARG F1 :TYPE T :TYPE T :READER DEFCLASS-ERROR-6/FOO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.20 (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-20 NIL ((FOO :INITARG F1 :DOCUMENTATION "x" :READER DEFCLASS-ERROR-7/FOO :DOCUMENTATION "x"))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.21 (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-21 NIL ((FOO #:UNKNOWN-SLOT-OPTION NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFCLASS.ERROR.22 (LET ((OPTION (GENTEMP "UNKNOWN-OPTION" (SYMBOL-PACKAGE :FOO)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFCLASS DEFCLASS-ERROR-22 NIL (FOO BAR) ((SYSTEM.INTERNALS::BQ-COMMA OPTION) NIL)) PROGRAM-ERROR)))) T)
;; Loading (DEFTEST DEFCLASS.ERROR.23 (LOOP FOR CL IN *BUILT-IN-CLASSES* FOR NAME = (CLASS-NAME CL) UNLESS (OR (NOT NAME) (HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA (GENSYM)) ((SYSTEM.INTERNALS::BQ-COMMA NAME))))) NIL) (ERROR (C) C))) COLLECT (LIST CL NAME)) NIL)
;; Loading (DEFTEST DEFCLASS.ERROR.24 (LOOP FOR CL IN *BUILT-IN-CLASSES* FOR NAME = (CLASS-NAME CL) UNLESS (OR (NOT NAME) (HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA NAME) NIL))) NIL) (ERROR (C) C))) COLLECT (LIST CL NAME)) NIL)
;; Loading (LOAD "defclass-forward-reference.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defclass-forward-reference.lsp 8139F397>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DEFCLASS.FORWARD-REF.1 (LET ((C1 (GENSYM)) (C2 (GENSYM))) (LET ((CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C1) ((SYSTEM.INTERNALS::BQ-COMMA C2)) NIL))))) (IF (NOT (TYPEP CLASS1 (QUOTE CLASS))) 1 (LET ((CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C2) NIL NIL))))) (IF (NOT (TYPEP CLASS2 (QUOTE CLASS))) 2 (LET ((I1 (MAKE-INSTANCE C1)) (I2 (MAKE-INSTANCE C2))) (COND ((NOT (TYPEP I1 C1)) 3) ((NOT (TYPEP I1 CLASS1)) 4) ((NOT (TYPEP I1 C2)) 5) ((NOT (TYPEP I1 CLASS2)) 6) ((TYPEP I2 C1) 7) ((TYPEP I2 CLASS1) 8) ((NOT (TYPEP I2 C2)) 9) ((NOT (TYPEP I2 CLASS2)) 10) (T (QUOTE GOOD))))))))) GOOD)
;; Loading (DEFTEST DEFCLASS.FORWARD-REF.2 (LET ((C1 (GENSYM)) (C2 (GENSYM)) (C3 (GENSYM))) (LET ((CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C1) ((SYSTEM.INTERNALS::BQ-COMMA C2) (SYSTEM.INTERNALS::BQ-COMMA C3)) NIL))))) (IF (NOT (TYPEP CLASS1 (QUOTE CLASS))) 1 (LET ((CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C2) NIL NIL))))) (IF (NOT (TYPEP CLASS2 (QUOTE CLASS))) 2 (LET ((CLASS3 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C3) NIL NIL))))) (IF (NOT (TYPEP CLASS3 (QUOTE CLASS))) 3 (LET ((I1 (MAKE-INSTANCE C1)) (I2 (MAKE-INSTANCE C2)) (I3 (MAKE-INSTANCE C3))) (COND ((NOT (TYPEP I1 C1)) 4) ((NOT (TYPEP I1 CLASS1)) 5) ((NOT (TYPEP I1 C2)) 6) ((NOT (TYPEP I1 CLASS2)) 7) ((NOT (TYPEP I1 C3)) 8) ((NOT (TYPEP I1 CLASS3)) 9) ((TYPEP I2 C1) 10) ((TYPEP I2 CLASS1) 11) ((TYPEP I3 C1) 12) ((TYPEP I3 CLASS1) 13) ((NOT (TYPEP I2 C2)) 14) ((NOT (TYPEP I2 CLASS2)) 15) ((NOT (TYPEP I3 C3)) 16) ((NOT (TYPEP I3 CLASS3)) 17) ((TYPEP I2 C3) 18) ((TYPEP I2 CLASS3) 19) ((TYPEP I3 C2) 20) ((TYPEP I3 CLASS2) 21) (T (QUOTE GOOD))))))))))) GOOD)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST DEFCLASS.FORWARD-REF.3 (LET ((C1 (GENSYM)) (C2 (GENSYM)) (C3 (GENSYM))) (LET ((CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C1) ((SYSTEM.INTERNALS::BQ-COMMA C2)) NIL))))) (IF (NOT (TYPEP CLASS1 (QUOTE CLASS))) 1 (LET ((CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C2) ((SYSTEM.INTERNALS::BQ-COMMA C3)) NIL))))) (IF (NOT (TYPEP CLASS2 (QUOTE CLASS))) 2 (LET ((CLASS3 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C3) NIL NIL))))) (IF (NOT (TYPEP CLASS3 (QUOTE CLASS))) 3 (LET ((I1 (MAKE-INSTANCE C1)) (I2 (MAKE-INSTANCE C2)) (I3 (MAKE-INSTANCE C3))) (COND ((NOT (TYPEP I1 C1)) 4) ((NOT (TYPEP I1 CLASS1)) 5) ((NOT (TYPEP I1 C2)) 6) ((NOT (TYPEP I1 CLASS2)) 7) ((NOT (TYPEP I1 C3)) 8) ((NOT (TYPEP I1 CLASS3)) 9) ((TYPEP I2 C1) 10) ((TYPEP I2 CLASS1) 11) ((TYPEP I3 C1) 12) ((TYPEP I3 CLASS1) 13) ((NOT (TYPEP I2 C2)) 14) ((NOT (TYPEP I2 CLASS2)) 15) ((NOT (TYPEP I3 C3)) 16) ((NOT (TYPEP I3 CLASS3)) 17) ((NOT (TYPEP I2 C3)) 18) ((NOT (TYPEP I2 CLASS3)) 19) ((TYPEP I3 C2) 20) ((TYPEP I3 CLASS2) 21) (T (QUOTE GOOD))))))))))) GOOD)
;; Loading (DEFTEST DEFCLASS.FORWARD-REF.4 (BLOCK NIL (LET ((C1 (GENSYM)) (C2 (GENSYM)) (C3 (GENSYM)) (C4 (GENSYM)) (C5 (GENSYM))) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C4) NIL NIL))) (QUOTE CLASS)) (RETURN 1)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C5) NIL NIL))) (QUOTE CLASS)) (RETURN 2)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C1) ((SYSTEM.INTERNALS::BQ-COMMA C2) (SYSTEM.INTERNALS::BQ-COMMA C3)) NIL))) (QUOTE CLASS)) (RETURN 3)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C2) ((SYSTEM.INTERNALS::BQ-COMMA C4) (SYSTEM.INTERNALS::BQ-COMMA C5)) NIL))) (QUOTE CLASS)) (RETURN 4)) (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (PROGN (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA C3) ((SYSTEM.INTERNALS::BQ-COMMA C5) (SYSTEM.INTERNALS::BQ-COMMA C4)) NIL) (MAKE-INSTANCE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA C1)))))) (ERROR NIL :GOOD)))) :GOOD)
;; Loading (LOAD "ensure-generic-function.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ensure-generic-function.lsp C0C60C07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.1 (IF (TYPEP (FUNCTION CAR) (QUOTE GENERIC-FUNCTION)) T (SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE CAR)) ERROR)) T)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.2 (SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE DEFCLASS)) ERROR) T)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.3 (SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE TAGBODY)) ERROR) T)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.4 (LET ((F (QUOTE EGF-FUN-4))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (VALUES (FBOUNDP F) (NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION F) (QUOTE GENERIC-FUNCTION))) (NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION F) (QUOTE GENERIC-FUNCTION))) (NOTNOT-MV (TYPEP (SYMBOL-FUNCTION F) (QUOTE GENERIC-FUNCTION))))) NIL T T T)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.5 (LET ((F (QUOTE EGF-FUN-5))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (VALUES (FBOUNDP F) (NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (A B C))) (QUOTE GENERIC-FUNCTION))) (NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X Y))) (QUOTE GENERIC-FUNCTION))) (NOTNOT-MV (TYPEP (SYMBOL-FUNCTION F) (QUOTE GENERIC-FUNCTION))))) NIL T T T)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.6 (LET ((F (QUOTE EGF-FUN-6))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (VALUES (FBOUNDP F) (NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (A B C))) (QUOTE GENERIC-FUNCTION))) (NOTNOT-MV (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA F) ((A T) (B T) (C T)) (LIST A B C))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA F)) :LAMBDA-LIST (QUOTE (X Y))) ERROR))))) NIL T T T)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.7 (LET ((F (QUOTE EGF-FUN-7))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LET ((FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA F) (X) (:METHOD ((X SYMBOL)) (LIST X :A)) (:METHOD ((X INTEGER)) (LIST X :B)) (:METHOD ((X T)) (LIST X :C))))))) (VALUES (MAPCAR FN (QUOTE (X 2 3/2))) (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X)))) (MAPCAR FN (QUOTE (X 2 3/2)))))) ((X :A) (2 :B) (3/2 :C)) T ((X :A) (2 :B) (3/2 :C)))
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.8 (LET ((F (QUOTE EGF-FUN-8))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LET ((FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA F) (X Y) (:METHOD ((X T) (Y SYMBOL)) 1) (:METHOD ((X SYMBOL) (Y T)) 2)))))) (VALUES (MAPCAR FN (QUOTE (A A 3)) (QUOTE (B 4 B))) (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X Y)) :ARGUMENT-PRECEDENCE-ORDER (QUOTE (Y X)))) (MAPCAR FN (QUOTE (A A 3)) (QUOTE (B 4 B)))))) (2 2 1) T (1 2 1))
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.9 (LET ((F (QUOTE EGF-FUN-9))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LET ((FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA F) (X) (:METHOD-COMBINATION +) (:METHOD + ((X T)) 1) (:METHOD + ((X SYMBOL)) 2) (:METHOD + ((X (EQL NIL))) 4)))))) (VALUES (MAPCAR FN (QUOTE (3/2 A NIL))) (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X)) :METHOD-CLASS (QUOTE STANDARD-METHOD))) (MAPCAR FN (QUOTE (3/2 A NIL))) (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X)) :METHOD-CLASS (FIND-CLASS (QUOTE STANDARD-METHOD)))) (MAPCAR FN (QUOTE (3/2 A NIL)))))) (1 3 7) T (1 3 7) T (1 3 7))
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.10 (LET ((F (QUOTE EGF-FUN-10))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LET ((FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA F) (X) (:METHOD ((X T)) 1)))))) (VALUES (FUNCALL FN (QUOTE A)) (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X)) :GENERIC-FUNCTION-CLASS (QUOTE STANDARD-GENERIC-FUNCTION))) (FUNCALL FN (QUOTE A)) (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X)) :GENERIC-FUNCTION-CLASS (FIND-CLASS (QUOTE STANDARD-GENERIC-FUNCTION)))) (FUNCALL FN (QUOTE A))))) 1 T 1 T 1)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.11 (LET ((F (QUOTE EGF-FUN-11))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LET ((FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA F) (X) (:METHOD ((X T)) 1)))))) (VALUES (FUNCALL FN (QUOTE A)) (EQLT FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%M (&ENVIRONMENT ENV) (ENSURE-GENERIC-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA F)) :LAMBDA-LIST (QUOTE (X)) :ENVIRONMENT ENV))) (%M))))) (FUNCALL FN (QUOTE A))))) 1 T 1)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.12 (LET ((F (QUOTE EGF-FUN-12))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LET ((FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA F) (X) (:DOCUMENTATION "foo") (:METHOD ((X T)) 1)))))) (VALUES (FUNCALL FN (QUOTE A)) (OR (DOCUMENTATION F (QUOTE FUNCTION)) "foo") (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X)) :DOCUMENTATION "bar")) (OR (DOCUMENTATION F (QUOTE FUNCTION)) "bar") (FUNCALL FN (QUOTE A))))) 1 "foo" T "bar" 1)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.13 (LET ((F (QUOTE EGF-FUN-13))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LET ((FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA F) (X Y) (DECLARE (OPTIMIZE SAFETY (SPEED 0) (DEBUG 0) (SPACE 0))) (:METHOD ((X T) (Y T)) (LIST X Y))))))) (VALUES (FUNCALL FN (QUOTE A) (QUOTE B)) (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (X Y)) :DECLARE (QUOTE ((OPTIMIZE (SAFETY 0) (DEBUG 2) SPEED (SPACE 1)))))) (FUNCALL FN (QUOTE A) 1)))) (A B) T (A 1))
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.14 (LET ((F (QUOTE (SETF EGF-FUN-14)))) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LET ((FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA F) (VAL X) (:METHOD ((VAL T) (X CONS)) (SETF (CAR X) VAL))))))) (VALUES (LET ((Z (CONS (QUOTE A) (QUOTE B)))) (LIST (SETF (EGF-FUN-14 Z) (QUOTE C)) Z)) (EQLT FN (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST (QUOTE (VAL X)))) (LET ((Z (CONS (QUOTE A) (QUOTE B)))) (LIST (SETF (EGF-FUN-14 Z) (QUOTE C)) Z))))) (C (C . B)) T (C (C . B)))
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.ERROR.1 (SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION) PROGRAM-ERROR) T)
;; Loading (DEFTEST ENSURE-GENERIC-FUNCTION.ERROR.2 (SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (GENSYM) :LAMBDA-LIST) PROGRAM-ERROR) T)
;; Loading (LOAD "allocate-instance.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/allocate-instance.lsp C0DD4177>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS ALLOCATE-INSTANCE-CLASS-01 NIL ((A :INITFORM (QUOTE X)) (B :INITARG :B) (C :TYPE FLOAT) (D :ALLOCATION :CLASS) (E :INITARG :E) (F :DOCUMENTATION "foo")) (:DEFAULT-INITARGS :B (QUOTE Y)))
;; Loading (DEFTEST ALLOCATE-INSTANCE.1 (LET* ((CLASS (FIND-CLASS (QUOTE ALLOCATE-INSTANCE-CLASS-01))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (EQT (CLASS-OF OBJ) CLASS) (TYPEP* OBJ (QUOTE ALLOCATE-INSTANCE-CLASS-01)) (TYPEP* OBJ CLASS) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D E F))))) T T T (NIL NIL NIL NIL NIL NIL))
;; Loading (DEFTEST ALLOCATE-INSTANCE.2 (LET* ((CLASS (FIND-CLASS (QUOTE ALLOCATE-INSTANCE-CLASS-01))) (OBJ (ALLOCATE-INSTANCE CLASS :FOO T :A 10 :B 12 :C 1.0 :D (QUOTE A) :E 17 :F NIL :BAR T))) (VALUES (EQT (CLASS-OF OBJ) CLASS) (TYPEP* OBJ (QUOTE ALLOCATE-INSTANCE-CLASS-01)) (TYPEP* OBJ CLASS) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D E F))))) T T T (NIL NIL NIL NIL NIL NIL))
;; Loading (DEFTEST ALLOCATE-INSTANCE.3 (LET* ((CLASS (FIND-CLASS (QUOTE ALLOCATE-INSTANCE-CLASS-01))) (OBJ (ALLOCATE-INSTANCE CLASS :ALLOW-OTHER-KEYS NIL :XYZZY T))) (VALUES (EQT (CLASS-OF OBJ) CLASS) (TYPEP* OBJ (QUOTE ALLOCATE-INSTANCE-CLASS-01)) (TYPEP* OBJ CLASS) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D E F))))) T T T (NIL NIL NIL NIL NIL NIL))
;; Loading (DEFCLASS ALLOCATE-INSTANCE-CLASS-02 NIL (A (B :ALLOCATION :CLASS)))
;; Loading (DEFTEST ALLOCATE-INSTANCE.4 (LET ((CLASS (FIND-CLASS (QUOTE ALLOCATE-INSTANCE-CLASS-02)))) (SETF (SLOT-VALUE (ALLOCATE-INSTANCE CLASS) (QUOTE B)) (QUOTE X)) (LET ((OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (EQT (CLASS-OF OBJ) CLASS) (TYPEP* OBJ (QUOTE ALLOCATE-INSTANCE-CLASS-02)) (TYPEP* OBJ CLASS) (SLOT-BOUNDP* OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B))))) T T T NIL X)
;; Loading (DEFSTRUCT ALLOCATE-INSTANCE-STRUCT-01 A (B 0 :TYPE INTEGER) (C #\a :TYPE CHARACTER) (D (QUOTE A) :TYPE SYMBOL))
;; Loading (DEFTEST ALLOCATE-INSTANCE.5 (LET* ((CLASS (FIND-CLASS (QUOTE ALLOCATE-INSTANCE-STRUCT-01))) (OBJ (ALLOCATE-INSTANCE CLASS))) (SETF (ALLOCATE-INSTANCE-STRUCT-01-A OBJ) (QUOTE X) (ALLOCATE-INSTANCE-STRUCT-01-B OBJ) 1234567890 (ALLOCATE-INSTANCE-STRUCT-01-C OBJ) #\Z (ALLOCATE-INSTANCE-STRUCT-01-D OBJ) (QUOTE FOO)) (VALUES (EQT (CLASS-OF OBJ) CLASS) (TYPEP* OBJ (QUOTE ALLOCATE-INSTANCE-STRUCT-01)) (TYPEP* OBJ CLASS) (ALLOCATE-INSTANCE-STRUCT-01-A OBJ) (ALLOCATE-INSTANCE-STRUCT-01-B OBJ) (ALLOCATE-INSTANCE-STRUCT-01-C OBJ) (ALLOCATE-INSTANCE-STRUCT-01-D OBJ))) T T T X 1234567890 #\Z FOO)
;; Loading (DEFTEST ALLOCATE-INSTANCE.ORDER.1 (LET* ((CLASS (FIND-CLASS (QUOTE ALLOCATE-INSTANCE-CLASS-01))) (I 0) X Y Z W (OBJ (ALLOCATE-INSTANCE (PROGN (SETF X (INCF I)) CLASS) :E (SETF Y (INCF I)) :B (SETF Z (INCF I)) :E (SETF W (INCF I))))) (VALUES (EQT (CLASS-OF OBJ) CLASS) (TYPEP* OBJ (QUOTE ALLOCATE-INSTANCE-CLASS-01)) (TYPEP* OBJ CLASS) I X Y Z W)) T T T 4 1 2 3 4)
;; Loading (DEFTEST ALLOCATE-INSTANCE.ERROR.1 (SIGNALS-ERROR (ALLOCATE-INSTANCE) PROGRAM-ERROR) T)
;; Loading (LOAD "reinitialize-instance.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/reinitialize-instance.lsp C0EBD0B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REINITIALIZE-INSTANCE.1 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CLASS-01))) (OBJ2 (REINITIALIZE-INSTANCE OBJ))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-BOUNDP* OBJ (QUOTE (S1 S2 S3))))) T (NIL NIL NIL))
;; Loading (DEFTEST REINITIALIZE-INSTANCE.2 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CLASS-01))) (OBJ2 (REINITIALIZE-INSTANCE OBJ :ALLOW-OTHER-KEYS NIL))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-BOUNDP* OBJ (QUOTE (S1 S2 S3))))) T (NIL NIL NIL))
;; Loading (DEFTEST REINITIALIZE-INSTANCE.3 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CLASS-01))) (OBJ2 (REINITIALIZE-INSTANCE OBJ :ALLOW-OTHER-KEYS T))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-BOUNDP* OBJ (QUOTE (S1 S2 S3))))) T (NIL NIL NIL))
;; Loading (DEFTEST REINITIALIZE-INSTANCE.4 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CLASS-01))) (OBJ2 (REINITIALIZE-INSTANCE OBJ :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-BOUNDP* OBJ (QUOTE (S1 S2 S3))))) T (NIL NIL NIL))
;; Loading (DEFTEST REINITIALIZE-INSTANCE.5 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CLASS-07))) (OBJ2 (REINITIALIZE-INSTANCE OBJ :S1A (QUOTE A) :S2 (QUOTE B) :S1A (QUOTE BAD) :S2 (QUOTE BAD2) :S1B (QUOTE BAD3)))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-VALUE OBJ (QUOTE (S1 S2))))) T (A B))
;; Loading (DEFTEST REINITIALIZE-INSTANCE.6 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CLASS-07) :S1A (QUOTE A))) (OBJ2 (REINITIALIZE-INSTANCE OBJ :S1B (QUOTE B)))) (VALUES (EQT OBJ OBJ2) (SLOT-VALUE OBJ (QUOTE S1)) (SLOT-BOUNDP* OBJ (QUOTE S2)))) T B NIL)
;; Loading (DEFTEST REINITIALIZE-INSTANCE.7 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CLASS-07) :S1A (QUOTE A))) (OBJ2 (REINITIALIZE-INSTANCE OBJ :S2 (QUOTE B)))) (VALUES (EQT OBJ OBJ2) (SLOT-VALUE OBJ (QUOTE S1)) (SLOT-VALUE OBJ (QUOTE S2)))) T A B)
;; Loading (DEFCLASS REINIT-CLASS-01 NIL ((A :INITARG :A) (B :INITARG :B)))
;; Loading (DEFMETHOD REINITIALIZE-INSTANCE :AFTER ((INSTANCE REINIT-CLASS-01) &REST INITARGS &KEY (X NIL X-P)) (DECLARE (IGNORE INITARGS)) (WHEN X-P (SETF (SLOT-VALUE INSTANCE (QUOTE A)) X)) INSTANCE)
;; Loading (DEFTEST REINITIALIZE-INSTANCE.8 (LET* ((OBJ (MAKE-INSTANCE (QUOTE REINIT-CLASS-01))) (OBJ2 (REINITIALIZE-INSTANCE OBJ :A 1 :B 3))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-VALUE OBJ2 (QUOTE (A B))))) T (1 3))
;; Loading (DEFTEST REINITIALIZE-INSTANCE.9 (LET* ((OBJ (MAKE-INSTANCE (QUOTE REINIT-CLASS-01) :A 10 :B 20)) (OBJ2 (REINITIALIZE-INSTANCE OBJ :X 3))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-VALUE OBJ2 (QUOTE (A B))))) T (3 20))
;; Loading (DEFTEST REINITIALIZE-INSTANCE.10 (LET* ((OBJ (MAKE-INSTANCE (QUOTE REINIT-CLASS-01) :A 10 :B 20)) (OBJ2 (REINITIALIZE-INSTANCE OBJ :X 3 :X 100))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-VALUE OBJ2 (QUOTE (A B))))) T (3 20))
;; Loading (DEFTEST REINITIALIZE-INSTANCE.ORDER.1 (LET* ((OBJ (MAKE-INSTANCE (QUOTE REINIT-CLASS-01))) (I 0) X Y Z W (OBJ2 (REINITIALIZE-INSTANCE (PROGN (SETF X (INCF I)) OBJ) :B (SETF Y (INCF I)) :A (SETF Z (INCF I)) :B (SETF W (INCF I))))) (VALUES (EQT OBJ OBJ2) (MAP-SLOT-VALUE OBJ2 (QUOTE (A B))) I X Y Z W)) T (3 2) 4 1 2 3 4)
;; Loading (DEFTEST REINITIALIZE-INSTANCE.ERROR.1 (HANDLER-CASE (EVAL (QUOTE (REINITIALIZE-INSTANCE (MAKE-INSTANCE (QUOTE CLASS-01)) :GARBAGE T))) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST REINITIALIZE-INSTANCE.ERROR.2 (SIGNALS-ERROR (REINITIALIZE-INSTANCE) PROGRAM-ERROR) T)
;; Loading (LOAD "shared-initialize.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/shared-initialize.lsp C0F9BC57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS SHARED-INIT-CLASS-01 NIL ((A :INITFORM (QUOTE X) :INITARG :A) (B :INITFORM (QUOTE Y) :INITARG :B) (C :INITARG :C) D))
;; Loading (DEFTEST SHARED-INITIALIZE.1.1 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :A 1 :B 3 :C 14)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (A B C))))) (NIL NIL NIL NIL) T (T T T NIL) (1 3 14))
;; Loading (DEFTEST SHARED-INITIALIZE.1.2 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))))) (NIL NIL NIL NIL) T (NIL NIL NIL NIL))
;; Loading (DEFTEST SHARED-INITIALIZE.1.3 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :A 1 :A 2)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL NIL NIL) T (T NIL NIL NIL) 1)
;; Loading (DEFTEST SHARED-INITIALIZE.1.4 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :A 1 :A 2 :ALLOW-OTHER-KEYS NIL)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL NIL NIL) T (T NIL NIL NIL) 1)
;; Loading (DEFTEST SHARED-INITIALIZE.1.5 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (A)) :A 1)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL NIL NIL) T (T NIL NIL NIL) 1)
;; Loading (DEFTEST SHARED-INITIALIZE.1.6 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (A)))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL NIL NIL) T (T NIL NIL NIL) X)
;; Loading (DEFTEST SHARED-INITIALIZE.1.7 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL NIL NIL) T (T T NIL NIL) X Y)
;; Loading (DEFTEST SHARED-INITIALIZE.1.8 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ T :B 10 :C 100)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)) (SLOT-VALUE OBJ (QUOTE C)))) (NIL NIL NIL NIL) T (T T T NIL) X 10 100)
;; Loading (DEFTEST SHARED-INITIALIZE.1.9 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :A 1 :B 10 :C 100)) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :A 5 :B 37 :C 213)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)) (SLOT-VALUE OBJ (QUOTE C)))) (NIL NIL NIL NIL) T T (T T T NIL) 5 37 213)
;; Loading (DEFTEST SHARED-INITIALIZE.1.10 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (SETF (SLOT-VALUE OBJ (QUOTE A)) 1000) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (A)))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)))) (T NIL NIL NIL) T (T NIL NIL NIL) 1000)
;; Loading (DECLAIM (SPECIAL *SHARED-INIT-VAR-02-INIT* *SHARED-INIT-VAR-02-QUERY*))
;; Loading (DECLAIM (TYPE FUNCTION *SHARED-INIT-VAR-02-INIT* *SHARED-INIT-VAR-02-QUERY*))
;; Loading (LET ((AINIT 0) (BINIT 0)) (FLET ((%INIT (A B) (SETF AINIT A BINIT B)) (%QUERY NIL (LIST AINIT BINIT))) (SETF *SHARED-INIT-VAR-02-INIT* (FUNCTION %INIT) *SHARED-INIT-VAR-02-QUERY* (FUNCTION %QUERY)) (DEFCLASS SHARED-INIT-CLASS-02 NIL ((A :INITFORM (INCF AINIT) :INITARG :A) (B :INITFORM (INCF BINIT) :INITARG :B) (C :INITARG :C) (D)) (:DEFAULT-INITARGS :C 100))))
;; Loading (DEFTEST SHARED-INITIALIZE.2.1 (PROGN (FUNCALL *SHARED-INIT-VAR-02-INIT* 5 10) (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-02))))) (VALUES (FUNCALL *SHARED-INIT-VAR-02-QUERY*) (EQT OBJ (SHARED-INITIALIZE OBJ T)) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (FUNCALL *SHARED-INIT-VAR-02-QUERY*)))) (5 10) T 6 11 (T T NIL NIL) (6 11))
;; Loading (DEFTEST SHARED-INITIALIZE.2.2 (PROGN (FUNCALL *SHARED-INIT-VAR-02-INIT* 5 10) (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-02))))) (VALUES (FUNCALL *SHARED-INIT-VAR-02-QUERY*) (EQT OBJ (SHARED-INITIALIZE OBJ NIL)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (FUNCALL *SHARED-INIT-VAR-02-QUERY*)))) (5 10) T (NIL NIL NIL NIL) (5 10))
;; Loading (DEFTEST SHARED-INITIALIZE.2.3 (PROGN (FUNCALL *SHARED-INIT-VAR-02-INIT* 5 10) (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-02))))) (VALUES (FUNCALL *SHARED-INIT-VAR-02-QUERY*) (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (A)))) (SLOT-VALUE OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (FUNCALL *SHARED-INIT-VAR-02-QUERY*)))) (5 10) T 6 (T NIL NIL NIL) (6 10))
;; Loading (DEFTEST SHARED-INITIALIZE.2.4 (PROGN (FUNCALL *SHARED-INIT-VAR-02-INIT* 5 10) (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-02))))) (VALUES (FUNCALL *SHARED-INIT-VAR-02-QUERY*) (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (B)))) (SLOT-VALUE OBJ (QUOTE B)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (FUNCALL *SHARED-INIT-VAR-02-QUERY*)))) (5 10) T 11 (NIL T NIL NIL) (5 11))
;; Loading (DEFTEST SHARED-INITIALIZE.2.5 (PROGN (FUNCALL *SHARED-INIT-VAR-02-INIT* 5 10) (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-02))))) (VALUES (FUNCALL *SHARED-INIT-VAR-02-QUERY*) (EQT OBJ (SHARED-INITIALIZE OBJ T :A 34 :B 49)) (MAP-SLOT-VALUE OBJ (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (FUNCALL *SHARED-INIT-VAR-02-QUERY*)))) (5 10) T (34 49) (T T NIL NIL) (5 10))
;; Loading (DEFTEST SHARED-INITIALIZE.2.6 (PROGN (FUNCALL *SHARED-INIT-VAR-02-INIT* 5 10) (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-02))))) (VALUES (FUNCALL *SHARED-INIT-VAR-02-QUERY*) (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (A B C D)) :A 34 :B 49)) (MAP-SLOT-VALUE OBJ (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (FUNCALL *SHARED-INIT-VAR-02-QUERY*)))) (5 10) T (34 49) (T T NIL NIL) (5 10))
;; Loading (DEFSTRUCT SHARED-INIT-CLASS-03 A B C)
;; Loading (DEFMETHOD SHARED-INITIALIZE ((OBJ SHARED-INIT-CLASS-03) SLOTS-TO-INIT &KEY (A NIL A-P) (B NIL B-P) (C NIL C-P) &ALLOW-OTHER-KEYS) (DECLARE (IGNORE SLOTS-TO-INIT)) (WHEN A-P (SETF (SHARED-INIT-CLASS-03-A OBJ) A)) (WHEN B-P (SETF (SHARED-INIT-CLASS-03-B OBJ) B)) (WHEN C-P (SETF (SHARED-INIT-CLASS-03-C OBJ) C)) OBJ)
;; Loading (DEFTEST SHARED-INITIALIZE.3.1 (LET ((OBJ (MAKE-SHARED-INIT-CLASS-03))) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ NIL :A 1 :B 5 :C 19)) (SHARED-INIT-CLASS-03-A OBJ) (SHARED-INIT-CLASS-03-B OBJ) (SHARED-INIT-CLASS-03-C OBJ))) T 1 5 19)
;; Loading (DEFCLASS SHARED-INIT-CLASS-04A NIL ((A :INITFORM 4 :INITARG :A) (B :INITFORM 8 :INITARG :B)))
;; Loading (DEFCLASS SHARED-INIT-CLASS-04B (SHARED-INIT-CLASS-04A) ((C :INITFORM 17 :INITARG :C) D) (:DEFAULT-INITARGS :A 1))
;; Loading (DEFTEST SHARED-INITIALIZE.4.1 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-04B))))) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ NIL :A (QUOTE X))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE A)))) T (T NIL NIL NIL) X)
;; Loading (DEFTEST SHARED-INITIALIZE.4.2 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-04B))))) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ NIL)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))))) T (NIL NIL NIL NIL))
;; Loading (DEFTEST SHARED-INITIALIZE.4.3 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-04B))))) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (A B C))))) T (T T T NIL) (4 8 17))
;; Loading (DEFTEST SHARED-INITIALIZE.4.4 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-04B))))) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (A C)))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (A C))))) T (T NIL T NIL) (4 17))
;; Loading (DEFTEST SHARED-INITIALIZE.4.5 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-04B))))) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (A C)) :C 81)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (A C))))) T (T NIL T NIL) (4 81))
;; Loading (DEFTEST SHARED-INITIALIZE.4.6 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-04B))))) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (A C)) :A 91)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (A C))))) T (T NIL T NIL) (91 17))
;; Loading (DEFTEST SHARED-INITIALIZE.4.7 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-04B))))) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (C)))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C D))) (SLOT-VALUE OBJ (QUOTE C)))) T (NIL NIL T NIL) 17)
;; Loading (DEFCLASS SHARED-INIT-CLASS-05 NIL ((A :INITARG :A :ALLOCATION :CLASS) (B :INITARG :B :INITFORM (QUOTE FOO) :ALLOCATION :CLASS)))
;; Loading (DEFTEST SHARED-INITIALIZE.5.1 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-05))) (OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND OBJ (QUOTE A)) (SLOT-MAKUNBOUND OBJ (QUOTE B)) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE B)))) T (NIL T) FOO)
;; Loading (DEFTEST SHARED-INITIALIZE.5.2 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-05))) (OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND OBJ (QUOTE A)) (SLOT-MAKUNBOUND OBJ (QUOTE B)) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (B)))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE B)))) T (NIL T) FOO)
;; Loading (DEFTEST SHARED-INITIALIZE.5.3 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-05))) (OBJ (ALLOCATE-INSTANCE CLASS)) (OBJ2 (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND OBJ (QUOTE A)) (SLOT-MAKUNBOUND OBJ (QUOTE B)) (VALUES (EQT OBJ (SHARED-INITIALIZE OBJ T :A 117)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (MAP-SLOT-VALUE OBJ (QUOTE (A B))) (MAP-SLOT-VALUE OBJ2 (QUOTE (A B))))) T (T T) (117 FOO) (117 FOO))
;; Loading (DEFTEST SHARED-INITIALIZE.5.4 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-05))) (OBJ (ALLOCATE-INSTANCE CLASS)) (OBJ2 (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND OBJ (QUOTE A)) (VALUES (SETF (SLOT-VALUE OBJ (QUOTE B)) (QUOTE BAR)) (EQT OBJ (SHARED-INITIALIZE OBJ T :A 117)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (MAP-SLOT-VALUE OBJ (QUOTE (A B))) (MAP-SLOT-VALUE OBJ2 (QUOTE (A B))))) BAR T (T T) (117 BAR) (117 BAR))
;; Loading (DEFCLASS SHARED-INIT-CLASS-06 NIL ((A :INITARG :I1 :INITARG :I2 :INITFORM (QUOTE X)) (B :INITARG :I2 :INITARG :I3 :INITFORM (QUOTE Y))))
;; Loading (DEFTEST SHARED-INITIALIZE.6.1 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))))) (NIL NIL) T (NIL NIL))
;; Loading (DEFTEST SHARED-INITIALIZE.6.2 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) X Y)
;; Loading (DEFTEST SHARED-INITIALIZE.6.3 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :I1 (QUOTE Z))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL) T (T NIL) Z)
;; Loading (DEFTEST SHARED-INITIALIZE.6.4 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :I2 (QUOTE Z))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) Z Z)
;; Loading (DEFTEST SHARED-INITIALIZE.6.5 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :I1 (QUOTE W) :I2 (QUOTE Z))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) W Z)
;; Loading (DEFTEST SHARED-INITIALIZE.6.6 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :I2 (QUOTE Z) :I1 (QUOTE W))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) Z Z)
;; Loading (DEFTEST SHARED-INITIALIZE.6.7 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :I2 (QUOTE Z) :I2 (QUOTE W))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) Z Z)
;; Loading (DEFTEST SHARED-INITIALIZE.6.8 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :I2 (QUOTE Z) :I2 (QUOTE W) :FOO T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) Z Z)
;; Loading (DEFTEST SHARED-INITIALIZE.6.9 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-06))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL :ALLOW-OTHER-KEYS NIL :I2 (QUOTE Z) :I2 (QUOTE W) :FOO T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) Z Z)
;; Loading (DEFCLASS SHARED-INIT-CLASS-07 NIL ((A :INITFORM (QUOTE X)) (B :INITFORM (QUOTE Y))))
;; Loading (DEFMETHOD SHARED-INITIALIZE :BEFORE ((OBJ SHARED-INIT-CLASS-07) SLOT-NAMES &REST ARGS) (DECLARE (IGNORE ARGS SLOT-NAMES)) (SETF (SLOT-VALUE OBJ (QUOTE A)) (QUOTE FOO)) OBJ)
;; Loading (DEFTEST SHARED-INITIALIZE.7.1 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-07))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL) T (T NIL) FOO)
;; Loading (DEFTEST SHARED-INITIALIZE.7.2 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-07))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) FOO Y)
;; Loading (DEFCLASS SHARED-INIT-CLASS-08 NIL ((A :INITFORM (QUOTE X)) (B :INITFORM (QUOTE Y))))
;; Loading (DEFMETHOD SHARED-INITIALIZE :AROUND ((OBJ SHARED-INIT-CLASS-08) SLOT-NAMES &REST ARGS &KEY ONLY &ALLOW-OTHER-KEYS) (DECLARE (IGNORE SLOT-NAMES ARGS)) (SETF (SLOT-VALUE OBJ (QUOTE A)) (QUOTE FOO)) (IF ONLY OBJ (CALL-NEXT-METHOD)))
;; Loading (DEFTEST SHARED-INITIALIZE.8.1 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-08))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ NIL)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL) T (T NIL) FOO)
;; Loading (DEFTEST SHARED-INITIALIZE.8.2 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-08))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) FOO Y)
;; Loading (DEFTEST SHARED-INITIALIZE.8.3 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-08))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ T :ONLY T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL) T (T NIL) FOO)
;; Loading (DEFCLASS SHARED-INIT-CLASS-09 NIL ((A :ALLOCATION :CLASS :INITFORM (QUOTE X)) (B :INITFORM (QUOTE Y))))
;; Loading (DEFTEST SHARED-INITIALIZE.9.1 (LET* ((CLASS (FIND-CLASS (QUOTE SHARED-INIT-CLASS-09))) (OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND OBJ (QUOTE A)) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (SHARED-INITIALIZE OBJ (QUOTE (B)))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (NIL T) Y)
;; Loading (DEFTEST SHARED-INITIALIZE.ORDER.1 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01)))) (I 0) X R Y Z W Q) (VALUES (EQT OBJ (SHARED-INITIALIZE (PROGN (SETF X (INCF I)) OBJ) (PROGN (SETF R (INCF I)) NIL) :B (SETF Y (INCF I)) :A (SETF Z (INCF I)) :B (SETF W (INCF I)) :C (SETF Q (INCF I)))) (MAP-SLOT-VALUE OBJ (QUOTE (A B C))) I X R Y Z W Q)) T (4 3 6) 6 1 2 3 4 5 6)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SHARED-INITIALIZE.ERROR.1 (SIGNALS-ERROR (SHARED-INITIALIZE) PROGRAM-ERROR) T)
;; Loading (DEFTEST SHARED-INITIALIZE.ERROR.2 (SIGNALS-ERROR (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (SHARED-INITIALIZE OBJ)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SHARED-INITIALIZE.ERROR.3 (SIGNALS-ERROR (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (SHARED-INITIALIZE OBJ NIL :A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SHARED-INITIALIZE.ERROR.4 (SIGNALS-ERROR (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SHARED-INIT-CLASS-01))))) (SHARED-INITIALIZE OBJ NIL (QUOTE (A B C)) NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "change-class.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/change-class.lsp 80C301A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-01A NIL ((A :INITARG :A) (B :INITARG :B) (C :INITARG :C)))
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-01B NIL ((C :INITARG :C2) (D :INITARG :D2) (B :INITARG :B2)))
;; Loading (DEFTEST CHANGE-CLASS.1.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-EXISTS-P OBJ (QUOTE D)) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))))) T NIL (NIL NIL NIL) NIL T NIL T NIL (NIL NIL NIL))
;; Loading (DEFTEST CHANGE-CLASS.1.2 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :A 1)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-EXISTS-P OBJ (QUOTE D)) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))))) T NIL (T NIL NIL) NIL T NIL T NIL (NIL NIL NIL))
;; Loading (DEFTEST CHANGE-CLASS.1.3 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :B 2)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-EXISTS-P OBJ (QUOTE D)) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (SLOT-VALUE OBJ (QUOTE B)))) T NIL (NIL T NIL) NIL T NIL T NIL (T NIL NIL) 2)
;; Loading (DEFTEST CHANGE-CLASS.1.4 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :A 1 :B 2 :C 5)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-EXISTS-P OBJ (QUOTE D)) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (B C))))) T NIL (T T T) NIL T NIL T NIL (T T NIL) (2 5))
;; Loading (DEFTEST CHANGE-CLASS.1.5 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :A 1 :B 2 :C 5)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :B2 8 :C2 76)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (B C))))) T NIL T NIL (T T NIL) (8 76))
;; Loading (DEFTEST CHANGE-CLASS.1.6 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :A 1 :B 2 :C 5)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :B2 19 :B2 34)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (B C))))) T NIL T NIL (T T NIL) (19 5))
;; Loading (DEFTEST CHANGE-CLASS.1.7 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :A 1 :B 2 :C 5)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :ALLOW-OTHER-KEYS NIL)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (B C))))) T NIL T NIL (T T NIL) (2 5))
;; Loading (DEFTEST CHANGE-CLASS.1.8 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :A 1 :B 2 :C 5)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :ALLOW-OTHER-KEYS T)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (B C))))) T NIL T NIL (T T NIL) (2 5))
;; Loading (DEFTEST CHANGE-CLASS.1.9 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :A 1 :B 2 :C 5)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :ALLOW-OTHER-KEYS T :NONSENSE T)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (B C))))) T NIL T NIL (T T NIL) (2 5))
;; Loading (DEFTEST CHANGE-CLASS.1.10 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :A 1 :B 2 :C 5)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :BAD 0 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :NONSENSE T)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (B C))))) T NIL T NIL (T T NIL) (2 5))
;; Loading (DEFTEST CHANGE-CLASS.1.11 (HANDLER-CASE (EVAL (QUOTE (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (DECLARE (OPTIMIZE (SAFETY 3))) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :NONSENSE T))))) (ERROR NIL :EXPECTED-ERROR)) :EXPECTED-ERROR)
;; Loading (DEFTEST CHANGE-CLASS.1.12 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A) :B 1))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ (QUOTE CHANGE-CLASS-CLASS-01B) :C2 3)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-01B)) (SLOT-EXISTS-P OBJ (QUOTE A)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (B C D))) (MAP-SLOT-VALUE OBJ (QUOTE (B C))))) T NIL T NIL (T T NIL) (1 3))
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-02A NIL ((A :INITARG :A :ALLOCATION :CLASS) (B :INITARG :B :ALLOCATION :CLASS)))
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-02B NIL ((A :INITARG :A2) (B :INITARG :B2)))
;; Loading (DEFTEST CHANGE-CLASS.2.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-02A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-02B)))) (SLOT-MAKUNBOUND OBJ (QUOTE A)) (SLOT-MAKUNBOUND OBJ (QUOTE B)) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-02A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-02B)) (MAP-SLOT-BOUNDP* (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-02A)) (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))))) (NIL NIL) T NIL T (NIL NIL) (NIL NIL))
;; Loading (DEFTEST CHANGE-CLASS.2.2 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-02A))) (OBJ2 (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-02A))) OBJ3 (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-02B)))) (SETF (SLOT-VALUE OBJ (QUOTE A)) (QUOTE FOO)) (SLOT-MAKUNBOUND OBJ (QUOTE B)) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ2 (QUOTE A)) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-02A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-02B)) (MAP-SLOT-BOUNDP* (SETF OBJ3 (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-02A))) (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ2 (QUOTE A)) (SLOT-VALUE OBJ3 (QUOTE A)) (EQT OBJ OBJ2) (EQT OBJ OBJ3) (EQT OBJ2 OBJ3))) (T NIL) FOO FOO T NIL T (T NIL) (T NIL) FOO FOO FOO NIL NIL NIL)
;; Loading (DEFTEST CHANGE-CLASS.2.3 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-02A))) (OBJ2 (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-02A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-02B)))) (SETF (SLOT-VALUE OBJ (QUOTE A)) 1 (SLOT-VALUE OBJ (QUOTE B)) 16) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-02A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-02B)) (MAP-SLOT-BOUNDP* OBJ2 (QUOTE (A B))) (MAP-SLOT-BOUNDP* (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-02A)) (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (PROGN (SLOT-MAKUNBOUND OBJ2 (QUOTE A)) (SLOT-MAKUNBOUND OBJ2 (QUOTE B)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B)))))) (T T) T NIL T (T T) (T T) (T T) (T T))
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-03A NIL ((A :INITARG :A) (B :INITARG :B)))
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-03B NIL ((A :ALLOCATION :CLASS :INITARG :A2) (B :ALLOCATION :CLASS :INITARG :B2)))
;; Loading (DEFTEST CHANGE-CLASS.3.1 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-03A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-03B))) (OBJ2 (MAKE-INSTANCE NEW-CLASS)) OBJ3) (SLOT-MAKUNBOUND OBJ2 (QUOTE A)) (SLOT-MAKUNBOUND OBJ2 (QUOTE B)) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-03A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-03B)) (TYPEP* OBJ NEW-CLASS) (EQT (SETQ OBJ3 (MAKE-INSTANCE NEW-CLASS)) OBJ) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ2 (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ3 (QUOTE (A B))))) T NIL T T NIL (NIL NIL) (NIL NIL) (NIL NIL))
;; Loading (DEFTEST CHANGE-CLASS.3.2 (LET* ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-03A) :A 1)) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-03B))) (OBJ2 (MAKE-INSTANCE NEW-CLASS)) OBJ3) (SLOT-MAKUNBOUND OBJ2 (QUOTE A)) (SETF (SLOT-VALUE OBJ2 (QUOTE B)) 17) (VALUES (MAP-SLOT-BOUNDP* OBJ2 (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-03A)) (TYPEP* OBJ (QUOTE CHANGE-CLASS-CLASS-03B)) (TYPEP* OBJ NEW-CLASS) (EQT (SETQ OBJ3 (MAKE-INSTANCE NEW-CLASS)) OBJ) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ2 (QUOTE (A B))) (MAP-SLOT-BOUNDP* OBJ3 (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE B)) (SLOT-VALUE OBJ2 (QUOTE B)) (SLOT-VALUE OBJ3 (QUOTE B)))) (NIL T) T NIL T T NIL (NIL T) (NIL T) (NIL T) 17 17 17)
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-04A NIL ((A :INITARG :A) (B :INITARG :B)))
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-04B NIL ((A :INITFORM (QUOTE X) :INITARG :A2) (C :INITFORM (QUOTE Y) :INITARG :C2)))
;; Loading (DEFTEST CHANGE-CLASS.4.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-04A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-04B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A C))) (SLOT-VALUE OBJ (QUOTE C)))) T (NIL T) Y)
;; Loading (DEFTEST CHANGE-CLASS.4.2 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-04A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-04B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :A2 (QUOTE Z))) (MAP-SLOT-VALUE OBJ (QUOTE (A C))))) T (Z Y))
;; Loading (DEFTEST CHANGE-CLASS.4.3 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-04A) :A (QUOTE P) :B (QUOTE Q))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-04B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (MAP-SLOT-VALUE OBJ (QUOTE (A C))))) T (P Y))
;; Loading (DEFTEST CHANGE-CLASS.4.4 (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-04A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-04B)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :C2 (QUOTE K))) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A C))) (SLOT-VALUE OBJ (QUOTE C)))) T (NIL T) K)
;; Loading (DEFTEST CHANGE-CLASS.4.5 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-04B))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A C))) (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A C))))) (NIL NIL) T (NIL NIL))
;; Loading (DECLAIM (SPECIAL *CHANGED-CLASS-ON-CLASS-05*))
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-05 NIL (A B C))
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFMETHOD CHANGE-CLASS ((OBJ CHANGE-CLASS-CLASS-05) (NEW-CLASS (EQL (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-05)))) &REST INITARGS &KEY &ALLOW-OTHER-KEYS) (DECLARE (IGNORE INITARGS NEW-CLASS)) (SETQ *CHANGED-CLASS-ON-CLASS-05* T) OBJ))
;; Loading (DEFTEST CHANGE-CLASS.5 (LET ((*CHANGED-CLASS-ON-CLASS-05* NIL) (OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-05)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-05)))) *CHANGED-CLASS-ON-CLASS-05*)) T T)
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-06 NIL ((A :INITARG :A) (B :INITARG :B) (C :INITARG :C)))
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFMETHOD CHANGE-CLASS ((OBJ CHANGE-CLASS-CLASS-06) (NEW-CLASS STANDARD-CLASS) &REST INITARGS &KEY &ALLOW-OTHER-KEYS) (DECLARE (IGNORE INITARGS)) (SETF (SLOT-VALUE OBJ (QUOTE A)) 123) (CALL-NEXT-METHOD)))
;; Loading (DEFTEST CHANGE-CLASS.6.1 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-06))) (OBJ (MAKE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL NIL) T (T NIL NIL) 123)
;; Loading (DEFTEST CHANGE-CLASS.6.2 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-06))) (OBJ (MAKE-INSTANCE CLASS :A (QUOTE BAD)))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-VALUE OBJ (QUOTE A)))) (T NIL NIL) T (T NIL NIL) 123)
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-07 NIL ((A :INITFORM (QUOTE X) :INITARG :A) (B :INITFORM (QUOTE Y) :INITARG :B) (C :INITARG :C)))
;; Loading (DEFCLASS CHANGE-CLASS-CLASS-07B NIL ((A :INITFORM (QUOTE AA) :INITARG :A) (D :INITFORM (QUOTE DD) :INITARG :D)))
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFMETHOD CHANGE-CLASS :BEFORE ((OBJ CHANGE-CLASS-CLASS-07) (NEW-CLASS STANDARD-CLASS) &REST INITARGS &KEY &ALLOW-OTHER-KEYS) (DECLARE (IGNORE INITARGS)) (SETF (SLOT-VALUE OBJ (QUOTE A)) (QUOTE Z)) OBJ))
;; Loading (DEFTEST CHANGE-CLASS.7.1 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL NIL) T (T NIL NIL) Z)
;; Loading (DEFTEST CHANGE-CLASS.7.2 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (EQT OBJ (CHANGE-CLASS OBJ CLASS :A 10)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL NIL) T (T NIL NIL) 10)
;; Loading (DEFTEST CHANGE-CLASS.7.3 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (EQT OBJ (CHANGE-CLASS OBJ CLASS :B 10)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B C))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL NIL) T (T T NIL) Z 10)
;; Loading (DEFTEST CHANGE-CLASS.7.4 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07B))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A D))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE D)))) T (T T) Z DD)
;; Loading (DEFTEST CHANGE-CLASS.7.5 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07B))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :ALLOW-OTHER-KEYS NIL)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A D))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE D)))) T (T T) Z DD)
;; Loading (DEFTEST CHANGE-CLASS.7.6 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-07B))) (OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS :ALLOW-OTHER-KEYS T)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A D))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE D)))) T (T T) Z DD)
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFCLASS CHANGE-CLASS-CLASS-08 NIL ((A :INITARG :A) (B :INITARG :B))))
;; Loading (REPORT-AND-IGNORE-ERRORS (DEFMETHOD CHANGE-CLASS :AFTER ((OBJ CHANGE-CLASS-CLASS-08) (CLASS (EQL (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-08)))) &REST INITARGS &KEY &ALLOW-OTHER-KEYS) (DECLARE (IGNORE INITARGS)) (SETF (SLOT-VALUE OBJ (QUOTE A)) (QUOTE Z)) OBJ))
;; Loading (DEFTEST CHANGE-CLASS.8.1 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-08))) (OBJ (MAKE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL NIL) T (T NIL) Z)
;; Loading (DEFTEST CHANGE-CLASS.8.2 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-08))) (OBJ (MAKE-INSTANCE CLASS :A 1 :B 2))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (T T) T (T T) Z 2)
;; Loading (DEFTEST CHANGE-CLASS.8.3 (LET* ((CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-08))) (OBJ (MAKE-INSTANCE CLASS))) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ CLASS :A 12 :B 17)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (NIL NIL) T (T T) Z 17)
;; Loading (DEFTEST CHANGE-CLASS.ERROR.1 (SIGNALS-ERROR (CHANGE-CLASS) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHANGE-CLASS.ERROR.2 (SIGNALS-ERROR (CHANGE-CLASS (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A))) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHANGE-CLASS.ERROR.3 (SIGNALS-ERROR (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (CHANGE-CLASS OBJ NEW-CLASS :C2)) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHANGE-CLASS.ERROR.4 (SIGNALS-ERROR (LET ((OBJ (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A))) (NEW-CLASS (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01B)))) (CHANGE-CLASS OBJ NEW-CLASS (QUOTE (NONSENSE)) (QUOTE A))) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHANGE-CLASS.ERROR.5 (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP FOR E IN *MINI-UNIVERSE* FOR CLASS = (CLASS-OF E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (HANDLER-CASE (PROGN (CHANGE-CLASS (MAKE-INSTANCE (QUOTE CHANGE-CLASS-CLASS-01A)) CLASS) T) (ERROR NIL NIL))) COLLECT E)) NIL)
;; Loading (DEFTEST CHANGE-CLASS.ERROR.6 (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP FOR E IN *MINI-UNIVERSE* FOR CLASS = (CLASS-OF E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (HANDLER-CASE (PROGN (CHANGE-CLASS E (FIND-CLASS (QUOTE CHANGE-CLASS-CLASS-01A))) T) (ERROR NIL NIL))) COLLECT E)) NIL)
;; Loading (LOAD "update-instance-for-different-class.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/update-instance-for-different-class.lsp 8108C3D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS UIFDC-CLASS-01A NIL ((A :INITARG :A) (B :INITARG :B)))
;; Loading (DEFCLASS UIFDC-CLASS-01B NIL (A B))
;; Loading (DECLAIM (SPECIAL *UIFDC-01-OBJ*))
;; Loading (DEFMETHOD UPDATE-INSTANCE-FOR-DIFFERENT-CLASS ((FROM-OBJ UIFDC-CLASS-01A) (TO-OBJ UIFDC-CLASS-01B) &REST INITARGS &KEY &ALLOW-OTHER-KEYS) (DECLARE (IGNORE INITARGS)) (ASSERT (NOT (EQ *UIFDC-01-OBJ* FROM-OBJ))) (ASSERT (EQ *UIFDC-01-OBJ* TO-OBJ)) (IF (SLOT-BOUNDP FROM-OBJ (QUOTE A)) (SETF (SLOT-VALUE TO-OBJ (QUOTE B)) (SLOT-VALUE FROM-OBJ (QUOTE A))) (SLOT-MAKUNBOUND TO-OBJ (QUOTE B))) (IF (SLOT-BOUNDP FROM-OBJ (QUOTE B)) (SETF (SLOT-VALUE TO-OBJ (QUOTE A)) (SLOT-VALUE FROM-OBJ (QUOTE B))) (SLOT-MAKUNBOUND TO-OBJ (QUOTE A))) TO-OBJ)
;; Loading (DEFTEST UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.1 (LET* ((OBJ (MAKE-INSTANCE (QUOTE UIFDC-CLASS-01A))) (NEW-CLASS (FIND-CLASS (QUOTE UIFDC-CLASS-01B))) (*UIFDC-01-OBJ* OBJ)) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ NEW-CLASS) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))))) (NIL NIL) T T (NIL NIL))
;; Loading (DEFTEST UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.2 (LET* ((OBJ (MAKE-INSTANCE (QUOTE UIFDC-CLASS-01A) :A 1)) (NEW-CLASS (FIND-CLASS (QUOTE UIFDC-CLASS-01B))) (*UIFDC-01-OBJ* OBJ)) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ NEW-CLASS) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE B)))) (T NIL) T T (NIL T) 1)
;; Loading (DEFTEST UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.3 (LET* ((OBJ (MAKE-INSTANCE (QUOTE UIFDC-CLASS-01A) :B 1)) (NEW-CLASS (FIND-CLASS (QUOTE UIFDC-CLASS-01B))) (*UIFDC-01-OBJ* OBJ)) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ NEW-CLASS) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)))) (NIL T) T T (T NIL) 1)
;; Loading (DEFTEST UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.4 (LET* ((OBJ (MAKE-INSTANCE (QUOTE UIFDC-CLASS-01A) :A 1 :B 2)) (NEW-CLASS (FIND-CLASS (QUOTE UIFDC-CLASS-01B))) (*UIFDC-01-OBJ* OBJ)) (VALUES (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (EQT OBJ (CHANGE-CLASS OBJ NEW-CLASS)) (TYPEP* OBJ NEW-CLASS) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) (T T) T T (T T) 2 1)
;; Loading (DEFCLASS UIFDC-CLASS-02 NIL ((A :INITFORM (QUOTE X) :INITARG :A) (B :INITARG :B)))
;; Loading (DEFMETHOD UPDATE-INSTANCE-FOR-DIFFERENT-CLASS :AFTER ((FROM-OBJ UIFDC-CLASS-01A) (TO-OBJ UIFDC-CLASS-02) &REST INITARGS &KEY &ALLOW-OTHER-KEYS) (DECLARE (IGNORE INITARGS)) (SETF (SLOT-VALUE TO-OBJ (QUOTE A)) 100) TO-OBJ)
;; Loading (DEFTEST UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.5 (LET* ((OBJ (MAKE-INSTANCE (QUOTE UIFDC-CLASS-01A))) (CLASS (FIND-CLASS (QUOTE UIFDC-CLASS-02)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)))) T (T NIL) 100)
;; Loading (DEFTEST UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.6 (LET* ((OBJ (MAKE-INSTANCE (QUOTE UIFDC-CLASS-01A) :A 1)) (CLASS (FIND-CLASS (QUOTE UIFDC-CLASS-02)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)))) T (T NIL) 100)
;; Loading (DEFTEST UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.7 (LET* ((OBJ (MAKE-INSTANCE (QUOTE UIFDC-CLASS-01A) :B 17)) (CLASS (FIND-CLASS (QUOTE UIFDC-CLASS-02)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) T (T T) 100 17)
;; Loading (DEFTEST UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.8 (LET* ((OBJ (MAKE-INSTANCE (QUOTE UIFDC-CLASS-01A) :B 17 :A 4)) (CLASS (FIND-CLASS (QUOTE UIFDC-CLASS-02)))) (VALUES (EQT OBJ (CHANGE-CLASS OBJ CLASS)) (MAP-SLOT-BOUNDP* OBJ (QUOTE (A B))) (SLOT-VALUE OBJ (QUOTE A)) (SLOT-VALUE OBJ (QUOTE B)))) T (T T) 100 17)
;; Loading (LOAD "slot-boundp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/slot-boundp.lsp 811854C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS SLOT-BOUNDP-CLASS-01 NIL (A (B :INITARG :B) (C :INITFORM (QUOTE X))))
;; Loading (DEFTEST SLOT-BOUNDP.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01)))) (SLOT-BOUNDP OBJ (QUOTE A))) NIL)
;; Loading (DEFTEST SLOT-BOUNDP.2 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01)))) (SETF (SLOT-VALUE OBJ (QUOTE A)) NIL) (NOTNOT-MV (SLOT-BOUNDP OBJ (QUOTE A)))) T)
;; Loading (DEFTEST SLOT-BOUNDP.3 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01) :B NIL))) (NOTNOT-MV (SLOT-BOUNDP OBJ (QUOTE B)))) T)
;; Loading (DEFTEST SLOT-BOUNDP.4 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01)))) (NOTNOT-MV (SLOT-BOUNDP OBJ (QUOTE C)))) T)
;; Loading (DEFTEST SLOT-BOUNDP.5 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01)))) (SLOT-MAKUNBOUND OBJ (QUOTE C)) (SLOT-BOUNDP OBJ (QUOTE C))) NIL)
;; Loading (DEFTEST SLOT-BOUNDP.ORDER.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01))) (I 0) X Y) (VALUES (SLOT-BOUNDP (PROGN (SETF X (INCF I)) OBJ) (PROGN (SETF Y (INCF I)) (QUOTE A))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST SLOT-BOUNDP.ERROR.1 (SIGNALS-ERROR (SLOT-BOUNDP) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-BOUNDP.ERROR.2 (SIGNALS-ERROR (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01)))) (SLOT-BOUNDP OBJ)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-BOUNDP.ERROR.3 (SIGNALS-ERROR (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01)))) (SLOT-BOUNDP OBJ (QUOTE A) NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-BOUNDP.ERROR.4 (SIGNALS-ERROR (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-BOUNDP-CLASS-01)))) (SLOT-BOUNDP OBJ (QUOTE NONEXISTENT-SLOT))) ERROR) T)
;; Loading (DEFTEST SLOT-BOUNDP.ERROR.5 (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP FOR E IN *MINI-UNIVERSE* FOR CLASS = (CLASS-OF E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (HANDLER-CASE (PROGN (SLOT-BOUNDP E (QUOTE FOO)) T) (ERROR NIL NIL))) COLLECT E)) NIL)
;; Loading (LOAD "slot-exists-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/slot-exists-p.lsp 81213897>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS SLOT-EXISTS-P-CLASS-01 NIL (A (B :ALLOCATION :CLASS) (C :ALLOCATION :INSTANCE)))
;; Loading (DEFTEST SLOT-EXISTS-P.1 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01))))) (NOTNOT-MV (SLOT-EXISTS-P OBJ (QUOTE A)))) T)
;; Loading (DEFTEST SLOT-EXISTS-P.2 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01))))) (NOTNOT-MV (SLOT-EXISTS-P OBJ (QUOTE B)))) T)
;; Loading (DEFTEST SLOT-EXISTS-P.3 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01))))) (NOTNOT-MV (SLOT-EXISTS-P OBJ (QUOTE C)))) T)
;; Loading (DEFTEST SLOT-EXISTS-P.4 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01))))) (SLOT-EXISTS-P OBJ (QUOTE D))) NIL)
;; Loading (DEFTEST SLOT-EXISTS-P.5 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01))))) (SLOT-EXISTS-P OBJ (GENSYM))) NIL)
;; Loading (DEFTEST SLOT-EXISTS-P.6 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01))))) (SLOT-EXISTS-P OBJ NIL)) NIL)
;; Loading (DEFTEST SLOT-EXISTS-P.7 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01))))) (SLOT-EXISTS-P OBJ T)) NIL)
;; Loading (DEFTEST SLOT-EXISTS-P.8 (LET ((SLOT-NAME (GENSYM))) (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (NOT (SLOT-EXISTS-P X SLOT-NAME)))))) NIL)
;; Loading (DEFCLASS SLOT-EXISTS-P-CLASS-02 NIL ((A :TYPE T) (B :TYPE NIL) (C :TYPE SYMBOL) (D :TYPE CONS) (E :TYPE FLOAT) (F :TYPE SINGLE-FLOAT) (G :TYPE SHORT-FLOAT) (H :TYPE DOUBLE-FLOAT) (I :TYPE LONG-FLOAT) (J :TYPE CHARACTER) (K :TYPE BASE-CHAR) (L :TYPE RATIONAL) (M :TYPE RATIO) (N :TYPE INTEGER) (O :TYPE FIXNUM) (P :TYPE COMPLEX) (Q :TYPE CONDITION)))
;; Loading (DEFTEST SLOT-EXISTS-P.9 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-02))))) (MAP-SLOT-EXISTS-P* OBJ (QUOTE (A B C D E F G H I J K L M N O P Q)))) (T T T T T T T T T T T T T T T T T))
;; Loading (DEFCLASS SLOT-EXISTS-P-CLASS-03A NIL (A B))
;; Loading (DEFCLASS SLOT-EXISTS-P-CLASS-03B NIL (A C))
;; Loading (DEFCLASS SLOT-EXISTS-P-CLASS-03C (SLOT-EXISTS-P-CLASS-03A SLOT-EXISTS-P-CLASS-03B) (D E))
;; Loading (DEFTEST SLOT-EXISTS-P.10 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-03C))))) (MAP-SLOT-EXISTS-P* OBJ (QUOTE (A B C D E F G)))) (T T T T T NIL NIL))
;; Loading (DEFSTRUCT SLOT-EXISTS-P-STRUCT-01 A B C)
;; Loading (DEFTEST SLOT-EXISTS-P.11 (LET ((OBJ (MAKE-SLOT-EXISTS-P-STRUCT-01))) (MAP-SLOT-EXISTS-P* OBJ (QUOTE (A B C Z NIL)))) (T T T NIL NIL))
;; Loading (DEFTEST SLOT-EXISTS-P.12 (LET ((OBJ (MAKE-SLOT-EXISTS-P-STRUCT-01 :A 1 :B 2 :C 3))) (MAP-SLOT-EXISTS-P* OBJ (QUOTE (A B C Z NIL)))) (T T T NIL NIL))
;; Loading (DEFSTRUCT (SLOT-EXISTS-P-STRUCT-02 (:INCLUDE SLOT-EXISTS-P-STRUCT-01)) D E)
;; Loading (DEFTEST SLOT-EXISTS-P.13 (LET ((OBJ (MAKE-SLOT-EXISTS-P-STRUCT-02))) (MAP-SLOT-EXISTS-P* OBJ (QUOTE (A B C D E F Z NIL)))) (T T T T T NIL NIL NIL))
;; Loading (DEFTEST SLOT-EXISTS-P.14 (LET ((OBJ (MAKE-SLOT-EXISTS-P-STRUCT-02 :A 1 :B 3 :E 5))) (MAP-SLOT-EXISTS-P* OBJ (QUOTE (A B C D E F Z NIL)))) (T T T T T NIL NIL NIL))
;; Loading (DEFINE-CONDITION SLOT-EXISTS-P-CONDITION-01 NIL ((A) (B) (C)))
;; Loading (DEFTEST SLOT-EXISTS-P.15 (LET ((OBJ (MAKE-CONDITION (QUOTE SLOT-EXISTS-P-CONDITION-01)))) (MAP-SLOT-EXISTS-P* OBJ (LIST (QUOTE A) (QUOTE B) (QUOTE C) (GENSYM)))) (T T T NIL))
;; Loading (DEFINE-CONDITION SLOT-EXISTS-P-CONDITION-02 (SLOT-EXISTS-P-CONDITION-01) ((A) (D) (E)))
;; Loading (DEFTEST SLOT-EXISTS-P.16 (LET ((OBJ (MAKE-CONDITION (QUOTE SLOT-EXISTS-P-CONDITION-02)))) (MAP-SLOT-EXISTS-P* OBJ (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (GENSYM)))) (T T T T T NIL))
;; Loading (DEFTEST SLOT-EXISTS-P.ORDER.1 (LET ((I 0) X Y) (VALUES (SLOT-EXISTS-P (PROGN (SETF X (INCF I)) (QUOTE A)) (PROGN (SETF Y (INCF I)) (GENSYM))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST SLOT-EXISTS-P.ORDER.2 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01)))) (I 0) X Y) (VALUES (NOTNOT (SLOT-EXISTS-P (PROGN (SETF X (INCF I)) OBJ) (PROGN (SETF Y (INCF I)) (QUOTE A)))) I X Y)) T 2 1 2)
;; Loading (DEFTEST SLOT-EXISTS-P.ORDER.3 (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-EXISTS-P-CLASS-01)))) (I 0) X Y) (VALUES (NOTNOT (SLOT-EXISTS-P (PROGN (SETF X (INCF I)) OBJ) (PROGN (SETF Y (INCF I)) (QUOTE B)))) I X Y)) T 2 1 2)
;; Loading (DEFTEST SLOT-EXISTS-P.ERROR.1 (SIGNALS-ERROR (SLOT-EXISTS-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-EXISTS-P.ERROR.2 (SIGNALS-ERROR (SLOT-EXISTS-P (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-EXISTS-P.ERROR.3 (SIGNALS-ERROR (SLOT-EXISTS-P (MAKE-INSTANCE (QUOTE SLOT-EXISTS-P-CLASS-01))) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-EXISTS-P.ERROR.4 (SIGNALS-ERROR (SLOT-EXISTS-P (MAKE-INSTANCE (QUOTE SLOT-EXISTS-P-CLASS-01)) (QUOTE A) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "slot-makunbound.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/slot-makunbound.lsp 8138C867>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS SLOT-MAKUNBOUND-CLASS-01 NIL (A (B :ALLOCATION :INSTANCE) (C :ALLOCATION :CLASS) (D :TYPE FIXNUM) (E :TYPE T) (F :TYPE CONS)))
;; Loading (DEFTEST SLOT-MAKUNBOUND.1 (LOOP FOR SLOT-NAME IN (QUOTE (A B C D E)) UNLESS (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-MAKUNBOUND-CLASS-01))))) (AND (EQUALT (MULTIPLE-VALUE-LIST (SLOT-MAKUNBOUND OBJ SLOT-NAME)) (LIST OBJ)) (NOT (SLOT-BOUNDP OBJ SLOT-NAME)))) COLLECT SLOT-NAME) NIL)
;; Loading (DEFTEST SLOT-MAKUNBOUND.2 (LOOP FOR SLOT-NAME IN (QUOTE (A B C D E)) FOR SLOT-VALUE IN (QUOTE (T T T 10 T (QUOTE (A)))) UNLESS (LET ((OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE SLOT-MAKUNBOUND-CLASS-01))))) (SETF (SLOT-VALUE OBJ SLOT-NAME) SLOT-VALUE) (AND (EQUALT (MULTIPLE-VALUE-LIST (SLOT-MAKUNBOUND OBJ SLOT-NAME)) (LIST OBJ)) (NOT (SLOT-BOUNDP OBJ SLOT-NAME)))) COLLECT SLOT-NAME) NIL)
;; Loading (DEFTEST SLOT-MAKUNBOUND.ORDER.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-MAKUNBOUND-CLASS-01))) (I 0) X Y) (VALUES (EQT (SLOT-MAKUNBOUND (PROGN (SETF X (INCF I)) OBJ) (PROGN (SETF Y (INCF I)) (QUOTE A))) OBJ) I X Y)) T 2 1 2)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SLOT-MAKUNBOUND.ORDER.2 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-MAKUNBOUND-CLASS-01))) (I 0) X Y) (SETF (SLOT-VALUE OBJ (QUOTE A)) T) (VALUES (EQT (SLOT-MAKUNBOUND (PROGN (SETF X (INCF I)) OBJ) (PROGN (SETF Y (INCF I)) (QUOTE A))) OBJ) I X Y)) T 2 1 2)
;; Loading (DEFTEST SLOT-MAKUNBOUND.ERROR.1 (SIGNALS-ERROR (SLOT-MAKUNBOUND) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-MAKUNBOUND.ERROR.2 (SIGNALS-ERROR (SLOT-MAKUNBOUND (MAKE-INSTANCE (QUOTE SLOT-MAKUNBOUND-CLASS-01))) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-MAKUNBOUND.ERROR.3 (SIGNALS-ERROR (SLOT-MAKUNBOUND (MAKE-INSTANCE (QUOTE SLOT-MAKUNBOUND-CLASS-01)) (QUOTE A) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-MAKUNBOUND.ERROR.4 (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP FOR E IN *MINI-UNIVERSE* FOR CLASS = (CLASS-OF E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (HANDLER-CASE (PROGN (SLOT-MAKUNBOUND E (QUOTE FOO)) T) (ERROR NIL NIL))) COLLECT E)) NIL)
;; Loading (LOAD "slot-value.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/slot-value.lsp C0C626D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS SLOT-VALUE-CLASS-01 NIL (A (B :TYPE T) (C :TYPE FIXNUM) (D :TYPE FLOAT) (E :TYPE SYMBOL) (F :TYPE SHORT-FLOAT) (G :TYPE SINGLE-FLOAT) (H :TYPE DOUBLE-FLOAT) (I :TYPE LONG-FLOAT) (J :TYPE RATIONAL) (K :TYPE RATIO) (L :TYPE CONS) (M :TYPE STRING) (N :TYPE VECTOR) (O :TYPE BIT)))
;; Loading (DEFPARAMETER *SLOT-VALUE-TEST-SLOT-NAMES* (QUOTE (A B C D E F G H I J K L M N O)))
;; Loading (DEFPARAMETER *SLOT-VALUE-TEST-SLOT-VALUES* (QUOTE (T NIL 10 4.0 A 1.0 2.0 3.0 4.0 5/4 2/3 (A . B) "abcd" #(1 2 3 4) 1)))
;; Loading (DEFTEST SLOT-VALUE.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-VALUE-CLASS-01))) (SLOT-NAMES *SLOT-VALUE-TEST-SLOT-NAMES*) (SLOT-VALUES *SLOT-VALUE-TEST-SLOT-VALUES*)) (LOOP FOR NAME IN SLOT-NAMES FOR VAL IN SLOT-VALUES UNLESS (AND (EQUAL (MULTIPLE-VALUE-LIST (SETF (SLOT-VALUE OBJ NAME) VAL)) (LIST VAL)) (EQUAL (MULTIPLE-VALUE-LIST (SLOT-VALUE OBJ NAME)) (LIST VAL))) COLLECT NAME)) NIL)
;; Loading (DEFCLASS SLOT-VALUE-CLASS-02 (SLOT-VALUE-CLASS-01) ((A :ALLOCATION :CLASS) (B :ALLOCATION :CLASS) (C :ALLOCATION :CLASS) (D :ALLOCATION :CLASS) (E :ALLOCATION :CLASS) (F :ALLOCATION :CLASS) (G :ALLOCATION :CLASS) (H :ALLOCATION :CLASS) (I :ALLOCATION :CLASS) (J :ALLOCATION :CLASS) (K :ALLOCATION :CLASS) (L :ALLOCATION :CLASS) (M :ALLOCATION :CLASS) (N :ALLOCATION :CLASS) (O :ALLOCATION :CLASS)))
;; Loading (DEFTEST SLOT-VALUE.2 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-VALUE-CLASS-02))) (SLOT-NAMES *SLOT-VALUE-TEST-SLOT-NAMES*) (SLOT-VALUES *SLOT-VALUE-TEST-SLOT-VALUES*)) (LOOP FOR NAME IN SLOT-NAMES FOR VAL IN SLOT-VALUES UNLESS (AND (EQUAL (MULTIPLE-VALUE-LIST (SETF (SLOT-VALUE OBJ NAME) VAL)) (LIST VAL)) (EQUAL (MULTIPLE-VALUE-LIST (SLOT-VALUE OBJ NAME)) (LIST VAL))) COLLECT NAME)) NIL)
;; Loading (DEFTEST SLOT-VALUE.ORDER.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-VALUE-CLASS-01))) (I 0) X Y) (VALUES (SETF (SLOT-VALUE OBJ (QUOTE A)) T) (SLOT-VALUE (PROGN (SETF X (INCF I)) OBJ) (PROGN (SETF Y (INCF I)) (QUOTE A))) I X Y)) T T 2 1 2)
;; Loading (DEFTEST SLOT-VALUE.ORDER.2 (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-VALUE-CLASS-01))) (I 0) X Y) (VALUES (SETF (SLOT-VALUE (PROGN (SETF X (INCF I)) OBJ) (PROGN (SETF Y (INCF I)) (QUOTE B))) T) (SLOT-VALUE OBJ (QUOTE B)) I X Y)) T T 2 1 2)
;; Loading (DEFTEST SLOT-VALUE.ERROR.1 (SIGNALS-ERROR (SLOT-VALUE) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-VALUE.ERROR.2 (SIGNALS-ERROR (SLOT-VALUE (MAKE-INSTANCE (QUOTE SLOT-VALUE-CLASS-01))) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-VALUE.ERROR.3 (SIGNALS-ERROR (LET ((OBJ (MAKE-INSTANCE (QUOTE SLOT-VALUE-CLASS-01)))) (SETF (SLOT-VALUE OBJ (QUOTE A)) T) (SLOT-VALUE OBJ (QUOTE A) NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLOT-VALUE.ERROR.4 (HANDLER-CASE (PROGN (SLOT-VALUE (MAKE-INSTANCE (QUOTE SLOT-VALUE-CLASS-01)) (GENSYM)) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST SLOT-VALUE.ERROR.5 (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS))) (SLOT-NAME (GENSYM))) (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (LET ((CLASS (CLASS-OF E))) (OR (NOT (EQ (CLASS-OF CLASS) BUILT-IN-CLASS)) (HANDLER-CASE (PROGN (SLOT-VALUE E SLOT-NAME) NIL) (ERROR NIL T)))))))) NIL)
;; Loading (DEFTEST SLOT-VALUE.ERROR.6 (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS))) (SLOT-NAME (GENSYM))) (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (LET ((CLASS (CLASS-OF E))) (OR (NOT (EQ (CLASS-OF CLASS) BUILT-IN-CLASS)) (HANDLER-CASE (SETF (SLOT-VALUE E SLOT-NAME) NIL) (ERROR NIL T)))))))) NIL)
;; Loading (LOAD "method-qualifiers.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/method-qualifiers.lsp C0D6C887>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFGENERIC MQ-GENERIC-FUNCTION (X))
;; Loading (DEFPARAMETER *MQ-METHOD-1* (DEFMETHOD MQ-GENERIC-FUNCTION ((X INTEGER)) (1+ X)))
;; Loading (DEFTEST METHOD-QUALIFIERS.1 (METHOD-QUALIFIERS *MQ-METHOD-1*) NIL)
;; Loading (DEFCLASS MQ-CLASS-01 NIL (A B C))
;; Loading (DEFPARAMETER *MQ-METHOD-2* (DEFMETHOD MQ-GENERIC-FUNCTION :BEFORE ((X MQ-CLASS-01)) (QUOTE FOO)))
;; Loading (DEFTEST METHOD-QUALIFIERS.2 (METHOD-QUALIFIERS *MQ-METHOD-2*) (:BEFORE))
;; Loading (DEFCLASS MQ-CLASS-02 NIL (E F G))
;; Loading (DEFPARAMETER *MQ-METHOD-3* (DEFMETHOD MQ-GENERIC-FUNCTION :AFTER ((X MQ-CLASS-02)) (QUOTE FOO)))
;; Loading (DEFTEST METHOD-QUALIFIERS.3 (METHOD-QUALIFIERS *MQ-METHOD-3*) (:AFTER))
;; Loading (DEFCLASS MQ-CLASS-03 NIL (H I J))
;; Loading (DEFPARAMETER *MQ-METHOD-4* (DEFMETHOD MQ-GENERIC-FUNCTION :AROUND ((X MQ-CLASS-03)) (QUOTE FOO)))
;; Loading (DEFTEST METHOD-QUALIFIERS.4 (METHOD-QUALIFIERS *MQ-METHOD-4*) (:AROUND))
;; Loading (DEFTEST METHOD-QUALIFIERS.ERROR.1 (SIGNALS-ERROR (METHOD-QUALIFIERS) PROGRAM-ERROR) T)
;; Loading (DEFTEST METHOD-QUALIFIERS.ERROR.2 (SIGNALS-ERROR (METHOD-QUALIFIERS *MQ-METHOD-4* NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "no-applicable-method.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/no-applicable-method.lsp C0DE3557>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFGENERIC NO-APP-METH-GF-01 (X))
;; Loading (DEFTEST NO-APPLICABLE-METHOD.1 (HANDLER-CASE (PROGN (NO-APP-METH-GF-01 (QUOTE X)) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (LOAD "no-next-method.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/no-next-method.lsp C0E12B07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFGENERIC NO-NEXT-METH-GF-01 (X))
;; Loading (DEFMETHOD NO-NEXT-METH-GF-01 ((X INTEGER)) (CALL-NEXT-METHOD))
;; Loading (DEFMETHOD NO-NEXT-METH-GF-01 :AROUND ((X CHARACTER)) (CALL-NEXT-METHOD))
;; Loading (DEFTEST NO-NEXT-METHOD.1 (HANDLER-CASE (PROGN (NO-NEXT-METH-GF-01 10) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST NO-NEXT-METHOD.2 (HANDLER-CASE (PROGN (NO-NEXT-METH-GF-01) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (LOAD "remove-method.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/remove-method.lsp C0E57B67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFPARAMETER *REMOVE-METH-GF-01* (DEFGENERIC REMOVE-METH-GF-01 (X)))
;; Loading (DEFPARAMETER *REMOVE-METH-GF-01-METHOD-T* (DEFMETHOD REMOVE-METH-GF-01 ((X T)) X))
;; Loading (DEFPARAMETER *REMOVE-METH-GF-02* (DEFGENERIC REMOVE-METH-GF-02 (X)))
;; Loading (DEFPARAMETER *REMOVE-METH-GF-02-METHOD-T* (DEFMETHOD REMOVE-METH-GF-02 ((X T)) X))
;; Loading (DEFTEST REMOVE-METHOD.1 (AND (EQT (REMOVE-METHOD *REMOVE-METH-GF-01* *REMOVE-METH-GF-02-METHOD-T*) *REMOVE-METH-GF-01*) (REMOVE-METH-GF-01 :GOOD)) :GOOD)
;; Loading (DEFTEST REMOVE-METHOD.2 (LET (METH) (VALUES (REMOVE-METH-GF-01 10) (PROGN (SETF METH (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X INTEGER)) (1+ X))))) NIL) (REMOVE-METH-GF-01 10) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH)) (REMOVE-METH-GF-01 10))) 10 NIL 11 T 10)
;; Loading (DEFTEST REMOVE-METHOD.3 (LET (METH1 METH2) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A))) (PROGN (SETF METH1 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X SYMBOL)) (LIST X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A)))) (PROGN (SETF METH2 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X NUMBER)) (1+ X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A)))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH1)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH2)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A))))) (19 A) (19 (A)) (20 (A)) T (20 A) T (19 A))
;; Loading (DEFTEST REMOVE-METHOD.4 (LET (METH1 METH2) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A))) (PROGN (SETF METH1 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X SYMBOL)) (LIST X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A)))) (PROGN (SETF METH2 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X NUMBER)) (1+ X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A)))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH2)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH1)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (19 A))))) (19 A) (19 (A)) (20 (A)) T (19 (A)) T (19 A))
;; Loading (DEFTEST REMOVE-METHOD.5 (LET (METH1 METH2) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF METH1 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X INTEGER)) (1- X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF METH2 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X NUMBER)) (1+ X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH1)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH2)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))))) (10 20.0) (9 20.0) (9 21.0) T (11 21.0) T (10 20.0))
;; Loading (DEFTEST REMOVE-METHOD.6 (LET (METH1 METH2) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF METH1 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X INTEGER)) (1- X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF METH2 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X NUMBER)) (1+ X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH2)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH1)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))))) (10 20.0) (9 20.0) (9 21.0) T (9 20.0) T (10 20.0))
;; Loading (DEFTEST REMOVE-METHOD.7 (LET (METH1 METH2) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF METH1 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X NUMBER)) (1+ X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF METH2 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X INTEGER)) (1- X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH1)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH2)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))))) (10 20.0) (11 21.0) (9 21.0) T (9 20.0) T (10 20.0))
;; Loading (DEFTEST REMOVE-METHOD.8 (LET (METH1 METH2) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF METH1 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X NUMBER)) (1+ X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF METH2 (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-01 ((X INTEGER)) (1- X))))) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH2)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))) (EQT *REMOVE-METH-GF-01* (REMOVE-METHOD *REMOVE-METH-GF-01* METH1)) (MAPCAR (FUNCTION REMOVE-METH-GF-01) (QUOTE (10 20.0))))) (10 20.0) (11 21.0) (9 21.0) T (11 21.0) T (10 20.0))
;; Loading (DECLAIM (SPECIAL *RMGF-03-VAR*))
;; Loading (DEFPARAMETER *REMOVE-METH-GF-03* (DEFGENERIC REMOVE-METH-GF-03 (X)))
;; Loading (DEFPARAMETER *REMOVE-METH-GF-03-METHOD-T* (DEFMETHOD REMOVE-METH-GF-03 ((X T)) (LIST *RMGF-03-VAR* X)))
;; Loading (DEFTEST REMOVE-METHOD.9 (LET (METH (*RMGF-03-VAR* 0)) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A))) (PROGN (SETF METH (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-03 :BEFORE ((X NUMBER)) (INCF *RMGF-03-VAR*))))) (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A)))) (EQT *REMOVE-METH-GF-03* (REMOVE-METHOD *REMOVE-METH-GF-03* METH)) (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A))))) ((0 5) (0 A)) ((1 5) (1 A)) T ((1 5) (1 A)))
;; Loading (DEFTEST REMOVE-METHOD.10 (LET (METH (*RMGF-03-VAR* 0)) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A))) (PROGN (SETF METH (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-03 :AFTER ((X NUMBER)) (INCF *RMGF-03-VAR*))))) (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A)))) (EQT *REMOVE-METH-GF-03* (REMOVE-METHOD *REMOVE-METH-GF-03* METH)) (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A))))) ((0 5) (0 A)) ((0 5) (1 A)) T ((1 5) (1 A)))
;; Loading (DEFTEST REMOVE-METHOD.11 (LET (METH (*RMGF-03-VAR* 0)) (VALUES (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A))) (PROGN (SETF METH (EVAL (QUOTE (DEFMETHOD REMOVE-METH-GF-03 :AROUND ((X NUMBER)) (INCF *RMGF-03-VAR*) (PROG1 (CALL-NEXT-METHOD) (DECF *RMGF-03-VAR*)))))) (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A)))) (EQT *REMOVE-METH-GF-03* (REMOVE-METHOD *REMOVE-METH-GF-03* METH)) (MAPCAR (FUNCTION REMOVE-METH-GF-03) (QUOTE (5 A))))) ((0 5) (0 A)) ((1 5) (0 A)) T ((0 5) (0 A)))
;; Loading (LOAD "make-instance.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-instance.lsp C0FE3837>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-INSTANCE.ERROR.1 (SIGNALS-ERROR (MAKE-INSTANCE) PROGRAM-ERROR) T)
;; Loading (DEFCLASS MAKE-INSTANCE-CLASS-01 NIL ((A :INITARG :A) (B :INITARG :B)))
;; Loading (DEFTEST MAKE-INSTANCE.ERROR.2 (SIGNALS-ERROR (MAKE-INSTANCE (QUOTE MAKE-INSTANCE-CLASS-01) :A) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-INSTANCE.ERROR.3 (HANDLER-CASE (PROGN (EVAL (QUOTE (MAKE-INSTANCE (QUOTE MAKE-INSTANCE-CLASS-01) :Z 1))) T) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST MAKE-INSTANCE.ERROR.4 (HANDLER-CASE (PROGN (EVAL (QUOTE (MAKE-INSTANCE (FIND-CLASS (QUOTE MAKE-INSTANCE-CLASS-01)) :Z 1))) T) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST MAKE-INSTANCE.ERROR.5 (SIGNALS-ERROR (LET NIL (MAKE-INSTANCE) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-INSTANCE.ERROR.6 (LOOP FOR CL IN *BUILT-IN-CLASSES* UNLESS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (MAKE-INSTANCE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL))) ERROR))) COLLECT CL) NIL)
;; Loading (DEFMETHOD MAKE-INSTANCE ((X MAKE-INSTANCE-CLASS-01) &REST INITARGS &KEY &ALLOW-OTHER-KEYS) INITARGS)
;; Loading (DEFTEST MAKE-INSTANCE.1 (MAKE-INSTANCE (MAKE-INSTANCE (QUOTE MAKE-INSTANCE-CLASS-01))) NIL)
;; Loading (DEFTEST MAKE-INSTANCE.2 (MAKE-INSTANCE (MAKE-INSTANCE (QUOTE MAKE-INSTANCE-CLASS-01)) :A 1 :B 2) (:A 1 :B 2))
;; Loading (DEFTEST MAKE-INSTANCE.ORDER.1 (LET* ((I 0) X Y (OBJ (MAKE-INSTANCE (QUOTE MAKE-INSTANCE-CLASS-01) :A (SETF X (INCF I)) :B (SETF Y (INCF I))))) (VALUES (MAP-SLOT-VALUE OBJ (QUOTE (A B))) I X Y)) (1 2) 2 1 2)
;; Loading (DEFTEST MAKE-INSTANCE.ORDER.2 (LET* ((I 0) X Y Z W (OBJ (MAKE-INSTANCE (QUOTE MAKE-INSTANCE-CLASS-01) :A (SETF X (INCF I)) :B (SETF Y (INCF I)) :B (SETF Z (INCF I)) :A (SETF W (INCF I))))) (VALUES (MAP-SLOT-VALUE OBJ (QUOTE (A B))) I X Y Z W)) (1 2) 4 1 2 3 4)
;; Loading (DEFTEST MAKE-INSTANCE.ORDER.3 (LET* ((I 0) U X Y Z W (OBJ (MAKE-INSTANCE (PROG1 (QUOTE MAKE-INSTANCE-CLASS-01) (SETF U (INCF I))) :A (SETF X (INCF I)) :B (SETF Y (INCF I)) :B (SETF Z (INCF I)) :A (SETF W (INCF I))))) (VALUES (MAP-SLOT-VALUE OBJ (QUOTE (A B))) I U X Y Z W)) (2 3) 5 1 2 3 4 5)
;; Loading (LOAD "make-instances-obsolete.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-instances-obsolete.lsp C1112747>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS MAKE-INSTANCES-OBSOLETE-CLASS-01 NIL ((A :INITARG :A) (B :INITARG :B :ALLOCATION :CLASS) (C :INITARG :C :INITFORM (QUOTE ABC)) (D :INITARG :D :TYPE FIXNUM :INITFORM 0)))
;; Loading (DEFTEST MAKE-INSTANCES-OBSOLETE.1 (LET* ((CLASS-DESIGNATOR (QUOTE MAKE-INSTANCES-OBSOLETE-CLASS-01)) (CLASS (FIND-CLASS CLASS-DESIGNATOR)) (OBJ (MAKE-INSTANCE CLASS :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z) :D 17))) (VALUES (EQT (CLASS-OF OBJ) CLASS) (MAP-SLOT-VALUE OBJ (QUOTE (A B C D))) (LET ((VAL (MAKE-INSTANCES-OBSOLETE CLASS))) (OR (EQT VAL CLASS-DESIGNATOR) (EQT VAL CLASS))) (MAP-SLOT-VALUE OBJ (QUOTE (A B C D))))) T (X Y Z 17) T (X Y Z 17))
;; Loading (DEFTEST MAKE-INSTANCES-OBSOLETE.2 (LET* ((CLASS-DESIGNATOR (QUOTE MAKE-INSTANCES-OBSOLETE-CLASS-01)) (CLASS (FIND-CLASS CLASS-DESIGNATOR)) (OBJ (MAKE-INSTANCE CLASS :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z) :D 17))) (VALUES (EQT (CLASS-OF OBJ) CLASS) (MAP-SLOT-VALUE OBJ (QUOTE (A B C D))) (LET ((VAL (MAKE-INSTANCES-OBSOLETE CLASS-DESIGNATOR))) (OR (EQT VAL CLASS-DESIGNATOR) (EQT VAL CLASS))) (MAP-SLOT-VALUE OBJ (QUOTE (A B C D))))) T (X Y Z 17) T (X Y Z 17))
;; Loading (DEFTEST MAKE-INSTANCES-OBSOLETE.ERROR.1 (SIGNALS-ERROR (MAKE-INSTANCES-OBSOLETE) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-INSTANCES-OBSOLETE.ERROR.2 (SIGNALS-ERROR (MAKE-INSTANCES-OBSOLETE (FIND-CLASS (QUOTE MAKE-INSTANCES-OBSOLETE-CLASS-01)) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "with-slots.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-slots.lsp C11879B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-SLOTS.1 (WITH-SLOTS NIL NIL) NIL)
;; Loading (DEFTEST WITH-SLOTS.2 (WITH-SLOTS NIL NIL (VALUES)))
;; Loading (DEFTEST WITH-SLOTS.3 (WITH-SLOTS NIL NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F))) A B C D E F)
;; Loading (DEFTEST WITH-SLOTS.4 (LET ((X 0) (Y 10) (Z 20)) (VALUES X Y Z (WITH-SLOTS NIL (INCF X) (INCF Y 3) (INCF Z 100)) X Y Z)) 0 10 20 120 1 13 120)
;; Loading (DEFTEST WITH-SLOTS.5 (BLOCK DONE (TAGBODY (WITH-SLOTS NIL NIL (GO 10) 10 (RETURN-FROM DONE :BAD)) 10 (RETURN-FROM DONE :GOOD))) :GOOD)
;; Loading (DEFTEST WITH-SLOTS.6 (BLOCK NIL (WITH-SLOTS NIL NIL (RETURN :GOOD)) (RETURN :BAD)) :GOOD)
;; Loading (DEFCLASS WITH-SLOTS-CLASS-01 NIL ((A :INITARG :A) (B :INITARG :B) (C :INITARG :C)))
;; Loading (DEFTEST WITH-SLOTS.7 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z)))) (WITH-SLOTS (A B C) OBJ (VALUES A B C))) X Y Z)
;; Loading (DEFTEST WITH-SLOTS.8 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z)))) (WITH-SLOTS (A B C) OBJ (VALUES (SETF A (QUOTE P)) (SETF B (QUOTE Q)) (SETF C (QUOTE R)) (MAP-SLOT-VALUE OBJ (QUOTE (A B C)))))) P Q R (P Q R))
;; Loading (DEFTEST WITH-SLOTS.9 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z)))) (WITH-SLOTS (A B C) OBJ (VALUES (SETQ A (QUOTE P)) (SETQ B (QUOTE Q)) (SETQ C (QUOTE R)) (MAP-SLOT-VALUE OBJ (QUOTE (A B C)))))) P Q R (P Q R))
;; Loading (DEFTEST WITH-SLOTS.10 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z)))) (WITH-SLOTS ((A2 A) (B2 B) (C2 C)) OBJ (VALUES A2 B2 C2))) X Y Z)
;; Loading (DEFTEST WITH-SLOTS.11 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z)))) (WITH-SLOTS ((A2 A) (B2 B) (C2 C)) OBJ (VALUES (SETF A2 (QUOTE P)) (SETF B2 (QUOTE Q)) (SETF C2 (QUOTE R)) (MAP-SLOT-VALUE OBJ (QUOTE (A B C)))))) P Q R (P Q R))
;; Loading (DEFTEST WITH-SLOTS.12 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z)))) (WITH-SLOTS ((A2 A) (B2 B) (C2 C)) OBJ (VALUES (SETQ A2 (QUOTE P)) (SETQ B2 (QUOTE Q)) (SETQ C2 (QUOTE R)) (MAP-SLOT-VALUE OBJ (QUOTE (A B C)))))) P Q R (P Q R))
;; Loading (DEFTEST WITH-SLOTS.13 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01)))) (WITH-SLOTS (A B C) OBJ (VALUES (SETF A (QUOTE P)) (SETF B (QUOTE Q)) (SETF C (QUOTE R)) (MAP-SLOT-VALUE OBJ (QUOTE (A B C)))))) P Q R (P Q R))
;; Loading (DEFTEST WITH-SLOTS.14 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A 1 :B 2 :C 3))) (WITH-SLOTS (A B C) OBJ (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE BAD) :B (QUOTE BAD) :C (QUOTE BAD)))) (VALUES A B C)))) 1 2 3)
;; Loading (DEFTEST WITH-SLOTS.15 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A 1 :B 2 :C 3))) (WITH-SLOTS (A B C) OBJ (WITH-SLOTS ((A2 A) (B2 B) (C2 C)) (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE BAD) :B (QUOTE BAD) :C (QUOTE BAD)) (VALUES A B C)))) 1 2 3)
;; Loading (DEFTEST WITH-SLOTS.16 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE BAD) :B (QUOTE BAD) :C (QUOTE BAD)))) (WITH-SLOTS (A B C) OBJ (WITH-SLOTS (A B C) (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A 1 :B 2 :C 3) (VALUES A B C)))) 1 2 3)
;; Loading (DEFTEST WITH-SLOTS.17 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A 1 :B 2 :C (QUOTE BAD)))) (WITH-SLOTS (A B) OBJ (WITH-SLOTS (C) (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE BAD) :B (QUOTE BAD) :C 3) (VALUES A B C)))) 1 2 3)
;; Loading (DEFTEST WITH-SLOTS.18 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01)))) (WITH-SLOTS (A B C) OBJ (VALUES A B C))) MISSING MISSING MISSING)
;; Loading (DEFTEST WITH-SLOTS.19 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z)))) (WITH-SLOTS (A B C) OBJ (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 3))) (VALUES A B C))) X Y Z)
;; Loading (DEFTEST WITH-SLOTS.20 (LET ((OBJ (MAKE-INSTANCE (QUOTE WITH-SLOTS-CLASS-01) :A (QUOTE X) :B (QUOTE Y) :C (QUOTE Z)))) (WITH-SLOTS (A B C) OBJ (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 3))) (DECLARE (SPECIAL *X*)) (VALUES A B C))) X Y Z)
;; Loading (DEFTEST WITH-SLOTS.21 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-SLOTS NIL (RETURN-FROM DONE X) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (LOAD "defgeneric.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defgeneric.lsp C12AAE37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN DEFGENERIC-TESTFN-01 (X) X)
;; Loading (DEFTEST DEFGENERIC.ERROR.1 (LET* ((NAME (QUOTE DEFGENERIC-TESTFN-01)) (FN (SYMBOL-FUNCTION NAME))) (IF (NOT (TYPEP FN (QUOTE GENERIC-FUNCTION))) (HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA NAME) NIL))) :BAD) (PROGRAM-ERROR NIL :GOOD)) :GOOD)) :GOOD)
;; Loading (DEFMACRO DEFGENERIC-TESTMACRO-02 (X) X)
;; Loading (DEFTEST DEFGENERIC.ERROR.2 (LET* ((NAME (QUOTE DEFGENERIC-TESTMACRO-02))) (HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA NAME) NIL))) :BAD) (PROGRAM-ERROR NIL :GOOD))) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.3 (LOOP FOR NAME IN *CL-SPECIAL-OPERATOR-SYMBOLS* FOR RESULT = (HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA NAME) NIL))) T) (PROGRAM-ERROR NIL NIL)) WHEN RESULT COLLECT NAME) NIL)
;; Loading (DEFTEST DEFGENERIC.ERROR.4 (SIGNALS-ERROR (DEFGENERIC DEFGENERIC-ERROR-FN.4 (X Y) (:ARGUMENT-PRECEDENCE-ORDER X Y X)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFGENERIC.ERROR.5 (SIGNALS-ERROR (DEFGENERIC DEFGENERIC-ERROR-FN.5 (X) (:DOCUMENTATION "some documentation") (:DOCUMENTATION "illegally repeated documentation")) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFGENERIC.ERROR.6 (SIGNALS-ERROR (DEFGENERIC DEFGENERIC-ERROR-FN.6 (X) (UNKNOWN-OPTION NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFGENERIC.ERROR.7 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.7 (X Y) (:METHOD ((X T)) X)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.8 (SIGNALS-ERROR (DEFGENERIC DEFGENERIC-ERROR-FN.8 (X Y) (:ARGUMENT-PRECEDENCE-ORDER X)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFGENERIC.ERROR.9 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.9 (X) (:METHOD ((X T) (Y T)) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.10 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.10 (X &OPTIONAL Y) (:METHOD ((X T)) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.11 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.11 (X &OPTIONAL Y) (:METHOD (X &OPTIONAL Y Z) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.12 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.12 (X &REST Y) (:METHOD (X) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.13 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.13 (X) (:METHOD (X &REST Y) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.14 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.14 (X &KEY) (:METHOD (X) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.15 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.15 (X &KEY Y) (:METHOD (X) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.16 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.16 (X) (:METHOD (X &KEY) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.17 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.17 (X) (:METHOD (X &KEY FOO) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.18 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.18 (X &KEY FOO) (:METHOD (X &KEY) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.19 (HANDLER-CASE (PROGN (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.19 (X &KEY FOO) (:METHOD (X &KEY BAR) T)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST DEFGENERIC.ERROR.20 (SIGNALS-ERROR (LET ((FN (DEFGENERIC DEFGENERIC-ERROR-FN.20 (X &KEY) (:METHOD ((X NUMBER) &KEY FOO) (LIST X FOO)) (:METHOD ((X SYMBOL) &KEY BAR) (LIST X BAR))))) (FUNCALL FN 1 :BAR (QUOTE A))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFGENERIC.ERROR.21 (SIGNALS-ERROR (LET ((FN (DEFGENERIC DEFGENERIC-ERROR-FN.21 (X &KEY) (:METHOD ((X NUMBER) &KEY FOO &ALLOW-OTHER-KEYS) (LIST X FOO)) (:METHOD ((X SYMBOL) &KEY BAR) (LIST X BAR))))) (FUNCALL FN (QUOTE X) :FOO (QUOTE A))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFGENERIC.ERROR.22 (PROGN (DEFGENERIC DEFGENERIC-ERROR-FN.22 (X)) (DEFMETHOD DEFGENERIC-ERROR-FN.22 ((X T)) NIL) (HANDLER-CASE (EVAL (QUOTE (DEFGENERIC DEFGENERIC-ERROR-FN.22 (X Y)))) (ERROR NIL :GOOD))) :GOOD)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST DEFGENERIC.1 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.1 (X Y Z) (:METHOD ((X T) (Y T) (Z T)) (LIST X Y Z))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (TYPEP* FN (QUOTE GENERIC-FUNCTION)) (TYPEP* FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL FN (QUOTE A) (QUOTE B) (QUOTE C)) (APPLY FN 1 2 3 NIL) (APPLY FN (LIST 4 5 6)) (MAPCAR FN (QUOTE (1 2)) (QUOTE (3 4)) (QUOTE (5 6))) (DEFGENERIC.FUN.1 (QUOTE D) (QUOTE E) (QUOTE F)))) T T (A B C) (1 2 3) (4 5 6) ((1 3 5) (2 4 6)) (D E F))
;; Loading (DEFTEST DEFGENERIC.2 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.2 (X Y Z) (:DOCUMENTATION "boo!") (:METHOD ((X T) (Y T) (Z T)) (VECTOR X Y Z))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (TYPEP* FN (QUOTE GENERIC-FUNCTION)) (TYPEP* FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL FN (QUOTE A) (QUOTE B) (QUOTE C)) (DEFGENERIC.FUN.2 (QUOTE D) (QUOTE E) (QUOTE F)) (LET ((DOC (DOCUMENTATION FN T))) (OR (NOT DOC) (AND (STRINGP DOC) (STRING=T DOC "boo!")))) (LET ((DOC (DOCUMENTATION FN (QUOTE FUNCTION)))) (OR (NOT DOC) (AND (STRINGP DOC) (STRING=T DOC "boo!")))) (SETF (DOCUMENTATION FN T) "foo") (LET ((DOC (DOCUMENTATION FN T))) (OR (NOT DOC) (AND (STRINGP DOC) (STRING=T DOC "foo")))) (SETF (DOCUMENTATION FN (QUOTE FUNCTION)) "bar") (LET ((DOC (DOCUMENTATION FN T))) (OR (NOT DOC) (AND (STRINGP DOC) (STRING=T DOC "bar")))))) T T #(A B C) #(D E F) T T "foo" T "bar" T)
;; Loading (DEFTEST DEFGENERIC.3 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.3 (X Y) (:METHOD ((X T) (Y SYMBOL)) (LIST X Y)) (:METHOD ((X SYMBOL) (Y T)) (LIST Y X))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (TYPEP* FN (QUOTE GENERIC-FUNCTION)) (TYPEP* FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL FN 1 (QUOTE A)) (FUNCALL FN (QUOTE B) 2) (FUNCALL FN (QUOTE A) (QUOTE B)))) T T (1 A) (2 B) (B A))
;; Loading (DEFTEST DEFGENERIC.4 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.4 (X Y) (:ARGUMENT-PRECEDENCE-ORDER Y X) (:METHOD ((X T) (Y SYMBOL)) (LIST X Y)) (:METHOD ((X SYMBOL) (Y T)) (LIST Y X))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (TYPEP* FN (QUOTE GENERIC-FUNCTION)) (TYPEP* FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL FN 1 (QUOTE A)) (FUNCALL FN (QUOTE B) 2) (FUNCALL FN (QUOTE A) (QUOTE B)))) T T (1 A) (2 B) (A B))
;; Loading (DEFTEST DEFGENERIC.5 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.5 NIL (:METHOD NIL (VALUES))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (TYPEP* FN (QUOTE GENERIC-FUNCTION)) (TYPEP* FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL FN)) (MULTIPLE-VALUE-LIST (DEFGENERIC.FUN.5)) (MULTIPLE-VALUE-LIST (APPLY FN NIL)))) T T NIL NIL NIL)
;; Loading (DEFTEST DEFGENERIC.6 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.6 NIL (:METHOD NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (TYPEP* FN (QUOTE GENERIC-FUNCTION)) (TYPEP* FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL FN)) (MULTIPLE-VALUE-LIST (DEFGENERIC.FUN.6)) (MULTIPLE-VALUE-LIST (APPLY FN NIL)))) T T (A B C) (A B C) (A B C))
;; Loading (DEFTEST DEFGENERIC.7 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.7 NIL (:METHOD NIL (RETURN-FROM DEFGENERIC.FUN.7 (QUOTE A)) (QUOTE B))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (TYPEP* FN (QUOTE GENERIC-FUNCTION)) (TYPEP* FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL FN)) (MULTIPLE-VALUE-LIST (DEFGENERIC.FUN.7)) (MULTIPLE-VALUE-LIST (APPLY FN NIL)))) T T (A) (A) (A))
;; Loading (DEFTEST DEFGENERIC.8 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.8 (X &OPTIONAL Y Z) (:METHOD ((X NUMBER) &OPTIONAL Y Z) (LIST X Y Z)) (:METHOD ((P SYMBOL) &OPTIONAL Q R) (LIST R Q P))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (TYPEP* FN (QUOTE GENERIC-FUNCTION)) (TYPEP* FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL FN 1)) (MULTIPLE-VALUE-LIST (FUNCALL FN 1 2)) (MULTIPLE-VALUE-LIST (FUNCALL FN 1 2 3)) (MULTIPLE-VALUE-LIST (DEFGENERIC.FUN.8 (QUOTE A))) (MULTIPLE-VALUE-LIST (DEFGENERIC.FUN.8 (QUOTE A) (QUOTE B))) (MULTIPLE-VALUE-LIST (DEFGENERIC.FUN.8 (QUOTE A) (QUOTE B) (QUOTE C))) (MULTIPLE-VALUE-LIST (APPLY FN (QUOTE (X Y Z)))))) T T ((1 NIL NIL)) ((1 2 NIL)) ((1 2 3)) ((NIL NIL A)) ((NIL B A)) ((C B A)) ((Z Y X)))
;; Loading (DEFTEST DEFGENERIC.9 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.9 (X &OPTIONAL Y Z) (:METHOD ((X NUMBER) &OPTIONAL (Y 10) (Z 20)) (LIST X Y Z)) (:METHOD ((P SYMBOL) &OPTIONAL (Q (QUOTE S)) (R (QUOTE T))) (LIST R Q P))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 2) (FUNCALL FN 1 2 3) (FUNCALL FN (QUOTE A)) (FUNCALL FN (QUOTE A) (QUOTE B)) (FUNCALL FN (QUOTE A) (QUOTE B) (QUOTE C)))) (1 10 20) (1 2 20) (1 2 3) (T S A) (T B A) (C B A))
;; Loading (DEFTEST DEFGENERIC.10 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.10 (X &REST Y) (:METHOD ((X NUMBER) &KEY FOO) (LIST X FOO))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :FOO (QUOTE A)) (DEFGENERIC.FUN.10 5/3 :FOO (QUOTE X) :FOO (QUOTE Y)) (DEFGENERIC.FUN.10 10 :BAR T :ALLOW-OTHER-KEYS T) (DEFGENERIC.FUN.10 20 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE X)))) (1 NIL) (1 A) (5/3 X) (10 NIL) (20 X))
;; Loading (DEFTEST DEFGENERIC.11 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.11 (X &KEY) (:METHOD ((X NUMBER) &KEY FOO) (LIST X FOO))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :FOO (QUOTE A)) (DEFGENERIC.FUN.11 5/3 :FOO (QUOTE X) :FOO (QUOTE Y)) (DEFGENERIC.FUN.11 11 :BAR T :ALLOW-OTHER-KEYS T) (DEFGENERIC.FUN.11 20 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE X)))) (1 NIL) (1 A) (5/3 X) (11 NIL) (20 X))
;; Loading (DEFTEST DEFGENERIC.12 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.12 (X &KEY FOO BAR BAZ) (:METHOD ((X NUMBER) &REST Y) (LIST X Y))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :FOO (QUOTE A)) (DEFGENERIC.FUN.12 5/3 :FOO (QUOTE X) :FOO (QUOTE Y) :BAR (QUOTE Z)) (DEFGENERIC.FUN.12 11 :ZZZ T :ALLOW-OTHER-KEYS T) (DEFGENERIC.FUN.12 20 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE X)))) (1 NIL) (1 (:FOO A)) (5/3 (:FOO X :FOO Y :BAR Z)) (11 (:ZZZ T :ALLOW-OTHER-KEYS T)) (20 (:ALLOW-OTHER-KEYS NIL :FOO X)))
;; Loading (DEFTEST DEFGENERIC.13 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.13 (X &KEY) (:METHOD ((X NUMBER) &KEY FOO) (LIST X FOO)) (:METHOD ((X SYMBOL) &KEY BAR) (LIST X BAR))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN (QUOTE A)) (FUNCALL FN 1 :FOO 2) (FUNCALL FN (QUOTE A) :BAR (QUOTE B)))) (1 NIL) (A NIL) (1 2) (A B))
;; Loading (DEFTEST DEFGENERIC.14 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.14 (X &KEY &ALLOW-OTHER-KEYS) (:METHOD ((X NUMBER) &KEY FOO) (LIST X FOO)) (:METHOD ((X SYMBOL) &KEY BAR) (LIST X BAR))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN (QUOTE A)) (FUNCALL FN 1 :FOO 2) (FUNCALL FN 1 :FOO 2 :BAR 3) (FUNCALL FN 1 :BAR 4) (FUNCALL FN (QUOTE A) :FOO (QUOTE B)) (FUNCALL FN (QUOTE A) :BAR (QUOTE B)) (FUNCALL FN (QUOTE A) :FOO (QUOTE C) :BAR (QUOTE B)) (FUNCALL FN 1 :BAZ 10) (FUNCALL FN (QUOTE A) :BAZ 10) (FUNCALL FN 1 :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE A)) (FUNCALL FN (QUOTE A) :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE B)))) (1 NIL) (A NIL) (1 2) (1 2) (1 NIL) (A NIL) (A B) (A B) (1 NIL) (A NIL) (1 NIL) (A NIL))
;; Loading (DEFTEST DEFGENERIC.15 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.15 (X &KEY) (:METHOD ((X NUMBER) &KEY FOO &ALLOW-OTHER-KEYS) (LIST X FOO)) (:METHOD ((X SYMBOL) &KEY BAR) (LIST X BAR))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN (QUOTE A)) (FUNCALL FN 1 :FOO 2) (FUNCALL FN 1 :FOO 2 :BAR 3) (FUNCALL FN 1 :BAR 4) (FUNCALL FN (QUOTE A) :ALLOW-OTHER-KEYS T :FOO (QUOTE B)) (FUNCALL FN (QUOTE A) :BAR (QUOTE B)) (FUNCALL FN (QUOTE A) :FOO (QUOTE C) :BAR (QUOTE B) :ALLOW-OTHER-KEYS T) (FUNCALL FN 1 :BAZ 10) (FUNCALL FN 1 :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE A)))) (1 NIL) (A NIL) (1 2) (1 2) (1 NIL) (A NIL) (A B) (A B) (1 NIL) (1 NIL))
;; Loading (DEFTEST DEFGENERIC.16 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.16 (X &KEY) (:METHOD ((X NUMBER) &KEY (FOO (QUOTE A))) (LIST X FOO)) (:METHOD ((X SYMBOL) &KEY FOO) (LIST X FOO))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :FOO NIL) (FUNCALL FN 1 :FOO 2) (FUNCALL FN (QUOTE X)) (FUNCALL FN (QUOTE X) :FOO NIL) (FUNCALL FN (QUOTE X) :FOO (QUOTE Y)))) (1 A) (1 NIL) (1 2) (X NIL) (X NIL) (X Y))
;; Loading (DEFTEST DEFGENERIC.17 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.17 (X &KEY) (:METHOD ((X NUMBER) &KEY (FOO (QUOTE A) FOO-P)) (LIST X FOO (NOTNOT FOO-P))) (:METHOD ((X SYMBOL) &KEY FOO) (LIST X FOO))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :FOO NIL) (FUNCALL FN 1 :FOO 2) (FUNCALL FN (QUOTE X)) (FUNCALL FN (QUOTE X) :FOO NIL) (FUNCALL FN (QUOTE X) :FOO (QUOTE Y)))) (1 A NIL) (1 NIL T) (1 2 T) (X NIL) (X NIL) (X Y))
;; Loading (DEFTEST DEFGENERIC.18 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.18 (X &OPTIONAL Y) (:METHOD ((X NUMBER) &OPTIONAL (Y (QUOTE A))) (LIST X Y)) (:METHOD ((X SYMBOL) &OPTIONAL (Z NIL Z-P)) (LIST X Z (NOTNOT Z-P)))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 NIL) (FUNCALL FN 1 2) (FUNCALL FN (QUOTE X)) (FUNCALL FN (QUOTE X) NIL) (FUNCALL FN (QUOTE X) (QUOTE Y)))) (1 A) (1 NIL) (1 2) (X NIL NIL) (X NIL T) (X Y T))
;; Loading (DEFTEST DEFGENERIC.19 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.19 (X &KEY) (:METHOD ((X NUMBER) &KEY ((:BAR FOO) (QUOTE A) FOO-P)) (LIST X FOO (NOTNOT FOO-P)))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :BAR NIL) (FUNCALL FN 1 :BAR 2))) (1 A NIL) (1 NIL T) (1 2 T))
;; Loading (DEFTEST DEFGENERIC.20 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.20 (X &OPTIONAL Y Z) (:METHOD ((X NUMBER) &OPTIONAL (Y (1+ X) Y-P) (Z (IF Y-P (1+ Y) (+ X 10)) Z-P)) (LIST X Y (NOTNOT Y-P) Z (NOTNOT Z-P)))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 5) (FUNCALL FN 1 5 9))) (1 2 NIL 11 NIL) (1 5 T 6 NIL) (1 5 T 9 T))
;; Loading (DEFTEST DEFGENERIC.21 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.21 (X &KEY) (:METHOD ((X NUMBER) &KEY (Y (1+ X) Y-P) (Z (IF Y-P (1+ Y) (+ X 10)) Z-P)) (LIST X Y (NOTNOT Y-P) Z (NOTNOT Z-P)))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :Y 5) (FUNCALL FN 1 :Y 5 :Z 9) (FUNCALL FN 1 :Z 8) (FUNCALL FN 1 :Z 8 :Y 4))) (1 2 NIL 11 NIL) (1 5 T 6 NIL) (1 5 T 9 T) (1 2 NIL 8 T) (1 4 T 8 T))
;; Loading (DEFTEST DEFGENERIC.22 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.22 (X &KEY) (:METHOD ((X NUMBER) &KEY ((:ALLOW-OTHER-KEYS Y))) (LIST X Y))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :ALLOW-OTHER-KEYS NIL) (FUNCALL FN 1 :ALLOW-OTHER-KEYS T) (FUNCALL FN 1 :FOO (QUOTE X) :ALLOW-OTHER-KEYS T :BAR (QUOTE Y)) (FUNCALL FN 1 :ALLOW-OTHER-KEYS T :FOO (QUOTE X)) (FUNCALL FN 1 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T) (FUNCALL FN 1 :FOO (QUOTE X) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCALL FN 1 :ALLOW-OTHER-KEYS T (QUOTE FOO) (QUOTE Y) :ALLOW-OTHER-KEYS NIL) (FUNCALL FN 1 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:FOO) (QUOTE Z)))) (1 NIL) (1 NIL) (1 T) (1 T) (1 T) (1 NIL) (1 T) (1 T) (1 T))
;; Loading (DEFTEST DEFGENERIC.23 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.23 (X) (:METHOD ((X NUMBER) &AUX (Y (1+ X))) (LIST X Y)) (:METHOD ((X SYMBOL) &AUX (Z (LIST X))) (LIST X Z))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN (QUOTE A)))) (1 2) (A (A)))
;; Loading (DEFTEST DEFGENERIC.24 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.24 (X) (:METHOD ((X NUMBER) &AUX (Y (1+ X)) (Z (1+ Y))) (LIST X Y Z)) (:METHOD ((X SYMBOL) &AUX (Y (LIST X)) (Z (LIST X Y))) (LIST X Y Z))))))) (VALUES (FUNCALL FN 1) (FUNCALL FN (QUOTE A)))) (1 2 3) (A (A) (A (A))))
;; Loading (DEFTEST DEFGENERIC.25 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.25 (X &OPTIONAL Y &KEY) (:METHOD ((X SYMBOL) &OPTIONAL (Y (QUOTE D) Y-P) &KEY ((:FOO BAR) (LIST X Y) BAR-P) &AUX (Z (LIST X Y (NOTNOT Y-P) BAR (NOTNOT BAR-P)))) Z)))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN (QUOTE A)) (FUNCALL FN (QUOTE A) (QUOTE B)) (FUNCALL FN (QUOTE A) (QUOTE B) :FOO (QUOTE C)))) (A D NIL (A D) NIL) (A B T (A B) NIL) (A B T C T))
;; Loading (DEFTEST DEFGENERIC.26 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.26 (X) (DECLARE (OPTIMIZE (SAFETY 3))) (:METHOD ((X SYMBOL)) X) (DECLARE (OPTIMIZE (DEBUG 3)))))))) (DECLARE (TYPE FUNCTION FN)) (FUNCALL FN (QUOTE A))) A)
;; Loading (DEFTEST DEFGENERIC.28 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.28 (X &KEY) (:METHOD ((X INTEGER) &KEY FOO) (LIST X FOO)) (:METHOD ((X NUMBER) &KEY BAR) (LIST X BAR)) (:METHOD ((X T) &KEY BAZ) (LIST X BAZ))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN 1) (FUNCALL FN 1 :FOO (QUOTE A)) (FUNCALL FN 1 :BAR (QUOTE B)) (FUNCALL FN 1 :BAZ (QUOTE C)) (FUNCALL FN 1 :BAR (QUOTE B) :BAZ (QUOTE C)) (FUNCALL FN 1 :FOO (QUOTE A) :BAR (QUOTE B)) (FUNCALL FN 1 :FOO (QUOTE A) :BAZ (QUOTE C)) (FUNCALL FN 1 :FOO (QUOTE A) :BAR (QUOTE B) :BAZ (QUOTE C)) (FUNCALL FN 5/3) (FUNCALL FN 5/3 :BAR (QUOTE B)) (FUNCALL FN 5/3 :BAZ (QUOTE C)) (FUNCALL FN 5/3 :BAR (QUOTE B) :BAZ (QUOTE C)) (FUNCALL FN (QUOTE X)) (FUNCALL FN (QUOTE X) :BAZ (QUOTE C)))) (1 NIL) (1 A) (1 NIL) (1 NIL) (1 NIL) (1 A) (1 A) (1 A) (5/3 NIL) (5/3 B) (5/3 NIL) (5/3 B) (X NIL) (X C))
;; Loading (DEFCLASS DEFGENERIC.29.CLASS.1 NIL NIL)
;; Loading (DEFCLASS DEFGENERIC.29.CLASS.2 NIL NIL)
;; Loading (DEFCLASS DEFGENERIC.29.CLASS.3 (DEFGENERIC.29.CLASS.1 DEFGENERIC.29.CLASS.2) NIL)
;; Loading (DEFTEST DEFGENERIC.29 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.29 (X &KEY) (:METHOD ((X DEFGENERIC.29.CLASS.1) &KEY FOO) FOO) (:METHOD ((X DEFGENERIC.29.CLASS.2) &KEY BAR) BAR)))))) (DECLARE (TYPE FUNCTION FN)) (LET ((X (MAKE-INSTANCE (QUOTE DEFGENERIC.29.CLASS.3)))) (VALUES (FUNCALL FN X) (FUNCALL FN X :FOO (QUOTE A)) (FUNCALL FN X :BAR (QUOTE B)) (FUNCALL FN X :FOO (QUOTE A) :BAR (QUOTE B)) (FUNCALL FN X :BAR (QUOTE B) :FOO (QUOTE A))))) NIL A NIL A A)
;; Loading (DEFTEST DEFGENERIC.31 (PROGN (DEFGENERIC DEFGENERIC.FUN.31 (X) (:METHOD ((X T)) T)) (DEFGENERIC DEFGENERIC.FUN.31 (X Y) (:METHOD ((X T) (Y T)) (LIST X Y))) (DEFGENERIC.FUN.31 (QUOTE A) (QUOTE B))) (A B))
;; Loading (DEFTEST DEFGENERIC.32 (PROGN (DEFGENERIC DEFGENERIC.FUN.32 (X) (:METHOD ((X SYMBOL)) :BAD)) (DEFGENERIC DEFGENERIC.FUN.32 (X) (:METHOD ((X T)) :GOOD)) (DEFGENERIC.FUN.32 (QUOTE X))) :GOOD)
;; Loading (DEFTEST DEFGENERIC.33 (LET ((FN (EVAL (QUOTE (DEFGENERIC (SETF DEFGENERIC.FUN.33) (X Y &REST ARGS) (:METHOD (X (Y CONS) &REST ARGS) (ASSERT (NULL ARGS)) (SETF (CAR Y) X)) (:METHOD (X (Y ARRAY) &REST ARGS) (SETF (APPLY (FUNCTION AREF) Y ARGS) X))))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (LET ((Z (LIST (QUOTE A) (QUOTE B)))) (LIST (SETF (DEFGENERIC.FUN.33 Z) (QUOTE C)) Z)) (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT NIL))) (LIST (SETF (DEFGENERIC.FUN.33 A 5) (QUOTE D)) A)))) (C (C B)) (D #(NIL NIL NIL NIL NIL D NIL NIL NIL NIL)))
;; Loading (DEFTEST DEFGENERIC.34 (LET ((FN (EVAL (QUOTE (DEFGENERIC #:DEFGENERIC.FUN.34 (X) (:METHOD ((X T)) (LIST X :GOOD))))))) (FUNCALL FN 10)) (10 :GOOD))
;; Loading (DEFTEST DEFGENERIC.35 (LET ((FN (EVAL (QUOTE (DEFGENERIC DEFGENERIC.FUN.35 (X) (:METHOD ((X (EQL (QUOTE A)))) (DECLARE (OPTIMIZE (SPEED 0))) "FOO" (DECLARE (OPTIMIZE (SAFETY 3))) X)))))) (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN (QUOTE A)) (LET ((METHOD (FIRST (COMPUTE-APPLICABLE-METHODS FN (QUOTE (A)))))) (AND METHOD (LET ((DOC (DOCUMENTATION METHOD T))) (LIST (OR (NULL DOC) (EQUALT DOC "FOO")) (SETF (DOCUMENTATION METHOD T) "BAR") (LET ((DOC (DOCUMENTATION METHOD T))) (OR (NULL DOC) (EQUALT DOC "BAR"))))))))) A (T "BAR" T))
;; Loading (LOAD "find-class.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/find-class.lsp 8102FBB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FIND-CLASS.1 (LOOP FOR NAME IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS NAME) (FIND-CLASS NAME)) COLLECT NAME) NIL)
;; Loading (DEFTEST FIND-CLASS.2 (LOOP FOR NAME IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS NAME T) (FIND-CLASS NAME)) COLLECT NAME) NIL)
;; Loading (DEFTEST FIND-CLASS.3 (LOOP FOR NAME IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS NAME NIL) (FIND-CLASS NAME)) COLLECT NAME) NIL)
;; Loading (DEFTEST FIND-CLASS.4 (HANDLER-CASE (PROGN (EVAL (QUOTE (FIND-CLASS (GENSYM)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST FIND-CLASS.5 (HANDLER-CASE (PROGN (EVAL (QUOTE (FIND-CLASS (GENSYM) T))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST FIND-CLASS.6 (FIND-CLASS (GENSYM) NIL) NIL)
;; Loading (DEFTEST FIND-CLASS.7 (LOOP FOR NAME IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS NAME T NIL) (FIND-CLASS NAME)) COLLECT NAME) NIL)
;; Loading (DEFTEST FIND-CLASS.8 (LOOP FOR NAME IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS NAME NIL NIL) (FIND-CLASS NAME)) COLLECT NAME) NIL)
;; Loading (DEFTEST FIND-CLASS.9 (MACROLET ((%M (&ENVIRONMENT ENV) (LET ((RESULT (LOOP FOR NAME IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS NAME NIL ENV) (FIND-CLASS NAME)) COLLECT NAME))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA RESULT)))))) (%M)) NIL)
;; Loading (DEFTEST FIND-CLASS.10 (MACROLET ((%M (&ENVIRONMENT ENV) (LET ((RESULT (LOOP FOR NAME IN *CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS NAME T ENV) (FIND-CLASS NAME)) COLLECT NAME))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA RESULT)))))) (%M)) NIL)
;; Loading (DEFTEST FIND-CLASS.11 (HANDLER-CASE (PROGN (EVAL (QUOTE (FIND-CLASS (GENSYM) (QUOTE A) NIL))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST FIND-CLASS.12 (FIND-CLASS (GENSYM) NIL NIL) NIL)
;; Loading (DEFTEST FIND-CLASS.13 (MACROLET ((%M (&ENVIRONMENT ENV) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (FIND-CLASS (GENSYM) NIL ENV)))))) (%M)) NIL)
;; Loading (DEFTEST FIND-CLASS.14 (HANDLER-CASE (PROGN (EVAL (QUOTE (MACROLET ((%M (&ENVIRONMENT ENV) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (FIND-CLASS (GENSYM) 17 ENV)))))) (%M)))) :BAD) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST FIND-CLASS.15 (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (LET* ((CLASS (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (CLASS1 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01))) (CLASS2 (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) CLASS1))) (VALUES (EQT CLASS CLASS1) (EQT CLASS CLASS2) (CLASS-NAME CLASS)))) T T FIND-CLASS-CLASS-01)
;; Loading (DEFTEST FIND-CLASS.16 (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) NIL) NIL) (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) T) NIL) (LET* ((I 0) (CLASS (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (CLASS1 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01))) (CLASS2 (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) (INCF I)) CLASS1))) (VALUES I (EQT CLASS CLASS1) (EQT CLASS CLASS2)))) 1 T T)
;; Loading (DEFTEST FIND-CLASS.17 (MACROLET ((%M (&ENVIRONMENT ENV) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (LET* ((I 0) X Y Z (CLASS (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (CLASS1 (FIND-CLASS (PROGN (SETF X (INCF I)) (QUOTE FIND-CLASS-CLASS-01)) (SETF Y (INCF I)) (PROGN (SETF Z (INCF I)) ENV))) (CLASS2 (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) CLASS1))) (LIST (EQT CLASS CLASS1) (EQT CLASS CLASS2) I X Y Z)))))))) (%M)) (T T 3 1 2 3))
;; Loading (DEFTEST FIND-CLASS.18 (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (LET* ((CLASS (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (CLASS1 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01))) (CLASS2 (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL)) (CLASS3 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) NIL))) (VALUES (EQT CLASS CLASS1) (EQT CLASS CLASS2) CLASS2 (CLASS-NAME CLASS) CLASS3))) T NIL NIL FIND-CLASS-CLASS-01 NIL)
;; Loading (DEFTEST FIND-CLASS.19 (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) NIL) NIL) (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) T) NIL) (LET* ((CLASS (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (CLASS1 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01))) (CLASS2 (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) T NIL) CLASS1))) (VALUES (EQT CLASS CLASS1) (EQT CLASS CLASS2)))) T T)
;; Loading (DEFTEST FIND-CLASS.20 (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-02)) NIL) (LET* ((CLASS1 (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (CLASS2 (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-02 NIL NIL))))) (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) CLASS2) (LET* ((NEW-CLASS1 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) NIL)) (NEW-CLASS2 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-02)))) (VALUES (EQT CLASS1 CLASS2) (EQT CLASS2 NEW-CLASS1) (EQT CLASS2 NEW-CLASS2) (CLASS-NAME CLASS2))))) NIL T T FIND-CLASS-CLASS-02)
;; Loading (DEFTEST FIND-CLASS.21 (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-02)) NIL) (LET* ((CLASS1 (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (CLASS2 (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-02 NIL NIL))))) (PSETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) CLASS2 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-02)) CLASS1) (LET* ((NEW-CLASS1 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01) NIL)) (NEW-CLASS2 (FIND-CLASS (QUOTE FIND-CLASS-CLASS-02)))) (VALUES (EQT CLASS1 CLASS2) (EQT CLASS2 NEW-CLASS1) (EQT CLASS1 NEW-CLASS2) (CLASS-NAME NEW-CLASS1) (CLASS-NAME NEW-CLASS2))))) NIL T T FIND-CLASS-CLASS-02 FIND-CLASS-CLASS-01)
;; Loading (DEFTEST FIND-CLASS.22 (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (LET* ((CLASS1 (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (FN (EVAL (QUOTE (DEFGENERIC FIND-CLASS-GF-01 (X) (:METHOD ((X FIND-CLASS-CLASS-01)) :GOOD) (:METHOD ((X T)) NIL))))) (OBJ (MAKE-INSTANCE CLASS1))) (ASSERT (TYPEP FN (QUOTE FUNCTION))) (LOCALLY (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN NIL) (FUNCALL FN OBJ) (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (FUNCALL FN NIL) (FUNCALL FN OBJ))))) NIL :GOOD NIL NIL :GOOD)
;; Loading (DEFTEST FIND-CLASS.23 (PROGN (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-02)) NIL) (LET* ((CLASS1 (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-01 NIL NIL)))) (CLASS2 (EVAL (QUOTE (DEFCLASS FIND-CLASS-CLASS-02 (FIND-CLASS-CLASS-01) NIL)))) (FN (EVAL (QUOTE (DEFGENERIC FIND-CLASS-GF-02 (X) (:METHOD ((X FIND-CLASS-CLASS-01)) 1) (:METHOD ((X FIND-CLASS-CLASS-02)) 2) (:METHOD ((X T)) T))))) (OBJ1 (MAKE-INSTANCE CLASS1)) (OBJ2 (MAKE-INSTANCE CLASS2))) (ASSERT (TYPEP FN (QUOTE FUNCTION))) (LOCALLY (DECLARE (TYPE FUNCTION FN)) (VALUES (FUNCALL FN NIL) (FUNCALL FN OBJ1) (FUNCALL FN OBJ2) (SETF (FIND-CLASS (QUOTE FIND-CLASS-CLASS-01)) NIL) (FUNCALL FN NIL) (FUNCALL FN OBJ1) (FUNCALL FN OBJ2))))) T 1 2 NIL T 1 2)
;; Loading (DEFTEST FIND-CLASS.ERROR.1 (SIGNALS-ERROR (FIND-CLASS) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-CLASS.ERROR.2 (SIGNALS-ERROR (FIND-CLASS (QUOTE SYMBOL) NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "next-method-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/next-method-p.lsp 81210B87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFGENERIC NMP-GF-01 (X) (:METHOD ((X INTEGER)) (NOTNOT-MV (NEXT-METHOD-P))) (:METHOD ((X NUMBER)) (QUOTE FOO)) (:METHOD ((X SYMBOL)) (NEXT-METHOD-P)))
;; Loading (DEFTEST NEXT-METHOD-P.1 (NMP-GF-01 10) T)
;; Loading (DEFTEST NEXT-METHOD-P.2 (NMP-GF-01 1.2) FOO)
;; Loading (DEFTEST NEXT-METHOD-P.3 (NMP-GF-01 (QUOTE A)) NIL)
;; Loading (DEFGENERIC NMP-GF-02 (X Y) (:METHOD ((X INTEGER) (Y SYMBOL)) (NOTNOT-MV (NEXT-METHOD-P))) (:METHOD ((X NUMBER) (Y (EQL NIL))) (QUOTE FOO)))
;; Loading (DEFTEST NEXT-METHOD-P.4 (NMP-GF-02 10 NIL) T)
;; Loading (DEFTEST NEXT-METHOD-P.5 (NMP-GF-02 10 (QUOTE A)) NIL)
;; Loading (DEFGENERIC NMP-GF-03 (X Y) (:METHOD ((X INTEGER) (Y SYMBOL)) (FUNCTION NEXT-METHOD-P)) (:METHOD ((X T) (Y (EQL NIL))) (CONSTANTLY 1)))
;; Loading (DEFTEST NEXT-METHOD-P.6 (NOTNOT-MV (FUNCALL (THE FUNCTION (NMP-GF-03 10 NIL)))) T)
;; Loading (DEFTEST NEXT-METHOD-P.7 (FUNCALL (NMP-GF-03 10 (QUOTE A))) NIL)
;; Loading (DEFGENERIC NMP-GF-04 (X Y))
;; Loading (DEFMETHOD NMP-GF-04 ((X INTEGER) (Y SYMBOL)) (FUNCTION NEXT-METHOD-P))
;; Loading (DEFMETHOD NMP-GF-04 ((X T) (Y (EQL NIL))) (CONSTANTLY 2))
;; Loading (DEFTEST NEXT-METHOD-P.8 (NOTNOT-MV (FUNCALL (THE FUNCTION (NMP-GF-04 10 NIL)))) T)
;; Loading (DEFTEST NEXT-METHOD-P.9 (FUNCALL (NMP-GF-04 10 (QUOTE A))) NIL)
;; Loading (DEFGENERIC NMP-GF-05 (X))
;; Loading (DEFMETHOD NMP-GF-05 :AROUND ((X NUMBER)) (NOTNOT-MV (NEXT-METHOD-P)))
;; Loading (DEFMETHOD NMP-GF-05 ((X INTEGER)) (QUOTE FOO))
;; Loading (DEFTEST NEXT-METHOD-P.10 (NMP-GF-05 10) T)
;; Loading (DEFTEST NEXT-METHOD-P.ERROR.1 (SIGNALS-ERROR (PROGN (EVAL (QUOTE (DEFMETHOD NMP-GF-06 ((X T)) (NEXT-METHOD-P NIL)))) (NMP-GF-06 NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "call-next-method.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/call-next-method.lsp 812A72F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFGENERIC CNM-GF-01 (X) (:METHOD ((X INTEGER)) (CONS (QUOTE A) (CALL-NEXT-METHOD))) (:METHOD ((X NUMBER)) (CONS (QUOTE D) (CALL-NEXT-METHOD))) (:METHOD ((X T)) NIL))
;; Loading (DEFTEST CALL-NEXT-METHOD.1 (MAPCAR (FUNCTION CNM-GF-01) (QUOTE (0 2/3 1.299999 #C(1 1) A))) ((A B C D) (B C D) (C D) (D) NIL))
;; Loading (DEFGENERIC CNM-GF-02 (X) (:METHOD ((X INTEGER)) (CALL-NEXT-METHOD)) (:METHOD ((X NUMBER)) (VALUES)) (:METHOD ((X (EQL (QUOTE A)))) (CALL-NEXT-METHOD)) (:METHOD ((X SYMBOL)) (VALUES 1 2 3 4 5 6)))
;; Loading (DEFTEST CALL-NEXT-METHOD.2 (CNM-GF-02 0))
;; Loading (DEFTEST CALL-NEXT-METHOD.3 (CNM-GF-02 (QUOTE A)) 1 2 3 4 5 6)
;; Loading (DEFGENERIC CNM-GF-03 (X) (:METHOD ((X INTEGER)) (FUNCTION CALL-NEXT-METHOD)) (:METHOD ((X T)) T))
;; Loading (DEFTEST CALL-NEXT-METHOD.4 (FUNCALL (CNM-GF-03 0)) T)
;; Loading (DEFGENERIC CNM-GF-04 (X) (:METHOD ((X INTEGER)) (CALL-NEXT-METHOD (+ X 10))) (:METHOD ((X NUMBER)) (1+ X)))
;; Loading (DEFTEST CALL-NEXT-METHOD.5 (MAPCAR (FUNCTION CNM-GF-04) (QUOTE (0 1 2 5/3 9/2 1.0 #C(1 1)))) (11 12 13 8/3 11/2 2.0 #C(2 1)))
;; Loading (DEFGENERIC CNM-GF-05 (X Y) (:METHOD ((X INTEGER) (Y INTEGER)) (CONS (QUOTE A) (CALL-NEXT-METHOD))) (:METHOD ((X INTEGER) (Y T)) (CONS (QUOTE B) (CALL-NEXT-METHOD))) (:METHOD ((X T) (Y INTEGER)) (CONS (QUOTE C) (CALL-NEXT-METHOD))) (:METHOD ((X T) (Y T)) (LIST (QUOTE D))))
;; Loading (DEFTEST CALL-NEXT-METHOD.6 (MAPCAR (FUNCTION CNM-GF-05) (QUOTE (0 0 T T)) (QUOTE (0 T 0 T))) ((A B C D) (B D) (C D) (D)))
;; Loading (DEFCLASS CNM-CLASS-01A NIL NIL)
;; Loading (DEFCLASS CNM-CLASS-01B (CNM-CLASS-01A) NIL)
;; Loading (DEFCLASS CNM-CLASS-01C (CNM-CLASS-01A) NIL)
;; Loading (DEFCLASS CNM-CLASS-01D (CNM-CLASS-01C CNM-CLASS-01B) NIL)
;; Loading (DEFGENERIC CNM-GF-06 (X) (:METHOD ((X CNM-CLASS-01D)) (CONS 1 (CALL-NEXT-METHOD))) (:METHOD ((X CNM-CLASS-01C)) (CONS 2 (CALL-NEXT-METHOD))) (:METHOD ((X CNM-CLASS-01B)) (CONS 3 (CALL-NEXT-METHOD))) (:METHOD ((X CNM-CLASS-01A)) (CONS 4 (CALL-NEXT-METHOD))) (:METHOD ((X T)) NIL))
;; Loading (DEFTEST CALL-NEXT-METHOD.7 (VALUES (CNM-GF-06 (MAKE-INSTANCE (QUOTE CNM-CLASS-01D))) (CNM-GF-06 (MAKE-INSTANCE (QUOTE CNM-CLASS-01C))) (CNM-GF-06 (MAKE-INSTANCE (QUOTE CNM-CLASS-01B))) (CNM-GF-06 (MAKE-INSTANCE (QUOTE CNM-CLASS-01A))) (CNM-GF-06 NIL)) (1 2 3 4) (2 4) (3 4) (4) NIL)
;; Loading (DEFGENERIC CNM-GF-07 (X) (:METHOD ((X INTEGER)) (LIST (INCF X) (CALL-NEXT-METHOD))) (:METHOD ((X SYMBOL)) (LIST (SETQ X (QUOTE A)) X (CALL-NEXT-METHOD))) (:METHOD ((X CONS)) (LIST X (LET ((X :BAD)) (DECLARE (IGNORABLE X)) (CALL-NEXT-METHOD)))) (:METHOD ((X T)) X))
;; Loading (DEFTEST CALL-NEXT-METHOD.8 (MAPCAR (FUNCTION CNM-GF-07) (QUOTE (0 Z (X) #\a))) ((1 0) (A A Z) ((X) (X)) #\a))
;; Loading (DEFGENERIC CNM-GF-08 (X &OPTIONAL Y) (:METHOD ((X INTEGER) &OPTIONAL Y) (LIST* X Y (CALL-NEXT-METHOD))) (:METHOD ((X T) &OPTIONAL Y) (LIST X Y)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST CALL-NEXT-METHOD.9 (VALUES (CNM-GF-08 0) (CNM-GF-08 0 T) (CNM-GF-08 (QUOTE A)) (CNM-GF-08 (QUOTE A) (QUOTE B))) (0 NIL 0 NIL) (0 T 0 T) (A NIL) (A B))
;; Loading (DEFGENERIC CNM-GF-09 (X &OPTIONAL Y) (:METHOD ((X INTEGER) &OPTIONAL Y) (LIST* X Y (CALL-NEXT-METHOD (1+ X)))) (:METHOD ((X T) &OPTIONAL Y) (LIST X Y)))
;; Loading (DEFTEST CALL-NEXT-METHOD.10 (VALUES (CNM-GF-09 5) (CNM-GF-09 8 (QUOTE A)) (CNM-GF-09 (QUOTE X)) (CNM-GF-09 (QUOTE X) (QUOTE Y))) (5 NIL 6 NIL) (8 A 9 NIL) (X NIL) (X Y))
;; Loading (DEFGENERIC CNM-GF-10 (X &OPTIONAL Y Z) (:METHOD ((X INTEGER) &OPTIONAL (Y (QUOTE A) Y-P) (Z (QUOTE B) Z-P)) (LIST* X Y (NOTNOT Y-P) Z (NOTNOT Z-P) (CALL-NEXT-METHOD (1+ X)))) (:METHOD ((X T) &OPTIONAL (Y (QUOTE C) Y-P) (Z (QUOTE D) Z-P)) (LIST X Y (NOTNOT Y-P) Z (NOTNOT Z-P))))
;; Loading (DEFTEST CALL-NEXT-METHOD.11 (VALUES (CNM-GF-10 5) (CNM-GF-10 8 (QUOTE P)) (CNM-GF-10 8 (QUOTE P) (QUOTE Q)) (CNM-GF-10 (QUOTE X)) (CNM-GF-10 (QUOTE X) (QUOTE U)) (CNM-GF-10 (QUOTE X) (QUOTE U) (QUOTE V))) (5 A NIL B NIL 6 C NIL D NIL) (8 P T B NIL 9 C NIL D NIL) (8 P T Q T 9 C NIL D NIL) (X C NIL D NIL) (X U T D NIL) (X U T V T))
;; Loading (DEFGENERIC CNM-ORDER-ERROR-GF-01 (X) (:METHOD ((X (EQL 0))) (DECLARE (OPTIMIZE (SAFETY 3))) (CALL-NEXT-METHOD 1)) (:METHOD ((X T)) NIL))
;; Loading (DEFTEST CALL-NEXT-METHOD.ERROR.1 (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CNM-ORDER-ERROR-GF-01 0)))) (ERROR NIL :ERROR))) :ERROR)
;; Loading (DEFGENERIC CNM-ORDER-ERROR-GF-02 (X) (:METHOD ((X INTEGER)) (DECLARE (OPTIMIZE (SAFETY 3))) (CALL-NEXT-METHOD :BAD)) (:METHOD ((X T)) X))
;; Loading (DEFTEST CALL-NEXT-METHOD.ERROR.2 (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CNM-ORDER-ERROR-GF-02 0)))) (ERROR NIL :ERROR))) :ERROR)
;; Loading (LOAD "compute-applicable-methods.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/compute-applicable-methods.lsp C0CFB837>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFGENERIC CAM-GF-01 (X Y))
;; Loading (DEFPARAMETER *CAM-GF-01-METHOD1* (DEFMETHOD CAM-GF-01 ((X INTEGER) (Y INTEGER)) 1))
;; Loading (DEFPARAMETER *CAM-GF-01-METHOD2* (DEFMETHOD CAM-GF-01 ((X INTEGER) (Y T)) 2))
;; Loading (DEFPARAMETER *CAM-GF-01-METHOD3* (DEFMETHOD CAM-GF-01 ((X T) (Y INTEGER)) 3))
;; Loading (DEFPARAMETER *CAM-GF-01-METHOD4* (DEFMETHOD CAM-GF-01 ((X T) (Y T)) 4))
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.1 (LET ((METHODS (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-01) (LIST 1 2)))) (EQUALT METHODS (LIST *CAM-GF-01-METHOD1* *CAM-GF-01-METHOD2* *CAM-GF-01-METHOD3* *CAM-GF-01-METHOD4*))) T)
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.2 (LET ((METHODS (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-01) (LIST 1 (QUOTE X))))) (EQUALT METHODS (LIST *CAM-GF-01-METHOD2* *CAM-GF-01-METHOD4*))) T)
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.3 (LET ((METHODS (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-01) (LIST (QUOTE X) 10)))) (EQUALT METHODS (LIST *CAM-GF-01-METHOD3* *CAM-GF-01-METHOD4*))) T)
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.4 (LET ((METHODS (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-01) (LIST (QUOTE X) (QUOTE Y))))) (EQUALT METHODS (LIST *CAM-GF-01-METHOD4*))) T)
;; Loading (DEFGENERIC CAM-GF-02 (X))
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.5 (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-02) (QUOTE (1))) NIL)
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (REPORT-AND-IGNORE-ERRORS (DEFGENERIC CAM-GF-03 (X) (:METHOD-COMBINATION + :MOST-SPECIFIC-FIRST)) (DEFPARAMETER *CAM-GF-03-METHOD1* (DEFMETHOD CAM-GF-03 + ((X INTEGER)) 1)) (DEFPARAMETER *CAM-GF-03-METHOD2* (DEFMETHOD CAM-GF-03 + ((X RATIONAL)) 2)) (DEFPARAMETER *CAM-GF-03-METHOD3* (DEFMETHOD CAM-GF-03 + ((X REAL)) 4)) (DEFPARAMETER *CAM-GF-03-METHOD4* (DEFMETHOD CAM-GF-03 + ((X NUMBER)) 8)) (DEFPARAMETER *CAM-GF-03-METHOD5* (DEFMETHOD CAM-GF-03 + ((X T)) 16))))
#<Simple-Error Unknown &KEY argument :METHOD-COMBINATION. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).>
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.6 (EQUALT (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-03) (LIST 0)) (LIST *CAM-GF-03-METHOD1* *CAM-GF-03-METHOD2* *CAM-GF-03-METHOD3* *CAM-GF-03-METHOD4* *CAM-GF-03-METHOD5*)) T)
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (REPORT-AND-IGNORE-ERRORS (DEFGENERIC CAM-GF-04 (X) (:METHOD-COMBINATION + :MOST-SPECIFIC-LAST)) (DEFPARAMETER *CAM-GF-04-METHOD1* (DEFMETHOD CAM-GF-04 + ((X INTEGER)) 1)) (DEFPARAMETER *CAM-GF-04-METHOD2* (DEFMETHOD CAM-GF-04 + ((X RATIONAL)) 2)) (DEFPARAMETER *CAM-GF-04-METHOD3* (DEFMETHOD CAM-GF-04 + ((X REAL)) 4)) (DEFPARAMETER *CAM-GF-04-METHOD4* (DEFMETHOD CAM-GF-04 + ((X NUMBER)) 8)) (DEFPARAMETER *CAM-GF-04-METHOD5* (DEFMETHOD CAM-GF-04 + ((X T)) 16))))
#<Simple-Error Unknown &KEY argument :METHOD-COMBINATION. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).>
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.7 (EQUALT (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-04) (LIST 0)) (LIST *CAM-GF-04-METHOD1* *CAM-GF-04-METHOD2* *CAM-GF-04-METHOD3* *CAM-GF-04-METHOD4* *CAM-GF-04-METHOD5*)) T)
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.ERROR.1 (SIGNALS-ERROR (COMPUTE-APPLICABLE-METHODS) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.ERROR.2 (SIGNALS-ERROR (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-01)) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPUTE-APPLICABLE-METHODS.ERROR.3 (SIGNALS-ERROR (COMPUTE-APPLICABLE-METHODS (FUNCTION CAM-GF-01) (QUOTE (1 2)) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "find-method.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/find-method.lsp C0DE3377>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (REPORT-AND-IGNORE-ERRORS (DEFGENERIC FIND-METHOD-GF-01 (X))) (REPORT-AND-IGNORE-ERRORS (DEFPARAMETER *FIND-METHOD-GF-01-METHOD1* (DEFMETHOD FIND-METHOD-GF-01 ((X INTEGER)) (QUOTE A)))) (REPORT-AND-IGNORE-ERRORS (DEFPARAMETER *FIND-METHOD-GF-01-METHOD2* (DEFMETHOD FIND-METHOD-GF-01 ((X RATIONAL)) (QUOTE B)))) (REPORT-AND-IGNORE-ERRORS (DEFPARAMETER *FIND-METHOD-GF-01-METHOD3* (DEFMETHOD FIND-METHOD-GF-01 ((X REAL)) (QUOTE C)))) (REPORT-AND-IGNORE-ERRORS (DEFPARAMETER *FIND-METHOD-GF-01-METHOD4* (DEFMETHOD FIND-METHOD-GF-01 ((X T)) (QUOTE D)))))
#<Simple-Error No class named RATIONAL.>
#<Simple-Error No class named REAL.>
;; Loading (DEFTEST FIND-METHOD.1 (EQT (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE INTEGER)))) *FIND-METHOD-GF-01-METHOD1*) T)
;; Loading (DEFTEST FIND-METHOD.2 (EQT (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE RATIONAL)))) *FIND-METHOD-GF-01-METHOD2*) T)
;; Loading (DEFTEST FIND-METHOD.3 (EQT (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE REAL)))) *FIND-METHOD-GF-01-METHOD3*) T)
;; Loading (DEFTEST FIND-METHOD.4 (EQT (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS T))) *FIND-METHOD-GF-01-METHOD4*) T)
;; Loading (DEFTEST FIND-METHOD.5 (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) (LIST :AROUND) (LIST (FIND-CLASS T)) NIL) NIL)
;; Loading (DEFTEST FIND-METHOD.6 (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) (LIST :AFTER) (LIST (FIND-CLASS (QUOTE INTEGER))) NIL) NIL)
;; Loading (DEFTEST FIND-METHOD.7 (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) (LIST :BEFORE) (LIST (FIND-CLASS (QUOTE REAL))) NIL) NIL)
;; Loading (DEFGENERIC FIND-METHOD-GF-02 (X))
;; Loading (DEFPARAMETER *FIND-METHOD-GF-02-METHOD1* (DEFMETHOD FIND-METHOD-GF-02 ((X (EQL 1234567890))) (QUOTE A)))
;; Loading (DEFPARAMETER *FIND-METHOD-02-METHOD2-VALUE* (LIST (QUOTE A)))
;; Loading (DEFPARAMETER *FIND-METHOD-GF-02-METHOD2* (DEFMETHOD FIND-METHOD-GF-02 ((X (EQL *FIND-METHOD-02-METHOD2-VALUE*))) (QUOTE B)))
;; Loading (DEFTEST FIND-METHOD.8 (EQT (FIND-METHOD (FUNCTION FIND-METHOD-GF-02) NIL (LIST (QUOTE (EQL 1234567890)))) *FIND-METHOD-GF-02-METHOD1*) T)
;; Loading (DEFTEST FIND-METHOD.9 (EQT (FIND-METHOD (FUNCTION FIND-METHOD-GF-02) NIL (LIST (LIST (QUOTE EQL) *FIND-METHOD-02-METHOD2-VALUE*))) *FIND-METHOD-GF-02-METHOD2*) T)
;; Loading (DEFTEST FIND-METHOD.ERROR.1 (SIGNALS-ERROR (FIND-METHOD) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-METHOD.ERROR.2 (SIGNALS-ERROR (FIND-METHOD (FUNCTION FIND-METHOD-GF-01)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-METHOD.ERROR.3 (SIGNALS-ERROR (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-METHOD.ERROR.4 (SIGNALS-ERROR (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE INTEGER))) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-METHOD.ERROR.5 (HANDLER-CASE (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE SYMBOL)))) (ERROR NIL :ERROR)) :ERROR)
;; Loading (DEFTEST FIND-METHOD.ERROR.6 (HANDLER-CASE (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE SYMBOL))) (QUOTE X)) (ERROR NIL :ERROR)) :ERROR)
;; Loading (DEFTEST FIND-METHOD.ERROR.7 (HANDLER-CASE (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL NIL) (ERROR NIL :ERROR)) :ERROR)
;; Loading (DEFTEST FIND-METHOD.ERROR.8 (HANDLER-CASE (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE INTEGER)) (FIND-CLASS T))) (ERROR NIL :ERROR)) :ERROR)
;; Loading (DEFTEST FIND-METHOD.ERROR.9 (HANDLER-CASE (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL NIL NIL) (ERROR NIL :ERROR)) :ERROR)
;; Loading (DEFTEST FIND-METHOD.ERROR.10 (HANDLER-CASE (FIND-METHOD (FUNCTION FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE INTEGER)) (FIND-CLASS T)) NIL) (ERROR NIL :ERROR)) :ERROR)
;; Loading (LOAD "add-method.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/add-method.lsp C0EDAE47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFGENERIC ADD-METHOD-GF-01 (X) (:METHOD ((X T)) (QUOTE A)))
;; Loading (DEFGENERIC ADD-METHOD-GF-02 (X))
;; Loading (DEFTEST ADD-METHOD.ERROR.1 (LET ((METHOD (FIND-METHOD (FUNCTION ADD-METHOD-GF-01) NIL (LIST (FIND-CLASS T))))) (HANDLER-CASE (ADD-METHOD (FUNCTION ADD-METHOD-GF-02) METHOD) (ERROR NIL :ERROR))) :ERROR)
;; Loading (DEFTEST ADD-METHOD.ERROR.2 (LET* ((GF (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-03 (X) (:METHOD ((X T)) (QUOTE A)))))) (METHOD (FIND-METHOD (FUNCTION ADD-METHOD-GF-03) NIL (LIST (FIND-CLASS T)))) (GF2 (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-04 (X Y)))))) (HANDLER-CASE (ADD-METHOD GF2 METHOD) (ERROR NIL :ERROR))) :ERROR)
;; Loading (DEFTEST ADD-METHOD.ERROR.3 (LET* ((GF (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-05 (X &OPTIONAL Y) (:METHOD ((X T) &OPTIONAL Y) (QUOTE A)))))) (METHOD (FIND-METHOD (FUNCTION ADD-METHOD-GF-05) NIL (LIST (FIND-CLASS T)))) (GF2 (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-06 (X Y)))))) (HANDLER-CASE (ADD-METHOD GF2 METHOD) (ERROR NIL :ERROR))) :ERROR)
;; Loading (DEFTEST ADD-METHOD.ERROR.4 (SIGNALS-ERROR (ADD-METHOD) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADD-METHOD.ERROR.5 (SIGNALS-ERROR (ADD-METHOD (FUNCTION ADD-METHOD-GF-01)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADD-METHOD.ERROR.6 (SIGNALS-ERROR (LET* ((GF (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-07 (X) (:METHOD ((X T)) (QUOTE A)))))) (METHOD (FIND-METHOD (FUNCTION ADD-METHOD-GF-07) NIL (LIST (FIND-CLASS T)))) (GF2 (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-08 (X)))))) (REMOVE-METHOD GF METHOD) (ADD-METHOD GF2 METHOD NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADD-METHOD.ERROR.7 (LET* ((GF (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-09 (X Y) (:METHOD ((X T) (Y T)) (QUOTE A)))))) (METHOD (FIND-METHOD (FUNCTION ADD-METHOD-GF-09) NIL (LIST (FIND-CLASS T) (FIND-CLASS T)))) (GF2 (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-10 (X &OPTIONAL Y)))))) (REMOVE-METHOD GF METHOD) (HANDLER-CASE (ADD-METHOD GF2 METHOD) (ERROR NIL :ERROR))) :ERROR)
;; Loading (DEFTEST ADD-METHOD.ERROR.8 (LET* ((GF (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-11 (X &KEY Y) (:METHOD ((X T) &KEY Y) (QUOTE A)))))) (METHOD (FIND-METHOD (FUNCTION ADD-METHOD-GF-11) NIL (LIST (FIND-CLASS T)))) (GF2 (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-12 (X)))))) (REMOVE-METHOD GF METHOD) (HANDLER-CASE (ADD-METHOD GF2 METHOD) (ERROR NIL :ERROR))) :ERROR)
;; Loading (DEFTEST ADD-METHOD.1 (LET* ((GF (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-13 (X) (:METHOD ((X INTEGER)) (QUOTE A)) (:METHOD ((X T)) (QUOTE B)))))) (METHOD (FIND-METHOD (FUNCTION ADD-METHOD-GF-13) NIL (LIST (FIND-CLASS (QUOTE INTEGER))))) (GF2 (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-14 (X)))))) (DECLARE (TYPE GENERIC-FUNCTION GF GF2)) (VALUES (FUNCALL GF 0) (FUNCALL GF (QUOTE X)) (EQT GF (REMOVE-METHOD GF METHOD)) (EQT GF2 (ADD-METHOD GF2 METHOD)) (FUNCALL GF 0) (FUNCALL GF (QUOTE X)) (FUNCALL GF2 0))) A B T T B B A)
;; Loading (DEFTEST ADD-METHOD.2 (LET* ((SPECIALIZERS (LIST (FIND-CLASS (QUOTE INTEGER)))) (GF (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-15 (X) (:METHOD ((X INTEGER)) (QUOTE A)) (:METHOD ((X T)) (QUOTE B)))))) (METHOD (FIND-METHOD GF NIL SPECIALIZERS)) (GF2 (EVAL (QUOTE (DEFGENERIC ADD-METHOD-GF-16 (X) (:METHOD ((X INTEGER)) (QUOTE C)) (:METHOD ((X T)) (QUOTE D)))))) (METHOD2 (FIND-METHOD GF2 NIL SPECIALIZERS))) (DECLARE (TYPE GENERIC-FUNCTION GF GF2)) (VALUES (FUNCALL GF 0) (FUNCALL GF (QUOTE X)) (FUNCALL GF2 0) (FUNCALL GF2 (QUOTE X)) (EQT GF (REMOVE-METHOD GF METHOD)) (EQT GF2 (ADD-METHOD GF2 METHOD)) (EQT METHOD (FIND-METHOD GF2 NIL SPECIALIZERS)) (EQT METHOD2 (FIND-METHOD GF2 NIL SPECIALIZERS)) (FUNCALL GF 0) (FUNCALL GF (QUOTE X)) (FUNCALL GF2 0) (FUNCALL GF2 (QUOTE X)))) A B C D T T T NIL B B A D)
;; Loading (LOAD "class-name.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/class-name.lsp C0FCC767>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CLASS-NAME.1 (CLASS-NAME (FIND-CLASS (QUOTE SYMBOL))) SYMBOL)
;; Loading (DEFCLASS CLASS-NAME-CLASS-01 NIL (A B C))
;; Loading (REPORT-AND-IGNORE-ERRORS (EVAL (QUOTE (DEFMETHOD CLASS-NAME ((X CLASS-NAME-CLASS-01)) (QUOTE SILLY)))))
#<Simple-Error No generic function named CLASS-NAME.>
;; Loading (DEFTEST CLASS-NAME.2 (CLASS-NAME (MAKE-INSTANCE (QUOTE CLASS-NAME-CLASS-01))) SILLY)
;; Loading (DEFTEST SETF-CLASS-NAME.1 (TYPEP* (FUNCTION (SETF CLASS-NAME)) (QUOTE STANDARD-GENERIC-FUNCTION)) T)
;; Loading (DEFTEST SETF-CLASS-NAME.2 (LET ((SYM (GENSYM)) (NEWSYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (A B C)))) (LET ((CLASS (FIND-CLASS SYM))) (VALUES (EQLT (CLASS-NAME CLASS) SYM) (EQUALT (MULTIPLE-VALUE-LIST (SETF (CLASS-NAME (FIND-CLASS SYM)) NEWSYM)) (LIST NEWSYM)) (EQLT NEWSYM (CLASS-NAME CLASS))))) T T T)
;; Loading (DEFTEST CLASS-NAME.ERROR.1 (SIGNALS-ERROR (CLASS-NAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLASS-NAME.ERROR.2 (SIGNALS-ERROR (CLASS-NAME (FIND-CLASS (QUOTE SYMBOL)) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "class-of.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/class-of.lsp C1050697>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CLASS-OF.ERROR.1 (SIGNALS-ERROR (CLASS-OF) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLASS-OF.ERROR.2 (SIGNALS-ERROR (CLASS-OF NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "unbound-slot.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/unbound-slot.lsp C1075D27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFCLASS UBS-CLASS-01 NIL ((A :INITARG :A)))
;; Loading (DEFTEST UNBOUND-SLOT.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE UBS-CLASS-01)))) (HANDLER-CASE (SLOT-VALUE OBJ (QUOTE A)) (UNBOUND-SLOT (C) (VALUES (TYPEP* C (QUOTE CELL-ERROR)) (EQT (UNBOUND-SLOT-INSTANCE C) OBJ) (CELL-ERROR-NAME C))))) T T A)
;; Loading (DEFCLASS UBS-CLASS-02 NIL ((B :ALLOCATION :CLASS)))
;; Loading (DEFTEST UNBOUND-SLOT.2 (LET ((OBJ (MAKE-INSTANCE (QUOTE UBS-CLASS-02)))) (HANDLER-CASE (SLOT-VALUE OBJ (QUOTE B)) (UNBOUND-SLOT (C) (VALUES (TYPEP* C (QUOTE CELL-ERROR)) (EQT (UNBOUND-SLOT-INSTANCE C) OBJ) (CELL-ERROR-NAME C))))) T T B)
;; Loading (LOAD "defmethod.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defmethod.lsp C10C00C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DEFMETHOD.1 (LET ((SYM (GENSYM))) (VALUES (TYPEP* (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) (X) (LIST X)))) (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1))) T T (1))
;; Loading (DEFTEST DEFMETHOD.2 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X INTEGER)) (LIST X)))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1))) T T (1))
;; Loading (DEFTEST DEFMETHOD.3 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X 0)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X (EQL (INCF X)))) (LIST X))))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1) (FUNCALL SYM 1))) T T (1) (1))
;; Loading (DEFTEST DEFMETHOD.4 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)) ((X T) (Y CONS)) (SETF (CAR Y) X)))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (FBOUNDP SYM) (TYPEP* (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (QUOTE STANDARD-GENERIC-FUNCTION)) (LET ((X (CONS 1 2))) (LIST (FUNCALL (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) 3 X) X)))) T NIL T (3 (3 . 2)))
;; Loading (DEFTEST DEFMETHOD.5 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X INTEGER)) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA SYM) (LIST X))))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1))) T T (1))
;; Loading (DEFTEST DEFMETHOD.6 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)) ((X T) (Y CONS)) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA SYM) (SETF (CAR Y) X))))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (FBOUNDP SYM) (TYPEP* (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (QUOTE STANDARD-GENERIC-FUNCTION)) (LET ((X (CONS 1 2))) (LIST (FUNCALL (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) 3 X) X)))) T NIL T (3 (3 . 2)))
;; Loading (DEFTEST DEFMETHOD.7 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X INTEGER) &AUX (Y (LIST X))) Y))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1))) T T (1))
;; Loading (DEFTEST DEFMETHOD.8 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X INTEGER) &KEY Z) (LIST X Z)))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1) (FUNCALL SYM 2 :Z 3) (FUNCALL SYM 4 :ALLOW-OTHER-KEYS NIL) (FUNCALL SYM 5 :ALLOW-OTHER-KEYS T :BOGUS 17) (FUNCALL SYM 6 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BOGUS 17))) T T (1 NIL) (2 3) (4 NIL) (5 NIL) (6 NIL))
;; Loading (DEFTEST DEFMETHOD.9 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X INTEGER) &KEY (Z :MISSING)) (LIST X Z)))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1) (FUNCALL SYM 2 :Z 3) (FUNCALL SYM 4 :ALLOW-OTHER-KEYS NIL))) T T (1 :MISSING) (2 3) (4 :MISSING))
;; Loading (DEFTEST DEFMETHOD.10 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X INTEGER) &KEY (Z :MISSING Z-P)) (LIST X Z (NOTNOT Z-P))))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1) (FUNCALL SYM 2 :Z 3) (FUNCALL SYM 4 :ALLOW-OTHER-KEYS NIL))) T T (1 :MISSING NIL) (2 3 T) (4 :MISSING NIL))
;; Loading (DEFTEST DEFMETHOD.11 (LET* ((SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X INTEGER) &REST Z) (LIST X Z)))))) (VALUES (TYPEP* METHOD (QUOTE STANDARD-METHOD)) (TYPEP* (FDEFINITION SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL SYM 1) (FUNCALL SYM 2 3))) T T (1 NIL) (2 (3)))
;; Loading (DEFTEST DEFMETHOD.ERROR.1 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T)) X) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.2 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) (Y T) (Z T)) (LIST X Y Z)) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.3 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y &OPTIONAL Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) (Y T) (Z T)) (LIST X Y Z)) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.4 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y &OPTIONAL Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) (Y T) &OPTIONAL) (LIST X Y)) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.5 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X Y &OPTIONAL Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) (Y T) &OPTIONAL Z W) (LIST X Y Z W)) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.6 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X &REST Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T)) (LIST X)) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.7 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) &REST Z) (LIST X Z)) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.8 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X &KEY Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T)) (LIST X)) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.9 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) &KEY Z) (LIST X Z)) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.10 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X &KEY Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) &KEY) X) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.11 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X &KEY)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T)) X) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.12 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) &KEY) X) ERROR)))) T)
;; Loading (DEFTEST DEFMETHOD.ERROR.13 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T)) X)))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM)) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM) 1 2) PROGRAM-ERROR))))) T T)
;; Loading (DEFTEST DEFMETHOD.ERROR.14 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) &KEY) X)))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM)) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM) 1 2) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM) 1 :BOGUS T) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM) 1 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :BOGUS T) PROGRAM-ERROR))))) T T T T)
;; Loading (DEFTEST DEFMETHOD.ERROR.15 (LET ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T) &KEY Y) X)))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM) 1 :BOGUS T) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM) 1 :Y) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA SYM) 1 3 NIL) PROGRAM-ERROR))))) T T T)
;; Loading (LOAD "load-conditions.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-conditions.lsp C12ED2A7>
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (COMPILE-AND-LOAD "define-condition-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/define-condition-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN MAKE-DEF-COND-NAME (NAME &REST SUFFIXES) (INTERN (APPLY (FUNCTION CONCATENATE) (QUOTE STRING) (STRING NAME) "/" (MAPCAR (FUNCTION STRING) SUFFIXES)) :CL-TEST)).
;; Compiling form (DEFMACRO DEFINE-CONDITION-WITH-TESTS (NAME-SYMBOL PARENTS SLOT-SPECS &REST OPTIONS) "Create a condition and some associated tests." (ASSERT (SYMBOLP NAME-SYMBOL)) (DOLIST (PARENT PARENTS) (ASSERT (SYMBOLP PARENT))) (LET ((NAME (SYMBOL-NAME NAME-SYMBOL))) (SYSTEM.INTERNALS::BACKQUOTE (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (REPORT-AND-IGNORE-ERRORS (EVAL (QUOTE (DEFINE-CONDITION (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL) (SYSTEM.INTERNALS::BQ-COMMA PARENTS) (SYSTEM.INTERNALS::BQ-COMMA SLOT-SPECS) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN OPTIONS))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR PARENT IN (ADJOIN (QUOTE CONDITION) PARENTS) COLLECT (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "IS-SUBTYPE-OF/" PARENT)) (SUBTYPEP* (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA PARENT))) T T)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR PARENT IN (ADJOIN (QUOTE CONDITION) PARENTS) COLLECT (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "IS-SUBTYPE-OF-2/" PARENT)) (CHECK-ALL-SUBTYPEP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA PARENT))) NIL)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR PARENT IN (ADJOIN (QUOTE CONDITION) PARENTS) COLLECT (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "IS-NOT-SUPERTYPE-OF/" PARENT)) (SUBTYPEP* (QUOTE (SYSTEM.INTERNALS::BQ-COMMA PARENT)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL))) NIL T)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR PARENT IN (ADJOIN (QUOTE CONDITION) PARENTS) COLLECT (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "IS-A/" PARENT)) (LET ((C (MAKE-CONDITION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL))))) (NOTNOT-MV (TYPEP C (QUOTE (SYSTEM.INTERNALS::BQ-COMMA PARENT))))) T)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR PARENT IN (ADJOIN (QUOTE CONDITION) PARENTS) COLLECT (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "IS-SUBCLASS-OF/" PARENT)) (SUBTYPEP* (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL))) (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA PARENT)))) T T)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR PARENT IN (ADJOIN (QUOTE CONDITION) PARENTS) COLLECT (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "IS-NOT-SUPERCLASS-OF/" PARENT)) (SUBTYPEP* (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA PARENT))) (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL)))) NIL T)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR PARENT IN (ADJOIN (QUOTE CONDITION) PARENTS) COLLECT (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "IS-A-MEMBER-OF-CLASS/" PARENT)) (LET ((C (MAKE-CONDITION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL))))) (NOTNOT-MV (TYPEP C (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA PARENT)))))) T)))) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "HANDLER-CASE-1")) (LET ((C (MAKE-CONDITION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL))))) (HANDLER-CASE (NORMALLY (SIGNAL C)) ((SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL) (C1) (EQT C C1)))) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "HANDLER-CASE-2")) (LET ((C (MAKE-CONDITION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL))))) (HANDLER-CASE (NORMALLY (SIGNAL C)) (CONDITION (C1) (EQT C C1)))) T) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (SOME (FUNCTION (LAMBDA (CT) (SUBTYPEP CT (QUOTE ERROR)))) PARENTS) (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-DEF-COND-NAME NAME "HANDLER-CASE-3")) (LET ((C (MAKE-CONDITION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL))))) (HANDLER-CASE (NORMALLY (SIGNAL C)) (ERROR NIL NIL) ((SYSTEM.INTERNALS::BQ-COMMA NAME-SYMBOL) (C2) (EQT C C2)))) T))))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/define-condition-aux.llf 80FA98C7>
;; Loading (LOAD "condition.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/condition.lsp 8109B1D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CONDITION.1 (NOTNOT-MV (FIND-CLASS (QUOTE CONDITION) NIL)) T)
;; Loading (DEFPARAMETER *ALLOWED-CONDITION-INCLUSIONS* (QUOTE ((ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION) (CELL-ERROR ERROR SERIOUS-CONDITION CONDITION) (CONDITION) (CONTROL-ERROR ERROR SERIOUS-CONDITION CONDITION) (DIVISION-BY-ZERO ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION) (END-OF-FILE STREAM-ERROR ERROR SERIOUS-CONDITION CONDITION) (ERROR SERIOUS-CONDITION CONDITION) (FILE-ERROR ERROR SERIOUS-CONDITION CONDITION) (FLOATING-POINT-INEXACT ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION) (FLOATING-POINT-INVALID-OPERATION ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION) (FLOATING-POINT-OVERFLOW ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION) (FLOATING-POINT-UNDERFLOW ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION) (PACKAGE-ERROR ERROR SERIOUS-CONDITION CONDITION) (PARSE-ERROR ERROR SERIOUS-CONDITION CONDITION) (PRINT-NOT-READABLE ERROR SERIOUS-CONDITION CONDITION) (PROGRAM-ERROR ERROR SERIOUS-CONDITION CONDITION) (READER-ERROR PARSE-ERROR STREAM-ERROR ERROR SERIOUS-CONDITION CONDITION) (SERIOUS-CONDITION CONDITION) (SIMPLE-CONDITION CONDITION) (SIMPLE-ERROR SIMPLE-CONDITION ERROR SERIOUS-CONDITION CONDITION) (SIMPLE-TYPE-ERROR SIMPLE-CONDITION TYPE-ERROR ERROR SERIOUS-CONDITION CONDITION) (SIMPLE-WARNING SIMPLE-CONDITION WARNING CONDITION) (STORAGE-CONDITION SERIOUS-CONDITION CONDITION) (STREAM-ERROR ERROR SERIOUS-CONDITION CONDITION) (STYLE-WARNING WARNING CONDITION) (TYPE-ERROR ERROR SERIOUS-CONDITION CONDITION) (UNBOUND-SLOT CELL-ERROR ERROR SERIOUS-CONDITION CONDITION) (UNBOUND-VARIABLE CELL-ERROR ERROR SERIOUS-CONDITION CONDITION) (UNDEFINED-FUNCTION CELL-ERROR ERROR SERIOUS-CONDITION CONDITION) (WARNING CONDITION))))
;; Loading (DEFTEST CONDITION.2 (LOOP FOR (CND . SUPERS) IN *ALLOWED-CONDITION-INCLUSIONS* APPEND (LOOP FOR SUPER IN SUPERS UNLESS (SUBTYPEP CND SUPER) COLLECT (LIST CND SUPER))) NIL)
;; Loading (DEFTEST CONDITION.3 (LOOP FOR CNDS IN *ALLOWED-CONDITION-INCLUSIONS* FOR CND = (FIRST CNDS) APPEND (LOOP FOR SUPER IN (SET-DIFFERENCE *CONDITION-TYPES* CNDS) WHEN (SUBTYPEP CND SUPER) COLLECT (LIST CND SUPER))) NIL)
;; Loading (LOAD "cell-error-name.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cell-error-name.lsp 81151217>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CELL-ERROR-NAME.1 (HANDLER-CASE (EVAL (QUOTE MY-UNBOUND-VARIABLE)) (CELL-ERROR (C) (CELL-ERROR-NAME C))) MY-UNBOUND-VARIABLE)
;; Loading (DEFTEST CELL-ERROR-NAME.2 (HANDLER-CASE (EVAL (QUOTE (MY-UNDEFINED-FUNCTION))) (CELL-ERROR (C) (CELL-ERROR-NAME C))) MY-UNDEFINED-FUNCTION)
;; Loading (DEFTEST CELL-ERROR-NAME.3 (CELL-ERROR-NAME (MAKE-CONDITION (QUOTE UNBOUND-VARIABLE) :NAME (QUOTE X))) X)
;; Loading (DEFTEST CELL-ERROR-NAME.4 (CELL-ERROR-NAME (MAKE-CONDITION (QUOTE UNDEFINED-FUNCTION) :NAME (QUOTE F))) F)
;; Loading (DEFTEST CELL-ERROR-NAME.5 (CELL-ERROR-NAME (MAKE-CONDITION (QUOTE UNBOUND-SLOT) :NAME (QUOTE S))) S)
;; Loading (DEFTEST CELL-ERROR-NAME.6 (LET ((I 0)) (VALUES (CELL-ERROR-NAME (PROGN (INCF I) (MAKE-CONDITION (QUOTE UNBOUND-SLOT) :NAME (QUOTE S)))) I)) S 1)
;; Loading (DEFTEST CELL-ERROR-NAME.ERROR.1 (SIGNALS-ERROR (CELL-ERROR-NAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST CELL-ERROR-NAME.ERROR.2 (SIGNALS-ERROR (CELL-ERROR-NAME (MAKE-CONDITION (QUOTE UNBOUND-VARIABLE) :NAME (QUOTE FOO)) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "assert.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/assert.lsp 811A57E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ASSERT.1 (ASSERT T) NIL)
;; Loading (DEFTEST ASSERT.2 (ASSERT T NIL) NIL)
;; Loading (DEFTEST ASSERT.3 (LET ((X NIL)) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (SETQ X 17) (LET ((R (FIND-RESTART (QUOTE CONTINUE) C))) (WHEN R (INVOKE-RESTART R))))))) (ASSERT X) X)) 17)
;; Loading (DEFTEST ASSERT.3A (LET ((X NIL)) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (SETQ X 17) (CONTINUE C))))) (ASSERT X) X)) 17)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST ASSERT.4 (LET (X) (ASSERT T (X))) NIL)
;; Loading (DEFTEST ASSERT.5 (LET ((X (CONS (QUOTE A) (QUOTE B)))) (ASSERT T ((CAR X) (CDR X)))) NIL)
;; Loading (DEFTEST ASSERT.6 (LET ((X (VECTOR (QUOTE A) (QUOTE B) (QUOTE C)))) (ASSERT T ((AREF X 0) (AREF X 1) (AREF X 2)) "Vector x has value: ~A." X)) NIL)
;; Loading (DEFTEST ASSERT.7 (LET ((X NIL)) (HANDLER-BIND ((SIMPLE-ERROR (FUNCTION (LAMBDA (C) (SETQ X 17) (CONTINUE C))))) (ASSERT X NIL (QUOTE SIMPLE-ERROR)) X)) 17)
;; Loading (DEFTEST ASSERT.8 (LET ((X 0)) (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (INCF X) (CONTINUE C))))) (ASSERT (> X 5) NIL (QUOTE TYPE-ERROR)) X)) 6)
;; Loading (DEFTEST ASSERT.9 (LET ((X 0)) (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (INCF X) (CONTINUE))))) (ASSERT (> X 5) NIL (QUOTE TYPE-ERROR)) X)) 6)
;; Loading (DEFTEST ASSERT.10 (MACROLET ((%M (Z) Z)) (ASSERT (EXPAND-IN-CURRENT-ENV (%M T)))) NIL)
;; Loading (DEFTEST ASSERT.11 (MACROLET ((%M (Z) Z)) (ASSERT (EXPAND-IN-CURRENT-ENV (%M T)) NIL "Foo!")) NIL)
;; Loading (LOAD "error.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/error.lsp C0D486F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ERROR.1 (LET ((FMT "Error")) (HANDLER-CASE (ERROR FMT) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST ERROR.2 (LET* ((FMT "Error") (CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL FMT))) (HANDLER-CASE (ERROR CND) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST ERROR.3 (LET ((FMT "Error")) (HANDLER-CASE (ERROR (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL FMT) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST ERROR.4 (LET ((FMT "Error: ~A")) (HANDLER-CASE (ERROR FMT 10) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT 10)))) T)
;; Loading (DEFTEST ERROR.5 (LET ((FMT (FORMATTER "Error"))) (HANDLER-CASE (ERROR FMT) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST ERROR.6 (HANDLER-CASE (ERROR (QUOTE SIMPLE-CONDITION)) (ERROR (C) (DECLARE (IGNORE C)) :WRONG) (SIMPLE-CONDITION (C) (DECLARE (IGNORE C)) :RIGHT)) :RIGHT)
;; Loading (DEFTEST ERROR.7 (HANDLER-CASE (ERROR (QUOTE SIMPLE-WARNING)) (ERROR (C) (DECLARE (IGNORE C)) :WRONG) (SIMPLE-WARNING (C) (DECLARE (IGNORE C)) :RIGHT) (CONDITION (C) (DECLARE (IGNORE C)) :WRONG2)) :RIGHT)
;; Loading (DEFTEST ERROR.8 (LET ((FMT "Boo!")) (HANDLER-CASE (ERROR (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL FMT) (SIMPLE-WARNING (C) (FROB-SIMPLE-WARNING C FMT)))) T)
;; Loading (DEFTEST ERROR.9 (LET ((FMT (FORMATTER "Boo!"))) (HANDLER-CASE (ERROR (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL FMT) (SIMPLE-WARNING (C) (FROB-SIMPLE-WARNING C FMT)))) T)
;; Loading (DEFTEST ERROR.10 (LET ((FMT (FORMATTER "Error"))) (HANDLER-CASE (ERROR (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL FMT) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST ERROR.11 (LET ((FMT (FORMATTER "Error"))) (HANDLER-CASE (ERROR FMT) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST ERROR.12 (LET* ((FMT (FORMATTER "Error")) (CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL FMT))) (HANDLER-CASE (ERROR CND) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (LOAD "cerror.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cerror.lsp C0DD7967>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CERROR.1 (LET ((FMT "Cerror")) (HANDLER-CASE (CERROR "Keep going." FMT) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST CERROR.2 (LET* ((FMT "Cerror") (CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL FMT))) (HANDLER-CASE (CERROR "Continue on." CND) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST CERROR.2A (LET* ((FMT (FORMATTER "Cerror")) (CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL FMT))) (HANDLER-CASE (CERROR "Continue on." CND) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST CERROR.3 (LET ((FMT "Cerror")) (HANDLER-CASE (CERROR "Continue" (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL FMT) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST CERROR.4 (LET ((FMT "Cerror: ~A")) (HANDLER-CASE (CERROR "On on" FMT 10) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT 10)))) T)
;; Loading (DEFTEST CERROR.4A (LET ((FMT (FORMATTER "Cerror: ~A"))) (HANDLER-CASE (CERROR "On on" FMT 10) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT 10)))) T)
;; Loading (DEFTEST CERROR.5 (LET ((FMT (FORMATTER "Cerror"))) (HANDLER-CASE (CERROR "Keep going." FMT) (SIMPLE-ERROR (C) (FROB-SIMPLE-ERROR C FMT)))) T)
;; Loading (DEFTEST CERROR.6 (HANDLER-BIND ((SIMPLE-ERROR (FUNCTION (LAMBDA (C) (CONTINUE C))))) (PROGN (CERROR "Wooo" (QUOTE SIMPLE-ERROR)) 10)) 10)
;; Loading (DEFTEST CERROR.ERROR.1 (SIGNALS-ERROR (CERROR) PROGRAM-ERROR) T)
;; Loading (DEFTEST CERROR.ERROR.2 (SIGNALS-ERROR (CERROR "foo") PROGRAM-ERROR) T)
;; Loading (LOAD "check-type.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/check-type.lsp C0E4A387>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CHECK-TYPE.1 (LET ((X (QUOTE A))) (VALUES (CHECK-TYPE X SYMBOL) X)) NIL A)
;; Loading (DEFTEST CHECK-TYPE.2 (SIGNALS-TYPE-ERROR X (QUOTE A) (CHECK-TYPE X INTEGER)) T)
;; Loading (DEFTEST CHECK-TYPE.8 (LET ((X 10)) (MACROLET ((%M (Z) Z)) (CHECK-TYPE (EXPAND-IN-CURRENT-ENV (%M X)) (INTEGER 8 13)))) NIL)
;; Loading (DEFTEST CHECK-TYPE.9 (LET ((X 10)) (MACROLET ((%M (Z) Z)) (CHECK-TYPE X (INTEGER 9 12) (EXPAND-IN-CURRENT-ENV (%M "Foo!"))))) NIL)
;; Loading (LOAD "warn.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/warn.lsp C0EB52D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WARN.1 (LET ((WARNED NIL)) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE SIMPLE-WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN "This is a warning")) WARNED))) (NIL) T)
;; Loading (DEFTEST WARN.3 (WITH-OUTPUT-TO-STRING (*ERROR-OUTPUT*) (LET ((WARNED NIL)) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE SIMPLE-WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (WARN "Foo!")))) "")
;; Loading (DEFTEST WARN.4 (LET ((STR (WITH-OUTPUT-TO-STRING (*ERROR-OUTPUT*) (WARN "Foo!")))) (NOT (STRING= STR ""))) T)
;; Loading (DEFTEST WARN.5 (LET ((WARNED NIL)) (HANDLER-BIND ((SIMPLE-WARNING (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE SIMPLE-WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN "This is a warning")) WARNED))) (NIL) T)
;; Loading (DEFTEST WARN.6 (LET ((WARNED NIL)) (HANDLER-BIND ((SIMPLE-CONDITION (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE SIMPLE-WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN "This is a warning")) WARNED))) (NIL) T)
;; Loading (DEFTEST WARN.7 (LET ((WARNED NIL)) (HANDLER-BIND ((CONDITION (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE SIMPLE-WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN "This is a warning")) WARNED))) (NIL) T)
;; Loading (DEFTEST WARN.8 (LET ((WARNED NIL)) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE SIMPLE-WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "Foo!")) WARNED))) (NIL) T)
;; Loading (DEFTEST WARN.9 (LET ((WARNED NIL)) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN (QUOTE WARNING))) WARNED))) (NIL) T)
;; Loading (DEFTEST WARN.10 (LET ((WARNED NIL)) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE SIMPLE-WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN (MAKE-CONDITION (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "Foo!"))) WARNED))) (NIL) T)
;; Loading (DEFTEST WARN.11 (LET ((WARNED NIL)) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN (MAKE-CONDITION (QUOTE WARNING)))) WARNED))) (NIL) T)
;; Loading (DEFTEST WARN.12 (SIGNALS-ERROR (WARN (QUOTE CONDITION)) TYPE-ERROR) T)
;; Loading (DEFTEST WARN.13 (SIGNALS-ERROR (WARN (QUOTE SIMPLE-CONDITION)) TYPE-ERROR) T)
;; Loading (DEFTEST WARN.14 (SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-WARNING)) :FORMAT-CONTROL "Foo") TYPE-ERROR) T)
;; Loading (DEFTEST WARN.15 (SIGNALS-ERROR (WARN) PROGRAM-ERROR) T)
;; Loading (DEFTEST WARN.16 (SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE CONDITION))) TYPE-ERROR) T)
;; Loading (DEFTEST WARN.17 (SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-CONDITION))) TYPE-ERROR) T)
;; Loading (DEFTEST WARN.18 (SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-ERROR))) TYPE-ERROR) T)
;; Loading (DEFTEST WARN.19 (LET ((WARNED NIL)) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (C) (ASSERT (TYPEP C (QUOTE SIMPLE-WARNING))) (SETF WARNED T) (MUFFLE-WARNING C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN (MAKE-CONDITION (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL (FORMATTER "Foo!")))) WARNED))) (NIL) T)
;; Loading (LOAD "invoke-debugger.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/invoke-debugger.lsp C0FA1A57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST INVOKE-DEBUGGER.1 (BLOCK DONE (LET (FN (CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) (SETQ FN (FUNCTION (LAMBDA (C HOOK) (RETURN-FROM DONE (AND (NULL *DEBUGGER-HOOK*) (EQT HOOK FN) (EQT CND C) (QUOTE GOOD)))))) (LET ((*DEBUGGER-HOOK* FN)) (INVOKE-DEBUGGER CND))) (QUOTE BAD)) GOOD)
;; Loading (DEFTEST INVOKE-DEBUGGER.ERROR.1 (SIGNALS-ERROR (BLOCK DONE (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (&REST ARGS) (DECLARE (IGNORE ARGS)) (RETURN-FROM DONE (QUOTE BAD)))))) (INVOKE-DEBUGGER))) PROGRAM-ERROR) T)
;; Loading (DEFTEST INVOKE-DEBUGGER.ERROR.2 (SIGNALS-ERROR (BLOCK DONE (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (&REST ARGS) (DECLARE (IGNORE ARGS)) (RETURN-FROM DONE (QUOTE BAD)))))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)) NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST INVOKE-DEBUGGER.ERROR.3 (SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA NIL NIL)))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR) T)
;; Loading (DEFTEST INVOKE-DEBUGGER.ERROR.4 (SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (C) C)))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR) T)
;; Loading (DEFTEST INVOKE-DEBUGGER.ERROR.5 (SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (C HOOK X) (LIST C HOOK X))))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR) T)
;; Loading (LOAD "handler-bind.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/handler-bind.lsp C1010C97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HANDLER-BIND.1 (HANDLER-BIND NIL) NIL)
;; Loading (DEFTEST HANDLER-BIND.2 (HANDLER-BIND NIL (VALUES)))
;; Loading (DEFTEST HANDLER-BIND.3 (HANDLER-BIND NIL (VALUES 1 2 3)) 1 2 3)
;; Loading (DEFTEST HANDLER-BIND.4 (LET ((X 0)) (VALUES (HANDLER-BIND NIL (INCF X) (+ X 10)) X)) 11 1)
;; Loading (DEFTEST HANDLER-BIND.5 (BLOCK FOO (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (RETURN-FROM FOO (QUOTE GOOD)))))) (ERROR "an error"))) GOOD)
;; Loading (DEFUN HANDLER-BIND.7-HANDLER-FN (C) (DECLARE (IGNORE C)) (THROW (QUOTE FOO) (QUOTE GOOD)))
;; Loading (DEFTEST HANDLER-BIND.7 (CATCH (QUOTE FOO) (HANDLER-BIND ((SIMPLE-ERROR (FUNCTION HANDLER-BIND.7-HANDLER-FN))) (ERROR "simple error"))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.8 (CATCH (QUOTE FOO) (HANDLER-BIND ((SIMPLE-ERROR (QUOTE HANDLER-BIND.7-HANDLER-FN))) (ERROR "simple error"))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.9 (CATCH (QUOTE FOO) (HANDLER-BIND ((SIMPLE-ERROR #<System.Eval::Interpreted-Function HANDLER-BIND.7-HANDLER-FN 3E2E7BC>)) (ERROR "simple error"))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.10 (BLOCK DONE (FLET ((%FOO NIL (SIGNAL "A simple condition")) (%SUCCEED (C) (DECLARE (IGNORE C)) (RETURN-FROM DONE (QUOTE GOOD))) (%FAIL (C) (DECLARE (IGNORE C)) (RETURN-FROM DONE (QUOTE BAD)))) (HANDLER-BIND ((ERROR (FUNCTION %FAIL)) (SIMPLE-CONDITION (FUNCTION %SUCCEED))) (%FOO)))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.11 (BLOCK DONE (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) C))) (ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM DONE (QUOTE GOOD)))))) (ERROR "an error"))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.12 (BLOCK DONE (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM DONE (QUOTE GOOD)))))) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) C)))) (ERROR "an error")))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.13 (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (THROW (QUOTE DONE) (QUOTE GOOD)))))) (CATCH (QUOTE DONE) (ERROR "an error"))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.14 (CATCH (QUOTE DONE) (HANDLER-BIND ((SYMBOL (FUNCTION IDENTITY)) (ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (THROW (QUOTE DONE) (QUOTE GOOD)))))) (ERROR "an error"))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.15 (CATCH (QUOTE DONE) (HANDLER-BIND ((NIL (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (THROW (QUOTE DONE) (QUOTE BAD))))) (ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (THROW (QUOTE DONE) (QUOTE GOOD)))))) (ERROR "an error"))) GOOD)
;; Loading (DEFTEST HANDLER-BIND.16 (CATCH (QUOTE DONE) (HANDLER-BIND (((NOT ERROR) (FUNCTION IDENTITY)) (ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (THROW (QUOTE DONE) (QUOTE GOOD)))))) (ERROR "an error"))) GOOD)
;; Loading (LOAD "handler-case.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/handler-case.lsp C10D3907>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HANDLER-CASE.1 (HANDLER-CASE (ERROR "an error") (ERROR NIL T)) T)
;; Loading (DEFTEST HANDLER-CASE.2 (HANDLER-CASE (ERROR "an error") (WARNING NIL NIL) (ERROR NIL T)) T)
;; Loading (DEFTEST HANDLER-CASE.3 (HANDLER-CASE (ERROR "an error") (ERROR (C) (AND (TYPEP C (QUOTE ERROR)) T)) (ERROR NIL (QUOTE BAD)) (CONDITION NIL (QUOTE BAD2))) T)
;; Loading (DEFTEST HANDLER-CASE.4 (HANDLER-CASE (ERROR "an error") (WARNING (C) C) (ERROR (C) (AND (TYPEP C (QUOTE ERROR)) T)) (ERROR NIL (QUOTE BAD)) (CONDITION NIL (QUOTE BAD2))) T)
;; Loading (DEFTEST HANDLER-CASE.6 (HANDLER-CASE (VALUES) (ERROR NIL NIL)))
;; Loading (DEFTEST HANDLER-CASE.7 (HANDLER-CASE (QUOTE FOO) (CONDITION NIL (QUOTE BAR))) FOO)
;; Loading (DEFTEST HANDLER-CASE.9 (HANDLER-CASE (VALUES 1 2 3 4 5 6 7 8) (CONDITION NIL NIL)) 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST HANDLER-CASE.11 (LABELS ((%F NIL (DECLARE (SPECIAL *C*)) (AND (TYPEP *C* (QUOTE CONDITION)) T)) (%G NIL (LET ((*C* NIL)) (DECLARE (SPECIAL *C*)) (%H))) (%H NIL (HANDLER-CASE (ERROR "foo") (ERROR (*C*) (DECLARE (SPECIAL *C*)) (%F))))) (%G)) T)
;; Loading (DEFTEST HANDLER-CASE.12 (HANDLER-CASE (ERROR "foo") (NIL NIL NIL) (ERROR (C) (NOTNOT-MV (TYPEP C (QUOTE SIMPLE-ERROR))))) T)
;; Loading (DEFTEST HANDLER-CASE.13 (HANDLER-CASE (ERROR "foo") (ERROR (C) (VALUES))))
;; Loading (DEFTEST HANDLER-CASE.14 (HANDLER-CASE (ERROR "foo") (ERROR (C) (VALUES 1 2 3 4 5 6 7 8))) 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST HANDLER-CASE.15 (HANDLER-CASE (HANDLER-CASE (ERROR "foo") (WARNING NIL (QUOTE BAD))) (ERROR NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST HANDLER-CASE.16 (HANDLER-CASE (HANDLER-CASE (ERROR "foo") (ERROR NIL (QUOTE GOOD))) (ERROR NIL (QUOTE BAD))) GOOD)
;; Loading (DEFTEST HANDLER-CASE.17 (LET ((I 0)) (VALUES (HANDLER-CASE (HANDLER-CASE (ERROR "foo") (ERROR NIL (INCF I) (ERROR "bar"))) (ERROR NIL (QUOTE GOOD))) I)) GOOD 1)
;; Loading (DEFTEST HANDLER-CASE.18 (LET ((I 0)) (VALUES (HANDLER-CASE (HANDLER-CASE (ERROR "foo") (ERROR (C) (INCF I) (ERROR C))) (ERROR NIL (QUOTE GOOD))) I)) GOOD 1)
;; Loading (DEFTEST HANDLER-CASE.19 (HANDLER-CASE (ERROR "foo") (ERROR (C) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (TYPE CONDITION C)) (DECLARE (IGNORE C)) T)) T)
;; Loading (DEFTEST HANDLER-CASE.20 (HANDLER-CASE 10 (:NO-ERROR (X) (+ X 3))) 13)
;; Loading (DEFTEST HANDLER-CASE.21 (HANDLER-CASE (VALUES) (:NO-ERROR NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST HANDLER-CASE.22 (HANDLER-CASE (VALUES 1 2 3 4 5) (:NO-ERROR (A B C D E) (LIST E D C B A))) (5 4 3 2 1))
;; Loading (DEFTEST HANDLER-CASE.23 (SIGNALS-ERROR (HANDLER-CASE (VALUES 1 2) (:NO-ERROR (X) X)) PROGRAM-ERROR) T)
;; Loading (DEFTEST HANDLER-CASE.24 (SIGNALS-ERROR (HANDLER-CASE (VALUES) (:NO-ERROR (X) X)) PROGRAM-ERROR) T)
;; Loading (DEFTEST HANDLER-CASE.25 (HANDLER-CASE (HANDLER-CASE (VALUES) (ERROR NIL (QUOTE BAD)) (:NO-ERROR NIL (ERROR "foo"))) (ERROR NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST HANDLER-CASE.26 (HANDLER-CASE (VALUES 1 (QUOTE A) 1.0) (ERROR NIL (QUOTE BAD)) (:NO-ERROR (A B C) (DECLARE (TYPE INTEGER A)) (DECLARE (TYPE SYMBOL B)) (DECLARE (TYPE NUMBER C)) (DECLARE (IGNORE A C)) B)) A)
;; Loading (DEFTEST HANDLER-CASE.27 (HANDLER-CASE (ERROR "foo") (ERROR NIL)) NIL)
;; Loading (DEFTEST HANDLER-CASE.28 (HANDLER-CASE (ERROR "foo") (ERROR NIL (DECLARE (OPTIMIZE SPEED)))) NIL)
;; Loading (DEFTEST HANDLER-CASE.29 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (HANDLER-CASE NIL (:NO-ERROR (Z &AUX (Y X)) (DECLARE (SPECIAL X) (IGNORE Z)) Y)))) :GOOD)
;; Loading (LOAD "ignore-errors.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ignore-errors.lsp C11CCF77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST IGNORE-ERRORS.1 (IGNORE-ERRORS) NIL)
;; Loading (DEFTEST IGNORE-ERRORS.2 (IGNORE-ERRORS (QUOTE A)) A)
;; Loading (DEFTEST IGNORE-ERRORS.3 (IGNORE-ERRORS (VALUES 1 2 3 4 5 6 7 8)) 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST IGNORE-ERRORS.4 (MULTIPLE-VALUE-BIND (VAL COND) (IGNORE-ERRORS (ERROR "foo")) (AND (NULL VAL) (TYPEP COND (QUOTE SIMPLE-ERROR)) T)) T)
;; Loading (DEFTEST IGNORE-ERRORS.5 (HANDLER-CASE (IGNORE-ERRORS (SIGNAL "foo")) (CONDITION NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST IGNORE-ERRORS.6 (HANDLER-CASE (IGNORE-ERRORS (SIGNAL "foo")) (SIMPLE-CONDITION NIL (QUOTE GOOD))) GOOD)
;; Loading (LOAD "define-condition.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/define-condition.lsp C120A997>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-1 NIL NIL)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-2 (CONDITION) NIL)
;; Loading (DEFINE-CONDITION-WITH-TESTS #:CONDITION-3 NIL NIL)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-4 NIL ((SLOT1 :INITARG :SLOT1 :READER CONDITION-4/SLOT-1) (SLOT2 :INITARG :SLOT2 :READER CONDITION-4/SLOT-2)))
;; Loading (DEFTEST CONDITION-4-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-4) :SLOT1 (QUOTE A) :SLOT2 (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-4)) (EQLT (CONDITION-4/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-4/SLOT-2 C) (QUOTE B)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-5 NIL ((SLOT1 :INITARG :SLOT1 :INITFORM (QUOTE X) :READER CONDITION-5/SLOT-1) (SLOT2 :INITARG :SLOT2 :INITFORM (QUOTE Y) :READER CONDITION-5/SLOT-2)))
;; Loading (DEFTEST CONDITION-5-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-5) :SLOT1 (QUOTE A) :SLOT2 (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-5)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE B)))) T)
;; Loading (DEFTEST CONDITION-5-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-5) :SLOT1 (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-5)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE Y)))) T)
;; Loading (DEFTEST CONDITION-5-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-5) :SLOT2 (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-5)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE X)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE B)))) T)
;; Loading (DEFTEST CONDITION-5-SLOTS.4 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-5)))) (AND (TYPEP C (QUOTE CONDITION-5)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE X)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE Y)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-6 NIL ((SLOT1 :INITARG :SLOT1 :INITARG :BOTH-SLOTS :INITFORM (QUOTE X) :READER CONDITION-6/SLOT-1) (SLOT2 :INITARG :SLOT2 :INITARG :BOTH-SLOTS :INITFORM (QUOTE Y) :READER CONDITION-6/SLOT-2)))
;; Loading (DEFTEST CONDITION-6-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-6) :BOTH-SLOTS (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-6)) (EQLT (CONDITION-6/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-6/SLOT-2 C) (QUOTE A)))) T)
;; Loading (DEFTEST CONDITION-6-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-6)))) (AND (TYPEP C (QUOTE CONDITION-6)) (EQLT (CONDITION-6/SLOT-1 C) (QUOTE X)) (EQLT (CONDITION-6/SLOT-2 C) (QUOTE Y)))) T)
;; Loading (DEFTEST CONDITION-6-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-6) :SLOT1 (QUOTE A) :BOTH-SLOTS (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-6)) (EQLT (CONDITION-6/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-6/SLOT-2 C) (QUOTE B)))) T)
;; Loading (DEFTEST CONDITION-6-SLOTS.4 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-6) :SLOT2 (QUOTE B) :BOTH-SLOTS (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-6)) (EQLT (CONDITION-6/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-6/SLOT-2 C) (QUOTE B)))) T)
;; Loading (DEFTEST CONDITION-6-SLOTS.5 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-6) :BOTH-SLOTS (QUOTE A) :SLOT1 (QUOTE C) :SLOT2 (QUOTE D)))) (AND (TYPEP C (QUOTE CONDITION-6)) (EQLT (CONDITION-6/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-6/SLOT-2 C) (QUOTE A)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-7 NIL ((S :INITARG :I1 :INITARG :I2 :READER CONDITION-7/S)))
;; Loading (DEFTEST CONDITION-7-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-7) :I1 (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-7)) (EQLT (CONDITION-7/S C) (QUOTE A)))) T)
;; Loading (DEFTEST CONDITION-7-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-7) :I2 (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-7)) (EQLT (CONDITION-7/S C) (QUOTE A)))) T)
;; Loading (DEFTEST CONDITION-7-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-7) :I1 (QUOTE A) :I2 (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-7)) (EQLT (CONDITION-7/S C) (QUOTE A)))) T)
;; Loading (DEFTEST CONDITION-7-SLOTS.4 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-7) :I2 (QUOTE A) :I1 (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-7)) (EQLT (CONDITION-7/S C) (QUOTE A)))) T)
;; Loading (DEFPARAMETER *CONDITION-8-COUNTER* 0)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-8 NIL ((S :INITARG :I1 :INITFORM (INCF *CONDITION-8-COUNTER*) :READER CONDITION-8/S)))
;; Loading (DEFTEST CONDITION-8-SLOTS.1 (LET ((*CONDITION-8-COUNTER* 100)) (DECLARE (SPECIAL *CONDITION-8-COUNTER*)) (VALUES (CONDITION-8/S (MAKE-CONDITION (QUOTE CONDITION-8))) *CONDITION-8-COUNTER*)) 101 101)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-9 NIL ((S1 :INITARG :I1 :INITFORM 15 :READER CONDITION-9/S1) (S2 :INITARG :I2 :INITFORM 37 :READER CONDITION-9/S2)))
;; Loading (DEFTEST CONDITION-9-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-9)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-9))) (CONDITION-9/S1 C) (CONDITION-9/S2 C))) T 15 37)
;; Loading (DEFTEST CONDITION-9-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-9) :I1 3))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-9))) (CONDITION-9/S1 C) (CONDITION-9/S2 C))) T 3 37)
;; Loading (DEFTEST CONDITION-9-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-9) :I2 3))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-9))) (CONDITION-9/S1 C) (CONDITION-9/S2 C))) T 15 3)
;; Loading (DEFTEST CONDITION-9-SLOTS.4 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-9) :I2 3 :I2 8))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-9))) (CONDITION-9/S1 C) (CONDITION-9/S2 C))) T 15 3)
;; Loading (DEFTEST CONDITION-9-SLOTS.5 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-9) :I1 3 :I2 8))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-9))) (CONDITION-9/S1 C) (CONDITION-9/S2 C))) T 3 8)
;; Loading (DEFTEST CONDITION-9-SLOTS.6 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-9) :I1 3 :I2 8 :I1 100 :I2 500))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-9))) (CONDITION-9/S1 C) (CONDITION-9/S2 C))) T 3 8)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-14 NIL ((S1 :INITARG :I1 :TYPE FIXNUM :READER CONDITION-14/S1) (S2 :INITARG :I2 :TYPE T :READER CONDITION-14/S2)))
;; Loading (DEFTEST CONDITION-14-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-14) :I1 10))) (AND (TYPEP C (QUOTE CONDITION-14)) (CONDITION-14/S1 C))) 10)
;; Loading (DEFTEST CONDITION-14-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-14) :I2 (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-14)) (CONDITION-14/S2 C))) A)
;; Loading (DEFTEST CONDITION-14-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-14) :I1 10 :I2 (QUOTE H)))) (AND (TYPEP C (QUOTE CONDITION-14)) (EQLT (CONDITION-14/S1 C) 10) (CONDITION-14/S2 C))) H)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-15 NIL ((S1 :TYPE NIL)))
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-16 NIL ((SLOT1)) (:REPORT "The report for condition-16"))
;; Loading (DEFTEST CONDITION-16-REPORT.1 (LET ((*PRINT-ESCAPE* NIL) (C (MAKE-CONDITION (QUOTE CONDITION-16)))) (WITH-OUTPUT-TO-STRING (S) (PRINT-OBJECT C S))) "The report for condition-16")
;; Loading (DEFUN CONDITION-17-REPORT (C S) (FORMAT S "condition-17: ~A" (CONDITION-17/S C)))
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-17 NIL ((S :INITARG :I1 :READER CONDITION-17/S)) (:REPORT CONDITION-17-REPORT))
;; Loading (DEFTEST CONDITION-17-REPORT.1 (LET ((*PRINT-ESCAPE* NIL) (C (MAKE-CONDITION (QUOTE CONDITION-17) :I1 1234))) (WITH-OUTPUT-TO-STRING (S) (PRINT-OBJECT C S))) "condition-17: 1234")
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-18 NIL ((S :INITARG :I1 :READER CONDITION-18/S)) (:REPORT (LAMBDA (C S) (FORMAT S "condition-18: ~A" (CONDITION-18/S C)))))
;; Loading (DEFTEST CONDITION-18-REPORT.1 (LET ((*PRINT-ESCAPE* NIL) (C (MAKE-CONDITION (QUOTE CONDITION-18) :I1 4321))) (WITH-OUTPUT-TO-STRING (S) (PRINT-OBJECT C S))) "condition-18: 4321")
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-19 NIL ((S1 :READER CONDITION-19/S1 :INITARG :I1) (S2 :READER CONDITION-19/S2 :INITARG :I2)) (:DEFAULT-INITARGS :I1 10 :I2 20))
;; Loading (DEFTEST CONDITION-19-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-19)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-19))) (CONDITION-19/S1 C) (CONDITION-19/S2 C))) T 10 20)
;; Loading (DEFTEST CONDITION-19-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-19) :I1 (QUOTE A)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-19))) (CONDITION-19/S1 C) (CONDITION-19/S2 C))) T A 20)
;; Loading (DEFTEST CONDITION-19-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-19) :I2 (QUOTE A)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-19))) (CONDITION-19/S1 C) (CONDITION-19/S2 C))) T 10 A)
;; Loading (DEFTEST CONDITION-19-SLOTS.4 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-19) :I1 (QUOTE X) :I2 (QUOTE Y)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-19))) (CONDITION-19/S1 C) (CONDITION-19/S2 C))) T X Y)
;; Loading (DEFTEST CONDITION-19-SLOTS.5 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-19) :I2 (QUOTE Y) :I1 (QUOTE X)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-19))) (CONDITION-19/S1 C) (CONDITION-19/S2 C))) T X Y)
;; Loading (DEFPARAMETER *CONDITION-20/S1-VAL* 0)
;; Loading (DEFPARAMETER *CONDITION-20/S2-VAL* 0)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-20 NIL ((S1 :READER CONDITION-20/S1 :INITARG :I1) (S2 :READER CONDITION-20/S2 :INITARG :I2)) (:DEFAULT-INITARGS :I1 (INCF *CONDITION-20/S1-VAL*) :I2 (INCF *CONDITION-20/S2-VAL*)))
;; Loading (DEFTEST CONDITION-20-SLOTS.1 (LET ((*CONDITION-20/S1-VAL* 0) (*CONDITION-20/S2-VAL* 10)) (DECLARE (SPECIAL *CONDITION-20/S1-VAL* *CONDITION-20/S2-VAL*)) (LET ((C (MAKE-CONDITION (QUOTE CONDITION-20)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-20))) (CONDITION-20/S1 C) (CONDITION-20/S2 C) *CONDITION-20/S1-VAL* *CONDITION-20/S2-VAL*))) T 1 11 1 11)
;; Loading (DEFTEST CONDITION-20-SLOTS.2 (LET ((*CONDITION-20/S1-VAL* 0) (*CONDITION-20/S2-VAL* 10)) (DECLARE (SPECIAL *CONDITION-20/S1-VAL* *CONDITION-20/S2-VAL*)) (LET ((C (MAKE-CONDITION (QUOTE CONDITION-20) :I1 (QUOTE X)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-20))) (CONDITION-20/S1 C) (CONDITION-20/S2 C) *CONDITION-20/S1-VAL* *CONDITION-20/S2-VAL*))) T X 11 0 11)
;; Loading (DEFTEST CONDITION-20-SLOTS.3 (LET ((*CONDITION-20/S1-VAL* 0) (*CONDITION-20/S2-VAL* 10)) (DECLARE (SPECIAL *CONDITION-20/S1-VAL* *CONDITION-20/S2-VAL*)) (LET ((C (MAKE-CONDITION (QUOTE CONDITION-20) :I2 (QUOTE Y)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-20))) (CONDITION-20/S1 C) (CONDITION-20/S2 C) *CONDITION-20/S1-VAL* *CONDITION-20/S2-VAL*))) T 1 Y 1 10)
;; Loading (DEFTEST CONDITION-20-SLOTS.4 (LET ((*CONDITION-20/S1-VAL* 0) (*CONDITION-20/S2-VAL* 10)) (DECLARE (SPECIAL *CONDITION-20/S1-VAL* *CONDITION-20/S2-VAL*)) (LET ((C (MAKE-CONDITION (QUOTE CONDITION-20) :I2 (QUOTE Y) :I1 (QUOTE X)))) (VALUES (NOTNOT (TYPEP C (QUOTE CONDITION-20))) (CONDITION-20/S1 C) (CONDITION-20/S2 C) *CONDITION-20/S1-VAL* *CONDITION-20/S2-VAL*))) T X Y 0 10)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-21 (CONDITION-4) NIL)
;; Loading (DEFTEST CONDITION-21-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-21) :SLOT1 (QUOTE A) :SLOT2 (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-4)) (TYPEP C (QUOTE CONDITION-21)) (EQLT (CONDITION-4/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-4/SLOT-2 C) (QUOTE B)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-22 (CONDITION-4) ((SLOT3 :INITARG :SLOT3 :READER CONDITION-22/SLOT-3) (SLOT4 :INITARG :SLOT4 :READER CONDITION-22/SLOT-4)))
;; Loading (DEFTEST CONDITION-22-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-22) :SLOT1 (QUOTE A) :SLOT2 (QUOTE B) :SLOT3 (QUOTE C) :SLOT4 (QUOTE D)))) (AND (TYPEP C (QUOTE CONDITION-4)) (TYPEP C (QUOTE CONDITION-22)) (EQLT (CONDITION-4/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-4/SLOT-2 C) (QUOTE B)) (EQLT (CONDITION-22/SLOT-3 C) (QUOTE C)) (EQLT (CONDITION-22/SLOT-4 C) (QUOTE D)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-23 (CONDITION-5) NIL)
;; Loading (DEFTEST CONDITION-23-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-23) :SLOT1 (QUOTE A) :SLOT2 (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-5)) (TYPEP C (QUOTE CONDITION-23)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE B)))) T)
;; Loading (DEFTEST CONDITION-23-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-23) :SLOT1 (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-5)) (TYPEP C (QUOTE CONDITION-23)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE Y)))) T)
;; Loading (DEFTEST CONDITION-23-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-23) :SLOT2 (QUOTE B)))) (AND (TYPEP C (QUOTE CONDITION-5)) (TYPEP C (QUOTE CONDITION-23)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE X)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE B)))) T)
;; Loading (DEFTEST CONDITION-23-SLOTS.4 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-23)))) (AND (TYPEP C (QUOTE CONDITION-5)) (TYPEP C (QUOTE CONDITION-23)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE X)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE Y)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-24 (CONDITION-5) NIL (:DEFAULT-INITARGS :SLOT1 (QUOTE Z)))
;; Loading (DEFTEST CONDITION-24-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-24)))) (AND (TYPEP C (QUOTE CONDITION-5)) (TYPEP C (QUOTE CONDITION-24)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE Z)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE Y)))) T)
;; Loading (DEFTEST CONDITION-24-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-24) :SLOT1 (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-5)) (TYPEP C (QUOTE CONDITION-24)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE A)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE Y)))) T)
;; Loading (DEFTEST CONDITION-24-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-24) :SLOT2 (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-5)) (TYPEP C (QUOTE CONDITION-24)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE Z)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE A)))) T)
;; Loading (DEFTEST CONDITION-24-SLOTS.4 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-24) :SLOT1 (QUOTE B) :SLOT2 (QUOTE A)))) (AND (TYPEP C (QUOTE CONDITION-5)) (TYPEP C (QUOTE CONDITION-24)) (EQLT (CONDITION-5/SLOT-1 C) (QUOTE B)) (EQLT (CONDITION-5/SLOT-2 C) (QUOTE A)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-25A NIL ((S1 :INITARG :S1 :INITFORM (QUOTE A) :READER CONDITION-25A/S1)))
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-25B NIL ((S2 :INITARG :S2 :INITFORM (QUOTE B) :READER CONDITION-25B/S2)))
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-25 (CONDITION-25A CONDITION-25B) ((S3 :INITARG :S3 :INITFORM (QUOTE C) :READER CONDITION-25/S3)))
;; Loading (DEFTEST CONDITION-25-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-25)))) (AND (TYPEP C (QUOTE CONDITION-25A)) (TYPEP C (QUOTE CONDITION-25B)) (TYPEP C (QUOTE CONDITION-25)) (EQLT (CONDITION-25A/S1 C) (QUOTE A)) (EQLT (CONDITION-25B/S2 C) (QUOTE B)) (EQLT (CONDITION-25/S3 C) (QUOTE C)))) T)
;; Loading (DEFTEST CONDITION-25-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-25) :S1 (QUOTE X)))) (AND (TYPEP C (QUOTE CONDITION-25A)) (TYPEP C (QUOTE CONDITION-25B)) (TYPEP C (QUOTE CONDITION-25)) (EQLT (CONDITION-25A/S1 C) (QUOTE X)) (EQLT (CONDITION-25B/S2 C) (QUOTE B)) (EQLT (CONDITION-25/S3 C) (QUOTE C)))) T)
;; Loading (DEFTEST CONDITION-25-SLOTS.3 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-25) :S2 (QUOTE X)))) (AND (TYPEP C (QUOTE CONDITION-25A)) (TYPEP C (QUOTE CONDITION-25B)) (TYPEP C (QUOTE CONDITION-25)) (EQLT (CONDITION-25A/S1 C) (QUOTE A)) (EQLT (CONDITION-25B/S2 C) (QUOTE X)) (EQLT (CONDITION-25/S3 C) (QUOTE C)))) T)
;; Loading (DEFTEST CONDITION-25-SLOTS.4 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-25) :S3 (QUOTE X)))) (AND (TYPEP C (QUOTE CONDITION-25A)) (TYPEP C (QUOTE CONDITION-25B)) (TYPEP C (QUOTE CONDITION-25)) (EQLT (CONDITION-25A/S1 C) (QUOTE A)) (EQLT (CONDITION-25B/S2 C) (QUOTE B)) (EQLT (CONDITION-25/S3 C) (QUOTE X)))) T)
;; Loading (DEFTEST CONDITION-25-SLOTS.5 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-25) :S3 (QUOTE Z) :S2 (QUOTE Y) :S1 (QUOTE X)))) (AND (TYPEP C (QUOTE CONDITION-25A)) (TYPEP C (QUOTE CONDITION-25B)) (TYPEP C (QUOTE CONDITION-25)) (EQLT (CONDITION-25A/S1 C) (QUOTE X)) (EQLT (CONDITION-25B/S2 C) (QUOTE Y)) (EQLT (CONDITION-25/S3 C) (QUOTE Z)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-26A NIL ((S1 :INITARG :S1 :INITFORM (QUOTE A) :READER CONDITION-26A/S1)))
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-26B (CONDITION-26A) NIL)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-26C (CONDITION-26A) NIL)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-26 (CONDITION-26B CONDITION-26C) NIL)
;; Loading (DEFTEST CONDITION-26-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-26)))) (AND (TYPEP C (QUOTE CONDITION-26A)) (TYPEP C (QUOTE CONDITION-26B)) (TYPEP C (QUOTE CONDITION-26C)) (TYPEP C (QUOTE CONDITION-26)) (EQLT (CONDITION-26A/S1 C) (QUOTE A)))) T)
;; Loading (DEFTEST CONDITION-26-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-26) :S1 (QUOTE X)))) (AND (TYPEP C (QUOTE CONDITION-26A)) (TYPEP C (QUOTE CONDITION-26B)) (TYPEP C (QUOTE CONDITION-26C)) (TYPEP C (QUOTE CONDITION-26)) (EQLT (CONDITION-26A/S1 C) (QUOTE X)))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-27A NIL ((S0 :INITARG :S0 :INITFORM 10 :READER CONDITION-27A/S0) (S1 :INITARG :S1 :INITFORM (QUOTE A) :READER CONDITION-27/S1)))
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-27B NIL ((S1 :INITARG :S1 :INITFORM (QUOTE A) :READER CONDITION-27/S1) (S2 :INITARG :S2 :INITFORM 16 :READER CONDITION-27B/S2)))
;; Loading (DEFTEST CONDITION-27-SLOTS.1 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-27A)))) (AND (TYPEP C (QUOTE CONDITION-27A)) (NOT (TYPEP C (QUOTE CONDITION-27B))) (EQLT (CONDITION-27/S1 C) (QUOTE A)))) T)
;; Loading (DEFTEST CONDITION-27-SLOTS.2 (LET ((C (MAKE-CONDITION (QUOTE CONDITION-27B)))) (AND (TYPEP C (QUOTE CONDITION-27B)) (NOT (TYPEP C (QUOTE CONDITION-27A))) (EQLT (CONDITION-27/S1 C) (QUOTE A)))) T)
;; Loading (DEFTEST CONDITION-27-READER-IS-GENERIC (NOTNOT-MV (TYPEP (FUNCTION CONDITION-27/S1) (QUOTE GENERIC-FUNCTION))) T)
;; Loading (DEFINE-CONDITION-WITH-TESTS CONDITION-30 NIL ((S1 :INITARG :I1 :INITFORM (QUOTE X))) (:DOCUMENTATION "This is class condition-30"))
;; Loading (LOAD "compute-restarts.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/compute-restarts.lsp 811A47B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COMPUTE-RESTARTS.1 (LOOP FOR R IN (COMPUTE-RESTARTS) ALWAYS (TYPEP R (QUOTE RESTART))) T)
;; Loading (DEFTEST COMPUTE-RESTARTS.2 (LOOP FOR R IN (COMPUTE-RESTARTS) ALWAYS (TYPEP R (FIND-CLASS (QUOTE RESTART)))) T)
;; Loading (DEFTEST COMPUTE-RESTARTS.3 (RESTART-CASE (LET ((R (FIND-RESTART (QUOTE FOO)))) (EQT R (FIND (QUOTE FOO) (COMPUTE-RESTARTS) :KEY (FUNCTION RESTART-NAME)))) (FOO NIL NIL)) T)
;; Loading (DEFTEST COMPUTE-RESTARTS.4 (LOOP FOR R1 IN (COMPUTE-RESTARTS) FOR R2 IN (COMPUTE-RESTARTS) ALWAYS (EQ R1 R2)) T)
;; Loading (DEFTEST COMPUTE-RESTARTS.5 (RESTART-CASE (LOOP FOR R1 IN (COMPUTE-RESTARTS) FOR R2 IN (COMPUTE-RESTARTS) ALWAYS (EQ R1 R2)) (FOO NIL T) (BAR NIL T) (FOO NIL NIL)) T)
;; Loading (DEFTEST COMPUTE-RESTARTS.6 (RESTART-CASE (LET* ((RESTARTS (COMPUTE-RESTARTS)) (P (POSITION (QUOTE FOO) RESTARTS :KEY (FUNCTION RESTART-NAME))) (R (FIND (QUOTE FOO) RESTARTS :START (1+ P) :KEY (FUNCTION RESTART-NAME)))) (INVOKE-RESTART R)) (FOO NIL (QUOTE BAD)) (FOO NIL (QUOTE GOOD)) (FOO NIL (QUOTE BAD))) GOOD)
;; Loading (DEFTEST COMPUTE-RESTARTS.7 (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (LET* ((RESTARTS (COMPUTE-RESTARTS C)) (R (REMOVE (QUOTE FOO) RESTARTS :TEST-NOT (FUNCTION EQ) :KEY (FUNCTION RESTART-NAME)))) (INVOKE-RESTART (SECOND R))))))) (RESTART-CASE (ERROR "an error") (FOO NIL (QUOTE BAD)) (FOO NIL (QUOTE GOOD)) (FOO NIL (QUOTE BAD)))) GOOD)
;; Loading (DEFTEST COMPUTE-RESTARTS.8 (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (LET* ((RESTARTS (COMPUTE-RESTARTS)) (R (REMOVE (QUOTE FOO) RESTARTS :TEST-NOT (FUNCTION EQ) :KEY (FUNCTION RESTART-NAME)))) (INVOKE-RESTART (SECOND R))))))) (RESTART-CASE (ERROR "an error") (FOO NIL (QUOTE BAD)) (FOO NIL (QUOTE GOOD)) (FOO NIL (QUOTE BAD)))) GOOD)
;; Loading (DEFTEST COMPUTE-RESTARTS.9 (LET ((C2 (MAKE-CONDITION (QUOTE ERROR)))) (BLOCK DONE (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (LET* ((RESTARTS (COMPUTE-RESTARTS C2)) (R (REMOVE (QUOTE FOO) RESTARTS :TEST-NOT (FUNCTION EQ) :KEY (FUNCTION RESTART-NAME)))) (RETURN-FROM DONE (VALUES R (MAPCAR (FUNCTION RESTART-NAME) R)))))))) (RESTART-CASE (ERROR "an error") (FOO NIL (QUOTE BAD)) (FOO NIL (QUOTE ALSO-BAD)))))) NIL NIL)
;; Loading (LOAD "restart-bind.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/restart-bind.lsp 8125DB57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RESTART-BIND.1 (RESTART-BIND NIL NIL) NIL)
;; Loading (DEFTEST RESTART-BIND.2 (RESTART-BIND NIL (VALUES)))
;; Loading (DEFTEST RESTART-BIND.3 (RESTART-BIND NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F))) A B C D E F)
;; Loading (DEFTEST RESTART-BIND.4 (BLOCK NIL (RESTART-BIND NIL (RETURN (QUOTE GOOD)) (QUOTE BAD))) GOOD)
;; Loading (DEFTEST RESTART-BIND.5 (BLOCK DONE (TAGBODY (RESTART-BIND NIL (GO 10) (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST RESTART-BIND.6 (RESTART-BIND NIL) NIL)
;; Loading (DEFTEST RESTART-BIND.7 (BLOCK DONE (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (RETURN-FROM DONE (QUOTE GOOD)))))) (INVOKE-RESTART (QUOTE FOO)) (QUOTE BAD))) GOOD)
;; Loading (DEFTEST RESTART-BIND.8 (BLOCK DONE (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (RETURN-FROM DONE (QUOTE GOOD)))))) (LET ((RESTART (FIND-RESTART (QUOTE FOO)))) (AND (TYPEP RESTART (QUOTE RESTART)) (INVOKE-RESTART RESTART))) (QUOTE BAD))) GOOD)
;; Loading (DEFTEST RESTART-BIND.9 (RESTART-BIND ((FOO (FUNCTION (LAMBDA (A B C) (LIST C A B))))) (INVOKE-RESTART (QUOTE FOO) 1 2 3)) (3 1 2))
;; Loading (DEFTEST RESTART-BIND.10 (FLET ((%F NIL (INVOKE-RESTART (QUOTE FOO) (QUOTE X) (QUOTE Y) (QUOTE Z)))) (RESTART-BIND ((FOO (FUNCTION (LAMBDA (A B C) (LIST C A B))))) (%F))) (Z X Y))
;; Loading (DEFTEST RESTART-BIND.11 (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE BAD))))) (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE GOOD))))) (INVOKE-RESTART (QUOTE FOO)))) GOOD)
;; Loading (DEFTEST RESTART-BIND.12 (LET ((*X* (QUOTE BAD))) (DECLARE (SPECIAL *X*)) (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (DECLARE (SPECIAL *X*)) *X*)))) (LET ((*X* (QUOTE GOOD))) (DECLARE (SPECIAL *X*)) (INVOKE-RESTART (QUOTE FOO))))) GOOD)
;; Loading (DEFTEST RESTART-BIND.13 (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE BAD))))) (FLET ((%F NIL (INVOKE-RESTART (QUOTE FOO)))) (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE GOOD))))) (%F)))) GOOD)
;; Loading (DEFTEST RESTART-BIND.14 (LET ((X 10) (Y NIL)) (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (WHEN (> X 0) (PUSH (QUOTE A) Y) (DECF X) (INVOKE-RESTART (QUOTE FOO))) Y)))) (INVOKE-RESTART (QUOTE FOO)))) (A A A A A A A A A A))
;; Loading (DEFTEST RESTART-BIND.15 (BLOCK DONE (LET ((I 0)) (RESTART-BIND ((FOO (PROGN (INCF I) (FUNCTION (LAMBDA NIL (RETURN-FROM DONE I)))))) (INVOKE-RESTART (QUOTE FOO)) (QUOTE BAD)))) 1)
;; Loading (DEFTEST RESTART-BIND.16 (LET ((I 0)) (VALUES (WITH-OUTPUT-TO-STRING (S) (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL NIL)) :REPORT-FUNCTION (PROGN (INCF I) (FUNCTION (LAMBDA (S) (FORMAT S "A report")))))) (LET ((*PRINT-ESCAPE* NIL)) (FORMAT S "~A" (FIND-RESTART (QUOTE FOO)))))) I)) "A report" 1)
;; Loading (DEFTEST RESTART-BIND.17 (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE GOOD)))) (FOO (FUNCTION (LAMBDA NIL (QUOTE BAD))))) (INVOKE-RESTART (QUOTE FOO))) GOOD)
;; Loading (DEFTEST RESTART-BIND.18 (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE GOOD)))) (BAR (FUNCTION (LAMBDA NIL (QUOTE BAD))))) (INVOKE-RESTART (QUOTE FOO))) GOOD)
;; Loading (DEFTEST RESTART-BIND.19 (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE BAD)))) (BAR (FUNCTION (LAMBDA NIL (QUOTE GOOD))))) (INVOKE-RESTART (QUOTE BAR))) GOOD)
;; Loading (DEFTEST RESTART-BIND.21 (LET ((C (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE BAD))) :TEST-FUNCTION (FUNCTION (LAMBDA (C1) NIL))) (FOO (FUNCTION (LAMBDA NIL (QUOTE GOOD))) :TEST-FUNCTION (FUNCTION (LAMBDA (C2) T)))) (INVOKE-RESTART (FIND-RESTART (QUOTE FOO) C)))) GOOD)
;; Loading (DEFTEST RESTART-BIND.22 (LET ((C (MAKE-CONDITION (QUOTE ERROR))) (I 0)) (VALUES (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE GOOD))) :TEST-FUNCTION (PROGN (INCF I) (FUNCTION (LAMBDA (C2) T))))) (INVOKE-RESTART (FIND-RESTART (QUOTE FOO) C))) I)) GOOD 1)
;; Loading (DEFTEST RESTART-BIND.ERROR.1 (SIGNALS-ERROR (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL T)))) (INVOKE-RESTART (QUOTE FOO) (QUOTE A))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RESTART-BIND.ERROR.2 (SIGNALS-ERROR (RESTART-BIND ((FOO (FUNCTION (LAMBDA (X) X)))) (INVOKE-RESTART (QUOTE FOO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RESTART-BIND.ERROR.3 (SIGNALS-ERROR (RESTART-BIND ((FOO (FUNCTION IDENTITY))) (INVOKE-RESTART (QUOTE FOO))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RESTART-BIND.23 (RESTART-BIND ((FOO (FUNCTION (LAMBDA NIL (QUOTE GOOD))))) (INVOKE-RESTART-INTERACTIVELY (QUOTE FOO))) GOOD)
;; Loading (DEFTEST RESTART-BIND.24 (LET ((I 0)) (VALUES (RESTART-BIND ((FOO (FUNCTION (LAMBDA (X Y Z) (LIST Z Y X))) :INTERACTIVE-FUNCTION (PROGN (INCF I) (FUNCTION (LAMBDA NIL (LIST (QUOTE A) (QUOTE B) (QUOTE C))))))) (INVOKE-RESTART-INTERACTIVELY (QUOTE FOO))) I)) (C B A) 1)
;; Loading (LOAD "restart-case.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/restart-case.lsp 81384727>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RESTART-CASE.1 (RESTART-CASE (VALUES)))
;; Loading (DEFTEST RESTART-CASE.2 (RESTART-CASE 1) 1)
;; Loading (DEFTEST RESTART-CASE.3 (RESTART-CASE (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F))) A B C D E F)
;; Loading (DEFTEST RESTART-CASE.4 (RESTART-CASE (PROGN (INVOKE-RESTART (QUOTE FOO)) (QUOTE BAD)) (FOO NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST RESTART-CASE.5 (RESTART-CASE (PROGN (INVOKE-RESTART (QUOTE FOO)) (QUOTE BAD)) (FOO NIL)) NIL)
;; Loading (DEFTEST RESTART-CASE.6 (RESTART-CASE (PROGN (INVOKE-RESTART (QUOTE FOO)) (QUOTE BAD)) (BAR NIL (QUOTE BAD2)) (FOO NIL (QUOTE GOOD)) (FOO NIL (QUOTE BAD3))) GOOD)
;; Loading (DEFTEST RESTART-CASE.7 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) (FOO (W X Y Z) (LIST Z Y X W))) (D C B A))
;; Loading (DEFTEST RESTART-CASE.8 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO) :A 1 :B 2) (FOO (&KEY A B C D) (LIST A B C D))) (1 2 NIL NIL))
;; Loading (DEFTEST RESTART-CASE.9 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO) 1 2 3 4) (FOO (&REST ARGS) (REVERSE ARGS))) (4 3 2 1))
;; Loading (DEFTEST RESTART-CASE.10 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO) 1 2 3) (FOO (A B &OPTIONAL C D) (LIST A B C D))) (1 2 3 NIL))
;; Loading (DEFTEST RESTART-CASE.11 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO) 1 2) (FOO (X Y) (DECLARE (TYPE FIXNUM X Y)) (+ X Y))) 3)
;; Loading (DEFTEST RESTART-CASE.12 (RESTART-CASE (RESTART-CASE (INVOKE-RESTART (QUOTE FOO) 1) (FOO (X) (INVOKE-RESTART (QUOTE FOO) (1+ X)))) (FOO (Y) (+ 4 Y))) 6)
;; Loading (DEFTEST RESTART-CASE.13 (LET ((I 10)) (VALUES (RESTART-CASE (PROGN (INVOKE-RESTART (QUOTE FOO)) (QUOTE BAD)) (FOO NIL (INCF I 100) (QUOTE GOOD))) I)) GOOD 110)
;; Loading (DEFTEST RESTART-CASE.14 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO) 1 2) (FOO (X Y) (DECLARE (TYPE FIXNUM X)) (DECLARE (TYPE FIXNUM Y)) (+ X Y))) 3)
;; Loading (DEFTEST RESTART-CASE.15 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO) 1 2) (FOO (X Y) (DECLARE (IGNORE X Y)) (DECLARE (TYPE FIXNUM X)) (DECLARE (TYPE FIXNUM Y)))) NIL)
;; Loading (DEFTEST RESTART-CASE.16 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO)) (FOO NIL (VALUES))))
;; Loading (DEFTEST RESTART-CASE.17 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO)) (FOO NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F)))) A B C D E F)
;; Loading (DEFTEST RESTART-CASE.18 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO)) (FOO NIL :TEST (LAMBDA (C) (DECLARE (IGNORE C)) T) (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST RESTART-CASE.19 (RESTART-CASE (INVOKE-RESTART (QUOTE FOO)) (FOO NIL :TEST (LAMBDA (C) (DECLARE (IGNORE C)) NIL) (QUOTE BAD)) (FOO NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST RESTART-CASE.20 (WITH-OUTPUT-TO-STRING (S) (RESTART-CASE (LET ((RESTART (FIND-RESTART (QUOTE FOO))) (*PRINT-ESCAPE* NIL)) (FORMAT S "~A" RESTART)) (FOO NIL :REPORT "A report"))) "A report")
;; Loading (DEFTEST RESTART-CASE.21 (WITH-OUTPUT-TO-STRING (S) (FLET ((%F (S2) (FORMAT S2 "A report"))) (RESTART-CASE (LET ((RESTART (FIND-RESTART (QUOTE FOO))) (*PRINT-ESCAPE* NIL)) (FORMAT S "~A" RESTART)) (FOO NIL :REPORT %F)))) "A report")
;; Loading (DEFTEST RESTART-CASE.22 (WITH-OUTPUT-TO-STRING (S) (RESTART-CASE (LET ((RESTART (FIND-RESTART (QUOTE FOO))) (*PRINT-ESCAPE* NIL)) (FORMAT S "~A" RESTART)) (FOO NIL :REPORT (LAMBDA (S2) (FORMAT S2 "A report"))))) "A report")
;; Loading (DEFTEST RESTART-CASE.23 (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (INVOKE-RESTART (QUOTE FOO)))))) (RESTART-CASE (ERROR "Boo!") (FOO NIL (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST RESTART-CASE.24 (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (INVOKE-RESTART (FIND-RESTART (QUOTE FOO) C)))))) (RESTART-CASE (ERROR "Boo!") (FOO NIL (QUOTE GOOD)))) GOOD)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST RESTART-CASE.32 (RESTART-CASE (INVOKE-RESTART-INTERACTIVELY (QUOTE FOO)) (FOO NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST RESTART-CASE.33 (RESTART-CASE (INVOKE-RESTART-INTERACTIVELY (QUOTE FOO)) (FOO (W X Y Z) :INTERACTIVE (LAMBDA NIL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (LIST X W Z Y))) (B A D C))
;; Loading (DEFTEST RESTART-CASE.34 (FLET ((%F NIL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (RESTART-CASE (INVOKE-RESTART-INTERACTIVELY (QUOTE FOO)) (FOO (W X Y Z) :INTERACTIVE %F (LIST X W Z Y)))) (B A D C))
;; Loading (DEFTEST RESTART-CASE.35 (RESTART-CASE (LOOP FOR I FROM 1 TO 4 FOR R IN (COMPUTE-RESTARTS) COLLECT (RESTART-NAME R)) (FOO NIL T) (BAR NIL T) (FOO NIL (QUOTE A)) (NIL NIL :REPORT (LAMBDA (S) (FORMAT S "Anonymous restart")) 10)) (FOO BAR FOO NIL))
;; Loading (DEFTEST RESTART-CASE.36 (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (RESTART-CASE (INVOKE-RESTART (QUOTE FOO)) (FOO (&AUX (Y X)) (DECLARE (SPECIAL X)) Y)))) :GOOD)
;; Loading (LOAD "with-condition-restarts.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-condition-restarts.lsp C0D9BD27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-CONDITION-RESTARTS.1 (LET (A B C (I 0)) (VALUES (WITH-CONDITION-RESTARTS (PROGN (SETF A (INCF I)) (MAKE-CONDITION (QUOTE ERROR))) (PROGN (SETF B (INCF I)) NIL) (SETF C (INCF I))) A B C I)) 3 1 2 3 3)
;; Loading (DEFTEST WITH-CONDITION-RESTARTS.2 (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (VALUES)))
;; Loading (DEFTEST WITH-CONDITION-RESTARTS.3 (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F))) A B C D E F)
;; Loading (DEFTEST WITH-CONDITION-RESTARTS.4 (BLOCK DONE (TAGBODY (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (GO 10) 10 (RETURN-FROM DONE (QUOTE BAD))) 10 (RETURN-FROM DONE (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST WITH-CONDITION-RESTARTS.5 (LET ((C (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C (LIST (FIND-RESTART (QUOTE FOO))) (QUOTE GOOD)) (FOO NIL (QUOTE BAD)))) GOOD)
;; Loading (DEFTEST WITH-CONDITION-RESTARTS.6 (LET ((C (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (INVOKE-RESTART (FIND-RESTART (QUOTE FOO) C2)))))) (RESTART-CASE (WITH-CONDITION-RESTARTS C (LIST (FIND-RESTART (QUOTE FOO))) (SIGNAL C2)) (FOO NIL (QUOTE BAD)) (FOO NIL (QUOTE GOOD))))) GOOD)
;; Loading (DEFTEST WITH-CONDITION-RESTARTS.7 (LET ((C (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (INVOKE-RESTART (QUOTE FOO)))))) (RESTART-CASE (WITH-CONDITION-RESTARTS C (LIST (FIND-RESTART (QUOTE FOO))) (SIGNAL C2)) (FOO NIL (QUOTE GOOD)) (FOO NIL (QUOTE BAD))))) GOOD)
;; Loading (DEFTEST WITH-CONDITION-RESTARTS.8 (LET ((C (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (PROGN (WITH-CONDITION-RESTARTS C (LIST (FIND-RESTART (QUOTE FOO)))) (INVOKE-RESTART (FIND-RESTART (QUOTE FOO) C2))) (FOO NIL (QUOTE GOOD)) (FOO NIL (QUOTE BAD)))) GOOD)
;; Loading (LOAD "with-simple-restart.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-simple-restart.lsp C0E257C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-SIMPLE-RESTART.1 (WITH-SIMPLE-RESTART (FOO "")) NIL)
;; Loading (DEFTEST WITH-SIMPLE-RESTART.2 (WITH-SIMPLE-RESTART (FOO "") (VALUES)))
;; Loading (DEFTEST WITH-SIMPLE-RESTART.3 (WITH-SIMPLE-RESTART (FOO "") (VALUES 1 2 3 4 5 6 7 8 9 10)) 1 2 3 4 5 6 7 8 9 10)
;; Loading (DEFTEST WITH-SIMPLE-RESTART.4 (BLOCK NIL (TAGBODY (WITH-SIMPLE-RESTART (FOO "") (GO 10) 10 (RETURN (QUOTE BAD))) 10 (RETURN (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST WITH-SIMPLE-RESTART.5 (WITH-SIMPLE-RESTART (FOO "zzz") (INVOKE-RESTART (QUOTE FOO))) NIL T)
;; Loading (DEFTEST WITH-SIMPLE-RESTART.6 (FLET ((%F NIL (INVOKE-RESTART (QUOTE FOO)))) (WITH-SIMPLE-RESTART (FOO "zzz") (%F))) NIL T)
;; Loading (DEFTEST WITH-SIMPLE-RESTART.7 (WITH-SIMPLE-RESTART (FOO (FORMATTER "xxx")) (INVOKE-RESTART (QUOTE FOO))) NIL T)
;; Loading (DEFTEST WITH-SIMPLE-RESTART.8 (WITH-SIMPLE-RESTART (NIL "") (INVOKE-RESTART (FIRST (COMPUTE-RESTARTS)))) NIL T)
;; Loading (LOAD "abort.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/abort.lsp C0E75287>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ABORT.1 (RESTART-CASE (PROGN (ABORT) (QUOTE BAD)) (ABORT NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST ABORT.2 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (ABORT C2)) (ABORT NIL (QUOTE BAD)) (ABORT NIL (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST ABORT.3 (RESTART-CASE (PROGN (ABORT NIL) (QUOTE BAD)) (ABORT NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST ABORT.4 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (ABORT NIL)) (ABORT NIL (QUOTE GOOD)) (ABORT NIL (QUOTE BAD)))) GOOD)
;; Loading (DEFTEST ABORT.5 (SIGNALS-ERROR (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS C1 (COMPUTE-RESTARTS) (ABORT C2))) CONTROL-ERROR) T)
;; Loading (LOAD "muffle-warning.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/muffle-warning.lsp C0EC2B77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MUFFLE-WARNING.1 (RESTART-CASE (PROGN (MUFFLE-WARNING) (QUOTE BAD)) (MUFFLE-WARNING NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST MUFFLE-WARNING.2 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (MUFFLE-WARNING C2)) (MUFFLE-WARNING NIL (QUOTE BAD)) (MUFFLE-WARNING NIL (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST MUFFLE-WARNING.3 (RESTART-CASE (PROGN (MUFFLE-WARNING NIL) (QUOTE BAD)) (MUFFLE-WARNING NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST MUFFLE-WARNING.4 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (MUFFLE-WARNING NIL)) (MUFFLE-WARNING NIL (QUOTE GOOD)) (MUFFLE-WARNING NIL (QUOTE BAD)))) GOOD)
;; Loading (DEFTEST MUFFLE-WARNING.5 (SIGNALS-ERROR (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS C1 (COMPUTE-RESTARTS) (MUFFLE-WARNING C2))) CONTROL-ERROR) T)
;; Loading (LOAD "continue.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/continue.lsp C0F16627>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CONTINUE.1 (RESTART-CASE (PROGN (CONTINUE) (QUOTE BAD)) (CONTINUE NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST CONTINUE.2 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (CONTINUE C2)) (CONTINUE NIL (QUOTE BAD)) (CONTINUE NIL (QUOTE GOOD)))) GOOD)
;; Loading (DEFTEST CONTINUE.3 (RESTART-CASE (PROGN (CONTINUE NIL) (QUOTE BAD)) (CONTINUE NIL (QUOTE GOOD))) GOOD)
;; Loading (DEFTEST CONTINUE.4 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (CONTINUE NIL)) (CONTINUE NIL (QUOTE GOOD)) (CONTINUE NIL (QUOTE BAD)))) GOOD)
;; Loading (DEFTEST CONTINUE.5 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS C1 (COMPUTE-RESTARTS) (CONTINUE C2))) NIL)
;; Loading (LOAD "store-value.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/store-value.lsp C0F64497>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STORE-VALUE.1 (RESTART-CASE (PROGN (STORE-VALUE 10) (QUOTE BAD)) (STORE-VALUE (X) (LIST X (QUOTE GOOD)))) (10 GOOD))
;; Loading (DEFTEST STORE-VALUE.2 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (STORE-VALUE 17 C2)) (STORE-VALUE (X) (LIST X (QUOTE BAD))) (STORE-VALUE (X) (LIST X (QUOTE GOOD))))) (17 GOOD))
;; Loading (DEFTEST STORE-VALUE.3 (RESTART-CASE (PROGN (STORE-VALUE 11 NIL) (QUOTE BAD)) (STORE-VALUE (X) (LIST X (QUOTE GOOD)))) (11 GOOD))
;; Loading (DEFTEST STORE-VALUE.4 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (STORE-VALUE 18 NIL)) (STORE-VALUE (X) (LIST X (QUOTE GOOD))) (STORE-VALUE (X) (LIST X (QUOTE BAD))))) (18 GOOD))
;; Loading (DEFTEST STORE-VALUE.5 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS C1 (COMPUTE-RESTARTS) (STORE-VALUE 21 C2))) NIL)
;; Loading (LOAD "use-value.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/use-value.lsp C0FBA577>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST USE-VALUE.1 (RESTART-CASE (PROGN (USE-VALUE 10) (QUOTE BAD)) (USE-VALUE (X) (LIST X (QUOTE GOOD)))) (10 GOOD))
;; Loading (DEFTEST USE-VALUE.2 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (USE-VALUE 17 C2)) (USE-VALUE (X) (LIST X (QUOTE BAD))) (USE-VALUE (X) (LIST X (QUOTE GOOD))))) (17 GOOD))
;; Loading (DEFTEST USE-VALUE.3 (RESTART-CASE (PROGN (USE-VALUE 11 NIL) (QUOTE BAD)) (USE-VALUE (X) (LIST X (QUOTE GOOD)))) (11 GOOD))
;; Loading (DEFTEST USE-VALUE.4 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS C1 (LIST (FIRST (COMPUTE-RESTARTS))) (USE-VALUE 18 NIL)) (USE-VALUE (X) (LIST X (QUOTE GOOD))) (USE-VALUE (X) (LIST X (QUOTE BAD))))) (18 GOOD))
;; Loading (DEFTEST USE-VALUE.5 (LET ((C1 (MAKE-CONDITION (QUOTE ERROR))) (C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS C1 (COMPUTE-RESTARTS) (USE-VALUE 21 C2))) NIL)
;; Loading (LOAD "make-condition.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-condition.lsp C100F4D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-CONDITION.1 (LOOP FOR TP IN *CL-CONDITION-TYPE-SYMBOLS* FOR C = (MAKE-CONDITION TP) UNLESS (AND (TYPEP C TP) (TYPEP C (QUOTE CONDITION))) COLLECT (LIST TP C)) NIL)
;; Loading (DEFTEST MAKE-CONDITION.2 (LOOP FOR TP IN *CL-CONDITION-TYPE-SYMBOLS* FOR CLASS = (FIND-CLASS TP) FOR C = (AND CLASS (MAKE-CONDITION CLASS)) UNLESS (OR (NOT CLASS) (AND (TYPEP C TP) (TYPEP C CLASS) (TYPEP C (QUOTE CONDITION)))) COLLECT (LIST TP C)) NIL)
;; Loading (DEFTEST MAKE-CONDITION.3 :NOTES (:MAKE-CONDITION-WITH-COMPOUND-NAME :ANSI-SPEC-PROBLEM) (LET* ((TP (QUOTE (OR PROGRAM-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP TP (QUOTE CONDITION)) (OR (SUBTYPEP (QUOTE PROGRAM-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP)))) (NOTNOT-MV (TYPEP C TP)))) T)
;; Loading (DEFTEST MAKE-CONDITION.4 :NOTES (:MAKE-CONDITION-WITH-COMPOUND-NAME :ANSI-SPEC-PROBLEM) (LET* ((TP (QUOTE (AND SIMPLE-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP (QUOTE SIMPLE-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP) (SUBTYPEP TP (QUOTE CONDITION)))) (NOTNOT-MV (TYPEP C TP)))) T)
;; Loading (DEFTEST MAKE-CONDITION.ERROR.1 (SIGNALS-ERROR (MAKE-CONDITION) PROGRAM-ERROR) T)
;; Loading (LOAD "load-cons.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-cons.lsp C1074FC7>
;; Loading (LOAD "cons.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cons.lsp C1087727>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/cons-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFSTRUCT SCAFFOLD NODE CAR CDR).
;; Compiling form (DEFUN MAKE-SCAFFOLD-COPY (X) "Make a tree that will be used to check if a tree has been changed." (IF (CONSP X) (MAKE-SCAFFOLD :NODE X :CAR (MAKE-SCAFFOLD-COPY (CAR X)) :CDR (MAKE-SCAFFOLD-COPY (CDR X))) (MAKE-SCAFFOLD :NODE X :CAR NIL :CDR NIL))).
;; Compiling form (DEFUN CHECK-SCAFFOLD-COPY (X XCOPY) "Return t if xcopy were produced from x by make-scaffold-copy,
   and none of the cons cells in the tree rooted at x have been
   changed." (AND (EQ X (SCAFFOLD-NODE XCOPY)) (OR (NOT (CONSP X)) (AND (CHECK-SCAFFOLD-COPY (CAR X) (SCAFFOLD-CAR XCOPY)) (CHECK-SCAFFOLD-COPY (CDR X) (SCAFFOLD-CDR XCOPY)))))).
;; Compiling form (DEFUN CREATE-C*R-TEST (N) (COND ((<= N 0) (QUOTE NONE)) (T (CONS (CREATE-C*R-TEST (1- N)) (CREATE-C*R-TEST (1- N)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN NTH-1-BODY (X) (LOOP FOR E IN X AND I FROM 0 COUNT (NOT (EQT E (NTH I X))))).
;; Compiling form (DEFUN CHECK-CONS-COPY (X Y) "Check that the tree x is a copy of the tree y,
   returning t if it is, nil if not." (COND ((CONSP X) (AND (CONSP Y) (NOT (EQT X Y)) (CHECK-CONS-COPY (CAR X) (CAR Y)) (CHECK-CONS-COPY (CDR X) (CDR Y)))) ((EQT X Y) T) (T NIL))).
;; Compiling form (DEFUN CHECK-SUBLIS (A AL &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) "Apply sublis al a with various keys.  Check that
   the arguments are not themselves changed.  Return nil
   if the arguments do get changed." (SETF A (COPY-TREE A)) (SETF AL (COPY-TREE AL)) (LET ((ACOPY (MAKE-SCAFFOLD-COPY A)) (ALCOPY (MAKE-SCAFFOLD-COPY AL))) (LET ((AS (APPLY (FUNCTION SUBLIS) AL A (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY)))))))))) (AND (CHECK-SCAFFOLD-COPY A ACOPY) (CHECK-SCAFFOLD-COPY AL ALCOPY) AS)))).
;; Compiling form (DEFUN CHECK-NSUBLIS (A AL &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) "Apply nsublis al a, copying these arguments first." (SETF A (COPY-TREE A)) (SETF AL (COPY-TREE AL)) (LET ((AS (APPLY (FUNCTION SUBLIS) (COPY-TREE AL) (COPY-TREE A) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY)))))))))) AS)).
;; Compiling form (DEFUN CHECK-SUBST (NEW OLD TREE &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) "Call subst new old tree, with keyword arguments if present.
   Check that the arguments are not changed." (SETF NEW (COPY-TREE NEW)) (SETF OLD (COPY-TREE OLD)) (SETF TREE (COPY-TREE TREE)) (LET ((NEWCOPY (MAKE-SCAFFOLD-COPY NEW)) (OLDCOPY (MAKE-SCAFFOLD-COPY OLD)) (TREECOPY (MAKE-SCAFFOLD-COPY TREE))) (LET ((RESULT (APPLY (FUNCTION SUBST) NEW OLD TREE (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT)))))))))) (AND (CHECK-SCAFFOLD-COPY NEW NEWCOPY) (CHECK-SCAFFOLD-COPY OLD OLDCOPY) (CHECK-SCAFFOLD-COPY TREE TREECOPY) RESULT)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN CHECK-SUBST-IF (NEW PRED TREE &KEY (KEY (QUOTE NO-KEY))) "Call subst-if new pred tree, with various keyword arguments
   if present.  Check that the arguments are not changed." (SETF NEW (COPY-TREE NEW)) (SETF TREE (COPY-TREE TREE)) (LET ((NEWCOPY (MAKE-SCAFFOLD-COPY NEW)) (PREDCOPY (MAKE-SCAFFOLD-COPY PRED)) (TREECOPY (MAKE-SCAFFOLD-COPY TREE))) (LET ((RESULT (APPLY (FUNCTION SUBST-IF) NEW PRED TREE (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))))) (AND (CHECK-SCAFFOLD-COPY NEW NEWCOPY) (CHECK-SCAFFOLD-COPY PRED PREDCOPY) (CHECK-SCAFFOLD-COPY TREE TREECOPY) RESULT)))).
;; Compiling form (DEFUN CHECK-SUBST-IF-NOT (NEW PRED TREE &KEY (KEY (QUOTE NO-KEY))) "Call subst-if-not new pred tree, with various keyword arguments
   if present.  Check that the arguments are not changed." (SETF NEW (COPY-TREE NEW)) (SETF TREE (COPY-TREE TREE)) (LET ((NEWCOPY (MAKE-SCAFFOLD-COPY NEW)) (PREDCOPY (MAKE-SCAFFOLD-COPY PRED)) (TREECOPY (MAKE-SCAFFOLD-COPY TREE))) (LET ((RESULT (APPLY (FUNCTION SUBST-IF-NOT) NEW PRED TREE (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))))) (AND (CHECK-SCAFFOLD-COPY NEW NEWCOPY) (CHECK-SCAFFOLD-COPY PRED PREDCOPY) (CHECK-SCAFFOLD-COPY TREE TREECOPY) RESULT)))).
;; Compiling form (DEFUN CHECK-NSUBST (NEW OLD TREE &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) "Call nsubst new old tree, with keyword arguments if present." (SETF NEW (COPY-TREE NEW)) (SETF OLD (COPY-TREE OLD)) (SETF TREE (COPY-TREE TREE)) (APPLY (FUNCTION NSUBST) NEW OLD TREE (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT))))))))).
;; Compiling form (DEFUN CHECK-NSUBST-IF (NEW PRED TREE &KEY (KEY (QUOTE NO-KEY))) "Call nsubst-if new pred tree, with keyword arguments if present." (SETF NEW (COPY-TREE NEW)) (SETF TREE (COPY-TREE TREE)) (APPLY (FUNCTION NSUBST-IF) NEW PRED TREE (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY)))))).
;; Compiling form (DEFUN CHECK-NSUBST-IF-NOT (NEW PRED TREE &KEY (KEY (QUOTE NO-KEY))) "Call nsubst-if-not new pred tree, with keyword arguments if present." (SETF NEW (COPY-TREE NEW)) (SETF TREE (COPY-TREE TREE)) (APPLY (FUNCTION NSUBST-IF-NOT) NEW PRED TREE (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY)))))).
;; Compiling form (DEFUN CHECK-COPY-LIST-COPY (X Y) "Check that y is a copy of the list x." (IF (CONSP X) (AND (CONSP Y) (NOT (EQT X Y)) (EQT (CAR X) (CAR Y)) (CHECK-COPY-LIST-COPY (CDR X) (CDR Y))) (AND (EQT X Y) T))).
;; Compiling form (DEFUN CHECK-COPY-LIST (X) "Apply copy-list, checking that it properly copies,
   and checking that it does not change its argument." (LET ((XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((Y (COPY-LIST X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-COPY-LIST-COPY X Y) Y)))).
;; Compiling form (DEFUN APPEND-6-BODY NIL (LET* ((CAL (MIN 2048 CALL-ARGUMENTS-LIMIT)) (STEP (MAX 1 (FLOOR (/ CAL) 64)))) (LOOP FOR N FROM 0 BELOW CAL BY STEP COUNT (NOT (EQUAL (APPLY (FUNCTION APPEND) (LOOP FOR I FROM 1 TO N COLLECT (QUOTE (A)))) (MAKE-LIST N :INITIAL-ELEMENT (QUOTE A))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN IS-INTERSECTION (X Y Z) "Check that z is the intersection of x and y." (AND (LISTP X) (LISTP Y) (LISTP Z) (LOOP FOR E IN X ALWAYS (OR (NOT (MEMBER E Y)) (MEMBER E Z))) (LOOP FOR E IN Y ALWAYS (OR (NOT (MEMBER E X)) (MEMBER E Z))) (LOOP FOR E IN Z ALWAYS (AND (MEMBER E X) (MEMBER E Y))) T)).
;; Compiling form (DEFUN SHUFFLE (X) (COND ((NULL X) NIL) ((NULL (CDR X)) X) (T (MULTIPLE-VALUE-BIND (Y Z) (SPLIT-LIST X) (APPEND (SHUFFLE Y) (SHUFFLE Z)))))).
;; Compiling form (DEFUN SPLIT-LIST (X) (COND ((NULL X) (VALUES NIL NIL)) ((NULL (CDR X)) (VALUES X NIL)) (T (MULTIPLE-VALUE-BIND (Y Z) (SPLIT-LIST (CDDR X)) (VALUES (CONS (CAR X) Y) (CONS (CADR X) Z)))))).
;; Compiling form (DEFUN INTERSECTION-12-BODY (SIZE NITERS &OPTIONAL (MAXELEM (* 2 SIZE))) (LET ((STATE (MAKE-RANDOM-STATE))) (LOOP FOR I FROM 1 TO NITERS DO (LET ((X (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE)))) (Y (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE))))) (LET ((Z (INTERSECTION X Y))) (LET ((IS-GOOD (IS-INTERSECTION X Y Z))) (UNLESS IS-GOOD (RETURN (VALUES X Y Z))))))) NIL)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN NINTERSECTION-WITH-CHECK (X Y &KEY TEST) (LET ((YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (IF TEST (NINTERSECTION X Y :TEST TEST) (NINTERSECTION X Y)))) (IF (CHECK-SCAFFOLD-COPY Y YCOPY) RESULT (QUOTE FAILED))))).
;; Compiling form (DEFUN NINTERSECTION-12-BODY (SIZE NITERS &OPTIONAL (MAXELEM (* 2 SIZE))) (LET ((STATE (MAKE-RANDOM-STATE T))) (LOOP FOR I FROM 1 TO NITERS DO (LET ((X (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE)))) (Y (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE))))) (LET ((Z (NINTERSECTION-WITH-CHECK (COPY-LIST X) Y))) (WHEN (EQT Z (QUOTE FAILED)) (RETURN (VALUES X Y Z))) (LET ((IS-GOOD (IS-INTERSECTION X Y Z))) (UNLESS IS-GOOD (RETURN (VALUES X Y Z))))))) NIL)).
;; Compiling form (DEFUN UNION-WITH-CHECK (X Y &KEY TEST TEST-NOT) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (COND (TEST (UNION X Y :TEST TEST)) (TEST-NOT (UNION X Y :TEST-NOT TEST-NOT)) (T (UNION X Y))))) (IF (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY)) RESULT (QUOTE FAILED))))).
;; Compiling form (DEFUN UNION-WITH-CHECK-AND-KEY (X Y KEY &KEY TEST TEST-NOT) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (COND (TEST (UNION X Y :KEY KEY :TEST TEST)) (TEST-NOT (UNION X Y :KEY KEY :TEST-NOT TEST-NOT)) (T (UNION X Y :KEY KEY))))) (IF (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY)) RESULT (QUOTE FAILED))))).
;; Compiling form (DEFUN CHECK-UNION (X Y Z) (AND (LISTP X) (LISTP Y) (LISTP Z) (LOOP FOR E IN Z ALWAYS (OR (MEMBER E X) (MEMBER E Y))) (LOOP FOR E IN X ALWAYS (MEMBER E Z)) (LOOP FOR E IN Y ALWAYS (MEMBER E Z)) T)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN DO-RANDOM-UNIONS (SIZE NITERS &OPTIONAL (MAXELEM (* 2 SIZE))) (LET ((STATE (MAKE-RANDOM-STATE))) (LOOP FOR I FROM 1 TO NITERS DO (LET ((X (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE)))) (Y (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE))))) (LET ((Z (UNION X Y))) (LET ((IS-GOOD (CHECK-UNION X Y Z))) (UNLESS IS-GOOD (RETURN (VALUES X Y Z))))))) NIL)).
;; Compiling form (DEFUN NUNION-WITH-COPY (X Y &KEY TEST TEST-NOT) (SETF X (COPY-LIST X)) (SETF Y (COPY-LIST Y)) (COND (TEST (NUNION X Y :TEST TEST)) (TEST-NOT (NUNION X Y :TEST-NOT TEST-NOT)) (T (NUNION X Y)))).
;; Compiling form (DEFUN NUNION-WITH-COPY-AND-KEY (X Y KEY &KEY TEST TEST-NOT) (SETF X (COPY-LIST X)) (SETF Y (COPY-LIST Y)) (COND (TEST (NUNION X Y :KEY KEY :TEST TEST)) (TEST-NOT (NUNION X Y :KEY KEY :TEST-NOT TEST-NOT)) (T (NUNION X Y :KEY KEY)))).
;; Compiling form (DEFUN DO-RANDOM-NUNIONS (SIZE NITERS &OPTIONAL (MAXELEM (* 2 SIZE))) (LET ((STATE (MAKE-RANDOM-STATE))) (LOOP FOR I FROM 1 TO NITERS DO (LET ((X (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE)))) (Y (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE))))) (LET ((Z (NUNION-WITH-COPY X Y))) (LET ((IS-GOOD (CHECK-UNION X Y Z))) (UNLESS IS-GOOD (RETURN (VALUES X Y Z))))))) NIL)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN SET-DIFFERENCE-WITH-CHECK (X Y &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) (SETF X (COPY-LIST X)) (SETF Y (COPY-LIST Y)) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (APPLY (FUNCTION SET-DIFFERENCE) X Y (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT)))))))))) (COND ((AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY)) RESULT) (T (QUOTE FAILED)))))).
;; Compiling form (DEFUN CHECK-SET-DIFFERENCE (X Y Z &KEY (KEY (FUNCTION IDENTITY)) (TEST (FUNCTION EQL))) (AND (LISTP X) (LISTP Y) (LISTP Z) (LOOP FOR E IN Z ALWAYS (MEMBER E X :KEY KEY :TEST TEST)) (LOOP FOR E IN X ALWAYS (OR (MEMBER E Y :KEY KEY :TEST TEST) (MEMBER E Z :KEY KEY :TEST TEST))) (LOOP FOR E IN Y NEVER (MEMBER E Z :KEY KEY :TEST TEST)) T)).
;; Compiling form (DEFUN DO-RANDOM-SET-DIFFERENCES (SIZE NITERS &OPTIONAL (MAXELEM (* 2 SIZE))) (LET ((STATE (MAKE-RANDOM-STATE))) (LOOP FOR I FROM 1 TO NITERS DO (LET ((X (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE)))) (Y (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE))))) (LET ((Z (SET-DIFFERENCE-WITH-CHECK X Y))) (LET ((IS-GOOD (CHECK-SET-DIFFERENCE X Y Z))) (UNLESS IS-GOOD (RETURN (VALUES X Y Z))))))) NIL)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN NSET-DIFFERENCE-WITH-CHECK (X Y &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) (SETF X (COPY-LIST X)) (SETF Y (COPY-LIST Y)) (APPLY (FUNCTION NSET-DIFFERENCE) X Y (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT))))))))).
;; Compiling form (DEFUN CHECK-NSET-DIFFERENCE (X Y Z &KEY (KEY (FUNCTION IDENTITY)) (TEST (FUNCTION EQL))) (AND (LISTP X) (LISTP Y) (LISTP Z) (LOOP FOR E IN Z ALWAYS (MEMBER E X :KEY KEY :TEST TEST)) (LOOP FOR E IN X ALWAYS (OR (MEMBER E Y :KEY KEY :TEST TEST) (MEMBER E Z :KEY KEY :TEST TEST))) (LOOP FOR E IN Y NEVER (MEMBER E Z :KEY KEY :TEST TEST)) T)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN DO-RANDOM-NSET-DIFFERENCES (SIZE NITERS &OPTIONAL (MAXELEM (* 2 SIZE))) (LET ((STATE (MAKE-RANDOM-STATE))) (LOOP FOR I FROM 1 TO NITERS DO (LET ((X (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE)))) (Y (SHUFFLE (LOOP FOR J FROM 1 TO SIZE COLLECT (RANDOM MAXELEM STATE))))) (LET ((Z (NSET-DIFFERENCE-WITH-CHECK X Y))) (LET ((IS-GOOD (CHECK-NSET-DIFFERENCE X Y Z))) (UNLESS IS-GOOD (RETURN (VALUES X Y Z))))))) NIL)).
;; Compiling form (DEFUN SET-EXCLUSIVE-OR-WITH-CHECK (X Y &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) (SETF X (COPY-LIST X)) (SETF Y (COPY-LIST Y)) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (APPLY (FUNCTION SET-EXCLUSIVE-OR) X Y (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT)))))))))) (COND ((AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY)) RESULT) (T (QUOTE FAILED)))))).
;; Compiling form (DEFUN CHECK-SET-EXCLUSIVE-OR (X Y Z &KEY (KEY (FUNCTION IDENTITY)) (TEST (FUNCTION EQL))) (AND (LISTP X) (LISTP Y) (LISTP Z) (LOOP FOR E IN Z ALWAYS (OR (MEMBER E X :KEY KEY :TEST TEST) (MEMBER E Y :KEY KEY :TEST TEST))) (LOOP FOR E IN X ALWAYS (IF (MEMBER E Y :KEY KEY :TEST TEST) (NOT (MEMBER E Z :KEY KEY :TEST TEST)) (MEMBER E Z :KEY KEY :TEST TEST))) (LOOP FOR E IN Y ALWAYS (IF (MEMBER E X :KEY KEY :TEST TEST) (NOT (MEMBER E Z :KEY KEY :TEST TEST)) (MEMBER E Z :KEY KEY :TEST TEST))) T)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN NSET-EXCLUSIVE-OR-WITH-CHECK (X Y &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) (SETF X (COPY-LIST X)) (SETF Y (COPY-LIST Y)) (APPLY (FUNCTION NSET-EXCLUSIVE-OR) X Y (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT))))))))).
;; Compiling form (DEFUN SUBSETP-WITH-CHECK (X Y &KEY (KEY (QUOTE NO-KEY)) TEST TEST-NOT) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (APPLY (FUNCTION SUBSETP) X Y (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQT KEY (QUOTE NO-KEY)) (SYSTEM.INTERNALS::BACKQUOTE (:KEY (SYSTEM.INTERNALS::BQ-COMMA KEY))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST (SYSTEM.INTERNALS::BACKQUOTE (:TEST (SYSTEM.INTERNALS::BQ-COMMA TEST))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN TEST-NOT (SYSTEM.INTERNALS::BACKQUOTE (:TEST-NOT (SYSTEM.INTERNALS::BQ-COMMA TEST-NOT)))))))))) (COND ((AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY)) (NOT (NOT RESULT))) (T (QUOTE FAILED)))))).
;; Compiling form (DEFUN MY-SET-EXCLUSIVE-OR (SET1 SET2 &KEY KEY TEST TEST-NOT) (ASSERT (NOT (AND TEST TEST-NOT))) (COND (TEST-NOT (WHEN (SYMBOLP TEST-NOT) (SETQ TEST-NOT (SYMBOL-FUNCTION TEST-NOT))) (SETQ TEST (COMPLEMENT TEST-NOT))) ((NOT TEST) (SETQ TEST (FUNCTION EQL)))) (ETYPECASE TEST (SYMBOL (SETQ TEST (SYMBOL-FUNCTION TEST))) (FUNCTION NIL)) (ETYPECASE KEY (NULL NIL) (SYMBOL (SETQ KEY (SYMBOL-FUNCTION KEY))) (FUNCTION NIL)) (LET* ((KEYS1 (IF KEY (MAPCAR (THE FUNCTION KEY) SET1) SET1)) (KEYS2 (IF KEY (MAPCAR (THE FUNCTION KEY) SET2) SET2)) (MASK1 (MAKE-ARRAY (LENGTH SET1) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0)) (MASK2 (MAKE-ARRAY (LENGTH SET2) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (LOOP FOR I1 FROM 0 FOR K1 IN KEYS1 DO (LOOP FOR I2 FROM 0 FOR K2 IN KEYS2 WHEN (FUNCALL (THE FUNCTION TEST) K1 K2) DO (SETF (SBIT MASK1 I1) 1 (SBIT MASK2 I2) 1))) (NCONC (LOOP FOR E IN SET1 FOR I ACROSS MASK1 WHEN (= I 0) COLLECT E) (LOOP FOR E IN SET2 FOR I ACROSS MASK2 WHEN (= I 0) COLLECT E)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MAKE-RANDOM-SET-EXCLUSIVE-OR-INPUT (N) (LET* ((SET1 (LOOP FOR I FROM 1 TO N COLLECT (RANDOM N))) (SET2 (LOOP FOR I FROM 1 TO N COLLECT (RANDOM N))) (TEST-ARGS (RANDOM-CASE NIL NIL NIL (LIST :TEST (QUOTE EQL)) (LIST :TEST (FUNCTION EQL)) (LIST :TEST (COMPLEMENT (FUNCTION EQL))))) (TEST-NOT-ARGS (AND (NOT TEST-ARGS) (RANDOM-CASE NIL NIL (LIST :TEST-NOT (QUOTE EQL)) (LIST :TEST-NOT (FUNCTION EQL)) (LIST :TEST-NOT (COMPLEMENT (FUNCTION EQL)))))) (KEY-ARGS (RANDOM-CASE NIL NIL NIL NIL (LIST :KEY NIL) (LIST :KEY (QUOTE IDENTITY)) (LIST :KEY (QUOTE NOT))))) (LIST* SET1 SET2 (REDUCE (FUNCTION APPEND) (RANDOM-PERMUTE (LIST TEST-ARGS TEST-NOT-ARGS KEY-ARGS)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN RANDOM-SET-EXCLUSIVE-OR-TEST (N REPS &OPTIONAL (FN (QUOTE SET-EXCLUSIVE-OR))) (LET ((ACTUAL-FN (ETYPECASE FN (SYMBOL (SYMBOL-FUNCTION FN)) (FUNCTION FN)))) (DECLARE (TYPE FUNCTION ACTUAL-FN)) (LOOP FOR I BELOW REPS FOR ARGS = (MAKE-RANDOM-SET-EXCLUSIVE-OR-INPUT N) FOR SET1 = (CAR ARGS) FOR SET2 = (CADR ARGS) FOR RESULT1 = (APPLY (FUNCTION REMOVE-DUPLICATES) (SORT (COPY-LIST (APPLY (FUNCTION MY-SET-EXCLUSIVE-OR) ARGS)) (FUNCTION <)) (CDDR ARGS)) FOR RESULT2 = (APPLY (FUNCTION REMOVE-DUPLICATES) (SORT (COPY-LIST (APPLY ACTUAL-FN (COPY-LIST SET1) (COPY-LIST SET2) (CDDR ARGS))) (FUNCTION <)) (CDDR ARGS)) UNLESS (EQUAL RESULT1 RESULT2) RETURN (LIST (LIST (QUOTE REMOVE-DUPLICATES) (LIST (QUOTE SORT) (CONS FN ARGS) (QUOTE <)) "...") "actual: " RESULT2 "should be: " RESULT1)))).
;; Compiling form (DEFUN REV-ASSOC-LIST (X) (COND ((NULL X) NIL) ((NULL (CAR X)) (CONS NIL (REV-ASSOC-LIST (CDR X)))) (T (ACONS (CDAR X) (CAAR X) (REV-ASSOC-LIST (CDR X)))))).
;; Compiling form (DEFVAR *MAPC.6-VAR* NIL).
;; Compiling form (DEFUN MAPC.6-FUN (X) (PUSH X *MAPC.6-VAR*) X).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cons-aux.llf 81D0EC97>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST CONS-OF-SYMBOLS (CONS (QUOTE A) (QUOTE B)) (A . B))
;; Loading (DEFTEST CONS-WITH-NIL (CONS (QUOTE A) NIL) (A))
;; Loading (DEFTEST CONS-EQ-EQUAL (LET ((X (CONS (QUOTE A) (QUOTE B))) (Y (CONS (QUOTE A) (QUOTE B)))) (AND (NOT (EQT X Y)) (EQUALT X Y))) T)
;; Loading (DEFTEST CONS-EQUAL-LIST (EQUALT (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) NIL))) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) T)
;; Loading (DEFTEST CONS.ORDER.1 (LET ((I 0)) (VALUES (CONS (INCF I) (INCF I)) I)) (1 . 2) 2)
;; Loading (DEF-FOLD-TEST CONS.FOLD.1 (CONS (QUOTE A) (QUOTE B)))
;; Loading (DEFTEST CONS.ERROR.1 (SIGNALS-ERROR (CONS) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONS.ERROR.2 (SIGNALS-ERROR (CONS (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONS.ERROR.3 (SIGNALS-ERROR (CONS (QUOTE A) (QUOTE B) (QUOTE C)) PROGRAM-ERROR) T)
;; Loading (LOAD "consp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/consp.lsp C0E738E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST CONSP-LIST (NOTNOT-MV (CONSP (QUOTE (A)))) T)
;; Loading (DEFTEST CONSP-CONS (NOTNOT-MV (CONSP (CONS NIL NIL))) T)
;; Loading (DEFTEST CONSP-NIL (CONSP NIL) NIL)
;; Loading (DEFTEST CONSP-EMPTY-LIST (CONSP (LIST)) NIL)
;; Loading (DEFTEST CONSP-SINGLE-ELEMENT-LIST (NOTNOT-MV (CONSP (LIST (QUOTE A)))) T)
;; Loading (DEFTEST CONSP-XOR-ATOM-UNIVERSE (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (OR (AND (CONSP X) (NOT (ATOM X))) (AND (NOT (CONSP X)) (ATOM X)))))) NIL)
;; Loading (DEFTEST CONSP-CONS-UNIVERSE (CHECK-TYPE-PREDICATE (QUOTE CONSP) (QUOTE CONS)) NIL)
;; Loading (DEFTEST CONSP.ORDER.1 (LET ((I 0)) (VALUES (CONSP (INCF I)) I)) NIL 1)
;; Loading (DEFTEST CONSP.ERROR.1 (SIGNALS-ERROR (CONSP) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONSP.ERROR.2 (SIGNALS-ERROR (CONSP (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (LOAD "atom.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/atom.lsp C0EDB067>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ATOM.1 (LOOP FOR X IN *UNIVERSE* UNLESS (IF (ATOM X) (NOT (CONSP X)) (CONSP X)) COLLECT X) NIL)
;; Loading (DEFTEST ATOM.2 (MACROLET ((%M (Z) Z)) (ATOM (EXPAND-IN-CURRENT-ENV (%M 0)))) T)
;; Loading (DEFTEST ATOM.ORDER.1 (LET ((I 0)) (VALUES (ATOM (PROGN (INCF I) (QUOTE (A B)))) I)) NIL 1)
;; Loading (DEFTEST ATOM.ERROR.1 (SIGNALS-ERROR (ATOM) PROGRAM-ERROR) T)
;; Loading (DEFTEST ATOM.ERROR.2 (SIGNALS-ERROR (ATOM (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (LOAD "cxr.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cxr.lsp C0F11A97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST CONS.23 (CAR (QUOTE (A))) A)
;; Loading (DEFTEST CONS.24 (CDR (QUOTE (A . B))) B)
;; Loading (DEFTEST CONS.25 (CAAR (QUOTE ((A)))) A)
;; Loading (DEFTEST CONS.26 (CDAR (QUOTE ((A . B)))) B)
;; Loading (DEFTEST CONS.27 (CADR (QUOTE (A B))) B)
;; Loading (DEFTEST CONS.28 (CDDR (QUOTE (A B . C))) C)
;; Loading (DEFTEST CONS.29 (CAAAR (QUOTE (((A))))) A)
;; Loading (DEFTEST CONS.30 (CDAAR (QUOTE (((A . B))))) B)
;; Loading (DEFTEST CONS.31 (CADAR (CONS (CONS (QUOTE A) (CONS (QUOTE B) (QUOTE C))) (QUOTE D))) B)
;; Loading (DEFTEST CONS.32 (CDDAR (CONS (CONS (QUOTE A) (CONS (QUOTE B) (QUOTE C))) (QUOTE D))) C)
;; Loading (DEFTEST CONS.33 (CAADR (CONS (QUOTE A) (CONS (CONS (QUOTE B) (QUOTE C)) (QUOTE D)))) B)
;; Loading (DEFTEST CONS.34 (CADDR (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) (QUOTE D))))) C)
;; Loading (DEFTEST CONS.36 (CDADR (CONS (QUOTE A) (CONS (CONS (QUOTE B) (QUOTE C)) (QUOTE D)))) C)
;; Loading (DEFTEST CONS.37 (CDDDR (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) (QUOTE D))))) D)
;; Loading (DEFVAR *CONS-TEST-4* (CONS (CONS (CONS (CONS (QUOTE A) (QUOTE B)) (CONS (QUOTE C) (QUOTE D))) (CONS (CONS (QUOTE E) (QUOTE F)) (CONS (QUOTE G) (QUOTE H)))) (CONS (CONS (CONS (QUOTE I) (QUOTE J)) (CONS (QUOTE K) (QUOTE L))) (CONS (CONS (QUOTE M) (QUOTE N)) (CONS (QUOTE O) (QUOTE P))))))
;; Loading (DEFTEST CONS.38 (CAAAAR *CONS-TEST-4*) A)
;; Loading (DEFTEST CONS.39 (CDAAAR *CONS-TEST-4*) B)
;; Loading (DEFTEST CONS.40 (CADAAR *CONS-TEST-4*) C)
;; Loading (DEFTEST CONS.41 (CDDAAR *CONS-TEST-4*) D)
;; Loading (DEFTEST CONS.42 (CAADAR *CONS-TEST-4*) E)
;; Loading (DEFTEST CONS.43 (CDADAR *CONS-TEST-4*) F)
;; Loading (DEFTEST CONS.44 (CADDAR *CONS-TEST-4*) G)
;; Loading (DEFTEST CONS.45 (CDDDAR *CONS-TEST-4*) H)
;; Loading (DEFTEST CONS.46 (CAAADR *CONS-TEST-4*) I)
;; Loading (DEFTEST CONS.47 (CDAADR *CONS-TEST-4*) J)
;; Loading (DEFTEST CONS.48 (CADADR *CONS-TEST-4*) K)
;; Loading (DEFTEST CONS.49 (CDDADR *CONS-TEST-4*) L)
;; Loading (DEFTEST CONS.50 (CAADDR *CONS-TEST-4*) M)
;; Loading (DEFTEST CONS.51 (CDADDR *CONS-TEST-4*) N)
;; Loading (DEFTEST CONS.52 (CADDDR *CONS-TEST-4*) O)
;; Loading (DEFTEST CONS.53 (CDDDDR *CONS-TEST-4*) P)
;; Loading (DEFTEST CAR.1 (CAR (QUOTE (A))) A)
;; Loading (DEFTEST CAR-NIL (CAR NIL) NIL)
;; Loading (DEFTEST CAR.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION CAR) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST CAR.ERROR.2 (SIGNALS-ERROR (LOCALLY (CAR (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (DEFTEST CAR.ORDER.1 (LET ((I 0)) (VALUES (CAR (PROGN (INCF I) (QUOTE (A B)))) I)) A 1)
;; Loading (DEFTEST CDR.1 (CDR (QUOTE (A B))) (B))
;; Loading (DEFTEST CDR-NIL (CDR NIL) NIL)
;; Loading (DEFTEST CDR.ORDER.1 (LET ((I 0)) (VALUES (CDR (PROGN (INCF I) (QUOTE (A B)))) I)) (B) 1)
;; Loading (DEFTEST CDR.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION CDR) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST CDR.ERROR.2 (SIGNALS-ERROR (LOCALLY (CDR (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (DEFTEST CAAR.ERROR.1 (SIGNALS-ERROR (CAAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CAAR.ERROR.2 (SIGNALS-ERROR (CAAR (QUOTE (A))) TYPE-ERROR) T)
;; Loading (DEFTEST CADR.ERROR.1 (SIGNALS-ERROR (CADR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CADR.ERROR.2 (SIGNALS-ERROR (CADR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAR.ERROR.1 (SIGNALS-ERROR (CDAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDAR.ERROR.2 (SIGNALS-ERROR (CDAR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDR.ERROR.1 (SIGNALS-ERROR (CDDR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDDR.ERROR.2 (SIGNALS-ERROR (CDDR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAAAR.ERROR.1 (SIGNALS-ERROR (CAAAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CAAAR.ERROR.2 (SIGNALS-ERROR (CAAAR (QUOTE (A))) TYPE-ERROR) T)
;; Loading (DEFTEST CAAAR.ERROR.3 (SIGNALS-ERROR (CAAAR (QUOTE ((A)))) TYPE-ERROR) T)
;; Loading (DEFTEST CAADR.ERROR.1 (SIGNALS-ERROR (CAADR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CAADR.ERROR.2 (SIGNALS-ERROR (CAADR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAADR.ERROR.3 (SIGNALS-ERROR (CAADR (QUOTE (A B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADAR.ERROR.1 (SIGNALS-ERROR (CADAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CADAR.ERROR.2 (SIGNALS-ERROR (CADAR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADAR.ERROR.3 (SIGNALS-ERROR (CADAR (QUOTE ((A . C) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADDR.ERROR.1 (SIGNALS-ERROR (CADDR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CADDR.ERROR.2 (SIGNALS-ERROR (CADDR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADDR.ERROR.3 (SIGNALS-ERROR (CADDR (QUOTE (A C . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAAR.ERROR.1 (SIGNALS-ERROR (CDAAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDAAR.ERROR.2 (SIGNALS-ERROR (CDAAR (QUOTE (A))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAAR.ERROR.3 (SIGNALS-ERROR (CDAAR (QUOTE ((A . B)))) TYPE-ERROR) T)
;; Loading (DEFTEST CDADR.ERROR.1 (SIGNALS-ERROR (CDADR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDADR.ERROR.2 (SIGNALS-ERROR (CDADR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDADR.ERROR.3 (SIGNALS-ERROR (CDADR (QUOTE (A B . C))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDAR.ERROR.1 (SIGNALS-ERROR (CDDAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDDAR.ERROR.2 (SIGNALS-ERROR (CDDAR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDAR.ERROR.3 (SIGNALS-ERROR (CDDAR (QUOTE ((A . B) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDR.ERROR.1 (SIGNALS-ERROR (CDDDR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDR.ERROR.2 (SIGNALS-ERROR (CDDDR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDR.ERROR.3 (SIGNALS-ERROR (CDDDR (QUOTE (A C . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAAAAR.ERROR.1 (SIGNALS-ERROR (CAAAAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CAAAAR.ERROR.2 (SIGNALS-ERROR (CAAAAR (QUOTE (A))) TYPE-ERROR) T)
;; Loading (DEFTEST CAAAAR.ERROR.3 (SIGNALS-ERROR (CAAAAR (QUOTE ((A)))) TYPE-ERROR) T)
;; Loading (DEFTEST CAAAAR.ERROR.4 (SIGNALS-ERROR (CAAAAR (QUOTE (((A))))) TYPE-ERROR) T)
;; Loading (DEFTEST CAAADR.ERROR.1 (SIGNALS-ERROR (CAAADR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CAAADR.ERROR.2 (SIGNALS-ERROR (CAAADR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAAADR.ERROR.3 (SIGNALS-ERROR (CAAADR (QUOTE (A B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAAADR.ERROR.4 (SIGNALS-ERROR (CAAADR (QUOTE (A (B)))) TYPE-ERROR) T)
;; Loading (DEFTEST CAADAR.ERROR.1 (SIGNALS-ERROR (CAADAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CAADAR.ERROR.2 (SIGNALS-ERROR (CAADAR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAADAR.ERROR.3 (SIGNALS-ERROR (CAADAR (QUOTE ((A . C) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAADAR.ERROR.4 (SIGNALS-ERROR (CAADAR (QUOTE ((A C) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAADDR.ERROR.1 (SIGNALS-ERROR (CAADDR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CAADDR.ERROR.2 (SIGNALS-ERROR (CAADDR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAADDR.ERROR.3 (SIGNALS-ERROR (CAADDR (QUOTE (A C . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CAADDR.ERROR.4 (SIGNALS-ERROR (CAADDR (QUOTE (A C B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADAAR.ERROR.1 (SIGNALS-ERROR (CADAAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CADAAR.ERROR.2 (SIGNALS-ERROR (CADAAR (QUOTE (A))) TYPE-ERROR) T)
;; Loading (DEFTEST CADAAR.ERROR.3 (SIGNALS-ERROR (CADAAR (QUOTE ((A . B)))) TYPE-ERROR) T)
;; Loading (DEFTEST CADAAR.ERROR.4 (SIGNALS-ERROR (CADAAR (QUOTE ((A B)))) TYPE-ERROR) T)
;; Loading (DEFTEST CADADR.ERROR.1 (SIGNALS-ERROR (CADADR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CADADR.ERROR.2 (SIGNALS-ERROR (CADADR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADADR.ERROR.3 (SIGNALS-ERROR (CADADR (QUOTE (A B . C))) TYPE-ERROR) T)
;; Loading (DEFTEST CADADR.ERROR.4 (SIGNALS-ERROR (CADADR (QUOTE (A (B . E) . C))) TYPE-ERROR) T)
;; Loading (DEFTEST CADDAR.ERROR.1 (SIGNALS-ERROR (CADDAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CADDAR.ERROR.2 (SIGNALS-ERROR (CADDAR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADDAR.ERROR.3 (SIGNALS-ERROR (CADDAR (QUOTE ((A . B) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADDAR.ERROR.4 (SIGNALS-ERROR (CADDAR (QUOTE ((A B . C) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADDDR.ERROR.1 (SIGNALS-ERROR (CADDDR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CADDDR.ERROR.2 (SIGNALS-ERROR (CADDDR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADDDR.ERROR.3 (SIGNALS-ERROR (CADDDR (QUOTE (A C . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CADDDR.ERROR.4 (SIGNALS-ERROR (CADDDR (QUOTE (A C E . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAAAR.ERROR.1 (SIGNALS-ERROR (CDAAAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDAAAR.ERROR.2 (SIGNALS-ERROR (CDAAAR (QUOTE (A))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAAAR.ERROR.3 (SIGNALS-ERROR (CDAAAR (QUOTE ((A)))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAAAR.ERROR.4 (SIGNALS-ERROR (CDAAAR (QUOTE (((A . B))))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAADR.ERROR.1 (SIGNALS-ERROR (CDAADR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDAADR.ERROR.2 (SIGNALS-ERROR (CDAADR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAADR.ERROR.3 (SIGNALS-ERROR (CDAADR (QUOTE (A B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDAADR.ERROR.4 (SIGNALS-ERROR (CDAADR (QUOTE (A (B . C)))) TYPE-ERROR) T)
;; Loading (DEFTEST CDADAR.ERROR.1 (SIGNALS-ERROR (CDADAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDADAR.ERROR.2 (SIGNALS-ERROR (CDADAR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDADAR.ERROR.3 (SIGNALS-ERROR (CDADAR (QUOTE ((A . C) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDADAR.ERROR.4 (SIGNALS-ERROR (CDADAR (QUOTE ((A C . D) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDADDR.ERROR.1 (SIGNALS-ERROR (CDADDR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDADDR.ERROR.2 (SIGNALS-ERROR (CDADDR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDADDR.ERROR.3 (SIGNALS-ERROR (CDADDR (QUOTE (A C . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDADDR.ERROR.4 (SIGNALS-ERROR (CDADDR (QUOTE (A C B . D))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDAAR.ERROR.1 (SIGNALS-ERROR (CDDAAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDDAAR.ERROR.2 (SIGNALS-ERROR (CDDAAR (QUOTE (A))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDAAR.ERROR.3 (SIGNALS-ERROR (CDDAAR (QUOTE ((A . B)))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDAAR.ERROR.4 (SIGNALS-ERROR (CDDAAR (QUOTE ((A B)))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDADR.ERROR.1 (SIGNALS-ERROR (CDDADR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDDADR.ERROR.2 (SIGNALS-ERROR (CDDADR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDADR.ERROR.3 (SIGNALS-ERROR (CDDADR (QUOTE (A B . C))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDADR.ERROR.4 (SIGNALS-ERROR (CDDADR (QUOTE (A (B . E) . C))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDAR.ERROR.1 (SIGNALS-ERROR (CDDDAR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDAR.ERROR.2 (SIGNALS-ERROR (CDDDAR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDAR.ERROR.3 (SIGNALS-ERROR (CDDDAR (QUOTE ((A . B) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDAR.ERROR.4 (SIGNALS-ERROR (CDDDAR (QUOTE ((A B . C) . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDDR.ERROR.1 (SIGNALS-ERROR (CDDDDR (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDDR.ERROR.2 (SIGNALS-ERROR (CDDDDR (QUOTE (A . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDDR.ERROR.3 (SIGNALS-ERROR (CDDDDR (QUOTE (A C . B))) TYPE-ERROR) T)
;; Loading (DEFTEST CDDDDR.ERROR.4 (SIGNALS-ERROR (CDDDDR (QUOTE (A C E . B))) TYPE-ERROR) T)
;; Loading (LOOP FOR FN IN (QUOTE (CAR CDR CAAR CADR CDAR CDDR CAAAR CAADR CADAR CADDR CDAAR CDADR CDDAR CDDDR CAAAAR CAAADR CAADAR CAADDR CADAAR CADADR CADDAR CADDDR CDAAAR CDAADR CDADAR CDADDR CDDAAR CDDADR CDDDAR CDDDDR)) DO (LET ((LEVEL (- (LENGTH (SYMBOL-NAME FN)) 2))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (INTERN (CONCATENATE (QUOTE STRING) (SYMBOL-NAME FN) "-SET-ALT") :CL-TEST)) (LET ((X (CREATE-C*R-TEST (SYSTEM.INTERNALS::BQ-COMMA LEVEL)))) (AND (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) X) (QUOTE A)) (EQL ((SYSTEM.INTERNALS::BQ-COMMA FN) X) (QUOTE A)) (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) X) (QUOTE NONE)) (EQUALT X (CREATE-C*R-TEST (SYSTEM.INTERNALS::BQ-COMMA LEVEL))))) T)))))
;; Loading (LOOP FOR (FN LEN) IN (QUOTE ((FIRST 1) (SECOND 2) (THIRD 3) (FOURTH 4) (FIFTH 5) (SIXTH 6) (SEVENTH 7) (EIGHTH 8) (NINTH 9) (TENTH 10))) DO (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (INTERN (CONCATENATE (QUOTE STRING) (SYMBOL-NAME FN) "-SET-ALT") :CL-TEST)) (LET ((X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) X) (QUOTE A)) (LOOP FOR I FROM 1 TO 20 DO (WHEN (AND (NOT (EQL I (SYSTEM.INTERNALS::BQ-COMMA LEN))) (NTH (1- I) X)) (RETURN NIL)) FINALLY (RETURN T)) (EQL ((SYSTEM.INTERNALS::BQ-COMMA FN) X) (QUOTE A)) (NTH (SYSTEM.INTERNALS::BQ-COMMA (1- LEN)) X))) A))))
;; Loading (LOAD "rplaca.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rplaca.lsp C1354007>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST RPLACA.1 (LET ((X (CONS (QUOTE A) (QUOTE B)))) (LET ((Y X)) (AND (EQT (RPLACA X (QUOTE C)) Y) (EQT X Y) (EQT (CAR X) (QUOTE C)) (EQT (CDR X) (QUOTE B))))) T)
;; Loading (DEFTEST RPLACA.ORDER.1 (LET ((X (CONS (QUOTE A) (QUOTE B))) (I 0) A B) (VALUES (RPLACA (PROGN (SETF A (INCF I)) X) (PROGN (SETF B (INCF I)) (QUOTE C))) I A B)) (C . B) 2 1 2)
;; Loading (DEFTEST RPLACA.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (RPLACA X 1))) (FUNCTION CONSP)) NIL)
;; Loading (DEFTEST RPLACA.ERROR.2 (SIGNALS-ERROR (RPLACA) PROGRAM-ERROR) T)
;; Loading (DEFTEST RPLACA.ERROR.3 (SIGNALS-ERROR (RPLACA (CONS (QUOTE A) (QUOTE B))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RPLACA.ERROR.4 (SIGNALS-ERROR (RPLACA (CONS (QUOTE A) (QUOTE B)) (CONS (QUOTE C) (QUOTE D)) (QUOTE GARBAGE)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RPLACA.ERROR.6 (SIGNALS-ERROR (LOCALLY (RPLACA (QUOTE A) 1) T) TYPE-ERROR) T)
;; Loading (LOAD "rplacd.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rplacd.lsp C13B5627>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST RPLACD.1 (LET ((X (CONS (QUOTE A) (QUOTE B)))) (LET ((Y X)) (AND (EQT (RPLACD X (QUOTE D)) Y) (EQT X Y) (EQT (CAR X) (QUOTE A)) (EQT (CDR X) (QUOTE D))))) T)
;; Loading (DEFTEST RPLACD.ORDER.1 (LET ((X (CONS (QUOTE A) (QUOTE B))) (I 0) A B) (VALUES (RPLACD (PROGN (SETF A (INCF I)) X) (PROGN (SETF B (INCF I)) (QUOTE C))) I A B)) (A . C) 2 1 2)
;; Loading (DEFTEST RPLACD.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (RPLACD X 1))) (FUNCTION CONSP)) NIL)
;; Loading (DEFTEST RPLACD.ERROR.2 (SIGNALS-ERROR (RPLACD) PROGRAM-ERROR) T)
;; Loading (DEFTEST RPLACD.ERROR.3 (SIGNALS-ERROR (RPLACD (CONS (QUOTE A) (QUOTE B))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RPLACD.ERROR.4 (SIGNALS-ERROR (RPLACD (CONS (QUOTE A) (QUOTE B)) (CONS (QUOTE C) (QUOTE D)) (QUOTE GARBAGE)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RPLACD.ERROR.6 (SIGNALS-ERROR (LOCALLY (RPLACD (QUOTE A) 1) T) TYPE-ERROR) T)
;; Loading (LOAD "copy-tree.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/copy-tree.lsp C1416FA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST COPY-TREE.1 (LET* ((X (CONS (QUOTE A) (LIST (CONS (QUOTE B) (QUOTE C)) (CONS 1 1.2) (LIST (LIST "abcde" (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT (CONS (QUOTE E) (QUOTE F)))) (QUOTE G))))) (Y (COPY-TREE X))) (CHECK-CONS-COPY X Y)) T)
;; Loading (DEFTEST COPY-TREE.2 (LET* ((X (COPY-LIST *UNIVERSE*)) (Y (COPY-TREE X))) (CHECK-CONS-COPY X Y)) T)
;; Loading (DEFTEST COPY-TREE.ORDER.1 (LET ((I 0)) (VALUES (COPY-TREE (PROGN (INCF I) (QUOTE (A B C)))) I)) (A B C) 1)
;; Loading (DEF-FOLD-TEST COPY-TREE.FOLD.1 (COPY-TREE (QUOTE (A . B))))
;; Loading (DEF-FOLD-TEST COPY-TREE.FOLD.2 (COPY-TREE (QUOTE (A))))
;; Loading (DEF-FOLD-TEST COPY-TREE.FOLD.3 (COPY-TREE (QUOTE (A B C D E))))
;; Loading (DEFTEST COPY-TREE.ERROR.1 (SIGNALS-ERROR (COPY-TREE) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-TREE.ERROR.2 (SIGNALS-ERROR (COPY-TREE (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (LOAD "sublis.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/sublis.lsp C147CBD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST SUBLIS.1 (CHECK-SUBLIS (QUOTE ((A B) G (D E 10 G H) 15 . G)) (QUOTE ((E . E2) (G . 17)))) ((A B) 17 (D E2 10 17 H) 15 . 17))
;; Loading (DEFTEST SUBLIS.2 (CHECK-SUBLIS (QUOTE (F6 10 (F4 (F3 (F1 A B) (F1 A P)) (F2 A B)))) (QUOTE (((F1 A B) F2 A B) ((F2 A B) F1 A B))) :TEST (FUNCTION EQUAL)) (F6 10 (F4 (F3 (F2 A B) (F1 A P)) (F1 A B))))
;; Loading (DEFTEST SUBLIS.3 (CHECK-SUBLIS (QUOTE (10 ((10 20 (A B C) 30)) (((10 20 30 40))))) (QUOTE ((30 . "foo")))) (10 ((10 20 (A B C) "foo")) (((10 20 "foo" 40)))))
;; Loading (DEFTEST SUBLIS.4 (CHECK-SUBLIS (SUBLIS (COPY-TREE (QUOTE ((A . 2) (B . 4) (C . 1)))) (COPY-TREE (QUOTE (A B C D E (A B C A D B) F)))) (QUOTE ((T . "yes"))) :KEY (FUNCTION (LAMBDA (X) (AND (TYPEP X (QUOTE INTEGER)) (EVENP X))))) ("yes" "yes" 1 D E ("yes" "yes" 1 "yes" D "yes") F))
;; Loading (DEFTEST SUBLIS.5 (CHECK-SUBLIS (QUOTE ("fee" (("fee" "Fie" "foo")) FIE ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f)))) ("fee" (("fee" "Fie" "foo")) FIE ("fee" "fie")))
;; Loading (DEFTEST SUBLIS.6 (CHECK-SUBLIS (QUOTE ("fee" FIE (("fee" "Fie" "foo") 1) ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))) :TEST (QUOTE EQUAL)) ("fee" FIE (("fee" "Fie" "foo") 1) ("fee" #\f)))
;; Loading (DEFTEST SUBLIS.7 (CHECK-SUBLIS (QUOTE (("aa" A B) (Z "bb" D) ((X . "aa")))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "aa")) . 1) ((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "bb")) . 2))) :TEST (QUOTE EQUAL) :KEY (FUNCTION (LAMBDA (X) (IF (CONSP X) (CAR X) (QUOTE *NOT-PRESENT*))))) (1 (Z . 2) ((X . "aa"))))
;; Loading (DEFTEST SUBLIS.8 (CHECK-SUBLIS (QUOTE (1 2 A B)) (QUOTE ((1 . 2) (A . B))) :KEY NIL) (2 2 B B))
;; Loading (DEFTEST SUBLIS.9 (CHECK-SUBLIS (LIST 0 3 8 20) (QUOTE ((1 . X) (5 . Y) (10 . Z))) :TEST (FUNCTION (LAMBDA (X Y) (AND (REALP X) (REALP Y) (< X Y))))) (X Y Z 20))
;; Loading (DEFTEST SUBLIS.10 (CHECK-SUBLIS (LIST 0 3 8 20) (QUOTE ((1 . X) (5 . Y) (10 . Z))) :TEST-NOT (FUNCTION (LAMBDA (X Y) (NOT (AND (REALP X) (REALP Y) (< X Y)))))) (X Y Z 20))
;; Loading (DEFHARMLESS SUBLIS.TEST-AND-TEST-NOT.1 (SUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBLIS.TEST-AND-TEST-NOT.2 (SUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST SUBLIS.ORDER.1 (LET ((I 0) W X Y Z) (VALUES (SUBLIS (PROGN (SETF W (INCF I)) (QUOTE ((A . Z)))) (PROGN (SETF X (INCF I)) (COPY-TREE (QUOTE (A B C D)))) :TEST (PROGN (SETF Y (INCF I)) (FUNCTION EQL)) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY))) I W X Y Z)) (Z B C D) 4 1 2 3 4)
;; Loading (DEFTEST SUBLIS.ORDER.2 (LET ((I 0) W X Y Z) (VALUES (SUBLIS (PROGN (SETF W (INCF I)) (QUOTE ((A . Z)))) (PROGN (SETF X (INCF I)) (COPY-TREE (QUOTE (A B C D)))) :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF Z (INCF I)) (COMPLEMENT (FUNCTION EQL)))) I W X Y Z)) (Z B C D) 4 1 2 3 4)
;; Loading (DEF-FOLD-TEST SUBLIS.FOLD.1 (SUBLIS (QUOTE ((A . B))) (QUOTE (A X Y . A))))
;; Loading (DEFTEST SUBLIS.ALLOW-OTHER-KEYS.1 (SUBLIS NIL (QUOTE A) :BAD T :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST SUBLIS.ALLOW-OTHER-KEYS.2 (SUBLIS NIL (QUOTE A) :ALLOW-OTHER-KEYS T :BAD T) A)
;; Loading (DEFTEST SUBLIS.ALLOW-OTHER-KEYS.3 (SUBLIS NIL (QUOTE A) :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST SUBLIS.ALLOW-OTHER-KEYS.4 (SUBLIS NIL (QUOTE A) :ALLOW-OTHER-KEYS NIL) A)
;; Loading (DEFTEST SUBLIS.ALLOW-OTHER-KEYS.5 (SUBLIS NIL (QUOTE A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS T :BAD T) A)
;; Loading (DEFTEST SUBLIS.KEYWORDS.6 (SUBLIS (QUOTE ((1 . A))) (LIST 0 1 2) :KEY (FUNCTION (LAMBDA (X) (IF (NUMBERP X) (1+ X) X))) :KEY (FUNCTION IDENTITY)) (A 1 2))
;; Loading (DEFTEST SUBLIS.ERROR.1 (SIGNALS-ERROR (SUBLIS) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBLIS.ERROR.2 (SIGNALS-ERROR (SUBLIS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBLIS.ERROR.3 (SIGNALS-ERROR (SUBLIS NIL (QUOTE A) :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBLIS.ERROR.4 (SIGNALS-ERROR (SUBLIS NIL (QUOTE A) :BAD-KEYWORD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBLIS.ERROR.5 (SIGNALS-ERROR (SUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBLIS.ERROR.6 (SIGNALS-ERROR (SUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBLIS.ERROR.7 (SIGNALS-ERROR (SUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBLIS.ERROR.8 (SIGNALS-ERROR (SUBLIS (QUOTE ((A . 1) . BAD)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) TYPE-ERROR) T)
;; Loading (DEFTEST SUBLIS.SHARED (LET* ((SHARED-PIECE (LIST (QUOTE A) (QUOTE B))) (A (LIST SHARED-PIECE SHARED-PIECE))) (CHECK-SUBLIS A (QUOTE ((A . B) (B . A))))) ((B A) (B A)))
;; Loading (LOAD "nsublis.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nsublis.lsp C15CF8C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NSUBLIS.1 (CHECK-NSUBLIS (QUOTE ((A B) G (D E 10 G H) 15 . G)) (QUOTE ((E . E2) (G . 17)))) ((A B) 17 (D E2 10 17 H) 15 . 17))
;; Loading (DEFTEST NSUBLIS.2 (CHECK-NSUBLIS (QUOTE (F6 10 (F4 (F3 (F1 A B) (F1 A P)) (F2 A B)))) (QUOTE (((F1 A B) F2 A B) ((F2 A B) F1 A B))) :TEST (FUNCTION EQUAL)) (F6 10 (F4 (F3 (F2 A B) (F1 A P)) (F1 A B))))
;; Loading (DEFTEST NSUBLIS.3 (CHECK-NSUBLIS (QUOTE (10 ((10 20 (A B C) 30)) (((10 20 30 40))))) (QUOTE ((30 . "foo")))) (10 ((10 20 (A B C) "foo")) (((10 20 "foo" 40)))))
;; Loading (DEFTEST NSUBLIS.4 (CHECK-NSUBLIS (NSUBLIS (COPY-TREE (QUOTE ((A . 2) (B . 4) (C . 1)))) (COPY-TREE (QUOTE (A B C D E (A B C A D B) F)))) (QUOTE ((T . "yes"))) :KEY (FUNCTION (LAMBDA (X) (AND (TYPEP X (QUOTE INTEGER)) (EVENP X))))) ("yes" "yes" 1 D E ("yes" "yes" 1 "yes" D "yes") F))
;; Loading (DEFTEST NSUBLIS.5 (CHECK-NSUBLIS (QUOTE ("fee" (("fee" "Fie" "foo")) FIE ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f)))) ("fee" (("fee" "Fie" "foo")) FIE ("fee" "fie")))
;; Loading (DEFTEST NSUBLIS.6 (CHECK-NSUBLIS (QUOTE ("fee" FIE (("fee" "Fie" "foo") 1) ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))) :TEST (QUOTE EQUAL)) ("fee" FIE (("fee" "Fie" "foo") 1) ("fee" #\f)))
;; Loading (DEFTEST NSUBLIS.7 (CHECK-NSUBLIS (QUOTE (("aa" A B) (Z "bb" D) ((X . "aa")))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "aa")) . 1) ((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "bb")) . 2))) :TEST (QUOTE EQUAL) :KEY (FUNCTION (LAMBDA (X) (IF (CONSP X) (CAR X) (QUOTE *NOT-PRESENT*))))) (1 (Z . 2) ((X . "aa"))))
;; Loading (DEFTEST NSUBLIS.8 (NSUBLIS NIL (QUOTE A) :BAD-KEYWORD T :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST NSUBLIS.9 (CHECK-NSUBLIS (QUOTE (1 2 A B)) (QUOTE ((1 . 2) (A . B))) :KEY NIL) (2 2 B B))
;; Loading (DEFTEST NSUBLIS.10 (CHECK-NSUBLIS (LIST 0 3 8 20) (QUOTE ((1 . X) (5 . Y) (10 . Z))) :TEST (FUNCTION (LAMBDA (X Y) (AND (REALP X) (REALP Y) (< X Y))))) (X Y Z 20))
;; Loading (DEFTEST NSUBLIS.11 (CHECK-NSUBLIS (LIST 0 3 8 20) (QUOTE ((1 . X) (5 . Y) (10 . Z))) :TEST-NOT (FUNCTION (LAMBDA (X Y) (NOT (AND (REALP X) (REALP Y) (< X Y)))))) (X Y Z 20))
;; Loading (DEFHARMLESS NSUBLIS.TEST-AND-TEST-NOT.1 (NSUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSUBLIS.TEST-AND-TEST-NOT.2 (NSUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST NSUBLIS.ORDER.1 (LET ((I 0) W X Y Z) (VALUES (NSUBLIS (PROGN (SETF W (INCF I)) (QUOTE ((A . Z)))) (PROGN (SETF X (INCF I)) (COPY-TREE (QUOTE (A B C D)))) :TEST (PROGN (SETF Y (INCF I)) (FUNCTION EQL)) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY))) I W X Y Z)) (Z B C D) 4 1 2 3 4)
;; Loading (DEFTEST NSUBLIS.ORDER.2 (LET ((I 0) W X Y Z) (VALUES (NSUBLIS (PROGN (SETF W (INCF I)) (QUOTE ((A . Z)))) (PROGN (SETF X (INCF I)) (COPY-TREE (QUOTE (A B C D)))) :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF Z (INCF I)) (COMPLEMENT (FUNCTION EQL)))) I W X Y Z)) (Z B C D) 4 1 2 3 4)
;; Loading (DEFTEST NSUBLIS.ALLOW-OTHER-KEYS.1 (NSUBLIS NIL (QUOTE A) :BAD T :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST NSUBLIS.ALLOW-OTHER-KEYS.2 (NSUBLIS NIL (QUOTE A) :ALLOW-OTHER-KEYS T :BAD T) A)
;; Loading (DEFTEST NSUBLIS.ALLOW-OTHER-KEYS.3 (NSUBLIS NIL (QUOTE A) :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST NSUBLIS.ALLOW-OTHER-KEYS.4 (NSUBLIS NIL (QUOTE A) :ALLOW-OTHER-KEYS NIL) A)
;; Loading (DEFTEST NSUBLIS.ALLOW-OTHER-KEYS.5 (NSUBLIS NIL (QUOTE A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS T :BAD T) A)
;; Loading (DEFTEST NSUBLIS.KEYWORDS.6 (NSUBLIS (QUOTE ((1 . A))) (LIST 0 1 2) :KEY (FUNCTION (LAMBDA (X) (IF (NUMBERP X) (1+ X) X))) :KEY (FUNCTION IDENTITY)) (A 1 2))
;; Loading (DEFTEST NSUBLIS.ERROR.1 (SIGNALS-ERROR (NSUBLIS) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBLIS.ERROR.2 (SIGNALS-ERROR (NSUBLIS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBLIS.ERROR.3 (SIGNALS-ERROR (NSUBLIS NIL (QUOTE A) :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBLIS.ERROR.4 (SIGNALS-ERROR (NSUBLIS NIL (QUOTE A) :BAD-KEYWORD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBLIS.ERROR.5 (SIGNALS-ERROR (NSUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBLIS.ERROR.6 (SIGNALS-ERROR (NSUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBLIS.ERROR.7 (SIGNALS-ERROR (NSUBLIS (QUOTE ((A . 1) (B . 2))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBLIS.ERROR.8 (SIGNALS-ERROR (NSUBLIS (QUOTE ((A . 1) . BAD)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) TYPE-ERROR) T)
;; Loading (LOAD "subst.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subst.lsp 80E11D57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFVAR *SUBST-TREE-1* (QUOTE (10 (30 20 10) (20 10) (10 20 30 40))))
;; Loading (DEFTEST SUBST.1 (CHECK-SUBST "Z" 30 (COPY-TREE *SUBST-TREE-1*)) (10 ("Z" 20 10) (20 10) (10 20 "Z" 40)))
;; Loading (DEFTEST SUBST.2 (CHECK-SUBST "A" 0 (COPY-TREE *SUBST-TREE-1*)) (10 (30 20 10) (20 10) (10 20 30 40)))
;; Loading (DEFTEST SUBST.3 (CHECK-SUBST "Z" 100 (COPY-TREE *SUBST-TREE-1*) :TEST-NOT (FUNCTION EQL)) "Z")
;; Loading (DEFTEST SUBST.4 (CHECK-SUBST (QUOTE GRAPE) (QUOTE DICK) (QUOTE (MELVILLE WROTE (MOBY DICK)))) (MELVILLE WROTE (MOBY GRAPE)))
;; Loading (DEFTEST SUBST.5 (CHECK-SUBST (QUOTE CHA-CHA-CHA) (QUOTE NIL) (QUOTE (MELVILLE WROTE (MOBY DICK)))) (MELVILLE WROTE (MOBY DICK . CHA-CHA-CHA) . CHA-CHA-CHA))
;; Loading (DEFTEST SUBST.6 (CHECK-SUBST (QUOTE (1 2)) (QUOTE (FOO . BAR)) (QUOTE ((FOO . BAZ) (FOO . BAR) (BAR . FOO) (BAZ FOO . BAR))) :TEST (FUNCTION EQUAL)) ((FOO . BAZ) (1 2) (BAR . FOO) (BAZ 1 2)))
;; Loading (DEFTEST SUBST.7 (CHECK-SUBST (QUOTE FOO) "aaa" (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (X) (IF (AND (NUMBERP X) (EVENP X)) "aaa" NIL))) :TEST (FUNCTION STRING=)) ((1 . FOO) (FOO . 5) (FOO 7 FOO 9 FOO (11 FOO))))
;; Loading (DEFTEST SUBST.8 (CHECK-SUBST (QUOTE FOO) NIL (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (X) (IF (AND (NUMBERP X) (EVENP X)) (COPY-SEQ "aaa") NIL))) :TEST-NOT (FUNCTION EQUAL)) ((1 . FOO) (FOO . 5) (FOO 7 FOO 9 FOO (11 FOO))))
;; Loading (DEFTEST SUBST.9 (CHECK-SUBST (QUOTE A) (QUOTE B) (COPY-TREE (QUOTE (A B C D A B))) :KEY NIL) (A A C D A A))
;; Loading (DEFTEST SUBST.10 (CHECK-SUBST (QUOTE X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST (FUNCTION (LAMBDA (X Y) (AND (REALP X) (REALP Y) (< X Y))))) (1 2 10 X X 4))
;; Loading (DEFTEST SUBST.11 (CHECK-SUBST (QUOTE X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST-NOT (FUNCTION (LAMBDA (X Y) (NOT (AND (REALP X) (REALP Y) (< X Y)))))) (1 2 10 X X 4))
;; Loading (DEFHARMLESS SUBSET.TEST-AND-TEST-NOT.1 (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) :TEST (FUNCTION EQ) :TEST-NOT (FUNCTION EQ)))
;; Loading (DEFHARMLESS SUBSET.TEST-AND-TEST-NOT.2 (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) :TEST-NOT (FUNCTION EQ) :TEST (FUNCTION EQ)))
;; Loading (DEFTEST SUBST.ORDER.1 (LET ((I 0) V W X Y Z) (VALUES (SUBST (PROGN (SETF V (INCF I)) (QUOTE B)) (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (COPY-TREE (QUOTE ((10 A . A) A B C ((A)) Z)))) :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL))) I V W X Y Z)) ((10 B . B) B B C ((B)) Z) 5 1 2 3 4 5)
;; Loading (DEFTEST SUBST.ORDER.2 (LET ((I 0) V W X Y Z) (VALUES (SUBST (PROGN (SETF V (INCF I)) (QUOTE B)) (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (COPY-TREE (QUOTE ((10 A . A) A B C ((A)) Z)))) :TEST-NOT (PROGN (SETF Y (INCF I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY))) I V W X Y Z)) ((10 B . B) B B C ((B)) Z) 5 1 2 3 4 5)
;; Loading (DEF-FOLD-TEST SUBST.FOLD.1 (SUBST (QUOTE A) (QUOTE B) (QUOTE (A B C (A . B) . A))))
;; Loading (DEFTEST SUBST.ALLOW-OTHER-KEYS.1 (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :BAD T :ALLOW-OTHER-KEYS T) (A A C))
;; Loading (DEFTEST SUBST.ALLOW-OTHER-KEYS.2 (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :ALLOW-OTHER-KEYS T) (A A C))
;; Loading (DEFTEST SUBST.ALLOW-OTHER-KEYS.3 (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :ALLOW-OTHER-KEYS NIL) (A A C))
;; Loading (DEFTEST SUBST.ALLOW-OTHER-KEYS.4 (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :ALLOW-OTHER-KEYS T :BAD T) (A A C))
;; Loading (DEFTEST SUBST.ALLOW-OTHER-KEYS.5 (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (A A C))
;; Loading (DEFTEST SUBST.KEYWORDS.6 (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION EQ) :TEST (COMPLEMENT (FUNCTION EQ))) (A A C))
;; Loading (DEFTEST SUBST.ERROR.1 (SIGNALS-ERROR (SUBST) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.2 (SIGNALS-ERROR (SUBST (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.3 (SIGNALS-ERROR (SUBST (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.4 (SIGNALS-ERROR (SUBST (QUOTE A) (QUOTE B) NIL :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.5 (SIGNALS-ERROR (SUBST (QUOTE A) (QUOTE B) NIL :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.6 (SIGNALS-ERROR (SUBST (QUOTE A) (QUOTE B) NIL 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.7 (SIGNALS-ERROR (SUBST (QUOTE A) (QUOTE B) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.8 (SIGNALS-ERROR (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.9 (SIGNALS-ERROR (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST.ERROR.10 (SIGNALS-ERROR (SUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B)) :KEY (FUNCTION EQUAL)) PROGRAM-ERROR) T)
;; Loading (LOAD "subst-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subst-if.lsp 80F5DF37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST SUBST-IF.1 (CHECK-SUBST-IF (QUOTE A) (FUNCTION CONSP) (QUOTE ((100 1) (2 3) (4 3 2 1) (A B C)))) A)
;; Loading (DEFTEST SUBST-IF.2 (CHECK-SUBST-IF 17 (COMPLEMENT (FUNCTION LISTP)) (QUOTE (A (A B) (A C D) (A NIL E F G)))) (17 (17 17) (17 17 17) (17 NIL 17 17 17)))
;; Loading (DEFTEST SUBST-IF.3 (CHECK-SUBST-IF (QUOTE (Z)) (COMPLEMENT (FUNCTION CONSP)) (QUOTE (A (A B) (C D E) (F G H I)))) ((Z) ((Z) (Z) Z) ((Z) (Z) (Z) Z) ((Z) (Z) (Z) (Z) Z) Z))
;; Loading (DEFTEST SUBST-IF.4 (CHECK-SUBST-IF (QUOTE B) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (A B C))) :KEY (FUNCTION LISTP)) B)
;; Loading (DEFTEST SUBST-IF.5 (CHECK-SUBST-IF 4 (FUNCTION (LAMBDA (X) (EQL X 1))) (QUOTE ((1 3) (1) (1 10 20 30) (1 3 X Y))) :KEY (FUNCTION (LAMBDA (X) (AND (CONSP X) (CAR X))))) (4 4 4 4))
;; Loading (DEFTEST SUBST-IF.6 (CHECK-SUBST-IF (QUOTE A) (FUNCTION (LAMBDA (X) (EQL X (QUOTE B)))) (QUOTE ((A) (B) (C) (D))) :KEY NIL) ((A) (A) (C) (D)))
;; Loading (DEFTEST SUBST-IF.7 (LET ((I 0) W X Y Z) (VALUES (SUBST-IF (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (FUNCTION (LAMBDA (X) (EQL X (QUOTE B))))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (1 2 A B C)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY))) I W X Y Z)) (1 2 A A C) 4 1 2 3 4)
;; Loading (DEF-FOLD-TEST SUBST-IF.FOLD.1 (SUBST-IF (QUOTE X) (QUOTE NUMBERP) (QUOTE (A B 3 (4) C D . 12))))
;; Loading (DEFTEST SUBST-IF.ALLOW-OTHER-KEYS.1 (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST SUBST-IF.ALLOW-OTHER-KEYS.2 (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST SUBST-IF.ALLOW-OTHER-KEYS.3 (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS NIL) A)
;; Loading (DEFTEST SUBST-IF.ALLOW-OTHER-KEYS.4 (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :BAD T) A)
;; Loading (DEFTEST SUBST-IF.ALLOW-OTHER-KEYS.5 (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) A)
;; Loading (DEFTEST SUBST-IF.KEYWORDS.6 (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE B))) A)
;; Loading (DEFTEST SUBST-IF.ERROR.1 (SIGNALS-ERROR (SUBST-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF.ERROR.2 (SIGNALS-ERROR (SUBST-IF (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF.ERROR.3 (SIGNALS-ERROR (SUBST-IF (QUOTE A) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF.ERROR.4 (SIGNALS-ERROR (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF.ERROR.5 (SIGNALS-ERROR (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF.ERROR.6 (SIGNALS-ERROR (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF.ERROR.7 (SIGNALS-ERROR (SUBST-IF (QUOTE A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF.ERROR.8 (SIGNALS-ERROR (SUBST-IF (QUOTE A) (FUNCTION NULL) (LIST (QUOTE A) NIL (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "subst-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subst-if-not.lsp 81033E97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST SUBST-IF-NOT.1 (CHECK-SUBST-IF-NOT (QUOTE (X)) (QUOTE CONSP) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4)))) ((X) ((X) (X) X) ((X) (X) (X) X) ((X) (X) (X) (X) X) X))
;; Loading (DEFTEST SUBST-IF-NOT.2 (CHECK-SUBST-IF-NOT (QUOTE A) (COMPLEMENT (FUNCTION LISTP)) (QUOTE ((100 1) (2 3) (4 3 2 1) (A B C)))) A)
;; Loading (DEFTEST SUBST-IF-NOT.3 (CHECK-SUBST-IF-NOT (QUOTE C) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (A B C))) :KEY (COMPLEMENT (FUNCTION LISTP))) C)
;; Loading (DEFTEST SUBST-IF-NOT.4 (CHECK-SUBST-IF-NOT 40 (FUNCTION (LAMBDA (X) (NOT (EQL X 17)))) (QUOTE ((17) (17 22) (17 22 31) (17 21 34 54))) :KEY (FUNCTION (LAMBDA (X) (AND (CONSP X) (CAR X))))) (40 40 40 40))
;; Loading (DEFTEST SUBST-IF-NOT.5 (CHECK-SUBST-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE B))))) (QUOTE ((A) (B) (C) (D))) :KEY NIL) ((A) (A) (C) (D)))
;; Loading (DEFTEST SUBST-IF-NOT.7 (LET ((I 0) W X Y Z) (VALUES (SUBST-IF-NOT (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE B)))))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (1 2 A B C)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY))) I W X Y Z)) (1 2 A A C) 4 1 2 3 4)
;; Loading (DEF-FOLD-TEST SUBST-IF-NOT.FOLD.1 (SUBST-IF-NOT (QUOTE A) (FUNCTION CONSP) (QUOTE ((1 . 2) 3 . 4))))
;; Loading (DEFTEST SUBST-IF-NOT.ALLOW-OTHER-KEYS.1 (SUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :BAD T :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST SUBST-IF-NOT.ALLOW-OTHER-KEYS.2 (SUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST SUBST-IF-NOT.ALLOW-OTHER-KEYS.3 (SUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS NIL) A)
;; Loading (DEFTEST SUBST-IF-NOT.ALLOW-OTHER-KEYS.4 (SUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :BAD T) A)
;; Loading (DEFTEST SUBST-IF-NOT.ALLOW-OTHER-KEYS.5 (SUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) A)
;; Loading (DEFTEST SUBST-IF-NOT.KEYWORDS.6 (SUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE B))) A)
;; Loading (DEFTEST SUBST-IF-NOT.ERROR.1 (SIGNALS-ERROR (SUBST-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF-NOT.ERROR.2 (SIGNALS-ERROR (SUBST-IF-NOT (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF-NOT.ERROR.3 (SIGNALS-ERROR (SUBST-IF-NOT (QUOTE A) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF-NOT.ERROR.4 (SIGNALS-ERROR (SUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF-NOT.ERROR.5 (SIGNALS-ERROR (SUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF-NOT.ERROR.6 (SIGNALS-ERROR (SUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF-NOT.ERROR.7 (SIGNALS-ERROR (SUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBST-IF-NOT.ERROR.8 (SIGNALS-ERROR (SUBST-IF-NOT (QUOTE A) (FUNCTION NULL) (LIST (QUOTE A) NIL (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "nsubst.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nsubst.lsp 8110ABE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFVAR *NSUBST-TREE-1* (QUOTE (10 (30 20 10) (20 10) (10 20 30 40))))
;; Loading (DEFTEST NSUBST.1 (CHECK-NSUBST "Z" 30 (COPY-TREE *NSUBST-TREE-1*)) (10 ("Z" 20 10) (20 10) (10 20 "Z" 40)))
;; Loading (DEFTEST NSUBST.2 (CHECK-NSUBST "A" 0 (COPY-TREE *NSUBST-TREE-1*)) (10 (30 20 10) (20 10) (10 20 30 40)))
;; Loading (DEFTEST NSUBST.3 (CHECK-NSUBST "Z" 100 (COPY-TREE *NSUBST-TREE-1*) :TEST-NOT (FUNCTION EQL)) "Z")
;; Loading (DEFTEST NSUBST.4 (CHECK-NSUBST (QUOTE GRAPE) (QUOTE DICK) (QUOTE (MELVILLE WROTE (MOBY DICK)))) (MELVILLE WROTE (MOBY GRAPE)))
;; Loading (DEFTEST NSUBST.5 (CHECK-NSUBST (QUOTE CHA-CHA-CHA) (QUOTE NIL) (QUOTE (MELVILLE WROTE (MOBY DICK)))) (MELVILLE WROTE (MOBY DICK . CHA-CHA-CHA) . CHA-CHA-CHA))
;; Loading (DEFTEST NSUBST.6 (CHECK-NSUBST (QUOTE (1 2)) (QUOTE (FOO . BAR)) (QUOTE ((FOO . BAZ) (FOO . BAR) (BAR . FOO) (BAZ FOO . BAR))) :TEST (FUNCTION EQUAL)) ((FOO . BAZ) (1 2) (BAR . FOO) (BAZ 1 2)))
;; Loading (DEFTEST NSUBST.7 (CHECK-NSUBST (QUOTE FOO) "aaa" (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (X) (IF (AND (NUMBERP X) (EVENP X)) "aaa" NIL))) :TEST (FUNCTION STRING=)) ((1 . FOO) (FOO . 5) (FOO 7 FOO 9 FOO (11 FOO))))
;; Loading (DEFTEST NSUBST.8 (CHECK-NSUBST (QUOTE FOO) NIL (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (X) (IF (AND (NUMBERP X) (EVENP X)) (COPY-SEQ "aaa") NIL))) :TEST-NOT (FUNCTION EQUAL)) ((1 . FOO) (FOO . 5) (FOO 7 FOO 9 FOO (11 FOO))))
;; Loading (DEFTEST NSUBST.9 (CHECK-NSUBST (QUOTE A) (QUOTE B) (COPY-TREE (QUOTE (A B C D A B))) :KEY NIL) (A A C D A A))
;; Loading (DEFTEST NSUBST.10 (CHECK-NSUBST (QUOTE X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST (FUNCTION (LAMBDA (X Y) (AND (REALP X) (REALP Y) (< X Y))))) (1 2 10 X X 4))
;; Loading (DEFTEST NSUBST.11 (CHECK-NSUBST (QUOTE X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST-NOT (FUNCTION (LAMBDA (X Y) (NOT (AND (REALP X) (REALP Y) (< X Y)))))) (1 2 10 X X 4))
;; Loading (DEFHARMLESS NSUBSET.TEST-AND-TEST-NOT.1 (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) :TEST (FUNCTION EQ) :TEST-NOT (FUNCTION EQ)))
;; Loading (DEFHARMLESS NSUBSET.TEST-AND-TEST-NOT.2 (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) :TEST-NOT (FUNCTION EQ) :TEST (FUNCTION EQ)))
;; Loading (DEFTEST NSUBST.ORDER.1 (LET ((I 0) V W X Y Z) (VALUES (NSUBST (PROGN (SETF V (INCF I)) (QUOTE B)) (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (COPY-TREE (QUOTE ((10 A . A) A B C ((A)) Z)))) :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL))) I V W X Y Z)) ((10 B . B) B B C ((B)) Z) 5 1 2 3 4 5)
;; Loading (DEFTEST NSUBST.ORDER.2 (LET ((I 0) V W X Y Z) (VALUES (NSUBST (PROGN (SETF V (INCF I)) (QUOTE B)) (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (COPY-TREE (QUOTE ((10 A . A) A B C ((A)) Z)))) :TEST-NOT (PROGN (SETF Y (INCF I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY))) I V W X Y Z)) ((10 B . B) B B C ((B)) Z) 5 1 2 3 4 5)
;; Loading (DEFTEST NSUBST.ALLOW-OTHER-KEYS.1 (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :BAD T :ALLOW-OTHER-KEYS T) (A A C))
;; Loading (DEFTEST NSUBST.ALLOW-OTHER-KEYS.2 (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :ALLOW-OTHER-KEYS T) (A A C))
;; Loading (DEFTEST NSUBST.ALLOW-OTHER-KEYS.3 (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :ALLOW-OTHER-KEYS NIL) (A A C))
;; Loading (DEFTEST NSUBST.ALLOW-OTHER-KEYS.4 (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :ALLOW-OTHER-KEYS T :BAD T) (A A C))
;; Loading (DEFTEST NSUBST.ALLOW-OTHER-KEYS.5 (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (A A C))
;; Loading (DEFTEST NSUBST.KEYWORDS.6 (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION EQ) :TEST (COMPLEMENT (FUNCTION EQ))) (A A C))
;; Loading (DEFTEST NSUBST.ERROR.1 (SIGNALS-ERROR (NSUBST) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.2 (SIGNALS-ERROR (NSUBST (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.3 (SIGNALS-ERROR (NSUBST (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.4 (SIGNALS-ERROR (NSUBST (QUOTE A) (QUOTE B) NIL :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.5 (SIGNALS-ERROR (NSUBST (QUOTE A) (QUOTE B) NIL :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.6 (SIGNALS-ERROR (NSUBST (QUOTE A) (QUOTE B) NIL 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.7 (SIGNALS-ERROR (NSUBST (QUOTE A) (QUOTE B) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.8 (SIGNALS-ERROR (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.9 (SIGNALS-ERROR (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST.ERROR.10 (SIGNALS-ERROR (NSUBST (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B)) :KEY (FUNCTION EQUAL)) PROGRAM-ERROR) T)
;; Loading (LOAD "nsubst-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nsubst-if.lsp 81250547>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NSUBST-IF.1 (CHECK-NSUBST-IF (QUOTE A) (FUNCTION CONSP) (QUOTE ((100 1) (2 3) (4 3 2 1) (A B C)))) A)
;; Loading (DEFTEST NSUBST-IF.2 (CHECK-NSUBST-IF 17 (COMPLEMENT (FUNCTION LISTP)) (QUOTE (A (A B) (A C D) (A NIL E F G)))) (17 (17 17) (17 17 17) (17 NIL 17 17 17)))
;; Loading (DEFTEST NSUBST-IF.3 (CHECK-NSUBST-IF (QUOTE (Z)) (COMPLEMENT (FUNCTION CONSP)) (QUOTE (A (A B) (C D E) (F G H I)))) ((Z) ((Z) (Z) Z) ((Z) (Z) (Z) Z) ((Z) (Z) (Z) (Z) Z) Z))
;; Loading (DEFTEST NSUBST-IF.4 (CHECK-NSUBST-IF (QUOTE B) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (A B C))) :KEY (FUNCTION LISTP)) B)
;; Loading (DEFTEST NSUBST-IF.5 (CHECK-NSUBST-IF 4 (FUNCTION (LAMBDA (X) (EQL X 1))) (QUOTE ((1 3) (1) (1 10 20 30) (1 3 X Y))) :KEY (FUNCTION (LAMBDA (X) (AND (CONSP X) (CAR X))))) (4 4 4 4))
;; Loading (DEFTEST NSUBST-IF.6 (CHECK-NSUBST-IF (QUOTE A) (FUNCTION (LAMBDA (X) (EQL X (QUOTE B)))) (QUOTE ((A) (B) (C) (D))) :KEY NIL) ((A) (A) (C) (D)))
;; Loading (DEFTEST NSUBST-IF.7 (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST NSUBST-IF.8 (LET ((I 0) W X Y Z) (VALUES (NSUBST-IF (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (FUNCTION (LAMBDA (X) (EQL X (QUOTE B))))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (1 2 A B C)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY))) I W X Y Z)) (1 2 A A C) 4 1 2 3 4)
;; Loading (DEFTEST NSUBST-IF.ALLOW-OTHER-KEYS.1 (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST NSUBST-IF.ALLOW-OTHER-KEYS.2 (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST NSUBST-IF.ALLOW-OTHER-KEYS.3 (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS NIL) A)
;; Loading (DEFTEST NSUBST-IF.ALLOW-OTHER-KEYS.4 (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :BAD T) A)
;; Loading (DEFTEST NSUBST-IF.ALLOW-OTHER-KEYS.5 (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) A)
;; Loading (DEFTEST NSUBST-IF.KEYWORDS.6 (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE B))) A)
;; Loading (DEFTEST NSUBST-IF.ERROR.1 (SIGNALS-ERROR (NSUBST-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF.ERROR.2 (SIGNALS-ERROR (NSUBST-IF (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF.ERROR.3 (SIGNALS-ERROR (NSUBST-IF (QUOTE A) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF.ERROR.4 (SIGNALS-ERROR (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF.ERROR.5 (SIGNALS-ERROR (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF.ERROR.6 (SIGNALS-ERROR (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF.ERROR.7 (SIGNALS-ERROR (NSUBST-IF (QUOTE A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF.ERROR.8 (SIGNALS-ERROR (NSUBST-IF (QUOTE A) (FUNCTION NULL) (LIST (QUOTE A) NIL (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "nsubst-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nsubst-if-not.lsp 813291B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NSUBST-IF-NOT.1 (CHECK-NSUBST-IF-NOT (QUOTE (X)) (QUOTE CONSP) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4)))) ((X) ((X) (X) X) ((X) (X) (X) X) ((X) (X) (X) (X) X) X))
;; Loading (DEFTEST NSUBST-IF-NOT.2 (CHECK-NSUBST-IF-NOT (QUOTE A) (COMPLEMENT (FUNCTION LISTP)) (QUOTE ((100 1) (2 3) (4 3 2 1) (A B C)))) A)
;; Loading (DEFTEST NSUBST-IF-NOT.3 (CHECK-NSUBST-IF-NOT (QUOTE C) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (A B C))) :KEY (COMPLEMENT (FUNCTION LISTP))) C)
;; Loading (DEFTEST NSUBST-IF-NOT.4 (CHECK-NSUBST-IF-NOT 40 (FUNCTION (LAMBDA (X) (NOT (EQL X 17)))) (QUOTE ((17) (17 22) (17 22 31) (17 21 34 54))) :KEY (FUNCTION (LAMBDA (X) (AND (CONSP X) (CAR X))))) (40 40 40 40))
;; Loading (DEFTEST NSUBST-IF-NOT.5 (CHECK-NSUBST-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE B))))) (QUOTE ((A) (B) (C) (D))) :KEY NIL) ((A) (A) (C) (D)))
;; Loading (DEFTEST NSUBST-IF-NOT.6 (NSUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T) NIL)
;; Loading (DEFTEST NSUBST-IF-NOT.7 (LET ((I 0) W X Y Z) (VALUES (NSUBST-IF-NOT (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE B)))))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (1 2 A B C)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY))) I W X Y Z)) (1 2 A A C) 4 1 2 3 4)
;; Loading (DEFTEST NSUBST-IF-NOT.ALLOW-OTHER-KEYS.1 (NSUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :BAD T :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST NSUBST-IF-NOT.ALLOW-OTHER-KEYS.2 (NSUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T) A)
;; Loading (DEFTEST NSUBST-IF-NOT.ALLOW-OTHER-KEYS.3 (NSUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS NIL) A)
;; Loading (DEFTEST NSUBST-IF-NOT.ALLOW-OTHER-KEYS.4 (NSUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :BAD T) A)
;; Loading (DEFTEST NSUBST-IF-NOT.ALLOW-OTHER-KEYS.5 (NSUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) A)
;; Loading (DEFTEST NSUBST-IF-NOT.KEYWORDS.6 (NSUBST-IF-NOT (QUOTE A) (FUNCTION IDENTITY) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE B))) A)
;; Loading (DEFTEST NSUBST-IF-NOT.ERROR.1 (SIGNALS-ERROR (NSUBST-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF-NOT.ERROR.2 (SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF-NOT.ERROR.3 (SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE A) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF-NOT.ERROR.4 (SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF-NOT.ERROR.5 (SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF-NOT.ERROR.6 (SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF-NOT.ERROR.7 (SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBST-IF-NOT.ERROR.8 (SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE A) (FUNCTION NULL) (LIST (QUOTE A) NIL (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "tree-equal.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/tree-equal.lsp 81401FF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST TREE-EQUAL.1 (NOTNOT-MV (TREE-EQUAL (QUOTE A) (QUOTE A))) T)
;; Loading (DEFTEST TREE-EQUAL.2 (TREE-EQUAL (QUOTE A) (QUOTE B)) NIL)
;; Loading (DEFTEST TREE-EQUAL.3 (NOTNOT-MV (TREE-EQUAL (LIST (QUOTE A) (QUOTE B) (LIST (QUOTE C) (QUOTE D))) (LIST (QUOTE A) (QUOTE B) (LIST (QUOTE C) (QUOTE D))))) T)
;; Loading (DEFTEST TREE-EQUAL.4 (TREE-EQUAL (QUOTE (A B C D)) (QUOTE (A B C E))) NIL)
;; Loading (DEFTEST TREE-EQUAL.5 (NOTNOT-MV (TREE-EQUAL 1 2 :TEST (FUNCTION <))) T)
;; Loading (DEFTEST TREE-EQUAL.6 (NOTNOT-MV (TREE-EQUAL 1 2 :TEST (FUNCTION (LAMBDA (X Y) (VALUES (< X Y) T))))) T)
;; Loading (DEFTEST TREE-EQUAL.7 (TREE-EQUAL 1 2 :TEST (FUNCTION >)) NIL)
;; Loading (DEFTEST TREE-EQUAL.8 (TREE-EQUAL (LIST 1) 2 :TEST (CONSTANTLY T)) NIL)
;; Loading (DEFTEST TREE-EQUAL.9 (TREE-EQUAL (LIST 1) (LIST 2) :TEST (FUNCTION (LAMBDA (X Y) (OR (AND (CONSP X) (CONSP Y)) (EQL X Y))))) NIL)
;; Loading (DEFTEST TREE-EQUAL.10 (NOTNOT-MV (TREE-EQUAL (QUOTE (10 20 . 30)) (QUOTE (11 22 . 34)) :TEST (FUNCTION <))) T)
;; Loading (DEFTEST TREE-EQUAL.11 (LET* ((X (LIST (QUOTE A) (QUOTE B))) (Y (LIST X X)) (Z (LIST (LIST (QUOTE A) (QUOTE B)) (LIST (QUOTE A) (QUOTE B))))) (NOTNOT-MV (TREE-EQUAL Y Z))) T)
;; Loading (DEFTEST TREE-EQUAL.12 (TREE-EQUAL (QUOTE A) (QUOTE (A B))) NIL)
;; Loading (DEFTEST TREE-EQUAL.13 (TREE-EQUAL (QUOTE (A)) (QUOTE (A B))) NIL)
;; Loading (DEFTEST TREE-EQUAL.14 (TREE-EQUAL (QUOTE (A B)) (QUOTE (A))) NIL)
;; Loading (DEFTEST TREE-EQUAL.15 (LET ((X (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) (Y (VECTOR (QUOTE A) (QUOTE (QUOTE B)) (QUOTE C)))) (TREE-EQUAL X Y)) NIL)
;; Loading (DEFTEST TREE-EQUAL.16 (LET ((X (COPY-SEQ "")) (Y (COPY-SEQ ""))) (TREE-EQUAL X Y)) NIL)
;; Loading (DEFHARMLESS TREE-EQUAL.TEST-AND-TEST-NOT.1 (TREE-EQUAL (QUOTE (A B)) (QUOTE (A B)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS TREE-EQUAL.TEST-AND-TEST-NOT.2 (TREE-EQUAL (QUOTE (A B)) (QUOTE (A B)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST TREE-EQUAL.ALLOW-OTHER-KEYS.1 (NOTNOT-MV (TREE-EQUAL (QUOTE (A B)) (LIST (QUOTE A) (QUOTE B)) :ALLOW-OTHER-KEYS NIL)) T)
;; Loading (DEFTEST TREE-EQUAL.ALLOW-OTHER-KEYS.2 (TREE-EQUAL (QUOTE (A B)) (LIST (QUOTE A) (QUOTE C)) :ALLOW-OTHER-KEYS NIL :TEST (FUNCTION EQL)) NIL)
;; Loading (DEFTEST TREE-EQUAL.ALLOW-OTHER-KEYS.3 (TREE-EQUAL (QUOTE (A B)) (LIST (QUOTE A) (QUOTE Z)) :ALLOW-OTHER-KEYS T :FOO T) NIL)
;; Loading (DEFTEST TREE-EQUAL.ALLOW-OTHER-KEYS.4 (NOTNOT-MV (TREE-EQUAL (QUOTE (A B)) (LIST (QUOTE A) (QUOTE B)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T)) T)
;; Loading (DEFTEST TREE-EQUAL.KEYWORDS.1 (NOTNOT-MV (TREE-EQUAL (QUOTE (A . B)) (QUOTE (B . A)) :TEST (COMPLEMENT (FUNCTION EQL)) :TEST (FUNCTION EQL))) T)
;; Loading (DEFTEST TREE-EQUAL.ERROR.1 (SIGNALS-ERROR (TREE-EQUAL) PROGRAM-ERROR) T)
;; Loading (DEFTEST TREE-EQUAL.ERROR.2 (SIGNALS-ERROR (TREE-EQUAL (QUOTE (A B))) PROGRAM-ERROR) T)
;; Loading (DEFTEST TREE-EQUAL.ERROR.3 (SIGNALS-ERROR (TREE-EQUAL (QUOTE (A B)) (QUOTE (A B)) (GENSYM) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST TREE-EQUAL.ERROR.4 (SIGNALS-ERROR (TREE-EQUAL (QUOTE (A B)) (QUOTE (A B)) (GENSYM) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST TREE-EQUAL.ERROR.5 (SIGNALS-ERROR (TREE-EQUAL (QUOTE (A B)) (QUOTE (A B)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST TREE-EQUAL.ERROR.6 (SIGNALS-ERROR (TREE-EQUAL (QUOTE (A B)) (QUOTE (A B)) :TEST (FUNCTION (LAMBDA (X Y Z) (EQ X Y)))) PROGRAM-ERROR) T)
;; Loading (LOAD "copy-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/copy-list.lsp 814EB8B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST COPY-LIST.1 (CHECK-COPY-LIST (QUOTE (A B C D))) (A B C D))
;; Loading (DEFTEST COPY-LIST.2 (CHECK-COPY-LIST (QUOTE (A . B))) (A . B))
;; Loading (DEFTEST COPY-LIST.3 (CHECK-COPY-LIST (QUOTE (A B C . D))) (A B C . D))
;; Loading (DEFTEST COPY-LIST.4 (LET ((I 0)) (VALUES (COPY-LIST (PROGN (INCF I) (QUOTE (A B C)))) I)) (A B C) 1)
;; Loading (DEF-FOLD-TEST COPY-LIST.FOLD.1 (COPY-LIST (QUOTE (A B C D))))
;; Loading (DEF-FOLD-TEST COPY-LIST.FOLD.2 (COPY-LIST (QUOTE (A . B))))
;; Loading (DEFTEST COPY-LIST.ERROR.1 (SIGNALS-ERROR (COPY-LIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-LIST.ERROR.2 (SIGNALS-ERROR (COPY-LIST NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/list.lsp 815419A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST LIST.1 (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (A B C))
;; Loading (DEFTEST LIST.2 (LIST) NIL)
;; Loading (DEFTEST LIST.ORDER.1 (LET ((I 0)) (LIST (INCF I) (INCF I) (INCF I) (INCF I))) (1 2 3 4))
;; Loading (DEFTEST LIST.ORDER.2 (LET ((I 0)) (LIST (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I))) (1 2 3 4 5 6 7 8))
;; Loading (DEFTEST LIST.ORDER.3 (LET ((I 0)) (LIST (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I))) (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
;; Loading (DEF-FOLD-TEST LIST.FOLD.1 (LIST (QUOTE A)))
;; Loading (DEF-FOLD-TEST LIST.FOLD.2 (LIST (QUOTE A) (QUOTE B)))
;; Loading (DEF-FOLD-TEST LIST.FOLD.3 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST LIST*.1 (LIST* 1 2 3) (1 2 . 3))
;; Loading (DEFTEST LIST*.2 (LIST* (QUOTE A)) A)
;; Loading (DEFTEST LIST-LIST*.1 (LIST* (QUOTE A) (QUOTE B) (QUOTE C) (LIST (QUOTE D) (QUOTE E) (QUOTE F))) (A B C D E F))
;; Loading (DEFTEST LIST*.3 (LIST* 1) 1)
;; Loading (DEFTEST LIST*.ORDER.1 (LET ((I 0)) (LIST* (INCF I) (INCF I) (INCF I) (INCF I))) (1 2 3 . 4))
;; Loading (DEFTEST LIST*.ORDER.2 (LET ((I 0)) (LIST* (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I) (INCF I))) (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . 16))
;; Loading (DEF-FOLD-TEST LIST*.FOLD.1 (LIST* (QUOTE A) (QUOTE B)))
;; Loading (DEF-FOLD-TEST LIST*.FOLD.2 (LIST* (QUOTE A) (QUOTE B) (QUOTE C)))
;; Loading (DEF-FOLD-TEST LIST*.FOLD.3 (LIST* (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F)))
;; Loading (LOAD "list-length.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/list-length.lsp C0DE4237>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST LIST-LENGTH-NIL (LIST-LENGTH NIL) 0)
;; Loading (DEFTEST LIST-LENGTH-LIST (LIST-LENGTH (QUOTE (A B C D E F))) 6)
;; Loading (DEFTEST LIST-LENGTH-CIRCULAR-LIST (LET ((X (CONS NIL NIL))) (LET ((Y (LIST* 1 2 3 4 5 6 7 8 9 X))) (SETF (CDR X) Y) (LET ((Z (LIST* (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) Y))) (LIST-LENGTH Z)))) NIL)
;; Loading (DEFTEST LIST-LENGTH.ORDER.1 (LET ((I 0)) (VALUES (LIST-LENGTH (PROGN (INCF I) (QUOTE (A B C)))) I)) 3 1)
;; Loading (DEFTEST LIST-LENGTH.4 (LIST-LENGTH (COPY-TREE (QUOTE (A B C)))) 3)
;; Loading (DEFTEST LIST-LENGTH.ERROR.1 (LOOP FOR X IN (LIST (QUOTE A) 1 1.0 #\w (MAKE-ARRAY (QUOTE (10))) (QUOTE (A B . C)) (SYMBOL-PACKAGE (QUOTE CONS))) COUNT (NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-TYPE-ERROR X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (LIST-LENGTH X)))))) 0)
;; Loading (DEFTEST LIST-LENGTH.ERROR.2 (SIGNALS-ERROR (LIST-LENGTH) PROGRAM-ERROR) T)
;; Loading (DEFTEST LIST-LENGTH.ERROR.3 (SIGNALS-ERROR (LIST-LENGTH NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST LIST-LENGTH.ERROR.4 (SIGNALS-ERROR (LIST-LENGTH (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST LIST-LENGTH.ERROR.5 (SIGNALS-ERROR (LOCALLY (LIST-LENGTH (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (DEFTEST LIST-LENGTH-SYMBOL (SIGNALS-ERROR (LIST-LENGTH (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST LIST-LENGTH-DOTTED-LIST (SIGNALS-ERROR (LIST-LENGTH (COPY-TREE (QUOTE (A B C D . E)))) TYPE-ERROR) T)
;; Loading (LOAD "listp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/listp.lsp C0E8EBA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST LISTP-NIL (NOTNOT-MV (LISTP NIL)) T)
;; Loading (DEFTEST LISTP-SYMBOL (LISTP (QUOTE A)) NIL)
;; Loading (DEFTEST LISTP-SINGLETON-LIST (NOTNOT-MV (LISTP (QUOTE (A)))) T)
;; Loading (DEFTEST LISTP-CIRCULAR-LIST (LET ((X (CONS NIL NIL))) (SETF (CDR X) X) (NOTNOT-MV (LISTP X))) T)
;; Loading (DEFTEST LISTP-LONGER-LIST (NOTNOT-MV (LISTP (QUOTE (A B C D E F G H)))) T)
;; Loading (DEFTEST LISTP-UNIVERSE (CHECK-TYPE-PREDICATE (QUOTE LISTP) (QUOTE LIST)) NIL)
;; Loading (DEFTEST LISTP.ORDER.1 (LET ((I 0)) (VALUES (LISTP (INCF I)) I)) NIL 1)
;; Loading (DEFTEST LISTP.ERROR.1 (SIGNALS-ERROR (LISTP) PROGRAM-ERROR) T)
;; Loading (DEFTEST LISTP.ERROR.2 (SIGNALS-ERROR (LISTP NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "make-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-list.lsp C0EE7757>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MAKE-LIST-EMPTY.1 (MAKE-LIST 0) NIL)
;; Loading (DEFTEST MAKE-LIST-EMPTY.2 (MAKE-LIST 0 :INITIAL-ELEMENT (QUOTE A)) NIL)
;; Loading (DEFTEST MAKE-LIST-NO-INITIAL-ELEMENT (MAKE-LIST 6) (NIL NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-LIST-WITH-INITIAL-ELEMENT (MAKE-LIST 6 :INITIAL-ELEMENT (QUOTE A)) (A A A A A A))
;; Loading (DEFTEST MAKE-LIST.ALLOW-OTHER-KEYS.1 (MAKE-LIST 5 :ALLOW-OTHER-KEYS T :FOO (QUOTE A)) (NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-LIST.ALLOW-OTHER-KEYS.2 (MAKE-LIST 5 :BAR NIL :ALLOW-OTHER-KEYS T) (NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-LIST.ALLOW-OTHER-KEYS.3 (MAKE-LIST 5 :ALLOW-OTHER-KEYS NIL) (NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-LIST.ALLOW-OTHER-KEYS.4 (MAKE-LIST 5 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE BAD) T) (NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-LIST.ALLOW-OTHER-KEYS.5 (MAKE-LIST 5 :ALLOW-OTHER-KEYS T) (NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-LIST-REPEATED-KEYWORD (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE A) :INITIAL-ELEMENT (QUOTE B)) (A A A A A))
;; Loading (DEFTEST MAKE-LIST.ORDER.1 (LET ((I 0) X Y) (VALUES (MAKE-LIST (PROGN (SETF X (INCF I)) 5) :INITIAL-ELEMENT (PROGN (SETF Y (INCF I)) (QUOTE A))) I X Y)) (A A A A A) 2 1 2)
;; Loading (DEFTEST MAKE-LIST.ORDER.2 (LET ((I 0) X Y Z) (VALUES (MAKE-LIST (PROGN (SETF X (INCF I)) 5) :INITIAL-ELEMENT (PROGN (SETF Y (INCF I)) (QUOTE A)) :INITIAL-ELEMENT (PROGN (SETF Z (INCF I)) (QUOTE B))) I X Y Z)) (A A A A A) 3 1 2 3)
;; Loading (DEF-FOLD-TEST MAKE-LIST.FOLD.1 (MAKE-LIST 1))
;; Loading (DEF-FOLD-TEST MAKE-LIST.FOLD.2 (MAKE-LIST 10 :INITIAL-ELEMENT (QUOTE X)))
;; Loading (DEFTEST MAKE-LIST.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION MAKE-LIST) (TYPEF (QUOTE UNSIGNED-BYTE))) NIL)
;; Loading (DEFTEST MAKE-LIST.ERROR.3 (SIGNALS-ERROR (MAKE-LIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-LIST.ERROR.4 (SIGNALS-ERROR (MAKE-LIST 5 :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-LIST.ERROR.5 (SIGNALS-ERROR (MAKE-LIST 5 :INITIAL-ELEMENT) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-LIST.ERROR.6 (SIGNALS-ERROR (MAKE-LIST 5 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-LIST.ERROR.7 (SIGNALS-ERROR (MAKE-LIST 5 :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-LIST.ERROR.8 (SIGNALS-ERROR (LOCALLY (MAKE-LIST (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (LOAD "push.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/push.lsp C0F99657>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST PUSH.1 (LET ((X NIL)) (PUSH (QUOTE A) X)) (A))
;; Loading (DEFTEST PUSH.2 (LET ((X (QUOTE B))) (PUSH (QUOTE A) X) (PUSH (QUOTE C) X)) (C A . B))
;; Loading (DEFTEST PUSH.3 (LET ((X (COPY-TREE (QUOTE (A))))) (PUSH X X) (AND (EQT (CAR X) (CDR X)) X)) ((A) A))
;; Loading (DEFTEST PUSH.4 (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES (PUSH (EXPAND-IN-CURRENT-ENV (%M 1)) X) X))) (1) (1))
;; Loading (DEFTEST PUSH.5 (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES (PUSH 1 (EXPAND-IN-CURRENT-ENV (%M X))) X))) (1) (1))
;; Loading (DEFTEST PUSH.ORDER.1 (LET ((X (LIST NIL)) (I 0) A B) (VALUES (PUSH (PROGN (SETF A (INCF I)) (QUOTE Z)) (CAR (PROGN (SETF B (INCF I)) X))) X I A B)) (Z) ((Z)) 2 1 2)
;; Loading (DEFTEST PUSH.ORDER.2 (LET ((X (VECTOR NIL NIL NIL NIL)) (Y (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (I 1)) (PUSH (AREF Y (INCF I)) (AREF X (INCF I))) (VALUES X Y I)) #(NIL NIL NIL (C)) #(A B C D) 3)
;; Loading (DEFTEST PUSH.ORDER.3 (LET ((X (QUOTE (A B C)))) (VALUES (PUSH (PROGN (SETQ X (QUOTE (D E))) (QUOTE Z)) X) X)) (Z D E) (Z D E))
;; Loading (DEF-MACRO-TEST PUSH.ERROR.1 (PUSH X Y))
;; Loading (LOAD "pop.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pop.lsp C1011667>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST POP.1 (LET ((X (COPY-TREE (QUOTE (A B C))))) (LET ((Y (POP X))) (LIST X Y))) ((B C) A))
;; Loading (DEFTEST POP.2 (LET ((X NIL)) (LET ((Y (POP X))) (LIST X Y))) (NIL NIL))
;; Loading (DEFTEST POP.3 (MACROLET ((%M (Z) Z)) (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (VALUES (POP (EXPAND-IN-CURRENT-ENV (%M X))) X))) A (B C))
;; Loading (DEFTEST POP.ORDER.1 (LET ((I 0) (A (VECTOR (LIST (QUOTE A) (QUOTE B) (QUOTE C))))) (POP (AREF A (PROGN (INCF I) 0))) (VALUES A I)) #((B C)) 1)
;; Loading (DEFTEST PUSH-AND-POP (LET* ((X (COPY-TREE (QUOTE (A B)))) (Y X)) (PUSH (QUOTE C) X) (AND (EQT (CDR X) Y) (POP X))) C)
;; Loading (DEF-MACRO-TEST POP.ERROR.1 (POP X))
;; Loading (LOAD "pushnew.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pushnew.lsp C106E5F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST PUSHNEW.1 (LET ((X NIL)) (LET ((Y (PUSHNEW (QUOTE A) X))) (AND (EQT X Y) (EQUAL X (QUOTE (A))) T))) T)
;; Loading (DEFTEST PUSHNEW.2 (LET* ((X (COPY-TREE (QUOTE (B C D A K F Q)))) (Y (PUSHNEW (QUOTE A) X))) (AND (EQT X Y) X)) (B C D A K F Q))
;; Loading (DEFTEST PUSHNEW.3 (LET* ((X (COPY-TREE (QUOTE (1 2 3 4 5 6 7 8)))) (Y (PUSHNEW 7 X))) (AND (EQT X Y) X)) (1 2 3 4 5 6 7 8))
;; Loading (DEFTEST PUSHNEW.4 (LET* ((X (COPY-TREE (QUOTE ((A B) 1 "and" C D E)))) (Y (PUSHNEW (COPY-TREE (QUOTE (C D))) X :TEST (QUOTE EQUAL)))) (AND (EQT X Y) X)) ((C D) (A B) 1 "and" C D E))
;; Loading (DEFTEST PUSHNEW.5 (LET* ((X (COPY-TREE (QUOTE ((A B) 1 "and" C D E)))) (Y (PUSHNEW (COPY-TREE (QUOTE (A B))) X :TEST (QUOTE EQUAL)))) (AND (EQT X Y) X)) ((A B) 1 "and" C D E))
;; Loading (DEFTEST PUSHNEW.6 (LET* ((X (COPY-TREE (QUOTE ((A B) (C E) (D F) (G H))))) (Y (PUSHNEW (COPY-TREE (QUOTE (D I))) X :KEY (FUNCTION CAR))) (Z (PUSHNEW (COPY-TREE (QUOTE (Z 10))) X :KEY (FUNCTION CAR)))) (AND (EQT Y (CDR Z)) (EQT Z X) X)) ((Z 10) (A B) (C E) (D F) (G H)))
;; Loading (DEFTEST PUSHNEW.7 (LET* ((X (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) X :KEY (FUNCTION CAR) :TEST (FUNCTION STRING=))) (Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) X :KEY (FUNCTION CAR) :TEST (FUNCTION STRING=)))) (AND (EQT Y (CDR X)) (EQT X Z) X)) (("xyz" 10) ("abc" 1) ("def" 2) ("ghi" 3)))
;; Loading (DEFTEST PUSHNEW.8 (LET* ((X (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) X :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)))) (Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) X :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))))) (AND (EQT Y (CDR X)) (EQT X Z) X)) (("xyz" 10) ("abc" 1) ("def" 2) ("ghi" 3)))
;; Loading (DEFTEST PUSHNEW.9 (LET* ((X (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) X :KEY (QUOTE CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)))) (Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) X :KEY (QUOTE CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))))) (AND (EQT Y (CDR X)) (EQT X Z) X)) (("xyz" 10) ("abc" 1) ("def" 2) ("ghi" 3)))
;; Loading (DEFTEST PUSHNEW.10 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (RESULT (PUSHNEW (QUOTE Z) X :KEY NIL))) RESULT) (Z A B C D))
;; Loading (DEFTEST PUSHNEW.11 (LET* ((X (COPY-TREE (QUOTE ((A B) 1 "and" C D E)))) (Y (PUSHNEW (COPY-TREE (QUOTE (A B))) X :TEST (QUOTE EQUAL) :KEY NIL))) (AND (EQT X Y) X)) ((A B) 1 "and" C D E))
;; Loading (DEFTEST PUSHNEW.12 (LET ((I 0) X Y Z (D (QUOTE (B C)))) (VALUES (PUSHNEW (PROGN (SETF X (INCF I)) (QUOTE A)) D :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL))) D I X Y Z)) (A B C) (A B C) 3 1 2 3)
;; Loading (DEFTEST PUSHNEW.13 (LET ((I 0) X Y Z (D (QUOTE (B C)))) (VALUES (PUSHNEW (PROGN (SETF X (INCF I)) (QUOTE A)) D :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF Z (INCF I)) (COMPLEMENT (FUNCTION EQL)))) D I X Y Z)) (A B C) (A B C) 3 1 2 3)
;; Loading (DEFTEST PUSHNEW.14 (LET ((I 0) X Y Z (D (QUOTE (B C)))) (VALUES (PUSHNEW (PROGN (SETF X (INCF I)) (QUOTE A)) D :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL)) :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY))) D I X Y Z)) (A B C) (A B C) 3 1 3 2)
;; Loading (DEFTEST PUSHNEW.15 (LET ((I 0) X Y Z (D (QUOTE (B C)))) (VALUES (PUSHNEW (PROGN (SETF X (INCF I)) (QUOTE A)) D :TEST-NOT (PROGN (SETF Z (INCF I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY))) D I X Y Z)) (A B C) (A B C) 3 1 3 2)
;; Loading (DEFTEST PUSHNEW.16 (LET ((X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 X :TEST (FUNCTION <=)) X)) (10 1 2 3) (10 1 2 3))
;; Loading (DEFTEST PUSHNEW.17 (LET ((X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 X :TEST (FUNCTION >)) X)) (1 2 3) (1 2 3))
;; Loading (DEFTEST PUSHNEW.18 (LET ((X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 X :TEST-NOT (FUNCTION >)) X)) (10 1 2 3) (10 1 2 3))
;; Loading (DEFTEST PUSHNEW.19 (LET ((X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 X :TEST-NOT (FUNCTION <=)) X)) (1 2 3) (1 2 3))
;; Loading (DEFTEST PUSHNEW.20 (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES (PUSHNEW (EXPAND-IN-CURRENT-ENV (%M 1)) X) X))) (1) (1))
;; Loading (DEFTEST PUSHNEW.21 (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES (PUSHNEW 1 (EXPAND-IN-CURRENT-ENV (%M X))) X))) (1) (1))
;; Loading (DEFTEST PUSHNEW.22 (MACROLET ((%M (Z) Z)) (LET ((X (QUOTE (A B)))) (VALUES (PUSHNEW 1 X :TEST (EXPAND-IN-CURRENT-ENV (%M (FUNCTION EQL)))) X))) (1 A B) (1 A B))
;; Loading (DEFTEST PUSHNEW.23 (MACROLET ((%M (Z) Z)) (LET ((X (QUOTE (1)))) (VALUES (PUSHNEW 1 X :TEST-NOT (EXPAND-IN-CURRENT-ENV (%M (FUNCTION EQL)))) X))) (1 1) (1 1))
;; Loading (DEFTEST PUSHNEW.24 (MACROLET ((%M (Z) Z)) (LET ((X (QUOTE (3)))) (VALUES (PUSHNEW 1 X :KEY (EXPAND-IN-CURRENT-ENV (%M (FUNCTION EVENP)))) X))) (3) (3))
;; Loading (DEFHARMLESS PUSHNEW.TEST-AND-TEST-NOT.1 (LET ((X (QUOTE (B C)))) (PUSHNEW (QUOTE A) X :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL))))
;; Loading (DEFHARMLESS PUSHNEW.TEST-AND-TEST-NOT.2 (LET ((X (QUOTE (B C)))) (PUSHNEW (QUOTE A) X :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL))))
;; Loading (DEFTEST PUSHNEW.ORDER.1 (LET ((X (VECTOR NIL NIL NIL NIL)) (Y (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (I 1)) (PUSHNEW (AREF Y (INCF I)) (AREF X (INCF I))) (VALUES X Y I)) #(NIL NIL NIL (C)) #(A B C D) 3)
;; Loading (DEFTEST PUSHNEW.ORDER.2 (LET ((X (VECTOR NIL NIL NIL NIL NIL)) (Y (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (I 1)) (PUSHNEW (AREF Y (INCF I)) (AREF X (INCF I)) :TEST (PROGN (INCF I) (FUNCTION EQL))) (VALUES X Y I)) #(NIL NIL NIL (C) NIL) #(A B C D E) 4)
;; Loading (DEFTEST PUSHNEW.ORDER.3 (LET ((X (QUOTE (A B C)))) (VALUES (PUSHNEW (PROGN (SETQ X (QUOTE (D E))) (QUOTE Z)) X) X)) (Z D E) (Z D E))
;; Loading (DEFTEST PUSHNEW.ERROR.1 (SIGNALS-ERROR (LET ((X (QUOTE (A B)))) (PUSHNEW (QUOTE C) X :TEST (FUNCTION IDENTITY))) PROGRAM-ERROR) T)
;; Loading (DEFTEST PUSHNEW.ERROR.2 (SIGNALS-ERROR (LET ((X (QUOTE (A B)))) (PUSHNEW (QUOTE C) X :TEST-NOT (FUNCTION IDENTITY))) PROGRAM-ERROR) T)
;; Loading (DEFTEST PUSHNEW.ERROR.3 (SIGNALS-ERROR (LET ((X (QUOTE (A B)))) (PUSHNEW (QUOTE C) X :KEY (FUNCTION CONS))) PROGRAM-ERROR) T)
;; Loading (DEF-MACRO-TEST PUSHNEW.ERROR.4 (PUSHNEW X Y))
;; Loading (LOAD "adjoin.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/adjoin.lsp C121A1F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST ADJOIN.1 (ADJOIN (QUOTE A) NIL) (A))
;; Loading (DEFTEST ADJOIN.2 (ADJOIN NIL NIL) (NIL))
;; Loading (DEFTEST ADJOIN.3 (ADJOIN (QUOTE A) (QUOTE (A))) (A))
;; Loading (DEFTEST ADJOIN.4 (ADJOIN (QUOTE A) (QUOTE (A)) :KEY NIL) (A))
;; Loading (DEFTEST ADJOIN.5 (ADJOIN (QUOTE A) (QUOTE (A)) :KEY (FUNCTION IDENTITY)) (A))
;; Loading (DEFTEST ADJOIN.6 (ADJOIN (QUOTE A) (QUOTE (A)) :KEY (QUOTE IDENTITY)) (A))
;; Loading (DEFTEST ADJOIN.7 (ADJOIN (1+ 11) (QUOTE (4 3 12 2 1))) (4 3 12 2 1))
;; Loading (DEFTEST ADJOIN.8 (ADJOIN (1+ 999999999999) (QUOTE (4 1 1000000000000 3816734 A "aa"))) (4 1 1000000000000 3816734 A "aa"))
;; Loading (DEFTEST ADJOIN.9 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a))) ("aaa" AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.10 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a)) :TEST (FUNCTION EQUAL)) (AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.11 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a)) :TEST (QUOTE EQUAL)) (AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.12 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a)) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.14 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a)) :TEST (FUNCTION EQUAL) :KEY (FUNCTION IDENTITY)) (AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.15 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a)) :TEST (QUOTE EQUAL) :KEY (FUNCTION IDENTITY)) (AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.16 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a)) :TEST (FUNCTION EQUAL) :KEY NIL) (AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.17 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a)) :TEST (QUOTE EQUAL) :KEY NIL) (AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.18 (ADJOIN (COPY-SEQ "aaa") (QUOTE (AAA "AAA" "aaa" #\a)) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)) :KEY NIL) (AAA "AAA" "aaa" #\a))
;; Loading (DEFTEST ADJOIN.19 (ADJOIN 10 (QUOTE (1 2 3)) :TEST (FUNCTION <)) (10 1 2 3))
;; Loading (DEFTEST ADJOIN.20 (ADJOIN 10 (QUOTE (1 2 3)) :TEST (FUNCTION >)) (1 2 3))
;; Loading (DEFTEST ADJOIN.21 (ADJOIN 10 (QUOTE (1 2 3)) :TEST-NOT (FUNCTION >)) (10 1 2 3))
;; Loading (DEFTEST ADJOIN.22 (ADJOIN 10 (QUOTE (1 2 3)) :TEST-NOT (FUNCTION <)) (1 2 3))
;; Loading (DEFTEST ADJOIN.24 (MACROLET ((%M (Z) Z)) (VALUES (ADJOIN (EXPAND-IN-CURRENT-ENV (%M (QUOTE A))) (QUOTE (B C))) (ADJOIN (QUOTE A) (EXPAND-IN-CURRENT-ENV (%M (QUOTE (B C))))) (ADJOIN (QUOTE A) (QUOTE (B C)) (EXPAND-IN-CURRENT-ENV (%M :TEST)) (QUOTE EQL)) (ADJOIN (QUOTE A) (QUOTE (A A)) (EXPAND-IN-CURRENT-ENV (%M :TEST-NOT)) (QUOTE EQL)) (ADJOIN (QUOTE A) (QUOTE (B C)) :TEST (EXPAND-IN-CURRENT-ENV (%M (QUOTE EQL)))) (ADJOIN (QUOTE A) (QUOTE (B C)) :TEST (EXPAND-IN-CURRENT-ENV (%M (FUNCTION EQL)))) (ADJOIN 1 (QUOTE (1 2 3)) :KEY (EXPAND-IN-CURRENT-ENV (%M (QUOTE IDENTITY)))))) (A B C) (A B C) (A B C) (A A A) (A B C) (A B C) (1 2 3))
;; Loading (DEFHARMLESS ADJOIN.TEST-AND-TEST-NOT.1 (ADJOIN (QUOTE A) (QUOTE (B C)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS ADJOIN.TEST-AND-TEST-NOT.2 (ADJOIN (QUOTE A) (QUOTE (B C)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST ADJOIN.ORDER.1 (LET ((I 0) W X Y Z) (VALUES (ADJOIN (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (QUOTE (B C D A E))) :KEY (PROGN (SETF Y (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL))) I W X Y Z)) (B C D A E) 4 1 2 3 4)
;; Loading (DEFTEST ADJOIN.ORDER.2 (LET ((I 0) W X Y Z P) (VALUES (ADJOIN (PROGN (SETF W (INCF I)) (QUOTE A)) (PROGN (SETF X (INCF I)) (QUOTE (B C D E))) :TEST-NOT (PROGN (SETF Y (INCF I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF P (INCF I)) NIL)) I W X Y Z P)) (A B C D E) 5 1 2 3 4 5)
;; Loading (DEF-FOLD-TEST ADJOIN.FOLD.1 (ADJOIN (QUOTE X) (QUOTE (A B C NIL D))))
;; Loading (DEFTEST ADJOIN.ALLOW-OTHER-KEYS.1 (ADJOIN (QUOTE A) (QUOTE (B C)) :BAD T :ALLOW-OTHER-KEYS T) (A B C))
;; Loading (DEFTEST ADJOIN.ALLOW-OTHER-KEYS.2 (ADJOIN (QUOTE A) (QUOTE (B C)) :ALLOW-OTHER-KEYS T :FOO T) (A B C))
;; Loading (DEFTEST ADJOIN.ALLOW-OTHER-KEYS.3 (ADJOIN (QUOTE A) (QUOTE (B C)) :ALLOW-OTHER-KEYS T) (A B C))
;; Loading (DEFTEST ADJOIN.ALLOW-OTHER-KEYS.4 (ADJOIN (QUOTE A) (QUOTE (B C)) :ALLOW-OTHER-KEYS NIL) (A B C))
;; Loading (DEFTEST ADJOIN.ALLOW-OTHER-KEYS.5 (ADJOIN (QUOTE A) (QUOTE (B C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE BAD) T) (A B C))
;; Loading (DEFTEST ADJOIN.REPEAT-KEY (ADJOIN (QUOTE A) (QUOTE (B C)) :TEST (FUNCTION EQ) :TEST (COMPLEMENT (FUNCTION EQ))) (A B C))
;; Loading (DEFTEST ADJOIN.ERROR.1 (SIGNALS-ERROR (ADJOIN) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.2 (SIGNALS-ERROR (ADJOIN (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.3 (SIGNALS-ERROR (ADJOIN (QUOTE A) (QUOTE (B C)) :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.4 (SIGNALS-ERROR (ADJOIN (QUOTE A) (QUOTE (B C)) :ALLOW-OTHER-KEYS NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.5 (SIGNALS-ERROR (ADJOIN (QUOTE A) (QUOTE (B C)) 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.6 (SIGNALS-ERROR (ADJOIN (QUOTE A) (QUOTE (B C)) :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.7 (SIGNALS-ERROR (ADJOIN (QUOTE A) (QUOTE (B C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.8 (SIGNALS-ERROR (ADJOIN (QUOTE A) (QUOTE (B C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.9 (SIGNALS-ERROR (ADJOIN (QUOTE A) (QUOTE (B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJOIN.ERROR.10 (SIGNALS-ERROR (ADJOIN (QUOTE A) (LIST* (QUOTE B) (QUOTE C) (QUOTE D))) TYPE-ERROR) T)
;; Loading (LOAD "nth.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nth.lsp C138A3D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NTH.1 (NTH-1-BODY (LOOP FOR I FROM 1 TO 2000 COLLECT (* 4 I))) 0)
;; Loading (DEFTEST NTH.2 (LET ((X (LOOP FOR I FROM 1 TO 2000 COLLECT I))) (LOOP FOR I FROM 0 TO 1999 DO (SETF (NTH I X) (- 1999 I))) (EQUALT X (LOOP FOR I FROM 1999 DOWNTO 0 COLLECT I))) T)
;; Loading (DEFTEST NTH.ORDER.1 (LET ((I 0) (X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) Y Z) (AND (EQLT (SETF (NTH (SETF Y (INCF I)) X) (PROGN (SETF Z (INCF I)) (QUOTE Z))) (QUOTE Z)) (EQLT Y 1) (EQLT Z 2) X)) (A Z C D))
;; Loading (DEFTEST NTH.ORDER.2 (LET ((I 0) X Y (Z (QUOTE (A B C D E)))) (VALUES (NTH (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) Z)) I X Y)) B 2 1 2)
;; Loading (DEFTEST NTH.ERROR.1 (SIGNALS-ERROR (NTH) PROGRAM-ERROR) T)
;; Loading (DEFTEST NTH.ERROR.2 (SIGNALS-ERROR (NTH 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST NTH.ERROR.3 (SIGNALS-ERROR (NTH 1 (QUOTE (A B C)) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NTH.ERROR.4 (SIGNALS-ERROR (NTH 0 (QUOTE (A B C)) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "endp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/endp.lsp C13F5A17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST ENDP-NIL (NOTNOT-MV (ENDP NIL)) T)
;; Loading (DEFTEST ENDP-CONS (ENDP (CONS (QUOTE A) (QUOTE A))) NIL)
;; Loading (DEFTEST ENDP-SINGLETON-LIST (ENDP (QUOTE (A))) NIL)
;; Loading (DEFTEST ENDP.ORDER.1 (LET ((I 0)) (VALUES (ENDP (PROGN (INCF I) (QUOTE (A B C)))) I)) NIL 1)
;; Loading (DEFTEST ENDP.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION ENDP) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST ENDP.ERROR.4 (SIGNALS-ERROR (ENDP) PROGRAM-ERROR) T)
;; Loading (DEFTEST ENDP.ERROR.5 (SIGNALS-ERROR (ENDP NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ENDP.ERROR.6 (SIGNALS-ERROR (LOCALLY (ENDP 1)) TYPE-ERROR) T)
;; Loading (LOAD "nconc.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nconc.lsp C14A76F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NCONC.1 (NCONC) NIL)
;; Loading (DEFTEST NCONC.2 (NCONC (COPY-TREE (QUOTE (A B C D E F)))) (A B C D E F))
;; Loading (DEFTEST NCONC.4 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (Y (LIST (QUOTE D) (QUOTE E) (QUOTE F)))) (LET ((YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (NCONC X Y))) (AND (CHECK-SCAFFOLD-COPY Y YCOPY) (EQT (CDDDR X) Y) RESULT)))) (A B C D E F))
;; Loading (DEFTEST NCONC.5 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (NCONC X X) (AND (EQT (CDDDR X) X) (NULL (LIST-LENGTH X)))) T)
;; Loading (DEFTEST NCONC.6 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (Y (LIST (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G) (QUOTE H))) (Z (LIST (QUOTE I) (QUOTE J) (QUOTE K)))) (LET ((RESULT (NCONC X Y Z (QUOTE FOO)))) (AND (EQT (NTHCDR 3 X) Y) (EQT (NTHCDR 5 Y) Z) (EQT (NTHCDR 3 Z) (QUOTE FOO)) RESULT))) (A B C D E F G H I J K . FOO))
;; Loading (DEFTEST NCONC.7 (NCONC (COPY-TREE (QUOTE (A . B))) (COPY-TREE (QUOTE (C . D))) (COPY-TREE (QUOTE (E . F))) (QUOTE FOO)) (A C E . FOO))
;; Loading (DEFTEST NCONC.ORDER.1 (LET ((I 0) X Y Z) (VALUES (NCONC (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (A B C)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (D E F)))) (PROGN (SETF Z (INCF I)) (COPY-LIST (QUOTE (G H I))))) I X Y Z)) (A B C D E F G H I) 3 1 2 3)
;; Loading (DEFTEST NCONC.ORDER.2 (LET ((I 0)) (VALUES (NCONC (LIST (QUOTE A)) (INCF I)) I)) (A . 1) 1)
;; Loading (LOAD "append.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/append.lsp C1528547>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST APPEND.1 (APPEND) NIL)
;; Loading (DEFTEST APPEND.2 (APPEND (QUOTE X)) X)
;; Loading (DEFTEST APPEND.3 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (Y (LIST (QUOTE E) (QUOTE F) (QUOTE G)))) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (APPEND X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) RESULT)))) (A B C D E F G))
;; Loading (DEFTEST APPEND.4 (APPEND (LIST (QUOTE A)) (LIST (QUOTE B)) (LIST (QUOTE C)) (LIST (QUOTE D)) (LIST (QUOTE E)) (LIST (QUOTE F)) (LIST (QUOTE G)) (QUOTE H)) (A B C D E F G . H))
;; Loading (DEFTEST APPEND.5 (APPEND NIL NIL NIL NIL NIL NIL NIL NIL (QUOTE A)) A)
;; Loading (DEFTEST APPEND.6 (APPEND-6-BODY) 0)
;; Loading (DEFTEST APPEND.7 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (EQ (APPEND X NIL) X)) NIL)
;; Loading (DEFTEST APPEND.8 (MACROLET ((%M (Z) Z)) (APPEND (EXPAND-IN-CURRENT-ENV (%M (QUOTE (A B C)))))) (A B C))
;; Loading (DEFTEST APPEND.9 (MACROLET ((%M (Z) Z)) (APPEND (EXPAND-IN-CURRENT-ENV (%M (LIST 1 2 3))) (LIST 4 5 6))) (1 2 3 4 5 6))
;; Loading (DEFTEST APPEND.10 (MACROLET ((%M (Z) Z)) (APPEND (LIST 1 2 3) (EXPAND-IN-CURRENT-ENV (%M (LIST 4 5 6))))) (1 2 3 4 5 6))
;; Loading (DEFTEST APPEND.ORDER.1 (LET ((I 0) X Y Z) (VALUES (APPEND (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (A B C)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (D E F)))) (PROGN (SETF Z (INCF I)) (COPY-LIST (QUOTE (G H I))))) I X Y Z)) (A B C D E F G H I) 3 1 2 3)
;; Loading (DEFTEST APPEND.ORDER.2 (LET ((I 0)) (VALUES (APPEND (INCF I)) I)) 1 1)
;; Loading (DEF-FOLD-TEST APPEND.FOLD.1 (APPEND (QUOTE (A B C)) NIL))
;; Loading (DEF-FOLD-TEST APPEND.FOLD.2 (APPEND NIL (QUOTE (X)) NIL))
;; Loading (DEFTEST APPEND.ERROR.1 (SIGNALS-ERROR (APPEND (QUOTE (A . B)) (QUOTE (Z))) TYPE-ERROR) T)
;; Loading (DEFTEST APPEND.ERROR.2 (SIGNALS-ERROR (APPEND (QUOTE (X Y Z)) (QUOTE (A . B)) (QUOTE (Z))) TYPE-ERROR) T)
;; Loading (LOAD "revappend.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/revappend.lsp C15CB147>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST REVAPPEND.1 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (Y (LIST (QUOTE D) (QUOTE E) (QUOTE F))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (LET ((RESULT (REVAPPEND X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) (EQT (CDDDR RESULT) Y) RESULT))) (C B A D E F))
;; Loading (DEFTEST REVAPPEND.2 (REVAPPEND (COPY-TREE (QUOTE (A B C D E))) 10) (E D C B A . 10))
;; Loading (DEFTEST REVAPPEND.3 (REVAPPEND NIL (QUOTE A)) A)
;; Loading (DEFTEST REVAPPEND.4 (REVAPPEND (COPY-TREE (QUOTE (A (B C) D))) NIL) (D (B C) A))
;; Loading (DEFTEST REVAPPEND.ORDER.1 (LET ((I 0) X Y) (VALUES (REVAPPEND (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (A B C)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (D E F))))) I X Y)) (C B A D E F) 2 1 2)
;; Loading (DEF-FOLD-TEST REVAPPEND.FOLD.1 (REVAPPEND (QUOTE (X)) NIL))
;; Loading (DEF-FOLD-TEST REVAPPEND.FOLD.2 (REVAPPEND (QUOTE (X Y Z)) NIL))
;; Loading (DEFTEST REVAPPEND.ERROR.1 (SIGNALS-ERROR (REVAPPEND) PROGRAM-ERROR) T)
;; Loading (DEFTEST REVAPPEND.ERROR.2 (SIGNALS-ERROR (REVAPPEND NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REVAPPEND.ERROR.3 (SIGNALS-ERROR (REVAPPEND NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REVAPPEND.ERROR.4 (SIGNALS-ERROR (REVAPPEND (QUOTE (A . B)) (QUOTE (Z))) TYPE-ERROR) T)
;; Loading (LOAD "nreconc.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nreconc.lsp C1645917>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST NRECONC.1 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (Y (COPY-TREE (QUOTE (D E F)))) (RESULT (NRECONC X Y))) (AND (EQUAL Y (QUOTE (D E F))) RESULT)) (C B A D E F))
;; Loading (DEFTEST NRECONC.2 (NRECONC NIL (QUOTE A)) A)
;; Loading (DEFTEST NRECONC.ORDER.1 (LET ((I 0) X Y) (VALUES (NRECONC (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (A B C)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (D E F))))) I X Y)) (C B A D E F) 2 1 2)
;; Loading (DEFTEST NRECONC.ERROR.1 (SIGNALS-ERROR (NRECONC) PROGRAM-ERROR) T)
;; Loading (DEFTEST NRECONC.ERROR.2 (SIGNALS-ERROR (NRECONC NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NRECONC.ERROR.3 (SIGNALS-ERROR (NRECONC NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NRECONC.ERROR.4 (SIGNALS-ERROR (NRECONC (CONS (QUOTE A) (QUOTE B)) (LIST (QUOTE Z))) TYPE-ERROR) T)
;; Loading (LOAD "butlast.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/butlast.lsp 80E7F3F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST BUTLAST.1 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (BUTLAST X 2))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT)))) (A B C))
;; Loading (DEFTEST BUTLAST.2 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (BUTLAST X 0))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT)))) (A B C D E))
;; Loading (DEFTEST BUTLAST.3 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (BUTLAST X 5))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT)))) NIL)
;; Loading (DEFTEST BUTLAST.4 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (BUTLAST X 6))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT)))) NIL)
;; Loading (DEFTEST BUTLAST.5 (BUTLAST (COPY-TREE (QUOTE (A B C . D))) 1) (A B))
;; Loading (DEFTEST BUTLAST.6 (BUTLAST (QUOTE (A B C D E)) (1+ MOST-POSITIVE-FIXNUM)) NIL)
;; Loading (DEFTEST BUTLAST.7 (BUTLAST (QUOTE (A B C D E)) MOST-POSITIVE-FIXNUM) NIL)
;; Loading (DEFTEST BUTLAST.8 (BUTLAST (QUOTE (A B C D E)) (1- MOST-POSITIVE-FIXNUM)) NIL)
;; Loading (DEFTEST BUTLAST.9 (MACROLET ((%M (Z) Z)) (VALUES (BUTLAST (EXPAND-IN-CURRENT-ENV (%M (LIST (QUOTE A) (QUOTE B) (QUOTE C))))) (BUTLAST (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) (EXPAND-IN-CURRENT-ENV (%M 2))))) (A B) (A B C))
;; Loading (DEFTEST BUTLAST.ORDER.1 (LET ((I 0) X Y) (VALUES (BUTLAST (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (PROGN (SETF Y (INCF I)) 2)) I X Y)) (A B C) 2 1 2)
;; Loading (DEFTEST BUTLAST.ORDER.2 (LET ((I 0)) (VALUES (BUTLAST (PROGN (INCF I) (QUOTE (A B C D)))) I)) (A B C) 1)
;; Loading (DEF-FOLD-TEST BUTLAST.FOLD.1 (BUTLAST (QUOTE (A B)) 1))
;; Loading (DEF-FOLD-TEST BUTLAST.FOLD.2 (BUTLAST (QUOTE (A B C D E F)) 3))
;; Loading (DEF-FOLD-TEST BUTLAST.FOLD.3 (BUTLAST (QUOTE (A B C D E F G H I)) 7))
;; Loading (DEFTEST BUTLAST.ERROR.1 (SIGNALS-ERROR (BUTLAST (COPY-TREE (QUOTE (A B C D))) (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST BUTLAST.ERROR.2 (SIGNALS-ERROR (BUTLAST (QUOTE A) 0) TYPE-ERROR) T)
;; Loading (DEFTEST BUTLAST.ERROR.3 (SIGNALS-ERROR (BUTLAST) PROGRAM-ERROR) T)
;; Loading (DEFTEST BUTLAST.ERROR.4 (SIGNALS-ERROR (BUTLAST (QUOTE (A B C)) 3 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST BUTLAST.ERROR.5 (SIGNALS-ERROR (LOCALLY (BUTLAST (QUOTE A) 0) T) TYPE-ERROR) T)
;; Loading (LOAD "nbutlast.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nbutlast.lsp 80F3FAA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NBUTLAST.1 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (LET ((Y (CDR X)) (Z (CDDR X))) (LET ((RESULT (NBUTLAST X 2))) (AND (EQT X RESULT) (EQT (CDR X) Y) (EQT (CDDR X) Z) RESULT)))) (A B C))
;; Loading (DEFTEST NBUTLAST.2 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (LET ((RESULT (NBUTLAST X 5))) (LIST X RESULT))) ((A B C D E) NIL))
;; Loading (DEFTEST NBUTLAST.3 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (LET ((RESULT (NBUTLAST X 500))) (LIST X RESULT))) ((A B C D E) NIL))
;; Loading (DEFTEST NBUTLAST.4 (LET ((X (LIST* (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (LET ((RESULT (NBUTLAST X 1))) (AND (EQT RESULT X) RESULT))) (A B))
;; Loading (DEFTEST NBUTLAST.5 (NBUTLAST NIL) NIL)
;; Loading (DEFTEST NBUTLAST.6 (NBUTLAST (LIST (QUOTE A))) NIL)
;; Loading (DEFTEST NBUTLAST.7 (NBUTLAST (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) (1+ MOST-POSITIVE-FIXNUM)) NIL)
;; Loading (DEFTEST NBUTLAST.8 (NBUTLAST (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) MOST-POSITIVE-FIXNUM) NIL)
;; Loading (DEFTEST NBUTLAST.9 (NBUTLAST (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) (1- MOST-POSITIVE-FIXNUM)) NIL)
;; Loading (DEFTEST NBUTLAST.ORDER.1 (LET ((I 0) X Y) (VALUES (NBUTLAST (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (PROGN (SETF Y (INCF I)) 2)) I X Y)) (A B C) 2 1 2)
;; Loading (DEFTEST NBUTLAST.ORDER.2 (LET ((I 0)) (VALUES (NBUTLAST (PROGN (INCF I) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) I)) (A B C) 1)
;; Loading (DEFTEST NBUTLAST.ERROR.1 (SIGNALS-ERROR (LET ((X (LIST* (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (NBUTLAST X (QUOTE A))) TYPE-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.2 (SIGNALS-ERROR (NBUTLAST (QUOTE A) 10) TYPE-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.3 (SIGNALS-ERROR (NBUTLAST 2 10) TYPE-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.4 (SIGNALS-ERROR (NBUTLAST #\w 10) TYPE-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.5 (SIGNALS-ERROR (NBUTLAST (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) -3) TYPE-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.6 (SIGNALS-ERROR (NBUTLAST (LIST (QUOTE A)) 20.0) TYPE-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.7 (SIGNALS-ERROR (NBUTLAST (LIST (QUOTE A)) -100.0) TYPE-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.8 (SIGNALS-ERROR (NBUTLAST) PROGRAM-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.9 (SIGNALS-ERROR (NBUTLAST (LIST (QUOTE A) (QUOTE B) (QUOTE C)) 3 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST NBUTLAST.ERROR.10 (SIGNALS-ERROR (LOCALLY (NBUTLAST (QUOTE A) 10) T) TYPE-ERROR) T)
;; Loading (LOAD "last.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/last.lsp 80FFD2D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST LAST.1 (LAST NIL) NIL)
;; Loading (DEFTEST LAST.2 (LAST (COPY-TREE (QUOTE (A B)))) (B))
;; Loading (DEFTEST LAST.3 (LAST (COPY-TREE (QUOTE (A B . C)))) (B . C))
;; Loading (DEFTEST LAST.4 (LAST (COPY-TREE (QUOTE (A B C D))) 0) NIL)
;; Loading (DEFTEST LAST.5 (LAST (COPY-TREE (QUOTE (A B C D))) 1) (D))
;; Loading (DEFTEST LAST.6 (LAST (COPY-TREE (QUOTE (A B C D))) 2) (C D))
;; Loading (DEFTEST LAST.7 (LAST (COPY-TREE (QUOTE (A B C D))) 5) (A B C D))
;; Loading (DEFTEST LAST.8 (LAST (CONS (QUOTE A) (QUOTE B)) 0) B)
;; Loading (DEFTEST LAST.9 (LAST (CONS (QUOTE A) (QUOTE B)) 1) (A . B))
;; Loading (DEFTEST LAST.10 (LAST (CONS (QUOTE A) (QUOTE B)) 2) (A . B))
;; Loading (DEFTEST LAST.11 (LET ((X (QUOTE (A B C)))) (EQT (LAST X (1+ MOST-POSITIVE-FIXNUM)) X)) T)
;; Loading (DEFTEST LAST.12 (LET ((X (QUOTE (A B C . D)))) (EQT (LAST X (1+ MOST-POSITIVE-FIXNUM)) X)) T)
;; Loading (DEFTEST LAST.13 (LET ((X (QUOTE (A B C . D)))) (EQT (LAST X MOST-POSITIVE-FIXNUM) X)) T)
;; Loading (DEFTEST LAST.14 (LET ((X (QUOTE (A B C . D)))) (EQT (LAST X (1- MOST-POSITIVE-FIXNUM)) X)) T)
;; Loading (DEFTEST LAST.ORDER.1 (LET ((I 0) X Y) (VALUES (LAST (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (SETF Y (INCF I))) I X Y)) (C D) 2 1 2)
;; Loading (DEFTEST LAST.ORDER.2 (LET ((I 0)) (VALUES (LAST (PROGN (INCF I) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) I)) (D) 1)
;; Loading (DEFTEST LAST.ERROR.1 (SIGNALS-ERROR (LAST (LIST (QUOTE A) (QUOTE B) (QUOTE C)) -1) TYPE-ERROR) T)
;; Loading (DEFTEST LAST.ERROR.2 (SIGNALS-ERROR (LAST (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST LAST.ERROR.3 (SIGNALS-ERROR (LAST (LIST (QUOTE A) (QUOTE B) (QUOTE C)) 10.0) TYPE-ERROR) T)
;; Loading (DEFTEST LAST.ERROR.4 (SIGNALS-ERROR (LAST (LIST (QUOTE A) (QUOTE B) (QUOTE C)) -10.0) TYPE-ERROR) T)
;; Loading (DEFTEST LAST.ERROR.5 (SIGNALS-ERROR (LAST (LIST (QUOTE A) (QUOTE B) (QUOTE C)) #\w) TYPE-ERROR) T)
;; Loading (DEFTEST LAST.ERROR.6 (SIGNALS-ERROR (LAST) PROGRAM-ERROR) T)
;; Loading (DEFTEST LAST.ERROR.7 (SIGNALS-ERROR (LAST (QUOTE (A B C)) 2 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST LAST.ERROR.8 (SIGNALS-ERROR (LOCALLY (LAST (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (LOAD "ldiff.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ldiff.lsp 810AB727>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST LDIFF.1 (LET* ((X (COPY-TREE (QUOTE (A B C D E F)))) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (LDIFF X (CDDDR X)))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT))) (A B C))
;; Loading (DEFTEST LDIFF.2 (LET* ((X (COPY-TREE (QUOTE (A B C D E F)))) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (LDIFF X (QUOTE A)))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (ZEROP (LOOP FOR A ON X AND B ON RESULT COUNT (EQT A B))) RESULT))) (A B C D E F))
;; Loading (DEFTEST LDIFF.3 (LET* ((X (COPY-TREE (QUOTE (A B C D E . F)))) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (LDIFF X (QUOTE A)))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT))) (A B C D E . F))
;; Loading (DEFTEST LDIFF.4 (LET* ((N 18) (X (LIST* (QUOTE A) (QUOTE B) (QUOTE C) 18)) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (LDIFF X N))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT))) (A B C))
;; Loading (DEFTEST LDIFF.5 (LET* ((N 18000000000000) (X (LIST* (QUOTE A) (QUOTE B) (QUOTE C) (1- 18000000000001))) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (LDIFF X N))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT))) (A B C))
;; Loading (DEFTEST LDIFF.6 (LET* ((N (COPY-SEQ "abcde")) (X (LIST* (QUOTE A) (QUOTE B) (QUOTE C) N)) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (LDIFF X N))) (IF (EQUAL RESULT (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (CHECK-SCAFFOLD-COPY X XCOPY) RESULT))) T)
;; Loading (DEFTEST LDIFF.7 (LET* ((N (COPY-SEQ "abcde")) (X (LIST* (QUOTE A) (QUOTE B) (QUOTE C) N)) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (LDIFF X (COPY-SEQ N)))) (IF (EQUAL RESULT X) (CHECK-SCAFFOLD-COPY X XCOPY) RESULT))) T)
;; Loading (DEFTEST LDIFF.8 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (LET ((RESULT (LDIFF X (QUOTE (E))))) (AND (EQUAL X RESULT) (LOOP FOR C1 ON X FOR C2 ON RESULT COUNT (EQT C1 C2))))) 0)
;; Loading (DEFTEST LDIFF.ORDER.1 (LET ((I 0) X Y) (VALUES (LDIFF (PROGN (SETF X (INCF I)) (LIST* (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (PROGN (SETF Y (INCF I)) (QUOTE D))) I X Y)) (A B C) 2 1 2)
;; Loading (DEF-FOLD-TEST LDIFF.FOLD.1 (LDIFF (QUOTE (A B C)) (QUOTE X)))
;; Loading (DEF-FOLD-TEST LDIFF.FOLD.2 (LET ((X (QUOTE (A B C)))) (LDIFF X (CDDR X))))
;; Loading (DEFTEST LDIFF.ERROR.1 (SIGNALS-TYPE-ERROR X 10 (LDIFF X (QUOTE A))) T)
;; Loading (DEFTEST LDIFF.ERROR.2 (SIGNALS-TYPE-ERROR X (QUOTE A) (LDIFF X (QUOTE A))) T)
;; Loading (DEFTEST LDIFF.ERROR.3 (SIGNALS-TYPE-ERROR X (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT (QUOTE A)) (LDIFF X (QUOTE (A)))) T)
;; Loading (DEFTEST LDIFF.ERROR.4 (SIGNALS-TYPE-ERROR X 1.23 (LDIFF X T)) T)
;; Loading (DEFTEST LDIFF.ERROR.5 (SIGNALS-TYPE-ERROR X #\w (LDIFF X (QUOTE A))) T)
;; Loading (DEFTEST LDIFF.ERROR.6 (SIGNALS-ERROR (LDIFF) PROGRAM-ERROR) T)
;; Loading (DEFTEST LDIFF.ERROR.7 (SIGNALS-ERROR (LDIFF NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST LDIFF.ERROR.8 (SIGNALS-ERROR (LDIFF NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "tailp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/tailp.lsp 8119BCB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST TAILP.1 (LET ((X (COPY-TREE (QUOTE (A B C D E . F))))) (AND (TAILP X X) (TAILP (CDR X) X) (TAILP (CDDR X) X) (TAILP (CDDDR X) X) (TAILP (CDDDDR X) X) T)) T)
;; Loading (DEFTEST TAILP.2 (NOTNOT-MV (TAILP (QUOTE E) (COPY-TREE (QUOTE (A B C D . E))))) T)
;; Loading (DEFTEST TAILP.3 (TAILP (QUOTE Z) (COPY-TREE (QUOTE (A B C D . E)))) NIL)
;; Loading (DEFTEST TAILP.4 (NOTNOT-MV (TAILP 10203040506070 (LIST* (QUOTE A) (QUOTE B) (1- 10203040506071)))) T)
;; Loading (DEFTEST TAILP.5 (LET ((X "abcde")) (TAILP X (LIST* (QUOTE A) (QUOTE B) (COPY-SEQ X)))) NIL)
;; Loading (DEFTEST TAILP.ERROR.5 (SIGNALS-ERROR (TAILP) PROGRAM-ERROR) T)
;; Loading (DEFTEST TAILP.ERROR.6 (SIGNALS-ERROR (TAILP NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST TAILP.ERROR.7 (SIGNALS-ERROR (TAILP NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST TAILP.6 (LET* ((X (COPY-LIST (QUOTE (A B C D E)))) (Y (CDDR X))) (LET ((XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (AND (TAILP Y X) (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY)))) T)
;; Loading (DEFTEST TAILP.ORDER.1 (LET ((I 0) X Y) (VALUES (NOTNOT (TAILP (PROGN (SETF X (INCF I)) (QUOTE D)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C . D))))) I X Y)) T 2 1 2)
;; Loading (LOAD "nthcdr.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nthcdr.lsp 81225A67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NTHCDR.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NTHCDR X (COPY-LIST (QUOTE (A B C D)))))) (TYPEF (QUOTE UNSIGNED-BYTE))) NIL)
;; Loading (DEFTEST NTHCDR.ERROR.6 (SIGNALS-ERROR (NTHCDR -10 (COPY-TREE (QUOTE (A B C D)))) TYPE-ERROR) T)
;; Loading (DEFTEST NTHCDR.ERROR.7 (SIGNALS-ERROR (NTHCDR) PROGRAM-ERROR) T)
;; Loading (DEFTEST NTHCDR.ERROR.8 (SIGNALS-ERROR (NTHCDR 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST NTHCDR.ERROR.9 (SIGNALS-ERROR (NTHCDR 0 NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NTHCDR.ERROR.10 (SIGNALS-ERROR (NTHCDR 3 (CONS (QUOTE A) (QUOTE B))) TYPE-ERROR) T)
;; Loading (DEFTEST NTHCDR.ERROR.11 (SIGNALS-ERROR (LOCALLY (NTHCDR (QUOTE A) (COPY-TREE (QUOTE (A B C D)))) T) TYPE-ERROR) T)
;; Loading (DEFTEST NTHCDR.1 (NTHCDR 0 (COPY-TREE (QUOTE (A B C D . E)))) (A B C D . E))
;; Loading (DEFTEST NTHCDR.2 (NTHCDR 1 (COPY-TREE (QUOTE (A B C D)))) (B C D))
;; Loading (DEFTEST NTHCDR.3 (NTHCDR 10 NIL) NIL)
;; Loading (DEFTEST NTHCDR.4 (NTHCDR 4 (LIST (QUOTE A) (QUOTE B) (QUOTE C))) NIL)
;; Loading (DEFTEST NTHCDR.5 (NTHCDR 1 (CONS (QUOTE A) (QUOTE B))) B)
;; Loading (DEFTEST NTHCDR.ORDER.1 (LET ((I 0) X Y) (VALUES (NTHCDR (SETF X (INCF I)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D)))) I X Y)) (B C D) 2 1 2)
;; Loading (LOAD "rest.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rest.lsp 8129B3E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST REST.1 (REST (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (B C))
;; Loading (DEFTEST REST.ORDER.1 (LET ((I 0)) (VALUES (REST (PROGN (INCF I) (QUOTE (A B)))) I)) (B) 1)
;; Loading (DEFTEST REST.ERROR.1 (SIGNALS-ERROR (REST) PROGRAM-ERROR) T)
;; Loading (DEFTEST REST.ERROR.2 (SIGNALS-ERROR (REST NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "member.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/member.lsp 812DCCA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MEMBER.1 (LET* ((X (COPY-TREE (QUOTE (A B C D E F)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER (QUOTE C) X))) (AND (EQT RESULT (CDDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.2 (LET* ((X (COPY-TREE (QUOTE (A B C D E F)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER (QUOTE E) X))) (AND (EQT RESULT (CDDDDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.3 (LET* ((X (COPY-TREE (QUOTE (1 2 3 4 5 6 7)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER 4 X))) (AND (EQT RESULT (CDDDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.4 (LET* ((X (COPY-TREE (QUOTE (2 4 6 8 10 12)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER 9 X :KEY (FUNCTION 1+)))) (AND (EQT RESULT (CDDDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.5 (LET* ((X (COPY-TREE (QUOTE ((A B) (C D) (E F) (G H))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER (QUOTE (C D)) X :TEST (FUNCTION EQUAL)))) (AND (EQT RESULT (CDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.6 (LET* ((X (COPY-TREE (QUOTE ((A B) (C D) (E F) (G H))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER (QUOTE C) X :KEY (FUNCTION CAR)))) (AND (EQT RESULT (CDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.7 (LET* ((X (COPY-TREE (QUOTE ((A B) (C D) (E F) (G H))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER (QUOTE C) X :KEY (FUNCTION CAR) :TEST (FUNCTION EQ)))) (AND (EQT RESULT (CDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.8 (LET* ((X (COPY-TREE (QUOTE ((A B) (C D) (E F) (G H))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER (QUOTE C) X :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQ))))) (AND (EQT RESULT (CDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.9 (LET* ((X (COPY-TREE (QUOTE ((A B) (C D) (E F) (G H))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER (QUOTE C) X :KEY (FUNCTION CAR) :TEST (FUNCTION EQL)))) (AND (EQT RESULT (CDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.10 (LET* ((X (COPY-TREE (QUOTE ((A B) (C D) (E F) (G H))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MEMBER (LIST (QUOTE D)) X :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)))) (AND (EQT RESULT (CDR X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST MEMBER.11 (MEMBER (COPY-SEQ "cc") (COPY-TREE (QUOTE ("aa" "bb" "cc" "dd" "ee")))) NIL)
;; Loading (DEFTEST MEMBER.12 (MEMBER 1 (COPY-TREE (QUOTE (3 4 1 31 423)))) (1 31 423))
;; Loading (DEFTEST MEMBER.13 (MEMBER (COPY-SEQ "cc") (COPY-TREE (QUOTE ("aa" "bb" "cc" "dd" "ee"))) :TEST (FUNCTION EQUAL)) ("cc" "dd" "ee"))
;; Loading (DEFTEST MEMBER.14 (MEMBER (QUOTE A) NIL) NIL)
;; Loading (DEFTEST MEMBER.15 (MEMBER NIL NIL) NIL)
;; Loading (DEFTEST MEMBER.16 (MEMBER NIL NIL :TEST (FUNCTION EQUAL)) NIL)
;; Loading (DEFTEST MEMBER.16-A (MEMBER NIL NIL :TEST (FUNCTION (LAMBDA (X Y) (ERROR "Should not call this function")))) NIL)
;; Loading (DEFTEST MEMBER.17 (MEMBER (QUOTE A) NIL :TEST (FUNCTION (LAMBDA (X Y) (ERROR "Should not call this function")))) NIL)
;; Loading (DEFTEST MEMBER.18 (MEMBER (QUOTE A) (QUOTE (C D A B E)) :KEY NIL) (A B E))
;; Loading (DEFTEST MEMBER.19 (MEMBER (QUOTE Z) (QUOTE (A B C D)) :KEY NIL) NIL)
;; Loading (DEFTEST MEMBER.20 (MEMBER 10 (QUOTE (1 2 3 4 10 11 14 18)) :TEST (FUNCTION <)) (11 14 18))
;; Loading (DEFTEST MEMBER.21 (MEMBER 10 (QUOTE (1 2 3 4 10 11 14 18)) :TEST-NOT (FUNCTION >=)) (11 14 18))
;; Loading (DEFHARMLESS MEMBER.TEST-AND-TEST-NOT.1 (MEMBER (QUOTE B) (QUOTE (A B C)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS MEMBER.TEST-AND-TEST-NOT.2 (MEMBER (QUOTE B) (QUOTE (A B C)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST MEMBER.ORDER.1 (LET ((I 0) X Y) (VALUES (MEMBER (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D)))) I X Y)) (C D) 2 1 2)
;; Loading (DEFTEST MEMBER.ORDER.2 (LET ((I 0) X Y Z P) (VALUES (MEMBER (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF P (INCF I)) (FUNCTION EQ))) I X Y Z P)) (C D) 4 1 2 3 4)
;; Loading (DEFTEST MEMBER.ORDER.3 (LET ((I 0) X Y) (VALUES (MEMBER (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D))) :TEST (FUNCTION EQ)) I X Y)) (C D) 2 1 2)
;; Loading (DEFTEST MEMBER.ORDER.4 (LET ((I 0) X Y Z P Q) (VALUES (MEMBER (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF P (INCF I)) (FUNCTION EQ)) :KEY (PROGN (SETF Q (INCF I)) (CONSTANTLY (QUOTE Z)))) I X Y Z P Q)) (C D) 5 1 2 3 4 5)
;; Loading (DEFTEST MEMBER.ORDER.5 (LET ((I 0) X Y Z Q) (VALUES (MEMBER (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D))) :TEST (FUNCTION EQ) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF Q (INCF I)) (CONSTANTLY (QUOTE Z)))) I X Y Z Q)) (C D) 4 1 2 3 4)
;; Loading (DEFTEST MEMBER.ALLOW-OTHER-KEYS.1 (MEMBER (QUOTE B) (QUOTE (A B C)) :BAD T :ALLOW-OTHER-KEYS T) (B C))
;; Loading (DEFTEST MEMBER.ALLOW-OTHER-KEYS.2 (MEMBER (QUOTE B) (QUOTE (A B C)) :ALLOW-OTHER-KEYS T :BAD T) (B C))
;; Loading (DEFTEST MEMBER.ALLOW-OTHER-KEYS.3 (MEMBER (QUOTE B) (QUOTE (A B C)) :ALLOW-OTHER-KEYS T) (B C))
;; Loading (DEFTEST MEMBER.ALLOW-OTHER-KEYS.4 (MEMBER (QUOTE B) (QUOTE (A B C)) :ALLOW-OTHER-KEYS NIL) (B C))
;; Loading (DEFTEST MEMBER.ALLOW-OTHER-KEYS.5 (MEMBER (QUOTE B) (QUOTE (A B C)) :ALLOW-OTHER-KEYS 17 :ALLOW-OTHER-KEYS NIL (QUOTE #:X) T) (B C))
;; Loading (DEFTEST MEMBER.KEYWORDS.6 (MEMBER (QUOTE B) (QUOTE (A B C)) :TEST (FUNCTION EQ) :TEST (COMPLEMENT (FUNCTION EQ))) (B C))
;; Loading (DEFTEST MEMBER.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MEMBER (QUOTE A) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST MEMBER.ERROR.2 (SIGNALS-ERROR (MEMBER (QUOTE A) 1.299999) TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.3 (SIGNALS-ERROR (MEMBER (QUOTE A) 1) TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.4 (SIGNALS-ERROR (MEMBER (QUOTE A) 0) TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.5 (SIGNALS-ERROR (MEMBER (QUOTE A) "abcde") TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.6 (SIGNALS-ERROR (MEMBER (QUOTE A) #\w) TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.7 (SIGNALS-ERROR (MEMBER (QUOTE A) T) TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.8 (SIGNALS-ERROR (MEMBER) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.9 (SIGNALS-ERROR (MEMBER NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.10 (SIGNALS-ERROR (MEMBER NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.11 (SIGNALS-ERROR (MEMBER NIL NIL :TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.12 (SIGNALS-ERROR (MEMBER NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.13 (SIGNALS-ERROR (MEMBER NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.14 (SIGNALS-ERROR (LOCALLY (MEMBER (QUOTE A) T) T) TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.15 (SIGNALS-ERROR (MEMBER (QUOTE A) (QUOTE (A B C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.16 (SIGNALS-ERROR (MEMBER (QUOTE A) (QUOTE (A B C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER.ERROR.17 (SIGNALS-ERROR (MEMBER (QUOTE A) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "member-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/member-if.lsp 814AC387>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MEMBER-IF.1 (MEMBER-IF (FUNCTION LISTP) NIL) NIL)
;; Loading (DEFTEST MEMBER-IF.2 (MEMBER-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (QUOTE (1 2 A 3 4))) (A 3 4))
;; Loading (DEFTEST MEMBER-IF.3 (MEMBER-IF (FUNCTION (LAMBDA (X) (EQL X 12))) (QUOTE (4 12 11 73 11)) :KEY (FUNCTION 1+)) (11 73 11))
;; Loading (DEFTEST MEMBER-IF.4 (LET ((TEST-INPUTS (SYSTEM.INTERNALS::BACKQUOTE (1 A 11.3121 11310.0 112300.0 -1 0 0.0 0.0 (A B C . D) (SYSTEM.INTERNALS::BQ-COMMA (MAKE-ARRAY (QUOTE (10)))) "ancadas" #\w)))) (NOTNOT-MV (EVERY (FUNCTION (LAMBDA (X) (LET ((RESULT (CATCH-TYPE-ERROR (MEMBER-IF (FUNCTION LISTP) X)))) (OR (EQT RESULT (QUOTE TYPE-ERROR)) (PROGN (FORMAT T "~%On ~S: returned ~%~S" X RESULT) NIL))))) TEST-INPUTS))) T)
;; Loading (DEFTEST MEMBER-IF.5 (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION EVENP)) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF.ORDER.1 (LET ((I 0) X Y) (VALUES (MEMBER-IF (PROGN (SETF X (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL A B NIL C D)))) I X Y)) (A B NIL C D) 2 1 2)
;; Loading (DEFTEST MEMBER-IF.ORDER.2 (LET ((I 0) X Y Z W) (VALUES (MEMBER-IF (PROGN (SETF X (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL A B NIL C D))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF W (INCF I)) (FUNCTION NOT))) I X Y Z W)) (A B NIL C D) 4 1 2 3 4)
;; Loading (DEFTEST MEMBER-IF.KEYWORDS.1 (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION EVENP) :KEY (FUNCTION ODDP)) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF.ALLOW-OTHER-KEYS.2 (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :BAD T) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF.ALLOW-OTHER-KEYS.3 (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS T) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF.ALLOW-OTHER-KEYS.4 (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF.ALLOW-OTHER-KEYS.5 (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS NIL) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF.ALLOW-OTHER-KEYS.6 (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF.ALLOW-OTHER-KEYS.7 (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL)) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MEMBER-IF (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST MEMBER-IF.ERROR.2 (SIGNALS-ERROR (MEMBER-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF.ERROR.3 (SIGNALS-ERROR (MEMBER-IF (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF.ERROR.4 (SIGNALS-ERROR (MEMBER-IF (FUNCTION NULL) (QUOTE (A B C)) :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF.ERROR.5 (SIGNALS-ERROR (MEMBER-IF (FUNCTION NULL) (QUOTE (A B C)) :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF.ERROR.6 (SIGNALS-ERROR (MEMBER-IF (FUNCTION NULL) (QUOTE (A B C)) :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF.ERROR.7 (SIGNALS-ERROR (MEMBER-IF (FUNCTION NULL) (QUOTE (A B C)) 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF.ERROR.8 (SIGNALS-ERROR (LOCALLY (MEMBER-IF (FUNCTION IDENTITY) (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER-IF.ERROR.9 (SIGNALS-ERROR (MEMBER-IF (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF.ERROR.10 (SIGNALS-ERROR (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "member-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/member-if-not.lsp 815C9537>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MEMBER-IF-NOT.1 (MEMBER-IF-NOT (FUNCTION LISTP) NIL) NIL)
;; Loading (DEFTEST MEMBER-IF-NOT.2 (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (QUOTE (A 1 2 A 3 4))) (1 2 A 3 4))
;; Loading (DEFTEST MEMBER-IF-NOT.3 (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X 12)))) (QUOTE (4 12 11 73 11)) :KEY (FUNCTION 1+)) (11 73 11))
;; Loading (DEFTEST MEMBER-IF-NOT.4 (LET ((TEST-INPUTS (SYSTEM.INTERNALS::BACKQUOTE (1 A 11.3121 11310.0 112300.0 -1 0 0.0 0.0 ((A) (B) (C) . D) (SYSTEM.INTERNALS::BQ-COMMA (MAKE-ARRAY (QUOTE (10)))) "ancadas" #\w)))) (NOT (EVERY (FUNCTION (LAMBDA (X) (LET ((RESULT (CATCH-TYPE-ERROR (MEMBER-IF-NOT (FUNCTION LISTP) X)))) (OR (EQT RESULT (QUOTE TYPE-ERROR)) (PROGN (FORMAT T "~%On x = ~S, returns: ~%~S" X RESULT) NIL))))) TEST-INPUTS))) NIL)
;; Loading (DEFTEST MEMBER-IF-NOT.5 (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION EVENP)) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF-NOT.ORDER.1 (LET ((I 0) X Y) (VALUES (MEMBER-IF-NOT (PROGN (SETF X (INCF I)) (FUNCTION NOT)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL A B NIL C D)))) I X Y)) (A B NIL C D) 2 1 2)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MEMBER-IF-NOT.ORDER.2 (LET ((I 0) X Y Z W) (VALUES (MEMBER-IF-NOT (PROGN (SETF X (INCF I)) (FUNCTION NOT)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL A B NIL C D))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF W (INCF I)) (FUNCTION NOT))) I X Y Z W)) (A B NIL C D) 4 1 2 3 4)
;; Loading (DEFTEST MEMBER-IF-NOT.KEYWORDS.1 (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION EVENP) :KEY (FUNCTION ODDP)) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF-NOT.ALLOW-OTHER-KEYS.2 (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :BAD T) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF-NOT.ALLOW-OTHER-KEYS.3 (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS T) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF-NOT.ALLOW-OTHER-KEYS.4 (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF-NOT.ALLOW-OTHER-KEYS.5 (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS NIL) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF-NOT.ALLOW-OTHER-KEYS.6 (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL)) (2 3 4 5))
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MEMBER-IF-NOT (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.2 (SIGNALS-ERROR (MEMBER-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.3 (SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.4 (SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL) (QUOTE (A B C)) :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.5 (SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL) (QUOTE (A B C)) :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.6 (SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL) (QUOTE (A B C)) :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.7 (SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL) (QUOTE (A B C)) 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.8 (SIGNALS-ERROR (LOCALLY (MEMBER-IF-NOT (FUNCTION IDENTITY) (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.9 (SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MEMBER-IF-NOT.ERROR.10 (SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "mapc.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/mapc.lsp C0ED4517>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MAPC.1 (MAPC (FUNCTION LIST) NIL) NIL)
;; Loading (DEFTEST MAPC.2 (LET ((X 0)) (LET ((RESULT (MAPC (FUNCTION (LAMBDA (Y) (INCF X Y))) (QUOTE (1 2 3 4))))) (LIST RESULT X))) ((1 2 3 4) 10))
;; Loading (DEFTEST MAPC.3 (LET ((X 0)) (LIST (MAPC (FUNCTION (LAMBDA (Y Z) (DECLARE (IGNORE Y Z)) (INCF X))) (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST 5)) X)) ((A A A A A) 5))
;; Loading (DEFTEST MAPC.4 (LET ((X 0)) (LIST (MAPC (FUNCTION (LAMBDA (Y Z) (DECLARE (IGNORE Y Z)) (INCF X))) (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST 10)) X)) ((A A A A A) 5))
;; Loading (DEFTEST MAPC.5 (LET ((X 0)) (LIST (MAPC (FUNCTION (LAMBDA (Y Z) (DECLARE (IGNORE Y Z)) (INCF X))) (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST 3)) X)) ((A A A A A) 3))
;; Loading (DEFTEST MAPC.6 (LET* ((X (COPY-LIST (QUOTE (A B C D E F G H)))) (XCOPY (MAKE-SCAFFOLD-COPY X))) (SETF *MAPC.6-VAR* NIL) (LET ((RESULT (MAPC (QUOTE MAPC.6-FUN) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT X) *MAPC.6-VAR*))) (H G F E D C B A))
;; Loading (DEFTEST MAPC.ORDER.1 (LET ((I 0) X Y Z) (VALUES (MAPC (PROGN (SETF X (INCF I)) (FUNCTION LIST)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C))) (PROGN (SETF Z (INCF I)) (QUOTE (1 2 3)))) I X Y Z)) (A B C) 3 1 2 3)
;; Loading (DEFTEST MAPC.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAPC (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST MAPC.ERROR.2 (SIGNALS-ERROR (MAPC) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPC.ERROR.3 (SIGNALS-ERROR (MAPC (FUNCTION APPEND)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPC.ERROR.4 (SIGNALS-ERROR (LOCALLY (MAPC (FUNCTION IDENTITY) 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST MAPC.ERROR.5 (SIGNALS-ERROR (MAPC (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPC.ERROR.6 (SIGNALS-ERROR (MAPC (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPC.ERROR.7 (SIGNALS-ERROR (MAPC (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAPC.ERROR.8 (SIGNALS-ERROR (MAPC (FUNCTION IDENTITY) (LIST* 1 2 3 4)) TYPE-ERROR) T)
;; Loading (LOAD "mapcar.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/mapcar.lsp C0F80CE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MAPCAR.1 (MAPCAR (FUNCTION 1+) NIL) NIL)
;; Loading (DEFTEST MAPCAR.2 (LET* ((X (COPY-LIST (QUOTE (1 2 3 4)))) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (MAPCAR (FUNCTION 1+) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT))) (2 3 4 5))
;; Loading (DEFTEST MAPCAR.3 (LET* ((N 0) (X (COPY-LIST (QUOTE (A B C D)))) (XCOPY (MAKE-SCAFFOLD-COPY X))) (LET ((RESULT (MAPCAR (FUNCTION (LAMBDA (Y) (DECLARE (IGNORE Y)) (INCF N))) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT))) (1 2 3 4))
;; Loading (DEFTEST MAPCAR.4 (LET* ((N 0) (X (COPY-LIST (QUOTE (A B C D)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (X2 (COPY-LIST (QUOTE (A B C D E F)))) (X2COPY (MAKE-SCAFFOLD-COPY X2)) (RESULT (MAPCAR (FUNCTION (LAMBDA (Y Z) (DECLARE (IGNORE Y Z)) (INCF N))) X X2))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY X2 X2COPY) (LIST RESULT N))) ((1 2 3 4) 4))
;; Loading (DEFTEST MAPCAR.5 (LET* ((N 0) (X (COPY-LIST (QUOTE (A B C D)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (X2 (COPY-LIST (QUOTE (A B C D E F)))) (X2COPY (MAKE-SCAFFOLD-COPY X2)) (RESULT (MAPCAR (FUNCTION (LAMBDA (Y Z) (DECLARE (IGNORE Y Z)) (INCF N))) X2 X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY X2 X2COPY) (LIST RESULT N))) ((1 2 3 4) 4))
;; Loading (DEFTEST MAPCAR.6 (LET* ((X (COPY-LIST (QUOTE (A B C D E F G H)))) (XCOPY (MAKE-SCAFFOLD-COPY X))) (SETF *MAPC.6-VAR* NIL) (LET ((RESULT (MAPCAR (QUOTE MAPC.6-FUN) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (LIST *MAPC.6-VAR* RESULT)))) ((H G F E D C B A) (A B C D E F G H)))
;; Loading (DEFTEST MAPCAR.ORDER.1 (LET ((I 0) X Y Z) (VALUES (MAPCAR (PROGN (SETF X (INCF I)) (FUNCTION LIST)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C))) (PROGN (SETF Z (INCF I)) (QUOTE (1 2 3)))) I X Y Z)) ((A 1) (B 2) (C 3)) 3 1 2 3)
;; Loading (DEF-FOLD-TEST MAPCAR.FOLD.1 (MAPCAR (QUOTE IDENTITY) (QUOTE (A B C D))))
;; Loading (DEF-FOLD-TEST MAPCAR.FOLD.2 (MAPCAR (QUOTE NOT) (QUOTE (T NIL NIL T T))))
;; Loading (DEFTEST MAPCAR.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAPCAR (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST MAPCAR.ERROR.2 (SIGNALS-ERROR (MAPCAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCAR.ERROR.3 (SIGNALS-ERROR (MAPCAR (FUNCTION APPEND)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCAR.ERROR.4 (SIGNALS-ERROR (LOCALLY (MAPCAR (FUNCTION IDENTITY) 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST MAPCAR.ERROR.5 (SIGNALS-ERROR (MAPCAR (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAPCAR.ERROR.6 (SIGNALS-ERROR (MAPCAR (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCAR.ERROR.7 (SIGNALS-ERROR (MAPCAR (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCAR.ERROR.8 (SIGNALS-ERROR (MAPCAR (FUNCTION IDENTITY) (LIST* 1 2 3 4)) TYPE-ERROR) T)
;; Loading (LOAD "mapcan.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/mapcan.lsp C1050DB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MAPCAN.1 (MAPCAN (FUNCTION LIST) NIL) NIL)
;; Loading (DEFTEST MAPCAN.2 (MAPCAN (FUNCTION LIST) (COPY-LIST (QUOTE (A B C D E F)))) (A B C D E F))
;; Loading (DEFTEST MAPCAN.3 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MAPCAN (FUNCTION LIST) X))) (AND (= (LENGTH X) (LENGTH RESULT)) (CHECK-SCAFFOLD-COPY X XCOPY) (LOOP FOR E1 ON X AND E2 ON RESULT COUNT (OR (EQT E1 E2) (NOT (EQL (CAR E1) (CAR E2))))))) 0)
;; Loading (DEFTEST MAPCAN.4 (MAPCAN (FUNCTION LIST) (COPY-LIST (QUOTE (1 2 3 4))) (COPY-LIST (QUOTE (A B C D)))) (1 A 2 B 3 C 4 D))
;; Loading (DEFTEST MAPCAN.5 (MAPCAN (FUNCTION (LAMBDA (X Y) (MAKE-LIST Y :INITIAL-ELEMENT X))) (COPY-LIST (QUOTE (A B C D))) (COPY-LIST (QUOTE (1 2 3 4)))) (A B B C C C D D D D))
;; Loading (DEFVAR *MAPCAN.6-VAR* NIL)
;; Loading (DEFUN MAPCAN.6-FUN (X) (PUSH X *MAPCAN.6-VAR*) (COPY-LIST *MAPCAN.6-VAR*))
;; Loading (DEFTEST MAPCAN.6 (PROGN (SETF *MAPCAN.6-VAR* NIL) (MAPCAN (QUOTE MAPCAN.6-FUN) (COPY-LIST (QUOTE (A B C D))))) (A B A C B A D C B A))
;; Loading (DEFTEST MAPCAN.ORDER.1 (LET ((I 0) X Y Z) (VALUES (MAPCAN (PROGN (SETF X (INCF I)) (FUNCTION LIST)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C))) (PROGN (SETF Z (INCF I)) (QUOTE (1 2 3)))) I X Y Z)) (A 1 B 2 C 3) 3 1 2 3)
;; Loading (DEFTEST MAPCAN.8 (MAPCAN (FUNCTION (LAMBDA (X Y) (MAKE-LIST Y :INITIAL-ELEMENT X))) (COPY-LIST (QUOTE (A B C D))) (COPY-LIST (QUOTE (1 2 3 4 5 6)))) (A B B C C C D D D D))
;; Loading (DEFTEST MAPCAN.9 (MAPCAN (FUNCTION (LAMBDA (X Y) (MAKE-LIST Y :INITIAL-ELEMENT X))) (COPY-LIST (QUOTE (A B C D E F))) (COPY-LIST (QUOTE (1 2 3 4)))) (A B B C C C D D D D))
;; Loading (DEFTEST MAPCAN.10 (MAPCAN (FUNCTION LIST) (COPY-LIST (QUOTE (A B C D))) (COPY-LIST (QUOTE (1 2 3 4))) NIL) NIL)
;; Loading (DEFTEST MAPCAN.11 (MAPCAN (CONSTANTLY 1) (LIST (QUOTE A))) 1)
;; Loading (DEFTEST MAPCAN.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAPCAN (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST MAPCAN.ERROR.2 (SIGNALS-ERROR (MAPCAN) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCAN.ERROR.3 (SIGNALS-ERROR (MAPCAN (FUNCTION APPEND)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCAN.ERROR.4 (SIGNALS-ERROR (LOCALLY (MAPCAN (FUNCTION IDENTITY) 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST MAPCAN.ERROR.5 (SIGNALS-ERROR (MAPCAN (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAPCAN.ERROR.6 (SIGNALS-ERROR (MAPCAN (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCAN.ERROR.7 (SIGNALS-ERROR (MAPCAN (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCAN.ERROR.8 (SIGNALS-ERROR (MAPCAN (FUNCTION IDENTITY) (LIST* (LIST 1) (LIST 2) 3)) TYPE-ERROR) T)
;; Loading (LOAD "mapl.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/mapl.lsp C111B087>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MAPL.1 (MAPL (FUNCTION LIST) NIL) NIL)
;; Loading (DEFTEST MAPL.2 (LET* ((A NIL) (X (COPY-LIST (QUOTE (A B C)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MAPL (FUNCTION (LAMBDA (Y) (PUSH Y A))) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT X) A)) ((C) (B C) (A B C)))
;; Loading (DEFTEST MAPL.3 (LET* ((A NIL) (X (COPY-LIST (QUOTE (A B C D)))) (Y (COPY-LIST (QUOTE (1 2 3 4)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (MAPL (FUNCTION (LAMBDA (XTAIL YTAIL) (SETF A (APPEND (MAPCAR (FUNCTION LIST) XTAIL YTAIL) A)))) X Y))) (AND (EQT RESULT X) (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) A)) ((D 4) (C 3) (D 4) (B 2) (C 3) (D 4) (A 1) (B 2) (C 3) (D 4)))
;; Loading (DEFTEST MAPL.4 (LET* ((A NIL) (X (COPY-LIST (QUOTE (A B C D)))) (Y (COPY-LIST (QUOTE (1 2 3 4 5 6 7 8)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (MAPL (FUNCTION (LAMBDA (XTAIL YTAIL) (SETF A (APPEND (MAPCAR (FUNCTION LIST) XTAIL YTAIL) A)))) X Y))) (AND (EQT RESULT X) (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) A)) ((D 4) (C 3) (D 4) (B 2) (C 3) (D 4) (A 1) (B 2) (C 3) (D 4)))
;; Loading (DEFTEST MAPL.5 (LET* ((A NIL) (X (COPY-LIST (QUOTE (A B C D E F G)))) (Y (COPY-LIST (QUOTE (1 2 3 4)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (MAPL (FUNCTION (LAMBDA (XTAIL YTAIL) (SETF A (APPEND (MAPCAR (FUNCTION LIST) XTAIL YTAIL) A)))) X Y))) (AND (EQT RESULT X) (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) A)) ((D 4) (C 3) (D 4) (B 2) (C 3) (D 4) (A 1) (B 2) (C 3) (D 4)))
;; Loading (DEFTEST MAPL.ORDER.1 (LET ((I 0) X Y Z) (VALUES (MAPL (PROGN (SETF X (INCF I)) (CONSTANTLY NIL)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C))) (PROGN (SETF Z (INCF I)) (QUOTE (1 2 3)))) I X Y Z)) (A B C) 3 1 2 3)
;; Loading (DEFTEST MAPL.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAPL (FUNCTION IDENTITY) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST MAPL.ERROR.2 (SIGNALS-ERROR (MAPL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPL.ERROR.3 (SIGNALS-ERROR (MAPL (FUNCTION APPEND)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPL.ERROR.4 (SIGNALS-ERROR (LOCALLY (MAPL (FUNCTION IDENTITY) 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST MAPL.ERROR.5 (SIGNALS-ERROR (MAPL (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPL.ERROR.6 (SIGNALS-ERROR (MAPL (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPL.ERROR.7 (SIGNALS-ERROR (MAPL (FUNCTION CAAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAPL.ERROR.8 (SIGNALS-ERROR (MAPL (FUNCTION IDENTITY) (LIST* (LIST 1) (LIST 2) 3)) TYPE-ERROR) T)
;; Loading (LOAD "maplist.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/maplist.lsp C11ED9C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MAPLIST.1 (MAPLIST (FUNCTION LIST) NIL) NIL)
;; Loading (DEFTEST MAPLIST.2 (LET* ((X (COPY-LIST (QUOTE (A B C)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MAPLIST (FUNCTION IDENTITY) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT)) ((A B C) (B C) (C)))
;; Loading (DEFTEST MAPLIST.3 (LET* ((X (COPY-LIST (QUOTE (A B C D)))) (Y (COPY-LIST (QUOTE (1 2 3 4)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (MAPLIST (FUNCTION APPEND) X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) RESULT)) ((A B C D 1 2 3 4) (B C D 2 3 4) (C D 3 4) (D 4)))
;; Loading (DEFTEST MAPLIST.4 (LET* ((X (COPY-LIST (QUOTE (A B C D)))) (Y (COPY-LIST (QUOTE (1 2 3 4 5)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (MAPLIST (FUNCTION APPEND) X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) RESULT)) ((A B C D 1 2 3 4 5) (B C D 2 3 4 5) (C D 3 4 5) (D 4 5)))
;; Loading (DEFTEST MAPLIST.5 (LET* ((X (COPY-LIST (QUOTE (A B C D E)))) (Y (COPY-LIST (QUOTE (1 2 3 4)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (MAPLIST (FUNCTION APPEND) X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) RESULT)) ((A B C D E 1 2 3 4) (B C D E 2 3 4) (C D E 3 4) (D E 4)))
;; Loading (DEFTEST MAPLIST.6 (MAPLIST (QUOTE APPEND) (QUOTE (A B C)) (QUOTE (1 2 3))) ((A B C 1 2 3) (B C 2 3) (C 3)))
;; Loading (DEFTEST MAPLIST.7 (MAPLIST (FUNCTION (LAMBDA (X Y) (NTH (CAR X) Y))) (QUOTE (0 1 0 1 0 1 0)) (QUOTE (A B C D E F G))) (A C C E E G G))
;; Loading (DEFTEST MAPLIST.ORDER.1 (LET ((I 0) X Y Z) (VALUES (MAPLIST (PROGN (SETF X (INCF I)) (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE X)) (CAR Y)))) (PROGN (SETF Y (INCF I)) (QUOTE (A B C))) (PROGN (SETF Z (INCF I)) (QUOTE (1 2 3)))) I X Y Z)) (1 2 3) 3 1 2 3)
;; Loading (DEF-FOLD-TEST MAPLIST.FOLD.1 (MAPLIST (QUOTE CAR) (QUOTE (A B C D E))))
;; Loading (DEF-FOLD-TEST MAPLIST.FOLD.2 (MAPLIST (FUNCTION CADR) (QUOTE (A B C D E))))
;; Loading (DEFTEST MAPLIST.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAPLIST (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST MAPLIST.ERROR.2 (SIGNALS-ERROR (MAPLIST (FUNCTION IDENTITY) 1) TYPE-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.3 (SIGNALS-ERROR (MAPLIST (FUNCTION IDENTITY) 1.1323) TYPE-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.4 (SIGNALS-ERROR (MAPLIST (FUNCTION IDENTITY) "abcde") TYPE-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.5 (SIGNALS-ERROR (MAPLIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.6 (SIGNALS-ERROR (MAPLIST (FUNCTION APPEND)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.7 (SIGNALS-ERROR (LOCALLY (MAPLIST (FUNCTION IDENTITY) (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.8 (SIGNALS-ERROR (MAPLIST (FUNCTION CAAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.9 (SIGNALS-ERROR (MAPLIST (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.10 (SIGNALS-ERROR (MAPLIST (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPLIST.ERROR.11 (SIGNALS-ERROR (MAPLIST (FUNCTION IDENTITY) (LIST* (LIST 1) (LIST 2) 3)) TYPE-ERROR) T)
;; Loading (LOAD "mapcon.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/mapcon.lsp C12D42F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST MAPCON.1 (MAPCON (FUNCTION (LAMBDA (X) (APPEND (QUOTE (A)) X NIL))) NIL) NIL)
;; Loading (DEFTEST MAPCON.2 (LET* ((X (COPY-LIST (QUOTE (1 2 3 4)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (MAPCON (FUNCTION (LAMBDA (Y) (APPEND (QUOTE (A)) Y NIL))) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) RESULT)) (A 1 2 3 4 A 2 3 4 A 3 4 A 4))
;; Loading (DEFTEST MAPCON.3 (LET* ((X (COPY-LIST (QUOTE (4 2 3 2 2)))) (Y (COPY-LIST (QUOTE (A B C D E F G H I J K L)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (MAPCON (FUNCTION (LAMBDA (XT YT) (SUBSEQ YT 0 (CAR XT)))) X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) RESULT)) (A B C D B C C D E D E E F))
;; Loading (DEFTEST MAPCON.4 (MAPCON (CONSTANTLY 1) (LIST (QUOTE A))) 1)
;; Loading (DEFTEST MAPCON.ORDER.1 (LET ((I 0) X Y Z) (VALUES (MAPCON (PROGN (SETF X (INCF I)) (FUNCTION (LAMBDA (X Y) (LIST (CAR X) (CAR Y))))) (PROGN (SETF Y (INCF I)) (QUOTE (A B C))) (PROGN (SETF Z (INCF I)) (QUOTE (1 2 3)))) I X Y Z)) (A 1 B 2 C 3) 3 1 2 3)
;; Loading (DEFTEST MAPCON.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAPCON (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST MAPCON.ERROR.2 (SIGNALS-ERROR (MAPCON) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCON.ERROR.3 (SIGNALS-ERROR (MAPCON (FUNCTION APPEND)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCON.ERROR.4 (SIGNALS-ERROR (LOCALLY (MAPCON (FUNCTION IDENTITY) 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST MAPCON.ERROR.5 (SIGNALS-ERROR (MAPCON (FUNCTION CAAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAPCON.ERROR.6 (SIGNALS-ERROR (MAPCON (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCON.ERROR.7 (SIGNALS-ERROR (MAPCON (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPCON.ERROR.8 (SIGNALS-ERROR (MAPCON (FUNCTION COPY-TREE) (CONS 1 2)) TYPE-ERROR) T)
;; Loading (LOAD "acons.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/acons.lsp C13707E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST ACONS.1 (LET* ((X (COPY-TREE (QUOTE ((C . D) (E . F))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (ACONS (QUOTE A) (QUOTE B) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT (CDR RESULT) X) RESULT)) ((A . B) (C . D) (E . F)))
;; Loading (DEFTEST ACONS.2 (ACONS (QUOTE A) (QUOTE B) NIL) ((A . B)))
;; Loading (DEFTEST ACONS.3 (ACONS (QUOTE A) (QUOTE B) (QUOTE C)) ((A . B) . C))
;; Loading (DEFTEST ACONS.4 (ACONS (QUOTE ((A B))) (QUOTE (((C D) E) F)) (QUOTE ((1 . 2)))) ((((A B)) ((C D) E) F) (1 . 2)))
;; Loading (DEFTEST ACONS.5 (ACONS "ancd" 1.143 NIL) (("ancd" . 1.143)))
;; Loading (DEFTEST ACONS.6 (ACONS #\R :FOO :BAR) ((#\R . :FOO) . :BAR))
;; Loading (DEFTEST ACONS.7 (MACROLET ((%M (Z) Z)) (ACONS (EXPAND-IN-CURRENT-ENV (%M (QUOTE A))) (QUOTE B) (QUOTE (C)))) ((A . B) C))
;; Loading (DEFTEST ACONS.8 (MACROLET ((%M (Z) Z)) (ACONS (QUOTE A) (EXPAND-IN-CURRENT-ENV (%M (QUOTE B))) (QUOTE (C)))) ((A . B) C))
;; Loading (DEFTEST ACONS.9 (MACROLET ((%M (Z) Z)) (ACONS (QUOTE A) (QUOTE B) (EXPAND-IN-CURRENT-ENV (%M (QUOTE (C)))))) ((A . B) C))
;; Loading (DEFTEST ACONS.ORDER.1 (LET ((I 0) X Y Z) (VALUES (ACONS (PROGN (SETF X (INCF I)) (QUOTE A)) (PROGN (SETF Y (INCF I)) (QUOTE B)) (PROGN (SETF Z (INCF I)) (QUOTE ((C . D))))) I X Y Z)) ((A . B) (C . D)) 3 1 2 3)
;; Loading (DEF-FOLD-TEST ACONS.FOLD.1 (ACONS (QUOTE X) (QUOTE Y) NIL))
;; Loading (DEF-FOLD-TEST ACONS.FOLD.2 (ACONS 1 2 (QUOTE ((3 . 4) (5 . 6)))))
;; Loading (DEFTEST ACONS.ERROR.1 (SIGNALS-ERROR (ACONS) PROGRAM-ERROR) T)
;; Loading (DEFTEST ACONS.ERROR.2 (SIGNALS-ERROR (ACONS (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ACONS.ERROR.3 (SIGNALS-ERROR (ACONS (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ACONS.ERROR.4 (SIGNALS-ERROR (ACONS (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) PROGRAM-ERROR) T)
;; Loading (LOAD "assoc.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/assoc.lsp C14044F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST ASSOC.1 (ASSOC NIL NIL) NIL)
;; Loading (DEFTEST ASSOC.2 (ASSOC NIL (QUOTE (NIL))) NIL)
;; Loading (DEFTEST ASSOC.3 (ASSOC NIL (QUOTE (NIL (NIL . 2) (A . B)))) (NIL . 2))
;; Loading (DEFTEST ASSOC.4 (ASSOC NIL (QUOTE ((A . B) (C . D)))) NIL)
;; Loading (DEFTEST ASSOC.5 (ASSOC (QUOTE A) (QUOTE ((A . B)))) (A . B))
;; Loading (DEFTEST ASSOC.6 (ASSOC (QUOTE A) (QUOTE ((:A . B) (#:A . C) (A . D) (A . E) (Z . F)))) (A . D))
;; Loading (DEFTEST ASSOC.7 (LET* ((X (COPY-TREE (QUOTE ((A . B) (B . C) (C . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (ASSOC (QUOTE B) X))) (AND (EQT RESULT (SECOND X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST ASSOC.8 (ASSOC 1 (QUOTE ((0 . A) (1 . B) (2 . C)))) (1 . B))
;; Loading (DEFTEST ASSOC.9 (ASSOC (COPY-SEQ "abc") (QUOTE ((ABC . 1) ("abc" . 2) ("abc" . 3)))) NIL)
;; Loading (DEFTEST ASSOC.10 (ASSOC (COPY-LIST (QUOTE (A))) (COPY-TREE (QUOTE (((A) B) ((A) (C)))))) NIL)
;; Loading (DEFTEST ASSOC.11 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (ASSOC X (SYSTEM.INTERNALS::BACKQUOTE (((A B) C) ((SYSTEM.INTERNALS::BQ-COMMA X) . D) ((SYSTEM.INTERNALS::BQ-COMMA X) . E) ((A B) 1))))) ((A B) . D))
;; Loading (DEFTEST ASSOC.12 (ASSOC #\e (QUOTE (("abefd" . 1) ("aevgd" . 2) ("edada" . 3))) :KEY (FUNCTION (LAMBDA (X) (SCHAR X 1)))) ("aevgd" . 2))
;; Loading (DEFTEST ASSOC.13 (ASSOC NIL (QUOTE (((A) . B) (NIL . C) ((NIL) . D))) :KEY (FUNCTION CAR)) (NIL . C))
;; Loading (DEFTEST ASSOC.14 (ASSOC (COPY-SEQ "abc") (QUOTE ((ABC . 1) ("abc" . 2) ("abc" . 3))) :TEST (FUNCTION EQUAL)) ("abc" . 2))
;; Loading (DEFTEST ASSOC.15 (ASSOC (COPY-SEQ "abc") (QUOTE ((ABC . 1) ("abc" . 2) ("abc" . 3))) :TEST (FUNCTION EQUALP)) ("abc" . 2))
;; Loading (DEFTEST ASSOC.16 (ASSOC (COPY-LIST (QUOTE (A))) (COPY-TREE (QUOTE (((A) B) ((A) (C))))) :TEST (FUNCTION EQUAL)) ((A) B))
;; Loading (DEFTEST ASSOC.17 (ASSOC (COPY-SEQ "abc") (QUOTE ((ABC . 1) (A . A) (B . B) ("abc" . 2) ("abc" . 3))) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) ("abc" . 2))
;; Loading (DEFTEST ASSOC.18 (ASSOC (QUOTE A) (QUOTE ((A . D) (B . C))) :TEST-NOT (FUNCTION EQ)) (B . C))
;; Loading (DEFTEST ASSOC.19 (ASSOC (QUOTE A) (QUOTE ((A . D) (B . C))) :TEST (COMPLEMENT (FUNCTION EQ))) (B . C))
;; Loading (DEFTEST ASSOC.20 (ASSOC "a" (QUOTE (("" . 1) (A . 2) ("A" . 6) ("a" . 3) ("A" . 5))) :KEY (FUNCTION (LAMBDA (X) (AND (STRINGP X) (STRING-DOWNCASE X)))) :TEST (FUNCTION EQUAL)) ("A" . 6))
;; Loading (DEFTEST ASSOC.21 (ASSOC "a" (QUOTE (("" . 1) (A . 2) ("A" . 6) ("a" . 3) ("A" . 5))) :KEY (FUNCTION (LAMBDA (X) (AND (STRINGP X) X))) :TEST (FUNCTION EQUAL)) ("a" . 3))
;; Loading (DEFTEST ASSOC.22 (ASSOC "a" (QUOTE (("" . 1) (A . 2) ("A" . 6) ("a" . 3) ("A" . 5))) :KEY (FUNCTION (LAMBDA (X) (AND (STRINGP X) (STRING-DOWNCASE X)))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) ("A" . 6))
;; Loading (DEFTEST ASSOC.23 (ASSOC "a" (QUOTE (("" . 1) (A . 2) ("A" . 6) ("a" . 3) ("A" . 5))) :KEY (FUNCTION (LAMBDA (X) (AND (STRINGP X) X))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) ("a" . 3))
;; Loading (DEFTEST ASSOC.24 (ASSOC (QUOTE A) (QUOTE ((B . 1) (A . 2) (C . 3))) :TEST (FUNCTION (LAMBDA (X Y) (AND (EQT X Y) (QUOTE MATCHED))))) (A . 2))
;; Loading (DEFTEST ASSOC.25 (BLOCK FAIL (ASSOC (QUOTE A) (QUOTE ((B . 1) (C . 2) (A . 3))) :TEST (FUNCTION (LAMBDA (X Y) (UNLESS (EQT X (QUOTE A)) (RETURN-FROM FAIL (QUOTE FAIL))) (EQT X Y))))) (A . 3))
;; Loading (DEFTEST ASSOC.26 (ASSOC 10 (QUOTE ((1 A) (5 B) (8 C) (11 D) (12 E))) :TEST (FUNCTION <)) (11 D))
;; Loading (DEFTEST ASSOC.27 (ASSOC 10 (QUOTE ((1 A) (5 B) (8 C) (11 D) (12 E))) :TEST-NOT (FUNCTION >=)) (11 D))
;; Loading (DEFTEST ASSOC.30 (LET NIL (ASSOC NIL (QUOTE ((A . B) NIL (C . D) (NIL . E) (NIL . F) NIL (G . H))))) (NIL . E))
;; Loading (DEFTEST ASSOC.31 (LET NIL (ASSOC NIL (QUOTE ((A . B) NIL (C . D) (NIL . E) (NIL . F) NIL (G . H))) :TEST (FUNCTION EQ))) (NIL . E))
;; Loading (DEFHARMLESS ASSOC.TEST-AND-TEST-NOT.1 (ASSOC (QUOTE A) (QUOTE ((A . 1) (B . 2))) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS ASSOC.TEST-AND-TEST-NOT.2 (ASSOC (QUOTE A) (QUOTE ((A . 1) (B . 2))) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST ASSOC.ORDER.1 (LET ((I 0) X Y) (VALUES (ASSOC (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE ((A . 1) (B . 2) (C . 3) (D . 4))))) I X Y)) (C . 3) 2 1 2)
;; Loading (DEFTEST ASSOC.ORDER.2 (LET ((I 0) X Y Z) (VALUES (ASSOC (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE ((A . 1) (B . 2) (C . 3) (D . 4)))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQ))) I X Y Z)) (C . 3) 3 1 2 3)
;; Loading (DEFTEST ASSOC.ORDER.3 (LET ((I 0) X Y) (VALUES (ASSOC (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE ((A . 1) (B . 2) (C . 3) (D . 4)))) :TEST (FUNCTION EQ)) I X Y)) (C . 3) 2 1 2)
;; Loading (DEFTEST ASSOC.ORDER.4 (LET ((I 0) X Y Z W) (VALUES (ASSOC (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE ((A . 1) (B . 2) (C . 3) (D . 4)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF W (INCF I)) (FUNCTION NOT))) I X Y Z W)) (C . 3) 4 1 2 3 4)
;; Loading (DEFTEST ASSOC.ALLOW-OTHER-KEYS.1 (ASSOC (QUOTE B) (QUOTE ((A . 1) (B . 2) (C . 3))) :BAD T :ALLOW-OTHER-KEYS T) (B . 2))
;; Loading (DEFTEST ASSOC.ALLOW-OTHER-KEYS.2 (ASSOC (QUOTE B) (QUOTE ((A . 1) (B . 2) (C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T) (B . 2))
;; Loading (DEFTEST ASSOC.ALLOW-OTHER-KEYS.3 (ASSOC (QUOTE B) (QUOTE ((A . 1) (B . 2) (C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T :TEST-NOT (FUNCTION EQL)) (A . 1))
;; Loading (DEFTEST ASSOC.ALLOW-OTHER-KEYS.4 (ASSOC (QUOTE B) (QUOTE ((A . 1) (B . 2) (C . 3))) :ALLOW-OTHER-KEYS T) (B . 2))
;; Loading (DEFTEST ASSOC.ALLOW-OTHER-KEYS.5 (ASSOC (QUOTE B) (QUOTE ((A . 1) (B . 2) (C . 3))) :ALLOW-OTHER-KEYS NIL) (B . 2))
;; Loading (DEFTEST ASSOC.KEYWORDS.6 (ASSOC (QUOTE B) (QUOTE ((A . 1) (B . 2) (C . 3))) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL)) (B . 2))
;; Loading (DEFTEST ASSOC.KEYWORDS.7 (ASSOC (QUOTE B) (QUOTE ((A . 1) (B . 2) (C . 3))) :KEY NIL :KEY (FUNCTION NULL)) (B . 2))
;; Loading (DEFTEST ASSOC.ERROR.1 (SIGNALS-ERROR (ASSOC) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.2 (SIGNALS-ERROR (ASSOC NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.3 (SIGNALS-ERROR (ASSOC NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.4 (SIGNALS-ERROR (ASSOC NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.5 (SIGNALS-ERROR (ASSOC NIL NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.6 (SIGNALS-ERROR (ASSOC NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.7 (SIGNALS-ERROR (ASSOC (QUOTE A) (QUOTE ((A . B))) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.8 (SIGNALS-ERROR (ASSOC (QUOTE A) (QUOTE ((A . B))) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.9 (SIGNALS-ERROR (ASSOC (QUOTE A) (QUOTE ((A . B))) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.10 (SIGNALS-ERROR (ASSOC (QUOTE Z) (QUOTE ((A . B) . C))) TYPE-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.11 (SIGNALS-ERROR (ASSOC (QUOTE Z) (QUOTE ((A . B) :BAD (C . D)))) TYPE-ERROR) T)
;; Loading (DEFTEST ASSOC.ERROR.12 (SIGNALS-TYPE-ERROR X (QUOTE Y) (ASSOC (QUOTE X) X)) T)
;; Loading (LOAD "assoc-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/assoc-if.lsp C15FCFA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST ASSOC-IF.1 (LET* ((X (COPY-LIST (QUOTE ((1 . A) (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (ASSOC-IF (FUNCTION EVENP) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (THIRD X)) RESULT)) (6 . C))
;; Loading (DEFTEST ASSOC-IF.2 (LET* ((X (COPY-LIST (QUOTE ((1 . A) (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (ASSOC-IF (FUNCTION ODDP) X :KEY (FUNCTION 1+)))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (THIRD X)) RESULT)) (6 . C))
;; Loading (DEFTEST ASSOC-IF.3 (LET* ((X (COPY-LIST (QUOTE ((1 . A) NIL (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (ASSOC-IF (FUNCTION EVENP) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (FOURTH X)) RESULT)) (6 . C))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST ASSOC-IF.4 (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . B) NIL (C . D) (NIL . E) (F . G)))) (NIL . E))
;; Loading (DEFTEST ASSOC-IF.5 (LET NIL (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . B) NIL (C . D) (NIL . E) (F . G))))) (NIL . E))
;; Loading (DEFTEST ASSOC-IF.ORDER.1 (LET ((I 0) X Y) (VALUES (ASSOC-IF (PROGN (SETF X (INCF I)) (FUNCTION NULL)) (PROGN (SETF Y (INCF I)) (QUOTE ((A . 1) (B . 2) (NIL . 17) (D . 4))))) I X Y)) (NIL . 17) 2 1 2)
;; Loading (DEFTEST ASSOC-IF.ORDER.2 (LET ((I 0) X Y Z) (VALUES (ASSOC-IF (PROGN (SETF X (INCF I)) (FUNCTION NULL)) (PROGN (SETF Y (INCF I)) (QUOTE ((A . 1) (B . 2) (NIL . 17) (D . 4)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION NULL))) I X Y Z)) (A . 1) 3 1 2 3)
;; Loading (DEFTEST ASSOC-IF.ALLOW-OTHER-KEYS.1 (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :BAD T :ALLOW-OTHER-KEYS T) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF.ALLOW-OTHER-KEYS.2 (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF.ALLOW-OTHER-KEYS.3 (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T :KEY (FUNCTION NOT)) (A . 1))
;; Loading (DEFTEST ASSOC-IF.ALLOW-OTHER-KEYS.4 (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :ALLOW-OTHER-KEYS T) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF.ALLOW-OTHER-KEYS.5 (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :ALLOW-OTHER-KEYS NIL) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF.KEYWORDS.6 (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL)) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF.KEYWORDS.7 (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :KEY NIL :KEY (FUNCTION NULL)) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF.ENV.1 (MACROLET ((%M (Z) Z)) (LET ((ALIST (QUOTE ((1 . A) (3 . B) (6 . C) (8 . D) (-1 . E))))) (VALUES (ASSOC-IF (EXPAND-IN-CURRENT-ENV (%M (QUOTE EVENP))) ALIST) (ASSOC-IF (EXPAND-IN-CURRENT-ENV (%M (FUNCTION EVENP))) ALIST) (ASSOC-IF (FUNCTION EVENP) (EXPAND-IN-CURRENT-ENV (%M ALIST))) (ASSOC-IF (QUOTE ODDP) ALIST (EXPAND-IN-CURRENT-ENV (%M :KEY)) (QUOTE 1+)) (ASSOC-IF (QUOTE ODDP) ALIST :KEY (EXPAND-IN-CURRENT-ENV (%M (FUNCTION 1+))))))) (6 . C) (6 . C) (6 . C) (6 . C) (6 . C))
;; Loading (DEFTEST ASSOC-IF.ERROR.1 (SIGNALS-ERROR (ASSOC-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.2 (SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.3 (SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.4 (SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.5 (SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.6 (SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.7 (SIGNALS-ERROR (ASSOC-IF (FUNCTION CONS) (QUOTE ((A B) (C D)))) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.8 (SIGNALS-ERROR (ASSOC-IF (FUNCTION IDENTITY) (QUOTE ((A B) (C D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.9 (SIGNALS-TYPE-ERROR X (QUOTE A) (ASSOC-IF (FUNCTION CAR) (QUOTE ((A B) (C D))))) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.10 (SIGNALS-TYPE-ERROR X (QUOTE A) (ASSOC-IF (FUNCTION IDENTITY) (QUOTE ((A B) (C D))) :KEY (FUNCTION CAR))) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.11 (SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . B) . C))) TYPE-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.12 (SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) (QUOTE ((A . B) :BAD (C . D)))) TYPE-ERROR) T)
;; Loading (DEFTEST ASSOC-IF.ERROR.13 (SIGNALS-TYPE-ERROR X (QUOTE Y) (ASSOC-IF (FUNCTION NULL) X)) T)
;; Loading (LOAD "assoc-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/assoc-if-not.lsp 80F45327>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST ASSOC-IF-NOT.1 (LET* ((X (COPY-LIST (QUOTE ((1 . A) (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (ASSOC-IF-NOT (FUNCTION ODDP) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (THIRD X)) RESULT)) (6 . C))
;; Loading (DEFTEST ASSOC-IF-NOT.2 (LET* ((X (COPY-LIST (QUOTE ((1 . A) (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (ASSOC-IF-NOT (FUNCTION EVENP) X :KEY (FUNCTION 1+)))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (THIRD X)) RESULT)) (6 . C))
;; Loading (DEFTEST ASSOC-IF-NOT.3 (LET* ((X (COPY-LIST (QUOTE ((1 . A) NIL (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (ASSOC-IF-NOT (FUNCTION ODDP) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (FOURTH X)) RESULT)) (6 . C))
;; Loading (DEFTEST ASSOC-IF-NOT.4 (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . B) NIL (C . D) (NIL . E) (F . G)))) (NIL . E))
;; Loading (DEFTEST ASSOC-IF-NOT.ORDER.1 (LET ((I 0) X Y) (VALUES (ASSOC-IF-NOT (PROGN (SETF X (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF Y (INCF I)) (QUOTE ((A . 1) (B . 2) (NIL . 17) (D . 4))))) I X Y)) (NIL . 17) 2 1 2)
;; Loading (DEFTEST ASSOC-IF-NOT.ORDER.2 (LET ((I 0) X Y Z) (VALUES (ASSOC-IF-NOT (PROGN (SETF X (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF Y (INCF I)) (QUOTE ((A . 1) (B . 2) (NIL . 17) (D . 4)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION NULL))) I X Y Z)) (A . 1) 3 1 2 3)
;; Loading (DEFTEST ASSOC-IF-NOT.ALLOW-OTHER-KEYS.1 (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :BAD T :ALLOW-OTHER-KEYS T) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF-NOT.ALLOW-OTHER-KEYS.2 (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF-NOT.ALLOW-OTHER-KEYS.3 (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T :KEY (FUNCTION NOT)) (A . 1))
;; Loading (DEFTEST ASSOC-IF-NOT.ALLOW-OTHER-KEYS.4 (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :ALLOW-OTHER-KEYS T) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF-NOT.ALLOW-OTHER-KEYS.5 (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :ALLOW-OTHER-KEYS NIL) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF-NOT.KEYWORDS.6 (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL)) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF-NOT.KEYWORDS.7 (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . 1) (NIL . 2) (C . 3))) :KEY NIL :KEY (FUNCTION NULL)) (NIL . 2))
;; Loading (DEFTEST ASSOC-IF-NOT.ENV.1 (MACROLET ((%M (Z) Z)) (LET ((ALIST (QUOTE ((1 . A) (3 . B) (4 . C) (6 . D))))) (VALUES (ASSOC-IF-NOT (EXPAND-IN-CURRENT-ENV (%M (QUOTE ODDP))) ALIST) (ASSOC-IF-NOT (EXPAND-IN-CURRENT-ENV (%M (FUNCTION ODDP))) ALIST) (ASSOC-IF-NOT (QUOTE ODDP) (EXPAND-IN-CURRENT-ENV (%M ALIST)))))) (4 . C) (4 . C) (4 . C))
;; Loading (DEFTEST ASSOC-IF-NOT.ENV.2 (MACROLET ((%M (Z) Z)) (LET ((ALIST (QUOTE ((1 . A) (3 . B) (4 . C) (6 . D))))) (VALUES (ASSOC-IF-NOT (QUOTE EVENP) ALIST (EXPAND-IN-CURRENT-ENV (%M :KEY)) (FUNCTION 1+)) (ASSOC-IF-NOT (FUNCTION EVENP) ALIST :KEY (EXPAND-IN-CURRENT-ENV (%M (QUOTE 1+))))))) (4 . C) (4 . C))
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.1 (SIGNALS-ERROR (ASSOC-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.2 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.3 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.4 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.5 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.6 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.7 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION CONS) (QUOTE ((A B) (C D)))) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.8 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A B) (C D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.9 (SIGNALS-TYPE-ERROR X (QUOTE A) (ASSOC-IF-NOT (FUNCTION CAR) (QUOTE ((A B) (C D))))) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.10 (SIGNALS-TYPE-ERROR X (QUOTE A) (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A B) (C D))) :KEY (FUNCTION CAR))) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.11 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . B) . C))) TYPE-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.12 (SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . B) :BAD (C . D)))) TYPE-ERROR) T)
;; Loading (DEFTEST ASSOC-IF-NOT.ERROR.13 (SIGNALS-TYPE-ERROR X (QUOTE Y) (ASSOC-IF-NOT (FUNCTION IDENTITY) X)) T)
;; Loading (LOAD "rassoc.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rassoc.lsp 81082847>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST RASSOC.1 (RASSOC NIL NIL) NIL)
;; Loading (DEFTEST RASSOC.2 (RASSOC NIL (QUOTE (NIL))) NIL)
;; Loading (DEFTEST RASSOC.3 (RASSOC NIL (REV-ASSOC-LIST (QUOTE (NIL (NIL . 2) (A . B))))) (2))
;; Loading (DEFTEST RASSOC.4 (RASSOC NIL (QUOTE ((A . B) (C . D)))) NIL)
;; Loading (DEFTEST RASSOC.5 (RASSOC (QUOTE A) (QUOTE ((B . A)))) (B . A))
;; Loading (DEFTEST RASSOC.6 (RASSOC (QUOTE A) (REV-ASSOC-LIST (QUOTE ((:A . B) (#:A . C) (A . D) (A . E) (Z . F))))) (D . A))
;; Loading (DEFTEST RASSOC.7 (LET* ((X (COPY-TREE (REV-ASSOC-LIST (QUOTE ((A . B) (B . C) (C . D)))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (RASSOC (QUOTE B) X))) (AND (EQT RESULT (SECOND X)) (CHECK-SCAFFOLD-COPY X XCOPY))) T)
;; Loading (DEFTEST RASSOC.8 (RASSOC 1 (REV-ASSOC-LIST (QUOTE ((0 . A) (1 . B) (2 . C))))) (B . 1))
;; Loading (DEFTEST RASSOC.9 (RASSOC (COPY-SEQ "abc") (REV-ASSOC-LIST (QUOTE ((ABC . 1) ("abc" . 2) ("abc" . 3))))) NIL)
;; Loading (DEFTEST RASSOC.10 (RASSOC (COPY-LIST (QUOTE (A))) (COPY-TREE (REV-ASSOC-LIST (QUOTE (((A) B) ((A) (C))))))) NIL)
;; Loading (DEFTEST RASSOC.11 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (RASSOC X (REV-ASSOC-LIST (SYSTEM.INTERNALS::BACKQUOTE (((A B) C) ((SYSTEM.INTERNALS::BQ-COMMA X) . D) ((SYSTEM.INTERNALS::BQ-COMMA X) . E) ((A B) 1)))))) (D A B))
;; Loading (DEFTEST RASSOC.12 (RASSOC #\e (COPY-TREE (REV-ASSOC-LIST (QUOTE (("abefd" . 1) ("aevgd" . 2) ("edada" . 3))))) :KEY (FUNCTION (LAMBDA (X) (SCHAR X 1)))) (2 . "aevgd"))
;; Loading (DEFTEST RASSOC.13 (RASSOC NIL (COPY-TREE (REV-ASSOC-LIST (QUOTE (((A) . B) (NIL . C) ((NIL) . D))))) :KEY (FUNCTION CAR)) (C))
;; Loading (DEFTEST RASSOC.14 (RASSOC (COPY-SEQ "abc") (COPY-TREE (REV-ASSOC-LIST (QUOTE ((ABC . 1) ("abc" . 2) ("abc" . 3))))) :TEST (FUNCTION EQUAL)) (2 . "abc"))
;; Loading (DEFTEST RASSOC.15 (RASSOC (COPY-SEQ "abc") (COPY-TREE (REV-ASSOC-LIST (QUOTE ((ABC . 1) ("abc" . 2) ("abc" . 3))))) :TEST (FUNCTION EQUALP)) (2 . "abc"))
;; Loading (DEFTEST RASSOC.16 (RASSOC (COPY-LIST (QUOTE (A))) (COPY-TREE (REV-ASSOC-LIST (QUOTE (((A) B) ((A) (C)))))) :TEST (FUNCTION EQUAL)) ((B) A))
;; Loading (DEFTEST RASSOC.17 (RASSOC (COPY-SEQ "abc") (COPY-TREE (REV-ASSOC-LIST (QUOTE ((ABC . 1) (A . A) (B . B) ("abc" . 2) ("abc" . 3))))) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) (2 . "abc"))
;; Loading (DEFTEST RASSOC.18 (RASSOC (QUOTE A) (COPY-TREE (REV-ASSOC-LIST (QUOTE ((A . D) (B . C))))) :TEST-NOT (FUNCTION EQ)) (C . B))
;; Loading (DEFTEST RASSOC.19 (RASSOC (QUOTE A) (COPY-TREE (REV-ASSOC-LIST (QUOTE ((A . D) (B . C))))) :TEST (COMPLEMENT (FUNCTION EQ))) (C . B))
;; Loading (DEFTEST RASSOC.20 (RASSOC "a" (COPY-TREE (REV-ASSOC-LIST (QUOTE (("" . 1) (A . 2) ("A" . 6) ("a" . 3) ("A" . 5))))) :KEY (FUNCTION (LAMBDA (X) (AND (STRINGP X) (STRING-DOWNCASE X)))) :TEST (FUNCTION EQUAL)) (6 . "A"))
;; Loading (DEFTEST RASSOC.21 (RASSOC "a" (COPY-TREE (REV-ASSOC-LIST (QUOTE (("" . 1) (A . 2) ("A" . 6) ("a" . 3) ("A" . 5))))) :KEY (FUNCTION (LAMBDA (X) (AND (STRINGP X) X))) :TEST (FUNCTION EQUAL)) (3 . "a"))
;; Loading (DEFTEST RASSOC.22 (RASSOC "a" (COPY-TREE (REV-ASSOC-LIST (QUOTE (("" . 1) (A . 2) ("A" . 6) ("a" . 3) ("A" . 5))))) :KEY (FUNCTION (LAMBDA (X) (AND (STRINGP X) (STRING-DOWNCASE X)))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (6 . "A"))
;; Loading (DEFTEST RASSOC.23 (RASSOC "a" (COPY-TREE (REV-ASSOC-LIST (QUOTE (("" . 1) (A . 2) ("A" . 6) ("a" . 3) ("A" . 5))))) :KEY (FUNCTION (LAMBDA (X) (AND (STRINGP X) X))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (3 . "a"))
;; Loading (DEFTEST RASSOC.24 (RASSOC (QUOTE A) (COPY-TREE (REV-ASSOC-LIST (QUOTE ((B . 1) (A . 2) (C . 3))))) :TEST (FUNCTION (LAMBDA (X Y) (AND (EQT X Y) (QUOTE MATCHED))))) (2 . A))
;; Loading (DEFTEST RASSOC.25 (BLOCK FAIL (RASSOC (QUOTE A) (QUOTE ((1 . B) (2 . C) (3 . A))) :TEST (FUNCTION (LAMBDA (X Y) (UNLESS (EQT X (QUOTE A)) (RETURN-FROM FAIL (QUOTE FAIL))) (EQT X Y))))) (3 . A))
;; Loading (DEFTEST RASSOC.26 (RASSOC 10 (QUOTE ((A . 1) (B . 5) (C . 10) (D . 15) (E . 40))) :TEST (FUNCTION <)) (D . 15))
;; Loading (DEFTEST RASSOC.27 (RASSOC 10 (QUOTE ((A . 1) (B . 5) (C . 10) (D . 15) (E . 40))) :TEST-NOT (FUNCTION >=)) (D . 15))
;; Loading (DEFHARMLESS RASSOC.TEST-AND-TEST-NOT.1 (RASSOC (QUOTE A) (QUOTE ((X . B) (Y . A) (Z . C))) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS RASSOC.TEST-AND-TEST-NOT.2 (RASSOC (QUOTE A) (QUOTE ((X . B) (Y . A) (Z . C))) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST RASSOC.ORDER.1 (LET ((I 0) X Y) (VALUES (RASSOC (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE ((1 . A) (2 . B) (3 . C) (4 . C))))) I X Y)) (3 . C) 2 1 2)
;; Loading (DEFTEST RASSOC.ORDER.2 (LET ((I 0) X Y Z) (VALUES (RASSOC (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE ((1 . A) (2 . B) (3 . C) (4 . C)))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL))) I X Y Z)) (3 . C) 3 1 2 3)
;; Loading (DEFTEST RASSOC.ORDER.3 (LET ((I 0) X Y) (VALUES (RASSOC (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE ((1 . A) (2 . B) (3 . C) (4 . C)))) :TEST (FUNCTION EQL)) I X Y)) (3 . C) 2 1 2)
;; Loading (DEFTEST RASSOC.ORDER.4 (LET ((I 0) X Y Z W) (VALUES (RASSOC (PROGN (SETF X (INCF I)) (QUOTE C)) (PROGN (SETF Y (INCF I)) (QUOTE ((1 . A) (2 . B) (3 . C) (4 . C)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF W (INCF I)) (FUNCTION NOT))) I X Y Z W)) (3 . C) 4 1 2 3 4)
;; Loading (DEFTEST RASSOC.ALLOW-OTHER-KEYS.1 (RASSOC (QUOTE B) (QUOTE ((1 . A) (2 . B) (3 . C))) :BAD T :ALLOW-OTHER-KEYS T) (2 . B))
;; Loading (DEFTEST RASSOC.ALLOW-OTHER-KEYS.2 (RASSOC (QUOTE B) (QUOTE ((1 . A) (2 . B) (3 . C))) :ALLOW-OTHER-KEYS T :BAD T) (2 . B))
;; Loading (DEFTEST RASSOC.ALLOW-OTHER-KEYS.3 (RASSOC (QUOTE A) (QUOTE ((1 . A) (2 . B) (3 . C))) :ALLOW-OTHER-KEYS T :BAD T :TEST-NOT (FUNCTION EQL)) (2 . B))
;; Loading (DEFTEST RASSOC.ALLOW-OTHER-KEYS.4 (RASSOC (QUOTE B) (QUOTE ((1 . A) (2 . B) (3 . C))) :ALLOW-OTHER-KEYS T) (2 . B))
;; Loading (DEFTEST RASSOC.ALLOW-OTHER-KEYS.5 (RASSOC (QUOTE B) (QUOTE ((1 . A) (2 . B) (3 . C))) :ALLOW-OTHER-KEYS NIL) (2 . B))
;; Loading (DEFTEST RASSOC.KEYWORDS.6 (RASSOC (QUOTE B) (QUOTE ((1 . A) (2 . B) (3 . C))) :TEST (FUNCTION EQL) :TEST (COMPLEMENT (FUNCTION EQL))) (2 . B))
;; Loading (DEFTEST RASSOC.ERROR.1 (SIGNALS-ERROR (RASSOC) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.2 (SIGNALS-ERROR (RASSOC NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.3 (SIGNALS-ERROR (RASSOC NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.4 (SIGNALS-ERROR (RASSOC NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.5 (SIGNALS-ERROR (RASSOC NIL NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.6 (SIGNALS-ERROR (RASSOC NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.7 (SIGNALS-ERROR (RASSOC (QUOTE A) (QUOTE ((B . A) (C . D))) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.8 (SIGNALS-ERROR (RASSOC (QUOTE A) (QUOTE ((B . A) (C . D))) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.9 (SIGNALS-ERROR (RASSOC (QUOTE A) (QUOTE ((B . A) (C . D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC.ERROR.10 (SIGNALS-ERROR (RASSOC (QUOTE Z) (QUOTE ((A . B) . C))) TYPE-ERROR) T)
;; Loading (DEFTEST RASSOCI.ERROR.11 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (RASSOC (QUOTE A) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "rassoc-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rassoc-if.lsp 81281F97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST RASSOC-IF.1 (LET* ((X (REV-ASSOC-LIST (QUOTE ((1 . A) (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (RASSOC-IF (FUNCTION EVENP) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (THIRD X)) RESULT)) (C . 6))
;; Loading (DEFTEST RASSOC-IF.2 (LET* ((X (REV-ASSOC-LIST (QUOTE ((1 . A) (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (RASSOC-IF (FUNCTION ODDP) X :KEY (FUNCTION 1+)))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (THIRD X)) RESULT)) (C . 6))
;; Loading (DEFTEST RASSOC-IF.3 (LET* ((X (REV-ASSOC-LIST (QUOTE ((1 . A) NIL (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (RASSOC-IF (FUNCTION EVENP) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (FOURTH X)) RESULT)) (C . 6))
;; Loading (DEFTEST RASSOC-IF.4 (RASSOC-IF (FUNCTION NULL) (REV-ASSOC-LIST (QUOTE ((A . B) NIL (C . D) (NIL . E) (F . G))))) (E))
;; Loading (DEFTEST RASSOC-IF.ORDER.1 (LET ((I 0) X Y) (VALUES (RASSOC-IF (PROGN (SETF X (INCF I)) (FUNCTION NULL)) (PROGN (SETF Y (INCF I)) (QUOTE ((1 . A) (2 . B) (17) (4 . D))))) I X Y)) (17) 2 1 2)
;; Loading (DEFTEST RASSOC-IF.ORDER.2 (LET ((I 0) X Y Z) (VALUES (RASSOC-IF (PROGN (SETF X (INCF I)) (FUNCTION NULL)) (PROGN (SETF Y (INCF I)) (QUOTE ((1 . A) (2 . B) (17) (4 . D)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION NULL))) I X Y Z)) (1 . A) 3 1 2 3)
;; Loading (DEFTEST RASSOC-IF.ALLOW-OTHER-KEYS.1 (RASSOC-IF (FUNCTION NULL) (QUOTE ((1 . A) (2) (3 . C))) :BAD T :ALLOW-OTHER-KEYS T) (2))
;; Loading (DEFTEST RASSOC-IF.ALLOW-OTHER-KEYS.2 (RASSOC-IF (FUNCTION NULL) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS T :BAD T) (2))
;; Loading (DEFTEST RASSOC-IF.ALLOW-OTHER-KEYS.3 (RASSOC-IF (FUNCTION IDENTITY) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS T :BAD T :KEY (QUOTE NOT)) (2))
;; Loading (DEFTEST RASSOC-IF.ALLOW-OTHER-KEYS.4 (RASSOC-IF (FUNCTION NULL) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS T) (2))
;; Loading (DEFTEST RASSOC-IF.ALLOW-OTHER-KEYS.5 (RASSOC-IF (FUNCTION NULL) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS NIL) (2))
;; Loading (DEFTEST RASSOC-IF.KEYWORDS.6 (RASSOC-IF (FUNCTION IDENTITY) (QUOTE ((1 . A) (2) (3 . C))) :KEY (FUNCTION NOT) :KEY (FUNCTION IDENTITY)) (2))
;; Loading (DEFTEST RASSOC-IF.ERROR.1 (SIGNALS-ERROR (RASSOC-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.2 (SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.3 (SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.4 (SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.5 (SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.6 (SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.7 (SIGNALS-ERROR (RASSOC-IF (FUNCTION CONS) (QUOTE ((A . B) (C . D)))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.8 (SIGNALS-ERROR (RASSOC-IF (FUNCTION CAR) (QUOTE ((A . B) (C . D)))) TYPE-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.9 (SIGNALS-ERROR (RASSOC-IF (FUNCTION IDENTITY) (QUOTE ((A . B) (C . D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.10 (SIGNALS-ERROR (RASSOC-IF (FUNCTION IDENTITY) (QUOTE ((A . B) (C . D))) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.11 (SIGNALS-ERROR (RASSOC-IF (FUNCTION NOT) (QUOTE ((A . B) . C))) TYPE-ERROR) T)
;; Loading (DEFTEST RASSOC-IF.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (RASSOC-IF (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "rassoc-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rassoc-if-not.lsp 8137A047>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST RASSOC-IF-NOT.1 (LET* ((X (REV-ASSOC-LIST (QUOTE ((1 . A) (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (RASSOC-IF-NOT (FUNCTION ODDP) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (THIRD X)) RESULT)) (C . 6))
;; Loading (DEFTEST RASSOC-IF-NOT.2 (LET* ((X (REV-ASSOC-LIST (QUOTE ((1 . A) (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (RASSOC-IF-NOT (FUNCTION EVENP) X :KEY (FUNCTION 1+)))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (THIRD X)) RESULT)) (C . 6))
;; Loading (DEFTEST RASSOC-IF-NOT.3 (LET* ((X (REV-ASSOC-LIST (QUOTE ((1 . A) NIL (3 . B) (6 . C) (7 . D))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (RASSOC-IF-NOT (FUNCTION ODDP) X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (EQT RESULT (FOURTH X)) RESULT)) (C . 6))
;; Loading (DEFTEST RASSOC-IF-NOT.4 (RASSOC-IF-NOT (FUNCTION IDENTITY) (REV-ASSOC-LIST (QUOTE ((A . B) NIL (C . D) (NIL . E) (F . G))))) (E))
;; Loading (DEFTEST RASSOC-IF-NOT.ORDER.1 (LET ((I 0) X Y) (VALUES (RASSOC-IF-NOT (PROGN (SETF X (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF Y (INCF I)) (QUOTE ((1 . A) (2 . B) (17) (4 . D))))) I X Y)) (17) 2 1 2)
;; Loading (DEFTEST RASSOC-IF-NOT.ORDER.2 (LET ((I 0) X Y Z) (VALUES (RASSOC-IF-NOT (PROGN (SETF X (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF Y (INCF I)) (QUOTE ((1 . A) (2 . B) (17) (4 . D)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION NULL))) I X Y Z)) (1 . A) 3 1 2 3)
;; Loading (DEFTEST RASSOC-IF-NOT.ALLOW-OTHER-KEYS.1 (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . A) (2) (3 . C))) :BAD T :ALLOW-OTHER-KEYS T) (2))
;; Loading (DEFTEST RASSOC-IF-NOT.ALLOW-OTHER-KEYS.2 (RASSOC-IF-NOT (FUNCTION VALUES) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS T :BAD T) (2))
;; Loading (DEFTEST RASSOC-IF-NOT.ALLOW-OTHER-KEYS.3 (RASSOC-IF-NOT (FUNCTION NOT) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS T :BAD T :KEY (QUOTE NOT)) (2))
;; Loading (DEFTEST RASSOC-IF-NOT.ALLOW-OTHER-KEYS.4 (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS T) (2))
;; Loading (DEFTEST RASSOC-IF-NOT.ALLOW-OTHER-KEYS.5 (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS NIL) (2))
;; Loading (DEFTEST RASSOC-IF-NOT.ALLOW-OTHER-KEYS.6 (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . A) (2) (3 . C))) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (2))
;; Loading (DEFTEST RASSOC-IF-NOT.KEYWORDS.7 (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . A) (2) (3 . C))) :KEY (FUNCTION NOT) :KEY NIL) (1 . A))
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.1 (SIGNALS-ERROR (RASSOC-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.2 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.3 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.4 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.5 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.6 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.7 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION CONS) (QUOTE ((A . B) (C . D)))) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.8 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION CAR) (QUOTE ((A . B) (C . D)))) TYPE-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.9 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . B) (C . D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.10 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . B) (C . D))) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.11 (SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((A . B) . C))) TYPE-ERROR) T)
;; Loading (DEFTEST RASSOC-IF-NOT.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (RASSOC-IF-NOT (FUNCTION IDENTITY) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "copy-alist.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/copy-alist.lsp 81484D87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST COPY-ALIST.1 (LET* ((X (COPY-TREE (QUOTE ((A . B) (C . D) NIL (E F) ((X) ((Y Z)) W) ("foo" . "bar") (#\w . 1.233999) (1/3 . 412340000.0))))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (RESULT (COPY-ALIST X))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (= (LENGTH X) (LENGTH RESULT)) (EVERY (FUNCTION (LAMBDA (P1 P2) (OR (AND (NULL P1) (NULL P2)) (AND (NOT (EQT P1 P2)) (EQLT (CAR P1) (CAR P2)) (EQLT (CDR P1) (CDR P2)))))) X RESULT) T)) T)
;; Loading (DEF-FOLD-TEST COPY-ALIST.2 (COPY-ALIST (QUOTE ((A . B) NIL (C . D)))))
;; Loading (DEF-FOLD-TEST COPY-ALIST.3 (CAR (COPY-ALIST (QUOTE ((A . B) NIL (C . D))))))
;; Loading (DEF-FOLD-TEST COPY-ALIST.4 (CADDR (COPY-ALIST (QUOTE ((A . B) NIL (C . D))))))
;; Loading (DEFTEST COPY-ALIST.ERROR.1 (SIGNALS-ERROR (COPY-ALIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-ALIST.ERROR.2 (SIGNALS-ERROR (COPY-ALIST NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-ALIST.ERROR.3 (SIGNALS-ERROR (COPY-ALIST (QUOTE ((A . B) . C))) TYPE-ERROR) T)
;; Loading (LOAD "pairlis.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pairlis.lsp 814EF757>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFUN MY-PAIRLIS (X Y &OPTIONAL ALIST) (IF (NULL X) ALIST (ACONS (CAR X) (CAR Y) (MY-PAIRLIS (CDR X) (CDR Y) ALIST))))
;; Loading (DEFTEST PAIRLIS.1 (PAIRLIS NIL NIL NIL) NIL)
;; Loading (DEFTEST PAIRLIS.2 (PAIRLIS (QUOTE (A)) (QUOTE (B)) NIL) ((A . B)))
;; Loading (DEFTEST PAIRLIS.3 (LET* ((X (COPY-LIST (QUOTE (A B C D E)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (Y (COPY-LIST (QUOTE (1 2 3 4 5)))) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (PAIRLIS X Y)) (EXPECTED (MY-PAIRLIS X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) (OR (EQUAL RESULT EXPECTED) (EQUAL RESULT (REVERSE EXPECTED))) T)) T)
;; Loading (DEFTEST PAIRLIS.4 (LET* ((X (COPY-LIST (QUOTE (A B C D E)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (Y (COPY-LIST (QUOTE (1 2 3 4 5)))) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (Z (QUOTE ((X . 10) (Y . 20)))) (ZCOPY (MAKE-SCAFFOLD-COPY Z)) (RESULT (PAIRLIS X Y Z)) (EXPECTED (MY-PAIRLIS X Y Z))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) (CHECK-SCAFFOLD-COPY Z ZCOPY) (EQT (CDR (CDDR (CDDR RESULT))) Z) (OR (EQUAL RESULT EXPECTED) (EQUAL RESULT (APPEND (REVERSE (SUBSEQ EXPECTED 0 5)) (SUBSEQ EXPECTED 5)))) T)) T)
;; Loading (DEF-FOLD-TEST PAIRLIS.FOLD.1 (PAIRLIS (QUOTE (A B)) (QUOTE (C D))))
;; Loading (DEFTEST PAIRLIS.ERROR.1 (SIGNALS-ERROR (PAIRLIS) PROGRAM-ERROR) T)
;; Loading (DEFTEST PAIRLIS.ERROR.2 (SIGNALS-ERROR (PAIRLIS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PAIRLIS.ERROR.3 (SIGNALS-ERROR (PAIRLIS NIL NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PAIRLIS.ERROR.4 (SIGNALS-ERROR (PAIRLIS (QUOTE A) (QUOTE (1))) TYPE-ERROR) T)
;; Loading (DEFTEST PAIRLIS.ERROR.5 (SIGNALS-ERROR (PAIRLIS (QUOTE (A)) (QUOTE B)) TYPE-ERROR) T)
;; Loading (DEFTEST PAIRLIS.ERROR.6 (SIGNALS-ERROR (PAIRLIS (QUOTE (A . B)) (QUOTE (C . D))) TYPE-ERROR) T)
;; Loading (DEFTEST PAIRLIS.ERROR.7 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (PAIRLIS X (QUOTE (A B))))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST PAIRLIS.ERROR.8 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (PAIRLIS (QUOTE (A B)) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "get-properties.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/get-properties.lsp 815986D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST GET-PROPERTIES.1 (GET-PROPERTIES NIL NIL) NIL NIL NIL)
;; Loading (DEFTEST GET-PROPERTIES.2 (GET-PROPERTIES (QUOTE (A B)) NIL) NIL NIL NIL)
;; Loading (DEFTEST GET-PROPERTIES.3 (GET-PROPERTIES (QUOTE (A B C D)) (QUOTE (A))) A B (A B C D))
;; Loading (DEFTEST GET-PROPERTIES.4 (GET-PROPERTIES (QUOTE (A B C D)) (QUOTE (C))) C D (C D))
;; Loading (DEFTEST GET-PROPERTIES.5 (GET-PROPERTIES (QUOTE (A B C D)) (QUOTE (C A))) A B (A B C D))
;; Loading (DEFTEST GET-PROPERTIES.6 (GET-PROPERTIES (QUOTE (A B C D)) (QUOTE (B))) NIL NIL NIL)
;; Loading (DEFTEST GET-PROPERTIES.7 (GET-PROPERTIES (QUOTE ("aa" B C D)) (LIST (COPY-SEQ "aa"))) NIL NIL NIL)
;; Loading (DEFTEST GET-PROPERTIES.9 (LET* ((X (COPY-LIST (QUOTE (A B C D E F G H A C)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (Y (COPY-LIST (QUOTE (X Y F G)))) (YCOPY (MAKE-SCAFFOLD-COPY Y))) (MULTIPLE-VALUE-BIND (INDICATOR VALUE TAIL) (GET-PROPERTIES X Y) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) (EQT TAIL (NTHCDR 6 X)) (VALUES INDICATOR VALUE TAIL)))) G H (G H A C))
;; Loading (DEFTEST GET-PROPERTIES.ORDER.1 (LET ((I 0) X Y) (VALUES (MULTIPLE-VALUE-LIST (GET-PROPERTIES (PROGN (SETF X (INCF I)) (QUOTE (A B C D))) (PROGN (SETF Y (INCF I)) (QUOTE (C))))) I X Y)) (C D (C D)) 2 1 2)
;; Loading (DEFTEST GET-PROPERTIES.ERROR.1 (SIGNALS-ERROR (GET-PROPERTIES) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-PROPERTIES.ERROR.2 (SIGNALS-ERROR (GET-PROPERTIES NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-PROPERTIES.ERROR.3 (SIGNALS-ERROR (GET-PROPERTIES NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-PROPERTIES.ERROR.4 (SIGNALS-ERROR (GET-PROPERTIES (QUOTE (A 1 B 2 C 3)) (QUOTE (X . Y))) TYPE-ERROR) T)
;; Loading (DEFTEST GET-PROPERTIES.ERROR.5 (SIGNALS-ERROR (GET-PROPERTIES (QUOTE (A 1 B 2 C 3 . D)) (QUOTE (X Y))) TYPE-ERROR) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST GET-PROPERTIES.ERROR.6 (SIGNALS-ERROR (GET-PROPERTIES (QUOTE (A 1 B 2 C . D)) (QUOTE (X Y))) TYPE-ERROR) T)
;; Loading (LOAD "getf.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/getf.lsp C0E96457>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST GETF.1 (GETF NIL (QUOTE A)) NIL)
;; Loading (DEFTEST GETF.2 (GETF NIL (QUOTE A) (QUOTE B)) B)
;; Loading (DEFTEST GETF.3 (GETF (QUOTE (A B)) (QUOTE A)) B)
;; Loading (DEFTEST GETF.4 (GETF (QUOTE (A B)) (QUOTE A) (QUOTE C)) B)
;; Loading (DEFTEST GETF.5 (LET ((X 0)) (VALUES (GETF (QUOTE (A B)) (QUOTE A) (INCF X)) X)) B 1)
;; Loading (DEFTEST GETF.ORDER.1 (LET ((I 0) X Y) (VALUES (GETF (PROGN (SETF X (INCF I)) (QUOTE (A B))) (PROGN (SETF Y (INCF I)) (QUOTE A))) I X Y)) B 2 1 2)
;; Loading (DEFTEST GETF.ORDER.2 (LET ((I 0) X Y Z) (VALUES (GETF (PROGN (SETF X (INCF I)) (QUOTE (A B))) (PROGN (SETF Y (INCF I)) (QUOTE A)) (SETF Z (INCF I))) I X Y Z)) B 3 1 2 3)
;; Loading (DEFTEST SETF-GETF.1 (LET ((P (COPY-LIST (QUOTE (A 1 B 2))))) (SETF (GETF P (QUOTE C)) 3) (AND (EQLT (GETF P (QUOTE A)) 1) (EQLT (GETF P (QUOTE B)) 2) (EQLT (GETF P (QUOTE C)) 3) (EQLT (LOOP FOR PTR ON P BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B C))))) 0) T)) T)
;; Loading (DEFTEST SETF-GETF.2 (LET ((P (COPY-LIST (QUOTE (A 1 B 2))))) (SETF (GETF P (QUOTE A)) 3) (AND (EQLT (GETF P (QUOTE A)) 3) (EQLT (GETF P (QUOTE B)) 2) (EQLT (LOOP FOR PTR ON P BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B))))) 0) T)) T)
;; Loading (DEFTEST SETF-GETF.3 (LET ((P (COPY-LIST (QUOTE (A 1 B 2))))) (SETF (GETF P (QUOTE C) 17) 3) (AND (EQLT (GETF P (QUOTE A)) 1) (EQLT (GETF P (QUOTE B)) 2) (EQLT (GETF P (QUOTE C)) 3) (EQLT (LOOP FOR PTR ON P BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B C))))) 0) T)) T)
;; Loading (DEFTEST SETF-GETF.4 (LET ((P (COPY-LIST (QUOTE (A 1 B 2))))) (SETF (GETF P (QUOTE A) 17) 3) (AND (EQLT (GETF P (QUOTE A)) 3) (EQLT (GETF P (QUOTE B)) 2) (EQLT (LOOP FOR PTR ON P BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B))))) 0) T)) T)
;; Loading (DEFTEST SETF-GETF.5 (LET ((P (COPY-LIST (QUOTE (A 1 B 2)))) (FOO NIL)) (SETF (GETF P (QUOTE A) (PROGN (SETF FOO T) 0)) 3) (AND (EQLT (GETF P (QUOTE A)) 3) (EQLT (GETF P (QUOTE B)) 2) (EQLT (LOOP FOR PTR ON P BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B))))) 0) FOO)) T)
;; Loading (DEFTEST SETF-GETF.ORDER.1 (LET ((P (LIST (COPY-LIST (QUOTE (A 1 B 2))))) (CNT1 0) (CNT2 0) (CNT3 0)) (SETF (GETF (CAR (PROGN (INCF CNT1) P)) (QUOTE C) (INCF CNT3)) (PROGN (INCF CNT2) 3)) (VALUES CNT1 CNT2 CNT3 (GETF (CAR P) (QUOTE A)) (GETF (CAR P) (QUOTE B)) (GETF (CAR P) (QUOTE C)) (LOOP FOR PTR ON (CAR P) BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B C))))))) 1 1 1 1 2 3 0)
;; Loading (DEFTEST SETF-GETF.ORDER.2 (LET ((P (LIST (COPY-LIST (QUOTE (A 1 B 2))))) (I 0) X Y Z W) (SETF (GETF (CAR (PROGN (SETF X (INCF I)) P)) (PROGN (SETF Y (INCF I)) (QUOTE C)) (SETF Z (INCF I))) (PROGN (SETF W (INCF I)) 3)) (VALUES I X Y Z W (GETF (CAR P) (QUOTE A)) (GETF (CAR P) (QUOTE B)) (GETF (CAR P) (QUOTE C)) (LOOP FOR PTR ON (CAR P) BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B C))))))) 4 1 2 3 4 1 2 3 0)
;; Loading (DEFTEST INCF-GETF.1 (LET ((P (COPY-LIST (QUOTE (A 1 B 2))))) (INCF (GETF P (QUOTE B))) (AND (EQLT (GETF P (QUOTE A)) 1) (EQLT (GETF P (QUOTE B)) 3) (EQLT (LOOP FOR PTR ON P BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B))))) 0) T)) T)
;; Loading (DEFTEST INCF-GETF.2 (LET ((P (COPY-LIST (QUOTE (A 1 B 2))))) (INCF (GETF P (QUOTE C) 19)) (AND (EQLT (GETF P (QUOTE A)) 1) (EQLT (GETF P (QUOTE B)) 2) (EQLT (GETF P (QUOTE C)) 20) (EQLT (LOOP FOR PTR ON P BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR PTR) (QUOTE (A B C))))) 0) T)) T)
;; Loading (DEFTEST PUSH-GETF.1 (LET ((P NIL)) (VALUES (PUSH (QUOTE X) (GETF P (QUOTE A))) P)) (X) (A (X)))
;; Loading (DEFTEST GETF.ERROR.1 (SIGNALS-ERROR (GETF) PROGRAM-ERROR) T)
;; Loading (DEFTEST GETF.ERROR.2 (SIGNALS-ERROR (GETF NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GETF.ERROR.3 (SIGNALS-ERROR (GETF NIL NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GETF.ERROR.4 (SIGNALS-ERROR (GETF (QUOTE (A . B)) (QUOTE C)) TYPE-ERROR) T)
;; Loading (DEFTEST GETF.ERROR.5 (SIGNALS-ERROR (GETF (QUOTE (A 10 . B)) (QUOTE C)) TYPE-ERROR) T)
;; Loading (LOAD "remf.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/remf.lsp C0FC4747>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST REMF.1 (LET ((X NIL)) (VALUES (REMF X (QUOTE A)) X)) NIL NIL)
;; Loading (DEFTEST REMF.2 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (VALUES (NOT (NULL (REMF X (QUOTE A)))) X)) T NIL)
;; Loading (DEFTEST REMF.3 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE A) (QUOTE C)))) (VALUES (NOT (NULL (REMF X (QUOTE A)))) X)) T (A C))
;; Loading (DEFTEST REMF.4 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (VALUES (AND (REMF X (QUOTE C)) T) (LOOP FOR PTR ON X BY (FUNCTION CDDR) COUNT (NOT (EQT (CAR PTR) (QUOTE A)))))) T 0)
;; Loading (DEFTEST REMF.5 (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES (REMF (EXPAND-IN-CURRENT-ENV (%M X)) (QUOTE A)) X))) NIL NIL)
;; Loading (DEFTEST REMF.6 (MACROLET ((%M (Z) Z)) (LET ((X (LIST (QUOTE A) (QUOTE B)))) (VALUES (NOTNOT (REMF (EXPAND-IN-CURRENT-ENV (%M X)) (QUOTE A))) X))) T NIL)
;; Loading (DEFTEST REMF.7 (MACROLET ((%M (Z) Z)) (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (VALUES (NOTNOT (REMF X (EXPAND-IN-CURRENT-ENV (%M (QUOTE A))))) X))) T (C D))
;; Loading (DEFTEST REMF.ORDER.1 (LET ((I 0) X Y (P (MAKE-ARRAY 1 :INITIAL-ELEMENT (COPY-LIST (QUOTE (A B C D E F)))))) (VALUES (NOTNOT (REMF (AREF P (PROGN (SETF X (INCF I)) 0)) (PROGN (SETF Y (INCF I)) (QUOTE C)))) (AREF P 0) I X Y)) T (A B E F) 2 1 2)
;; Loading (DEFTEST REMF.ORDER.2 (LET ((X (COPY-SEQ #(NIL :A :B))) (PA (VECTOR (LIST :A 1) (LIST :B 2) (LIST :C 3) (LIST :D 4))) (I 0)) (VALUES (NOT (REMF (AREF PA (INCF I)) (AREF X (INCF I)))) PA)) NIL #((:A 1) NIL (:C 3) (:D 4)))
;; Loading (DEFTEST REMF.ORDER.3 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (PROGN "See CLtS 5.1.3" (VALUES (REMF X (PROGN (SETQ X (LIST (QUOTE E) (QUOTE F))) (QUOTE A))) X))) NIL (E F))
;; Loading (DEF-MACRO-TEST REMF.ERROR.1 (REMF X (QUOTE A)))
;; Loading (LOAD "intersection.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/intersection.lsp C105E117>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST INTERSECTION.1 (INTERSECTION NIL NIL) NIL)
;; Loading (DEFTEST INTERSECTION.2 (INTERSECTION (LOOP FOR I FROM 1 TO 100 COLLECT I) NIL) NIL)
;; Loading (DEFTEST INTERSECTION.3 (INTERSECTION NIL (LOOP FOR I FROM 1 TO 100 COLLECT I)) NIL)
;; Loading (DEFTEST INTERSECTION.4 (LET* ((X (COPY-LIST (QUOTE (A 1 C 7 B 4 3 Z)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (Y (COPY-LIST (QUOTE (3 Y C Q Z A 18)))) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (INTERSECTION X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) (+ (LOOP FOR E IN X COUNT (AND (MEMBER E Y) (NOT (MEMBER E RESULT)))) (LOOP FOR E IN RESULT COUNT (OR (NOT (MEMBER E X)) (NOT (MEMBER E Y)))) (LOOP FOR HD ON RESULT COUNT (AND (CONSP HD) (MEMBER (CAR HD) (CDR HD))))))) 0)
;; Loading (DEFTEST INTERSECTION.5 (LET* ((X (COPY-LIST (QUOTE (A A A)))) (XCOPY (MAKE-SCAFFOLD-COPY X)) (Y (COPY-LIST (QUOTE (A A A B B B)))) (YCOPY (MAKE-SCAFFOLD-COPY Y)) (RESULT (INTERSECTION X Y))) (AND (CHECK-SCAFFOLD-COPY X XCOPY) (CHECK-SCAFFOLD-COPY Y YCOPY) (MEMBER (QUOTE A) RESULT) (NOT (MEMBER (QUOTE B) RESULT)))) T)
;; Loading (DEFTEST INTERSECTION.6 (INTERSECTION (LIST 1000000000000 (QUOTE A) (QUOTE B) (QUOTE C)) (LIST (1+ 999999999999) (QUOTE D) (QUOTE E) (QUOTE F))) (1000000000000))
;; Loading (DEFTEST INTERSECTION.7 (INTERSECTION (LIST (QUOTE A) 10 (QUOTE B) 17) (LIST (QUOTE C) (QUOTE D) 4 (QUOTE E) (QUOTE F) 10 1 13 (QUOTE Z))) (10))
;; Loading (DEFTEST INTERSECTION.8 (INTERSECTION (LIST (QUOTE A) (COPY-SEQ "aaa") (QUOTE B)) (LIST (QUOTE D) (COPY-SEQ "aaa") (QUOTE E))) NIL)
;; Loading (DEFTEST INTERSECTION.9 (INTERSECTION (LIST (QUOTE A) (COPY-SEQ "aaa") (QUOTE B)) (LIST (QUOTE D) (COPY-SEQ "aaa") (QUOTE E)) :TEST (FUNCTION EQUAL)) ("aaa"))
;; Loading (DEFTEST INTERSECTION.9-A (INTERSECTION (LIST (QUOTE A) (COPY-SEQ "aaa") (QUOTE B)) (LIST (QUOTE D) (COPY-SEQ "aaa") (QUOTE E)) :TEST (QUOTE EQUAL)) ("aaa"))
;; Loading (DEFTEST INTERSECTION.9-B (INTERSECTION (LIST (QUOTE A) (COPY-SEQ "aaa") (QUOTE B)) (LIST (QUOTE D) (COPY-SEQ "aaa") (QUOTE E)) :TEST-NOT (FUNCTION (LAMBDA (P Q) (NOT (EQUAL P Q))))) ("aaa"))
;; Loading (DEFTEST INTERSECTION.10 (EQUALT (SORT (INTERSECTION (LOOP FOR I FROM 0 TO 1000 BY 3 COLLECT I) (LOOP FOR I FROM 0 TO 1000 BY 7 COLLECT I)) (FUNCTION <)) (LOOP FOR I FROM 0 TO 1000 BY 21 COLLECT I)) T)
;; Loading (DEFTEST INTERSECTION.11 (EQUALT (SORT (INTERSECTION (LOOP FOR I FROM 0 TO 999 BY 5 COLLECT I) (LOOP FOR I FROM 0 TO 999 BY 7 COLLECT I) :TEST (FUNCTION (LAMBDA (A B) (AND (EQL A B) (= (MOD A 3) 0))))) (FUNCTION <)) (LOOP FOR I FROM 0 TO 999 BY (* 3 5 7) COLLECT I)) T)
;; Loading (DEFTEST INTERSECTION.11-A (EQUALT (SORT (INTERSECTION (LOOP FOR I FROM 0 TO 999 BY 5 COLLECT I) (LOOP FOR I FROM 0 TO 999 BY 7 COLLECT I) :TEST-NOT (FUNCTION (LAMBDA (A B) (NOT (AND (EQL A B) (= (MOD A 3) 0)))))) (FUNCTION <)) (LOOP FOR I FROM 0 TO 999 BY (* 3 5 7) COLLECT I)) T)
;; Loading (DEFTEST INTERSECTION.12 (INTERSECTION-12-BODY 100 100) NIL)
;; Loading (DEFTEST INTERSECTION.13 (LET ((X (COPY-LIST (QUOTE (0 5 8 13 31 42)))) (Y (COPY-LIST (QUOTE (3 5 42 0 7 100 312 33))))) (EQUALT (SORT (COPY-LIST (INTERSECTION X Y)) (FUNCTION <)) (SORT (COPY-LIST (INTERSECTION X Y :KEY (FUNCTION 1+))) (FUNCTION <)))) T)
;; Loading (DEFTEST INTERSECTION.13-A (LET ((X (COPY-LIST (QUOTE (0 5 8 13 31 42)))) (Y (COPY-LIST (QUOTE (3 5 42 0 7 100 312 33))))) (EQUALT (SORT (COPY-LIST (INTERSECTION X Y)) (FUNCTION <)) (SORT (COPY-LIST (INTERSECTION X Y :KEY (QUOTE 1+))) (FUNCTION <)))) T)
;; Loading (DEFTEST INTERSECTION.14 (LET ((RESULT (INTERSECTION (COPY-LIST (QUOTE (A B C D))) (COPY-LIST (QUOTE (E C F B G))) :KEY NIL))) (AND (MEMBER (QUOTE B) RESULT) (MEMBER (QUOTE C) RESULT) (EVERY (FUNCTION (LAMBDA (X) (MEMBER X (QUOTE (B C))))) RESULT) T)) T)
;; Loading (DEFTEST INTERSECTION.15 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (BLOCK FAIL (INTERSECTION LIST1 LIST2 :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (EQL X Y)))))) (4))
;; Loading (DEFTEST INTERSECTION.16 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (BLOCK FAIL (INTERSECTION LIST1 LIST2 :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (EQL X Y)))))) (4))
;; Loading (DEFTEST INTERSECTION.17 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (BLOCK FAIL (INTERSECTION LIST1 LIST2 :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQL X Y))))))) (4))
;; Loading (DEFTEST INTERSECTION.18 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (BLOCK FAIL (INTERSECTION LIST1 LIST2 :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQL X Y))))))) (4))
;; Loading (DEFHARMLESS INTERSECTION.TEST-AND-TEST-NOT.1 (INTERSECTION (QUOTE (A B C)) (QUOTE (A C E)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS INTERSECTION.TEST-AND-TEST-NOT.2 (INTERSECTION (QUOTE (A B C)) (QUOTE (A C E)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST INTERSECTION.ORDER.1 (LET ((I 0) X Y) (VALUES (INTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D)))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST INTERSECTION.ORDER.2 (LET ((I 0) X Y) (VALUES (INTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D))) :TEST (FUNCTION EQ)) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST INTERSECTION.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (INTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQ)) :TEST (PROGN (SETF W (INCF I)) (COMPLEMENT (FUNCTION EQ)))) I X Y Z W)) NIL 4 1 2 3 4)
;; Loading (DEFTEST INTERSECTION.ORDER.4 (LET ((I 0) X Y Z W) (VALUES (INTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQ)) :KEY (PROGN (SETF W (INCF I)) (FUNCTION IDENTITY))) I X Y Z W)) NIL 4 1 2 3 4)
;; Loading (DEFTEST INTERSECTION.ORDER.5 (LET ((I 0) X Y Z W) (VALUES (INTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF W (INCF I)) (FUNCTION EQ))) I X Y Z W)) NIL 4 1 2 3 4)
;; Loading (DEFTEST INTERSECTION.ALLOW-OTHER-KEYS.1 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (INTERSECTION LIST1 LIST2 :BAD T :ALLOW-OTHER-KEYS 1)) (4))
;; Loading (DEFTEST INTERSECTION.ALLOW-OTHER-KEYS.2 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (INTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T)) (4))
;; Loading (DEFTEST INTERSECTIONALLOW-OTHER-KEYS.3 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (INTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (1+ Y)))))) NIL)
;; Loading (DEFTEST INTERSECTION.ALLOW-OTHER-KEYS.4 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (INTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS T)) (4))
;; Loading (DEFTEST INTERSECTION.ALLOW-OTHER-KEYS.5 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (INTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS NIL)) (4))
;; Loading (DEFTEST INTERSECTION.ALLOW-OTHER-KEYS.6 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (INTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)) (4))
;; Loading (DEFTEST INTERSECTION.ALLOW-OTHER-KEYS.7 (SORT (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (INTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :TEST (FUNCTION (LAMBDA (X Y) (EQL X (1- Y)))))) (FUNCTION <)) (3 4))
;; Loading (DEFTEST INTERSECTION.KEYWORDS.8 (SORT (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (INTERSECTION LIST1 LIST2 :TEST (FUNCTION (LAMBDA (X Y) (EQL X (1- Y)))) :TEST (FUNCTION EQL))) (FUNCTION <)) (3 4))
;; Loading (DEF-FOLD-TEST INTERSECTION.FOLD.1 (INTERSECTION (QUOTE (A B C D E F)) (QUOTE (D W A X B Y))))
;; Loading (DEFTEST INTERSECTION.ERROR.1 (SIGNALS-ERROR (INTERSECTION) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.2 (SIGNALS-ERROR (INTERSECTION NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.3 (SIGNALS-ERROR (INTERSECTION NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.4 (SIGNALS-ERROR (INTERSECTION NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.5 (SIGNALS-ERROR (INTERSECTION NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.6 (SIGNALS-ERROR (INTERSECTION NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.7 (SIGNALS-ERROR (INTERSECTION (QUOTE (A B C)) (QUOTE (D E F)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.8 (SIGNALS-ERROR (INTERSECTION (QUOTE (A B C)) (QUOTE (D E F)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.9 (SIGNALS-ERROR (INTERSECTION (QUOTE (A B C)) (QUOTE (D E F)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.10 (SIGNALS-ERROR (INTERSECTION (QUOTE (A B C)) (QUOTE (D E F)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.11 (SIGNALS-ERROR (INTERSECTION (QUOTE (A B C)) (QUOTE (D E F . G))) TYPE-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.12 (SIGNALS-ERROR (INTERSECTION (QUOTE (A B . C)) (QUOTE (D E F))) TYPE-ERROR) T)
;; Loading (DEFTEST INTERSECTION.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (INTERSECTION X (QUOTE (A B C))))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST INTERSECTION.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (INTERSECTION (QUOTE (A B C)) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "nintersection.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nintersection.lsp C12CEAC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NINTERSECTION.1 (NINTERSECTION NIL NIL) NIL)
;; Loading (DEFTEST NINTERSECTION.2 (NINTERSECTION (LOOP FOR I FROM 1 TO 100 COLLECT I) NIL) NIL)
;; Loading (DEFTEST NINTERSECTION.3 (NINTERSECTION-WITH-CHECK NIL (LOOP FOR I FROM 1 TO 100 COLLECT I)) NIL)
;; Loading (DEFTEST NINTERSECTION.4 (LET* ((X (COPY-LIST (QUOTE (A 1 C 7 B 4 3 Z)))) (XC (COPY-LIST X)) (Y (COPY-LIST (QUOTE (3 Y C Q Z A 18)))) (RESULT (NINTERSECTION-WITH-CHECK XC Y))) (AND (NOT (EQT RESULT (QUOTE FAILED))) (+ (LOOP FOR E IN X COUNT (AND (MEMBER E Y) (NOT (MEMBER E RESULT)))) (LOOP FOR E IN RESULT COUNT (OR (NOT (MEMBER E X)) (NOT (MEMBER E Y)))) (LOOP FOR HD ON RESULT COUNT (AND (CONSP HD) (MEMBER (CAR HD) (CDR HD))))))) 0)
;; Loading (DEFTEST NINTERSECTION.5 (LET* ((X (COPY-LIST (QUOTE (A A A)))) (Y (COPY-LIST (QUOTE (A A A B B B)))) (RESULT (NINTERSECTION-WITH-CHECK X Y))) (AND (NOT (EQT RESULT (QUOTE FAILED))) (MEMBER (QUOTE A) RESULT) (NOT (MEMBER (QUOTE B) RESULT)))) T)
;; Loading (DEFTEST NINTERSECTION.6 (NINTERSECTION-WITH-CHECK (LIST 1000000000000 (QUOTE A) (QUOTE B) (QUOTE C)) (LIST (1+ 999999999999) (QUOTE D) (QUOTE E) (QUOTE F))) (1000000000000))
;; Loading (DEFTEST NINTERSECTION.7 (NINTERSECTION-WITH-CHECK (LIST (QUOTE A) 10 (QUOTE B) 17) (LIST (QUOTE C) (QUOTE D) 4 (QUOTE E) (QUOTE F) 10 1 13 (QUOTE Z))) (10))
;; Loading (DEFTEST NINTERSECTION.8 (NINTERSECTION-WITH-CHECK (LIST (QUOTE A) (COPY-SEQ "aaa") (QUOTE B)) (LIST (QUOTE D) (COPY-SEQ "aaa") (QUOTE E))) NIL)
;; Loading (DEFTEST NINTERSECTION.9 (NINTERSECTION-WITH-CHECK (LIST (QUOTE A) (COPY-SEQ "aaa") (QUOTE B)) (LIST (QUOTE D) (COPY-SEQ "aaa") (QUOTE E)) :TEST (FUNCTION EQUAL)) ("aaa"))
;; Loading (DEFTEST NINTERSECTION.9-A (NINTERSECTION-WITH-CHECK (LIST (QUOTE A) (COPY-SEQ "aaa") (QUOTE B)) (LIST (QUOTE D) (COPY-SEQ "aaa") (QUOTE E)) :TEST (QUOTE EQUAL)) ("aaa"))
;; Loading (DEFTEST NINTERSECTION.9-B (NINTERSECTION (LIST (QUOTE A) (COPY-SEQ "aaa") (QUOTE B)) (LIST (QUOTE D) (COPY-SEQ "aaa") (QUOTE E)) :TEST-NOT (FUNCTION (LAMBDA (P Q) (NOT (EQUAL P Q))))) ("aaa"))
;; Loading (DEFTEST NINTERSECTION.10 (EQUALT (SORT (LET ((RESULT (NINTERSECTION-WITH-CHECK (LOOP FOR I FROM 0 TO 1000 BY 3 COLLECT I) (LOOP FOR I FROM 0 TO 1000 BY 7 COLLECT I)))) (IF (EQT RESULT (QUOTE FAILED)) NIL RESULT)) (FUNCTION <)) (LOOP FOR I FROM 0 TO 1000 BY 21 COLLECT I)) T)
;; Loading (DEFTEST NINTERSECTION.11 (EQUALT (SORT (LET ((RESULT (NINTERSECTION-WITH-CHECK (LOOP FOR I FROM 0 TO 999 BY 5 COLLECT I) (LOOP FOR I FROM 0 TO 999 BY 7 COLLECT I) :TEST (FUNCTION (LAMBDA (A B) (AND (EQL A B) (= (MOD A 3) 0))))))) (IF (EQT RESULT (QUOTE FAILED)) NIL RESULT)) (FUNCTION <)) (LOOP FOR I FROM 0 TO 999 BY (* 3 5 7) COLLECT I)) T)
;; Loading (DEFTEST NINTERSECTION.12 (NINTERSECTION-12-BODY 100 100) NIL)
;; Loading (DEFTEST NINTERSECTION.13 (LET ((X (QUOTE (0 5 8 13 31 42))) (Y (COPY-LIST (QUOTE (3 5 42 0 7 100 312 33))))) (EQUALT (SORT (COPY-LIST (NINTERSECTION (COPY-LIST X) Y)) (FUNCTION <)) (SORT (COPY-LIST (NINTERSECTION (COPY-LIST X) Y :KEY (FUNCTION 1+))) (FUNCTION <)))) T)
;; Loading (DEFTEST NINTERSECTION.14 (LET ((RESULT (NINTERSECTION (COPY-LIST (QUOTE (A B C D))) (COPY-LIST (QUOTE (E C F B G))) :KEY NIL))) (AND (MEMBER (QUOTE B) RESULT) (MEMBER (QUOTE C) RESULT) (EVERY (FUNCTION (LAMBDA (X) (MEMBER X (QUOTE (B C))))) RESULT) T)) T)
;; Loading (DEFTEST NINTERSECTION.15 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (BLOCK FAIL (NINTERSECTION LIST1 LIST2 :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (EQL X Y)))))) (4))
;; Loading (DEFTEST NINTERSECTION.16 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (BLOCK FAIL (NINTERSECTION LIST1 LIST2 :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (EQL X Y)))))) (4))
;; Loading (DEFTEST NINTERSECTION.17 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (BLOCK FAIL (NINTERSECTION LIST1 LIST2 :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQL X Y))))))) (4))
;; Loading (DEFTEST NINTERSECTION.18 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (BLOCK FAIL (NINTERSECTION LIST1 LIST2 :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQL X Y))))))) (4))
;; Loading (DEFHARMLESS NINTERSECTION.TEST-AND-TEST-NOT.1 (NINTERSECTION (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (LIST (QUOTE A) (QUOTE C) (QUOTE E)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NINTERSECTION.TEST-AND-TEST-NOT.2 (NINTERSECTION (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (LIST (QUOTE A) (QUOTE C) (QUOTE E)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST NINTERSECTION.ORDER.1 (LET ((I 0) X Y) (VALUES (NINTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D)))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST NINTERSECTION.ORDER.2 (LET ((I 0) X Y) (VALUES (NINTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D))) :TEST (FUNCTION EQ)) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST NINTERSECTION.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (NINTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQ)) :TEST (PROGN (SETF W (INCF I)) (COMPLEMENT (FUNCTION EQ)))) I X Y Z W)) NIL 4 1 2 3 4)
;; Loading (DEFTEST NINTERSECTION.ORDER.4 (LET ((I 0) X Y Z W) (VALUES (NINTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQ)) :KEY (PROGN (SETF W (INCF I)) (FUNCTION IDENTITY))) I X Y Z W)) NIL 4 1 2 3 4)
;; Loading (DEFTEST NINTERSECTION.ORDER.5 (LET ((I 0) X Y Z W) (VALUES (NINTERSECTION (PROGN (SETF X (INCF I)) (LIST (QUOTE A) (QUOTE B))) (PROGN (SETF Y (INCF I)) (LIST (QUOTE C) (QUOTE D))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF W (INCF I)) (FUNCTION EQ))) I X Y Z W)) NIL 4 1 2 3 4)
;; Loading (DEFTEST NINTERSECTION.ALLOW-OTHER-KEYS.1 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :BAD T :ALLOW-OTHER-KEYS 1)) (4))
;; Loading (DEFTEST NINTERSECTION.ALLOW-OTHER-KEYS.2 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T)) (4))
;; Loading (DEFTEST NINTERSECTION.ALLOW-OTHER-KEYS.3 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (1+ Y)))))) NIL)
;; Loading (DEFTEST NINTERSECTION.ALLOW-OTHER-KEYS.4 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS T)) (4))
;; Loading (DEFTEST NINTERSECTION.ALLOW-OTHER-KEYS.5 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS NIL)) (4))
;; Loading (DEFTEST NINTERSECTION.ALLOW-OTHER-KEYS.6 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)) (4))
;; Loading (DEFTEST NINTERSECTION.ALLOW-OTHER-KEYS.7 (SORT (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :TEST (FUNCTION (LAMBDA (X Y) (EQL X (1- Y)))))) (FUNCTION <)) (3 4))
;; Loading (DEFTEST NINTERSECTION.KEYWORDS.8 (SORT (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :TEST (FUNCTION (LAMBDA (X Y) (EQL X (1- Y)))) :TEST (FUNCTION EQL))) (FUNCTION <)) (3 4))
;; Loading (DEFTEST NINTERSECTION.ALLOW-OTHER-KEYS.9 (LET ((LIST1 (LIST 1 2 3 4)) (LIST2 (LIST 4 5 6 7))) (NINTERSECTION LIST1 LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (1+ Y)))))) NIL)
;; Loading (DEFTEST NINTERSECTION.ERROR.1 (SIGNALS-ERROR (NINTERSECTION) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.2 (SIGNALS-ERROR (NINTERSECTION NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.3 (SIGNALS-ERROR (NINTERSECTION NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.4 (SIGNALS-ERROR (NINTERSECTION NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.5 (SIGNALS-ERROR (NINTERSECTION NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.6 (SIGNALS-ERROR (NINTERSECTION NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.7 (SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST 4 5 6) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.8 (SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST 4 5 6) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.9 (SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST 4 5 6) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.10 (SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST 4 5 6) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.11 (SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST* 4 5 6 7)) TYPE-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.12 (SIGNALS-ERROR (NINTERSECTION (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST NINTERSECTION.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NINTERSECTION X (COPY-SEQ (QUOTE (A B C)))))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST NINTERSECTION.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NINTERSECTION (COPY-SEQ (QUOTE (A B C))) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "union.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/union.lsp C1522147>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST UNION.1 (UNION NIL NIL) NIL)
;; Loading (DEFTEST UNION.2 (UNION-WITH-CHECK (LIST (QUOTE A)) NIL) (A))
;; Loading (DEFTEST UNION.3 (UNION-WITH-CHECK (LIST (QUOTE A)) (LIST (QUOTE A))) (A))
;; Loading (DEFTEST UNION-4 (UNION-WITH-CHECK (LIST 1) (LIST 1)) (1))
;; Loading (DEFTEST UNION.5 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (UNION-WITH-CHECK (LIST X) (LIST X))) ((A B)))
;; Loading (DEFTEST UNION.6 (LET ((X (COPY-LIST (QUOTE (A B C D E F)))) (Y (COPY-LIST (QUOTE (Z C Y A V B))))) (LET ((RESULT (UNION-WITH-CHECK X Y))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.6-A (LET ((X (COPY-LIST (QUOTE (A B C D E F)))) (Y (COPY-LIST (QUOTE (Z C Y A V B))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST (FUNCTION EQ)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.7 (LET ((X (COPY-LIST (QUOTE (A B C D E F)))) (Y (COPY-LIST (QUOTE (Z C Y A V B))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST (FUNCTION EQL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.8 (LET ((X (COPY-LIST (QUOTE (A B C D E F)))) (Y (COPY-LIST (QUOTE (Z C Y A V B))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST (FUNCTION EQUAL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.9 (LET ((X (COPY-LIST (QUOTE (A B C D E F)))) (Y (COPY-LIST (QUOTE (Z C Y A V B))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST-NOT (COMPLEMENT (FUNCTION EQL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.10 (LET ((X (COPY-LIST (QUOTE (A B C D E F)))) (Y (COPY-LIST (QUOTE (Z C Y A V B))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.11 (LET ((X (COPY-LIST (QUOTE (A B C D E F)))) (Y (COPY-LIST (QUOTE (Z C Y A V B))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST-NOT (COMPLEMENT (FUNCTION EQ))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.12 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK X Y))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.13 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST (FUNCTION EQUAL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.14 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST (FUNCTION EQL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.15 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CHECK-UNION X Y RESULT))) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST UNION.16 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST-NOT (COMPLEMENT (FUNCTION EQL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.17 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK-AND-KEY X Y (FUNCTION 1+)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.18 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK-AND-KEY X Y (FUNCTION 1+) :TEST (FUNCTION EQUAL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.19 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK-AND-KEY X Y (FUNCTION 1+) :TEST (FUNCTION EQL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.20 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK-AND-KEY X Y (FUNCTION 1+) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.21 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK-AND-KEY X Y (FUNCTION 1+) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.22 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK-AND-KEY X Y NIL))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.23 (LET ((X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((RESULT (UNION-WITH-CHECK-AND-KEY X Y (QUOTE 1+)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST UNION.24 (DO-RANDOM-UNIONS 100 100 200) NIL)
;; Loading (DEFTEST UNION.25 (LET ((X (SHUFFLE (QUOTE (1 4 6 10 45 101)))) (Y (COPY-LIST (QUOTE (102 5 2 11 44 6))))) (LET ((RESULT (UNION-WITH-CHECK X Y :TEST (FUNCTION (LAMBDA (A B) (<= (ABS (- A B)) 1)))))) (AND (NOT (EQT RESULT (QUOTE FAILED))) (SORT (SUBLIS (QUOTE ((2 . 1) (5 . 4) (11 . 10) (45 . 44) (102 . 101))) (COPY-LIST RESULT)) (FUNCTION <))))) (1 4 6 10 44 101))
;; Loading (DEFTEST UNION.26 (LET ((X 1000) (Y 1000)) (LOOP WHILE (NOT (TYPEP X (QUOTE BIGNUM))) DO (PROGN (SETF X (* X X)) (SETF Y (* Y Y)))) (NOTNOT-MV (OR (EQT X Y) (EQL (LENGTH (UNION-WITH-CHECK (LIST X) (LIST X))) 1)))) T)
;; Loading (DEFTEST UNION.27 (UNION-WITH-CHECK (LIST (COPY-SEQ "aa")) (LIST (COPY-SEQ "aa"))) ("aa" "aa"))
;; Loading (DEFTEST UNION.28 (BLOCK FAIL (SORT (UNION-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (EQL X Y)))) (FUNCTION <))) (1 2 3 4 5 6))
;; Loading (DEFTEST UNION.29 (BLOCK FAIL (SORT (UNION-WITH-CHECK-AND-KEY (LIST 1 2 3) (LIST 4 5 6) (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (EQL X Y)))) (FUNCTION <))) (1 2 3 4 5 6))
;; Loading (DEFTEST UNION.30 (BLOCK FAIL (SORT (UNION-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQL X Y))))) (FUNCTION <))) (1 2 3 4 5 6))
;; Loading (DEFTEST UNION.31 (BLOCK FAIL (SORT (UNION-WITH-CHECK-AND-KEY (LIST 1 2 3) (LIST 4 5 6) (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQL X Y))))) (FUNCTION <))) (1 2 3 4 5 6))
;; Loading (DEFHARMLESS UNION.TEST-AND-TEST-NOT.1 (UNION (LIST 1 4 8 10) (LIST 1 2 3 9 10 13) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS UNION.TEST-AND-TEST-NOT.2 (UNION (LIST 1 4 8 10) (LIST 1 2 3 9 10 13) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST UNION.ORDER.1 (LET ((I 0) X Y) (VALUES (SORT (UNION (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (2 5 8))))) (FUNCTION <)) I X Y)) (1 2 3 5 8) 2 1 2)
;; Loading (DEFTEST UNION.ORDER.2 (LET ((I 0) X Y Z W) (VALUES (SORT (UNION (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (2 5 8)))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL)) :KEY (PROGN (SETF W (INCF I)) (FUNCTION IDENTITY))) (FUNCTION <)) I X Y Z W)) (1 2 3 5 8) 4 1 2 3 4)
;; Loading (DEFTEST UNION.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (SORT (UNION (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (2 5 8)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF W (INCF I)) (FUNCTION EQL))) (FUNCTION <)) I X Y Z W)) (1 2 3 5 8) 4 1 2 3 4)
;; Loading (DEFTEST UNION.ALLOW-OTHER-KEYS.1 (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :BAD T :ALLOW-OTHER-KEYS "yes") (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST UNION.ALLOW-OTHER-KEYS.2 (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALSO-BAD T) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST UNION.ALLOW-OTHER-KEYS.3 (SORT (UNION (LIST 1 2 3) (LIST 1 2 3) :ALLOW-OTHER-KEYS T :ALSO-BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (+ Y 100))))) (FUNCTION <)) (1 1 2 2 3 3))
;; Loading (DEFTEST UNION.ALLOW-OTHER-KEYS.4 (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST UNION.ALLOW-OTHER-KEYS.5 (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS NIL) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST UNION.ALLOW-OTHER-KEYS.6 (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST UNION.ALLOW-OTHER-KEYS.7 (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST UNION.KEYWORDS.9 (SORT (UNION (LIST 1 2 3) (LIST 1 2 3) :TEST (FUNCTION (LAMBDA (X Y) (= X (+ Y 100)))) :TEST (FUNCTION EQL)) (FUNCTION <)) (1 1 2 2 3 3))
;; Loading (DEF-FOLD-TEST UNION.FOLD.1 (UNION (QUOTE (A B C D E)) (QUOTE (D X Y A W C))))
;; Loading (DEFTEST UNION.ERROR.1 (SIGNALS-ERROR (UNION) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.2 (SIGNALS-ERROR (UNION NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.3 (SIGNALS-ERROR (UNION NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.4 (SIGNALS-ERROR (UNION NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.5 (SIGNALS-ERROR (UNION NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.6 (SIGNALS-ERROR (UNION NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.7 (SIGNALS-ERROR (UNION (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.8 (SIGNALS-ERROR (UNION (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.9 (SIGNALS-ERROR (UNION (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.10 (SIGNALS-ERROR (UNION (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.11 (SIGNALS-ERROR (UNION (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.12 (SIGNALS-ERROR (UNION (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST UNION.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (UNION X (QUOTE (1 2))))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST UNION.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (UNION (QUOTE (1 2)) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "nunion.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nunion.lsp 81074987>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NUNION.1 (NUNION NIL NIL) NIL)
;; Loading (DEFTEST NUNION.2 (NUNION-WITH-COPY (LIST (QUOTE A)) NIL) (A))
;; Loading (DEFTEST NUNION.3 (NUNION-WITH-COPY (LIST (QUOTE A)) (LIST (QUOTE A))) (A))
;; Loading (DEFTEST NUNION.4 (NUNION-WITH-COPY (LIST 1) (LIST 1)) (1))
;; Loading (DEFTEST NUNION.5 (LET ((X (LIST (QUOTE A) (QUOTE B)))) (NUNION-WITH-COPY (LIST X) (LIST X))) ((A B)))
;; Loading (DEFTEST NUNION.6 (LET ((X (QUOTE (A B C D E F))) (Y (QUOTE (Z C Y A V B)))) (LET ((RESULT (NUNION-WITH-COPY X Y))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.6-A (LET ((X (QUOTE (A B C D E F))) (Y (QUOTE (Z C Y A V B)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST (FUNCTION EQ)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.7 (LET ((X (QUOTE (A B C D E F))) (Y (QUOTE (Z C Y A V B)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST (FUNCTION EQL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.8 (LET ((X (QUOTE (A B C D E F))) (Y (QUOTE (Z C Y A V B)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST (FUNCTION EQUAL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.9 (LET ((X (QUOTE (A B C D E F))) (Y (QUOTE (Z C Y A V B)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST-NOT (COMPLEMENT (FUNCTION EQL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.10 (LET ((X (QUOTE (A B C D E F))) (Y (QUOTE (Z C Y A V B)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.11 (LET ((X (QUOTE (A B C D E F))) (Y (QUOTE (Z C Y A V B)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST-NOT (COMPLEMENT (FUNCTION EQ))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.12 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY X Y))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.13 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST (FUNCTION EQUAL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.14 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST (FUNCTION EQL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.15 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.16 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST-NOT (COMPLEMENT (FUNCTION EQL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.17 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY-AND-KEY X Y (FUNCTION 1+)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.18 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY-AND-KEY X Y (FUNCTION 1+) :TEST (FUNCTION EQUAL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.19 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY-AND-KEY X Y (FUNCTION 1+) :TEST (FUNCTION EQL)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.20 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY-AND-KEY X Y (FUNCTION 1+) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.21 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY-AND-KEY X Y (FUNCTION 1+) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.22 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY-AND-KEY X Y NIL))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.23 (LET ((X (QUOTE (1 2 3 4 5 6 7))) (Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((RESULT (NUNION-WITH-COPY-AND-KEY X Y (QUOTE 1+)))) (CHECK-UNION X Y RESULT))) T)
;; Loading (DEFTEST NUNION.24 (DO-RANDOM-NUNIONS 100 100 200) NIL)
;; Loading (DEFTEST NUNION.25 (LET ((X (SHUFFLE (QUOTE (1 4 6 10 45 101)))) (Y (QUOTE (102 5 2 11 44 6)))) (LET ((RESULT (NUNION-WITH-COPY X Y :TEST (FUNCTION (LAMBDA (A B) (<= (ABS (- A B)) 1)))))) (SORT (SUBLIS (QUOTE ((2 . 1) (5 . 4) (11 . 10) (45 . 44) (102 . 101))) (COPY-LIST RESULT)) (FUNCTION <)))) (1 4 6 10 44 101))
;; Loading (DEFTEST NUNION.26 (LET ((X 1000) (Y 1000)) (LOOP WHILE (NOT (TYPEP X (QUOTE BIGNUM))) DO (PROGN (SETF X (* X X)) (SETF Y (* Y Y)))) (NOTNOT-MV (OR (EQT X Y) (EQL (LENGTH (NUNION-WITH-COPY (LIST X) (LIST X))) 1)))) T)
;; Loading (DEFTEST NUNION.27 (NUNION-WITH-COPY (LIST (COPY-SEQ "aa")) (LIST (COPY-SEQ "aa"))) ("aa" "aa"))
;; Loading (DEFHARMLESS NUNION.TEST-AND-TEST-NOT.1 (NUNION (LIST 1 4 8 10) (LIST 1 2 3 9 10 13) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NUNION.TEST-AND-TEST-NOT.2 (NUNION (LIST 1 4 8 10) (LIST 1 2 3 9 10 13) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST NUNION.28 (BLOCK FAIL (SORT (NUNION-WITH-COPY (QUOTE (1 2 3)) (QUOTE (4 5 6)) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (EQL X Y)))) (FUNCTION <))) (1 2 3 4 5 6))
;; Loading (DEFTEST NUNION.29 (BLOCK FAIL (SORT (NUNION-WITH-COPY-AND-KEY (QUOTE (1 2 3)) (QUOTE (4 5 6)) (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (EQL X Y)))) (FUNCTION <))) (1 2 3 4 5 6))
;; Loading (DEFTEST NUNION.30 (BLOCK FAIL (SORT (NUNION-WITH-COPY (QUOTE (1 2 3)) (QUOTE (4 5 6)) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQL X Y))))) (FUNCTION <))) (1 2 3 4 5 6))
;; Loading (DEFTEST NUNION.31 (BLOCK FAIL (SORT (NUNION-WITH-COPY-AND-KEY (QUOTE (1 2 3)) (QUOTE (4 5 6)) (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQL X Y))))) (FUNCTION <))) (1 2 3 4 5 6))
;; Loading (DEFTEST NUNION.ORDER.1 (LET ((I 0) X Y) (VALUES (SORT (NUNION (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (2 5 8))))) (FUNCTION <)) I X Y)) (1 2 3 5 8) 2 1 2)
;; Loading (DEFTEST NUNION.ORDER.2 (LET ((I 0) X Y Z W) (VALUES (SORT (NUNION (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (2 5 8)))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL)) :KEY (PROGN (SETF W (INCF I)) (FUNCTION IDENTITY))) (FUNCTION <)) I X Y Z W)) (1 2 3 5 8) 4 1 2 3 4)
;; Loading (DEFTEST NUNION.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (SORT (NUNION (PROGN (SETF X (INCF I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF Y (INCF I)) (COPY-LIST (QUOTE (2 5 8)))) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF W (INCF I)) (FUNCTION EQL))) (FUNCTION <)) I X Y Z W)) (1 2 3 5 8) 4 1 2 3 4)
;; Loading (DEFTEST NUNION.ALLOW-OTHER-KEYS.1 (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :BAD T :ALLOW-OTHER-KEYS "yes") (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST NUNION.ALLOW-OTHER-KEYS.2 (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALSO-BAD T) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST NUNION.ALLOW-OTHER-KEYS.3 (SORT (NUNION (LIST 1 2 3) (LIST 1 2 3) :ALLOW-OTHER-KEYS T :ALSO-BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (+ Y 100))))) (FUNCTION <)) (1 1 2 2 3 3))
;; Loading (DEFTEST NUNION.ALLOW-OTHER-KEYS.4 (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST NUNION.ALLOW-OTHER-KEYS.5 (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS NIL) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST NUNION.ALLOW-OTHER-KEYS.6 (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST NUNION.ALLOW-OTHER-KEYS.7 (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1) (FUNCTION <)) (1 2 5 7 9 10 11 20))
;; Loading (DEFTEST NUNION.KEYWORDS.9 (SORT (NUNION (LIST 1 2 3) (LIST 1 2 3) :TEST (FUNCTION (LAMBDA (X Y) (= X (+ Y 100)))) :TEST (FUNCTION EQL)) (FUNCTION <)) (1 1 2 2 3 3))
;; Loading (DEFTEST NUNION.ERROR.1 (SIGNALS-ERROR (NUNION) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.2 (SIGNALS-ERROR (NUNION NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.3 (SIGNALS-ERROR (NUNION NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.4 (SIGNALS-ERROR (NUNION NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.5 (SIGNALS-ERROR (NUNION NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.6 (SIGNALS-ERROR (NUNION NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.7 (SIGNALS-ERROR (NUNION (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.8 (SIGNALS-ERROR (NUNION (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.9 (SIGNALS-ERROR (NUNION (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.10 (SIGNALS-ERROR (NUNION (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.11 (SIGNALS-ERROR (NUNION (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.12 (SIGNALS-ERROR (NUNION (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST NUNION.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NUNION X (LIST 1 2 3)))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST NUNION.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NUNION (LIST 1 2 3) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "set-difference.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/set-difference.lsp 812EF137>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST SET-DIFFERENCE.1 (SET-DIFFERENCE NIL NIL) NIL)
;; Loading (DEFTEST SET-DIFFERENCE.2 (LET ((RESULT (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C)) NIL))) (CHECK-SET-DIFFERENCE (QUOTE (A B C)) NIL RESULT)) T)
;; Loading (DEFTEST SET-DIFFERENCE.3 (LET ((RESULT (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E F)) (QUOTE (F B D))))) (CHECK-SET-DIFFERENCE (QUOTE (A B C D E F)) (QUOTE (F B D)) RESULT)) T)
;; Loading (DEFTEST SET-DIFFERENCE.4 (SORT (COPY-LIST (SET-DIFFERENCE-WITH-CHECK (SHUFFLE (QUOTE (1 2 3 4 5 6 7 8))) (QUOTE (10 101 4 74 2 1391 7 17831)))) (FUNCTION <)) (1 3 5 6 8))
;; Loading (DEFTEST SET-DIFFERENCE.5 (SET-DIFFERENCE-WITH-CHECK NIL (QUOTE (A B C D E F G H))) NIL)
;; Loading (DEFTEST SET-DIFFERENCE.6 (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :KEY NIL) (C))
;; Loading (DEFTEST SET-DIFFERENCE.7 (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQ)) (C))
;; Loading (DEFTEST SET-DIFFERENCE.8 (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQL)) (C))
;; Loading (DEFTEST SET-DIFFERENCE.9 (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQUAL)) (C))
;; Loading (DEFTEST SET-DIFFERENCE.10 (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQ)) (C))
;; Loading (DEFTEST SET-DIFFERENCE.11 (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQL)) (C))
;; Loading (DEFTEST SET-DIFFERENCE.12 (SET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQUAL)) (C))
;; Loading (DEFTEST SET-DIFFERENCE.13 (DO-RANDOM-SET-DIFFERENCES 100 100) NIL)
;; Loading (DEFTEST SET-DIFFERENCE.14 (SET-DIFFERENCE-WITH-CHECK (QUOTE ((A . 1) (B . 2) (C . 3))) (QUOTE ((A . 1) (C . 3))) :KEY (QUOTE CAR)) ((B . 2)))
;; Loading (DEFTEST SET-DIFFERENCE.15 (SET-DIFFERENCE-WITH-CHECK (QUOTE ((A . 1) (B . 2) (C . 3))) (QUOTE ((A . 1) (C . 3))) :KEY (FUNCTION CAR)) ((B . 2)))
;; Loading (DEFTEST SET-DIFFERENCE.16 (BLOCK FAIL (SORT (COPY-LIST (SET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (E F G H)) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (OR (MEMBER X (QUOTE (E F G H))) (MEMBER Y (QUOTE (1 2 3 4)))) (RETURN-FROM FAIL (QUOTE FAIL))) (EQT X Y))))) (FUNCTION <))) (1 2 3 4))
;; Loading (DEFTEST SET-DIFFERENCE.17 (BLOCK FAIL (SORT (COPY-LIST (SET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (E F G H)) :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (OR (MEMBER X (QUOTE (E F G H))) (MEMBER Y (QUOTE (1 2 3 4)))) (RETURN-FROM FAIL (QUOTE FAIL))) (EQT X Y))))) (FUNCTION <))) (1 2 3 4))
;; Loading (DEFTEST SET-DIFFERENCE.18 (BLOCK FAIL (SORT (COPY-LIST (SET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (E F G H)) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (OR (MEMBER X (QUOTE (E F G H))) (MEMBER Y (QUOTE (1 2 3 4)))) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQT X Y)))))) (FUNCTION <))) (1 2 3 4))
;; Loading (DEFTEST SET-DIFFERENCE.19 (BLOCK FAIL (SORT (COPY-LIST (SET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (E F G H)) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (OR (MEMBER X (QUOTE (E F G H))) (MEMBER Y (QUOTE (1 2 3 4)))) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQT X Y)))))) (FUNCTION <))) (1 2 3 4))
;; Loading (DEFHARMLESS SET-DIFFERENCE.TEST-AND-TEST-NOT.1 (SET-DIFFERENCE (LIST 1 2 3 4) (LIST 1 7 3 8) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SET-DIFFERENCE.TEST-AND-TEST-NOT.2 (SET-DIFFERENCE (LIST 1 2 3 4) (LIST 1 7 3 8) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST SET-DIFFERENCE.ORDER.1 (LET ((I 0) X Y) (VALUES (SET-DIFFERENCE (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 2 3 4))) I X Y)) (1) 2 1 2)
;; Loading (DEFTEST SET-DIFFERENCE.ORDER.2 (LET ((I 0) X Y Z) (VALUES (SET-DIFFERENCE (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 2 3 4)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION (LAMBDA (X Y) (= X (1- Y)))))) I X Y Z)) (4) 3 1 2 3)
;; Loading (DEFTEST SET-DIFFERENCE.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (SET-DIFFERENCE (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 2 3 4)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION (LAMBDA (X Y) (= X (1- Y))))) :KEY (PROGN (SETF W (INCF I)) NIL)) I X Y Z W)) (4) 4 1 2 3 4)
;; Loading (DEFTEST SET-DIFFERENCE.ALLOW-OTHER-KEYS.1 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :BAD T :ALLOW-OTHER-KEYS T)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST SET-DIFFERENCE.ALLOW-OTHER-KEYS.2 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :BAD T)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST SET-DIFFERENCE.ALLOW-OTHER-KEYS.3 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (1- Y)))))) (FUNCTION <)) (4 5))
;; Loading (DEFTEST SET-DIFFERENCE.ALLOW-OTHER-KEYS.4 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST SET-DIFFERENCE.ALLOW-OTHER-KEYS.5 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS NIL)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST SET-DIFFERENCE.ALLOW-OTHER-KEYS.6 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST SET-DIFFERENCE.ALLOW-OTHER-KEYS.7 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST SET-DIFFERENCE.KEYWORDS.8 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :TEST (FUNCTION EQL) :TEST (COMPLEMENT (FUNCTION EQL)))) (FUNCTION <)) (1 5))
;; Loading (DEFTEST SET-DIFFERENCE.KEYWORDS.9 (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :TEST (COMPLEMENT (FUNCTION EQL)) :TEST (FUNCTION EQL))) (FUNCTION <)) NIL)
;; Loading (DEF-FOLD-TEST SET-DIFFERENCE.FOLD.1 (SET-DIFFERENCE (QUOTE (A B C D E F G H)) (QUOTE (B W H X E Y))))
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.1 (SIGNALS-ERROR (SET-DIFFERENCE) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.2 (SIGNALS-ERROR (SET-DIFFERENCE NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.3 (SIGNALS-ERROR (SET-DIFFERENCE NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.4 (SIGNALS-ERROR (SET-DIFFERENCE NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.5 (SIGNALS-ERROR (SET-DIFFERENCE NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.6 (SIGNALS-ERROR (SET-DIFFERENCE NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.7 (SIGNALS-ERROR (SET-DIFFERENCE (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.8 (SIGNALS-ERROR (SET-DIFFERENCE (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.9 (SIGNALS-ERROR (SET-DIFFERENCE (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.10 (SIGNALS-ERROR (SET-DIFFERENCE (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.11 (SIGNALS-ERROR (SET-DIFFERENCE (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.12 (SIGNALS-ERROR (SET-DIFFERENCE (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SET-DIFFERENCE X (QUOTE (A B C))))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST SET-DIFFERENCE.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SET-DIFFERENCE (QUOTE (A B C)) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "nset-difference.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nset-difference.lsp 814DC147>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NSET-DIFFERENCE.1 (NSET-DIFFERENCE NIL NIL) NIL)
;; Loading (DEFTEST NSET-DIFFERENCE.2 (LET ((RESULT (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C)) NIL))) (CHECK-NSET-DIFFERENCE (QUOTE (A B C)) NIL RESULT)) T)
;; Loading (DEFTEST NSET-DIFFERENCE.3 (LET ((RESULT (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E F)) (QUOTE (F B D))))) (CHECK-NSET-DIFFERENCE (QUOTE (A B C D E F)) (QUOTE (F B D)) RESULT)) T)
;; Loading (DEFTEST NSET-DIFFERENCE.4 (SORT (COPY-LIST (NSET-DIFFERENCE-WITH-CHECK (SHUFFLE (QUOTE (1 2 3 4 5 6 7 8))) (QUOTE (10 101 4 74 2 1391 7 17831)))) (FUNCTION <)) (1 3 5 6 8))
;; Loading (DEFTEST NSET-DIFFERENCE.5 (NSET-DIFFERENCE-WITH-CHECK NIL (QUOTE (A B C D E F G H))) NIL)
;; Loading (DEFTEST NSET-DIFFERENCE.6 (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :KEY NIL) (C))
;; Loading (DEFTEST NSET-DIFFERENCE.7 (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQ)) (C))
;; Loading (DEFTEST NSET-DIFFERENCE.8 (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQL)) (C))
;; Loading (DEFTEST NSET-DIFFERENCE.9 (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQUAL)) (C))
;; Loading (DEFTEST NSET-DIFFERENCE.10 (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQ)) (C))
;; Loading (DEFTEST NSET-DIFFERENCE.11 (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQL)) (C))
;; Loading (DEFTEST NSET-DIFFERENCE.12 (NSET-DIFFERENCE-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQUAL)) (C))
;; Loading (DEFTEST NSET-DIFFERENCE.13 (DO-RANDOM-NSET-DIFFERENCES 100 100) NIL)
;; Loading (DEFTEST NSET-DIFFERENCE.14 (NSET-DIFFERENCE-WITH-CHECK (QUOTE ((A . 1) (B . 2) (C . 3))) (QUOTE ((A . 1) (C . 3))) :KEY (QUOTE CAR)) ((B . 2)))
;; Loading (DEFTEST NSET-DIFFERENCE.15 (NSET-DIFFERENCE-WITH-CHECK (QUOTE ((A . 1) (B . 2) (C . 3))) (QUOTE ((A . 1) (C . 3))) :KEY (FUNCTION CAR)) ((B . 2)))
;; Loading (DEFTEST NSET-DIFFERENCE.16 (BLOCK FAIL (SORT (COPY-LIST (NSET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (E F G H)) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (OR (MEMBER X (QUOTE (E F G H))) (MEMBER Y (QUOTE (1 2 3 4)))) (RETURN-FROM FAIL (QUOTE FAIL))) (EQT X Y))))) (FUNCTION <))) (1 2 3 4))
;; Loading (DEFTEST NSET-DIFFERENCE.17 (BLOCK FAIL (SORT (COPY-LIST (NSET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (E F G H)) :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (OR (MEMBER X (QUOTE (E F G H))) (MEMBER Y (QUOTE (1 2 3 4)))) (RETURN-FROM FAIL (QUOTE FAIL))) (EQT X Y))))) (FUNCTION <))) (1 2 3 4))
;; Loading (DEFTEST NSET-DIFFERENCE.18 (BLOCK FAIL (SORT (COPY-LIST (NSET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (E F G H)) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (OR (MEMBER X (QUOTE (E F G H))) (MEMBER Y (QUOTE (1 2 3 4)))) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQT X Y)))))) (FUNCTION <))) (1 2 3 4))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST NSET-DIFFERENCE.19 (BLOCK FAIL (SORT (COPY-LIST (NSET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (E F G H)) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (OR (MEMBER X (QUOTE (E F G H))) (MEMBER Y (QUOTE (1 2 3 4)))) (RETURN-FROM FAIL (QUOTE FAIL))) (NOT (EQT X Y)))))) (FUNCTION <))) (1 2 3 4))
;; Loading (DEFHARMLESS NSET-DIFFERENCE.TEST-AND-TEST-NOT.1 (NSET-DIFFERENCE (LIST 1 2 3 4) (LIST 1 7 3 8) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSET-DIFFERENCE.TEST-AND-TEST-NOT.2 (NSET-DIFFERENCE (LIST 1 2 3 4) (LIST 1 7 3 8) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST NSET-DIFFERENCE.ORDER.1 (LET ((I 0) X Y) (VALUES (NSET-DIFFERENCE (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 2 3 4))) I X Y)) (1) 2 1 2)
;; Loading (DEFTEST NSET-DIFFERENCE.ORDER.2 (LET ((I 0) X Y Z) (VALUES (NSET-DIFFERENCE (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 2 3 4)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION (LAMBDA (X Y) (= X (1- Y)))))) I X Y Z)) (4) 3 1 2 3)
;; Loading (DEFTEST NSET-DIFFERENCE.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (NSET-DIFFERENCE (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 2 3 4)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION (LAMBDA (X Y) (= X (1- Y))))) :KEY (PROGN (SETF W (INCF I)) NIL)) I X Y Z W)) (4) 4 1 2 3 4)
;; Loading (DEFTEST NSET-DIFFERENCE.ALLOW-OTHER-KEYS.1 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :BAD T :ALLOW-OTHER-KEYS T)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST NSET-DIFFERENCE.ALLOW-OTHER-KEYS.2 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :BAD T)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST NSET-DIFFERENCE.ALLOW-OTHER-KEYS.3 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (1- Y)))))) (FUNCTION <)) (4 5))
;; Loading (DEFTEST NSET-DIFFERENCE.ALLOW-OTHER-KEYS.4 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST NSET-DIFFERENCE.ALLOW-OTHER-KEYS.5 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS NIL)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST NSET-DIFFERENCE.ALLOW-OTHER-KEYS.6 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST NSET-DIFFERENCE.ALLOW-OTHER-KEYS.7 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1)) (FUNCTION <)) (1 5))
;; Loading (DEFTEST NSET-DIFFERENCE.KEYWORDS.8 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :TEST (FUNCTION EQL) :TEST (COMPLEMENT (FUNCTION EQL)))) (FUNCTION <)) (1 5))
;; Loading (DEFTEST NSET-DIFFERENCE.KEYWORDS.9 (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :TEST (COMPLEMENT (FUNCTION EQL)) :TEST (FUNCTION EQL))) (FUNCTION <)) NIL)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.1 (SIGNALS-ERROR (NSET-DIFFERENCE) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.2 (SIGNALS-ERROR (NSET-DIFFERENCE NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.3 (SIGNALS-ERROR (NSET-DIFFERENCE NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.4 (SIGNALS-ERROR (NSET-DIFFERENCE NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.5 (SIGNALS-ERROR (NSET-DIFFERENCE NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.6 (SIGNALS-ERROR (NSET-DIFFERENCE NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.7 (SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.8 (SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.9 (SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.10 (SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.11 (SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.12 (SIGNALS-ERROR (NSET-DIFFERENCE (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NSET-DIFFERENCE (LIST (QUOTE A) (QUOTE B)) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST NSET-DIFFERENCE.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NSET-DIFFERENCE X (LIST (QUOTE A) (QUOTE B))))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "set-exclusive-or.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/set-exclusive-or.lsp C0FD3577>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST SET-EXCLUSIVE-OR.1 (SET-EXCLUSIVE-OR NIL NIL) NIL)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.2 (LET ((RESULT (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C)) NIL))) (CHECK-SET-EXCLUSIVE-OR (QUOTE (A B C)) NIL RESULT)) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.3 (LET ((RESULT (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E F)) (QUOTE (F B D))))) (CHECK-SET-EXCLUSIVE-OR (QUOTE (A B C D E F)) (QUOTE (F B D)) RESULT)) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.4 (SORT (COPY-LIST (SET-EXCLUSIVE-OR-WITH-CHECK (SHUFFLE (QUOTE (1 2 3 4 5 6 7 8))) (QUOTE (10 101 4 74 2 1391 7 17831)))) (FUNCTION <)) (1 3 5 6 8 10 74 101 1391 17831))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.5 (CHECK-SET-EXCLUSIVE-OR NIL (QUOTE (A B C D E F G H)) (SET-EXCLUSIVE-OR-WITH-CHECK NIL (QUOTE (A B C D E F G H)))) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.6 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :KEY NIL) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.7 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQ)) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.7-A (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (D A B E)) (QUOTE (A B C D E)) :TEST (FUNCTION EQ)) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.8 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQL)) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.8-A (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (E D B A)) (QUOTE (A B C D E)) :TEST (FUNCTION EQL)) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.8-B (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST-NOT (COMPLEMENT (FUNCTION EQL))) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.9 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQUAL)) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.10 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQ)) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.11 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQL)) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.12 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQUAL)) (C))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.14 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((A . 1) (B . 2) (C . 3012))) (QUOTE ((A . 10) (C . 3))) :KEY (QUOTE CAR)) ((B . 2)))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.15 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((A . XX) (B . 2) (C . 3))) (QUOTE ((A . 1) (C . 3313))) :KEY (FUNCTION CAR)) ((B . 2)))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.16 (SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((A . XX) (B . 2) (C . 3))) (QUOTE ((A . 1) (C . 3313))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQL))) ((B . 2)))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.17 (LET ((LIST1 (QUOTE (A B C D))) (LIST2 (QUOTE (E F G H)))) (BLOCK FAIL (NOTNOT-MV (SET-EXCLUSIVE-OR-WITH-CHECK LIST1 LIST2 :TEST (FUNCTION (LAMBDA (S1 S2) (WHEN (OR (MEMBER S1 LIST2) (MEMBER S2 LIST1)) (RETURN-FROM FAIL (QUOTE FAILED))))))))) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.17-A (LET ((LIST1 (QUOTE (A B C D))) (LIST2 (QUOTE (E F G H)))) (BLOCK FAIL (NOTNOT-MV (SET-EXCLUSIVE-OR-WITH-CHECK LIST1 LIST2 :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (S1 S2) (WHEN (OR (MEMBER S1 LIST2) (MEMBER S2 LIST1)) (RETURN-FROM FAIL (QUOTE FAILED))))))))) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.18 (LET ((LIST1 (QUOTE (A B C D))) (LIST2 (QUOTE (E F G H)))) (BLOCK FAIL (NOTNOT-MV (SET-EXCLUSIVE-OR-WITH-CHECK LIST1 LIST2 :TEST-NOT (FUNCTION (LAMBDA (S1 S2) (WHEN (OR (MEMBER S1 LIST2) (MEMBER S2 LIST1)) (RETURN-FROM FAIL (QUOTE FAILED))) T)))))) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.18-A (LET ((LIST1 (QUOTE (A B C D))) (LIST2 (QUOTE (E F G H)))) (BLOCK FAIL (NOTNOT-MV (SET-EXCLUSIVE-OR-WITH-CHECK LIST1 LIST2 :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (S1 S2) (WHEN (OR (MEMBER S1 LIST2) (MEMBER S2 LIST1)) (RETURN-FROM FAIL (QUOTE FAILED))) T)))))) T)
;; Loading (DEFHARMLESS SET-EXCLUSIVE-OR.TEST-AND-TEST-NOT.1 (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 1 7 3 8) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SET-EXCLUSIVE-OR.TEST-AND-TEST-NOT.2 (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 1 7 3 8) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ORDER.1 (LET ((I 0) X Y) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10))) (FUNCTION <)) I X Y)) (2 4 6 10) 2 1 2)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ORDER.2 (LET ((I 0) X Y Z) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL))) (FUNCTION <)) I X Y Z)) (2 4 6 10) 3 1 2 3)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL)) :KEY (PROGN (SETF W (INCF I)) NIL)) (FUNCTION <)) I X Y Z W)) (2 4 6 10) 4 1 2 3 4)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ORDER.4 (LET ((I 0) X Y Z W) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10)) :KEY (PROGN (SETF Z (INCF I)) NIL) :TEST (PROGN (SETF W (INCF I)) (FUNCTION EQL))) (FUNCTION <)) I X Y Z W)) (2 4 6 10) 4 1 2 3 4)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ORDER.5 (LET ((I 0) X Y Z W) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10)) :KEY (PROGN (SETF Z (INCF I)) NIL) :KEY (PROGN (SETF W (INCF I)) (COMPLEMENT (FUNCTION EQL)))) (FUNCTION <)) I X Y Z W)) (2 4 6 10) 4 1 2 3 4)
;; Loading (DEFTEST SET-EXCLUSIVE.ALLOW-OTHER-KEYS.1 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :BAD T :ALLOW-OTHER-KEYS T) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST SET-EXCLUSIVE.ALLOW-OTHER-KEYS.2 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :BAD T) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST SET-EXCLUSIVE.ALLOW-OTHER-KEYS.3 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (1- Y))))) (FUNCTION <)) (1 6))
;; Loading (DEFTEST SET-EXCLUSIVE.ALLOW-OTHER-KEYS.4 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST SET-EXCLUSIVE.ALLOW-OTHER-KEYS.5 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS NIL) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST SET-EXCLUSIVE.ALLOW-OTHER-KEYS.6 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST SET-EXCLUSIVE.ALLOW-OTHER-KEYS.7 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST SET-EXCLUSIVE.KEYWORDS.8 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :TEST (FUNCTION EQL) :TEST (FUNCTION /=)) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST SET-EXCLUSIVE.KEYWORDS.9 (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :TEST (FUNCTION /=) :TEST (FUNCTION EQL)) (FUNCTION <)) NIL)
;; Loading (DEF-FOLD-TEST SET-EXCLUSIVE-OR.FOLD.1 (SET-EXCLUSIVE-OR (QUOTE (A B C D E F)) (QUOTE (B X E Y Z C))))
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.1 (SIGNALS-ERROR (SET-EXCLUSIVE-OR) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.2 (SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.3 (SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.4 (SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.5 (SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.6 (SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.7 (SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.8 (SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.9 (SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.10 (SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.11 (SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.12 (SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SET-EXCLUSIVE-OR X (QUOTE (A B C))))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST SET-EXCLUSIVE-OR.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SET-EXCLUSIVE-OR (QUOTE (A B C)) X))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST RANDOM-SET-EXCLUSIVE-OR (RANDOM-SET-EXCLUSIVE-OR-TEST 10 100) NIL)
;; Loading (LOAD "nset-exclusive-or.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nset-exclusive-or.lsp C122BC47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.1 (NSET-EXCLUSIVE-OR NIL NIL) NIL)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.2 (LET ((RESULT (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C)) NIL))) (CHECK-SET-EXCLUSIVE-OR (QUOTE (A B C)) NIL RESULT)) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.3 (LET ((RESULT (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E F)) (QUOTE (F B D))))) (CHECK-SET-EXCLUSIVE-OR (QUOTE (A B C D E F)) (QUOTE (F B D)) RESULT)) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.4 (SORT (COPY-LIST (NSET-EXCLUSIVE-OR-WITH-CHECK (SHUFFLE (QUOTE (1 2 3 4 5 6 7 8))) (QUOTE (10 101 4 74 2 1391 7 17831)))) (FUNCTION <)) (1 3 5 6 8 10 74 101 1391 17831))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.5 (CHECK-SET-EXCLUSIVE-OR NIL (QUOTE (A B C D E F G H)) (NSET-EXCLUSIVE-OR-WITH-CHECK NIL (QUOTE (A B C D E F G H)))) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.6 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :KEY NIL) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.7 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQ)) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.7-A (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (D A B E)) (QUOTE (A B C D E)) :TEST (FUNCTION EQ)) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.8 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQL)) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.8-A (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (E D B A)) (QUOTE (A B C D E)) :TEST (FUNCTION EQL)) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.8-B (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST-NOT (COMPLEMENT (FUNCTION EQL))) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.9 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (FUNCTION EQUAL)) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.10 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQ)) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.11 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQL)) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.12 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (A B C D E)) (QUOTE (D A B E)) :TEST (QUOTE EQUAL)) (C))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.14 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((A . 1) (B . 2) (C . 3012))) (QUOTE ((A . 10) (C . 3))) :KEY (QUOTE CAR)) ((B . 2)))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.15 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((A . XX) (B . 2) (C . 3))) (QUOTE ((A . 1) (C . 3313))) :KEY (FUNCTION CAR)) ((B . 2)))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.16 (NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((A . XX) (B . 2) (C . 3))) (QUOTE ((A . 1) (C . 3313))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQL))) ((B . 2)))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.17 (LET ((LIST1 (QUOTE (A B C D))) (LIST2 (QUOTE (E F G H)))) (BLOCK FAIL (NOTNOT-MV (NSET-EXCLUSIVE-OR-WITH-CHECK LIST1 LIST2 :TEST (FUNCTION (LAMBDA (S1 S2) (WHEN (OR (MEMBER S1 LIST2) (MEMBER S2 LIST1)) (RETURN-FROM FAIL (QUOTE FAILED))))))))) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.17-A (LET ((LIST1 (QUOTE (A B C D))) (LIST2 (QUOTE (E F G H)))) (BLOCK FAIL (NOTNOT-MV (NSET-EXCLUSIVE-OR-WITH-CHECK LIST1 LIST2 :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (S1 S2) (WHEN (OR (MEMBER S1 LIST2) (MEMBER S2 LIST1)) (RETURN-FROM FAIL (QUOTE FAILED))))))))) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.18 (LET ((LIST1 (QUOTE (A B C D))) (LIST2 (QUOTE (E F G H)))) (BLOCK FAIL (NOTNOT-MV (NSET-EXCLUSIVE-OR-WITH-CHECK LIST1 LIST2 :TEST-NOT (FUNCTION (LAMBDA (S1 S2) (WHEN (OR (MEMBER S1 LIST2) (MEMBER S2 LIST1)) (RETURN-FROM FAIL (QUOTE FAILED))) T)))))) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.18-A (LET ((LIST1 (QUOTE (A B C D))) (LIST2 (QUOTE (E F G H)))) (BLOCK FAIL (NOTNOT-MV (NSET-EXCLUSIVE-OR-WITH-CHECK LIST1 LIST2 :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (S1 S2) (WHEN (OR (MEMBER S1 LIST2) (MEMBER S2 LIST1)) (RETURN-FROM FAIL (QUOTE FAILED))) T)))))) T)
;; Loading (DEFHARMLESS NSET-EXCLUSIVE-OR.TEST-AND-TEST-NOT.1 (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 1 7 3 8) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSET-EXCLUSIVE-OR.TEST-AND-TEST-NOT.2 (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 1 7 3 8) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ORDER.1 (LET ((I 0) X Y) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10))) (FUNCTION <)) I X Y)) (2 4 6 10) 2 1 2)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ORDER.2 (LET ((I 0) X Y Z) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL))) (FUNCTION <)) I X Y Z)) (2 4 6 10) 3 1 2 3)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10)) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL)) :KEY (PROGN (SETF W (INCF I)) NIL)) (FUNCTION <)) I X Y Z W)) (2 4 6 10) 4 1 2 3 4)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ORDER.4 (LET ((I 0) X Y Z W) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10)) :KEY (PROGN (SETF Z (INCF I)) NIL) :TEST (PROGN (SETF W (INCF I)) (FUNCTION EQL))) (FUNCTION <)) I X Y Z W)) (2 4 6 10) 4 1 2 3 4)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ORDER.5 (LET ((I 0) X Y Z W) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF X (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF Y (INCF I)) (LIST 1 3 6 10)) :KEY (PROGN (SETF Z (INCF I)) NIL) :KEY (PROGN (SETF W (INCF I)) (COMPLEMENT (FUNCTION EQL)))) (FUNCTION <)) I X Y Z W)) (2 4 6 10) 4 1 2 3 4)
;; Loading (DEFTEST NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.1 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :BAD T :ALLOW-OTHER-KEYS T) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.2 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :BAD T) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.3 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :BAD T :TEST (FUNCTION (LAMBDA (X Y) (= X (1- Y))))) (FUNCTION <)) (1 6))
;; Loading (DEFTEST NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.4 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.5 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS NIL) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.6 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.7 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST NSET-EXCLUSIVE.KEYWORDS.8 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :TEST (FUNCTION EQL) :TEST (FUNCTION /=)) (FUNCTION <)) (1 2 5 6))
;; Loading (DEFTEST NSET-EXCLUSIVE.KEYWORDS.9 (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :TEST (FUNCTION /=) :TEST (FUNCTION EQL)) (FUNCTION <)) NIL)
;; Loading (DEFTEST RANDOM-NSET-EXCLUSIVE-OR (RANDOM-SET-EXCLUSIVE-OR-TEST 10 1000 (QUOTE NSET-EXCLUSIVE-OR)) NIL)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.1 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.2 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.3 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.4 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.5 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.6 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.7 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.8 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.9 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.10 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.11 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.12 (SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NSET-EXCLUSIVE-OR X (LIST (QUOTE A) (QUOTE B))))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST NSET-EXCLUSIVE-OR.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NSET-EXCLUSIVE-OR (LIST (QUOTE A) (QUOTE B)) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "subsetp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subsetp.lsp C1480E87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFVAR CONS-TEST-24-VAR (QUOTE (78 "z" (8 9))))
;; Loading (DEFTEST SUBSETP.1 (SUBSETP-WITH-CHECK (COPY-TREE (QUOTE (78))) CONS-TEST-24-VAR) T)
;; Loading (DEFTEST SUBSETP.2 (SUBSETP-WITH-CHECK (COPY-TREE (QUOTE ((8 9)))) CONS-TEST-24-VAR) NIL)
;; Loading (DEFTEST SUBSETP.3 (SUBSETP-WITH-CHECK (COPY-TREE (QUOTE ((8 9)))) CONS-TEST-24-VAR :TEST (QUOTE EQUAL)) T)
;; Loading (DEFTEST SUBSETP.4 (SUBSETP-WITH-CHECK (LIST 78 (COPY-SEQ "Z")) CONS-TEST-24-VAR :TEST (FUNCTION EQUALP)) T)
;; Loading (DEFTEST SUBSETP.5 (SUBSETP-WITH-CHECK (LIST 1) (LIST 0 2 3 4) :KEY (FUNCTION (LAMBDA (I) (FLOOR (/ I 2))))) T)
;; Loading (DEFTEST SUBSETP.6 (SUBSETP-WITH-CHECK (LIST 1 6) (LIST 0 2 3 4) :KEY (FUNCTION (LAMBDA (I) (FLOOR (/ I 2))))) NIL)
;; Loading (DEFTEST SUBSETP.7 (SUBSETP-WITH-CHECK (LIST (QUOTE (A . 10)) (QUOTE (B . 20)) (QUOTE (C . 30))) (LIST (QUOTE (Z . C)) (QUOTE (A . Y)) (QUOTE (B . 100)) (QUOTE (E . F)) (QUOTE (C . FOO))) :KEY (FUNCTION CAR)) T)
;; Loading (DEFTEST SUBSETP.8 (SUBSETP-WITH-CHECK (COPY-TREE (QUOTE ((A . 10) (B . 20) (C . 30)))) (COPY-TREE (QUOTE ((Z . C) (A . Y) (B . 100) (E . F) (C . FOO)))) :KEY (QUOTE CAR)) T)
;; Loading (DEFTEST SUBSETP.9 (SUBSETP-WITH-CHECK (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (COPY-TREE (LIST (QUOTE (Z . C)) (QUOTE (A . Y)) (QUOTE (B . 100)) (QUOTE (E . F)) (QUOTE (C . FOO)))) :TEST (FUNCTION (LAMBDA (E1 E2) (EQT E1 (CAR E2))))) T)
;; Loading (DEFTEST SUBSETP.10 (SUBSETP-WITH-CHECK (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (COPY-TREE (LIST (QUOTE (Z . C)) (QUOTE (A . Y)) (QUOTE (B . 100)) (QUOTE (E . F)) (QUOTE (C . FOO)))) :TEST (FUNCTION (LAMBDA (E1 E2) (EQT E1 (CAR E2)))) :KEY NIL) T)
;; Loading (DEFTEST SUBSETP.11 (SUBSETP-WITH-CHECK (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (COPY-TREE (LIST (QUOTE (Z . C)) (QUOTE (A . Y)) (QUOTE (B . 100)) (QUOTE (E . F)) (QUOTE (C . FOO)))) :TEST-NOT (FUNCTION (LAMBDA (E1 E2) (NOT (EQT E1 (CAR E2)))))) T)
;; Loading (DEFTEST SUBSETP.12 (BLOCK FAIL (SUBSETP-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) T)))) T)
;; Loading (DEFTEST SUBSETP.13 (BLOCK FAIL (SUBSETP-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) T)))) T)
;; Loading (DEFTEST SUBSETP.14 (BLOCK FAIL (SUBSETP-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) NIL)))) T)
;; Loading (DEFTEST SUBSETP.15 (BLOCK FAIL (SUBSETP-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (X Y) (WHEN (< Y X) (RETURN-FROM FAIL (QUOTE FAIL))) NIL)))) T)
;; Loading (DEFHARMLESS SUBSETP.TEST-AND-TEST-NOT.1 (SUBSETP (QUOTE (A B C)) (QUOTE (A G C E B)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBSETP.TEST-AND-TEST-NOT.3 (SUBSETP (QUOTE (A B C)) (QUOTE (A G C E B)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST SUBSETP.ORDER.1 (LET ((I 0) X Y) (VALUES (NOTNOT (SUBSETP (PROGN (SETF X (INCF I)) (QUOTE (A B C))) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D))))) I X Y)) T 2 1 2)
;; Loading (DEFTEST SUBSETP.ORDER.2 (LET ((I 0) X Y Z W) (VALUES (NOTNOT (SUBSETP (PROGN (SETF X (INCF I)) (QUOTE (A B C))) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D))) :TEST (PROGN (SETF Z (INCF I)) (FUNCTION EQL)) :KEY (PROGN (SETF W (INCF I)) NIL))) I X Y Z W)) T 4 1 2 3 4)
;; Loading (DEFTEST SUBSETP.ORDER.3 (LET ((I 0) X Y Z W) (VALUES (NOTNOT (SUBSETP (PROGN (SETF X (INCF I)) (QUOTE (A B C))) (PROGN (SETF Y (INCF I)) (QUOTE (A B C D))) :KEY (PROGN (SETF Z (INCF I)) NIL) :TEST (PROGN (SETF W (INCF I)) (FUNCTION EQL)))) I X Y Z W)) T 4 1 2 3 4)
;; Loading (DEFTEST SUBSETP.ALLOW-OTHER-KEYS.1 (NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS 67)) T)
;; Loading (DEFTEST SUBSETP.ALLOW-OTHER-KEYS.2 (NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :ALLOW-OTHER-KEYS (FUNCTION CONS) :BAD T)) T)
;; Loading (DEFTEST SUBSETP.ALLOW-OTHER-KEYS.3 (NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4)) :ALLOW-OTHER-KEYS (MAKE-HASH-TABLE) :BAD T :TEST (FUNCTION (LAMBDA (X Y) (= (1+ X) Y))))) NIL)
;; Loading (DEFTEST SUBSETP.ALLOW-OTHER-KEYS.4 (NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :ALLOW-OTHER-KEYS T)) T)
;; Loading (DEFTEST SUBSETP.ALLOW-OTHER-KEYS.5 (NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :ALLOW-OTHER-KEYS NIL)) T)
;; Loading (DEFTEST SUBSETP.ALLOW-OTHER-KEYS.6 (NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :ALLOW-OTHER-KEYS T :BAD1 T :ALLOW-OTHER-KEYS NIL :BAD2 T)) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SUBSETP.KEYWORDS.7 (NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4)) :TEST (FUNCTION (LAMBDA (X Y) (= (1+ X) Y))) :TEST (FUNCTION EQL))) NIL)
;; Loading (DEFTEST SUBSETP.KEYWORDS.8 (NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4 10)) (QUOTE (0 1 2 3 4)) :KEY NIL :KEY (FUNCTION (LAMBDA (X) (MOD X 2))))) NIL)
;; Loading (DEFTEST SUBSETP.ERROR.1 (SIGNALS-ERROR (SUBSETP) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.2 (SIGNALS-ERROR (SUBSETP NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.3 (SIGNALS-ERROR (SUBSETP NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.4 (SIGNALS-ERROR (SUBSETP NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.5 (SIGNALS-ERROR (SUBSETP NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.6 (SIGNALS-ERROR (SUBSETP NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.7 (SIGNALS-ERROR (SUBSETP (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.8 (SIGNALS-ERROR (SUBSETP (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.9 (SIGNALS-ERROR (SUBSETP (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.10 (SIGNALS-ERROR (SUBSETP (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.11 (SIGNALS-ERROR (SUBSETP (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.12 (SIGNALS-ERROR (SUBSETP (LIST* 1 2 3) (LIST 1 2 3 4 5 6)) TYPE-ERROR) T)
;; Loading (DEFTEST SUBSETP.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SUBSETP X (QUOTE (A B))))) (FUNCTION LISTP)) NIL)
;; Loading (DEFTEST SUBSETP.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SUBSETP (QUOTE (A B)) X))) (FUNCTION LISTP)) NIL)
;; Loading (LOAD "cons-test-01.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cons-test-01.lsp 80F4E487>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST SUBTYPEP-NULL-LIST (SUBTYPEP* (QUOTE NULL) (QUOTE LIST)) T T)
;; Loading (DEFTEST SUBTYPEP-CONS-LIST (SUBTYPEP* (QUOTE CONS) (QUOTE LIST)) T T)
;; Loading (DEFTEST SUBTYPEP-NULL-CONS (SUBTYPEP* (QUOTE NULL) (QUOTE CONS)) NIL T)
;; Loading (DEFTEST SUBTYPEP-CONS-NULL (SUBTYPEP* (QUOTE CONS) (QUOTE NULL)) NIL T)
;; Loading (DEFTEST SUBTYPEP-NULL-ATOM (SUBTYPEP* (QUOTE NULL) (QUOTE ATOM)) T T)
;; Loading (DEFTEST SUBTYPEP-CONS-ATOM (SUBTYPEP* (QUOTE CONS) (QUOTE ATOM)) NIL T)
;; Loading (DEFTEST SUBTYPEP-ATOM-CONS (SUBTYPEP* (QUOTE ATOM) (QUOTE CONS)) NIL T)
;; Loading (DEFTEST SUBTYPEP-ATOM-LIST (SUBTYPEP* (QUOTE ATOM) (QUOTE LIST)) NIL T)
;; Loading (DEFTEST SUBTYPEP-LIST-ATOM (SUBTYPEP* (QUOTE LIST) (QUOTE ATOM)) NIL T)
;; Loading (DEFTEST NULL-NULL-UNIVERSE (CHECK-TYPE-PREDICATE (QUOTE NULL) (QUOTE NULL)) NIL)
;; Loading (DEFVAR *CONS-FNS* (LIST (QUOTE CONS) (QUOTE CONSP) (QUOTE ATOM) (QUOTE RPLACA) (QUOTE RPLACD) (QUOTE CAR) (QUOTE CDR) (QUOTE CAAR) (QUOTE CADR) (QUOTE CDAR) (QUOTE CDDR) (QUOTE CAAAR) (QUOTE CAADR) (QUOTE CADAR) (QUOTE CADDR) (QUOTE CDAAR) (QUOTE CDADR) (QUOTE CDDAR) (QUOTE CDDDR) (QUOTE CAAAAR) (QUOTE CAAADR) (QUOTE CAADAR) (QUOTE CAADDR) (QUOTE CADAAR) (QUOTE CADADR) (QUOTE CADDAR) (QUOTE CADDDR) (QUOTE CDAAAR) (QUOTE CDAADR) (QUOTE CDADAR) (QUOTE CDADDR) (QUOTE CDDAAR) (QUOTE CDDADR) (QUOTE CDDDAR) (QUOTE CDDDDR) (QUOTE COPY-TREE) (QUOTE SUBLIS) (QUOTE NSUBLIS) (QUOTE SUBST) (QUOTE SUBST-IF) (QUOTE SUBST-IF-NOT) (QUOTE NSUBST) (QUOTE NSUBST-IF) (QUOTE NSUBST-IF-NOT) (QUOTE TREE-EQUAL) (QUOTE COPY-LIST) (QUOTE LIST) (QUOTE LIST*) (QUOTE LIST-LENGTH) (QUOTE LISTP) (QUOTE MAKE-LIST) (QUOTE FIRST) (QUOTE SECOND) (QUOTE THIRD) (QUOTE FOURTH) (QUOTE FIFTH) (QUOTE SIXTH) (QUOTE SEVENTH) (QUOTE EIGHTH) (QUOTE NINTH) (QUOTE TENTH) (QUOTE NTH) (QUOTE ENDP) (QUOTE NULL) (QUOTE NCONC) (QUOTE APPEND) (QUOTE REVAPPEND) (QUOTE NRECONC) (QUOTE BUTLAST) (QUOTE NBUTLAST) (QUOTE LAST) (QUOTE LDIFF) (QUOTE TAILP) (QUOTE NTHCDR) (QUOTE REST) (QUOTE MEMBER) (QUOTE MEMBER-IF) (QUOTE MEMBER-IF-NOT) (QUOTE MAPC) (QUOTE MAPCAR) (QUOTE MAPCAN) (QUOTE MAPL) (QUOTE MAPLIST) (QUOTE MAPCON) (QUOTE ACONS) (QUOTE ASSOC) (QUOTE ASSOC-IF) (QUOTE ASSOC-IF-NOT) (QUOTE COPY-ALIST) (QUOTE PAIRLIS) (QUOTE RASSOC) (QUOTE RASSOC-IF) (QUOTE RASSOC-IF-NOT) (QUOTE GET-PROPERTIES) (QUOTE GETF) (QUOTE INTERSECTION) (QUOTE NINTERSECTION) (QUOTE ADJOIN) (QUOTE SET-DIFFERENCE) (QUOTE NSET-DIFFERENCE) (QUOTE SET-EXCLUSIVE-OR) (QUOTE NSET-EXCLUSIVE-OR) (QUOTE SUBSETP) (QUOTE UNION) (QUOTE NUNION)))
;; Loading (DEFTEST FUNCTION-BOUND-CONS-FNS (LOOP FOR X IN *CONS-FNS* COUNT (WHEN (OR (NOT (FBOUNDP X)) (NOT (FUNCTIONP (SYMBOL-FUNCTION X)))) (FORMAT T "~%~S not bound to a function" X) T)) 0)
;; Loading (DEFTEST MACRO-BOUND-CONS-MACROS (NOTNOT-MV (EVERY (FUNCTION MACRO-FUNCTION) (LIST (QUOTE PUSH) (QUOTE POP) (QUOTE PUSHNEW) (QUOTE REMF)))) T)
;; Loading (DEFTEST NO-CONS-FNS-ARE-MACROS (SOME (FUNCTION MACRO-FUNCTION) *CONS-FNS*) NIL)
;; Loading (LOAD "cons-test-03.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cons-test-03.lsp 810170F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFTEST TYPEP-NIL-LIST (NOTNOT-MV (TYPEP NIL (QUOTE LIST))) T)
;; Loading (DEFTEST TYPEP-SYMBOL-LIST (TYPEP (QUOTE A) (QUOTE LIST)) NIL)
;; Loading (DEFTEST TYPEP-SINGLETON-LIST-LIST (NOTNOT-MV (TYPEP (QUOTE (A)) (QUOTE LIST))) T)
;; Loading (DEFTEST TYPEP-CIRCULAR-LIST-LIST (LET ((X (CONS NIL NIL))) (SETF (CDR X) X) (NOTNOT-MV (TYPEP X (QUOTE LIST)))) T)
;; Loading (DEFTEST TYPEP-LONGER-LIST-LIST (NOTNOT-MV (TYPEP (QUOTE (A B C D E F G H)) (QUOTE LIST))) T)
;; Loading (LOAD "cons-test-05.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cons-test-05.lsp 81063A07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "cons-aux.lsp")
;; Loading (DEFPARAMETER *CONS-ACCESSORS* (QUOTE (FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH CAR CDR CAAR CADR CDAR CDDR CAAAR CAADR CADAR CADDR CDAAR CDADR CDDAR CDDDR CAAAAR CAAADR CAADAR CAADDR CADAAR CADADR CADDAR CADDDR CDAAAR CDAADR CDADAR CDADDR CDDAAR CDDADR CDDDAR CDDDDR)))
;; Loading (DEFTEST FIRST-ETC-1 (LET ((X (LOOP FOR I FROM 1 TO 20 COLLECT I))) (LIST (FIRST X) (SECOND X) (THIRD X) (FOURTH X) (FIFTH X) (SIXTH X) (SEVENTH X) (EIGHTH X) (NINTH X) (TENTH X))) (1 2 3 4 5 6 7 8 9 10))
;; Loading (DEFTEST FIRST-ETC-2 (LET ((X (MAKE-LIST 15 :INITIAL-ELEMENT (QUOTE A)))) (AND (EQL (SETF (FIRST X) 1) 1) (EQL (SETF (SECOND X) 2) 2) (EQL (SETF (THIRD X) 3) 3) (EQL (SETF (FOURTH X) 4) 4) (EQL (SETF (FIFTH X) 5) 5) (EQL (SETF (SIXTH X) 6) 6) (EQL (SETF (SEVENTH X) 7) 7) (EQL (SETF (EIGHTH X) 8) 8) (EQL (SETF (NINTH X) 9) 9) (EQL (SETF (TENTH X) 10) 10) X)) (1 2 3 4 5 6 7 8 9 10 A A A A A))
;; Loading (DEFTEST REST-SET-1 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQT (SETF (REST X) (QUOTE D)) (QUOTE D)) X)) (A . D))
;; Loading (LOOP FOR FN IN (QUOTE (CAR CDR CAAR CADR CDAR CDDR CAAAR CAADR CADAR CADDR CDAAR CDADR CDDAR CDDDR CAAAAR CAAADR CAADAR CAADDR CADAAR CADADR CADDAR CADDDR CDAAAR CDAADR CDADAR CDADDR CDDAAR CDDADR CDDDAR CDDDDR)) DO (LET ((LEVEL (- (LENGTH (SYMBOL-NAME FN)) 2))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (INTERN (CONCATENATE (QUOTE STRING) (SYMBOL-NAME FN) "-SET") :CL-TEST)) (LET ((X (CREATE-C*R-TEST (SYSTEM.INTERNALS::BQ-COMMA LEVEL))) (Y (LIST (CREATE-C*R-TEST (SYSTEM.INTERNALS::BQ-COMMA LEVEL)))) (I 0)) (AND (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) (PROGN (INCF I) X)) (QUOTE A)) (EQLT ((SYSTEM.INTERNALS::BQ-COMMA FN) X) (QUOTE A)) (EQLT I 1) (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) X) (QUOTE NONE)) (EQUALT X (CREATE-C*R-TEST (SYSTEM.INTERNALS::BQ-COMMA LEVEL))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) (PROGN (INCF I) (CAR Y))) (QUOTE A)) (EQLT ((SYSTEM.INTERNALS::BQ-COMMA FN) (CAR Y)) (QUOTE A)) (EQLT I 2) (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) (CAR Y)) (QUOTE NONE)) (NULL (CDR Y)) (EQUALT (CAR Y) (CREATE-C*R-TEST (SYSTEM.INTERNALS::BQ-COMMA LEVEL))))) T)))))
;; Loading (LOOP FOR (FN LEN) IN (QUOTE ((FIRST 1) (SECOND 2) (THIRD 3) (FOURTH 4) (FIFTH 5) (SIXTH 6) (SEVENTH 7) (EIGHTH 8) (NINTH 9) (TENTH 10))) DO (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (INTERN (CONCATENATE (QUOTE STRING) (SYMBOL-NAME FN) "-SET") :CL-TEST)) (LET* ((X (MAKE-LIST 20 :INITIAL-ELEMENT NIL)) (Y (LIST (COPY-LIST X))) (CNT 0)) (AND (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) (PROGN (INCF CNT) X)) (QUOTE A)) (EQLT CNT 1) (LOOP FOR I FROM 1 TO 20 DO (WHEN (AND (NOT (EQL I (SYSTEM.INTERNALS::BQ-COMMA LEN))) (NTH (1- I) X)) (RETURN NIL)) FINALLY (RETURN T)) (SETF ((SYSTEM.INTERNALS::BQ-COMMA FN) (CAR Y)) (QUOTE A)) (LOOP FOR I FROM 1 TO 20 DO (WHEN (AND (NOT (EQL I (SYSTEM.INTERNALS::BQ-COMMA LEN))) (NTH (1- I) (CAR Y))) (RETURN NIL)) FINALLY (RETURN T)) (EQLT ((SYSTEM.INTERNALS::BQ-COMMA FN) X) (QUOTE A)) (EQLT (NTH (SYSTEM.INTERNALS::BQ-COMMA (1- LEN)) X) (QUOTE A)) (EQLT ((SYSTEM.INTERNALS::BQ-COMMA FN) (CAR Y)) (QUOTE A)) (NTH (SYSTEM.INTERNALS::BQ-COMMA (1- LEN)) (CAR Y)))) A))))
;; Loading (LOOP FOR NAME IN *CONS-ACCESSORS* DO (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (INTERN (CONCATENATE (QUOTE STRING) (SYMBOL-NAME NAME) ".ERROR.NO-ARGS") :CL-TEST)) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA NAME)) PROGRAM-ERROR) T))) DO (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (INTERN (CONCATENATE (QUOTE STRING) (SYMBOL-NAME NAME) ".ERROR.EXCESS-ARGS") :CL-TEST)) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA NAME) NIL NIL) PROGRAM-ERROR) T))))
;; Loading (LOAD "load-arrays.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-arrays.lsp 81508DD7>
;; Loading (COMPILE-AND-LOAD "array-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/array-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN MAKE-ARRAY-CHECK-UPGRADING (TYPE) (SUBTYPEP* TYPE (ARRAY-ELEMENT-TYPE (MAKE-ARRAY 0 :ELEMENT-TYPE TYPE)))).
;; Compiling form (DEFUN SUBTYPEP-OR-UNKNOWN (SUBTYPE SUPERTYPE) (MULTIPLE-VALUE-BIND* (IS-SUBTYPE IS-KNOWN) (SUBTYPEP SUBTYPE SUPERTYPE) (OR (NOT IS-KNOWN) (NOTNOT IS-SUBTYPE)))).
;; Compiling form (DEFUN MAKE-ARRAY-WITH-CHECKS (DIMENSIONS &REST OPTIONS &KEY (ELEMENT-TYPE T ELEMENT-TYPE-P) (INITIAL-CONTENTS NIL INITIAL-CONTENTS-P) (INITIAL-ELEMENT NIL INITIAL-ELEMENT-P) (ADJUSTABLE NIL) (FILL-POINTER NIL) (DISPLACED-TO NIL) (DISPLACED-INDEX-OFFSET 0 DIO-P) &AUX (DIMENSIONS-LIST (IF (LISTP DIMENSIONS) DIMENSIONS (LIST DIMENSIONS)))) "Call MAKE-ARRAY and do sanity tests on the output." (DECLARE (IGNORE ELEMENT-TYPE-P INITIAL-CONTENTS INITIAL-CONTENTS-P INITIAL-ELEMENT INITIAL-ELEMENT-P DIO-P)) (LET ((A (CHECK-VALUES (APPLY (FUNCTION MAKE-ARRAY) DIMENSIONS OPTIONS))) (RANK (LENGTH DIMENSIONS-LIST))) (COND ((NOT (TYPEP A (QUOTE ARRAY))) :FAIL-NOT-ARRAY) ((NOT (TYPEP A (FIND-CLASS (QUOTE ARRAY)))) :FAIL-NOT-ARRAY-CLASS) ((NOT (TYPEP A (QUOTE (ARRAY *)))) :FAIL-NOT-ARRAY2) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY * (SYSTEM.INTERNALS::BQ-COMMA DIMENSIONS-LIST))))) :FAIL-NOT-ARRAY3) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY * *)))) :FAIL-NOT-ARRAY4) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE))))) :FAIL-NOT-ARRAY5) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) *)))) :FAIL-NOT-ARRAY6) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA RANK))))) :FAIL-NOT-ARRAY7) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA DIMENSIONS-LIST))))) :FAIL-NOT-ARRAY8) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA (MAPCAR (CONSTANTLY (QUOTE *)) DIMENSIONS-LIST)))))) :FAIL-NOT-ARRAY9) ((LOOP FOR I FROM 0 BELOW (MIN 10 RANK) THEREIS (LET ((X (APPEND (SUBSEQ DIMENSIONS-LIST 0 I) (LIST (QUOTE *)) (SUBSEQ DIMENSIONS-LIST (1+ I))))) (OR (NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY * (SYSTEM.INTERNALS::BQ-COMMA X))))) (NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA X)))))))) :FAIL-NOT-ARRAY10) ((NOT (CHECK-VALUES (ARRAYP A))) :FAIL-NOT-ARRAYP) ((AND (NOT ADJUSTABLE) (NOT FILL-POINTER) (NOT DISPLACED-TO) (COND ((NOT (TYPEP A (QUOTE SIMPLE-ARRAY))) :FAIL-NOT-SIMPLE-ARRAY) ((NOT (TYPEP A (QUOTE (SIMPLE-ARRAY *)))) :FAIL-NOT-SIMPLE-ARRAY2) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (SIMPLE-ARRAY * (SYSTEM.INTERNALS::BQ-COMMA DIMENSIONS-LIST))))) :FAIL-NOT-SIMPLE-ARRAY3) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (SIMPLE-ARRAY * *)))) :FAIL-NOT-SIMPLE-ARRAY4) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE))))) :FAIL-NOT-SIMPLE-ARRAY5) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) *)))) :FAIL-NOT-SIMPLE-ARRAY6) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA RANK))))) :FAIL-NOT-ARRAY7) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA DIMENSIONS-LIST))))) :FAIL-NOT-SIMPLE-ARRAY8) ((NOT (TYPEP A (SYSTEM.INTERNALS::BACKQUOTE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA (MAPCAR (CONSTANTLY (QUOTE *)) DIMENSIONS-LIST)))))) :FAIL-NOT-SIMPLE-ARRAY9)))) ((AND (EQL RANK 1) (COND ((NOT (TYPEP A (QUOTE VECTOR))) :FAIL-NOT-VECTOR) ((AND (SUBTYPEP (QUOTE BIT) ELEMENT-TYPE) (SUBTYPEP ELEMENT-TYPE (QUOTE BIT)) (OR (NOT (BIT-VECTOR-P A)) (NOT (TYPEP A (QUOTE BIT-VECTOR))))) :FAIL-NOT-BIT-VECTOR) ((AND (NOT ADJUSTABLE) (NOT FILL-POINTER) (NOT DISPLACED-TO) (COND ((AND (EQ T ELEMENT-TYPE) (OR (NOT (SIMPLE-VECTOR-P A)) (NOT (TYPEP A (QUOTE SIMPLE-VECTOR))))) :FAIL-NOT-SIMPLE-VECTOR) ((AND (SUBTYPEP (QUOTE BIT) ELEMENT-TYPE) (SUBTYPEP ELEMENT-TYPE (QUOTE BIT)) (OR (NOT (SIMPLE-BIT-VECTOR-P A)) (NOT (TYPEP A (QUOTE SIMPLE-BIT-VECTOR))))) :FAIL-NOT-SIMPLE-BIT-VECTOR))))))) ((NOT (EQUAL (ARRAY-DIMENSIONS A) DIMENSIONS-LIST)) :FAIL-ARRAY-DIMENSIONS) ((NOT (EQUAL (ARRAY-RANK A) RANK)) :FAIL-ARRAY-RANK) ((AND (NOT (EQUAL (ARRAY-RANK A) 1)) (ARRAY-HAS-FILL-POINTER-P A)) :FAIL-NON-VECTOR-FILL-POINTER) ((NOT (SUBTYPEP-OR-UNKNOWN ELEMENT-TYPE (ARRAY-ELEMENT-TYPE A))) :FAILED-ARRAY-ELEMENT-TYPE) ((AND ADJUSTABLE (NOT (CHECK-VALUES (ADJUSTABLE-ARRAY-P A))) :FAIL-ADJUSTABLE)) ((AND FILL-POINTER (NOT (CHECK-VALUES (ARRAY-HAS-FILL-POINTER-P A))) :FAIL-HAS-FILL-POINTER)) ((AND (CHECK-VALUES (INTEGERP FILL-POINTER)) (NOT (EQL FILL-POINTER (CHECK-VALUES (FILL-POINTER A)))) :FAIL-FILL-POINTER-1)) ((AND (EQ FILL-POINTER T) (NOT (EQL (FIRST DIMENSIONS-LIST) (FILL-POINTER A))) :FAIL-FILL-POINTER-2)) ((AND DISPLACED-TO (MULTIPLE-VALUE-BIND* (ACTUAL-DT ACTUAL-DIO) (ARRAY-DISPLACEMENT A) (COND ((NOT (EQ ACTUAL-DT DISPLACED-TO)) :FAIL-DISPLACEMENT-1) ((NOT (EQL ACTUAL-DIO DISPLACED-INDEX-OFFSET)) :FAIL-DISPLACED-INDEX-OFFSET))))) ((NOT (EQL (CHECK-VALUES (ARRAY-TOTAL-SIZE A)) (REDUCE (FUNCTION *) DIMENSIONS-LIST :INITIAL-VALUE 1))) :FAIL-ARRAY-TOTAL-SIZE) ((AND (> (ARRAY-TOTAL-SIZE A) 0) (NOT (EQL (CHECK-VALUES (APPLY (FUNCTION ARRAY-ROW-MAJOR-INDEX) A (MAKE-LIST (ARRAY-RANK A) :INITIAL-ELEMENT 0))) 0))) :FAIL-ARRAY-ROW-MAJOR-INDEX-0) ((AND (> (ARRAY-TOTAL-SIZE A) 0) (NOT (EQL (APPLY (FUNCTION ARRAY-ROW-MAJOR-INDEX) A (MAPCAR (FUNCTION 1-) DIMENSIONS-LIST)) (1- (REDUCE (FUNCTION *) DIMENSIONS-LIST :INITIAL-VALUE 1))))) :FAIL-ARRAY-ROW-MAJOR-INDEX-LAST) (T A)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-aux.llf C125EA27>
;; Loading (LOAD "aref.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/aref.lsp C139B1D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST AREF.1 (AREF #<(Array T Nil) C13AE8B3>) T)
;; Loading (DEFTEST AREF.2 (AREF #(1 2 3 4) 2) 3)
;; Loading (DEFTEST AREF.3 (AREF #<(Array T (2 4)) C1418BE3> 1 2) G)
;; Loading (DEFTEST AREF.4 (LOOP FOR I FROM 0 BELOW 6 COLLECT (AREF "abcdef" I)) (#\a #\b #\c #\d #\e #\f))
;; Loading (DEFTEST AREF.5 (LET ((A (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS (QUOTE ("abc" "def"))))) (LOOP FOR I BELOW 2 COLLECT (LOOP FOR J BELOW 3 COLLECT (AREF A I J)))) ((#\a #\b #\c) (#\d #\e #\f)))
;; Loading (DEFTEST AREF.6 (LOOP FOR I BELOW 10 COLLECT (AREF #*1101100010 I)) (1 1 0 1 1 0 0 0 1 0))
;; Loading (DEFTEST AREF.7 (LET ((A (MAKE-ARRAY (QUOTE (2 5)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((1 1 0 0 1) (0 1 0 1 0)))))) (LOOP FOR I BELOW 2 COLLECT (LOOP FOR J BELOW 5 COLLECT (AREF A I J)))) ((1 1 0 0 1) (0 1 0 1 0)))
;; Loading (DEFTEST AREF.ORDER.1 (LET ((I 0) X Y (A #(A B C D))) (VALUES (AREF (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) 2)) I X Y)) C 2 1 2)
;; Loading (DEFTEST AREF.ORDER.2 (LET ((I 0) X Y Z (A #<(Array T (2 3)) C14542F3>)) (VALUES (AREF (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) 1) (PROGN (SETF Z (INCF I)) 2)) I X Y Z)) F 3 1 2 3)
;; Loading (DEFTEST SETF-AREF.1 (LET ((A (COPY-SEQ #(1 2 3 4)))) (VALUES (SETF (AREF A 2) (QUOTE Z)) A)) Z #(1 2 Z 4))
;; Loading (DEFTEST SETF-AREF.2 (LET ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT 1))) (VALUES (SETF (AREF A) (QUOTE Z)) A)) Z #<(Array T Nil) C146B7E3>)
;; Loading (DEFTEST SETF-AREF.3 (LET ((A (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-ELEMENT (QUOTE A)))) (VALUES (SETF (AREF A 0 1) (QUOTE Z)) A)) Z #<(Array T (2 3)) C1474DE3>)
;; Loading (DEFTEST SETF-AREF.4 (LET ((A (COPY-SEQ "abcd"))) (VALUES (SETF (AREF A 0) #\z) A)) #\z "zbcd")
;; Loading (DEFTEST SETF-AREF.5 (LET ((A (COPY-SEQ #*0011))) (VALUES (SETF (AREF A 0) 1) A)) 1 #*1011)
;; Loading (DEFTEST SETF-AREF.6 (LET ((A (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (SETF (AREF A 0 1) #\z) A)) #\z #<(Array T (2 3)) C148CC73>)
;; Loading (DEFTEST SETF-AREF.7 (LET ((A (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (SETF (AREF A 0 1) 0) A)) 0 #<(Array T (2 3)) C1497743>)
;; Loading (DEFTEST SETF-AREF.ORDER.1 (LET ((I 0) X Y Z (A (COPY-SEQ #(A B C D)))) (VALUES (SETF (AREF (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) 2)) (PROGN (SETF Z (INCF I)) (QUOTE Z))) A I X Y Z)) Z #(A B Z D) 3 1 2 3)
;; Loading (DEFTEST AREF.SPECIAL-INTEGER.1 (DO-SPECIAL-INTEGER-VECTORS (V #(1 1 0 1 0 1) NIL) (ASSERT (= (AREF V 0) 1)) (ASSERT (= (AREF V 1) 1)) (ASSERT (= (AREF V 2) 0)) (ASSERT (= (AREF V 3) 1)) (ASSERT (= (AREF V 4) 0)) (ASSERT (= (AREF V 5) 1))) NIL)
;; Loading (DEFTEST AREF.SPECIAL-STRINGS.1 (DO-SPECIAL-STRINGS (S "ABCDE" NIL) (ASSERT (EQL (AREF S 0) #\A)) (ASSERT (EQL (AREF S 1) #\B)) (ASSERT (EQL (AREF S 2) #\C)) (ASSERT (EQL (AREF S 3) #\D)) (ASSERT (EQL (AREF S 4) #\E))) NIL)
;; Loading (DEFTEST AREF.ERROR.1 (SIGNALS-ERROR (AREF) PROGRAM-ERROR) T)
;; Loading (DEFTEST AREF.ERROR.2 (SIGNALS-ERROR (FUNCALL (FUNCTION AREF)) PROGRAM-ERROR) T)
;; Loading (LOAD "array.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array.lsp C14DFD77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY.1.1 (NOTNOT-MV (TYPEP #() (QUOTE ARRAY))) T)
;; Loading (DEFTEST ARRAY.1.2 (NOTNOT-MV (TYPEP #<(Array T Nil) C14F6613> (QUOTE ARRAY))) T)
;; Loading (DEFTEST ARRAY.1.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) C14FB333> (QUOTE ARRAY))) T)
;; Loading (DEFTEST ARRAY.1.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE ARRAY))) T)
;; Loading (DEFTEST ARRAY.1.5 (NOTNOT-MV (TYPEP "abcd" (QUOTE ARRAY))) T)
;; Loading (DEFTEST ARRAY.1.6 (NOTNOT-MV (TYPEP #*010101 (QUOTE ARRAY))) T)
;; Loading (DEFTEST ARRAY.1.7 (TYPEP NIL (QUOTE ARRAY)) NIL)
;; Loading (DEFTEST ARRAY.1.8 (TYPEP (QUOTE X) (QUOTE ARRAY)) NIL)
;; Loading (DEFTEST ARRAY.1.9 (TYPEP (QUOTE (A B C)) (QUOTE ARRAY)) NIL)
;; Loading (DEFTEST ARRAY.1.10 (TYPEP 10.0 (QUOTE ARRAY)) NIL)
;; Loading (DEFTEST ARRAY.1.11 (TYPEP (FUNCTION (LAMBDA (X) (CONS X NIL))) (QUOTE ARRAY)) NIL)
;; Loading (DEFTEST ARRAY.1.12 (TYPEP 1 (QUOTE ARRAY)) NIL)
;; Loading (DEFTEST ARRAY.1.13 (TYPEP (1+ MOST-POSITIVE-FIXNUM) (QUOTE ARRAY)) NIL)
;; Loading (DEFTEST ARRAY.2.1 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY *)))) T)
;; Loading (DEFTEST ARRAY.2.2 (NOTNOT-MV (TYPEP #<(Array T Nil) C152C303> (QUOTE (ARRAY *)))) T)
;; Loading (DEFTEST ARRAY.2.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) C15314A3> (QUOTE (ARRAY *)))) T)
;; Loading (DEFTEST ARRAY.2.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (ARRAY *)))) T)
;; Loading (DEFTEST ARRAY.2.5 (NOTNOT-MV (TYPEP "abcd" (QUOTE (ARRAY *)))) T)
;; Loading (DEFTEST ARRAY.2.6 (NOTNOT-MV (TYPEP #*010101 (QUOTE (ARRAY *)))) T)
;; Loading (DEFTEST ARRAY.3.1 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY * NIL)))) NIL)
;; Loading (DEFTEST ARRAY.3.2 (NOTNOT-MV (TYPEP #<(Array T Nil) C1548B63> (QUOTE (ARRAY * NIL)))) T)
;; Loading (DEFTEST ARRAY.3.3 (TYPEP #<(Array T (1 0)) C154DB23> (QUOTE (ARRAY * NIL))) NIL)
;; Loading (DEFTEST ARRAY.3.4 (TYPEP #(1 2 3) (QUOTE (ARRAY * NIL))) NIL)
;; Loading (DEFTEST ARRAY.3.5 (TYPEP "abcd" (QUOTE (ARRAY * NIL))) NIL)
;; Loading (DEFTEST ARRAY.3.6 (TYPEP #*010101 (QUOTE (ARRAY * NIL))) NIL)
;; Loading (DEFTEST ARRAY.4.1 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY * 1)))) T)
;; Loading (DEFTEST ARRAY.4.2 (TYPEP #<(Array T Nil) C1565413> (QUOTE (ARRAY * 1))) NIL)
;; Loading (DEFTEST ARRAY.4.3 (TYPEP #<(Array T (1 0)) C1569FC3> (QUOTE (ARRAY * 1))) NIL)
;; Loading (DEFTEST ARRAY.4.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (ARRAY * 1)))) T)
;; Loading (DEFTEST ARRAY.4.5 (NOTNOT-MV (TYPEP "abcd" (QUOTE (ARRAY * 1)))) T)
;; Loading (DEFTEST ARRAY.4.6 (NOTNOT-MV (TYPEP #*010101 (QUOTE (ARRAY * 1)))) T)
;; Loading (DEFTEST ARRAY.5.1 (TYPEP #() (QUOTE (ARRAY * 0))) NIL)
;; Loading (DEFTEST ARRAY.5.2 (NOTNOT-MV (TYPEP #<(Array T Nil) C1581233> (QUOTE (ARRAY * 0)))) T)
;; Loading (DEFTEST ARRAY.5.3 (TYPEP #<(Array T (1 0)) C15860A3> (QUOTE (ARRAY * 0))) NIL)
;; Loading (DEFTEST ARRAY.5.4 (TYPEP #(1 2 3) (QUOTE (ARRAY * 0))) NIL)
;; Loading (DEFTEST ARRAY.5.5 (TYPEP "abcd" (QUOTE (ARRAY * 0))) NIL)
;; Loading (DEFTEST ARRAY.5.6 (TYPEP #*010101 (QUOTE (ARRAY * 0))) NIL)
;; Loading (DEFTEST ARRAY.6.1 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY * *)))) T)
;; Loading (DEFTEST ARRAY.6.2 (NOTNOT-MV (TYPEP #<(Array T Nil) C159C2A3> (QUOTE (ARRAY * *)))) T)
;; Loading (DEFTEST ARRAY.6.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) C15A16A3> (QUOTE (ARRAY * *)))) T)
;; Loading (DEFTEST ARRAY.6.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (ARRAY * *)))) T)
;; Loading (DEFTEST ARRAY.6.5 (NOTNOT-MV (TYPEP "abcd" (QUOTE (ARRAY * *)))) T)
;; Loading (DEFTEST ARRAY.6.6 (NOTNOT-MV (TYPEP #*010101 (QUOTE (ARRAY * *)))) T)
;; Loading (DEFTEST ARRAY.7.1 (TYPEP #() (QUOTE (ARRAY * 2))) NIL)
;; Loading (DEFTEST ARRAY.7.2 (TYPEP #<(Array T Nil) C15B8693> (QUOTE (ARRAY * 2))) NIL)
;; Loading (DEFTEST ARRAY.7.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) C15BD7C3> (QUOTE (ARRAY * 2)))) T)
;; Loading (DEFTEST ARRAY.7.4 (TYPEP #(1 2 3) (QUOTE (ARRAY * 2))) NIL)
;; Loading (DEFTEST ARRAY.7.5 (TYPEP "abcd" (QUOTE (ARRAY * 2))) NIL)
;; Loading (DEFTEST ARRAY.7.6 (TYPEP #*010101 (QUOTE (ARRAY * 2))) NIL)
;; Loading (DEFTEST ARRAY.8.1 (TYPEP #() (QUOTE (ARRAY * (1)))) NIL)
;; Loading (DEFTEST ARRAY.8.2 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY * (0))))) T)
;; Loading (DEFTEST ARRAY.8.3 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY * (*))))) T)
;; Loading (DEFTEST ARRAY.8.4 (TYPEP #(A B C) (QUOTE (ARRAY * (2)))) NIL)
;; Loading (DEFTEST ARRAY.8.5 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (ARRAY * (3))))) T)
;; Loading (DEFTEST ARRAY.8.6 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (ARRAY * (*))))) T)
;; Loading (DEFTEST ARRAY.8.7 (TYPEP #(A B C) (QUOTE (ARRAY * (4)))) NIL)
;; Loading (DEFTEST ARRAY.8.8 (TYPEP #<(Array T (1 3)) C15EED73> (QUOTE (ARRAY * (*)))) NIL)
;; Loading (DEFTEST ARRAY.8.9 (TYPEP #<(Array T (1 3)) C15F4153> (QUOTE (ARRAY * (3)))) NIL)
;; Loading (DEFTEST ARRAY.8.10 (TYPEP #<(Array T (1 3)) C15F95A3> (QUOTE (ARRAY * (1)))) NIL)
;; Loading (DEFTEST ARRAY.8.11 (TYPEP "abc" (QUOTE (ARRAY * (2)))) NIL)
;; Loading (DEFTEST ARRAY.8.12 (NOTNOT-MV (TYPEP "abc" (QUOTE (ARRAY * (3))))) T)
;; Loading (DEFTEST ARRAY.8.13 (NOTNOT-MV (TYPEP "abc" (QUOTE (ARRAY * (*))))) T)
;; Loading (DEFTEST ARRAY.8.14 (TYPEP "abc" (QUOTE (ARRAY * (4)))) NIL)
;; Loading (DEFTEST ARRAY.9.1 (TYPEP #() (QUOTE (ARRAY * (* *)))) NIL)
;; Loading (DEFTEST ARRAY.9.2 (TYPEP "abc" (QUOTE (ARRAY * (* *)))) NIL)
;; Loading (DEFTEST ARRAY.9.3 (TYPEP #(A B C) (QUOTE (ARRAY * (3 *)))) NIL)
;; Loading (DEFTEST ARRAY.9.4 (TYPEP #(A B C) (QUOTE (ARRAY * (* 3)))) NIL)
;; Loading (DEFTEST ARRAY.9.5 (TYPEP "abc" (QUOTE (ARRAY * (3 *)))) NIL)
;; Loading (DEFTEST ARRAY.9.6 (TYPEP "abc" (QUOTE (ARRAY * (* 3)))) NIL)
;; Loading (DEFTEST ARRAY.9.7 (NOTNOT-MV (TYPEP #<(Array T (3 2)) C162B4E3> (QUOTE (ARRAY * (* *))))) T)
;; Loading (DEFTEST ARRAY.9.8 (NOTNOT-MV (TYPEP #<(Array T (3 2)) C1631B03> (QUOTE (ARRAY * (3 *))))) T)
;; Loading (DEFTEST ARRAY.9.9 (TYPEP #<(Array T (3 2)) C1637B93> (QUOTE (ARRAY * (2 *)))) NIL)
;; Loading (DEFTEST ARRAY.9.10 (NOTNOT-MV (TYPEP #<(Array T (3 2)) C163DF63> (QUOTE (ARRAY * (* 2))))) T)
;; Loading (DEFTEST ARRAY.9.11 (TYPEP #<(Array T (3 2)) C16440B3> (QUOTE (ARRAY * (* 3)))) NIL)
;; Loading (DEFTEST ARRAY.9.12 (NOTNOT-MV (TYPEP #<(Array T (3 2)) C164A4C3> (QUOTE (ARRAY * (3 2))))) T)
;; Loading (DEFTEST ARRAY.9.13 (TYPEP #<(Array T (3 2)) C1650603> (QUOTE (ARRAY * (2 3)))) NIL)
;; Loading (LOAD "array-t.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-t.lsp C1660DF7>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-T.2.1 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY T)))) T)
;; Loading (DEFTEST ARRAY-T.2.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 80F2F993> (QUOTE (ARRAY T)))) T)
;; Loading (DEFTEST ARRAY-T.2.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 80F394F3> (QUOTE (ARRAY T)))) T)
;; Loading (DEFTEST ARRAY-T.2.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (ARRAY T)))) T)
;; Loading (DEFTEST ARRAY-T.2.5 (TYPEP "abcd" (QUOTE (ARRAY T))) NIL)
;; Loading (DEFTEST ARRAY-T.2.6 (TYPEP #*010101 (QUOTE (ARRAY T))) NIL)
;; Loading (DEFTEST ARRAY-T.3.1 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY T NIL)))) NIL)
;; Loading (DEFTEST ARRAY-T.3.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 80F502B3> (QUOTE (ARRAY T NIL)))) T)
;; Loading (DEFTEST ARRAY-T.3.3 (TYPEP #<(Array T (1 0)) 80F553F3> (QUOTE (ARRAY T NIL))) NIL)
;; Loading (DEFTEST ARRAY-T.3.4 (TYPEP #(1 2 3) (QUOTE (ARRAY T NIL))) NIL)
;; Loading (DEFTEST ARRAY-T.3.5 (TYPEP "abcd" (QUOTE (ARRAY T NIL))) NIL)
;; Loading (DEFTEST ARRAY-T.3.6 (TYPEP #*010101 (QUOTE (ARRAY T NIL))) NIL)
;; Loading (DEFTEST ARRAY-T.4.1 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY T 1)))) T)
;; Loading (DEFTEST ARRAY-T.4.2 (TYPEP #<(Array T Nil) 80F6D463> (QUOTE (ARRAY T 1))) NIL)
;; Loading (DEFTEST ARRAY-T.4.3 (TYPEP #<(Array T (1 0)) 80F72193> (QUOTE (ARRAY T 1))) NIL)
;; Loading (DEFTEST ARRAY-T.4.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (ARRAY T 1)))) T)
;; Loading (DEFTEST ARRAY-T.4.5 (TYPEP "abcd" (QUOTE (ARRAY T 1))) NIL)
;; Loading (DEFTEST ARRAY-T.4.6 (TYPEP #*010101 (QUOTE (ARRAY T 1))) NIL)
;; Loading (DEFTEST ARRAY-T.5.1 (TYPEP #() (QUOTE (ARRAY T 0))) NIL)
;; Loading (DEFTEST ARRAY-T.5.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 80F88B03> (QUOTE (ARRAY T 0)))) T)
;; Loading (DEFTEST ARRAY-T.5.3 (TYPEP #<(Array T (1 0)) 80F8DAF3> (QUOTE (ARRAY T 0))) NIL)
;; Loading (DEFTEST ARRAY-T.5.4 (TYPEP #(1 2 3) (QUOTE (ARRAY T 0))) NIL)
;; Loading (DEFTEST ARRAY-T.5.5 (TYPEP "abcd" (QUOTE (ARRAY T 0))) NIL)
;; Loading (DEFTEST ARRAY-T.5.6 (TYPEP #*010101 (QUOTE (ARRAY T 0))) NIL)
;; Loading (DEFTEST ARRAY-T.6.1 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY T *)))) T)
;; Loading (DEFTEST ARRAY-T.6.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 80FA4473> (QUOTE (ARRAY T *)))) T)
;; Loading (DEFTEST ARRAY-T.6.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 80FA99F3> (QUOTE (ARRAY T *)))) T)
;; Loading (DEFTEST ARRAY-T.6.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (ARRAY T *)))) T)
;; Loading (DEFTEST ARRAY-T.6.5 (TYPEP "abcd" (QUOTE (ARRAY T *))) NIL)
;; Loading (DEFTEST ARRAY-T.6.6 (TYPEP #*010101 (QUOTE (ARRAY T *))) NIL)
;; Loading (DEFTEST ARRAY-T.7.1 (TYPEP #() (QUOTE (ARRAY T 2))) NIL)
;; Loading (DEFTEST ARRAY-T.7.2 (TYPEP #<(Array T Nil) 80FC00E3> (QUOTE (ARRAY T 2))) NIL)
;; Loading (DEFTEST ARRAY-T.7.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 80FC5393> (QUOTE (ARRAY T 2)))) T)
;; Loading (DEFTEST ARRAY-T.7.4 (TYPEP #(1 2 3) (QUOTE (ARRAY T 2))) NIL)
;; Loading (DEFTEST ARRAY-T.7.5 (TYPEP "abcd" (QUOTE (ARRAY T 2))) NIL)
;; Loading (DEFTEST ARRAY-T.7.6 (TYPEP #*010101 (QUOTE (ARRAY T 2))) NIL)
;; Loading (DEFTEST ARRAY-T.8.1 (TYPEP #() (QUOTE (ARRAY T (1)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.2 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY T (0))))) T)
;; Loading (DEFTEST ARRAY-T.8.3 (NOTNOT-MV (TYPEP #() (QUOTE (ARRAY T (*))))) T)
;; Loading (DEFTEST ARRAY-T.8.4 (TYPEP #(A B C) (QUOTE (ARRAY T (2)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.5 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (ARRAY T (3))))) T)
;; Loading (DEFTEST ARRAY-T.8.6 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (ARRAY T (*))))) T)
;; Loading (DEFTEST ARRAY-T.8.7 (TYPEP #(A B C) (QUOTE (ARRAY T (4)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.8 (TYPEP #<(Array T (1 3)) 80FF79C3> (QUOTE (ARRAY T (*)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.9 (TYPEP #<(Array T (1 3)) 80FFCF23> (QUOTE (ARRAY T (3)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.10 (TYPEP #<(Array T (1 3)) 810024F3> (QUOTE (ARRAY T (1)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.11 (TYPEP "abc" (QUOTE (ARRAY T (2)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.12 (TYPEP "abc" (QUOTE (ARRAY T (3)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.13 (TYPEP "abc" (QUOTE (ARRAY T (*)))) NIL)
;; Loading (DEFTEST ARRAY-T.8.14 (TYPEP "abc" (QUOTE (ARRAY T (4)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.1 (TYPEP #() (QUOTE (ARRAY T (* *)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.2 (TYPEP "abc" (QUOTE (ARRAY T (* *)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.3 (TYPEP #(A B C) (QUOTE (ARRAY T (3 *)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.4 (TYPEP #(A B C) (QUOTE (ARRAY T (* 3)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.5 (TYPEP "abc" (QUOTE (ARRAY T (3 *)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.6 (TYPEP "abc" (QUOTE (ARRAY T (* 3)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.7 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 81034433> (QUOTE (ARRAY T (* *))))) T)
;; Loading (DEFTEST ARRAY-T.9.8 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 8103ABD3> (QUOTE (ARRAY T (3 *))))) T)
;; Loading (DEFTEST ARRAY-T.9.9 (TYPEP #<(Array T (3 2)) 81040DE3> (QUOTE (ARRAY T (2 *)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.10 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 81047333> (QUOTE (ARRAY T (* 2))))) T)
;; Loading (DEFTEST ARRAY-T.9.11 (TYPEP #<(Array T (3 2)) 8104D603> (QUOTE (ARRAY T (* 3)))) NIL)
;; Loading (DEFTEST ARRAY-T.9.12 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 81053B93> (QUOTE (ARRAY T (3 2))))) T)
;; Loading (DEFTEST ARRAY-T.9.13 (TYPEP #<(Array T (3 2)) 81059E53> (QUOTE (ARRAY T (2 3)))) NIL)
;; Loading (LOAD "array-as-class.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-as-class.lsp 81070CC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-AS-CLASS.1 (NOTNOT-MV (TYPEP #() (FIND-CLASS (QUOTE ARRAY)))) T)
;; Loading (DEFTEST ARRAY-AS-CLASS.2 (NOTNOT-MV (TYPEP #(A B C) (FIND-CLASS (QUOTE ARRAY)))) T)
;; Loading (DEFTEST ARRAY-AS-CLASS.3 (NOTNOT-MV (TYPEP #<(Array T Nil) 8108EE33> (FIND-CLASS (QUOTE ARRAY)))) T)
;; Loading (DEFTEST ARRAY-AS-CLASS.4 (NOTNOT-MV (TYPEP #<(Array T (2 2)) 81095333> (FIND-CLASS (QUOTE ARRAY)))) T)
;; Loading (DEFTEST ARRAY-AS-CLASS.5 (NOTNOT-MV (TYPEP "abcde" (FIND-CLASS (QUOTE ARRAY)))) T)
;; Loading (DEFTEST ARRAY-AS-CLASS.6 (NOTNOT-MV (TYPEP #*0011101 (FIND-CLASS (QUOTE ARRAY)))) T)
;; Loading (DEFTEST ARRAY-AS-CLASS.7 (SUBTYPEP* (QUOTE ARRAY) (FIND-CLASS (QUOTE ARRAY))) T T)
;; Loading (DEFTEST ARRAY-AS-CLASS.8 (SUBTYPEP* (FIND-CLASS (QUOTE ARRAY)) (QUOTE ARRAY)) T T)
;; Loading (DEFTEST ARRAY-AS-CLASS.9 (TYPEP NIL (FIND-CLASS (QUOTE ARRAY))) NIL)
;; Loading (DEFTEST ARRAY-AS-CLASS.10 (TYPEP (QUOTE X) (FIND-CLASS (QUOTE ARRAY))) NIL)
;; Loading (DEFTEST ARRAY-AS-CLASS.11 (TYPEP (QUOTE (A B C)) (FIND-CLASS (QUOTE ARRAY))) NIL)
;; Loading (DEFTEST ARRAY-AS-CLASS.12 (TYPEP 10.0 (FIND-CLASS (QUOTE ARRAY))) NIL)
;; Loading (DEFTEST ARRAY-AS-CLASS.13 (TYPEP (FUNCTION (LAMBDA (X) (CONS X NIL))) (FIND-CLASS (QUOTE ARRAY))) NIL)
;; Loading (DEFTEST ARRAY-AS-CLASS.14 (TYPEP 1 (FIND-CLASS (QUOTE ARRAY))) NIL)
;; Loading (DEFTEST ARRAY-AS-CLASS.15 (TYPEP (1+ MOST-POSITIVE-FIXNUM) (FIND-CLASS (QUOTE ARRAY))) NIL)
;; Loading (LOAD "simple-array.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/simple-array.lsp 810DB6D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIMPLE-ARRAY.1.1 (NOTNOT-MV (TYPEP #() (QUOTE SIMPLE-ARRAY))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.1.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 810F3C13> (QUOTE SIMPLE-ARRAY))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.1.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 810F92D3> (QUOTE SIMPLE-ARRAY))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.1.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE SIMPLE-ARRAY))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.1.5 (NOTNOT-MV (TYPEP "abcd" (QUOTE SIMPLE-ARRAY))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.1.6 (NOTNOT-MV (TYPEP #*010101 (QUOTE SIMPLE-ARRAY))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.1.7 (TYPEP NIL (QUOTE SIMPLE-ARRAY)) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.1.8 (TYPEP (QUOTE X) (QUOTE SIMPLE-ARRAY)) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.1.9 (TYPEP (QUOTE (A B C)) (QUOTE SIMPLE-ARRAY)) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.1.10 (TYPEP 10.0 (QUOTE SIMPLE-ARRAY)) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.1.11 (TYPEP (FUNCTION (LAMBDA (X) (CONS X NIL))) (QUOTE SIMPLE-ARRAY)) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.1.12 (TYPEP 1 (QUOTE SIMPLE-ARRAY)) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.1.13 (TYPEP (1+ MOST-POSITIVE-FIXNUM) (QUOTE SIMPLE-ARRAY)) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.2.1 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.2.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 811318E3> (QUOTE (SIMPLE-ARRAY *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.2.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 81137423> (QUOTE (SIMPLE-ARRAY *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.2.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.2.5 (NOTNOT-MV (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.2.6 (NOTNOT-MV (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.3.1 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY * NIL)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.3.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 81151DA3> (QUOTE (SIMPLE-ARRAY * NIL)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.3.3 (TYPEP #<(Array T (1 0)) 81157703> (QUOTE (SIMPLE-ARRAY * NIL))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.3.4 (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY * NIL))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.3.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY * NIL))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.3.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY * NIL))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.4.1 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY * 1)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.4.2 (TYPEP #<(Array T Nil) 811722B3> (QUOTE (SIMPLE-ARRAY * 1))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.4.3 (TYPEP #<(Array T (1 0)) 81177803> (QUOTE (SIMPLE-ARRAY * 1))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.4.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY * 1)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.4.5 (NOTNOT-MV (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY * 1)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.4.6 (NOTNOT-MV (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY * 1)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.5.1 (TYPEP #() (QUOTE (SIMPLE-ARRAY * 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.5.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 81191D33> (QUOTE (SIMPLE-ARRAY * 0)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.5.3 (TYPEP #<(Array T (1 0)) 81197543> (QUOTE (SIMPLE-ARRAY * 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.5.4 (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY * 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.5.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY * 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.5.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY * 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.6.1 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY * *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.6.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 811B0A03> (QUOTE (SIMPLE-ARRAY * *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.6.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 811B67A3> (QUOTE (SIMPLE-ARRAY * *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.6.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY * *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.6.5 (NOTNOT-MV (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY * *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.6.6 (NOTNOT-MV (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY * *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.7.1 (TYPEP #() (QUOTE (SIMPLE-ARRAY * 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.7.2 (TYPEP #<(Array T Nil) 811D0A53> (QUOTE (SIMPLE-ARRAY * 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.7.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 811D6523> (QUOTE (SIMPLE-ARRAY * 2)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.7.4 (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY * 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.7.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY * 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.7.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY * 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.8.1 (TYPEP #() (QUOTE (SIMPLE-ARRAY * (1)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.8.2 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY * (0))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.8.3 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY * (*))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.8.4 (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY * (2)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.8.5 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY * (3))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.8.6 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY * (*))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.8.7 (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY * (4)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.8.8 (TYPEP #<(Array T (1 3)) 8120E753> (QUOTE (SIMPLE-ARRAY * (*)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.8.9 (TYPEP #<(Array T (1 3)) 812144D3> (QUOTE (SIMPLE-ARRAY * (3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.8.10 (TYPEP #<(Array T (1 3)) 8121A2E3> (QUOTE (SIMPLE-ARRAY * (1)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.8.11 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY * (2)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.8.12 (NOTNOT-MV (TYPEP "abc" (QUOTE (SIMPLE-ARRAY * (3))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.8.13 (NOTNOT-MV (TYPEP "abc" (QUOTE (SIMPLE-ARRAY * (*))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.8.14 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY * (4)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.1 (TYPEP #() (QUOTE (SIMPLE-ARRAY * (* *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.2 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY * (* *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.3 (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY * (3 *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.4 (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY * (* 3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.5 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY * (3 *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.6 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY * (* 3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.7 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 81252F23> (QUOTE (SIMPLE-ARRAY * (* *))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.9.8 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 81259EE3> (QUOTE (SIMPLE-ARRAY * (3 *))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.9.9 (TYPEP #<(Array T (3 2)) 81260913> (QUOTE (SIMPLE-ARRAY * (2 *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.10 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 812676A3> (QUOTE (SIMPLE-ARRAY * (* 2))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.9.11 (TYPEP #<(Array T (3 2)) 8126E1B3> (QUOTE (SIMPLE-ARRAY * (* 3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY.9.12 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 81274F83> (QUOTE (SIMPLE-ARRAY * (3 2))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY.9.13 (TYPEP #<(Array T (3 2)) 8127BA83> (QUOTE (SIMPLE-ARRAY * (2 3)))) NIL)
;; Loading (LOAD "simple-array-t.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/simple-array-t.lsp 8128DAD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIMPLE-ARRAY-T.2.1 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY T)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.2.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 812A5DD3> (QUOTE (SIMPLE-ARRAY T)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.2.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 812ABAB3> (QUOTE (SIMPLE-ARRAY T)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.2.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.2.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.2.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.3.1 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY T NIL)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.3.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 812C5BD3> (QUOTE (SIMPLE-ARRAY T NIL)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.3.3 (TYPEP #<(Array T (1 0)) 812CB6D3> (QUOTE (SIMPLE-ARRAY T NIL))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.3.4 (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T NIL))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.3.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T NIL))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.3.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T NIL))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.4.1 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY T 1)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.4.2 (TYPEP #<(Array T Nil) 812E6AA3> (QUOTE (SIMPLE-ARRAY T 1))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.4.3 (TYPEP #<(Array T (1 0)) 812EC193> (QUOTE (SIMPLE-ARRAY T 1))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.4.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T 1)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.4.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T 1))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.4.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T 1))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.5.1 (TYPEP #() (QUOTE (SIMPLE-ARRAY T 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.5.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 81305E63> (QUOTE (SIMPLE-ARRAY T 0)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.5.3 (TYPEP #<(Array T (1 0)) 8130B813> (QUOTE (SIMPLE-ARRAY T 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.5.4 (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.5.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.5.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T 0))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.6.1 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY T *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.6.2 (NOTNOT-MV (TYPEP #<(Array T Nil) 813254F3> (QUOTE (SIMPLE-ARRAY T *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.6.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 8132B433> (QUOTE (SIMPLE-ARRAY T *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.6.4 (NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T *)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.6.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T *))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.6.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T *))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.7.1 (TYPEP #() (QUOTE (SIMPLE-ARRAY T 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.7.2 (TYPEP #<(Array T Nil) 81344E83> (QUOTE (SIMPLE-ARRAY T 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.7.3 (NOTNOT-MV (TYPEP #<(Array T (1 0)) 8134AAF3> (QUOTE (SIMPLE-ARRAY T 2)))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.7.4 (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.7.5 (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.7.6 (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T 2))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.1 (TYPEP #() (QUOTE (SIMPLE-ARRAY T (1)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.2 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY T (0))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.3 (NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY T (*))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.4 (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY T (2)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.5 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY T (3))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.6 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY T (*))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.7 (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY T (4)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.8 (TYPEP #<(Array T (1 3)) 81383F03> (QUOTE (SIMPLE-ARRAY T (*)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.9 (TYPEP #<(Array T (1 3)) 81389E23> (QUOTE (SIMPLE-ARRAY T (3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.10 (TYPEP #<(Array T (1 3)) 8138FDB3> (QUOTE (SIMPLE-ARRAY T (1)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.11 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY T (2)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.12 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY T (3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.13 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY T (*)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.8.14 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY T (4)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.1 (TYPEP #() (QUOTE (SIMPLE-ARRAY T (* *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.2 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY T (* *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.3 (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY T (3 *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.4 (TYPEP #(A B C) (QUOTE (SIMPLE-ARRAY T (* 3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.5 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY T (3 *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.6 (TYPEP "abc" (QUOTE (SIMPLE-ARRAY T (* 3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.7 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 813C8AD3> (QUOTE (SIMPLE-ARRAY T (* *))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.8 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 813CFC33> (QUOTE (SIMPLE-ARRAY T (3 *))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.9 (TYPEP #<(Array T (3 2)) 813D6803> (QUOTE (SIMPLE-ARRAY T (2 *)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.10 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 813DD713> (QUOTE (SIMPLE-ARRAY T (* 2))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.11 (TYPEP #<(Array T (3 2)) 813E43A3> (QUOTE (SIMPLE-ARRAY T (* 3)))) NIL)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.12 (NOTNOT-MV (TYPEP #<(Array T (3 2)) 813EB2F3> (QUOTE (SIMPLE-ARRAY T (3 2))))) T)
;; Loading (DEFTEST SIMPLE-ARRAY-T.9.13 (TYPEP #<(Array T (3 2)) 813F1F73> (QUOTE (SIMPLE-ARRAY T (2 3)))) NIL)
;; Loading (LOAD "bit-vector.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-vector.lsp 81403C47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BIT-VECTOR.1 (NOTNOT-MV (FIND-CLASS (QUOTE BIT-VECTOR))) T)
;; Loading (DEFTEST BIT-VECTOR.2 (NOTNOT-MV (TYPEP #* (QUOTE BIT-VECTOR))) T)
;; Loading (DEFTEST BIT-VECTOR.3 (NOTNOT-MV (TYPEP #*00101 (QUOTE BIT-VECTOR))) T)
;; Loading (DEFTEST BIT-VECTOR.4 (TYPEP #(0 1 1 1 0 0) (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR.5 (TYPEP "011100" (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR.6 (TYPEP 0 (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR.7 (TYPEP 1 (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR.8 (TYPEP NIL (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR.9 (TYPEP (QUOTE X) (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR.10 (TYPEP (QUOTE (0 1 1 0)) (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR.11 (TYPEP (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0) (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR.12 (NOTNOT-MV (TYPEP #* (QUOTE (BIT-VECTOR *)))) T)
;; Loading (DEFTEST BIT-VECTOR.13 (NOTNOT-MV (TYPEP #*01101 (QUOTE (BIT-VECTOR *)))) T)
;; Loading (DEFTEST BIT-VECTOR.14 (NOTNOT-MV (TYPEP #* (QUOTE (BIT-VECTOR 0)))) T)
;; Loading (DEFTEST BIT-VECTOR.15 (TYPEP #*01101 (QUOTE (BIT-VECTOR 0))) NIL)
;; Loading (DEFTEST BIT-VECTOR.16 (TYPEP #* (QUOTE (BIT-VECTOR 5))) NIL)
;; Loading (DEFTEST BIT-VECTOR.17 (NOTNOT-MV (TYPEP #*01101 (QUOTE (BIT-VECTOR 5)))) T)
;; Loading (DEFTEST BIT-VECTOR.CLASS.2 (NOTNOT-MV (TYPEP #* (FIND-CLASS (QUOTE BIT-VECTOR)))) T)
;; Loading (DEFTEST BIT-VECTOR.CLASS.3 (NOTNOT-MV (TYPEP #*00101 (FIND-CLASS (QUOTE BIT-VECTOR)))) T)
;; Loading (DEFTEST BIT-VECTOR.CLASS.4 (TYPEP #(0 1 1 1 0 0) (FIND-CLASS (QUOTE BIT-VECTOR))) NIL)
;; Loading (DEFTEST BIT-VECTOR.CLASS.5 (TYPEP "011100" (FIND-CLASS (QUOTE BIT-VECTOR))) NIL)
;; Loading (DEFTEST BIT-VECTOR.CLASS.6 (TYPEP 0 (FIND-CLASS (QUOTE BIT-VECTOR))) NIL)
;; Loading (DEFTEST BIT-VECTOR.CLASS.7 (TYPEP 1 (FIND-CLASS (QUOTE BIT-VECTOR))) NIL)
;; Loading (DEFTEST BIT-VECTOR.CLASS.8 (TYPEP NIL (FIND-CLASS (QUOTE BIT-VECTOR))) NIL)
;; Loading (DEFTEST BIT-VECTOR.CLASS.9 (TYPEP (QUOTE X) (FIND-CLASS (QUOTE BIT-VECTOR))) NIL)
;; Loading (DEFTEST BIT-VECTOR.CLASS.10 (TYPEP (QUOTE (0 1 1 0)) (FIND-CLASS (QUOTE BIT-VECTOR))) NIL)
;; Loading (DEFTEST BIT-VECTOR.CLASS.11 (TYPEP (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0) (FIND-CLASS (QUOTE BIT-VECTOR))) NIL)
;; Loading (LOAD "simple-bit-vector.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/simple-bit-vector.lsp 814A1547>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.2 (NOTNOT-MV (TYPEP #* (QUOTE SIMPLE-BIT-VECTOR))) T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.3 (NOTNOT-MV (TYPEP #*00101 (QUOTE SIMPLE-BIT-VECTOR))) T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.4 (TYPEP #(0 1 1 1 0 0) (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.5 (TYPEP "011100" (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.6 (TYPEP 0 (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.7 (TYPEP 1 (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.8 (TYPEP NIL (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.9 (TYPEP (QUOTE X) (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.10 (TYPEP (QUOTE (0 1 1 0)) (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.11 (TYPEP (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0) (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.12 (NOTNOT-MV (TYPEP #* (QUOTE (SIMPLE-BIT-VECTOR *)))) T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.13 (NOTNOT-MV (TYPEP #*01101 (QUOTE (SIMPLE-BIT-VECTOR *)))) T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.14 (NOTNOT-MV (TYPEP #* (QUOTE (SIMPLE-BIT-VECTOR 0)))) T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.15 (TYPEP #*01101 (QUOTE (SIMPLE-BIT-VECTOR 0))) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.16 (TYPEP #* (QUOTE (SIMPLE-BIT-VECTOR 5))) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR.17 (NOTNOT-MV (TYPEP #*01101 (QUOTE (SIMPLE-BIT-VECTOR 5)))) T)
;; Loading (LOAD "make-array.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-array.lsp 8150E597>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "array-aux.lsp")
;; Loading (DEFTEST MAKE-ARRAY.1 (LET ((A (MAKE-ARRAY-WITH-CHECKS 10))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.1A (LET ((A (MAKE-ARRAY-WITH-CHECKS (QUOTE (10))))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.2 (MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-ELEMENT (QUOTE Z)) #(Z Z Z))
;; Loading (DEFTEST MAKE-ARRAY.2A (MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-CONTENTS (QUOTE (A B C))) #(A B C))
;; Loading (DEFTEST MAKE-ARRAY.2B (MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-CONTENTS #(A B C)) #(A B C))
;; Loading (DEFTEST MAKE-ARRAY.2C (MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-CONTENTS "abc") #(#\a #\b #\c))
;; Loading (DEFTEST MAKE-ARRAY.2D (MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-CONTENTS #*010) #(0 1 0))
;; Loading (DEFTEST MAKE-ARRAY.3 (LET ((A (MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT)))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.4 (MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1) #*11111)
;; Loading (DEFTEST MAKE-ARRAY.4A (MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (1 0 0 1 0))) #*10010)
;; Loading (DEFTEST MAKE-ARRAY.4B (MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(1 0 0 1 0)) #*10010)
;; Loading (DEFTEST MAKE-ARRAY.4C (MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*10010) #*10010)
;; Loading (DEFTEST MAKE-ARRAY.5 (LET ((A (MAKE-ARRAY-WITH-CHECKS 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.5A (LET ((A (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.6 (MAKE-ARRAY-WITH-CHECKS 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\x) "xxxx")
;; Loading (DEFTEST MAKE-ARRAY.6A (MAKE-ARRAY-WITH-CHECKS 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))) "abcd")
;; Loading (DEFTEST MAKE-ARRAY.6B (MAKE-ARRAY-WITH-CHECKS 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcd") "abcd")
;; Loading (DEFTEST MAKE-ARRAY.7 (MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE SYMBOL) :INITIAL-ELEMENT (QUOTE A)) #(A A A A A))
;; Loading (DEFTEST MAKE-ARRAY.7A (MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE SYMBOL) :INITIAL-CONTENTS (QUOTE (A B C D E))) #(A B C D E))
;; Loading (DEFTEST MAKE-ARRAY.7B (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE SYMBOL) :INITIAL-CONTENTS (QUOTE (A B C D E))) #(A B C D E))
;; Loading (DEFTEST MAKE-ARRAY.8 (LET ((A (MAKE-ARRAY-WITH-CHECKS 8 :ELEMENT-TYPE (QUOTE (INTEGER 0 (256)))))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.8A (MAKE-ARRAY-WITH-CHECKS 8 :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-ELEMENT 9) #(9 9 9 9 9 9 9 9))
;; Loading (DEFTEST MAKE-ARRAY.8B (MAKE-ARRAY-WITH-CHECKS (QUOTE (8)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (4 3 2 1 9 8 7 6))) #(4 3 2 1 9 8 7 6))
;; Loading (DEFTEST MAKE-ARRAY.8C (LOOP FOR I FROM 1 TO 32 FOR TP = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR A = (MAKE-ARRAY 5 :FILL-POINTER 3 :ELEMENT-TYPE TP :INITIAL-CONTENTS (QUOTE (1 1 0 0 1))) WHEN (SYMBOLP A) COLLECT (LIST I TP A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.8D (LOOP FOR I FROM 2 TO 32 FOR TP = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR A = (MAKE-ARRAY 5 :FILL-POINTER 3 :ELEMENT-TYPE TP :INITIAL-CONTENTS (QUOTE (1 1 0 0 1))) WHEN (SYMBOLP A) COLLECT (LIST I TP A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.8E (LOOP FOR TP IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V IN (QUOTE (1.0 1.0 1.0 1.0)) FOR A = (MAKE-ARRAY 5 :FILL-POINTER 3 :ELEMENT-TYPE TP :INITIAL-ELEMENT V) WHEN (SYMBOLP A) COLLECT (LIST TP V A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.8F (LOOP FOR TP IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR V IN (QUOTE (1.0 1.0 1.0 1.0)) FOR A = (MAKE-ARRAY 5 :FILL-POINTER 3 :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TP))) :INITIAL-ELEMENT (COMPLEX V)) WHEN (SYMBOLP A) COLLECT (LIST TP V A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.9 (LET ((A (MAKE-ARRAY-WITH-CHECKS NIL))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.10 (MAKE-ARRAY-WITH-CHECKS NIL :INITIAL-ELEMENT 1) #<(Array T Nil) 816425B3>)
;; Loading (DEFTEST MAKE-ARRAY.11 (MAKE-ARRAY-WITH-CHECKS NIL :INITIAL-CONTENTS 2) #<(Array T Nil) 81647D93>)
;; Loading (DEFTEST MAKE-ARRAY.12 (MAKE-ARRAY-WITH-CHECKS NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS 1) #<(Array T Nil) 8164DF83>)
;; Loading (DEFTEST MAKE-ARRAY.12A (MAKE-ARRAY-WITH-CHECKS 10 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (1 0 0 1 1 0 0 1 0 0)) :FILL-POINTER 6) #*100110)
;; Loading (DEFTEST MAKE-ARRAY.12B (MAKE-ARRAY-WITH-CHECKS 10 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 8) "abcdefgh")
;; Loading (DEFTEST MAKE-ARRAY.12C (MAKE-ARRAY-WITH-CHECKS 10 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 8) "abcdefgh")
;; Loading (DEFTEST MAKE-ARRAY.13 (MAKE-ARRAY-WITH-CHECKS NIL :ELEMENT-TYPE T :INITIAL-CONTENTS (QUOTE A)) #<(Array T Nil) 8166F103>)
;; Loading (DEFTEST MAKE-ARRAY.14 (LET ((A (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3))))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.15 (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :INITIAL-ELEMENT (QUOTE X)) #<(Array T (2 3)) 8167CEF3>)
;; Loading (DEFTEST MAKE-ARRAY.16 (EQUALPT (MAKE-ARRAY-WITH-CHECKS (QUOTE (0 0))) (READ-FROM-STRING "#2a()")) T)
;; Loading (DEFTEST MAKE-ARRAY.17 (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((A B C) (D E F)))) #<(Array T (2 3)) 8168AD83>)
;; Loading (DEFTEST MAKE-ARRAY.18 (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE (#(A B C) #(D E F)))) #<(Array T (2 3)) 816930D3>)
;; Loading (DEFTEST MAKE-ARRAY.19 (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :INITIAL-CONTENTS (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 1 :FILL-POINTER 4)) #(1 1 1 1))
;; Loading (DEFTEST MAKE-ARRAY.20 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 1 :FILL-POINTER 4))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (3 4)) :INITIAL-CONTENTS (LIST A A A))) #<(Array T (3 4)) 816A8CD3>)
;; Loading (DEFTEST MAKE-ARRAY.21 (MAKE-ARRAY-WITH-CHECKS (QUOTE (3 4)) :INITIAL-CONTENTS (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT (QUOTE (1 2 3 4)) :FILL-POINTER 3)) #<(Array T (3 4)) 816B5693>)
;; Loading (DEFTEST MAKE-ARRAY.22 (LOOP FOR I FROM 3 BELOW (MIN ARRAY-RANK-LIMIT 128) ALWAYS (EQUALPT (MAKE-ARRAY-WITH-CHECKS (MAKE-LIST I :INITIAL-ELEMENT 0)) (READ-FROM-STRING (FORMAT NIL "#~Aa()" I)))) T)
;; Loading (DEFTEST MAKE-ARRAY.23 (LET ((LEN (1- ARRAY-RANK-LIMIT))) (EQUALPT (MAKE-ARRAY-WITH-CHECKS (MAKE-LIST LEN :INITIAL-ELEMENT 0)) (READ-FROM-STRING (FORMAT NIL "#~Aa()" LEN)))) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MAKE-ARRAY.25 (MAKE-ARRAY (QUOTE (4)) :INITIAL-ELEMENT (QUOTE X) :NONSENSE-ARGUMENT T :ALLOW-OTHER-KEYS T) #(X X X X))
;; Loading (DEFTEST MAKE-ARRAY.26 (MAKE-ARRAY (QUOTE (4)) :INITIAL-ELEMENT (QUOTE X) :ALLOW-OTHER-KEYS NIL) #(X X X X))
;; Loading (DEFTEST MAKE-ARRAY.27 (MAKE-ARRAY (QUOTE (4)) :INITIAL-ELEMENT (QUOTE X) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :NONSENSE-ARGUMENT T) #(X X X X))
;; Loading (DEFTEST MAKE-ARRAY.28 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (LET ((LEN (1- (MIN 10000 ARRAY-RANK-LIMIT)))) (EQUALPT (MAKE-ARRAY (MAKE-LIST LEN :INITIAL-ELEMENT 1) :INITIAL-ELEMENT (QUOTE X)) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (FORMAT NIL "#~dA" LEN) (MAKE-STRING LEN :INITIAL-ELEMENT #\() "x" (MAKE-STRING LEN :INITIAL-ELEMENT #\))))))) T)
;; Loading (DEFTEST MAKE-ARRAY.29 (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (0 5 255 119 57))) #(0 5 255 119 57))
;; Loading (DEFTEST MAKE-ARRAY.30 (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER -128 127)) :INITIAL-CONTENTS (QUOTE (-10 5 -128 86 127))) #(-10 5 -128 86 127))
;; Loading (DEFTEST MAKE-ARRAY.31 (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (65536))) :INITIAL-CONTENTS (QUOTE (0 100 65535 7623 13))) #(0 100 65535 7623 13))
;; Loading (DEFTEST MAKE-ARRAY.32 (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5))) #(1 2 3 4 5))
;; Loading (DEFTEST MAKE-ARRAY.33 (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT) :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0))) #(1.0 2.0 3.0 4.0 5.0))
;; Loading (DEFTEST MAKE-ARRAY.34 (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT) :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0))) #(1.0 2.0 3.0 4.0 5.0))
;; Loading (DEFTEST MAKE-ARRAY.35 (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT) :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0))) #(1.0 2.0 3.0 4.0 5.0))
;; Loading (DEFTEST MAKE-ARRAY.36 (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE LONG-FLOAT) :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0))) #(1.0 2.0 3.0 4.0 5.0))
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.1 (LET ((A (MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :ADJUSTABLE T))) (AND (SYMBOLP A) A)) NIL)
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.2 (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :INITIAL-ELEMENT 6) #(6 6 6 6))
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.3 (MAKE-ARRAY-WITH-CHECKS NIL :ADJUSTABLE T :INITIAL-ELEMENT 7) #<(Array T Nil) C0FCF6B3>)
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.4 (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :ADJUSTABLE T :INITIAL-ELEMENT 7) #<(Array T (2 3)) C0FDB993>)
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.5 (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE ((1 2 3) "abc"))) #<(Array T (2 3)) C0FE4E93>)
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.6 (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (A B C D))) #(A B C D))
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.7 (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :FILL-POINTER T :INITIAL-CONTENTS (QUOTE (A B C D))) #(A B C D))
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.7A (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER T :INITIAL-CONTENTS (QUOTE (1 0 0 1))) #(1 0 0 1))
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.7B (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER T :INITIAL-CONTENTS "abcd") "abcd")
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.7C (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER T :INITIAL-CONTENTS "abcd") "abcd")
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.8 (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (1 4 7 9))) #(1 4 7 9))
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.9 (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcd") "abcd")
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.10 (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 1 0))) #*0110)
;; Loading (DEFTEST MAKE-ARRAY.ADJUSTABLE.11 (MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE SYMBOL) :INITIAL-CONTENTS (QUOTE (A B C D))) #(A B C D))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.1 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :DISPLACED-TO A)) #(A B C D E))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.2 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 3)) #(D E F G H))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.3 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 5)) #(F G H I J))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.4 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 10)) #())
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.5 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (1 3 5 7 9 11 13 15 17 19))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :DISPLACED-TO A)) #(1 3 5 7 9))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.6 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (1 3 5 7 9 11 13 15 17 19))))) (LOOP FOR I FROM 0 TO 5 COLLECT (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET I))) (#(1 3 5 7 9) #(3 5 7 9 11) #(5 7 9 11 13) #(7 9 11 13 15) #(9 11 13 15 17) #(11 13 15 17 19)))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.7 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (1 3 5 7 9 11 13 15 17 19))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 10)) #())
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.8 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 1 0 1 1 1 0 1 0))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A)) #*01101)
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.9 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 1 0 1 1 1 0 1 0))))) (LOOP FOR I FROM 0 TO 5 COLLECT (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET I))) (#*01101 #*11011 #*10111 #*01110 #*11101 #*11010))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.10 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 1 0 1 1 1 0 1 0))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 10)) #*)
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.11 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij"))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO A)) "abcde")
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.12 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij"))) (LOOP FOR I FROM 0 TO 5 COLLECT (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET I))) ("abcde" "bcdef" "cdefg" "defgh" "efghi" "fghij"))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.13 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij"))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 10)) "")
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.14 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij"))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO A)) "abcde")
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.15 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij"))) (LOOP FOR I FROM 0 TO 5 COLLECT (MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET I))) ("abcde" "bcdef" "cdefg" "defgh" "efghi" "fghij"))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.16 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij"))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 10)) "")
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.17 (LET ((A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4) (5 6 7 8) (9 10 11 12)))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (8)) :DISPLACED-TO A)) #(1 2 3 4 5 6 7 8))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.18 (LET ((A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4) (5 6 7 8) (9 10 11 12)))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (8)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 3)) #(4 5 6 7 8 9 10 11))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.19 (LET ((A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4) (5 6 7 8) (9 10 11 12)))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 4)) #<(Array T (2 4)) C115CD63>)
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.20 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((A B C D) (E F G H) (I J K L)) ((M N O P) (Q R S T) (U V W X))))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (24)) :DISPLACED-TO A)) #(A B C D E F G H I J K L M N O P Q R S T U V W X))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.21 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((A B C D) (E F G H) (I J K L)) ((M N O P) (Q R S T) (U V W X))))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (3 8)) :DISPLACED-TO A)) #<(Array T (3 8)) C1181C03>)
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.22 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((A B C D) (E F G H) (I J K L)) ((M N O P) (Q R S T) (U V W X))))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 5)) #(F G H I J K L M N O))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.23 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((A B C D) (E F G H) (I J K L)) ((M N O P) (Q R S T) (U V W X))))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 5 :FILL-POINTER T)) #(F G H I J K L M N O))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.24 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((A B C D) (E F G H) (I J K L)) ((M N O P) (Q R S T) (U V W X))))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 5 :FILL-POINTER 5)) #(F G H I J))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.25 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((A B C D) (E F G H) (I J K L)) ((M N O P) (Q R S T) (U V W X))))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 5 :ADJUSTABLE T)) #(F G H I J K L M N O))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.26 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((A B C D) (E F G H) (I J K L)) ((M N O P) (Q R S T) (U V W X))))))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 5 :FILL-POINTER 8 :ADJUSTABLE T)) #(F G H I J K L M))
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.27 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER T))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO A)) #<(Array T (2 4)) C11F0C33>)
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.28 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 4))) (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO A)) #<(Array T (2 4)) C11FE893>)
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.29 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 0))) (PROG1 (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO A) (LOOP FOR I BELOW 10 DO (SETF (AREF A I) (1+ I))))) #<(Array T (2 4)) C120C4F3>)
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.30 (LET* ((A1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 0)) (A2 (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO A1))) (PROG1 (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO A2) (LOOP FOR I BELOW 10 DO (SETF (AREF A2 I) (1+ I))))) #<(Array T (2 4)) C121C0F3>)
;; Loading (DEFTEST MAKE-ARRAY.DISPLACED.31 (LET* ((A1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 0)) (A2 (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO A1))) (PROG1 (MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO A2) (LOOP FOR I BELOW 10 DO (SETF (AREF A1 I) (1+ I))))) #<(Array T (2 4)) C122CB33>)
;; Loading (DEFTEST MAKE-ARRAY.ALLOW-OTHER-KEYS.1 (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE A) :ALLOW-OTHER-KEYS T) #(A A A A A))
;; Loading (DEFTEST MAKE-ARRAY.ALLOW-OTHER-KEYS.2 (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE A) :ALLOW-OTHER-KEYS NIL) #(A A A A A))
;; Loading (DEFTEST MAKE-ARRAY.ALLOW-OTHER-KEYS.3 (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE A) :ALLOW-OTHER-KEYS T (QUOTE #:BAD) T) #(A A A A A))
;; Loading (DEFTEST MAKE-ARRAY.ALLOW-OTHER-KEYS.4 (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE A) :BAD T :ALLOW-OTHER-KEYS T) #(A A A A A))
;; Loading (DEFTEST MAKE-ARRAY.ALLOW-OTHER-KEYS.5 (MAKE-ARRAY (QUOTE (5)) :BAD T :INITIAL-ELEMENT (QUOTE A) :ALLOW-OTHER-KEYS T) #(A A A A A))
;; Loading (DEFTEST MAKE-ARRAY.ALLOW-OTHER-KEYS.6 (MAKE-ARRAY (QUOTE (5)) :BAD T :INITIAL-ELEMENT (QUOTE A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :ALSO-BAD NIL) #(A A A A A))
;; Loading (DEFTEST MAKE-ARRAY.ALLOW-OTHER-KEYS.7 (MAKE-ARRAY (QUOTE (5)) :ALLOW-OTHER-KEYS T :INITIAL-ELEMENT (QUOTE A)) #(A A A A A))
;; Loading (DEFTEST MAKE-ARRAY.KEYWORDS.8. (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE X) :INITIAL-ELEMENT (QUOTE A)) #(X X X X X))
;; Loading (DEFTEST MAKE-ARRAY.ERROR.1 (SIGNALS-ERROR (MAKE-ARRAY) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-ARRAY.ERROR.2 (SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-ARRAY.ERROR.3 (SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) :ALLOW-OTHER-KEYS NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-ARRAY.ERROR.4 (SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-ARRAY.ERROR.5 (SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) :BAD) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-ARRAY.ERROR.6 (SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-ARRAY.ORDER.1 (LET ((I 0) A B C E) (VALUES (MAKE-ARRAY (PROGN (SETF A (INCF I)) 5) :INITIAL-ELEMENT (PROGN (SETF B (INCF I)) (QUOTE A)) :FILL-POINTER (PROGN (SETF C (INCF I)) NIL) :ELEMENT-TYPE (PROGN (SETF E (INCF I)) T)) I A B C E)) #(A A A A A) 4 1 2 3 4)
;; Loading (DEFTEST MAKE-ARRAY.ORDER.2 (LET ((I 0) A B D E) (VALUES (MAKE-ARRAY (PROGN (SETF A (INCF I)) 5) :ELEMENT-TYPE (PROGN (SETF B (INCF I)) T) :FILL-POINTER (PROGN (SETF D (INCF I)) NIL) :INITIAL-ELEMENT (PROGN (SETF E (INCF I)) (QUOTE A))) I A B D E)) #(A A A A A) 4 1 2 3 4)
;; Loading (LOAD "adjust-array.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/adjust-array.lsp C12D2DA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN LISTIFY-FORM (FORM) (COND ((INTEGERP FORM) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA FORM))))) ((NULL FORM) NIL) ((AND (CONSP FORM) (EQ (CAR FORM) (QUOTE QUOTE)) (CONSP (CADR FORM))) FORM) (T (SYSTEM.INTERNALS::BACKQUOTE (LET ((X (SYSTEM.INTERNALS::BQ-COMMA FORM))) (IF (LISTP X) X (LIST X)))))))
;; Loading (DEFMACRO DEF-ADJUST-ARRAY-TEST (NAME ARGS1 ARGS2 EXPECTED-RESULT) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET* ((A1 (MAKE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS1))) (A2 (ADJUST-ARRAY A1 (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS2)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P A1)) (EQ A1 A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P A1) (EQUAL (ARRAY-DIMENSIONS A1) (SYSTEM.INTERNALS::BQ-COMMA (LISTIFY-FORM (FIRST ARGS1)))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS A2) (SYSTEM.INTERNALS::BQ-COMMA (LISTIFY-FORM (FIRST ARGS2))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (OR (MEMBER :DISPLACED-TO ARGS1) (MEMBER :DISPLACED-TO ARGS2)) (LIST (QUOTE (ASSERT (NOT (ARRAY-DISPLACEMENT A2))))))) A2) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-RESULT))))
;; Loading (DEFMACRO DEF-ADJUST-ARRAY-FP-TEST (NAME ARGS1 ARGS2 MISC &REST EXPECTED-RESULTS) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET* ((A1 (MAKE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS1))) (A2 (ADJUST-ARRAY A1 (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS2)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P A1)) (EQ A1 A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P A1) (EQUAL (ARRAY-DIMENSIONS A1) (SYSTEM.INTERNALS::BQ-COMMA (LISTIFY-FORM (FIRST ARGS1)))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS A2) (SYSTEM.INTERNALS::BQ-COMMA (LISTIFY-FORM (FIRST ARGS2))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (OR (MEMBER :DISPLACED-TO ARGS1) (MEMBER :DISPLACED-TO ARGS2)) (LIST (QUOTE (ASSERT (NOT (ARRAY-DISPLACEMENT A2))))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN MISC (LIST MISC))) (VALUES (FILL-POINTER A2) A2)) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN EXPECTED-RESULTS))))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.1 (5 :INITIAL-CONTENTS (QUOTE (A B C D E))) (4) #(A B C D))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.2 (5 :INITIAL-CONTENTS (QUOTE (A B C D E))) (8 :INITIAL-ELEMENT (QUOTE X)) #(A B C D E X X X))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.3 (5 :INITIAL-CONTENTS (QUOTE (A B C D E))) (4 :INITIAL-CONTENTS (QUOTE (W X Y Z))) #(W X Y Z))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.4 (5 :INITIAL-CONTENTS (QUOTE (A B C D E))) (8 :INITIAL-CONTENTS (QUOTE (8 7 6 5 4 3 2 1))) #(8 7 6 5 4 3 2 1))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.5 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3) (4) (ASSERT (EQ (AREF A2 3) (QUOTE D))) 3 #(A B C))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.6 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3) (4 :FILL-POINTER NIL) (ASSERT (EQ (AREF A2 3) (QUOTE D))) 3 #(A B C))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.7 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3) (4 :FILL-POINTER T) NIL 4 #(A B C D))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.8 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3) (4 :FILL-POINTER 2) (PROGN (ASSERT (EQ (AREF A2 2) (QUOTE C))) (ASSERT (EQ (AREF A2 3) (QUOTE D)))) 2 #(A B))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.9 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3) (8 :FILL-POINTER 5 :INITIAL-ELEMENT (QUOTE X)) (ASSERT (EQUAL (LIST (AREF A2 5) (AREF A2 6) (AREF A2 7)) (QUOTE (X X X)))) 5 #(A B C D E))
;; Loading (DEFTEST ADJUST-ARRAY.10 (LET* ((A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (A B C D E)))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO NIL))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.11 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (X A B C D E Y)))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1)) (A2 (ADJUST-ARRAY A1 4))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.12 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (A B C D E)))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 0))) A2) #(1 2 3 4))
;; Loading (DEFTEST ADJUST-ARRAY.13 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (A B C D E)))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 2))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 2))) A2) #(3 4 5 6))
;; Loading (DEFTEST ADJUST-ARRAY.14 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1)) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 0))) A2) #(1 2 3 4))
;; Loading (DEFTEST ADJUST-ARRAY.15 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1)) (A2 (MAKE-ARRAY 4 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 1)) (A3 (ADJUST-ARRAY A2 4 :DISPLACED-TO A1))) A3) #(2 3 4 5))
;; Loading (DEFTEST ADJUST-ARRAY.16 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1)) (A2 (ADJUST-ARRAY A1 5 :DISPLACED-TO A0))) A2) #(1 2 3 4 5))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.17 (NIL :INITIAL-ELEMENT (QUOTE X)) (NIL) #<(Array T Nil) C14B6903>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.18 (NIL :INITIAL-ELEMENT (QUOTE X)) (NIL :INITIAL-CONTENTS (QUOTE Y)) #<(Array T Nil) C14C77D3>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.19 (NIL :INITIAL-ELEMENT (QUOTE X)) (NIL :INITIAL-ELEMENT (QUOTE Y)) #<(Array T Nil) C14D8DC3>)
;; Loading (DEFTEST ADJUST-ARRAY.20 (LET* ((A0 (MAKE-ARRAY NIL :INITIAL-ELEMENT (QUOTE X))) (A1 (MAKE-ARRAY NIL :DISPLACED-TO A0)) (A2 (ADJUST-ARRAY A1 NIL))) A2) #<(Array T Nil) C14ECD33>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.21 ((QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4 5) (3 4 5 6 7) (5 6 7 8 9) (7 8 9 1 2)))) ((QUOTE (2 3))) #<(Array T (2 3)) C14F9FF3>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.22 ((QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4 5) (3 4 5 6 7) (5 6 7 8 9) (7 8 9 1 2)))) ((QUOTE (6 8)) :INITIAL-ELEMENT 0) #<(Array T (6 8)) C1518A13>)
;; Loading (DEFTEST ADJUST-ARRAY.23 (LET* ((A1 (MAKE-ARRAY (QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ((#\1 #\2 #\3 #\4 #\5) (#\3 #\4 #\5 #\6 #\7) (#\5 #\6 #\7 #\8 #\9) (#\7 #\8 #\9 #\1 #\2))) :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A2) (QUOTE (2 3))))) (ASSERT (NOT (TYPEP 0 (ARRAY-ELEMENT-TYPE A2)))) A2) #<(Array T (2 3)) C153D3F3>)
;; Loading (DEFTEST ADJUST-ARRAY.24 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY (EXPAND-IN-CURRENT-ENV (%M A)) (QUOTE (4))))) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.25 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (EXPAND-IN-CURRENT-ENV (%M (QUOTE (4))))))) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.26 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (4)) (EXPAND-IN-CURRENT-ENV (%M :ELEMENT-TYPE)) T))) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.27 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (4)) :ELEMENT-TYPE (EXPAND-IN-CURRENT-ENV (%M T))))) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.28 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (6)) (EXPAND-IN-CURRENT-ENV (%M :INITIAL-ELEMENT)) 17))) #(A B C D 17 17))
;; Loading (DEFTEST ADJUST-ARRAY.29 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (7)) :INITIAL-ELEMENT (EXPAND-IN-CURRENT-ENV (%M 5))))) #(A B C D 5 5 5))
;; Loading (DEFTEST ADJUST-ARRAY.30 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (6)) (EXPAND-IN-CURRENT-ENV (%M :INITIAL-CONTENTS)) (QUOTE (1 2 3 4 5 6))))) #(1 2 3 4 5 6))
;; Loading (DEFTEST ADJUST-ARRAY.31 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (3)) :INITIAL-CONTENTS (EXPAND-IN-CURRENT-ENV (%M "ABC"))))) #(#\A #\B #\C))
;; Loading (DEFTEST ADJUST-ARRAY.32 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (4)) (EXPAND-IN-CURRENT-ENV (%M :FILL-POINTER)) NIL))) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.33 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (4)) :FILL-POINTER (EXPAND-IN-CURRENT-ENV (%M NIL))))) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.34 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (4)) (EXPAND-IN-CURRENT-ENV (%M :DISPLACED-TO)) NIL))) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.35 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))))) (ADJUST-ARRAY A (QUOTE (4)) :DISPLACED-TO (EXPAND-IN-CURRENT-ENV (%M NIL))))) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.36 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D)))) (C (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8))))) (ADJUST-ARRAY A (QUOTE (3)) :DISPLACED-TO C (EXPAND-IN-CURRENT-ENV (%M :DISPLACED-INDEX-OFFSET)) 2))) #(3 4 5))
;; Loading (DEFTEST ADJUST-ARRAY.37 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D)))) (C (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8))))) (ADJUST-ARRAY A (QUOTE (5)) :DISPLACED-TO C :DISPLACED-INDEX-OFFSET (EXPAND-IN-CURRENT-ENV (%M 1))))) #(2 3 4 5 6))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.ADJUSTABLE.1 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :ADJUSTABLE T) (4) #(A B C D))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.ADJUSTABLE.2 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :ADJUSTABLE T) (8 :INITIAL-ELEMENT (QUOTE X)) #(A B C D E X X X))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.ADJUSTABLE.3 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :ADJUSTABLE T) (4 :INITIAL-CONTENTS (QUOTE (W X Y Z))) #(W X Y Z))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.ADJUSTABLE.4 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :ADJUSTABLE T) (8 :INITIAL-CONTENTS (QUOTE (8 7 6 5 4 3 2 1))) #(8 7 6 5 4 3 2 1))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.ADJUSTABLE.5 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3 :ADJUSTABLE T) (4) (ASSERT (EQ (AREF A2 3) (QUOTE D))) 3 #(A B C))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.ADJUSTABLE.6 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3 :ADJUSTABLE T) (4 :FILL-POINTER NIL) (ASSERT (EQ (AREF A2 3) (QUOTE D))) 3 #(A B C))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.ADJUSTABLE.7 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3 :ADJUSTABLE T) (4 :FILL-POINTER T) NIL 4 #(A B C D))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.ADJUSTABLE.8 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3 :ADJUSTABLE T) (4 :FILL-POINTER 2) (ASSERT (EQUAL (LIST (AREF A2 2) (AREF A2 3)) (QUOTE (C D)))) 2 #(A B))
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.ADJUSTABLE.9 (5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3 :ADJUSTABLE T) (8 :FILL-POINTER 5 :INITIAL-ELEMENT (QUOTE X)) (ASSERT (EQUAL (LIST (AREF A2 5) (AREF A2 6) (AREF A2 7)) (QUOTE (X X X)))) 5 #(A B C D E))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST ADJUST-ARRAY.ADJUSTABLE.10 (LET* ((A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (A B C D E)) :ADJUSTABLE T)) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO NIL))) (ASSERT (EQ A1 A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.ADJUSTABLE.11 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (X A B C D E Y)))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T)) (A2 (ADJUST-ARRAY A1 4))) (ASSERT (EQ A1 A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) #(A B C D))
;; Loading (DEFTEST ADJUST-ARRAY.ADJUSTABLE.12 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (X A B C D E Y)))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T)) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0))) (ASSERT (EQ A1 A2)) A2) #(X A B C))
;; Loading (DEFTEST ADJUST-ARRAY.ADJUSTABLE.13 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (X A B C D E Y)))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T)) (A2 (MAKE-ARRAY 4 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 1))) (ASSERT (EQ A1 (ADJUST-ARRAY A1 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 2))) A2) #(C D E Y))
;; Loading (LOOP FOR ELEMENT-TYPE IN (QUOTE (CHARACTER BASE-CHAR)) FOR FORMS = (SYSTEM.INTERNALS::BACKQUOTE ((DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.1 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde") (4 :ELEMENT-TYPE (QUOTE CHARACTER)) "abcd") (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.2 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde") (8 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\x) "abcdexxx") (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.3 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde") (4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "wxyz") "wxyz") (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.4 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde") (8 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "87654321") "87654321") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.5 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3) (4 :ELEMENT-TYPE (QUOTE CHARACTER)) (ASSERT (EQL (AREF A2 3) #\d)) 3 "abc") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.6 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3) (4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER NIL) (ASSERT (EQL (AREF A2 3) #\d)) 3 "abc") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.7 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3) (4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER T) NIL 4 "abcd") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.8 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3) (4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 2) (PROGN (ASSERT (EQL (AREF A2 2) #\c)) (ASSERT (EQL (AREF A2 3) #\d))) 2 "ab") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.9 (5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3) (8 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-ELEMENT #\x) (ASSERT (EQUAL (LIST (AREF A2 5) (AREF A2 6) (AREF A2 7)) (QUOTE (#\x #\x #\x)))) 5 "abcde") (DEFTEST ADJUST-ARRAY.STRING.10 (LET* ((A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) "abcd") (DEFTEST ADJUST-ARRAY.STRING.11 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) "abcd") (DEFTEST ADJUST-ARRAY.STRING.12 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 0))) A2) "1234") (DEFTEST ADJUST-ARRAY.STRING.13 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 2))) A2) "3456") (DEFTEST ADJUST-ARRAY.STRING.14 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 0))) A2) "1234") (DEFTEST ADJUST-ARRAY.STRING.15 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (MAKE-ARRAY 4 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (A3 (ADJUST-ARRAY A2 4 :DISPLACED-TO A1 :ELEMENT-TYPE (QUOTE CHARACTER)))) A3) "2345") (DEFTEST ADJUST-ARRAY.STRING.16 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 5 :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) A2) "12345") (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.17 (NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)) (NIL) #<(Array Character Nil) 81048E73>) (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.18 (NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)) (NIL :INITIAL-CONTENTS #\y :ELEMENT-TYPE (QUOTE CHARACTER)) #<(Array Character Nil) 81050183>) (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.19 (NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)) (NIL :INITIAL-ELEMENT #\y :ELEMENT-TYPE (QUOTE CHARACTER)) #<(Array Character Nil) 81057433>) (DEFTEST ADJUST-ARRAY.STRING.20 (LET* ((A0 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY NIL :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) A2) #<(Array Character Nil) 81061DC3>) (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.1 (5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (4 :ELEMENT-TYPE (QUOTE CHARACTER)) "abcd") (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.2 (5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (8 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)) "abcdexxx") (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.3 (5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (4 :INITIAL-CONTENTS "wxyz" :ELEMENT-TYPE (QUOTE CHARACTER)) "wxyz") (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.4 (5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (8 :INITIAL-CONTENTS "87654321" :ELEMENT-TYPE (QUOTE CHARACTER)) "87654321") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.5 (5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\Space) (ASSERT (EQL (AREF A2 3) #\d)) 3 "abc") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.6 (5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (4 :FILL-POINTER NIL :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\?) (ASSERT (EQL (AREF A2 3) #\d)) 3 "abc") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.7 (5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (4 :FILL-POINTER T :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\!) NIL 4 "abcd") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.8 (5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (4 :FILL-POINTER 2 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\X) (ASSERT (EQUAL (LIST (AREF A2 2) (AREF A2 3)) (QUOTE (#\c #\d)))) 2 "ab") (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.STRING.ADJUSTABLE.9 (5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)) (8 :FILL-POINTER 5 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)) (ASSERT (EQUAL (LIST (AREF A2 5) (AREF A2 6) (AREF A2 7)) (QUOTE (#\x #\x #\x)))) 5 "abcde") (DEFTEST ADJUST-ARRAY.STRING.ADJUSTABLE.10 (LET* ((A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ A1 A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) "abcd") (DEFTEST ADJUST-ARRAY.STRING.ADJUSTABLE.11 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ A1 A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) "abcd") (DEFTEST ADJUST-ARRAY.STRING.ADJUSTABLE.12 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ A1 A2)) A2) "xabc") (DEFTEST ADJUST-ARRAY.STRING.ADJUSTABLE.13 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (A2 (MAKE-ARRAY 4 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ A1 (ADJUST-ARRAY A1 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE CHARACTER)))) A2) "cdey"))) FOR FORMS2 = (SUBST ELEMENT-TYPE (QUOTE CHARACTER) FORMS) FOR FORMS3 = (MAPCAR (FUNCTION (LAMBDA (FORM) (DESTRUCTURING-BIND (DT NAME . BODY) FORM (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA DT) (SYSTEM.INTERNALS::BQ-COMMA (IF (EQL ELEMENT-TYPE (QUOTE CHARACTER)) NAME (INTERN (REPLACE (COPY-SEQ (SYMBOL-NAME NAME)) "BASEST" :START1 13 :END1 19) (SYMBOL-PACKAGE NAME)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN BODY)))))) FORMS2) DO (EVAL (SYSTEM.INTERNALS::BACKQUOTE (PROGN (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN FORMS3)))))
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.21 ((QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ("12345" "34567" "56789" "78912")) :ELEMENT-TYPE (QUOTE CHARACTER)) ((QUOTE (2 3))) #<(Array Character (2 3)) 81593213>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.STRING.22 ((QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ("12345" "34567" "56789" "78912")) :ELEMENT-TYPE (QUOTE CHARACTER)) ((QUOTE (6 8)) :INITIAL-ELEMENT #\0 :ELEMENT-TYPE (QUOTE CHARACTER)) #<(Array Character (6 8)) 815B0433>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.1 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100) (4 :ELEMENT-TYPE (QUOTE BIT)) #*0110)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.2 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100) (8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1) #*01100111)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.3 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100) (4 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*1011) #*1011)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.4 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100) (8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*11110000) #*11110000)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.5 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100 :FILL-POINTER 3) (4 :ELEMENT-TYPE (QUOTE BIT)) (ASSERT (EQL (AREF A2 3) 0)) 3 #*011)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.6 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100 :FILL-POINTER 3) (4 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER NIL) (ASSERT (EQL (AREF A2 3) 0)) 3 #*011)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.7 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100 :FILL-POINTER 3) (4 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER T) NIL 4 #*0110)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.8 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100 :FILL-POINTER 3) (4 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 2) (PROGN (ASSERT (EQL (AREF A2 2) 1)) (ASSERT (EQL (AREF A2 3) 0))) 2 #*01)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.9 (5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100 :FILL-POINTER 3) (8 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5 :INITIAL-ELEMENT 1) (ASSERT (EQUAL (LIST (AREF A2 5) (AREF A2 6) (AREF A2 7)) (QUOTE (1 1 1)))) 5 #*01100)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.10 (LET* ((A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100)) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) #*0110)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.11 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*0011001 :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 4 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) #*0110)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.12 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1010101 :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS #*01100 :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 0))) A2) #*1010)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.13 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1011101 :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS #*01100 :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 2))) A2) #*1110)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.14 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1011001 :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)) (LIST A0 0))) A2) #*1011)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.15 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1100010 :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (A2 (MAKE-ARRAY 4 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (A3 (ADJUST-ARRAY A2 4 :DISPLACED-TO A1 :ELEMENT-TYPE (QUOTE BIT)))) A3) #*1000)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.16 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1011011 :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 5 :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE BIT)))) A2) #*10110)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.17 (NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)) (NIL) #<(Array Bit Nil) 81728533>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.18 (NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)) (NIL :INITIAL-CONTENTS 1 :ELEMENT-TYPE (QUOTE BIT)) #<(Array Bit Nil) 8173D1E3>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.19 (NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)) (NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)) #<(Array Bit Nil) 81752A73>)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.20 (LET* ((A0 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY NIL :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 NIL :ELEMENT-TYPE (QUOTE BIT)))) A2) #<(Array Bit Nil) 8176B783>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.21 ((QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE (#*11100 #*00110 #*00001 #*11111)) :ELEMENT-TYPE (QUOTE BIT)) ((QUOTE (2 3))) #<(Array Bit (2 3)) 817798F3>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.22 ((QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE (#*11100 #*00110 #*00001 #*11111)) :ELEMENT-TYPE (QUOTE BIT)) ((QUOTE (6 8)) :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)) #<(Array Bit (6 8)) 81795BD3>)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.1 (5 :INITIAL-CONTENTS (QUOTE (1 0 1 1 0)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (4 :ELEMENT-TYPE (QUOTE BIT)) #*1011)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.2 (5 :INITIAL-CONTENTS (QUOTE (1 0 1 0 1)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (8 :INITIAL-ELEMENT (QUOTE 1) :ELEMENT-TYPE (QUOTE BIT)) #*10101111)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.3 (5 :INITIAL-CONTENTS (QUOTE (0 1 0 1 0)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (4 :INITIAL-CONTENTS (QUOTE (1 1 1 0)) :ELEMENT-TYPE (QUOTE BIT)) #*1110)
;; Loading (DEF-ADJUST-ARRAY-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.4 (5 :INITIAL-CONTENTS (QUOTE (1 0 0 1 0)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (8 :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 0)) :ELEMENT-TYPE (QUOTE BIT)) #*01011010)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.5 (5 :INITIAL-CONTENTS (QUOTE (1 1 1 0 0)) :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (4 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0) (ASSERT (EQL (AREF A2 3) 0)) 3 #*111)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.6 (5 :INITIAL-CONTENTS (QUOTE (0 0 0 1 1)) :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (4 :FILL-POINTER NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1) (ASSERT (EQL (AREF A2 3) 1)) 3 #*000)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.7 (5 :INITIAL-CONTENTS (QUOTE (1 1 0 1 1)) :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (4 :FILL-POINTER T :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1) NIL 4 #*1101)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.8 (5 :INITIAL-CONTENTS (QUOTE (0 1 1 1 0)) :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (4 :FILL-POINTER 2 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0) (ASSERT (EQUAL (LIST (AREF A2 2) (AREF A2 3)) (QUOTE (1 1)))) 2 #*01)
;; Loading (DEF-ADJUST-ARRAY-FP-TEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.9 (5 :INITIAL-CONTENTS (QUOTE (1 0 0 0 1)) :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT)) (8 :FILL-POINTER 5 :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)) (ASSERT (EQUAL (LIST (AREF A2 5) (AREF A2 6) (AREF A2 7)) (QUOTE (1 1 1)))) 5 #*10001)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.10 (LET* ((A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (0 1 1 0 1)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (EQ A1 A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) #*0110)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.11 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 1 0)) :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 4 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (EQ A1 A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) A2) #*1011)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.12 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (0 0 1 1 1 1 1)) :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (A2 (ADJUST-ARRAY A1 4 :DISPLACED-TO A0 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (EQ A1 A2)) A2) #*0011)
;; Loading (DEFTEST ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.13 (LET* ((A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 0 0 0 0 0 1)) :ELEMENT-TYPE (QUOTE BIT))) (A1 (MAKE-ARRAY 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (A2 (MAKE-ARRAY 4 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (EQ A1 (ADJUST-ARRAY A1 5 :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE BIT)))) A2) #*0001)
;; Loading (DEFTEST ADJUST-ARRAY.ERROR.1 (SIGNALS-ERROR (ADJUST-ARRAY) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJUST-ARRAY.ERROR.2 (SIGNALS-ERROR (ADJUST-ARRAY (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJUST-ARRAY.ERROR.3 (SIGNALS-ERROR (ADJUST-ARRAY (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL) 8 :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJUST-ARRAY.ERROR.4 (SIGNALS-ERROR (ADJUST-ARRAY (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL) 8 :INITIAL-ELEMENT) PROGRAM-ERROR) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST ADJUST-ARRAY.ERROR.5 (SIGNALS-ERROR (ADJUST-ARRAY (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL) 8 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJUST-ARRAY.ERROR.6 (SIGNALS-ERROR (LET ((A (MAKE-ARRAY 5 :INITIAL-ELEMENT (QUOTE X)))) (ADJUST-ARRAY A :FILL-POINTER 4)) ERROR) T)
;; Loading (LOAD "adjustable-array-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/adjustable-array-p.lsp C0FAFB37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.1 (NOTNOT (ADJUSTABLE-ARRAY-P (MAKE-ARRAY (QUOTE (5)) :ADJUSTABLE T))) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.2 (NOTNOT (ADJUSTABLE-ARRAY-P (MAKE-ARRAY NIL :ADJUSTABLE T))) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.3 (NOTNOT (ADJUSTABLE-ARRAY-P (MAKE-ARRAY (QUOTE (2 3)) :ADJUSTABLE T))) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.4 (NOTNOT (ADJUSTABLE-ARRAY-P (MAKE-ARRAY (QUOTE (2 2 2)) :ADJUSTABLE T))) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.5 (NOTNOT (ADJUSTABLE-ARRAY-P (MAKE-ARRAY (QUOTE (2 2 2 2)) :ADJUSTABLE T))) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.6 (MACROLET ((%M (Z) Z)) (LET ((A (MAKE-ARRAY (QUOTE (5)) :ADJUSTABLE T))) (NOTNOT (ADJUSTABLE-ARRAY-P (EXPAND-IN-CURRENT-ENV (%M A)))))) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.ORDER.1 (LET ((I 0) X) (VALUES (NOTNOT (ADJUSTABLE-ARRAY-P (PROGN (SETF X (INCF I)) (MAKE-ARRAY (QUOTE (5)) :ADJUSTABLE T)))) I X)) T 1 1)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.ERROR.1 (SIGNALS-ERROR (ADJUSTABLE-ARRAY-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.ERROR.2 (SIGNALS-ERROR (ADJUSTABLE-ARRAY-P "aaa" NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.ERROR.3 (SIGNALS-TYPE-ERROR X 10 (ADJUSTABLE-ARRAY-P X)) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION ADJUSTABLE-ARRAY-P) (FUNCTION ARRAYP)) NIL)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.ERROR.5 (SIGNALS-ERROR (LOCALLY (ADJUSTABLE-ARRAY-P 10)) TYPE-ERROR) T)
;; Loading (DEFTEST ADJUSTABLE-ARRAY-P.ERROR.6 (SIGNALS-ERROR (LET ((X 10)) (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (ADJUSTABLE-ARRAY-P X))) TYPE-ERROR) T)
;; Loading (LOAD "array-displacement.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-displacement.lsp C1029647>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.7 (LET* ((A (MAKE-ARRAY (QUOTE (10)))) (B (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO A))) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT B) (AND (EQT A DT) (EQLT DISP 0)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.8 (LET* ((A (MAKE-ARRAY (QUOTE (10)))) (B (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 2))) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT B) (AND (EQT A DT) (EQLT DISP 2)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.9 (LET* ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (B (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT B) (AND (EQT A DT) (EQLT DISP 2)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.10 (LET* ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (B (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO A :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT B) (AND (EQT A DT) (EQLT DISP 0)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.11 (LET* ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT))) (B (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE BIT)))) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT B) (AND (EQT A DT) (EQLT DISP 2)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.12 (LET* ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT))) (B (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO A :ELEMENT-TYPE (QUOTE BIT)))) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT B) (AND (EQT A DT) (EQLT DISP 0)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.13 (LET* ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE (INTEGER 0 255)))) (B (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE (INTEGER 0 255))))) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT B) (AND (EQT A DT) (EQLT DISP 2)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.14 (LET* ((A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE (INTEGER 0 255)))) (B (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO A :ELEMENT-TYPE (QUOTE (INTEGER 0 255))))) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT B) (AND (EQT A DT) (EQLT DISP 0)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.15 (LET* ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)))) (B (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 2))) (MACROLET ((%M (Z) Z)) (MULTIPLE-VALUE-BIND (X Y) (ARRAY-DISPLACEMENT (EXPAND-IN-CURRENT-ENV (%M B))) (VALUES (EQLT X A) Y)))) T 2)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.ORDER.1 (LET* ((A (MAKE-ARRAY (QUOTE (10)))) (B (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO A)) (I 0)) (MULTIPLE-VALUE-BIND* (DT DISP) (ARRAY-DISPLACEMENT (PROGN (INCF I) B)) (AND (EQL I 1) (EQT A DT) (EQLT DISP 0)))) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.ERROR.1 (SIGNALS-ERROR (ARRAY-DISPLACEMENT) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.ERROR.2 (SIGNALS-ERROR (ARRAY-DISPLACEMENT #(A B C) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ARRAY-DISPLACEMENT) (FUNCTION ARRAYP)) NIL)
;; Loading (DEFTEST ARRAY-DISPLACEMENT.ERROR.4 (SIGNALS-TYPE-ERROR X NIL (ARRAY-DISPLACEMENT X)) T)
;; Loading (LOAD "array-dimension.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-dimension.lsp C1107DD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-DIMENSION.1 (ARRAY-DIMENSION #(0 1 2 3) 0) 4)
;; Loading (DEFTEST ARRAY-DIMENSION.2 (ARRAY-DIMENSION "abcdef" 0) 6)
;; Loading (DEFTEST ARRAY-DIMENSION.3 (ARRAY-DIMENSION #<(Array T (2 4)) C1123D73> 0) 2)
;; Loading (DEFTEST ARRAY-DIMENSION.4 (ARRAY-DIMENSION #<(Array T (2 4)) C1129763> 1) 4)
;; Loading (DEFTEST ARRAY-DIMENSION.5 (LET ((A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5))) (ARRAY-DIMENSION A 0)) 10)
;; Loading (DEFTEST ARRAY-DIMENSION.6 (LET ((A (MAKE-ARRAY (QUOTE (10)) :ADJUSTABLE T))) (VALUES (ARRAY-DIMENSION A 0) (PROGN (ADJUST-ARRAY A (QUOTE (20))) (ARRAY-DIMENSION A 0)))) 10 20)
;; Loading (DEFTEST ARRAY-DIMENSION.7 (MACROLET ((%M (Z) Z)) (ARRAY-DIMENSION (EXPAND-IN-CURRENT-ENV (%M "abc")) 0)) 3)
;; Loading (DEFTEST ARRAY-DIMENSION.8 (MACROLET ((%M (Z) Z)) (ARRAY-DIMENSION #<(Array T (3 2)) C1148223> (EXPAND-IN-CURRENT-ENV (%M 0)))) 3)
;; Loading (DEFTEST ARRAY-DIMENSION.ORDER.1 (LET ((I 0) A B) (VALUES (ARRAY-DIMENSION (PROGN (SETF A (INCF I)) #(A B C D)) (PROGN (SETF B (INCF I)) 0)) I A B)) 4 2 1 2)
;; Loading (DEFTEST ARRAY-DIMENSION.ERROR.1 (SIGNALS-ERROR (ARRAY-DIMENSION) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-DIMENSION.ERROR.2 (SIGNALS-ERROR (ARRAY-DIMENSION #(A B C)) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-DIMENSION.ERROR.3 (SIGNALS-ERROR (ARRAY-DIMENSION #(A B C) 0 NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "array-dimensions.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-dimensions.lsp C1176D47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-DIMENSIONS.1 (ARRAY-DIMENSIONS #<(Array T Nil) C1189713>) NIL)
;; Loading (DEFTEST ARRAY-DIMENSIONS.2 (ARRAY-DIMENSIONS #(A B C D)) (4))
;; Loading (DEFTEST ARRAY-DIMENSIONS.3 (ARRAY-DIMENSIONS #*0011011011) (10))
;; Loading (DEFTEST ARRAY-DIMENSIONS.4 (ARRAY-DIMENSIONS "abcdef") (6))
;; Loading (DEFTEST ARRAY-DIMENSIONS.5 (ARRAY-DIMENSIONS #<(Array T (4 3)) C119C3E3>) (4 3))
;; Loading (DEFTEST ARRAY-DIMENSIONS.6 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :ADJUSTABLE T))) (VALUES (ARRAY-DIMENSION A 0) (ARRAY-DIMENSION A 1) (ARRAY-DIMENSION A 2))) 2 3 4)
;; Loading (DEFTEST ARRAY-DIMENSIONS.7 (LET ((A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5))) (ARRAY-DIMENSION A 0)) 10)
;; Loading (DEFTEST ARRAY-DIMENSIONS.8 (MACROLET ((%M (Z) Z)) (ARRAY-DIMENSIONS (EXPAND-IN-CURRENT-ENV (%M #<(Array T (3 2)) C11B5133>)))) (3 2))
;; Loading (DEFTEST ARRAY-DIMENSIONS.ERROR.1 (SIGNALS-ERROR (ARRAY-DIMENSIONS) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-DIMENSIONS.ERROR.2 (SIGNALS-ERROR (ARRAY-DIMENSIONS #(A B C) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-DIMENSIONS.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ARRAY-DIMENSIONS) (FUNCTION ARRAYP)) NIL)
;; Loading (DEFTEST ARRAY-DIMENSIONS.ERROR.4 (SIGNALS-TYPE-ERROR X NIL (ARRAY-DIMENSIONS X)) T)
;; Loading (DEFTEST ARRAY-DIMENSIONS.ERROR.5 (SIGNALS-ERROR (LOCALLY (ARRAY-DIMENSIONS NIL)) TYPE-ERROR) T)
;; Loading (LOAD "array-element-type.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-element-type.lsp C11E2A27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-ELEMENT-TYPE.1 (MACROLET ((%M (Z) Z)) (NOTNOT (ARRAY-ELEMENT-TYPE (EXPAND-IN-CURRENT-ENV (%M #(A B C)))))) T)
;; Loading (DEFTEST ARRAY-ELEMENT-TYPE.ORDER.1 (LET ((I 0)) (ARRAY-ELEMENT-TYPE (PROGN (INCF I) #(A B C))) I) 1)
;; Loading (DEFTEST ARRAY-ELEMENT-TYPE.ERROR.1 (SIGNALS-ERROR (ARRAY-ELEMENT-TYPE) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-ELEMENT-TYPE.ERROR.2 (SIGNALS-ERROR (ARRAY-ELEMENT-TYPE #(A B C) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-ELEMENT-TYPE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ARRAY-ELEMENT-TYPE) (FUNCTION ARRAYP)) NIL)
;; Loading (DEFTEST ARRAY-ELEMENT-TYPE.ERROR.4 (SIGNALS-TYPE-ERROR X NIL (ARRAY-ELEMENT-TYPE X)) T)
;; Loading (LOAD "array-in-bounds-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-in-bounds-p.lsp C1225337>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.1 (ARRAY-IN-BOUNDS-P #() 0) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.2 (ARRAY-IN-BOUNDS-P #() -1) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.3 (LET ((A #(A B C D))) (LOOP FOR I FROM 0 TO 4 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A I)))) (T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.4 (NOTNOT (ARRAY-IN-BOUNDS-P #<(Array T Nil) C1248893>)) T)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.5 (ARRAY-IN-BOUNDS-P "" 0) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.6 (ARRAY-IN-BOUNDS-P "" -1) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.7 (LET ((A "abcd")) (LOOP FOR I FROM 0 TO 4 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A I)))) (T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.8 (ARRAY-IN-BOUNDS-P #* 0) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.9 (ARRAY-IN-BOUNDS-P #* -1) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.10 (LET ((A #*0110)) (LOOP FOR I FROM 0 TO 4 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A I)))) (T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.11 (LET ((A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5))) (LOOP FOR I FROM -1 TO 10 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A I)))) (NIL T T T T T T T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.12 (LET ((A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (LOOP FOR I FROM -1 TO 10 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A I)))) (NIL T T T T T T T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.13 (LET ((A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\x))) (LOOP FOR I FROM -1 TO 10 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A I)))) (NIL T T T T T T T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.14 (LET ((A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\x))) (LOOP FOR I FROM -1 TO 10 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A I)))) (NIL T T T T T T T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (20)))) (A2 (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO A1))) (LOOP FOR I FROM -1 TO 10 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A2 I)))) (NIL T T T T T T T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (20)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0)) (A2 (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO A1 :ELEMENT-TYPE (QUOTE BIT)))) (LOOP FOR I FROM -1 TO 10 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A2 I)))) (NIL T T T T T T T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.17 (LET* ((A1 (MAKE-ARRAY (QUOTE (20)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\x)) (A2 (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO A1 :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP FOR I FROM -1 TO 10 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A2 I)))) (NIL T T T T T T T T T T NIL))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.18 (LET ((A (MAKE-ARRAY (QUOTE (3 4))))) (LOOP FOR I FROM -1 TO 3 COLLECT (LOOP FOR J FROM -1 TO 4 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A I J))))) ((NIL NIL NIL NIL NIL NIL) (NIL T T T T NIL) (NIL T T T T NIL) (NIL T T T T NIL) (NIL NIL NIL NIL NIL NIL)))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.19 (LET ((A (MAKE-ARRAY (QUOTE (1 3 4)) :ADJUSTABLE T))) (LOOP FOR I FROM -1 TO 3 COLLECT (LOOP FOR J FROM -1 TO 4 COLLECT (NOTNOT (ARRAY-IN-BOUNDS-P A 0 I J))))) ((NIL NIL NIL NIL NIL NIL) (NIL T T T T NIL) (NIL T T T T NIL) (NIL T T T T NIL) (NIL NIL NIL NIL NIL NIL)))
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.20 (ARRAY-IN-BOUNDS-P #(A B C) (1+ MOST-POSITIVE-FIXNUM)) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.21 (ARRAY-IN-BOUNDS-P #(A B C) (1- MOST-NEGATIVE-FIXNUM)) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.22 (ARRAY-IN-BOUNDS-P #(A B C) 1000000000000000000) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.23 (ARRAY-IN-BOUNDS-P #(A B C) -1000000000000000000) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.24 (MACROLET ((%M (Z) Z)) (ARRAY-IN-BOUNDS-P (EXPAND-IN-CURRENT-ENV (%M #(A B))) 3)) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.25 (MACROLET ((%M (Z) Z)) (ARRAY-IN-BOUNDS-P #(A B) (EXPAND-IN-CURRENT-ENV (%M 2)))) NIL)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.ORDER.1 (LET ((X 0) Y Z) (VALUES (ARRAY-IN-BOUNDS-P (PROGN (SETF Y (INCF X)) #()) (PROGN (SETF Z (INCF X)) 10)) X Y Z)) NIL 2 1 2)
;; Loading (DEFTEST ARRAY-IN-BOUNDS-P.ERROR.1 (SIGNALS-ERROR (ARRAY-IN-BOUNDS-P) PROGRAM-ERROR) T)
;; Loading (LOAD "array-misc.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-misc.lsp C1337C17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-DIMENSION-LIMIT.1 (AND (<= 1024 ARRAY-DIMENSION-LIMIT) T) T)
;; Loading (DEFTEST ARRAY-DIMENSION-LIMIT.2 (AND (TYPEP ARRAY-DIMENSION-LIMIT (QUOTE FIXNUM)) T) T)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE-LIMIT.1 (AND (<= 1024 ARRAY-TOTAL-SIZE-LIMIT) T) T)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE-LIMIT.2 (AND (TYPEP ARRAY-TOTAL-SIZE-LIMIT (QUOTE FIXNUM)) T) T)
;; Loading (DEFTEST ARRAY-RANK-LIMIT.1 (AND (<= 8 ARRAY-RANK-LIMIT) T) T)
;; Loading (DEFTEST ARRAY-RANK-LIMIT.2 (AND (TYPEP ARRAY-RANK-LIMIT (QUOTE FIXNUM)) T) T)
;; Loading (LOAD "array-rank.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-rank.lsp C1370657>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-RANK.1 (ARRAY-RANK #<(Array T Nil) C1381E73>) 0)
;; Loading (DEFTEST ARRAY-RANK.2 (CHECK-PREDICATE (FUNCTION (LAMBDA (E) (OR (NOT (TYPEP E (QUOTE VECTOR))) (EQL (ARRAY-RANK E) 1))))) NIL)
;; Loading (DEFTEST ARRAY-RANK.3 (MACROLET ((%M (Z) Z)) (ARRAY-RANK (EXPAND-IN-CURRENT-ENV (%M "abc")))) 1)
;; Loading (DEFTEST ARRAY-RANK.ORDER.1 (LET ((I 0) A) (VALUES (ARRAY-RANK (PROGN (SETF A (INCF I)) "abcd")) I A)) 1 1 1)
;; Loading (DEFTEST ARRAY-RANK.ERROR.1 (SIGNALS-ERROR (ARRAY-RANK) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-RANK.ERROR.2 (SIGNALS-ERROR (ARRAY-RANK #(A B C) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-RANK.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ARRAY-RANK) (FUNCTION ARRAYP)) NIL)
;; Loading (DEFTEST ARRAY-RANK.ERROR.4 (SIGNALS-ERROR (ARRAY-RANK NIL) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-RANK.ERROR.5 (SIGNALS-TYPE-ERROR X NIL (LOCALLY (ARRAY-RANK X) T)) T)
;; Loading (LOAD "array-row-major-index.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-row-major-index.lsp C13C0947>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-ROW-MAJOR-INDEX.1 (ARRAY-ROW-MAJOR-INDEX #<(Array T Nil) C13D35C3>) 0)
;; Loading (DEFTEST ARRAY-ROW-MAJOR-INDEX.2 (LOOP FOR I FROM 0 TO 4 COLLECT (ARRAY-ROW-MAJOR-INDEX #(A B C D E) I)) (0 1 2 3 4))
;; Loading (DEFTEST ARRAY-ROW-MAJOR-INDEX.3 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 1))) (LOOP FOR I FROM 0 TO 4 COLLECT (ARRAY-ROW-MAJOR-INDEX A I))) (0 1 2 3 4))
;; Loading (DEFTEST ARRAY-ROW-MAJOR-INDEX.4 (MACROLET ((%M (Z) Z)) (ARRAY-ROW-MAJOR-INDEX (EXPAND-IN-CURRENT-ENV (%M #(A B C))) 1)) 1)
;; Loading (DEFTEST ARRAY-ROW-MAJOR-INDEX.5 (MACROLET ((%M (Z) Z)) (ARRAY-ROW-MAJOR-INDEX #(A B C) (EXPAND-IN-CURRENT-ENV (%M 1)))) 1)
;; Loading (DEFTEST ARRAY-ROW-MAJOR-INDEX.ORDER.1 (LET ((X 0) Y Z (A #(A B C D E F))) (VALUES (ARRAY-ROW-MAJOR-INDEX (PROGN (SETF Y (INCF X)) A) (PROGN (SETF Z (INCF X)) 0)) X Y Z)) 0 2 1 2)
;; Loading (DEFTEST ARRAY-ROW-MAJOR-INDEX.ERROR.1 (SIGNALS-ERROR (ARRAY-ROW-MAJOR-INDEX) PROGRAM-ERROR) T)
;; Loading (LOAD "array-total-size.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/array-total-size.lsp C1415FB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.1 (ARRAY-TOTAL-SIZE #<(Array T Nil) C1428333>) 1)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.2 (ARRAY-TOTAL-SIZE "abcdef") 6)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.3 (ARRAY-TOTAL-SIZE #(A B C)) 3)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.4 (ARRAY-TOTAL-SIZE #*0011010) 7)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.5 (ARRAY-TOTAL-SIZE #<(Array T (4 3)) C143A253>) 12)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.6 (MACROLET ((%M (Z) Z)) (ARRAY-TOTAL-SIZE (EXPAND-IN-CURRENT-ENV (%M #(A B C))))) 3)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.ORDER.1 (LET ((I 0) A) (VALUES (ARRAY-TOTAL-SIZE (PROGN (SETF A (INCF I)) #(A B C D))) I A)) 4 1 1)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.ERROR.1 (SIGNALS-ERROR (ARRAY-TOTAL-SIZE) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.ERROR.2 (SIGNALS-ERROR (ARRAY-TOTAL-SIZE #(A B C) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ARRAY-TOTAL-SIZE) (FUNCTION ARRAYP)) NIL)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.ERROR.4 (SIGNALS-ERROR (ARRAY-TOTAL-SIZE 0) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-TOTAL-SIZE.ERROR.5 (SIGNALS-TYPE-ERROR X 0 (LOCALLY (ARRAY-TOTAL-SIZE X) T)) T)
;; Loading (LOAD "arrayp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/arrayp.lsp C1474847>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAYP.1 (NOTNOT-MV (ARRAYP #(A B C))) T)
;; Loading (DEFTEST ARRAYP.2 (NOTNOT-MV (ARRAYP "abcd")) T)
;; Loading (DEFTEST ARRAYP.3 (NOTNOT-MV (ARRAYP #*001110101)) T)
;; Loading (DEFTEST ARRAYP.4 (NOTNOT-MV (ARRAYP #<(Array T Nil) C14908B3>)) T)
;; Loading (DEFTEST ARRAYP.5 (NOTNOT-MV (ARRAYP #<(Array T (2 3)) C14958C3>)) T)
;; Loading (DEFTEST ARRAYP.6 (CHECK-TYPE-PREDICATE (FUNCTION ARRAYP) (QUOTE ARRAY)) NIL)
;; Loading (DEFTEST ARRAYP.7 (MACROLET ((%M (Z) Z)) (ARRAYP (EXPAND-IN-CURRENT-ENV (%M 0)))) NIL)
;; Loading (DEFTEST ARRAYP.ORDER.1 (LET ((I 0) A) (VALUES (ARRAYP (PROGN (SETF A (INCF I)) NIL)) I A)) NIL 1 1)
;; Loading (DEFTEST ARRAYP.ERROR.1 (SIGNALS-ERROR (ARRAYP) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARRAYP.ERROR.2 (SIGNALS-ERROR (ARRAYP #(A B C) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "fill-pointer.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fill-pointer.lsp C14BF767>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILL-POINTER.1 (FILL-POINTER (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5)) 5)
;; Loading (DEFTEST FILL-POINTER.2 (FILL-POINTER (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER T)) 10)
;; Loading (DEFTEST FILL-POINTER.3 (LET ((A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10))))) (VALUES (FILL-POINTER A) (SETF (FILL-POINTER A) 6) A)) 5 6 #(1 2 3 4 5 6))
;; Loading (DEFTEST FILL-POINTER.ORDER.1 (LET ((I 0) (A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5))) (VALUES (FILL-POINTER (PROGN (INCF I) A)) I)) 5 1)
;; Loading (DEFTEST FILL-POINTER.ORDER.2 (LET ((I 0) X Y (A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10))))) (VALUES I (SETF (FILL-POINTER (PROGN (SETF X (INCF I)) A)) (PROGN (SETF Y (INCF I)) 6)) A I X Y)) 0 6 #(1 2 3 4 5 6) 2 1 2)
;; Loading (DEFTEST FILL-POINTER.ERROR.1 (SIGNALS-ERROR (FILL-POINTER) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL-POINTER.ERROR.2 (SIGNALS-ERROR (FILL-POINTER (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 4) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL-POINTER.ERROR.3 (LET ((A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER NIL))) (IF (ARRAY-HAS-FILL-POINTER-P A) T (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (FILL-POINTER (QUOTE (SYSTEM.INTERNALS::BQ-COMMA A))) TYPE-ERROR))))) T)
;; Loading (DEFTEST FILL-POINTER.ERROR.4 (SIGNALS-ERROR (FILL-POINTER #<(Array T Nil) C1541AC3>) TYPE-ERROR) T)
;; Loading (DEFTEST FILL-POINTER.ERROR.5 (SIGNALS-ERROR (FILL-POINTER #<(Array T (2 3)) C1548293>) TYPE-ERROR) T)
;; Loading (DEFTEST FILL-POINTER.ERROR.6 (CHECK-TYPE-ERROR (FUNCTION FILL-POINTER) (FUNCTION (LAMBDA (X) (AND (VECTORP X) (ARRAY-HAS-FILL-POINTER-P X))))) NIL)
;; Loading (DEFTEST FILL-POINTER.ERROR.7 (SIGNALS-ERROR (LOCALLY (FILL-POINTER #<(Array T (2 3)) C15581C3>) T) TYPE-ERROR) T)
;; Loading (LOAD "row-major-aref.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/row-major-aref.lsp C1569AE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ROW-MAJOR-AREF.1 (LOOP FOR I FROM 0 TO 5 COLLECT (ROW-MAJOR-AREF #(A B C D E F) I)) (A B C D E F))
;; Loading (DEFTEST ROW-MAJOR-AREF.2 (LOOP FOR I FROM 0 TO 5 COLLECT (ROW-MAJOR-AREF #<(Array T (2 4)) C1585EF3> I)) (A B C D E F))
;; Loading (DEFTEST ROW-MAJOR-AREF.3 (ROW-MAJOR-AREF #<(Array T Nil) C158C043> 0) 100)
;; Loading (DEFTEST ROW-MAJOR-AREF.4 (LOOP FOR I FROM 0 TO 5 COLLECT (ROW-MAJOR-AREF #*011100 I)) (0 1 1 1 0 0))
;; Loading (DEFTEST ROW-MAJOR-AREF.5 (LOOP FOR I FROM 0 TO 5 COLLECT (ROW-MAJOR-AREF "abcdef" I)) (#\a #\b #\c #\d #\e #\f))
;; Loading (DEFTEST ROW-MAJOR-AREF.6 (LET ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT (QUOTE X)))) (VALUES (AREF A) (SETF (ROW-MAJOR-AREF A 0) (QUOTE Y)) (AREF A) A)) X Y Y #<(Array T Nil) C15A2B73>)
;; Loading (DEFTEST ROW-MAJOR-AREF.7 (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-ELEMENT (QUOTE X)))) (VALUES (AREF A 0) (AREF A 1) (AREF A 2) (AREF A 3) (SETF (ROW-MAJOR-AREF A 0) (QUOTE A)) (SETF (ROW-MAJOR-AREF A 1) (QUOTE B)) (SETF (ROW-MAJOR-AREF A 2) (QUOTE C)) A)) X X X X A B C #(A B C X))
;; Loading (DEFTEST ROW-MAJOR-AREF.8 (LET ((A (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\x))) (VALUES (AREF A 0) (AREF A 1) (AREF A 2) (AREF A 3) (SETF (ROW-MAJOR-AREF A 0) #\a) (SETF (ROW-MAJOR-AREF A 1) #\b) (SETF (ROW-MAJOR-AREF A 2) #\c) A)) #\x #\x #\x #\x #\a #\b #\c "abcx")
;; Loading (DEFTEST ROW-MAJOR-AREF.9 (LET ((A (MAKE-ARRAY (QUOTE (4)) :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (AREF A 0) (AREF A 1) (AREF A 2) (AREF A 3) (SETF (ROW-MAJOR-AREF A 0) 1) (SETF (ROW-MAJOR-AREF A 1) 1) (SETF (ROW-MAJOR-AREF A 3) 1) A)) 0 0 0 0 1 1 1 #*1101)
;; Loading (DEFTEST ROW-MAJOR-AREF.10 (LET ((A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((A B C D) (E F G H) (I J K L)) ((M N O P) (Q R S T) (U V W X))))))) (LOOP FOR I FROM 0 TO 23 COLLECT (ROW-MAJOR-AREF A I))) (A B C D E F G H I J K L M N O P Q R S T U V W X))
;; Loading (DEFTEST ROW-MAJOR-AREF.ORDER.1 (LET ((I 0) X Y) (VALUES (ROW-MAJOR-AREF (PROGN (SETF X (INCF I)) #(A B C D E F)) (PROGN (SETF Y (INCF I)) 2)) I X Y)) C 2 1 2)
;; Loading (DEFTEST ROW-MAJOR-AREF.ORDER.2 (LET ((I 0) X Y Z (A (COPY-SEQ #(A B C D E F)))) (VALUES (SETF (ROW-MAJOR-AREF (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) 2)) (PROGN (SETF Z (INCF I)) (QUOTE W))) A I X Y Z)) W #(A B W D E F) 3 1 2 3)
;; Loading (DEFTEST ROW-MAJOR-AREF.ERROR.1 (SIGNALS-ERROR (ROW-MAJOR-AREF) PROGRAM-ERROR) T)
;; Loading (LOAD "simple-vector-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/simple-vector-p.lsp C161C667>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIMPLE-VECTOR-P.1 (CHECK-TYPE-PREDICATE (FUNCTION SIMPLE-VECTOR-P) (QUOTE SIMPLE-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-VECTOR-P.2 (NOTNOT-MV (SIMPLE-VECTOR-P (MAKE-ARRAY (QUOTE (10))))) T)
;; Loading (DEFTEST SIMPLE-VECTOR-P.4 (NOTNOT-MV (SIMPLE-VECTOR-P (VECTOR (QUOTE A) (QUOTE B) (QUOTE C)))) T)
;; Loading (DEFTEST SIMPLE-VECTOR-P.7 (SIMPLE-VECTOR-P #*001101) NIL)
;; Loading (DEFTEST SIMPLE-VECTOR-P.8 (SIMPLE-VECTOR-P "abcdef") NIL)
;; Loading (DEFTEST SIMPLE-VECTOR-P.9 (SIMPLE-VECTOR-P (MAKE-ARRAY NIL)) NIL)
;; Loading (DEFTEST SIMPLE-VECTOR-P.10 (SIMPLE-VECTOR-P (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) NIL)
;; Loading (DEFTEST SIMPLE-VECTOR-P.11 (SIMPLE-VECTOR-P (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER))) NIL)
;; Loading (DEFTEST SIMPLE-VECTOR-P.12 (SIMPLE-VECTOR-P (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT))) NIL)
;; Loading (DEFTEST SIMPLE-VECTOR-P.ERROR.1 (SIGNALS-ERROR (SIMPLE-VECTOR-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST SIMPLE-VECTOR-P.ERROR.2 (SIGNALS-ERROR (SIMPLE-VECTOR-P #(A B) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "svref.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/svref.lsp C16794D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SVREF.1 (LET ((A (VECTOR 1 2 3 4))) (LOOP FOR I BELOW 4 COLLECT (SVREF A I))) (1 2 3 4))
;; Loading (DEFTEST SVREF.2 (LET ((A (VECTOR 1 2 3 4))) (VALUES (LOOP FOR I BELOW 4 COLLECT (SETF (SVREF A I) (+ I 10))) A)) (10 11 12 13) #(10 11 12 13))
;; Loading (DEFTEST SVREF.ORDER.1 (LET ((V (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (I 0) A B) (VALUES (SVREF (PROGN (SETF A (INCF I)) V) (PROGN (SETF B (INCF I)) 2)) I A B)) C 2 1 2)
;; Loading (DEFTEST SVREF.ORDER.2 (LET ((V (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (I 0) A B C) (VALUES (SETF (SVREF (PROGN (SETF A (INCF I)) V) (PROGN (SETF B (INCF I)) 2)) (PROGN (SETF C (INCF I)) (QUOTE W))) V I A B C)) W #(A B W D) 3 1 2 3)
;; Loading (DEFTEST SVREF.ERROR.1 (SIGNALS-ERROR (SVREF) PROGRAM-ERROR) T)
;; Loading (DEFTEST SVREF.ERROR.2 (SIGNALS-ERROR (SVREF (VECTOR 1)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SVREF.ERROR.3 (SIGNALS-ERROR (SVREF (VECTOR 1) 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST SVREF.ERROR.4 (SIGNALS-ERROR (SVREF (VECTOR 1) 0 NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "upgraded-array-element-type.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/upgraded-array-element-type.lsp C16D4D27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.1 (LET ((UPGRADED-BIT (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE BIT)))) (AND (EMPIRICAL-SUBTYPEP (QUOTE BIT) UPGRADED-BIT) (EMPIRICAL-SUBTYPEP UPGRADED-BIT (QUOTE BIT)))) T)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.2 (LET ((UPGRADED-BASE-CHAR (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE BASE-CHAR)))) (AND (EMPIRICAL-SUBTYPEP (QUOTE BASE-CHAR) UPGRADED-BASE-CHAR) (EMPIRICAL-SUBTYPEP UPGRADED-BASE-CHAR (QUOTE BASE-CHAR)))) T)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.3 (LET ((UPGRADED-CHARACTER (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (EMPIRICAL-SUBTYPEP (QUOTE CHARACTER) UPGRADED-CHARACTER) (EMPIRICAL-SUBTYPEP UPGRADED-CHARACTER (QUOTE CHARACTER)))) T)
;; Loading (DEFPARAMETER *UPGRADED-ARRAY-TYPES-TO-CHECK* (SYSTEM.INTERNALS::BACKQUOTE (BOOLEAN BASE-CHAR CHARACTER T (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR I FROM 0 TO 32 COLLECT (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA (ASH 1 I)))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR I FROM 0 TO 32 COLLECT (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA (1- (ASH 1 I))))))) (EQL -1) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR I FROM 0 TO 32 COLLECT (SYSTEM.INTERNALS::BACKQUOTE (INTEGER 0 ((SYSTEM.INTERNALS::BQ-COMMA (ASH 1 I))))))) SYMBOL (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR I FROM 0 TO 32 COLLECT (SYSTEM.INTERNALS::BACKQUOTE (INTEGER (SYSTEM.INTERNALS::BQ-COMMA (- (ASH 1 I))) ((SYSTEM.INTERNALS::BQ-COMMA (ASH 1 I))))))) (INTEGER -10000000000000000000000000000000000 10000000000000000000000000000000000) FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT COMPLEX RATIONAL FIXNUM FUNCTION SEQUENCE LIST CONS ATOM SYMBOL)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.4 (LOOP FOR TYPE IN *UPGRADED-ARRAY-TYPES-TO-CHECK* FOR UPGRADED-TYPE = (UPGRADED-ARRAY-ELEMENT-TYPE TYPE) UNLESS (EMPIRICAL-SUBTYPEP TYPE UPGRADED-TYPE) COLLECT (LIST TYPE UPGRADED-TYPE)) NIL)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.5 (LOOP FOR TYPE IN *UPGRADED-ARRAY-TYPES-TO-CHECK* FOR UPGRADED-TYPE = (UPGRADED-ARRAY-ELEMENT-TYPE TYPE NIL) UNLESS (EMPIRICAL-SUBTYPEP TYPE UPGRADED-TYPE) COLLECT (LIST TYPE UPGRADED-TYPE)) NIL)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.6 (MACROLET ((%FOO (&ENVIRONMENT ENV) (EMPIRICAL-SUBTYPEP (QUOTE BIT) (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE BIT) ENV)))) (%FOO)) T)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.7 (LET ((UPGRADED-TYPES (MAPCAR (FUNCTION UPGRADED-ARRAY-ELEMENT-TYPE) *UPGRADED-ARRAY-TYPES-TO-CHECK*))) (LOOP FOR TYPE IN *UPGRADED-ARRAY-TYPES-TO-CHECK* FOR UPGRADED-TYPE IN UPGRADED-TYPES APPEND (LOOP FOR TYPE2 IN *UPGRADED-ARRAY-TYPES-TO-CHECK* FOR UPGRADED-TYPE2 IN UPGRADED-TYPES WHEN (AND (SUBTYPEP TYPE TYPE2) (EQUAL (SUBTYPEP* UPGRADED-TYPE UPGRADED-TYPE) (QUOTE (NIL T)))) COLLECT (LIST TYPE TYPE2)))) NIL)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.8 (LET ((UPGRADED-TYPES (MAPCAR (FUNCTION UPGRADED-ARRAY-ELEMENT-TYPE) *UPGRADED-ARRAY-TYPES-TO-CHECK*))) (LOOP FOR TYPE1 IN *UPGRADED-ARRAY-TYPES-TO-CHECK* FOR UAET1 IN UPGRADED-TYPES APPEND (LOOP FOR TYPE2 IN *UPGRADED-ARRAY-TYPES-TO-CHECK* FOR UAET2 IN UPGRADED-TYPES WHEN (AND (SUBTYPEP TYPE1 TYPE2) (NOT (EMPIRICAL-SUBTYPEP UAET1 UAET2))) COLLECT (LIST TYPE1 TYPE2)))) NIL)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.NIL.1 (LET ((UAET-NIL (UPGRADED-ARRAY-ELEMENT-TYPE NIL))) (CHECK-PREDICATE (TYPEF (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA UAET-NIL)))))) NIL)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.ERROR.1 (SIGNALS-ERROR (UPGRADED-ARRAY-ELEMENT-TYPE) PROGRAM-ERROR) T)
;; Loading (DEFTEST UPGRADED-ARRAY-ELEMENT-TYPE.ERROR.2 (SIGNALS-ERROR (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE BIT) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "vector.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/vector.lsp 810E7557>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST VECTOR.TYPE.1 (NOTNOT-MV (TYPEP #(A B C) (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.2 (NOTNOT-MV (TYPEP #() (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.3 (NOTNOT-MV (TYPEP "" (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.4 (NOTNOT-MV (TYPEP "abcdef" (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.5 (NOTNOT-MV (TYPEP #* (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.6 (NOTNOT-MV (TYPEP #*011011101011 (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.7 (TYPEP #<(Array T Nil) 81117F33> (QUOTE VECTOR)) NIL)
;; Loading (DEFTEST VECTOR.TYPE.8 (TYPEP #<(Array T (1 4)) 8111CE53> (QUOTE VECTOR)) NIL)
;; Loading (DEFTEST VECTOR.TYPE.9 (SUBTYPEP* (QUOTE VECTOR) (QUOTE ARRAY)) T T)
;; Loading (DEFTEST VECTOR.TYPE.10 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (VECTOR *)))) T)
;; Loading (DEFTEST VECTOR.TYPE.11 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (VECTOR T)))) T)
;; Loading (DEFTEST VECTOR.TYPE.12 (NOTNOT-MV (TYPEP "abcde" (QUOTE (VECTOR *)))) T)
;; Loading (DEFTEST VECTOR.TYPE.13 (TYPEP "abcdef" (QUOTE (VECTOR T))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.14 (NOTNOT-MV (TYPEP #*00110 (QUOTE (VECTOR *)))) T)
;; Loading (DEFTEST VECTOR.TYPE.15 (TYPEP #*00110 (QUOTE (VECTOR T))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.16 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (VECTOR * 3)))) T)
;; Loading (DEFTEST VECTOR.TYPE.17 (TYPEP #(A B C) (QUOTE (VECTOR * 2))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.18 (TYPEP #(A B C) (QUOTE (VECTOR * 4))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.19 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (VECTOR T 3)))) T)
;; Loading (DEFTEST VECTOR.TYPE.20 (TYPEP #(A B C) (QUOTE (VECTOR T 2))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.21 (TYPEP #(A B C) (QUOTE (VECTOR T 4))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.23 (NOTNOT-MV (TYPEP #(A B C) (QUOTE (VECTOR T *)))) T)
;; Loading (DEFTEST VECTOR.TYPE.23A (NOTNOT-MV (TYPEP "abcde" (QUOTE (VECTOR * 5)))) T)
;; Loading (DEFTEST VECTOR.TYPE.24 (TYPEP "abcde" (QUOTE (VECTOR * 4))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.25 (TYPEP "abcde" (QUOTE (VECTOR * 6))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.26 (NOTNOT-MV (TYPEP "abcde" (QUOTE (VECTOR * *)))) T)
;; Loading (DEFTEST VECTOR.TYPE.27 (TYPEP "abcde" (QUOTE (VECTOR T 5))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.28 (TYPEP "abcde" (QUOTE (VECTOR T 4))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.29 (TYPEP "abcde" (QUOTE (VECTOR T 6))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.30 (TYPEP "abcde" (QUOTE (VECTOR T *))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.31 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (NOTNOT-MV (TYPEP S (QUOTE (VECTOR BASE-CHAR))))) T)
;; Loading (DEFTEST VECTOR.TYPE.32 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (NOTNOT-MV (TYPEP S (QUOTE (VECTOR BASE-CHAR 3))))) T)
;; Loading (DEFTEST VECTOR.TYPE.33 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (TYPEP S (QUOTE (VECTOR BASE-CHAR 2)))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.34 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (TYPEP S (QUOTE (VECTOR BASE-CHAR 4)))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.35 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (NOTNOT-MV (TYPEP S (QUOTE VECTOR)))) T)
;; Loading (DEFTEST VECTOR.TYPE.36 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (NOTNOT-MV (TYPEP S (QUOTE (VECTOR *))))) T)
;; Loading (DEFTEST VECTOR.TYPE.37 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (NOTNOT-MV (TYPEP S (QUOTE (VECTOR * 3))))) T)
;; Loading (DEFTEST VECTOR.TYPE.38 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (NOTNOT-MV (TYPEP S (QUOTE (VECTOR * *))))) T)
;; Loading (DEFTEST VECTOR.TYPE.39 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (TYPEP S (QUOTE (VECTOR T)))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.40 (LET ((S (COERCE "abc" (QUOTE SIMPLE-BASE-STRING)))) (TYPEP S (QUOTE (VECTOR T *)))) NIL)
;; Loading (DEFTEST VECTOR.TYPE.41 (NOTNOT-MV (TYPEP (MAKE-ARRAY (QUOTE 10) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)) (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.42 (NOTNOT-MV (TYPEP (MAKE-ARRAY (QUOTE 10) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)) (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.43 (NOTNOT-MV (TYPEP (MAKE-ARRAY (QUOTE 10) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)) (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR.TYPE.44 (NOTNOT-MV (TYPEP (MAKE-ARRAY (QUOTE 10) :ELEMENT-TYPE (QUOTE LONG-FLOAT)) (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR-AS-CLASS.1 (NOTNOT-MV (FIND-CLASS (QUOTE VECTOR))) T)
;; Loading (DEFTEST VECTOR-AS-CLASS.2 (NOTNOT-MV (TYPEP #() (FIND-CLASS (QUOTE VECTOR)))) T)
;; Loading (DEFTEST VECTOR-AS-CLASS.3 (NOTNOT-MV (TYPEP #(A B C) (FIND-CLASS (QUOTE VECTOR)))) T)
;; Loading (DEFTEST VECTOR-AS-CLASS.4 (NOTNOT-MV (TYPEP "" (FIND-CLASS (QUOTE VECTOR)))) T)
;; Loading (DEFTEST VECTOR-AS-CLASS.5 (NOTNOT-MV (TYPEP "abcd" (FIND-CLASS (QUOTE VECTOR)))) T)
;; Loading (DEFTEST VECTOR-AS-CLASS.6 (NOTNOT-MV (TYPEP #* (FIND-CLASS (QUOTE VECTOR)))) T)
;; Loading (DEFTEST VECTOR-AS-CLASS.7 (NOTNOT-MV (TYPEP #*01101010100 (FIND-CLASS (QUOTE VECTOR)))) T)
;; Loading (DEFTEST VECTOR-AS-CLASS.8 (TYPEP #<(Array T Nil) 812082D3> (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.9 (TYPEP #<(Array T (2 2)) 8120E053> (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.10 (TYPEP (MAKE-ARRAY (QUOTE (1 0))) (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.11 (TYPEP (MAKE-ARRAY (QUOTE (0 1))) (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.12 (TYPEP 1 (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.13 (TYPEP NIL (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.14 (TYPEP (QUOTE X) (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.15 (TYPEP (QUOTE (A B C)) (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.16 (TYPEP 10.0 (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.17 (TYPEP 3/5 (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR-AS-CLASS.18 (TYPEP (1+ MOST-POSITIVE-FIXNUM) (FIND-CLASS (QUOTE VECTOR))) NIL)
;; Loading (DEFTEST VECTOR.1 (VECTOR) #())
;; Loading (DEFTEST VECTOR.2 (VECTOR 1 2 3) #(1 2 3))
;; Loading (DEFTEST VECTOR.3 (LET* ((LEN (MIN 1000 (1- CALL-ARGUMENTS-LIMIT))) (ARGS (MAKE-INT-LIST LEN)) (V (APPLY (FUNCTION VECTOR) ARGS))) (AND (TYPEP V (QUOTE (VECTOR T))) (TYPEP V (QUOTE (VECTOR T *))) (TYPEP V (SYSTEM.INTERNALS::BACKQUOTE (VECTOR T (SYSTEM.INTERNALS::BQ-COMMA LEN)))) (TYPEP V (QUOTE SIMPLE-VECTOR)) (TYPEP V (SYSTEM.INTERNALS::BACKQUOTE (SIMPLE-VECTOR (SYSTEM.INTERNALS::BQ-COMMA LEN)))) (EQL (LENGTH V) LEN) (LOOP FOR I FROM 0 FOR E ACROSS V ALWAYS (EQL I E)) T)) T)
;; Loading (DEFTEST VECTOR.4 (NOTNOT-MV (TYPEP (VECTOR) (QUOTE (VECTOR T 0)))) T)
;; Loading (DEFTEST VECTOR.5 (NOTNOT-MV (TYPEP (VECTOR) (QUOTE SIMPLE-VECTOR))) T)
;; Loading (DEFTEST VECTOR.6 (NOTNOT-MV (TYPEP (VECTOR) (QUOTE (SIMPLE-VECTOR 0)))) T)
;; Loading (DEFTEST VECTOR.7 (NOTNOT-MV (TYPEP (VECTOR 1 2 3) (QUOTE SIMPLE-VECTOR))) T)
;; Loading (DEFTEST VECTOR.8 (NOTNOT-MV (TYPEP (VECTOR 1 2 3) (QUOTE (SIMPLE-VECTOR 3)))) T)
;; Loading (DEFTEST VECTOR.9 (TYPEP (VECTOR #\a #\b #\c) (QUOTE STRING)) NIL)
;; Loading (DEFTEST VECTOR.10 (NOTNOT-MV (TYPEP (VECTOR 1 2 3) (QUOTE (SIMPLE-VECTOR *)))) T)
;; Loading (DEFTEST VECTOR.ORDER.1 (LET ((I 0) A B C) (VALUES (VECTOR (SETF A (INCF I)) (SETF B (INCF I)) (SETF C (INCF I))) I A B C)) #(1 2 3) 3 1 2 3)
;; Loading (LOAD "vector-pop.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/vector-pop.lsp 81295567>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST VECTOR-POP.1 (LET ((V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3))) (VALUES (LENGTH V) (CHECK-VALUES (VECTOR-POP V)) (FILL-POINTER V) (LENGTH V) V)) 3 C 2 2 #(A B))
;; Loading (DEFTEST VECTOR-POP.ERROR.1 (SIGNALS-ERROR (LET ((V (VECTOR 1 2 3))) (IF (ARRAY-HAS-FILL-POINTER-P V) (ERROR (QUOTE TYPE-ERROR) :DATUM V :EXPECTED-TYPE NIL) (VECTOR-POP V))) TYPE-ERROR) T)
;; Loading (DEFTEST VECTOR-POP.ERROR.2 (LET ((V (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE X) :FILL-POINTER 0))) (HANDLER-CASE (VECTOR-POP V) (ERROR NIL (QUOTE ERROR)))) ERROR)
;; Loading (DEFTEST VECTOR-POP.ERROR.3 (SIGNALS-ERROR (VECTOR-POP) PROGRAM-ERROR) T)
;; Loading (DEFTEST VECTOR-POP.ERROR.4 (SIGNALS-ERROR (LET ((V (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER T :INITIAL-ELEMENT (QUOTE X)))) (VECTOR-POP V NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "vector-push.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/vector-push.lsp 812E39B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST VECTOR-PUSH.1 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (A B C D E)))) (I 0) X Y) (VALUES (FILL-POINTER A) (VECTOR-PUSH (PROGN (SETF X (INCF I)) (QUOTE X)) (PROGN (SETF Y (INCF I)) A)) (FILL-POINTER A) A I X Y)) 2 2 3 #(A B X) 2 1 2)
;; Loading (DEFTEST VECTOR-PUSH.2 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (A B C D E))))) (VALUES (FILL-POINTER A) (VECTOR-PUSH (QUOTE X) A) (FILL-POINTER A) A)) 5 NIL 5 #(A B C D E))
;; Loading (DEFTEST VECTOR-PUSH.3 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH #\x A) (FILL-POINTER A) A)) 2 2 3 "abx")
;; Loading (DEFTEST VECTOR-PUSH.4 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH #\x A) (FILL-POINTER A) A)) 5 NIL 5 "abcde")
;; Loading (DEFTEST VECTOR-PUSH.5 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH #\x A) (FILL-POINTER A) A)) 2 2 3 "abx")
;; Loading (DEFTEST VECTOR-PUSH.6 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH #\x A) (FILL-POINTER A) A)) 5 NIL 5 "abcde")
;; Loading (DEFTEST VECTOR-PUSH.7 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (0 1 1 0 0)) :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0 A) (FILL-POINTER A) A)) 2 2 3 #*010)
;; Loading (DEFTEST VECTOR-PUSH.8 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 1 A) (FILL-POINTER A) A)) 5 NIL 5 #*00000)
;; Loading (DEFTEST VECTOR-PUSH.9 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0 A) (FILL-POINTER A) A)) 2 2 3 #(1 2 0))
;; Loading (DEFTEST VECTOR-PUSH.10 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0 A) (FILL-POINTER A) A)) 5 NIL 5 #(1 2 3 4 5))
;; Loading (DEFTEST VECTOR-PUSH.11 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256)))))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0 A) (FILL-POINTER A) A)) 2 2 3 #(1 2 0))
;; Loading (DEFTEST VECTOR-PUSH.12 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256)))))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0 A) (FILL-POINTER A) A)) 5 NIL 5 #(1 2 3 4 5))
;; Loading (DEFTEST VECTOR-PUSH.13 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0.0 A) (FILL-POINTER A) A)) 2 2 3 #(1.0 2.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH.14 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0.0 A) (FILL-POINTER A) A)) 5 NIL 5 #(1.0 2.0 3.0 4.0 5.0))
;; Loading (DEFTEST VECTOR-PUSH.15 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0.0 A) (FILL-POINTER A) A)) 2 2 3 #(1.0 2.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH.16 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0.0 A) (FILL-POINTER A) A)) 5 NIL 5 #(1.0 2.0 3.0 4.0 5.0))
;; Loading (DEFTEST VECTOR-PUSH.17 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0.0 A) (FILL-POINTER A) A)) 2 2 3 #(1.0 2.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH.18 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0.0 A) (FILL-POINTER A) A)) 5 NIL 5 #(1.0 2.0 3.0 4.0 5.0))
;; Loading (DEFTEST VECTOR-PUSH.19 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE LONG-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0.0 A) (FILL-POINTER A) A)) 2 2 3 #(1.0 2.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH.20 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE LONG-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH 0.0 A) (FILL-POINTER A) A)) 5 NIL 5 #(1.0 2.0 3.0 4.0 5.0))
;; Loading (DEFUN VECTOR-PUSH-ERROR-TEST (SEQ VAL) (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((A (COPY-SEQ (SYSTEM.INTERNALS::BQ-COMMA SEQ)))) (DECLARE (OPTIMIZE (SAFETY 3))) (OR (NOTNOT (ARRAY-HAS-FILL-POINTER-P A)) (VECTOR-PUSH (QUOTE (SYSTEM.INTERNALS::BQ-COMMA VAL)) A))))) (ERROR NIL T)))
;; Loading (DEFTEST VECTOR-PUSH.ERROR.1 (VECTOR-PUSH-ERROR-TEST #(A B C D) (QUOTE X)) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.2 (VECTOR-PUSH-ERROR-TEST #*00000 1) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.3 (VECTOR-PUSH-ERROR-TEST "abcde" #\x) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.4 (VECTOR-PUSH-ERROR-TEST #() (QUOTE X)) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.5 (VECTOR-PUSH-ERROR-TEST #* 1) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.6 (VECTOR-PUSH-ERROR-TEST "" #\x) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.7 (VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\a) #\x) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.8 (VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-ELEMENT 0) 17) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.9 (VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.10 (VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE SHORT-FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.11 (VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE LONG-FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.12 (VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.13 (VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.14 (SIGNALS-ERROR (VECTOR-PUSH) PROGRAM-ERROR) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.15 (SIGNALS-ERROR (VECTOR-PUSH (VECTOR 1 2 3)) PROGRAM-ERROR) T)
;; Loading (DEFTEST VECTOR-PUSH.ERROR.16 (SIGNALS-ERROR (VECTOR-PUSH (VECTOR 1 2 3) 4 NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "vector-push-extend.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/vector-push-extend.lsp 814A1B17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.1 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (A B C D E)))) (I 0) X Y) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND (PROGN (SETF X (INCF I)) (QUOTE X)) (PROGN (SETF Y (INCF I)) A)) (FILL-POINTER A) A I X Y)) 2 2 3 #(A B X) 2 1 2)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.2 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (A B C D E))))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND (QUOTE X) A) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL #(A B C D E X))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.3 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND #\x A) (FILL-POINTER A) A)) 2 2 3 "abx")
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.4 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (I 0) X Y Z) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND (PROGN (SETF X (INCF I)) #\x) (PROGN (SETF Y (INCF I)) A) (PROGN (SETF Z (INCF I)) 1)) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A I X Y Z)) 5 5 6 NIL "abcdex" 3 1 2 3)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.5 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND #\x A) (FILL-POINTER A) A)) 2 2 3 "abx")
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.6 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND #\x A 10) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL "abcdex")
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.7 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (0 1 1 0 0)) :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0 A) (FILL-POINTER A) A)) 2 2 3 #*010)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.8 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 1 A 100) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL #*000001)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.9 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0 A) (FILL-POINTER A) A)) 2 2 3 #(1 2 0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.10 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0 A 1) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL #(1 2 3 4 5 0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.11 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256)))))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0 A) (FILL-POINTER A) A)) 2 2 3 #(1 2 0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.12 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256)))))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0 A 1) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL #(1 2 3 4 5 0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.13 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0.0 A) (FILL-POINTER A) A)) 2 2 3 #(1.0 2.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.14 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0.0 A 1) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL #(1.0 2.0 3.0 4.0 5.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.15 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0.0 A) (FILL-POINTER A) A)) 2 2 3 #(1.0 2.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.16 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0.0 A 1) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL #(1.0 2.0 3.0 4.0 5.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.17 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0.0 A) (FILL-POINTER A) A)) 2 2 3 #(1.0 2.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.18 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0.0 A 1) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL #(1.0 2.0 3.0 4.0 5.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.19 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE LONG-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0.0 A) (FILL-POINTER A) A)) 2 2 3 #(1.0 2.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.20 (LET ((A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (1.0 2.0 3.0 4.0 5.0)) :ELEMENT-TYPE (QUOTE LONG-FLOAT)))) (VALUES (FILL-POINTER A) (VECTOR-PUSH-EXTEND 0.0 A 1) (FILL-POINTER A) (<= (ARRAY-TOTAL-SIZE A) 5) A)) 5 5 6 NIL #(1.0 2.0 3.0 4.0 5.0 0.0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.21 (LET* ((A1 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL)) (A2 (MAKE-ARRAY 6 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :FILL-POINTER 0))) (VALUES (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND (QUOTE FOO) A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1))) 0 NIL 0 1 (FOO) (NIL NIL FOO NIL NIL NIL NIL NIL NIL NIL))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.22 (LET* ((A1 (MAKE-ARRAY 6 :INITIAL-ELEMENT NIL)) (A2 (MAKE-ARRAY 0 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 0))) (VALUES (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND (QUOTE FOO) A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1) (NOTNOT (ADJUSTABLE-ARRAY-P A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)))) 0 NIL 0 1 (FOO) (NIL NIL NIL NIL NIL NIL) T (NIL 0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.23 (LET* ((A1 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL)) (A2 (MAKE-ARRAY 6 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 1))) (VALUES (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND (QUOTE FOO) A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1) (NOTNOT (ADJUSTABLE-ARRAY-P A2)) (EQT (ARRAY-DISPLACEMENT A2) A1) (NTH-VALUE 1 (ARRAY-DISPLACEMENT A2)))) 1 (NIL) 1 2 (NIL FOO) (NIL NIL NIL FOO NIL NIL NIL NIL NIL NIL) T T 2)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.24 (LET* ((A1 (MAKE-ARRAY 4 :INITIAL-ELEMENT NIL)) (A2 (MAKE-ARRAY 2 :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 2))) (VALUES (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND (QUOTE FOO) A2 7) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (ARRAY-DIMENSION A2 0) (NOTNOT (ADJUSTABLE-ARRAY-P A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A2)))) (NIL NIL NIL NIL) (NIL NIL) 2 3 (NIL NIL NIL NIL) (NIL NIL FOO) 9 T (NIL 0))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.25 (LOOP FOR ADJ IN (QUOTE (NIL T)) NCONC (LOOP FOR BITS FROM 1 TO 64 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA BITS))) FOR A1 = (MAKE-ARRAY 10 :INITIAL-ELEMENT 0 :ELEMENT-TYPE ETYPE) FOR A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE ETYPE :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE ADJ :FILL-POINTER 0) FOR RESULT = (LIST (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND 1 A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1)) UNLESS (EQUAL RESULT (QUOTE (0 NIL 0 1 (1) (0 0 1 0 0 0 0 0 0 0)))) COLLECT (LIST ETYPE ADJ RESULT))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.26 (LOOP FOR BITS FROM 1 TO 64 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA BITS))) FOR A1 = (MAKE-ARRAY 8 :INITIAL-ELEMENT 0 :ELEMENT-TYPE ETYPE) FOR A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE ETYPE :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 6) FOR RESULT = (LIST (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND 1 A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1) (NOTNOT (ADJUSTABLE-ARRAY-P A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A1))) UNLESS (EQUAL RESULT (QUOTE (6 (0 0 0 0 0 0) 6 7 (0 0 0 0 0 0 1) (0 0 0 0 0 0 0 0) T (NIL 0)))) COLLECT (LIST ETYPE RESULT)) NIL)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.27 (LOOP FOR ADJ IN (QUOTE (NIL T)) NCONC (LOOP FOR ETYPE IN (QUOTE (CHARACTER BASE-CHAR STANDARD-CHAR)) FOR A1 = (MAKE-ARRAY 10 :INITIAL-ELEMENT #\a :ELEMENT-TYPE ETYPE) FOR A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE ETYPE :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE ADJ :FILL-POINTER 0) FOR RESULT = (LIST (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND #\b A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1)) UNLESS (EQUAL RESULT (QUOTE (0 NIL 0 1 (#\b) (#\a #\a #\b #\a #\a #\a #\a #\a #\a #\a)))) COLLECT (LIST ETYPE ADJ RESULT))) NIL)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.28 (LOOP FOR ETYPE IN (QUOTE (CHARACTER BASE-CHAR STANDARD-CHAR)) FOR A1 = (MAKE-ARRAY 8 :INITIAL-ELEMENT #\a :ELEMENT-TYPE ETYPE) FOR A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE ETYPE :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 6) FOR RESULT = (LIST (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND #\b A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1) (NOTNOT (ADJUSTABLE-ARRAY-P A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A1))) UNLESS (EQUAL RESULT (QUOTE (6 (#\a #\a #\a #\a #\a #\a) 6 7 (#\a #\a #\a #\a #\a #\a #\b) (#\a #\a #\a #\a #\a #\a #\a #\a) T (NIL 0)))) COLLECT (LIST ETYPE RESULT)) NIL)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.29 (LOOP FOR ADJ IN (QUOTE (NIL T)) NCONC (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO IN (QUOTE (0.0 0.0 0.0 0.0)) FOR ONE IN (QUOTE (1.0 1.0 1.0 1.0)) FOR A1 = (MAKE-ARRAY 10 :INITIAL-ELEMENT ZERO :ELEMENT-TYPE ETYPE) FOR A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE ETYPE :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE ADJ :FILL-POINTER 0) FOR RESULT = (LIST (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND ONE A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1)) UNLESS (EQUAL RESULT (SYSTEM.INTERNALS::BACKQUOTE (0 NIL 0 1 ((SYSTEM.INTERNALS::BQ-COMMA ONE)) ((SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ONE) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO))))) COLLECT (LIST ETYPE ADJ RESULT))) NIL)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.30 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO IN (QUOTE (0.0 0.0 0.0 0.0)) FOR ONE IN (QUOTE (1.0 1.0 1.0 1.0)) FOR A1 = (MAKE-ARRAY 8 :INITIAL-ELEMENT ZERO :ELEMENT-TYPE ETYPE) FOR A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE ETYPE :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 6) FOR RESULT = (LIST (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (VECTOR-PUSH-EXTEND ONE A2) (FILL-POINTER A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A1) (NOTNOT (ADJUSTABLE-ARRAY-P A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT A1))) UNLESS (EQUAL RESULT (SYSTEM.INTERNALS::BACKQUOTE (6 ((SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO)) 6 7 ((SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ONE)) ((SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO) (SYSTEM.INTERNALS::BQ-COMMA ZERO)) T (NIL 0)))) COLLECT (LIST ETYPE RESULT)) NIL)
;; Loading (DEFUN VECTOR-PUSH-EXTEND-ERROR-TEST (SEQ VAL) (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((A (COPY-SEQ (SYSTEM.INTERNALS::BQ-COMMA SEQ)))) (DECLARE (OPTIMIZE (SAFETY 3))) (OR (NOTNOT (ARRAY-HAS-FILL-POINTER-P A)) (VECTOR-PUSH-EXTEND (QUOTE (SYSTEM.INTERNALS::BQ-COMMA VAL)) A 1))))) (ERROR NIL T)))
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.1 (VECTOR-PUSH-EXTEND-ERROR-TEST #(A B C D) (QUOTE X)) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.2 (VECTOR-PUSH-EXTEND-ERROR-TEST #*00000 1) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.3 (VECTOR-PUSH-EXTEND-ERROR-TEST "abcde" #\x) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.4 (VECTOR-PUSH-EXTEND-ERROR-TEST #() (QUOTE X)) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.5 (VECTOR-PUSH-EXTEND-ERROR-TEST #* 1) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.6 (VECTOR-PUSH-EXTEND-ERROR-TEST "" #\x) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.7 (VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\a) #\x) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.8 (VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-ELEMENT 0) 17) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.9 (VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.10 (VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE SHORT-FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.11 (VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE LONG-FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.12 (VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.13 (VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT) :INITIAL-ELEMENT 1.0) 2.0) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.14 (SIGNALS-ERROR (VECTOR-PUSH-EXTEND) PROGRAM-ERROR) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.15 (SIGNALS-ERROR (VECTOR-PUSH-EXTEND (VECTOR 1 2 3)) PROGRAM-ERROR) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.16 (SIGNALS-ERROR (VECTOR-PUSH-EXTEND (VECTOR 1 2 3) 4 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST VECTOR-PUSH-EXTEND.ERROR.17 (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (LET ((A (MAKE-ARRAY (QUOTE 5) :FILL-POINTER T :ADJUSTABLE NIL :INITIAL-ELEMENT NIL))) (OR (NOTNOT (ADJUSTABLE-ARRAY-P A)) (VECTOR-PUSH-EXTEND A (QUOTE X))))))) (ERROR NIL T)) T)
;; Loading (LOAD "vectorp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/vectorp.lsp C1184727>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST VECTORP.1 (VECTORP 1) NIL)
;; Loading (DEFTEST VECTORP.2 (VECTORP (1+ MOST-POSITIVE-FIXNUM)) NIL)
;; Loading (DEFTEST VECTORP.3 (VECTORP #\a) NIL)
;; Loading (DEFTEST VECTORP.4 (VECTORP 10.0) NIL)
;; Loading (DEFTEST VECTORP.5 (VECTORP (FUNCTION (LAMBDA (X Y) (CONS Y X)))) NIL)
;; Loading (DEFTEST VECTORP.6 (VECTORP (QUOTE (A B))) NIL)
;; Loading (DEFTEST VECTORP.7 (VECTORP #<(Array T Nil) C11AC8F3>) NIL)
;; Loading (DEFTEST VECTORP.8 (VECTORP #<(Array T (2 2)) C11B0F13>) NIL)
;; Loading (DEFTEST VECTORP.9 (NOTNOT-MV (VECTORP "abcd")) T)
;; Loading (DEFTEST VECTORP.10 (NOTNOT-MV (VECTORP #*)) T)
;; Loading (DEFTEST VECTORP.11 (NOTNOT-MV (VECTORP #*1101)) T)
;; Loading (DEFTEST VECTORP.12 (NOTNOT-MV (VECTORP "")) T)
;; Loading (DEFTEST VECTORP.13 (NOTNOT-MV (VECTORP #(1 2 3))) T)
;; Loading (DEFTEST VECTORP.14 (NOTNOT-MV (VECTORP #())) T)
;; Loading (DEFTEST VECTORP.15 (VECTORP 26) NIL)
;; Loading (DEFTEST VECTORP.ERROR.1 (SIGNALS-ERROR (VECTORP) PROGRAM-ERROR) T)
;; Loading (DEFTEST VECTORP.ERROR.2 (SIGNALS-ERROR (VECTORP #() #()) PROGRAM-ERROR) T)
;; Loading (LOAD "bit.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit.lsp C11E1CA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BIT.1 (BIT #*0010 2) 1)
;; Loading (DEFTEST BIT.2 (LET ((A #*00000000)) (LOOP FOR I FROM 0 BELOW (LENGTH A) COLLECT (LET ((B (COPY-SEQ A))) (SETF (BIT B I) 1) B))) (#*10000000 #*01000000 #*00100000 #*00010000 #*00001000 #*00000100 #*00000010 #*00000001))
;; Loading (DEFTEST BIT.3 (LET ((A #*11111111)) (LOOP FOR I FROM 0 BELOW (LENGTH A) COLLECT (LET ((B (COPY-SEQ A))) (SETF (BIT B I) 0) B))) (#*01111111 #*10111111 #*11011111 #*11101111 #*11110111 #*11111011 #*11111101 #*11111110))
;; Loading (DEFTEST BIT.4 (LET ((A (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF A) (BIT A) (SETF (BIT A) 1) (AREF A) (BIT A))) 0 0 1 1 1)
;; Loading (DEFTEST BIT.5 (LET ((A (MAKE-ARRAY (QUOTE (1 1)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF A 0 0) (BIT A 0 0) (SETF (BIT A 0 0) 1) (AREF A 0 0) (BIT A 0 0))) 0 0 1 1 1)
;; Loading (DEFTEST BIT.6 (LET ((A (MAKE-ARRAY (QUOTE (10 10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF A 5 5) (BIT A 5 5) (SETF (BIT A 5 5) 1) (AREF A 5 5) (BIT A 5 5))) 0 0 1 1 1)
;; Loading (DEFTEST BIT.7 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 1 0 0 1 1 1 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5))) (VALUES (COERCE A (QUOTE LIST)) (LOOP FOR I FROM 0 BELOW 10 COLLECT (BIT A I)) (LOOP FOR I FROM 0 BELOW 10 COLLECT (SETF (BIT A I) (- 1 (BIT A I)))) (COERCE A (QUOTE LIST)) (LOOP FOR I FROM 0 BELOW 10 COLLECT (BIT A I)) (FILL-POINTER A))) (0 1 1 0 0) (0 1 1 0 0 1 1 1 0 0) (1 0 0 1 1 0 0 0 1 1) (1 0 0 1 1) (1 0 0 1 1 0 0 0 1 1) 5)
;; Loading (DEFTEST BIT.8 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 1 0 0 1 1 1 0 0)) :ELEMENT-TYPE (QUOTE BIT) :ADJUSTABLE T))) (VALUES (COERCE A (QUOTE LIST)) (LOOP FOR I FROM 0 BELOW 10 COLLECT (BIT A I)) (LOOP FOR I FROM 0 BELOW 10 COLLECT (SETF (BIT A I) (- 1 (BIT A I)))) (COERCE A (QUOTE LIST)) (LOOP FOR I FROM 0 BELOW 10 COLLECT (BIT A I)))) (0 1 1 0 0 1 1 1 0 0) (0 1 1 0 0 1 1 1 0 0) (1 0 0 1 1 0 0 0 1 1) (1 0 0 1 1 0 0 0 1 1) (1 0 0 1 1 0 0 0 1 1))
;; Loading (DEFTEST BIT.ORDER.1 (LET ((X 0) Y Z (B (COPY-SEQ #*01010))) (VALUES (BIT (PROGN (SETF Y (INCF X)) B) (PROGN (SETF Z (INCF X)) 1)) X Y Z)) 1 2 1 2)
;; Loading (DEFTEST BIT.ORDER.2 (LET ((X 0) Y Z W (B (COPY-SEQ #*01010))) (VALUES (SETF (BIT (PROGN (SETF Y (INCF X)) B) (PROGN (SETF Z (INCF X)) 1)) (PROGN (SETF W (INCF X)) 0)) B X Y Z W)) 0 #*00010 3 1 2 3)
;; Loading (DEFTEST BIT.ERROR.1 (SIGNALS-ERROR (BIT) PROGRAM-ERROR) T)
;; Loading (LOAD "sbit.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/sbit.lsp C129C4D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SBIT.1 (SBIT #*0010 2) 1)
;; Loading (DEFTEST SBIT.2 (LET ((A #*00000000)) (LOOP FOR I FROM 0 BELOW (LENGTH A) COLLECT (LET ((B (COPY-SEQ A))) (SETF (SBIT B I) 1) B))) (#*10000000 #*01000000 #*00100000 #*00010000 #*00001000 #*00000100 #*00000010 #*00000001))
;; Loading (DEFTEST SBIT.3 (LET ((A #*11111111)) (LOOP FOR I FROM 0 BELOW (LENGTH A) COLLECT (LET ((B (COPY-SEQ A))) (SETF (SBIT B I) 0) B))) (#*01111111 #*10111111 #*11011111 #*11101111 #*11110111 #*11111011 #*11111101 #*11111110))
;; Loading (DEFTEST SBIT.4 (LET ((A (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF A) (SBIT A) (SETF (SBIT A) 1) (AREF A) (SBIT A))) 0 0 1 1 1)
;; Loading (DEFTEST SBIT.5 (LET ((A (MAKE-ARRAY (QUOTE (1 1)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF A 0 0) (SBIT A 0 0) (SETF (SBIT A 0 0) 1) (AREF A 0 0) (SBIT A 0 0))) 0 0 1 1 1)
;; Loading (DEFTEST SBIT.6 (LET ((A (MAKE-ARRAY (QUOTE (10 10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF A 5 5) (SBIT A 5 5) (SETF (SBIT A 5 5) 1) (AREF A 5 5) (SBIT A 5 5))) 0 0 1 1 1)
;; Loading (DEFTEST SBIT.ORDER.1 (LET ((I 0) A B) (VALUES (SBIT (PROGN (SETF A (INCF I)) #*001001) (PROGN (SETF B (INCF I)) 1)) I A B)) 0 2 1 2)
;; Loading (DEFTEST SBIT.ORDER.2 (LET ((I 0) A B C (V (COPY-SEQ #*001001))) (VALUES (SETF (SBIT (PROGN (SETF A (INCF I)) V) (PROGN (SETF B (INCF I)) 1)) (PROGN (SETF C (INCF I)) 1)) V I A B C)) 1 #*011001 3 1 2 3)
;; Loading (DEFTEST SBIT.ERROR.1 (SIGNALS-ERROR (SBIT) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-and.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-and.lsp C1316F27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/bit-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN BIT-RANDOM-TEST-FN (BIT-FN LOG-FN &KEY (REPS 5000) (MAXLEN 100)) (ASSERT (TYPEP MAXLEN (QUOTE (INTEGER 1)))) (ASSERT (TYPEP REPS (QUOTE UNSIGNED-BYTE))) (LOOP FOR LEN = (RANDOM MAXLEN) FOR TWOS = (MAKE-LIST LEN :INITIAL-ELEMENT 2) FOR V1 = (MAP (QUOTE BIT-VECTOR) (FUNCTION RANDOM) TWOS) FOR V2 = (MAP (QUOTE BIT-VECTOR) (FUNCTION RANDOM) TWOS) FOR RESULT = (FUNCALL BIT-FN V1 V2) REPEAT REPS UNLESS (AND (= (LENGTH RESULT) LEN) (EVERY (FUNCTION (LAMBDA (RESULT-BIT V1-BIT V2-BIT) (= RESULT-BIT (LOGAND 1 (FUNCALL LOG-FN V1-BIT V2-BIT))))) RESULT V1 V2)) COLLECT (LIST LEN V1 V2 RESULT))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-aux.llf C1632147>
;; Loading (DEFTEST BIT-AND.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-AND S1 S2) S1 S2)) #<(Array T Nil) C1670903> #<(Array T Nil) C1670D43> #<(Array T Nil) C1671183>)
;; Loading (DEFTEST BIT-AND.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-AND S1 S2) S1 S2)) #<(Array T Nil) C167EA43> #<(Array T Nil) C167EE83> #<(Array T Nil) C167F2C3>)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST BIT-AND.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-AND S1 S2) S1 S2)) #<(Array T Nil) 80F5E823> #<(Array T Nil) 80F5EC63> #<(Array T Nil) 80F5F0A3>)
;; Loading (DEFTEST BIT-AND.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-AND S1 S2) S1 S2)) #<(Array T Nil) 80FD6373> #<(Array T Nil) 80FD67B3> #<(Array T Nil) 80FD6BF3>)
;; Loading (DEFTEST BIT-AND.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-AND S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 80FE8223> #<(Array T Nil) 80FE8663> #<(Array T Nil) 80FE8AA3> #<(Array T Nil) 80FE8EE3> T)
;; Loading (DEFTEST BIT-AND.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-AND S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 80FFD243> #<(Array T Nil) 80FFD683> #<(Array T Nil) 80FFDAC3> #<(Array T Nil) 80FFDF03> T)
;; Loading (DEFTEST BIT-AND.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-AND S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) 8100FC93> #<(Array T Nil) 810100D3> #<(Array T Nil) 81010513> T)
;; Loading (DEFTEST BIT-AND.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-AND A1 A2)) A1 A2)) #*0001 #*0011 #*0101)
;; Loading (DEFTEST BIT-AND.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-AND A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*0001 #*0001 #*0101 T)
;; Loading (DEFTEST BIT-AND.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*1110)) (RESULT (CHECK-VALUES (BIT-AND A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*0001 #*0011 #*0101 #*0001 T)
;; Loading (DEFTEST BIT-AND.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-AND A1 A2 NIL)) A1 A2)) #*0001 #*0011 #*0101)
;; Loading (DEFTEST BIT-AND.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-AND A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 8104DD33> #<(Array T (2 2)) 8104EAC3> #<(Array T (2 2)) 8104F853>)
;; Loading (DEFTEST BIT-AND.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-AND A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81063083> #<(Array T (2 2)) 81063E13> #<(Array T (2 2)) 81064BA3>)
;; Loading (DEFTEST BIT-AND.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-AND A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81078533> #<(Array T (2 2)) 810792C3> #<(Array T (2 2)) 8107A053>)
;; Loading (DEFTEST BIT-AND.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-AND A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) 81091643> #<(Array T (2 2)) 810923D3> #<(Array T (2 2)) 81093163> #<(Array T (2 2)) 81093EF3>)
;; Loading (DEFTEST BIT-AND.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-AND A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 810ACB53> #<(Array T (2 2)) 810AD8E3> #<(Array T (2 2)) 810AE673>)
;; Loading (DEFTEST BIT-AND.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-AND A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) 810C8643> #<(Array T (2 2)) 810C93D3> #<(Array T (2 2)) 810CA163>)
;; Loading (DEFTEST BIT-AND.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-AND A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*00010011 #<(Array T (2 2)) 810E52F3> #<(Array T (2 2)) 810E6083> #<(Array T (2 2)) 810E6E13>)
;; Loading (DEFTEST BIT-AND.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-AND A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100110001 #<(Array T (2 2)) 81106DE3> #<(Array T (2 2)) 81107B73> #<(Array T (2 2)) 81108903>)
;; Loading (DEFTEST BIT-AND.20 (MACROLET ((%M (Z) Z)) (BIT-AND (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*0001)
;; Loading (DEFTEST BIT-AND.21 (MACROLET ((%M (Z) Z)) (BIT-AND #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*1000)
;; Loading (DEFTEST BIT-AND.22 (MACROLET ((%M (Z) Z)) (BIT-AND #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*00100010)
;; Loading (DEFTEST BIT-AND.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-AND (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*0 2 1 2)
;; Loading (DEF-FOLD-TEST BIT-AND.FOLD.1 (BIT-AND #*01101 #*01011))
;; Loading (DEFTEST BIT-AND.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-AND) (FUNCTION LOGAND)) NIL)
;; Loading (DEFTEST BIT-AND.ERROR.1 (SIGNALS-ERROR (BIT-AND) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-AND.ERROR.2 (SIGNALS-ERROR (BIT-AND #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-AND.ERROR.3 (SIGNALS-ERROR (BIT-AND #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-andc1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-andc1.lsp 81166417>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
;; Loading (DEFTEST BIT-ANDC1.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC1 S1 S2) S1 S2)) #<(Array T Nil) 811963B3> #<(Array T Nil) 811967F3> #<(Array T Nil) 81196C33>)
;; Loading (DEFTEST BIT-ANDC1.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC1 S1 S2) S1 S2)) #<(Array T Nil) 811A47B3> #<(Array T Nil) 811A4BF3> #<(Array T Nil) 811A5033>)
;; Loading (DEFTEST BIT-ANDC1.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC1 S1 S2) S1 S2)) #<(Array T Nil) 811B2BB3> #<(Array T Nil) 811B2FF3> #<(Array T Nil) 811B3433>)
;; Loading (DEFTEST BIT-ANDC1.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC1 S1 S2) S1 S2)) #<(Array T Nil) 811C0FB3> #<(Array T Nil) 811C13F3> #<(Array T Nil) 811C1833>)
;; Loading (DEFTEST BIT-ANDC1.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ANDC1 S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 811D3123> #<(Array T Nil) 811D3563> #<(Array T Nil) 811D39A3> #<(Array T Nil) 811D3DE3> T)
;; Loading (DEFTEST BIT-ANDC1.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ANDC1 S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 811E8403> #<(Array T Nil) 811E8843> #<(Array T Nil) 811E8C83> #<(Array T Nil) 811E90C3> T)
;; Loading (DEFTEST BIT-ANDC1.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ANDC1 S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) 811FB113> #<(Array T Nil) 811FB553> #<(Array T Nil) 811FB993> T)
;; Loading (DEFTEST BIT-ANDC1.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-ANDC1 A1 A2)) A1 A2)) #*0100 #*0011 #*0101)
;; Loading (DEFTEST BIT-ANDC1.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-ANDC1 A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*0100 #*0100 #*0101 T)
;; Loading (DEFTEST BIT-ANDC1.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*0000)) (RESULT (CHECK-VALUES (BIT-ANDC1 A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*0100 #*0011 #*0101 #*0100 T)
;; Loading (DEFTEST BIT-ANDC1.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-ANDC1 A1 A2 NIL)) A1 A2)) #*0100 #*0011 #*0101)
;; Loading (DEFTEST BIT-ANDC1.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ANDC1 A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81239F73> #<(Array T (2 2)) 8123AD03> #<(Array T (2 2)) 8123BA93>)
;; Loading (DEFTEST BIT-ANDC1.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ANDC1 A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 8124F583> #<(Array T (2 2)) 81250313> #<(Array T (2 2)) 812510A3>)
;; Loading (DEFTEST BIT-ANDC1.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ANDC1 A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81264CF3> #<(Array T (2 2)) 81265A83> #<(Array T (2 2)) 81266813>)
;; Loading (DEFTEST BIT-ANDC1.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-ANDC1 A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) 8127E0C3> #<(Array T (2 2)) 8127EE53> #<(Array T (2 2)) 8127FBE3> #<(Array T (2 2)) 81280973>)
;; Loading (DEFTEST BIT-ANDC1.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-ANDC1 A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81299893> #<(Array T (2 2)) 8129A623> #<(Array T (2 2)) 8129B3B3>)
;; Loading (DEFTEST BIT-ANDC1.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-ANDC1 A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) 812B5643> #<(Array T (2 2)) 812B63D3> #<(Array T (2 2)) 812B7163>)
;; Loading (DEFTEST BIT-ANDC1.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-ANDC1 A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*00100011 #<(Array T (2 2)) 812D25B3> #<(Array T (2 2)) 812D3343> #<(Array T (2 2)) 812D40D3>)
;; Loading (DEFTEST BIT-ANDC1.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-ANDC1 A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100110010 #<(Array T (2 2)) 812F4363> #<(Array T (2 2)) 812F50F3> #<(Array T (2 2)) 812F5E83>)
;; Loading (DEFTEST BIT-ANDC1.20 (MACROLET ((%M (Z) Z)) (BIT-ANDC1 (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*0100)
;; Loading (DEFTEST BIT-ANDC1.21 (MACROLET ((%M (Z) Z)) (BIT-ANDC1 #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*0100)
;; Loading (DEFTEST BIT-ANDC1.22 (MACROLET ((%M (Z) Z)) (BIT-ANDC1 #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*01001000)
;; Loading (DEFTEST BIT-ANDC1.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-ANDC1 (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*0 2 1 2)
;; Loading (DEF-FOLD-TEST BIT-ANDC1.FOLD.1 (BIT-ANDC1 #*10010 #*01011))
;; Loading (DEFTEST BIT-ANDC1.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-ANDC1) (FUNCTION LOGANDC1)) NIL)
;; Loading (DEFTEST BIT-ANDC1.ERROR.1 (SIGNALS-ERROR (BIT-ANDC1) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-ANDC1.ERROR.2 (SIGNALS-ERROR (BIT-ANDC1 #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-ANDC1.ERROR.3 (SIGNALS-ERROR (BIT-ANDC1 #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-andc2.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-andc2.lsp 8134E8A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
;; Loading (DEFTEST BIT-ANDC2.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC2 S1 S2) S1 S2)) #<(Array T Nil) 8137AAC3> #<(Array T Nil) 8137AF03> #<(Array T Nil) 8137B343>)
;; Loading (DEFTEST BIT-ANDC2.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC2 S1 S2) S1 S2)) #<(Array T Nil) 81388EC3> #<(Array T Nil) 81389303> #<(Array T Nil) 81389743>)
;; Loading (DEFTEST BIT-ANDC2.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC2 S1 S2) S1 S2)) #<(Array T Nil) 813972C3> #<(Array T Nil) 81397703> #<(Array T Nil) 81397B43>)
;; Loading (DEFTEST BIT-ANDC2.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC2 S1 S2) S1 S2)) #<(Array T Nil) 813A56C3> #<(Array T Nil) 813A5B03> #<(Array T Nil) 813A5F43>)
;; Loading (DEFTEST BIT-ANDC2.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ANDC2 S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 813B7833> #<(Array T Nil) 813B7C73> #<(Array T Nil) 813B80B3> #<(Array T Nil) 813B84F3> T)
;; Loading (DEFTEST BIT-ANDC2.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ANDC2 S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 813CCB13> #<(Array T Nil) 813CCF53> #<(Array T Nil) 813CD393> #<(Array T Nil) 813CD7D3> T)
;; Loading (DEFTEST BIT-ANDC2.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ANDC2 S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) 813DF823> #<(Array T Nil) 813DFC63> #<(Array T Nil) 813E00A3> T)
;; Loading (DEFTEST BIT-ANDC2.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-ANDC2 A1 A2)) A1 A2)) #*0010 #*0011 #*0101)
;; Loading (DEFTEST BIT-ANDC2.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-ANDC2 A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*0010 #*0010 #*0101 T)
;; Loading (DEFTEST BIT-ANDC2.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*1110)) (RESULT (CHECK-VALUES (BIT-ANDC2 A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*0010 #*0011 #*0101 #*0010 T)
;; Loading (DEFTEST BIT-ANDC2.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-ANDC2 A1 A2 NIL)) A1 A2)) #*0010 #*0011 #*0101)
;; Loading (DEFTEST BIT-ANDC2.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ANDC2 A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 8141E683> #<(Array T (2 2)) 8141F413> #<(Array T (2 2)) 814201A3>)
;; Loading (DEFTEST BIT-ANDC2.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ANDC2 A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81433C93> #<(Array T (2 2)) 81434A23> #<(Array T (2 2)) 814357B3>)
;; Loading (DEFTEST BIT-ANDC2.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ANDC2 A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81449403> #<(Array T (2 2)) 8144A193> #<(Array T (2 2)) 8144AF23>)
;; Loading (DEFTEST BIT-ANDC2.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-ANDC2 A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) 814627D3> #<(Array T (2 2)) 81463563> #<(Array T (2 2)) 814642F3> #<(Array T (2 2)) 81465083>)
;; Loading (DEFTEST BIT-ANDC2.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-ANDC2 A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 8147DFA3> #<(Array T (2 2)) 8147ED33> #<(Array T (2 2)) 8147FAC3>)
;; Loading (DEFTEST BIT-ANDC2.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-ANDC2 A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) 81499D53> #<(Array T (2 2)) 8149AAE3> #<(Array T (2 2)) 8149B873>)
;; Loading (DEFTEST BIT-ANDC2.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-ANDC2 A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*01000011 #<(Array T (2 2)) 814B6CC3> #<(Array T (2 2)) 814B7A53> #<(Array T (2 2)) 814B87E3>)
;; Loading (DEFTEST BIT-ANDC2.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-ANDC2 A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100110100 #<(Array T (2 2)) 814D8A73> #<(Array T (2 2)) 814D9803> #<(Array T (2 2)) 814DA593>)
;; Loading (DEFTEST BIT-ANDC2.20 (MACROLET ((%M (Z) Z)) (BIT-ANDC2 (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*0010)
;; Loading (DEFTEST BIT-ANDC2.21 (MACROLET ((%M (Z) Z)) (BIT-ANDC2 #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*0010)
;; Loading (DEFTEST BIT-ANDC2.22 (MACROLET ((%M (Z) Z)) (BIT-ANDC2 #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*10000001)
;; Loading (DEFTEST BIT-ANDC2.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-ANDC2 (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*0 2 1 2)
;; Loading (DEF-FOLD-TEST BIT-ANDC2.FOLD.1 (BIT-ANDC2 #*01101 #*10100))
;; Loading (DEFTEST BIT-ANDC2.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-ANDC2) (FUNCTION LOGANDC2)) NIL)
;; Loading (DEFTEST BIT-ANDC2.ERROR.1 (SIGNALS-ERROR (BIT-ANDC2) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-ANDC2.ERROR.2 (SIGNALS-ERROR (BIT-ANDC2 #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-ANDC2.ERROR.3 (SIGNALS-ERROR (BIT-ANDC2 #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-eqv.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-eqv.lsp 81532E17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
;; Loading (DEFTEST BIT-EQV.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-EQV S1 S2) S1 S2)) #<(Array T Nil) 8155ED53> #<(Array T Nil) 8155F193> #<(Array T Nil) 8155F5D3>)
;; Loading (DEFTEST BIT-EQV.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-EQV S1 S2) S1 S2)) #<(Array T Nil) 8156CE93> #<(Array T Nil) 8156D2D3> #<(Array T Nil) 8156D713>)
;; Loading (DEFTEST BIT-EQV.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-EQV S1 S2) S1 S2)) #<(Array T Nil) 8157AFD3> #<(Array T Nil) 8157B413> #<(Array T Nil) 8157B853>)
;; Loading (DEFTEST BIT-EQV.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-EQV S1 S2) S1 S2)) #<(Array T Nil) 81589113> #<(Array T Nil) 81589553> #<(Array T Nil) 81589993>)
;; Loading (DEFTEST BIT-EQV.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-EQV S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 8159AFC3> #<(Array T Nil) 8159B403> #<(Array T Nil) 8159B843> #<(Array T Nil) 8159BC83> T)
;; Loading (DEFTEST BIT-EQV.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-EQV S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 815AFFE3> #<(Array T Nil) 815B0423> #<(Array T Nil) 815B0863> #<(Array T Nil) 815B0CA3> T)
;; Loading (DEFTEST BIT-EQV.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-EQV S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) 815C2A33> #<(Array T Nil) 815C2E73> #<(Array T Nil) 815C32B3> T)
;; Loading (DEFTEST BIT-EQV.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-EQV A1 A2)) A1 A2)) #*1001 #*0011 #*0101)
;; Loading (DEFTEST BIT-EQV.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-EQV A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*1001 #*1001 #*0101 T)
;; Loading (DEFTEST BIT-EQV.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*0000)) (RESULT (CHECK-VALUES (BIT-EQV A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*1001 #*0011 #*0101 #*1001 T)
;; Loading (DEFTEST BIT-EQV.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-EQV A1 A2 NIL)) A1 A2)) #*1001 #*0011 #*0101)
;; Loading (DEFTEST BIT-EQV.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-EQV A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81600AD3> #<(Array T (2 2)) 81601863> #<(Array T (2 2)) 816025F3>)
;; Loading (DEFTEST BIT-EQV.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-EQV A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81615E23> #<(Array T (2 2)) 81616BB3> #<(Array T (2 2)) 81617943>)
;; Loading (DEFTEST BIT-EQV.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-EQV A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 8162B2D3> #<(Array T (2 2)) 8162C063> #<(Array T (2 2)) 8162CDF3>)
;; Loading (DEFTEST BIT-EQV.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-EQV A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) 816443E3> #<(Array T (2 2)) 81645173> #<(Array T (2 2)) 81645F03> #<(Array T (2 2)) 81646C93>)
;; Loading (DEFTEST BIT-EQV.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-EQV A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 8165F8F3> #<(Array T (2 2)) 81660683> #<(Array T (2 2)) 81661413>)
;; Loading (DEFTEST BIT-EQV.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-EQV A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) 8167B3E3> #<(Array T (2 2)) 8167C173> #<(Array T (2 2)) 8167CF03>)
;; Loading (DEFTEST BIT-EQV.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-EQV A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*10010011 #<(Array T (2 2)) 81698093> #<(Array T (2 2)) 81698E23> #<(Array T (2 2)) 81699BB3>)
;; Loading (DEFTEST BIT-EQV.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-EQV A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100111001 #<(Array T (2 2)) 816B9B83> #<(Array T (2 2)) 816BA913> #<(Array T (2 2)) 816BB6A3>)
;; Loading (DEFTEST BIT-EQV.20 (MACROLET ((%M (Z) Z)) (BIT-EQV (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*1001)
;; Loading (DEFTEST BIT-EQV.21 (MACROLET ((%M (Z) Z)) (BIT-EQV #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*1001)
;; Loading (DEFTEST BIT-EQV.22 (MACROLET ((%M (Z) Z)) (BIT-EQV #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*00110110)
;; Loading (DEFTEST BIT-EQV.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-EQV (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*1 2 1 2)
;; Loading (DEF-FOLD-TEST BIT-EQV.FOLD.1 (BIT-EQV #*01101 #*10100))
;; Loading (DEFTEST BIT-EQV.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-EQV) (FUNCTION LOGEQV)) NIL)
;; Loading (DEFTEST BIT-EQV.ERROR.1 (SIGNALS-ERROR (BIT-EQV) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-EQV.ERROR.2 (SIGNALS-ERROR (BIT-EQV #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-EQV.ERROR.3 (SIGNALS-ERROR (BIT-EQV #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-ior.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-ior.lsp 81712227>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST BIT-IOR.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-IOR S1 S2) S1 S2)) #<(Array T Nil) C0ED8933> #<(Array T Nil) C0ED8D73> #<(Array T Nil) C0ED91B3>)
;; Loading (DEFTEST BIT-IOR.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-IOR S1 S2) S1 S2)) #<(Array T Nil) C0FEAE03> #<(Array T Nil) C0FEB243> #<(Array T Nil) C0FEB683>)
;; Loading (DEFTEST BIT-IOR.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-IOR S1 S2) S1 S2)) #<(Array T Nil) C0FF8F43> #<(Array T Nil) C0FF9383> #<(Array T Nil) C0FF97C3>)
;; Loading (DEFTEST BIT-IOR.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-IOR S1 S2) S1 S2)) #<(Array T Nil) C1007083> #<(Array T Nil) C10074C3> #<(Array T Nil) C1007903>)
;; Loading (DEFTEST BIT-IOR.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-IOR S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) C1018F33> #<(Array T Nil) C1019373> #<(Array T Nil) C10197B3> #<(Array T Nil) C1019BF3> T)
;; Loading (DEFTEST BIT-IOR.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-IOR S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) C102DF53> #<(Array T Nil) C102E393> #<(Array T Nil) C102E7D3> #<(Array T Nil) C102EC13> T)
;; Loading (DEFTEST BIT-IOR.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-IOR S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) C10409A3> #<(Array T Nil) C1040DE3> #<(Array T Nil) C1041223> T)
;; Loading (DEFTEST BIT-IOR.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-IOR A1 A2)) A1 A2)) #*0111 #*0011 #*0101)
;; Loading (DEFTEST BIT-IOR.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-IOR A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*0111 #*0111 #*0101 T)
;; Loading (DEFTEST BIT-IOR.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*1110)) (RESULT (CHECK-VALUES (BIT-IOR A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*0111 #*0011 #*0101 #*0111 T)
;; Loading (DEFTEST BIT-IOR.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-IOR A1 A2 NIL)) A1 A2)) #*0111 #*0011 #*0101)
;; Loading (DEFTEST BIT-IOR.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-IOR A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C107EA43> #<(Array T (2 2)) C107F7D3> #<(Array T (2 2)) C1080563>)
;; Loading (DEFTEST BIT-IOR.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-IOR A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C1093D93> #<(Array T (2 2)) C1094B23> #<(Array T (2 2)) C10958B3>)
;; Loading (DEFTEST BIT-IOR.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-IOR A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C10A9243> #<(Array T (2 2)) C10A9FD3> #<(Array T (2 2)) C10AAD63>)
;; Loading (DEFTEST BIT-IOR.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-IOR A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) C10C2353> #<(Array T (2 2)) C10C30E3> #<(Array T (2 2)) C10C3E73> #<(Array T (2 2)) C10C4C03>)
;; Loading (DEFTEST BIT-IOR.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-IOR A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C10DD863> #<(Array T (2 2)) C10DE5F3> #<(Array T (2 2)) C10DF383>)
;; Loading (DEFTEST BIT-IOR.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-IOR A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) C10F9353> #<(Array T (2 2)) C10FA0E3> #<(Array T (2 2)) C10FAE73>)
;; Loading (DEFTEST BIT-IOR.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-IOR A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*01110011 #<(Array T (2 2)) C1116003> #<(Array T (2 2)) C1116D93> #<(Array T (2 2)) C1117B23>)
;; Loading (DEFTEST BIT-IOR.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-IOR A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100110111 #<(Array T (2 2)) C1137AF3> #<(Array T (2 2)) C1138883> #<(Array T (2 2)) C1139613>)
;; Loading (DEFTEST BIT-IOR.20 (MACROLET ((%M (Z) Z)) (BIT-IOR (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*0111)
;; Loading (DEFTEST BIT-IOR.21 (MACROLET ((%M (Z) Z)) (BIT-IOR #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*1110)
;; Loading (DEFTEST BIT-IOR.22 (MACROLET ((%M (Z) Z)) (BIT-IOR #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*11101011)
;; Loading (DEFTEST BIT-IOR.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-IOR (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*0 2 1 2)
;; Loading (DEF-FOLD-TEST BIT-IOR.FOLD.1 (BIT-IOR #*00101 #*10100))
;; Loading (DEFTEST BIT-IOR.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-IOR) (FUNCTION LOGIOR)) NIL)
;; Loading (DEFTEST BIT-IOR.ERROR.1 (SIGNALS-ERROR (BIT-IOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-IOR.ERROR.2 (SIGNALS-ERROR (BIT-IOR #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-IOR.ERROR.3 (SIGNALS-ERROR (BIT-IOR #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-nand.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-nand.lsp C1196E37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
;; Loading (DEFTEST BIT-NAND.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NAND S1 S2) S1 S2)) #<(Array T Nil) C11C6C93> #<(Array T Nil) C11C70D3> #<(Array T Nil) C11C7513>)
;; Loading (DEFTEST BIT-NAND.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NAND S1 S2) S1 S2)) #<(Array T Nil) C11D4F33> #<(Array T Nil) C11D5373> #<(Array T Nil) C11D57B3>)
;; Loading (DEFTEST BIT-NAND.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NAND S1 S2) S1 S2)) #<(Array T Nil) C11E31D3> #<(Array T Nil) C11E3613> #<(Array T Nil) C11E3A53>)
;; Loading (DEFTEST BIT-NAND.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NAND S1 S2) S1 S2)) #<(Array T Nil) C11F1473> #<(Array T Nil) C11F18B3> #<(Array T Nil) C11F1CF3>)
;; Loading (DEFTEST BIT-NAND.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-NAND S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) C1203483> #<(Array T Nil) C12038C3> #<(Array T Nil) C1203D03> #<(Array T Nil) C1204143> T)
;; Loading (DEFTEST BIT-NAND.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-NAND S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) C1218603> #<(Array T Nil) C1218A43> #<(Array T Nil) C1218E83> #<(Array T Nil) C12192C3> T)
;; Loading (DEFTEST BIT-NAND.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-NAND S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) C122B1B3> #<(Array T Nil) C122B5F3> #<(Array T Nil) C122BA33> T)
;; Loading (DEFTEST BIT-NAND.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-NAND A1 A2)) A1 A2)) #*1110 #*0011 #*0101)
;; Loading (DEFTEST BIT-NAND.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-NAND A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*1110 #*1110 #*0101 T)
;; Loading (DEFTEST BIT-NAND.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*1110)) (RESULT (CHECK-VALUES (BIT-NAND A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*1110 #*0011 #*0101 #*1110 T)
;; Loading (DEFTEST BIT-NAND.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-NAND A1 A2 NIL)) A1 A2)) #*1110 #*0011 #*0101)
;; Loading (DEFTEST BIT-NAND.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-NAND A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C1269933> #<(Array T (2 2)) C126A6C3> #<(Array T (2 2)) C126B453>)
;; Loading (DEFTEST BIT-NAND.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-NAND A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C127EDE3> #<(Array T (2 2)) C127FB73> #<(Array T (2 2)) C1280903>)
;; Loading (DEFTEST BIT-NAND.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-NAND A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C12943F3> #<(Array T (2 2)) C1295183> #<(Array T (2 2)) C1295F13>)
;; Loading (DEFTEST BIT-NAND.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-NAND A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) C12AD663> #<(Array T (2 2)) C12AE3F3> #<(Array T (2 2)) C12AF183> #<(Array T (2 2)) C12AFF13>)
;; Loading (DEFTEST BIT-NAND.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-NAND A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C12C8CD3> #<(Array T (2 2)) C12C9A63> #<(Array T (2 2)) C12CA7F3>)
;; Loading (DEFTEST BIT-NAND.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-NAND A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) C12E4923> #<(Array T (2 2)) C12E56B3> #<(Array T (2 2)) C12E6443>)
;; Loading (DEFTEST BIT-NAND.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-NAND A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*11100011 #<(Array T (2 2)) C1301733> #<(Array T (2 2)) C13024C3> #<(Array T (2 2)) C1303253>)
;; Loading (DEFTEST BIT-NAND.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-NAND A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100111110 #<(Array T (2 2)) C1323383> #<(Array T (2 2)) C1324113> #<(Array T (2 2)) C1324EA3>)
;; Loading (DEFTEST BIT-NAND.20 (MACROLET ((%M (Z) Z)) (BIT-NAND (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*1110)
;; Loading (DEFTEST BIT-NAND.21 (MACROLET ((%M (Z) Z)) (BIT-NAND #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*0111)
;; Loading (DEFTEST BIT-NAND.22 (MACROLET ((%M (Z) Z)) (BIT-NAND #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*11011101)
;; Loading (DEFTEST BIT-NAND.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-NAND (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*1 2 1 2)
;; Loading (DEF-FOLD-TEST BIT-NAND.FOLD.1 (BIT-NAND #*00101 #*10100))
;; Loading (DEFTEST BIT-NAND.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-NAND) (FUNCTION LOGNAND)) NIL)
;; Loading (DEFTEST BIT-NAND.ERROR.1 (SIGNALS-ERROR (BIT-NAND) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-NAND.ERROR.2 (SIGNALS-ERROR (BIT-NAND #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-NAND.ERROR.3 (SIGNALS-ERROR (BIT-NAND #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-nor.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-nor.lsp C137C8A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
;; Loading (DEFTEST BIT-NOR.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NOR S1 S2) S1 S2)) #<(Array T Nil) C13A87E3> #<(Array T Nil) C13A8C23> #<(Array T Nil) C13A9063>)
;; Loading (DEFTEST BIT-NOR.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NOR S1 S2) S1 S2)) #<(Array T Nil) C13B6923> #<(Array T Nil) C13B6D63> #<(Array T Nil) C13B71A3>)
;; Loading (DEFTEST BIT-NOR.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NOR S1 S2) S1 S2)) #<(Array T Nil) C13C4A63> #<(Array T Nil) C13C4EA3> #<(Array T Nil) C13C52E3>)
;; Loading (DEFTEST BIT-NOR.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NOR S1 S2) S1 S2)) #<(Array T Nil) C13D2BA3> #<(Array T Nil) C13D2FE3> #<(Array T Nil) C13D3423>)
;; Loading (DEFTEST BIT-NOR.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-NOR S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) C13E4A53> #<(Array T Nil) C13E4E93> #<(Array T Nil) C13E52D3> #<(Array T Nil) C13E5713> T)
;; Loading (DEFTEST BIT-NOR.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-NOR S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) C13F9A73> #<(Array T Nil) C13F9EB3> #<(Array T Nil) C13FA2F3> #<(Array T Nil) C13FA733> T)
;; Loading (DEFTEST BIT-NOR.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-NOR S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) C140C4C3> #<(Array T Nil) C140C903> #<(Array T Nil) C140CD43> T)
;; Loading (DEFTEST BIT-NOR.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-NOR A1 A2)) A1 A2)) #*1000 #*0011 #*0101)
;; Loading (DEFTEST BIT-NOR.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-NOR A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*1000 #*1000 #*0101 T)
;; Loading (DEFTEST BIT-NOR.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*1110)) (RESULT (CHECK-VALUES (BIT-NOR A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*1000 #*0011 #*0101 #*1000 T)
;; Loading (DEFTEST BIT-NOR.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-NOR A1 A2 NIL)) A1 A2)) #*1000 #*0011 #*0101)
;; Loading (DEFTEST BIT-NOR.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-NOR A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C144A563> #<(Array T (2 2)) C144B2F3> #<(Array T (2 2)) C144C083>)
;; Loading (DEFTEST BIT-NOR.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-NOR A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C145F8B3> #<(Array T (2 2)) C1460643> #<(Array T (2 2)) C14613D3>)
;; Loading (DEFTEST BIT-NOR.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-NOR A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C1474D63> #<(Array T (2 2)) C1475AF3> #<(Array T (2 2)) C1476883>)
;; Loading (DEFTEST BIT-NOR.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-NOR A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) C148DE73> #<(Array T (2 2)) C148EC03> #<(Array T (2 2)) C148F993> #<(Array T (2 2)) C1490723>)
;; Loading (DEFTEST BIT-NOR.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-NOR A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C14A9383> #<(Array T (2 2)) C14AA113> #<(Array T (2 2)) C14AAEA3>)
;; Loading (DEFTEST BIT-NOR.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-NOR A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) C14C4E73> #<(Array T (2 2)) C14C5C03> #<(Array T (2 2)) C14C6993>)
;; Loading (DEFTEST BIT-NOR.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-NOR A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*10000011 #<(Array T (2 2)) C14E1B23> #<(Array T (2 2)) C14E28B3> #<(Array T (2 2)) C14E3643>)
;; Loading (DEFTEST BIT-NOR.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-NOR A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100111000 #<(Array T (2 2)) C1503613> #<(Array T (2 2)) C15043A3> #<(Array T (2 2)) C1505133>)
;; Loading (DEFTEST BIT-NOR.20 (MACROLET ((%M (Z) Z)) (BIT-NOR (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*1000)
;; Loading (DEFTEST BIT-NOR.21 (MACROLET ((%M (Z) Z)) (BIT-NOR #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*0001)
;; Loading (DEFTEST BIT-NOR.22 (MACROLET ((%M (Z) Z)) (BIT-NOR #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*00010100)
;; Loading (DEFTEST BIT-NOR.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-NOR (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*1 2 1 2)
;; Loading (DEF-FOLD-TEST BIT-NOR.FOLD.1 (BIT-NOR #*00101 #*10100))
;; Loading (DEFTEST BIT-NOR.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-NOR) (FUNCTION LOGNOR)) NIL)
;; Loading (DEFTEST BIT-NOR.ERROR.1 (SIGNALS-ERROR (BIT-NOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-NOR.ERROR.2 (SIGNALS-ERROR (BIT-NOR #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-NOR.ERROR.3 (SIGNALS-ERROR (BIT-NOR #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-orc1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-orc1.lsp C155BDB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
;; Loading (DEFTEST BIT-ORC1.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC1 S1 S2) S1 S2)) #<(Array T Nil) C1587E33> #<(Array T Nil) C1588273> #<(Array T Nil) C15886B3>)
;; Loading (DEFTEST BIT-ORC1.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC1 S1 S2) S1 S2)) #<(Array T Nil) C15960D3> #<(Array T Nil) C1596513> #<(Array T Nil) C1596953>)
;; Loading (DEFTEST BIT-ORC1.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC1 S1 S2) S1 S2)) #<(Array T Nil) C15A4373> #<(Array T Nil) C15A47B3> #<(Array T Nil) C15A4BF3>)
;; Loading (DEFTEST BIT-ORC1.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC1 S1 S2) S1 S2)) #<(Array T Nil) C15B2613> #<(Array T Nil) C15B2A53> #<(Array T Nil) C15B2E93>)
;; Loading (DEFTEST BIT-ORC1.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ORC1 S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) C15C4623> #<(Array T Nil) C15C4A63> #<(Array T Nil) C15C4EA3> #<(Array T Nil) C15C52E3> T)
;; Loading (DEFTEST BIT-ORC1.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ORC1 S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) C15D97A3> #<(Array T Nil) C15D9BE3> #<(Array T Nil) C15DA023> #<(Array T Nil) C15DA463> T)
;; Loading (DEFTEST BIT-ORC1.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ORC1 S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) C15EC353> #<(Array T Nil) C15EC793> #<(Array T Nil) C15ECBD3> T)
;; Loading (DEFTEST BIT-ORC1.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-ORC1 A1 A2)) A1 A2)) #*1101 #*0011 #*0101)
;; Loading (DEFTEST BIT-ORC1.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-ORC1 A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*1101 #*1101 #*0101 T)
;; Loading (DEFTEST BIT-ORC1.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*1110)) (RESULT (CHECK-VALUES (BIT-ORC1 A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*1101 #*0011 #*0101 #*1101 T)
;; Loading (DEFTEST BIT-ORC1.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-ORC1 A1 A2 NIL)) A1 A2)) #*1101 #*0011 #*0101)
;; Loading (DEFTEST BIT-ORC1.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ORC1 A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C162AAD3> #<(Array T (2 2)) C162B863> #<(Array T (2 2)) C162C5F3>)
;; Loading (DEFTEST BIT-ORC1.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ORC1 A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C163FF83> #<(Array T (2 2)) C1640D13> #<(Array T (2 2)) C1641AA3>)
;; Loading (DEFTEST BIT-ORC1.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ORC1 A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C1655593> #<(Array T (2 2)) C1656323> #<(Array T (2 2)) C16570B3>)
;; Loading (DEFTEST BIT-ORC1.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-ORC1 A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) C166E803> #<(Array T (2 2)) C166F593> #<(Array T (2 2)) C1670323> #<(Array T (2 2)) C16710B3>)
;; Loading (DEFTEST BIT-ORC1.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-ORC1 A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) C1689E73> #<(Array T (2 2)) C168AC03> #<(Array T (2 2)) C168B993>)
;; Loading (DEFTEST BIT-ORC1.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-ORC1 A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) C16A5AC3> #<(Array T (2 2)) C16A6853> #<(Array T (2 2)) C16A75E3>)
;; Loading (DEFTEST BIT-ORC1.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-ORC1 A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*10110011 #<(Array T (2 2)) C16C28D3> #<(Array T (2 2)) C16C3663> #<(Array T (2 2)) C16C43F3>)
;; Loading (DEFTEST BIT-ORC1.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-ORC1 A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100111011 #<(Array T (2 2)) C16E4523> #<(Array T (2 2)) C16E52B3> #<(Array T (2 2)) C16E6043>)
;; Loading (DEFTEST BIT-ORC1.20 (MACROLET ((%M (Z) Z)) (BIT-ORC1 (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*1101)
;; Loading (DEFTEST BIT-ORC1.21 (MACROLET ((%M (Z) Z)) (BIT-ORC1 #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*1101)
;; Loading (DEFTEST BIT-ORC1.22 (MACROLET ((%M (Z) Z)) (BIT-ORC1 #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*01111110)
;; Loading (DEFTEST BIT-ORC1.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-ORC1 (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*1 2 1 2)
;; Loading (DEFTEST BIT-ORC1.FOLD.1 (FLET ((%F NIL (DECLARE (OPTIMIZE SPEED (SAFETY 0) (SPACE 0))) (BIT-ORC1 #*11010 #*10100))) (VALUES (%F) (LET ((BV (%F))) (SETF (ELT BV 0) 0) BV) (%F))) #*10101 #*00101 #*10101)
;; Loading (DEFTEST BIT-ORC1.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-ORC1) (FUNCTION LOGORC1)) NIL)
;; Loading (DEFTEST BIT-ORC1.ERROR.1 (SIGNALS-ERROR (BIT-ORC1) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-ORC1.ERROR.2 (SIGNALS-ERROR (BIT-ORC1 #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-ORC1.ERROR.3 (SIGNALS-ERROR (BIT-ORC1 #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-orc2.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-orc2.lsp C17466C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST BIT-ORC2.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC2 S1 S2) S1 S2)) #<(Array T Nil) 80FAE533> #<(Array T Nil) 80FAE973> #<(Array T Nil) 80FAEDB3>)
;; Loading (DEFTEST BIT-ORC2.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC2 S1 S2) S1 S2)) #<(Array T Nil) 81020CA3> #<(Array T Nil) 810210E3> #<(Array T Nil) 81021523>)
;; Loading (DEFTEST BIT-ORC2.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC2 S1 S2) S1 S2)) #<(Array T Nil) 8102EF43> #<(Array T Nil) 8102F383> #<(Array T Nil) 8102F7C3>)
;; Loading (DEFTEST BIT-ORC2.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC2 S1 S2) S1 S2)) #<(Array T Nil) 8103D1E3> #<(Array T Nil) 8103D623> #<(Array T Nil) 8103DA63>)
;; Loading (DEFTEST BIT-ORC2.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ORC2 S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 8104F1F3> #<(Array T Nil) 8104F633> #<(Array T Nil) 8104FA73> #<(Array T Nil) 8104FEB3> T)
;; Loading (DEFTEST BIT-ORC2.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ORC2 S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 81064373> #<(Array T Nil) 810647B3> #<(Array T Nil) 81064BF3> #<(Array T Nil) 81065033> T)
;; Loading (DEFTEST BIT-ORC2.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-ORC2 S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) 81076F23> #<(Array T Nil) 81077363> #<(Array T Nil) 810777A3> T)
;; Loading (DEFTEST BIT-ORC2.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-ORC2 A1 A2)) A1 A2)) #*1011 #*0011 #*0101)
;; Loading (DEFTEST BIT-ORC2.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-ORC2 A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*1011 #*1011 #*0101 T)
;; Loading (DEFTEST BIT-ORC2.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*1110)) (RESULT (CHECK-VALUES (BIT-ORC2 A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*1011 #*0011 #*0101 #*1011 T)
;; Loading (DEFTEST BIT-ORC2.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-ORC2 A1 A2 NIL)) A1 A2)) #*1011 #*0011 #*0101)
;; Loading (DEFTEST BIT-ORC2.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ORC2 A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 810B56A3> #<(Array T (2 2)) 810B6433> #<(Array T (2 2)) 810B71C3>)
;; Loading (DEFTEST BIT-ORC2.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ORC2 A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 810CAB53> #<(Array T (2 2)) 810CB8E3> #<(Array T (2 2)) 810CC673>)
;; Loading (DEFTEST BIT-ORC2.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-ORC2 A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 810E0163> #<(Array T (2 2)) 810E0EF3> #<(Array T (2 2)) 810E1C83>)
;; Loading (DEFTEST BIT-ORC2.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-ORC2 A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) 810F93D3> #<(Array T (2 2)) 810FA163> #<(Array T (2 2)) 810FAEF3> #<(Array T (2 2)) 810FBC83>)
;; Loading (DEFTEST BIT-ORC2.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-ORC2 A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81114A43> #<(Array T (2 2)) 811157D3> #<(Array T (2 2)) 81116563>)
;; Loading (DEFTEST BIT-ORC2.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-ORC2 A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) 81130693> #<(Array T (2 2)) 81131423> #<(Array T (2 2)) 811321B3>)
;; Loading (DEFTEST BIT-ORC2.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-ORC2 A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*11010011 #<(Array T (2 2)) 8114D4A3> #<(Array T (2 2)) 8114E233> #<(Array T (2 2)) 8114EFC3>)
;; Loading (DEFTEST BIT-ORC2.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-ORC2 A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100111101 #<(Array T (2 2)) 8116F0F3> #<(Array T (2 2)) 8116FE83> #<(Array T (2 2)) 81170C13>)
;; Loading (DEFTEST BIT-ORC2.20 (MACROLET ((%M (Z) Z)) (BIT-ORC2 (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*1011)
;; Loading (DEFTEST BIT-ORC2.21 (MACROLET ((%M (Z) Z)) (BIT-ORC2 #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*1011)
;; Loading (DEFTEST BIT-ORC2.22 (MACROLET ((%M (Z) Z)) (BIT-ORC2 #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*10110111)
;; Loading (DEFTEST BIT-ORC2.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-ORC2 (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*1 2 1 2)
;; Loading (DEFTEST BIT-ORC2.FOLD.1 (FLET ((%F NIL (DECLARE (OPTIMIZE SPEED (SAFETY 0) (SPACE 0))) (BIT-ORC2 #*00101 #*01011))) (VALUES (%F) (LET ((BV (%F))) (SETF (ELT BV 0) 0) BV) (%F))) #*10101 #*00101 #*10101)
;; Loading (DEFTEST BIT-ORC2.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-ORC2) (FUNCTION LOGORC2)) NIL)
;; Loading (DEFTEST BIT-ORC2.ERROR.1 (SIGNALS-ERROR (BIT-ORC2) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-ORC2.ERROR.2 (SIGNALS-ERROR (BIT-ORC2 #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-ORC2.ERROR.3 (SIGNALS-ERROR (BIT-ORC2 #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-xor.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-xor.lsp 811D2B37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "bit-aux.lsp")
;; Loading (DEFTEST BIT-XOR.1 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-XOR S1 S2) S1 S2)) #<(Array T Nil) 81202113> #<(Array T Nil) 81202553> #<(Array T Nil) 81202993>)
;; Loading (DEFTEST BIT-XOR.2 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-XOR S1 S2) S1 S2)) #<(Array T Nil) 81210253> #<(Array T Nil) 81210693> #<(Array T Nil) 81210AD3>)
;; Loading (DEFTEST BIT-XOR.3 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-XOR S1 S2) S1 S2)) #<(Array T Nil) 8121E393> #<(Array T Nil) 8121E7D3> #<(Array T Nil) 8121EC13>)
;; Loading (DEFTEST BIT-XOR.4 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-XOR S1 S2) S1 S2)) #<(Array T Nil) 8122C4D3> #<(Array T Nil) 8122C913> #<(Array T Nil) 8122CD53>)
;; Loading (DEFTEST BIT-XOR.5 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-XOR S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 8123E383> #<(Array T Nil) 8123E7C3> #<(Array T Nil) 8123EC03> #<(Array T Nil) 8123F043> T)
;; Loading (DEFTEST BIT-XOR.6 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-XOR S1 S2 S3))) (VALUES S1 S2 S3 RESULT (EQT S3 RESULT))) #<(Array T Nil) 812533A3> #<(Array T Nil) 812537E3> #<(Array T Nil) 81253C23> #<(Array T Nil) 81254063> T)
;; Loading (DEFTEST BIT-XOR.7 (LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (BIT-XOR S1 S2 T))) (VALUES S1 S2 RESULT (EQT S1 RESULT))) #<(Array T Nil) 81265DF3> #<(Array T Nil) 81266233> #<(Array T Nil) 81266673> T)
;; Loading (DEFTEST BIT-XOR.8 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-XOR A1 A2)) A1 A2)) #*0110 #*0011 #*0101)
;; Loading (DEFTEST BIT-XOR.9 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (RESULT (CHECK-VALUES (BIT-XOR A1 A2 T)))) (VALUES RESULT A1 A2 (EQT RESULT A1))) #*0110 #*0110 #*0101 T)
;; Loading (DEFTEST BIT-XOR.10 (LET* ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101)) (A3 (COPY-SEQ #*1110)) (RESULT (CHECK-VALUES (BIT-XOR A1 A2 A3)))) (VALUES RESULT A1 A2 A3 (EQT RESULT A3))) #*0110 #*0011 #*0101 #*0110 T)
;; Loading (DEFTEST BIT-XOR.11 (LET ((A1 (COPY-SEQ #*0011)) (A2 (COPY-SEQ #*0101))) (VALUES (CHECK-VALUES (BIT-XOR A1 A2 NIL)) A1 A2)) #*0110 #*0011 #*0101)
;; Loading (DEFTEST BIT-XOR.12 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-XOR A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 812A3E93> #<(Array T (2 2)) 812A4C23> #<(Array T (2 2)) 812A59B3>)
;; Loading (DEFTEST BIT-XOR.13 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-XOR A1 A2 T))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 812B91E3> #<(Array T (2 2)) 812B9F73> #<(Array T (2 2)) 812BAD03>)
;; Loading (DEFTEST BIT-XOR.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (RESULT (BIT-XOR A1 A2 NIL))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 812CE693> #<(Array T (2 2)) 812CF423> #<(Array T (2 2)) 812D01B3>)
;; Loading (DEFTEST BIT-XOR.15 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (RESULT (BIT-XOR A1 A2 A3))) (VALUES A1 A2 A3 RESULT)) #<(Array T (2 2)) 812E77A3> #<(Array T (2 2)) 812E8533> #<(Array T (2 2)) 812E92C3> #<(Array T (2 2)) 812EA053>)
;; Loading (DEFTEST BIT-XOR.16 (LET* ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (RESULT (BIT-XOR A1 A2))) (VALUES A1 A2 RESULT)) #<(Array T (2 2)) 81302CB3> #<(Array T (2 2)) 81303A43> #<(Array T (2 2)) 813047D3>)
;; Loading (DEFTEST BIT-XOR.17 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-XOR A1 A2))) (VALUES A0 A1 A2 RESULT)) #*01010011 #<(Array T (2 2)) 8131E7A3> #<(Array T (2 2)) 8131F533> #<(Array T (2 2)) 813202C3>)
;; Loading (DEFTEST BIT-XOR.18 (LET* ((A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (RESULT (BIT-XOR A1 A2 T))) (VALUES A0 A1 A2 RESULT)) #*01100011 #<(Array T (2 2)) 8133B453> #<(Array T (2 2)) 8133C1E3> #<(Array T (2 2)) 8133CF73>)
;; Loading (DEFTEST BIT-XOR.19 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 0)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 4)) (A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 8)) (RESULT (BIT-XOR A1 A2 A3))) (VALUES A0 A1 A2 RESULT)) #*010100110110 #<(Array T (2 2)) 8135CF43> #<(Array T (2 2)) 8135DCD3> #<(Array T (2 2)) 8135EA63>)
;; Loading (DEFTEST BIT-XOR.20 (MACROLET ((%M (Z) Z)) (BIT-XOR (EXPAND-IN-CURRENT-ENV (%M #*0011)) #*0101)) #*0110)
;; Loading (DEFTEST BIT-XOR.21 (MACROLET ((%M (Z) Z)) (BIT-XOR #*1010 (EXPAND-IN-CURRENT-ENV (%M #*1100)))) #*0110)
;; Loading (DEFTEST BIT-XOR.22 (MACROLET ((%M (Z) Z)) (BIT-XOR #*10100011 #*01101010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*11001001)
;; Loading (DEFTEST BIT-XOR.ORDER.1 (LET* ((S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (X 0) Y Z) (VALUES (BIT-XOR (PROGN (SETF Y (INCF X)) S1) (PROGN (SETF Z (INCF X)) S2)) X Y Z)) #*0 2 1 2)
;; Loading (DEF-FOLD-TEST BIT-XOR.FOLD.1 (BIT-XOR #*00101 #*10100))
;; Loading (DEFTEST BIT-XOR.RANDOM.1 (BIT-RANDOM-TEST-FN (FUNCTION BIT-XOR) (FUNCTION LOGXOR)) NIL)
;; Loading (DEFTEST BIT-XOR.ERROR.1 (SIGNALS-ERROR (BIT-XOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-XOR.ERROR.2 (SIGNALS-ERROR (BIT-XOR #*000) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-XOR.ERROR.3 (SIGNALS-ERROR (BIT-XOR #*000 #*0100 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-not.lsp 813B55E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BIT-NOT.1 (LET ((A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (BIT-NOT A1) A1)) #<(Array T Nil) 813C94C3> #<(Array T Nil) 813C9843>)
;; Loading (DEFTEST BIT-NOT.2 (LET ((A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1))) (VALUES (BIT-NOT A1) A1)) #<(Array T Nil) 813D27A3> #<(Array T Nil) 813D2B23>)
;; Loading (DEFTEST BIT-NOT.3 (LET ((A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (BIT-NOT A1 T) A1)) #<(Array T Nil) 813DBC43> #<(Array T Nil) 813DBFC3>)
;; Loading (DEFTEST BIT-NOT.4 (LET ((A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1))) (VALUES (BIT-NOT A1 T) A1)) #<(Array T Nil) 813E5183> #<(Array T Nil) 813E5503>)
;; Loading (DEFTEST BIT-NOT.5 (LET* ((A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1)) (A2 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1)) (RESULT (BIT-NOT A1 A2))) (VALUES A1 A2 (EQT A2 RESULT))) #<(Array T Nil) 813F1F33> #<(Array T Nil) 813F22B3> T)
;; Loading (DEFTEST BIT-NOT.6 (LET ((A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (BIT-NOT A1 NIL) A1)) #<(Array T Nil) 813FD213> #<(Array T Nil) 813FD593>)
;; Loading (DEFTEST BIT-NOT.7 (LET ((A1 (COPY-SEQ #*0011010110))) (VALUES (BIT-NOT A1) A1)) #*1100101001 #*0011010110)
;; Loading (DEFTEST BIT-NOT.8 (LET ((A1 (COPY-SEQ #*0011010110))) (VALUES (BIT-NOT A1 T) A1)) #*1100101001 #*1100101001)
;; Loading (DEFTEST BIT-NOT.9 (LET ((A1 (COPY-SEQ #*0011010110)) (A2 (COPY-SEQ #*0000000000))) (VALUES (BIT-NOT A1 A2) A1 A2)) #*1100101001 #*0011010110 #*1100101001)
;; Loading (DEFTEST BIT-NOT.10 (LET ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (1 0)))))) (VALUES (BIT-NOT A1) A1)) #<(Array T (2 2)) 8141FEE3> #<(Array T (2 2)) 81420C73>)
;; Loading (DEFTEST BIT-NOT.11 (LET ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (1 0)))))) (VALUES (BIT-NOT A1 NIL) A1)) #<(Array T (2 2)) 8142CA13> #<(Array T (2 2)) 8142D7A3>)
;; Loading (DEFTEST BIT-NOT.12 (LET ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (1 0)))))) (VALUES (BIT-NOT A1 T) A1)) #<(Array T (2 2)) 814395A3> #<(Array T (2 2)) 8143A333>)
;; Loading (DEFTEST BIT-NOT.13 (LET ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (1 0))))) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (BIT-NOT A1 A2) A1 A2)) #<(Array T (2 2)) 81449243> #<(Array T (2 2)) 81449FD3> #<(Array T (2 2)) 8144AD63>)
;; Loading (DEFTEST BIT-NOT.14 (LET ((A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE ((0 1) (1 0)))))) (VALUES (BIT-NOT A1) A1)) #<(Array T (2 2)) 8145A683> #<(Array T (2 2)) 8145B413>)
;; Loading (DEFTEST BIT-NOT.15 (LET* ((A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 0 0 1 1 0 0 0 0 0 0 0)))) (A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 2)) (A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO A0 :DISPLACED-INDEX-OFFSET 6))) (VALUES (BIT-NOT A1 A2) A0 A1 A2)) #<(Array T (2 2)) 81471523> #*000110100100 #<(Array T (2 2)) 81472A23> #<(Array T (2 2)) 814737B3>)
;; Loading (DEFTEST BIT-NOT.16 (MACROLET ((%M (Z) Z)) (BIT-NOT (EXPAND-IN-CURRENT-ENV (%M #*10010011)))) #*01101100)
;; Loading (DEFTEST BIT-NOT.17 (MACROLET ((%M (Z) Z)) (BIT-NOT #*1101011010 (EXPAND-IN-CURRENT-ENV (%M NIL)))) #*0010100101)
;; Loading (DEFTEST BIT-NOT.ORDER.1 (LET ((A (COPY-SEQ #*001101)) (I 0) X) (VALUES (BIT-NOT (PROGN (SETF X (INCF I)) A)) I X)) #*110010 1 1)
;; Loading (DEF-FOLD-TEST BIT-NOT.FOLD.1 (BIT-NOT #*00101))
;; Loading (DEFTEST BIT-NOT.ERROR.1 (SIGNALS-ERROR (BIT-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-NOT.ERROR.2 (SIGNALS-ERROR (BIT-NOT #*000 NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "bit-vector-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/bit-vector-p.lsp 814AEC67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BIT-VECTOR-P.2 (NOTNOT-MV (BIT-VECTOR-P #*)) T)
;; Loading (DEFTEST BIT-VECTOR-P.3 (NOTNOT-MV (BIT-VECTOR-P #*00101)) T)
;; Loading (DEFTEST BIT-VECTOR-P.4 (BIT-VECTOR-P #(0 1 1 1 0 0)) NIL)
;; Loading (DEFTEST BIT-VECTOR-P.5 (BIT-VECTOR-P "011100") NIL)
;; Loading (DEFTEST BIT-VECTOR-P.6 (BIT-VECTOR-P 0) NIL)
;; Loading (DEFTEST BIT-VECTOR-P.7 (BIT-VECTOR-P 1) NIL)
;; Loading (DEFTEST BIT-VECTOR-P.8 (BIT-VECTOR-P NIL) NIL)
;; Loading (DEFTEST BIT-VECTOR-P.9 (BIT-VECTOR-P (QUOTE X)) NIL)
;; Loading (DEFTEST BIT-VECTOR-P.10 (BIT-VECTOR-P (QUOTE (0 1 1 0))) NIL)
;; Loading (DEFTEST BIT-VECTOR-P.11 (BIT-VECTOR-P (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0)) NIL)
;; Loading (DEFTEST BIT-VECTOR-P.12 (CHECK-TYPE-PREDICATE (FUNCTION BIT-VECTOR-P) (QUOTE BIT-VECTOR)) NIL)
;; Loading (DEFTEST BIT-VECTOR-P.13 (MACROLET ((%M (Z) Z)) (VALUES (NOTNOT (BIT-VECTOR-P (EXPAND-IN-CURRENT-ENV (%M #*110101)))) (BIT-VECTOR-P (EXPAND-IN-CURRENT-ENV (%M NIL))))) T NIL)
;; Loading (DEFTEST BIT-VECTOR-P.ORDER.1 (LET ((I 0) X) (VALUES (NOTNOT (BIT-VECTOR-P (PROGN (SETF X (INCF I)) #*0010))) I X)) T 1 1)
;; Loading (DEFTEST BIT-VECTOR-P.ORDER.2 (LET ((I 0) X) (VALUES (BIT-VECTOR-P (PROGN (SETF X (INCF I)) (QUOTE A))) I X)) NIL 1 1)
;; Loading (DEFTEST BIT-VECTOR-P.ERROR.1 (SIGNALS-ERROR (BIT-VECTOR-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST BIT-VECTOR-P.ERROR.2 (SIGNALS-ERROR (BIT-VECTOR-P #* #*) PROGRAM-ERROR) T)
;; Loading (LOAD "simple-bit-vector-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/simple-bit-vector-p.lsp 8151CBF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.2 (NOTNOT-MV (SIMPLE-BIT-VECTOR-P #*)) T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.3 (NOTNOT-MV (SIMPLE-BIT-VECTOR-P #*00101)) T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.4 (SIMPLE-BIT-VECTOR-P #(0 1 1 1 0 0)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.5 (SIMPLE-BIT-VECTOR-P "011100") NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.6 (SIMPLE-BIT-VECTOR-P 0) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.7 (SIMPLE-BIT-VECTOR-P 1) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.8 (SIMPLE-BIT-VECTOR-P NIL) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.9 (SIMPLE-BIT-VECTOR-P (QUOTE X)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.10 (SIMPLE-BIT-VECTOR-P (QUOTE (0 1 1 0))) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.11 (SIMPLE-BIT-VECTOR-P (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.12 (CHECK-TYPE-PREDICATE (FUNCTION SIMPLE-BIT-VECTOR-P) (QUOTE SIMPLE-BIT-VECTOR)) NIL)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.ERROR.1 (SIGNALS-ERROR (SIMPLE-BIT-VECTOR-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-P.ERROR.2 (SIGNALS-ERROR (SIMPLE-BIT-VECTOR-P #* #*) PROGRAM-ERROR) T)
;; Loading (LOAD "load-hash-tables.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-hash-tables.lsp 8157F027>
;; Loading (COMPILE-AND-LOAD "hash-table-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (COMPILE-AND-LOAD "random-aux.lsp")).
;; Compiling form (DEFPARAMETER *HASH-TABLE-TEST-ITERS* 1000).
;; Compiling form (DEFUN TEST-HASH-TABLE-1 (&REST ARGS) (LET ((TABLE (APPLY (FUNCTION MAKE-HASH-TABLE) ARGS)) (TEST (OR (GETF ARGS :TEST) (QUOTE EQL)))) (ASSERT (MEMBER TEST (QUOTE (EQ EQL EQUAL EQUALP)))) (ASSERT (HASH-TABLE-P TABLE)) (ASSERT (TYPEP TABLE (QUOTE HASH-TABLE))) (LET* ((UNIVERSE-VEC (COERCE *UNIVERSE* (QUOTE VECTOR))) (MAPPING NIL) (COUNT 0)) (LOOP FOR I FROM 0 BELOW *HASH-TABLE-TEST-ITERS* DO (ASSERT (EQL (HASH-TABLE-COUNT TABLE) COUNT)) DO (ASSERT (LET ((SIZE (HASH-TABLE-SIZE TABLE))) (AND (INTEGERP SIZE) (>= SIZE 0)))) DO (FLET ((%REMOVE-PAIR (RPAIR) (DECF COUNT) (LET ((KEY (CAR RPAIR)) (EXPECTED-VALUE (CDR RPAIR))) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY TABLE) (ASSERT PRESENT-P) (ASSERT (EQL EXPECTED-VALUE VALUE)) (SETF MAPPING (REMOVE RPAIR MAPPING :COUNT 1 :TEST (QUOTE EQ)))) (ASSERT (REMHASH KEY TABLE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY TABLE) (ASSERT (NOT PRESENT-P)) (ASSERT (NULL VALUE)))))) (RCASE (1 (LET* ((NEW-ELEM (RANDOM-FROM-SEQ UNIVERSE-VEC)) (PAIR (ASSOC NEW-ELEM MAPPING :TEST TEST))) (COND (PAIR (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH NEW-ELEM TABLE) (ASSERT PRESENT-P) (ASSERT (EQL (CDR PAIR) VALUE)) (SETF (CDR PAIR) I (GETHASH NEW-ELEM TABLE) I))) (T (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (GETHASH NEW-ELEM TABLE)) (QUOTE (NIL NIL)))) (INCF COUNT) (PUSH (CONS NEW-ELEM I) MAPPING) (SETF (GETHASH NEW-ELEM TABLE) I))))) (1 (WHEN MAPPING (%REMOVE-PAIR (RANDOM-FROM-SEQ MAPPING)))) (1 (LET* ((KEY (RANDOM-FROM-SEQ UNIVERSE-VEC)) (PAIR (ASSOC KEY MAPPING :TEST TEST))) (COND (PAIR (%REMOVE-PAIR PAIR)) (T (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (GETHASH KEY TABLE)) (QUOTE (NIL NIL)))) (ASSERT (NOT (REMHASH KEY TABLE))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (GETHASH KEY TABLE)) (QUOTE (NIL NIL)))))))))))))).
Warning: #<Simple-Warning Not inlining REMOVE, arguments do not match.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
Style-Warning: #<Simple-Style-Warning Cannot inline REMOVE yet.>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table-aux.llf 8131D737>
;; Loading (LOAD "hash-table.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table.lsp 81443087>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HASH-TABLE.1 (NOTNOT-MV (FIND-CLASS (QUOTE HASH-TABLE))) T)
;; Loading (DEFTEST HASH-TABLE.2 (LOOP FOR E IN (QUOTE (NIL T 1 10.0 (A B C) #(A B C) #*1011 #<(Array T Nil) 814BC8E3> #<(Array T (2 2)) 814BD5C3> (PARSE-NAMESTRING (QUOTE "foo")) "bar" #\a 3/5 #C(1.0 2.0))) WHEN (TYPEP E (QUOTE HASH-TABLE)) COLLECT E) NIL)
;; Loading (DEFTEST HASH-TABLE.3 (LET ((C (FIND-CLASS (QUOTE HASH-TABLE)))) (LOOP FOR E IN (QUOTE (NIL T 1 10.0 (A B C) #(A B C) #*1011 #<(Array T Nil) 814CCA83> #<(Array T (2 2)) 814CD763> (PARSE-NAMESTRING (QUOTE "foo")) "bar" #\a 3/5 #C(1.0 2.0))) WHEN (TYPEP E C) COLLECT E)) NIL)
;; Loading (DEFTEST HASH-TABLE.4 (NOTNOT-MV (TYPEP (MAKE-HASH-TABLE) (QUOTE HASH-TABLE))) T)
;; Loading (DEFTEST HASH-TABLE.5 (NOTNOT-MV (TYPEP (MAKE-HASH-TABLE) (FIND-CLASS (QUOTE HASH-TABLE)))) T)
;; Loading (LOAD "make-hash-table.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-hash-table.lsp 814EECF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-HASH-TABLE.1 (LET ((HT (MAKE-HASH-TABLE))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.2 (LET ((HT (MAKE-HASH-TABLE :SIZE 0))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.3 (LET ((HT (MAKE-HASH-TABLE :SIZE 100))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.4 (LET ((HT (MAKE-HASH-TABLE :TEST (FUNCTION EQ)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.5 (LET ((HT (MAKE-HASH-TABLE :TEST (QUOTE EQ)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.6 (LET ((HT (MAKE-HASH-TABLE :TEST (FUNCTION EQL)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.7 (LET ((HT (MAKE-HASH-TABLE :TEST (QUOTE EQL)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.8 (LET ((HT (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.9 (LET ((HT (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.10 (LET ((HT (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.11 (LET ((HT (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.12 (LET ((HT (MAKE-HASH-TABLE :REHASH-SIZE 1))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.13 (LET ((HT (MAKE-HASH-TABLE :REHASH-SIZE 1000))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.14 (LET ((HT (MAKE-HASH-TABLE :REHASH-SIZE (+ 1.0 SINGLE-FLOAT-EPSILON)))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.15 (LET ((HT (MAKE-HASH-TABLE :REHASH-SIZE 2.0))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.16 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.17 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.0))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.18 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.0))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.19 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.0))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.20 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.0))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.21 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 1/2))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.22 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.1))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.23 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.2))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.24 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.8))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.25 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.989999))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.26 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD LEAST-POSITIVE-SHORT-FLOAT))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.27 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD LEAST-POSITIVE-SINGLE-FLOAT))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.28 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD LEAST-POSITIVE-DOUBLE-FLOAT))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (DEFTEST MAKE-HASH-TABLE.29 (LET ((HT (MAKE-HASH-TABLE :REHASH-THRESHOLD LEAST-POSITIVE-LONG-FLOAT))) (VALUES (NOTNOT (TYPEP HT (QUOTE HASH-TABLE))) (NOTNOT (HASH-TABLE-P HT)) (HASH-TABLE-COUNT HT))) T T 0)
;; Loading (LOAD "hash-table-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table-p.lsp 81645BA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HASH-TABLE-P.1 (LOOP FOR E IN (QUOTE (NIL T 1 10.0 (A B C) #(A B C) #*1011 #<(Array T Nil) 81658AA3> #<(Array T (2 2)) 81659783> (PARSE-NAMESTRING (QUOTE "foo")) "bar" #\a 3/5 #C(1.0 2.0))) WHEN (HASH-TABLE-P E) COLLECT E) NIL)
;; Loading (DEFTEST HASH-TABLE-P.2 (CHECK-TYPE-PREDICATE (FUNCTION HASH-TABLE-P) (QUOTE HASH-TABLE)) NIL)
;; Loading (DEFTEST HASH-TABLE-P.3 (LET ((I 0)) (VALUES (HASH-TABLE-P (INCF I)) I)) NIL 1)
;; Loading (DEFTEST HASH-TABLE-P.4 (HASH-TABLE-P T) NIL)
;; Loading (DEFTEST HASH-TABLE-P.5 (NOTNOT-MV (HASH-TABLE-P (MAKE-HASH-TABLE))) T)
;; Loading (DEFTEST HASH-TABLE-P.ERROR.1 (SIGNALS-ERROR (HASH-TABLE-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-P.ERROR.2 (SIGNALS-ERROR (LET ((H (MAKE-HASH-TABLE))) (HASH-TABLE-P H NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "hash-table-count.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table-count.lsp 8168DE37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HASH-TABLE-COUNT.1 (HASH-TABLE-COUNT (MAKE-HASH-TABLE)) 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.2 (HASH-TABLE-COUNT (MAKE-HASH-TABLE :TEST (QUOTE EQ))) 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.3 (HASH-TABLE-COUNT (MAKE-HASH-TABLE :TEST (QUOTE EQL))) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST HASH-TABLE-COUNT.4 (HASH-TABLE-COUNT (MAKE-HASH-TABLE :TEST (QUOTE EQUAL))) 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.5 (HASH-TABLE-COUNT (MAKE-HASH-TABLE :TEST (QUOTE EQUALP))) 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.6 (HASH-TABLE-COUNT (MAKE-HASH-TABLE :TEST (FUNCTION EQ))) 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.7 (HASH-TABLE-COUNT (MAKE-HASH-TABLE :TEST (FUNCTION EQL))) 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.8 (HASH-TABLE-COUNT (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL))) 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.9 (HASH-TABLE-COUNT (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.10 (HASH-TABLE-COUNT (LET ((TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH (QUOTE X) TABLE) 1) TABLE)) 1)
;; Loading (DEFTEST HASH-TABLE-COUNT.11 (LET ((TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH (QUOTE X) TABLE) 1) (VALUES (HASH-TABLE-COUNT TABLE) (PROGN (REMHASH (QUOTE X) TABLE) (HASH-TABLE-COUNT TABLE)))) 1 0)
;; Loading (DEFTEST HASH-TABLE-COUNT.ERROR.1 (SIGNALS-ERROR (HASH-TABLE-COUNT) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-COUNT.ERROR.2 (SIGNALS-ERROR (HASH-TABLE-COUNT (MAKE-HASH-TABLE) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "hash-table-size.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table-size.lsp C1068017>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HASH-TABLE-SIZE.ERROR.1 (SIGNALS-ERROR (HASH-TABLE-SIZE) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-SIZE.ERROR.2 (SIGNALS-ERROR (HASH-TABLE-SIZE (MAKE-HASH-TABLE) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-SIZE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION HASH-TABLE-SIZE) (FUNCTION HASH-TABLE-P)) NIL)
;; Loading (LOAD "hash-table-rehash-size.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table-rehash-size.lsp C10988F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HASH-TABLE-REHASH-SIZE.1 (TYPEP* (HASH-TABLE-REHASH-SIZE (MAKE-HASH-TABLE)) (QUOTE (OR (INTEGER 1 *) (FLOAT (1.0) *)))) T)
;; Loading (DEFTEST HASH-TABLE-REHASH-SIZE.2 (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) UNLESS (TYPEP* (HASH-TABLE-REHASH-SIZE (MAKE-HASH-TABLE :TEST TEST)) (QUOTE (OR (INTEGER 1 *) (FLOAT (1.0) *)))) COLLECT TEST) NIL)
;; Loading (DEFTEST HASH-TABLE-REHASH-SIZE.3 (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) FOR FN = (SYMBOL-FUNCTION TEST) UNLESS (TYPEP* (HASH-TABLE-REHASH-SIZE (MAKE-HASH-TABLE :TEST FN)) (QUOTE (OR (INTEGER 1 *) (FLOAT (1.0) *)))) COLLECT TEST) NIL)
;; Loading (DEFTEST HASH-TABLE-REHASH-SIZE.ERROR.1 (SIGNALS-ERROR (HASH-TABLE-REHASH-SIZE) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-REHASH-SIZE.ERROR.2 (SIGNALS-ERROR (HASH-TABLE-REHASH-SIZE (MAKE-HASH-TABLE) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-REHASH-SIZE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION HASH-TABLE-REHASH-SIZE) (FUNCTION HASH-TABLE-P)) NIL)
;; Loading (LOAD "hash-table-rehash-threshold.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table-rehash-threshold.lsp C10EAF47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HASH-TABLE-REHASH-THRESHOLD.1 (TYPEP* (HASH-TABLE-REHASH-THRESHOLD (MAKE-HASH-TABLE)) (QUOTE (REAL 0 1))) T)
;; Loading (DEFTEST HASH-TABLE-REHASH-THRESHOLD.2 (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) UNLESS (TYPEP* (HASH-TABLE-REHASH-THRESHOLD (MAKE-HASH-TABLE :TEST TEST)) (QUOTE (REAL 0 1))) COLLECT TEST) NIL)
;; Loading (DEFTEST HASH-TABLE-REHASH-THRESHOLD.3 (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) FOR FN = (SYMBOL-FUNCTION TEST) UNLESS (TYPEP* (HASH-TABLE-REHASH-THRESHOLD (MAKE-HASH-TABLE :TEST FN)) (QUOTE (REAL 0 1))) COLLECT TEST) NIL)
;; Loading (DEFTEST HASH-TABLE-REHASH-THRESHOLD.ERROR.1 (SIGNALS-ERROR (HASH-TABLE-REHASH-THRESHOLD) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-REHASH-THRESHOLD.ERROR.2 (SIGNALS-ERROR (HASH-TABLE-REHASH-THRESHOLD (MAKE-HASH-TABLE) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-REHASH-THRESHOLD.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION HASH-TABLE-REHASH-THRESHOLD) (FUNCTION HASH-TABLE-P)) NIL)
;; Loading (LOAD "hash-table-test.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/hash-table-test.lsp C113B3B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HASH-TABLE-TEST.1 (HASH-TABLE-TEST (MAKE-HASH-TABLE)) EQL)
;; Loading (DEFTEST HASH-TABLE-TEST.2 (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) UNLESS (EQ (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST TEST)) TEST) COLLECT TEST) NIL)
;; Loading (DEFTEST HASH-TABLE-TEST.3 (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) UNLESS (EQ (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (SYMBOL-FUNCTION TEST))) TEST) COLLECT TEST) NIL)
;; Loading (DEFTEST HASH-TABLE-TEST.4 (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) UNLESS (EQ (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA TEST)))))) TEST) COLLECT TEST) NIL)
;; Loading (DEFTEST HASH-TABLE-TEST.ERROR.1 (SIGNALS-ERROR (HASH-TABLE-TEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-TEST.ERROR.2 (SIGNALS-ERROR (HASH-TABLE-TEST (MAKE-HASH-TABLE) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST HASH-TABLE-TEST.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION HASH-TABLE-TEST) (FUNCTION HASH-TABLE-P)) NIL)
;; Loading (LOAD "gethash.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/gethash.lsp C11B3A57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST GETHASH.1 (GETHASH (QUOTE X) (MAKE-HASH-TABLE) (QUOTE Y)) Y NIL)
;; Loading (DEFTEST GETHASH.2 (GETHASH NIL (MAKE-HASH-TABLE) (QUOTE A)) A NIL)
;; Loading (DEFTEST GETHASH.3 (GETHASH NIL (MAKE-HASH-TABLE) (QUOTE A)) A NIL)
;; Loading (DEFTEST GETHASH.4 (MULTIPLE-VALUE-BIND (VALUE PRESENT) (GETHASH (QUOTE A) (LET ((TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) TABLE)) (VALUES VALUE (NOTNOT PRESENT))) B T)
;; Loading (DEFTEST GETHASH.5 (LET ((TABLE (MAKE-HASH-TABLE)) (I 0)) (VALUES (SETF (GETHASH (QUOTE X) TABLE (INCF I)) (QUOTE Y)) I (GETHASH (QUOTE X) TABLE))) Y 1 Y)
;; Loading (DEFTEST GETHASH.ORDER.1 (LET ((I 0) X Y (TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (VALUES (GETHASH (PROGN (SETF X (INCF I)) (QUOTE A)) (PROGN (SETF Y (INCF I)) TABLE)) I X Y)) B 2 1 2)
;; Loading (DEFTEST GETHASH.ORDER.2 (LET ((I 0) X Y Z (TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (VALUES (GETHASH (PROGN (SETF X (INCF I)) (QUOTE A)) (PROGN (SETF Y (INCF I)) TABLE) (PROGN (SETF Z (INCF I)) (QUOTE MISSING))) I X Y Z)) B 3 1 2 3)
;; Loading (DEFTEST GETHASH.ORDER.3 (LET ((I 0) X Y (TABLE (MAKE-HASH-TABLE))) (VALUES (SETF (GETHASH (PROGN (SETF X (INCF I)) (QUOTE A)) (PROGN (SETF Y (INCF I)) TABLE)) (QUOTE B)) I X Y (GETHASH (QUOTE A) TABLE))) B 2 1 2 B)
;; Loading (DEFTEST GETHASH.ORDER.4 (LET ((I 0) X Y Z (TABLE (MAKE-HASH-TABLE))) (VALUES (SETF (GETHASH (PROGN (SETF X (INCF I)) (QUOTE A)) (PROGN (SETF Y (INCF I)) TABLE) (SETF Z (INCF I))) (QUOTE B)) I X Y Z (GETHASH (QUOTE A) TABLE))) B 3 1 2 3 B)
;; Loading (DEFTEST GETHASH.ZERO.1 (LOOP FOR PZ IN (QUOTE (0.0 0.0 0.0 0.0)) FOR NZ = (- PZ) FOR RESULT = (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQ)))) (LIST (SETF (GETHASH PZ TABLE) :X) (GETHASH PZ TABLE) (GETHASH NZ TABLE) (SETF (GETHASH NZ TABLE) :Y) (GETHASH PZ TABLE) (GETHASH NZ TABLE))) UNLESS (OR (EQL PZ NZ) (EQUAL RESULT (QUOTE (:X :X NIL :Y :X :Y)))) COLLECT (LIST PZ NZ RESULT)) NIL)
;; Loading (DEFTEST GETHASH.ZERO.2 (LOOP FOR PZ IN (QUOTE (0.0 0.0 0.0 0.0)) FOR NZ = (- PZ) FOR RESULT = (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQL)))) (LIST (SETF (GETHASH PZ TABLE) :X) (GETHASH PZ TABLE) (GETHASH NZ TABLE) (SETF (GETHASH NZ TABLE) :Y) (GETHASH PZ TABLE) (GETHASH NZ TABLE))) UNLESS (OR (EQL PZ NZ) (EQUAL RESULT (QUOTE (:X :X NIL :Y :X :Y)))) COLLECT (LIST PZ NZ RESULT)) NIL)
;; Loading (DEFTEST GETHASH.ZERO.3 (LOOP FOR PZ IN (QUOTE (0.0 0.0 0.0 0.0)) FOR NZ = (- PZ) FOR RESULT = (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (LIST (SETF (GETHASH PZ TABLE) :X) (GETHASH PZ TABLE) (GETHASH NZ TABLE) (SETF (GETHASH NZ TABLE) :Y) (GETHASH PZ TABLE) (GETHASH NZ TABLE))) UNLESS (OR (EQL PZ NZ) (EQUAL RESULT (QUOTE (:X :X NIL :Y :X :Y)))) COLLECT (LIST PZ NZ RESULT)) NIL)
;; Loading (DEFTEST GETHASH.ZERO.4 (LOOP FOR PZ IN (QUOTE (0.0 0.0 0.0 0.0)) FOR NZ = (- PZ) FOR RESULT = (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (LIST (SETF (GETHASH PZ TABLE) :X) (GETHASH PZ TABLE) (GETHASH NZ TABLE) (SETF (GETHASH NZ TABLE) :Y) (GETHASH PZ TABLE) (GETHASH NZ TABLE))) UNLESS (OR (EQL PZ NZ) (EQUAL RESULT (QUOTE (:X :X :X :Y :Y :Y)))) COLLECT (LIST PZ NZ RESULT)) NIL)
;; Loading (DEFTEST GETHASH.ERROR.1 (SIGNALS-ERROR (GETHASH) PROGRAM-ERROR) T)
;; Loading (DEFTEST GETHASH.ERROR.2 (SIGNALS-ERROR (GETHASH (QUOTE FOO)) PROGRAM-ERROR) T)
;; Loading (DEFTEST GETHASH.ERROR.3 (SIGNALS-ERROR (GETHASH (QUOTE FOO) (MAKE-HASH-TABLE) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "remhash.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/remhash.lsp C12AD747>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REMHASH.1 (LET ((TABLE (MAKE-HASH-TABLE))) (VALUES (GETHASH (QUOTE A) TABLE) (REMHASH (QUOTE A) TABLE) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (GETHASH (QUOTE A) TABLE) (NOTNOT (REMHASH (QUOTE A) TABLE)) (GETHASH (QUOTE A) TABLE))) NIL NIL B B T NIL)
;; Loading (DEFTEST REMHASH.2 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQ)))) (VALUES (GETHASH (QUOTE A) TABLE) (REMHASH (QUOTE A) TABLE) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (GETHASH (QUOTE A) TABLE) (NOTNOT (REMHASH (QUOTE A) TABLE)) (GETHASH (QUOTE A) TABLE))) NIL NIL B B T NIL)
;; Loading (DEFTEST REMHASH.3 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (VALUES (GETHASH (QUOTE A) TABLE) (REMHASH (QUOTE A) TABLE) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (GETHASH (QUOTE A) TABLE) (NOTNOT (REMHASH (QUOTE A) TABLE)) (GETHASH (QUOTE A) TABLE))) NIL NIL B B T NIL)
;; Loading (DEFTEST REMHASH.4 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (VALUES (GETHASH (QUOTE A) TABLE) (REMHASH (QUOTE A) TABLE) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (GETHASH (QUOTE A) TABLE) (NOTNOT (REMHASH (QUOTE A) TABLE)) (GETHASH (QUOTE A) TABLE))) NIL NIL B B T NIL)
;; Loading (DEFTEST REMHASH.5 (REMHASH (QUOTE A) (MAKE-HASH-TABLE)) NIL)
;; Loading (DEFTEST REMHASH.6 (NOTNOT-MV (REMHASH NIL (LET ((TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH NIL TABLE) T) TABLE))) T)
;; Loading (DEFTEST REMHASH.ORDER.1 (LET ((I 0) X Y) (VALUES (REMHASH (PROGN (SETF X (INCF I)) (QUOTE A)) (PROGN (SETF Y (INCF I)) (MAKE-HASH-TABLE))) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST REMHASH.ERROR.1 (SIGNALS-ERROR (REMHASH) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMHASH.ERROR.2 (SIGNALS-ERROR (REMHASH (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMHASH.ERROR.3 (SIGNALS-ERROR (REMHASH (QUOTE A) (MAKE-HASH-TABLE) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "clrhash.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/clrhash.lsp C132D1A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CLRHASH.1 (LET ((TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (VALUES (HASH-TABLE-COUNT TABLE) (EQUALT (MULTIPLE-VALUE-LIST (CLRHASH TABLE)) (LIST TABLE)) (HASH-TABLE-COUNT TABLE))) 1 T 0)
;; Loading (DEFTEST CLRHASH.2 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQ)))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (VALUES (HASH-TABLE-COUNT TABLE) (EQUALT (MULTIPLE-VALUE-LIST (CLRHASH TABLE)) (LIST TABLE)) (HASH-TABLE-COUNT TABLE))) 1 T 0)
;; Loading (DEFTEST CLRHASH.3 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (VALUES (HASH-TABLE-COUNT TABLE) (EQUALT (MULTIPLE-VALUE-LIST (CLRHASH TABLE)) (LIST TABLE)) (HASH-TABLE-COUNT TABLE))) 1 T 0)
;; Loading (DEFTEST CLRHASH.4 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (VALUES (HASH-TABLE-COUNT TABLE) (EQUALT (MULTIPLE-VALUE-LIST (CLRHASH TABLE)) (LIST TABLE)) (HASH-TABLE-COUNT TABLE))) 1 T 0)
;; Loading (DEFTEST CLRHASH.5 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQL)))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (VALUES (HASH-TABLE-COUNT TABLE) (EQUALT (MULTIPLE-VALUE-LIST (CLRHASH TABLE)) (LIST TABLE)) (HASH-TABLE-COUNT TABLE))) 1 T 0)
;; Loading (DEFTEST CLRHASH.ERROR.1 (SIGNALS-ERROR (CLRHASH) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLRHASH.ERROR.2 (SIGNALS-ERROR (CLRHASH (MAKE-HASH-TABLE) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "maphash.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/maphash.lsp C1395567>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAPHASH.1 (LET ((TABLE (MAKE-HASH-TABLE))) (LOOP FOR I FROM 1 TO 1000 DO (SETF (GETHASH I TABLE) (+ I I))) (LET ((S1 0) (S2 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (K V) (INCF S1 K) (INCF S2 V))) TABLE)) S1 S2))) (NIL) 500500 1001000)
;; Loading (DEFTEST MAPHASH.2 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (LOOP FOR I FROM 1 TO 1000 DO (SETF (GETHASH I TABLE) (+ I I))) (LET ((S1 0) (S2 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (K V) (INCF S1 K) (INCF S2 V))) TABLE)) S1 S2))) (NIL) 500500 1001000)
;; Loading (DEFTEST MAPHASH.3 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (LOOP FOR I FROM 1 TO 1000 DO (SETF (GETHASH I TABLE) (+ I I))) (LET ((S1 0) (S2 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (K V) (INCF S1 K) (INCF S2 V))) TABLE)) S1 S2))) (NIL) 500500 1001000)
;; Loading (DEFTEST MAPHASH.4 (LET ((TABLE (MAKE-HASH-TABLE))) (LOOP FOR I FROM 1 TO 1000 DO (SETF (GETHASH I TABLE) (+ I I))) (LET ((S1 0) (S2 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (K V) (INCF S1 K) (INCF S2 V) (REMHASH K TABLE))) TABLE)) S1 S2 (HASH-TABLE-COUNT TABLE)))) (NIL) 500500 1001000 0)
;; Loading (DEFTEST MAPHASH.5 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (LOOP FOR I FROM 1 TO 1000 DO (SETF (GETHASH I TABLE) (+ I I))) (LET ((S1 0) (S2 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (K V) (INCF S1 K) (INCF S2 V) (REMHASH K TABLE))) TABLE)) S1 S2 (HASH-TABLE-COUNT TABLE)))) (NIL) 500500 1001000 0)
;; Loading (DEFTEST MAPHASH.6 (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (LOOP FOR I FROM 1 TO 1000 DO (SETF (GETHASH I TABLE) (+ I I))) (LET ((S1 0) (S2 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (K V) (INCF S1 K) (INCF S2 V) (REMHASH K TABLE))) TABLE)) S1 S2 (HASH-TABLE-COUNT TABLE)))) (NIL) 500500 1001000 0)
;; Loading (DEFTEST MAPHASH.7 (LET ((SYMBOLS (QUOTE (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z))) (TABLE (MAKE-HASH-TABLE :TEST (FUNCTION EQ)))) (LOOP FOR SYM IN SYMBOLS FOR I FROM 1 DO (SETF (GETHASH SYM TABLE) I)) (LET ((SUM 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (K V) (ASSERT (EQ (ELT SYMBOLS (1- V)) K)) (INCF SUM V))) TABLE)) SUM))) (NIL) 351)
;; Loading (DEFTEST MAPHASH.8 (LET ((SYMBOLS (QUOTE (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z))) (TABLE (MAKE-HASH-TABLE :TEST (FUNCTION EQ)))) (LOOP FOR SYM IN SYMBOLS FOR I FROM 1 DO (SETF (GETHASH SYM TABLE) I)) (LET ((SUM 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (K V) (ASSERT (EQ (ELT SYMBOLS (1- V)) K)) (REMHASH K TABLE) (INCF SUM V))) TABLE)) SUM (HASH-TABLE-COUNT TABLE)))) (NIL) 351 0)
;; Loading (DEFTEST MAPHASH.ORDER.1 (LET ((I 0) X Y DUMMY (TABLE (MAKE-HASH-TABLE))) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (PROGN (SETF X (INCF I)) (FUNCTION (LAMBDA (K V) (SETF DUMMY (LIST K V))))) (PROGN (SETF Y (INCF I)) TABLE))) I X Y DUMMY)) (NIL) 2 1 2 NIL)
;; Loading (DEFTEST MAPHASH.ERROR.1 (SIGNALS-ERROR (MAPHASH) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPHASH.ERROR.2 (SIGNALS-ERROR (MAPHASH (FUNCTION LIST)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAPHASH.ERROR.3 (SIGNALS-ERROR (MAPHASH (FUNCTION LIST) (MAKE-HASH-TABLE) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "with-hash-table-iterator.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-hash-table-iterator.lsp C147F557>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.1 (WITH-HASH-TABLE-ITERATOR (X (MAKE-HASH-TABLE))) NIL)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.2 (WITH-HASH-TABLE-ITERATOR (X (MAKE-HASH-TABLE)) (VALUES)))
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.3 (WITH-HASH-TABLE-ITERATOR (X (MAKE-HASH-TABLE)) (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) A B C D)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.4 (WITH-HASH-TABLE-ITERATOR (%X (MAKE-HASH-TABLE)) (%X)) NIL)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.5 (LET ((TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (WITH-HASH-TABLE-ITERATOR (%X TABLE) (MULTIPLE-VALUE-BIND (SUCCESS-P KEY VAL) (%X) (VALUES (NOTNOT SUCCESS-P) KEY VAL)))) T A B)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.6 (LET ((TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH (QUOTE A) TABLE) (QUOTE B)) (WITH-HASH-TABLE-ITERATOR (%X TABLE) (LENGTH (MULTIPLE-VALUE-LIST (%X))))) 3)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.7 (LET ((KEYS (QUOTE ("a" "b" "c" "d" "e")))) (LOOP FOR TEST IN (QUOTE (EQ EQL EQUAL EQUALP)) FOR TEST-FN OF-TYPE FUNCTION = (SYMBOL-FUNCTION TEST) COLLECT (LET ((TABLE (MAKE-HASH-TABLE :TEST TEST))) (LOOP FOR K IN KEYS FOR I FROM 0 DO (SETF (GETHASH K TABLE) I)) (LET ((COUNT 0) (FOUND-KEYS)) (WITH-HASH-TABLE-ITERATOR (%X TABLE) (BLOCK DONE (LOOP (MULTIPLE-VALUE-BIND (SUCCESS KEY VAL) (%X) (UNLESS SUCCESS (RETURN-FROM DONE NIL)) (INCF COUNT) (PUSH KEY FOUND-KEYS) (ASSERT (= VAL (POSITION KEY KEYS :TEST TEST-FN)))))) (AND (= COUNT (LENGTH KEYS)) (EVERY TEST-FN (SORT (REMOVE-DUPLICATES FOUND-KEYS :TEST TEST) (FUNCTION STRING<)) KEYS) T)))))) (T T T T))
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.8 (WITH-HASH-TABLE-ITERATOR (%X (MAKE-HASH-TABLE)) (DECLARE (OPTIMIZE))) NIL)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.8A (WITH-HASH-TABLE-ITERATOR (%X (MAKE-HASH-TABLE)) (DECLARE (OPTIMIZE)) (DECLARE (OPTIMIZE))) NIL)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.9 (WITH-HASH-TABLE-ITERATOR (%X (MAKE-HASH-TABLE)) (MACROLET ((EXPAND-%X (&ENVIRONMENT ENV) (LET ((EXPANDED-FORM (MACROEXPAND (QUOTE (%X)) ENV))) (IF (EQUAL EXPANDED-FORM (QUOTE (%X))) NIL T)))) (EXPAND-%X))) T)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.10 (LET ((TABLE (MAKE-HASH-TABLE))) (LOOP FOR KEY FROM 1 TO 100 FOR VAL FROM 101 TO 200 DO (SETF (GETHASH KEY TABLE) VAL)) (LET ((PAIRS NIL)) (WITH-HASH-TABLE-ITERATOR (%X TABLE) (LOOP (MULTIPLE-VALUE-BIND (SUCCESS KEY VAL) (%X) (UNLESS SUCCESS (RETURN NIL)) (REMHASH KEY TABLE) (PUSH (CONS KEY VAL) PAIRS)))) (ASSERT (EQL (LENGTH PAIRS) 100)) (SETQ PAIRS (SORT PAIRS (FUNCTION (LAMBDA (P1 P2) (< (CAR P1) (CAR P2)))))) (VALUES (HASH-TABLE-COUNT TABLE) (LOOP FOR (KEY . VAL) IN PAIRS FOR EXPECTED-KEY FROM 1 FOR EXPECTED-VAL FROM 101 ALWAYS (AND (EQL KEY EXPECTED-KEY) (EQL VAL EXPECTED-VAL)))))) 0 T)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.11 (LET ((TABLE (MAKE-HASH-TABLE))) (LOOP FOR KEY FROM 1 TO 100 FOR VAL FROM 101 TO 200 DO (SETF (GETHASH KEY TABLE) VAL)) (LET ((PAIRS NIL)) (WITH-HASH-TABLE-ITERATOR (%X TABLE) (LOOP (MULTIPLE-VALUE-BIND (SUCCESS KEY VAL) (%X) (UNLESS SUCCESS (RETURN NIL)) (SETF (GETHASH KEY TABLE) (+ 1000 VAL)) (PUSH (CONS KEY VAL) PAIRS)))) (ASSERT (EQL (LENGTH PAIRS) 100)) (SETQ PAIRS (SORT PAIRS (FUNCTION (LAMBDA (P1 P2) (< (CAR P1) (CAR P2)))))) (VALUES (HASH-TABLE-COUNT TABLE) (LOOP FOR (KEY . VAL) IN PAIRS FOR EXPECTED-KEY FROM 1 FOR EXPECTED-VAL FROM 101 ALWAYS (AND (EQL KEY EXPECTED-KEY) (EQL VAL EXPECTED-VAL) (EQL (GETHASH KEY TABLE) (+ 1000 VAL))))))) 100 T)
;; Loading (DEFTEST WITH-HASH-TABLE-ITERATOR.12 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-HASH-TABLE-ITERATOR (M (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (LOAD "sxhash.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/sxhash.lsp C1578417>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SXHASH.1 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (TYPEP (SXHASH X) (QUOTE (AND UNSIGNED-BYTE FIXNUM)))))) NIL)
;; Loading (DEFTEST SXHASH.2 (LOOP FOR I FROM 0 BELOW 256 FOR C = (CODE-CHAR I) WHEN (AND C (NOT (= (SXHASH (STRING C)) (SXHASH (STRING C))))) COLLECT C) NIL)
;; Loading (DEFTEST SXHASH.3 (=T (SXHASH "") (SXHASH (COPY-SEQ ""))) T)
;; Loading (DEFTEST SXHASH.4 (LOOP FOR BV1 IN (QUOTE (#* #*0 #*1 #*01 #*00 #*10 #*11 #*1100101101100 #*110010101011001011010000111001011)) FOR BV2 = (COPY-SEQ BV1) FOR SX1 = (SXHASH BV1) FOR SX2 = (SXHASH BV2) ALWAYS (AND (NOT (EQ BV1 BV2)) (EQUAL BV1 BV2) (TYPEP SX1 (QUOTE (AND UNSIGNED-BYTE FIXNUM))) (TYPEP SX2 (QUOTE (AND UNSIGNED-BYTE FIXNUM))) (= SX1 SX2))) T)
;; Loading (DEFTEST SXHASH.5 (LET ((S1 "abcd") (S2 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 4))) (AND (EQUALT S1 S2) (=T (SXHASH S1) (SXHASH S2)))) T)
;; Loading (DEFTEST SXHASH.6 (LET ((S1 #*01101) (S2 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*0110111101 :FILL-POINTER 5))) (AND (EQUALT S1 S2) (=T (SXHASH S1) (SXHASH S2)))) T)
;; Loading (DEFTEST SXHASH.7 (LET* ((A (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL)) (SX1 (SXHASH A))) (SETF (AREF A 4) (QUOTE X)) (LET ((SX2 (SXHASH A))) (AND (TYPEP SX1 (QUOTE (AND UNSIGNED-BYTE FIXNUM))) (EQLT SX1 SX2)))) T)
;; Loading (DEFTEST SXHASH.8 :NOTES (:NIL-VECTORS-ARE-STRINGS) (EQLT (SXHASH (MAKE-ARRAY 0 :ELEMENT-TYPE NIL)) (SXHASH "")) T)
;; Loading (DEFTEST SXHASH.9 (LET ((S1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcde")) (S2 (COPY-SEQ "abcde"))) (EQLT (SXHASH S1) (SXHASH S2))) T)
;; Loading (DEFTEST SXHASH.10 (LET ((S1 "abcd") (S2 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 4))) (AND (EQUALT S1 S2) (=T (SXHASH S1) (SXHASH S2)))) T)
;; Loading (DEFTEST SXHASH.11 (LET* ((X (CONS (QUOTE A) (QUOTE B))) (SX1 (SXHASH X)) (SX2 (SXHASH (QUOTE (A . B))))) (SETF (CAR X) (QUOTE C)) (LET* ((SX3 (SXHASH X)) (SX4 (SXHASH (QUOTE (C . B))))) (AND (=T SX1 SX2) (=T SX3 SX4)))) T)
;; Loading (DEFTEST SXHASH.12 (LET ((X (1+ MOST-POSITIVE-FIXNUM)) (Y (1+ MOST-POSITIVE-FIXNUM))) (=T (SXHASH X) (SXHASH Y))) T)
;; Loading (DEFTEST SXHASH.13 (LET ((SX1 (SXHASH (MAKE-SYMBOL "FOO"))) (SX2 (SXHASH (MAKE-SYMBOL "FOO")))) (AND (TYPEP SX1 (QUOTE (AND UNSIGNED-BYTE FIXNUM))) (EQLT SX1 SX2))) T)
;; Loading (DEFTEST SXHASH.15 (LET* ((PACKAGE-NAME (LOOP FOR I FROM 0 FOR NAME = (FORMAT NIL "PACKAGE-~A" I) FOR PACKAGE = (FIND-PACKAGE NAME) UNLESS PACKAGE DO (RETURN NAME))) (SX1 (LET* ((PACKAGE (MAKE-PACKAGE PACKAGE-NAME :NICKNAMES NIL :USE NIL)) (SYMBOL (INTERN "FOO" PACKAGE))) (PROG1 (SXHASH SYMBOL) (DELETE-PACKAGE PACKAGE)))) (SX2 (LET* ((PACKAGE (MAKE-PACKAGE PACKAGE-NAME :NICKNAMES NIL :USE NIL)) (SYMBOL (INTERN "FOO" PACKAGE))) (PROG1 (SXHASH SYMBOL) (DELETE-PACKAGE PACKAGE))))) (ASSERT (TYPEP SX1 (QUOTE (AND UNSIGNED-BYTE FIXNUM)))) (IF (= SX1 SX2) :GOOD (LIST SX1 SX2))) :GOOD)
;; Loading (DEFTEST SXHASH.16 (LET ((C1 (LIST (QUOTE A))) (C2 (LIST (QUOTE A)))) (SETF (CDR C1) C1) (SETF (CDR C2) C2) (LET ((SX1 (SXHASH C1)) (SX2 (SXHASH C2))) (OR (EQLT SX1 SX2) (LIST SX1 SX2)))) T)
;; Loading (DEFTEST SXHASH.17 :NOTES (:NEGATIVE-ZERO-IS-SIMILAR-TO-POSITIVE-ZERO) (LOOP FOR C1 IN (QUOTE (0.0 0.0 0.0 0.0)) FOR C2 IN (QUOTE (0.0 0.0 0.0 0.0)) FOR T1 = (TYPE-OF C1) FOR T2 = (TYPE-OF C2) FOR SX1 = (SXHASH C1) FOR SX2 = (SXHASH C2) UNLESS (OR (NOT (SUBTYPEP T1 T2)) (NOT (SUBTYPEP T2 T1)) (EQL SX1 SX2)) COLLECT (LIST C1 C2 SX1 SX2)) NIL)
;; Loading (DEFTEST SXHASH.18 :NOTES (:NEGATIVE-ZERO-IS-SIMILAR-TO-POSITIVE-ZERO) (LOOP FOR R1 IN (QUOTE (0.0 0.0 0.0 0.0)) FOR C1 = (COMPLEX R1) FOR R2 IN (QUOTE (0.0 0.0 0.0 0.0)) FOR C2 = (COMPLEX R2) FOR T1 = (TYPE-OF C1) FOR T2 = (TYPE-OF C2) FOR SX1 = (SXHASH C1) FOR SX2 = (SXHASH C2) UNLESS (OR (NOT (SUBTYPEP T1 T2)) (NOT (SUBTYPEP T2 T1)) (EQL SX1 SX2)) COLLECT (LIST C1 C2 SX1 SX2)) NIL)
;; Loading (DEFTEST SXHASH.19 :NOTES (:NEGATIVE-ZERO-IS-SIMILAR-TO-POSITIVE-ZERO) (LOOP FOR R1 IN (QUOTE (0.0 0.0 0.0 0.0)) FOR C1 = (COMPLEX 0 R1) FOR R2 IN (QUOTE (0.0 0.0 0.0 0.0)) FOR C2 = (COMPLEX 0 R2) FOR T1 = (TYPE-OF C1) FOR T2 = (TYPE-OF C2) FOR SX1 = (SXHASH C1) FOR SX2 = (SXHASH C2) UNLESS (OR (NOT (SUBTYPEP T1 T2)) (NOT (SUBTYPEP T2 T1)) (EQL SX1 SX2)) COLLECT (LIST C1 C2 SX1 SX2)) NIL)
;; Loading (DEFTEST SXHASH.20 (LET* ((PATHSPEC "sxhash.lsp") (SX1 (SXHASH (PATHNAME (COPY-SEQ PATHSPEC)))) (SX2 (SXHASH (PATHNAME (COPY-SEQ PATHSPEC))))) (IF (AND (TYPEP SX1 (QUOTE (AND FIXNUM UNSIGNED-BYTE))) (EQL SX1 SX2)) :GOOD (LIST SX1 SX2))) :GOOD)
;; Loading (DEFTEST SXHASH.21 (LET* ((S1 "abc") (S2 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS S1)) (S3 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS S1)) (S4 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE STANDARD-CHAR) :INITIAL-CONTENTS S1)) (S5 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "abc")) (S6 (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3 :INITIAL-CONTENTS "abcde")) (S7 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO S2 :DISPLACED-INDEX-OFFSET 0)) (S8 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO (MAKE-ARRAY (QUOTE (7)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "xxabcyy") :DISPLACED-INDEX-OFFSET 2)) (STRINGS (LIST S1 S2 S3 S4 S5 S6 S7 S8)) (HASHES (MAPCAR (FUNCTION SXHASH) STRINGS))) (IF (AND (EVERY (FUNCTION (LAMBDA (H) (TYPEP H (QUOTE (AND UNSIGNED-BYTE FIXNUM))))) HASHES) (NOT (POSITION (CAR HASHES) HASHES :TEST (FUNCTION /=)))) :GOOD HASHES)) :GOOD)
;; Loading (DEFTEST SXHASH.22 (LET* ((BV1 #*010) (BV2 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS BV1)) (BV5 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE BIT) :ADJUSTABLE T :INITIAL-CONTENTS BV1)) (BV6 (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 3 :INITIAL-CONTENTS #*01010)) (BV7 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO BV2 :DISPLACED-INDEX-OFFSET 0)) (BV8 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO (MAKE-ARRAY (QUOTE (7)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*1101001) :DISPLACED-INDEX-OFFSET 2)) (BIT-VECTORS (LIST BV1 BV2 BV5 BV6 BV7 BV8)) (HASHES (MAPCAR (FUNCTION SXHASH) BIT-VECTORS))) (IF (AND (EVERY (FUNCTION (LAMBDA (H) (TYPEP H (QUOTE (AND UNSIGNED-BYTE FIXNUM))))) HASHES) (NOT (POSITION (CAR HASHES) HASHES :TEST (FUNCTION /=)))) :GOOD HASHES)) :GOOD)
;; Loading (DEFTEST SXHASH.23 (PROGN (SAFELY-DELETE-PACKAGE "A") (DEFPACKAGE "A" (:USE)) (LET* ((PKG (FIND-PACKAGE "A")) (SYM (INTERN "FOO" PKG)) (HASH (SXHASH SYM))) (UNINTERN SYM PKG) (LET ((HASH2 (SXHASH SYM))) (IF (EQL HASH HASH2) NIL (LIST HASH HASH2))))) NIL)
;; Loading (DEFTEST SXHASH.ERROR.1 (SIGNALS-ERROR (SXHASH) PROGRAM-ERROR) T)
;; Loading (DEFTEST SXHASH.ERROR.2 (SIGNALS-ERROR (SXHASH NIL NIL) PROGRAM-ERROR) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (LOAD "load-packages.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-packages.lsp 80F7D767>
;; Loading (COMPILE-AND-LOAD "packages-00.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/packages-00.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DECLAIM (OPTIMIZE (SAFETY 3))).
;; Compiling form (REPORT-AND-IGNORE-ERRORS (DEFPACKAGE "A" (:USE) (:NICKNAMES "Q") (:EXPORT "FOO"))).
;; Compiling form (REPORT-AND-IGNORE-ERRORS (DEFPACKAGE "B" (:USE "A") (:EXPORT "BAR"))).
;; Compiling form (DEFUN SET-UP-PACKAGES NIL (SAFELY-DELETE-PACKAGE "A") (SAFELY-DELETE-PACKAGE "B") (SAFELY-DELETE-PACKAGE "Q") (DEFPACKAGE "A" (:USE) (:NICKNAMES "Q") (:EXPORT "FOO")) (DEFPACKAGE "B" (:USE "A") (:EXPORT "BAR"))).
;; Compiling form (REPORT-AND-IGNORE-ERRORS (DEFPACKAGE "FS-A" (:USE) (:NICKNAMES "FS-Q") (:EXPORT "FOO"))).
;; Compiling form (REPORT-AND-IGNORE-ERRORS (DEFPACKAGE "FS-B" (:USE "FS-A") (:EXPORT "BAR"))).
;; Compiling form (REPORT-AND-IGNORE-ERRORS (DEFPACKAGE "DS1" (:USE) (:INTERN "C" "D") (:EXPORT "A" "B"))).
;; Compiling form (REPORT-AND-IGNORE-ERRORS (DEFPACKAGE "DS2" (:USE) (:INTERN "E" "F") (:EXPORT "G" "H" "A"))).
;; Compiling form (REPORT-AND-IGNORE-ERRORS (DEFPACKAGE "DS3" (:USE "DS1" "DS2") (:EXPORT "A" "B" "G" "I" "J" "K") (:INTERN "L" "M"))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (REPORT-AND-IGNORE-ERRORS (DEFPACKAGE "DS4" (:USE "DS1" "DS3") (:INTERN "X" "Y" "Z") (:IMPORT-FROM "DS2" "F"))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/packages-00.llf C1258A57>
#<Simple-Error Newly exported symbol DS2:A conflicts with symbol DS1:A in package #<Package "Ds3">.>
;; Loading (LOAD "find-symbol.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/find-symbol.lsp C12FB727>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "packages-00.lsp")
;; Loading (DEFTEST FIND-SYMBOL.1 (FIND-SYMBOL "aBmAchb1c") NIL NIL)
;; Loading (DEFTEST FIND-SYMBOL.2 (FIND-SYMBOL "aBmAchb1c" "CL") NIL NIL)
;; Loading (DEFTEST FIND-SYMBOL.3 (FIND-SYMBOL "aBmAchb1c" "COMMON-LISP") NIL NIL)
;; Loading (DEFTEST FIND-SYMBOL.4 (FIND-SYMBOL "aBmAchb1c" "KEYWORD") NIL NIL)
;; Loading (DEFTEST FIND-SYMBOL.5 (FIND-SYMBOL "aBmAchb1c" "COMMON-LISP-USER") NIL NIL)
;; Loading (DEFTEST FIND-SYMBOL.6 (FIND-SYMBOL (STRING (QUOTE #:CAR)) "CL") CAR :EXTERNAL)
;; Loading (DEFTEST FIND-SYMBOL.7 (FIND-SYMBOL (STRING (QUOTE #:CAR)) "COMMON-LISP") CAR :EXTERNAL)
;; Loading (DEFTEST FIND-SYMBOL.8 (VALUES (FIND-SYMBOL (STRING (QUOTE #:CAR)) "COMMON-LISP-USER")) CAR)
;; Loading (DEFTEST FIND-SYMBOL.9 (FIND-SYMBOL (STRING (QUOTE #:CAR)) "CL-TEST") CAR :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.10 (FIND-SYMBOL (STRING (QUOTE #:TEST)) "KEYWORD") :TEST :EXTERNAL)
;; Loading (DEFTEST FIND-SYMBOL.11 (FIND-SYMBOL (STRING (QUOTE #:FIND-SYMBOL.11)) "CL-TEST") FIND-SYMBOL.11 :INTERNAL)
;; Loading (DEFTEST FIND-SYMBOL.12 (PROGN (SET-UP-PACKAGES) (LET ((VALS (MULTIPLE-VALUE-LIST (FIND-SYMBOL "FOO" #\A)))) (VALUES (LENGTH VALS) (PACKAGE-NAME (SYMBOL-PACKAGE (FIRST VALS))) (SYMBOL-NAME (FIRST VALS)) (SECOND VALS)))) 2 "A" "FOO" :EXTERNAL)
;; Loading (DEFTEST FIND-SYMBOL.13 (PROGN (SET-UP-PACKAGES) (INTERN "X" (FIND-PACKAGE "A")) (LET ((VALS (MULTIPLE-VALUE-LIST (FIND-SYMBOL "X" #\A)))) (VALUES (LENGTH VALS) (PACKAGE-NAME (SYMBOL-PACKAGE (FIRST VALS))) (SYMBOL-NAME (FIRST VALS)) (SECOND VALS)))) 2 "A" "X" :INTERNAL)
;; Loading (DEFTEST FIND-SYMBOL.14 (PROGN (SET-UP-PACKAGES) (LET ((VALS (MULTIPLE-VALUE-LIST (FIND-SYMBOL "FOO" #\B)))) (VALUES (LENGTH VALS) (PACKAGE-NAME (SYMBOL-PACKAGE (FIRST VALS))) (SYMBOL-NAME (FIRST VALS)) (SECOND VALS)))) 2 "A" "FOO" :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.15 (FIND-SYMBOL "FOO" "FS-B") FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.16 (FIND-SYMBOL "FOO" (FIND-PACKAGE "FS-B")) FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.17 (LET ((NAME (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS "FOO" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (FIND-SYMBOL NAME "FS-B")) FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.18 (LET ((NAME (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS "FOOD" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3))) (FIND-SYMBOL NAME "FS-B")) FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.19 (LET ((NAME (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS "FOOD" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 3))) (FIND-SYMBOL NAME "FS-B")) FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.20 (LET* ((NAME0 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "XFOOY" :ELEMENT-TYPE (QUOTE CHARACTER))) (NAME (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1))) (FIND-SYMBOL NAME "FS-B")) FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.21 (LET* ((NAME0 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "XFOOY" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (NAME (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1))) (FIND-SYMBOL NAME "FS-B")) FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.22 (FIND-SYMBOL "FOO" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS "FS-B" :ELEMENT-TYPE (QUOTE BASE-CHAR))) FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.23 (FIND-SYMBOL "FOO" (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "FS-BX" :FILL-POINTER 4 :ELEMENT-TYPE (QUOTE BASE-CHAR))) FS-A:FOO :INHERITED)
;; Loading (DEFTEST FIND-SYMBOL.ORDER.1 (LET ((I 0) X Y) (VALUES (FIND-SYMBOL (PROGN (SETF X (INCF I)) (STRING (QUOTE #:CAR))) (PROGN (SETF Y (INCF I)) "COMMON-LISP")) I X Y)) CAR 2 1 2)
;; Loading (DEFTEST FIND-SYMBOL.ERROR.1 (SIGNALS-ERROR (FIND-SYMBOL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-SYMBOL.ERROR.2 (SIGNALS-ERROR (FIND-SYMBOL "CAR" "CL" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "find-all-symbols.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/find-all-symbols.lsp C1466AD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.1 (LET ((ALL-PACKAGES (LIST-ALL-PACKAGES))) (LOOP FOR PACKAGE IN ALL-PACKAGES APPEND (LET ((FAILURES NIL)) (DO-SYMBOLS (SYM PACKAGE FAILURES) (WHEN (EQL (SYMBOL-PACKAGE SYM) PACKAGE) (LET* ((NAME (SYMBOL-NAME SYM)) (SIMILAR (FIND-ALL-SYMBOLS NAME)) (SIMILAR2 (FIND-ALL-SYMBOLS SYM))) (UNLESS (AND (MEMBER SYM SIMILAR) (SUBSETP SIMILAR SIMILAR2) (SUBSETP SIMILAR2 SIMILAR) (LOOP FOR SYM2 IN SIMILAR ALWAYS (STRING= NAME (SYMBOL-NAME SYM2)))) (PUSH SYM FAILURES)))))))) NIL)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.2 (LOOP FOR I FROM 0 TO 255 FOR C = (CODE-CHAR I) WHEN (AND (CHARACTERP C) (LOOP FOR SYM IN (FIND-ALL-SYMBOLS C) THEREIS (NOT (STRING= (SYMBOL-NAME SYM) (STRING C))))) COLLECT C) NIL)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.3 (LET* ((NAME (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS "NIL" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (SYMBOLS (FIND-ALL-SYMBOLS NAME))) (VALUES (NOTNOT (EVERY (FUNCTION (LAMBDA (S) (STRING= (SYMBOL-NAME S) "NIL"))) SYMBOLS)) (SOME (FUNCTION NOT) SYMBOLS))) T T)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.4 (LET* ((NAME (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "NILXY" :FILL-POINTER 3 :ELEMENT-TYPE (QUOTE CHARACTER))) (SYMBOLS (FIND-ALL-SYMBOLS NAME))) (VALUES (NOTNOT (EVERY (FUNCTION (LAMBDA (S) (STRING= (SYMBOL-NAME S) "NIL"))) SYMBOLS)) (SOME (FUNCTION NOT) SYMBOLS))) T T)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.5 (LET* ((NAME (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "NILXY" :FILL-POINTER 3 :ELEMENT-TYPE (QUOTE BASE-CHAR))) (SYMBOLS (FIND-ALL-SYMBOLS NAME))) (VALUES (NOTNOT (EVERY (FUNCTION (LAMBDA (S) (STRING= (SYMBOL-NAME S) "NIL"))) SYMBOLS)) (SOME (FUNCTION NOT) SYMBOLS))) T T)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.6 (LET* ((NAME (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS "NIL" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR))) (SYMBOLS (FIND-ALL-SYMBOLS NAME))) (VALUES (NOTNOT (EVERY (FUNCTION (LAMBDA (S) (STRING= (SYMBOL-NAME S) "NIL"))) SYMBOLS)) (SOME (FUNCTION NOT) SYMBOLS))) T T)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.7 (LET* ((NAME (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS "NIL" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (SYMBOLS (FIND-ALL-SYMBOLS NAME))) (VALUES (NOTNOT (EVERY (FUNCTION (LAMBDA (S) (STRING= (SYMBOL-NAME S) "NIL"))) SYMBOLS)) (SOME (FUNCTION NOT) SYMBOLS))) T T)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.8 (LET* ((TYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY (QUOTE (9)) :INITIAL-CONTENTS "XYZNILABC" :ELEMENT-TYPE TYPE)) (NAME (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE TYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 3)) (SYMBOLS (FIND-ALL-SYMBOLS NAME))) (VALUES (NOTNOT (EVERY (FUNCTION (LAMBDA (S) (STRING= (SYMBOL-NAME S) "NIL"))) SYMBOLS)) (SOME (FUNCTION NOT) SYMBOLS))) T T)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.9 (LET* ((TYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY (QUOTE (9)) :INITIAL-CONTENTS "XYZNILABC" :ELEMENT-TYPE TYPE)) (NAME (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE TYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 3)) (SYMBOLS (FIND-ALL-SYMBOLS NAME))) (VALUES (NOTNOT (EVERY (FUNCTION (LAMBDA (S) (STRING= (SYMBOL-NAME S) "NIL"))) SYMBOLS)) (SOME (FUNCTION NOT) SYMBOLS))) T T)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.ERROR.1 (SIGNALS-ERROR (FIND-ALL-SYMBOLS) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-ALL-SYMBOLS.ERROR.2 (SIGNALS-ERROR (FIND-ALL-SYMBOLS "CAR" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "find-package.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/find-package.lsp C1541F37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST FIND-PACKAGE.1 (LET ((P (FIND-PACKAGE "CL")) (P2 (FIND-PACKAGE "COMMON-LISP"))) (AND P P2 (EQT P P2))) T)
;; Loading (DEFTEST FIND-PACKAGE.2 (LET ((P (FIND-PACKAGE "CL-USER")) (P2 (FIND-PACKAGE "COMMON-LISP-USER"))) (AND P P2 (EQT P P2))) T)
;; Loading (DEFTEST FIND-PACKAGE.3 (LET ((P (FIND-PACKAGE "KEYWORD"))) (AND P (EQT P (SYMBOL-PACKAGE :TEST)))) T)
;; Loading (DEFTEST FIND-PACKAGE.4 (PROGN (SET-UP-PACKAGES) (LET ((P (IGNORE-ERRORS (FIND-PACKAGE "A")))) (IF (PACKAGEP P) T P))) T)
;; Loading (DEFTEST FIND-PACKAGE.5 (PROGN (SET-UP-PACKAGES) (LET ((P (IGNORE-ERRORS (FIND-PACKAGE #\A)))) (IF (PACKAGEP P) T P))) T)
;; Loading (DEFTEST FIND-PACKAGE.6 (PROGN (SET-UP-PACKAGES) (LET ((P (IGNORE-ERRORS (FIND-PACKAGE "B")))) (IF (PACKAGEP P) T P))) T)
;; Loading (DEFTEST FIND-PACKAGE.7 (PROGN (SET-UP-PACKAGES) (LET ((P (IGNORE-ERRORS (FIND-PACKAGE #\B)))) (IF (PACKAGEP P) T P))) T)
;; Loading (DEFTEST FIND-PACKAGE.8 (PROGN (SET-UP-PACKAGES) (LET ((P (IGNORE-ERRORS (FIND-PACKAGE "Q"))) (P2 (IGNORE-ERRORS (FIND-PACKAGE "A")))) (AND (PACKAGEP P) (PACKAGEP P2) (EQT P P2)))) T)
;; Loading (DEFTEST FIND-PACKAGE.9 (PROGN (SET-UP-PACKAGES) (LET ((P (IGNORE-ERRORS (FIND-PACKAGE "A"))) (P2 (IGNORE-ERRORS (FIND-PACKAGE "B")))) (EQT P P2))) NIL)
;; Loading (DEFTEST FIND-PACKAGE.10 (PROGN (SET-UP-PACKAGES) (LET ((P (IGNORE-ERRORS (FIND-PACKAGE #\Q))) (P2 (IGNORE-ERRORS (FIND-PACKAGE "Q")))) (AND (PACKAGEP P) (EQT P P2)))) T)
;; Loading (DEFTEST FIND-PACKAGE.11 (LET* ((CL (FIND-PACKAGE "CL")) (CL2 (FIND-PACKAGE CL))) (AND (PACKAGEP CL) (EQT CL CL2))) T)
;; Loading (DEFTEST FIND-PACKAGE.12 (LET* ((NAME (MAKE-ARRAY (QUOTE (7)) :INITIAL-CONTENTS "KEYWORD" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (P (FIND-PACKAGE NAME))) (AND P (EQT P (SYMBOL-PACKAGE :TEST)))) T)
;; Loading (DEFTEST FIND-PACKAGE.13 (LET* ((NAME (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "KEYWORDXYZ" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE BASE-CHAR))) (P (FIND-PACKAGE NAME))) (AND P (EQT P (SYMBOL-PACKAGE :TEST)))) T)
;; Loading (DEFTEST FIND-PACKAGE.14 (LET* ((NAME (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "KEYWORDXYZ" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE CHARACTER))) (P (FIND-PACKAGE NAME))) (AND P (EQT P (SYMBOL-PACKAGE :TEST)))) T)
;; Loading (DEFTEST FIND-PACKAGE.15 (LET* ((NAME0 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "XYKEYWORDZ" :ELEMENT-TYPE (QUOTE CHARACTER))) (NAME (MAKE-ARRAY (QUOTE (7)) :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE CHARACTER))) (P (FIND-PACKAGE NAME))) (AND P (EQT P (SYMBOL-PACKAGE :TEST)))) T)
;; Loading (DEFTEST FIND-PACKAGE.16 (LET* ((NAME (MAKE-ARRAY (QUOTE (7)) :INITIAL-CONTENTS "KEYWORD" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR))) (P (FIND-PACKAGE NAME))) (AND P (EQT P (SYMBOL-PACKAGE :TEST)))) T)
;; Loading (DEFTEST FIND-PACKAGE.17 (LET* ((NAME (MAKE-ARRAY (QUOTE (7)) :INITIAL-CONTENTS "KEYWORD" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (P (FIND-PACKAGE NAME))) (AND P (EQT P (SYMBOL-PACKAGE :TEST)))) T)
;; Loading (DEFTEST FIND-PACKAGE.ERROR.1 (SIGNALS-ERROR (FIND-PACKAGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-PACKAGE.ERROR.2 (SIGNALS-ERROR (FIND-PACKAGE "CL" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "list-all-packages.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/list-all-packages.lsp C161BAD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST LIST-ALL-PACKAGES.1 (NUMBERP (IGNORE-ERRORS (LIST-LENGTH (LIST-ALL-PACKAGES)))) T)
;; Loading (DEFTEST LIST-ALL-PACKAGES.2 (PROGN (SET-UP-PACKAGES) (NOTNOT (SUBSETP (LIST (FIND-PACKAGE "CL") (FIND-PACKAGE "CL-USER") (FIND-PACKAGE "KEYWORD") (FIND-PACKAGE "A") (FIND-PACKAGE "REGRESSION-TEST") (FIND-PACKAGE "CL-TEST") (FIND-PACKAGE "B")) (LIST-ALL-PACKAGES)))) T)
;; Loading (DEFTEST LIST-ALL-PACKAGES.3 (NOTNOT-MV (EVERY (FUNCTION PACKAGEP) (LIST-ALL-PACKAGES))) T)
;; Loading (DEFTEST LIST-ALL-PACKAGES.4 (LET ((P1 (LIST-ALL-PACKAGES)) (P2 (LIST-ALL-PACKAGES))) (AND (SUBSETP P1 P2) (SUBSETP P2 P1))) T)
;; Loading (DEFTEST LIST-ALL-PACKAGES.ERROR.1 (SIGNALS-ERROR (LIST-ALL-PACKAGES NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "package-name.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/package-name.lsp C1667FA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST PACKAGE-NAME.1 (PROGN (SET-UP-PACKAGES) (PACKAGE-NAME "A")) "A")
;; Loading (DEFTEST PACKAGE-NAME.2 (PROGN (SET-UP-PACKAGES) (PACKAGE-NAME #\A)) "A")
;; Loading (DEFTEST PACKAGE-NAME.3 (PROGN (SET-UP-PACKAGES) (PACKAGE-NAME "Q")) "A")
;; Loading (DEFTEST PACKAGE-NAME.4 (PROGN (SET-UP-PACKAGES) (PACKAGE-NAME #\Q)) "A")
;; Loading (DEFTEST PACKAGE-NAME.5 (HANDLER-CASE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (EVAL (QUOTE (PACKAGE-NAME "NOT-THERE"))) NIL) (TYPE-ERROR NIL T) (PACKAGE-ERROR NIL T)) T)
;; Loading (DEFTEST PACKAGE-NAME.6 (HANDLER-CASE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (EVAL (QUOTE (PACKAGE-NAME #\*))) NIL) (TYPE-ERROR NIL T) (PACKAGE-ERROR NIL T)) T)
;; Loading (DEFTEST PACKAGE-NAME.6A (HANDLER-CASE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (EVAL (QUOTE (LOCALLY (PACKAGE-NAME #\*) T))) NIL) (TYPE-ERROR NIL T) (PACKAGE-ERROR NIL T)) T)
;; Loading (DEFTEST PACKAGE-NAME.7 (PACKAGE-NAME "CL") "COMMON-LISP")
;; Loading (DEFTEST PACKAGE-NAME.8 (PACKAGE-NAME "COMMON-LISP") "COMMON-LISP")
;; Loading (DEFTEST PACKAGE-NAME.9 (PACKAGE-NAME "COMMON-LISP-USER") "COMMON-LISP-USER")
;; Loading (DEFTEST PACKAGE-NAME.10 (PACKAGE-NAME "CL-USER") "COMMON-LISP-USER")
;; Loading (DEFTEST PACKAGE-NAME.11 (PACKAGE-NAME "KEYWORD") "KEYWORD")
;; Loading (DEFTEST PACKAGE-NAME.12 (PACKAGE-NAME (FIND-PACKAGE "CL")) "COMMON-LISP")
;; Loading (DEFTEST PACKAGE-NAME.13 (LET* ((P (MAKE-PACKAGE "TEMP1")) (PNAME1 (PACKAGE-NAME P))) (RENAME-PACKAGE "TEMP1" "TEMP2") (LET ((PNAME2 (PACKAGE-NAME P))) (SAFELY-DELETE-PACKAGE P) (LIST PNAME1 PNAME2 (PACKAGE-NAME P)))) ("TEMP1" "TEMP2" NIL))
;; Loading (DEFTEST PACKAGE-NAME.14 (LOOP FOR P IN (LIST-ALL-PACKAGES) COUNT (NOT (LET ((NAME (PACKAGE-NAME P))) (AND (STRINGP NAME) (EQT (FIND-PACKAGE NAME) P))))) 0)
;; Loading (DEFTEST PACKAGE-NAME.15 (LOOP FOR P IN (LIST-ALL-PACKAGES) COUNT (NOT (EQUAL (PACKAGE-NAME P) (PACKAGE-NAME (PACKAGE-NAME P))))) 0)
;; Loading (DEFMACRO DEF-PACKAGE-NAME-TEST (TEST-NAME NAME-FORM EXPECTED-NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM)) (EXPECTED-NAME (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-NAME-FORM))) (ASSERT (STRING= NAME EXPECTED-NAME)) (SAFELY-DELETE-PACKAGE NAME) (LET ((P (MAKE-PACKAGE NAME :USE NIL))) (EQUALT (PACKAGE-NAME P) EXPECTED-NAME))) T)))
;; Loading (DEF-PACKAGE-NAME-TEST PACKAGE-NAME.16 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "TEST1") "TEST1")
;; Loading (DEF-PACKAGE-NAME-TEST PACKAGE-NAME.17 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????") "TEST1")
;; Loading (DEF-PACKAGE-NAME-TEST PACKAGE-NAME.18 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????") "TEST1")
;; Loading (DEF-PACKAGE-NAME-TEST PACKAGE-NAME.19 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1") "TEST1")
;; Loading (DEF-PACKAGE-NAME-TEST PACKAGE-NAME.20 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1") "TEST1")
;; Loading (DEF-PACKAGE-NAME-TEST PACKAGE-NAME.21 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)) "TEST1")
;; Loading (DEF-PACKAGE-NAME-TEST PACKAGE-NAME.22 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)) "TEST1")
;; Loading (DEFTEST PACKAGE-NAME.ERROR.1 (SIGNALS-ERROR (PACKAGE-NAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGE-NAME.ERROR.2 (SIGNALS-ERROR (PACKAGE-NAME "CL" NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGE-NAME.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION PACKAGE-NAME) (FUNCTION PACKAGE-DESIGNATOR-P)) NIL)
;; Loading (LOAD "package-nicknames.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/package-nicknames.lsp C17872A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST PACKAGE-NICKNAMES.1 (PROGN (SET-UP-PACKAGES) (PACKAGE-NICKNAMES "A")) ("Q"))
;; Loading (DEFTEST PACKAGE-NICKNAMES.2 (PROGN (SET-UP-PACKAGES) (PACKAGE-NICKNAMES #\A)) ("Q"))
;; Loading (DEFTEST PACKAGE-NICKNAMES.3 (PROGN (SET-UP-PACKAGES) (PACKAGE-NICKNAMES (QUOTE :A))) ("Q"))
;; Loading (DEFTEST PACKAGE-NICKNAMES.4 (PROGN (SET-UP-PACKAGES) (PACKAGE-NICKNAMES "B")) NIL)
;; Loading (DEFTEST PACKAGE-NICKNAMES.5 (PROGN (SET-UP-PACKAGES) (PACKAGE-NICKNAMES #\B)) NIL)
;; Loading (DEFTEST PACKAGE-NICKNAMES.6 (PROGN (SET-UP-PACKAGES) (PACKAGE-NICKNAMES (QUOTE #:B))) NIL)
;; Loading (DEFTEST PACKAGE-NICKNAMES.7 (SUBSETP (QUOTE ("CL")) (PACKAGE-NICKNAMES "COMMON-LISP") :TEST (FUNCTION STRING=)) T)
;; Loading (DEFTEST PACKAGE-NICKNAMES.8 (NOTNOT (SUBSETP (QUOTE ("CL-USER")) (PACKAGE-NICKNAMES "COMMON-LISP-USER") :TEST (FUNCTION STRING=))) T)
;; Loading (DEFTEST PACKAGE-NICKNAMES.9 (SIGNALS-ERROR (PACKAGE-NICKNAMES 10) TYPE-ERROR) T)
;; Loading (DEFTEST PACKAGE-NICKNAMES.9A (SIGNALS-ERROR (LOCALLY (PACKAGE-NICKNAMES 10) T) TYPE-ERROR) T)
;; Loading (DEFTEST PACKAGE-NICKNAMES.10 (PROGN (SET-UP-PACKAGES) (PACKAGE-NICKNAMES (FIND-PACKAGE "A"))) ("Q"))
;; Loading (DEFTEST PACKAGE-NICKNAMES.11 (HANDLER-CASE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (EVAL (QUOTE (PACKAGE-NICKNAMES "NOT-A-PACKAGE-NAME"))) NIL) (TYPE-ERROR NIL T) (PACKAGE-ERROR NIL T)) T)
;; Loading (DEFTEST PACKAGE-NICKNAMES.12 (LOOP FOR P IN (LIST-ALL-PACKAGES) SUM (LOOP FOR NK IN (PACKAGE-NICKNAMES P) COUNT (NOT (AND (STRINGP NK) (EQT P (FIND-PACKAGE NK)))))) 0)
;; Loading (DEFMACRO DEF-PACKAGE-NICKNAMES-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (LET ((P (MAKE-PACKAGE NAME :USE NIL))) (PACKAGE-NICKNAMES P))) NIL)))
;; Loading (DEF-PACKAGE-NICKNAMES-TEST PACKAGE-NICKNAMES.16 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-NICKNAMES-TEST PACKAGE-NICKNAMES.17 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????"))
;; Loading (DEF-PACKAGE-NICKNAMES-TEST PACKAGE-NICKNAMES.18 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????"))
;; Loading (DEF-PACKAGE-NICKNAMES-TEST PACKAGE-NICKNAMES.19 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-NICKNAMES-TEST PACKAGE-NICKNAMES.20 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-NICKNAMES-TEST PACKAGE-NICKNAMES.21 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEF-PACKAGE-NICKNAMES-TEST PACKAGE-NICKNAMES.22 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEFTEST PACKAGE-NICKNAMES.ERROR.1 (SIGNALS-ERROR (PACKAGE-NICKNAMES) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGE-NICKNAMES.ERROR.2 (SIGNALS-ERROR (PACKAGE-NICKNAMES "CL" NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGE-NICKNAMES.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION PACKAGE-NICKNAMES) (FUNCTION PACKAGE-DESIGNATOR-P)) NIL)
;; Loading (LOAD "intern.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/intern.lsp C187C4A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST INTERN.1 (PROGN (SAFELY-DELETE-PACKAGE "TEMP1") (LET ((P (MAKE-PACKAGE "TEMP1" :USE NIL)) (I 0) X Y) (MULTIPLE-VALUE-BIND* (SYM1 STATUS1) (FIND-SYMBOL "FOO" P) (INTERN (PROGN (SETF X (INCF I)) "FOO") (PROGN (SETF Y (INCF I)) P)) (MULTIPLE-VALUE-BIND* (SYM2 STATUS2) (FIND-SYMBOL "FOO" P) (AND (EQL I 2) (EQL X 1) (EQL Y 2) (NULL SYM1) (NULL STATUS1) (STRING= (SYMBOL-NAME SYM2) "FOO") (EQT (SYMBOL-PACKAGE SYM2) P) (EQT STATUS2 :INTERNAL) (PROGN (DELETE-PACKAGE P) T)))))) T)
;; Loading (DEFTEST INTERN.2 (PROGN (SAFELY-DELETE-PACKAGE "TEMP1") (LET ((P (MAKE-PACKAGE "TEMP1" :USE NIL))) (MULTIPLE-VALUE-BIND* (SYM1 STATUS1) (FIND-SYMBOL "FOO" "TEMP1") (INTERN "FOO" "TEMP1") (MULTIPLE-VALUE-BIND* (SYM2 STATUS2) (FIND-SYMBOL "FOO" P) (AND (NULL SYM1) (NULL STATUS1) (STRING= (SYMBOL-NAME SYM2) "FOO") (EQT (SYMBOL-PACKAGE SYM2) P) (EQT STATUS2 :INTERNAL) (PROGN (DELETE-PACKAGE P) T)))))) T)
;; Loading (DEFTEST INTERN.3 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((CL-USER-PACKAGE (FIND-PACKAGE "CL-USER"))) (EQT (INTERN "" CL-USER-PACKAGE) (INTERN (MAKE-ARRAY 0 :ELEMENT-TYPE NIL) CL-USER-PACKAGE))) T)
;; Loading (DEFTEST INTERN.4 (LET ((CL-USER-PACKAGE (FIND-PACKAGE "CL-USER"))) (EQT (INTERN (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "XYZZY") CL-USER-PACKAGE) (INTERN (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "XYZZY") CL-USER-PACKAGE))) T)
;; Loading (DEFMACRO DEF-INTERN-TEST (TEST-NAME &KEY (SYMBOL-NAME "FOO") (PACKAGE-NAME "TEMP1")) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((SNAME (SYSTEM.INTERNALS::BQ-COMMA SYMBOL-NAME)) (PNAME (SYSTEM.INTERNALS::BQ-COMMA PACKAGE-NAME))) (SAFELY-DELETE-PACKAGE PNAME) (LET ((P (MAKE-PACKAGE PNAME :USE NIL))) (MULTIPLE-VALUE-BIND* (SYM1 STATUS1) (FIND-SYMBOL SNAME PNAME) (INTERN SNAME PNAME) (MULTIPLE-VALUE-BIND* (SYM2 STATUS2) (FIND-SYMBOL SNAME P) (AND (NULL SYM1) (NULL STATUS1) (STRING= (SYMBOL-NAME SYM2) SNAME) (EQT (SYMBOL-PACKAGE SYM2) P) (EQT STATUS2 :INTERNAL) (PROGN (DELETE-PACKAGE P) T)))))) T)))
;; Loading (DEF-INTERN-TEST INTERN.5 :SYMBOL-NAME (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "BAR"))
;; Loading (DEF-INTERN-TEST INTERN.6 :SYMBOL-NAME (MAKE-ARRAY 13 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 3 :INITIAL-CONTENTS "BAR1234567890"))
;; Loading (DEF-INTERN-TEST INTERN.7 :SYMBOL-NAME (MAKE-ARRAY 13 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3 :INITIAL-CONTENTS "BAR1234567890"))
;; Loading (DEF-INTERN-TEST INTERN.8 :SYMBOL-NAME (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "BAR"))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-INTERN-TEST INTERN.9 :SYMBOL-NAME (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "BAR"))
;; Loading (DEF-INTERN-TEST INTERN.10 :SYMBOL-NAME (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 8 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XBARYYYY"))) (MAKE-ARRAY 3 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEF-INTERN-TEST INTERN.11 :SYMBOL-NAME (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 8 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XBARYYYY"))) (MAKE-ARRAY 3 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEF-INTERN-TEST INTERN.12 :PACKAGE-NAME (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "BAR"))
;; Loading (DEF-INTERN-TEST INTERN.13 :PACKAGE-NAME (MAKE-ARRAY 13 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 3 :INITIAL-CONTENTS "BAR1234567890"))
;; Loading (DEF-INTERN-TEST INTERN.14 :PACKAGE-NAME (MAKE-ARRAY 13 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3 :INITIAL-CONTENTS "BAR1234567890"))
;; Loading (DEF-INTERN-TEST INTERN.15 :PACKAGE-NAME (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "BAR"))
;; Loading (DEF-INTERN-TEST INTERN.16 :PACKAGE-NAME (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "BAR"))
;; Loading (DEF-INTERN-TEST INTERN.17 :PACKAGE-NAME (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 8 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XBARYYYY"))) (MAKE-ARRAY 3 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEF-INTERN-TEST INTERN.18 :PACKAGE-NAME (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 8 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XBARYYYY"))) (MAKE-ARRAY 3 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEFTEST INTERN.ERROR.1 (SIGNALS-ERROR (INTERN) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERN.ERROR.2 (SIGNALS-ERROR (INTERN "X" "CL" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "export.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/export.lsp 81142CE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST EXPORT.1 (LET ((RETURN-VALUE NIL)) (SAFELY-DELETE-PACKAGE "TEST1") (LET ((P (MAKE-PACKAGE "TEST1"))) (LET ((SYM (INTERN "FOO" P)) (I 0) X Y) (SETF RETURN-VALUE (EXPORT (PROGN (SETF X (INCF I)) SYM) (PROGN (SETF Y (INCF I)) P))) (MULTIPLE-VALUE-BIND* (SYM2 STATUS) (FIND-SYMBOL "FOO" P) (PROG1 (AND SYM2 (EQL I 2) (EQL X 1) (EQL Y 2) (EQT (SYMBOL-PACKAGE SYM2) P) (STRING= (SYMBOL-NAME SYM2) "FOO") (EQT SYM SYM2) (EQT STATUS :EXTERNAL)) (DELETE-PACKAGE P))))) RETURN-VALUE) T)
;; Loading (DEFTEST EXPORT.2 (PROGN (SAFELY-DELETE-PACKAGE "TEST1") (LET ((P (MAKE-PACKAGE "TEST1"))) (LET ((SYM (INTERN "FOO" P))) (EXPORT (LIST SYM) P) (MULTIPLE-VALUE-BIND* (SYM2 STATUS) (FIND-SYMBOL "FOO" P) (PROG1 (AND SYM2 (EQT (SYMBOL-PACKAGE SYM2) P) (STRING= (SYMBOL-NAME SYM2) "FOO") (EQT SYM SYM2) (EQT STATUS :EXTERNAL)) (DELETE-PACKAGE P)))))) T)
;; Loading (DEFTEST EXPORT.3 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE "F") (MAKE-PACKAGE "F") (LET ((SYM (INTERN "FOO" "F"))) (EXPORT SYM #\F) (DELETE-PACKAGE "F") T)) (ERROR (C) (SAFELY-DELETE-PACKAGE "F") C)) T)
;; Loading (DEFTEST EXPORT.4 (PROGN (SET-UP-PACKAGES) (HANDLER-CASE (EXPORT (QUOTE B:BAR) "A") (PACKAGE-ERROR NIL (QUOTE PACKAGE-ERROR)) (ERROR (C) C))) PACKAGE-ERROR)
;; Loading (DEFTEST EXPORT.5 (PROGN (SAFELY-DELETE-PACKAGE "TEST1") (SAFELY-DELETE-PACKAGE "TEST2") (MAKE-PACKAGE "TEST1") (MAKE-PACKAGE "TEST2" :USE (QUOTE ("TEST1"))) (EXPORT (INTERN "X" "TEST2") "TEST2") (PROG1 (HANDLER-CASE (LET ((SYM (INTERN "X" "TEST1"))) (HANDLER-CASE (EXPORT SYM "TEST1") (ERROR (C) (FORMAT T "Caught error in EXPORT.5: ~A~%" C) (QUOTE CAUGHT)))) (ERROR (C) C)) (DELETE-PACKAGE "TEST2") (DELETE-PACKAGE "TEST1"))) CAUGHT)
;; Loading (DEFTEST EXPORT.ERROR.1 (SIGNALS-ERROR (EXPORT) PROGRAM-ERROR) T)
;; Loading (DEFTEST EXPORT.ERROR.2 (SIGNALS-ERROR (EXPORT (QUOTE X) "CL-TEST" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "rename-package.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rename-package.lsp 811E0027>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST RENAME-PACKAGE.1 (BLOCK NIL (SAFELY-DELETE-PACKAGE "TEST1") (SAFELY-DELETE-PACKAGE "TEST2") (LET ((P (MAKE-PACKAGE "TEST1")) (I 0) X Y) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (RENAME-PACKAGE (PROGN (SETF X (INCF I)) "TEST1") (PROGN (SETF Y (INCF I)) "TEST2")))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (EQL I 2) (EQL X 1) (EQL Y 2) (EQUAL (PACKAGE-NAME P2) "TEST2")) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (SAFELY-DELETE-PACKAGE P2) T))) T)
;; Loading (DEFTEST RENAME-PACKAGE.2 (BLOCK NIL (SAFELY-DELETE-PACKAGE "TEST1") (SAFELY-DELETE-PACKAGE "TEST2") (SAFELY-DELETE-PACKAGE "TEST3") (SAFELY-DELETE-PACKAGE "TEST4") (SAFELY-DELETE-PACKAGE "TEST5") (LET ((P (MAKE-PACKAGE "TEST1")) (NICKNAMES (COPY-LIST (QUOTE ("TEST3" "TEST4" "TEST5"))))) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (RENAME-PACKAGE "TEST1" "TEST2" NICKNAMES))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (EQUAL (PACKAGE-NAME P2) "TEST2") (NULL (SET-EXCLUSIVE-OR NICKNAMES (PACKAGE-NICKNAMES P2) :TEST (FUNCTION EQUAL)))) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (SAFELY-DELETE-PACKAGE P2) T))) T)
;; Loading (DEFTEST RENAME-PACKAGE.3 (BLOCK NIL (SAFELY-DELETE-PACKAGE "TEST1") (SAFELY-DELETE-PACKAGE "TEST2") (LET ((P (MAKE-PACKAGE "TEST1")) (NICKNAMES (COPY-LIST (QUOTE (#\M #\N))))) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (IGNORE-ERRORS (RENAME-PACKAGE "TEST1" "TEST2" NICKNAMES)))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (EQUAL (PACKAGE-NAME P2) "TEST2") (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES P2)) (FUNCTION STRING<)) (SORT (MAPCAR (FUNCTION (LAMBDA (C) (MAKE-STRING 1 :INITIAL-ELEMENT C))) NICKNAMES) (FUNCTION STRING<)))) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (SAFELY-DELETE-PACKAGE P2) T))) T)
;; Loading (DEFTEST RENAME-PACKAGE.4 (BLOCK NIL (SAFELY-DELETE-PACKAGE "G") (SAFELY-DELETE-PACKAGE "TEST2") (LET ((P (MAKE-PACKAGE "G")) (NICKNAMES NIL)) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (IGNORE-ERRORS (RENAME-PACKAGE #\G "TEST2" NICKNAMES)))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (EQUAL (PACKAGE-NAME P2) "TEST2") (NULL (SET-EXCLUSIVE-OR NICKNAMES (PACKAGE-NICKNAMES P2) :TEST (FUNCTION EQUAL)))) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (IGNORE-ERRORS (SAFELY-DELETE-PACKAGE P2)) T))) T)
;; Loading (DEFTEST RENAME-PACKAGE.5 (BLOCK NIL (SAFELY-DELETE-PACKAGE "TEST1") (SAFELY-DELETE-PACKAGE "G") (LET ((P (MAKE-PACKAGE "TEST1")) (NICKNAMES NIL)) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (IGNORE-ERRORS (RENAME-PACKAGE "TEST1" #\G NICKNAMES)))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (EQUAL (PACKAGE-NAME P2) "G") (NULL (SET-EXCLUSIVE-OR NICKNAMES (PACKAGE-NICKNAMES P2) :TEST (FUNCTION EQUAL)))) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (SAFELY-DELETE-PACKAGE P2) T))) T)
;; Loading (DEFTEST RENAME-PACKAGE.6 (BLOCK NIL (SAFELY-DELETE-PACKAGE (QUOTE TEST1)) (SAFELY-DELETE-PACKAGE (QUOTE TEST2)) (SAFELY-DELETE-PACKAGE (QUOTE M)) (SAFELY-DELETE-PACKAGE (QUOTE N)) (LET ((P (MAKE-PACKAGE (QUOTE TEST1))) (NICKNAMES (COPY-LIST (QUOTE (M N))))) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (IGNORE-ERRORS (RENAME-PACKAGE (QUOTE TEST1) (QUOTE TEST2) NICKNAMES)))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (EQUAL (PACKAGE-NAME P2) "TEST2") (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES P2)) (FUNCTION STRING<)) (SORT (MAPCAR (FUNCTION SYMBOL-NAME) NICKNAMES) (FUNCTION STRING<)))) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (SAFELY-DELETE-PACKAGE P2) T))) T)
;; Loading (DEFTEST RENAME-PACKAGE.7 (BLOCK NIL (LET ((NAME1 (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "TEST1")) (NAME2 (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "TEST2"))) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2) (LET ((P (MAKE-PACKAGE NAME1))) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (RENAME-PACKAGE NAME1 NAME2))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (EQUAL (PACKAGE-NAME P2) NAME2)) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (SAFELY-DELETE-PACKAGE P2) T)))) T)
;; Loading (DEFTEST RENAME-PACKAGE.8 (BLOCK NIL (LET ((NAME1 (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1     ")) (NAME2 (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST2XXXX"))) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2) (LET ((P (MAKE-PACKAGE "TEST1"))) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (RENAME-PACKAGE NAME1 NAME2))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (STRING= (PACKAGE-NAME P2) "TEST2")) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (SAFELY-DELETE-PACKAGE P2) T)))) T)
;; Loading (DEFTEST RENAME-PACKAGE.9 (BLOCK NIL (LET ((NAME1 (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1")) (NAME2 (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "TEST2"))) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2) (LET ((P (MAKE-PACKAGE "TEST1"))) (UNLESS (PACKAGEP P) (RETURN NIL)) (LET ((P2 (RENAME-PACKAGE NAME1 NAME2))) (UNLESS (PACKAGEP P2) (SAFELY-DELETE-PACKAGE P) (RETURN P2)) (UNLESS (AND (EQT P P2) (STRING= (PACKAGE-NAME P2) "TEST2")) (SAFELY-DELETE-PACKAGE P) (SAFELY-DELETE-PACKAGE P2) (RETURN NIL)) (SAFELY-DELETE-PACKAGE P2) T)))) T)
;; Loading (DEFTEST RENAME-PACKAGE.ERROR.1 (SIGNALS-ERROR (RENAME-PACKAGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST RENAME-PACKAGE.ERROR.2 (SIGNALS-ERROR (RENAME-PACKAGE "CL") PROGRAM-ERROR) T)
;; Loading (DEFTEST RENAME-PACKAGE.ERROR.3 (SIGNALS-ERROR (RENAME-PACKAGE "A" "XXXXX" NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "shadow.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/shadow.lsp 8136D147>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST SHADOW.1 (PROG1 (PROGN (SAFELY-DELETE-PACKAGE "TEST5") (SAFELY-DELETE-PACKAGE "TEST4") (HANDLER-CASE (LET* ((P1 (PROG1 (MAKE-PACKAGE "TEST4" :USE NIL) (EXPORT (INTERN "A" "TEST4") "TEST4"))) (P2 (MAKE-PACKAGE "TEST5" :USE (QUOTE ("TEST4")))) (R1 (PACKAGE-SHADOWING-SYMBOLS "TEST4")) (R2 (PACKAGE-SHADOWING-SYMBOLS "TEST5"))) (MULTIPLE-VALUE-BIND* (S1 KIND1) (FIND-SYMBOL "A" P1) (MULTIPLE-VALUE-BIND* (S2 KIND2) (FIND-SYMBOL "A" P2) (LET ((R3 (SHADOW "A" P2))) (MULTIPLE-VALUE-BIND* (S3 KIND3) (FIND-SYMBOL "A" P2) (LIST (PACKAGE-NAME P1) (PACKAGE-NAME P2) R1 R2 (SYMBOL-NAME S1) (PACKAGE-NAME (SYMBOL-PACKAGE S1)) KIND1 (SYMBOL-NAME S2) (PACKAGE-NAME (SYMBOL-PACKAGE S2)) KIND2 R3 (SYMBOL-NAME S3) (PACKAGE-NAME (SYMBOL-PACKAGE S3)) KIND3)))))) (ERROR (C) C))) (SAFELY-DELETE-PACKAGE "TEST5") (SAFELY-DELETE-PACKAGE "TEST4")) ("TEST4" "TEST5" NIL NIL "A" "TEST4" :EXTERNAL "A" "TEST4" :INHERITED T "A" "TEST5" :INTERNAL))
;; Loading (DEFTEST SHADOW.2 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (HANDLER-CASE (LET* ((P1 (PROG1 (MAKE-PACKAGE "G" :USE NIL) (EXPORT (INTERN "A" "G") "G"))) (P2 (MAKE-PACKAGE "H" :USE (QUOTE ("G")))) (R1 (PACKAGE-SHADOWING-SYMBOLS "G")) (R2 (PACKAGE-SHADOWING-SYMBOLS "H"))) (MULTIPLE-VALUE-BIND* (S1 KIND1) (FIND-SYMBOL "A" P1) (MULTIPLE-VALUE-BIND* (S2 KIND2) (FIND-SYMBOL "A" P2) (LET ((R3 (SHADOW "A" "H"))) (MULTIPLE-VALUE-BIND* (S3 KIND3) (FIND-SYMBOL "A" P2) (PROG1 (LIST (PACKAGE-NAME P1) (PACKAGE-NAME P2) R1 R2 (SYMBOL-NAME S1) (PACKAGE-NAME (SYMBOL-PACKAGE S1)) KIND1 (SYMBOL-NAME S2) (PACKAGE-NAME (SYMBOL-PACKAGE S2)) KIND2 R3 (SYMBOL-NAME S3) (PACKAGE-NAME (SYMBOL-PACKAGE S3)) KIND3) (SAFELY-DELETE-PACKAGE P2) (SAFELY-DELETE-PACKAGE P1))))))) (ERROR (C) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") C))) ("G" "H" NIL NIL "A" "G" :EXTERNAL "A" "G" :INHERITED T "A" "H" :INTERNAL))
;; Loading (DEFTEST SHADOW.3 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (HANDLER-CASE (LET* ((P1 (PROG1 (MAKE-PACKAGE "G" :USE NIL) (EXPORT (INTERN "A" "G") "G"))) (P2 (MAKE-PACKAGE "H" :USE (QUOTE ("G")))) (R1 (PACKAGE-SHADOWING-SYMBOLS "G")) (R2 (PACKAGE-SHADOWING-SYMBOLS "H"))) (MULTIPLE-VALUE-BIND* (S1 KIND1) (FIND-SYMBOL "A" P1) (MULTIPLE-VALUE-BIND* (S2 KIND2) (FIND-SYMBOL "A" P2) (LET ((R3 (SHADOW "A" #\H))) (MULTIPLE-VALUE-BIND* (S3 KIND3) (FIND-SYMBOL "A" P2) (PROG1 (LIST (PACKAGE-NAME P1) (PACKAGE-NAME P2) R1 R2 (SYMBOL-NAME S1) (PACKAGE-NAME (SYMBOL-PACKAGE S1)) KIND1 (SYMBOL-NAME S2) (PACKAGE-NAME (SYMBOL-PACKAGE S2)) KIND2 R3 (SYMBOL-NAME S3) (PACKAGE-NAME (SYMBOL-PACKAGE S3)) KIND3) (SAFELY-DELETE-PACKAGE P2) (SAFELY-DELETE-PACKAGE P1))))))) (ERROR (C) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") C))) ("G" "H" NIL NIL "A" "G" :EXTERNAL "A" "G" :INHERITED T "A" "H" :INTERNAL))
;; Loading (DEFTEST SHADOW.4 (PROG1 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (LET ((S1 (INTERN "X" :G))) (SHADOW "X" :G) (MULTIPLE-VALUE-BIND* (S2 KIND) (FIND-SYMBOL "X" :G) (LIST (EQT S1 S2) (SYMBOL-NAME S2) (PACKAGE-NAME (SYMBOL-PACKAGE S2)) KIND)))) (ERROR (C) C)) (SAFELY-DELETE-PACKAGE "G")) (T "X" "G" :INTERNAL))
;; Loading (DEFTEST SHADOW.5 (PROG1 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE :H) (SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (EXPORT (INTERN "X" :G) :G) (MAKE-PACKAGE :H :USE (QUOTE ("G"))) (SHADOW "X" :H) (MULTIPLE-VALUE-BIND* (S1 KIND1) (FIND-SYMBOL "X" :H) (SHADOW "X" :H) (MULTIPLE-VALUE-BIND* (S2 KIND2) (FIND-SYMBOL "X" :H) (LIST (EQT S1 S2) KIND1 KIND2)))) (ERROR (C) C)) (SAFELY-DELETE-PACKAGE :H) (SAFELY-DELETE-PACKAGE :G)) (T :INTERNAL :INTERNAL))
;; Loading (DEFTEST SHADOW.6 (PROG1 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (SHADOW (QUOTE ("X" "Y" Z)) :G) (LET ((RESULTS (APPEND (MULTIPLE-VALUE-LIST (FIND-SYMBOL "X" :G)) (MULTIPLE-VALUE-LIST (FIND-SYMBOL "Y" :G)) (MULTIPLE-VALUE-LIST (FIND-SYMBOL "Z" :G)) NIL))) (LIST (SYMBOL-NAME (FIRST RESULTS)) (SECOND RESULTS) (SYMBOL-NAME (THIRD RESULTS)) (FOURTH RESULTS) (SYMBOL-NAME (FIFTH RESULTS)) (SIXTH RESULTS) (LENGTH (PACKAGE-SHADOWING-SYMBOLS :G))))) (ERROR (C) C)) (SAFELY-DELETE-PACKAGE :G)) ("X" :INTERNAL "Y" :INTERNAL "Z" :INTERNAL 3))
;; Loading (DEFTEST SHADOW.7 (PROG1 (HANDLER-CASE (LET ((I 0) X Y) (SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (SHADOW (PROGN (SETF X (INCF I)) (QUOTE (#\X #\Y))) (PROGN (SETF Y (INCF I)) :G)) (LET ((RESULTS (APPEND (MULTIPLE-VALUE-LIST (FIND-SYMBOL "X" :G)) (MULTIPLE-VALUE-LIST (FIND-SYMBOL "Y" :G)) NIL))) (LIST I X Y (SYMBOL-NAME (FIRST RESULTS)) (SECOND RESULTS) (SYMBOL-NAME (THIRD RESULTS)) (FOURTH RESULTS) (LENGTH (PACKAGE-SHADOWING-SYMBOLS :G))))) (ERROR (C) C)) (SAFELY-DELETE-PACKAGE :G)) (2 1 2 "X" :INTERNAL "Y" :INTERNAL 2))
;; Loading (DEFTEST SHADOW.8 (PROG1 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (LET* ((NAME (MAKE-ARRAY (QUOTE (1)) :INITIAL-CONTENTS "X" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S1 (INTERN NAME :G))) (SHADOW NAME :G) (MULTIPLE-VALUE-BIND* (S2 KIND) (FIND-SYMBOL "X" :G) (LIST (EQT S1 S2) (SYMBOL-NAME S2) (PACKAGE-NAME (SYMBOL-PACKAGE S2)) KIND)))) (ERROR (C) C)) (SAFELY-DELETE-PACKAGE "G")) (T "X" "G" :INTERNAL))
;; Loading (DEFTEST SHADOW.9 (PROG1 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (LET* ((NAME (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS "XYZ" :FILL-POINTER 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (S1 (INTERN NAME :G))) (SHADOW NAME :G) (MULTIPLE-VALUE-BIND* (S2 KIND) (FIND-SYMBOL "X" :G) (LIST (EQT S1 S2) (SYMBOL-NAME S2) (PACKAGE-NAME (SYMBOL-PACKAGE S2)) KIND)))) (ERROR (C) C)) (SAFELY-DELETE-PACKAGE "G")) (T "X" "G" :INTERNAL))
;; Loading (DEFTEST SHADOW.10 (PROG1 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (LET* ((NAME (MAKE-ARRAY (QUOTE (1)) :INITIAL-CONTENTS "X" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S1 (INTERN NAME :G))) (SHADOW NAME :G) (MULTIPLE-VALUE-BIND* (S2 KIND) (FIND-SYMBOL "X" :G) (LIST (EQT S1 S2) (SYMBOL-NAME S2) (PACKAGE-NAME (SYMBOL-PACKAGE S2)) KIND)))) (ERROR (C) C)) (SAFELY-DELETE-PACKAGE "G")) (T "X" "G" :INTERNAL))
;; Loading (DEFTEST SHADOW.ERROR.1 (SIGNALS-ERROR (SHADOW) PROGRAM-ERROR) T)
;; Loading (DEFTEST SHADOW.ERROR.2 (SIGNALS-ERROR (SHADOW "X" "CL-USER" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "shadowing-import.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/shadowing-import.lsp 81521CA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SHADOWING-IMPORT.1 (LET ((NAME1 "TEST1") (NAME2 "TEST2")) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2) (PROG1 (LET* ((P1 (MAKE-PACKAGE NAME1 :USE NIL)) (P2 (MAKE-PACKAGE NAME2)) (S1 (INTERN "X" P1)) (S2 (INTERN "X" P2))) (LIST (EQT S1 S2) (EQT (FIND-SYMBOL "X" P2) S2) (SHADOWING-IMPORT S1 P2) (EQUALT (PACKAGE-SHADOWING-SYMBOLS P2) (LIST S1)) (EQT (FIND-SYMBOL "X" P2) S1))) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2))) (NIL T T T T))
;; Loading (DEFTEST SHADOWING-IMPORT.2 (LET ((NAME1 "TEST1") (NAME2 "TEST2")) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2) (PROG1 (LET* ((P1 (MAKE-PACKAGE NAME1 :USE NIL)) (P2 (MAKE-PACKAGE NAME2)) (S1 (INTERN "X" P1))) (LIST (FIND-SYMBOL "X" P2) (SHADOWING-IMPORT S1 P2) (EQUALT (PACKAGE-SHADOWING-SYMBOLS P2) (LIST S1)) (EQT (FIND-SYMBOL "X" P2) S1))) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2))) (NIL T T T))
;; Loading (DEFTEST SHADOWING-IMPORT.3 (LET ((NAME1 "TEST1") (NAME2 "TEST2")) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2) (PROG1 (LET* ((P1 (MAKE-PACKAGE NAME1 :USE NIL)) (P2 (MAKE-PACKAGE NAME2 :USE NIL)) (S1 (INTERN "X" P1)) (S2 (INTERN "X" P2))) (LIST (EQT S1 S2) (EQT (FIND-SYMBOL "X" P2) S2) (LET ((*PACKAGE* P2)) (SHADOWING-IMPORT S1)) (EQUALT (PACKAGE-SHADOWING-SYMBOLS P2) (LIST S1)) (EQT (FIND-SYMBOL "X" P2) S1))) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2))) (NIL T T T T))
;; Loading (DEFTEST SHADOWING-IMPORT.4 (LET ((NAME1 "TEST1") (NAME2 "TEST2") (NAME3 "TEST3")) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME2) (SAFELY-DELETE-PACKAGE NAME3) (PROG1 (LET* ((P1 (MAKE-PACKAGE NAME1 :USE NIL)) (P3 (MAKE-PACKAGE NAME2 :USE NIL)) (P2 (MAKE-PACKAGE NAME3 :USE (LIST P3))) (S1 (INTERN "X" P1)) (S2 (INTERN "X" P3))) (EXPORT S2 P3) (LIST (EQT S1 S2) (EQT (FIND-SYMBOL "X" P2) S2) (SHADOWING-IMPORT S1 P2) (EQUALT (PACKAGE-SHADOWING-SYMBOLS P2) (LIST S1)) (EQT (FIND-SYMBOL "X" P2) S1))) (SAFELY-DELETE-PACKAGE NAME1) (SAFELY-DELETE-PACKAGE NAME3) (SAFELY-DELETE-PACKAGE NAME2))) (NIL T T T T))
;; Loading (DEFMACRO DEF-SHADOWING-IMPORT-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME1 (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME1) (PROG1 (LET* ((P1 (MAKE-PACKAGE NAME1 :USE NIL))) (LIST (FIND-SYMBOL "T" P1) (SHADOWING-IMPORT T NAME1) (PACKAGE-SHADOWING-SYMBOLS P1) (FIND-SYMBOL "T" P1))) (SAFELY-DELETE-PACKAGE NAME1))) (NIL T (T) T))))
;; Loading (DEF-SHADOWING-IMPORT-TEST SHADOWING-IMPORT.5 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-SHADOWING-IMPORT-TEST SHADOWING-IMPORT.6 (MAKE-ARRAY (QUOTE (7)) :INITIAL-CONTENTS "TEST1XX" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-SHADOWING-IMPORT-TEST SHADOWING-IMPORT.7 (MAKE-ARRAY (QUOTE (7)) :INITIAL-CONTENTS "TEST1XX" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-SHADOWING-IMPORT-TEST SHADOWING-IMPORT.8 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-SHADOWING-IMPORT-TEST SHADOWING-IMPORT.9 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-SHADOWING-IMPORT-TEST SHADOWING-IMPORT.10 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME2 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "ABTEST1CDE" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME2 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEF-SHADOWING-IMPORT-TEST SHADOWING-IMPORT.11 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME2 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "ABTEST1CDE" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME2 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEFTEST SHADOWING-IMPORT.ERROR.1 (SIGNALS-ERROR (SHADOWING-IMPORT) PROGRAM-ERROR) T)
;; Loading (DEFTEST SHADOWING-IMPORT.ERROR.2 (SIGNALS-ERROR (SHADOWING-IMPORT NIL *PACKAGE* NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "delete-package.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/delete-package.lsp 816744B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST DELETE-PACKAGE.1 (PROGN (SAFELY-DELETE-PACKAGE :TEST1) (LET ((P (MAKE-PACKAGE :TEST1 :USE NIL))) (LIST (NOTNOT (DELETE-PACKAGE :TEST1)) (NOTNOT (PACKAGEP P)) (PACKAGE-NAME P)))) (T T NIL))
;; Loading (DEFTEST DELETE-PACKAGE.2 (PROGN (SAFELY-DELETE-PACKAGE :TEST1) (LET ((P (MAKE-PACKAGE :TEST1 :USE NIL))) (LIST (NOTNOT (DELETE-PACKAGE :TEST1)) (NOTNOT (PACKAGEP P)) (DELETE-PACKAGE P)))) (T T NIL))
;; Loading (DEFTEST DELETE-PACKAGE.3 (PROGN (SAFELY-DELETE-PACKAGE "X") (MAKE-PACKAGE "X") (HANDLER-CASE (NOTNOT (DELETE-PACKAGE "X")) (ERROR (C) C))) T)
;; Loading (DEFTEST DELETE-PACKAGE.4 (PROGN (SAFELY-DELETE-PACKAGE "X") (MAKE-PACKAGE "X") (HANDLER-CASE (NOTNOT (DELETE-PACKAGE #\X)) (ERROR (C) C))) T)
;; Loading (DEFTEST DELETE-PACKAGE.5 (PROG (P1 S1 P2 S2 P3) (DECLARE (IGNORABLE P1 P2 P3 S1 S2)) (SAFELY-DELETE-PACKAGE "P3") (SAFELY-DELETE-PACKAGE "P2") (SAFELY-DELETE-PACKAGE "P1") (SETQ P1 (MAKE-PACKAGE "P1" :USE NIL)) (SETQ S1 (INTERN "S1" P1)) (EXPORT S1 "P1") (SETQ P2 (MAKE-PACKAGE "P2" :USE (QUOTE ("P1")))) (SETQ S2 (INTERN "S2" P2)) (EXPORT S1 P2) (EXPORT S2 "P2") (SETF P3 (MAKE-PACKAGE "P3" :USE (QUOTE ("P2")))) (LET ((OUTER-RESTARTS (COMPUTE-RESTARTS))) (HANDLER-BIND ((PACKAGE-ERROR (FUNCTION (LAMBDA (C) (LET ((MY-RESTARTS (REMOVE (QUOTE ABORT) (SET-DIFFERENCE (COMPUTE-RESTARTS C) OUTER-RESTARTS) :KEY (FUNCTION RESTART-NAME)))) (ASSERT MY-RESTARTS) (WHEN (FIND (QUOTE CONTINUE) MY-RESTARTS :KEY (FUNCTION RESTART-NAME)) (CONTINUE C)) (RETURN T)))))) (DELETE-PACKAGE P2))) (UNLESS (AND (EQUAL (PACKAGE-NAME P1) "P1") (NULL (PACKAGE-NAME P2)) (EQUAL (PACKAGE-NAME P3) "P3")) (RETURN (QUOTE FAIL1))) (UNLESS (EQT (SYMBOL-PACKAGE S1) P1) (RETURN (QUOTE FAIL2))) (UNLESS (EQUAL (PRIN1-TO-STRING S1) "P1:S1") (RETURN (QUOTE FAIL3))) (UNLESS (EQUAL (MULTIPLE-VALUE-LIST (FIND-SYMBOL "S1" P3)) (QUOTE (NIL NIL))) (RETURN (QUOTE FAIL4))) (UNLESS (EQUAL (MULTIPLE-VALUE-LIST (FIND-SYMBOL "S2" P3)) (QUOTE (NIL NIL))) (RETURN (QUOTE FAIL5))) (UNLESS (AND (NULL (PACKAGE-USED-BY-LIST P1)) (NULL (PACKAGE-USED-BY-LIST P3))) (RETURN (QUOTE FAIL6))) (UNLESS (AND (PACKAGEP P1) (PACKAGEP P2) (PACKAGEP P3)) (RETURN (QUOTE FAIL7))) (UNLESS (AND (NULL (PACKAGE-USE-LIST P1)) (NULL (PACKAGE-USE-LIST P3))) (RETURN (QUOTE FAIL8))) (SAFELY-DELETE-PACKAGE P3) (SAFELY-DELETE-PACKAGE P1) (RETURN T)) T)
;; Loading (DEFTEST DELETE-PACKAGE.6 (BLOCK DONE (LET ((OUTER-RESTARTS (COMPUTE-RESTARTS))) (SAFELY-DELETE-PACKAGE "TEST-20") (HANDLER-BIND ((PACKAGE-ERROR (FUNCTION (LAMBDA (C) (ASSERT (SET-DIFFERENCE (COMPUTE-RESTARTS C) OUTER-RESTARTS)) (RETURN-FROM DONE :GOOD))))) (DELETE-PACKAGE "TEST-20")))) :GOOD)
;; Loading (DEFMACRO DEF-DELETE-PACKAGE-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (LET ((P (MAKE-PACKAGE NAME :USE NIL))) (LIST (NOTNOT (DELETE-PACKAGE :TEST1)) (NOTNOT (PACKAGEP P)) (PACKAGE-NAME P)))) (T T NIL))))
;; Loading (DEF-DELETE-PACKAGE-TEST DELETE-PACKAGE.7 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-DELETE-PACKAGE-TEST DELETE-PACKAGE.8 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "TEST1XXXXX" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-DELETE-PACKAGE-TEST DELETE-PACKAGE.9 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "TEST1XXXXX" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-DELETE-PACKAGE-TEST DELETE-PACKAGE.10 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-DELETE-PACKAGE-TEST DELETE-PACKAGE.11 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-DELETE-PACKAGE-TEST DELETE-PACKAGE.12 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME2 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "XXXTEST1YY" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO NAME2 :DISPLACED-INDEX-OFFSET 3 :ELEMENT-TYPE ETYPE)))
;; Loading (DEF-DELETE-PACKAGE-TEST DELETE-PACKAGE.13 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME2 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "XXXTEST1YY" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY (QUOTE (5)) :DISPLACED-TO NAME2 :DISPLACED-INDEX-OFFSET 3 :ELEMENT-TYPE ETYPE)))
;; Loading (DEFTEST DELETE-PACKAGE.ERROR.1 (SIGNALS-ERROR (DELETE-PACKAGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-PACKAGE.ERROR.2 (PROGN (UNLESS (FIND-PACKAGE "TEST-DPE2") (MAKE-PACKAGE "TEST-DPE2" :USE NIL)) (SIGNALS-ERROR (DELETE-PACKAGE "TEST-DPE2" NIL) PROGRAM-ERROR)) T)
;; Loading (LOAD "make-package.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-package.lsp C10D03E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST MAKE-PACKAGE.1 (PROGN (SAFELY-DELETE-PACKAGE "TEST1") (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1")))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.2 (PROGN (SAFELY-DELETE-PACKAGE (QUOTE #:TEST1)) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE (QUOTE #:TEST1))))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.3 (PROGN (SAFELY-DELETE-PACKAGE #\X) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE #\X)))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "X") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.4 (PROGN (SAFELY-DELETE-PACKAGE "TEST1") (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE NIL)))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) NIL) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.5 (PROGN (SAFELY-DELETE-PACKAGE (QUOTE #:TEST1)) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE (QUOTE #:TEST1) :USE NIL)))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) NIL) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.6 (PROGN (SAFELY-DELETE-PACKAGE #\X) (LET ((P (MAKE-PACKAGE #\X))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "X") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.7 (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE "TEST1") (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (QUOTE ("A")))))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.7A (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE "TEST1") (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (QUOTE (#:A)))))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.7B (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE "TEST1") (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (QUOTE (#\A)))))) (PROG1 (AND (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T)
;; Loading (DEFTEST MAKE-PACKAGE.8 (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE (QUOTE #:TEST1)) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE (QUOTE #:TEST1) :USE (QUOTE ("A")))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.8A (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE (QUOTE #:TEST1)) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE (QUOTE #:TEST1) :USE (QUOTE (#:A)))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.8B (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE (QUOTE #:TEST1)) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE (QUOTE #:TEST1) :USE (QUOTE (#\A)))))) (MULTIPLE-VALUE-PROG1 (VALUES (PACKAGEP P) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.9 (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE #\X) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE #\X :USE (QUOTE ("A")))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "X") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.9A (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE #\X) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE #\X :USE (QUOTE (#:A)))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "X") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.9B (PROGN (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE #\X) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE #\X :USE (QUOTE (#\A)))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "X") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.10 (PROGN (MAPC (FUNCTION SAFELY-DELETE-PACKAGE) (QUOTE ("TEST1" "F"))) (LET ((P (MAKE-PACKAGE "TEST1" :NICKNAMES (QUOTE ("F"))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) (QUOTE ("F"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.11 (PROGN (MAPC (FUNCTION SAFELY-DELETE-PACKAGE) (QUOTE ("TEST1" "G"))) (LET ((P (MAKE-PACKAGE (QUOTE #:TEST1) :NICKNAMES (QUOTE (#:G))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) (QUOTE ("G"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.12 (PROGN (MAPC (FUNCTION SAFELY-DELETE-PACKAGE) (QUOTE ("TEST1" "G"))) (LET ((P (MAKE-PACKAGE (QUOTE #:TEST1) :NICKNAMES (QUOTE (#\G))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) (QUOTE ("G"))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T)
;; Loading (DEFTEST MAKE-PACKAGE.13 (PROGN (MAPC (FUNCTION SAFELY-DELETE-PACKAGE) (QUOTE (#\X #\F #\G #\H))) (LET ((P (MAKE-PACKAGE #\X :NICKNAMES (QUOTE ("F" #\G #:H))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "X") (SET-EXCLUSIVE-OR (PACKAGE-NICKNAMES P) (QUOTE ("F" "G" "H")) :TEST (FUNCTION EQUAL)) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T NIL T)
;; Loading (DEFMACRO DEF-MAKE-PACKAGE-TEST1 (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (ASSERT (STRING= NAME "TEST1")) (SAFELY-DELETE-PACKAGE "TEST1") (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE NAME)))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T)))
;; Loading (DEF-MAKE-PACKAGE-TEST1 MAKE-PACKAGE.14 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST1 MAKE-PACKAGE.15 (MAKE-ARRAY 12 :INITIAL-CONTENTS "TEST1xxxyyyz" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST1 MAKE-PACKAGE.16 (MAKE-ARRAY 12 :INITIAL-CONTENTS "TEST1xxxyyyz" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-MAKE-PACKAGE-TEST1 MAKE-PACKAGE.17 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST1 MAKE-PACKAGE.18 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-MAKE-PACKAGE-TEST1 MAKE-PACKAGE.19 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "xxTEST1yyy" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEF-MAKE-PACKAGE-TEST1 MAKE-PACKAGE.20 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "xxTEST1yyy" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEFMACRO DEF-MAKE-PACKAGE-TEST2 (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM)) (NICKNAME "TEST1-NICKNAME")) (SAFELY-DELETE-PACKAGE "TEST1") (SAFELY-DELETE-PACKAGE NICKNAME) (LET ((P (MAKE-PACKAGE NAME :NICKNAMES (LIST NICKNAME)))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) (LIST NICKNAME)) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T)))
;; Loading (DEF-MAKE-PACKAGE-TEST2 MAKE-PACKAGE.21 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST2 MAKE-PACKAGE.22 (MAKE-ARRAY 12 :INITIAL-CONTENTS "TEST1xxxyyyz" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST2 MAKE-PACKAGE.23 (MAKE-ARRAY 12 :INITIAL-CONTENTS "TEST1xxxyyyz" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-MAKE-PACKAGE-TEST2 MAKE-PACKAGE.24 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST2 MAKE-PACKAGE.25 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-MAKE-PACKAGE-TEST2 MAKE-PACKAGE.26 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "xxTEST1yyy" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEF-MAKE-PACKAGE-TEST2 MAKE-PACKAGE.27 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "xxTEST1yyy" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEFMACRO DEF-MAKE-PACKAGE-TEST3 (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SET-UP-PACKAGES) (SAFELY-DELETE-PACKAGE "TEST1") (ASSERT (FIND-PACKAGE NAME)) (LET ((P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (LIST NAME))))) (MULTIPLE-VALUE-PROG1 (VALUES (NOTNOT (PACKAGEP P)) (EQUALT (PACKAGE-NAME P) "TEST1") (EQUALT (PACKAGE-NICKNAMES P) NIL) (EQUALT (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE NAME))) (EQUALT (PACKAGE-USED-BY-LIST P) NIL)) (SAFELY-DELETE-PACKAGE P)))) T T T T T)))
;; Loading (DEF-MAKE-PACKAGE-TEST3 MAKE-PACKAGE.28 (MAKE-ARRAY 1 :INITIAL-CONTENTS "A" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST3 MAKE-PACKAGE.29 (MAKE-ARRAY 8 :INITIAL-CONTENTS "Axxxyyyz" :FILL-POINTER 1 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST3 MAKE-PACKAGE.30 (MAKE-ARRAY 8 :INITIAL-CONTENTS "Axxxyyyz" :FILL-POINTER 1 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-MAKE-PACKAGE-TEST3 MAKE-PACKAGE.31 (MAKE-ARRAY 1 :INITIAL-CONTENTS "A" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-MAKE-PACKAGE-TEST3 MAKE-PACKAGE.32 (MAKE-ARRAY 1 :INITIAL-CONTENTS "A" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-MAKE-PACKAGE-TEST3 MAKE-PACKAGE.33 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "xxAyyy0123" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 1 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEF-MAKE-PACKAGE-TEST3 MAKE-PACKAGE.34 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "xxAzzzzyyy" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 1 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.1 (PROGN (SET-UP-PACKAGES) (HANDLE-NON-ABORT-RESTART (MAKE-PACKAGE "A"))) SUCCESS)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.2 (PROGN (SET-UP-PACKAGES) (HANDLE-NON-ABORT-RESTART (MAKE-PACKAGE "Q"))) SUCCESS)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.3 (PROGN (SET-UP-PACKAGES) (HANDLE-NON-ABORT-RESTART (SAFELY-DELETE-PACKAGE "TEST1") (MAKE-PACKAGE "TEST1" :NICKNAMES (QUOTE ("A"))))) SUCCESS)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.4 (HANDLE-NON-ABORT-RESTART (SAFELY-DELETE-PACKAGE "TEST1") (SET-UP-PACKAGES) (MAKE-PACKAGE "TEST1" :NICKNAMES (QUOTE ("Q")))) SUCCESS)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.5 (SIGNALS-ERROR (MAKE-PACKAGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.6 (PROGN (SAFELY-DELETE-PACKAGE "MPE6") (SIGNALS-ERROR (MAKE-PACKAGE "MPE6" :BAD T) PROGRAM-ERROR)) T)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.7 (PROGN (SAFELY-DELETE-PACKAGE "MPE7") (SIGNALS-ERROR (MAKE-PACKAGE "MPE7" :NICKNAMES) PROGRAM-ERROR)) T)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.8 (PROGN (SAFELY-DELETE-PACKAGE "MPE8") (SIGNALS-ERROR (MAKE-PACKAGE "MPE8" :USE) PROGRAM-ERROR)) T)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.9 (PROGN (SAFELY-DELETE-PACKAGE "MPE9") (SIGNALS-ERROR (MAKE-PACKAGE "MPE9" (QUOTE BAD) T) PROGRAM-ERROR)) T)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.10 (PROGN (SAFELY-DELETE-PACKAGE "MPE10") (SIGNALS-ERROR (MAKE-PACKAGE "MPE10" 1 2) PROGRAM-ERROR)) T)
;; Loading (DEFTEST MAKE-PACKAGE.ERROR.11 (PROGN (SAFELY-DELETE-PACKAGE "MPE11") (SIGNALS-ERROR (MAKE-PACKAGE "MPE11" (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)) T)
;; Loading (LOAD "with-package-iterator.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-package-iterator.lsp C14CBA67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (COMPILE-AND-LOAD "package-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/package-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFMACRO TEST-WITH-PACKAGE-ITERATOR (PACKAGE-LIST-EXPR &REST SYMBOL-TYPES) "Build an expression that tests the with-package-iterator form." (LET ((NAME (GENSYM)) (CHT-VAR (GENSYM)) (PKG-LIST-VAR (GENSYM))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA CHT-VAR) (MAKE-HASH-TABLE)) ((SYSTEM.INTERNALS::BQ-COMMA PKG-LIST-VAR) (SYSTEM.INTERNALS::BQ-COMMA PACKAGE-LIST-EXPR)) (FAIL-COUNT 0)) (WITH-PACKAGE-ITERATOR ((SYSTEM.INTERNALS::BQ-COMMA NAME) (SYSTEM.INTERNALS::BQ-COMMA PKG-LIST-VAR) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (COPY-LIST SYMBOL-TYPES))) (LOOP (BLOCK FAIL (MULTIPLE-VALUE-BIND (MORE SYM ACCESS PKG) ((SYSTEM.INTERNALS::BQ-COMMA NAME)) (UNLESS MORE (RETURN NIL)) (SETF (GETHASH SYM (SYSTEM.INTERNALS::BQ-COMMA CHT-VAR)) T) (UNLESS (MEMBER ACCESS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (COPY-LIST SYMBOL-TYPES)))) (UNLESS (> FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Bad access type: ~S ==> ~A~%" SYM ACCESS)) (WHEN (= FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Further messages suppressed~%")) (INCF FAIL-COUNT) (RETURN-FROM FAIL NIL)) (UNLESS (PACKAGEP PKG) (UNLESS (> FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Not a package: ~S ==> ~S~%" SYM PKG)) (WHEN (= FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Further messages suppressed~%")) (INCF FAIL-COUNT) (RETURN-FROM FAIL NIL)) (MULTIPLE-VALUE-BIND (SYM2 ACCESS2) (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) (UNLESS (OR (EQT SYM SYM2) (MEMBER SYM2 (PACKAGE-SHADOWING-SYMBOLS PKG))) (UNLESS (> FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Not same symbol: ~S ~S~%" SYM SYM2)) (WHEN (= FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Further messages suppressed~%")) (INCF FAIL-COUNT) (RETURN-FROM FAIL NIL)) (UNLESS (EQT ACCESS ACCESS2) (UNLESS (> FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Not same access type: ~S ~S ~S~%" SYM ACCESS ACCESS2)) (WHEN (= FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Further messages suppressed~%")) (INCF FAIL-COUNT) (RETURN-FROM FAIL NIL))))))) (LOOP FOR P IN (SYSTEM.INTERNALS::BQ-COMMA PKG-LIST-VAR) DO (BLOCK FAIL (DO-SYMBOLS (SYM P) (MULTIPLE-VALUE-BIND (SYM2 ACCESS) (FIND-SYMBOL (SYMBOL-NAME SYM) P) (UNLESS (EQT SYM SYM2) (UNLESS (> FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Not same symbol (2): ~S ~S~%" SYM SYM2)) (WHEN (= FAIL-COUNT +FAIL-COUNT-LIMIT+) (FORMAT T "Further messages suppressed~%")) (INCF FAIL-COUNT) (RETURN-FROM FAIL NIL)) (UNLESS (OR (NOT (MEMBER ACCESS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (COPY-LIST SYMBOL-TYPES))))) (GETHASH SYM (SYSTEM.INTERNALS::BQ-COMMA CHT-VAR))) (FORMAT T "Symbol not found: ~S~%" SYM) (INCF FAIL-COUNT) (RETURN-FROM FAIL NIL)))))) (OR (ZEROP FAIL-COUNT) FAIL-COUNT))))).
;; Compiling form (DEFUN WITH-PACKAGE-ITERATOR-INTERNAL (PACKAGES) (TEST-WITH-PACKAGE-ITERATOR PACKAGES :INTERNAL)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN WITH-PACKAGE-ITERATOR-EXTERNAL (PACKAGES) (TEST-WITH-PACKAGE-ITERATOR PACKAGES :EXTERNAL)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN WITH-PACKAGE-ITERATOR-INHERITED (PACKAGES) (TEST-WITH-PACKAGE-ITERATOR PACKAGES :INHERITED)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN WITH-PACKAGE-ITERATOR-ALL (PACKAGES) (TEST-WITH-PACKAGE-ITERATOR PACKAGES :INTERNAL :EXTERNAL :INHERITED)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN NUM-EXTERNAL-SYMBOLS-IN-PACKAGE (P) (LET ((NUM 0)) (DECLARE (FIXNUM NUM)) (DO-EXTERNAL-SYMBOLS (S P NUM) (DECLARE (IGNORABLE S)) (INCF NUM)))).
;; Compiling form (DEFUN EXTERNAL-SYMBOLS-IN-PACKAGE (P) (LET ((SYMBOLS NIL)) (DO-EXTERNAL-SYMBOLS (S P) (PUSH S SYMBOLS)) (SORT SYMBOLS (FUNCTION (LAMBDA (S1 S2) (STRING< (SYMBOL-NAME S1) (SYMBOL-NAME S2))))))).
;; Compiling form (DEFUN NUM-SYMBOLS-IN-PACKAGE (P) (LET ((NUM 0)) (DECLARE (FIXNUM NUM)) (DO-SYMBOLS (S P NUM) (DECLARE (IGNORABLE S)) (INCF NUM)))).
;; Compiling form (DEFUN SORT-SYMBOLS (SL) (SORT (COPY-LIST SL) (FUNCTION (LAMBDA (X Y) (OR (STRING< (SYMBOL-NAME X) (SYMBOL-NAME Y)) (AND (STRING= (SYMBOL-NAME X) (SYMBOL-NAME Y)) (STRING< (PACKAGE-NAME (SYMBOL-PACKAGE X)) (PACKAGE-NAME (SYMBOL-PACKAGE Y))))))))).
;; Compiling form (DEFUN SORT-PACKAGE-LIST (X) (SORT (COPY-LIST X) (FUNCTION STRING<) :KEY (FUNCTION PACKAGE-NAME))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/package-aux.llf C16CE2B7>
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.1 (WITH-PACKAGE-ITERATOR-INTERNAL (LIST (FIND-PACKAGE "COMMON-LISP-USER"))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.2 (WITH-PACKAGE-ITERATOR-EXTERNAL (LIST (FIND-PACKAGE "COMMON-LISP-USER"))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.3 (WITH-PACKAGE-ITERATOR-INHERITED (LIST (FIND-PACKAGE "COMMON-LISP-USER"))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.4 (WITH-PACKAGE-ITERATOR-ALL (LIST (FIND-PACKAGE "COMMON-LISP-USER"))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.5 (PROGN (SET-UP-PACKAGES) (WITH-PACKAGE-ITERATOR-ALL (QUOTE ("A")))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.6 (PROGN (SET-UP-PACKAGES) (WITH-PACKAGE-ITERATOR-ALL (QUOTE (#:A)))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.7 (PROGN (SET-UP-PACKAGES) (WITH-PACKAGE-ITERATOR-ALL (QUOTE (#\A)))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.8 (PROGN (SET-UP-PACKAGES) (WITH-PACKAGE-ITERATOR-INTERNAL (LIST (FIND-PACKAGE "A")))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.9 (PROGN (SET-UP-PACKAGES) (WITH-PACKAGE-ITERATOR-EXTERNAL (LIST (FIND-PACKAGE "A")))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.10 (PROGN (SET-UP-PACKAGES) (WITH-PACKAGE-ITERATOR-INHERITED (LIST (FIND-PACKAGE "A")))) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.11 (SIGNALS-ERROR (WITH-PACKAGE-ITERATOR (X "COMMON-LISP-USER")) PROGRAM-ERROR) T)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.12 (LOOP FOR P IN (LIST-ALL-PACKAGES) COUNT (HANDLER-CASE (PROGN (FORMAT T "Package ~S~%" P) (NOT (WITH-PACKAGE-ITERATOR-INTERNAL (LIST P)))) (ERROR (C) (FORMAT "Error ~S on package ~A~%" C P) T))) 0)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.13 (LOOP FOR P IN (LIST-ALL-PACKAGES) COUNT (HANDLER-CASE (PROGN (FORMAT T "Package ~S~%" P) (NOT (WITH-PACKAGE-ITERATOR-EXTERNAL (LIST P)))) (ERROR (C) (FORMAT "Error ~S on package ~A~%" C P) T))) 0)
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.14 (LOOP FOR P IN (LIST-ALL-PACKAGES) COUNT (HANDLER-CASE (PROGN (FORMAT T "Package ~S~%" P) (NOT (WITH-PACKAGE-ITERATOR-INHERITED (LIST P)))) (ERROR (C) (FORMAT T "Error ~S on package ~S~%" C P) T))) 0)
;; Loading (DEF-MACRO-TEST WITH-PACKAGE-ITERATOR.ERROR.1 (WITH-PACKAGE-ITERATOR (X "CL" :EXTERNAL) NIL))
;; Loading (DEFMACRO DEF-WITH-PACKAGE-ITERATOR-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (LET* ((P (MAKE-PACKAGE NAME :USE NIL)) (RESULT NIL) (S (INTERN "X" P))) (WITH-PACKAGE-ITERATOR (X NAME :INTERNAL) (LOOP (MULTIPLE-VALUE-BIND (GOOD? SYM) (X) (UNLESS GOOD? (SAFELY-DELETE-PACKAGE NAME) (RETURN (EQUALT (LIST S) RESULT))) (PUSH SYM RESULT)))))) T)))
;; Loading (DEF-WITH-PACKAGE-ITERATOR-TEST WITH-PACKAGE-ITERATOR.15 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-WITH-PACKAGE-ITERATOR-TEST WITH-PACKAGE-ITERATOR.16 (MAKE-ARRAY 8 :INITIAL-CONTENTS "TEST1XXX" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-WITH-PACKAGE-ITERATOR-TEST WITH-PACKAGE-ITERATOR.17 (MAKE-ARRAY 8 :INITIAL-CONTENTS "TEST1XXX" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-WITH-PACKAGE-ITERATOR-TEST WITH-PACKAGE-ITERATOR.18 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-WITH-PACKAGE-ITERATOR-TEST WITH-PACKAGE-ITERATOR.19 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-WITH-PACKAGE-ITERATOR-TEST WITH-PACKAGE-ITERATOR.20 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "XTEST1YzYY" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEF-WITH-PACKAGE-ITERATOR-TEST WITH-PACKAGE-ITERATOR.21 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "XTEST1YzYY" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEFTEST WITH-PACKAGE-ITERATOR.22 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-PACKAGE-ITERATOR (S (RETURN-FROM DONE X) :INTERNAL) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (LOAD "unexport.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/unexport.lsp C195FBF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST UNEXPORT.1 (PROGN (SAFELY-DELETE-PACKAGE "X") (LET* ((P (MAKE-PACKAGE "X" :USE NIL)) (R (EXPORT (INTERN "X" P) P)) (I 0) X Y) (MULTIPLE-VALUE-BIND* (SYM1 ACCESS1) (FIND-SYMBOL "X" P) (UNEXPORT (PROGN (SETF X (INCF I)) SYM1) (PROGN (SETF Y (INCF I)) P)) (MULTIPLE-VALUE-BIND* (SYM2 ACCESS2) (FIND-SYMBOL "X" P) (AND (EQT R T) (EQL I 2) (EQL X 1) (EQL Y 2) (EQT SYM1 SYM2) (EQT ACCESS1 :EXTERNAL) (EQT ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME SYM1) "X") T))))) T)
;; Loading (DEFTEST UNEXPORT.2 (PROGN (SAFELY-DELETE-PACKAGE "X") (LET* ((P (MAKE-PACKAGE "X" :USE NIL)) (R (EXPORT (INTERN "X" P) P))) (MULTIPLE-VALUE-BIND* (SYM1 ACCESS1) (FIND-SYMBOL "X" P) (UNEXPORT (LIST SYM1) "X") (MULTIPLE-VALUE-BIND* (SYM2 ACCESS2) (FIND-SYMBOL "X" P) (AND (EQT SYM1 SYM2) (EQT R T) (EQT ACCESS1 :EXTERNAL) (EQT ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME SYM1) "X") T))))) T)
;; Loading (DEFTEST UNEXPORT.3 (PROGN (SAFELY-DELETE-PACKAGE "X") (LET* ((P (MAKE-PACKAGE "X" :USE NIL)) (R1 (EXPORT (INTERN "X" P) P)) (R2 (EXPORT (INTERN "Y" P) P))) (MULTIPLE-VALUE-BIND* (SYM1 ACCESS1) (FIND-SYMBOL "X" P) (MULTIPLE-VALUE-BIND* (SYM1A ACCESS1A) (FIND-SYMBOL "Y" P) (UNEXPORT (LIST SYM1 SYM1A) (QUOTE #:X)) (MULTIPLE-VALUE-BIND* (SYM2 ACCESS2) (FIND-SYMBOL "X" P) (MULTIPLE-VALUE-BIND* (SYM2A ACCESS2A) (FIND-SYMBOL "Y" P) (AND (EQT SYM1 SYM2) (EQT SYM1A SYM2A) (EQT R1 T) (EQT R2 T) (EQT ACCESS1 :EXTERNAL) (EQT ACCESS2 :INTERNAL) (EQT ACCESS1A :EXTERNAL) (EQT ACCESS2A :INTERNAL) (EQUAL (SYMBOL-NAME SYM1) "X") (EQUAL (SYMBOL-NAME SYM1A) "Y") T))))))) T)
;; Loading (DEFTEST UNEXPORT.4 (PROGN (SAFELY-DELETE-PACKAGE "X") (LET* ((P (MAKE-PACKAGE "X" :USE NIL)) (R (EXPORT (INTERN "X" P) P))) (MULTIPLE-VALUE-BIND* (SYM1 ACCESS1) (FIND-SYMBOL "X" P) (UNEXPORT (LIST SYM1) #\X) (MULTIPLE-VALUE-BIND* (SYM2 ACCESS2) (FIND-SYMBOL "X" P) (AND (EQT SYM1 SYM2) (EQT R T) (EQT ACCESS1 :EXTERNAL) (EQT ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME SYM1) "X") T))))) T)
;; Loading (DEFTEST UNEXPORT.5 (SIGNALS-ERROR (PROGN (WHEN (FIND-PACKAGE "X") (DELETE-PACKAGE "X")) (UNEXPORT (QUOTE A) (MAKE-PACKAGE "X" :USE NIL)) NIL) PACKAGE-ERROR) T)
;; Loading (DEFTEST UNEXPORT.6 (PROGN (WHEN (FIND-PACKAGE "X") (DELETE-PACKAGE "X")) (LET ((P (MAKE-PACKAGE "X" :USE NIL))) (LET* ((SYM (INTERN "FOO" P)) (R (UNEXPORT SYM P))) (MULTIPLE-VALUE-BIND* (SYM2 ACCESS) (FIND-SYMBOL "FOO" P) (AND (EQT R T) (EQT ACCESS :INTERNAL) (EQT SYM SYM2) (EQUAL (SYMBOL-NAME SYM) "FOO") T))))) T)
;; Loading (DEFMACRO DEF-UNEXPORT-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (LET* ((P (MAKE-PACKAGE NAME :USE NIL)) (R (EXPORT (INTERN "X" P) P))) (MULTIPLE-VALUE-BIND* (SYM1 ACCESS1) (FIND-SYMBOL "X" P) (UNEXPORT (LIST SYM1) NAME) (MULTIPLE-VALUE-BIND* (SYM2 ACCESS2) (FIND-SYMBOL "X" P) (AND (EQT SYM1 SYM2) (EQT R T) (EQT ACCESS1 :EXTERNAL) (EQT ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME SYM1) "X") T))))) T)))
;; Loading (DEF-UNEXPORT-TEST UNEXPORT.7 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNEXPORT-TEST UNEXPORT.8 (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNEXPORT-TEST UNEXPORT.9 (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-UNEXPORT-TEST UNEXPORT.10 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNEXPORT-TEST UNEXPORT.11 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-UNEXPORT-TEST UNEXPORT.12 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-UNEXPORT-TEST UNEXPORT.13 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEFTEST UNEXPORT.ERROR.1 (SIGNALS-ERROR (UNEXPORT) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNEXPORT.ERROR.2 (SIGNALS-ERROR (UNEXPORT (QUOTE XYZ) "CL-TEST" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "unintern.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/unintern.lsp 811ED6D7>
;; Loading NIL
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST UNINTERN.1 (PROGN (SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((P (MAKE-PACKAGE "H" :USE NIL)) (I 0) X Y) (INTERN "FOO" P) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "FOO" P) (AND (EQT ACCESS :INTERNAL) (UNINTERN (PROGN (SETF X (INCF I)) SYM) (PROGN (SETF Y (INCF I)) P)) (EQL I 2) (EQL X 1) (EQL Y 2) (NULL (SYMBOL-PACKAGE SYM)) (NOT (FIND-SYMBOL "FOO" P))))) (SAFELY-DELETE-PACKAGE "H"))) T)
;; Loading (DEFTEST UNINTERN.2 (PROGN (SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((*PACKAGE* (MAKE-PACKAGE "H" :USE NIL))) (INTERN "FOO") (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "FOO") (AND (EQT ACCESS :INTERNAL) (UNINTERN SYM) (NULL (SYMBOL-PACKAGE SYM)) (NOT (FIND-SYMBOL "FOO"))))) (SAFELY-DELETE-PACKAGE "H"))) T)
;; Loading (DEFTEST UNINTERN.3 (PROGN (SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((P (MAKE-PACKAGE "H" :USE NIL))) (INTERN "FOO" P) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "FOO" P) (AND (EQT ACCESS :INTERNAL) (UNINTERN SYM "H") (NULL (SYMBOL-PACKAGE SYM)) (NOT (FIND-SYMBOL "FOO" P))))) (SAFELY-DELETE-PACKAGE "H"))) T)
;; Loading (DEFTEST UNINTERN.4 (PROGN (SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((P (MAKE-PACKAGE "H" :USE NIL))) (INTERN "FOO" P) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "FOO" P) (AND (EQT ACCESS :INTERNAL) (UNINTERN SYM (QUOTE #:H)) (NULL (SYMBOL-PACKAGE SYM)) (NOT (FIND-SYMBOL "FOO" P))))) (SAFELY-DELETE-PACKAGE "H"))) T)
;; Loading (DEFTEST UNINTERN.5 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((P (MAKE-PACKAGE "H" :USE NIL))) (INTERN "FOO" P) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "FOO" P) (AND (EQT ACCESS :INTERNAL) (UNINTERN SYM #\H) (NULL (SYMBOL-PACKAGE SYM)) (NOT (FIND-SYMBOL "FOO" P))))) (SAFELY-DELETE-PACKAGE "H"))) (ERROR (C) C)) T)
;; Loading (DEFTEST UNINTERN.6 (HANDLER-CASE (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (MAKE-PACKAGE "G" :USE NIL) (EXPORT (INTERN "FOO" "G") "G") (MAKE-PACKAGE "H" :USE (QUOTE ("G"))) (EXPORT (INTERN "FOO" "H") "H") (MULTIPLE-VALUE-BIND* (SYM1 ACCESS1) (FIND-SYMBOL "FOO" "H") (AND SYM1 (EQT ACCESS1 :EXTERNAL) (EQUAL "FOO" (SYMBOL-NAME SYM1)) (EQT (FIND-PACKAGE "G") (SYMBOL-PACKAGE SYM1)) (UNINTERN SYM1 "H") (MULTIPLE-VALUE-BIND* (SYM2 ACCESS2) (FIND-SYMBOL "FOO" "H") (AND (EQT SYM1 SYM2) (EQT (SYMBOL-PACKAGE SYM1) (FIND-PACKAGE "G")) (EQT ACCESS2 :INHERITED)))))) (ERROR (C) C)) T)
;; Loading (DEFTEST UNINTERN.7 (BLOCK FAILED (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (LIST PG)))) (HANDLER-CASE (SHADOW "FOO" PH) (ERROR (C) (RETURN-FROM FAILED (LIST :SHADOW-ERROR C)))) (EXPORT (INTERN "FOO" PG) PG) (MULTIPLE-VALUE-BIND* (SYM1 ACCESS1) (FIND-SYMBOL "FOO" PH) (AND SYM1 (EQT (SYMBOL-PACKAGE SYM1) PH) (EQT ACCESS1 :INTERNAL) (EQUAL (LIST SYM1) (PACKAGE-SHADOWING-SYMBOLS PH)) (UNINTERN SYM1 PH) (MULTIPLE-VALUE-BIND* (SYM2 ACCESS2) (FIND-SYMBOL "FOO" PH) (AND (NOT (EQT SYM1 SYM2)) (EQT ACCESS2 :INHERITED) (NULL (SYMBOL-PACKAGE SYM1)) (EQT (SYMBOL-PACKAGE SYM2) PG))))))) T)
;; Loading (DEFTEST UNINTERN.8 (BLOCK FAILED (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G1") (SAFELY-DELETE-PACKAGE "G2") (LET* ((PG1 (MAKE-PACKAGE "G1" :USE NIL)) (PG2 (MAKE-PACKAGE "G2" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (LIST PG1 PG2)))) (HANDLER-CASE (SHADOW "FOO" PH) (ERROR (C) (RETURN-FROM FAILED (LIST :SHADOW-ERROR C)))) (LET ((GSYM1 (INTERN "FOO" PG1)) (GSYM2 (INTERN "FOO" PG2))) (EXPORT GSYM1 PG1) (EXPORT GSYM2 PG2) (MULTIPLE-VALUE-BIND* (SYM1 ACCESS1) (FIND-SYMBOL "FOO" PH) (AND (EQUAL (LIST SYM1) (PACKAGE-SHADOWING-SYMBOLS PH)) (NOT (EQT SYM1 GSYM1)) (NOT (EQT SYM1 GSYM2)) (EQT (SYMBOL-PACKAGE SYM1) PH) (EQT ACCESS1 :INTERNAL) (EQUAL (SYMBOL-NAME SYM1) "FOO") (HANDLER-CASE (PROGN (UNINTERN SYM1 PH) NIL) (ERROR (C) (FORMAT T "Properly threw an error: ~S~%" C) T))))))) T)
;; Loading (DEFTEST UNINTERN.9 (BLOCK FAILED (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G1") (SAFELY-DELETE-PACKAGE "G2") (SAFELY-DELETE-PACKAGE "G3") (LET* ((PG3 (MAKE-PACKAGE "G3" :USE NIL)) (PG1 (MAKE-PACKAGE "G1" :USE (LIST PG3))) (PG2 (MAKE-PACKAGE "G2" :USE (LIST PG3))) (PH (MAKE-PACKAGE "H" :USE (LIST PG1 PG2)))) (HANDLER-CASE (SHADOW "FOO" PH) (ERROR (C) (RETURN-FROM FAILED (LIST :SHADOW-ERROR C)))) (LET ((GSYM (INTERN "FOO" PG3))) (EXPORT GSYM PG3) (EXPORT GSYM PG1) (EXPORT GSYM PG2) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "FOO" PH) (AND (EQUAL (LIST SYM) (PACKAGE-SHADOWING-SYMBOLS PH)) (NOT (EQT SYM GSYM)) (EQUAL (SYMBOL-NAME SYM) "FOO") (EQUAL (SYMBOL-PACKAGE SYM) PH) (EQT ACCESS :INTERNAL) (HANDLER-CASE (AND (UNINTERN SYM PH) (MULTIPLE-VALUE-BIND* (SYM2 ACCESS2) (FIND-SYMBOL "FOO" PH) (AND (EQT GSYM SYM2) (EQT ACCESS2 :INHERITED)))) (ERROR (C) C))))))) T)
;; Loading (DEFMACRO DEF-UNINTERN-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (PROG1 (LET ((P (MAKE-PACKAGE NAME :USE NIL))) (INTERN "FOO" P) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "FOO" P) (AND (EQT ACCESS :INTERNAL) (UNINTERN SYM NAME) (NULL (SYMBOL-PACKAGE SYM)) (NOT (FIND-SYMBOL "FOO" P))))) (SAFELY-DELETE-PACKAGE NAME))) T)))
;; Loading (DEF-UNINTERN-TEST UNINTERN.10 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNINTERN-TEST UNINTERN.11 (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNINTERN-TEST UNINTERN.12 (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-UNINTERN-TEST UNINTERN.13 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNINTERN-TEST UNINTERN.14 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-UNINTERN-TEST UNINTERN.15 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-UNINTERN-TEST UNINTERN.16 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEFTEST UNINTERN.ERROR.1 (SIGNALS-ERROR (UNINTERN) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNINTERN.ERROR.2 (SIGNALS-ERROR (UNINTERN (QUOTE #:X) "CL-TEST" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "in-package.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/in-package.lsp 813DC597>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST IN-PACKAGE.1 (LET ((*PACKAGE* *PACKAGE*)) (SAFELY-DELETE-PACKAGE "H") (MAKE-PACKAGE "H" :USE NIL) (LET ((P2 (IN-PACKAGE "H"))) (AND (EQT P2 (FIND-PACKAGE "H")) (EQT *PACKAGE* P2)))) T)
;; Loading (DEFTEST IN-PACKAGE.2 (LET ((*PACKAGE* *PACKAGE*)) (SAFELY-DELETE-PACKAGE "H") (MAKE-PACKAGE "H" :USE NIL) (LET ((P2 (IN-PACKAGE H))) (AND (EQT P2 (FIND-PACKAGE "H")) (EQT *PACKAGE* P2)))) T)
;; Loading (DEFTEST IN-PACKAGE.3 (LET ((*PACKAGE* *PACKAGE*)) (SAFELY-DELETE-PACKAGE "H") (MAKE-PACKAGE "H" :USE NIL) (LET ((P2 (IN-PACKAGE :H))) (AND (EQT P2 (FIND-PACKAGE "H")) (EQT *PACKAGE* P2)))) T)
;; Loading (DEFTEST IN-PACKAGE.4 (LET ((*PACKAGE* *PACKAGE*)) (SAFELY-DELETE-PACKAGE "H") (MAKE-PACKAGE "H" :USE NIL) (LET ((P2 (IN-PACKAGE #\H))) (AND (EQT P2 (FIND-PACKAGE "H")) (EQT *PACKAGE* P2)))) T)
;; Loading (DEFTEST IN-PACKAGE.5 (LET ((*PACKAGE* *PACKAGE*)) (SAFELY-DELETE-PACKAGE "H") (HANDLER-CASE (EVAL (QUOTE (IN-PACKAGE "H"))) (PACKAGE-ERROR NIL (QUOTE PACKAGE-ERROR)) (ERROR (C) C))) PACKAGE-ERROR)
;; Loading (DEF-MACRO-TEST IN-PACKAGE.ERROR.1 (IN-PACKAGE :CL-TEST))
;; Loading (DEFMACRO DEF-IN-PACKAGE-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (PROG1 (LET* ((P (MAKE-PACKAGE NAME :USE NIL)) (*PACKAGE* *PACKAGE*) (P2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (IN-PACKAGE (SYSTEM.INTERNALS::BQ-COMMA NAME)))))) (LIST (EQT P P2) (EQT P *PACKAGE*))) (SAFELY-DELETE-PACKAGE NAME))) (T T))))
;; Loading (DEF-IN-PACKAGE-TEST IN-PACKAGE.7 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-IN-PACKAGE-TEST IN-PACKAGE.8 (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-IN-PACKAGE-TEST IN-PACKAGE.9 (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-IN-PACKAGE-TEST IN-PACKAGE.10 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-IN-PACKAGE-TEST IN-PACKAGE.11 (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-IN-PACKAGE-TEST IN-PACKAGE.12 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-IN-PACKAGE-TEST IN-PACKAGE.13 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (LOAD "unuse-package.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/unuse-package.lsp 814BABC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "package-aux.lsp")
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST UNUSE-PACKAGE.1 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (QUOTE ("G")))) (I 0) X Y) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (UNUSE-PACKAGE (PROGN (SETF X (INCF I)) PG) (PROGN (SETF Y (INCF I)) PH)) (EQL I 2) (EQL X 1) (EQL Y 2) (EQUAL (PACKAGE-USE-LIST PH) NIL) (NULL (PACKAGE-USED-BY-LIST PG))) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G")))) T)
;; Loading (DEFTEST UNUSE-PACKAGE.2 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (UNUSE-PACKAGE "G" PH) (EQUAL (PACKAGE-USE-LIST PH) NIL) (NULL (PACKAGE-USED-BY-LIST PG))) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G")))) T)
;; Loading (DEFTEST UNUSE-PACKAGE.3 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (UNUSE-PACKAGE :G PH) (EQUAL (PACKAGE-USE-LIST PH) NIL) (NULL (PACKAGE-USED-BY-LIST PG))) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G")))) T)
;; Loading (DEFTEST UNUSE-PACKAGE.4 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (IGNORE-ERRORS (UNUSE-PACKAGE #\G PH)) (EQUAL (PACKAGE-USE-LIST PH) NIL) (NULL (PACKAGE-USED-BY-LIST PG))) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G")))) T)
;; Loading (DEFTEST UNUSE-PACKAGE.5 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (UNUSE-PACKAGE (LIST PG) PH) (EQUAL (PACKAGE-USE-LIST PH) NIL) (NULL (PACKAGE-USED-BY-LIST PG))) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G")))) T)
;; Loading (DEFTEST UNUSE-PACKAGE.6 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (UNUSE-PACKAGE (LIST "G") PH) (EQUAL (PACKAGE-USE-LIST PH) NIL) (NULL (PACKAGE-USED-BY-LIST PG))) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G")))) T)
;; Loading (DEFTEST UNUSE-PACKAGE.7 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (UNUSE-PACKAGE (LIST :G) PH) (EQUAL (PACKAGE-USE-LIST PH) NIL) (NULL (PACKAGE-USED-BY-LIST PG))) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G")))) T)
;; Loading (DEFTEST UNUSE-PACKAGE.8 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (IGNORE-ERRORS (UNUSE-PACKAGE (LIST #\G) PH)) (EQUAL (PACKAGE-USE-LIST PH) NIL) (NULL (PACKAGE-USED-BY-LIST PG))) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G")))) T)
;; Loading (DEFTEST UNUSE-PACKAGE.9 (PROGN (DOLIST (P (QUOTE ("H1" "H2" "G1" "G2" "G3"))) (SAFELY-DELETE-PACKAGE P)) (LET* ((PG1 (MAKE-PACKAGE "G1" :USE NIL)) (PG2 (MAKE-PACKAGE "G2" :USE NIL)) (PG3 (MAKE-PACKAGE "G3" :USE NIL)) (PH1 (MAKE-PACKAGE "H1" :USE (LIST PG1 PG2 PG3))) (PH2 (MAKE-PACKAGE "H2" :USE (LIST PG1 PG2 PG3)))) (LET ((PUBG1 (SORT-PACKAGE-LIST (PACKAGE-USED-BY-LIST PG1))) (PUBG2 (SORT-PACKAGE-LIST (PACKAGE-USED-BY-LIST PG2))) (PUBG3 (SORT-PACKAGE-LIST (PACKAGE-USED-BY-LIST PG3))) (PUH1 (SORT-PACKAGE-LIST (PACKAGE-USE-LIST PH1))) (PUH2 (SORT-PACKAGE-LIST (PACKAGE-USE-LIST PH2)))) (PROG1 (AND (= (LENGTH (REMOVE-DUPLICATES (LIST PG1 PG2 PG3 PH1 PH2))) 5) (EQUAL (LIST PH1 PH2) PUBG1) (EQUAL (LIST PH1 PH2) PUBG2) (EQUAL (LIST PH1 PH2) PUBG3) (EQUAL (LIST PG1 PG2 PG3) PUH1) (EQUAL (LIST PG1 PG2 PG3) PUH2) (UNUSE-PACKAGE (LIST PG1 PG3) PH1) (EQUAL (PACKAGE-USE-LIST PH1) (LIST PG2)) (EQUAL (PACKAGE-USED-BY-LIST PG1) (LIST PH2)) (EQUAL (PACKAGE-USED-BY-LIST PG3) (LIST PH2)) (EQUAL (SORT-PACKAGE-LIST (PACKAGE-USE-LIST PH2)) (LIST PG1 PG2 PG3)) (EQUAL (SORT-PACKAGE-LIST (PACKAGE-USED-BY-LIST PG2)) (LIST PH1 PH2)) T) (DOLIST (P (QUOTE ("H1" "H2" "G1" "G2" "G3"))) (SAFELY-DELETE-PACKAGE P)))))) T)
;; Loading (DEFMACRO DEF-UNUSE-PACKAGE-TEST (TEST-NAME &KEY (USER "H") (USED "G")) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((USER-NAME (SYSTEM.INTERNALS::BQ-COMMA USER)) (USED-NAME (SYSTEM.INTERNALS::BQ-COMMA USED))) (SAFELY-DELETE-PACKAGE USER-NAME) (SAFELY-DELETE-PACKAGE USED-NAME) (LET* ((PUSED (MAKE-PACKAGE USED-NAME :USE NIL)) (PUSER (MAKE-PACKAGE USER-NAME :USE (LIST USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST PUSER) (LIST PUSED)) (EQUAL (PACKAGE-USED-BY-LIST PUSED) (LIST PUSER)) (UNUSE-PACKAGE (LIST USED-NAME) USER-NAME) (EQUAL (PACKAGE-USE-LIST PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST PUSED))) (SAFELY-DELETE-PACKAGE USER-NAME) (SAFELY-DELETE-PACKAGE USED-NAME)))) T)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.10 :USER (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.11 :USER (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.12 :USER (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.13 :USER (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.14 :USER (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.15 :USER (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.16 :USER (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.17 :USED (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.18 :USED (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.19 :USED (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.20 :USED (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.21 :USED (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.22 :USED (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-UNUSE-PACKAGE-TEST UNUSE-PACKAGE.23 :USED (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEFTEST UNUSE-PACKAGE.ERROR.1 (SIGNALS-ERROR (UNUSE-PACKAGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNUSE-PACKAGE.ERROR.2 (PROGN (SAFELY-DELETE-PACKAGE "UPE2A") (SAFELY-DELETE-PACKAGE "UPE2") (MAKE-PACKAGE "UPE2" :USE NIL) (MAKE-PACKAGE "UPE2A" :USE (QUOTE ("UPE2"))) (SIGNALS-ERROR (UNUSE-PACKAGE "UPE2" "UPE2A" NIL) PROGRAM-ERROR)) T)
;; Loading (LOAD "use-package.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/use-package.lsp 81787527>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "package-aux.lsp")
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST USE-PACKAGE.1 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE NIL)) (SYM1 (INTERN "FOO" PG)) (I 0) X Y) (AND (EQT (EXPORT SYM1 PG) T) (NULL (PACKAGE-USED-BY-LIST PG)) (NULL (PACKAGE-USED-BY-LIST PH)) (NULL (PACKAGE-USE-LIST PG)) (NULL (PACKAGE-USE-LIST PH)) (EQT (USE-PACKAGE (PROGN (SETF X (INCF I)) PG) (PROGN (SETF Y (INCF I)) PH)) T) (EQL I 2) (EQL X 1) (EQL Y 2) (MULTIPLE-VALUE-BIND (SYM2 ACCESS) (FIND-SYMBOL "FOO" PH) (AND (EQT ACCESS :INHERITED) (EQT SYM1 SYM2))) (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (NULL (PACKAGE-USE-LIST PG)) (NULL (PACKAGE-USED-BY-LIST PH)) (EQT (UNUSE-PACKAGE PG PH) T) (NULL (FIND-SYMBOL "FOO" PH))))) T)
;; Loading (DEFTEST USE-PACKAGE.2 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE NIL)) (SYM1 (INTERN "FOO" PG))) (AND (EQT (EXPORT SYM1 PG) T) (NULL (PACKAGE-USED-BY-LIST PG)) (NULL (PACKAGE-USED-BY-LIST PH)) (NULL (PACKAGE-USE-LIST PG)) (NULL (PACKAGE-USE-LIST PH)) (EQT (USE-PACKAGE "G" "H") T) (MULTIPLE-VALUE-BIND (SYM2 ACCESS) (FIND-SYMBOL "FOO" PH) (AND (EQT ACCESS :INHERITED) (EQT SYM1 SYM2))) (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (NULL (PACKAGE-USE-LIST PG)) (NULL (PACKAGE-USED-BY-LIST PH)) (EQT (UNUSE-PACKAGE PG PH) T) (NULL (FIND-SYMBOL "FOO" PH))))) T)
;; Loading (DEFTEST USE-PACKAGE.3 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE NIL)) (SYM1 (INTERN "FOO" PG))) (AND (EQT (EXPORT SYM1 PG) T) (NULL (PACKAGE-USED-BY-LIST PG)) (NULL (PACKAGE-USED-BY-LIST PH)) (NULL (PACKAGE-USE-LIST PG)) (NULL (PACKAGE-USE-LIST PH)) (EQT (USE-PACKAGE (QUOTE #:G) (QUOTE #:H)) T) (MULTIPLE-VALUE-BIND (SYM2 ACCESS) (FIND-SYMBOL "FOO" PH) (AND (EQT ACCESS :INHERITED) (EQT SYM1 SYM2))) (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (NULL (PACKAGE-USE-LIST PG)) (NULL (PACKAGE-USED-BY-LIST PH)) (EQT (UNUSE-PACKAGE PG PH) T) (NULL (FIND-SYMBOL "FOO" PH))))) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST USE-PACKAGE.4 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET* ((PG (MAKE-PACKAGE "G" :USE NIL)) (PH (MAKE-PACKAGE "H" :USE NIL)) (SYM1 (INTERN "FOO" PG))) (AND (EQT (EXPORT SYM1 PG) T) (NULL (PACKAGE-USED-BY-LIST PG)) (NULL (PACKAGE-USED-BY-LIST PH)) (NULL (PACKAGE-USE-LIST PG)) (NULL (PACKAGE-USE-LIST PH)) (EQT (IGNORE-ERRORS (USE-PACKAGE #\G #\H)) T) (MULTIPLE-VALUE-BIND (SYM2 ACCESS) (FIND-SYMBOL "FOO" PH) (AND (EQT ACCESS :INHERITED) (EQT SYM1 SYM2))) (EQUAL (PACKAGE-USE-LIST PH) (LIST PG)) (EQUAL (PACKAGE-USED-BY-LIST PG) (LIST PH)) (NULL (PACKAGE-USE-LIST PG)) (NULL (PACKAGE-USED-BY-LIST PH)) (EQT (UNUSE-PACKAGE PG PH) T) (NULL (FIND-SYMBOL "FOO" PH))))) T)
;; Loading (DEFTEST USE-PACKAGE.5 (LET ((PKGS (QUOTE ("H" "G1" "G2" "G3"))) (VARS (QUOTE ("FOO1" "FOO2" "FOO3")))) (DOLIST (P PKGS) (SAFELY-DELETE-PACKAGE P) (MAKE-PACKAGE P :USE NIL)) (AND (EVERY (COMPLEMENT (FUNCTION PACKAGE-USE-LIST)) PKGS) (EVERY (COMPLEMENT (FUNCTION PACKAGE-USED-BY-LIST)) PKGS) (EVERY (FUNCTION (LAMBDA (V P) (EXPORT (INTERN V P) P))) VARS (CDR PKGS)) (PROGN (DOLIST (P (CDR PKGS)) (INTERN "MINE" P)) (EQT (USE-PACKAGE (CDR PKGS) (CAR PKGS)) T)) (EVERY (FUNCTION (LAMBDA (V P) (EQT (FIND-SYMBOL V P) (FIND-SYMBOL V (CAR PKGS))))) VARS (CDR PKGS)) (NULL (FIND-SYMBOL "MINE" (CAR PKGS))) (EVERY (FUNCTION (LAMBDA (P) (EQUAL (PACKAGE-USED-BY-LIST P) (LIST (FIND-PACKAGE (CAR PKGS)))))) (CDR PKGS)) (EQUAL (SORT-PACKAGE-LIST (PACKAGE-USE-LIST (CAR PKGS))) (MAPCAR (FUNCTION FIND-PACKAGE) (CDR PKGS))) (EVERY (COMPLEMENT (FUNCTION PACKAGE-USE-LIST)) (CDR PKGS)) (NULL (PACKAGE-USED-BY-LIST (CAR PKGS))))) T)
;; Loading (DEFTEST USE-PACKAGE.6 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET ((PG (MAKE-PACKAGE "G")) (PH (MAKE-PACKAGE "H")) SYM1 SYM2 SYM3 SYM4 A1 A2 A3 A4) (PROG1 (AND (EXPORT (INTERN "X" PG) PG) (EXPORT (INTERN "Y" PH) PH) (USE-PACKAGE PG PH) (USE-PACKAGE PH PG) (PROGN (MULTIPLE-VALUE-SETQ (SYM1 A1) (FIND-SYMBOL "X" PG)) (MULTIPLE-VALUE-SETQ (SYM2 A2) (FIND-SYMBOL "Y" PH)) (MULTIPLE-VALUE-SETQ (SYM3 A3) (FIND-SYMBOL "Y" PG)) (MULTIPLE-VALUE-SETQ (SYM4 A4) (FIND-SYMBOL "X" PH)) (AND (EQT A1 :EXTERNAL) (EQT A2 :EXTERNAL) (EQT A3 :INHERITED) (EQT A4 :INHERITED) (EQT SYM1 SYM4) (EQT SYM2 SYM3) (EQT (SYMBOL-PACKAGE SYM1) PG) (EQT (SYMBOL-PACKAGE SYM2) PH) (UNUSE-PACKAGE PG PH) (UNUSE-PACKAGE PH PG)))) (SAFELY-DELETE-PACKAGE PG) (SAFELY-DELETE-PACKAGE PH)))) T)
;; Loading (DEFTEST USE-PACKAGE.7 (LET ((USER-NAME "H") (USED-NAME "G")) (SAFELY-DELETE-PACKAGE USER-NAME) (SAFELY-DELETE-PACKAGE USED-NAME) (LET* ((PUSED (MAKE-PACKAGE USED-NAME :USE NIL)) (PUSER (MAKE-PACKAGE USER-NAME :USE NIL)) (SYM1 (INTERN "FOO" PUSED))) (AND (EQT (EXPORT SYM1 PUSED) T) (NULL (PACKAGE-USED-BY-LIST PUSED)) (NULL (PACKAGE-USED-BY-LIST PUSER)) (NULL (PACKAGE-USE-LIST PUSED)) (NULL (PACKAGE-USE-LIST PUSER)) (EQT (LET ((*PACKAGE* PUSER)) (USE-PACKAGE PUSED)) T) (MULTIPLE-VALUE-BIND (SYM2 ACCESS) (FIND-SYMBOL "FOO" PUSER) (AND (EQT ACCESS :INHERITED) (EQT SYM1 SYM2))) (EQUAL (PACKAGE-USE-LIST PUSER) (LIST PUSED)) (EQUAL (PACKAGE-USED-BY-LIST PUSED) (LIST PUSER)) (NULL (PACKAGE-USE-LIST PUSED)) (NULL (PACKAGE-USED-BY-LIST PUSER)) (EQT (UNUSE-PACKAGE PUSED PUSER) T) (NULL (FIND-SYMBOL "FOO" PUSER))))) T)
;; Loading (DEFMACRO DEF-USE-PACKAGE-TEST (TEST-NAME &KEY (USER "H") (USED "G")) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((USER-NAME (SYSTEM.INTERNALS::BQ-COMMA USER)) (USED-NAME (SYSTEM.INTERNALS::BQ-COMMA USED))) (SAFELY-DELETE-PACKAGE USER-NAME) (SAFELY-DELETE-PACKAGE USED-NAME) (LET* ((PUSED (MAKE-PACKAGE USED-NAME :USE NIL)) (PUSER (MAKE-PACKAGE USER-NAME :USE NIL)) (SYM1 (INTERN "FOO" PUSED))) (AND (EQT (EXPORT SYM1 PUSED) T) (NULL (PACKAGE-USED-BY-LIST PUSED)) (NULL (PACKAGE-USED-BY-LIST PUSER)) (NULL (PACKAGE-USE-LIST PUSED)) (NULL (PACKAGE-USE-LIST PUSER)) (EQT (LET ((*PACKAGE* PUSER)) (USE-PACKAGE PUSED)) T) (MULTIPLE-VALUE-BIND (SYM2 ACCESS) (FIND-SYMBOL "FOO" PUSER) (AND (EQT ACCESS :INHERITED) (EQT SYM1 SYM2))) (EQUAL (PACKAGE-USE-LIST PUSER) (LIST PUSED)) (EQUAL (PACKAGE-USED-BY-LIST PUSED) (LIST PUSER)) (NULL (PACKAGE-USE-LIST PUSED)) (NULL (PACKAGE-USED-BY-LIST PUSER)) (EQT (UNUSE-PACKAGE PUSED PUSER) T) (NULL (FIND-SYMBOL "FOO" PUSER))))) T)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.10 :USER (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.11 :USER (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.12 :USER (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.13 :USER (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.14 :USER (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.15 :USER (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.16 :USER (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.17 :USED (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.18 :USED (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.19 :USED (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.20 :USED (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.21 :USED (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.22 :USED (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEF-USE-PACKAGE-TEST USE-PACKAGE.23 :USED (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 5)))
;; Loading (DEFTEST USE-PACKAGE.ERROR.1 (SIGNALS-ERROR (USE-PACKAGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST USE-PACKAGE.ERROR.2 (PROGN (SAFELY-DELETE-PACKAGE "UPE2A") (SAFELY-DELETE-PACKAGE "UPE2") (MAKE-PACKAGE "UPE2" :USE NIL) (MAKE-PACKAGE "UPE2A" :USE NIL) (SIGNALS-ERROR (USE-PACKAGE "UPE2" "UPE2A" NIL) PROGRAM-ERROR)) T)
;; Loading (LOAD "defpackage.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/defpackage.lsp C136A047>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "package-aux.lsp")
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST DEFPACKAGE.1 (LOOP FOR N IN (QUOTE ("H" #:H #\H)) COUNT (NOT (PROGN (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA N))))))) (AND (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (NULL (DOCUMENTATION P T))))))) 0)
;; Loading (DEFTEST DEFPACKAGE.2 (LOOP FOR N IN (QUOTE ("I" #:I #\I)) COUNT (NOT (IGNORE-ERRORS (PROGN (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:NICKNAMES (SYSTEM.INTERNALS::BQ-COMMA N) "J"))))))) (AND (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES P)) (FUNCTION STRING<)) (QUOTE ("I" "J"))) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (NULL (DOCUMENTATION P T)))))))) 0)
;; Loading (DEFTEST DEFPACKAGE.3 (LET NIL (SAFELY-DELETE-PACKAGE "H") (IGNORE-ERRORS (LET ((P (EVAL (QUOTE (DEFPACKAGE "H" (:DOCUMENTATION "This is a doc string")))))) (AND (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (PROGN (DOCUMENTATION P T) T))))) T)
;; Loading (DEFTEST DEFPACKAGE.4 (PROGN (SET-UP-PACKAGES) (LOOP FOR N IN (QUOTE ("A" :A #\A)) COUNT (NOT (IGNORE-ERRORS (PROGN (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE (SYSTEM.INTERNALS::BQ-COMMA N)))))))) (AND (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) (LIST (FIND-PACKAGE "A"))) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (EQL (NUM-SYMBOLS-IN-PACKAGE P) (NUM-EXTERNAL-SYMBOLS-IN-PACKAGE "A")) (EQUAL (DOCUMENTATION P T) NIL)))))))) 0)
;; Loading (DEFTEST DEFPACKAGE.5 (LET NIL (SAFELY-DELETE-PACKAGE "H") (IGNORE-ERRORS (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE) (:SHADOW "foo"))))))) (MAPCAR (FUNCTION NOTNOT) (LIST (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) NIL) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQL (NUM-SYMBOLS-IN-PACKAGE P) 1) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "foo" P) (AND (EQT ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME SYM) "foo") (EQUAL (SYMBOL-PACKAGE SYM) P) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) (LIST SYM)))) (EQUAL (DOCUMENTATION P T) NIL)))))) (T T T T T T T T))
;; Loading (DEFTEST DEFPACKAGE.6 (LOOP FOR S IN (QUOTE (:\f #\f)) COLLECT (IGNORE-ERRORS (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE) (:SHADOW (SYSTEM.INTERNALS::BQ-COMMA S)))))))) (MAPCAR (FUNCTION NOTNOT) (LIST (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) NIL) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQL (NUM-SYMBOLS-IN-PACKAGE P) 1) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "f" P) (AND (EQT ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME SYM) "f") (EQUAL (SYMBOL-PACKAGE SYM) P) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) (LIST SYM)))) (EQUAL (DOCUMENTATION P T) NIL)))))) ((T T T T T T T T) (T T T T T T T T)))
;; Loading (DEFTEST DEFPACKAGE.7 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET ((PG (MAKE-PACKAGE "G" :USE NIL))) (EXPORT (INTERN "A" PG) PG) (EXPORT (INTERN "foo" PG) PG) (INTERN "bar" PG) (LOOP FOR N IN (QUOTE ("A" :A #\A)) COLLECT (IGNORE-ERRORS (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE) (:SHADOWING-IMPORT-FROM "G" (SYSTEM.INTERNALS::BQ-COMMA N)))))))) (MAPCAR (FUNCTION NOTNOT) (LIST (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) NIL) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQL (NUM-SYMBOLS-IN-PACKAGE P) 1) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "A" P) (AND (EQT ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME SYM) "A") (EQUAL (SYMBOL-PACKAGE SYM) PG) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) (LIST SYM)))) (EQUAL (DOCUMENTATION P T) NIL)))))))) ((T T T T T T T T) (T T T T T T T T) (T T T T T T T T)))
;; Loading (DEFTEST DEFPACKAGE.8 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (LET ((PG (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:INTERN "A" "B" "C")))))) (LOOP FOR PN IN (QUOTE ("G" #:G #\G)) COLLECT (LOOP FOR N IN (QUOTE ("B" #:B #\B)) COLLECT (IGNORE-ERRORS (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE) (:IMPORT-FROM (SYSTEM.INTERNALS::BQ-COMMA PN) (SYSTEM.INTERNALS::BQ-COMMA N) "A"))))))) (MAPCAR (FUNCTION NOTNOT) (LIST (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) NIL) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (EQL (NUM-SYMBOLS-IN-PACKAGE P) 2) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "A" P) (AND (EQT ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME SYM) "A") (EQUAL (SYMBOL-PACKAGE SYM) PG))) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL "B" P) (AND (EQT ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME SYM) "B") (EQUAL (SYMBOL-PACKAGE SYM) PG))) (EQUAL (DOCUMENTATION P T) NIL))))))))) (((T T T T T T T T T T) (T T T T T T T T T T) (T T T T T T T T T T)) ((T T T T T T T T T T) (T T T T T T T T T T) (T T T T T T T T T T)) ((T T T T T T T T T T) (T T T T T T T T T T) (T T T T T T T T T T))))
;; Loading (DEFTEST DEFPACKAGE.9 (PROGN (LOOP FOR N IN (QUOTE ("Z" #:Z #\Z)) COLLECT (IGNORE-ERRORS (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:EXPORT "Q" (SYSTEM.INTERNALS::BQ-COMMA N) "R") (:USE))))))) (MAPCAR (FUNCTION NOTNOT) (LIST (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) NIL) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (EQL (NUM-SYMBOLS-IN-PACKAGE P) 3) (LOOP FOR S IN (QUOTE ("Q" "Z" "R")) DO (UNLESS (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL S P) (AND (EQT ACCESS :EXTERNAL) (EQUAL (SYMBOL-NAME SYM) S) (EQUAL (SYMBOL-PACKAGE SYM) P))) (RETURN NIL)) FINALLY (RETURN T)))))))) ((T T T T T T T T) (T T T T T T T T) (T T T T T T T T)))
;; Loading (DEFTEST DEFPACKAGE.10 (PROGN (LOOP FOR N IN (QUOTE ("Z" #:Z #\Z)) COLLECT (IGNORE-ERRORS (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:INTERN "Q" (SYSTEM.INTERNALS::BQ-COMMA N) "R") (:USE))))))) (MAPCAR (FUNCTION NOTNOT) (LIST (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) NIL) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (EQL (NUM-SYMBOLS-IN-PACKAGE P) 3) (LOOP FOR S IN (QUOTE ("Q" "Z" "R")) DO (UNLESS (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL S P) (AND (EQT ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME SYM) S) (EQUAL (SYMBOL-PACKAGE SYM) P))) (RETURN NIL)) FINALLY (RETURN T)))))))) ((T T T T T T T T) (T T T T T T T T) (T T T T T T T T)))
;; Loading (DEFTEST DEFPACKAGE.11 (LET NIL (IGNORE-ERRORS (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (QUOTE (DEFPACKAGE "H" (:USE) (:SIZE 0))))))) (MAPCAR (FUNCTION NOTNOT) (LIST (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) NIL) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (ZEROP (NUM-SYMBOLS-IN-PACKAGE P))))))) (T T T T T T T))
;; Loading (DEFTEST DEFPACKAGE.12 (LET NIL (IGNORE-ERRORS (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (QUOTE (DEFPACKAGE "H" (:USE) (:SIZE 10000))))))) (MAPCAR (FUNCTION NOTNOT) (LIST (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USE-LIST P) NIL) (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (PACKAGE-NICKNAMES P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (ZEROP (NUM-SYMBOLS-IN-PACKAGE P))))))) (T T T T T T T))
;; Loading (DEFTEST DEFPACKAGE.13 (PROGN (SAFELY-DELETE-PACKAGE "H") (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SIZE 10) (:SIZE 20)) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.14 (PROGN (SAFELY-DELETE-PACKAGE "H") (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:DOCUMENTATION "foo") (:DOCUMENTATION "bar")) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.15 (PROGN (SAFELY-DELETE-PACKAGE "H") (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:NICKNAMES "A")) PACKAGE-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.16 (PROGN (SAFELY-DELETE-PACKAGE "H") (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:NICKNAMES "Q")) PACKAGE-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.17 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOW "A") (:SHADOWING-IMPORT-FROM "G" "A")) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.18 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOW "A") (:IMPORT-FROM "G" "A")) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.19 (PROGN (SAFELY-DELETE-PACKAGE "H") (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOW "A") (:INTERN "A")) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.20 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOWING-IMPORT-FROM "G" "A") (:IMPORT-FROM "G" "A")) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.21 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOWING-IMPORT-FROM "G" "A") (:INTERN "A")) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.22 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:IMPORT-FROM "G" "A") (:INTERN "A")) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.23 (PROGN (SAFELY-DELETE-PACKAGE "H") (SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:EXPORT "A") (:INTERN "A")) PROGRAM-ERROR)) T)
;; Loading (DEFTEST DEFPACKAGE.24 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE)))) (HANDLE-NON-ABORT-RESTART (EVAL (QUOTE (DEFPACKAGE "H" (:SHADOWING-IMPORT-FROM "G" "NOT-THERE")))))) SUCCESS)
;; Loading (DEFTEST DEFPACKAGE.25 (PROGN (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE)))) (HANDLE-NON-ABORT-RESTART (EVAL (QUOTE (DEFPACKAGE "H" (:IMPORT-FROM "G" "NOT-THERE")))))) SUCCESS)
;; Loading (DEFTEST DEFPACKAGE.26 (LET NIL (IGNORE-ERRORS (FLET ((%DO-IT% (ARGS) (SAFELY-DELETE-PACKAGE "H") (SAFELY-DELETE-PACKAGE "G1") (SAFELY-DELETE-PACKAGE "G2") (SAFELY-DELETE-PACKAGE "G3") (LET ((PG1 (PROGN (FORMAT T "Making G1...~%") (EVAL (QUOTE (DEFPACKAGE "G1" (:USE) (:EXPORT "A" "B" "C") (:INTERN "D" "E" "F")))))) (PG2 (PROGN (FORMAT T "Making G2...~%") (EVAL (QUOTE (DEFPACKAGE "G2" (:USE) (:EXPORT "A" "D" "G") (:INTERN "E" "H" "I")))))) (PG3 (PROGN (FORMAT T "Making G3...~%") (EVAL (QUOTE (DEFPACKAGE "G3" (:USE) (:EXPORT "J" "K" "L") (:INTERN "M" "N" "O"))))))) (LET ((P (EVAL (LIST* (QUOTE DEFPACKAGE) "H" (COPY-TREE ARGS))))) (PROG NIL (UNLESS (PACKAGEP P) (RETURN 1)) (UNLESS (EQUAL (PACKAGE-NAME P) "H") (RETURN 2)) (UNLESS (EQUAL (PACKAGE-NAME PG1) "G1") (RETURN 3)) (UNLESS (EQUAL (PACKAGE-NAME PG2) "G2") (RETURN 4)) (UNLESS (EQUAL (PACKAGE-NAME PG3) "G3") (RETURN 5)) (UNLESS (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES P)) (FUNCTION STRING<)) (QUOTE ("H1" "H2"))) (RETURN 6)) (UNLESS (OR (EQUAL (PACKAGE-USE-LIST P) (LIST PG1 PG2)) (EQUAL (PACKAGE-USE-LIST P) (LIST PG2 PG1))) (RETURN 7)) (UNLESS (EQUAL (PACKAGE-USED-BY-LIST PG1) (LIST P)) (RETURN 8)) (UNLESS (EQUAL (PACKAGE-USED-BY-LIST PG2) (LIST P)) (RETURN 9)) (WHEN (PACKAGE-USED-BY-LIST PG3) (RETURN 10)) (UNLESS (EQUAL (SORT (MAPCAR (FUNCTION SYMBOL-NAME) (PACKAGE-SHADOWING-SYMBOLS P)) (FUNCTION STRING<)) (QUOTE ("A" "B"))) (RETURN 10)) (LET ((NUM 11)) (UNLESS (EVERY (FUNCTION (LAMBDA (STR ACC PKG) (MULTIPLE-VALUE-BIND* (SYM ACCESS) (FIND-SYMBOL STR P) (OR (AND (OR (NOT ACC) (EQUAL (SYMBOL-NAME SYM) STR)) (OR (NOT ACC) (EQUAL (SYMBOL-PACKAGE SYM) PKG)) (EQUAL ACCESS ACC) (INCF NUM)) (PROGN (FORMAT T "Failed on str = ~S, acc = ~S, pkg = ~S, sym = ~S, access = ~S~%" STR ACC PKG SYM ACCESS) NIL))))) (LIST "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O") (LIST :INTERNAL :INTERNAL :EXTERNAL :INHERITED NIL NIL :INHERITED :INTERNAL NIL NIL NIL :EXTERNAL NIL NIL :INTERNAL) (LIST PG2 P PG1 PG2 NIL NIL PG2 P NIL NIL NIL PG3 NIL NIL PG3)) (RETURN NUM))) (RETURN (QUOTE SUCCESS))))))) (LET ((ARGS (QUOTE ((:NICKNAMES "H1" "H2") (:USE "G1" "G2") (:SHADOW "B") (:SHADOWING-IMPORT-FROM "G2" "A") (:IMPORT-FROM "G3" "L" "O") (:INTERN "D" "H") (:EXPORT "L" "C") (:SIZE 20) (:DOCUMENTATION "A test package"))))) (LIST (%DO-IT% ARGS) (%DO-IT% (REVERSE ARGS))))))) (SUCCESS SUCCESS))
;; Loading (DEF-MACRO-TEST DEFPACKAGE.ERROR.1 (DEFPACKAGE :NONEXISTENT-PACKAGE (:USE)))
;; Loading (LOAD "do-symbols.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/do-symbols.lsp C1719BA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "package-aux.lsp")
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST DO-SYMBOLS.1 (PROGN (SET-UP-PACKAGES) (EQUALT (REMOVE-DUPLICATES (SORT-SYMBOLS (LET ((ALL NIL)) (DO-SYMBOLS (X "B" ALL) (PUSH X ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A")))) T)
;; Loading (DEFUN COLLECT-SYMBOLS (PKG) (REMOVE-DUPLICATES (SORT-SYMBOLS (LET ((ALL NIL)) (DO-SYMBOLS (X PKG ALL) (PUSH X ALL))))))
;; Loading (DEFTEST DO-SYMBOLS.2 (COLLECT-SYMBOLS "DS1") (DS1:A DS1:B DS1::C DS1::D))
;; Loading (DEFTEST DO-SYMBOLS.3 (COLLECT-SYMBOLS "DS2") (DS2:A DS2::E DS2::F DS2:G DS2:H))
;; Loading (DEFTEST DO-SYMBOLS.4 (COLLECT-SYMBOLS "DS3") (DS1:A DS1:B DS2:G DS2:H DS3:I DS3:J DS3:K DS3::L DS3::M))
;; Loading (DEFTEST DO-SYMBOLS.5 (REMOVE-DUPLICATES (COLLECT-SYMBOLS "DS4") :TEST (FUNCTION (LAMBDA (X Y) (AND (EQT X Y) (NOT (EQT X (QUOTE DS1:B))))))) (DS1:A DS1:B DS2::F DS2:G DS3:I DS3:J DS3:K DS4::X DS4::Y DS4::Z))
;; Loading (DEFTEST DO-SYMBOLS.6 (DO-SYMBOLS (S "DS1") (DECLARE (IGNORE S)) T) NIL)
;; Loading (DEFTEST DO-SYMBOLS.7 (LET ((X NIL) (*PACKAGE* (FIND-PACKAGE "DS1"))) (LIST (DO-SYMBOLS (S) (PUSH S X)) (SORT-SYMBOLS X))) (NIL (DS1:A DS1:B DS1::C DS1::D)))
;; Loading (DEFTEST DO-SYMBOLS.8 (HANDLER-CASE (LET ((X NIL)) (LIST (DO-SYMBOLS (S "DS1") (WHEN (EQUALT (SYMBOL-NAME S) "C") (GO BAR)) (PUSH S X) (GO FOO) BAR (PUSH T X) FOO) (SORT-SYMBOLS X))) (ERROR (C) C)) (NIL (DS1:A DS1:B DS1::D T)))
;; Loading (DEFMACRO DEF-DO-SYMBOLS-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (ASSERT (STRING= NAME "B")) (SET-UP-PACKAGES) (EQUALT (REMOVE-DUPLICATES (SORT-SYMBOLS (LET ((ALL NIL)) (DO-SYMBOLS (X NAME ALL) (PUSH X ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A")))) T)))
;; Loading (DEF-DO-SYMBOLS-TEST DO-SYMBOLS.9 (MAKE-ARRAY 1 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "B"))
;; Loading (DEF-DO-SYMBOLS-TEST DO-SYMBOLS.10 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 1 :INITIAL-CONTENTS "BXXXX"))
;; Loading (DEF-DO-SYMBOLS-TEST DO-SYMBOLS.11 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 1 :INITIAL-CONTENTS "BXXXX"))
;; Loading (DEF-DO-SYMBOLS-TEST DO-SYMBOLS.12 (MAKE-ARRAY 1 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "B"))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-DO-SYMBOLS-TEST DO-SYMBOLS.13 (MAKE-ARRAY 1 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "B"))
;; Loading (DEF-DO-SYMBOLS-TEST DO-SYMBOLS.14 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 4 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XBYZ"))) (MAKE-ARRAY 1 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEF-DO-SYMBOLS-TEST DO-SYMBOLS.15 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 4 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XBYZ"))) (MAKE-ARRAY 1 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEFTEST DO-SYMBOLS.16 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (DO-SYMBOLS (S (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DO-SYMBOLS.17 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO-SYMBOLS (S "CL-TEST" X) (DECLARE (SPECIAL X))))) :GOOD)
;; Loading (DEFTEST DO-SYMBOLS.18 (MACROLET ((%M (Z) Z)) (DO-SYMBOLS (S (EXPAND-IN-CURRENT-ENV (%M "CL-TEST")) :GOOD))) :GOOD)
;; Loading (DEFTEST DO-SYMBOLS.19 (MACROLET ((%M (Z) Z)) (DO-SYMBOLS (S "CL-TEST" (EXPAND-IN-CURRENT-ENV (%M :GOOD))))) :GOOD)
;; Loading (DEF-MACRO-TEST DO-SYMBOLS.ERROR.1 (DO-SYMBOLS (X "CL")))
;; Loading (LOAD "do-external-symbols.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/do-external-symbols.lsp 811207B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "package-aux.lsp")
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFUN COLLECT-EXTERNAL-SYMBOLS (PKG) (REMOVE-DUPLICATES (SORT-SYMBOLS (LET ((ALL NIL)) (DO-EXTERNAL-SYMBOLS (X PKG ALL) (PUSH X ALL))))))
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.1 (COLLECT-EXTERNAL-SYMBOLS "DS1") (DS1:A DS1:B))
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.2 (COLLECT-EXTERNAL-SYMBOLS "DS2") (DS2:A DS2:G DS2:H))
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.3 (COLLECT-EXTERNAL-SYMBOLS "DS3") (DS1:A DS1:B DS2:G DS3:I DS3:J DS3:K))
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.4 (COLLECT-EXTERNAL-SYMBOLS "DS4") NIL)
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.5 (EQUALT (COLLECT-EXTERNAL-SYMBOLS "KEYWORD") (COLLECT-SYMBOLS "KEYWORD")) T)
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.6 (DO-EXTERNAL-SYMBOLS (S "DS1") (DECLARE (IGNORE S)) T) NIL)
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.7 (LET ((X NIL) (*PACKAGE* (FIND-PACKAGE "DS1"))) (LIST (DO-EXTERNAL-SYMBOLS (S) (PUSH S X)) (SORT-SYMBOLS X))) (NIL (DS1:A DS1:B)))
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.8 (HANDLER-CASE (LET ((X NIL)) (LIST (DO-EXTERNAL-SYMBOLS (S "DS1") (WHEN (EQUALT (SYMBOL-NAME S) "A") (GO BAR)) (PUSH S X) (GO FOO) BAR (PUSH T X) FOO) (SORT-SYMBOLS X))) (ERROR (C) C)) (NIL (DS1:B T)))
;; Loading (DEFMACRO DEF-DO-EXTERNAL-SYMBOLS-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (COLLECT-EXTERNAL-SYMBOLS (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM)) (DS1:A DS1:B))))
;; Loading (DEF-DO-EXTERNAL-SYMBOLS-TEST DO-EXTERNAL-SYMBOLS.9 (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "DS1"))
;; Loading (DEF-DO-EXTERNAL-SYMBOLS-TEST DO-EXTERNAL-SYMBOLS.10 (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "DS1XXX" :FILL-POINTER 3))
;; Loading (DEF-DO-EXTERNAL-SYMBOLS-TEST DO-EXTERNAL-SYMBOLS.11 (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "DS1XXX" :FILL-POINTER 3))
;; Loading (DEF-DO-EXTERNAL-SYMBOLS-TEST DO-EXTERNAL-SYMBOLS.12 (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "DS1" :ADJUSTABLE T))
;; Loading (DEF-DO-EXTERNAL-SYMBOLS-TEST DO-EXTERNAL-SYMBOLS.13 (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "DS1" :ADJUSTABLE T))
;; Loading (DEF-DO-EXTERNAL-SYMBOLS-TEST DO-EXTERNAL-SYMBOLS.14 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 6 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XDS1XX"))) (MAKE-ARRAY 3 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEF-DO-EXTERNAL-SYMBOLS-TEST DO-EXTERNAL-SYMBOLS.15 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 6 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XDS1XX"))) (MAKE-ARRAY 3 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 1)))
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.16 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (DO-EXTERNAL-SYMBOLS (S (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.17 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO-EXTERNAL-SYMBOLS (S "CL-TEST" X) (DECLARE (SPECIAL X))))) :GOOD)
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.18 (MACROLET ((%M (Z) Z)) (DO-EXTERNAL-SYMBOLS (S (EXPAND-IN-CURRENT-ENV (%M "CL-TEST")) :GOOD))) :GOOD)
;; Loading (DEFTEST DO-EXTERNAL-SYMBOLS.19 (MACROLET ((%M (Z) Z)) (DO-EXTERNAL-SYMBOLS (S "CL-TEST" (EXPAND-IN-CURRENT-ENV (%M :GOOD))))) :GOOD)
;; Loading (DEF-MACRO-TEST DO-EXTERNAL-SYMBOLS.ERROR.1 (DO-EXTERNAL-SYMBOLS (X "CL")))
;; Loading (LOAD "do-all-symbols.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/do-all-symbols.lsp 8124FB87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEF-MACRO-TEST DO-ALL-SYMBOLS.ERROR.1 (DO-ALL-SYMBOLS (X)))
;; Loading (DEFTEST DO-ALL-SYMBOLS.1 (LET ((SYMBOLS NIL)) (DO-ALL-SYMBOLS (SYM) (PUSH SYM SYMBOLS)) (LET ((HASH (MAKE-HASH-TABLE :TEST (QUOTE EQ)))) (WITH-PACKAGE-ITERATOR (F (LIST-ALL-PACKAGES) :INTERNAL :EXTERNAL :INHERITED) (LOOP (MULTIPLE-VALUE-BIND (FOUND SYM) (F) (UNLESS FOUND (RETURN)) (SETF (GETHASH SYM HASH) T)))) (LOOP FOR S IN SYMBOLS UNLESS (GETHASH S HASH) COLLECT S))) NIL)
;; Loading (DEFTEST DO-ALL-SYMBOLS.2 (LET ((SYMBOLS NIL)) (WITH-PACKAGE-ITERATOR (F (LIST-ALL-PACKAGES) :INTERNAL :EXTERNAL :INHERITED) (LOOP (MULTIPLE-VALUE-BIND (FOUND SYM) (F) (UNLESS FOUND (RETURN)) (SYSTEM.INTERNALS::BACKQUOTE (PUSH SYM SYMBOLS))))) (LET ((HASH (MAKE-HASH-TABLE :TEST (QUOTE EQ)))) (DO-ALL-SYMBOLS (S) (SETF (GETHASH S HASH) T)) (LOOP FOR S IN SYMBOLS UNLESS (GETHASH S HASH) COLLECT S))) NIL)
;; Loading (DEFTEST DO-ALL-SYMBOLS.3 (LET ((SYM (GENSYM))) (DO-ALL-SYMBOLS (S T) (ASSERT (NOT (EQ S SYM))))) T)
;; Loading (DEFTEST DO-ALL-SYMBOLS.4 (LET ((X :BAD)) (DO-ALL-SYMBOLS (X X))) NIL)
;; Loading (DEFTEST DO-ALL-SYMBOLS.5 (BLOCK NIL (DO-ALL-SYMBOLS (X (RETURN :BAD))) :GOOD) :GOOD)
;; Loading (DEFTEST DO-ALL-SYMBOLS.6 (DO-ALL-SYMBOLS (X :BAD) (RETURN :GOOD)) :GOOD)
;; Loading (DEFTEST DO-ALL-SYMBOLS.7 (BLOCK DONE (TAGBODY (DO-ALL-SYMBOLS (X (RETURN-FROM DONE :GOOD)) (GO 1) (RETURN-FROM DONE :BAD1) 1) 1 (RETURN-FROM DONE :BAD2))) :GOOD)
;; Loading (DEFTEST DO-ALL-SYMBOLS.8 (BLOCK DONE (TAGBODY (DO-ALL-SYMBOLS (X (RETURN-FROM DONE :GOOD)) (GO TAG) (RETURN-FROM DONE :BAD1) TAG) TAG (RETURN-FROM DONE :BAD2))) :GOOD)
;; Loading (DEFTEST DO-ALL-SYMBOLS.9 (LET ((X 0) (Y 1)) (DO-ALL-SYMBOLS (Z NIL) (DECLARE (TYPE (INTEGER * 0) X)) (DECLARE (TYPE (INTEGER 1 *) Y)) (DECLARE (IGNORE Z)) (WHEN (< X Y) (RETURN :GOOD)))) :GOOD)
;; Loading (DEFTEST DO-ALL-SYMBOLS.10 (DO-ALL-SYMBOLS (S) (DECLARE (IGNORE S))) NIL)
;; Loading (DEFTEST DO-ALL-SYMBOLS.11 (LET ((X :GOOD)) (DECLARE (SPECIAL X)) (LET ((X :BAD)) (DO-ALL-SYMBOLS (S X) (DECLARE (SPECIAL X))))) :GOOD)
;; Loading (DEFTEST DO-ALL-SYMBOLS.12 (LET ((SHOULD-HAVE-RETURNED NIL)) (BLOCK DONE (DO-ALL-SYMBOLS (S :BAD1) (WHEN SHOULD-HAVE-RETURNED (RETURN-FROM DONE :BAD2)) (SETQ SHOULD-HAVE-RETURNED T) (RETURN :GOOD)))) :GOOD)
;; Loading (DEFTEST DO-ALL-SYMBOLS.13 (MACROLET ((%M (Z) Z)) (DO-ALL-SYMBOLS (S (EXPAND-IN-CURRENT-ENV (%M :GOOD))))) :GOOD)
;; Loading (LOAD "packagep.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/packagep.lsp 81301767>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PACKAGEP.1 (CHECK-TYPE-PREDICATE (FUNCTION PACKAGEP) (QUOTE PACKAGE)) NIL)
;; Loading (DEFTEST PACKAGEP.2 (NOT-MV (PACKAGEP *PACKAGE*)) NIL)
;; Loading (DEFTEST PACKAGEP.ERROR.1 (SIGNALS-ERROR (PACKAGEP) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGEP.ERROR.2 (SIGNALS-ERROR (PACKAGEP NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "package-error.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/package-error.lsp 8132EF97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PACKAGE-ERROR.1 (NOT (TYPEP (MAKE-CONDITION (QUOTE PACKAGE-ERROR) :PACKAGE "CL") (QUOTE PACKAGE-ERROR))) NIL)
;; Loading (DEFTEST PACKAGE-ERROR.2 (NOT (TYPEP (MAKE-CONDITION (QUOTE PACKAGE-ERROR) :PACKAGE (FIND-PACKAGE "CL")) (QUOTE PACKAGE-ERROR))) NIL)
;; Loading (DEFTEST PACKAGE-ERROR.3 (SUBTYPEP* (QUOTE PACKAGE-ERROR) (QUOTE ERROR)) T T)
;; Loading (DEFTEST PACKAGE-ERROR.4 (NOT (TYPEP (MAKE-CONDITION (QUOTE PACKAGE-ERROR) :PACKAGE (FIND-PACKAGE (QUOTE #:CL))) (QUOTE PACKAGE-ERROR))) NIL)
;; Loading (LOAD "package-error-package.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/package-error-package.lsp 81366DC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PACKAGE-ERROR-PACKAGE.1 (EQT (FIND-PACKAGE (PACKAGE-ERROR-PACKAGE (MAKE-CONDITION (QUOTE PACKAGE-ERROR) :PACKAGE "CL"))) (FIND-PACKAGE "CL")) T)
;; Loading (DEFTEST PACKAGE-ERROR-PACKAGE.2 (EQT (FIND-PACKAGE (PACKAGE-ERROR-PACKAGE (MAKE-CONDITION (QUOTE PACKAGE-ERROR) :PACKAGE (FIND-PACKAGE "CL")))) (FIND-PACKAGE "CL")) T)
;; Loading (DEFTEST PACKAGE-ERROR-PACKAGE.3 (EQT (FIND-PACKAGE (PACKAGE-ERROR-PACKAGE (MAKE-CONDITION (QUOTE PACKAGE-ERROR) :PACKAGE (QUOTE #:CL)))) (FIND-PACKAGE "CL")) T)
;; Loading (DEFTEST PACKAGE-ERROR-PACKAGE.4 (EQT (FIND-PACKAGE (PACKAGE-ERROR-PACKAGE (MAKE-CONDITION (QUOTE PACKAGE-ERROR) :PACKAGE #\A))) (FIND-PACKAGE "A")) T)
;; Loading (DEFTEST PACKAGE-ERROR-PACKAGE.ERROR.1 (SIGNALS-ERROR (PACKAGE-ERROR-PACKAGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGE-ERROR-PACKAGE.ERROR.2 (SIGNALS-ERROR (PACKAGE-ERROR-PACKAGE (MAKE-CONDITION (QUOTE PACKAGE-ERROR) :PACKAGE #\A) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "keyword.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/keyword.lsp 813B85B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST KEYWORD.1 (DO-SYMBOLS (S "KEYWORD" T) (UNLESS (KEYWORDP S) (RETURN (LIST S NIL)))) T)
;; Loading (DEFTEST KEYWORD.2 (DO-SYMBOLS (S "KEYWORD" T) (MULTIPLE-VALUE-BIND (S2 ACCESS) (FIND-SYMBOL (SYMBOL-NAME S) "KEYWORD") (UNLESS (AND (EQT S S2) (EQT ACCESS :EXTERNAL)) (RETURN (LIST S2 ACCESS))))) T)
;; Loading (DEFTEST KEYWORD.3 (DO-SYMBOLS (S "KEYWORD" T) (COND ((NOT (BOUNDP S)) (RETURN (LIST S "NOT-BOUND"))) ((NOT (EQT S (EVAL S))) (RETURN (LIST S (EVAL S)))))) T)
;; Loading (LOAD "package-shadowing-symbols.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/package-shadowing-symbols.lsp 8143F677>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFMACRO DEF-PACKAGE-SHADOWING-SYMBOLS-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (LET ((P (MAKE-PACKAGE NAME :USE NIL))) (PACKAGE-SHADOWING-SYMBOLS P))) NIL)))
;; Loading (DEF-PACKAGE-SHADOWING-SYMBOLS-TEST PACKAGE-SHADOWING-SYMBOLS.1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-SHADOWING-SYMBOLS-TEST PACKAGE-SHADOWING-SYMBOLS.2 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????"))
;; Loading (DEF-PACKAGE-SHADOWING-SYMBOLS-TEST PACKAGE-SHADOWING-SYMBOLS.3 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????"))
;; Loading (DEF-PACKAGE-SHADOWING-SYMBOLS-TEST PACKAGE-SHADOWING-SYMBOLS.4 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-SHADOWING-SYMBOLS-TEST PACKAGE-SHADOWING-SYMBOLS.5 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-SHADOWING-SYMBOLS-TEST PACKAGE-SHADOWING-SYMBOLS.6 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEF-PACKAGE-SHADOWING-SYMBOLS-TEST PACKAGE-SHADOWING-SYMBOLS.7 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEFTEST PACKAGE-SHADOWING-SYMBOLS.ERROR.1 (SIGNALS-ERROR (PACKAGE-SHADOWING-SYMBOLS) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGE-SHADOWING-SYMBOLS.ERROR.2 (SIGNALS-ERROR (PACKAGE-SHADOWING-SYMBOLS "CL" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "package-use-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/package-use-list.lsp 814DA557>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFMACRO DEF-PACKAGE-USE-LIST-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (LET ((P (MAKE-PACKAGE NAME :USE NIL))) (PACKAGE-USE-LIST P))) NIL)))
;; Loading (DEF-PACKAGE-USE-LIST-TEST PACKAGE-USE-LIST.1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-USE-LIST-TEST PACKAGE-USE-LIST.2 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????"))
;; Loading (DEF-PACKAGE-USE-LIST-TEST PACKAGE-USE-LIST.3 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????"))
;; Loading (DEF-PACKAGE-USE-LIST-TEST PACKAGE-USE-LIST.4 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-USE-LIST-TEST PACKAGE-USE-LIST.5 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-USE-LIST-TEST PACKAGE-USE-LIST.6 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEF-PACKAGE-USE-LIST-TEST PACKAGE-USE-LIST.7 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEFTEST PACKAGE-USE-LIST.ERROR.1 (SIGNALS-ERROR (PACKAGE-USE-LIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGE-USE-LIST.ERROR.2 (SIGNALS-ERROR (PACKAGE-USE-LIST "CL" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "package-used-by-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/package-used-by-list.lsp 8156DCF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFMACRO DEF-PACKAGE-USED-BY-LIST-TEST (TEST-NAME NAME-FORM) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA TEST-NAME) (LET ((NAME (SYSTEM.INTERNALS::BQ-COMMA NAME-FORM))) (SAFELY-DELETE-PACKAGE NAME) (LET ((P (MAKE-PACKAGE NAME :USE NIL))) (PACKAGE-USED-BY-LIST P))) NIL)))
;; Loading (DEF-PACKAGE-USED-BY-LIST-TEST PACKAGE-USED-BY-LIST.1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-USED-BY-LIST-TEST PACKAGE-USED-BY-LIST.2 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????"))
;; Loading (DEF-PACKAGE-USED-BY-LIST-TEST PACKAGE-USED-BY-LIST.3 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-CONTENTS "TEST1?????"))
;; Loading (DEF-PACKAGE-USED-BY-LIST-TEST PACKAGE-USED-BY-LIST.4 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-USED-BY-LIST-TEST PACKAGE-USED-BY-LIST.5 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "TEST1"))
;; Loading (DEF-PACKAGE-USED-BY-LIST-TEST PACKAGE-USED-BY-LIST.6 (LET* ((ETYPE (QUOTE BASE-CHAR)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEF-PACKAGE-USED-BY-LIST-TEST PACKAGE-USED-BY-LIST.7 (LET* ((ETYPE (QUOTE CHARACTER)) (NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS "XXTEST1XXX"))) (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :DISPLACED-TO NAME0 :DISPLACED-INDEX-OFFSET 2)))
;; Loading (DEFTEST PACKAGE-USED-BY-LIST.ERROR.1 (SIGNALS-ERROR (PACKAGE-USED-BY-LIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST PACKAGE-USED-BY-LIST.ERROR.2 (SIGNALS-ERROR (PACKAGE-USED-BY-LIST "CL" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "import.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/import.lsp 81604197>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "package-aux.lsp")
;; Loading (DEFVAR *IMPORT-PACKAGE-TEST-NAME* (LOOP FOR I FROM 1 FOR NAME = (FORMAT NIL "ITP-~A" I) UNLESS (FIND-PACKAGE NAME) RETURN NAME))
;; Loading (DEFTEST IMPORT.1 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT SYM PKG)) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST)) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.2 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT (LIST SYM) PKG)) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST)) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.3 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((*PACKAGE* (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT SYM)) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM)) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST)) (EXTERNAL-SYMBOLS-IN-PACKAGE *PACKAGE*)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.4 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYMS (QUOTE (FOO BAR BAZ)))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT SYMS PKG)) (LOOP FOR SYM IN SYMS ALWAYS (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM)) (LOOP FOR SYM IN SYMS ALWAYS (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST))) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.5 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (MAKE-SYMBOL (SYMBOL-NAME :FOO)))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT SYM PKG)) (EQLT (SYMBOL-PACKAGE SYM) PKG) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.6 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET* ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (INTERN (SYMBOL-NAME :FOO) PKG))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT SYM PKG)) (EQLT (SYMBOL-PACKAGE SYM) PKG) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.7 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET* ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE) (:EXPORT #:FOO))))) (SYM (INTERN (SYMBOL-NAME :FOO) PKG))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT SYM PKG)) (EQLT (SYMBOL-PACKAGE SYM) PKG) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (LENGTH (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)) (EQLT (CAR (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)) SYM)))) (T) T T 1 T)
;; Loading (DEFTEST IMPORT.8 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT SYM PKG-NAME)) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST)) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.9 (LET ((PKG-NAME "Z")) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO))) (VALUES (MULTIPLE-VALUE-LIST (IMPORT SYM #\Z)) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST)) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.10 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO))) (VALUES (LET ((PNAME (MAKE-ARRAY (LENGTH PKG-NAME) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS PKG-NAME))) (MULTIPLE-VALUE-LIST (IMPORT SYM PNAME))) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST)) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.11 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO))) (VALUES (LET ((PNAME (MAKE-ARRAY (+ 3 (LENGTH PKG-NAME)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER (LENGTH PKG-NAME) :INITIAL-CONTENTS (CONCATENATE (QUOTE STRING) PKG-NAME "XYZ")))) (MULTIPLE-VALUE-LIST (IMPORT SYM PNAME))) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST)) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.12 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO))) (VALUES (LET* ((PNAME0 (MAKE-ARRAY (+ 4 (LENGTH PKG-NAME)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER (LENGTH PKG-NAME) :INITIAL-CONTENTS (CONCATENATE (QUOTE STRING) "  " PKG-NAME "XY"))) (PNAME (MAKE-ARRAY (LENGTH PKG-NAME) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO PNAME0 :DISPLACED-INDEX-OFFSET 2))) (MULTIPLE-VALUE-LIST (IMPORT SYM PNAME))) (EQLT (FIND-SYMBOL (SYMBOL-NAME SYM) PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE :CL-TEST)) (EXTERNAL-SYMBOLS-IN-PACKAGE PKG)))) (T) T T NIL)
;; Loading (DEFTEST IMPORT.ERROR.1 (SIGNALS-ERROR (IMPORT) PROGRAM-ERROR) T)
;; Loading (DEFTEST IMPORT.ERROR.2 (SIGNALS-ERROR (IMPORT (QUOTE NIL) (FIND-PACKAGE :CL-TEST) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST IMPORT.ERROR.3 (SIGNALS-ERROR (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET* ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO)) (NAME (SYMBOL-NAME SYM))) (INTERN NAME PKG) (IMPORT SYM PKG))) PACKAGE-ERROR) T)
;; Loading (DEFTEST IMPORT.ERROR.4 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET* ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO)) (NAME (SYMBOL-NAME SYM)) (ISYM (INTERN NAME PKG)) (OUTER-RESTARTS (COMPUTE-RESTARTS))) (BLOCK DONE (AND (HANDLER-BIND ((PACKAGE-ERROR (FUNCTION (LAMBDA (C) (LET ((MY-RESTARTS (REMOVE (QUOTE ABORT) (SET-DIFFERENCE (COMPUTE-RESTARTS C) OUTER-RESTARTS) :KEY (FUNCTION RESTART-NAME)))) (ASSERT MY-RESTARTS) (RETURN-FROM DONE :GOOD)))))) (IMPORT SYM PKG)) (EQLT (FIND-SYMBOL NAME PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE "CL-TEST")) :GOOD)))) :GOOD)
;; Loading (DEFTEST IMPORT.ERROR.5 (LET ((PKG-NAME *IMPORT-PACKAGE-TEST-NAME*)) (SAFELY-DELETE-PACKAGE PKG-NAME) (LET* ((PKG (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG-NAME) (:USE))))) (SYM (QUOTE FOO)) (NAME (SYMBOL-NAME SYM)) (ISYM (SHADOW NAME PKG)) (OUTER-RESTARTS (COMPUTE-RESTARTS))) (BLOCK DONE (AND (HANDLER-BIND ((PACKAGE-ERROR (FUNCTION (LAMBDA (C) (LET ((MY-RESTARTS (REMOVE (QUOTE ABORT) (SET-DIFFERENCE (COMPUTE-RESTARTS C) OUTER-RESTARTS) :KEY (FUNCTION RESTART-NAME)))) (ASSERT MY-RESTARTS) (RETURN-FROM DONE :GOOD)))))) (IMPORT SYM PKG)) (EQLT (FIND-SYMBOL NAME PKG) SYM) (EQLT (SYMBOL-PACKAGE SYM) (FIND-PACKAGE "CL-TEST")) :GOOD)))) :GOOD)
;; Loading (LOAD "load-numbers.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-numbers.lsp 817F1A07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/numbers-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (COMPILE-AND-LOAD "random-aux.lsp")).
;; Compiling form (DEFUN FLOAT-BINARY-SEARCH (FN LO HI) "FN is a function that, if true for X, is true for all Y > X.
   Find the smallest float in [lo,hi] for which the function
   return true." (ASSERT (FUNCTIONP FN)) (ASSERT (FLOATP LO)) (ASSERT (FLOATP HI)) (ASSERT (<= LO HI)) (ASSERT (FUNCALL FN HI)) (LOOP WHILE (<= LO HI) DO (LET ((MID (/ (+ LO HI) 2))) (IF (FUNCALL FN MID) (IF (= MID HI) (RETURN HI) (SETQ HI MID)) (IF (= MID LO) (RETURN HI) (SETQ LO MID)))))).
;; Compiling form (DEFUN INTEGER-BINARY-SEARCH (FN LO HI) "FN is a function that, if true for X, is true for all Y < X.
   Find the largest integer in [lo,hi) for which the function
   return true." (ASSERT (FUNCTIONP FN)) (ASSERT (INTEGERP LO)) (ASSERT (INTEGERP HI)) (ASSERT (<= LO HI)) (ASSERT (FUNCALL FN LO)) (LOOP WHILE (< LO HI) DO (LET ((MID (CEILING (+ LO HI) 2))) (IF (FUNCALL FN MID) (SETQ LO MID) (IF (= MID HI) (RETURN LO) (SETQ HI MID)))) FINALLY (RETURN LO))).
;; Compiling form (DEFUN FIND-LARGEST-EXACTLY-FLOATABLE-INTEGER (UPPER-BOUND) (INTEGER-BINARY-SEARCH (FUNCTION (LAMBDA (I) (LET* ((F (FLOAT I)) (I- (1- I)) (F- (FLOAT I-))) (AND (= F I) (= F- I-))))) 0 UPPER-BOUND)).
;; Compiling form (DEFUN EQLZT (X Y) "Return T if (eql x y) or if both are zero of the same type." (COND ((COMPLEXP X) (AND (COMPLEXP Y) (EQLZT (REALPART X) (REALPART Y)) (EQLZT (IMAGPART X) (IMAGPART Y)))) ((ZEROP X) (EQLT (ABS X) (ABS Y))) (T (EQLT X Y)))).
;; Compiling form (DEFCONSTANT +RATIONAL-MOST-NEGATIVE-SHORT-FLOAT+ (RATIONAL-SAFELY MOST-NEGATIVE-SHORT-FLOAT)).
;; Compiling form (DEFCONSTANT +RATIONAL-MOST-NEGATIVE-SINGLE-FLOAT+ (RATIONAL-SAFELY MOST-NEGATIVE-SINGLE-FLOAT)).
;; Compiling form (DEFCONSTANT +RATIONAL-MOST-NEGATIVE-DOUBLE-FLOAT+ (RATIONAL-SAFELY MOST-NEGATIVE-DOUBLE-FLOAT)).
;; Compiling form (DEFCONSTANT +RATIONAL-MOST-NEGATIVE-LONG-FLOAT+ (RATIONAL-SAFELY MOST-NEGATIVE-LONG-FLOAT)).
;; Compiling form (DEFCONSTANT +RATIONAL-MOST-POSITIVE-SHORT-FLOAT+ (RATIONAL-SAFELY MOST-POSITIVE-SHORT-FLOAT)).
;; Compiling form (DEFCONSTANT +RATIONAL-MOST-POSITIVE-SINGLE-FLOAT+ (RATIONAL-SAFELY MOST-POSITIVE-SINGLE-FLOAT)).
;; Compiling form (DEFCONSTANT +RATIONAL-MOST-POSITIVE-DOUBLE-FLOAT+ (RATIONAL-SAFELY MOST-POSITIVE-DOUBLE-FLOAT)).
;; Compiling form (DEFCONSTANT +RATIONAL-MOST-POSITIVE-LONG-FLOAT+ (RATIONAL-SAFELY MOST-POSITIVE-LONG-FLOAT)).
;; Compiling form (DEFUN FLOAT-EXPONENT (X) (IF (FLOATP X) (NTH-VALUE 1 (DECODE-FLOAT X)) 0)).
;; Compiling form (DEFUN NUMBERS-ARE-COMPATIBLE (X Y) (COND ((COMPLEXP X) (AND (NUMBERS-ARE-COMPATIBLE (REALPART X) Y) (NUMBERS-ARE-COMPATIBLE (IMAGPART X) Y))) ((COMPLEXP Y) (AND (NUMBERS-ARE-COMPATIBLE X (REALPART Y)) (NUMBERS-ARE-COMPATIBLE X (IMAGPART Y)))) (T (WHEN (FLOATP X) (ROTATEF X Y)) (OR (FLOATP X) (NOT (FLOATP Y)) (ETYPECASE Y (SHORT-FLOAT (<= +RATIONAL-MOST-NEGATIVE-SHORT-FLOAT+ X +RATIONAL-MOST-POSITIVE-SHORT-FLOAT+)) (SINGLE-FLOAT (<= +RATIONAL-MOST-NEGATIVE-SINGLE-FLOAT+ X +RATIONAL-MOST-POSITIVE-SINGLE-FLOAT+)) (DOUBLE-FLOAT (<= +RATIONAL-MOST-NEGATIVE-DOUBLE-FLOAT+ X +RATIONAL-MOST-POSITIVE-DOUBLE-FLOAT+)) (LONG-FLOAT (<= +RATIONAL-MOST-NEGATIVE-LONG-FLOAT+ X +RATIONAL-MOST-POSITIVE-LONG-FLOAT+))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN =.4-FN NIL (LOOP FOR X IN *NUMBERS* APPEND (LOOP FOR Y IN *NUMBERS* UNLESS (OR (IF (= X Y) (= Y X) (NOT (= Y X)))) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN /=.4-FN NIL (LOOP FOR X IN *NUMBERS* APPEND (LOOP FOR Y IN *NUMBERS* UNLESS (OR (IF (/= X Y) (/= Y X) (NOT (/= Y X)))) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN /=.4A-FN NIL (LOOP FOR X IN *NUMBERS* APPEND (LOOP FOR Y IN *NUMBERS* WHEN (AND (IF (= X Y) (/= X Y) (NOT (/= X Y)))) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN <.8-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (HANDLER-CASE (AND (AND (< X Y) (> X Y))) (ARITHMETIC-ERROR NIL NIL)) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN <.9-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (HANDLER-CASE (AND (IF (< X Y) (NOT (> Y X)) (> Y X))) (ARITHMETIC-ERROR NIL NIL)) COLLECT (LIST X Y)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN <.10-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (HANDLER-CASE (AND (IF (< X Y) (>= X Y) (NOT (>= X Y)))) (ARITHMETIC-ERROR NIL NIL)) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN <=.8-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (HANDLER-CASE (AND (IF (<= X Y) (NOT (>= Y X)) (>= Y X))) (ARITHMETIC-ERROR NIL NIL)) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN <=.9-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (HANDLER-CASE (AND (IF (<= X Y) (NOT (OR (= X Y) (< X Y))) (OR (= X Y) (< X Y)))) (ARITHMETIC-ERROR NIL NIL)) COLLECT (LIST X Y)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN >.8-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (HANDLER-CASE (AND (IF (> X Y) (<= X Y) (NOT (<= X Y)))) (ARITHMETIC-ERROR NIL NIL)) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN >=.8-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (HANDLER-CASE (AND (IF (>= X Y) (NOT (OR (= X Y) (> X Y))) (OR (= X Y) (> X Y)))) (ARITHMETIC-ERROR NIL NIL)) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN COMPARE-RANDOM-RATIONALS (N M REP) (LOOP FOR A = (- (RANDOM N) M) FOR B = (- (RANDOM N) M) FOR C = (- (RANDOM N) M) FOR D = (- (RANDOM N) M) REPEAT REP WHEN (AND (/= B 0) (/= D 0) (LET ((Q1 (/ A B)) (Q2 (/ C D)) (AD (* A D)) (BC (* B C))) (WHEN (< (* B D) 0) (SETQ AD (- AD)) (SETQ BC (- BC))) (OR (IF (< Q1 Q2) (NOT (< AD BC)) (< AD BC)) (IF (<= Q1 Q2) (NOT (<= AD BC)) (<= AD BC)) (IF (> Q1 Q2) (NOT (> AD BC)) (> AD BC)) (IF (>= Q1 Q2) (NOT (>= AD BC)) (>= AD BC)) (IF (= Q1 Q2) (NOT (= AD BC)) (= AD BC)) (IF (/= Q1 Q2) (NOT (/= AD BC)) (/= AD BC))))) COLLECT (LIST A B C D))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MAX.2-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (NUMBERS-ARE-COMPATIBLE X Y) UNLESS (HANDLER-CASE (LET ((M (MAX X Y))) (AND (>= M X) (>= M Y) (OR (= M X) (= M Y)))) (FLOATING-POINT-UNDERFLOW NIL T) (FLOATING-POINT-OVERFLOW NIL T)) COLLECT (LIST X Y (MAX X Y))))).
;; Compiling form (DEFUN MIN.2-FN NIL (LOOP FOR X IN *REALS* NCONC (LOOP FOR Y IN *REALS* WHEN (NUMBERS-ARE-COMPATIBLE X Y) UNLESS (HANDLER-CASE (LET ((M (MIN X Y))) (AND (<= M X) (<= M Y) (OR (= M X) (= M Y)))) (FLOATING-POINT-UNDERFLOW NIL T) (FLOATING-POINT-OVERFLOW NIL T)) COLLECT (LIST X Y (MIN X Y))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN FIND-EPSILON (X) (ASSERT (FLOATP X)) (LET* ((ONE (FLOAT 1 X)) (RADIX (FLOAT-RADIX ONE)) (EPS (/ 1 RADIX))) (LOOP FOR NEXT-EPS = (/ EPS RADIX) FOR I FROM 1 UNTIL (EQL ONE (+ ONE NEXT-EPS)) DO (SETQ EPS NEXT-EPS) FINALLY (RETURN (VALUES I EPS (FLOAT EPS ONE)))))).
;; Compiling form (DEFUN TEST-LOG-OP-WITH-DECLS (OP XLO XHI YLO YHI NITERS &OPTIONAL (DECLS (QUOTE ((OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1)))))) "Test that a compiled form of the LOG* function OP computes
   the expected result on two random integers drawn from the
   types `(integer ,xlo ,xhi) and `(integer ,ylo ,yhi).  Try
   niters choices.  Return a list of pairs on which the test fails." (ASSERT (SYMBOLP OP)) (ASSERT (INTEGERP XLO)) (ASSERT (INTEGERP XHI)) (ASSERT (INTEGERP YLO)) (ASSERT (INTEGERP YHI)) (ASSERT (INTEGERP NITERS)) (ASSERT (<= XLO XHI)) (ASSERT (<= YLO YHI)) (LET* ((SOURCE (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (X Y) (DECLARE (TYPE (INTEGER (SYSTEM.INTERNALS::BQ-COMMA XLO) (SYSTEM.INTERNALS::BQ-COMMA XHI)) X) (TYPE (INTEGER (SYSTEM.INTERNALS::BQ-COMMA YLO) (SYSTEM.INTERNALS::BQ-COMMA YHI)) Y) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN DECLS)) ((SYSTEM.INTERNALS::BQ-COMMA OP) X Y)))) (FN (COMPILE NIL SOURCE))) (LOOP FOR I BELOW NITERS FOR X = (RANDOM-FROM-INTERVAL (1+ XHI) XLO) FOR Y = (RANDOM-FROM-INTERVAL (1+ YHI) YLO) UNLESS (EQL (FUNCALL (THE SYMBOL OP) X Y) (FUNCALL FN X Y)) COLLECT (LIST X Y)))).
;; Compiling form (DEFUN TEST-LOG-OP (OP N1 N2) (FLET ((%R NIL (LET ((R (RANDOM 33))) (- (RANDOM (ASH 1 (1+ R))) (ASH 1 R))))) (LOOP FOR X1 = (%R) FOR X2 = (%R) FOR Y1 = (%R) FOR Y2 = (%R) REPEAT N1 NCONC (TEST-LOG-OP-WITH-DECLS OP (MIN X1 X2) (MAX X1 X2) (MIN Y1 Y2) (MAX Y1 Y2) N2)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN SAFE-TAN (X &OPTIONAL (DEFAULT 0.0)) (HANDLER-CASE (LET ((RESULT (MULTIPLE-VALUE-LIST (TAN X)))) (ASSERT (NULL (CDR RESULT))) (CAR RESULT)) (ARITHMETIC-ERROR NIL DEFAULT))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/numbers-aux.llf C1966CE7>
;; Loading (COMPILE-AND-LOAD "random-aux.lsp")
;; Loading (LOAD "number-comparison.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/number-comparison.lsp C1B99CD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST =.ERROR.1 (SIGNALS-ERROR (=) PROGRAM-ERROR) T)
;; Loading (DEFTEST /=.ERROR.1 (SIGNALS-ERROR (/=) PROGRAM-ERROR) T)
;; Loading (DEFTEST <.ERROR.1 (SIGNALS-ERROR (<) PROGRAM-ERROR) T)
;; Loading (DEFTEST <=.ERROR.1 (SIGNALS-ERROR (<=) PROGRAM-ERROR) T)
;; Loading (DEFTEST >.ERROR.1 (SIGNALS-ERROR (>) PROGRAM-ERROR) T)
;; Loading (DEFTEST >=.ERROR.1 (SIGNALS-ERROR (>=) PROGRAM-ERROR) T)
;; Loading (DEFTEST =.1 (LOOP FOR X IN *NUMBERS* UNLESS (= X) COLLECT X) NIL)
;; Loading (DEFTEST =.2 (LOOP FOR X IN *NUMBERS* UNLESS (= X X) COLLECT X) NIL)
;; Loading (DEFTEST =.3 (LOOP FOR X IN *NUMBERS* UNLESS (= X X X) COLLECT X) NIL)
;; Loading (DEFTEST =.4 (=.4-FN) NIL)
;; Loading (DEFTEST =.5 (LOOP FOR I FROM 1 TO 10000 FOR I2 = (1+ I) NEVER (OR (= I I2) (= I2 I))) T)
;; Loading (DEFTEST =.6 (LOOP FOR I FROM 5 TO 10000 BY 17 FOR J FROM 2 TO I BY 19 FOR R = (/ I J) UNLESS (AND (NOT (= R (1+ R))) (NOT (= R 0)) (NOT (= R (- R))) (= R R)) COLLECT R) NIL)
;; Loading (DEFTEST =.7 (LET ((ARGS NIL)) (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) DO (PUSH 17 ARGS) ALWAYS (APPLY (FUNCTION =) ARGS))) T)
;; Loading (DEFTEST =.8 (LOOP FOR I FROM 2 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) FOR ARGS = (APPEND (MAKE-LIST (1- I) :INITIAL-ELEMENT 7) (LIST 23)) WHEN (APPLY (FUNCTION =) ARGS) COLLECT ARGS) NIL)
;; Loading (DEFTEST =.9 (=T 0 0.0) T)
;; Loading (DEFTEST =.10 (=T 0 0) T)
;; Loading (DEFTEST =.11 (=T 1 #C(1.0 0.0)) T)
;; Loading (DEFTEST =.12 (=T 0.0 0.0) T)
;; Loading (DEFTEST =.13 (LET ((NUMS (QUOTE (0 0.0 0.0 0.0 0.0 #C(0.0 0.0) #C(0.0 0.0) #C(0.0 0.0) #C(0.0 0.0))))) (LOOP FOR X IN NUMS APPEND (LOOP FOR Y IN NUMS UNLESS (= X Y) COLLECT (LIST X Y)))) NIL)
;; Loading (DEFTEST =.14 (LET ((NUMS (QUOTE (17 17.0 17.0 17.0 17.0 #C(17.0 0.0) #C(17.0 0.0) #C(17.0 0.0) #C(17.0 0.0))))) (LOOP FOR X IN NUMS APPEND (LOOP FOR Y IN NUMS UNLESS (= X Y) COLLECT (LIST X Y)))) NIL)
;; Loading (DEFTEST =.15 (LET ((NUMS (QUOTE (-17 -17.0 -17.0 -17.0 -17.0 #C(-17.0 0.0) #C(-17.0 0.0) #C(-17.0 0.0) #C(-17.0 0.0))))) (LOOP FOR X IN NUMS APPEND (LOOP FOR Y IN NUMS UNLESS (= X Y) COLLECT (LIST X Y)))) NIL)
;; Loading (DEFTEST =.16 (LET ((N 60000) (M 30000)) (LOOP FOR X = (- (RANDOM N) M) FOR Y = (- (RANDOM N) M) FOR Z = (- (RANDOM N) M) FOR W = (- (RANDOM N) M) FOR A = (* X Y) FOR B = (* X W) FOR C = (* Y Z) FOR D = (* W Z) REPEAT 10000 WHEN (AND (/= B 0) (/= D 0) (OR (NOT (= (/ A B) (/ C D))) (/= (/ A B) (/ C D)))) COLLECT (LIST A B C D))) NIL)
;; Loading (DEFTEST =.17 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT+RAT/I = (+ XRAT RAT/I) NCONC (IF (= X XRAT+RAT/I) (LIST (LIST X I XRAT+RAT/I)) NIL)))) NIL)
;; Loading (DEFTEST =.18 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-NEGATIVE-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT-RAT/I = (- XRAT RAT/I) NCONC (IF (= X XRAT-RAT/I) (LIST (LIST X I XRAT-RAT/I)) NIL)))) NIL)
;; Loading (DEFTEST =.19 (LET ((BOUND (EXPT 10 1000))) (LOOP FOR X IN (LIST MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) FOR D = (AND (<= X BOUND) (TRUNCATE X)) WHEN (AND D (OR (= (* 3/2 D) X) (= X (* 5/4 D)))) COLLECT (LIST X D (* 3/2 D) (* 5/4 D)))) NIL)
;; Loading (DEFTEST =.ORDER.1 (LET ((I 0) X Y) (VALUES (= (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2)) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST =.ORDER.2 (LET ((I 0) X Y Z) (VALUES (= (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2) (PROGN (SETF Z (INCF I)) 3)) I X Y Z)) NIL 3 1 2 3)
;; Loading (DEFTEST =.ORDER.3 (LET ((I 0) U V W X Y Z) (VALUES (= (PROGN (SETF U (INCF I)) 1) (PROGN (SETF V (INCF I)) 2) (PROGN (SETF W (INCF I)) 3) (PROGN (SETF X (INCF I)) 4) (PROGN (SETF Y (INCF I)) 5) (PROGN (SETF Z (INCF I)) 6)) I U V W X Y Z)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST /=.1 (LOOP FOR X IN *NUMBERS* UNLESS (/= X) COLLECT X) NIL)
;; Loading (DEFTEST /=.2 (LOOP FOR X IN *NUMBERS* WHEN (/= X X) COLLECT X) NIL)
;; Loading (DEFTEST /=.3 (LOOP FOR X IN *NUMBERS* WHEN (/= X X X) COLLECT X) NIL)
;; Loading (DEFTEST /=.4 (/=.4-FN) NIL)
;; Loading (DEFTEST /=.4A (/=.4A-FN) NIL)
;; Loading (DEFTEST /=.5 (LOOP FOR I FROM 1 TO 10000 FOR I2 = (1+ I) ALWAYS (AND (/= I I2) (/= I2 I))) T)
;; Loading (DEFTEST /=.6 (LOOP FOR I FROM 5 TO 10000 BY 17 FOR J FROM 2 TO I BY 19 FOR R = (/ I J) WHEN (OR (NOT (/= R (1+ R))) (NOT (/= R 0)) (NOT (/= R (- R))) (/= R R)) COLLECT R) NIL)
;; Loading (DEFTEST /=.7 (LET ((ARGS (LIST 17)) (ARGS2 NIL)) (LOOP FOR I FROM 2 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) DO (PUSH 17 ARGS) DO (PUSH I ARGS2) ALWAYS (AND (NOT (APPLY (FUNCTION /=) ARGS)) (APPLY (FUNCTION /=) ARGS2)))) T)
;; Loading (DEFTEST /=.8 (LOOP FOR I FROM 2 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) FOR ARGS = (APPEND (MAKE-LIST (1- I) :INITIAL-ELEMENT 7) (LIST 7)) WHEN (APPLY (FUNCTION /=) ARGS) COLLECT ARGS) NIL)
;; Loading (DEFTEST /=.9 (/= 0 0.0) NIL)
;; Loading (DEFTEST /=.10 (/= 0 0) NIL)
;; Loading (DEFTEST /=.11 (/= 1 #C(1.0 0.0)) NIL)
;; Loading (DEFTEST /=.12 (/= 0.0 0.0) NIL)
;; Loading (DEFTEST /=.13 (LET ((NUMS (QUOTE (0 0.0 0.0 0.0 0.0 #C(0.0 0.0) #C(0.0 0.0) #C(0.0 0.0) #C(0.0 0.0))))) (LOOP FOR X IN NUMS APPEND (LOOP FOR Y IN NUMS WHEN (/= X Y) COLLECT (LIST X Y)))) NIL)
;; Loading (DEFTEST /=.14 (LET ((NUMS (QUOTE (17 17.0 17.0 17.0 17.0 #C(17.0 0.0) #C(17.0 0.0) #C(17.0 0.0) #C(17.0 0.0))))) (LOOP FOR X IN NUMS APPEND (LOOP FOR Y IN NUMS WHEN (/= X Y) COLLECT (LIST X Y)))) NIL)
;; Loading (DEFTEST /=.15 (LET ((NUMS (QUOTE (-17 -17.0 -17.0 -17.0 -17.0 #C(-17.0 0.0) #C(-17.0 0.0) #C(-17.0 0.0) #C(-17.0 0.0))))) (LOOP FOR X IN NUMS APPEND (LOOP FOR Y IN NUMS WHEN (/= X Y) COLLECT (LIST X Y)))) NIL)
;; Loading (DEFTEST /=.17 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT+RAT/I = (+ XRAT RAT/I) NCONC (IF (/= X XRAT+RAT/I) NIL (LIST (LIST X I XRAT+RAT/I)))))) NIL)
;; Loading (DEFTEST /=.18 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-NEGATIVE-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT-RAT/I = (- XRAT RAT/I) NCONC (IF (/= X XRAT-RAT/I) NIL (LIST (LIST X I XRAT-RAT/I)))))) NIL)
;; Loading (DEFTEST /=.19 (LET ((BOUND (EXPT 10 1000))) (LOOP FOR X IN (LIST MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) FOR D = (AND (<= X BOUND) (TRUNCATE X)) UNLESS (OR (NULL D) (AND (/= (* 3/2 D) X) (/= X (* 5/4 D)))) COLLECT (LIST X D (* 3/2 D) (* 5/4 D)))) NIL)
;; Loading (DEFTEST /=.ORDER.1 (LET ((I 0) X Y) (VALUES (NOTNOT (/= (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2))) I X Y)) T 2 1 2)
;; Loading (DEFTEST /=.ORDER.2 (LET ((I 0) X Y Z) (VALUES (NOTNOT (/= (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2) (PROGN (SETF Z (INCF I)) 3))) I X Y Z)) T 3 1 2 3)
;; Loading (DEFTEST /=.ORDER.3 (LET ((I 0) U V W X Y Z) (VALUES (NOTNOT (/= (PROGN (SETF U (INCF I)) 1) (PROGN (SETF V (INCF I)) 2) (PROGN (SETF W (INCF I)) 3) (PROGN (SETF X (INCF I)) 4) (PROGN (SETF Y (INCF I)) 5) (PROGN (SETF Z (INCF I)) 6))) I U V W X Y Z)) T 6 1 2 3 4 5 6)
;; Loading (DEFTEST <.1 (LET ((A 0) (B 1)) (NOTNOT-MV (< A B))) T)
;; Loading (DEFTEST <.2 (LET ((A 0) (B 0)) (NOTNOT-MV (< A B))) NIL)
;; Loading (DEFTEST <.3 (LET ((A 1) (B 0)) (NOTNOT-MV (< A B))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFPARAMETER *NUMBER-LESS-TESTS* (LET* ((N (- MOST-POSITIVE-FIXNUM MOST-NEGATIVE-FIXNUM)) (N2 (* 1000 N))) (NCONC (LOOP FOR I = (+ (RANDOM N) MOST-NEGATIVE-FIXNUM) FOR I2 = (+ I (RANDOM MOST-POSITIVE-FIXNUM)) REPEAT 1000 NCONC (LIST (LIST I I2 T) (LIST I2 I NIL))) (LOOP FOR I = (RANDOM N2) FOR I2 = (+ (RANDOM N2) I) REPEAT 1000 NCONC (LIST (LIST I I2 T) (LIST I2 I NIL))) (LOOP FOR X IN *UNIVERSE* WHEN (INTEGERP X) NCONC (LIST (LIST X (1+ X) T) (LIST (1+ X) X NIL))) (LOOP FOR X IN *UNIVERSE* WHEN (REALP X) COLLECT (LIST X X NIL)))))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST <.4 (LOOP FOR (X Y RESULT . REST) IN *NUMBER-LESS-TESTS* UNLESS (IF (< X Y) RESULT (NOT RESULT)) COLLECT (LIST* X Y RESULT REST)) NIL)
;; Loading (DEFTEST <.5 (LOOP FOR X IN *UNIVERSE* WHEN (AND (TYPEP X (QUOTE REAL)) (NOT (< X))) COLLECT X) NIL)
;; Loading (DEFTEST <.6 (LET ((ARGS (LIST 17)) (ARGS2 NIL)) (LOOP FOR I FROM 2 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) DO (PUSH 17 ARGS) DO (PUSH (- I) ARGS2) UNLESS (AND (NOT (APPLY (FUNCTION <) ARGS)) (APPLY (FUNCTION <) ARGS2)) COLLECT (LIST ARGS ARGS2))) NIL)
;; Loading (DEFTEST <.7 (LET* ((LEN (MIN 256 (1- CALL-ARGUMENTS-LIMIT))) (ARGS-PROTO (LOOP FOR I FROM 1 TO LEN COLLECT I))) (LOOP FOR I FROM 1 BELOW LEN FOR ARGS = (COPY-LIST ARGS-PROTO) DO (SETF (ELT ARGS I) 0) NEVER (APPLY (FUNCTION <) ARGS))) T)
;; Loading (DEFTEST <.8 (<.8-FN) NIL)
;; Loading (DEFTEST <.9 (<.9-FN) NIL)
;; Loading (DEFTEST <.10 (<.10-FN) NIL)
;; Loading (DEFTEST <.11 (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) NEVER (OR (< (- X) X) (< X (- X)))) T)
;; Loading (DEFTEST <.17 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT+RAT/I = (+ XRAT RAT/I) NCONC (IF (< X XRAT+RAT/I) NIL (LIST (LIST X I XRAT+RAT/I)))))) NIL)
;; Loading (DEFTEST <.18 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-NEGATIVE-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT-RAT/I = (- XRAT RAT/I) NCONC (IF (< X XRAT-RAT/I) (LIST (LIST X I XRAT-RAT/I)) NIL)))) NIL)
;; Loading (DEFTEST <.19 (LET ((BOUND (EXPT 10 1000))) (LOOP FOR X IN (LIST MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) FOR D = (AND (<= X BOUND) (TRUNCATE X)) UNLESS (OR (NULL D) (AND (< X (* 3/2 D)) (NOT (< (* 17/16 D) X)))) COLLECT (LIST X D (* 3/2 D) (* 17/16 D)))) NIL)
;; Loading (DEFTEST <.ORDER.1 (LET ((I 0) X Y) (VALUES (NOTNOT (< (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2))) I X Y)) T 2 1 2)
;; Loading (DEFTEST <.ORDER.2 (LET ((I 0) X Y Z) (VALUES (NOTNOT (< (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2) (PROGN (SETF Z (INCF I)) 3))) I X Y Z)) T 3 1 2 3)
;; Loading (DEFTEST <.ORDER.3 (LET ((I 0) U V W X Y Z) (VALUES (NOTNOT (< (PROGN (SETF U (INCF I)) 1) (PROGN (SETF V (INCF I)) 2) (PROGN (SETF W (INCF I)) 3) (PROGN (SETF X (INCF I)) 4) (PROGN (SETF Y (INCF I)) 5) (PROGN (SETF Z (INCF I)) 6))) I U V W X Y Z)) T 6 1 2 3 4 5 6)
;; Loading (DEFTEST <=.1 (LET ((A 0) (B 1)) (NOTNOT-MV (<= A B))) T)
;; Loading (DEFTEST <=.2 (LET ((A 0) (B 0)) (NOTNOT-MV (<= A B))) T)
;; Loading (DEFTEST <=.3 (LET ((A 1) (B 0)) (NOTNOT-MV (<= A B))) NIL)
;; Loading (DEFPARAMETER *NUMBER-LESS-OR-EQUAL-TESTS* (LET* ((N (- MOST-POSITIVE-FIXNUM MOST-NEGATIVE-FIXNUM)) (N2 (* 1000 N))) (NCONC (LOOP FOR I = (+ (RANDOM N) MOST-NEGATIVE-FIXNUM) FOR I2 = (+ I (RANDOM MOST-POSITIVE-FIXNUM)) REPEAT 1000 NCONC (LIST (LIST I I2 T) (LIST I2 I NIL))) (LOOP FOR I = (RANDOM N2) FOR I2 = (+ (RANDOM N2) I) REPEAT 1000 NCONC (LIST (LIST I I2 T) (LIST I2 I NIL))) (LOOP FOR X IN *UNIVERSE* WHEN (INTEGERP X) NCONC (LIST (LIST X (1+ X) T) (LIST (1+ X) X NIL))) (LOOP FOR X IN *UNIVERSE* WHEN (REALP X) COLLECT (LIST X X T)))))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST <=.4 (LOOP FOR (X Y RESULT . REST) IN *NUMBER-LESS-OR-EQUAL-TESTS* UNLESS (IF (<= X Y) RESULT (NOT RESULT)) COLLECT (LIST* X Y RESULT REST)) NIL)
;; Loading (DEFTEST <=.5 (LOOP FOR X IN *UNIVERSE* WHEN (AND (TYPEP X (QUOTE REAL)) (NOT (<= X))) COLLECT X) NIL)
;; Loading (DEFTEST <=.6 (LET ((ARGS (LIST 17)) (ARGS2 NIL) (ARGS3 (LIST 0))) (LOOP FOR I FROM 2 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) DO (PUSH 17 ARGS) DO (PUSH (- I) ARGS2) DO (PUSH I ARGS3) UNLESS (AND (APPLY (FUNCTION <=) ARGS) (APPLY (FUNCTION <=) ARGS2) (NOT (APPLY (FUNCTION <=) ARGS3))) COLLECT (LIST ARGS ARGS2 ARGS3))) NIL)
;; Loading (DEFTEST <=.7 (LET* ((LEN (MIN 256 (1- CALL-ARGUMENTS-LIMIT))) (ARGS-PROTO (LOOP FOR I FROM 1 TO LEN COLLECT I))) (LOOP FOR I FROM 1 BELOW LEN FOR ARGS = (COPY-LIST ARGS-PROTO) DO (SETF (ELT ARGS I) 0) NEVER (APPLY (FUNCTION <=) ARGS))) T)
;; Loading (DEFTEST <=.8 (<=.8-FN) NIL)
;; Loading (DEFTEST <=.9 (<=.9-FN) NIL)
;; Loading (DEFTEST <=.10 (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) ALWAYS (AND (<= (- X) X) (<= X (- X)))) T)
;; Loading (DEFTEST <=.17 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT+RAT/I = (+ XRAT RAT/I) NCONC (IF (<= X XRAT+RAT/I) NIL (LIST (LIST X I XRAT+RAT/I)))))) NIL)
;; Loading (DEFTEST <=.18 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-NEGATIVE-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT-RAT/I = (- XRAT RAT/I) NCONC (IF (<= X XRAT-RAT/I) (LIST (LIST X I XRAT-RAT/I)) NIL)))) NIL)
;; Loading (DEFTEST <=.19 (LET ((BOUND (EXPT 10 1000))) (LOOP FOR X IN (LIST MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) FOR D = (AND (<= X BOUND) (TRUNCATE X)) UNLESS (OR (NULL D) (AND (<= X (* 3/2 D)) (NOT (<= (* 5/4 D) X)))) COLLECT (LIST X D (* 3/2 D) (* 5/4 D)))) NIL)
;; Loading (DEFTEST <=.ORDER.1 (LET ((I 0) X Y) (VALUES (NOTNOT (<= (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2))) I X Y)) T 2 1 2)
;; Loading (DEFTEST <=.ORDER.2 (LET ((I 0) X Y Z) (VALUES (NOTNOT (<= (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2) (PROGN (SETF Z (INCF I)) 3))) I X Y Z)) T 3 1 2 3)
;; Loading (DEFTEST <=.ORDER.3 (LET ((I 0) U V W X Y Z) (VALUES (NOTNOT (<= (PROGN (SETF U (INCF I)) 1) (PROGN (SETF V (INCF I)) 2) (PROGN (SETF W (INCF I)) 3) (PROGN (SETF X (INCF I)) 4) (PROGN (SETF Y (INCF I)) 5) (PROGN (SETF Z (INCF I)) 6))) I U V W X Y Z)) T 6 1 2 3 4 5 6)
;; Loading (DEFTEST >.1 (LET ((A 0) (B 1)) (NOTNOT-MV (> A B))) NIL)
;; Loading (DEFTEST >.2 (LET ((A 0) (B 0)) (NOTNOT-MV (> A B))) NIL)
;; Loading (DEFTEST >.3 (LET ((A 1) (B 0)) (NOTNOT-MV (> A B))) T)
;; Loading (DEFTEST >.4 (LOOP FOR (X Y RESULT . REST) IN *NUMBER-LESS-TESTS* UNLESS (IF (> Y X) RESULT (NOT RESULT)) COLLECT (LIST* Y X RESULT REST)) NIL)
;; Loading (DEFTEST >.5 (LOOP FOR X IN *UNIVERSE* WHEN (AND (TYPEP X (QUOTE REAL)) (NOT (> X))) COLLECT X) NIL)
;; Loading (DEFTEST >.6 (LET ((ARGS (LIST 17)) (ARGS2 NIL)) (LOOP FOR I FROM 2 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) DO (PUSH 17 ARGS) DO (PUSH I ARGS2) UNLESS (AND (NOT (APPLY (FUNCTION >) ARGS)) (APPLY (FUNCTION >) ARGS2)) COLLECT (LIST ARGS ARGS2))) NIL)
;; Loading (DEFTEST >.7 (LET* ((LEN (MIN 256 (1- CALL-ARGUMENTS-LIMIT))) (ARGS-PROTO (LOOP FOR I FROM 1 TO LEN COLLECT I))) (LOOP FOR I FROM 1 BELOW LEN FOR ARGS = (COPY-LIST ARGS-PROTO) DO (SETF (ELT ARGS I) 0) NEVER (APPLY (FUNCTION >) ARGS))) T)
;; Loading (DEFTEST >.8 (>.8-FN) NIL)
;; Loading (DEFTEST >.9 (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) NEVER (OR (> (- X) X) (> X (- X)))) T)
;; Loading (DEFTEST >.17 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT+RAT/I = (+ XRAT RAT/I) NCONC (IF (> X XRAT+RAT/I) (LIST (LIST X I XRAT+RAT/I)) NIL)))) NIL)
;; Loading (DEFTEST >.18 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-NEGATIVE-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT-RAT/I = (- XRAT RAT/I) NCONC (IF (> X XRAT-RAT/I) NIL (LIST (LIST X I XRAT-RAT/I)))))) NIL)
;; Loading (DEFTEST >.19 (LET ((BOUND (EXPT 10 1000))) (LOOP FOR X IN (LIST MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) FOR D = (AND (<= X BOUND) (TRUNCATE X)) UNLESS (OR (NULL D) (AND (> (* 3/2 D) X) (NOT (> X (* 17/16 D))))) COLLECT (LIST X D (* 3/2 D) (* 17/16 D)))) NIL)
;; Loading (DEFTEST >.ORDER.1 (LET ((I 0) X Y) (VALUES (NOTNOT (> (PROGN (SETF X (INCF I)) 2) (PROGN (SETF Y (INCF I)) 1))) I X Y)) T 2 1 2)
;; Loading (DEFTEST >.ORDER.2 (LET ((I 0) X Y Z) (VALUES (NOTNOT (> (PROGN (SETF X (INCF I)) 3) (PROGN (SETF Y (INCF I)) 2) (PROGN (SETF Z (INCF I)) 1))) I X Y Z)) T 3 1 2 3)
;; Loading (DEFTEST >.ORDER.3 (LET ((I 0) U V W X Y Z) (VALUES (NOTNOT (> (PROGN (SETF U (INCF I)) 6) (PROGN (SETF V (INCF I)) 5) (PROGN (SETF W (INCF I)) 4) (PROGN (SETF X (INCF I)) 3) (PROGN (SETF Y (INCF I)) 2) (PROGN (SETF Z (INCF I)) 1))) I U V W X Y Z)) T 6 1 2 3 4 5 6)
;; Loading (DEFTEST >=.1 (LET ((A 0) (B 1)) (NOTNOT-MV (>= A B))) NIL)
;; Loading (DEFTEST >=.2 (LET ((A 0) (B 0)) (NOTNOT-MV (>= A B))) T)
;; Loading (DEFTEST >=.3 (LET ((A 1) (B 0)) (NOTNOT-MV (>= A B))) T)
;; Loading (DEFTEST >=.4 (LOOP FOR (X Y RESULT . REST) IN *NUMBER-LESS-OR-EQUAL-TESTS* UNLESS (IF (>= Y X) RESULT (NOT RESULT)) COLLECT (LIST* Y X RESULT REST)) NIL)
;; Loading (DEFTEST >=.5 (LOOP FOR X IN *UNIVERSE* WHEN (AND (TYPEP X (QUOTE REAL)) (NOT (>= X))) COLLECT X) NIL)
;; Loading (DEFTEST >=.6 (LET ((ARGS (LIST 17)) (ARGS2 (LIST 0)) (ARGS3 NIL)) (LOOP FOR I FROM 2 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) DO (PUSH 17 ARGS) DO (PUSH (- I) ARGS2) DO (PUSH I ARGS3) UNLESS (AND (APPLY (FUNCTION >=) ARGS) (NOT (APPLY (FUNCTION >=) ARGS2)) (APPLY (FUNCTION >=) ARGS3)) COLLECT (LIST ARGS ARGS2 ARGS3))) NIL)
;; Loading (DEFTEST >=.7 (LET* ((LEN (MIN 256 (1- CALL-ARGUMENTS-LIMIT))) (ARGS-PROTO (LOOP FOR I FROM 1 TO LEN COLLECT I))) (LOOP FOR I FROM 1 BELOW LEN FOR ARGS = (COPY-LIST ARGS-PROTO) DO (SETF (ELT ARGS I) 0) NEVER (APPLY (FUNCTION >=) ARGS))) T)
;; Loading (DEFTEST >=.8 (>=.8-FN) NIL)
;; Loading (DEFTEST >=.9 (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) ALWAYS (AND (>= (- X) X) (>= X (- X)))) T)
;; Loading (DEFTEST >=.17 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT+RAT/I = (+ XRAT RAT/I) NCONC (IF (>= X XRAT+RAT/I) (LIST (LIST X I XRAT+RAT/I)) NIL)))) NIL)
;; Loading (DEFTEST >=.18 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-NEGATIVE-EPSILON) FOR EXP = (NTH-VALUE 1 (DECODE-FLOAT EPS)) FOR RADIX = (FLOAT-RADIX EPS) WHEN (< (* (LOG RADIX 2) EXP) 1000) NCONC (LET* ((RAT (RATIONAL EPS)) (XRAT (RATIONAL X))) (LOOP FOR I FROM 2 TO 100 FOR RAT/I = (/ RAT I) FOR XRAT-RAT/I = (- XRAT RAT/I) NCONC (IF (>= X XRAT-RAT/I) NIL (LIST (LIST X I XRAT-RAT/I)))))) NIL)
;; Loading (DEFTEST >=.19 (LET ((BOUND (EXPT 10 1000))) (LOOP FOR X IN (LIST MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) FOR D = (AND (<= X BOUND) (TRUNCATE X)) UNLESS (OR (NULL D) (AND (>= (* 3/2 D) X) (NOT (>= X (* 17/16 D))))) COLLECT (LIST X D (* 3/2 D) (* 17/16 D)))) NIL)
;; Loading (DEFTEST >=.ORDER.1 (LET ((I 0) X Y) (VALUES (NOTNOT (>= (PROGN (SETF X (INCF I)) 2) (PROGN (SETF Y (INCF I)) 1))) I X Y)) T 2 1 2)
;; Loading (DEFTEST >=.ORDER.2 (LET ((I 0) X Y Z) (VALUES (NOTNOT (>= (PROGN (SETF X (INCF I)) 3) (PROGN (SETF Y (INCF I)) 2) (PROGN (SETF Z (INCF I)) 1))) I X Y Z)) T 3 1 2 3)
;; Loading (DEFTEST >=.ORDER.3 (LET ((I 0) U V W X Y Z) (VALUES (NOTNOT (>= (PROGN (SETF U (INCF I)) 6) (PROGN (SETF V (INCF I)) 5) (PROGN (SETF W (INCF I)) 4) (PROGN (SETF X (INCF I)) 3) (PROGN (SETF Y (INCF I)) 2) (PROGN (SETF Z (INCF I)) 1))) I U V W X Y Z)) T 6 1 2 3 4 5 6)
;; Loading (DEFTEST COMPARE-RATIONALS.1 (COMPARE-RANDOM-RATIONALS 60000 30000 10000) NIL)
;; Loading (DEFTEST COMPARE-RATIONALS.2 (COMPARE-RANDOM-RATIONALS 600000 300000 10000) NIL)
;; Loading (DEFTEST COMPARE-RATIONALS.3 (COMPARE-RANDOM-RATIONALS 6000000 3000000 10000) NIL)
;; Loading (DEFTEST COMPARE-RATIONALS.4 (COMPARE-RANDOM-RATIONALS 6000000000 3000000000 10000) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.1A (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (+ R (CEILING (RATIONAL X))))) (UNLESS (< X I) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.1B (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (- (FLOOR (RATIONAL X)) R))) (UNLESS (< I X) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.2A (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (+ R (CEILING (RATIONAL X))))) (UNLESS (> I X) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.2B (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (- (FLOOR (RATIONAL X)) R))) (UNLESS (> X I) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.3A (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (+ R (CEILING (RATIONAL X))))) (WHEN (OR (= X I) (= I X)) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.3B (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (- (FLOOR (RATIONAL X)) R))) (WHEN (OR (= X I) (= I X)) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.4A (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (+ R (CEILING (RATIONAL X))))) (UNLESS (AND (/= I X) (/= X I)) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.4B (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (- (FLOOR (RATIONAL X)) R))) (UNLESS (AND (/= I X) (/= X I)) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.5A (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (+ R (CEILING (RATIONAL X))))) (UNLESS (<= X I) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.5B (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (- (FLOOR (RATIONAL X)) R))) (UNLESS (<= I X) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.6A (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (+ R (CEILING (RATIONAL X))))) (UNLESS (>= I X) (LIST (LIST R X I)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.6B (LOOP FOR X IN *FLOATS* WHEN (OR (ZEROP X) (< (ABS (LOG (ABS X))) 10000)) NCONC (LOOP FOR R = (1+ (RANDOM (ASH 1 (RANDOM 32)))) REPEAT 200 NCONC (LET ((I (- (FLOOR (RATIONAL X)) R))) (UNLESS (>= X I) (LIST (LIST R X I)))))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.7 (LET ((TOOBIG (LOOP FOR X IN *REALS* COLLECT (AND (> (ABS X) 1.0) (> (ABS (LOG (ABS X))) 10000))))) (LOOP FOR X IN *REALS* FOR XTOOBIG IN TOOBIG NCONC (UNLESS XTOOBIG (LET ((FX (FLOOR X))) (LOOP FOR Y IN *REALS* FOR YTOOBIG IN TOOBIG WHEN (AND (NOT YTOOBIG) (< X Y) (OR (NOT (< FX Y)) (<= Y FX) (NOT (> Y FX)) (>= FX Y))) COLLECT (LIST X Y)))))) NIL)
;; Loading (DEFTEST BIGNUM.FLOAT.COMPARE.8 (LET ((TOOBIG (LOOP FOR X IN *REALS* COLLECT (AND (> (ABS X) 1.0) (> (ABS (LOG (ABS X))) 10000))))) (LOOP FOR X IN *REALS* FOR XTOOBIG IN TOOBIG NCONC (UNLESS XTOOBIG (LET ((FX (FLOOR X))) (LOOP FOR Y IN *REALS* FOR YTOOBIG IN TOOBIG WHEN (AND (NOT YTOOBIG) (<= X Y) (OR (NOT (<= FX Y)) (> FX Y) (NOT (>= Y FX)) (< Y FX))) COLLECT (LIST X Y)))))) NIL)
;; Loading (DEFTEST BIGNUM.SHORT-FLOAT.RANDOM.COMPARE.1 (LET* ((INTEGER-BOUND (ASH 1 1000)) (UPPER-BOUND (IF (< (/ MOST-POSITIVE-SHORT-FLOAT 2) INTEGER-BOUND) (/ MOST-POSITIVE-SHORT-FLOAT 2) (COERCE INTEGER-BOUND (QUOTE SHORT-FLOAT))))) (LOOP FOR BOUND = 1.0 THEN (* BOUND 2) WHILE (<= BOUND UPPER-BOUND) NCONC (LOOP FOR R = (RANDOM BOUND) FOR FR = (FLOOR R) FOR CR = (CEILING R) REPEAT 20 UNLESS (AND (<= FR R CR) (IF (= R FR) (= R CR) (/= R CR)) (>= CR R FR)) COLLECT (LIST R FR CR)))) NIL)
;; Loading (DEFTEST BIGNUM.SINGLE-FLOAT.RANDOM.COMPARE.1 (LET* ((INTEGER-BOUND (ASH 1 100)) (UPPER-BOUND (IF (< (/ MOST-POSITIVE-SINGLE-FLOAT 2) INTEGER-BOUND) (/ MOST-POSITIVE-SINGLE-FLOAT 2) (COERCE INTEGER-BOUND (QUOTE SINGLE-FLOAT))))) (LOOP FOR BOUND = 1.0 THEN (* BOUND 2) WHILE (<= BOUND UPPER-BOUND) NCONC (LOOP FOR R = (RANDOM BOUND) FOR FR = (FLOOR R) FOR CR = (CEILING R) REPEAT 20 UNLESS (AND (<= FR R CR) (IF (= R FR) (= R CR) (/= R CR)) (>= CR R FR)) COLLECT (LIST R FR CR)))) NIL)
;; Loading (DEFTEST BIGNUM.DOUBLE-FLOAT.RANDOM.COMPARE.1 (LET* ((INTEGER-BOUND (ASH 1 100)) (UPPER-BOUND (IF (< (/ MOST-POSITIVE-DOUBLE-FLOAT 2) INTEGER-BOUND) (/ MOST-POSITIVE-DOUBLE-FLOAT 2) (COERCE INTEGER-BOUND (QUOTE DOUBLE-FLOAT))))) (LOOP FOR BOUND = 1.0 THEN (* BOUND 2) WHILE (<= BOUND UPPER-BOUND) NCONC (LOOP FOR R = (RANDOM BOUND) FOR FR = (FLOOR R) FOR CR = (CEILING R) REPEAT 20 UNLESS (AND (<= FR R CR) (IF (= R FR) (= R CR) (/= R CR)) (>= CR R FR)) COLLECT (LIST R FR CR)))) NIL)
;; Loading (DEFTEST BIGNUM.LONG-FLOAT.RANDOM.COMPARE.1 (LET* ((INTEGER-BOUND (ASH 1 100)) (UPPER-BOUND (IF (< (/ MOST-POSITIVE-LONG-FLOAT 2) INTEGER-BOUND) (/ MOST-POSITIVE-LONG-FLOAT 2) (COERCE INTEGER-BOUND (QUOTE LONG-FLOAT))))) (LOOP FOR BOUND = 1.0 THEN (* BOUND 2) WHILE (< BOUND UPPER-BOUND) NCONC (LOOP FOR R = (RANDOM BOUND) FOR FR = (FLOOR R) FOR CR = (CEILING R) REPEAT 20 UNLESS (AND (<= FR R CR) (IF (= R FR) (= R CR) (/= R CR)) (>= CR R FR)) COLLECT (LIST R FR CR)))) NIL)
;; Loading (DEFTEST RATIONAL.SHORT-FLOAT.RANDOM.COMPARE.1 (LET* ((INTEGER-BOUND (ASH 1 1000)) (UPPER-BOUND (IF (< (/ MOST-POSITIVE-SHORT-FLOAT 2) INTEGER-BOUND) (/ MOST-POSITIVE-SHORT-FLOAT 2) (COERCE INTEGER-BOUND (QUOTE SHORT-FLOAT))))) (LOOP FOR BOUND = 1.0 THEN (* BOUND 2) WHILE (<= BOUND UPPER-BOUND) NCONC (LOOP FOR R = (+ 1.0 (RANDOM BOUND)) FOR FR = (FLOOR R) FOR CR = (CEILING R) FOR M = (ASH 1 (1+ (RANDOM 30))) FOR P = (1+ (RANDOM M)) FOR Q = (1+ (RANDOM M)) FOR X = 0 REPEAT 50 WHEN (<= P Q) DO (PSETF P (1+ Q) Q P) DO (SETF X (/ P Q)) UNLESS (LET ((FR/X (/ FR X)) (CR*X (* CR X))) (AND (<= FR/X R CR*X) (< FR/X R CR*X) (> CR*X R FR/X) (>= CR*X R FR/X))) COLLECT (LIST R P Q X FR CR)))) NIL)
;; Loading (DEFTEST RATIONAL.SINGLE-FLOAT.RANDOM.COMPARE.1 (LET* ((INTEGER-BOUND (ASH 1 1000)) (UPPER-BOUND (IF (< (/ MOST-POSITIVE-SINGLE-FLOAT 2) INTEGER-BOUND) (/ MOST-POSITIVE-SINGLE-FLOAT 2) (COERCE INTEGER-BOUND (QUOTE SINGLE-FLOAT))))) (LOOP FOR BOUND = 1.0 THEN (* BOUND 2) WHILE (<= BOUND UPPER-BOUND) NCONC (LOOP FOR R = (+ 1.0 (RANDOM BOUND)) FOR FR = (FLOOR R) FOR CR = (CEILING R) FOR M = (ASH 1 (1+ (RANDOM 30))) FOR P = (1+ (RANDOM M)) FOR Q = (1+ (RANDOM M)) FOR X = 0 REPEAT 50 WHEN (<= P Q) DO (PSETF P (1+ Q) Q P) DO (SETF X (/ P Q)) UNLESS (LET ((FR/X (/ FR X)) (CR*X (* CR X))) (AND (<= FR/X R CR*X) (< FR/X R CR*X) (> CR*X R FR/X) (>= CR*X R FR/X))) COLLECT (LIST R P Q X FR CR)))) NIL)
;; Loading (DEFTEST RATIONAL.DOUBLE-FLOAT.RANDOM.COMPARE.1 (LET* ((INTEGER-BOUND (ASH 1 1000)) (UPPER-BOUND (IF (< (/ MOST-POSITIVE-DOUBLE-FLOAT 4) INTEGER-BOUND) (/ MOST-POSITIVE-DOUBLE-FLOAT 4) (COERCE INTEGER-BOUND (QUOTE DOUBLE-FLOAT))))) (LOOP FOR BOUND = 1.0 THEN (* BOUND 4) WHILE (<= BOUND UPPER-BOUND) NCONC (LOOP FOR R = (+ 1.0 (RANDOM BOUND)) FOR FR = (FLOOR R) FOR CR = (CEILING R) FOR M = (ASH 1 (1+ (RANDOM 30))) FOR P = (1+ (RANDOM M)) FOR Q = (1+ (RANDOM M)) FOR X = 0 REPEAT 50 WHEN (<= P Q) DO (PSETF P (1+ Q) Q P) DO (SETF X (/ P Q)) UNLESS (LET ((FR/X (/ FR X)) (CR*X (* CR X))) (AND (<= FR/X R CR*X) (< FR/X R CR*X) (> CR*X R FR/X) (>= CR*X R FR/X))) COLLECT (LIST R P Q X FR CR)))) NIL)
;; Loading (DEFTEST RATIONAL.LONG-FLOAT.RANDOM.COMPARE.1 (LET* ((INTEGER-BOUND (ASH 1 1000)) (UPPER-BOUND (IF (< (/ MOST-POSITIVE-LONG-FLOAT 4) INTEGER-BOUND) (/ MOST-POSITIVE-LONG-FLOAT 4) (COERCE INTEGER-BOUND (QUOTE LONG-FLOAT))))) (LOOP FOR BOUND = 1.0 THEN (* BOUND 4) WHILE (<= BOUND UPPER-BOUND) NCONC (LOOP FOR R = (+ 1.0 (RANDOM BOUND)) FOR FR = (FLOOR R) FOR CR = (CEILING R) FOR M = (ASH 1 (1+ (RANDOM 30))) FOR P = (1+ (RANDOM M)) FOR Q = (1+ (RANDOM M)) FOR X = 0 REPEAT 50 WHEN (<= P Q) DO (PSETF P (1+ Q) Q P) DO (SETF X (/ P Q)) UNLESS (LET ((FR/X (/ FR X)) (CR*X (* CR X))) (AND (<= FR/X R CR*X) (< FR/X R CR*X) (> CR*X R FR/X) (>= CR*X R FR/X))) COLLECT (LIST R P Q X FR CR)))) NIL)
;; Loading (DEFTEST =.ENV.1 (MACROLET ((%M (Z) Z)) (MAPCAR (QUOTE NOTNOT) (LIST (= (EXPAND-IN-CURRENT-ENV (%M 0))) (= 1 (EXPAND-IN-CURRENT-ENV (%M 1))) (= (EXPAND-IN-CURRENT-ENV (%M 2)) 2) (= (EXPAND-IN-CURRENT-ENV (%M 3)) (EXPAND-IN-CURRENT-ENV (%M 3))) (= (EXPAND-IN-CURRENT-ENV (%M #C(1 2))) (EXPAND-IN-CURRENT-ENV (%M #C(1 2)))) (= 1 (EXPAND-IN-CURRENT-ENV (%M 2.0))) (= (EXPAND-IN-CURRENT-ENV (%M 2)) 2/3) (= (EXPAND-IN-CURRENT-ENV (%M 4)) (EXPAND-IN-CURRENT-ENV (%M 5))) (= (EXPAND-IN-CURRENT-ENV (%M 0)) 0 0) (= 0 (EXPAND-IN-CURRENT-ENV (%M 0)) 0) (= 0 0 (EXPAND-IN-CURRENT-ENV (%M 0)))))) (T T T T T NIL NIL NIL T T T))
;; Loading (DEFTEST /=.ENV.1 (MACROLET ((%M (Z) Z)) (MAPCAR (QUOTE NOTNOT) (LIST (/= (EXPAND-IN-CURRENT-ENV (%M 0))) (/= 1 (EXPAND-IN-CURRENT-ENV (%M 1))) (/= (EXPAND-IN-CURRENT-ENV (%M 2)) 2) (/= (EXPAND-IN-CURRENT-ENV (%M 3)) (EXPAND-IN-CURRENT-ENV (%M 3))) (/= (EXPAND-IN-CURRENT-ENV (%M #C(1 2))) (EXPAND-IN-CURRENT-ENV (%M #C(1 2)))) (/= 1 (EXPAND-IN-CURRENT-ENV (%M 2.0))) (/= (EXPAND-IN-CURRENT-ENV (%M 2)) 2/3) (/= (EXPAND-IN-CURRENT-ENV (%M 4)) (EXPAND-IN-CURRENT-ENV (%M 5))) (/= (EXPAND-IN-CURRENT-ENV (%M 2)) 0 1) (/= 0 (EXPAND-IN-CURRENT-ENV (%M 2)) 1) (/= 0 1 (EXPAND-IN-CURRENT-ENV (%M 2)))))) (T NIL NIL NIL NIL T T T T T T))
;; Loading (DEFTEST <.ENV.1 (MACROLET ((%M (Z) Z)) (MAPCAR (QUOTE NOTNOT) (LIST (< (EXPAND-IN-CURRENT-ENV (%M 0))) (< 0 (EXPAND-IN-CURRENT-ENV (%M 1))) (< (EXPAND-IN-CURRENT-ENV (%M 2)) 3) (< (EXPAND-IN-CURRENT-ENV (%M 5)) (EXPAND-IN-CURRENT-ENV (%M 7))) (< 3 (EXPAND-IN-CURRENT-ENV (%M 2.0))) (< (EXPAND-IN-CURRENT-ENV (%M 2)) 2/3) (< (EXPAND-IN-CURRENT-ENV (%M 6)) (EXPAND-IN-CURRENT-ENV (%M 5))) (< (EXPAND-IN-CURRENT-ENV (%M 1)) 2 3) (< 1 (EXPAND-IN-CURRENT-ENV (%M 2)) 3) (< 1 2 (EXPAND-IN-CURRENT-ENV (%M 3)))))) (T T T T NIL NIL NIL T T T))
;; Loading (DEFTEST <=.ENV.1 (MACROLET ((%M (Z) Z)) (MAPCAR (QUOTE NOTNOT) (LIST (<= (EXPAND-IN-CURRENT-ENV (%M 0))) (<= 0 (EXPAND-IN-CURRENT-ENV (%M 1))) (<= (EXPAND-IN-CURRENT-ENV (%M 2)) 3) (<= (EXPAND-IN-CURRENT-ENV (%M 5)) (EXPAND-IN-CURRENT-ENV (%M 7))) (<= 3 (EXPAND-IN-CURRENT-ENV (%M 2.0))) (<= (EXPAND-IN-CURRENT-ENV (%M 2)) 2/3) (<= (EXPAND-IN-CURRENT-ENV (%M 6)) (EXPAND-IN-CURRENT-ENV (%M 5))) (<= (EXPAND-IN-CURRENT-ENV (%M 2)) 2 3) (<= 1 (EXPAND-IN-CURRENT-ENV (%M 1)) 3) (<= 1 2 (EXPAND-IN-CURRENT-ENV (%M 2)))))) (T T T T NIL NIL NIL T T T))
;; Loading (DEFTEST >.ENV.1 (MACROLET ((%M (Z) Z)) (MAPCAR (QUOTE NOTNOT) (LIST (> (EXPAND-IN-CURRENT-ENV (%M 0))) (> 2 (EXPAND-IN-CURRENT-ENV (%M 1))) (> (EXPAND-IN-CURRENT-ENV (%M 4)) 3) (> (EXPAND-IN-CURRENT-ENV (%M 10)) (EXPAND-IN-CURRENT-ENV (%M 7))) (> 1 (EXPAND-IN-CURRENT-ENV (%M 2.0))) (> (EXPAND-IN-CURRENT-ENV (%M -1)) 2/3) (> (EXPAND-IN-CURRENT-ENV (%M 4)) (EXPAND-IN-CURRENT-ENV (%M 5))) (> (EXPAND-IN-CURRENT-ENV (%M 2)) 1 0) (> 2 (EXPAND-IN-CURRENT-ENV (%M 1)) 0) (> 2 1 (EXPAND-IN-CURRENT-ENV (%M 0)))))) (T T T T NIL NIL NIL T T T))
;; Loading (DEFTEST >=.ENV.1 (MACROLET ((%M (Z) Z)) (MAPCAR (QUOTE NOTNOT) (LIST (>= (EXPAND-IN-CURRENT-ENV (%M 0))) (>= 2 (EXPAND-IN-CURRENT-ENV (%M 1))) (>= (EXPAND-IN-CURRENT-ENV (%M 4)) 3) (>= (EXPAND-IN-CURRENT-ENV (%M 7)) (EXPAND-IN-CURRENT-ENV (%M 7))) (>= 1 (EXPAND-IN-CURRENT-ENV (%M 2.0))) (>= (EXPAND-IN-CURRENT-ENV (%M -1)) 2/3) (>= (EXPAND-IN-CURRENT-ENV (%M 4)) (EXPAND-IN-CURRENT-ENV (%M 5))) (>= (EXPAND-IN-CURRENT-ENV (%M 2)) 1 1) (>= 1 (EXPAND-IN-CURRENT-ENV (%M 1)) 0) (>= 2 2 (EXPAND-IN-CURRENT-ENV (%M 0)))))) (T T T T NIL NIL NIL T T T))
;; Loading (LOAD "max.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/max.lsp 81406187>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST MAX.ERROR.1 (SIGNALS-ERROR (MAX) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAX.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION MAX) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST MAX.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAX 0 X))) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST MAX.1 (LOOP FOR N IN *REALS* WHEN (OR (NOT (EQL (MAX N) N)) (NOT (EQL (MAX N N) N)) (NOT (EQL (MAX N N N) N)) (NOT (EQL (APPLY (FUNCTION MAX) (MAKE-LIST (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) :INITIAL-ELEMENT N)) N))) COLLECT N) NIL)
;; Loading (DEFTEST MAX.2 (MAX.2-FN) NIL)
;; Loading (DEFTEST MAX.3 (LOOP FOR X = (- (RANDOM 60000) 30000) FOR Y = (- (RANDOM 60000) 30000) FOR M = (MAX X Y) FOR M2 = (IF (>= X Y) X Y) REPEAT 1000 UNLESS (EQL M M2) COLLECT (LIST X Y M M2)) NIL)
;; Loading (DEFTEST MAX.4 (LOOP FOR X = (- (RANDOM 6000000) 3000000) FOR Y = (- (RANDOM 6000000) 3000000) FOR M = (MAX X Y) FOR M2 = (IF (>= X Y) X Y) REPEAT 1000 UNLESS (EQL M M2) COLLECT (LIST X Y M M2)) NIL)
;; Loading (DEFTEST MAX.5 (LOOP FOR X = (- (RANDOM 1000000000000) 500000000000) FOR Y = (- (RANDOM 1000000000000) 500000000000) FOR M = (MAX X Y) FOR M2 = (IF (>= X Y) X Y) REPEAT 1000 UNLESS (EQL M M2) COLLECT (LIST X Y M M2)) NIL)
;; Loading (DEFTEST MAX.6 (LET ((M (MAX 2 1.0))) (OR (EQLT M 2) (EQLT M 2.0))) T)
;; Loading (DEFTEST MAX.7 (MAX 0 1.0) 1.0)
;; Loading (DEFTEST MAX.8 (LET ((M (MAX 2 1.0))) (OR (EQLT M 2) (EQLT M 2.0))) T)
;; Loading (DEFTEST MAX.9 (MAX 0 1.0) 1.0)
;; Loading (DEFTEST MAX.10 (LET ((M (MAX 2 1.0))) (OR (EQLT M 2) (EQLT M 2.0))) T)
;; Loading (DEFTEST MAX.11 (MAX 0 1.0) 1.0)
;; Loading (DEFTEST MAX.12 (LET ((M (MAX 2 1.0))) (OR (EQLT M 2) (EQLT M 2.0))) T)
;; Loading (DEFTEST MAX.13 (MAX 0 1.0) 1.0)
;; Loading (DEFTEST MAX.15 (LET ((M (MAX 1.0 0.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MAX.16 (MAX 0.0 1.0) 1.0)
;; Loading (DEFTEST MAX.17 (LET ((M (MAX 1.0 0.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MAX.18 (MAX 0.0 1.0) 1.0)
;; Loading (DEFTEST MAX.19 (LET ((M (MAX 1.0 0.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MAX.20 (MAX 0.0 1.0) 1.0)
;; Loading (DEFTEST MAX.21 (LET ((M (MAX 1.0 0.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MAX.22 (MAX 0.0 1.0) 1.0)
;; Loading (DEFTEST MAX.23 (LET ((M (MAX 1.0 0.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MAX.24 (MAX 0.0 1.0) 1.0)
;; Loading (DEFTEST MAX.25 (LET ((M (MAX 1.0 0.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MAX.26 (MAX 0.0 1.0) 1.0)
;; Loading (DEFTEST MAX.27 (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) FOR X = (MAKE-LIST I :INITIAL-ELEMENT 0) DO (SETF (ELT X (RANDOM I)) 1) UNLESS (EQL (APPLY (FUNCTION MAX) X) 1) COLLECT X) NIL)
;; Loading (DEFTEST MAX.28 (LET ((M (MAX 1/3 0.2))) (OR (EQLT M 1/3) (EQLT M (FLOAT 1/3 0.2)))) T)
;; Loading (DEFTEST MAX.29 (LET ((M (MAX 1.0 3 2.0))) (OR (EQLT M 3) (EQLT M 3.0))) T)
;; Loading (DEFTEST MAX.30 (LET ((M (MAX 1.0 3 2.0))) (OR (EQLT M 3) (EQLT M 3.0))) T)
;; Loading (DEFTEST MAX.31 (LET ((M (MAX 1.0 3 2.0))) (OR (EQLT M 3) (EQLT M 3.0))) T)
;; Loading (DEFTEST MAX.32 (LET ((M (MAX 1.0 3 2.0))) (OR (EQLT M 3) (EQLT M 3.0))) T)
;; Loading (DEFTEST MAX.33 (LET ((M (MAX 1.0 3 2.0))) (OR (EQLT M 3) (EQLT M 3.0))) T)
;; Loading (DEFTEST MAX.34 (LET ((M (MAX 1.0 3 2.0))) (OR (EQLT M 3) (EQLT M 3.0))) T)
;; Loading (DEFTEST MAX.ORDER.1 (LET ((I 0) X Y) (VALUES (MAX (PROGN (SETF X (INCF I)) 10) (PROGN (SETF Y (INCF I)) 20)) I X Y)) 20 2 1 2)
;; Loading (DEFTEST MAX.ORDER.2 (LET ((I 0) X Y Z) (VALUES (MAX (PROGN (SETF X (INCF I)) 10) (PROGN (SETF Y (INCF I)) 20) (PROGN (SETF Z (INCF I)) 30)) I X Y Z)) 30 3 1 2 3)
;; Loading (DEFTEST MAX.ORDER.3 (LET ((I 0) U V W X Y Z) (VALUES (MAX (PROGN (SETF U (INCF I)) 10) (PROGN (SETF V (INCF I)) 20) (PROGN (SETF W (INCF I)) 30) (PROGN (SETF X (INCF I)) 10) (PROGN (SETF Y (INCF I)) 20) (PROGN (SETF Z (INCF I)) 30)) I U V W X Y Z)) 30 6 1 2 3 4 5 6)
;; Loading (LOAD "min.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/min.lsp 8153FA17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST MIN.ERROR.1 (SIGNALS-ERROR (MIN) PROGRAM-ERROR) T)
;; Loading (DEFTEST MIN.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION MIN) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST MIN.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MIN 0 X))) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST MIN.1 (LOOP FOR N IN *REALS* WHEN (OR (NOT (EQL (MIN N) N)) (NOT (EQL (MIN N N) N)) (NOT (EQL (MIN N N N) N)) (NOT (EQL (APPLY (FUNCTION MIN) (MAKE-LIST (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) :INITIAL-ELEMENT N)) N))) COLLECT N) NIL)
;; Loading (DEFTEST MIN.2 (MIN.2-FN) NIL)
;; Loading (DEFTEST MIN.3 (LOOP FOR X = (- (RANDOM 60000) 30000) FOR Y = (- (RANDOM 60000) 30000) FOR M = (MIN X Y) FOR M2 = (IF (<= X Y) X Y) REPEAT 1000 UNLESS (EQL M M2) COLLECT (LIST X Y M M2)) NIL)
;; Loading (DEFTEST MIN.4 (LOOP FOR X = (- (RANDOM 6000000) 3000000) FOR Y = (- (RANDOM 6000000) 3000000) FOR M = (MIN X Y) FOR M2 = (IF (<= X Y) X Y) REPEAT 1000 UNLESS (EQL M M2) COLLECT (LIST X Y M M2)) NIL)
;; Loading (DEFTEST MIN.5 (LOOP FOR X = (- (RANDOM 1000000000000) 500000000000) FOR Y = (- (RANDOM 1000000000000) 500000000000) FOR M = (MIN X Y) FOR M2 = (IF (<= X Y) X Y) REPEAT 1000 UNLESS (EQL M M2) COLLECT (LIST X Y M M2)) NIL)
;; Loading (DEFTEST MIN.6 (LET ((M (MIN 0 1.0))) (OR (EQLT M 0) (EQLT M 0.0))) T)
;; Loading (DEFTEST MIN.7 (MIN 2 1.0) 1.0)
;; Loading (DEFTEST MIN.8 (LET ((M (MIN 2 3.0))) (OR (EQLT M 2) (EQLT M 2.0))) T)
;; Loading (DEFTEST MIN.9 (MIN 2 1.0) 1.0)
;; Loading (DEFTEST MIN.10 (LET ((M (MIN 2 10.0))) (OR (EQLT M 2) (EQLT M 2.0))) T)
;; Loading (DEFTEST MIN.11 (MIN 100 1.0) 1.0)
;; Loading (DEFTEST MIN.12 (LET ((M (MIN 2 17.25))) (OR (EQLT M 2) (EQLT M 2.0))) T)
;; Loading (DEFTEST MIN.13 (MIN 2 1.0) 1.0)
;; Loading (DEFTEST MIN.15 (LET ((M (MIN 1.0 2.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MIN.16 (MIN 3.0 1.0) 1.0)
;; Loading (DEFTEST MIN.17 (LET ((M (MIN 1.0 2.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MIN.18 (MIN 5.0 1.0) 1.0)
;; Loading (DEFTEST MIN.19 (LET ((M (MIN 1.0 2.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MIN.20 (MIN 2.0 1.0) 1.0)
;; Loading (DEFTEST MIN.21 (LET ((M (MIN 1.0 2.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MIN.22 (MIN 18.0 1.0) 1.0)
;; Loading (DEFTEST MIN.23 (LET ((M (MIN 1.0 100.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MIN.24 (MIN 19.0 1.0) 1.0)
;; Loading (DEFTEST MIN.25 (LET ((M (MIN 1.0 12.0))) (OR (EQLT M 1.0) (EQLT M 1.0))) T)
;; Loading (DEFTEST MIN.26 (MIN 15.0 1.0) 1.0)
;; Loading (DEFTEST MIN.27 (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) FOR X = (MAKE-LIST I :INITIAL-ELEMENT 1) DO (SETF (ELT X (RANDOM I)) 0) UNLESS (EQL (APPLY (FUNCTION MIN) X) 0) COLLECT X) NIL)
;; Loading (DEFTEST MIN.28 (LET ((M (MIN 1/3 0.8))) (OR (EQLT M 1/3) (EQLT M (FLOAT 1/3 0.8)))) T)
;; Loading (DEFTEST MIN.29 (LET ((M (MIN 1.0 -3 2.0))) (OR (EQLT M -3) (EQLT M -3.0))) T)
;; Loading (DEFTEST MIN.30 (LET ((M (MIN 1.0 -3 2.0))) (OR (EQLT M -3) (EQLT M -3.0))) T)
;; Loading (DEFTEST MIN.31 (LET ((M (MIN 1.0 -3 2.0))) (OR (EQLT M -3) (EQLT M -3.0))) T)
;; Loading (DEFTEST MIN.32 (LET ((M (MIN 1.0 -3 2.0))) (OR (EQLT M -3) (EQLT M -3.0))) T)
;; Loading (DEFTEST MIN.33 (LET ((M (MIN 1.0 -3 2.0))) (OR (EQLT M -3) (EQLT M -3.0))) T)
;; Loading (DEFTEST MIN.34 (LET ((M (MIN 1.0 -3 2.0))) (OR (EQLT M -3) (EQLT M -3.0))) T)
;; Loading (DEFTEST MIN.ORDER.1 (LET ((I 0) X Y) (VALUES (MIN (PROGN (SETF X (INCF I)) 10) (PROGN (SETF Y (INCF I)) 20)) I X Y)) 10 2 1 2)
;; Loading (DEFTEST MIN.ORDER.2 (LET ((I 0) X Y Z) (VALUES (MIN (PROGN (SETF X (INCF I)) 10) (PROGN (SETF Y (INCF I)) 20) (PROGN (SETF Z (INCF I)) 30)) I X Y Z)) 10 3 1 2 3)
;; Loading (DEFTEST MIN.ORDER.3 (LET ((I 0) U V W X Y Z) (VALUES (MIN (PROGN (SETF U (INCF I)) 10) (PROGN (SETF V (INCF I)) 20) (PROGN (SETF W (INCF I)) 30) (PROGN (SETF X (INCF I)) 10) (PROGN (SETF Y (INCF I)) 20) (PROGN (SETF Z (INCF I)) 30)) I U V W X Y Z)) 10 6 1 2 3 4 5 6)
;; Loading (LOAD "minusp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/minusp.lsp 81675D27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MINUSP.ERROR.1 (SIGNALS-ERROR (MINUSP) PROGRAM-ERROR) T)
;; Loading (DEFTEST MINUSP.ERROR.2 (SIGNALS-ERROR (MINUSP 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST MINUSP.ERROR.3 (SIGNALS-ERROR (MINUSP 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MINUSP.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION MINUSP) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST MINUSP.1 (MINUSP 0) NIL)
;; Loading (DEFTEST MINUSP.2 (NOTNOT-MV (MINUSP -1)) T)
;; Loading (DEFTEST MINUSP.3 (MINUSP 1) NIL)
;; Loading (DEFTEST MINUSP.4 (LOOP FOR X IN *REALS* WHEN (IF (MINUSP X) (>= X 0) (< X 0)) COLLECT X) NIL)
;; Loading (DEFTEST MINUSP.5 (SOME (FUNCTION MINUSP) (QUOTE (0.0 0.0 0.0 0.0))) NIL)
;; Loading (DEFTEST MINUSP.6 (REMOVE-IF (FUNCTION MINUSP) (LIST LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-DOUBLE-FLOAT MOST-NEGATIVE-LONG-FLOAT)) NIL)
;; Loading (LOAD "plusp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/plusp.lsp 816CEFF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PLUSP.ERROR.1 (SIGNALS-ERROR (PLUSP) PROGRAM-ERROR) T)
;; Loading (DEFTEST PLUSP.ERROR.2 (SIGNALS-ERROR (PLUSP 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST PLUSP.ERROR.3 (SIGNALS-ERROR (PLUSP 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PLUSP.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION PLUSP) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST PLUSP.1 (PLUSP 0) NIL)
;; Loading (DEFTEST PLUSP.2 (PLUSP -1) NIL)
;; Loading (DEFTEST PLUSP.3 (NOTNOT-MV (PLUSP 1)) T)
;; Loading (DEFTEST PLUSP.4 (LOOP FOR X IN *REALS* WHEN (IF (PLUSP X) (<= X 0) (> X 0)) COLLECT X) NIL)
;; Loading (DEFTEST PLUSP.5 (SOME (FUNCTION PLUSP) (QUOTE (0.0 0.0 0.0 0.0))) NIL)
;; Loading (DEFTEST PLUSP.6 (SOME (FUNCTION PLUSP) (QUOTE (0.0 0.0 0.0 0.0))) NIL)
;; Loading (DEFTEST PLUSP.7 (REMOVE-IF (FUNCTION PLUSP) (LIST LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT)) NIL)
;; Loading (LOAD "zerop.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/zerop.lsp 8172D3F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ZEROP.ERROR.1 (SIGNALS-ERROR (ZEROP) PROGRAM-ERROR) T)
;; Loading (DEFTEST ZEROP.ERROR.2 (SIGNALS-ERROR (ZEROP 0 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST ZEROP.ERROR.3 (SIGNALS-ERROR (ZEROP 1 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ZEROP.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION ZEROP) (FUNCTION NUMBERP)) NIL)
;; Loading (DEFTEST ZEROP.1 (LOOP FOR X IN *NUMBERS* WHEN (IF (ZEROP X) (/= X 0) (= X 0)) COLLECT X) NIL)
;; Loading (DEFTEST ZEROP.2 (ZEROP 1) NIL)
;; Loading (DEFTEST ZEROP.3 (ZEROP -1) NIL)
;; Loading (DEFTEST ZEROP.4 (NOTNOT-MV (ZEROP 0)) T)
;; Loading (DEFTEST ZEROP.5 (NOTNOT-MV (ZEROP 0.0)) T)
;; Loading (DEFTEST ZEROP.6 (NOTNOT-MV (ZEROP 0.0)) T)
;; Loading (DEFTEST ZEROP.7 (NOTNOT-MV (ZEROP 0.0)) T)
;; Loading (DEFTEST ZEROP.7A (NOTNOT-MV (ZEROP 0.0)) T)
;; Loading (DEFTEST ZEROP.8 (REMOVE-IF-NOT (FUNCTION ZEROP) (LIST LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-DOUBLE-FLOAT MOST-NEGATIVE-LONG-FLOAT)) NIL)
;; Loading (DEFTEST ZEROP.9 (REMOVE-IF-NOT (FUNCTION ZEROP) (LIST LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT)) NIL)
;; Loading (DEFTEST ZEROP.10 (NOTEVERY (FUNCTION ZEROP) (LIST 0.0 0.0 0.0 0.0)) NIL)
;; Loading (LOAD "floor.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/floor.lsp 817AF4A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "floor-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/floor-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN FLOOR.1-FN NIL (LOOP FOR N = (- (RANDOM 2000000000) 1000000000) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (FLOOR N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (= N N2) (INTEGERP R) (< -1 R D)) COLLECT (LIST N D Q R N2))).
;; Compiling form (DEFUN FLOOR.2-FN NIL (LOOP FOR NUM = (RANDOM 1000000000) FOR DENOM = (1+ (RANDOM 1000)) FOR N = (/ NUM DENOM) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (FLOOR N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (<= 0 R) (< R D) (= N N2)) COLLECT (LIST N D Q R N2))).
;; Compiling form (DEFUN FLOOR.3-FN (WIDTH) (LOOP FOR N = (- (RANDOM WIDTH) (/ WIDTH 2)) FOR VALS = (MULTIPLE-VALUE-LIST (FLOOR N)) FOR (Q R) = VALS FOR N2 = (+ Q R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (= N N2) (<= 0 R) (< R 1)) COLLECT (LIST N Q R N2))).
;; Compiling form (DEFUN FLOOR.7-FN NIL (LOOP FOR NUMERATOR = (- (RANDOM 10000000000) 5000000000) FOR DENOMINATOR = (1+ (RANDOM 100000)) FOR N = (/ NUMERATOR DENOMINATOR) FOR VALS = (MULTIPLE-VALUE-LIST (FLOOR N)) FOR (Q R) = VALS FOR N2 = (+ Q R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (= N N2) (<= 0 R) (< R 1)) COLLECT (LIST N Q R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN FLOOR.8-FN NIL (LOOP FOR NUM1 = (- (RANDOM 10000000000) 5000000000) FOR DEN1 = (1+ (RANDOM 100000)) FOR N = (/ NUM1 DEN1) FOR NUM2 = (- (1+ (RANDOM 1000000))) FOR DEN2 = (1+ (RANDOM 1000000)) FOR D = (/ NUM2 DEN2) FOR VALS = (MULTIPLE-VALUE-LIST (FLOOR N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (>= 0 R) (> R D) (= N N2)) COLLECT (LIST N Q D R N2))).
;; Compiling form (DEFUN FLOOR.9-FN NIL (LOOP FOR NUM1 = (- (RANDOM 1000000000000000) 500000000000000) FOR DEN1 = (1+ (RANDOM 10000000000)) FOR N = (/ NUM1 DEN1) FOR NUM2 = (- (1+ (RANDOM 1000000000))) FOR DEN2 = (1+ (RANDOM 10000000)) FOR D = (/ NUM2 DEN2) FOR VALS = (MULTIPLE-VALUE-LIST (FLOOR N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (>= 0 R) (> R D) (= N N2)) COLLECT (LIST N Q D R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/floor-aux.llf C115B0B7>
;; Loading (DEFTEST FLOOR.ERROR.1 (SIGNALS-ERROR (FLOOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLOOR.ERROR.2 (SIGNALS-ERROR (FLOOR 1.0 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLOOR.1 (FLOOR.1-FN) NIL)
;; Loading (DEFTEST FLOOR.2 (FLOOR.2-FN) NIL)
;; Loading (DEFTEST FLOOR.3 (FLOOR.3-FN 20000.0) NIL)
;; Loading (DEFTEST FLOOR.4 (FLOOR.3-FN 20000.0) NIL)
;; Loading (DEFTEST FLOOR.5 (FLOOR.3-FN 20000.0) NIL)
;; Loading (DEFTEST FLOOR.6 (FLOOR.3-FN 20000.0) NIL)
;; Loading (DEFTEST FLOOR.7 (FLOOR.7-FN) NIL)
;; Loading (DEFTEST FLOOR.8 (FLOOR.8-FN) NIL)
;; Loading (DEFTEST FLOOR.9 (FLOOR.9-FN) NIL)
;; Loading (DEFTEST FLOOR.10 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X X)) UNLESS (AND (EQL Q 1) (ZEROP R) (IF (RATIONALP X) (EQL R 0) (EQL R (FLOAT 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST FLOOR.11 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR (- X) X)) UNLESS (AND (EQL Q -1) (ZEROP R) (IF (RATIONALP X) (EQL R 0) (EQL R (FLOAT 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST FLOOR.12 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FLOOR.13 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X)) UNLESS (AND (EQL Q (1- I)) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FLOOR.14 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FLOOR.15 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X)) UNLESS (AND (EQL Q (1- I)) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FLOOR.16 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FLOOR.17 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X)) UNLESS (AND (EQL Q (1- I)) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FLOOR.18 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FLOOR.19 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FLOOR X)) UNLESS (AND (EQL Q (1- I)) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (LOAD "ffloor.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ffloor.lsp C13B8477>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "ffloor-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/ffloor-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN FFLOOR.1-FN NIL (LOOP FOR N = (- (RANDOM 200000) 100000) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (FFLOOR N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 100 UNLESS (AND (EQL (LENGTH VALS) 2) (FLOATP Q) (= N N2) (INTEGERP R) (< -1 R D)) COLLECT (LIST N D Q R N2))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ffloor-aux.llf C15D8847>
;; Loading (DEFTEST FFLOOR.ERROR.1 (SIGNALS-ERROR (FFLOOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST FFLOOR.ERROR.2 (SIGNALS-ERROR (FFLOOR 1.0 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FFLOOR.1 (FFLOOR.1-FN) NIL)
;; Loading (DEFTEST FFLOOR.10 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X X)) UNLESS (AND (FLOATP Q) (IF (FLOATP X) (EQL Q (FLOAT 1 X)) (= Q 1)) (ZEROP R) (IF (FLOATP X) (EQL R (FLOAT 0 X)) (= R 0))) COLLECT X) NIL)
;; Loading (DEFTEST FFLOOR.11 (LOOP FOR X IN (REMOVE-IF-NOT (FUNCTION FLOATP) (REMOVE-IF (FUNCTION ZEROP) *REALS*)) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR (- X) X)) UNLESS (AND (FLOATP Q) (IF (FLOATP X) (EQL Q (FLOAT -1 X)) (= Q -1)) (ZEROP R) (IF (FLOATP X) (EQL R (FLOAT 0 X)) (= R 0))) COLLECT X) NIL)
;; Loading (DEFTEST FFLOOR.12 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SHORT-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FFLOOR.13 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X)) UNLESS (AND (EQL Q (COERCE (1- I) (QUOTE SHORT-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FFLOOR.14 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SINGLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FFLOOR.15 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X)) UNLESS (AND (EQL Q (COERCE (1- I) (QUOTE SINGLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FFLOOR.16 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X)) UNLESS (AND (EQL Q (COERCE I (QUOTE DOUBLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FFLOOR.17 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X)) UNLESS (AND (EQL Q (COERCE (1- I) (QUOTE DOUBLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FFLOOR.18 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X)) UNLESS (AND (EQL Q (COERCE I (QUOTE LONG-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FFLOOR.19 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FFLOOR X)) UNLESS (AND (EQL Q (COERCE (1- I) (QUOTE LONG-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (LOAD "ceiling.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ceiling.lsp C16DDA37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "ceiling-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/ceiling-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN CEILING.1-FN NIL (LOOP FOR N = (- (RANDOM 2000000000) 1000000000) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (CEILING N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (= N N2) (INTEGERP R) (< (- D) R 1)) COLLECT (LIST N D Q R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN CEILING.2-FN NIL (LOOP FOR NUM = (RANDOM 1000000000) FOR DENOM = (1+ (RANDOM 1000)) FOR N = (/ NUM DENOM) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (CEILING N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (<= R 0) (< (- D) R) (= N N2)) COLLECT (LIST N D Q R N2))).
;; Compiling form (DEFUN CEILING.3-FN (WIDTH) (LOOP FOR N = (- (RANDOM WIDTH) (/ WIDTH 2)) FOR VALS = (MULTIPLE-VALUE-LIST (CEILING N)) FOR (Q R) = VALS FOR N2 = (+ Q R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (= N N2) (<= 0 (- R)) (< (- R) 1)) COLLECT (LIST N Q R N2))).
;; Compiling form (DEFUN CEILING.7-FN NIL (LOOP FOR NUMERATOR = (- (RANDOM 10000000000) 5000000000) FOR DENOMINATOR = (1+ (RANDOM 100000)) FOR N = (/ NUMERATOR DENOMINATOR) FOR VALS = (MULTIPLE-VALUE-LIST (CEILING N)) FOR (Q R) = VALS FOR N2 = (+ Q R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (= N N2) (<= 0 (- R)) (< (- R) 1)) COLLECT (LIST N Q R N2))).
;; Compiling form (DEFUN CEILING.8-FN NIL (LOOP FOR NUM1 = (- (RANDOM 10000000000) 5000000000) FOR DEN1 = (1+ (RANDOM 100000)) FOR N = (/ NUM1 DEN1) FOR NUM2 = (- (1+ (RANDOM 1000000))) FOR DEN2 = (1+ (RANDOM 1000000)) FOR D = (/ NUM2 DEN2) FOR VALS = (MULTIPLE-VALUE-LIST (CEILING N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (<= 0 R) (< R (- D)) (= N N2)) COLLECT (LIST N Q D R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN CEILING.9-FN NIL (LOOP FOR NUM1 = (- (RANDOM 1000000000000000) 500000000000000) FOR DEN1 = (1+ (RANDOM 10000000000)) FOR N = (/ NUM1 DEN1) FOR NUM2 = (- (1+ (RANDOM 1000000000))) FOR DEN2 = (1+ (RANDOM 10000000)) FOR D = (/ NUM2 DEN2) FOR VALS = (MULTIPLE-VALUE-LIST (CEILING N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (<= 0 R) (< R (- D)) (= N N2)) COLLECT (LIST N Q D R N2))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ceiling-aux.llf C1583AC7>
;; Loading (DEFTEST CEILING.ERROR.1 (SIGNALS-ERROR (CEILING) PROGRAM-ERROR) T)
;; Loading (DEFTEST CEILING.ERROR.2 (SIGNALS-ERROR (CEILING 1.0 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CEILING.1 (CEILING.1-FN) NIL)
;; Loading (DEFTEST CEILING.2 (CEILING.2-FN) NIL)
;; Loading (DEFTEST CEILING.3 (CEILING.3-FN 20000.0) NIL)
;; Loading (DEFTEST CEILING.4 (CEILING.3-FN 20000.0) NIL)
;; Loading (DEFTEST CEILING.5 (CEILING.3-FN 20000.0) NIL)
;; Loading (DEFTEST CEILING.6 (CEILING.3-FN 20000.0) NIL)
;; Loading (DEFTEST CEILING.7 (CEILING.7-FN) NIL)
;; Loading (DEFTEST CEILING.8 (CEILING.8-FN) NIL)
;; Loading (DEFTEST CEILING.9 (CEILING.9-FN) NIL)
;; Loading (DEFTEST CEILING.10 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X X)) UNLESS (AND (EQL Q 1) (ZEROP R) (IF (RATIONALP X) (EQL R 0) (EQL R (FLOAT 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST CEILING.11 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING (- X) X)) UNLESS (AND (EQL Q -1) (ZEROP R) (IF (RATIONALP X) (EQL R 0) (EQL R (FLOAT 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST CEILING.12 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X)) UNLESS (AND (EQL Q (1+ I)) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST CEILING.13 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X)) UNLESS (AND (EQL Q I) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST CEILING.14 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X)) UNLESS (AND (EQL Q (1+ I)) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST CEILING.15 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X)) UNLESS (AND (EQL Q I) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST CEILING.16 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X)) UNLESS (AND (EQL Q (1+ I)) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST CEILING.17 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X)) UNLESS (AND (EQL Q I) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST CEILING.18 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X)) UNLESS (AND (EQL Q (1+ I)) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST CEILING.19 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (CEILING X)) UNLESS (AND (EQL Q I) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (LOAD "fceiling.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fceiling.lsp C176F467>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "fceiling-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/fceiling-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN FCEILING.1-FN NIL (LOOP FOR N = (- (RANDOM 200000) 100000) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (FCEILING N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 100 UNLESS (AND (EQL (LENGTH VALS) 2) (FLOATP Q) (= N N2) (INTEGERP R) (< (- D) R 1)) COLLECT (LIST N D Q R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fceiling-aux.llf 811DAB27>
;; Loading (DEFTEST FCEILING.ERROR.1 (SIGNALS-ERROR (FCEILING) PROGRAM-ERROR) T)
;; Loading (DEFTEST FCEILING.ERROR.2 (SIGNALS-ERROR (FCEILING 1.0 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FCEILING.1 (FCEILING.1-FN) NIL)
;; Loading (DEFTEST FCEILING.10 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X X)) UNLESS (AND (FLOATP Q) (IF (FLOATP X) (EQL Q (FLOAT 1 X)) (= Q 1)) (ZEROP R) (IF (FLOATP X) (EQL R (FLOAT 0 X)) (= R 0))) COLLECT X) NIL)
;; Loading (DEFTEST FCEILING.11 (LOOP FOR X IN (REMOVE-IF-NOT (FUNCTION FLOATP) (REMOVE-IF (FUNCTION ZEROP) *REALS*)) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING (- X) X)) UNLESS (AND (FLOATP Q) (IF (FLOATP X) (EQL Q (FLOAT -1 X)) (= Q -1)) (ZEROP R) (IF (FLOATP X) (EQL R (FLOAT 0 X)) (= R 0))) COLLECT X) NIL)
;; Loading (DEFTEST FCEILING.12 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X)) UNLESS (AND (EQL Q (COERCE (1+ I) (QUOTE SHORT-FLOAT))) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FCEILING.13 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SHORT-FLOAT))) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FCEILING.14 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X)) UNLESS (AND (EQL Q (COERCE (1+ I) (QUOTE SINGLE-FLOAT))) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FCEILING.15 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SINGLE-FLOAT))) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FCEILING.16 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X)) UNLESS (AND (EQL Q (COERCE (1+ I) (QUOTE DOUBLE-FLOAT))) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FCEILING.17 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X)) UNLESS (AND (EQL Q (COERCE I (QUOTE DOUBLE-FLOAT))) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FCEILING.18 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X)) UNLESS (AND (EQL Q (COERCE (1+ I) (QUOTE LONG-FLOAT))) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FCEILING.19 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FCEILING X)) UNLESS (AND (EQL Q (COERCE I (QUOTE LONG-FLOAT))) (EQL R (- RRAD 1))) COLLECT (LIST I X Q R))) NIL)
;; Loading (LOAD "truncate.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/truncate.lsp 813E49A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "truncate-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/truncate-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN TRUNCATE.1-FN NIL (LOOP FOR N = (- (RANDOM 2000000000) 1000000000) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (TRUNCATE N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (= N N2) (INTEGERP R) (IF (>= N 0) (< -1 R D) (< (- D) R 1))) COLLECT (LIST N D Q R N2))).
;; Compiling form (DEFUN TRUNCATE.2-FN NIL (LOOP FOR NUM = (RANDOM 1000000000) FOR DENOM = (1+ (RANDOM 1000)) FOR N = (/ NUM DENOM) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (TRUNCATE N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (<= 0 R) (< R D) (= N N2)) COLLECT (LIST N D Q R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN TRUNCATE.3-FN (WIDTH) (LOOP FOR N = (- (RANDOM WIDTH) (/ WIDTH 2)) FOR VALS = (MULTIPLE-VALUE-LIST (TRUNCATE N)) FOR (Q R) = VALS FOR N2 = (+ Q R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (= N N2) (IF (>= N 0) (AND (<= 0 R) (< R 1)) (AND (< -1 R) (<= R 0)))) COLLECT (LIST N Q R N2))).
;; Compiling form (DEFUN TRUNCATE.7-FN NIL (LOOP FOR NUMERATOR = (- (RANDOM 10000000000) 5000000000) FOR DENOMINATOR = (1+ (RANDOM 100000)) FOR N = (/ NUMERATOR DENOMINATOR) FOR VALS = (MULTIPLE-VALUE-LIST (TRUNCATE N)) FOR (Q R) = VALS FOR N2 = (+ Q R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (= N N2) (IF (>= N 0) (AND (<= 0 R) (< R 1)) (AND (< -1 R) (<= R 0)))) COLLECT (LIST N Q R N2))).
;; Compiling form (DEFUN TRUNCATE.8-FN NIL (LOOP FOR NUM1 = (- (RANDOM 10000000000) 5000000000) FOR DEN1 = (1+ (RANDOM 100000)) FOR N = (/ NUM1 DEN1) FOR NUM2 = (- (1+ (RANDOM 1000000))) FOR DEN2 = (1+ (RANDOM 1000000)) FOR D = (/ NUM2 DEN2) FOR VALS = (MULTIPLE-VALUE-LIST (TRUNCATE N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (IF (> N 0) (AND (<= 0 R) (< R (- D))) (AND (>= 0 R) (> R D))) (= N N2)) COLLECT (LIST N Q D R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN TRUNCATE.9-FN NIL (LOOP FOR NUM1 = (- (RANDOM 1000000000000000) 500000000000000) FOR DEN1 = (1+ (RANDOM 10000000000)) FOR N = (/ NUM1 DEN1) FOR NUM2 = (- (1+ (RANDOM 1000000000))) FOR DEN2 = (1+ (RANDOM 10000000)) FOR D = (/ NUM2 DEN2) FOR VALS = (MULTIPLE-VALUE-LIST (TRUNCATE N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (IF (> N 0) (AND (<= 0 R) (< R (- D))) (AND (>= 0 R) (> R D))) (= N N2)) COLLECT (LIST N Q D R N2))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/truncate-aux.llf 815BB617>
;; Loading (DEFTEST TRUNCATE.ERROR.1 (SIGNALS-ERROR (TRUNCATE) PROGRAM-ERROR) T)
;; Loading (DEFTEST TRUNCATE.ERROR.2 (SIGNALS-ERROR (TRUNCATE 1.0 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST TRUNCATE.1 (TRUNCATE.1-FN) NIL)
;; Loading (DEFTEST TRUNCATE.2 (TRUNCATE.2-FN) NIL)
;; Loading (DEFTEST TRUNCATE.3 (TRUNCATE.3-FN 20000.0) NIL)
;; Loading (DEFTEST TRUNCATE.4 (TRUNCATE.3-FN 20000.0) NIL)
;; Loading (DEFTEST TRUNCATE.5 (TRUNCATE.3-FN 20000.0) NIL)
;; Loading (DEFTEST TRUNCATE.6 (TRUNCATE.3-FN 20000.0) NIL)
;; Loading (DEFTEST TRUNCATE.7 (TRUNCATE.7-FN) NIL)
;; Loading (DEFTEST TRUNCATE.8 (TRUNCATE.8-FN) NIL)
;; Loading (DEFTEST TRUNCATE.9 (TRUNCATE.9-FN) NIL)
;; Loading (DEFTEST TRUNCATE.10 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X X)) UNLESS (AND (EQL Q 1) (ZEROP R) (IF (RATIONALP X) (EQL R 0) (EQL R (FLOAT 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST TRUNCATE.11 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE (- X) X)) UNLESS (AND (EQL Q -1) (ZEROP R) (IF (RATIONALP X) (EQL R 0) (EQL R (FLOAT 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST TRUNCATE.12 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST TRUNCATE.13 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X)) UNLESS (AND (EQL Q (1- I)) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST TRUNCATE.14 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST TRUNCATE.15 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X)) UNLESS (AND (EQL Q (1- I)) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST TRUNCATE.16 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST TRUNCATE.17 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X)) UNLESS (AND (EQL Q (1- I)) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST TRUNCATE.18 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST TRUNCATE.19 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (TRUNCATE X)) UNLESS (AND (EQL Q (1- I)) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (LOAD "ftruncate.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ftruncate.lsp 817A76B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "ftruncate-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/ftruncate-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN FTRUNCATE.1-FN NIL (LOOP FOR N = (- (RANDOM 200000) 100000) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (FTRUNCATE N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 100 UNLESS (AND (EQL (LENGTH VALS) 2) (FLOATP Q) (= N N2) (INTEGERP R) (IF (>= N 0) (< -1 R D) (< -1 (- R) D))) COLLECT (LIST N D Q R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ftruncate-aux.llf C11E98E7>
;; Loading (DEFTEST FTRUNCATE.ERROR.1 (SIGNALS-ERROR (FTRUNCATE) PROGRAM-ERROR) T)
;; Loading (DEFTEST FTRUNCATE.ERROR.2 (SIGNALS-ERROR (FTRUNCATE 1.0 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FTRUNCATE.1 (FTRUNCATE.1-FN) NIL)
;; Loading (DEFTEST FTRUNCATE.10 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X X)) UNLESS (AND (FLOATP Q) (IF (FLOATP X) (EQL Q (FLOAT 1 X)) (= Q 1)) (ZEROP R) (IF (FLOATP X) (EQL R (FLOAT 0 X)) (= R 0))) COLLECT X) NIL)
;; Loading (DEFTEST FTRUNCATE.11 (LOOP FOR X IN (REMOVE-IF-NOT (FUNCTION FLOATP) (REMOVE-IF (FUNCTION ZEROP) *REALS*)) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE (- X) X)) UNLESS (AND (FLOATP Q) (IF (FLOATP X) (EQL Q (FLOAT -1 X)) (= Q -1)) (ZEROP R) (IF (FLOATP X) (EQL R (FLOAT 0 X)) (= R 0))) COLLECT X) NIL)
;; Loading (DEFTEST FTRUNCATE.12 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SHORT-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FTRUNCATE.13 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X)) UNLESS (AND (EQL Q (COERCE (1- I) (QUOTE SHORT-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FTRUNCATE.14 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SINGLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FTRUNCATE.15 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X)) UNLESS (AND (EQL Q (COERCE (1- I) (QUOTE SINGLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FTRUNCATE.16 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X)) UNLESS (AND (EQL Q (COERCE I (QUOTE DOUBLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FTRUNCATE.17 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X)) UNLESS (AND (EQL Q (COERCE (1- I) (QUOTE DOUBLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FTRUNCATE.18 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X)) UNLESS (AND (EQL Q (COERCE I (QUOTE LONG-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FTRUNCATE.19 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 1.0 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FTRUNCATE X)) UNLESS (AND (EQL Q (COERCE (1- I) (QUOTE LONG-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (LOAD "round.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/round.lsp C13F5C17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "round-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/round-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN ROUND.1-FN NIL (LOOP FOR N = (- (RANDOM 2000000000) 1000000000) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (ROUND N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (= N N2) (INTEGERP R) (<= (- (/ D 2)) R (/ D 2))) UNLESS (OR (NOT (= (ABS R) (/ D 2))) (EVENP Q)) COLLECT (LIST N D Q R N2))).
;; Compiling form (DEFUN ROUND.2-FN NIL (LOOP FOR NUM = (RANDOM 1000000000) FOR DENOM = (1+ (RANDOM 1000)) FOR N = (/ NUM DENOM) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (ROUND N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (<= (- (/ D 2)) R (/ D 2)) (OR (NOT (= (ABS R) (/ D 2))) (EVENP Q)) (= N N2)) COLLECT (LIST N D Q R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN ROUND.3-FN (WIDTH) (LOOP FOR N = (- (RANDOM WIDTH) (/ WIDTH 2)) FOR VALS = (MULTIPLE-VALUE-LIST (ROUND N)) FOR (Q R) = VALS FOR N2 = (+ Q R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (= N N2) (<= 1/2 R 1/2) (OR (NOT (= (ABS R) 1/2)) (EVENP Q))) COLLECT (LIST N Q R N2))).
;; Compiling form (DEFUN ROUND.7-FN NIL (LOOP FOR NUMERATOR = (- (RANDOM 10000000000) 5000000000) FOR DENOMINATOR = (1+ (RANDOM 100000)) FOR N = (/ NUMERATOR DENOMINATOR) FOR VALS = (MULTIPLE-VALUE-LIST (ROUND N)) FOR (Q R) = VALS FOR N2 = (+ Q R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (= N N2) (<= 1/2 R 1/2) (OR (NOT (= (ABS R) 1/2)) (EVENP Q))) COLLECT (LIST N Q R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN ROUND.8-FN NIL (LOOP FOR NUM1 = (- (RANDOM 10000000000) 5000000000) FOR DEN1 = (1+ (RANDOM 100000)) FOR N = (/ NUM1 DEN1) FOR NUM2 = (- (1+ (RANDOM 1000000))) FOR DEN2 = (1+ (RANDOM 1000000)) FOR D = (/ NUM2 DEN2) FOR VALS = (MULTIPLE-VALUE-LIST (ROUND N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (<= (/ D 2) R (- (/ D 2))) (OR (NOT (= (ABS R) (- (/ D 2)))) (EVENP Q)) (= N N2)) COLLECT (LIST N Q D R N2))).
;; Compiling form (DEFUN ROUND.9-FN NIL (LOOP FOR NUM1 = (- (RANDOM 1000000000000000) 500000000000000) FOR DEN1 = (1+ (RANDOM 10000000000)) FOR N = (/ NUM1 DEN1) FOR NUM2 = (- (1+ (RANDOM 1000000000))) FOR DEN2 = (1+ (RANDOM 10000000)) FOR D = (/ NUM2 DEN2) FOR VALS = (MULTIPLE-VALUE-LIST (ROUND N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 1000 UNLESS (AND (EQL (LENGTH VALS) 2) (INTEGERP Q) (RATIONALP R) (<= (/ D 2) R (- (/ D 2))) (OR (NOT (= (ABS R) (- (/ D 2)))) (EVENP Q)) (= N N2)) COLLECT (LIST N Q D R N2))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/round-aux.llf 813BAF57>
;; Loading (DEFTEST ROUND.ERROR.1 (SIGNALS-ERROR (ROUND) PROGRAM-ERROR) T)
;; Loading (DEFTEST ROUND.ERROR.2 (SIGNALS-ERROR (ROUND 1.0 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ROUND.1 (ROUND.1-FN) NIL)
;; Loading (DEFTEST ROUND.2 (ROUND.2-FN) NIL)
;; Loading (DEFTEST ROUND.3 (ROUND.3-FN 20000.0) NIL)
;; Loading (DEFTEST ROUND.4 (ROUND.3-FN 20000.0) NIL)
;; Loading (DEFTEST ROUND.5 (ROUND.3-FN 20000.0) NIL)
;; Loading (DEFTEST ROUND.6 (ROUND.3-FN 20000.0) NIL)
;; Loading (DEFTEST ROUND.7 (ROUND.7-FN) NIL)
;; Loading (DEFTEST ROUND.8 (ROUND.8-FN) NIL)
;; Loading (DEFTEST ROUND.9 (ROUND.9-FN) NIL)
;; Loading (DEFTEST ROUND.10 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X X)) UNLESS (AND (EQL Q 1) (ZEROP R) (IF (RATIONALP X) (EQL R 0) (EQL R (FLOAT 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST ROUND.11 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND (- X) X)) UNLESS (AND (EQL Q -1) (ZEROP R) (IF (RATIONALP X) (EQL R 0) (EQL R (FLOAT 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST ROUND.12 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST ROUND.13 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X)) UNLESS (AND (EQL Q I) (EQL R (- RRAD))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST ROUND.14 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST ROUND.15 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X)) UNLESS (AND (EQL Q I) (EQL R (- RRAD))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST ROUND.16 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST ROUND.17 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X)) UNLESS (AND (EQL Q I) (EQL R (- RRAD))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST ROUND.18 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X)) UNLESS (AND (EQL Q I) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST ROUND.19 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (ROUND X)) UNLESS (AND (EQL Q I) (EQL R (- RRAD))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST ROUND.20 (ROUND 1/2) 0 1/2)
;; Loading (DEFTEST ROUND.21 (ROUND 3/2) 2 1/2)
;; Loading (LOAD "fround.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fround.lsp 81620517>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "fround-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/fround-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN FROUND.1-FN NIL (LOOP FOR N = (- (RANDOM 200000) 100000) FOR D = (1+ (RANDOM 10000)) FOR VALS = (MULTIPLE-VALUE-LIST (FROUND N D)) FOR (Q R) = VALS FOR N2 = (+ (* Q D) R) REPEAT 100 UNLESS (AND (EQL (LENGTH VALS) 2) (FLOATP Q) (= N N2) (INTEGERP R) (<= (- (/ D 2)) R (/ D 2)) (OR (/= (ABS R) (/ D 2)) (EVENP (FLOOR Q)))) COLLECT (LIST N D Q R N2))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fround-aux.llf 818D93B7>
;; Loading (DEFTEST FROUND.ERROR.1 (SIGNALS-ERROR (FROUND) PROGRAM-ERROR) T)
;; Loading (DEFTEST FROUND.ERROR.2 (SIGNALS-ERROR (FROUND 1.0 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FROUND.1 (FROUND.1-FN) NIL)
;; Loading (DEFTEST FROUND.10 (LOOP FOR X IN (REMOVE-IF (FUNCTION ZEROP) *REALS*) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X X)) UNLESS (AND (FLOATP Q) (IF (FLOATP X) (EQL Q (FLOAT 1 X)) (= Q 1)) (ZEROP R) (IF (FLOATP X) (EQL R (FLOAT 0 X)) (= R 0))) COLLECT X) NIL)
;; Loading (DEFTEST FROUND.11 (LOOP FOR X IN (REMOVE-IF-NOT (FUNCTION FLOATP) (REMOVE-IF (FUNCTION ZEROP) *REALS*)) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND (- X) X)) UNLESS (AND (FLOATP Q) (IF (FLOATP X) (EQL Q (FLOAT -1 X)) (= Q -1)) (ZEROP R) (IF (FLOATP X) (EQL R (FLOAT 0 X)) (= R 0))) COLLECT X) NIL)
;; Loading (DEFTEST FROUND.12 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SHORT-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FROUND.13 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SHORT-FLOAT))) (EQL R (- RRAD))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FROUND.14 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SINGLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FROUND.15 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X)) UNLESS (AND (EQL Q (COERCE I (QUOTE SINGLE-FLOAT))) (EQL R (- RRAD))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FROUND.16 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X)) UNLESS (AND (EQL Q (COERCE I (QUOTE DOUBLE-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FROUND.17 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X)) UNLESS (AND (EQL Q (COERCE I (QUOTE DOUBLE-FLOAT))) (EQL R (- RRAD))) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FROUND.18 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (+ I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X)) UNLESS (AND (EQL Q (COERCE I (QUOTE LONG-FLOAT))) (EQL R RRAD)) COLLECT (LIST I X Q R))) NIL)
;; Loading (DEFTEST FROUND.19 (LET* ((RADIX (FLOAT-RADIX 1.0)) (RAD (FLOAT RADIX 1.0)) (RRAD (/ 0.5 RAD))) (LOOP FOR I FROM 1 TO 1000 FOR X = (- I RRAD) FOR (Q R) = (MULTIPLE-VALUE-LIST (FROUND X)) UNLESS (AND (EQL Q (COERCE I (QUOTE LONG-FLOAT))) (EQL R (- RRAD))) COLLECT (LIST I X Q R))) NIL)
;; Loading (LOAD "sin.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/sin.lsp C1245817>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIN.1 (LOOP FOR I FROM -1000 TO 1000 FOR RLIST = (MULTIPLE-VALUE-LIST (SIN I)) FOR Y = (CAR RLIST) ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (OR (RATIONALP Y) (TYPEP Y (QUOTE SINGLE-FLOAT))))) T)
;; Loading (DEFTEST SIN.2 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR RLIST = (MULTIPLE-VALUE-LIST (SIN X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (TYPEP Y (QUOTE SHORT-FLOAT)))) T)
;; Loading (DEFTEST SIN.3 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR RLIST = (MULTIPLE-VALUE-LIST (SIN X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (TYPEP Y (QUOTE SINGLE-FLOAT)))) T)
;; Loading (DEFTEST SIN.4 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR RLIST = (MULTIPLE-VALUE-LIST (SIN X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (TYPEP Y (QUOTE DOUBLE-FLOAT)))) T)
;; Loading (DEFTEST SIN.5 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR RLIST = (MULTIPLE-VALUE-LIST (SIN X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (TYPEP Y (QUOTE LONG-FLOAT)))) T)
;; Loading (DEFTEST SIN.6 (LET ((R (SIN 0))) (OR (EQLT R 0) (EQLT R 0.0))) T)
;; Loading (DEFTEST SIN.7 (SIN 0.0) 0.0)
;; Loading (DEFTEST SIN.8 (SIN 0.0) 0.0)
;; Loading (DEFTEST SIN.9 (SIN 0.0) 0.0)
;; Loading (DEFTEST SIN.10 (SIN 0.0) 0.0)
;; Loading (DEFTEST SIN.11 (LOOP FOR I FROM 1 TO 100 UNLESS (APPROX= (SIN I) (SIN (COERCE I (QUOTE SINGLE-FLOAT)))) COLLECT I) NIL)
;; Loading (DEFTEST SIN.12 (APPROX= (SIN (COERCE (/ PI 2) (QUOTE SINGLE-FLOAT))) 1.0) T)
;; Loading (DEFTEST SIN.13 (APPROX= (SIN (COERCE (/ PI -2) (QUOTE SINGLE-FLOAT))) -1.0) T)
;; Loading (DEFTEST SIN.14 (APPROX= (SIN (COERCE (/ PI 2) (QUOTE SHORT-FLOAT))) 1.0) T)
;; Loading (DEFTEST SIN.15 (APPROX= (SIN (COERCE (/ PI -2) (QUOTE SHORT-FLOAT))) -1.0) T)
;; Loading (DEFTEST SIN.16 (APPROX= (SIN (COERCE (/ PI 2) (QUOTE DOUBLE-FLOAT))) 1.0) T)
;; Loading (DEFTEST SIN.17 (APPROX= (SIN (COERCE (/ PI -2) (QUOTE DOUBLE-FLOAT))) -1.0) T)
;; Loading (DEFTEST SIN.18 (APPROX= (SIN (COERCE (/ PI 2) (QUOTE LONG-FLOAT))) 1.0) T)
;; Loading (DEFTEST SIN.19 (APPROX= (SIN (COERCE (/ PI -2) (QUOTE LONG-FLOAT))) -1.0) T)
;; Loading (DEFTEST SIN.20 (LOOP FOR R = (- (RANDOM 2000) 1000) FOR I = (- (RANDOM 20) 10) FOR Y = (SIN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST SIN.21 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (SIN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST SIN.22 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (SIN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST SIN.23 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (SIN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST SIN.24 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (SIN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST SIN.ERROR.1 (SIGNALS-ERROR (SIN) PROGRAM-ERROR) T)
;; Loading (DEFTEST SIN.ERROR.2 (SIGNALS-ERROR (SIN 0.0 0.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST SIN.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SIN) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "cos.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cos.lsp C132C7C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COS.1 (LOOP FOR I FROM -1000 TO 1000 FOR RLIST = (MULTIPLE-VALUE-LIST (COS I)) FOR Y = (CAR RLIST) ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (OR (RATIONALP Y) (TYPEP Y (QUOTE SINGLE-FLOAT))))) T)
;; Loading (DEFTEST COS.2 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR RLIST = (MULTIPLE-VALUE-LIST (COS X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (TYPEP Y (QUOTE SHORT-FLOAT)))) T)
;; Loading (DEFTEST COS.3 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR RLIST = (MULTIPLE-VALUE-LIST (COS X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (TYPEP Y (QUOTE SINGLE-FLOAT)))) T)
;; Loading (DEFTEST COS.4 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR RLIST = (MULTIPLE-VALUE-LIST (COS X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (TYPEP Y (QUOTE DOUBLE-FLOAT)))) T)
;; Loading (DEFTEST COS.5 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR RLIST = (MULTIPLE-VALUE-LIST (COS X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (<= -1 Y 1) (TYPEP Y (QUOTE LONG-FLOAT)))) T)
;; Loading (DEFTEST COS.6 (LET ((R (COS 0))) (OR (EQLT R 1) (EQLT R 1.0))) T)
;; Loading (DEFTEST COS.7 (COS 0.0) 1.0)
;; Loading (DEFTEST COS.8 (COS 0.0) 1.0)
;; Loading (DEFTEST COS.9 (COS 0.0) 1.0)
;; Loading (DEFTEST COS.10 (COS 0.0) 1.0)
;; Loading (DEFTEST COS.11 (LOOP FOR I FROM 1 TO 100 UNLESS (APPROX= (COS I) (COS (COERCE I (QUOTE SINGLE-FLOAT)))) COLLECT I) NIL)
;; Loading (DEFTEST COS.12 (APPROX= (COS (COERCE (/ PI 2) (QUOTE SINGLE-FLOAT))) 0.0) T)
;; Loading (DEFTEST COS.13 (APPROX= (COS (COERCE (/ PI -2) (QUOTE SINGLE-FLOAT))) 0.0) T)
;; Loading (DEFTEST COS.14 (APPROX= (COS (COERCE (/ PI 2) (QUOTE SHORT-FLOAT))) 0.0) T)
;; Loading (DEFTEST COS.15 (APPROX= (COS (COERCE (/ PI -2) (QUOTE SHORT-FLOAT))) 0.0) T)
;; Loading (DEFTEST COS.16 (APPROX= (COS (COERCE (/ PI 2) (QUOTE DOUBLE-FLOAT))) 0.0) T)
;; Loading (DEFTEST COS.17 (APPROX= (COS (COERCE (/ PI -2) (QUOTE DOUBLE-FLOAT))) 0.0) T)
;; Loading (DEFTEST COS.18 (APPROX= (COS (COERCE (/ PI 2) (QUOTE LONG-FLOAT))) 0.0) T)
;; Loading (DEFTEST COS.19 (APPROX= (COS (COERCE (/ PI -2) (QUOTE LONG-FLOAT))) 0.0) T)
;; Loading (DEFTEST COS.20 (LOOP FOR R = (- (RANDOM 2000) 1000) FOR I = (- (RANDOM 20) 10) FOR Y = (COS (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST COS.21 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (COS (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST COS.22 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (COS (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST COS.23 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (COS (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST COS.24 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (COS (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST COS.ERROR.1 (SIGNALS-ERROR (COS) PROGRAM-ERROR) T)
;; Loading (DEFTEST COS.ERROR.2 (SIGNALS-ERROR (COS 0.0 0.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST COS.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION COS) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "tan.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/tan.lsp C140F847>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TAN.1 (LOOP FOR I FROM -1000 TO 1000 FOR RLIST = (MULTIPLE-VALUE-LIST (TAN I)) FOR Y = (CAR RLIST) ALWAYS (AND (NULL (CDR RLIST)) (OR (RATIONALP Y) (TYPEP Y (QUOTE SINGLE-FLOAT))))) T)
;; Loading (DEFTEST TAN.2 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR Y = (SAFE-TAN X 0.0) REPEAT 1000 ALWAYS (TYPEP Y (QUOTE SHORT-FLOAT))) T)
;; Loading (DEFTEST TAN.3 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR Y = (SAFE-TAN X 0.0) REPEAT 1000 ALWAYS (TYPEP Y (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST TAN.4 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR Y = (SAFE-TAN X 0.0) REPEAT 1000 ALWAYS (TYPEP Y (QUOTE DOUBLE-FLOAT))) T)
;; Loading (DEFTEST TAN.5 (LOOP FOR X = (- (RANDOM 2000.0) 1000.0) FOR Y = (SAFE-TAN 0.0) REPEAT 1000 ALWAYS (TYPEP Y (QUOTE LONG-FLOAT))) T)
;; Loading (DEFTEST TAN.6 (LET ((R (TAN 0))) (OR (EQLT R 0) (EQLT R 0.0))) T)
;; Loading (DEFTEST TAN.7 (TAN 0.0) 0.0)
;; Loading (DEFTEST TAN.8 (TAN 0.0) 0.0)
;; Loading (DEFTEST TAN.9 (TAN 0.0) 0.0)
;; Loading (DEFTEST TAN.10 (TAN 0.0) 0.0)
;; Loading (DEFTEST TAN.11 (LOOP FOR I FROM 1 TO 100 UNLESS (APPROX= (TAN I) (TAN (COERCE I (QUOTE SINGLE-FLOAT)))) COLLECT I) NIL)
;; Loading (DEFTEST TAN.12 (APPROX= (TAN (COERCE (/ PI 4) (QUOTE SINGLE-FLOAT))) 1.0) T)
;; Loading (DEFTEST TAN.13 (APPROX= (TAN (COERCE (/ PI -4) (QUOTE SINGLE-FLOAT))) -1.0) T)
;; Loading (DEFTEST TAN.14 (APPROX= (TAN (COERCE (/ PI 4) (QUOTE SHORT-FLOAT))) 1.0) T)
;; Loading (DEFTEST TAN.15 (APPROX= (TAN (COERCE (/ PI -4) (QUOTE SHORT-FLOAT))) -1.0) T)
;; Loading (DEFTEST TAN.16 (APPROX= (TAN (COERCE (/ PI 4) (QUOTE DOUBLE-FLOAT))) 1.0) T)
;; Loading (DEFTEST TAN.17 (APPROX= (TAN (COERCE (/ PI -4) (QUOTE DOUBLE-FLOAT))) -1.0) T)
;; Loading (DEFTEST TAN.18 (APPROX= (TAN (COERCE (/ PI 4) (QUOTE LONG-FLOAT))) 1.0) T)
;; Loading (DEFTEST TAN.19 (APPROX= (TAN (COERCE (/ PI -4) (QUOTE LONG-FLOAT))) -1.0) T)
;; Loading (DEFTEST TAN.20 (LOOP FOR R = (- (RANDOM 2000) 1000) FOR I = (- (RANDOM 20) 10) FOR Y = (SAFE-TAN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST TAN.21 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (SAFE-TAN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST TAN.22 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (SAFE-TAN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST TAN.23 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (SAFE-TAN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST TAN.24 (LOOP FOR R = (- (RANDOM 2000.0) 1000.0) FOR I = (- (RANDOM 20.0) 10.0) FOR Y = (SAFE-TAN (COMPLEX R I)) REPEAT 1000 ALWAYS (NUMBERP Y)) T)
;; Loading (DEFTEST TAN.ERROR.1 (SIGNALS-ERROR (TAN) PROGRAM-ERROR) T)
;; Loading (DEFTEST TAN.ERROR.2 (SIGNALS-ERROR (TAN 0.0 0.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST TAN.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION TAN) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "asin.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/asin.lsp C14DD7E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ASIN.1 (LOOP FOR I FROM -1000 TO 1000 FOR RLIST = (MULTIPLE-VALUE-LIST (ASIN I)) FOR Y = (CAR RLIST) ALWAYS (AND (NULL (CDR RLIST)) (NUMBERP Y))) T)
;; Loading (DEFTEST ASIN.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (LET ((A (COERCE 2000 TYPE)) (B (COERCE -1000 TYPE))) (LOOP FOR X = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ASIN X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (NUMBERP Y))))) (T T T T))
;; Loading (DEFTEST ASIN.3 (LOOP FOR TYPE IN (QUOTE (INTEGER SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (LET ((A (COERCE 2000 TYPE)) (B (COERCE -1000 TYPE))) (LOOP FOR X = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ASIN (COMPLEX 0 X))) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (NUMBERP Y))))) (T T T T T))
;; Loading (DEFTEST ASIN.4 (LOOP FOR TYPE IN (QUOTE (INTEGER SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (LET ((A (COERCE 2000 TYPE)) (B (COERCE -1000 TYPE))) (LOOP FOR X1 = (- (RANDOM A) B) FOR X2 = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ASIN (COMPLEX X1 X2))) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (NUMBERP Y))))) (T T T T T))
;; Loading (DEFTEST ASIN.5 (APPROX= (ASIN 1) (COERCE (/ PI 2) (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST ASIN.6 (LOOP FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) UNLESS (APPROX= (ASIN (COERCE 1 TYPE)) (COERCE (/ PI 2) TYPE)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ASIN.7 (LOOP FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) UNLESS (APPROX= (ASIN (COERCE 0 TYPE)) (COERCE 0 TYPE)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ASIN.8 (LOOP FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) UNLESS (APPROX= (ASIN (COERCE -1 TYPE)) (COERCE (/ PI -2) TYPE)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ASIN.9 (MACROLET ((%M (Z) Z)) (ASIN (EXPAND-IN-CURRENT-ENV (%M 0.0)))) 0.0)
;; Loading (DEFTEST ASIN.ERROR.1 (SIGNALS-ERROR (ASIN) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASIN.ERROR.2 (SIGNALS-ERROR (ASIN 0.0 0.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASIN.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ASIN) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "acos.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/acos.lsp C15805B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ACOS.1 (LOOP FOR I FROM -1000 TO 1000 FOR RLIST = (MULTIPLE-VALUE-LIST (ACOS I)) FOR Y = (CAR RLIST) ALWAYS (AND (NULL (CDR RLIST)) (NUMBERP Y))) T)
;; Loading (DEFTEST ACOS.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (LET ((A (COERCE 2000 TYPE)) (B (COERCE -1000 TYPE))) (LOOP FOR X = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ACOS X)) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (NUMBERP Y))))) (T T T T))
;; Loading (DEFTEST ACOS.3 (LOOP FOR TYPE IN (QUOTE (INTEGER SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (LET ((A (COERCE 2000 TYPE)) (B (COERCE -1000 TYPE))) (LOOP FOR X = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ACOS (COMPLEX 0 X))) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (NUMBERP Y))))) (T T T T T))
;; Loading (DEFTEST ACOS.4 (LOOP FOR TYPE IN (QUOTE (INTEGER SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (LET ((A (COERCE 2000 TYPE)) (B (COERCE -1000 TYPE))) (LOOP FOR X1 = (- (RANDOM A) B) FOR X2 = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ACOS (COMPLEX X1 X2))) FOR Y = (CAR RLIST) REPEAT 1000 ALWAYS (AND (NULL (CDR RLIST)) (NUMBERP Y))))) (T T T T T))
;; Loading (DEFTEST ACOS.5 (APPROX= (ACOS 0) (COERCE (/ PI 2) (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST ACOS.6 (LOOP FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) UNLESS (APPROX= (ACOS (COERCE 0 TYPE)) (COERCE (/ PI 2) TYPE)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ACOS.7 (LOOP FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) UNLESS (APPROX= (ACOS (COERCE 1 TYPE)) (COERCE 0 TYPE)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ACOS.8 (LOOP FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) UNLESS (APPROX= (ACOS (COERCE -1 TYPE)) (COERCE PI TYPE)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ACOS.9 (MACROLET ((%M (Z) Z)) (NOT (NOT (> (ACOS (EXPAND-IN-CURRENT-ENV (%M 0))) 0)))) T)
;; Loading (DEFTEST ACOS.ERROR.1 (SIGNALS-ERROR (ACOS) PROGRAM-ERROR) T)
;; Loading (DEFTEST ACOS.ERROR.2 (SIGNALS-ERROR (ACOS 0.0 0.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ACOS.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ACOS) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "atan.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/atan.lsp C1623897>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ATAN.1 (LET ((RESULT (ATAN 0))) (OR (EQLT RESULT 0) (EQLT RESULT 0.0))) T)
;; Loading (DEFTEST ATAN.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) UNLESS (EQL (ATAN ZERO) ZERO) COLLECT TYPE) NIL)
;; Loading (DEFTEST ATAN.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) UNLESS (EQL (ATAN ZERO 1) ZERO) COLLECT TYPE) NIL)
;; Loading (DEFTEST ATAN.4 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) FOR ONE = (COERCE 1 TYPE) UNLESS (EQL (ATAN 0 ONE) ZERO) COLLECT TYPE) NIL)
;; Loading (DEFTEST ATAN.5 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) FOR ONE = (COERCE 1 TYPE) UNLESS (EQL (ATAN ZERO ONE) ZERO) COLLECT TYPE) NIL)
;; Loading (DEFTEST ATAN.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR A = (COERCE 2000 TYPE) FOR B = (COERCE -1000 TYPE) COLLECT (LOOP FOR X = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ATAN X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) (NIL NIL NIL NIL))
;; Loading (DEFTEST ATAN.7 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR A = (COERCE 2000 TYPE) FOR B = (COERCE -1000 TYPE) FOR ZERO = (COERCE 0 TYPE) COLLECT (LOOP FOR X = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ATAN (COMPLEX X ZERO))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X RLIST))) (NIL NIL NIL NIL))
;; Loading (DEFTEST ATAN.8 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR A = (COERCE 2000 TYPE) FOR B = (COERCE -1000 TYPE) FOR ZERO = (COERCE 0 TYPE) COLLECT (LOOP FOR X = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ATAN (COMPLEX ZERO X))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X RLIST))) (NIL NIL NIL NIL))
;; Loading (DEFTEST ATAN.9 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR A = (COERCE 2000 TYPE) FOR B = (COERCE -1000 TYPE) FOR ZERO = (COERCE 0 TYPE) COLLECT (LOOP FOR X1 = (- (RANDOM A) B) FOR X2 = (- (RANDOM A) B) FOR RLIST = (MULTIPLE-VALUE-LIST (ATAN (COMPLEX X1 X2))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X1 X2 RLIST))) (NIL NIL NIL NIL))
;; Loading (DEFTEST ATAN.10 (APPROX= (ATAN 1) (COERCE (/ PI 4) (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST ATAN.11 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (APPROX= (ATAN (COERCE 1 TYPE)) (COERCE (/ PI 4) TYPE))) (T T T T))
;; Loading (DEFTEST ATAN.12 (APPROX= (ATAN -1) (COERCE (/ PI -4) (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST ATAN.13 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (APPROX= (ATAN (COERCE -1 TYPE)) (COERCE (/ PI -4) TYPE))) (T T T T))
;; Loading (DEFTEST ATAN.14 (MACROLET ((%M (Z) Z)) (ATAN (EXPAND-IN-CURRENT-ENV (%M 0.0)))) 0.0)
;; Loading (DEFTEST ATAN.ERROR.1 (SIGNALS-ERROR (ATAN) PROGRAM-ERROR) T)
;; Loading (DEFTEST ATAN.ERROR.2 (SIGNALS-ERROR (ATAN 1 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST ATAN.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ATAN) (FUNCTION NUMBERP)) NIL)
;; Loading (DEFTEST ATAN.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (ATAN X 1))) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST ATAN.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (ATAN 1 X))) (FUNCTION REALP)) NIL)
;; Loading (LOAD "sinh.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/sinh.lsp C173F3B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SINH.1 (LET ((RESULT (SINH 0))) (OR (EQLT RESULT 0) (EQLT RESULT 0.0))) T)
;; Loading (DEFTEST SINH.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SINH ZERO)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST SINH.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SINH ZERO)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST SINH.4 (LOOP FOR DEN = (1+ (RANDOM 10000)) FOR NUM = (RANDOM (* 10 DEN)) FOR X = (/ NUM DEN) FOR RLIST = (MULTIPLE-VALUE-LIST (SINH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (NUMBERP Y)) COLLECT (LIST X RLIST)) NIL)
;; Loading (DEFTEST SINH.5 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (SINH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST SINH.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR X2 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (SINH (COMPLEX X1 X2))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X1 X2 RLIST))) NIL)
;; Loading (DEFTEST SINH.ERROR.1 (SIGNALS-ERROR (SINH) PROGRAM-ERROR) T)
;; Loading (DEFTEST SINH.ERROR.2 (SIGNALS-ERROR (SINH 1.0 1.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST SINH.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SINH) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "cosh.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cosh.lsp C17C4587>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COSH.1 (LET ((RESULT (COSH 0))) (OR (EQLT RESULT 1) (EQLT RESULT 1.0))) T)
;; Loading (DEFTEST COSH.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) FOR ONE = (COERCE 1 TYPE) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (COSH ZERO)) (LIST ONE)) COLLECT TYPE) NIL)
;; Loading (DEFTEST COSH.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) FOR ONE = (COERCE 1 (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (COSH ZERO)) (LIST ONE)) COLLECT TYPE) NIL)
;; Loading (DEFTEST COSH.4 (LOOP FOR DEN = (1+ (RANDOM 10000)) FOR NUM = (RANDOM (* 10 DEN)) FOR X = (/ NUM DEN) FOR RLIST = (MULTIPLE-VALUE-LIST (COSH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (NUMBERP Y)) COLLECT (LIST X RLIST)) NIL)
;; Loading (DEFTEST COSH.5 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (COSH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST COSH.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR X2 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (COSH (COMPLEX X1 X2))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X1 X2 RLIST))) NIL)
;; Loading (DEFTEST COSH.ERROR.1 (SIGNALS-ERROR (COSH) PROGRAM-ERROR) T)
;; Loading (DEFTEST COSH.ERROR.2 (SIGNALS-ERROR (COSH 1.0 1.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST COSH.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION COSH) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "tanh.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/tanh.lsp C184E417>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TANH.1 (LET ((RESULT (TANH 0))) (OR (EQLT RESULT 0) (EQLT RESULT 0.0))) T)
;; Loading (DEFTEST TANH.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (TANH ZERO)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST TANH.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (TANH ZERO)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST TANH.4 (LOOP FOR DEN = (1+ (RANDOM 10000)) FOR NUM = (RANDOM (* 10 DEN)) FOR X = (/ NUM DEN) FOR RLIST = (MULTIPLE-VALUE-LIST (TANH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (NUMBERP Y)) COLLECT (LIST X RLIST)) NIL)
;; Loading (DEFTEST TANH.5 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (TANH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST TANH.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR X2 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (TANH (COMPLEX X1 X2))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X1 X2 RLIST))) NIL)
;; Loading (DEFTEST TANH.ERROR.1 (SIGNALS-ERROR (TANH) PROGRAM-ERROR) T)
;; Loading (DEFTEST TANH.ERROR.2 (SIGNALS-ERROR (TANH 1.0 1.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST TANH.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION TANH) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "asinh.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/asinh.lsp 8122EB47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ASINH.1 (LET ((RESULT (ASINH 0))) (OR (EQLT RESULT 0) (EQLT RESULT 0.0))) T)
;; Loading (DEFTEST ASINH.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (ASINH ZERO)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ASINH.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (ASINH ZERO)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ASINH.4 (LOOP FOR DEN = (1+ (RANDOM 10000)) FOR NUM = (RANDOM (* 10 DEN)) FOR X = (/ NUM DEN) FOR RLIST = (MULTIPLE-VALUE-LIST (ASINH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (NUMBERP Y)) COLLECT (LIST X RLIST)) NIL)
;; Loading (DEFTEST ASINH.5 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (ASINH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST ASINH.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR X2 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (ASINH (COMPLEX X1 X2))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X1 X2 RLIST))) NIL)
;; Loading (DEFTEST ASINH.7 (MACROLET ((%M (Z) Z)) (ASINH (EXPAND-IN-CURRENT-ENV (%M 0.0)))) 0.0)
;; Loading (DEFTEST ASINH.ERROR.1 (SIGNALS-ERROR (ASINH) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASINH.ERROR.2 (SIGNALS-ERROR (ASINH 1.0 1.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASINH.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ASINH) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "acosh.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/acosh.lsp 812BD1D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ACOSH.1 (LET ((RESULT (ACOSH 1))) (OR (EQLT RESULT 0) (EQLT RESULT 0.0))) T)
;; Loading (DEFTEST ACOSH.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) FOR ONE = (COERCE 1 TYPE) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (ACOSH ONE)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ACOSH.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) FOR ONE = (COERCE 1 (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (ACOSH ONE)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ACOSH.4 (LOOP FOR DEN = (1+ (RANDOM 10000)) FOR NUM = (RANDOM (* 10 DEN)) FOR X = (/ NUM DEN) FOR RLIST = (MULTIPLE-VALUE-LIST (ACOSH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (NUMBERP Y)) COLLECT (LIST X RLIST)) NIL)
;; Loading (DEFTEST ACOSH.5 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (1+ (RANDOM (COERCE 1000 TYPE))) FOR RLIST = (MULTIPLE-VALUE-LIST (ACOSH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST ACOSH.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR X2 = (- (RANDOM (COERCE 20 TYPE)) 10) FOR RLIST = (MULTIPLE-VALUE-LIST (ACOSH (COMPLEX X1 X2))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X1 X2 RLIST))) NIL)
;; Loading (DEFTEST ACOSH.7 (MACROLET ((%M (Z) Z)) (NOT (NOT (COMPLEXP (ACOSH (EXPAND-IN-CURRENT-ENV (%M 0))))))) T)
;; Loading (DEFTEST ACOSH.ERROR.1 (SIGNALS-ERROR (ACOSH) PROGRAM-ERROR) T)
;; Loading (DEFTEST ACOSH.ERROR.2 (SIGNALS-ERROR (ACOSH 1.0 1.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ACOSH.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ACOSH) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "atanh.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/atanh.lsp 8134E9B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ATANH.1 (LET ((RESULT (ATANH 0))) (OR (EQLT RESULT 0) (EQLT RESULT 0.0))) T)
;; Loading (DEFTEST ATANH.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (ATANH ZERO)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ATANH.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (ATANH ZERO)) (LIST ZERO)) COLLECT TYPE) NIL)
;; Loading (DEFTEST ATANH.4 (LOOP FOR DEN = (1+ (RANDOM 10000)) FOR NUM = (RANDOM DEN) FOR X = (/ NUM DEN) FOR RLIST = (MULTIPLE-VALUE-LIST (ATANH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (NUMBERP Y)) COLLECT (LIST X RLIST)) NIL)
;; Loading (DEFTEST ATANH.5 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (IF (EQL (RANDOM 2) 0) (+ 2 (RANDOM (COERCE 1000 TYPE))) (- -2 (RANDOM (COERCE 1000 TYPE)))) FOR RLIST = (MULTIPLE-VALUE-LIST (ATANH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST ATANH.5A (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (- (RANDOM (COERCE 1.999799 TYPE)) 0.9999) FOR RLIST = (MULTIPLE-VALUE-LIST (ATANH X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST ATANH.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 1.999799 TYPE)) 0.9999) FOR RLIST = (MULTIPLE-VALUE-LIST (ATANH (COMPLEX X1 0.0))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X1 RLIST))) NIL)
;; Loading (DEFTEST ATANH.7 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 1.999799 TYPE)) 0.9999) FOR RLIST = (MULTIPLE-VALUE-LIST (ATANH (COMPLEX 0.0 X1))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))))) COLLECT (LIST X1 RLIST))) NIL)
;; Loading (DEFTEST ATANH.8 (MACROLET ((%M (Z) Z)) (ATANH (EXPAND-IN-CURRENT-ENV (%M 0.0)))) 0.0)
;; Loading (DEFTEST ATANH.ERROR.1 (SIGNALS-ERROR (ATANH) PROGRAM-ERROR) T)
;; Loading (DEFTEST ATANH.ERROR.2 (SIGNALS-ERROR (ATANH 1.0 1.0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ATANH.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ATANH) (FUNCTION NUMBERP)) NIL)
;; Loading (LOAD "times.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/times.lsp 81407397>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "times-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/times-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN INTEGER-TIMES (X Y) (ASSERT (INTEGERP X)) (ASSERT (INTEGERP Y)) (LET (NEG) (WHEN (< X 0) (SETQ NEG T X (- X))) (LET ((RESULT (NAT-TIMES X Y))) (IF NEG (- RESULT) RESULT)))).
;; Compiling form (DEFUN NAT-TIMES (X Y) (IF (= X 0) 0 (LET ((LO (IF (ODDP X) Y 0)) (HI (NAT-TIMES (ASH X -1) Y))) (+ LO (+ HI HI))))).
;; Compiling form (DEFUN RAT-TIMES (X Y) (/ (INTEGER-TIMES (NUMERATOR X) (NUMERATOR Y)) (INTEGER-TIMES (DENOMINATOR X) (DENOMINATOR Y)))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/times-aux.llf 81679BB7>
;; Loading (DEFTEST *.1 (*) 1)
;; Loading (DEFTEST *.2 (LOOP FOR X IN *NUMBERS* UNLESS (EQL X (* X)) COLLECT X) NIL)
;; Loading (DEFTEST *.3 (LOOP FOR X IN *NUMBERS* FOR X1 = (* X 1) FOR X2 = (* 1 X) UNLESS (AND (EQL X X1) (EQL X X2) (EQL X1 X2)) COLLECT (LIST X X1 X2)) NIL)
;; Loading (DEFTEST *.4 (LOOP FOR X IN *NUMBERS* FOR X1 = (* X 0) FOR X2 = (* 0 X) UNLESS (AND (= X1 0) (= X2 0)) COLLECT (LIST X X1 X2)) NIL)
;; Loading (DEFTEST *.5 (LOOP FOR BOUND IN (QUOTE (1.0 1.0 1.0 1.0)) NCONC (LOOP FOR X = (RANDOM BOUND) FOR X1 = (* X -1) FOR X2 = (* -1 X) FOR X3 = (* X BOUND) FOR X4 = (* BOUND X) REPEAT 1000 UNLESS (AND (EQL (- X) X1) (EQL (- X) X2) (EQL X X3) (EQL X X4)) COLLECT (LIST X X1 X2 X3 X4))) NIL)
;; Loading (DEFTEST *.6 (LET* ((UPPER-BOUND (* 1000 1000 1000 1000)) (LOWER-BOUND (- UPPER-BOUND)) (SPREAD (1+ (- UPPER-BOUND LOWER-BOUND)))) (LOOP FOR X = (RANDOM-FROM-INTERVAL UPPER-BOUND) FOR Y = (RANDOM-FROM-INTERVAL UPPER-BOUND) FOR PROD = (* X Y) FOR PROD2 = (INTEGER-TIMES X Y) REPEAT 1000 UNLESS (EQL PROD PROD2) COLLECT (LIST X Y PROD PROD2))) NIL)
;; Loading (DEFTEST *.7 (LET* ((UPPER-BOUND (* 1000 1000 1000)) (LOWER-BOUND (- UPPER-BOUND)) (SPREAD (1+ (- UPPER-BOUND LOWER-BOUND)))) (LOOP FOR X = (+ (RATIONAL (RANDOM (FLOAT SPREAD 1.0))) LOWER-BOUND) FOR Y = (+ (RATIONAL (RANDOM (FLOAT SPREAD 1.0))) LOWER-BOUND) FOR PROD = (* X Y) FOR PROD2 = (RAT-TIMES X Y) REPEAT 1000 UNLESS (EQL PROD PROD2) COLLECT (LIST X Y PROD PROD2))) NIL)
;; Loading (DEFTEST *.8 (LET ((BOUND (ISQRT MOST-POSITIVE-FIXNUM))) (LOOP FOR X = (RANDOM BOUND) FOR Y = (RANDOM BOUND) FOR F = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA (Z) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0))) (DECLARE (TYPE (INTEGER 0 ((SYSTEM.INTERNALS::BQ-COMMA BOUND))) Z)) (* (SYSTEM.INTERNALS::BQ-COMMA X) Z))))) FOR PROD = (FUNCALL F Y) REPEAT 100 UNLESS (AND (EQL PROD (* X Y)) (EQL PROD (INTEGER-TIMES X Y))) COLLECT (PROGN (FORMAT T "Failed on ~A~%" (LIST X Y PROD)) (LIST X Y PROD (* X Y) (INTEGER-TIMES X Y))))) NIL)
;; Loading (DEFTEST *.9 (LET* ((UPPER-BOUND (* 1000 1000 1000 1000))) (FLET ((%R NIL (RANDOM-FROM-INTERVAL UPPER-BOUND))) (LOOP FOR XR = (%R) FOR XC = (%R) FOR X = (COMPLEX XR XC) FOR YR = (%R) FOR YC = (%R) FOR Y = (COMPLEX YR YC) FOR PROD = (* X Y) REPEAT 1000 UNLESS (AND (EQL (REALPART PROD) (- (INTEGER-TIMES XR YR) (INTEGER-TIMES XC YC))) (EQL (IMAGPART PROD) (+ (INTEGER-TIMES XR YC) (INTEGER-TIMES XC YR)))) COLLECT (LIST X Y PROD)))) NIL)
;; Loading (DEFTEST *.10 (LET* ((UPPER-BOUND (* 1000 1000 1000 1000)) (LOWER-BOUND (- UPPER-BOUND)) (SPREAD (1+ (- UPPER-BOUND LOWER-BOUND)))) (FLET ((%R NIL (+ (RATIONAL (RANDOM (FLOAT SPREAD 1.0))) LOWER-BOUND))) (LOOP FOR XR = (%R) FOR XC = (%R) FOR X = (COMPLEX XR XC) FOR YR = (%R) FOR YC = (%R) FOR Y = (COMPLEX YR YC) FOR PROD = (* X Y) REPEAT 1000 UNLESS (AND (EQL (REALPART PROD) (- (RAT-TIMES XR YR) (RAT-TIMES XC YC))) (EQL (IMAGPART PROD) (+ (RAT-TIMES XR YC) (RAT-TIMES XC YR)))) COLLECT (LIST X Y PROD)))) NIL)
;; Loading (DEFTEST *.11 (LET ((PROD 1) (ARGS NIL)) (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) DO (PUSH I ARGS) DO (SETQ PROD (* PROD I)) ALWAYS (EQL (APPLY (FUNCTION *) ARGS) PROD))) T)
;; Loading (DEFTEST *.12 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR RADIX = (FLOAT-RADIX X) FOR (K EPS-R EPS-F) = (MULTIPLE-VALUE-LIST (FIND-EPSILON X)) NCONC (LOOP FOR I FROM 1 TO K FOR Y = (+ X (EXPT RADIX (- I))) NCONC (LOOP FOR J FROM 1 TO (- K I) FOR Z = (+ X (EXPT RADIX (- J))) UNLESS (EQL (* Y Z) (+ X (EXPT RADIX (- I)) (EXPT RADIX (- J)) (EXPT RADIX (- (+ I J))))) COLLECT (LIST X I J)))) NIL)
;; Loading (DEFTEST *.13 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR RADIX = (FLOAT-RADIX X) FOR (K EPS-R EPS-F) = (MULTIPLE-VALUE-LIST (FIND-EPSILON X)) NCONC (LOOP FOR I FROM 1 TO K FOR Y = (- X (EXPT RADIX (- I))) NCONC (LOOP FOR J FROM 1 TO (- K I) FOR Z = (- X (EXPT RADIX (- J))) UNLESS (EQL (* Y Z) (+ X (- (EXPT RADIX (- I))) (- (EXPT RADIX (- J))) (EXPT RADIX (- (+ I J))))) COLLECT (LIST X I J)))) NIL)
;; Loading (DEFTEST *.14 (LET ((BOUND (- (SQRT MOST-POSITIVE-SHORT-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE SHORT-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.15 (LET ((BOUND (- (SQRT MOST-POSITIVE-SINGLE-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE SINGLE-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.16 (LET ((BOUND (- (SQRT MOST-POSITIVE-DOUBLE-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE DOUBLE-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.17 (LET ((BOUND (- (SQRT MOST-POSITIVE-LONG-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE LONG-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.18 (LET ((BOUND (- (SQRT MOST-POSITIVE-SHORT-FLOAT) 1)) (BOUND2 (- (SQRT MOST-POSITIVE-SINGLE-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND2) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE SINGLE-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.19 (LET ((BOUND (- (SQRT MOST-POSITIVE-SHORT-FLOAT) 1)) (BOUND2 (- (SQRT MOST-POSITIVE-DOUBLE-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND2) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE DOUBLE-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.20 (LET ((BOUND (- (SQRT MOST-POSITIVE-SHORT-FLOAT) 1)) (BOUND2 (- (SQRT MOST-POSITIVE-LONG-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND2) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE LONG-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.21 (LET ((BOUND (- (SQRT MOST-POSITIVE-SINGLE-FLOAT) 1)) (BOUND2 (- (SQRT MOST-POSITIVE-DOUBLE-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND2) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE DOUBLE-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.22 (LET ((BOUND (- (SQRT MOST-POSITIVE-SINGLE-FLOAT) 1)) (BOUND2 (- (SQRT MOST-POSITIVE-LONG-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND2) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE LONG-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.23 (LET ((BOUND (- (SQRT MOST-POSITIVE-DOUBLE-FLOAT) 1)) (BOUND2 (- (SQRT MOST-POSITIVE-LONG-FLOAT) 1))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND2) FOR P = (* X Y) REPEAT 1000 UNLESS (AND (EQL P (* Y X)) (TYPEP P (QUOTE LONG-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST *.24 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BITS IN (QUOTE (13 24 50 50)) FOR BOUND = (ASH 1 (FLOOR BITS 2)) NCONC (LOOP FOR I = (RANDOM BOUND) FOR X = (COERCE I TYPE) FOR J = (RANDOM BOUND) FOR Y = (COERCE J TYPE) FOR PROD = (* X Y) REPEAT 1000 UNLESS (AND (EQL PROD (COERCE (* I J) TYPE)) (EQL PROD (* Y X))) COLLECT (LIST I J X Y (* X Y) (COERCE (* I J) TYPE)))) NIL)
;; Loading (DEFTEST *.25 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BITS IN (QUOTE (13 24 50 50)) FOR BOUND = (ASH 1 (- BITS 2)) WHEN (= (FLOAT-RADIX (COERCE 1.0 TYPE)) 2) NCONC (LOOP FOR I = (RANDOM BOUND) FOR X = (COERCE I TYPE) FOR J = (* I 2) FOR Y = (COERCE J TYPE) REPEAT 1000 UNLESS (EQL (* 2 X) Y) COLLECT (LIST I J X (* 2 X) Y))) NIL)
;; Loading (DEFTEST *.26 (EQLT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X Y) (DECLARE (TYPE (SINGLE-FLOAT -10.0 10.0) X) (TYPE (DOUBLE-FLOAT #.SYSTEM.INTERNALS::SINGLE-FLOAT-NEGATIVE-INFINITY #.SYSTEM.INTERNALS::SINGLE-FLOAT-POSITIVE-INFINITY) Y)) (* X Y)))) 1.0 1.0) 1.0) T)
;; Loading (DEFTEST *.27 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BITS IN (QUOTE (13 24 50 50)) FOR BOUND = (ASH 1 (FLOOR BITS 2)) NCONC (LOOP FOR I = (RANDOM BOUND) FOR X = (COERCE I TYPE) FOR J = (RANDOM BOUND) FOR Y = (COERCE J TYPE) FOR ONE = (COERCE 1.0 TYPE) FOR CX = (COMPLEX ONE X) FOR CY = (COMPLEX ONE Y) FOR PROD = (* CX CY) REPEAT 1000 UNLESS (AND (EQL PROD (COMPLEX (COERCE (- 1 (* I J)) TYPE) (COERCE (+ I J) TYPE))) (EQL PROD (* CY CX))) COLLECT (LIST TYPE I J X Y (* CX CY)))) NIL)
;; Loading (DEFTEST *.28 (MACROLET ((%M (Z) Z)) (VALUES (* (EXPAND-IN-CURRENT-ENV (%M 2))) (* (EXPAND-IN-CURRENT-ENV (%M 3)) 4) (* 5 (EXPAND-IN-CURRENT-ENV (%M 3))))) 2 12 15)
;; Loading (DEFTEST TIMES.ORDER.1 (LET ((I 0) X Y) (VALUES (* (PROGN (SETF X (INCF I)) 2) (PROGN (SETF Y (INCF I)) 3)) I X Y)) 6 2 1 2)
;; Loading (DEFTEST TIMES.ORDER.2 (LET ((I 0) X Y Z) (VALUES (* (PROGN (SETF X (INCF I)) 2) (PROGN (SETF Y (INCF I)) 3) (PROGN (SETF Z (INCF I)) 5)) I X Y Z)) 30 3 1 2 3)
;; Loading (LOAD "plus.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/plus.lsp 81907E57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PLUS.1 (+) 0)
;; Loading (DEFTEST PLUS.2 (LOOP FOR X IN *NUMBERS* UNLESS (EQL X (+ X)) COLLECT X) NIL)
;; Loading (DEFTEST PLUS.3 (LOOP FOR X IN *NUMBERS* FOR X1 = (+ X 0) FOR X2 = (+ 0 X) UNLESS (AND (EQL X X1) (EQL X X2) (EQL X1 X2)) COLLECT (LIST X X1 X2)) NIL)
;; Loading (DEFTEST PLUS.4 (LOOP FOR X IN *NUMBERS* FOR X1 = (- X X) UNLESS (= X1 0) COLLECT (LIST X X1)) NIL)
;; Loading (DEFTEST PLUS.5 (LET* ((UPPER-BOUND MOST-POSITIVE-FIXNUM) (LOWER-BOUND MOST-NEGATIVE-FIXNUM) (SPREAD (- UPPER-BOUND LOWER-BOUND))) (FLET ((%R NIL (+ (RANDOM SPREAD) LOWER-BOUND))) (LOOP FOR X = (%R) FOR Y = (%R) FOR Z = (%R) FOR S1 = (+ X Y Z) FOR S2 = (+ Z Y X) FOR S3 = (+ Y X Z) FOR S4 = (+ X Z Y) FOR S5 = (+ Z X Y) FOR S6 = (+ Y Z X) REPEAT 1000 UNLESS (AND (EQL S1 S2) (EQL S1 S3) (EQL S1 S4) (EQL S1 S5) (EQL S1 S6)) COLLECT (LIST X Y Z S1 S2 S3 S4 S5 S6)))) NIL)
;; Loading (DEFTEST PLUS.6 (LET* ((UPPER-BOUND 1000000000000000) (LOWER-BOUND -1000000000000000) (SPREAD (- UPPER-BOUND LOWER-BOUND))) (FLET ((%R NIL (+ (RANDOM SPREAD) LOWER-BOUND))) (LOOP FOR X = (%R) FOR Y = (%R) FOR Z = (%R) FOR S1 = (+ X Y Z) FOR S2 = (+ Z Y X) FOR S3 = (+ Y X Z) FOR S4 = (+ X Z Y) FOR S5 = (+ Z X Y) FOR S6 = (+ Y Z X) REPEAT 1000 UNLESS (AND (EQL S1 S2) (EQL S1 S3) (EQL S1 S4) (EQL S1 S5) (EQL S1 S6)) COLLECT (LIST X Y Z S1 S2 S3 S4 S5 S6)))) NIL)
;; Loading (DEFTEST PLUS.7 (LET* ((UPPER-BOUND MOST-POSITIVE-FIXNUM) (LOWER-BOUND MOST-NEGATIVE-FIXNUM) (SPREAD (- UPPER-BOUND LOWER-BOUND))) (FLET ((%R NIL (+ (RANDOM SPREAD) LOWER-BOUND))) (LOOP FOR X = (/ (%R) (MAX 1 (%R))) FOR Y = (/ (%R) (MAX 1 (%R))) FOR Z = (/ (%R) (MAX 1 (%R))) FOR S1 = (+ X Y Z) FOR S2 = (+ Z Y X) FOR S3 = (+ Y X Z) FOR S4 = (+ X Z Y) FOR S5 = (+ Z X Y) FOR S6 = (+ Y Z X) REPEAT 1000 UNLESS (AND (EQL S1 S2) (EQL S1 S3) (EQL S1 S4) (EQL S1 S5) (EQL S1 S6)) COLLECT (LIST X Y Z S1 S2 S3 S4 S5 S6) UNLESS (= (+ X Y) (LET ((XN (NUMERATOR X)) (XD (DENOMINATOR X)) (YN (NUMERATOR Y)) (YD (DENOMINATOR Y))) (/ (+ (* XN YD) (* XD YN)) (* XD YD)))) COLLECT (LIST X Y)))) NIL)
;; Loading (DEFTEST PLUS.8 (LET (ARGS) (LOOP FOR I FROM 0 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) UNLESS (EQL (APPLY (FUNCTION +) ARGS) (/ (* I (1+ I)) 2)) COLLECT I DO (PUSH (1+ I) ARGS))) NIL)
;; Loading (DEFTEST PLUS.9 (LET* ((UPPER-BOUND MOST-POSITIVE-FIXNUM) (LOWER-BOUND MOST-NEGATIVE-FIXNUM) (SPREAD (- UPPER-BOUND LOWER-BOUND))) (FLET ((%R NIL (+ (RANDOM SPREAD) LOWER-BOUND))) (LOOP FOR XR = (%R) FOR XI = (%R) FOR YR = (%R) FOR YI = (%R) FOR X = (COMPLEX XR XI) FOR Y = (COMPLEX YR YI) FOR S = (+ X Y) REPEAT 1000 UNLESS (EQL S (COMPLEX (+ XR YR) (+ XI YI))) COLLECT (LIST X Y S)))) NIL)
;; Loading (DEFTEST PLUS.10 (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) FOR RADIX = (FLOAT-RADIX X) FOR (K EPS-R EPS-F) = (MULTIPLE-VALUE-LIST (FIND-EPSILON X)) NCONC (LOOP FOR I FROM 1 TO K FOR E1 = (EXPT RADIX (- I)) FOR Y = (+ X E1) NCONC (LOOP FOR J FROM 1 TO (- K I) FOR E2 = (EXPT RADIX (- J)) FOR Z = (+ X E2) UNLESS (EQL (+ Y Z) (+ X E1 E2)) COLLECT (LIST X I J)))) NIL)
;; Loading (DEFTEST PLUS.11 (FLET ((%R NIL (- (RANDOM MOST-POSITIVE-SHORT-FLOAT) (/ MOST-POSITIVE-SHORT-FLOAT 2)))) (LOOP FOR X = (%R) FOR Y = (%R) FOR S = (+ X Y) REPEAT 1000 UNLESS (AND (EQL S (+ Y X)) (TYPEP S (QUOTE SHORT-FLOAT))) COLLECT (LIST X Y S))) NIL)
;; Loading (DEFTEST PLUS.12 (FLET ((%R NIL (- (RANDOM MOST-POSITIVE-SINGLE-FLOAT) (/ MOST-POSITIVE-SINGLE-FLOAT 2)))) (LOOP FOR X = (%R) FOR Y = (%R) FOR S = (+ X Y) REPEAT 1000 UNLESS (AND (EQL S (+ Y X)) (TYPEP S (QUOTE SINGLE-FLOAT))) COLLECT (LIST X Y S))) NIL)
;; Loading (DEFTEST PLUS.13 (FLET ((%R NIL (- (RANDOM MOST-POSITIVE-DOUBLE-FLOAT) (/ MOST-POSITIVE-DOUBLE-FLOAT 2)))) (LOOP FOR X = (%R) FOR Y = (%R) FOR S = (+ X Y) REPEAT 1000 UNLESS (AND (EQL S (+ Y X)) (TYPEP S (QUOTE DOUBLE-FLOAT))) COLLECT (LIST X Y S))) NIL)
;; Loading (DEFTEST PLUS.14 (FLET ((%R NIL (- (RANDOM MOST-POSITIVE-LONG-FLOAT) (/ MOST-POSITIVE-LONG-FLOAT 2)))) (LOOP FOR X = (%R) FOR Y = (%R) FOR S = (+ X Y) REPEAT 1000 UNLESS (AND (EQL S (+ Y X)) (TYPEP S (QUOTE LONG-FLOAT))) COLLECT (LIST X Y S))) NIL)
;; Loading (DEFTEST PLUS.15 (LET ((BOUND MOST-POSITIVE-SHORT-FLOAT) (BOUND2 MOST-POSITIVE-SINGLE-FLOAT)) (LOOP FOR X = (- (RANDOM BOUND) (/ BOUND 2)) FOR Y = (- (RANDOM BOUND2) (/ BOUND2 2)) FOR P = (+ X Y) REPEAT 1000 UNLESS (AND (EQL P (+ Y X)) (TYPEP P (QUOTE SINGLE-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST PLUS.16 (LET ((BOUND MOST-POSITIVE-SHORT-FLOAT) (BOUND2 MOST-POSITIVE-DOUBLE-FLOAT)) (LOOP FOR X = (- (RANDOM BOUND) (/ BOUND 2)) FOR Y = (- (RANDOM BOUND2) (/ BOUND2 2)) FOR P = (+ X Y) REPEAT 1000 UNLESS (AND (EQL P (+ Y X)) (TYPEP P (QUOTE DOUBLE-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST PLUS.17 (LET ((BOUND MOST-POSITIVE-SHORT-FLOAT) (BOUND2 MOST-POSITIVE-LONG-FLOAT)) (LOOP FOR X = (- (RANDOM BOUND) (/ BOUND 2)) FOR Y = (- (RANDOM BOUND2) (/ BOUND2 2)) FOR P = (+ X Y) REPEAT 1000 UNLESS (AND (EQL P (+ Y X)) (TYPEP P (QUOTE LONG-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST PLUS.18 (LET ((BOUND MOST-POSITIVE-SINGLE-FLOAT) (BOUND2 MOST-POSITIVE-DOUBLE-FLOAT)) (LOOP FOR X = (- (RANDOM BOUND) (/ BOUND 2)) FOR Y = (- (RANDOM BOUND2) (/ BOUND2 2)) FOR P = (+ X Y) REPEAT 1000 UNLESS (AND (EQL P (+ Y X)) (TYPEP P (QUOTE DOUBLE-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST PLUS.19 (LET ((BOUND MOST-POSITIVE-SINGLE-FLOAT) (BOUND2 MOST-POSITIVE-LONG-FLOAT)) (LOOP FOR X = (- (RANDOM BOUND) (/ BOUND 2)) FOR Y = (- (RANDOM BOUND2) (/ BOUND2 2)) FOR P = (+ X Y) REPEAT 1000 UNLESS (AND (EQL P (+ Y X)) (TYPEP P (QUOTE LONG-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST PLUS.20 (LET ((BOUND MOST-POSITIVE-DOUBLE-FLOAT) (BOUND2 MOST-POSITIVE-LONG-FLOAT)) (LOOP FOR X = (- (RANDOM BOUND) (/ BOUND 2)) FOR Y = (- (RANDOM BOUND2) (/ BOUND2 2)) FOR P = (+ X Y) REPEAT 1000 UNLESS (AND (EQL P (+ Y X)) (TYPEP P (QUOTE LONG-FLOAT))) COLLECT (LIST X Y P))) NIL)
;; Loading (DEFTEST PLUS.21 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BITS IN (QUOTE (13 24 50 50)) FOR BOUND = (ASH 1 (1- BITS)) NCONC (LOOP FOR I = (RANDOM BOUND) FOR X = (COERCE I TYPE) FOR J = (RANDOM BOUND) FOR Y = (COERCE J TYPE) FOR SUM = (+ X Y) REPEAT 1000 UNLESS (AND (EQL SUM (COERCE (+ I J) TYPE)) (EQL SUM (+ Y X))) COLLECT (LIST I J X Y SUM (COERCE (+ I J) TYPE)))) NIL)
;; Loading (DEFTEST PLUS.22 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BITS IN (QUOTE (13 24 50 50)) FOR BOUND = (ASH 1 (1- BITS)) NCONC (LOOP FOR ONE = (COERCE 1 TYPE) FOR I = (RANDOM BOUND) FOR X = (COMPLEX (COERCE I TYPE) ONE) FOR J = (RANDOM BOUND) FOR Y = (COMPLEX (COERCE J TYPE) ONE) FOR SUM = (+ X Y) REPEAT 1000 UNLESS (AND (EQL SUM (COMPLEX (COERCE (+ I J) TYPE) (COERCE 2 TYPE))) (EQL SUM (+ Y X))) COLLECT (LIST I J X Y SUM))) NIL)
;; Loading (DEFTEST PLUS.23 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BITS IN (QUOTE (13 24 50 50)) FOR BOUND = (ASH 1 (1- BITS)) NCONC (LOOP FOR ONE = (COERCE 1 TYPE) FOR I = (RANDOM BOUND) FOR X = (COMPLEX ONE (COERCE I TYPE)) FOR J = (RANDOM BOUND) FOR Y = (COMPLEX ONE (COERCE J TYPE)) FOR SUM = (+ X Y) REPEAT 1000 UNLESS (AND (EQL SUM (COMPLEX (COERCE 2 TYPE) (COERCE (+ I J) TYPE))) (EQL SUM (+ Y X))) COLLECT (LIST I J X Y SUM))) NIL)
;; Loading (DEFTEST PLUS.24 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE SHORT-FLOAT X) (OPTIMIZE (SPEED 3) (SAFETY 0) (DEBUG 0))) (+ 0.0 X)))) 0.0) 0.0)
;; Loading (DEFTEST PLUS.25 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE SINGLE-FLOAT X) (OPTIMIZE (SPEED 3) (SAFETY 0) (DEBUG 0))) (+ 0.0 X)))) 0.0) 0.0)
;; Loading (DEFTEST PLUS.26 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE DOUBLE-FLOAT X) (OPTIMIZE (SPEED 3) (SAFETY 0) (DEBUG 0))) (+ 0.0 X)))) 0.0) 0.0)
;; Loading (DEFTEST PLUS.27 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE LONG-FLOAT X) (OPTIMIZE (SPEED 3) (SAFETY 0) (DEBUG 0))) (+ 0.0 X)))) 0.0) 0.0)
;; Loading (DEFTEST PLUS.28 (MACROLET ((%M (Z) Z)) (VALUES (+ (EXPAND-IN-CURRENT-ENV (%M 1))) (+ (EXPAND-IN-CURRENT-ENV (%M 2)) 3) (+ 4 (EXPAND-IN-CURRENT-ENV (%M 5))) (+ 1/2 (EXPAND-IN-CURRENT-ENV (%M 6)) 2/3))) 1 5 9 43/6)
;; Loading (DEFTEST PLUS.ORDER.1 (LET ((I 0) X Y) (VALUES (+ (PROGN (SETF X (INCF I)) (QUOTE 8)) (PROGN (SETF Y (INCF I)) (QUOTE 11))) I X Y)) 19 2 1 2)
;; Loading (DEFTEST PLUS.ORDER.2 (LET ((I 0) X Y Z) (VALUES (+ (PROGN (SETF X (INCF I)) (QUOTE 8)) (PROGN (SETF Y (INCF I)) (QUOTE 11)) (PROGN (SETF Z (INCF I)) (QUOTE 100))) I X Y Z)) 119 3 1 2 3)
;; Loading (DEFTEST PLUS.REASSOCIATION.1 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EPS2 = (* EPS 9/10) WHEN (EQL (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (+ (SYSTEM.INTERNALS::BQ-COMMA X) (+ (SYSTEM.INTERNALS::BQ-COMMA EPS2) (SYSTEM.INTERNALS::BQ-COMMA EPS2))))))) X) COLLECT (LIST X EPS EPS2)) NIL)
;; Loading (DEFTEST PLUS.REASSOCIATION.2 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EPS2 = (* EPS 9/10) UNLESS (EQUAL (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (LIST (+ (+ (SYSTEM.INTERNALS::BQ-COMMA X) (SYSTEM.INTERNALS::BQ-COMMA EPS2)) (SYSTEM.INTERNALS::BQ-COMMA EPS2)) (+ (SYSTEM.INTERNALS::BQ-COMMA EPS2) (+ (SYSTEM.INTERNALS::BQ-COMMA EPS2) (SYSTEM.INTERNALS::BQ-COMMA X)))))))) (LIST X X)) COLLECT (LIST X EPS EPS2)) NIL)
;; Loading (DEFTEST PLUS.REASSOCIATION.3 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EPS2 = (* EPS 9/10) WHEN (EQL (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (Y E) (+ Y (+ E E))))) X EPS2) X) COLLECT (LIST X EPS EPS2)) NIL)
;; Loading (DEFTEST PLUS.REASSOCIATION.4 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR EPS IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) FOR EPS2 = (* EPS 9/10) UNLESS (EQUAL (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (Y E) (LIST (+ (+ Y E) E) (+ E (+ E Y)))))) X EPS2) (LIST X X)) COLLECT (LIST X EPS EPS2)) NIL)
;; Loading (LOAD "minus.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/minus.lsp C14A43B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST MINUS.ERROR.1 (SIGNALS-ERROR (-) PROGRAM-ERROR) T)
;; Loading (DEFTEST MINUS.1 (LOOP FOR X IN *NUMBERS* UNLESS (EQL (- (- X)) X) COLLECT X) NIL)
;; Loading (DEFTEST MINUS.2 (LOCALLY (DECLARE (NOTINLINE -)) (LOOP FOR X IN *NUMBERS* UNLESS (EQL (- (- X)) X) COLLECT X)) NIL)
;; Loading (DEFTEST MINUS.3 (LOOP FOR X IN *REALS* WHEN (AND (INTEGERP X) (NOT (EQL (- X) (- 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST MINUS.4 (LOOP FOR X IN *REALS* FOR NEG = (- X) WHEN (AND (FLOATP X) (NOT (ZEROP X)) (NOT (EQL NEG (- 0.0 X))) (EQL (FLOAT 1.0 X) (FLOAT 1.0 NEG))) COLLECT X) NIL)
;; Loading (DEFTEST MINUS.5 (LOOP FOR X IN *NUMBERS* WHEN (AND (COMPLEXP X) (RATIONALP (REALPART X)) (NOT (EQL (- X) (- 0 X)))) COLLECT X) NIL)
;; Loading (DEFTEST MINUS.6 (LOOP FOR X IN *NUMBERS* FOR NEG = (- X) WHEN (AND (COMPLEXP X) (FLOATP (REALPART X)) (EQL (FLOAT 1.0 (REALPART X)) (FLOAT 1.0 (REALPART NEG))) (OR (/= NEG (- 0 X)) (AND (NOT (ZEROP (REALPART X))) (NOT (EQLZT NEG (- 0 X)))))) COLLECT X) NIL)
;; Loading (DEFTEST MINUS.7 (LET ((UPPER-BOUND MOST-POSITIVE-FIXNUM) (LOWER-BOUND MOST-NEGATIVE-FIXNUM)) (LOOP FOR X = (+ (RANDOM (- UPPER-BOUND LOWER-BOUND)) LOWER-BOUND) FOR NEG = (- X) REPEAT 1000 UNLESS (AND (INTEGERP NEG) (EQL (ABS X) (ABS NEG)) (IF (> X 0) (< NEG 0) (>= NEG 0)) (ZEROP (+ X NEG)) (EQL X (- NEG))) COLLECT X)) NIL)
;; Loading (DEFTEST MINUS.8 (LET ((UPPER-BOUND (ASH 1 1000)) (LOWER-BOUND (- (ASH 1 1000)))) (LOOP FOR X = (+ (RANDOM (- UPPER-BOUND LOWER-BOUND)) LOWER-BOUND) FOR NEG = (- X) REPEAT 1000 UNLESS (AND (INTEGERP NEG) (EQL (ABS X) (ABS NEG)) (IF (> X 0) (< NEG 0) (>= NEG 0)) (ZEROP (+ X NEG)) (EQL X (- NEG))) COLLECT X)) NIL)
;; Loading (DEFTEST MINUS.9 (MACROLET ((%M (Z) Z)) (- (EXPAND-IN-CURRENT-ENV (%M 1)))) -1)
;; Loading (DEFTEST SUBTRACT.1 (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (AND (EQL (+ X (- Y)) (- X Y)) (EQL (+ 1 X (- Y)) (- X (1- Y))) (EQL (+ -1 X (- Y)) (- X (1+ Y)))) COLLECT (LIST X Y)) NIL)
;; Loading (DEFTEST SUBTRACT.2 (LET ((BOUND (ASH 1 1000))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND (- BOUND)) FOR Y = (RANDOM-FROM-INTERVAL BOUND (- BOUND)) REPEAT 1000 UNLESS (AND (EQL (+ X (- Y)) (- X Y)) (EQL (+ 1 X (- Y)) (- X (1- Y))) (EQL (+ -1 X (- Y)) (- X (1+ Y)))) COLLECT (LIST X Y))) NIL)
;; Loading (DEFTEST SUBTRACT.3 (LET ((ARGS NIL)) (LOOP FOR I FROM 1 BELOW (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) DO (PUSH 1 ARGS) ALWAYS (EQL (APPLY (FUNCTION -) 1000 ARGS) (- 1000 I)))) T)
;; Loading (DEFTEST SUBTRACT.4 (LOOP FOR TYPE1 IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BITS1 IN (QUOTE (13 24 50 50)) FOR BOUND1 = (ASH 1 (- BITS1 2)) FOR C1 FROM 1 NCONC (LOOP FOR TYPE2 IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BITS2 IN (QUOTE (13 24 50 50)) FOR BOUND2 = (ASH 1 (- BITS2 2)) FOR C2 FROM 1 NCONC (LOOP FOR I = (RANDOM-FROM-INTERVAL BOUND1) FOR X = (COERCE I TYPE1) FOR J = (RANDOM-FROM-INTERVAL BOUND2) FOR Y = (COERCE J TYPE2) FOR IDIFF1 = (- I J) FOR IDIFF2 = (- J I) FOR DIFF1 = (- X Y) FOR DIFF2 = (- Y X) REPEAT 1000 UNLESS (OR (ZEROP IDIFF1) (AND (EQL IDIFF1 (- IDIFF2)) (EQL DIFF1 (- DIFF2)) (IF (<= C1 C2) (EQL (FLOAT DIFF1 Y) DIFF1) (EQL (FLOAT DIFF1 X) DIFF1)) (EQL (FLOAT IDIFF1 DIFF1) DIFF1))) COLLECT (LIST I X J Y IDIFF1 IDIFF2 DIFF1 DIFF2)))) NIL)
;; Loading (DEFTEST SUBTRACT.5 (LOOP FOR I = (RANDOM-FIXNUM) FOR CI = (COMPLEX I (+ I 100)) FOR J = (RANDOM-FIXNUM) FOR CJ = (COMPLEX J (- J 200)) FOR DIFF = (- CI CJ) REPEAT 1000 UNLESS (EQL DIFF (COMPLEX (- I J) (+ (- I J) 300))) COLLECT (LIST I CI J CJ (- CI CJ))) NIL)
;; Loading (DEFTEST SUBTRACT.6 (MACROLET ((%M (Z) Z)) (VALUES (- (EXPAND-IN-CURRENT-ENV (%M 2)) 1) (- 17 (EXPAND-IN-CURRENT-ENV (%M 5))) (- 1/2 (EXPAND-IN-CURRENT-ENV (%M 1/6)) (EXPAND-IN-CURRENT-ENV (%M 0))))) 1 12 1/3)
;; Loading (LOAD "divide.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/divide.lsp C15D6227>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "division-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/division-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN DIVIDE-BY-ZERO-TEST (&REST ARGS) (HANDLER-CASE (PROGN (APPLY (FUNCTION /) ARGS) (VALUES)) (DIVISION-BY-ZERO NIL (VALUES)) (CONDITION (C) C))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/division-aux.llf C17FBDB7>
;; Loading (DEFTEST /.ERROR.1 (SIGNALS-ERROR (/) PROGRAM-ERROR) T)
;; Loading (DEFTEST /.ERROR.2 (DIVIDE-BY-ZERO-TEST 0))
;; Loading (DEFTEST /.ERROR.3 (DIVIDE-BY-ZERO-TEST 1 0))
;; Loading (DEFTEST /.ERROR.4 (DIVIDE-BY-ZERO-TEST 17 10 0 11))
;; Loading (DEFTEST /.ERROR.5 (DIVIDE-BY-ZERO-TEST 0.0))
;; Loading (DEFTEST /.ERROR.6 (DIVIDE-BY-ZERO-TEST 0.0))
;; Loading (DEFTEST /.ERROR.7 (DIVIDE-BY-ZERO-TEST 0.0))
;; Loading (DEFTEST /.ERROR.8 (DIVIDE-BY-ZERO-TEST 0.0))
;; Loading (DEFTEST /.1 (/ 1) 1)
;; Loading (DEFTEST /.2 (/ -1) -1)
;; Loading (DEFTEST /.3 (LOOP FOR I = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (OR (ZEROP I) (LET ((Q1 (/ I)) (Q2 (/ 1 I))) (AND (RATIONALP Q1) (EQL (DENOMINATOR Q1) (ABS I)) (EQL (NUMERATOR Q1) (SIGNUM I)) (EQL Q1 Q2) (EQL (* Q1 I) 1)))) COLLECT I) NIL)
;; Loading (DEFTEST /.4 (LOOP FOR I = (RANDOM-FROM-INTERVAL 1000000 1) FOR J = (RANDOM-FROM-INTERVAL 1000000 1) FOR G = (GCD I J) FOR Q = (/ I J) FOR Q2 = (/ J) REPEAT 1000 UNLESS (AND (INTEGERP G) (ZEROP (MOD I G)) (ZEROP (MOD J G)) (EQL (NUMERATOR Q) (/ I G)) (EQL (DENOMINATOR Q) (/ J G)) (EQL (/ Q) (/ J I)) (EQL Q (* I Q2))) COLLECT (LIST I J Q)) NIL)
;; Loading (DEFTEST /.5 (LOOP FOR BOUND IN (LIST 100000.0 10000000000.0 0.0 0.0) NCONC (LOOP FOR I = (1+ (RANDOM BOUND)) FOR R1 = (/ I) FOR R2 = (/ 1 I) REPEAT 1000 UNLESS (EQL R1 R2) COLLECT (LIST I R1 R2))) NIL)
;; Loading (DEFTEST /.6 (LOOP FOR I1 = (RANDOM-FIXNUM) FOR I = (IF (ZEROP I1) 1 I1) FOR C = (COMPLEX 0 I) FOR R = (/ C) REPEAT 1000 UNLESS (EQL R (COMPLEX 0 (- (/ I)))) COLLECT (LIST I C R)) NIL)
;; Loading (DEFTEST /.8 (LOOP FOR BOUND IN (LIST 100000.0 10000000000.0 0.0 0.0) FOR ONE = (FLOAT 1.0 BOUND) FOR ZERO = (FLOAT 0.0 BOUND) NCONC (LOOP FOR I = (1+ (RANDOM BOUND)) FOR C = (COMPLEX I ZERO) FOR Q = (/ C C) REPEAT 100 UNLESS (EQL Q (COMPLEX ONE ZERO)) COLLECT (LIST I C Q (COMPLEX ONE ZERO)))) NIL)
;; Loading (DEFTEST /.9 (LOOP FOR A = (RANDOM-FIXNUM) FOR B = (RANDOM-FIXNUM) FOR M = (+ (* A A) (* B B)) REPEAT 1000 UNLESS (OR (ZEROP M) (LET* ((Q (/ (COMPLEX A B))) (C (/ A M)) (D (/ (- B) M)) (EXPECTED (COMPLEX C D))) (EQL Q EXPECTED))) COLLECT (LIST A B (/ (COMPLEX A B)))) NIL)
;; Loading (DEFTEST /.10 (LET ((BOUND 1000000000000000000)) (LOOP FOR A = (RANDOM-FROM-INTERVAL BOUND) FOR B = (RANDOM-FROM-INTERVAL BOUND) FOR M = (+ (* A A) (* B B)) REPEAT 1000 UNLESS (OR (ZEROP M) (LET* ((Q (/ (COMPLEX A B))) (C (/ A M)) (D (/ (- B) M)) (EXPECTED (COMPLEX C D))) (EQL Q EXPECTED))) COLLECT (LIST A B (/ (COMPLEX A B))))) NIL)
;; Loading (DEFTEST /.11 (LOOP FOR A = (RANDOM-FIXNUM) FOR B = (RANDOM-FIXNUM) FOR N = (COMPLEX (RANDOM-FIXNUM) (RANDOM-FIXNUM)) FOR M = (+ (* A A) (* B B)) REPEAT 1000 UNLESS (OR (ZEROP M) (LET* ((Q (/ N (COMPLEX A B))) (C (/ A M)) (D (/ (- B) M)) (EXPECTED (* N (COMPLEX C D)))) (EQL Q EXPECTED))) COLLECT (LIST A B (/ N (COMPLEX A B)))) NIL)
;; Loading (DEFTEST /.12 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR LOWER IN (MAPCAR (FUNCTION RATIONAL-SAFELY) (LIST LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT)) FOR UPPER IN (MAPCAR (FUNCTION RATIONAL-SAFELY) (LIST MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT)) FOR ONE = (COERCE 1 TYPE) FOR RADIX = (FLOAT-RADIX ONE) NCONC (LOOP FOR I FROM 1 FOR RPOS = RADIX THEN (* RPOS RADIX) FOR RNEG = (/ RADIX) THEN (/ RNEG RADIX) WHILE (<= LOWER RNEG RPOS UPPER) UNLESS (LET ((FRPOS (FLOAT RPOS ONE)) (FRNEG (FLOAT RNEG ONE))) (AND (EQL (/ FRPOS) (/ ONE FRPOS)) (EQL (/ FRPOS) (/ 1.0 FRPOS)) (EQL (/ FRPOS) (/ 1 FRPOS)) (EQL (/ FRPOS) FRNEG) (EQL (/ FRNEG) (/ 1.0 FRNEG)) (EQL (/ FRNEG) (/ 1 FRNEG)) (EQL (/ FRNEG) FRPOS))) COLLECT (LIST I RPOS RNEG (FLOAT RPOS ONE) (FLOAT RNEG ONE)))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST /.13 (MACROLET ((%M (Z) Z)) (VALUES (/ (EXPAND-IN-CURRENT-ENV (%M 1/2))) (/ (EXPAND-IN-CURRENT-ENV (%M 2)) 3) (/ 5 (EXPAND-IN-CURRENT-ENV (%M 7))))) 2 2/3 5/7)
;; Loading (LOAD "oneplus.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/oneplus.lsp 8120AF07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST 1+.ERROR.1 (SIGNALS-ERROR (1+) PROGRAM-ERROR) T)
;; Loading (DEFTEST 1+.ERROR.2 (SIGNALS-ERROR (1+ 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST 1+.ERROR.3 (SIGNALS-ERROR (1+ 0 NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST 1+.1 (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (1+ X) FOR Z = (+ X 1) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1+.2 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 1000)) FOR Y = (1+ X) FOR Z = (+ X 1) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1+.3 (LOOP FOR X = (RANDOM (1- MOST-POSITIVE-SHORT-FLOAT)) FOR Y = (1+ X) FOR Z = (+ X 1.0) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1+.4 (LOOP FOR X = (RANDOM (1- MOST-POSITIVE-SINGLE-FLOAT)) FOR Y = (1+ X) FOR Z = (+ X 1.0) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1+.5 (LOOP FOR X = (RANDOM (1- MOST-POSITIVE-DOUBLE-FLOAT)) FOR Y = (1+ X) FOR Z = (+ X 1.0) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1+.6 (LOOP FOR X = (RANDOM (1- MOST-POSITIVE-LONG-FLOAT)) FOR Y = (1+ X) FOR Z = (+ X 1.0) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1+.7 (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (RANDOM-FIXNUM) FOR Y2 = (IF (ZEROP Y) 1 Y) FOR R = (/ X Y2) FOR R1 = (1+ R) FOR R2 = (+ R 1) REPEAT 1000 UNLESS (EQL R1 R2) COLLECT (LIST X Y2 R1 R2)) NIL)
;; Loading (DEFTEST 1+.8 (LET ((BOUND (ASH 1 200))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND) FOR Y2 = (IF (ZEROP Y) 1 Y) FOR R = (/ X Y2) FOR R1 = (1+ R) FOR R2 = (+ R 1) REPEAT 1000 UNLESS (EQL R1 R2) COLLECT (LIST X Y2 R1 R2))) NIL)
;; Loading (DEFTEST 1+.9 (LOOP FOR XR = (RANDOM-FIXNUM) FOR XI = (RANDOM-FIXNUM) FOR XC = (COMPLEX XR XI) FOR XC1 = (1+ XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (+ XR 1) XI)) COLLECT (LIST XR XI XC XC1)) NIL)
;; Loading (DEFTEST 1+.10 (LET ((BOUND (ASH 1 100))) (LOOP FOR XR = (RANDOM-FROM-INTERVAL BOUND) FOR XI = (RANDOM-FROM-INTERVAL BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1+ XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (+ XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1+.11 (LET ((BOUND (1- MOST-POSITIVE-SHORT-FLOAT))) (LOOP FOR XR = (RANDOM BOUND) FOR XI = (RANDOM BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1+ XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (+ XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1+.12 (LET ((BOUND (1- MOST-POSITIVE-SINGLE-FLOAT))) (LOOP FOR XR = (RANDOM BOUND) FOR XI = (RANDOM BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1+ XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (+ XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1+.13 (LET ((BOUND (1- MOST-POSITIVE-DOUBLE-FLOAT))) (LOOP FOR XR = (RANDOM BOUND) FOR XI = (RANDOM BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1+ XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (+ XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1+.14 (LET ((BOUND (1- MOST-POSITIVE-LONG-FLOAT))) (LOOP FOR XR = (RANDOM BOUND) FOR XI = (RANDOM BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1+ XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (+ XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1+.15 (MACROLET ((%M (Z) Z)) (1+ (EXPAND-IN-CURRENT-ENV (%M 1)))) 2)
;; Loading (LOAD "oneminus.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/oneminus.lsp 8130F907>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST 1-.ERROR.1 (SIGNALS-ERROR (1-) PROGRAM-ERROR) T)
;; Loading (DEFTEST 1-.ERROR.2 (SIGNALS-ERROR (1- 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST 1-.ERROR.3 (SIGNALS-ERROR (1- 0 NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST 1-.1 (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (1- X) FOR Z = (- X 1) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1-.2 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 1000)) FOR Y = (1- X) FOR Z = (- X 1) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1-.3 (LOOP FOR X = (RANDOM (1- MOST-POSITIVE-SHORT-FLOAT)) FOR Y = (1- X) FOR Z = (- X 1.0) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1-.4 (LOOP FOR X = (RANDOM (1- MOST-POSITIVE-SINGLE-FLOAT)) FOR Y = (1- X) FOR Z = (- X 1.0) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1-.5 (LOOP FOR X = (RANDOM (1- MOST-POSITIVE-DOUBLE-FLOAT)) FOR Y = (1- X) FOR Z = (- X 1.0) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1-.6 (LOOP FOR X = (RANDOM (1- MOST-POSITIVE-LONG-FLOAT)) FOR Y = (1- X) FOR Z = (- X 1.0) REPEAT 1000 UNLESS (EQL Y Z) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST 1-.7 (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (RANDOM-FIXNUM) FOR Y2 = (IF (ZEROP Y) 1 Y) FOR R = (/ X Y2) FOR R1 = (1- R) FOR R2 = (- R 1) REPEAT 1000 UNLESS (EQL R1 R2) COLLECT (LIST X Y2 R1 R2)) NIL)
;; Loading (DEFTEST 1-.8 (LET ((BOUND (ASH 1 200))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND) FOR Y2 = (IF (ZEROP Y) 1 Y) FOR R = (/ X Y2) FOR R1 = (1- R) FOR R2 = (- R 1) REPEAT 1000 UNLESS (EQL R1 R2) COLLECT (LIST X Y2 R1 R2))) NIL)
;; Loading (DEFTEST 1-.9 (LOOP FOR XR = (RANDOM-FIXNUM) FOR XI = (RANDOM-FIXNUM) FOR XC = (COMPLEX XR XI) FOR XC1 = (1- XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (- XR 1) XI)) COLLECT (LIST XR XI XC XC1)) NIL)
;; Loading (DEFTEST 1-.10 (LET ((BOUND (ASH 1 100))) (LOOP FOR XR = (RANDOM-FROM-INTERVAL BOUND) FOR XI = (RANDOM-FROM-INTERVAL BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1- XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (- XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1-.11 (LET ((BOUND (1- MOST-POSITIVE-SHORT-FLOAT))) (LOOP FOR XR = (RANDOM BOUND) FOR XI = (RANDOM BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1- XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (- XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1-.12 (LET ((BOUND (1- MOST-POSITIVE-SINGLE-FLOAT))) (LOOP FOR XR = (RANDOM BOUND) FOR XI = (RANDOM BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1- XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (- XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1-.13 (LET ((BOUND (1- MOST-POSITIVE-DOUBLE-FLOAT))) (LOOP FOR XR = (RANDOM BOUND) FOR XI = (RANDOM BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1- XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (- XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1-.14 (LET ((BOUND (1- MOST-POSITIVE-LONG-FLOAT))) (LOOP FOR XR = (RANDOM BOUND) FOR XI = (RANDOM BOUND) FOR XC = (COMPLEX XR XI) FOR XC1 = (1- XC) REPEAT 1000 UNLESS (EQL XC1 (COMPLEX (- XR 1) XI)) COLLECT (LIST XR XI XC XC1))) NIL)
;; Loading (DEFTEST 1-.15 (MACROLET ((%M (Z) Z)) (1- (EXPAND-IN-CURRENT-ENV (%M 2)))) 1)
;; Loading (LOAD "abs.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/abs.lsp 81410F97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST ABS.ERROR.1 (SIGNALS-ERROR (ABS) PROGRAM-ERROR) T)
;; Loading (DEFTEST ABS.ERROR.2 (SIGNALS-ERROR (ABS 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ABS.ERROR.3 (SIGNALS-ERROR (ABS 0 NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ABS.1 (LOOP FOR X IN *NUMBERS* FOR A = (ABS X) ALWAYS (AND (REALP A) (NOT (MINUSP A)))) T)
;; Loading (DEFTEST ABS.2 (LOOP FOR X = (RANDOM-FIXNUM) FOR A = (ABS X) REPEAT 10000 UNLESS (IF (PLUSP X) (EQL X A) (EQL (- X) A)) COLLECT (LIST X A)) NIL)
;; Loading (DEFTEST ABS.3 (LET ((BOUND (ASH 1 300))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR A = (ABS X) REPEAT 10000 UNLESS (IF (PLUSP X) (EQL X A) (EQL (- X) A)) COLLECT (LIST X A))) NIL)
;; Loading (DEFTEST ABS.4 (LOOP FOR NUM = (RANDOM-FIXNUM) FOR DEN = (RANDOM-FIXNUM) FOR DEN2 = (IF (ZEROP DEN) 1 DEN) FOR R = (/ NUM DEN) FOR A = (ABS R) REPEAT 10000 UNLESS (IF (>= R 0) (EQL R A) (EQL (- R) A)) COLLECT (LIST NUM DEN2 R A)) NIL)
;; Loading (DEFTEST ABS.5 (LET ((BOUND (ASH 1 210))) (LOOP FOR NUM = (RANDOM-FROM-INTERVAL BOUND) FOR DEN = (RANDOM-FROM-INTERVAL BOUND) FOR DEN2 = (IF (ZEROP DEN) 1 DEN) FOR R = (/ NUM DEN) FOR A = (ABS R) REPEAT 10000 UNLESS (IF (>= R 0) (EQL R A) (EQL (- R) A)) COLLECT (LIST NUM DEN2 R A))) NIL)
;; Loading (DEFTEST ABS.6 (LET ((BOUND (FLOAT (ASH 1 11) 1.0))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR A = (ABS X) REPEAT 10000 UNLESS (IF (MINUSP X) (EQL (- X) A) (EQL X A)) COLLECT (LIST X A))) NIL)
;; Loading (DEFTEST ABS.7 (LET ((BOUND (FLOAT (ASH 1 22) 1.0))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR A = (ABS X) REPEAT 10000 UNLESS (IF (MINUSP X) (EQL (- X) A) (EQL X A)) COLLECT (LIST X A))) NIL)
;; Loading (DEFTEST ABS.8 (LET ((BOUND (FLOAT (ASH 1 48) 1.0))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR A = (ABS X) REPEAT 10000 UNLESS (IF (MINUSP X) (EQL (- X) A) (EQL X A)) COLLECT (LIST X A))) NIL)
;; Loading (DEFTEST ABS.9 (LET ((BOUND (FLOAT (ASH 1 48) 1.0))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR A = (ABS X) REPEAT 10000 UNLESS (IF (MINUSP X) (EQL (- X) A) (EQL X A)) COLLECT (LIST X A))) NIL)
;; Loading (DEFTEST ABS.14 (LET ((RESULT (ABS #C(3 4)))) (=T RESULT 5)) T)
;; Loading (DEFTEST ABS.15 (LET ((RESULT (ABS #C(-3 4)))) (=T RESULT 5)) T)
;; Loading (DEFTEST ABS.16 (LET ((RESULT (ABS #C(3 -4)))) (=T RESULT 5)) T)
;; Loading (DEFTEST ABS.17 (LET ((RESULT (ABS #C(-3 -4)))) (=T RESULT 5)) T)
;; Loading (DEFTEST ABS.18 (ABS #C(3.0 4.0)) 5.0)
;; Loading (DEFTEST ABS.19 (ABS #C(3.0 -4.0)) 5.0)
;; Loading (DEFTEST ABS.20 (ABS #C(-3.0 4.0)) 5.0)
;; Loading (DEFTEST ABS.21 (ABS #C(-3.0 4.0)) 5.0)
;; Loading (DEFTEST ABS.22 (MACROLET ((%M (Z) Z)) (ABS (EXPAND-IN-CURRENT-ENV (%M -4)))) 4)
;; Loading (LOAD "exp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/exp.lsp 814F61D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "exp-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/exp-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN MY-EXP (X N) "Compute e^x in the appropriate float result type, summing
   the first n terms of the Taylor series." (ASSERT (REALP X)) (LET ((RESULT 1) (XRAT (RATIONAL X))) (LOOP FOR I FROM (1- N) DOWNTO 1 DO (SETQ RESULT (+ 1 (/ (* XRAT RESULT) I)))) (IF (FLOATP X) (FLOAT RESULT X) (FLOAT RESULT 1.0)))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/exp-aux.llf 816602B7>
;; Loading (DEFTEST EXP.ERROR.1 (SIGNALS-ERROR (EXP) PROGRAM-ERROR) T)
;; Loading (DEFTEST EXP.ERROR.2 (SIGNALS-ERROR (EXP 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EXP.ERROR.3 (SIGNALS-ERROR (EXP 0 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST EXP.1 (LET ((RESULT (EXP 0))) (OR (EQLT RESULT 1) (EQLT RESULT 1.0))) T)
;; Loading (DEFTEST EXP.2 (MAPCAR (FUNCTION EXP) (QUOTE (0.0 0.0 0.0 0.0))) (1.0 1.0 1.0 1.0))
;; Loading (DEFTEST EXP.3 (MAPCAR (FUNCTION EXP) (QUOTE (0.0 0.0 0.0 0.0))) (1.0 1.0 1.0 1.0))
;; Loading (DEFTEST EXP.ERROR.4 (SIGNALS-ERROR (EXP (+ (LOG MOST-POSITIVE-SHORT-FLOAT) 100)) FLOATING-POINT-OVERFLOW) T)
;; Loading (DEFTEST EXP.ERROR.5 (SIGNALS-ERROR (EXP (+ (LOG MOST-POSITIVE-SINGLE-FLOAT) 100)) FLOATING-POINT-OVERFLOW) T)
;; Loading (DEFTEST EXP.ERROR.6 (SIGNALS-ERROR (EXP (+ (LOG MOST-POSITIVE-DOUBLE-FLOAT) 100)) FLOATING-POINT-OVERFLOW) T)
;; Loading (DEFTEST EXP.ERROR.7 (SIGNALS-ERROR (EXP (+ (LOG MOST-POSITIVE-LONG-FLOAT) 100)) FLOATING-POINT-OVERFLOW) T)
;; Loading (DEFTEST EXP.ERROR.8 (SIGNALS-ERROR (EXP (- (LOG LEAST-POSITIVE-SHORT-FLOAT) 100)) FLOATING-POINT-UNDERFLOW) T)
;; Loading (DEFTEST EXP.ERROR.9 (SIGNALS-ERROR (EXP (- (LOG LEAST-POSITIVE-SINGLE-FLOAT) 100)) FLOATING-POINT-UNDERFLOW) T)
;; Loading (DEFTEST EXP.ERROR.10 (SIGNALS-ERROR (EXP (- (LOG LEAST-POSITIVE-DOUBLE-FLOAT) 100)) FLOATING-POINT-UNDERFLOW) T)
;; Loading (DEFTEST EXP.ERROR.11 (SIGNALS-ERROR (EXP (- (LOG LEAST-POSITIVE-DOUBLE-FLOAT) 100)) FLOATING-POINT-UNDERFLOW) T)
;; Loading (LOAD "expt.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/expt.lsp 8170FF37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST EXPT.ERROR.1 (SIGNALS-ERROR (EXPT) PROGRAM-ERROR) T)
;; Loading (DEFTEST EXPT.ERROR.2 (SIGNALS-ERROR (EXPT 1 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST EXPT.ERROR.3 (SIGNALS-ERROR (EXPT 1 1 NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EXPT.ERROR.4 (SIGNALS-ERROR (EXPT MOST-POSITIVE-SHORT-FLOAT 2) FLOATING-POINT-OVERFLOW) T)
;; Loading (DEFTEST EXPT.ERROR.5 (SIGNALS-ERROR (EXPT MOST-POSITIVE-SINGLE-FLOAT 2) FLOATING-POINT-OVERFLOW) T)
;; Loading (DEFTEST EXPT.ERROR.6 (SIGNALS-ERROR (EXPT MOST-POSITIVE-DOUBLE-FLOAT 2) FLOATING-POINT-OVERFLOW) T)
;; Loading (DEFTEST EXPT.ERROR.7 (SIGNALS-ERROR (EXPT MOST-POSITIVE-LONG-FLOAT 2) FLOATING-POINT-OVERFLOW) T)
;; Loading (DEFTEST EXPT.ERROR.8 (SIGNALS-ERROR (EXPT LEAST-POSITIVE-SHORT-FLOAT 2) FLOATING-POINT-UNDERFLOW) T)
;; Loading (DEFTEST EXPT.ERROR.9 (SIGNALS-ERROR (EXPT LEAST-POSITIVE-SINGLE-FLOAT 2) FLOATING-POINT-UNDERFLOW) T)
;; Loading (DEFTEST EXPT.ERROR.10 (SIGNALS-ERROR (EXPT LEAST-POSITIVE-DOUBLE-FLOAT 2) FLOATING-POINT-UNDERFLOW) T)
;; Loading (DEFTEST EXPT.ERROR.11 (SIGNALS-ERROR (EXPT LEAST-POSITIVE-LONG-FLOAT 2) FLOATING-POINT-UNDERFLOW) T)
;; Loading (DEFTEST EXPT.1 (EXPT 0 0) 1)
;; Loading (DEFTEST EXPT.2 (LOOP FOR I FROM -1000 TO 1000 ALWAYS (EQL (EXPT I 0) 1)) T)
;; Loading (DEFTEST EXPT.3 (LOOP FOR I = (RANDOM 1000.0) REPEAT 1000 ALWAYS (EQL (EXPT I 0) 1.0)) T)
;; Loading (DEFTEST EXPT.4 (LOOP FOR I = (RANDOM 1000000.0) REPEAT 1000 ALWAYS (EQL (EXPT I 0) 1.0)) T)
;; Loading (DEFTEST EXPT.5 (LOOP FOR I = (RANDOM 10000000000.0) REPEAT 1000 ALWAYS (EQL (EXPT I 0) 1.0)) T)
;; Loading (DEFTEST EXPT.6 (LOOP FOR I = (RANDOM 10000000000.0) REPEAT 1000 ALWAYS (EQL (EXPT I 0) 1.0)) T)
;; Loading (DEFTEST EXPT.7 (LOOP FOR I FROM -1000 TO 1000 FOR C = (COMPLEX I I) ALWAYS (EQL (EXPT C 0) 1)) T)
;; Loading (DEFTEST EXPT.8 (LOOP FOR I = (RANDOM 1000.0) FOR C = (COMPLEX I I) REPEAT 1000 ALWAYS (EQL (EXPT C 0) #C(1.0 0.0))) T)
;; Loading (DEFTEST EXPT.9 (LOOP FOR I = (RANDOM 1000000.0) FOR C = (COMPLEX I I) REPEAT 1000 ALWAYS (EQL (EXPT C 0) #C(1.0 0.0))) T)
;; Loading (DEFTEST EXPT.10 (LOOP FOR I = (RANDOM 10000000000.0) FOR C = (COMPLEX I I) REPEAT 1000 ALWAYS (EQL (EXPT C 0) #C(1.0 0.0))) T)
;; Loading (DEFTEST EXPT.11 (LOOP FOR I = (RANDOM 10000000000.0) FOR C = (COMPLEX I I) REPEAT 1000 ALWAYS (EQL (EXPT C 0) #C(1.0 0.0))) T)
;; Loading (DEFTEST EXPT.12 (LOOP FOR X IN *NUMBERS* UNLESS (OR (FLOATP (REALPART X)) (EQL (EXPT X 1) X)) COLLECT X) NIL)
;; Loading (DEFTEST EXPT.13 (LOOP FOR X IN *RATIONALS* UNLESS (AND (EQL (EXPT X 2) (* X X)) (OR (ZEROP X) (EQL (EXPT X -1) (/ X)))) COLLECT X) NIL)
;; Loading (DEFTEST EXPT.14 (EXPT #C(0 2) 2) -4)
;; Loading (DEFTEST EXPT.15 (EXPT #C(1 1) 2) #C(0 2))
;; Loading (DEFTEST EXPT.16 (EXPT #C(1/2 1/3) 3) #C(1/24 23/108))
;; Loading (DEFTEST EXPT.17 (EXPT #C(1 1) -2) #C(0 1/2))
;; Loading (DEFTEST EXPT.18 (LOOP FOR ZERO IN (QUOTE (0.0 0.0 0.0 0.0)) ALWAYS (LOOP FOR I FROM -1000 TO 1000 ALWAYS (OR (ZEROP I) (EQL (EXPT I ZERO) (FLOAT 1 ZERO))))) T)
;; Loading (DEFTEST EXPT.19 (LOOP FOR ZERO IN (QUOTE (0.0 0.0 0.0 0.0)) ALWAYS (LOOP FOR I FROM -1000 TO 1000 ALWAYS (OR (ZEROP I) (EQL (EXPT (FLOAT I 0.0) ZERO) (FLOAT 1 ZERO))))) T)
;; Loading (DEFTEST EXPT.20 (LOOP FOR ZERO IN (QUOTE (0.0 0.0 0.0)) ALWAYS (LOOP FOR I FROM -1000 TO 1000 ALWAYS (OR (ZEROP I) (EQL (EXPT (FLOAT I 0.0) ZERO) (FLOAT 1 ZERO))))) T)
;; Loading (DEFTEST EXPT.21 (LOOP FOR ZERO IN (QUOTE (0.0 0.0)) ALWAYS (LOOP FOR I FROM -1000 TO 1000 ALWAYS (OR (ZEROP I) (EQL (EXPT (FLOAT I 0.0) ZERO) (FLOAT 1 ZERO))))) T)
;; Loading (DEFTEST EXPT.22 (EXPT 2.0 0.0) 1.0)
;; Loading (DEFTEST EXPT.23 (EXPT 2.0 0.0) 1.0)
;; Loading (DEFTEST EXPT.24 (EXPT 2.0 0.0) 1.0)
;; Loading (DEFTEST EXPT.25 (EXPT 2.0 0.0) 1.0)
;; Loading (DEFTEST EXPT.26 (EXPT 2.0 0.0) 1.0)
;; Loading (DEFTEST EXPT.27 (EXPT 2.0 0.0) 1.0)
;; Loading (DEFTEST EXPT.28 (<= (REALPART (EXPT -8 1/3)) 0.0) NIL)
;; Loading (LOAD "gcd.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/gcd.lsp 818349A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "gcd-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/gcd-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN MY-GCD (X Y) (COND ((< X 0) (MY-GCD (- X) Y)) ((< Y 0) (MY-GCD X (- Y))) ((<= X Y) (MY-GCD* X Y)) (T (MY-GCD* Y X)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MY-GCD* (X Y) (LOOP (WHEN (ZEROP X) (RETURN Y)) (PSETQ X (MOD Y X) Y X))).
;; Compiling form (DEFUN MY-LCM (X Y) (WHEN (< X 0) (SETF X (- X))) (WHEN (< Y 0) (SETF Y (- Y))) (IF (OR (= X 0) (= Y 0)) 0 (/ (* X Y) (MY-GCD X Y)))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/gcd-aux.llf C1337047>
;; Loading (DEFTEST GCD.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION GCD) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST GCD.1 (GCD) 0)
;; Loading (DEFTEST GCD.2 (LOOP FOR I = (RANDOM-FIXNUM) FOR A = (ABS I) REPEAT 10000 UNLESS (AND (EQL A (GCD I)) (EQL A (GCD 0 I))) COLLECT I) NIL)
;; Loading (DEFTEST GCD.3 (LOOP FOR I = (RANDOM-FROM-INTERVAL 10000000000000000) FOR A = (ABS I) REPEAT 10000 UNLESS (AND (EQL A (GCD I)) (EQL A (GCD I 0))) COLLECT I) NIL)
;; Loading (DEFTEST GCD.4 (LOOP FOR I = (RANDOM-FIXNUM) FOR J = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (EQL (MY-GCD I J) (GCD I J)) COLLECT (LIST I J)) NIL)
;; Loading (DEFTEST GCD.5 (LET ((BOUND (ASH 1 200))) (LOOP FOR I = (RANDOM-FROM-INTERVAL BOUND) FOR J = (RANDOM-FROM-INTERVAL BOUND) REPEAT 1000 UNLESS (EQL (MY-GCD I J) (GCD I J)) COLLECT (LIST I J))) NIL)
;; Loading (DEFTEST GCD.6 (LOOP FOR I = (RANDOM-FIXNUM) FOR J = (RANDOM-FIXNUM) FOR K = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (EQL (MY-GCD I (MY-GCD J K)) (GCD I J K)) COLLECT (LIST I J K)) NIL)
;; Loading (DEFTEST GCD.7 (LOOP FOR I = (RANDOM-FIXNUM) FOR J = (RANDOM-FIXNUM) FOR K = (RANDOM-FIXNUM) FOR N = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (EQL (MY-GCD (MY-GCD I J) (MY-GCD K N)) (GCD I J K N)) COLLECT (LIST I J K)) NIL)
;; Loading (DEFTEST GCD.8 (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) ALWAYS (EQL (APPLY (FUNCTION GCD) (MAKE-LIST I :INITIAL-ELEMENT 1)) 1)) T)
;; Loading (DEFTEST GCD.ORDER.1 (LET ((I 0) X Y) (VALUES (GCD (PROGN (SETF X (INCF I)) 15) (PROGN (SETF Y (INCF I)) 25)) I X Y)) 5 2 1 2)
;; Loading (DEFTEST GCD.ORDER.2 (LET ((I 0) X Y) (VALUES (GCD (PROGN (SETF X (INCF I)) 0) (PROGN (SETF Y (INCF I)) 10)) I X Y)) 10 2 1 2)
;; Loading (DEFTEST GCD.ORDER.3 (LET ((I 0)) (VALUES (GCD (PROGN (INCF I) 0)) I)) 0 1)
;; Loading (LOAD "incf.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/incf.lsp C1472C67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST INCF.1 (LET ((X 12)) (VALUES (INCF X) X)) 13 13)
;; Loading (DEFTEST INCF.2 (LET ((X 3.0)) (VALUES (INCF X) X)) 4.0 4.0)
;; Loading (DEFTEST INCF.3 (LET ((X 19.0)) (VALUES (INCF X) X)) 20.0 20.0)
;; Loading (DEFTEST INCF.4 (LET ((X 813.0)) (VALUES (INCF X) X)) 814.0 814.0)
;; Loading (DEFTEST INCF.5 (LET ((X -17.0)) (VALUES (INCF X) X)) -16.0 -16.0)
;; Loading (DEFTEST INCF.6 (LOOP FOR X FROM 1 TO 5 COLLECT (LET ((Y X)) (LIST (INCF Y) Y))) ((2 2) (3 3) (4 4) (5 5) (6 6)))
;; Loading (DEFTEST INCF.7 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) COLLECT (LET ((Y X)) (LIST (INCF Y) Y))) ((2.0 2.0) (2.0 2.0) (2.0 2.0) (2.0 2.0)))
;; Loading (DEFTEST INCF.8 (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) FOR Y = (COMPLEX X 0) FOR Z = (INCF Y) FOR X1C = (COMPLEX (1+ X) 0) UNLESS (AND (EQL Y Z) (EQL X1C Y)) COLLECT (LIST X Y Z X1C)) NIL)
;; Loading (DEFTEST INCF.9 (LET ((X MOST-POSITIVE-FIXNUM)) (VALUES (INCF X) X)) 1152921504606846976 1152921504606846976)
;; Loading (DEFTEST INCF.10 (LET ((X (1+ MOST-POSITIVE-FIXNUM))) (VALUES (INCF X) X)) 1152921504606846977 1152921504606846977)
;; Loading (DEFTEST INCF.11 (LOOP FOR X IN *NUMBERS* UNLESS (LET* ((Y X) (Z (INCF Y))) (AND (EQL Y (1+ X)) (EQL Y Z))) COLLECT X) NIL)
;; Loading (DEFTEST INCF.12 (LOOP FOR X IN *NUMBERS* UNLESS (LET* ((Y X) (Z (INCF Y 0))) (AND (EQL X Y) (EQL Y Z))) COLLECT X) NIL)
;; Loading (DEFTEST INCF.13 (LOOP FOR X IN *NUMBERS* NCONC (LOOP FOR R = (RANDOM-FROM-INTERVAL 1000000) REPEAT 100 WHEN (LET* ((Y X) (Z (INCF Y R))) (AND (NOT (AND (EQL (+ X R) Y) (EQL Y Z))) (LIST X Y R))) COLLECT IT)) NIL)
;; Loading (DEFTEST INCF.14 (LET ((X 1)) (VALUES (INCF X 0.0) X)) 1.0 1.0)
;; Loading (DEFTEST INCF.15 (LET ((X 1)) (VALUES (INCF X 0.0) X)) 1.0 1.0)
;; Loading (DEFTEST INCF.16 (LET ((X 2)) (VALUES (INCF X 0.0) X)) 2.0 2.0)
;; Loading (DEFTEST INCF.17 (LET ((X 10)) (VALUES (INCF X 0.0) X)) 10.0 10.0)
;; Loading (DEFTEST INCF.18 (LET ((X 1)) (VALUES (INCF X #C(0.0 0.0)) X)) #C(1.0 0.0) #C(1.0 0.0))
;; Loading (DEFTEST INCF.19 (LET ((X 1)) (VALUES (INCF X #C(0.0 2.0)) X)) #C(1.0 2.0) #C(1.0 2.0))
;; Loading (DEFTEST INCF.20 (LET ((X 1)) (VALUES (INCF X #C(0.0 2.0)) X)) #C(1.0 2.0) #C(1.0 2.0))
;; Loading (DEFTEST INCF.21 (LET ((X 1)) (VALUES (INCF X #C(0.0 -2.0)) X)) #C(1.0 -2.0) #C(1.0 -2.0))
;; Loading (DEFTEST INCF.22 (MACROLET ((%M (Z) Z)) (LET ((X 2)) (VALUES (INCF (EXPAND-IN-CURRENT-ENV (%M X))) X))) 3 3)
;; Loading (DEFTEST INCF.23 (MACROLET ((%M (Z) Z)) (LET ((X 2)) (VALUES (INCF X (EXPAND-IN-CURRENT-ENV (%M 4))) X))) 6 6)
;; Loading (DEFTEST INCF.ORDER.2 (LET ((A (VECTOR 1 2 3 4)) (I 0) X Y Z) (VALUES (INCF (AREF (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) 0)) (PROGN (SETF Z (INCF I)) 17)) I X Y Z A)) 18 3 1 2 3 #(18 2 3 4))
;; Loading (DEFTEST INCF.ORDER.3 (LET ((A (VECTOR 10 2 3 4)) (I 0) X Y) (VALUES (INCF (AREF (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) 0))) I X Y A)) 11 2 1 2 #(11 2 3 4))
;; Loading (DEFTEST INCF.ORDER.4 (LET ((X 0)) (PROGN "See CLtS 5.1.3" (VALUES (INCF X (SETF X 1)) X))) 2 2)
;; Loading (LOAD "decf.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/decf.lsp C1571D77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST DECF.1 (LET ((X 12)) (VALUES (DECF X) X)) 11 11)
;; Loading (DEFTEST DECF.2 (LET ((X 3.0)) (VALUES (DECF X) X)) 2.0 2.0)
;; Loading (DEFTEST DECF.3 (LET ((X 19.0)) (VALUES (DECF X) X)) 18.0 18.0)
;; Loading (DEFTEST DECF.4 (LET ((X 813.0)) (VALUES (DECF X) X)) 812.0 812.0)
;; Loading (DEFTEST DECF.5 (LET ((X -17.0)) (VALUES (DECF X) X)) -18.0 -18.0)
;; Loading (DEFTEST DECF.6 (LOOP FOR X FROM 1 TO 5 COLLECT (LET ((Y X)) (LIST (DECF Y) Y))) ((0 0) (1 1) (2 2) (3 3) (4 4)))
;; Loading (DEFTEST DECF.7 (LOOP FOR X IN (QUOTE (3.0 3.0 3.0 3.0)) COLLECT (LET ((Y X)) (LIST (DECF Y) Y))) ((2.0 2.0) (2.0 2.0) (2.0 2.0) (2.0 2.0)))
;; Loading (DEFTEST DECF.8 (LOOP FOR X IN (QUOTE (3.0 3.0 3.0 3.0)) FOR Y = (COMPLEX X 0) FOR Z = (DECF Y) FOR X1C = (COMPLEX (1- X) 0) UNLESS (AND (EQL Y Z) (EQL X1C Y)) COLLECT (LIST X Y Z X1C)) NIL)
;; Loading (DEFTEST DECF.9 (LET ((X MOST-NEGATIVE-FIXNUM)) (VALUES (DECF X) X)) -1152921504606846977 -1152921504606846977)
;; Loading (DEFTEST DECF.10 (LET ((X (1- MOST-NEGATIVE-FIXNUM))) (VALUES (DECF X) X)) -1152921504606846978 -1152921504606846978)
;; Loading (DEFTEST DECF.11 (LOOP FOR X IN *NUMBERS* UNLESS (LET* ((Y X) (Z (DECF Y))) (AND (EQL Y (1- X)) (EQL Y Z))) COLLECT X) NIL)
;; Loading (DEFTEST DECF.12 (LOOP FOR X IN *NUMBERS* UNLESS (LET* ((Y X) (Z (DECF Y 0))) (AND (EQL X Y) (EQL Y Z))) COLLECT X) NIL)
;; Loading (DEFTEST DECF.13 (LOOP FOR X IN *NUMBERS* NCONC (LOOP FOR R = (RANDOM-FROM-INTERVAL 1000000) REPEAT 100 WHEN (LET* ((Y X) (Z (DECF Y R))) (AND (NOT (AND (EQL (- X R) Y) (EQL Y Z))) (LIST X Y R))) COLLECT IT)) NIL)
;; Loading (DEFTEST DECF.14 (LET ((X 1)) (VALUES (DECF X 0.0) X)) 1.0 1.0)
;; Loading (DEFTEST DECF.15 (LET ((X 1)) (VALUES (DECF X 0.0) X)) 1.0 1.0)
;; Loading (DEFTEST DECF.16 (LET ((X 2)) (VALUES (DECF X 0.0) X)) 2.0 2.0)
;; Loading (DEFTEST DECF.17 (LET ((X 10)) (VALUES (DECF X 0.0) X)) 10.0 10.0)
;; Loading (DEFTEST DECF.18 (LET ((X 1)) (VALUES (DECF X #C(0.0 10.0)) X)) #C(1.0 -10.0) #C(1.0 -10.0))
;; Loading (DEFTEST DECF.19 (LET ((X 1)) (VALUES (DECF X #C(0.0 2.0)) X)) #C(1.0 -2.0) #C(1.0 -2.0))
;; Loading (DEFTEST DECF.20 (LET ((X 1)) (VALUES (DECF X #C(0.0 2.0)) X)) #C(1.0 -2.0) #C(1.0 -2.0))
;; Loading (DEFTEST DECF.21 (LET ((X 1)) (VALUES (DECF X #C(0.0 -2.0)) X)) #C(1.0 2.0) #C(1.0 2.0))
;; Loading (DEFTEST DECF.22 (MACROLET ((%M (Z) Z)) (LET ((X 10)) (VALUES (DECF (EXPAND-IN-CURRENT-ENV (%M X))) X))) 9 9)
;; Loading (DEFTEST DECF.23 (MACROLET ((%M (Z) Z)) (LET ((X 5)) (VALUES (DECF X (EXPAND-IN-CURRENT-ENV (%M 3))) X))) 2 2)
;; Loading (DEFTEST DECF.ORDER.2 (LET ((A (VECTOR 1 2 3 4)) (I 0) X Y Z) (VALUES (DECF (AREF (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) 0)) (PROGN (SETF Z (INCF I)) 17)) I X Y Z A)) -16 3 1 2 3 #(-16 2 3 4))
;; Loading (DEFTEST DECF.ORDER.3 (LET ((A (VECTOR 10 2 3 4)) (I 0) X Y) (VALUES (DECF (AREF (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) 0))) I X Y A)) 9 2 1 2 #(9 2 3 4))
;; Loading (DEFTEST DECF.ORDER.4 (LET ((X 0)) (PROGN "See CLtS 5.1.3" (VALUES (DECF X (SETF X 1)) X))) 0 0)
;; Loading (LOAD "lcm.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/lcm.lsp C1670BB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "gcd-aux.lsp")
;; Loading (DEFTEST LCM.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION LCM) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LCM.1 (LCM) 1)
;; Loading (DEFTEST LCM.2 (LOOP FOR I = (RANDOM-FIXNUM) FOR A = (ABS I) REPEAT 1000 UNLESS (AND (EQL A (LCM I)) (EQL A (LCM 1 I))) COLLECT I) NIL)
;; Loading (DEFTEST LCM.3 (LOOP FOR I = (RANDOM-FROM-INTERVAL 10000000000000000) FOR A = (ABS I) REPEAT 1000 UNLESS (AND (EQL A (LCM I)) (EQL A (LCM I 1))) COLLECT I) NIL)
;; Loading (DEFTEST LCM.4 (LOOP FOR I = (RANDOM-FIXNUM) FOR J = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (EQL (MY-LCM I J) (LCM I J)) COLLECT (LIST I J)) NIL)
;; Loading (DEFTEST LCM.5 (LET ((BOUND (ASH 1 200))) (LOOP FOR I = (RANDOM-FROM-INTERVAL BOUND) FOR J = (RANDOM-FROM-INTERVAL BOUND) REPEAT 1000 UNLESS (EQL (MY-LCM I J) (LCM I J)) COLLECT (LIST I J))) NIL)
;; Loading (DEFTEST LCM.6 (LOOP FOR I = (RANDOM-FIXNUM) FOR J = (RANDOM-FIXNUM) FOR K = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (EQL (MY-LCM I (MY-LCM J K)) (LCM I J K)) COLLECT (LIST I J K)) NIL)
;; Loading (DEFTEST LCM.7 (LOOP FOR I = (RANDOM-FIXNUM) FOR J = (RANDOM-FIXNUM) FOR K = (RANDOM-FIXNUM) FOR N = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (EQL (MY-LCM (MY-LCM I J) (MY-LCM K N)) (LCM I J K N)) COLLECT (LIST I J K N)) NIL)
;; Loading (DEFTEST LCM.8 (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) ALWAYS (EQL (APPLY (FUNCTION LCM) (MAKE-LIST I :INITIAL-ELEMENT 1)) 1)) T)
;; Loading (DEFTEST LCM.9 (LCM 0 0) 0)
;; Loading (DEFTEST LCM.10 (LCM 1 0 0) 0)
;; Loading (DEFTEST LCM.11 (LCM 0 1 0) 0)
;; Loading (DEFTEST LCM.12 (LCM 0 0 1) 0)
;; Loading (DEFTEST LCM.ORDER.1 (LET ((I 0) X Y) (VALUES (LCM (PROGN (SETF X (INCF I)) 15) (PROGN (SETF Y (INCF I)) 25)) I X Y)) 75 2 1 2)
;; Loading (DEFTEST LCM.ORDER.2 (LET ((I 0) X Y) (VALUES (LCM (PROGN (SETF X (INCF I)) 0) (PROGN (SETF Y (INCF I)) 10)) I X Y)) 0 2 1 2)
;; Loading (DEFTEST LCM.ORDER.3 (LET ((I 0)) (VALUES (LCM (PROGN (INCF I) 0)) I)) 0 1)
;; Loading (LOAD "log.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/log.lsp C172C907>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LOG.1 (LET ((RESULT (LOG 1))) (OR (EQLT RESULT 0) (EQLT RESULT 0.0))) T)
;; Loading (DEFTEST LOG.2 (MAPCAR (FUNCTION LOG) (QUOTE (1.0 1.0 1.0 1.0))) (0.0 0.0 0.0 0.0))
;; Loading (DEFTEST LOG.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (+ (RANDOM (COERCE 1 TYPE)) (/ 1 1000)) FOR RLIST = (MULTIPLE-VALUE-LIST (LOG X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST LOG.4 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LOOP FOR X = (1+ (RANDOM (COERCE 1000000 TYPE))) FOR RLIST = (MULTIPLE-VALUE-LIST (LOG X)) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (AND (NULL (CDR RLIST)) (TYPEP Y TYPE)) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST LOG.5 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) NCONC (LOOP FOR X = (- (RANDOM (COERCE 1 TYPE))) FOR RLIST = (AND (/= X ZERO) (MULTIPLE-VALUE-LIST (LOG X))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (OR (= X ZERO) (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))))) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST LOG.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) NCONC (LOOP FOR X = (- (RANDOM (COERCE 1000000 TYPE))) FOR RLIST = (AND (/= X ZERO) (MULTIPLE-VALUE-LIST (LOG X))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (OR (= X ZERO) (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))))) COLLECT (LIST X RLIST))) NIL)
;; Loading (DEFTEST LOG.7 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 2000 TYPE)) 1000) FOR X2 = (1+ (RANDOM (COERCE 1000 TYPE))) FOR RLIST = (AND (/= X1 ZERO) (MULTIPLE-VALUE-LIST (LOG (COMPLEX X1 X2)))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (OR (= X1 ZERO) (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))))) COLLECT (LIST X1 X2 RLIST))) NIL)
;; Loading (DEFTEST LOG.8 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ZERO = (COERCE 0 TYPE) NCONC (LOOP FOR X1 = (- (RANDOM (COERCE 2000 TYPE)) 1000) FOR X2 = (- -1 (RANDOM (COERCE 1000 TYPE))) FOR RLIST = (AND (/= X1 ZERO) (MULTIPLE-VALUE-LIST (LOG (COMPLEX X1 X2)))) FOR Y = (CAR RLIST) REPEAT 1000 UNLESS (OR (= X1 ZERO) (AND (NULL (CDR RLIST)) (TYPEP Y (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE)))))) COLLECT (LIST X1 X2 RLIST))) NIL)
;; Loading (DEFTEST LOG.ERROR.1 (SIGNALS-ERROR (LOG) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOG.ERROR.2 (SIGNALS-ERROR (LOG 1.0 2.0 3.0) PROGRAM-ERROR) T)
;; Loading (LOAD "signum.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/signum.lsp C17EFB67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIGNUM.ERROR.1 (SIGNALS-ERROR (SIGNUM) PROGRAM-ERROR) T)
;; Loading (DEFTEST SIGNUM.ERROR.2 (SIGNALS-ERROR (SIGNUM 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST SIGNUM.ERROR.3 (SIGNALS-ERROR (SIGNUM 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SIGNUM.1 (SIGNUM 0) 0)
;; Loading (DEFTEST SIGNUM.2 (SIGNUM 123) 1)
;; Loading (DEFTEST SIGNUM.3 (SIGNUM -123123) -1)
;; Loading (DEFTEST SIGNUM.4 (LOOP FOR I IN *RATIONALS* FOR S = (SIGNUM I) UNLESS (COND ((ZEROP I) (EQL S 0)) ((PLUSP I) (EQL S 1)) (T (EQL S -1))) COLLECT (LIST I S)) NIL)
;; Loading (DEFTEST SIGNUM.5 (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) FOR ONE = (FLOAT 1 X) FOR Y = (FLOAT 13122 X) FOR S1 = (SIGNUM X) FOR S2 = (SIGNUM Y) FOR S3 = (SIGNUM (- Y)) UNLESS (AND (EQL S1 X) (EQL S2 ONE) (EQL S3 (- ONE))) COLLECT (LIST X ONE Y S1 S2 S3)) NIL)
;; Loading (DEFTEST SIGNUM.6 (LOOP FOR TP IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR Z = (COERCE 0 TP) FOR MZ = (- Z) NCONC (LOOP FOR X IN (LIST Z MZ) NCONC (LOOP FOR Y IN (LIST Z MZ) FOR C = (COMPLEX Z MZ) FOR S = (SIGNUM C) UNLESS (EQL C S) COLLECT (LIST C S)))) NIL)
;; Loading (DEFTEST SIGNUM.7 (LOOP FOR TP IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR Z = (COERCE 0 TP) FOR ONE = (COERCE 1 TP) FOR ONEM = (COERCE -1 TP) FOR C1 = (COMPLEX ONE Z) FOR C2 = (COMPLEX ONEM Z) FOR C3 = (COMPLEX Z ONE) FOR C4 = (COMPLEX Z ONEM) UNLESS (EQL C1 (SIGNUM C1)) COLLECT (LIST C1 (SIGNUM C1)) UNLESS (EQL C2 (SIGNUM C2)) COLLECT (LIST C2 (SIGNUM C2)) UNLESS (EQL C3 (SIGNUM C3)) COLLECT (LIST C3 (SIGNUM C3)) UNLESS (EQL C4 (SIGNUM C4)) COLLECT (LIST C4 (SIGNUM C4))) NIL)
;; Loading (DEFTEST SIGNUM.8 (LET* ((C (COMPLEX 0 1)) (S (SIGNUM C))) (OR (EQLT C S) (EQLT S #C(0.0 1.0)))) T)
;; Loading (DEFTEST SIGNUM.9 (LET* ((C (COMPLEX 0 -1)) (S (SIGNUM C))) (OR (EQLT C S) (EQLT S #C(0.0 -1.0)))) T)
;; Loading (DEFTEST SIGNUM.10 (LET* ((C (COMPLEX 3/5 4/5)) (S (SIGNUM C))) (OR (EQLT C S) (EQLT S (COMPLEX (FLOAT 3/5) (FLOAT 4/5))))) T)
;; Loading (DEFTEST SIGNUM.11 (LET ((I 0)) (VALUES (SIGNUM (THE (INTEGER 1 1) (INCF I))) I)) 1 1)
;; Loading (LOAD "sqrt.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/sqrt.lsp C188E007>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST SQRT.ERROR.1 (SIGNALS-ERROR (SQRT) PROGRAM-ERROR) T)
;; Loading (DEFTEST SQRT.ERROR.2 (SIGNALS-ERROR (SQRT 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SQRT.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SQRT) (FUNCTION NUMBERP)) NIL)
;; Loading (DEFTEST SQRT.1 (LET ((S (SQRT 0))) (AND (REALP S) (=T S 0))) T)
;; Loading (DEFTEST SQRT.2 (LET ((S (SQRT 1))) (AND (REALP S) (=T S 1))) T)
;; Loading (DEFTEST SQRT.3 (LOOP FOR X IN (QUOTE (0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0)) FOR S = (SQRT X) UNLESS (EQL S X) COLLECT (LIST X S)) NIL)
;; Loading (DEFTEST SQRT.4 (LOOP FOR X IN (QUOTE (0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0)) FOR C = (COMPLEX X 0) FOR S = (SQRT C) UNLESS (EQL S C) COLLECT (LIST X C S)) NIL)
;; Loading (DEFTEST SQRT.5 (LOOP FOR X IN (QUOTE (-1.0 -1.0 -1.0 -1.0)) FOR S = (SQRT X) UNLESS (EQL S (COMPLEX 0 (- X))) COLLECT (LIST X S)) NIL)
;; Loading (DEFTEST SQRT.7 (LET ((RESULT (SQRT -1))) (OR (EQLT RESULT #C(0 1)) (EQLT RESULT #C(0.0 1.0)))) T)
;; Loading (DEFTEST SQRT.8 (LOOP FOR X IN *FLOATS* FOR S = (SQRT X) UNLESS (COND ((ZEROP X) (=T X 0)) ((PLUSP X) (AND (EQLT (FLOAT S X) S) (EQLT (FLOAT X S) X))) (T (COMPLEXP S))) COLLECT (LIST X S)) NIL)
;; Loading (DEFTEST SQRT.9 (LET ((UPPER (RATIONAL MOST-POSITIVE-DOUBLE-FLOAT)) (LOWER (RATIONAL MOST-NEGATIVE-DOUBLE-FLOAT))) (LOOP FOR X = (RANDOM-FIXNUM) REPEAT 1000 UNLESS (OR (< X LOWER) (> X UPPER) (LET ((S (SQRT X))) (OR (AND (RATIONALP S) (>= S 0) (EQL (* S S) X)) (AND (FLOATP S) (>= X 0)) (AND (COMPLEXP S) (ZEROP (REALPART S)) (> (IMAGPART S) 0) (< X 0))))) COLLECT (LIST X (SQRT X)))) NIL)
;; Loading (DEFTEST SQRT.10 (LOOP FOR X FROM 1 TO 1000 FOR X2 = (* X X) FOR S = (SQRT X2) UNLESS (IF (RATIONALP S) (EQL X S) (AND (TYPEP S (QUOTE SINGLE-FLOAT)) (= X S))) COLLECT (LIST X S)) NIL)
;; Loading (DEFTEST SQRT.11 (LOOP FOR X FROM 1 TO 1000 FOR X2 = (* X X) FOR S = (SQRT (- X2)) UNLESS (AND (COMPLEXP S) (ZEROP (REALPART S)) (LET ((I (IMAGPART S))) (IF (RATIONALP I) (EQL I X) (= I X)))) COLLECT (LIST X S)) NIL)
;; Loading (DEFTEST SQRT.12 (LOOP FOR XR = (RANDOM-FIXNUM) FOR XI = (RANDOM-FIXNUM) FOR C = (COMPLEX XR XI) FOR S = (SQRT C) REPEAT 1000 UNLESS (OR (> (REALPART S) 0) (AND (= (REALPART S) 0) (>= (IMAGPART S) 0))) COLLECT (LIST C S)) NIL)
;; Loading (DEFTEST SQRT.13 (LOOP FOR XR = (RANDOM-FROM-INTERVAL 1000000.0 -1000000.0) FOR XI = (RANDOM-FROM-INTERVAL 1000000.0 -1000000.0) FOR C = (COMPLEX XR XI) FOR S = (SQRT C) REPEAT 1000 UNLESS (OR (> (REALPART S) 0) (AND (= (REALPART S) 0) (>= (IMAGPART S) 0))) COLLECT (LIST C S)) NIL)
;; Loading (DEFTEST SQRT.14 (LOOP FOR XR = (RANDOM-FROM-INTERVAL 1000.0 -1000.0) FOR XI = (RANDOM-FROM-INTERVAL 1000.0 -1000.0) FOR C = (COMPLEX XR XI) FOR S = (SQRT C) REPEAT 1000 UNLESS (OR (> (REALPART S) 0) (AND (= (REALPART S) 0) (>= (IMAGPART S) 0))) COLLECT (LIST C S)) NIL)
;; Loading (DEFTEST SQRT.15 (LOOP FOR XR = (RANDOM-FROM-INTERVAL 10000000.0 -10000000.0) FOR XI = (RANDOM-FROM-INTERVAL 10000000.0 -10000000.0) FOR C = (COMPLEX XR XI) FOR S = (SQRT C) REPEAT 1000 UNLESS (OR (> (REALPART S) 0) (AND (= (REALPART S) 0) (>= (IMAGPART S) 0))) COLLECT (LIST C S)) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SQRT.16 (LOOP FOR XR = (RANDOM-FROM-INTERVAL 1000000000.0 -1000000000.0) FOR XI = (RANDOM-FROM-INTERVAL 1000000000.0 -1000000000.0) FOR C = (COMPLEX XR XI) FOR S = (SQRT C) REPEAT 1000 UNLESS (OR (> (REALPART S) 0) (AND (= (REALPART S) 0) (>= (IMAGPART S) 0))) COLLECT (LIST C S)) NIL)
;; Loading (DEFTEST SQRT.17 (LET ((B1 (FIND-LARGEST-EXACTLY-FLOATABLE-INTEGER MOST-POSITIVE-FIXNUM))) (LOOP FOR I = (RANDOM-FROM-INTERVAL (* B1 B1) 0) REPEAT 1000 UNLESS (>= (SQRT I) (ISQRT I)) COLLECT I)) NIL)
;; Loading (DEFTEST SQRT.18 (LOOP FOR X = (RANDOM-FROM-INTERVAL 1000000.0 0.0) REPEAT 1000 UNLESS (>= (SQRT X) (ISQRT (FLOOR X))) COLLECT X) NIL)
;; Loading (DEFTEST SQRT.19 (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) FOR S = (SQRT X) UNLESS (= S X) COLLECT (LIST X S)) NIL)
;; Loading (LOAD "isqrt.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/isqrt.lsp 81256087>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST ISQRT.ERROR.1 (SIGNALS-ERROR (ISQRT) PROGRAM-ERROR) T)
;; Loading (DEFTEST ISQRT.ERROR.2 (SIGNALS-ERROR (ISQRT 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ISQRT.ERROR.3 (SIGNALS-ERROR (ISQRT 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ISQRT.ERROR.4 (SIGNALS-ERROR (ISQRT 0 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST ISQRT.ERROR.5 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (AND (INTEGERP X) (>= X 0)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-TYPE-ERROR X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) (ISQRT X))))) COLLECT X) NIL)
;; Loading (DEFTEST ISQRT.1 (LOOP FOR I FROM 0 TO 10000 FOR I2 = (* I I) FOR S = (ISQRT I2) UNLESS (EQL S I) COLLECT I) NIL)
;; Loading (DEFTEST ISQRT.2 (LOOP FOR I = (RANDOM-FROM-INTERVAL MOST-POSITIVE-FIXNUM 0) FOR S = (ISQRT I) REPEAT 1000 UNLESS (AND (INTEGERP S) (>= S 0) (<= (* S S) I) (> (* (1+ S) (1+ S)) I)) COLLECT (LIST I S)) NIL)
;; Loading (DEFTEST ISQRT.3 (LOOP FOR I = (RANDOM-FROM-INTERVAL 1000000000000000 0) FOR S = (ISQRT I) REPEAT 1000 UNLESS (AND (INTEGERP S) (>= S 0) (<= (* S S) I) (> (* (1+ S) (1+ S)) I)) COLLECT (LIST I S)) NIL)
;; Loading (LOAD "random.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/random.lsp 812F3FF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (COMPILE-AND-LOAD "random-aux.lsp")
;; Loading (DEFTEST RANDOM.ERROR.1 (SIGNALS-ERROR (RANDOM) PROGRAM-ERROR) T)
;; Loading (DEFTEST RANDOM.ERROR.2 (SIGNALS-ERROR (RANDOM 10 *RANDOM-STATE* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RANDOM.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION RANDOM) (TYPEF (QUOTE (REAL (0))))) NIL)
;; Loading (DEFTEST RANDOM.1 (LOOP FOR I FROM 2 TO 30 FOR N = (ASH 1 I) NCONC (LOOP FOR J = (1+ (RANDOM N)) REPEAT 20 NCONC (LOOP FOR R = (RANDOM J) REPEAT I UNLESS (AND (INTEGERP R) (<= 0 R) (< R J)) COLLECT (LIST J R)))) NIL)
;; Loading (DEFTEST RANDOM.2 (LOOP FOR I FROM 2 TO 20 FOR N = (ASH 1 I) NCONC (LOOP FOR J = (RANDOM (FLOAT N)) REPEAT 20 UNLESS (ZEROP J) NCONC (LOOP FOR R = (RANDOM J) REPEAT 20 UNLESS (AND (EQL (FLOAT R J) R) (<= 0 R) (< R J)) COLLECT (LIST J R)))) NIL)
;; Loading (DEFTEST RANDOM.3 (BINOMIAL-DISTRIBUTION-TEST 10000 (FUNCTION (LAMBDA NIL (EQL (RANDOM 2) 0)))) T)
;; Loading (DEFTEST RANDOM.4 (BINOMIAL-DISTRIBUTION-TEST 10000 (FUNCTION (LAMBDA NIL (< (RANDOM 1.0) 0.5)))) T)
;; Loading (DEFTEST RANDOM.5 (BINOMIAL-DISTRIBUTION-TEST 10000 (FUNCTION (LAMBDA NIL (< (RANDOM 1.0) 0.5)))) T)
;; Loading (DEFTEST RANDOM.6 (BINOMIAL-DISTRIBUTION-TEST 10000 (FUNCTION (LAMBDA NIL (EVENP (RANDOM 1024))))) T)
;; Loading (DEFTEST RANDOM.7 (LOOP FOR X IN (QUOTE (10.0 20.0 30.0 40.0)) FOR R = (RANDOM X) UNLESS (EQL (FLOAT R X) R) COLLECT (LIST X R)) NIL)
;; Loading (DEFTEST RANDOM.8 (LET* ((F1 (QUOTE (LAMBDA (X) (RANDOM (IF X 10 20))))) (F2 (COMPILE NIL F1))) (VALUES (LOOP REPEAT 100 ALWAYS (<= 0 (FUNCALL F2 T) 9)) (LOOP REPEAT 100 ALWAYS (<= 0 (FUNCALL F2 NIL) 19)))) T T)
;; Loading (LOAD "random-state-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/random-state-p.lsp 8139F697>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RANDOM-STATE-P.ERROR.1 (SIGNALS-ERROR (RANDOM-STATE-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST RANDOM-STATE-P.ERROR.2 (SIGNALS-ERROR (RANDOM-STATE-P NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RANDOM-STATE-P.1 (CHECK-TYPE-PREDICATE (FUNCTION RANDOM-STATE-P) (QUOTE RANDOM-STATE)) NIL)
;; Loading (DEFTEST RANDOM-STATE-P.2 (NOTNOT-MV (RANDOM-STATE-P *RANDOM-STATE*)) T)
;; Loading (DEFTEST RANDOM-STATE-P.3 (NOTNOT-MV (RANDOM-STATE-P (MAKE-RANDOM-STATE))) T)
;; Loading (LOAD "make-random-state.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-random-state.lsp 813D3F77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-RANDOM-STATE.ERROR.1 (SIGNALS-ERROR (MAKE-RANDOM-STATE NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-RANDOM-STATE.ERROR.2 (SIGNALS-ERROR (MAKE-RANDOM-STATE T NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-RANDOM-STATE.ERROR.3 (SIGNALS-ERROR (MAKE-RANDOM-STATE *RANDOM-STATE* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-RANDOM-STATE.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION MAKE-RANDOM-STATE) (TYPEF (QUOTE (OR (MEMBER NIL T) RANDOM-STATE)))) NIL)
;; Loading (DEFTEST MAKE-RANDOM-STATE.1 (LET ((RS (MAKE-RANDOM-STATE))) (AND (NOT (EQ RS *RANDOM-STATE*)) (RANDOM-STATE-P RS) (EQLT (RANDOM 1000000) (RANDOM 1000000 RS)))) T)
;; Loading (DEFTEST MAKE-RANDOM-STATE.2 (LET ((RS (MAKE-RANDOM-STATE *RANDOM-STATE*))) (AND (NOT (EQ RS *RANDOM-STATE*)) (RANDOM-STATE-P RS) (EQLT (RANDOM 1000000) (RANDOM 1000000 RS)))) T)
;; Loading (DEFTEST MAKE-RANDOM-STATE.3 (LET ((RS (MAKE-RANDOM-STATE))) (RANDOM 10) (LET ((RS2 (MAKE-RANDOM-STATE RS))) (AND (NOT (EQ RS *RANDOM-STATE*)) (NOT (EQ RS RS2)) (NOT (EQ RS2 *RANDOM-STATE*)) (RANDOM-STATE-P RS) (RANDOM-STATE-P RS2) (EQLT (RANDOM 1.0 RS) (RANDOM 1.0 RS2))))) T)
;; Loading (DEFTEST MAKE-RANDOM-STATE.4 (LET ((RS (MAKE-RANDOM-STATE T)) (RS2 (MAKE-RANDOM-STATE T))) (AND (RANDOM-STATE-P RS) (NOT (EQ RS *RANDOM-STATE*)) (RANDOM-STATE-P RS2) (NOT (EQ RS2 *RANDOM-STATE*)) (NOT (EQ RS RS2)) (INTEGERP (RANDOM 10 RS)) (FLOATP (RANDOM 1.0 RS2)) T)) T)
;; Loading (LOAD "numberp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/numberp.lsp 81440877>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NUMBERP.ERROR.1 (SIGNALS-ERROR (NUMBERP) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUMBERP.ERROR.2 (SIGNALS-ERROR (NUMBERP 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUMBERP.ERROR.3 (SIGNALS-ERROR (NUMBERP (QUOTE A) NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUMBERP.1 (CHECK-TYPE-PREDICATE (FUNCTION NUMBERP) (QUOTE NUMBER)) NIL)
;; Loading (LOAD "cis.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/cis.lsp 8146D7D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST CIS.ERROR.1 (SIGNALS-ERROR (CIS) PROGRAM-ERROR) T)
;; Loading (DEFTEST CIS.ERROR.2 (SIGNALS-ERROR (CIS 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CIS.1 (LET ((RESULT (CIS 0))) (OR (=T RESULT 1) (EQLT #C(1.0 0.0)))) T)
;; Loading (DEFTEST CIS.2 (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) FOR VALS = (MULTIPLE-VALUE-LIST (CIS X)) FOR C = (CAR VALS) UNLESS (AND (= (LENGTH VALS) 1) (EQL C (COMPLEX (FLOAT 1 X) X))) COLLECT (CONS X VALS)) NIL)
;; Loading (DEFTEST CIS.3 (LOOP FOR X = (RANDOM (* 2 PI)) FOR C = (CIS X) REPEAT 1000 UNLESS (AND (COMPLEXP C) (APPROX= (IMAGPART C) (SIN X)) (APPROX= (REALPART C) (COS X))) COLLECT (LIST X C (COS X) (SIN X))) NIL)
;; Loading (DEFTEST CIS.4 (LOOP FOR X = (RANDOM (COERCE (* 2 PI) (QUOTE SINGLE-FLOAT))) FOR C = (CIS X) REPEAT 1000 UNLESS (AND (COMPLEXP C) (APPROX= (IMAGPART C) (SIN X)) (APPROX= (REALPART C) (COS X))) COLLECT (LIST X C (COS X) (SIN X))) NIL)
;; Loading (LOAD "complex.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/complex.lsp 814D6967>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COMPLEX.ERROR.1 (SIGNALS-ERROR (COMPLEX) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEX.ERROR.2 (SIGNALS-ERROR (COMPLEX 1 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEX.1 (LOOP FOR X IN *RATIONALS* FOR C = (COMPLEX X) ALWAYS (EQL C X)) T)
;; Loading (DEFTEST COMPLEX.2 (LOOP FOR X IN *FLOATS* FOR C = (COMPLEX X) ALWAYS (AND (COMPLEXP C) (EQL X (REALPART C)) (EQL (FLOAT 0 X) (IMAGPART C)))) T)
;; Loading (DEFTEST COMPLEX.3 (LOOP FOR X IN *RATIONALS* FOR C = (COMPLEX 0 X) UNLESS (OR (ZEROP X) (AND (COMPLEXP C) (EQL (REALPART C) 0) (EQL (IMAGPART C) X))) COLLECT (LIST C X)) NIL)
;; Loading (DEFTEST COMPLEX.4 (LOOP FOR X IN *FLOATS* FOR C = (COMPLEX 0 X) ALWAYS (AND (COMPLEXP C) (EQL (FLOAT 0 X) (REALPART C)) (EQL X (IMAGPART C)))) T)
;; Loading (DEFTEST COMPLEX.5 (LOOP FOR C IN *COMPLEXES* UNLESS (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) ALWAYS (IF (TYPEP (REALPART C) TYPE) (TYPEP (IMAGPART C) TYPE) (NOT (TYPEP (IMAGPART C) TYPE)))) COLLECT C) NIL)
;; Loading (LOAD "complexp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/complexp.lsp 81534FF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COMPLEXP.ERROR.1 (SIGNALS-ERROR (COMPLEXP) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEXP.ERROR.2 (SIGNALS-ERROR (COMPLEXP 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEXP.ERROR.3 (SIGNALS-ERROR (COMPLEXP #C(1 1) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COMPLEXP.1 (CHECK-TYPE-PREDICATE (FUNCTION COMPLEXP) (QUOTE COMPLEX)) NIL)
;; Loading (LOAD "conjugate.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/conjugate.lsp 81562AC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CONJUGATE.ERROR.1 (SIGNALS-ERROR (CONJUGATE) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONJUGATE.ERROR.2 (SIGNALS-ERROR (CONJUGATE 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONJUGATE.1 (LOOP FOR X IN *REALS* FOR VALS = (MULTIPLE-VALUE-LIST (CONJUGATE X)) FOR XC = (CAR VALS) ALWAYS (AND (= (LENGTH VALS) 1) (EQL X XC))) T)
;; Loading (DEFTEST CONJUGATE.2 (LOOP FOR X IN *COMPLEXES* FOR VALS = (MULTIPLE-VALUE-LIST (CONJUGATE X)) FOR XC = (CAR VALS) ALWAYS (AND (= (LENGTH VALS) 1) (EQL (REALPART X) (REALPART XC)) (EQL (- (IMAGPART X)) (IMAGPART XC)))) T)
;; Loading (DEFTEST CONJUGATE.3 (EQLT (CONJUGATE #C(0.0 0.0)) #C(0.0 0.0)) T)
;; Loading (DEFTEST CONJUGATE.4 (EQLT (CONJUGATE #C(1.0 0.0)) #C(1.0 0.0)) T)
;; Loading (DEFTEST CONJUGATE.5 (EQLT (CONJUGATE #C(0.0 0.0)) #C(0.0 0.0)) T)
;; Loading (DEFTEST CONJUGATE.6 (EQLT (CONJUGATE #C(1.0 0.0)) #C(1.0 0.0)) T)
;; Loading (DEFTEST CONJUGATE.7 (EQLT (CONJUGATE #C(0.0 0.0)) #C(0.0 0.0)) T)
;; Loading (DEFTEST CONJUGATE.8 (EQLT (CONJUGATE #C(1.0 0.0)) #C(1.0 0.0)) T)
;; Loading (DEFTEST CONJUGATE.9 (EQLT (CONJUGATE #C(0.0 0.0)) #C(0.0 0.0)) T)
;; Loading (DEFTEST CONJUGATE.10 (EQLT (CONJUGATE #C(1.0 0.0)) #C(1.0 0.0)) T)
;; Loading (LOAD "phase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/phase.lsp 815C8857>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PHASE.ERROR.1 (SIGNALS-ERROR (PHASE) PROGRAM-ERROR) T)
;; Loading (DEFTEST PHASE.ERROR.2 (SIGNALS-ERROR (PHASE 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST PHASE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION PHASE) (FUNCTION NUMBERP)) NIL)
;; Loading (DEFTEST PHASE.1 (EQLT (PHASE 0) 0.0) T)
;; Loading (DEFTEST PHASE.2 (EQLT (PHASE 1) 0.0) T)
;; Loading (DEFTEST PHASE.3 (EQLT (PHASE 1/2) 0.0) T)
;; Loading (DEFTEST PHASE.4 (EQLT (PHASE 100.0) 0.0) T)
;; Loading (DEFTEST PHASE.5 (EQLT (PHASE 100.0) 0.0) T)
;; Loading (DEFTEST PHASE.6 (EQLT (PHASE 100.0) 0.0) T)
;; Loading (DEFTEST PHASE.7 (EQLT (PHASE 100.0) 0.0) T)
;; Loading (DEFTEST PHASE.8 (EQLT (PHASE -1) (COERCE PI (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST PHASE.9 (EQLT (PHASE 1/2) (COERCE PI (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST PHASE.10 (LET ((P1 (PHASE #C(0 1))) (P2 (PHASE #C(0.0 1.0)))) (AND (EQL P1 P2) (APPROX= P1 (COERCE (/ PI 2) (QUOTE SINGLE-FLOAT))))) T)
;; Loading (DEFTEST PHASE.11 (LET ((P (PHASE #C(0.0 1.0)))) (APPROX= P (COERCE (/ PI 2) (QUOTE DOUBLE-FLOAT)))) T)
;; Loading (DEFTEST PHASE.12 (LET ((P (PHASE #C(0.0 1.0)))) (APPROX= P (COERCE (/ PI 2) (QUOTE SINGLE-FLOAT)))) T)
;; Loading (DEFTEST PHASE.13 (LET ((P (PHASE #C(0.0 1.0)))) (APPROX= P (/ PI 2))) T)
;; Loading (DEFTEST PHASE.14 (LET ((P1 (PHASE #C(1 1))) (P2 (PHASE #C(1.0 1.0)))) (AND (EQL P1 P2) (APPROX= P1 (COERCE (/ PI 4) (QUOTE SINGLE-FLOAT)) (* 2 SINGLE-FLOAT-EPSILON)))) T)
;; Loading (DEFTEST PHASE.15 (LET ((P (PHASE #C(1.0 1.0)))) (APPROX= P (COERCE (/ PI 4) (QUOTE DOUBLE-FLOAT)) (* 2 DOUBLE-FLOAT-EPSILON))) T)
;; Loading (DEFTEST PHASE.16 (LET ((P (PHASE #C(1.0 1.0)))) (APPROX= P (COERCE (/ PI 4) (QUOTE SINGLE-FLOAT)) (* 2 SHORT-FLOAT-EPSILON))) T)
;; Loading (DEFTEST PHASE.17 (LET ((P (PHASE #C(1.0 1.0)))) (APPROX= P (/ PI 4) (* 2 LONG-FLOAT-EPSILON))) T)
;; Loading (DEFTEST PHASE.18 (OR (EQLT 0.0 0.0) (APPROX= (PHASE #C(-1.0 0.0)) (COERCE (- PI) (QUOTE SHORT-FLOAT)))) T)
;; Loading (DEFTEST PHASE.19 (OR (EQLT 0.0 0.0) (APPROX= (PHASE #C(-1.0 0.0)) (COERCE (- PI) (QUOTE SINGLE-FLOAT)))) T)
;; Loading (DEFTEST PHASE.20 (OR (EQLT 0.0 0.0) (APPROX= (PHASE #C(-1.0 0.0)) (COERCE (- PI) (QUOTE DOUBLE-FLOAT)))) T)
;; Loading (DEFTEST PHASE.21 (OR (EQLT 0.0 0.0) (APPROX= (PHASE #C(-1.0 0.0)) (COERCE (- PI) (QUOTE LONG-FLOAT)))) T)
;; Loading (LOAD "realpart.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/realpart.lsp 8166E747>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REALPART.ERROR.1 (SIGNALS-ERROR (REALPART) PROGRAM-ERROR) T)
;; Loading (DEFTEST REALPART.ERROR.2 (SIGNALS-ERROR (REALPART #C(1.0 2.0) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REALPART.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION REALPART) (FUNCTION NUMBERP)) NIL)
;; Loading (DEFTEST REALPART.1 (LOOP FOR X IN *REALS* FOR C = (COMPLEX X 0) FOR RP = (REALPART C) UNLESS (EQL X RP) COLLECT (LIST X C RP)) NIL)
;; Loading (DEFTEST REALPART.2 (LOOP FOR X IN *REALS* FOR C = (COMPLEX X 1) FOR RP = (REALPART C) UNLESS (EQL X RP) COLLECT (LIST X C RP)) NIL)
;; Loading (DEFTEST REALPART.3 (LOOP FOR X IN *REALS* FOR C = (COMPLEX X X) FOR RP = (REALPART C) UNLESS (EQL X RP) COLLECT (LIST X C RP)) NIL)
;; Loading (DEFTEST REALPART.4 (LOOP FOR C IN *COMPLEXES* FOR RP = (REALPART C) FOR IP = (IMAGPART C) FOR C2 = (COMPLEX RP IP) UNLESS (EQL C C2) COLLECT (LIST C RP IP C2)) NIL)
;; Loading (LOAD "imagpart.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/imagpart.lsp 816BFC07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST IMAGPART.ERROR.1 (SIGNALS-ERROR (IMAGPART) PROGRAM-ERROR) T)
;; Loading (DEFTEST IMAGPART.ERROR.2 (SIGNALS-ERROR (IMAGPART #C(1.0 2.0) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST IMAGPART.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION IMAGPART) (FUNCTION NUMBERP)) NIL)
;; Loading (DEFTEST IMAGPART.1 (LOOP FOR X IN *REALS* FOR C = (COMPLEX 0 X) FOR IP = (IMAGPART C) UNLESS (EQL X IP) COLLECT (LIST X C IP)) NIL)
;; Loading (DEFTEST IMAGPART.2 (LOOP FOR X IN *REALS* FOR C = (COMPLEX 1 X) FOR IP = (IMAGPART C) UNLESS (EQL X IP) COLLECT (LIST X C IP)) NIL)
;; Loading (DEFTEST IMAGPART.3 (LOOP FOR X IN *REALS* FOR C = (COMPLEX X X) FOR IP = (IMAGPART C) UNLESS (EQL X IP) COLLECT (LIST X C IP)) NIL)
;; Loading (DEFTEST IMAGPART.4 (LOOP FOR X IN *REALS* FOR IP = (IMAGPART X) UNLESS (EQL (* 0 X) IP) COLLECT (LIST X IP (* 0 X))) NIL)
;; Loading (LOAD "realp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/realp.lsp 8170D567>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REALP.ERROR.1 (SIGNALS-ERROR (REALP) PROGRAM-ERROR) T)
;; Loading (DEFTEST REALP.ERROR.2 (SIGNALS-ERROR (REALP 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REALP.ERROR.3 (SIGNALS-ERROR (REALP NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REALP.1 (NOTNOT-MV (REALP 0)) T)
;; Loading (DEFTEST REALP.2 (NOTNOT-MV (REALP 0.0)) T)
;; Loading (DEFTEST REALP.3 (REALP #C(1 2)) NIL)
;; Loading (DEFTEST REALP.4 (NOTNOT-MV (REALP 17/13)) T)
;; Loading (DEFTEST REALP.5 (REALP (QUOTE A)) NIL)
;; Loading (DEFTEST REALP.6 (CHECK-TYPE-PREDICATE (FUNCTION REALP) (QUOTE REAL)) NIL)
;; Loading (LOAD "numerator-denominator.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/numerator-denominator.lsp 8174A547>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST NUMERATOR.ERROR.1 (SIGNALS-ERROR (NUMERATOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUMERATOR.ERROR.2 (SIGNALS-ERROR (NUMERATOR 1/2 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DENOMINATOR.ERROR.1 (SIGNALS-ERROR (DENOMINATOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST DENOMINATOR.ERROR.2 (SIGNALS-ERROR (DENOMINATOR 1/2 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NUMERATOR-DENOMINATOR.1 (LOOP FOR N = (ABS (RANDOM-FIXNUM)) FOR D = (1+ (ABS (RANDOM-FIXNUM))) FOR G = (GCD N D) FOR N1 = (/ N G) FOR D1 = (/ D G) FOR R = (/ N D) FOR N2 = (NUMERATOR R) FOR D2 = (DENOMINATOR R) REPEAT 1000 UNLESS (AND (EQL (GCD N1 D1) 1) (>= N1 0) (>= D1 1) (EQL N1 N2) (EQL D1 D2)) COLLECT (LIST N1 D1 R N2 D2)) NIL)
;; Loading (DEFTEST NUMERATOR-DENOMINATOR.2 (LET ((BOUND (EXPT 10 20))) (LOOP FOR N = (RANDOM-FROM-INTERVAL BOUND 0) FOR D = (RANDOM-FROM-INTERVAL BOUND 1) FOR G = (GCD N D) FOR N1 = (/ N G) FOR D1 = (/ D G) FOR R = (/ N D) FOR N2 = (NUMERATOR R) FOR D2 = (DENOMINATOR R) REPEAT 1000 UNLESS (AND (EQL (GCD N1 D1) 1) (>= N1 0) (>= D1 1) (EQL N1 N2) (EQL D1 D2)) COLLECT (LIST N1 D1 R N2 D2))) NIL)
;; Loading (DEFTEST NUMERATOR-DENOMINATOR.3 (LOOP FOR N = (ABS (RANDOM-FIXNUM)) FOR D = (1+ (ABS (RANDOM-FIXNUM))) FOR G = (GCD N D) FOR N1 = (/ N G) FOR D1 = (/ D G) FOR R = (/ N (- D)) FOR N2 = (NUMERATOR R) FOR D2 = (DENOMINATOR R) REPEAT 1000 UNLESS (AND (EQL (GCD N1 D1) 1) (>= N1 0) (>= D1 1) (EQL N1 (- N2)) (EQL D1 D2)) COLLECT (LIST N1 D1 R N2 D2)) NIL)
;; Loading (DEFTEST NUMERATOR-DENOMINATOR.4 (LET ((BOUND (EXPT 10 20))) (LOOP FOR N = (RANDOM-FROM-INTERVAL BOUND 0) FOR D = (RANDOM-FROM-INTERVAL BOUND 1) FOR G = (GCD N D) FOR N1 = (/ N G) FOR D1 = (/ D G) FOR R = (/ N (- D)) FOR N2 = (NUMERATOR R) FOR D2 = (DENOMINATOR R) REPEAT 1000 UNLESS (AND (EQL (GCD N1 D1) 1) (>= N1 0) (>= D1 1) (EQL N1 (- N2)) (EQL D1 D2)) COLLECT (LIST N1 D1 R N2 D2))) NIL)
;; Loading (DEFTEST NUMERATOR-DENOMINATOR.5 (LOOP FOR R IN *RATIONALS* FOR N = (NUMERATOR R) FOR D = (DENOMINATOR R) UNLESS (AND (INTEGERP N) (INTEGERP D) (EQL (GCD N D) 1) (>= D 1) (EQL (/ N D) R)) COLLECT (LIST R N D)) NIL)
;; Loading (LOAD "rationalp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rationalp.lsp 81806557>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RATIONALP.ERROR.1 (SIGNALS-ERROR (RATIONALP) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONALP.ERROR.2 (SIGNALS-ERROR (RATIONALP 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONALP.ERROR.3 (SIGNALS-ERROR (RATIONALP (QUOTE A) 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONALP.1 (LOOP FOR X IN *RATIONALS* FOR VALS = (MULTIPLE-VALUE-LIST (RATIONALP X)) UNLESS (AND (= (LENGTH VALS) 1) (FIRST VALS)) COLLECT (CONS X VALS)) NIL)
;; Loading (DEFTEST RATIONALP.2 (LOOP FOR X IN (SET-DIFFERENCE *UNIVERSE* *RATIONALS*) FOR VALS = (MULTIPLE-VALUE-LIST (RATIONALP X)) UNLESS (AND (= (LENGTH VALS) 1) (NULL (FIRST VALS))) COLLECT (CONS X VALS)) NIL)
;; Loading (DEFTEST RATIONALP.3 (CHECK-TYPE-PREDICATE (FUNCTION RATIONALP) (QUOTE RATIONAL)) NIL)
;; Loading (LOAD "ash.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ash.lsp 8184BA07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ASH.ERROR.1 (SIGNALS-ERROR (ASH) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASH.ERROR.2 (SIGNALS-ERROR (ASH 1 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASH.ERROR.3 (SIGNALS-ERROR (ASH 1 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ASH.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (ASH X 0))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST ASH.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (ASH 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST ASH.1 (LOOP FOR X IN *INTEGERS* ALWAYS (EQL (ASH X 0) X)) T)
;; Loading (DEFTEST ASH.2 (LOOP FOR I = (RANDOM-FIXNUM) FOR S = (RANDOM-FROM-INTERVAL 40) FOR ISHIFTED = (ASH I S) REPEAT 1000 ALWAYS (EQL (FLOOR (* I (EXPT 2 S))) ISHIFTED)) T)
;; Loading (DEFTEST ASH.3 (LET* ((NBITS 100) (BOUND (EXPT 2 NBITS))) (LOOP FOR I = (RANDOM-FROM-INTERVAL BOUND) FOR S = (RANDOM-FROM-INTERVAL (+ NBITS 20)) FOR ISHIFTED = (ASH I S) REPEAT 1000 ALWAYS (EQL (FLOOR (* I (EXPT 2 S))) ISHIFTED))) T)
;; Loading (DEFTEST ASH.4 (LOOP FOR I FROM -1 DOWNTO -1000 ALWAYS (EQL (ASH I I) -1)) T)
;; Loading (DEFTEST ASH.5 (LOOP FOR I FROM 1 TO 100 FOR J = (- (ASH 1 I)) ALWAYS (EQL (ASH J J) -1)) T)
;; Loading (DEFTEST ASH.6 (MACROLET ((%M (Z) Z)) (VALUES (ASH (EXPAND-IN-CURRENT-ENV (%M 3)) 1) (ASH 1 (EXPAND-IN-CURRENT-ENV (%M 3))))) 6 8)
;; Loading (DEFTEST ASH.ORDER.1 (LET ((I 0) X Y) (VALUES (ASH (PROGN (SETF X (INCF I)) 1) (PROGN (SETF Y (INCF I)) 2)) I X Y)) 4 2 1 2)
;; Loading (LOAD "integer-length.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/integer-length.lsp 818BDBC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST INTEGER-LENGTH.ERROR.1 (SIGNALS-ERROR (INTEGER-LENGTH) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTEGER-LENGTH.ERROR.2 (SIGNALS-ERROR (INTEGER-LENGTH 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTEGER-LENGTH.ERROR.3 (SIGNALS-ERROR (INTEGER-LENGTH 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTEGER-LENGTH.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION INTEGER-LENGTH) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST INTEGER-LENGTH.1 (LOOP FOR LEN FROM 0 TO 100 FOR I = (1- (ASH 1 LEN)) FOR VALS = (MULTIPLE-VALUE-LIST (INTEGER-LENGTH I)) FOR LEN2 = (CAR VALS) ALWAYS (AND (= (LENGTH VALS) 1) (EQL LEN LEN2))) T)
;; Loading (DEFTEST INTEGER-LENGTH.2 (LOOP FOR LEN FROM 0 TO 100 FOR I = (ASH 1 LEN) FOR VALS = (MULTIPLE-VALUE-LIST (INTEGER-LENGTH I)) FOR LEN2 = (CAR VALS) ALWAYS (AND (= (LENGTH VALS) 1) (EQL (1+ LEN) LEN2))) T)
;; Loading (DEFTEST INTEGER-LENGTH.3 (LOOP FOR LEN FROM 0 TO 100 FOR I = (- (ASH 1 LEN)) FOR VALS = (MULTIPLE-VALUE-LIST (INTEGER-LENGTH I)) FOR LEN2 = (CAR VALS) ALWAYS (AND (= (LENGTH VALS) 1) (EQL LEN LEN2))) T)
;; Loading (DEFTEST INTEGER-LENGTH.4 (LOOP FOR LEN FROM 0 TO 100 FOR I = (- -1 (ASH 1 LEN)) FOR VALS = (MULTIPLE-VALUE-LIST (INTEGER-LENGTH I)) FOR LEN2 = (CAR VALS) ALWAYS (AND (= (LENGTH VALS) 1) (EQL (1+ LEN) LEN2))) T)
;; Loading (LOAD "integerp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/integerp.lsp 81924877>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST INTEGERP.ERROR.1 (SIGNALS-ERROR (INTEGERP) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTEGERP.ERROR.2 (SIGNALS-ERROR (INTEGERP 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTEGERP.ERROR.3 (SIGNALS-ERROR (INTEGERP NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTEGERP.1 (LOOP FOR I IN *INTEGERS* FOR VALS = (MULTIPLE-VALUE-LIST (INTEGERP I)) UNLESS (AND (= (LENGTH VALS) 1) (FIRST VALS)) COLLECT (CONS I VALS)) NIL)
;; Loading (DEFTEST INTEGERP.2 (CHECK-TYPE-PREDICATE (FUNCTION INTEGERP) (QUOTE INTEGER)) NIL)
;; Loading (LOAD "parse-integer.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/parse-integer.lsp 8195D2C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.1 (SIGNALS-ERROR (PARSE-INTEGER) PROGRAM-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.2 (SIGNALS-ERROR (PARSE-INTEGER "123" :BOGUS) PROGRAM-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.3 (SIGNALS-ERROR (PARSE-INTEGER "123" :BOGUS (QUOTE FOO)) PROGRAM-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.4 (SIGNALS-ERROR (PARSE-INTEGER "") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.5 (LOOP FOR X ACROSS +STANDARD-CHARS+ UNLESS (OR (DIGIT-CHAR-P X) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (PARSE-INTEGER (SYSTEM.INTERNALS::BQ-COMMA (STRING X))) PARSE-ERROR)))) COLLECT X) NIL)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.5A (SIGNALS-ERROR (PARSE-INTEGER "") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.6 (SIGNALS-ERROR (PARSE-INTEGER "1234a") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.7 (SIGNALS-ERROR (PARSE-INTEGER "-") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.8 (SIGNALS-ERROR (PARSE-INTEGER "+") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.9 (SIGNALS-ERROR (PARSE-INTEGER "--10") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.10 (SIGNALS-ERROR (PARSE-INTEGER "++10") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.11 (SIGNALS-ERROR (PARSE-INTEGER "10.") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.12 (SIGNALS-ERROR (PARSE-INTEGER "#O123") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.13 (SIGNALS-ERROR (PARSE-INTEGER "#B0100") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.ERROR.14 (SIGNALS-ERROR (PARSE-INTEGER "#X0100") PARSE-ERROR) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PARSE-INTEGER.ERROR.15 (SIGNALS-ERROR (PARSE-INTEGER "#3R0100") PARSE-ERROR) T)
;; Loading (DEFTEST PARSE-INTEGER.1 (PARSE-INTEGER "123") 123 3)
;; Loading (DEFTEST PARSE-INTEGER.2 (PARSE-INTEGER " 123") 123 4)
;; Loading (DEFTEST PARSE-INTEGER.3 (PARSE-INTEGER "    12345678901234567890   ") 12345678901234567890 27)
;; Loading (DEFTEST PARSE-INTEGER.4 (PARSE-INTEGER (CONCATENATE (QUOTE STRING) (STRING #\Newline) "17" (STRING #\Newline))) 17 4)
;; Loading (DEFTEST PARSE-INTEGER.5 (LET ((C (NAME-CHAR "Tab"))) (IF C (PARSE-INTEGER (CONCATENATE (QUOTE STRING) (STRING C) "6381" (STRING C))) (VALUES 6381 6))) 6381 6)
;; Loading (DEFTEST PARSE-INTEGER.6 (LET ((C (NAME-CHAR "Linefeed"))) (IF C (PARSE-INTEGER (CONCATENATE (QUOTE STRING) (STRING C) "-123712" (STRING C))) (VALUES -123712 9))) -123712 9)
;; Loading (DEFTEST PARSE-INTEGER.7 (LET ((C (NAME-CHAR "Page"))) (IF C (PARSE-INTEGER (CONCATENATE (QUOTE STRING) (STRING C) "0" (STRING C))) (VALUES 0 3))) 0 3)
;; Loading (DEFTEST PARSE-INTEGER.8 (LET ((C (NAME-CHAR "Return"))) (IF C (PARSE-INTEGER (CONCATENATE (QUOTE STRING) (STRING C) "999" (STRING C))) (VALUES 999 5))) 999 5)
;; Loading (DEFTEST PARSE-INTEGER.9 (PARSE-INTEGER "-0") 0 2)
;; Loading (DEFTEST PARSE-INTEGER.10 (PARSE-INTEGER "+0") 0 2)
;; Loading (DEFTEST PARSE-INTEGER.11 (PARSE-INTEGER "-00") 0 3)
;; Loading (DEFTEST PARSE-INTEGER.12 (PARSE-INTEGER "+000") 0 4)
;; Loading (DEFTEST PARSE-INTEGER.13 (PARSE-INTEGER "00010") 10 5)
;; Loading (DEFTEST PARSE-INTEGER.14 (PARSE-INTEGER "10110" :RADIX 2) 22 5)
;; Loading (DEFTEST PARSE-INTEGER.15 (PARSE-INTEGER "1021" :RADIX 3) 34 4)
;; Loading (DEFTEST PARSE-INTEGER.16 (LOOP FOR RADIX FROM 2 TO 36 FOR C ACROSS "123456789abcdefghijklmnopqrstuvwxyz" FOR S = (CONCATENATE (QUOTE STRING) (STRING C) "0") FOR VALS = (MULTIPLE-VALUE-LIST (PARSE-INTEGER S :RADIX RADIX)) FOR (VAL POS) = VALS ALWAYS (AND (= (LENGTH VALS) 2) (= POS 2) (= VAL (* RADIX (1- RADIX))))) T)
;; Loading (DEFTEST PARSE-INTEGER.17 (PARSE-INTEGER "10A" :JUNK-ALLOWED T) 10 2)
;; Loading (DEFTEST PARSE-INTEGER.18 (PARSE-INTEGER "10" :JUNK-ALLOWED T) 10 2)
;; Loading (DEFTEST PARSE-INTEGER.19 (PARSE-INTEGER "ABCDE" :JUNK-ALLOWED T) NIL 0)
;; Loading (DEFTEST PARSE-INTEGER.20 (PARSE-INTEGER "" :JUNK-ALLOWED T) NIL 0)
;; Loading (DEFTEST PARSE-INTEGER.21 :NOTES (:NIL-VECTORS-ARE-STRINGS) (PARSE-INTEGER (MAKE-ARRAY 0 :ELEMENT-TYPE NIL) :JUNK-ALLOWED T) NIL 0)
;; Loading (DEFTEST PARSE-INTEGER.22 (PARSE-INTEGER "a1234b" :START 2 :END 4) 23 4)
;; Loading (DEFTEST PARSE-INTEGER.23 (PARSE-INTEGER "a1234b" :START 2 :END 4 :END NIL) 23 4)
;; Loading (DEFTEST PARSE-INTEGER.24 (PARSE-INTEGER "a1234b" :START 2 :END 4 :START 1) 23 4)
;; Loading (DEFTEST PARSE-INTEGER.25 (PARSE-INTEGER "a1234b" :START 2 :END 4 :ALLOW-OTHER-KEYS NIL) 23 4)
;; Loading (DEFTEST PARSE-INTEGER.26 (PARSE-INTEGER "a1234b" :START 2 :END 4 :ALLOW-OTHER-KEYS T :FOO NIL) 23 4)
;; Loading (DEFTEST PARSE-INTEGER.27 (PARSE-INTEGER "a1234b" :START 2 :END 4 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO NIL) 23 4)
;; Loading (DEFTEST PARSE-INTEGER.28 (LET* ((S (MAKE-ARRAY 5 :INITIAL-CONTENTS "a123b" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S2 (MAKE-ARRAY 3 :DISPLACED-TO S :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES S2 (LENGTH S2) (EQUALPT "123" S2) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S2)))) "123" 3 T (123 3))
;; Loading (DEFTEST PARSE-INTEGER.28A (LET* ((S (MAKE-ARRAY 5 :INITIAL-CONTENTS "a123b" :ELEMENT-TYPE (QUOTE CHARACTER))) (S2 (MAKE-ARRAY 3 :DISPLACED-TO S :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES S2 (LENGTH S2) (EQUALPT "123" S2) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S2)))) "123" 3 T (123 3))
;; Loading (DEFTEST PARSE-INTEGER.29 (LET ((S (MAKE-ARRAY 10 :INITIAL-CONTENTS "1234567890" :FILL-POINTER 3 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (LENGTH S) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S)))) 3 (123 3))
;; Loading (DEFTEST PARSE-INTEGER.29A (LET ((S (MAKE-ARRAY 10 :INITIAL-CONTENTS "1234567890" :FILL-POINTER 3 :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (LENGTH S) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S)))) 3 (123 3))
;; Loading (DEFTEST PARSE-INTEGER.30 (LET ((S (MAKE-ARRAY 10 :INITIAL-CONTENTS "1234567890" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (LENGTH S) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S)) (PROGN (ADJUST-ARRAY S 3 :ELEMENT-TYPE (QUOTE BASE-CHAR)) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S))))) 10 (1234567890 10) (123 3))
;; Loading (DEFTEST PARSE-INTEGER.30A (LET ((S (MAKE-ARRAY 10 :INITIAL-CONTENTS "1234567890" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (LENGTH S) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S)) (PROGN (ADJUST-ARRAY S 3 :ELEMENT-TYPE (QUOTE CHARACTER)) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S))))) 10 (1234567890 10) (123 3))
;; Loading (DEFTEST PARSE-INTEGER.31 (PARSE-INTEGER "1234" :START 1) 234 4)
;; Loading (DEFTEST PARSE-INTEGER.32 (PARSE-INTEGER "1234" :START 1 :END NIL) 234 4)
;; Loading (DEFTEST PARSE-INTEGER.33 (LET* ((S (MAKE-ARRAY 5 :INITIAL-CONTENTS "a123b" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S2 (MAKE-ARRAY 3 :DISPLACED-TO S :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S3 (MAKE-ARRAY 2 :DISPLACED-TO S2 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES S3 (LENGTH S3) (EQUALPT "23" S3) (MULTIPLE-VALUE-LIST (PARSE-INTEGER S3)))) "23" 2 T (23 2))
;; Loading (DEFTEST PARSE-INTEGER.34 (PARSE-INTEGER "1234" :END 3) 123 3)
;; Loading (DEFTEST PARSE-INTEGER.35 (PARSE-INTEGER "1234" :END 3 :END 1) 123 3)
;; Loading (DEFTEST PARSE-INTEGER.36 (PARSE-INTEGER "1234" :END NIL :END 3) 1234 4)
;; Loading (DEFTEST PARSE-INTEGER.ORDER.1 (LET ((I 0) A B C D E) (VALUES (MULTIPLE-VALUE-LIST (PARSE-INTEGER (PROGN (SETF A (INCF I)) "10001") :RADIX (PROGN (SETF B (INCF I)) 2) :START (PROGN (SETF C (INCF I)) 0) :END (PROGN (SETF D (INCF I)) 5) :JUNK-ALLOWED (PROGN (SETF E (INCF I)) NIL))) I A B C D E)) (17 5) 5 1 2 3 4 5)
;; Loading (LOAD "boole.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/boole.lsp C138C5C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFPARAMETER *BOOLE-VAL-NAMES* (QUOTE (BOOLE-1 BOOLE-2 BOOLE-AND BOOLE-ANDC1 BOOLE-ANDC2 BOOLE-C1 BOOLE-C2 BOOLE-CLR BOOLE-EQV BOOLE-IOR BOOLE-NAND BOOLE-NOR BOOLE-ORC1 BOOLE-ORC2 BOOLE-SET BOOLE-XOR)))
;; Loading (DEFPARAMETER *BOOLE-VALS* (LIST BOOLE-1 BOOLE-2 BOOLE-AND BOOLE-ANDC1 BOOLE-ANDC2 BOOLE-C1 BOOLE-C2 BOOLE-CLR BOOLE-EQV BOOLE-IOR BOOLE-NAND BOOLE-NOR BOOLE-ORC1 BOOLE-ORC2 BOOLE-SET BOOLE-XOR))
;; Loading (DEFPARAMETER *BOOLE-FNS* (LIST (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE Y)) X)) (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE X)) Y)) (FUNCTION LOGAND) (FUNCTION LOGANDC1) (FUNCTION LOGANDC2) (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE Y)) (LOGNOT X))) (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE X)) (LOGNOT Y))) (CONSTANTLY 0) (FUNCTION LOGEQV) (FUNCTION LOGIOR) (FUNCTION LOGNAND) (FUNCTION LOGNOR) (FUNCTION LOGORC1) (FUNCTION LOGORC2) (CONSTANTLY -1) (FUNCTION LOGXOR)))
;; Loading (DEFTEST BOOLE.ERROR.1 (SIGNALS-ERROR (BOOLE) PROGRAM-ERROR) T)
;; Loading (DEFTEST BOOLE.ERROR.2 (SIGNALS-ERROR (BOOLE BOOLE-1) PROGRAM-ERROR) T)
;; Loading (DEFTEST BOOLE.ERROR.3 (SIGNALS-ERROR (BOOLE BOOLE-1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST BOOLE.ERROR.4 (SIGNALS-ERROR (BOOLE BOOLE-1 1 2 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST BOOLE.ERROR.5 (LET ((BAD (LOOP FOR I FROM 1 UNTIL (NOT (MEMBER I *BOOLE-VALS*))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-TYPE-ERROR X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA BAD)) (BOOLE X 1 1))))) T)
;; Loading (DEFTEST BOOLE.ERROR.6 (LOOP FOR N IN *BOOLE-VAL-NAMES* UNLESS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-TYPE-ERROR X NIL (BOOLE (SYSTEM.INTERNALS::BQ-COMMA N) NIL 1)))) COLLECT N) NIL)
;; Loading (DEFTEST BOOLE.ERROR.7 (LOOP FOR N IN *BOOLE-VAL-NAMES* UNLESS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-TYPE-ERROR X NIL (BOOLE (SYSTEM.INTERNALS::BQ-COMMA N) 1 NIL)))) COLLECT N) NIL)
;; Loading (DEFTEST BOOLE.1 (LOOP FOR V IN *BOOLE-VALS* FOR FN OF-TYPE FUNCTION IN *BOOLE-FNS* FOR N IN *BOOLE-VAL-NAMES* NCONC (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (RANDOM-FIXNUM) FOR RESULT1 = (FUNCALL (THE FUNCTION FN) X Y) FOR VALS = (MULTIPLE-VALUE-LIST (BOOLE V X Y)) FOR RESULT2 = (CAR VALS) REPEAT 100 UNLESS (AND (= (LENGTH VALS) 1) (EQL RESULT1 RESULT2)) COLLECT (LIST N X Y RESULT1 RESULT2))) NIL)
;; Loading (DEFTEST BOOLE.2 (LOOP FOR V IN *BOOLE-VALS* FOR FN OF-TYPE FUNCTION IN *BOOLE-FNS* FOR N IN *BOOLE-VAL-NAMES* NCONC (LOOP FOR X = (RANDOM-FROM-INTERVAL 1000000000000000) FOR Y = (RANDOM-FROM-INTERVAL 1000000000000000) FOR RESULT1 = (FUNCALL (THE FUNCTION FN) X Y) FOR VALS = (MULTIPLE-VALUE-LIST (BOOLE V X Y)) FOR RESULT2 = (CAR VALS) REPEAT 100 UNLESS (AND (= (LENGTH VALS) 1) (EQL RESULT1 RESULT2)) COLLECT (LIST N X Y RESULT1 RESULT2))) NIL)
;; Loading (DEFTEST BOOLE.3 (LOOP FOR N IN *BOOLE-VAL-NAMES* FOR FN OF-TYPE FUNCTION IN *BOOLE-FNS* FOR FN2 = (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (X Y) (DECLARE (TYPE FIXNUM X Y)) (BOOLE (SYSTEM.INTERNALS::BQ-COMMA N) X Y)))) NCONC (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (RANDOM-FIXNUM) FOR RESULT1 = (FUNCALL (THE FUNCTION FN) X Y) FOR VALS = (MULTIPLE-VALUE-LIST (FUNCALL FN2 X Y)) FOR RESULT2 = (CAR VALS) REPEAT 100 UNLESS (AND (= (LENGTH VALS) 1) (EQL RESULT1 RESULT2)) COLLECT (LIST N X Y RESULT1 RESULT2))) NIL)
;; Loading (DEFTEST BOOLE.4 (MACROLET ((%M (Z) Z)) (VALUES (BOOLE (EXPAND-IN-CURRENT-ENV (%M BOOLE-AND)) 204 90) (BOOLE BOOLE-AND (EXPAND-IN-CURRENT-ENV (%M 204)) 90) (BOOLE BOOLE-AND 204 (EXPAND-IN-CURRENT-ENV (%M 90))))) 72 72 72)
;; Loading (DEFTEST BOOLE.ORDER.1 (LET ((I 0) A B C) (VALUES (BOOLE (PROGN (SETF A (INCF I)) BOOLE-AND) (PROGN (SETF B (INCF I)) 13) (PROGN (SETF C (INCF I)) 25)) I A B C)) 9 3 1 2 3)
;; Loading (DEFTEST BOOLE.CONSTANTS.1 (EQLT (LENGTH *BOOLE-VALS*) (LENGTH (REMOVE-DUPLICATES *BOOLE-VALS*))) T)
;; Loading (DEFTEST BOOLE.CONSTANTS.2 (REMOVE-IF (FUNCTION CONSTANTP) *BOOLE-VAL-NAMES*) NIL)
;; Loading (DEFTEST BOOLE.CONSTANTS.3 (REMOVE-IF (FUNCTION BOUNDP) *BOOLE-VAL-NAMES*) NIL)
;; Loading (LOAD "logand.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logand.lsp C14C7017>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGAND.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION LOGAND) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGAND.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGAND 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGAND.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGAND X 1))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGAND.1 (LOGAND) -1)
;; Loading (DEFTEST LOGAND.2 (LOGAND 1231) 1231)
;; Loading (DEFTEST LOGAND.3 (LOGAND -198) -198)
;; Loading (DEFTEST LOGAND.4 (LOOP FOR X IN *INTEGERS* ALWAYS (EQL X (LOGAND X))) T)
;; Loading (DEFTEST LOGAND.5 (LOOP FOR X IN *INTEGERS* ALWAYS (EQL 0 (LOGAND X (LOGNOT X)))) T)
;; Loading (DEFTEST LOGAND.6 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL 0 (LOGAND X XC)) COLLECT X) NIL)
;; Loading (DEFTEST LOGAND.7 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGAND X Y) REPEAT 1000 UNLESS (AND (IF (AND (< X 0) (< Y 0)) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (AND (LOGBITP I X) (LOGBITP I Y)) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGAND.8 (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) FOR ARGS = (NCONC (MAKE-LIST (1- I) :INITIAL-ELEMENT -1) (LIST 183)) ALWAYS (EQL (APPLY (FUNCTION LOGAND) ARGS) 183)) T)
;; Loading (DEFTEST LOGAND.9 (LOOP FOR I FROM -1 TO 0 ALWAYS (LOOP FOR J FROM -1 TO 0 ALWAYS (LOCALLY (DECLARE (TYPE (INTEGER -1 0) I J)) (EQL (LOGAND I J) (IF (OR (ZEROP I) (ZEROP J)) 0 -1))))) T)
;; Loading (DEFTEST LOGAND.ORDER.1 (LET ((I 0) A B) (VALUES (LOGAND (PROGN (SETF A (INCF I)) 27) (PROGN (SETF B (INCF I)) 22)) I A B)) 18 2 1 2)
;; Loading (DEFTEST LOGAND.ORDER.2 (LET ((I 0) A B C) (VALUES (LOGAND (PROGN (SETF A (INCF I)) 27) (PROGN (SETF B (INCF I)) 22) (PROGN (SETF C (INCF I)) 53)) I A B C)) 16 3 1 2 3)
;; Loading (LOAD "logandc1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logandc1.lsp C156EF47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGANDC1.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGANDC1 X 0))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGANDC1.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGANDC1 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGANDC1.ERROR.3 (SIGNALS-ERROR (LOGANDC1) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGANDC1.ERROR.4 (SIGNALS-ERROR (LOGANDC1 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGANDC1.ERROR.5 (SIGNALS-ERROR (LOGANDC1 1 2 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGANDC1.1 (LOGANDC1 0 0) 0)
;; Loading (DEFTEST LOGANDC1.2 (LOGANDC1 0 -1) -1)
;; Loading (DEFTEST LOGANDC1.3 (LOGANDC1 0 123) 123)
;; Loading (DEFTEST LOGANDC1.4 (LOOP FOR X IN *INTEGERS* ALWAYS (AND (EQL X (LOGANDC1 0 X)) (EQL 0 (LOGANDC1 X X)) (EQL X (LOGANDC1 (LOGNOT X) X)) (EQL (LOGNOT X) (LOGANDC1 X (LOGNOT X))))) T)
;; Loading (DEFTEST LOGANDC1.5 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL X (LOGANDC1 XC X)) COLLECT X) NIL)
;; Loading (DEFTEST LOGANDC1.6 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGANDC1 X Y) REPEAT 1000 UNLESS (AND (IF (AND (>= X 0) (< Y 0)) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (AND (NOT (LOGBITP I X)) (LOGBITP I Y)) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGANDC1.ORDER.1 (LET ((I 0) A B) (VALUES (LOGANDC1 (PROGN (SETF A (INCF I)) 0) (PROGN (SETF B (INCF I)) -1)) I A B)) -1 2 1 2)
;; Loading (LOAD "logandc2.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logandc2.lsp C15FD687>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGANDC2.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGANDC2 X 0))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGANDC2.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGANDC2 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGANDC2.ERROR.3 (SIGNALS-ERROR (LOGANDC2) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGANDC2.ERROR.4 (SIGNALS-ERROR (LOGANDC2 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGANDC2.ERROR.5 (SIGNALS-ERROR (LOGANDC2 1 2 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGANDC2.1 (LOGANDC2 0 0) 0)
;; Loading (DEFTEST LOGANDC2.2 (LOGANDC2 -1 0) -1)
;; Loading (DEFTEST LOGANDC2.3 (LOGANDC2 (1+ MOST-POSITIVE-FIXNUM) 0) 1152921504606846976)
;; Loading (DEFTEST LOGANDC2.4 (LOOP FOR X IN *INTEGERS* ALWAYS (AND (EQL X (LOGANDC2 X 0)) (EQL 0 (LOGANDC2 X X)) (EQL X (LOGANDC2 X (LOGNOT X))) (EQL (LOGNOT X) (LOGANDC2 (LOGNOT X) X)))) T)
;; Loading (DEFTEST LOGANDC2.5 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL X (LOGANDC2 X XC)) COLLECT X) NIL)
;; Loading (DEFTEST LOGANDC2.6 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGANDC2 X Y) REPEAT 1000 UNLESS (AND (IF (AND (< X 0) (>= Y 0)) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (AND (NOT (LOGBITP I Y)) (LOGBITP I X)) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGANDC2.ORDER.1 (LET ((I 0) A B) (VALUES (LOGANDC2 (PROGN (SETF A (INCF I)) -1) (PROGN (SETF B (INCF I)) 0)) I A B)) -1 2 1 2)
;; Loading (LOAD "logeqv.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logeqv.lsp C168DCD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGEQV.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION LOGEQV) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGEQV.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGEQV 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGEQV.1 (LOGEQV) -1)
;; Loading (DEFTEST LOGEQV.2 (LOGEQV 1231) 1231)
;; Loading (DEFTEST LOGEQV.3 (LOGEQV -198) -198)
;; Loading (DEFTEST LOGEQV.4 (LOOP FOR X IN *INTEGERS* ALWAYS (EQL X (LOGEQV X))) T)
;; Loading (DEFTEST LOGEQV.5 (LOOP FOR X IN *INTEGERS* ALWAYS (EQL 0 (LOGEQV X (LOGNOT X)))) T)
;; Loading (DEFTEST LOGEQV.6 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL 0 (LOGEQV X XC)) COLLECT X) NIL)
;; Loading (DEFTEST LOGEQV.7 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGEQV X Y) REPEAT 1000 UNLESS (AND (IF (OR (AND (< X 0) (< Y 0)) (AND (>= X 0) (>= Y 0))) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (OR (AND (LOGBITP I X) (LOGBITP I Y)) (AND (NOT (LOGBITP I X)) (NOT (LOGBITP I Y)))) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGEQV.8 (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) FOR ARGS = (NCONC (MAKE-LIST (1- I) :INITIAL-ELEMENT -1) (LIST 7131)) ALWAYS (EQL (APPLY (FUNCTION LOGEQV) ARGS) 7131)) T)
;; Loading (DEFTEST LOGEQV.ORDER.1 (LET ((I 0) A B) (VALUES (LOGEQV (PROGN (SETF A (INCF I)) 27) (PROGN (SETF B (INCF I)) (LOGNOT 22))) I A B)) 13 2 1 2)
;; Loading (DEFTEST LOGEQV.ORDER.2 (LET ((I 0) A B C) (VALUES (LOGEQV (PROGN (SETF A (INCF I)) 27) (PROGN (SETF B (INCF I)) 22) (PROGN (SETF C (INCF I)) 53)) I A B C)) 56 3 1 2 3)
;; Loading (LOAD "logior.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logior.lsp C172B577>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGIOR.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION LOGIOR) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGIOR.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGIOR 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGIOR.1 (LOGIOR) 0)
;; Loading (DEFTEST LOGIOR.2 (LOGIOR 1231) 1231)
;; Loading (DEFTEST LOGIOR.3 (LOGIOR -198) -198)
;; Loading (DEFTEST LOGIOR.4 (LOOP FOR X IN *INTEGERS* ALWAYS (EQL X (LOGIOR X))) T)
;; Loading (DEFTEST LOGIOR.5 (LOOP FOR X IN *INTEGERS* ALWAYS (EQL -1 (LOGIOR X (LOGNOT X)))) T)
;; Loading (DEFTEST LOGIOR.6 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL -1 (LOGIOR X XC)) COLLECT X) NIL)
;; Loading (DEFTEST LOGIOR.7 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGIOR X Y) REPEAT 1000 UNLESS (AND (IF (OR (< X 0) (< Y 0)) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (OR (LOGBITP I X) (LOGBITP I Y)) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGIOR.8 (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) FOR ARGS = (NCONC (MAKE-LIST (1- I) :INITIAL-ELEMENT 0) (LIST -21231)) ALWAYS (EQL (APPLY (FUNCTION LOGIOR) ARGS) -21231)) T)
;; Loading (DEFTEST LOGIOR.ORDER.1 (LET ((I 0) A B) (VALUES (LOGIOR (PROGN (SETF A (INCF I)) 26) (PROGN (SETF B (INCF I)) 22)) I A B)) 30 2 1 2)
;; Loading (DEFTEST LOGIOR.ORDER.2 (LET ((I 0) A B C) (VALUES (LOGIOR (PROGN (SETF A (INCF I)) 19) (PROGN (SETF B (INCF I)) 22) (PROGN (SETF C (INCF I)) 53)) I A B C)) 55 3 1 2 3)
;; Loading (LOAD "lognand.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/lognand.lsp C17C0D97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGNAND.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGNAND X 0))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGNAND.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGNAND 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGNAND.ERROR.3 (SIGNALS-ERROR (LOGNAND) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGNAND.ERROR.4 (SIGNALS-ERROR (LOGNAND 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGNAND.ERROR.5 (SIGNALS-ERROR (LOGNAND 1 2 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGNAND.1 (LOGNAND 0 0) -1)
;; Loading (DEFTEST LOGNAND.2 (LOGNAND 0 -1) -1)
;; Loading (DEFTEST LOGNAND.3 (LOGNAND -1 123) -124)
;; Loading (DEFTEST LOGNAND.4 (LOOP FOR X IN *INTEGERS* ALWAYS (AND (EQL -1 (LOGNAND 0 X)) (EQL (LOGNOT X) (LOGNAND X X)) (EQL -1 (LOGNAND (LOGNOT X) X)) (EQL -1 (LOGNAND X (LOGNOT X))))) T)
;; Loading (DEFTEST LOGNAND.5 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL -1 (LOGNAND XC X)) COLLECT X) NIL)
;; Loading (DEFTEST LOGNAND.6 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGNAND X Y) REPEAT 1000 UNLESS (AND (IF (OR (>= X 0) (>= Y 0)) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (NOT (AND (LOGBITP I X) (LOGBITP I Y))) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGNAND.ORDER.1 (LET ((I 0) A B) (VALUES (LOGNAND (PROGN (SETF A (INCF I)) -2) (PROGN (SETF B (INCF I)) -3)) I A B)) 3 2 1 2)
;; Loading (LOAD "lognor.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/lognor.lsp C184E5A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGNOR.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGNOR X 0))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGNOR.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGNOR 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGNOR.ERROR.3 (SIGNALS-ERROR (LOGNOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGNOR.ERROR.4 (SIGNALS-ERROR (LOGNOR 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGNOR.ERROR.5 (SIGNALS-ERROR (LOGNOR 1 2 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGNOR.1 (LOGNOR 0 0) -1)
;; Loading (DEFTEST LOGNOR.2 (LOGNOR 0 -1) 0)
;; Loading (DEFTEST LOGNOR.3 (LOGNOR -1 123) 0)
;; Loading (DEFTEST LOGNOR.4 (LOOP FOR X IN *INTEGERS* ALWAYS (AND (EQL (LOGNOT X) (LOGNOR 0 X)) (EQL (LOGNOT X) (LOGNOR X X)) (EQL 0 (LOGNOR (LOGNOT X) X)) (EQL 0 (LOGNOR X (LOGNOT X))))) T)
;; Loading (DEFTEST LOGNOR.5 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL 0 (LOGNOR XC X)) COLLECT X) NIL)
;; Loading (DEFTEST LOGNOR.6 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGNOR X Y) REPEAT 1000 UNLESS (AND (IF (AND (>= X 0) (>= Y 0)) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (NOT (OR (LOGBITP I X) (LOGBITP I Y))) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGNOR.ORDER.1 (LET ((I 0) A B) (VALUES (LOGNOR (PROGN (SETF A (INCF I)) -2) (PROGN (SETF B (INCF I)) -3)) I A B)) 0 2 1 2)
;; Loading (LOAD "logorc1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logorc1.lsp C18DB7E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGORC1.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGORC1 X 0))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGORC1.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGORC1 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGORC1.ERROR.3 (SIGNALS-ERROR (LOGORC1) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGORC1.ERROR.4 (SIGNALS-ERROR (LOGORC1 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGORC1.ERROR.5 (SIGNALS-ERROR (LOGORC1 1 2 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGORC1.1 (LOGORC1 0 0) -1)
;; Loading (DEFTEST LOGORC1.2 (LOGORC1 0 -1) -1)
;; Loading (DEFTEST LOGORC1.2A (LOGORC1 -1 0) 0)
;; Loading (DEFTEST LOGORC1.3 (LOGORC1 123 0) -124)
;; Loading (DEFTEST LOGORC1.4 (LOOP FOR X IN *INTEGERS* ALWAYS (AND (EQL -1 (LOGORC1 0 X)) (EQL X (LOGORC1 -1 X)) (EQL -1 (LOGORC1 X X)) (EQL X (LOGORC1 (LOGNOT X) X)) (EQL (LOGNOT X) (LOGORC1 X (LOGNOT X))))) T)
;; Loading (DEFTEST LOGORC1.5 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL X (LOGORC1 XC X)) COLLECT X) NIL)
;; Loading (DEFTEST LOGORC1.6 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGORC1 X Y) REPEAT 1000 UNLESS (AND (IF (OR (>= X 0) (< Y 0)) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (OR (NOT (LOGBITP I X)) (LOGBITP I Y)) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGORC1.ORDER.1 (LET ((I 0) A B) (VALUES (LOGORC1 (PROGN (SETF A (INCF I)) -3) (PROGN (SETF B (INCF I)) 17)) I A B)) 19 2 1 2)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (LOAD "logorc2.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logorc2.lsp 811EC467>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGORC2.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGORC2 X 0))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGORC2.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGORC2 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGORC2.ERROR.3 (SIGNALS-ERROR (LOGORC2) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGORC2.ERROR.4 (SIGNALS-ERROR (LOGORC2 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGORC2.ERROR.5 (SIGNALS-ERROR (LOGORC2 1 2 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGORC2.1 (LOGORC2 0 0) -1)
;; Loading (DEFTEST LOGORC2.2 (LOGORC2 -1 0) -1)
;; Loading (DEFTEST LOGORC2.2A (LOGORC2 0 -1) 0)
;; Loading (DEFTEST LOGORC2.3 (LOGORC2 0 123) -124)
;; Loading (DEFTEST LOGORC2.4 (LOOP FOR X IN *INTEGERS* ALWAYS (AND (EQL -1 (LOGORC2 X 0)) (EQL X (LOGORC2 X -1)) (EQL -1 (LOGORC2 X X)) (EQL X (LOGORC2 X (LOGNOT X))) (EQL (LOGNOT X) (LOGORC2 (LOGNOT X) X)))) T)
;; Loading (DEFTEST LOGORC2.5 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL X (LOGORC2 X XC)) COLLECT X) NIL)
;; Loading (DEFTEST LOGORC2.6 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGORC2 X Y) REPEAT 1000 UNLESS (AND (IF (OR (< X 0) (>= Y 0)) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (OR (NOT (LOGBITP I Y)) (LOGBITP I X)) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGORC2.ORDER.1 (LET ((I 0) A B) (VALUES (LOGORC2 (PROGN (SETF A (INCF I)) 27) (PROGN (SETF B (INCF I)) -1)) I A B)) 27 2 1 2)
;; Loading (LOAD "lognot.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/lognot.lsp 812E40D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGNOT.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION LOGNOT) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGNOT.ERROR.2 (SIGNALS-ERROR (LOGNOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGNOT.ERROR.3 (SIGNALS-ERROR (LOGNOT 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGNOT.1 (LOGNOT 0) -1)
;; Loading (DEFTEST LOGNOT.2 (LOGNOT -1) 0)
;; Loading (DEFTEST LOGNOT.3 (LOGNOT 123) -124)
;; Loading (DEFTEST LOGNOT.4 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGNOT X) REPEAT 1000 UNLESS (AND (IF (>= X 0) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (NOT (LOGBITP I X)) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Z)) NIL)
;; Loading (LOAD "logxor.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logxor.lsp 8133DAA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGXOR.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION LOGXOR) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGXOR.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGXOR 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGXOR.1 (LOGXOR) 0)
;; Loading (DEFTEST LOGXOR.2 (LOGXOR 1231) 1231)
;; Loading (DEFTEST LOGXOR.3 (LOGXOR -198) -198)
;; Loading (DEFTEST LOGXOR.4 (LOOP FOR X IN *INTEGERS* ALWAYS (EQL X (LOGXOR X))) T)
;; Loading (DEFTEST LOGXOR.5 (LOOP FOR X IN *INTEGERS* ALWAYS (AND (EQL -1 (LOGXOR X (LOGNOT X))) (EQL 0 (LOGXOR X X)) (EQL X (LOGXOR X X X)))) T)
;; Loading (DEFTEST LOGXOR.6 (LOOP FOR X = (RANDOM-FIXNUM) FOR XC = (LOGNOT X) REPEAT 1000 UNLESS (EQL -1 (LOGXOR X XC)) COLLECT X) NIL)
;; Loading (DEFTEST LOGXOR.7 (LOOP FOR X = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Y = (RANDOM-FROM-INTERVAL (ASH 1 (RANDOM 200))) FOR Z = (LOGXOR X Y) REPEAT 1000 UNLESS (AND (IF (OR (AND (< X 0) (>= Y 0)) (AND (>= X 0) (< Y 0))) (< Z 0) (>= Z 0)) (LOOP FOR I FROM 1 TO 210 ALWAYS (IF (OR (AND (LOGBITP I X) (NOT (LOGBITP I Y))) (AND (NOT (LOGBITP I X)) (LOGBITP I Y))) (LOGBITP I Z) (NOT (LOGBITP I Z))))) COLLECT (LIST X Y Z)) NIL)
;; Loading (DEFTEST LOGXOR.8 (LOOP FOR I FROM 1 TO (MIN 256 (1- CALL-ARGUMENTS-LIMIT)) FOR ARGS = (NCONC (MAKE-LIST (1- I) :INITIAL-ELEMENT 0) (LIST 7131)) ALWAYS (EQL (APPLY (FUNCTION LOGXOR) ARGS) 7131)) T)
;; Loading (DEFTEST LOGXOR.ORDER.1 (LET ((I 0) A B) (VALUES (LOGXOR (PROGN (SETF A (INCF I)) 27) (PROGN (SETF B (INCF I)) 22)) I A B)) 13 2 1 2)
;; Loading (DEFTEST LOGXOR.ORDER.2 (LET ((I 0) A B C) (VALUES (LOGXOR (PROGN (SETF A (INCF I)) 27) (PROGN (SETF B (INCF I)) 22) (PROGN (SETF C (INCF I)) 53)) I A B C)) 56 3 1 2 3)
;; Loading (LOAD "logbitp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logbitp.lsp 813DEDD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST LOGBITP.ERROR.1 (SIGNALS-ERROR (LOGBITP) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGBITP.ERROR.2 (SIGNALS-ERROR (LOGBITP 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGBITP.ERROR.3 (SIGNALS-ERROR (LOGBITP 0 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGBITP.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGBITP X 0))) (TYPEF (QUOTE UNSIGNED-BYTE))) NIL)
;; Loading (DEFTEST LOGBITP.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGBITP 0 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGBITP.1 (LOOP FOR X IN *INTEGERS* UNLESS (IF (LOGBITP 0 X) (ODDP X) (EVENP X)) COLLECT X) NIL)
;; Loading (DEFTEST LOGBITP.2 (LOOP FOR LEN FROM 0 TO 300 FOR I = (ASH 1 LEN) ALWAYS (AND (LOGBITP LEN I) (LOOP FOR J FROM 0 TO 300 ALWAYS (OR (EQL J LEN) (NOT (LOGBITP J I)))))) T)
;; Loading (DEFTEST LOGBITP.3 (LOGBITP MOST-POSITIVE-FIXNUM 0) NIL)
;; Loading (DEFTEST LOGBITP.4 (NOTNOT-MV (LOGBITP MOST-POSITIVE-FIXNUM -1)) T)
;; Loading (DEFTEST LOGBITP.5 (LOGBITP (1+ MOST-POSITIVE-FIXNUM) 0) NIL)
;; Loading (DEFTEST LOGBITP.6 (NOTNOT-MV (LOGBITP (1+ MOST-POSITIVE-FIXNUM) -1)) T)
;; Loading (DEFTEST LOGBITP.7 (LOOP FOR LEN = (RANDOM 100) FOR I = (RANDOM-FROM-INTERVAL (ASH 1 LEN)) FOR K = (RANDOM (1+ LEN)) REPEAT 1000 UNLESS (IF (LDB-TEST (BYTE 1 K) I) (LOGBITP K I) (NOT (LOGBITP K I))) COLLECT (LIST I K)) NIL)
;; Loading (DEFTEST LOGBITP.8 (LOOP FOR K FROM 1 TO 1000 ALWAYS (LOGBITP K -1)) T)
;; Loading (DEFTEST LOGBITP.ORDER.1 (LET ((I 0) A B) (VALUES (LOGBITP (PROGN (SETF A (INCF I)) 2) (PROGN (SETF B (INCF I)) 58)) I A B)) NIL 2 1 2)
;; Loading (LOAD "logcount.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logcount.lsp 8146CDE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LOGCOUNT.ERROR.1 (SIGNALS-ERROR (LOGCOUNT) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGCOUNT.ERROR.2 (SIGNALS-ERROR (LOGCOUNT 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGCOUNT.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION LOGCOUNT) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGCOUNT.1 (LOGCOUNT 0) 0)
;; Loading (DEFTEST LOGCOUNT.2 (LOGCOUNT 1) 1)
;; Loading (DEFTEST LOGCOUNT.3 (LOGCOUNT 2) 1)
;; Loading (DEFTEST LOGCOUNT.4 (LOGCOUNT 3) 2)
;; Loading (DEFTEST LOGCOUNT.5 (LOGCOUNT -1) 0)
;; Loading (DEFTEST LOGCOUNT.6 (LOOP FOR X = (RANDOM-FIXNUM) REPEAT 100 ALWAYS (EQL (LOGCOUNT X) (LOGCOUNT (LOGNOT X)))) T)
;; Loading (DEFTEST LOGCOUNT.7 (LET ((BOUND (ASH 1 300))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) REPEAT 100 ALWAYS (EQL (LOGCOUNT X) (LOGCOUNT (LOGNOT X))))) T)
;; Loading (DEFTEST LOGCOUNT.8 (LOOP FOR Y = (RANDOM (1+ MOST-POSITIVE-FIXNUM)) REPEAT 100 UNLESS (LET ((CNT 0) (X Y)) (LOOP WHILE (> X 0) DO (WHEN (ODDP X) (INCF CNT)) (SETF X (ASH X -1))) (EQL CNT (LOGCOUNT Y))) COLLECT Y) NIL)
;; Loading (LOAD "logtest.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logtest.lsp 814C6337>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LOGTEST.ERROR.1 (SIGNALS-ERROR (LOGTEST) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGTEST.ERROR.2 (SIGNALS-ERROR (LOGTEST 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGTEST.ERROR.3 (SIGNALS-ERROR (LOGTEST 0 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOGTEST.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGTEST X -1))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGTEST.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LOGTEST -1 X))) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST LOGTEST.1 (LOOP FOR X = (LOGAND (RANDOM-FIXNUM) (RANDOM-FIXNUM)) FOR Y = (LOGAND (RANDOM-FIXNUM) (RANDOM-FIXNUM)) REPEAT 10000 UNLESS (IF (LOGTEST X Y) (NOT (ZEROP (LOGAND X Y))) (ZEROP (LOGAND X Y))) COLLECT (LIST X Y)) NIL)
;; Loading (DEFTEST LOGTEST.2 (LOGTEST 1 2) NIL)
;; Loading (DEFTEST LOGTEST.3 (NOTNOT-MV (LOGTEST 8 (LOGIOR 8 4))) T)
;; Loading (LOAD "byte.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/byte.lsp 815118D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BYTE.ERROR.1 (SIGNALS-ERROR (BYTE) PROGRAM-ERROR) T)
;; Loading (DEFTEST BYTE.ERROR.2 (SIGNALS-ERROR (BYTE 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST BYTE.ERROR.3 (SIGNALS-ERROR (BYTE 1 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST BYTE.1 (PROGN (BYTE 0 0) :GOOD) :GOOD)
;; Loading (DEFTEST BYTE.2 (PROGN (BYTE 1 1) :GOOD) :GOOD)
;; Loading (DEFTEST BYTE.3 (LOOP FOR I FROM 0 TO 100 ALWAYS (LOOP FOR J FROM 0 TO 100 ALWAYS (LET ((BSPEC (BYTE I J))) (AND (EQL I (BYTE-SIZE BSPEC)) (EQL J (BYTE-POSITION BSPEC)))))) T)
;; Loading (DEFTEST BYTE.4 (MACROLET ((%M (Z) Z)) (LET ((B (BYTE (EXPAND-IN-CURRENT-ENV (%M 2)) 5))) (VALUES (BYTE-SIZE B) (BYTE-POSITION B)))) 2 5)
;; Loading (DEFTEST BYTE.5 (MACROLET ((%M (Z) Z)) (LET ((B (BYTE 31 (EXPAND-IN-CURRENT-ENV (%M 7))))) (VALUES (BYTE-SIZE B) (BYTE-POSITION B)))) 31 7)
;; Loading (DEFTEST BYTE-SIZE.1 (MACROLET ((%M (Z) Z)) (BYTE-SIZE (EXPAND-IN-CURRENT-ENV (%M (BYTE 3 7))))) 3)
;; Loading (DEFTEST BYTE-POSITION.1 (MACROLET ((%M (Z) Z)) (BYTE-POSITION (EXPAND-IN-CURRENT-ENV (%M (BYTE 3 7))))) 7)
;; Loading (DEFTEST BYTE-POSITION.ERROR.1 (SIGNALS-ERROR (BYTE-POSITION) PROGRAM-ERROR) T)
;; Loading (DEFTEST BYTE-POSITION.ERROR.2 (SIGNALS-ERROR (BYTE-POSITION (BYTE 1 1) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST BYTE-SIZE.ERROR.1 (SIGNALS-ERROR (BYTE-SIZE) PROGRAM-ERROR) T)
;; Loading (DEFTEST BYTE-SIZE.ERROR.2 (SIGNALS-ERROR (BYTE-SIZE (BYTE 1 1) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "deposit-field.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/deposit-field.lsp 81582247>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DEPOSIT-FIELD.ERROR.1 (SIGNALS-ERROR (DEPOSIT-FIELD) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEPOSIT-FIELD.ERROR.2 (SIGNALS-ERROR (DEPOSIT-FIELD 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEPOSIT-FIELD.ERROR.3 (SIGNALS-ERROR (DEPOSIT-FIELD 1 (BYTE 1 0)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEPOSIT-FIELD.ERROR.4 (SIGNALS-ERROR (DEPOSIT-FIELD 1 (BYTE 1 0) 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEPOSIT-FIELD.1 (LOOP FOR POS = (RANDOM 32) FOR SIZE = (RANDOM 32) FOR NEWBYTE = (RANDOM (ASH 1 (+ POS SIZE))) FOR VAL = (RANDOM (1+ (RANDOM (ASH 1 (+ POS SIZE))))) FOR RESULT = (DEPOSIT-FIELD NEWBYTE (BYTE SIZE POS) VAL) REPEAT 100 UNLESS (LOOP FOR I FROM 0 TO (+ POS SIZE) ALWAYS (IF (OR (< I POS) (>= I (+ POS SIZE))) (IF (LOGBITP I VAL) (LOGBITP I RESULT) (NOT (LOGBITP I RESULT))) (IF (LOGBITP I NEWBYTE) (LOGBITP I RESULT) (NOT (LOGBITP I RESULT))))) COLLECT (LIST POS SIZE NEWBYTE VAL RESULT)) NIL)
;; Loading (DEFTEST DEPOSIT-FIELD.2 (LOOP FOR POS = (RANDOM 1000) FOR SIZE = (RANDOM 1000) FOR NEWBYTE = (RANDOM (ASH 1 (+ POS SIZE))) FOR VAL = (RANDOM (1+ (RANDOM (ASH 1 (+ POS SIZE))))) FOR RESULT = (DEPOSIT-FIELD NEWBYTE (BYTE SIZE POS) VAL) REPEAT 100 UNLESS (LOOP FOR I FROM 0 TO (+ POS SIZE) ALWAYS (IF (OR (< I POS) (>= I (+ POS SIZE))) (IF (LOGBITP I VAL) (LOGBITP I RESULT) (NOT (LOGBITP I RESULT))) (IF (LOGBITP I NEWBYTE) (LOGBITP I RESULT) (NOT (LOGBITP I RESULT))))) COLLECT (LIST POS SIZE NEWBYTE VAL RESULT)) NIL)
;; Loading (DEFTEST DEPOSIT-FIELD.3 (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (RANDOM-FIXNUM) FOR POS = (RANDOM 32) REPEAT 100 ALWAYS (= (DEPOSIT-FIELD X (BYTE 0 POS) Y) Y)) T)
;; Loading (DEFTEST DEPOSIT-FIELD.4 (LET ((BOUND (ASH 1 200))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND) FOR POS = (RANDOM 200) REPEAT 100 ALWAYS (= (DEPOSIT-FIELD X (BYTE 0 POS) Y) Y))) T)
;; Loading (DEFTEST DEPOSIT-FIELD.5 (LOOP FOR I OF-TYPE FIXNUM FROM -1000 TO 1000 ALWAYS (EQL (DEPOSIT-FIELD -1 (BYTE 0 0) I) I)) T)
;; Loading (LOAD "dpb.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/dpb.lsp 81619A67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DPB.ERROR.1 (SIGNALS-ERROR (DPB) PROGRAM-ERROR) T)
;; Loading (DEFTEST DPB.ERROR.2 (SIGNALS-ERROR (DPB 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST DPB.ERROR.3 (SIGNALS-ERROR (DPB 1 (BYTE 1 0)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DPB.ERROR.4 (SIGNALS-ERROR (DPB 1 (BYTE 1 0) 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DPB.1 (LOOP FOR POS = (RANDOM 32) FOR SIZE = (RANDOM 32) FOR NEWBYTE = (RANDOM (ASH 1 (+ POS SIZE))) FOR VAL = (RANDOM (1+ (RANDOM (ASH 1 (+ POS SIZE))))) FOR RESULT = (DPB NEWBYTE (BYTE SIZE POS) VAL) REPEAT 100 UNLESS (LOOP FOR I FROM 0 TO (+ POS SIZE) ALWAYS (IF (OR (< I POS) (>= I (+ POS SIZE))) (IF (LOGBITP I VAL) (LOGBITP I RESULT) (NOT (LOGBITP I RESULT))) (IF (LOGBITP (- I POS) NEWBYTE) (LOGBITP I RESULT) (NOT (LOGBITP I RESULT))))) COLLECT (LIST POS SIZE NEWBYTE VAL RESULT)) NIL)
;; Loading (DEFTEST DPB.2 (LOOP FOR POS = (RANDOM 1000) FOR SIZE = (RANDOM 1000) FOR NEWBYTE = (RANDOM (ASH 1 (+ POS SIZE))) FOR VAL = (RANDOM (1+ (RANDOM (ASH 1 (+ POS SIZE))))) FOR RESULT = (DPB NEWBYTE (BYTE SIZE POS) VAL) REPEAT 100 UNLESS (LOOP FOR I FROM 0 TO (+ POS SIZE) ALWAYS (IF (OR (< I POS) (>= I (+ POS SIZE))) (IF (LOGBITP I VAL) (LOGBITP I RESULT) (NOT (LOGBITP I RESULT))) (IF (LOGBITP (- I POS) NEWBYTE) (LOGBITP I RESULT) (NOT (LOGBITP I RESULT))))) COLLECT (LIST POS SIZE NEWBYTE VAL RESULT)) NIL)
;; Loading (DEFTEST DPB.3 (LOOP FOR X = (RANDOM-FIXNUM) FOR Y = (RANDOM-FIXNUM) FOR POS = (RANDOM 32) REPEAT 100 ALWAYS (= (DPB X (BYTE 0 POS) Y) Y)) T)
;; Loading (DEFTEST DPB.4 (LET ((BOUND (ASH 1 200))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR Y = (RANDOM-FROM-INTERVAL BOUND) FOR POS = (RANDOM 200) REPEAT 100 ALWAYS (= (DPB X (BYTE 0 POS) Y) Y))) T)
;; Loading (DEFTEST DPB.5 (LOOP FOR I OF-TYPE FIXNUM FROM -1000 TO 1000 ALWAYS (EQL (DPB -1 (BYTE 0 0) I) I)) T)
;; Loading (LOAD "ldb.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ldb.lsp 816A9C57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LDB.ERROR.1 (SIGNALS-ERROR (LDB) PROGRAM-ERROR) T)
;; Loading (DEFTEST LDB.ERROR.2 (SIGNALS-ERROR (LDB (BYTE 1 1)) PROGRAM-ERROR) T)
;; Loading (DEFTEST LDB.ERROR.3 (SIGNALS-ERROR (LDB (BYTE 1 1) -1 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST LDB.1 (LOOP FOR X = (RANDOM-FIXNUM) FOR POS = (RANDOM 30) FOR SIZE = (RANDOM 30) REPEAT 10000 UNLESS (EQL (LDB (BYTE SIZE POS) X) (LOGAND (1- (ASH 1 SIZE)) (ASH X (- POS)))) COLLECT (LIST X POS SIZE)) NIL)
;; Loading (DEFTEST LDB.2 (LET ((BOUND (ASH 1 300))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR POS = (RANDOM 300) FOR SIZE = (RANDOM 300) REPEAT 1000 UNLESS (EQL (LDB (BYTE SIZE POS) X) (LOGAND (1- (ASH 1 SIZE)) (ASH X (- POS)))) COLLECT (LIST X POS SIZE))) NIL)
;; Loading (DEFTEST LDB.3 (LOOP FOR I OF-TYPE FIXNUM FROM -1000 TO 1000 ALWAYS (EQL (LDB (BYTE 0 0) I) 0)) T)
;; Loading (DEFTEST LDB.ORDER.1 (LET ((I 0) A B C D) (VALUES (LDB (PROGN (SETF A (INCF I)) (BYTE (PROGN (SETF B (INCF I)) 3) (PROGN (SETF C (INCF I)) 1))) (PROGN (SETF D (INCF I)) -1)) I A B C D)) 7 4 1 2 3 4)
;; Loading (DEFTEST LDB.PLACE.1 (LET ((X 0)) (VALUES (SETF (LDB (BYTE 4 1) X) -1) X)) -1 30)
;; Loading (DEFTEST LDB.PLACE.2 (LOOP FOR POS FROM 0 TO 100 ALWAYS (LOOP FOR SIZE FROM 0 TO 100 ALWAYS (LET ((X 0)) (AND (EQL (SETF (LDB (BYTE SIZE POS) X) -1) -1) (EQL X (ASH (1- (ASH 1 SIZE)) POS)))))) T)
;; Loading (DEFTEST LDB.PLACE.ORDER.1 (LET ((I 0) A B C D E F (X (COPY-SEQ #(63)))) (VALUES (SETF (LDB (PROGN (SETF A (INCF I)) (BYTE (PROGN (SETF B (INCF I)) 3) (PROGN (SETF C (INCF I)) 1))) (AREF (PROGN (SETF D (INCF I)) X) (PROGN (SETF E (INCF I)) 0))) (PROGN (SETF F (INCF I)) 0)) X I A B C D E F)) 0 #(49) 6 1 2 3 4 5 6)
;; Loading (LOAD "mask-field.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/mask-field.lsp 81735CC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MASK-FIELD.ERROR.1 (SIGNALS-ERROR (MASK-FIELD) PROGRAM-ERROR) T)
;; Loading (DEFTEST MASK-FIELD.ERROR.2 (SIGNALS-ERROR (MASK-FIELD (BYTE 1 1)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MASK-FIELD.ERROR.3 (SIGNALS-ERROR (MASK-FIELD (BYTE 1 1) -1 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST MASK-FIELD.1 (LOOP FOR X = (RANDOM-FIXNUM) FOR POS = (RANDOM 30) FOR SIZE = (RANDOM 30) REPEAT 10000 UNLESS (EQL (MASK-FIELD (BYTE SIZE POS) X) (LOGAND (ASH (1- (ASH 1 SIZE)) POS) X)) COLLECT (LIST X POS SIZE)) NIL)
;; Loading (DEFTEST MASK-FIELD.2 (LET ((BOUND (ASH 1 300))) (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR POS = (RANDOM 300) FOR SIZE = (RANDOM 300) REPEAT 1000 UNLESS (EQL (MASK-FIELD (BYTE SIZE POS) X) (LOGAND (ASH (1- (ASH 1 SIZE)) POS) X)) COLLECT (LIST X POS SIZE))) NIL)
;; Loading (DEFTEST MASK-FIELD.3 (LOOP FOR I OF-TYPE FIXNUM FROM -1000 TO 1000 ALWAYS (EQL (MASK-FIELD (BYTE 0 0) I) 0)) T)
;; Loading (DEFTEST MASK-FIELD.ORDER.1 (LET ((I 0) A B C D) (VALUES (MASK-FIELD (PROGN (SETF A (INCF I)) (BYTE (PROGN (SETF B (INCF I)) 3) (PROGN (SETF C (INCF I)) 1))) (PROGN (SETF D (INCF I)) -1)) I A B C D)) 14 4 1 2 3 4)
;; Loading (DEFTEST MASK-FIELD.PLACE.1 (LET ((X 0)) (VALUES (SETF (MASK-FIELD (BYTE 4 1) X) -1) X)) -1 30)
;; Loading (DEFTEST MASK-FIELD.PLACE.2 (LOOP FOR POS FROM 0 TO 100 ALWAYS (LOOP FOR SIZE FROM 0 TO 100 ALWAYS (LET ((X 0) (FIELD (ASH 1 POS))) (AND (EQL (SETF (MASK-FIELD (BYTE SIZE POS) X) FIELD) FIELD) (IF (> SIZE 0) (EQL X FIELD) (EQL X 0)))))) T)
;; Loading (DEFTEST MASK-FIELD.PLACE.ORDER.1 (LET ((I 0) A B C D E F (X (COPY-SEQ #(63)))) (VALUES (SETF (MASK-FIELD (PROGN (SETF A (INCF I)) (BYTE (PROGN (SETF B (INCF I)) 3) (PROGN (SETF C (INCF I)) 1))) (AREF (PROGN (SETF D (INCF I)) X) (PROGN (SETF E (INCF I)) 0))) (PROGN (SETF F (INCF I)) (LOGNOT 14))) X I A B C D E F)) -15 #(49) 6 1 2 3 4 5 6)
;; Loading (LOAD "float.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/float.lsp 817C8FC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FLOAT.ERROR.1 (SIGNALS-ERROR (FLOAT) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLOAT.ERROR.2 (SIGNALS-ERROR (FLOAT 0 0.0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLOAT.1 (NOTNOT (MEMBER (FLOAT 0) (QUOTE (0.0 0.0)))) T)
;; Loading (DEFTEST FLOAT.2 (FLOAT 1) 1.0)
;; Loading (DEFTEST FLOAT.3 (FLOAT -1) -1.0)
;; Loading (DEFTEST FLOAT.4 (LOOP FOR I FROM -1000 TO 1000 ALWAYS (LOOP FOR X IN (QUOTE (0.0 0.0 0.0 0.0)) FOR TP IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR Y = (FLOAT I X) ALWAYS (AND (= I Y) (TYPEP Y TP)))) T)
;; Loading (DEFTEST FLOAT.5 (LOOP FOR X IN *REALS* ALWAYS (OR (NOT (FLOATP X)) (EQL (FLOAT X) X))) T)
;; Loading (DEFTEST FLOAT.6 (LOOP FOR X IN *REALS* UNLESS (HANDLER-CASE (OR (NOT (TYPEP X (QUOTE SHORT-FLOAT))) (LET ((Y (FLOAT X 0.0))) (AND (TYPEP Y (QUOTE SINGLE-FLOAT)) (= X Y)))) (ARITHMETIC-ERROR NIL T)) COLLECT X) NIL)
;; Loading (DEFTEST FLOAT.7 (LOOP FOR X IN *REALS* UNLESS (OR (NOT (TYPEP X (QUOTE SHORT-FLOAT))) (LET ((Y (FLOAT X 0.0))) (AND (TYPEP Y (QUOTE DOUBLE-FLOAT)) (= X Y)))) COLLECT X) NIL)
;; Loading (DEFTEST FLOAT.8 (LOOP FOR X IN *REALS* UNLESS (OR (NOT (TYPEP X (QUOTE SHORT-FLOAT))) (LET ((Y (FLOAT X 0.0))) (AND (TYPEP Y (QUOTE LONG-FLOAT)) (= X Y)))) COLLECT X) NIL)
;; Loading (DEFTEST FLOAT.9 (LOOP FOR X IN *REALS* UNLESS (OR (NOT (TYPEP X (QUOTE SINGLE-FLOAT))) (LET ((Y (FLOAT X 0.0))) (AND (TYPEP Y (QUOTE DOUBLE-FLOAT)) (= X Y)))) COLLECT X) NIL)
;; Loading (DEFTEST FLOAT.10 (LOOP FOR X IN *REALS* UNLESS (OR (NOT (TYPEP X (QUOTE SINGLE-FLOAT))) (LET ((Y (FLOAT X 0.0))) (AND (TYPEP Y (QUOTE LONG-FLOAT)) (= X Y)))) COLLECT X) NIL)
;; Loading (DEFTEST FLOAT.11 (LOOP FOR X IN *REALS* UNLESS (OR (NOT (TYPEP X (QUOTE DOUBLE-FLOAT))) (LET ((Y (FLOAT X 0.0))) (AND (TYPEP Y (QUOTE LONG-FLOAT)) (= X Y)))) COLLECT X) NIL)
;; Loading (LOAD "floatp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/floatp.lsp 81858F37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FLOATP.ERROR.1 (SIGNALS-ERROR (FLOATP) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLOATP.ERROR.2 (SIGNALS-ERROR (FLOATP 1.0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FLOATP.1 (NOTNOT-MV (FLOATP 1.0)) T)
;; Loading (DEFTEST FLOATP.2 (FLOATP NIL) NIL)
;; Loading (DEFTEST FLOATP.3 (CHECK-TYPE-PREDICATE (FUNCTION FLOATP) (QUOTE FLOAT)) NIL)
;; Loading (LOAD "rational.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rational.lsp 818881B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RATIONAL.ERROR.1 (SIGNALS-ERROR (RATIONAL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONAL.ERROR.2 (SIGNALS-ERROR (RATIONAL 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONAL.ERROR.3 (SIGNALS-ERROR (RATIONAL 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONAL.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION RATIONAL) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST RATIONAL.1 (LOOP FOR X IN (LOOP FOR R IN *REALS* WHEN (OR (NOT (FLOATP R)) (<= -1000 (NTH-VALUE 1 (INTEGER-DECODE-FLOAT R)) 1000)) COLLECT R) FOR R = (RATIONAL X) UNLESS (AND (RATIONALP R) (IF (FLOATP X) (= (FLOAT R X) X) (EQL X R))) COLLECT (LIST X R)) NIL)
;; Loading (DEFTEST RATIONAL.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (LOOP FOR I FROM -10000 TO 10000 FOR X = (COERCE I TYPE) FOR R = (RATIONAL X) COUNT (NOT (EQL R I)))) (0 0 0 0))
;; Loading (DEFTEST RATIONAL.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BOUND IN (QUOTE (100000.0 10000000000.0 0.0 0.0)) NCONC (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR R = (RATIONAL X) FOR X2 = (FLOAT R X) REPEAT 1000 UNLESS (AND (RATIONALP R) (= X X2)) COLLECT (LIST X R X2))) NIL)
;; Loading (LOAD "rationalize.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rationalize.lsp 818EC507>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RATIONALIZE.ERROR.1 (SIGNALS-ERROR (RATIONALIZE) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONALIZE.ERROR.2 (SIGNALS-ERROR (RATIONALIZE 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONALIZE.ERROR.3 (SIGNALS-ERROR (RATIONALIZE 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST RATIONALIZE.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION RATIONALIZE) (FUNCTION REALP)) NIL)
;; Loading (DEFTEST RATIONALIZE.1 (LOOP FOR X IN (LOOP FOR R IN *REALS* WHEN (OR (NOT (FLOATP R)) (<= -1000 (NTH-VALUE 1 (INTEGER-DECODE-FLOAT R)) 1000)) COLLECT R) FOR R = (RATIONALIZE X) UNLESS (AND (RATIONALP R) (IF (FLOATP X) (= (FLOAT R X) X) (EQL X R))) COLLECT (LIST X R)) NIL)
;; Loading (DEFTEST RATIONALIZE.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) COLLECT (LOOP FOR I FROM -10000 TO 10000 FOR X = (COERCE I TYPE) FOR R = (RATIONALIZE X) COUNT (NOT (EQL R I)))) (0 0 0 0))
;; Loading (DEFTEST RATIONALIZE.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR BOUND IN (QUOTE (100000.0 10000000000.0 0.0 0.0)) NCONC (LOOP FOR X = (RANDOM-FROM-INTERVAL BOUND) FOR R = (RATIONALIZE X) FOR X2 = (FLOAT R X) REPEAT 1000 UNLESS (AND (RATIONALP R) (= X X2)) COLLECT (LIST X R X2))) NIL)
;; Loading (LOAD "evenp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/evenp.lsp 819522B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST EVENP.ERROR.1 (SIGNALS-ERROR (EVENP) PROGRAM-ERROR) T)
;; Loading (DEFTEST EVENP.ERROR.2 (SIGNALS-ERROR (EVENP 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST EVENP.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION EVENP) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST EVENP.1 (LOOP FOR X IN *NUMBERS* WHEN (INTEGERP X) DO (EVENP X)) NIL)
;; Loading (DEFTEST EVENP.3 (LOOP FOR X = (RANDOM-FIXNUM) REPEAT 10000 WHEN (OR (NOT (EVENP (+ X X))) (EVENP (+ X X 1)) (IF (EVENP X) (OR (EVENP (1+ X)) (EVENP (1- X)) (/= (MOD X 2) 0)) (OR (NOT (EVENP (1+ X))) (NOT (EVENP (1- X))) (= (MOD X 2) 0)))) COLLECT X) NIL)
;; Loading (DEFTEST EVENP.4 (LET ((UPPER-BOUND 1000000000000000) (LOWER-BOUND -1000000000000000)) (LOOP FOR X = (RANDOM-FROM-INTERVAL UPPER-BOUND LOWER-BOUND) REPEAT 10000 WHEN (OR (NOT (EVENP (+ X X))) (EVENP (+ X X 1)) (IF (EVENP X) (OR (EVENP (1+ X)) (EVENP (1- X)) (/= (MOD X 2) 0)) (OR (NOT (EVENP (1+ X))) (NOT (EVENP (1- X))) (= (MOD X 2) 0)))) COLLECT X)) NIL)
;; Loading (DEFTEST EVENP.5 (NOTNOT-MV (EVENP 0)) T)
;; Loading (DEFTEST EVENP.6 (EVENP 1) NIL)
;; Loading (DEFTEST EVENP.7 (NOTNOT-MV (EVENP 100000000000000000000000000000000)) T)
;; Loading (DEFTEST EVENP.8 (EVENP 100000000000000000000000000000001) NIL)
;; Loading (LOAD "oddp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/oddp.lsp C12C3597>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST ODDP.ERROR.1 (SIGNALS-ERROR (ODDP) PROGRAM-ERROR) T)
;; Loading (DEFTEST ODDP.ERROR.2 (SIGNALS-ERROR (ODDP 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ODDP.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION ODDP) (FUNCTION INTEGERP)) NIL)
;; Loading (DEFTEST ODDP.1 (LOOP FOR X IN *NUMBERS* WHEN (INTEGERP X) DO (ODDP X)) NIL)
;; Loading (DEFTEST ODDP.3 (LOOP FOR X = (RANDOM-FIXNUM) REPEAT 10000 WHEN (OR (ODDP (+ X X)) (NOT (ODDP (+ X X 1))) (IF (ODDP X) (OR (ODDP (1+ X)) (ODDP (1- X)) (/= (MOD X 2) 1)) (OR (NOT (ODDP (1+ X))) (NOT (ODDP (1- X))) (/= (MOD X 2) 0)))) COLLECT X) NIL)
;; Loading (DEFTEST ODDP.4 (LET ((UPPER-BOUND 1000000000000000) (LOWER-BOUND -1000000000000000)) (LOOP FOR X = (RANDOM-FROM-INTERVAL UPPER-BOUND LOWER-BOUND) REPEAT 10000 WHEN (OR (ODDP (+ X X)) (NOT (ODDP (+ X X 1))) (IF (ODDP X) (OR (ODDP (1+ X)) (ODDP (1- X)) (/= (MOD X 2) 1)) (OR (NOT (ODDP (1+ X))) (NOT (ODDP (1- X))) (/= (MOD X 2) 0)))) COLLECT X)) NIL)
;; Loading (DEFTEST ODDP.5 (NOTNOT-MV (ODDP 1)) T)
;; Loading (DEFTEST ODDP.6 (ODDP 0) NIL)
;; Loading (DEFTEST ODDP.7 (NOTNOT-MV (ODDP 100000000000000000000000000000001)) T)
;; Loading (DEFTEST ODDP.8 (ODDP 100000000000000000000000000000000) NIL)
;; Loading (LOAD "epsilons.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/epsilons.lsp C13463A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "numbers-aux.lsp")
;; Loading (DEFTEST EPSILONS.1 (LOOP FOR E IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) WHEN (= (FLOAT 1 E) (+ (FLOAT 1 E) E)) COLLECT E) NIL)
;; Loading (DEFTEST EPSILONS.2 (LOOP FOR E IN (LIST SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-NEGATIVE-EPSILON) WHEN (= (FLOAT 1 E) (- (FLOAT 1 E) E)) COLLECT E) NIL)
;; Loading (DEFTEST EPSILONS.3 (LOOP FOR E IN (LIST SHORT-FLOAT-EPSILON SINGLE-FLOAT-EPSILON DOUBLE-FLOAT-EPSILON LONG-FLOAT-EPSILON) UNLESS (= (FLOAT 1 E) (+ (FLOAT 1 E) (/ E 2))) COLLECT E) NIL)
;; Loading (DEFTEST EPSILONS.4 (LOOP FOR E IN (LIST SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-NEGATIVE-EPSILON) UNLESS (= (FLOAT 1 E) (- (FLOAT 1 E) (/ E 2))) COLLECT E) NIL)
;; Loading (DEFTEST EPSILONS.5 (LOOP FOR (TYPE VAR) IN (QUOTE ((SHORT-FLOAT SHORT-FLOAT-EPSILON) (SHORT-FLOAT SHORT-FLOAT-NEGATIVE-EPSILON) (SINGLE-FLOAT SINGLE-FLOAT-EPSILON) (SINGLE-FLOAT SINGLE-FLOAT-NEGATIVE-EPSILON) (DOUBLE-FLOAT DOUBLE-FLOAT-EPSILON) (DOUBLE-FLOAT DOUBLE-FLOAT-NEGATIVE-EPSILON) (LONG-FLOAT LONG-FLOAT-EPSILON) (LONG-FLOAT LONG-FLOAT-NEGATIVE-EPSILON))) FOR VAL = (SYMBOL-VALUE VAR) UNLESS (TYPEP VAL TYPE) COLLECT (LIST TYPE VAR VAL)) NIL)
;; Loading (DEFTEST EPSILONS.6 (FLET ((%CHECK (X) (/= 1.0 (+ 1.0 X)))) (LET ((EPS (FLOAT-BINARY-SEARCH (FUNCTION %CHECK) 0.0 1.0))) (IF (= EPS SHORT-FLOAT-EPSILON) :GOOD (LIST EPS SHORT-FLOAT-EPSILON)))) :GOOD)
;; Loading (DEFTEST EPSILONS.7 (FLET ((%CHECK (X) (/= 1.0 (+ 1.0 X)))) (LET ((EPS (FLOAT-BINARY-SEARCH (FUNCTION %CHECK) 0.0 1.0))) (IF (= EPS SINGLE-FLOAT-EPSILON) :GOOD (LIST EPS SINGLE-FLOAT-EPSILON)))) :GOOD)
;; Loading (DEFTEST EPSILONS.8 (FLET ((%CHECK (X) (/= 1.0 (+ 1.0 X)))) (LET ((EPS (FLOAT-BINARY-SEARCH (FUNCTION %CHECK) 0.0 1.0))) (IF (= EPS DOUBLE-FLOAT-EPSILON) :GOOD (LIST EPS DOUBLE-FLOAT-EPSILON)))) :GOOD)
;; Loading (DEFTEST EPSILONS.9 (FLET ((%CHECK (X) (/= 1.0 (+ 1.0 X)))) (LET ((EPS (FLOAT-BINARY-SEARCH (FUNCTION %CHECK) 0.0 1.0))) (IF (= EPS LONG-FLOAT-EPSILON) :GOOD (LIST EPS LONG-FLOAT-EPSILON)))) :GOOD)
;; Loading (DEFTEST EPSILONS.10 (FLET ((%CHECK (X) (/= 1.0 (- 1.0 X)))) (LET ((EPS (FLOAT-BINARY-SEARCH (FUNCTION %CHECK) 0.0 1.0))) (IF (= EPS SHORT-FLOAT-NEGATIVE-EPSILON) :GOOD (LIST EPS SHORT-FLOAT-NEGATIVE-EPSILON)))) :GOOD)
;; Loading (DEFTEST EPSILONS.11 (FLET ((%CHECK (X) (/= 1.0 (- 1.0 X)))) (LET ((EPS (FLOAT-BINARY-SEARCH (FUNCTION %CHECK) 0.0 1.0))) (IF (= EPS SINGLE-FLOAT-NEGATIVE-EPSILON) :GOOD (LIST EPS SINGLE-FLOAT-NEGATIVE-EPSILON)))) :GOOD)
;; Loading (DEFTEST EPSILONS.12 (FLET ((%CHECK (X) (/= 1.0 (- 1.0 X)))) (LET ((EPS (FLOAT-BINARY-SEARCH (FUNCTION %CHECK) 0.0 1.0))) (IF (= EPS DOUBLE-FLOAT-NEGATIVE-EPSILON) :GOOD (LIST EPS DOUBLE-FLOAT-NEGATIVE-EPSILON)))) :GOOD)
;; Loading (DEFTEST EPSILONS.13 (FLET ((%CHECK (X) (/= 1.0 (- 1.0 X)))) (LET ((EPS (FLOAT-BINARY-SEARCH (FUNCTION %CHECK) 0.0 1.0))) (IF (= EPS LONG-FLOAT-NEGATIVE-EPSILON) :GOOD (LIST EPS LONG-FLOAT-NEGATIVE-EPSILON)))) :GOOD)
;; Loading (LOAD "real.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/real.lsp C1426AE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REAL.1 (LOOP FOR I = 1 THEN (ASH I 1) FOR TP = (SYSTEM.INTERNALS::BACKQUOTE (REAL 0 (SYSTEM.INTERNALS::BQ-COMMA I))) REPEAT 200 UNLESS (AND (NOT (TYPEP -1 TP)) (NOT (TYPEP -0.000099 TP)) (TYPEP 0 TP) (TYPEP 0.000099 TP) (TYPEP 1 TP) (TYPEP I TP) (NOT (TYPEP (1+ I) TP))) COLLECT (LIST I TP)) NIL)
;; Loading (DEFTEST REAL.2 (LOOP FOR I = 1 THEN (ASH I 1) FOR TP = (SYSTEM.INTERNALS::BACKQUOTE (REAL (SYSTEM.INTERNALS::BQ-COMMA (- I)) 0)) REPEAT 200 UNLESS (AND (NOT (TYPEP (- -1 I) TP)) (TYPEP (- I) TP) (TYPEP -1 TP) (TYPEP 0 TP) (NOT (TYPEP 1 TP)) (NOT (TYPEP I TP)) (NOT (TYPEP (1+ I) TP))) COLLECT (LIST I TP)) NIL)
;; Loading (DEFTEST REAL.3 (LOOP FOR I = 4 THEN (ASH I 1) FOR TP = (SYSTEM.INTERNALS::BACKQUOTE (REAL 0 (SYSTEM.INTERNALS::BQ-COMMA (/ I 3)))) REPEAT 200 UNLESS (AND (NOT (TYPEP -1 TP)) (NOT (TYPEP -0.000099 TP)) (TYPEP 0 TP) (TYPEP 0.000099 TP) (TYPEP 1 TP) (TYPEP (/ I 3) TP) (NOT (TYPEP (/ (1+ I) 3) TP))) COLLECT (LIST I TP)) NIL)
;; Loading (DEFTEST REAL.4 (LOOP FOR I = 4 THEN (ASH I 1) FOR TP = (SYSTEM.INTERNALS::BACKQUOTE (REAL (SYSTEM.INTERNALS::BQ-COMMA (- (/ I 3))) 0)) REPEAT 200 UNLESS (AND (NOT (TYPEP (- -1 (/ I 3)) TP)) (TYPEP (- (/ I 3)) TP) (TYPEP -1 TP) (TYPEP 0 TP) (NOT (TYPEP 1 TP)) (NOT (TYPEP (/ I 3) TP)) (NOT (TYPEP (1+ (/ I 3)) TP))) COLLECT (LIST I TP)) NIL)
;; Loading (LOAD "upgraded-complex-part-type.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/upgraded-complex-part-type.lsp C14BE717>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFMACRO DEF-UCPT-TEST (NAME TYPES) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LOOP FOR TYPE IN (REMOVE-DUPLICATES (SYSTEM.INTERNALS::BQ-COMMA TYPES)) FOR UPGRADED-TYPE = (UPGRADED-COMPLEX-PART-TYPE TYPE) FOR RESULT = (APPEND (CHECK-ALL-SUBTYPEP TYPE UPGRADED-TYPE) (CHECK-ALL-SUBTYPEP TYPE (QUOTE REAL)) (CHECK-ALL-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) (QUOTE COMPLEX)) (CHECK-ALL-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA UPGRADED-TYPE))) (QUOTE COMPLEX)) (CHECK-ALL-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA UPGRADED-TYPE))))) WHEN RESULT COLLECT RESULT) NIL)))
;; Loading (DEF-UCPT-TEST UPGRADED-COMPLEX-PART-TYPE.1 (QUOTE (REAL INTEGER RATIONAL RATIO FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FIXNUM BIGNUM BIT UNSIGNED-BYTE SIGNED-BYTE)))
;; Loading (DEF-UCPT-TEST UPGRADED-COMPLEX-PART-TYPE.2 (MAPCAR (FUNCTION FIND-CLASS) (QUOTE (REAL FLOAT INTEGER RATIONAL RATIO))))
;; Loading (DEF-UCPT-TEST UPGRADED-COMPLEX-PART-TYPE.3 (MAPCAR (FUNCTION CLASS-OF) (QUOTE (1.0 1.0 1.0 1.0))))
;; Loading (DEF-UCPT-TEST UPGRADED-COMPLEX-PART-TYPE.4 (LOOP FOR I FROM 1 TO 100 COLLECT (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))))
;; Loading (DEF-UCPT-TEST UPGRADED-COMPLEX-PART-TYPE.5 (LOOP FOR I FROM 1 TO 100 COLLECT (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))))
;; Loading (DEF-UCPT-TEST UPGRADED-COMPLEX-PART-TYPE.6 (LOOP FOR I = 1 THEN (* I 2) REPEAT 100 COLLECT (CLASS-OF I)))
;; Loading (DEFTEST UPGRADED-COMPLEX-PART-TYPE.7 (LOOP FOR TYPE IN (QUOTE (REAL INTEGER RATIONAL FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FIXNUM BIGNUM BIT UNSIGNED-BYTE SIGNED-BYTE)) FOR UT1 = (UPGRADED-COMPLEX-PART-TYPE TYPE) FOR UT2 = (UPGRADED-COMPLEX-PART-TYPE TYPE NIL) UNLESS (EQUAL UT1 UT2) COLLECT (LIST TYPE UT1 UT2)) NIL)
;; Loading (DEFTEST UPGRADED-COMPLEX-PART-TYPE.8 (LOOP FOR TYPE IN (QUOTE (REAL INTEGER RATIONAL FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FIXNUM BIGNUM BIT UNSIGNED-BYTE SIGNED-BYTE)) FOR UT1 = (UPGRADED-COMPLEX-PART-TYPE TYPE) FOR UT2 = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((%M (&ENVIRONMENT ENV) (LIST (QUOTE QUOTE) (UPGRADED-COMPLEX-PART-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TYPE)) ENV)))) (%M)))) UNLESS (EQUAL UT1 UT2) COLLECT (LIST TYPE UT1 UT2)) NIL)
;; Loading (DEFTEST UPGRADED-COMPLEX-PART-TYPE.9 (LET* ((TYPES (SYSTEM.INTERNALS::BACKQUOTE (NIL INTEGER FIXNUM BIGNUM FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL RATIO REAL (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (REMOVE-DUPLICATES (MAPCAR (FUNCTION CLASS-OF) (QUOTE (0.0 0.0 0.0 0.0 0 100000000000000000))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (MAPCAR (FUNCTION (LAMBDA (X) (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA X))))) (REMOVE-DUPLICATES (QUOTE (0.0 0.0 0.0 0.0 0 1.0 1.0 1.0 1.0 1 100000000000000000)))))))) (UTYPES (MAPCAR (FUNCTION UPGRADED-COMPLEX-PART-TYPE) TYPES))) (LOOP FOR SUBLIST ON TYPES FOR USUBLIST ON UTYPES FOR TP1 = (CAR SUBLIST) FOR UTP1 = (CAR USUBLIST) NCONC (LOOP FOR TP2 IN (CDR SUBLIST) FOR UTP2 IN (CDR USUBLIST) NCONC (AND (SUBTYPEP TP1 TP2) (LET ((RESULT (CHECK-ALL-SUBTYPEP UTP1 UTP2))) (AND RESULT (LIST (LIST TP1 TP2 RESULT)))))))) NIL)
;; Loading (DEFTEST UPGRADED-COMPLEX-PART-TYPE.ERROR.1 (SIGNALS-ERROR (UPGRADED-COMPLEX-PART-TYPE) PROGRAM-ERROR) T)
;; Loading (DEFTEST UPGRADED-COMPLEX-PART-TYPE.ERROR.2 (SIGNALS-ERROR (UPGRADED-COMPLEX-PART-TYPE (QUOTE REAL) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "arithmetic-error.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/arithmetic-error.lsp C15E29B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARITHMETHIC-ERROR.1 (LET ((A (MAKE-CONDITION (QUOTE ARITHMETIC-ERROR) :OPERATION (QUOTE /) :OPERANDS (QUOTE (0 0))))) (VALUES (NOTNOT (TYPEP A (QUOTE ARITHMETIC-ERROR))) (NOTNOT (TYPEP A (FIND-CLASS (QUOTE ARITHMETIC-ERROR)))) (MULTIPLE-VALUE-LIST (ARITHMETIC-ERROR-OPERATION A)) (MULTIPLE-VALUE-LIST (ARITHMETIC-ERROR-OPERANDS A)))) T T (/) ((0 0)))
;; Loading (DEFTEST ARITHMETHIC-ERROR.2 (LET ((A (MAKE-CONDITION (QUOTE ARITHMETIC-ERROR) :OPERATION (FUNCTION /) :OPERANDS (QUOTE (0 0))))) (VALUES (NOTNOT (TYPEP A (QUOTE ARITHMETIC-ERROR))) (NOTNOT (TYPEP A (QUOTE ERROR))) (NOTNOT (TYPEP A (QUOTE SERIOUS-CONDITION))) (NOTNOT (TYPEP A (QUOTE CONDITION))) (NOTNOT (TYPEP A (FIND-CLASS (QUOTE ARITHMETIC-ERROR)))) (NOTNOT (TYPEP (ARITHMETIC-ERROR-OPERATION A) (QUOTE FUNCTION))) (FUNCALL (ARITHMETIC-ERROR-OPERATION A) 1 2) (MULTIPLE-VALUE-LIST (ARITHMETIC-ERROR-OPERANDS A)))) T T T T T T 1/2 ((0 0)))
;; Loading (DEFTEST ARITHMETIC-ERROR.3 (LET ((A (MAKE-CONDITION (QUOTE ARITHMETIC-ERROR) :OPERATION (QUOTE /) :OPERANDS (QUOTE (0 0))))) (MACROLET ((%M (Z) Z)) (VALUES (ARITHMETIC-ERROR-OPERATION (EXPAND-IN-CURRENT-ENV (%M A))) (ARITHMETIC-ERROR-OPERANDS (EXPAND-IN-CURRENT-ENV (%M A)))))) / (0 0))
;; Loading (DEFTEST ARITHMETIC-ERROR-OPERATION.ERROR.1 (SIGNALS-ERROR (ARITHMETIC-ERROR-OPERATION) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARITHMETIC-ERROR-OPERATION.ERROR.2 (SIGNALS-ERROR (ARITHMETIC-ERROR-OPERATION (MAKE-CONDITION (QUOTE ARITHMETIC-ERROR) :OPERATION (QUOTE /) :OPERANDS (QUOTE (1 0))) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARITHMETIC-ERROR-OPERANDS.ERROR.1 (SIGNALS-ERROR (ARITHMETIC-ERROR-OPERANDS) PROGRAM-ERROR) T)
;; Loading (DEFTEST ARITHMETIC-ERROR-OPERANDS.ERROR.2 (SIGNALS-ERROR (ARITHMETIC-ERROR-OPERANDS (MAKE-CONDITION (QUOTE ARITHMETIC-ERROR) :OPERATION (QUOTE /) :OPERANDS (QUOTE (1 0))) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "load-sequences.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-sequences.lsp C166BB77>
;; Loading (LOAD "copy-seq.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/copy-seq.lsp C167D357>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COPY-SEQ.1 (COPY-SEQ NIL) NIL)
;; Loading (DEFTEST COPY-SEQ.2 (LET* ((S1 (QUOTE (A B C))) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) (EQUALT S1 S2))) T)
;; Loading (DEFTEST COPY-SEQ.3 (LET* ((S1 #(A B C)) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) S2)) #(A B C))
;; Loading (DEFTEST COPY-SEQ.4 (LET* ((S1 (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D)) :ADJUSTABLE T)) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) (SIMPLE-VECTOR-P S2) S2)) #(A B C D))
;; Loading (DEFTEST COPY-SEQ.5 (LET* ((S1 (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D)) :FILL-POINTER 3)) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) (SIMPLE-VECTOR-P S2) S2)) #(A B C))
;; Loading (DEFTEST COPY-SEQ.6 (LET* ((A1 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (A B C D E F)))) (A2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 1)) (S2 (CHECK-VALUES (COPY-SEQ A2)))) (AND (NOT (EQL A2 S2)) (SIMPLE-VECTOR-P S2) S2)) #(B C D E))
;; Loading (DEFTEST COPY-SEQ.7 (LET* ((S1 (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)) :ADJUSTABLE T)) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) (SIMPLE-STRING-P S2) S2)) "abcd")
;; Loading (DEFTEST COPY-SEQ.8 (LET* ((S1 (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)) :FILL-POINTER 3)) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) (SIMPLE-STRING-P S2) S2)) "abc")
;; Loading (DEFTEST COPY-SEQ.9 (LET* ((A1 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e #\f)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (A2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO A1 :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-INDEX-OFFSET 1)) (S2 (CHECK-VALUES (COPY-SEQ A2)))) (AND (NOT (EQL A2 S2)) (SIMPLE-STRING-P S2) S2)) "bcde")
;; Loading (DEFTEST COPY-SEQ.10 (LET* ((S1 "abcd") (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) S2)) "abcd")
;; Loading (DEFTEST COPY-SEQ.11 (LET* ((S1 #*0010110) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) (SIMPLE-BIT-VECTOR-P S2) S2)) #*0010110)
;; Loading (DEFTEST COPY-SEQ.12 (LET* ((S1 (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (0 0 1 0)) :ELEMENT-TYPE (QUOTE BIT) :ADJUSTABLE T)) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) (SIMPLE-BIT-VECTOR-P S2) S2)) #*0010)
;; Loading (DEFTEST COPY-SEQ.13 (LET* ((S1 (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (0 0 1 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 3)) (S2 (CHECK-VALUES (COPY-SEQ S1)))) (AND (NOT (EQL S1 S2)) (SIMPLE-BIT-VECTOR-P S2) S2)) #*001)
;; Loading (DEFTEST COPY-SEQ.14 (LET* ((A1 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 1 1)) :ELEMENT-TYPE (QUOTE BIT))) (A2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (S2 (CHECK-VALUES (COPY-SEQ A2)))) (AND (NOT (EQL A2 S2)) (SIMPLE-BIT-VECTOR-P S2) S2)) #*0101)
;; Loading (DEFTEST COPY-SEQ.15 (COPY-SEQ "") "")
;; Loading (DEFTEST COPY-SEQ.16 (COPY-SEQ #*) #*)
;; Loading (DEFTEST COPY-SEQ.17 (COPY-SEQ #()) #())
;; Loading (DEFTEST COPY-SEQ.18 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)))) (Y (CHECK-VALUES (COPY-SEQ X)))) (EQUAL-ARRAY X Y)) T)
;; Loading (DEFTEST COPY-SEQ.19 :NOTES (:NIL-VECTORS-ARE-STRINGS) (COPY-SEQ (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST COPY-SEQ.20 (DO-SPECIAL-STRINGS (S "abcde" NIL) (LET ((S2 (COPY-SEQ S))) (ASSERT (TYPEP S2 (QUOTE SIMPLE-ARRAY))) (ASSERT (STRING= S S2)) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))))) NIL)
;; Loading (DEFTEST COPY-SEQ.21 (LET ((V0 #(1 1 0 1 1 2))) (DO-SPECIAL-INTEGER-VECTORS (V V0 NIL) (LET ((V2 (COPY-SEQ V))) (ASSERT (TYPEP V2 (QUOTE SIMPLE-ARRAY))) (ASSERT (EQUALP V V2)) (ASSERT (EQUALP V V0)) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE V) (ARRAY-ELEMENT-TYPE V2)))))) NIL)
;; Loading (DEFTEST COPY-SEQ.22 (LET ((V0 #(-1 1 1 0 1 -1 0))) (DO-SPECIAL-INTEGER-VECTORS (V V0 NIL) (LET ((V2 (COPY-SEQ V))) (ASSERT (TYPEP V2 (QUOTE SIMPLE-ARRAY))) (ASSERT (EQUALP V V2)) (ASSERT (EQUALP V V0)) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE V) (ARRAY-ELEMENT-TYPE V2)))))) NIL)
;; Loading (DEFTEST COPY-SEQ.23 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT)) FOR LEN = 10 FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COERCE I TYPE)) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE TYPE :INITIAL-CONTENTS VALS) FOR RESULT = (COPY-SEQ VEC) UNLESS (AND (= (LENGTH RESULT) LEN) (EQUAL (ARRAY-ELEMENT-TYPE VEC) (ARRAY-ELEMENT-TYPE RESULT)) (EQUALP VEC RESULT)) COLLECT (LIST TYPE VALS RESULT)) NIL)
;; Loading (DEFTEST COPY-SEQ.24 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT)) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA ETYPE))) FOR LEN = 10 FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I ETYPE) (COERCE (- I) ETYPE))) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE TYPE :INITIAL-CONTENTS VALS) FOR RESULT = (COPY-SEQ VEC) UNLESS (AND (= (LENGTH RESULT) LEN) (EQUAL (ARRAY-ELEMENT-TYPE VEC) (ARRAY-ELEMENT-TYPE RESULT)) (EQUALP VEC RESULT)) COLLECT (LIST TYPE VALS RESULT)) NIL)
;; Loading (DEFTEST COPY-SEQ.ORDER.1 (LET ((I 0)) (VALUES (COPY-SEQ (PROGN (INCF I) "abc")) I)) "abc" 1)
;; Loading (DEF-FOLD-TEST COPY-SEQ.FOLD.1 (COPY-SEQ (QUOTE (A B C))))
;; Loading (DEF-FOLD-TEST COPY-SEQ.FOLD.2 (COPY-SEQ #(A B C)))
;; Loading (DEF-FOLD-TEST COPY-SEQ.FOLD.3 (COPY-SEQ #*01101100))
;; Loading (DEF-FOLD-TEST COPY-SEQ.FOLD.4 (COPY-SEQ "abcdef"))
;; Loading (DEFTEST COPY-SEQ.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION COPY-SEQ) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST COPY-SEQ.ERROR.4 (SIGNALS-ERROR (COPY-SEQ) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-SEQ.ERROR.5 (SIGNALS-ERROR (COPY-SEQ "abc" 2 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-SEQ.ERROR.6 (SIGNALS-ERROR (LOCALLY (COPY-SEQ 10) T) TYPE-ERROR) T)
;; Loading (LOAD "elt.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/elt.lsp C17F6697>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST ELT.1 (SIGNALS-ERROR (ELT NIL 0) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.1A (SIGNALS-ERROR (ELT NIL -10) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.1B (SIGNALS-ERROR (LOCALLY (ELT NIL 0) T) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.2 (SIGNALS-ERROR (ELT NIL 1000000) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.3 (ELT (QUOTE (A B C D E)) 0) A)
;; Loading (DEFTEST ELT.4 (ELT (QUOTE (A B C D E)) 2) C)
;; Loading (DEFTEST ELT.5 (ELT (QUOTE (A B C D E)) 4) E)
;; Loading (DEFTEST ELT.5A (SIGNALS-ERROR (ELT (QUOTE (A B C D E)) -4) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.6 (LET ((X (MAKE-INT-LIST 1000))) (NOTNOT-MV (EVERY (FUNCTION (LAMBDA (I) (EQL I (ELT X I)))) X))) T)
;; Loading (DEFTEST ELT.7 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (Y (SETF (ELT X 0) (QUOTE E)))) (LIST X Y)) ((E B C D) E))
;; Loading (DEFTEST ELT.8 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (Y (SETF (ELT X 1) (QUOTE E)))) (LIST X Y)) ((A E C D) E))
;; Loading (DEFTEST ELT.9 (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (Y (SETF (ELT X 3) (QUOTE E)))) (LIST X Y)) ((A B C E) E))
;; Loading (DEFTEST ELT.10 (SIGNALS-ERROR (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (SETF (ELT X 4) (QUOTE D))) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.11 (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (LET ((Y (LOOP FOR C ON X COLLECT C))) (SETF (ELT X 2) (QUOTE F)) (NOTNOT-MV (EVERY (FUNCTION EQ) Y (LOOP FOR C ON X COLLECT C))))) T)
;; Loading (DEFTEST ELT.12 (LET ((X (MAKE-INT-LIST 100000))) (ELT X 90000)) 90000)
;; Loading (DEFTEST ELT.13 (LET ((X (MAKE-INT-LIST 100000))) (SETF (ELT X 80000) (QUOTE FOO)) (LIST (ELT X 79999) (ELT X 80000) (ELT X 80001))) (79999 FOO 80001))
;; Loading (DEFTEST ELT.14 (SIGNALS-ERROR (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (ELT X 10)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.15 (SIGNALS-ERROR (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (ELT X (QUOTE A))) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.16 (SIGNALS-ERROR (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (ELT X 10.0)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.17 (SIGNALS-ERROR (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (ELT X -1)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.18 (SIGNALS-ERROR (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (ELT X -100000000000000000)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.19 (SIGNALS-ERROR (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (ELT X #\w)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.ORDER.1 (LET ((I 0) X Y) (VALUES (ELT (PROGN (SETF X (INCF I)) (QUOTE (A B C D E))) (PROGN (SETF Y (INCF I)) 3)) I X Y)) D 2 1 2)
;; Loading (DEFTEST ELT.ORDER.2 (LET ((I 0) X Y Z) (LET ((A (MAKE-ARRAY 1 :INITIAL-ELEMENT (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))))) (VALUES (SETF (ELT (AREF A (PROGN (SETF X (INCF I)) 0)) (PROGN (SETF Y (INCF I)) 3)) (PROGN (SETF Z (INCF I)) (QUOTE K))) (AREF A 0) I X Y Z))) K (A B C K E) 3 1 2 3)
;; Loading (DEFTEST ELT-V.1 (SIGNALS-ERROR (ELT (MAKE-ARRAY (QUOTE (0))) 0) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-V.3 (ELT (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E))) 0) A)
;; Loading (DEFTEST ELT-V.4 (ELT (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E))) 2) C)
;; Loading (DEFTEST ELT-V.5 (ELT (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E))) 4) E)
;; Loading (DEFTEST ELT-V.6 (ELT-V-6-BODY) T)
;; Loading (DEFTEST ELT-V.7 (LET* ((X (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (Y (SETF (ELT X 0) (QUOTE E)))) (LIST (ELT X 0) (ELT X 1) (ELT X 2) (ELT X 3) Y)) (E B C D E))
;; Loading (DEFTEST ELT-V.8 (LET* ((X (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (Y (SETF (ELT X 1) (QUOTE E)))) (LIST (ELT X 0) (ELT X 1) (ELT X 2) (ELT X 3) Y)) (A E C D E))
;; Loading (DEFTEST ELT-V.9 (LET* ((X (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (Y (SETF (ELT X 3) (QUOTE E)))) (LIST (ELT X 0) (ELT X 1) (ELT X 2) (ELT X 3) Y)) (A B C E E))
;; Loading (DEFTEST ELT-V.10 (SIGNALS-ERROR (LET ((X (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C))))) (SETF (ELT X 4) (QUOTE D))) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-V.11 (SIGNALS-ERROR (LET ((X (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C))))) (SETF (ELT X -100) (QUOTE D))) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-V.12 (LET ((X (MAKE-INT-ARRAY 100000))) (ELT X 90000)) 90000)
;; Loading (DEFTEST ELT-V.13 (LET ((X (MAKE-INT-ARRAY 100000))) (SETF (ELT X 80000) (QUOTE FOO)) (LIST (ELT X 79999) (ELT X 80000) (ELT X 80001))) (79999 FOO 80001))
;; Loading (DEFTEST ELT-ADJ-ARRAY.1 (SIGNALS-ERROR (ELT (MAKE-ADJ-ARRAY (QUOTE (0))) 0) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-ADJ-ARRAY.3 (ELT (MAKE-ADJ-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E))) 0) A)
;; Loading (DEFTEST ELT-ADJ-ARRAY.4 (ELT (MAKE-ADJ-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E))) 2) C)
;; Loading (DEFTEST ELT-ADJ-ARRAY.5 (ELT (MAKE-ADJ-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E))) 4) E)
;; Loading (DEFTEST ELT-ADJ-ARRAY.6 (ELT-ADJ-ARRAY-6-BODY) T)
;; Loading (DEFTEST ELT-ADJ-ARRAY.7 (LET* ((X (MAKE-ADJ-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (Y (SETF (ELT X 0) (QUOTE E)))) (LIST (ELT X 0) (ELT X 1) (ELT X 2) (ELT X 3) Y)) (E B C D E))
;; Loading (DEFTEST ELT-ADJ-ARRAY.8 (LET* ((X (MAKE-ADJ-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (Y (SETF (ELT X 1) (QUOTE E)))) (LIST (ELT X 0) (ELT X 1) (ELT X 2) (ELT X 3) Y)) (A E C D E))
;; Loading (DEFTEST ELT-ADJ-ARRAY.9 (LET* ((X (MAKE-ADJ-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (Y (SETF (ELT X 3) (QUOTE E)))) (LIST (ELT X 0) (ELT X 1) (ELT X 2) (ELT X 3) Y)) (A B C E E))
;; Loading (DEFTEST ELT-ADJ-ARRAY.10 (SIGNALS-ERROR (LET ((X (MAKE-ADJ-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C))))) (SETF (ELT X 4) (QUOTE D))) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-ADJ-ARRAY.11 (SIGNALS-ERROR (LET ((X (MAKE-ADJ-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (LIST (QUOTE A) (QUOTE B) (QUOTE C))))) (SETF (ELT X -100) (QUOTE D))) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-ADJ-ARRAY.12 (LET ((X (MAKE-INT-ARRAY 100000 (FUNCTION MAKE-ADJ-ARRAY)))) (ELT X 90000)) 90000)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST ELT-ADJ-ARRAY.13 (LET ((X (MAKE-INT-ARRAY 100000 (FUNCTION MAKE-ADJ-ARRAY)))) (SETF (ELT X 80000) (QUOTE FOO)) (LIST (ELT X 79999) (ELT X 80000) (ELT X 80001))) (79999 FOO 80001))
;; Loading (DEFTEST ELT-DISPLACED-ARRAY.1 (SIGNALS-ERROR (ELT (MAKE-DISPLACED-ARRAY (QUOTE (0)) 100) 0) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-DISPLACED-ARRAY.2 (ELT (MAKE-DISPLACED-ARRAY (QUOTE (1)) 100) 0) 100)
;; Loading (DEFTEST ELT-DISPLACED-ARRAY.3 (ELT (MAKE-DISPLACED-ARRAY (QUOTE (5)) 100) 4) 104)
;; Loading (DEFTEST ELT-FILL-POINTER.1 (LET ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E)) :FILL-POINTER 3))) (VALUES (ELT A 0) (ELT A 1) (ELT A 2))) A B C)
;; Loading (DEFTEST ELT-FILL-POINTER.2 (LET ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 3))) (VALUES (ELT A 0) (ELT A 1) (ELT A 2))) 0 0 1)
;; Loading (DEFTEST ELT-FILL-POINTER.3 (SIGNALS-ERROR (LET ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 0)) :FILL-POINTER 3))) (ELT A 4)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-FILL-POINTER.4 (SIGNALS-ERROR (LET ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 3))) (ELT A 4)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-FILL-POINTER.5 (LET ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3))) (VALUES (ELT A 0) (ELT A 1) (ELT A 2))) #\a #\b #\c)
;; Loading (DEFTEST ELT-FILL-POINTER.6 (SIGNALS-ERROR (LET ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3))) (ELT A 4)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT-FILL-POINTER.7 (LET ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 3))) (VALUES (ELT A 0) (ELT A 1) (ELT A 2))) #\a #\b #\c)
;; Loading (DEFTEST ELT-FILL-POINTER.8 (SIGNALS-ERROR (LET ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 3))) (ELT A 4)) TYPE-ERROR) T)
;; Loading (DEFTEST ELT.SPECIAL-STRINGS.1 (DO-SPECIAL-STRINGS (S "abcde" NIL) (ASSERT (CHAR= (ELT S 0) #\a)) (ASSERT (CHAR= (ELT S 3) #\d)) (ASSERT (CHAR= (ELT S 4) #\e))) NIL)
;; Loading (DEFTEST ELT.SPECIAL-VECTORS.1 (DO-SPECIAL-INTEGER-VECTORS (V #(1 1 0 1 0 1) NIL) (ASSERT (= (ELT V 0) 1)) (ASSERT (= (ELT V 1) 1)) (ASSERT (= (ELT V 2) 0)) (ASSERT (= (ELT V 3) 1)) (ASSERT (= (ELT V 4) 0)) (ASSERT (= (ELT V 5) 1))) NIL)
;; Loading (DEFTEST ELT.SPECIAL-VECTORS.2 (DO-SPECIAL-INTEGER-VECTORS (V #(1 2 0 -1 0 3) NIL) (ASSERT (= (ELT V 0) 1)) (ASSERT (= (ELT V 1) 2)) (ASSERT (= (ELT V 2) 0)) (ASSERT (= (ELT V 3) -1)) (ASSERT (= (ELT V 4) 0)) (ASSERT (= (ELT V 5) 3))) NIL)
;; Loading (DEFTEST ELT.SPECIAL-VECTORS.3 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT)) FOR LEN = 10 FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COERCE I TYPE)) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE TYPE :INITIAL-CONTENTS VALS) UNLESS (LOOP FOR I BELOW LEN ALWAYS (EQL (ELT VEC I) (COERCE (1+ I) TYPE))) COLLECT (LIST TYPE VALS VEC)) NIL)
;; Loading (DEFTEST ELT.SPECIAL-VECTORS.4 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT INTEGER RATIONAL)) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA ETYPE))) FOR LEN = 10 FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I ETYPE) (COERCE (- I) ETYPE))) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE TYPE :INITIAL-CONTENTS VALS) UNLESS (LOOP FOR I BELOW LEN ALWAYS (EQL (ELT VEC I) (ELT VALS I))) COLLECT (LIST TYPE VALS VEC)) NIL)
;; Loading (DEFTEST ELT.ERROR.1 (SIGNALS-ERROR (ELT) PROGRAM-ERROR) T)
;; Loading (DEFTEST ELT.ERROR.2 (SIGNALS-ERROR (ELT NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ELT.ERROR.3 (SIGNALS-ERROR (ELT NIL 0 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST ELT.ERROR.4 (DO-SPECIAL-INTEGER-VECTORS (V #(1 1 0 1 0 1) NIL) (ASSERT (EQL T (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (ELT (SYSTEM.INTERNALS::BQ-COMMA V) -1) TYPE-ERROR))))) (ASSERT (EQL T (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (ELT (SYSTEM.INTERNALS::BQ-COMMA V) 6) TYPE-ERROR)))))) NIL)
;; Loading (DEFTEST ELT.ERROR.5 (DO-SPECIAL-STRINGS (S "ABCDEFGH" NIL) (ASSERT (EQL T (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (ELT (SYSTEM.INTERNALS::BQ-COMMA S) -1) TYPE-ERROR))))) (ASSERT (EQL T (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (ELT (SYSTEM.INTERNALS::BQ-COMMA S) 8) TYPE-ERROR)))))) NIL)
;; Loading (LOAD "fill.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fill.lsp 813A6CF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILL.ERROR.1 (SIGNALS-ERROR (FILL (QUOTE A) (QUOTE B)) TYPE-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.2 (SIGNALS-ERROR (FILL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.3 (SIGNALS-ERROR (FILL (LIST (QUOTE A) (QUOTE B))) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.4 (SIGNALS-ERROR (FILL (LIST (QUOTE A) (QUOTE B)) (QUOTE C) :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.5 (SIGNALS-ERROR (FILL (LIST (QUOTE A) (QUOTE B)) (QUOTE C) :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.6 (SIGNALS-ERROR (FILL (LIST (QUOTE A) (QUOTE B)) (QUOTE C) :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.7 (SIGNALS-ERROR (FILL (LIST (QUOTE A) (QUOTE B)) (QUOTE C) :END) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.8 (SIGNALS-ERROR (FILL (LIST (QUOTE A) (QUOTE B)) (QUOTE C) 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.10 (SIGNALS-ERROR (FILL (LIST (QUOTE A) (QUOTE B)) (QUOTE C) :BAD T :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILL.ERROR.11 (SIGNALS-ERROR (LOCALLY (FILL (QUOTE A) (QUOTE B)) T) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FILL-1 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E)))) (B (FILL A (QUOTE X)))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (X X X X X))
;; Loading (DEFTEST ARRAY-FILL-2 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E)))) (B (FILL A (QUOTE X) :START 2))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (A B X X X))
;; Loading (DEFTEST ARRAY-FILL-3 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E)))) (B (FILL A (QUOTE X) :END 2))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (X X C D E))
;; Loading (DEFTEST ARRAY-FILL-4 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E)))) (B (FILL A (QUOTE X) :START 1 :END 3))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (A X X D E))
;; Loading (DEFTEST ARRAY-FILL-5 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E)))) (B (FILL A (QUOTE X) :START 1 :END NIL))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (A X X X X))
;; Loading (DEFTEST ARRAY-FILL-6 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (A B C D E)))) (B (FILL A (QUOTE X) :END NIL))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (X X X X X))
;; Loading (DEFTEST ARRAY-FILL-7 (SIGNALS-ERROR (LET* ((A (MAKE-ARRAY (QUOTE (5))))) (FILL A (QUOTE X) :START -1)) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FILL-8 (SIGNALS-ERROR (LET* ((A (MAKE-ARRAY (QUOTE (5))))) (FILL A (QUOTE X) :START (QUOTE A))) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FILL-9 (SIGNALS-ERROR (LET* ((A (MAKE-ARRAY (QUOTE (5))))) (FILL A (QUOTE X) :END -1)) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FILL-10 (SIGNALS-ERROR (LET* ((A (MAKE-ARRAY (QUOTE (5))))) (FILL A (QUOTE X) :END (QUOTE A))) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-1 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)))) (B (FILL A 6))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (6 6 6 6 6))
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-2 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)))) (B (FILL A 6 :START 2))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (1 2 6 6 6))
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-3 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)))) (B (FILL A 7 :END 2))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (7 7 3 4 5))
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-4 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)))) (B (FILL A 8 :START 1 :END 3))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (1 8 8 4 5))
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-5 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)))) (B (FILL A 0 :START 1 :END NIL))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (1 0 0 0 0))
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-6 (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)))) (B (FILL A -1 :END NIL))) (VALUES (EQT A B) (MAP (QUOTE LIST) (FUNCTION IDENTITY) A))) T (-1 -1 -1 -1 -1))
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-7 (SIGNALS-ERROR (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (FILL A 10 :START -1)) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-8 (SIGNALS-ERROR (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (FILL A 100 :START (QUOTE A))) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-9 (SIGNALS-ERROR (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (FILL A -5 :END -1)) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FIXNUM-FILL-10 (SIGNALS-ERROR (LET* ((A (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (FILL A 17 :END (QUOTE A))) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-1 (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 6) T (6 6 6 6 6))
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-2 (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 6 :START 2) T (1 2 6 6 6))
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-3 (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 7 :END 2) T (7 7 3 4 5))
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-4 (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 8 :START 1 :END 3) T (1 8 8 4 5))
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-5 (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 9 :START 1 :END NIL) T (1 9 9 9 9))
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-6 (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 0 :END NIL) T (0 0 0 0 0))
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-7 (SIGNALS-ERROR (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 0 :START -1) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-8 (SIGNALS-ERROR (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 100 :START (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-9 (SIGNALS-ERROR (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 19 :END -1) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-UNSIGNED-BYTE8-FILL-10 (SIGNALS-ERROR (ARRAY-UNSIGNED-BYTE-FILL-TEST-FN 8 17 :END (QUOTE A)) TYPE-ERROR) T)
;; Loading (DEFTEST ARRAY-FILL-POINTER-FILL.1 (LET ((S1 (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :INITIAL-ELEMENT NIL))) (FILL S1 (QUOTE A)) (LOOP FOR I FROM 0 TO 9 COLLECT (AREF S1 I))) (A A A A A NIL NIL NIL NIL NIL))
;; Loading (DEFTEST ARRAY-FILL-POINTER-FILL.2 (LET ((S1 (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :INITIAL-ELEMENT NIL))) (FILL S1 (QUOTE A) :END NIL) (LOOP FOR I FROM 0 TO 9 COLLECT (AREF S1 I))) (A A A A A NIL NIL NIL NIL NIL))
;; Loading (DEFTEST FILL.STRING.1 (LET* ((S1 (COPY-SEQ "abcde")) (S2 (FILL S1 #\z))) (VALUES (EQT S1 S2) S2)) T "zzzzz")
;; Loading (DEFTEST FILL.STRING.2 (LET* ((S1 (COPY-SEQ "abcde")) (S2 (FILL S1 #\z :START 0 :END 1))) (VALUES (EQT S1 S2) S2)) T "zbcde")
;; Loading (DEFTEST FILL.STRING.3 (LET* ((S1 (COPY-SEQ "abcde")) (S2 (FILL S1 #\z :END 2))) (VALUES (EQT S1 S2) S2)) T "zzcde")
;; Loading (DEFTEST FILL.STRING.4 (LET* ((S1 (COPY-SEQ "abcde")) (S2 (FILL S1 #\z :END NIL))) (VALUES (EQT S1 S2) S2)) T "zzzzz")
;; Loading (DEFTEST FILL.STRING.5 (LET* ((S1 "aaaaaaaa") (LEN (LENGTH S1))) (LOOP FOR START FROM 0 TO (1- LEN) ALWAYS (LOOP FOR END FROM (1+ START) TO LEN ALWAYS (LET* ((S2 (COPY-SEQ S1)) (S3 (FILL S2 #\z :START START :END END))) (AND (EQT S2 S3) (STRING= S3 (SUBSTITUTE-IF #\z (CONSTANTLY T) S1 :START START :END END)) T))))) T)
;; Loading (DEFTEST FILL.STRING.6 (LET* ((S1 "aaaaaaaa") (LEN (LENGTH S1))) (LOOP FOR START FROM 0 TO (1- LEN) ALWAYS (LET* ((S2 (COPY-SEQ S1)) (S3 (FILL S2 #\z :START START))) (AND (EQT S2 S3) (STRING= S3 (SUBSTITUTE-IF #\z (CONSTANTLY T) S1 :START START)) T)))) T)
;; Loading (DEFTEST FILL.STRING.7 (LET* ((S1 "aaaaaaaa") (LEN (LENGTH S1))) (LOOP FOR START FROM 0 TO (1- LEN) ALWAYS (LET* ((S2 (COPY-SEQ S1)) (S3 (FILL S2 #\z :END NIL :START START))) (AND (EQT S2 S3) (STRING= S3 (SUBSTITUTE-IF #\z (CONSTANTLY T) S1 :END NIL :START START)) T)))) T)
;; Loading (DEFTEST FILL.STRING.8 (LET* ((S1 "aaaaaaaa") (LEN (LENGTH S1))) (LOOP FOR END FROM 1 TO LEN ALWAYS (LET* ((S2 (COPY-SEQ S1)) (S3 (FILL S2 #\z :END END))) (AND (EQT S2 S3) (STRING= S3 (SUBSTITUTE-IF #\z (CONSTANTLY T) S1 :END END)) T)))) T)
;; Loading (DEFTEST FILL.STRING.9 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\z :FILL-POINTER 4)) (S2 (FILL S1 #\a))) (AND (EQT S1 S2) (COERCE (LOOP FOR I FROM 0 TO 7 COLLECT (AREF S2 I)) (QUOTE STRING)))) "aaaazzzz")
;; Loading (DEFTEST FILL.STRING.10 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\z :FILL-POINTER 4)) (S2 (FILL S1 #\a))) (AND (EQT S1 S2) (COERCE (LOOP FOR I FROM 0 TO 7 COLLECT (AREF S2 I)) (QUOTE BASE-STRING)))) "aaaazzzz")
;; Loading (DEFTEST FILL.BIT-VECTOR.1 (LET* ((S1 (COPY-SEQ #*01100)) (S2 (FILL S1 0))) (VALUES (EQT S1 S2) S2)) T #*00000)
;; Loading (DEFTEST FILL.BIT-VECTOR.2 (LET* ((S1 (COPY-SEQ #*00100)) (S2 (FILL S1 1 :START 0 :END 1))) (VALUES (EQT S1 S2) S2)) T #*10100)
;; Loading (DEFTEST FILL.BIT-VECTOR.3 (LET* ((S1 (COPY-SEQ #*00010)) (S2 (FILL S1 1 :END 2))) (VALUES (EQT S1 S2) S2)) T #*11010)
;; Loading (DEFTEST FILL.BIT-VECTOR.4 (LET* ((S1 (COPY-SEQ #*00111)) (S2 (FILL S1 0 :END NIL))) (VALUES (EQT S1 S2) S2)) T #*00000)
;; Loading (DEFTEST FILL.BIT-VECTOR.5 (LET* ((S1 #*00000000) (LEN (LENGTH S1))) (LOOP FOR START FROM 0 TO (1- LEN) ALWAYS (LOOP FOR END FROM (1+ START) TO LEN ALWAYS (LET* ((S2 (COPY-SEQ S1)) (S3 (FILL S2 1 :START START :END END))) (AND (EQT S2 S3) (EQUALP S3 (SUBSTITUTE-IF 1 (CONSTANTLY T) S1 :START START :END END)) T))))) T)
;; Loading (DEFTEST FILL.BIT-VECTOR.6 (LET* ((S1 #*11111111) (LEN (LENGTH S1))) (LOOP FOR START FROM 0 TO (1- LEN) ALWAYS (LET* ((S2 (COPY-SEQ S1)) (S3 (FILL S2 0 :START START))) (AND (EQT S2 S3) (EQUALP S3 (SUBSTITUTE-IF 0 (CONSTANTLY T) S1 :START START)) T)))) T)
;; Loading (DEFTEST FILL.BIT-VECTOR.7 (LET* ((S1 #*00000000) (LEN (LENGTH S1))) (LOOP FOR START FROM 0 TO (1- LEN) ALWAYS (LET* ((S2 (COPY-SEQ S1)) (S3 (FILL S2 1 :END NIL :START START))) (AND (EQT S2 S3) (EQUALP S3 (SUBSTITUTE-IF 1 (CONSTANTLY T) S1 :END NIL :START START)) T)))) T)
;; Loading (DEFTEST FILL.BIT-VECTOR.8 (LET* ((S1 #*11111111) (LEN (LENGTH S1))) (LOOP FOR END FROM 1 TO LEN ALWAYS (LET* ((S2 (COPY-SEQ S1)) (S3 (FILL S2 0 :END END))) (AND (EQT S2 S3) (EQUALP S3 (SUBSTITUTE-IF 0 (CONSTANTLY T) S1 :END END)) T)))) T)
;; Loading (DEFTEST FILL.BIT-VECTOR.9 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0 :FILL-POINTER 4)) (S2 (FILL S1 1))) (AND (EQT S1 S2) (COERCE (LOOP FOR I FROM 0 TO 7 COLLECT (AREF S2 I)) (QUOTE BIT-VECTOR)))) #*11110000)
;; Loading (DEFTEST FILL.ALLOW-OTHER-KEYS.1 (FILL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) (QUOTE A) :ALLOW-OTHER-KEYS T) (A A A A A))
;; Loading (DEFTEST FILL.ALLOW-OTHER-KEYS.2 (FILL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) (QUOTE A) :ALLOW-OTHER-KEYS NIL) (A A A A A))
;; Loading (DEFTEST FILL.ALLOW-OTHER-KEYS.3 (FILL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) (QUOTE A) :ALLOW-OTHER-KEYS T :BAD T) (A A A A A))
;; Loading (DEFTEST FILL.ALLOW-OTHER-KEYS.4 (FILL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) (QUOTE A) :BAD T :ALLOW-OTHER-KEYS T) (A A A A A))
;; Loading (DEFTEST FILL.ALLOW-OTHER-KEYS.5 (FILL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) (QUOTE A) (QUOTE BAD) T :ALLOW-OTHER-KEYS T) (A A A A A))
;; Loading (DEFTEST FILL.ALLOW-OTHER-KEYS.6 (FILL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) (QUOTE A) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (A A A A A))
;; Loading (DEFTEST FILL.ALLOW-OTHER-KEYS.7 (FILL (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)) (QUOTE A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (A A A A A))
;; Loading (DEFTEST FILL.ORDER.1 (LET ((I 0) X Y (A (COPY-SEQ #(A A A A)))) (VALUES (FILL (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) (QUOTE Z))) I X Y)) #(Z Z Z Z) 2 1 2)
;; Loading (DEFTEST FILL.ORDER.2 (LET ((I 0) X Y Z W (A (COPY-SEQ #(A A A A)))) (VALUES (FILL (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) (QUOTE Z)) :START (PROGN (SETF Z (INCF I)) 1) :END (PROGN (SETF W (INCF I)) 3)) I X Y Z W)) #(A Z Z A) 4 1 2 3 4)
;; Loading (DEFTEST FILL.ORDER.3 (LET ((I 0) X Y Z W (A (COPY-SEQ #(A A A A)))) (VALUES (FILL (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) (QUOTE Z)) :END (PROGN (SETF Z (INCF I)) 3) :START (PROGN (SETF W (INCF I)) 1)) I X Y Z W)) #(A Z Z A) 4 1 2 3 4)
;; Loading (DEFTEST FILL.ORDER.4 (LET ((I 0) X Y Z P Q R S W (A (COPY-SEQ #(A A A A)))) (VALUES (FILL (PROGN (SETF X (INCF I)) A) (PROGN (SETF Y (INCF I)) (QUOTE Z)) :END (PROGN (SETF Z (INCF I)) 3) :END (PROGN (SETF P (INCF I)) 1) :END (PROGN (SETF Q (INCF I)) 1) :END (PROGN (SETF R (INCF I)) 1) :START (PROGN (SETF S (INCF I)) 1) :START (PROGN (SETF W (INCF I)) 0)) I X Y Z P Q R S W)) #(A Z Z A) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST FILL.SPECIALIZED-STRINGS.1 (DO-SPECIAL-STRINGS (S (COPY-SEQ "abcde") NIL) (ASSERT (STRING= S "abcde")) (ASSERT (EQ S (FILL S #\x))) (ASSERT (STRING= S "xxxxx"))) NIL)
;; Loading (DEFTEST FILL.SPECIALIZED-STRINGS.2 (DO-SPECIAL-STRINGS (S (COPY-SEQ "abcde") NIL) (ASSERT (STRING= S "abcde")) (ASSERT (EQ S (FILL S #\x :START 2))) (ASSERT (STRING= S "abxxx"))) NIL)
;; Loading (DEFTEST FILL.SPECIALIZED-STRINGS.3 (DO-SPECIAL-STRINGS (S (COPY-SEQ "abcde") NIL) (ASSERT (STRING= S "abcde")) (ASSERT (EQ S (FILL S #\x :END 3))) (ASSERT (STRING= S "xxxde"))) NIL)
;; Loading (DEFTEST FILL.SPECIALIZED-STRINGS.4 (DO-SPECIAL-STRINGS (S (COPY-SEQ "abcde") NIL) (ASSERT (STRING= S "abcde")) (ASSERT (EQ S (FILL S #\x :START 1 :END 4))) (ASSERT (STRING= S "axxxe"))) NIL)
;; Loading (DEFTEST FILL.SPECIALIZED-VECTORS.1 (DO-SPECIAL-INTEGER-VECTORS (V #(0 1 1 0 1) NIL) (LET ((ETYPE (ARRAY-ELEMENT-TYPE V))) (ASSERT (EQ V (FILL V 0))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE V) ETYPE))) (ASSERT (EQUALP V #(0 0 0 0 0)))) NIL)
;; Loading (DEFTEST FILL.SPECIALIZED-VECTORS.2 (DO-SPECIAL-INTEGER-VECTORS (V #(0 -1 1 0 -1) NIL) (LET ((ETYPE (ARRAY-ELEMENT-TYPE V))) (ASSERT (EQ V (FILL V 1))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE V) ETYPE))) (ASSERT (EQUALP V #(1 1 1 1 1)))) NIL)
;; Loading (DEFTEST FILL.SPECIALIZED-VECTORS.3 (DO-SPECIAL-INTEGER-VECTORS (V #(1 1 1 1 0) NIL) (LET ((ETYPE (ARRAY-ELEMENT-TYPE V))) (ASSERT (EQ V (FILL V 0 :START 1 :END 3))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE V) ETYPE))) (ASSERT (EQUALP V #(1 0 0 1 0)))) NIL)
;; Loading (LOAD "fill-strings.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fill-strings.lsp 81729477>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ARRAY-STRING-FILL.1 (ARRAY-STRING-FILL-TEST-FN "abcde" #\Z) T "ZZZZZ")
;; Loading (DEFTEST ARRAY-STRING-FILL.2 (ARRAY-STRING-FILL-TEST-FN "abcde" #\Z :START 2) T "abZZZ")
;; Loading (DEFTEST ARRAY-STRING-FILL.3 (ARRAY-STRING-FILL-TEST-FN "abcde" #\Z :END 3) T "ZZZde")
;; Loading (DEFTEST ARRAY-STRING-FILL.4 (ARRAY-STRING-FILL-TEST-FN "abcde" #\Z :START 1 :END 4) T "aZZZe")
;; Loading (DEFTEST ARRAY-STRING-FILL.5 (ARRAY-STRING-FILL-TEST-FN "abcde" #\Z :START 2 :END 3) T "abZde")
;; Loading (LOAD "make-sequence.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-sequence.lsp 817601C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-SEQUENCE.1 (LET ((X (MAKE-SEQUENCE (QUOTE LIST) 4))) (AND (EQL (LENGTH X) 4) (LISTP X) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.2 (MAKE-SEQUENCE (QUOTE LIST) 4 :INITIAL-ELEMENT (QUOTE A)) (A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.3 (LET ((X (MAKE-SEQUENCE (QUOTE CONS) 4))) (AND (EQL (LENGTH X) 4) (LISTP X) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.4 (MAKE-SEQUENCE (QUOTE CONS) 4 :INITIAL-ELEMENT (QUOTE A)) (A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.5 (MAKE-SEQUENCE (QUOTE STRING) 10 :INITIAL-ELEMENT #\a) "aaaaaaaaaa")
;; Loading (DEFTEST MAKE-SEQUENCE.6 (LET ((S (MAKE-SEQUENCE (QUOTE STRING) 10))) (AND (EQL (LENGTH S) 10) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.7 (MAKE-SEQUENCE (QUOTE SIMPLE-STRING) 10 :INITIAL-ELEMENT #\a) "aaaaaaaaaa")
;; Loading (DEFTEST MAKE-SEQUENCE.8 (LET ((S (MAKE-SEQUENCE (QUOTE SIMPLE-STRING) 10))) (AND (EQL (LENGTH S) 10) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.9 (MAKE-SEQUENCE (QUOTE NULL) 0) NIL)
;; Loading (DEFTEST MAKE-SEQUENCE.10 (LET ((X (MAKE-SEQUENCE (QUOTE VECTOR) 10))) (AND (EQL (LENGTH X) 10) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.11 (LET* ((U (LIST (QUOTE A))) (X (MAKE-SEQUENCE (QUOTE VECTOR) 10 :INITIAL-ELEMENT U))) (AND (EQL (LENGTH X) 10) (LOOP FOR E ACROSS X ALWAYS (EQL E U)) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.12 (LET ((X (MAKE-SEQUENCE (QUOTE SIMPLE-VECTOR) 10))) (AND (EQL (LENGTH X) 10) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.13 (LET* ((U (LIST (QUOTE A))) (X (MAKE-SEQUENCE (QUOTE SIMPLE-VECTOR) 10 :INITIAL-ELEMENT U))) (AND (EQL (LENGTH X) 10) (LOOP FOR E ACROSS X ALWAYS (EQL E U)) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.14 (LET ((X (MAKE-SEQUENCE (QUOTE (VECTOR *)) 10))) (AND (EQL (LENGTH X) 10) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.15 (LET* ((U (LIST (QUOTE A))) (X (MAKE-SEQUENCE (QUOTE (VECTOR *)) 10 :INITIAL-ELEMENT U))) (AND (EQL (LENGTH X) 10) (LOOP FOR E ACROSS X ALWAYS (EQL E U)) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.16 (LET ((X (MAKE-SEQUENCE (QUOTE (SIMPLE-VECTOR *)) 10))) (AND (EQL (LENGTH X) 10) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.17 (LET* ((U (LIST (QUOTE A))) (X (MAKE-SEQUENCE (QUOTE (SIMPLE-VECTOR *)) 10 :INITIAL-ELEMENT U))) (AND (EQL (LENGTH X) 10) (LOOP FOR E ACROSS X ALWAYS (EQL E U)) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.18 (LET ((X (MAKE-SEQUENCE (QUOTE (STRING *)) 10))) (AND (EQL (LENGTH X) 10) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.19 (LET* ((U #\a) (X (MAKE-SEQUENCE (QUOTE (STRING *)) 10 :INITIAL-ELEMENT U))) (AND (EQL (LENGTH X) 10) (LOOP FOR E ACROSS X ALWAYS (EQL E U)) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.20 (LET ((X (MAKE-SEQUENCE (QUOTE (SIMPLE-STRING *)) 10))) (AND (EQL (LENGTH X) 10) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.21 (LET* ((U #\a) (X (MAKE-SEQUENCE (QUOTE (SIMPLE-STRING *)) 10 :INITIAL-ELEMENT U))) (AND (EQL (LENGTH X) 10) (LOOP FOR E ACROSS X ALWAYS (EQL E U)) T)) T)
;; Loading (DEFTEST MAKE-SEQUENCE.22 (MAKE-SEQUENCE (QUOTE (VECTOR * 5)) 5 :INITIAL-ELEMENT (QUOTE A)) #(A A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.23 (MAKE-SEQUENCE (QUOTE (VECTOR FIXNUM 5)) 5 :INITIAL-ELEMENT 1) #(1 1 1 1 1))
;; Loading (DEFTEST MAKE-SEQUENCE.24 (MAKE-SEQUENCE (QUOTE (VECTOR (INTEGER 0 255) 5)) 5 :INITIAL-ELEMENT 17) #(17 17 17 17 17))
;; Loading (DEFTEST MAKE-SEQUENCE.25 (MAKE-SEQUENCE (QUOTE (SIMPLE-VECTOR 5)) 5 :INITIAL-ELEMENT (QUOTE A)) #(A A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.27 (LET ((LEN 10)) (LOOP FOR I FROM 1 TO 40 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (VECTOR (SYSTEM.INTERNALS::BQ-COMMA ETYPE))) FOR VEC = (MAKE-SEQUENCE TYPE LEN :INITIAL-ELEMENT 0) UNLESS (AND (TYPEP VEC TYPE) (LOOP FOR I BELOW LEN ALWAYS (EQL (ELT VEC I) 0))) COLLECT (LIST I ETYPE TYPE VEC))) NIL)
;; Loading (DEFTEST MAKE-SEQUENCE.28 (LET ((LEN 10)) (LOOP FOR I FROM 1 TO 40 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (VECTOR (SYSTEM.INTERNALS::BQ-COMMA ETYPE))) FOR VEC = (MAKE-SEQUENCE TYPE LEN :INITIAL-ELEMENT 0) UNLESS (AND (TYPEP VEC TYPE) (LOOP FOR I BELOW LEN ALWAYS (EQL (ELT VEC I) 0))) COLLECT (LIST I ETYPE TYPE VEC))) NIL)
;; Loading (DEFTEST MAKE-SEQUENCE.29 (LET ((LEN 10)) (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (VECTOR (SYSTEM.INTERNALS::BQ-COMMA ETYPE))) FOR ELEM = (COERCE 1 ETYPE) FOR VEC = (MAKE-SEQUENCE TYPE LEN :INITIAL-ELEMENT ELEM) UNLESS (AND (TYPEP VEC TYPE) (LOOP FOR I BELOW LEN ALWAYS (EQL (ELT VEC I) ELEM))) COLLECT (LIST ETYPE TYPE VEC))) NIL)
;; Loading (DEFTEST MAKE-SEQUENCE.30 (LET ((LEN 10)) (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT INTEGER RATIONAL)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (VECTOR (SYSTEM.INTERNALS::BQ-COMMA ETYPE))) FOR ELEM = (COMPLEX (COERCE 1 CETYPE) (COERCE -1 CETYPE)) FOR VEC = (MAKE-SEQUENCE TYPE LEN :INITIAL-ELEMENT ELEM) UNLESS (AND (TYPEP VEC TYPE) (LOOP FOR I BELOW LEN ALWAYS (EQL (ELT VEC I) ELEM))) COLLECT (LIST ETYPE TYPE VEC))) NIL)
;; Loading (DEFTEST MAKE-SEQUENCE.31 (MAKE-SEQUENCE (QUOTE (SIMPLE-STRING)) 10 :INITIAL-ELEMENT #\X) "XXXXXXXXXX")
;; Loading (DEFTEST MAKE-SEQUENCE.32 (MAKE-SEQUENCE (QUOTE (SIMPLE-STRING 10)) 10 :INITIAL-ELEMENT #\X) "XXXXXXXXXX")
;; Loading (DEFTEST MAKE-SEQUENCE.33 (MAKE-SEQUENCE (QUOTE (STRING)) 10 :INITIAL-ELEMENT #\X) "XXXXXXXXXX")
;; Loading (DEFTEST MAKE-SEQUENCE.34 (MAKE-SEQUENCE (QUOTE (VECTOR)) 10 :INITIAL-ELEMENT NIL) #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-SEQUENCE.35 (MAKE-SEQUENCE (QUOTE (SIMPLE-VECTOR)) 10 :INITIAL-ELEMENT NIL) #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-SEQUENCE.36 (MAKE-SEQUENCE (QUOTE (VECTOR * *)) 10 :INITIAL-ELEMENT NIL) #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL))
;; Loading (DEFTEST MAKE-SEQUENCE.37 (MAKE-SEQUENCE (QUOTE BIT-VECTOR) 5 :INITIAL-ELEMENT 0) #*00000)
;; Loading (DEFTEST MAKE-SEQUENCE.38 (MAKE-SEQUENCE (QUOTE BIT-VECTOR) 7 :INITIAL-ELEMENT 1) #*1111111)
;; Loading (DEFTEST MAKE-SEQUENCE.39 (MAKE-SEQUENCE (QUOTE BIT-VECTOR) 0) #*)
;; Loading (DEFTEST MAKE-SEQUENCE.40 (MAKE-SEQUENCE (QUOTE (BIT-VECTOR)) 4 :INITIAL-ELEMENT 1) #*1111)
;; Loading (DEFTEST MAKE-SEQUENCE.41 (MAKE-SEQUENCE (QUOTE (BIT-VECTOR *)) 10 :INITIAL-ELEMENT 0) #*0000000000)
;; Loading (DEFTEST MAKE-SEQUENCE.42 (MAKE-SEQUENCE (QUOTE (BIT-VECTOR 5)) 5 :INITIAL-ELEMENT 0) #*00000)
;; Loading (DEFTEST MAKE-SEQUENCE.43 (MAKE-SEQUENCE (QUOTE SIMPLE-BIT-VECTOR) 5 :INITIAL-ELEMENT 0) #*00000)
;; Loading (DEFTEST MAKE-SEQUENCE.44 (MAKE-SEQUENCE (QUOTE SIMPLE-BIT-VECTOR) 7 :INITIAL-ELEMENT 1) #*1111111)
;; Loading (DEFTEST MAKE-SEQUENCE.45 (MAKE-SEQUENCE (QUOTE SIMPLE-BIT-VECTOR) 0) #*)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MAKE-SEQUENCE.46 (MAKE-SEQUENCE (QUOTE (SIMPLE-BIT-VECTOR)) 4 :INITIAL-ELEMENT 1) #*1111)
;; Loading (DEFTEST MAKE-SEQUENCE.47 (MAKE-SEQUENCE (QUOTE (SIMPLE-BIT-VECTOR *)) 10 :INITIAL-ELEMENT 0) #*0000000000)
;; Loading (DEFTEST MAKE-SEQUENCE.48 (MAKE-SEQUENCE (QUOTE (SIMPLE-BIT-VECTOR 5)) 5 :INITIAL-ELEMENT 0) #*00000)
;; Loading (DEFTEST MAKE-SEQUENCE.49 (IF (SUBTYPEP (CLASS-OF NIL) (QUOTE SEQUENCE)) (MAKE-SEQUENCE (CLASS-OF NIL) 0) NIL) NIL)
;; Loading (DEFTEST MAKE-SEQUENCE.50 (IF (SUBTYPEP (CLASS-OF (QUOTE (NIL NIL NIL))) (QUOTE SEQUENCE)) (MAKE-SEQUENCE (CLASS-OF (QUOTE (NIL NIL NIL))) 3 :INITIAL-ELEMENT NIL) (QUOTE (NIL NIL NIL))) (NIL NIL NIL))
;; Loading (DEFTEST MAKE-SEQUENCE.51 (LOOP FOR I FROM 1 TO 40 FOR VEC = (MAKE-ARRAY 1 :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :INITIAL-ELEMENT 1) FOR CLASS = (CLASS-OF VEC) NCONC (IF (SUBTYPEP CLASS (QUOTE VECTOR)) (LET ((VEC2 (MAKE-SEQUENCE CLASS 1 :INITIAL-ELEMENT 1))) (UNLESS (EQUALP VEC VEC) (LIST (LIST I VEC CLASS VEC2)))) NIL)) NIL)
;; Loading (DEFTEST MAKE-SEQUENCE.52 (LET ((CLASS (CLASS-OF "aaaa"))) (IF (SUBTYPEP CLASS (QUOTE VECTOR)) (MAKE-SEQUENCE CLASS 4 :INITIAL-ELEMENT #\a) "aaaa")) "aaaa")
;; Loading (DEFTEST MAKE-SEQUENCE.53 (LET ((CLASS (CLASS-OF (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4 :ADJUSTABLE T :INITIAL-CONTENTS "aaaa")))) (IF (SUBTYPEP CLASS (QUOTE VECTOR)) (MAKE-SEQUENCE CLASS 4 :INITIAL-ELEMENT #\a) "aaaa")) "aaaa")
;; Loading (DEFTEST MAKE-SEQUENCE.54 (LET ((CLASS (CLASS-OF (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4 :ADJUSTABLE T :INITIAL-CONTENTS "aaaa")))) (IF (SUBTYPEP CLASS (QUOTE VECTOR)) (MAKE-SEQUENCE CLASS 4 :INITIAL-ELEMENT #\a) "aaaa")) "aaaa")
;; Loading (DEFTEST MAKE-SEQUENCE.55 (LET ((CLASS (CLASS-OF (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "aaaa")))) (IF (SUBTYPEP CLASS (QUOTE VECTOR)) (MAKE-SEQUENCE CLASS 4 :INITIAL-ELEMENT #\a) "aaaa")) "aaaa")
;; Loading (DEFTEST MAKE-SEQUENCE.56 (LOOP FOR I FROM 1 TO 40 FOR VEC = (MAKE-ARRAY 1 :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :ADJUSTABLE T :FILL-POINTER 1 :INITIAL-ELEMENT 1) FOR CLASS = (CLASS-OF VEC) NCONC (IF (SUBTYPEP CLASS (QUOTE VECTOR)) (LET ((VEC2 (MAKE-SEQUENCE CLASS 1 :INITIAL-ELEMENT 1))) (UNLESS (EQUALP VEC VEC) (LIST (LIST I VEC CLASS VEC2)))) NIL)) NIL)
;; Loading (DEFTEST MAKE-SEQUENCE.57 (MAKE-SEQUENCE (FIND-CLASS (QUOTE LIST)) 4 :INITIAL-ELEMENT (QUOTE X)) (X X X X))
;; Loading (DEFTEST MAKE-SEQUENCE.58 (MAKE-SEQUENCE (FIND-CLASS (QUOTE CONS)) 4 :INITIAL-ELEMENT (QUOTE X)) (X X X X))
;; Loading (DEFTEST MAKE-SEQUENCE.ALLOW-OTHER-KEYS.1 (MAKE-SEQUENCE (QUOTE LIST) 5 :ALLOW-OTHER-KEYS T :INITIAL-ELEMENT (QUOTE A) :BAD T) (A A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.ALLOW-OTHER-KEYS.2 (MAKE-SEQUENCE (QUOTE LIST) 5 :INITIAL-ELEMENT (QUOTE A) :BAD T :ALLOW-OTHER-KEYS T) (A A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.ALLOW-OTHER-KEYS.3 (MAKE-SEQUENCE (QUOTE LIST) 5 :INITIAL-ELEMENT (QUOTE A) :ALLOW-OTHER-KEYS T) (A A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.ALLOW-OTHER-KEYS.4 (MAKE-SEQUENCE (QUOTE LIST) 5 :INITIAL-ELEMENT (QUOTE A) :ALLOW-OTHER-KEYS NIL) (A A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.ALLOW-OTHER-KEYS.5 (MAKE-SEQUENCE (QUOTE LIST) 5 :INITIAL-ELEMENT (QUOTE A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (A A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.KEYWORDS.6 (MAKE-SEQUENCE (QUOTE LIST) 5 :INITIAL-ELEMENT (QUOTE A) :INITIAL-ELEMENT (QUOTE B)) (A A A A A))
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.1 (SIGNALS-ERROR-ALWAYS (MAKE-SEQUENCE (QUOTE SYMBOL) 10) TYPE-ERROR) T T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.2 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE NULL) 1) TYPE-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.3 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE (VECTOR * 4)) 3) TYPE-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.4 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE (VECTOR * 2)) 3) TYPE-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.5 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE (STRING 4)) 3) TYPE-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.6 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE (SIMPLE-STRING 2)) 3) TYPE-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.7 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE CONS) 0) TYPE-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.8 (SIGNALS-ERROR (MAKE-SEQUENCE) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.9 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE LIST)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.10 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE LIST) 10 :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.11 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE LIST) 10 :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.12 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE LIST) 10 :INITIAL-ELEMENT) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.13 (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE LIST) 10 0 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.14 (SIGNALS-ERROR-ALWAYS (LOCALLY (MAKE-SEQUENCE (QUOTE SYMBOL) 10) T) TYPE-ERROR) T T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.15 :NOTES (:RESULT-TYPE-ELEMENT-TYPE-BY-SUBTYPE) (IF (SUBTYPEP (QUOTE (OR (VECTOR BIT) (VECTOR T))) (QUOTE VECTOR)) (SIGNALS-ERROR (MAKE-SEQUENCE (QUOTE (OR (VECTOR BIT) (VECTOR T))) 10 :INITIAL-ELEMENT 0) ERROR) T) T)
;; Loading (DEFTEST MAKE-SEQUENCE.ERROR.16 (SIGNALS-ERROR-ALWAYS (MAKE-SEQUENCE (FIND-CLASS (QUOTE INTEGER)) 0) TYPE-ERROR) T T)
;; Loading (DEFTEST MAKE-SEQUENCE.ORDER.1 (LET ((I 0) A B C) (VALUES (MAKE-SEQUENCE (PROGN (SETF A (INCF I)) (QUOTE LIST)) (PROGN (SETF B (INCF I)) 5) :INITIAL-ELEMENT (PROGN (SETF C (INCF I)) (QUOTE A))) I A B C)) (A A A A A) 3 1 2 3)
;; Loading (DEFTEST MAKE-SEQUENCE.ORDER.2 (LET ((I 0) A B C D E) (VALUES (MAKE-SEQUENCE (PROGN (SETF A (INCF I)) (QUOTE LIST)) (PROGN (SETF B (INCF I)) 5) :ALLOW-OTHER-KEYS (SETF C (INCF I)) :INITIAL-ELEMENT (PROGN (SETF D (INCF I)) (QUOTE A)) :FOO (SETF E (INCF I))) I A B C D E)) (A A A A A) 5 1 2 3 4 5)
;; Loading (DEF-FOLD-TEST MAKE-SEQUENCE.FOLD.1 (MAKE-SEQUENCE (QUOTE LIST) 5 :INITIAL-ELEMENT (QUOTE A)))
;; Loading (DEF-FOLD-TEST MAKE-SEQUENCE.FOLD.2 (MAKE-SEQUENCE (QUOTE VECTOR) 5 :INITIAL-ELEMENT (QUOTE A)))
;; Loading (DEF-FOLD-TEST MAKE-SEQUENCE.FOLD.3 (MAKE-SEQUENCE (QUOTE BIT-VECTOR) 5 :INITIAL-ELEMENT 0))
;; Loading (DEF-FOLD-TEST MAKE-SEQUENCE.FOLD.4 (MAKE-SEQUENCE (QUOTE STRING) 5 :INITIAL-ELEMENT #\a))
;; Loading (LOAD "map.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/map.lsp C1420167>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAP-ARRAY.1 (MAP (QUOTE LIST) (FUNCTION 1+) #(1 2 3 4)) (2 3 4 5))
;; Loading (DEFTEST MAP-ARRAY.2 (MAP (QUOTE VECTOR) (FUNCTION +) #(1 2 3 4) #(6 6 6 6)) #(7 8 9 10))
;; Loading (DEFTEST MAP-ARRAY.3 (MAP (QUOTE VECTOR) (FUNCTION +) #(1 2 3 4 5) #(6 6 6 6)) #(7 8 9 10))
;; Loading (DEFTEST MAP-ARRAY.4 (MAP (QUOTE VECTOR) (FUNCTION +) #(1 2 3 4) #(6 6 6 6 6)) #(7 8 9 10))
;; Loading (DEFTEST MAP-ARRAY.5 (MAP (QUOTE (VECTOR *)) (FUNCTION +) #(1 2 3 4) #(6 6 6 6)) #(7 8 9 10))
;; Loading (DEFTEST MAP-ARRAY.6 (MAP (QUOTE (VECTOR * 4)) (FUNCTION +) #(1 2 3 4) #(6 6 6 6)) #(7 8 9 10))
;; Loading (DEFTEST MAP-ARRAY.9 (MAP (QUOTE SIMPLE-VECTOR) (FUNCTION IDENTITY) (QUOTE (A B C D E F))) #(A B C D E F))
;; Loading (DEFTEST MAP-ARRAY.10 (MAP (QUOTE SIMPLE-VECTOR) (FUNCTION CONS) (QUOTE (A B C D E F)) #(1 2 3 4 5 6)) #((A . 1) (B . 2) (C . 3) (D . 4) (E . 5) (F . 6)))
;; Loading (DEFTEST MAP-ARRAY.11 (MAP (QUOTE VECTOR) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c #\d #\e))) #(#\a #\b #\c #\d #\e))
;; Loading (DEFTEST MAP-ARRAY.12 (MAP (QUOTE VECTOR) (FUNCTION IDENTITY) "abcde") #(#\a #\b #\c #\d #\e))
;; Loading (DEFTEST MAP-ARRAY.13 (MAP (QUOTE VECTOR) (FUNCTION IDENTITY) #*000001) #(0 0 0 0 0 1))
;; Loading (DEFTEST MAP-ARRAY.14 (MAP (QUOTE LIST) (FUNCTION IDENTITY) #*000001) (0 0 0 0 0 1))
;; Loading (DEFTEST MAP-BIT-VECTOR.15 (MAP (QUOTE BIT-VECTOR) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.16 (MAP (QUOTE SIMPLE-BIT-VECTOR) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.17 (MAP (QUOTE (VECTOR BIT)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.18 (MAP (QUOTE (SIMPLE-VECTOR *)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.19 (MAP (QUOTE (BIT-VECTOR 6)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.20 (MAP (QUOTE (BIT-VECTOR *)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.21 (MAP (QUOTE (SIMPLE-BIT-VECTOR 6)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.22 (MAP (QUOTE (SIMPLE-BIT-VECTOR *)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.23 (MAP (QUOTE (VECTOR BIT 6)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.24 (MAP (QUOTE (VECTOR BIT *)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-BIT-VECTOR.25 (MAP (QUOTE (SIMPLE-VECTOR 6)) (FUNCTION IDENTITY) (QUOTE (0 0 0 0 0 1))) #*000001)
;; Loading (DEFTEST MAP-STRING.26 (MAP (QUOTE STRING) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c #\d #\e))) "abcde")
;; Loading (DEFTEST MAP-STRING.27 (MAP (QUOTE STRING) (FUNCTION IDENTITY) "abcde") "abcde")
;; Loading (DEFTEST MAP-STRING.28 (MAP (QUOTE (VECTOR CHARACTER)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c #\d #\e))) "abcde")
;; Loading (DEFTEST MAP-STRING.29 (MAP (QUOTE (VECTOR CHARACTER 5)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c #\d #\e))) "abcde")
;; Loading (DEFTEST MAP-STRING.30 (MAP (QUOTE (SIMPLE-VECTOR 5)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c #\d #\e))) "abcde")
;; Loading (DEFTEST MAP-NIL.33 (LET ((A NIL)) (VALUES (MAP NIL (FUNCTION (LAMBDA (X) (PUSH X A))) "abcdef") A)) NIL (#\f #\e #\d #\c #\b #\a))
;; Loading (DEFTEST MAP-NIL.34 (LET ((A NIL)) (VALUES (MAP NIL (FUNCTION (LAMBDA (X) (PUSH X A))) (QUOTE (A B C D E))) A)) NIL (E D C B A))
;; Loading (DEFTEST MAP-NIL.35 (LET ((A NIL)) (VALUES (MAP NIL (FUNCTION (LAMBDA (X) (PUSH X A))) #(A B C D E)) A)) NIL (E D C B A))
;; Loading (DEFTEST MAP-NIL.36 (LET ((A NIL)) (VALUES (MAP NIL (FUNCTION (LAMBDA (X) (PUSH X A))) #*001011110) A)) NIL (0 1 1 1 1 0 1 0 0))
;; Loading (DEFTEST MAP-NULL.1 (MAP (QUOTE NULL) (FUNCTION IDENTITY) NIL) NIL)
;; Loading (DEFTEST MAP-CONS.1 (MAP (QUOTE CONS) (FUNCTION IDENTITY) (QUOTE (A B C))) (A B C))
;; Loading (DEFTEST MAP.37 (MAP (QUOTE SIMPLE-STRING) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.38 (MAP (QUOTE (SIMPLE-STRING)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.39 (MAP (QUOTE (SIMPLE-STRING *)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.40 (MAP (QUOTE (SIMPLE-STRING 3)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.41 (MAP (QUOTE (BASE-STRING)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.42 (MAP (QUOTE (BASE-STRING *)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.43 (MAP (QUOTE (BASE-STRING 3)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.44 (MAP (QUOTE SIMPLE-BASE-STRING) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.45 (MAP (QUOTE (SIMPLE-BASE-STRING)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.46 (MAP (QUOTE (SIMPLE-BASE-STRING *)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.47 (MAP (QUOTE (SIMPLE-BASE-STRING 3)) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))) "abc")
;; Loading (DEFTEST MAP.48 :NOTES (:RESULT-TYPE-ELEMENT-TYPE-BY-SUBTYPE) (LET ((TYPE (QUOTE (OR (VECTOR T 10) (VECTOR T 5))))) (IF (SUBTYPEP TYPE (QUOTE (VECTOR T))) (EQUALPT (MAP TYPE (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5))) #(1 2 3 4 5)) T)) T)
;; Loading (DEFTEST MAP.ERROR.1 (SIGNALS-ERROR-ALWAYS (MAP (QUOTE SYMBOL) (FUNCTION IDENTITY) (QUOTE (A B C))) TYPE-ERROR) T T)
;; Loading (DEFTEST MAP.ERROR.1A (SIGNALS-ERROR (MAP (QUOTE SYMBOL) (FUNCTION IDENTITY) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.2 (SIGNALS-ERROR (MAP (QUOTE (VECTOR * 8)) (FUNCTION IDENTITY) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.3 (SIGNALS-ERROR (MAP (QUOTE LIST) (FUNCTION IDENTITY) (QUOTE (A B . C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.4 (SIGNALS-ERROR (MAP) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.5 (SIGNALS-ERROR (MAP (QUOTE LIST)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.6 (SIGNALS-ERROR (MAP (QUOTE LIST) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.7 (SIGNALS-ERROR (MAP (QUOTE LIST) (FUNCTION CONS) (QUOTE (A B C D))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.8 (SIGNALS-ERROR (MAP (QUOTE LIST) (FUNCTION CONS) (QUOTE (A B C D)) (QUOTE (1 2 3 4)) (QUOTE (5 6 7 8))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.9 (SIGNALS-ERROR (MAP (QUOTE LIST) (FUNCTION CAR) (QUOTE (A B C D))) TYPE-ERROR) T)
;; Loading (DEFTEST MAP.ERROR.10 :NOTES (:RESULT-TYPE-ELEMENT-TYPE-BY-SUBTYPE) (LET ((TYPE (QUOTE (OR (VECTOR BIT) (VECTOR T))))) (IF (SUBTYPEP TYPE (QUOTE VECTOR)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (MAP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TYPE)) (FUNCTION IDENTITY) (QUOTE (1 0 1))) ERROR))) (VALUES T T))) T T)
;; Loading (DEFTEST MAP.ERROR.11 (LET ((TYPE (QUOTE (OR (VECTOR T 5) (VECTOR T 10))))) (IF (SUBTYPEP TYPE (QUOTE VECTOR)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (MAP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TYPE)) (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5 6))) TYPE-ERROR))) T)) T)
;; Loading (DEFTEST MAP.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAP (QUOTE LIST) (FUNCTION IDENTITY) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST MAP.ERROR.13 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAP (QUOTE VECTOR) (FUNCTION CONS) (QUOTE (A B C D)) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST MAP.FILL.1 (LET ((S1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)) :FILL-POINTER 8))) (MAP (QUOTE LIST) (FUNCTION IDENTITY) S1)) (A B C D E F G H))
;; Loading (DEFTEST MAP.FILL.2 (LET ((S1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)) :FILL-POINTER 8))) (MAP (QUOTE LIST) (FUNCTION (LAMBDA (X Y) X)) (QUOTE (1 2 3 4 5 6 7 8 9 10)) S1)) (1 2 3 4 5 6 7 8))
;; Loading (DEFTEST MAP.FILL.3 (LET ((S1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 8))) (MAP (QUOTE STRING) (FUNCTION IDENTITY) S1)) "aaaaaaaa")
;; Loading (DEFTEST MAP.FILL.4 (LET ((S1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 8))) (MAP (QUOTE LIST) (FUNCTION (LAMBDA (X Y) X)) (QUOTE (1 2 3 4 5 6 7 8 9 10)) S1)) (1 2 3 4 5 6 7 8))
;; Loading (DEFTEST MAP.FILL.5 (LET ((S1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 8))) (MAP (QUOTE BIT-VECTOR) (FUNCTION IDENTITY) S1)) #*00000000)
;; Loading (DEFTEST MAP.FILL.6 (LET ((S1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 8))) (MAP (QUOTE LIST) (FUNCTION (LAMBDA (X Y) X)) (QUOTE (1 2 3 4 5 6 7 8 9 10)) S1)) (1 2 3 4 5 6 7 8))
;; Loading (DEFTEST MAP.SPECIALIZED-STRING.1 (DO-SPECIAL-STRINGS (S "abcde" NIL) (LET ((S2 (MAP (QUOTE LIST) (FUNCTION IDENTITY) S))) (ASSERT (EQUAL S2 (QUOTE (#\a #\b #\c #\d #\e)))))) NIL)
;; Loading (DEFTEST MAP.SPECIALIZED-STRING.2 (DO-SPECIAL-STRINGS (S "abcde" NIL) (LET ((S2 (MAP (QUOTE LIST) (FUNCTION (LAMBDA (X Y) Y)) (QUOTE (1 2 3 4 5)) S))) (ASSERT (EQUAL S2 (QUOTE (#\a #\b #\c #\d #\e)))))) NIL)
;; Loading (DEFTEST MAP.SPECIALIZED-STRING.3 (LET ((S (MAP (QUOTE BASE-STRING) (FUNCTION IDENTITY) (QUOTE (#\a #\b #\c))))) (ASSERT (TYPEP S (QUOTE BASE-STRING))) S) "abc")
;; Loading (DEFTEST MAP.SPECIALIZED-VECTOR.1 (DO-SPECIAL-INTEGER-VECTORS (V #(0 1 1 0 0 1) NIL) (ASSERT (EQUAL (MAP (QUOTE LIST) (FUNCTION LIST) V V) (QUOTE ((0 0) (1 1) (1 1) (0 0) (0 0) (1 1)))))) NIL)
;; Loading (DEFTEST MAP.SPECIALIZED-VECTOR.2 (DO-SPECIAL-INTEGER-VECTORS (V #(1 2 3 4 5 6 7) NIL) (ASSERT (EQUAL (MAP (QUOTE LIST) (FUNCTION IDENTITY) V) (QUOTE (1 2 3 4 5 6 7))))) NIL)
;; Loading (DEFTEST MAP.SPECIALIZED-VECTOR.3 (DO-SPECIAL-INTEGER-VECTORS (V #(-1 -2 -3 -4 -5 -6 -7) NIL) (ASSERT (EQUAL (MAP (QUOTE LIST) (FUNCTION -) V) (QUOTE (1 2 3 4 5 6 7))))) NIL)
;; Loading (DEFTEST MAP.SPECIALIZED-VECTOR.4 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR BOUND = (ASH 1 I) FOR LEN = 10 FOR VALS = (LOOP REPEAT LEN COLLECT (RANDOM I)) FOR RESULT = (MAP (SYSTEM.INTERNALS::BACKQUOTE (VECTOR (SYSTEM.INTERNALS::BQ-COMMA TYPE))) (FUNCTION IDENTITY) VALS) UNLESS (AND (= (LENGTH RESULT) LEN) (EVERY (FUNCTION EQL) VALS RESULT)) COLLECT (LIST I VALS RESULT)) NIL)
;; Loading (DEFTEST MAP.SPECIALIZED-VECTOR.5 (LOOP FOR I FROM 1 TO 40 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR BOUND = (ASH 1 I) FOR LEN = 10 FOR VALS = (LOOP REPEAT LEN COLLECT (- (RANDOM I) (/ BOUND 2))) FOR RESULT = (MAP (SYSTEM.INTERNALS::BACKQUOTE (VECTOR (SYSTEM.INTERNALS::BQ-COMMA TYPE))) (FUNCTION IDENTITY) VALS) UNLESS (AND (= (LENGTH RESULT) LEN) (EVERY (FUNCTION EQL) VALS RESULT)) COLLECT (LIST I VALS RESULT)) NIL)
;; Loading (DEFTEST MAP.SPECIALIZED-VECTOR.6 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT)) FOR LEN = 10 FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COERCE I TYPE)) FOR RESULT = (MAP (SYSTEM.INTERNALS::BACKQUOTE (VECTOR (SYSTEM.INTERNALS::BQ-COMMA TYPE))) (FUNCTION IDENTITY) VALS) UNLESS (AND (= (LENGTH RESULT) LEN) (EVERY (FUNCTION EQL) VALS RESULT)) COLLECT (LIST TYPE VALS RESULT)) NIL)
;; Loading (DEFTEST MAP.SPECIALIZED-VECTOR.7 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT INTEGER RATIONAL)) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA ETYPE))) FOR LEN = 10 FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I ETYPE) (COERCE (- I) ETYPE))) FOR RESULT = (MAP (SYSTEM.INTERNALS::BACKQUOTE (VECTOR (SYSTEM.INTERNALS::BQ-COMMA TYPE))) (FUNCTION IDENTITY) VALS) UNLESS (AND (= (LENGTH RESULT) LEN) (EVERY (FUNCTION EQL) VALS RESULT)) COLLECT (LIST TYPE VALS RESULT)) NIL)
;; Loading (DEFTEST MAP.ORDER.1 (LET ((I 0) A B C D) (VALUES (MAP (PROGN (SETF A (INCF I)) (QUOTE LIST)) (PROGN (SETF B (INCF I)) (FUNCTION LIST)) (PROGN (SETF C (INCF I)) (QUOTE (A B C))) (PROGN (SETF D (INCF I)) (QUOTE (B C D)))) I A B C D)) ((A B) (B C) (C D)) 4 1 2 3 4)
;; Loading (DEF-FOLD-TEST MAP.FOLD.1 (MAP (QUOTE VECTOR) (FUNCTION IDENTITY) (QUOTE (A B C))))
;; Loading (LOAD "map-into.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/map-into.lsp C16CAE27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAP-INTO-LIST.1 (LET ((A (COPY-SEQ (QUOTE (A B C D E F)))) (B NIL)) (MAP-INTO A (FUNCTION (LAMBDA (X) (PUSH X B) X)) (QUOTE (1 2 3 4 5 6))) (VALUES A B)) (1 2 3 4 5 6) (6 5 4 3 2 1))
;; Loading (DEFTEST MAP-INTO-LIST.2 (LET ((A (COPY-SEQ (QUOTE (A B C D E F G))))) (MAP-INTO A (FUNCTION IDENTITY) (QUOTE (1 2 3))) A) (1 2 3 D E F G))
;; Loading (DEFTEST MAP-INTO-LIST.3 (LET ((A (COPY-SEQ (QUOTE (A B C))))) (MAP-INTO A (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5 6))) A) (1 2 3))
;; Loading (DEFTEST MAP-INTO-LIST.4 (LET ((A (COPY-SEQ (QUOTE (A B C D E F)))) (B NIL)) (MAP-INTO A (FUNCTION (LAMBDA (X Y) (LET ((Z (+ X Y))) (PUSH Z B) Z))) (QUOTE (1 2 3 4 5 6)) (QUOTE (10 11 12 13 14 15))) (VALUES A B)) (11 13 15 17 19 21) (21 19 17 15 13 11))
;; Loading (DEFTEST MAP-INTO-LIST.5 (LET ((A (COPY-SEQ (QUOTE (A B C D E F))))) (MAP-INTO A (QUOTE IDENTITY) (QUOTE (1 2 3 4 5 6))) A) (1 2 3 4 5 6))
;; Loading (DEFTEST MAP-INTO-LIST.6 (LET ((B NIL)) (VALUES (MAP-INTO NIL (FUNCTION (LAMBDA (X Y) (LET ((Z (+ X Y))) (PUSH Z B) Z))) (QUOTE (1 2 3 4 5 6)) (QUOTE (10 11 12 13 14 15))) B)) NIL NIL)
;; Loading (DEFTEST MAP-INTO-LIST.7 (LET ((A (COPY-SEQ (QUOTE (A B C D E F))))) (MAP-INTO A (FUNCTION (LAMBDA NIL 1))) A) (1 1 1 1 1 1))
;; Loading (DEFTEST MAP-INTO-LIST.8 (LET ((A (COPY-SEQ (QUOTE (A B C D E F)))) (S2 (MAKE-ARRAY (QUOTE (6)) :INITIAL-ELEMENT (QUOTE X) :FILL-POINTER 4))) (MAP-INTO A (FUNCTION IDENTITY) S2) A) (X X X X E F))
;; Loading (DEFTEST MAP-INTO-ARRAY.1 (LET ((A (COPY-SEQ #(A B C D E F))) B) (MAP-INTO A (FUNCTION (LAMBDA (X) (PUSH X B) X)) (QUOTE (1 2 3 4 5 6))) (VALUES A B)) #(1 2 3 4 5 6) (6 5 4 3 2 1))
;; Loading (DEFTEST MAP-INTO-ARRAY.2 (LET ((A (COPY-SEQ #(A B C D E F G H))) B) (MAP-INTO A (FUNCTION (LAMBDA (X) (PUSH X B) X)) (QUOTE (1 2 3 4 5 6))) (VALUES A B)) #(1 2 3 4 5 6 G H) (6 5 4 3 2 1))
;; Loading (DEFTEST MAP-INTO-ARRAY.3 (LET ((A (COPY-SEQ #(A B C D))) B) (MAP-INTO A (FUNCTION (LAMBDA (X) (PUSH X B) X)) (QUOTE (1 2 3 4 5 6))) (VALUES A B)) #(1 2 3 4) (4 3 2 1))
;; Loading (DEFTEST MAP-INTO-ARRAY.4 (LET ((A (COPY-SEQ #(A B C D E F))) B) (MAP-INTO A (FUNCTION (LAMBDA (X) (PUSH X B) X)) #(1 2 3 4 5 6)) (VALUES A B)) #(1 2 3 4 5 6) (6 5 4 3 2 1))
;; Loading (DEFTEST MAP-INTO-ARRAY.5 (LET ((A (COPY-SEQ #(A B C D E F G H))) B) (MAP-INTO A (FUNCTION (LAMBDA (X) (PUSH X B) X)) #(1 2 3 4 5 6)) (VALUES A B)) #(1 2 3 4 5 6 G H) (6 5 4 3 2 1))
;; Loading (DEFTEST MAP-INTO-ARRAY.6 (LET ((A (COPY-SEQ #(A B C D))) B) (MAP-INTO A (FUNCTION (LAMBDA (X) (PUSH X B) X)) #(1 2 3 4 5 6)) (VALUES A B)) #(1 2 3 4) (4 3 2 1))
;; Loading (DEFTEST MAP-INTO-ARRAY.7 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT (QUOTE X) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION IDENTITY) (QUOTE (1 2 3))) A) #(1 2 3))
;; Loading (DEFTEST MAP-INTO-ARRAY.8 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT (QUOTE X) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION IDENTITY) (QUOTE (1 2))) A) #(1 2))
;; Loading (DEFTEST MAP-INTO-ARRAY.9 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT (QUOTE X) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5))) (AND (EQLT (FILL-POINTER A) 5) A)) #(1 2 3 4 5))
;; Loading (DEFTEST MAP-INTO-ARRAY.10 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT (QUOTE X) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION (LAMBDA NIL (QUOTE Y)))) (AND (EQLT (FILL-POINTER A) 6) A)) #(Y Y Y Y Y Y))
;; Loading (DEFTEST MAP-INTO-ARRAY.11 (LET ((A (COPY-SEQ #(A B C D E F))) (S2 (MAKE-ARRAY (QUOTE (6)) :INITIAL-ELEMENT (QUOTE X) :FILL-POINTER 4))) (MAP-INTO A (FUNCTION IDENTITY) S2) A) #(X X X X E F))
;; Loading (DEFTEST MAP-INTO-STRING.1 (LET ((A (COPY-SEQ "abcdef"))) (MAP-INTO A (FUNCTION IDENTITY) "123456") (VALUES (NOT (NOT (STRINGP A))) A)) T "123456")
;; Loading (DEFTEST MAP-INTO-STRING.2 (LET ((A (COPY-SEQ "abcdef"))) (MAP-INTO A (FUNCTION IDENTITY) "1234") (VALUES (NOT (NOT (STRINGP A))) A)) T "1234ef")
;; Loading (DEFTEST MAP-INTO-STRING.3 (LET ((A (COPY-SEQ "abcd"))) (MAP-INTO A (FUNCTION IDENTITY) "123456") (VALUES (NOT (NOT (STRINGP A))) A)) T "1234")
;; Loading (DEFTEST MAP-INTO-STRING.4 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION IDENTITY) "abcde") (VALUES (FILL-POINTER A) (AREF A 5) A)) 5 #\x "abcde")
;; Loading (DEFTEST MAP-INTO-STRING.5 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION (LAMBDA NIL #\y))) (VALUES (FILL-POINTER A) A)) 6 "yyyyyy")
;; Loading (DEFTEST MAP-INTO-STRING.6 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)))) (MAP-INTO A (FUNCTION (LAMBDA NIL #\y))) A) "yyyyyy")
;; Loading (DEFTEST MAP-INTO-STRING.7 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION IDENTITY) "abcde") (VALUES (FILL-POINTER A) (AREF A 5) A)) 5 #\x "abcde")
;; Loading (DEFTEST MAP-INTO-STRING.8 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION (LAMBDA NIL #\y))) (VALUES (FILL-POINTER A) A)) 6 "yyyyyy")
;; Loading (DEFTEST MAP-INTO-STRING.9 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (MAP-INTO A (FUNCTION (LAMBDA NIL #\y))) A) "yyyyyy")
;; Loading (DEFTEST MAP-INTO-STRING.10 (LET ((A (COPY-SEQ "abcdef")) (S2 (MAKE-ARRAY (QUOTE (6)) :INITIAL-ELEMENT #\x :FILL-POINTER 4))) (MAP-INTO A (FUNCTION IDENTITY) S2) A) "xxxxef")
;; Loading (DEFTEST MAP-INTO-STRING.11 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION IDENTITY) "abcd") (VALUES (FILL-POINTER A) (AREF A 4) (AREF A 5) A)) 4 #\x #\x "abcd")
;; Loading (DEFTEST MAP-INTO-STRING.12 (LET ((A (MAKE-ARRAY 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3))) (MAP-INTO A (FUNCTION IDENTITY) "abcdefgh") (VALUES (FILL-POINTER A) A)) 6 "abcdef")
;; Loading (DEFTEST MAP-INTO-STRING.13 (DO-SPECIAL-STRINGS (S (COPY-SEQ "12345") NIL) (LET ((S2 (MAP-INTO S (FUNCTION IDENTITY) "abcde"))) (ASSERT (EQ S S2)) (ASSERT (STRING= S2 "abcde")))) NIL)
;; Loading (DEFTEST MAP-INTO-STRING.14 (DO-SPECIAL-STRINGS (S "abcde" NIL) (LET* ((S1 (COPY-SEQ "123456")) (S2 (MAP-INTO S1 (FUNCTION IDENTITY) S))) (ASSERT (EQ S1 S2)) (ASSERT (STRING= S2 "abcde6")))) NIL)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.1 (LET ((V (COPY-SEQ #*0100110))) (MAP-INTO V (FUNCTION (LAMBDA (X) (- 1 X))) V) (AND (BIT-VECTOR-P V) V)) #*1011001)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.2 (LET ((V (COPY-SEQ #*0100110))) (MAP-INTO V (FUNCTION (LAMBDA NIL 0))) (AND (BIT-VECTOR-P V) V)) #*0000000)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.3 (LET ((V (COPY-SEQ #*0100110))) (MAP-INTO V (FUNCTION IDENTITY) (QUOTE (0 1 1 1 0 0 1))) (AND (BIT-VECTOR-P V) V)) #*0111001)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.4 (LET ((V (COPY-SEQ #*0100110))) (MAP-INTO V (FUNCTION IDENTITY) (QUOTE (0 1 1 1))) (AND (BIT-VECTOR-P V) V)) #*0111110)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.5 (LET ((V (COPY-SEQ #*0100110))) (MAP-INTO V (FUNCTION IDENTITY) (QUOTE (0 1 1 1 0 0 1 4 5 6 7))) (AND (BIT-VECTOR-P V) V)) #*0111001)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.6 (LET ((V (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 1 0 0 1 1 0 1)) :FILL-POINTER 4 :ELEMENT-TYPE (QUOTE BIT)))) (MAP-INTO V (FUNCTION (LAMBDA NIL 1))) (AND (BIT-VECTOR-P V) V)) #*11111111)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.7 (LET ((V (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 1 0 0 1 1 0 1)) :FILL-POINTER 4 :ELEMENT-TYPE (QUOTE BIT)))) (MAP-INTO V (FUNCTION IDENTITY) V) (AND (BIT-VECTOR-P V) V)) #*0100)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.8 (LET ((V (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 1 0 0 1 1 0 1)) :FILL-POINTER 4 :ELEMENT-TYPE (QUOTE BIT)))) (MAP-INTO V (FUNCTION IDENTITY) (QUOTE (1 1 1 1 1 1))) (AND (BIT-VECTOR-P V) (VALUES (FILL-POINTER V) V))) 6 #*111111)
;; Loading (DEFTEST MAP-INTO.BIT-VECTOR.9 (LET ((V (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 1 0 0 1 1 0 1)) :FILL-POINTER 4 :ELEMENT-TYPE (QUOTE BIT)))) (MAP-INTO V (FUNCTION IDENTITY) (QUOTE (1 1 1 1 1 1 0 0 1 1 1))) (AND (BIT-VECTOR-P V) (VALUES (FILL-POINTER V) V))) 8 #*11111100)
;; Loading (DEFTEST MAP-INTO.SPECIALIZED-VECTOR.1 (DO-SPECIAL-INTEGER-VECTORS (V #(1 2 3 4) NIL) (LET ((RESULT (LIST NIL NIL NIL NIL))) (ASSERT (EQ (MAP-INTO RESULT (FUNCTION IDENTITY) V) RESULT)) (ASSERT (EQUAL RESULT (QUOTE (1 2 3 4)))))) NIL)
;; Loading (DEFTEST MAP-INTO.SPECIALIZED-VECTOR.2 (DO-SPECIAL-INTEGER-VECTORS (V #(1 2 3) NIL) (LET ((RESULT (LIST NIL NIL NIL NIL))) (ASSERT (EQ (MAP-INTO RESULT (FUNCTION IDENTITY) V) RESULT)) (ASSERT (EQUAL RESULT (QUOTE (1 2 3 NIL)))))) NIL)
;; Loading (DEFTEST MAP-INTO.SPECIALIZED-VECTOR.3 (DO-SPECIAL-INTEGER-VECTORS (V #(1 1 0 1 1) NIL) (LET ((RESULT (LIST NIL NIL NIL NIL))) (ASSERT (EQ (MAP-INTO RESULT (FUNCTION IDENTITY) V) RESULT)) (ASSERT (EQUAL RESULT (QUOTE (1 1 0 1)))))) NIL)
;; Loading (DEFTEST MAP-INTO.SPECIALIZED-VECTOR.4 (DO-SPECIAL-INTEGER-VECTORS (V #(1 2 1 2 2) NIL) (LET ((V2 #(2 1 2 2 1))) (ASSERT (EQ (MAP-INTO V (FUNCTION IDENTITY) V2) V)) (ASSERT (EQUALP V #(2 1 2 2 1))))) NIL)
;; Loading (DEFTEST MAP-INTO.SPECIALIZED-VECTOR.5 (LET ((LEN 10)) (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR VALS = (LOOP FOR I BELOW LEN COLLECT (COERCE I ETYPE)) FOR VEC = (MAKE-ARRAY LEN :INITIAL-CONTENTS VALS :ELEMENT-TYPE ETYPE) FOR TARGET = (LOOP REPEAT LEN COLLECT NIL) FOR RESULT = (MAP-INTO TARGET (FUNCTION IDENTITY) VEC) UNLESS (AND (EQ TARGET RESULT) (= (LENGTH RESULT) LEN) (= (LENGTH VEC) LEN) (EQUAL VALS RESULT)) COLLECT (LIST ETYPE VALS VEC RESULT))) NIL)
;; Loading (DEFTEST MAP-INTO.SPECIALIZED-VECTOR.6 (LET ((LEN 10)) (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR VEC = (MAKE-ARRAY LEN :INITIAL-CONTENTS VALS :ELEMENT-TYPE ETYPE) FOR TARGET = (LOOP REPEAT LEN COLLECT NIL) FOR RESULT = (MAP-INTO TARGET (FUNCTION IDENTITY) VEC) UNLESS (AND (EQ TARGET RESULT) (= (LENGTH RESULT) LEN) (= (LENGTH VEC) LEN) (EQUAL VALS RESULT)) COLLECT (LIST ETYPE VALS VEC RESULT))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MAP-INTO.SPECIALIZED-VECTOR.7 (LET ((LEN 10)) (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR VALS = (LOOP FOR I BELOW LEN COLLECT (COERCE I ETYPE)) FOR TARGET = (MAKE-ARRAY LEN :INITIAL-CONTENTS VALS :ELEMENT-TYPE ETYPE) FOR RESULT = (MAP-INTO TARGET (FUNCTION IDENTITY) VALS) UNLESS (AND (EQ TARGET RESULT) (= (LENGTH RESULT) LEN) (EVERY (FUNCTION =) RESULT VALS)) COLLECT (LIST ETYPE VALS RESULT))) NIL)
;; Loading (DEFTEST MAP-INTO.SPECIALIZED-VECTOR.8 (LET ((LEN 10)) (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR TARGET = (MAKE-ARRAY LEN :INITIAL-CONTENTS VALS :ELEMENT-TYPE ETYPE) FOR RESULT = (MAP-INTO TARGET (FUNCTION IDENTITY) VALS) UNLESS (AND (EQ TARGET RESULT) (= (LENGTH RESULT) LEN) (EVERY (FUNCTION =) RESULT VALS)) COLLECT (LIST ETYPE VALS RESULT))) NIL)
;; Loading (DEFTEST MAP-INTO.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAP-INTO X (CONSTANTLY NIL)))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST MAP-INTO.ERROR.2 (AND (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (MAP-INTO NIL (FUNCTION IDENTITY) (QUOTE A)))) (TYPE-ERROR NIL NIL))) :BAD) NIL)
;; Loading (DEFTEST MAP-INTO.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAP-INTO (COPY-SEQ (QUOTE (A B C))) (FUNCTION CONS) (QUOTE (D E F)) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST MAP-INTO.ERROR.4 (SIGNALS-ERROR (MAP-INTO) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAP-INTO.ERROR.5 (SIGNALS-ERROR (MAP-INTO (LIST (QUOTE A) (QUOTE B) (QUOTE C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAP-INTO.ERROR.6 (SIGNALS-ERROR (LOCALLY (MAP-INTO (QUOTE A) (FUNCTION (LAMBDA NIL NIL))) T) TYPE-ERROR) T)
;; Loading (DEFTEST MAP-INTO.ERROR.7 (SIGNALS-ERROR (MAP-INTO (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAP-INTO.ERROR.8 (SIGNALS-ERROR (MAP-INTO (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST MAP-INTO.ORDER.1 (LET ((I 0) A B C) (VALUES (MAP-INTO (PROGN (SETF A (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF B (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF C (INCF I)) (QUOTE (A B C D)))) I A B C)) (A B C D) 3 1 2 3)
;; Loading (DEFTEST MAP-INTO.ORDER.2 (LET ((I 0) A B C D) (VALUES (MAP-INTO (PROGN (SETF A (INCF I)) (LIST 1 2 3 4)) (PROGN (SETF B (INCF I)) (FUNCTION LIST)) (PROGN (SETF C (INCF I)) (QUOTE (A B C D))) (PROGN (SETF D (INCF I)) (QUOTE (E F G H)))) I A B C D)) ((A E) (B F) (C G) (D H)) 4 1 2 3 4)
;; Loading (LOAD "reduce.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/reduce.lsp 8136DA57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REDUCE-LIST.1 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F))) (((((A . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-LIST.2 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :FROM-END T) (A B C D E . F))
;; Loading (DEFTEST REDUCE-LIST.3 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :INITIAL-VALUE (QUOTE Z)) ((((((Z . A) . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-LIST.4 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :FROM-END T :INITIAL-VALUE (QUOTE G)) (A B C D E F . G))
;; Loading (DEFTEST REDUCE-LIST.5 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :FROM-END NIL) (((((A . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-LIST.6 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :FROM-END 17) (A B C D E . F))
;; Loading (DEFTEST REDUCE-LIST.7 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :END NIL) (((((A . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-LIST.8 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :END 3) ((A . B) . C))
;; Loading (DEFTEST REDUCE-LIST.9 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :START 1 :END 4) ((B . C) . D))
;; Loading (DEFTEST REDUCE-LIST.10 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :START 1 :END 4 :FROM-END T) (B C . D))
;; Loading (DEFTEST REDUCE-LIST.11 (REDUCE (FUNCTION CONS) (QUOTE (A B C D E F)) :START 1 :END 4 :FROM-END T :INITIAL-VALUE NIL) (B C D))
;; Loading (DEFTEST REDUCE-LIST.12 (REDUCE (QUOTE CONS) (QUOTE (A B C D E F))) (((((A . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-LIST.13 (REDUCE (FUNCTION +) NIL) 0)
;; Loading (DEFTEST REDUCE-LIST.14 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :START 0 :END 0) 0)
;; Loading (DEFTEST REDUCE-LIST.15 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :KEY (QUOTE 1+)) 9)
;; Loading (DEFTEST REDUCE-LIST.16 (REDUCE (FUNCTION CONS) (QUOTE (1 2 3)) :KEY (QUOTE 1+) :FROM-END T :INITIAL-VALUE NIL) (2 3 4))
;; Loading (DEFTEST REDUCE-LIST.17 (REDUCE (FUNCTION +) (QUOTE (1 2 3 4 5 6 7)) :KEY (QUOTE 1+) :START 2 :END 6) 22)
;; Loading (DEFTEST REDUCE-ARRAY.1 (REDUCE (FUNCTION CONS) #(A B C D E F)) (((((A . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-ARRAY.2 (REDUCE (FUNCTION CONS) #(A B C D E F) :FROM-END T) (A B C D E . F))
;; Loading (DEFTEST REDUCE-ARRAY.3 (REDUCE (FUNCTION CONS) #(A B C D E F) :INITIAL-VALUE (QUOTE Z)) ((((((Z . A) . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-ARRAY.4 (REDUCE (FUNCTION CONS) #(A B C D E F) :FROM-END T :INITIAL-VALUE (QUOTE G)) (A B C D E F . G))
;; Loading (DEFTEST REDUCE-ARRAY.5 (REDUCE (FUNCTION CONS) #(A B C D E F) :FROM-END NIL) (((((A . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-ARRAY.6 (REDUCE (FUNCTION CONS) #(A B C D E F) :FROM-END 17) (A B C D E . F))
;; Loading (DEFTEST REDUCE-ARRAY.7 (REDUCE (FUNCTION CONS) #(A B C D E F) :END NIL) (((((A . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-ARRAY.8 (REDUCE (FUNCTION CONS) #(A B C D E F) :END 3) ((A . B) . C))
;; Loading (DEFTEST REDUCE-ARRAY.9 (REDUCE (FUNCTION CONS) #(A B C D E F) :START 1 :END 4) ((B . C) . D))
;; Loading (DEFTEST REDUCE-ARRAY.10 (REDUCE (FUNCTION CONS) #(A B C D E F) :START 1 :END 4 :FROM-END T) (B C . D))
;; Loading (DEFTEST REDUCE-ARRAY.11 (REDUCE (FUNCTION CONS) #(A B C D E F) :START 1 :END 4 :FROM-END T :INITIAL-VALUE NIL) (B C D))
;; Loading (DEFTEST REDUCE-ARRAY.12 (REDUCE (QUOTE CONS) #(A B C D E F)) (((((A . B) . C) . D) . E) . F))
;; Loading (DEFTEST REDUCE-ARRAY.13 (REDUCE (FUNCTION +) #(1 2 3) :START 0 :END 0) 0)
;; Loading (DEFTEST REDUCE-ARRAY.14 (LET ((A (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8)) :FILL-POINTER 4))) (REDUCE (FUNCTION +) A)) 10)
;; Loading (DEFTEST REDUCE-ARRAY.15 (LET ((A (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8)) :FILL-POINTER 4))) (REDUCE (FUNCTION +) A :END NIL)) 10)
;; Loading (DEFTEST REDUCE-ARRAY.16 (LET ((A (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8)) :FILL-POINTER 4))) (REDUCE (FUNCTION +) A :FROM-END T)) 10)
;; Loading (DEFTEST REDUCE-ARRAY.17 (LET ((A (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8)) :FILL-POINTER 4))) (REDUCE (FUNCTION +) A :INITIAL-VALUE 1)) 11)
;; Loading (DEFTEST REDUCE-ARRAY.18 (LET ((A (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8)) :FILL-POINTER 4))) (REDUCE (FUNCTION +) A :INITIAL-VALUE 1 :START 2)) 8)
;; Loading (DEFTEST REDUCE-ARRAY.19 (LET ((A (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8)) :FILL-POINTER 4))) (REDUCE (FUNCTION +) A :END 3)) 6)
;; Loading (DEFTEST REDUCE-ARRAY.20 (DO-SPECIAL-INTEGER-VECTORS (V #(1 0 0 1 1 0) NIL) (ASSERT (EQL (REDUCE (FUNCTION +) V) 3))) NIL)
;; Loading (DEFTEST REDUCE-ARRAY.21 (DO-SPECIAL-INTEGER-VECTORS (V #(1 0 0 1 1 0) NIL) (ASSERT (EQUAL (REDUCE (FUNCTION CONS) V :FROM-END T :INITIAL-VALUE NIL) (QUOTE (1 0 0 1 1 0))))) NIL)
;; Loading (DEFTEST REDUCE-ARRAY.22 (DO-SPECIAL-INTEGER-VECTORS (V #(1 2 3 4 5 6 7) NIL) (ASSERT (EQL (REDUCE (FUNCTION +) V) 28)) (ASSERT (EQL (REDUCE (FUNCTION +) V :FROM-END T) 28)) (ASSERT (EQL (REDUCE (FUNCTION +) V :START 1) 27)) (ASSERT (EQL (REDUCE (FUNCTION +) V :INITIAL-VALUE 10) 38)) (ASSERT (EQL (REDUCE (FUNCTION +) V :END 6) 21))) NIL)
;; Loading (DEFTEST REDUCE-ARRAY.23 (LET* ((LEN 10) (EXPECTED (* 1/2 (1+ LEN) LEN))) (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COERCE I ETYPE)) FOR VEC = (MAKE-ARRAY LEN :INITIAL-CONTENTS VALS :ELEMENT-TYPE ETYPE) FOR RESULT = (REDUCE (FUNCTION +) VEC) UNLESS (= RESULT (COERCE EXPECTED ETYPE)) COLLECT (LIST ETYPE VALS VEC RESULT))) NIL)
;; Loading (DEFTEST REDUCE-ARRAY.24 (LET* ((LEN 10) (EXPECTED (* 1/2 (1+ LEN) LEN))) (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR VEC = (MAKE-ARRAY LEN :INITIAL-CONTENTS VALS :ELEMENT-TYPE ETYPE) FOR RESULT = (REDUCE (FUNCTION +) VEC) UNLESS (= RESULT (COMPLEX (COERCE EXPECTED CETYPE) (COERCE (- EXPECTED) CETYPE))) COLLECT (LIST ETYPE VALS VEC RESULT))) NIL)
;; Loading (DEFTEST REDUCE-ARRAY.25 (DO-SPECIAL-INTEGER-VECTORS (V (VECTOR 0 MOST-POSITIVE-FIXNUM 0 MOST-POSITIVE-FIXNUM 0) NIL) (ASSERT (EQL (REDUCE (FUNCTION +) V) (* 2 MOST-POSITIVE-FIXNUM)))) NIL)
;; Loading (DEFTEST REDUCE.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (REDUCE (QUOTE CONS) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST REDUCE.ERROR.2 (SIGNALS-ERROR (REDUCE) PROGRAM-ERROR) T)
;; Loading (DEFTEST REDUCE.ERROR.3 (SIGNALS-ERROR (REDUCE (FUNCTION LIST) NIL :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST REDUCE.ERROR.4 (SIGNALS-ERROR (REDUCE (FUNCTION LIST) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST REDUCE.ERROR.5 (SIGNALS-ERROR (REDUCE (FUNCTION LIST) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REDUCE.ERROR.6 (SIGNALS-ERROR (REDUCE (FUNCTION LIST) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST REDUCE.ERROR.7 (SIGNALS-ERROR (LOCALLY (REDUCE (QUOTE CONS) (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (DEFTEST REDUCE.ERROR.8 (SIGNALS-ERROR (REDUCE (FUNCTION IDENTITY) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST REDUCE.ERROR.9 (SIGNALS-ERROR (REDUCE (FUNCTION CONS) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REDUCE.ERROR.10 (SIGNALS-ERROR (REDUCE (FUNCTION CONS) (QUOTE (A B C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST REDUCE-STRING.1 (REDUCE (FUNCTION CONS) "abcdef") (((((#\a . #\b) . #\c) . #\d) . #\e) . #\f))
;; Loading (DEFTEST REDUCE-STRING.2 (REDUCE (FUNCTION CONS) "abcdef" :FROM-END T) (#\a #\b #\c #\d #\e . #\f))
;; Loading (DEFTEST REDUCE-STRING.3 (REDUCE (FUNCTION CONS) "abcdef" :INITIAL-VALUE (QUOTE Z)) ((((((Z . #\a) . #\b) . #\c) . #\d) . #\e) . #\f))
;; Loading (DEFTEST REDUCE-STRING.4 (REDUCE (FUNCTION CONS) "abcdef" :FROM-END T :INITIAL-VALUE (QUOTE G)) (#\a #\b #\c #\d #\e #\f . G))
;; Loading (DEFTEST REDUCE-STRING.5 (REDUCE (FUNCTION CONS) "abcdef" :FROM-END NIL) (((((#\a . #\b) . #\c) . #\d) . #\e) . #\f))
;; Loading (DEFTEST REDUCE-STRING.6 (REDUCE (FUNCTION CONS) "abcdef" :FROM-END 17) (#\a #\b #\c #\d #\e . #\f))
;; Loading (DEFTEST REDUCE-STRING.7 (REDUCE (FUNCTION CONS) "abcdef" :END NIL) (((((#\a . #\b) . #\c) . #\d) . #\e) . #\f))
;; Loading (DEFTEST REDUCE-STRING.8 (REDUCE (FUNCTION CONS) "abcdef" :END 3) ((#\a . #\b) . #\c))
;; Loading (DEFTEST REDUCE-STRING.9 (REDUCE (FUNCTION CONS) "abcdef" :START 1 :END 4) ((#\b . #\c) . #\d))
;; Loading (DEFTEST REDUCE-STRING.10 (REDUCE (FUNCTION CONS) "abcdef" :START 1 :END 4 :FROM-END T) (#\b #\c . #\d))
;; Loading (DEFTEST REDUCE-STRING.11 (REDUCE (FUNCTION CONS) "abcdef" :START 1 :END 4 :FROM-END T :INITIAL-VALUE NIL) (#\b #\c #\d))
;; Loading (DEFTEST REDUCE-STRING.12 (REDUCE (QUOTE CONS) "abcdef") (((((#\a . #\b) . #\c) . #\d) . #\e) . #\f))
;; Loading (DEFTEST REDUCE-STRING.13 (REDUCE (FUNCTION +) "abc" :START 0 :END 0) 0)
;; Loading (DEFTEST REDUCE-STRING.14 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "abcdefgh" :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE CHARACTER)))) (COERCE (REDUCE (FUNCTION (LAMBDA (X Y) (CONS Y X))) S :INITIAL-VALUE NIL) (QUOTE STRING))) "fedcba")
;; Loading (DEFTEST REDUCE-STRING.15 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "abcdefgh" :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE CHARACTER)))) (COERCE (REDUCE (FUNCTION (LAMBDA (X Y) (CONS Y X))) S :INITIAL-VALUE NIL :START 1) (QUOTE STRING))) "fedcb")
;; Loading (DEFTEST REDUCE-STRING.16 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "abcdefgh" :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE CHARACTER)))) (COERCE (REDUCE (FUNCTION (LAMBDA (X Y) (CONS Y X))) S :END NIL :INITIAL-VALUE NIL) (QUOTE STRING))) "fedcba")
;; Loading (DEFTEST REDUCE-STRING.17 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "abcdefgh" :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE CHARACTER)))) (COERCE (REDUCE (FUNCTION (LAMBDA (X Y) (CONS Y X))) S :END 4 :INITIAL-VALUE NIL) (QUOTE STRING))) "dcba")
;; Loading (DEFTEST REDUCE-STRING.18 (DO-SPECIAL-STRINGS (S "12345" NIL) (LET ((X (REDUCE (FUNCTION (LAMBDA (X Y) (CONS Y X))) S))) (ASSERT (EQUAL X (QUOTE (#\5 #\4 #\3 #\2 . #\1)))))) NIL)
;; Loading (DEFTEST REDUCE-STRING.19 (DO-SPECIAL-STRINGS (S "54321" NIL) (LET ((X (REDUCE (FUNCTION CONS) S :FROM-END T))) (ASSERT (EQUAL X (QUOTE (#\5 #\4 #\3 #\2 . #\1)))))) NIL)
;; Loading (DEFTEST REDUCE-STRING.20 (DO-SPECIAL-STRINGS (S "12345" NIL) (LET ((X (REDUCE (FUNCTION (LAMBDA (X Y) (CONS Y X))) S :INITIAL-VALUE NIL))) (ASSERT (EQUAL X (QUOTE (#\5 #\4 #\3 #\2 #\1)))))) NIL)
;; Loading (DEFTEST REDUCE-BITSTRING.1 (REDUCE (FUNCTION CONS) #*001101) (((((0 . 0) . 1) . 1) . 0) . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.2 (REDUCE (FUNCTION CONS) #*001101 :FROM-END T) (0 0 1 1 0 . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.3 (REDUCE (FUNCTION CONS) #*001101 :INITIAL-VALUE (QUOTE Z)) ((((((Z . 0) . 0) . 1) . 1) . 0) . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.4 (REDUCE (FUNCTION CONS) #*001101 :FROM-END T :INITIAL-VALUE (QUOTE G)) (0 0 1 1 0 1 . G))
;; Loading (DEFTEST REDUCE-BITSTRING.5 (REDUCE (FUNCTION CONS) #*001101 :FROM-END NIL) (((((0 . 0) . 1) . 1) . 0) . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.6 (REDUCE (FUNCTION CONS) #*001101 :FROM-END 17) (0 0 1 1 0 . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.7 (REDUCE (FUNCTION CONS) #*001101 :END NIL) (((((0 . 0) . 1) . 1) . 0) . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.8 (REDUCE (FUNCTION CONS) #*001101 :END 3) ((0 . 0) . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.9 (REDUCE (FUNCTION CONS) #*001101 :START 1 :END 4) ((0 . 1) . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.10 (REDUCE (FUNCTION CONS) #*001101 :START 1 :END 4 :FROM-END T) (0 1 . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.11 (REDUCE (FUNCTION CONS) #*001101 :START 1 :END 4 :FROM-END T :INITIAL-VALUE NIL) (0 1 1))
;; Loading (DEFTEST REDUCE-BITSTRING.12 (REDUCE (QUOTE CONS) #*001101) (((((0 . 0) . 1) . 1) . 0) . 1))
;; Loading (DEFTEST REDUCE-BITSTRING.13 (REDUCE (FUNCTION +) #(1 1 1) :START 0 :END 0) 0)
;; Loading (DEFTEST REDUCE-BITSTRING.14 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 1 1 0 1)) :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE BIT)))) (REDUCE (FUNCTION +) S)) 3)
;; Loading (DEFTEST REDUCE-BITSTRING.15 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 1 1 0 1)) :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE BIT)))) (REDUCE (FUNCTION +) S :START 3)) 2)
;; Loading (DEFTEST REDUCE-BITSTRING.16 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 1 1 0 1)) :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE BIT)))) (REDUCE (FUNCTION +) S :START 3 :INITIAL-VALUE 10)) 12)
;; Loading (DEFTEST REDUCE-BITSTRING.17 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 1 1 0 1)) :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE BIT)))) (REDUCE (FUNCTION +) S :END NIL)) 3)
;; Loading (DEFTEST REDUCE-BITSTRING.18 (LET ((S (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 1 1 1)) :FILL-POINTER 6 :ELEMENT-TYPE (QUOTE BIT)))) (REDUCE (FUNCTION +) S :START 2 :END 4)) 2)
;; Loading (DEFTEST REDUCE.ORDER.1 (LET ((I 0) X Y) (VALUES (REDUCE (PROGN (SETF X (INCF I)) (FUNCTION CONS)) (PROGN (SETF Y (INCF I)) (QUOTE (A B C)))) I X Y)) ((A . B) . C) 2 1 2)
;; Loading (DEFTEST REDUCE.ORDER.2 (LET ((I 0) A B C D E F G) (VALUES (REDUCE (PROGN (SETF A (INCF I)) (FUNCTION CONS)) (PROGN (SETF B (INCF I)) (QUOTE (A B C D E F))) :FROM-END (PROGN (SETF C (INCF I)) T) :INITIAL-VALUE (PROGN (SETF D (INCF I)) (QUOTE NIL)) :START (PROGN (SETF E (INCF I)) 1) :END (PROGN (SETF F (INCF I)) 4) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY))) I A B C D E F G)) (B C D) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST REDUCE.ORDER.3 (LET ((I 0) A B C D E F G) (VALUES (REDUCE (PROGN (SETF A (INCF I)) (FUNCTION CONS)) (PROGN (SETF B (INCF I)) (QUOTE (A B C D E F))) :KEY (PROGN (SETF C (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF D (INCF I)) 4) :START (PROGN (SETF E (INCF I)) 1) :INITIAL-VALUE (PROGN (SETF F (INCF I)) (QUOTE NIL)) :FROM-END (PROGN (SETF G (INCF I)) T)) I A B C D E F G)) (B C D) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST REDUCE.ALLOW-OTHER-KEYS.1 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :ALLOW-OTHER-KEYS T) 6)
;; Loading (DEFTEST REDUCE.ALLOW-OTHER-KEYS.2 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :ALLOW-OTHER-KEYS NIL) 6)
;; Loading (DEFTEST REDUCE.ALLOW-OTHER-KEYS.3 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :BAD T :ALLOW-OTHER-KEYS T) 6)
;; Loading (DEFTEST REDUCE.ALLOW-OTHER-KEYS.4 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :ALLOW-OTHER-KEYS T :BAD T) 6)
;; Loading (DEFTEST REDUCE.ALLOW-OTHER-KEYS.5 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 6)
;; Loading (DEFTEST REDUCE.ALLOW-OTHER-KEYS.6 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) 6)
;; Loading (DEFTEST REDUCE.ALLOW-OTHER-KEYS.7 (REDUCE (FUNCTION +) (QUOTE (1 2 3)) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) 6)
;; Loading (DEFTEST REDUCE.ALLOW-OTHER-KEYS.8 (REDUCE (FUNCTION CONS) (QUOTE (1 2 3)) :ALLOW-OTHER-KEYS T :FROM-END T :BAD T :INITIAL-VALUE NIL) (1 2 3))
;; Loading (DEFTEST REDUCE.KEYWORDS.9 (REDUCE (FUNCTION CONS) (QUOTE (1 2 3)) :FROM-END T :FROM-END NIL :INITIAL-VALUE NIL :INITIAL-VALUE (QUOTE A)) (1 2 3))
;; Loading (LOAD "count.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/count.lsp 816DC1E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COUNT-LIST.1 (COUNT (QUOTE A) (QUOTE (A B C D E A E F))) 2)
;; Loading (DEFTEST COUNT-LIST.2 (COUNT (QUOTE A) (QUOTE (A B C D E A E F)) :TEST (FUNCTION EQL)) 2)
;; Loading (DEFTEST COUNT-LIST.3 (COUNT (QUOTE A) (QUOTE (A B C D E A E F)) :TEST (QUOTE EQL)) 2)
;; Loading (DEFTEST COUNT-LIST.4 (COUNT 1 (QUOTE (1 2 2 3 2 1 2 2 5 4)) :KEY (FUNCTION 1-)) 5)
;; Loading (DEFTEST COUNT-LIST.5 (COUNT 1 (QUOTE (1 2 2 3 2 1 2 2 5 4)) :KEY (QUOTE 1-)) 5)
;; Loading (DEFTEST COUNT-LIST.6 (COUNT 1 (QUOTE (1 2 2 3 2 1 2 2 5 4)) :KEY (FUNCTION 1-) :TEST (FUNCTION EQUAL)) 5)
;; Loading (DEFTEST COUNT-LIST.7 (COUNT 1 (QUOTE (2 1 1 2 3 1 4 1 7 6 1 8)) :FROM-END T) 5)
;; Loading (DEFTEST COUNT-LIST.8 (LET ((C 0)) (COUNT 1 (QUOTE (1 2 3 1 4 1 7 6 1 8)) :KEY (FUNCTION (LAMBDA (X) (PROG1 (- X C) (INCF C)))))) 4)
;; Loading (DEFTEST COUNT-LIST.9 (LET ((C 0)) (COUNT 1 (QUOTE (1 2 3 7 4 5 7 6 2 8)) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (PROG1 (- X C) (INCF C)))))) 3)
;; Loading (DEFTEST COUNT-LIST.10 (COUNT 1 (QUOTE (1 1 1 1 1 2 1 1)) :START 3) 4)
;; Loading (DEFTEST COUNT-LIST.11 (COUNT 1 (QUOTE (1 1 1 1 1 2 1 1)) :END 6) 5)
;; Loading (DEFTEST COUNT-LIST.12 (COUNT 1 (QUOTE (1 1 1 1 1 2 1 1)) :START 2 :END 7) 4)
;; Loading (DEFTEST COUNT-LIST.13 (COUNT 1 (QUOTE (1 1 1 1 1 2 1 1)) :START 3 :END NIL) 4)
;; Loading (DEFTEST COUNT-LIST.14 (COUNT 1 (QUOTE (1 1 1 1 1 2 1 1)) :END NIL) 7)
;; Loading (DEFTEST COUNT-LIST.15 (COUNT 1 (QUOTE (1 1 1 1 1 2 1 1)) :TEST-NOT (FUNCTION EQL)) 1)
;; Loading (DEFTEST COUNT-LIST.16 (COUNT 1 (QUOTE (1 1 1 3 1 2 1 1)) :START 2 :END 7 :TEST (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE X Y)) T))) 5)
;; Loading (DEFTEST COUNT-LIST.17 (COUNT 10 (QUOTE (1 11 2 4 14 5 18 6 7)) :TEST (FUNCTION <)) 3)
;; Loading (DEFTEST COUNT-LIST.18 (COUNT 10 (QUOTE (1 11 2 4 14 5 18 6 7)) :TEST-NOT (FUNCTION >=)) 3)
;; Loading (DEFHARMLESS COUNT-LIST.TEST-AND-TEST-NOT.1 (COUNT 0 (QUOTE (0 1 2 0 1 2 3 0 1)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS COUNT-LIST.TEST-AND-TEST-NOT.2 (COUNT 0 (QUOTE (0 1 2 0 1 2 3 0 1)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST COUNT-VECTOR.1 (COUNT (QUOTE A) #(A B C D E A E F)) 2)
;; Loading (DEFTEST COUNT-VECTOR.2 (COUNT (QUOTE A) #(A B C D E A E F) :TEST (FUNCTION EQL)) 2)
;; Loading (DEFTEST COUNT-VECTOR.3 (COUNT (QUOTE A) #(A B C D E A E F) :TEST (QUOTE EQL)) 2)
;; Loading (DEFTEST COUNT-VECTOR.4 (COUNT 1 #(1 2 2 3 2 1 2 2 5 4) :KEY (FUNCTION 1-)) 5)
;; Loading (DEFTEST COUNT-VECTOR.5 (COUNT 1 #(1 2 2 3 2 1 2 2 5 4) :KEY (QUOTE 1-)) 5)
;; Loading (DEFTEST COUNT-VECTOR.6 (COUNT 1 #(1 2 2 3 2 1 2 2 5 4) :KEY (FUNCTION 1-) :TEST (FUNCTION EQUAL)) 5)
;; Loading (DEFTEST COUNT-VECTOR.7 (COUNT 1 #(2 1 1 2 3 1 4 1 7 6 1 8) :FROM-END T) 5)
;; Loading (DEFTEST COUNT-VECTOR.8 (LET ((C 0)) (COUNT 1 #(1 2 3 1 4 1 7 6 1 8) :KEY (FUNCTION (LAMBDA (X) (PROG1 (- X C) (INCF C)))))) 4)
;; Loading (DEFTEST COUNT-VECTOR.9 (LET ((C 0)) (COUNT 1 #(1 2 3 7 4 5 7 6 2 8) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (PROG1 (- X C) (INCF C)))))) 3)
;; Loading (DEFTEST COUNT-VECTOR.10 (COUNT 1 #(1 1 1 1 1 2 1 1) :START 3) 4)
;; Loading (DEFTEST COUNT-VECTOR.11 (COUNT 1 #(1 1 1 1 1 2 1 1) :END 6) 5)
;; Loading (DEFTEST COUNT-VECTOR.12 (COUNT 1 #(1 1 1 1 1 2 1 1) :START 2 :END 7) 4)
;; Loading (DEFTEST COUNT-VECTOR.13 (COUNT 1 #(1 1 1 1 1 2 1 1) :START 3 :END NIL) 4)
;; Loading (DEFTEST COUNT-VECTOR.14 (COUNT 1 #(1 1 1 1 1 2 1 1) :END NIL) 7)
;; Loading (DEFTEST COUNT-VECTOR.15 (COUNT 1 #(1 1 1 1 1 2 1 1) :TEST-NOT (FUNCTION EQL)) 1)
;; Loading (DEFTEST COUNT-VECTOR.16 (COUNT 1 #(1 1 1 3 1 2 1 1) :START 2 :END 7 :TEST (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE X Y)) T))) 5)
;; Loading (DEFTEST COUNT-VECTOR.17 (COUNT 10 #(1 11 2 4 14 5 18 6 7) :TEST (FUNCTION <)) 3)
;; Loading (DEFTEST COUNT-VECTOR.18 (COUNT 10 #(1 11 2 4 14 5 18 6 7) :TEST-NOT (FUNCTION >=)) 3)
;; Loading (DEFHARMLESS COUNT-VECTOR.TEST-AND-TEST-NOT.1 (COUNT 0 #(0 1 2 0 1 2 3 0 1) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS COUNT-VECTOR.TEST-AND-TEST-NOT.2 (COUNT 0 #(0 1 2 0 1 2 3 0 1) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST COUNT-FILLED-VECTOR.1 (COUNT (QUOTE A) (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (A B C D E A E F)) :FILL-POINTER T)) 2)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.2 (COUNT (QUOTE A) (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (A B C D E A E F)) :FILL-POINTER T) :TEST (FUNCTION EQL)) 2)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.3 (COUNT (QUOTE A) (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (A B C D E A E F)) :FILL-POINTER T) :TEST (QUOTE EQL)) 2)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.4 (COUNT 1 (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 2 2 3 2 1 2 2 5 4)) :FILL-POINTER T) :KEY (FUNCTION 1-)) 5)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.5 (COUNT 1 (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 2 2 3 2 1 2 2 5 4)) :FILL-POINTER T) :KEY (QUOTE 1-)) 5)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.6 (COUNT 1 (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 2 2 3 2 1 2 2 5 4)) :FILL-POINTER T) :KEY (FUNCTION 1-) :TEST (FUNCTION EQUAL)) 5)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.7 (COUNT 1 (MAKE-ARRAY 12 :INITIAL-CONTENTS (QUOTE (2 1 1 2 3 1 4 1 7 6 1 8)) :FILL-POINTER T) :FROM-END T) 5)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.8 (LET ((C 0)) (COUNT 1 (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 2 3 1 4 1 7 6 1 8)) :FILL-POINTER T) :KEY (FUNCTION (LAMBDA (X) (PROG1 (- X C) (INCF C)))))) 4)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.9 (LET ((C 0)) (COUNT 1 (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 2 3 7 4 5 7 6 2 8)) :FILL-POINTER T) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (PROG1 (- X C) (INCF C)))))) 3)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.10 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 2 1 1)) :FILL-POINTER T) :START 3) 4)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.11 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 2 1 1)) :FILL-POINTER T) :END 6) 5)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.12 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 2 1 1)) :FILL-POINTER T) :START 2 :END 7) 4)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.13 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 2 1 1)) :FILL-POINTER T) :START 3 :END NIL) 4)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.14 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 2 1 1)) :FILL-POINTER T) :END NIL) 7)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.15 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 2 1 1)) :FILL-POINTER T) :TEST-NOT (FUNCTION EQL)) 1)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.16 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 3 1 2 1 1)) :FILL-POINTER T) :START 2 :END 7 :TEST (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE X Y)) T))) 5)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.17 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 1 1 1)) :FILL-POINTER 6)) 6)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.18 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 1 1 1)) :FILL-POINTER 6) :START 2) 4)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.19 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 1 1 1)) :FILL-POINTER 6) :FROM-END (QUOTE FOO)) 6)
;; Loading (DEFTEST COUNT-FILLED-VECTOR.20 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 1 1 1)) :FILL-POINTER 6) :START 2 :FROM-END (QUOTE YES)) 4)
;; Loading (DEFTEST COUNT.SPECIAL-VECTOR.1 (DO-SPECIAL-INTEGER-VECTORS (V #(0 1 1 0 1 1 1 0 1 1 1 1 0) NIL) (ASSERT (EQL (COUNT 0 V) 4)) (ASSERT (EQL (COUNT 1 V) 9)) (ASSERT (EQL (COUNT 2 V) 0)) (ASSERT (EQL (COUNT 0 V :START 2) 3)) (ASSERT (EQL (COUNT 1 V :END 11) 8))) NIL)
;; Loading (DEFTEST COUNT.SPECIAL-VECTOR.2 (DO-SPECIAL-INTEGER-VECTORS (V #(1 2 3 4 5 6 7) NIL) (ASSERT (EQL (COUNT 0 V) 0)) (ASSERT (EQL (COUNT 1 V) 1)) (ASSERT (EQL (COUNT 2 V) 1)) (ASSERT (EQL (COUNT 3 V) 1)) (ASSERT (EQL (COUNT 4 V) 1)) (ASSERT (EQL (COUNT 5 V) 1)) (ASSERT (EQL (COUNT 6 V) 1)) (ASSERT (EQL (COUNT 7 V) 1))) NIL)
;; Loading (DEFTEST COUNT.SPECIAL-VECTOR.3 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR VALS = (LOOP FOR E IN (QUOTE (0 1 2 1 3 1 4 5 6 0)) COLLECT (COERCE E ETYPE)) FOR VEC = (MAKE-ARRAY (LENGTH VALS) :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR RESULT = (COUNT (COERCE 1 ETYPE) VEC) UNLESS (= RESULT 3) COLLECT (LIST ETYPE VALS VEC RESULT)) NIL)
;; Loading (DEFTEST COUNT.SPECIAL-VECTOR.4 (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL INTEGER)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR E IN (QUOTE (4 1 2 1 3 1 4 5 6 6)) COLLECT (COMPLEX 0 (COERCE E CETYPE))) FOR VEC = (MAKE-ARRAY (LENGTH VALS) :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR RESULT = (COUNT (COMPLEX 0 (COERCE 1 CETYPE)) VEC) UNLESS (= RESULT 3) COLLECT (LIST ETYPE VALS VEC RESULT)) NIL)
;; Loading (DEFTEST COUNT-BIT-VECTOR.1 (COUNT 1 #*00101100011011000) 7)
;; Loading (DEFTEST COUNT-BIT-VECTOR.2 (COUNT 1 #*00101100011011000 :TEST (FUNCTION EQL)) 7)
;; Loading (DEFTEST COUNT-BIT-VECTOR.3 (COUNT 1 #*00101100011011000 :TEST (QUOTE EQL)) 7)
;; Loading (DEFTEST COUNT-BIT-VECTOR.4 (COUNT 1 #*00101100011011000 :KEY (FUNCTION 1+)) 10)
;; Loading (DEFTEST COUNT-BIT-VECTOR.5 (COUNT 0 #*00101100011011000 :KEY (QUOTE 1-)) 7)
;; Loading (DEFTEST COUNT-BIT-VECTOR.6 (COUNT 0 #*00101100011011000 :KEY (FUNCTION 1-) :TEST (FUNCTION EQUAL)) 7)
;; Loading (DEFTEST COUNT-BIT-VECTOR.7 (COUNT 1 #*00101100011011000 :FROM-END T) 7)
;; Loading (DEFTEST COUNT-BIT-VECTOR.8 (LET ((C 1)) (COUNT 0 #*0000110101001 :KEY (FUNCTION (LAMBDA (X) (SETF C (- C)) (+ C X))))) 2)
;; Loading (DEFTEST COUNT-BIT-VECTOR.9 (LET ((C 1)) (COUNT 0 #*0000011010101 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (SETF C (- C)) (+ C X))))) 4)
;; Loading (DEFTEST COUNT-BIT-VECTOR.10 (COUNT 1 #*11000110110 :START 3) 4)
;; Loading (DEFTEST COUNT-BIT-VECTOR.11 (COUNT 1 (QUOTE #*110111110111) :END 6) 5)
;; Loading (DEFTEST COUNT-BIT-VECTOR.12 (COUNT 1 #*11111011 :START 2 :END 7) 4)
;; Loading (DEFTEST COUNT-BIT-VECTOR.13 (COUNT 1 #*11111011 :START 3 :END NIL) 4)
;; Loading (DEFTEST COUNT-BIT-VECTOR.14 (COUNT 1 #*11111011 :END NIL) 7)
;; Loading (DEFTEST COUNT-BIT-VECTOR.15 (COUNT 1 #*11111011 :TEST-NOT (FUNCTION EQL)) 1)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST COUNT-BIT-VECTOR.16 (COUNT 1 #*11101101 :START 2 :END 7 :TEST (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE X Y)) T))) 5)
;; Loading (DEFTEST COUNT-BIT-VECTOR.17 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 0 1 1 1 1 1 1)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5)) 4)
;; Loading (DEFTEST COUNT-BIT-VECTOR.18 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 0 1 1 1 1 1 1)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5) :START 1) 3)
;; Loading (DEFTEST COUNT-BIT-VECTOR.19 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 0 1 1 1 1 1 1)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5) :END NIL) 4)
;; Loading (DEFTEST COUNT-BIT-VECTOR.20 (COUNT 1 (MAKE-ARRAY 8 :INITIAL-CONTENTS (QUOTE (1 0 1 1 1 1 1 1)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 6) :END 4) 3)
;; Loading (DEFTEST COUNT-BIT-VECTOR.21 (COUNT 1 #*00001100100 :TEST (FUNCTION <=)) 3)
;; Loading (DEFTEST COUNT-BIT-VECTOR.22 (COUNT 1 #*00001100100 :TEST-NOT (FUNCTION >)) 3)
;; Loading (DEFHARMLESS COUNT-BIT-VECTOR.TEST-AND-TEST-NOT.1 (COUNT 0 #*0011010101100010000 :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS COUNT-BIT-VECTOR.TEST-AND-TEST-NOT.2 (COUNT 0 #*0011010101100010000 :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST COUNT-STRING.1 (COUNT #\1 "00101100011011000") 7)
;; Loading (DEFTEST COUNT-STRING.2 (COUNT #\1 "00101100011011000" :TEST (FUNCTION EQL)) 7)
;; Loading (DEFTEST COUNT-STRING.3 (COUNT #\1 "00101100011011000" :TEST (QUOTE EQL)) 7)
;; Loading (DEFTEST COUNT-STRING.4 (COUNT #\1 "00101100011011000" :KEY (FUNCTION (LAMBDA (X) (IF (EQL X #\0) #\1 #\2)))) 10)
;; Loading (DEFTEST COUNT-STRING.5 (COUNT #\1 "00101100011011000" :KEY (QUOTE IDENTITY)) 7)
;; Loading (DEFTEST COUNT-STRING.6 (COUNT #\1 "00101100011011000" :KEY (FUNCTION IDENTITY) :TEST (FUNCTION EQUAL)) 7)
;; Loading (DEFTEST COUNT-STRING.7 (COUNT #\1 "00101100011011000" :FROM-END T) 7)
;; Loading (DEFTEST COUNT-STRING.8 (LET ((C NIL)) (COUNT #\0 "0000110101001" :KEY (FUNCTION (LAMBDA (X) (SETF C (NOT C)) (AND C X))))) 5)
;; Loading (DEFTEST COUNT-STRING.9 (LET ((C NIL)) (COUNT #\0 "0000011010101" :FROM-END T :KEY (FUNCTION (LAMBDA (X) (SETF C (NOT C)) (AND C X))))) 3)
;; Loading (DEFTEST COUNT-STRING.10 (COUNT #\1 "11000110110" :START 3) 4)
;; Loading (DEFTEST COUNT-STRING.11 (COUNT #\1 (QUOTE "110111110111") :END 6) 5)
;; Loading (DEFTEST COUNT-STRING.12 (COUNT #\1 "11111011" :START 2 :END 7) 4)
;; Loading (DEFTEST COUNT-STRING.13 (COUNT #\1 "11111011" :START 3 :END NIL) 4)
;; Loading (DEFTEST COUNT-STRING.14 (COUNT #\1 "11111011" :END NIL) 7)
;; Loading (DEFTEST COUNT-STRING.15 (COUNT #\1 "11111011" :TEST-NOT (FUNCTION EQL)) 1)
;; Loading (DEFTEST COUNT-STRING.16 (COUNT #\1 "11101101" :START 2 :END 7 :TEST (FUNCTION (LAMBDA (X Y) (DECLARE (IGNORE X Y)) T))) 5)
;; Loading (DEFTEST COUNT-STRING.17 (COUNT #\a (MAKE-ARRAY 10 :INITIAL-CONTENTS "abaaacaaaa" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE CHARACTER))) 5)
;; Loading (DEFTEST COUNT-STRING.18 (COUNT #\a (MAKE-ARRAY 10 :INITIAL-CONTENTS "abaaacaaaa" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE CHARACTER)) :START 1) 4)
;; Loading (DEFTEST COUNT-STRING.19 (COUNT #\a (MAKE-ARRAY 10 :INITIAL-CONTENTS "abaaacaaaa" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE CHARACTER)) :END NIL) 5)
;; Loading (DEFTEST COUNT-STRING.20 (COUNT #\a (MAKE-ARRAY 10 :INITIAL-CONTENTS "abaaacaaaa" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE CHARACTER)) :START 2 :END 5) 3)
;; Loading (DEFTEST COUNT-STRING.21 (COUNT #\1 "00001100100" :TEST (FUNCTION CHAR<=)) 3)
;; Loading (DEFTEST COUNT-STRING.22 (COUNT #\1 "00001100100" :TEST-NOT (FUNCTION CHAR>)) 3)
;; Loading (DEFTEST COUNT-STRING.23 (DO-SPECIAL-STRINGS (S "a1a3abcda" NIL) (ASSERT (= (COUNT #\a S) 4))) NIL)
;; Loading (DEFHARMLESS COUNT-STRING.TEST-AND-TEST-NOT.1 (COUNT #\0 "0011010101100010000" :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS COUNT-STRING.TEST-AND-TEST-NOT.2 (COUNT #\0 "0011010101100010000" :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST COUNT.ORDER.1 (LET ((I 0) C1 C2 C3 C4 C5 C6 C7) (VALUES (COUNT (PROGN (SETF C1 (INCF I)) NIL) (PROGN (SETF C2 (INCF I)) (QUOTE (A NIL B C NIL D E))) :START (PROGN (SETF C3 (INCF I)) 0) :END (PROGN (SETF C4 (INCF I)) 3) :KEY (PROGN (SETF C5 (INCF I)) (FUNCTION IDENTITY)) :FROM-END (PROGN (SETF C6 (INCF I)) NIL) :TEST (PROGN (SETF C7 (INCF I)) (FUNCTION EQL))) I C1 C2 C3 C4 C5 C6 C7)) 1 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST COUNT.ORDER.2 (LET ((I 0) C1 C2 C3 C4 C5 C6 C7) (VALUES (COUNT (PROGN (SETF C1 (INCF I)) NIL) (PROGN (SETF C2 (INCF I)) (QUOTE (A NIL B C NIL D E))) :TEST (PROGN (SETF C3 (INCF I)) (FUNCTION EQL)) :FROM-END (PROGN (SETF C4 (INCF I)) NIL) :KEY (PROGN (SETF C5 (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF C6 (INCF I)) 3) :START (PROGN (SETF C7 (INCF I)) 0)) I C1 C2 C3 C4 C5 C6 C7)) 1 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST COUNT.ALLOW-OTHER-KEYS.1 (COUNT (QUOTE A) (QUOTE (B A D A C)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST COUNT.ALLOW-OTHER-KEYS.2 (COUNT (QUOTE A) (QUOTE (B A D A C)) :ALLOW-OTHER-KEYS (PARSE-NAMESTRING (QUOTE "*")) :ALSO-BAD T) 2)
;; Loading (DEFTEST COUNT.ALLOW-OTHER-KEYS.3 (COUNT (QUOTE A) (QUOTE (B A D A C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST COUNT.KEYWORDS.4 (COUNT 2 (QUOTE (1 2 3 2 5)) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION 1+)) 2)
;; Loading (DEFTEST COUNT.ALLOW-OTHER-KEYS.5 (COUNT (QUOTE A) (QUOTE (A B C A)) :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST COUNT.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (COUNT (QUOTE A) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST COUNT.ERROR.4 (SIGNALS-ERROR (COUNT) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.5 (SIGNALS-ERROR (COUNT NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.6 (SIGNALS-ERROR (COUNT NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.7 (SIGNALS-ERROR (COUNT NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.8 (SIGNALS-ERROR (COUNT NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.9 (SIGNALS-ERROR (COUNT NIL NIL 3 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.10 (SIGNALS-ERROR (COUNT (QUOTE A) NIL :BAD T :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.11 (SIGNALS-ERROR (LOCALLY (COUNT (QUOTE A) 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.12 (SIGNALS-ERROR (COUNT (QUOTE B) (QUOTE (A B C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.13 (SIGNALS-ERROR (COUNT (QUOTE B) (QUOTE (A B C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.14 (SIGNALS-ERROR (COUNT (QUOTE B) (QUOTE (A B C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT.ERROR.15 (SIGNALS-ERROR (COUNT (QUOTE B) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "count-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/count-if.lsp C1452CB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COUNT-IF-LIST.1 (COUNT-IF (FUNCTION IDENTITY) (QUOTE (A B NIL C D NIL E))) 5)
;; Loading (DEFTEST COUNT-IF-LIST.2 (COUNT-IF (FUNCTION NOT) (QUOTE (A B NIL C D NIL E))) 2)
;; Loading (DEFTEST COUNT-IF-LIST.3 (COUNT-IF (FUNCTION (LAMBDA (X) (BREAK))) NIL) 0)
;; Loading (DEFTEST COUNT-IF-LIST.4 (COUNT-IF (FUNCTION IDENTITY) (QUOTE (A B NIL C D NIL E)) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-LIST.5 (COUNT-IF (QUOTE IDENTITY) (QUOTE (A B NIL C D NIL E)) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-LIST.6 (COUNT-IF (FUNCTION IDENTITY) (QUOTE (A B NIL C D NIL E)) :KEY (QUOTE IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-LIST.8 (COUNT-IF (FUNCTION IDENTITY) (QUOTE (A B NIL C D NIL E)) :KEY (QUOTE NOT)) 2)
;; Loading (DEFTEST COUNT-IF-LIST.9 (COUNT-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 4 1 8 10 1))) 5)
;; Loading (DEFTEST COUNT-IF-LIST.10 (COUNT-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 4 1 8 10 1)) :KEY (FUNCTION 1+)) 4)
;; Loading (DEFTEST COUNT-IF-LIST.11 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 4 1 8 10 1)) :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 6)
;; Loading (DEFTEST COUNT-IF-LIST.12 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) (QUOTE (0 1 2 3 4 4 1 7 10 1)) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 8)
;; Loading (DEFTEST COUNT-IF-LIST.13 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (QUOTE (A B C D A E F A E F F A A)) :START 2) 4)
;; Loading (DEFTEST COUNT-IF-LIST.14 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (QUOTE (A B C D A E F A E F F A A)) :END 7) 2)
;; Loading (DEFTEST COUNT-IF-LIST.15 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (QUOTE (A B C D A E F A E F F A A)) :END 7 :START 2) 1)
;; Loading (DEFTEST COUNT-IF-LIST.16 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (QUOTE (A B C D A E F A E F F A A)) :END 7 :START 2 :FROM-END T) 1)
;; Loading (DEFTEST COUNT-IF-VECTOR.1 (COUNT-IF (FUNCTION IDENTITY) #(A B NIL C D NIL E)) 5)
;; Loading (DEFTEST COUNT-IF-VECTOR.2 (COUNT-IF (FUNCTION NOT) #(A B NIL C D NIL E)) 2)
;; Loading (DEFTEST COUNT-IF-VECTOR.3 (COUNT-IF (FUNCTION (LAMBDA (X) (BREAK))) #()) 0)
;; Loading (DEFTEST COUNT-IF-VECTOR.4 (COUNT-IF (FUNCTION IDENTITY) #(A B NIL C D NIL E) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-VECTOR.5 (COUNT-IF (QUOTE IDENTITY) #(A B NIL C D NIL E) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-VECTOR.6 (COUNT-IF (FUNCTION IDENTITY) #(A B NIL C D NIL E) :KEY (QUOTE IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-VECTOR.8 (COUNT-IF (FUNCTION IDENTITY) #(A B NIL C D NIL E) :KEY (QUOTE NOT)) 2)
;; Loading (DEFTEST COUNT-IF-VECTOR.9 (COUNT-IF (FUNCTION EVENP) #(1 2 3 4 4 1 8 10 1)) 5)
;; Loading (DEFTEST COUNT-IF-VECTOR.10 (COUNT-IF (FUNCTION EVENP) #(1 2 3 4 4 1 8 10 1) :KEY (FUNCTION 1+)) 4)
;; Loading (DEFTEST COUNT-IF-VECTOR.11 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) #(1 2 3 4 4 1 8 10 1) :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 6)
;; Loading (DEFTEST COUNT-IF-VECTOR.12 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) #(0 1 2 3 4 4 1 7 10 1) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 8)
;; Loading (DEFTEST COUNT-IF-VECTOR.13 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) #(A B C D A E F A E F F A A) :START 2) 4)
;; Loading (DEFTEST COUNT-IF-VECTOR.14 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) #(A B C D A E F A E F F A A) :END 7) 2)
;; Loading (DEFTEST COUNT-IF-VECTOR.15 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) #(A B C D A E F A E F F A A) :END 7 :START 2) 1)
;; Loading (DEFTEST COUNT-IF-VECTOR.16 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) #(A B C D A E F A E F F A A) :END 7 :START 2 :FROM-END T) 1)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.1 (COUNT-IF (FUNCTION IDENTITY) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T)) 5)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.2 (COUNT-IF (FUNCTION NOT) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T)) 2)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.3 (COUNT-IF (FUNCTION (LAMBDA (X) (BREAK))) (MAKE-ARRAY 0 :FILL-POINTER T :ADJUSTABLE T)) 0)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.4 (COUNT-IF (FUNCTION IDENTITY) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.5 (COUNT-IF (QUOTE IDENTITY) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.6 (COUNT-IF (FUNCTION IDENTITY) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T) :KEY (QUOTE IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.8 (COUNT-IF (FUNCTION IDENTITY) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T) :KEY (QUOTE NOT)) 2)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.9 (COUNT-IF (FUNCTION EVENP) (MAKE-ARRAY 9 :INITIAL-CONTENTS (QUOTE (1 2 3 4 4 1 8 10 1)) :FILL-POINTER T :ADJUSTABLE T)) 5)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.10 (COUNT-IF (FUNCTION EVENP) (MAKE-ARRAY 9 :INITIAL-CONTENTS (QUOTE (1 2 3 4 4 1 8 10 1)) :FILL-POINTER T :ADJUSTABLE T) :KEY (FUNCTION 1+)) 4)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.11 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) (MAKE-ARRAY 9 :INITIAL-CONTENTS (QUOTE (1 2 3 4 4 1 8 10 1)) :FILL-POINTER T :ADJUSTABLE T) :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 6)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.12 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (0 1 2 3 4 4 1 7 10 1)) :FILL-POINTER T :ADJUSTABLE T) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 8)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.13 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER T :ADJUSTABLE T) :START 2) 4)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.14 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER T :ADJUSTABLE T) :END 7) 2)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.15 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER T :ADJUSTABLE T) :END 7 :START 2) 1)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.16 (COUNT-IF (FUNCTION (LAMBDA (X) (EQT X (QUOTE A)))) (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER T :ADJUSTABLE T) :END 7 :START 2 :FROM-END T) 1)
;; Loading (DEFTEST COUNT-IF-NONSIMPLE-VECTOR.17 (FLET ((%F (X) (EQT X (QUOTE A)))) (LET ((S (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER 6))) (VALUES (COUNT-IF (FUNCTION %F) S) (COUNT-IF (FUNCTION %F) S :END NIL) (COUNT-IF (FUNCTION %F) S :END 4) (COUNT-IF (FUNCTION %F) S :START 1) (COUNT-IF (FUNCTION %F) S :START 1 :END 4) (COUNT-IF (FUNCTION %F) S :START 1 :END 4 :FROM-END T)))) 2 2 1 1 0 0)
;; Loading (DEFTEST COUNT-IF.SPECIAL-VECTOR.1 (DO-SPECIAL-INTEGER-VECTORS (V #(1 0 1 1 1 0 1 1 1 0 1) NIL) (ASSERT (EQL (COUNT-IF (FUNCTION PLUSP) V) 8)) (ASSERT (EQL (COUNT-IF (FUNCTION ZEROP) V) 3)) (ASSERT (EQL (COUNT-IF (FUNCTION PLUSP) V :START 2) 7)) (ASSERT (EQL (COUNT-IF (FUNCTION ZEROP) V :END 9) 2))) NIL)
;; Loading (DEFTEST COUNT-IF.SPECIAL-VECTOR.2 (DO-SPECIAL-INTEGER-VECTORS (V #(1 3 2 4 7 5 6 1 0 2 4) NIL) (ASSERT (EQL (COUNT-IF (FUNCTION EVENP) V) 6)) (ASSERT (EQL (COUNT-IF (FUNCTION ODDP) V) 5)) (ASSERT (EQL (COUNT-IF (FUNCTION PLUSP) V :START 2) 8)) (ASSERT (EQL (COUNT-IF (FUNCTION ZEROP) V :END 8) 0))) NIL)
;; Loading (DEFTEST COUNT-IF.SPECIAL-VECTOR.3 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR VALS = (LOOP FOR E IN (QUOTE (0 1 2 1 3 0 4 5 6 0)) COLLECT (COERCE E ETYPE)) FOR VEC = (MAKE-ARRAY (LENGTH VALS) :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR RESULT = (COUNT-IF (FUNCTION ZEROP) VEC) UNLESS (= RESULT 3) COLLECT (LIST ETYPE VALS VEC RESULT)) NIL)
;; Loading (DEFTEST COUNT-IF.SPECIAL-VECTOR.4 (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT INTEGER RATIONAL)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR E IN (QUOTE (6 1 2 1 3 -4 4 5 6 100)) COLLECT (COMPLEX 0 (COERCE E CETYPE))) FOR VEC = (MAKE-ARRAY (LENGTH VALS) :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR RESULT = (COUNT-IF (FUNCTION (LAMBDA (X) (< (ABS X) 5/2))) VEC) UNLESS (= RESULT 3) COLLECT (LIST ETYPE VALS VEC RESULT)) NIL)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.1 (COUNT-IF (FUNCTION EVENP) #*001011101101) 5)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.2 (COUNT-IF (FUNCTION IDENTITY) #*001011101101) 12)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.3 (COUNT-IF (FUNCTION (LAMBDA (X) (BREAK))) #*) 0)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.4 (COUNT-IF (FUNCTION IDENTITY) #*001011101101 :KEY (FUNCTION ZEROP)) 5)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.5 (COUNT-IF (QUOTE IDENTITY) #*001011101101 :KEY (FUNCTION ZEROP)) 5)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.6 (COUNT-IF (FUNCTION IDENTITY) #*001011101101 :KEY (QUOTE ZEROP)) 5)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.8 (COUNT-IF (FUNCTION IDENTITY) #*001011101101 :KEY (QUOTE ODDP)) 7)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.10 (COUNT-IF (FUNCTION EVENP) #*001011101101 :KEY (FUNCTION 1+)) 7)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.11 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) #*001011101101 :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 7)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.12 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) #*001011101101 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 5)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.13 (COUNT-IF (FUNCTION ZEROP) #*0111011011100 :START 2) 4)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.14 (COUNT-IF (FUNCTION ZEROP) #*0111011011100 :END 7) 2)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.15 (COUNT-IF (FUNCTION ZEROP) #*0111011011100 :END 7 :START 2) 1)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.16 (COUNT-IF (FUNCTION ZEROP) #*0111011011100 :END 7 :START 2 :FROM-END T) 1)
;; Loading (DEFTEST COUNT-IF-BIT-VECTOR.17 (LET ((S (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 1 0 1 0 0 1 1 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 6))) (VALUES (COUNT-IF (FUNCTION ZEROP) S) (COUNT-IF (FUNCTION ZEROP) S :END NIL) (COUNT-IF (FUNCTION ZEROP) S :END 4) (COUNT-IF (FUNCTION ZEROP) S :START 5) (COUNT-IF (FUNCTION ZEROP) S :START 1 :END 4))) 4 4 3 1 2)
;; Loading (DEFTEST COUNT-IF-STRING.1 (COUNT-IF (FUNCTION (LAMBDA (X) (EQL X #\0))) "001011101101") 5)
;; Loading (DEFTEST COUNT-IF-STRING.2 (COUNT-IF (FUNCTION IDENTITY) "001011101101") 12)
;; Loading (DEFTEST COUNT-IF-STRING.3 (COUNT-IF (FUNCTION (LAMBDA (X) (BREAK))) "") 0)
;; Loading (DEFTEST COUNT-IF-STRING.4 (COUNT-IF (FUNCTION IDENTITY) "001011101101" :KEY (FUNCTION (LAMBDA (X) (EQL X #\0)))) 5)
;; Loading (DEFTEST COUNT-IF-STRING.5 (COUNT-IF (QUOTE IDENTITY) "001011101101" :KEY (FUNCTION (LAMBDA (X) (EQL X #\0)))) 5)
;; Loading (DEFTEST COUNT-IF-STRING.6 (COUNT-IF (FUNCTION (LAMBDA (X) (EQL X #\0))) "001011101101" :KEY (QUOTE IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-STRING.8 (COUNT-IF (FUNCTION IDENTITY) "001011101101" :KEY (FUNCTION (LAMBDA (X) (EQL X #\1)))) 7)
;; Loading (DEFTEST COUNT-IF-STRING.11 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) "001011101101" :KEY (FUNCTION (LAMBDA (X) (+ (IF (EQL X #\0) 0 1) (INCF C)))))) 7)
;; Loading (DEFTEST COUNT-IF-STRING.12 (LET ((C 0)) (COUNT-IF (FUNCTION EVENP) "001011101101" :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ (IF (EQL X #\0) 0 1) (INCF C)))))) 5)
;; Loading (DEFTEST COUNT-IF-STRING.13 (COUNT-IF (FUNCTION (LAMBDA (X) (EQL X #\0))) "0111011011100" :START 2) 4)
;; Loading (DEFTEST COUNT-IF-STRING.14 (COUNT-IF (FUNCTION (LAMBDA (X) (EQL X #\0))) "0111011011100" :END 7) 2)
;; Loading (DEFTEST COUNT-IF-STRING.15 (COUNT-IF (FUNCTION (LAMBDA (X) (EQL X #\0))) "0111011011100" :END 7 :START 2) 1)
;; Loading (DEFTEST COUNT-IF-STRING.16 (COUNT-IF (FUNCTION (LAMBDA (X) (EQL X #\0))) "0111011011100" :END 7 :START 2 :FROM-END T) 1)
;; Loading (DEFTEST COUNT-IF-STRING.17 (LET ((S (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "00a0aa0a0a" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 6))) (VALUES (COUNT-IF (FUNCTION DIGIT-CHAR-P) S) (COUNT-IF (FUNCTION DIGIT-CHAR-P) S :END NIL) (COUNT-IF (FUNCTION DIGIT-CHAR-P) S :START 1) (COUNT-IF (FUNCTION DIGIT-CHAR-P) S :END 2) (COUNT-IF (FUNCTION DIGIT-CHAR-P) S :START 1 :END 2))) 3 3 2 2 1)
;; Loading (DEFTEST COUNT-IF-STRING.18 (DO-SPECIAL-STRINGS (S "1abC3!?deZ" NIL) (ASSERT (= (COUNT-IF (FUNCTION ALPHA-CHAR-P) S) 6))) NIL)
;; Loading (DEFTEST COUNT-IF.ORDER.1 (LET ((I 0) C1 C2 C3 C4 C5 C6) (VALUES (COUNT-IF (PROGN (SETF C1 (INCF I)) (FUNCTION NULL)) (PROGN (SETF C2 (INCF I)) (QUOTE (A NIL B C NIL D E))) :START (PROGN (SETF C3 (INCF I)) 0) :END (PROGN (SETF C4 (INCF I)) 3) :KEY (PROGN (SETF C5 (INCF I)) (FUNCTION IDENTITY)) :FROM-END (PROGN (SETF C6 (INCF I)) NIL)) I C1 C2 C3 C4 C5 C6)) 1 6 1 2 3 4 5 6)
;; Loading (DEFTEST COUNT-IF.ORDER.2 (LET ((I 0) C1 C2 C3 C4 C5 C6) (VALUES (COUNT-IF (PROGN (SETF C1 (INCF I)) (FUNCTION NULL)) (PROGN (SETF C2 (INCF I)) (QUOTE (A NIL B C NIL D E))) :FROM-END (PROGN (SETF C3 (INCF I)) NIL) :KEY (PROGN (SETF C4 (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF C5 (INCF I)) 3) :START (PROGN (SETF C6 (INCF I)) 0)) I C1 C2 C3 C4 C5 C6)) 1 6 1 2 3 4 5 6)
;; Loading (DEFTEST COUNT-IF.ALLOW-OTHER-KEYS.1 (COUNT-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST COUNT-IF.ALLOW-OTHER-KEYS.2 (COUNT-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS (PARSE-NAMESTRING (QUOTE "*")) :ALSO-BAD T) 2)
;; Loading (DEFTEST COUNT-IF.ALLOW-OTHER-KEYS.3 (COUNT-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST COUNT-IF.KEYWORDS.4 (COUNT-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION 1+)) 2)
;; Loading (DEFTEST COUNT-IF.ALLOW-OTHER-KEYS.5 (COUNT-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST COUNT-IF.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (COUNT-IF (FUNCTION IDENTITY) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST COUNT-IF.ERROR.4 (SIGNALS-ERROR (COUNT-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.5 (SIGNALS-ERROR (COUNT-IF (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.6 (SIGNALS-ERROR (COUNT-IF (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.7 (SIGNALS-ERROR (COUNT-IF (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.8 (SIGNALS-ERROR (COUNT-IF (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.9 (SIGNALS-ERROR (COUNT-IF (FUNCTION NULL) NIL 3 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.10 (SIGNALS-ERROR (COUNT-IF (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.11 (SIGNALS-ERROR (LOCALLY (COUNT-IF (FUNCTION IDENTITY) 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.12 (SIGNALS-ERROR (COUNT-IF (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.13 (SIGNALS-ERROR (COUNT-IF (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.14 (SIGNALS-ERROR (COUNT-IF (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CDR)) TYPE-ERROR) T)
;; Loading (DEFTEST COUNT-IF.ERROR.15 (SIGNALS-ERROR (COUNT-IF (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "count-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/count-if-not.lsp C180B017>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.1 (COUNT-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B NIL C D NIL E))) 2)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.2 (COUNT-IF-NOT (FUNCTION NOT) (QUOTE (A B NIL C D NIL E))) 5)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.3 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (BREAK))) NIL) 0)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.4 (COUNT-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B NIL C D NIL E)) :KEY (FUNCTION IDENTITY)) 2)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.5 (COUNT-IF-NOT (QUOTE IDENTITY) (QUOTE (A B NIL C D NIL E)) :KEY (FUNCTION IDENTITY)) 2)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.6 (COUNT-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B NIL C D NIL E)) :KEY (QUOTE IDENTITY)) 2)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.8 (COUNT-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B NIL C D NIL E)) :KEY (QUOTE NOT)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.9 (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 4 1 8 10 1))) 5)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.10 (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 4 1 8 10 1)) :KEY (FUNCTION 1+)) 4)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.11 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 4 1 8 10 1)) :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 6)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.12 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE (0 1 2 3 4 4 1 7 10 1)) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 8)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.13 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) (QUOTE (A B C D A E F A E F F A A)) :START 2) 4)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.14 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) (QUOTE (A B C D A E F A E F F A A)) :END 7) 2)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.15 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) (QUOTE (A B C D A E F A E F F A A)) :END 7 :START 2) 1)
;; Loading (DEFTEST COUNT-IF-NOT-LIST.16 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) (QUOTE (A B C D A E F A E F F A A)) :END 7 :START 2 :FROM-END T) 1)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.1 (COUNT-IF-NOT (FUNCTION IDENTITY) #(A B NIL C D NIL E)) 2)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.2 (COUNT-IF-NOT (FUNCTION NOT) #(A B NIL C D NIL E)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.3 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (BREAK))) #()) 0)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.4 (COUNT-IF-NOT (FUNCTION NOT) #(A B NIL C D NIL E) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.5 (COUNT-IF-NOT (QUOTE NOT) #(A B NIL C D NIL E) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.6 (COUNT-IF-NOT (FUNCTION NOT) #(A B NIL C D NIL E) :KEY (QUOTE IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.8 (COUNT-IF-NOT (FUNCTION NOT) #(A B NIL C D NIL E) :KEY (QUOTE NOT)) 2)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.9 (COUNT-IF-NOT (FUNCTION ODDP) #(1 2 3 4 4 1 8 10 1)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.10 (COUNT-IF-NOT (FUNCTION ODDP) #(1 2 3 4 4 1 8 10 1) :KEY (FUNCTION 1+)) 4)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.11 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) #(1 2 3 4 4 1 8 10 1) :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 6)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.12 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) #(0 1 2 3 4 4 1 7 10 1) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 8)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.13 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) #(A B C D A E F A E F F A A) :START 2) 4)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.14 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) #(A B C D A E F A E F F A A) :END 7) 2)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.15 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) #(A B C D A E F A E F F A A) :END 7 :START 2) 1)
;; Loading (DEFTEST COUNT-IF-NOT-VECTOR.16 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) #(A B C D A E F A E F F A A) :END 7 :START 2 :FROM-END T) 1)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.1 (COUNT-IF-NOT (FUNCTION IDENTITY) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T)) 2)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.2 (COUNT-IF-NOT (FUNCTION NOT) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.3 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (BREAK))) (MAKE-ARRAY 0 :FILL-POINTER T :ADJUSTABLE T)) 0)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.4 (COUNT-IF-NOT (FUNCTION NOT) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.5 (COUNT-IF-NOT (QUOTE NOT) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T) :KEY (FUNCTION IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.6 (COUNT-IF-NOT (FUNCTION NOT) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T) :KEY (QUOTE IDENTITY)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.8 (COUNT-IF-NOT (FUNCTION NOT) (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (A B NIL C D NIL E)) :FILL-POINTER T :ADJUSTABLE T) :KEY (QUOTE NOT)) 2)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.9 (COUNT-IF-NOT (FUNCTION ODDP) (MAKE-ARRAY 9 :INITIAL-CONTENTS (QUOTE (1 2 3 4 4 1 8 10 1)) :FILL-POINTER T :ADJUSTABLE T)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.10 (COUNT-IF-NOT (FUNCTION ODDP) (MAKE-ARRAY 9 :INITIAL-CONTENTS (QUOTE (1 2 3 4 4 1 8 10 1)) :FILL-POINTER T :ADJUSTABLE T) :KEY (FUNCTION 1+)) 4)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.11 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) (MAKE-ARRAY 9 :INITIAL-CONTENTS (QUOTE (1 2 3 4 4 1 8 10 1)) :FILL-POINTER T :ADJUSTABLE T) :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 6)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.12 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (0 1 2 3 4 4 1 7 10 1)) :FILL-POINTER T :ADJUSTABLE T) :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 8)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.13 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER T :ADJUSTABLE T) :START 2) 4)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.14 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER T :ADJUSTABLE T) :END 7) 2)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.15 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER T :ADJUSTABLE T) :END 7 :START 2) 1)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.16 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQT X (QUOTE A))))) (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER T :ADJUSTABLE T) :END 7 :START 2 :FROM-END T) 1)
;; Loading (DEFTEST COUNT-IF-NOT-NONSIMPLE-VECTOR.17 (FLET ((%A (C) (NOT (EQT C (QUOTE A)))) (%F (C) (NOT (EQT C (QUOTE F))))) (LET ((A (MAKE-ARRAY 13 :INITIAL-CONTENTS (QUOTE (A B C D A E F A E F F A A)) :FILL-POINTER 9))) (VALUES (COUNT-IF-NOT (FUNCTION %A) A) (COUNT-IF-NOT (FUNCTION %A) A :FROM-END T) (COUNT-IF-NOT (FUNCTION %F) A) (COUNT-IF-NOT (FUNCTION %F) A :FROM-END T)))) 3 3 1 1)
;; Loading (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST COUNT-IF-NOT.SPECIAL-VECTOR.1 (DO-SPECIAL-INTEGER-VECTORS (V #(1 0 1 1 1 0 1 1 1 0 1) NIL) (ASSERT (EQL (COUNT-IF-NOT (FUNCTION PLUSP) V) 3)) (ASSERT (EQL (COUNT-IF-NOT (FUNCTION ZEROP) V) 8)) (ASSERT (EQL (COUNT-IF-NOT (FUNCTION PLUSP) V :START 2) 2)) (ASSERT (EQL (COUNT-IF-NOT (FUNCTION ZEROP) V :END 9) 7))) NIL))
;; Loading (DEFTEST COUNT-IF-NOT.SPECIAL-VECTOR.2 (DO-SPECIAL-INTEGER-VECTORS (V #(1 3 2 4 7 5 6 1 0 2 4) NIL) (ASSERT (EQL (COUNT-IF-NOT (FUNCTION EVENP) V) 5)) (ASSERT (EQL (COUNT-IF-NOT (FUNCTION ODDP) V) 6)) (ASSERT (EQL (COUNT-IF-NOT (FUNCTION PLUSP) V :START 2) 1)) (ASSERT (EQL (COUNT-IF-NOT (FUNCTION ZEROP) V :END 8) 8))) NIL)
;; Loading (DEFTEST COUNT-IF-NOT.SPECIAL-VECTOR.3 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR VALS = (LOOP FOR E IN (QUOTE (0 1 2 1 3 0 4 5 6 0)) COLLECT (COERCE E ETYPE)) FOR VEC = (MAKE-ARRAY (LENGTH VALS) :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR RESULT = (COUNT-IF-NOT (FUNCTION ZEROP) VEC) UNLESS (= RESULT 7) COLLECT (LIST ETYPE VALS VEC RESULT)) NIL)
;; Loading (DEFTEST COUNT-IF-NOT.SPECIAL-VECTOR.4 (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT INTEGER RATIONAL)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR E IN (QUOTE (6 1 2 1 3 -4 4 5 6 100)) COLLECT (COMPLEX 0 (COERCE E CETYPE))) FOR VEC = (MAKE-ARRAY (LENGTH VALS) :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR RESULT = (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (< (ABS X) 5/2))) VEC) UNLESS (= RESULT 7) COLLECT (LIST ETYPE VALS VEC RESULT)) NIL)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.1 (COUNT-IF-NOT (FUNCTION ODDP) #*001011101101) 5)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.2 (COUNT-IF-NOT (FUNCTION IDENTITY) #*001011101101) 0)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.3 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (BREAK))) #*) 0)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.4 (COUNT-IF-NOT (FUNCTION IDENTITY) #*001011101101 :KEY (FUNCTION ZEROP)) 7)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.5 (COUNT-IF-NOT (QUOTE NOT) #*001011101101 :KEY (FUNCTION ZEROP)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.6 (COUNT-IF-NOT (FUNCTION NOT) #*001011101101 :KEY (QUOTE ZEROP)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.8 (COUNT-IF-NOT (FUNCTION IDENTITY) #*001011101101 :KEY (QUOTE ODDP)) 5)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.10 (COUNT-IF-NOT (FUNCTION ODDP) #*001011101101 :KEY (FUNCTION 1+)) 7)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.11 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) #*001011101101 :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 7)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.12 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) #*001011101101 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ X (INCF C)))))) 5)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.13 (COUNT-IF-NOT (FUNCTION ZEROP) #*0111011011100 :START 2) 7)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.14 (COUNT-IF-NOT (FUNCTION ZEROP) #*0111011011100 :END 7) 5)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.15 (COUNT-IF-NOT (FUNCTION ZEROP) #*0111011011100 :END 7 :START 2) 4)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.16 (COUNT-IF-NOT (FUNCTION ZEROP) #*0111011011100 :END 7 :START 2 :FROM-END T) 4)
;; Loading (DEFTEST COUNT-IF-NOT-BIT-VECTOR.17 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 1 1 1 0 1 0 0)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (AND (BIT-VECTOR-P A) (VALUES (COUNT-IF-NOT (FUNCTION ZEROP) A) (COUNT-IF-NOT (FUNCTION ODDP) A) (COUNT-IF-NOT (FUNCTION ZEROP) A :FROM-END T) (COUNT-IF-NOT (FUNCTION ODDP) A :FROM-END T)))) 2 3 2 3)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.1 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (EQL X #\0))) "001011101101") 7)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.2 (COUNT-IF-NOT (FUNCTION IDENTITY) "001011101101") 0)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.3 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (BREAK))) "") 0)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.4 (COUNT-IF-NOT (FUNCTION IDENTITY) "001011101101" :KEY (FUNCTION (LAMBDA (X) (EQL X #\0)))) 7)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.5 (COUNT-IF-NOT (QUOTE IDENTITY) "001011101101" :KEY (FUNCTION (LAMBDA (X) (EQL X #\0)))) 7)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.6 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (EQL X #\0))) "001011101101" :KEY (QUOTE IDENTITY)) 7)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.8 (COUNT-IF-NOT (FUNCTION IDENTITY) "001011101101" :KEY (FUNCTION (LAMBDA (X) (EQL X #\1)))) 5)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.11 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) "001011101101" :KEY (FUNCTION (LAMBDA (X) (+ (IF (EQL X #\0) 0 1) (INCF C)))))) 7)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.12 (LET ((C 0)) (COUNT-IF-NOT (FUNCTION ODDP) "001011101101" :FROM-END T :KEY (FUNCTION (LAMBDA (X) (+ (IF (EQL X #\0) 0 1) (INCF C)))))) 5)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.13 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (EQL X #\0))) "0111011011100" :START 2) 7)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.14 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (EQL X #\0))) "0111011011100" :END 7) 5)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.15 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (EQL X #\0))) "0111011011100" :END 7 :START 2) 4)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.16 (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (EQL X #\0))) "0111011011100" :END 7 :START 2 :FROM-END T) 4)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.17 (FLET ((%ZEROP (C) (EQL C #\0)) (%ONEP (C) (EQL C #\1))) (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "0001110100" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (STRINGP A) (VALUES (COUNT-IF-NOT (FUNCTION %ZEROP) A) (COUNT-IF-NOT (FUNCTION %ONEP) A) (COUNT-IF-NOT (FUNCTION %ZEROP) A :FROM-END T) (COUNT-IF-NOT (FUNCTION %ONEP) A :FROM-END T))))) 2 3 2 3)
;; Loading (DEFTEST COUNT-IF-NOT-STRING.18 (DO-SPECIAL-STRINGS (S "a1ha^%&%#( 873ff83nfa!" NIL) (ASSERT (= (COUNT-IF-NOT (FUNCTION ALPHA-CHAR-P) S) 14))) NIL)
;; Loading (DEFTEST COUNT-IF-NOT.ORDER.1 (LET ((I 0) C1 C2 C3 C4 C5 C6) (VALUES (COUNT-IF-NOT (PROGN (SETF C1 (INCF I)) (FUNCTION NULL)) (PROGN (SETF C2 (INCF I)) (QUOTE (A NIL B C NIL D E))) :START (PROGN (SETF C3 (INCF I)) 0) :END (PROGN (SETF C4 (INCF I)) 3) :KEY (PROGN (SETF C5 (INCF I)) (FUNCTION NOT)) :FROM-END (PROGN (SETF C6 (INCF I)) NIL)) I C1 C2 C3 C4 C5 C6)) 1 6 1 2 3 4 5 6)
;; Loading (DEFTEST COUNT-IF-NOT.ORDER.2 (LET ((I 0) C1 C2 C3 C4 C5 C6) (VALUES (COUNT-IF-NOT (PROGN (SETF C1 (INCF I)) (FUNCTION NULL)) (PROGN (SETF C2 (INCF I)) (QUOTE (A NIL B C NIL D E))) :FROM-END (PROGN (SETF C3 (INCF I)) NIL) :KEY (PROGN (SETF C4 (INCF I)) (FUNCTION NOT)) :END (PROGN (SETF C5 (INCF I)) 3) :START (PROGN (SETF C6 (INCF I)) 0)) I C1 C2 C3 C4 C5 C6)) 1 6 1 2 3 4 5 6)
;; Loading (DEFTEST COUNT-IF-NOT.KEYWORDS.1 (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST COUNT-IF-NOT.KEYWORDS.2 (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS (PARSE-NAMESTRING (QUOTE "*")) :ALSO-BAD T) 2)
;; Loading (DEFTEST COUNT-IF-NOT.KEYWORDS.3 (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST COUNT-IF-NOT.KEYWORDS.4 (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION 1+)) 2)
;; Loading (DEFTEST COUNT-IF-NOT.ALLOW-OTHER-KEYS.5 (COUNT-IF-NOT (FUNCTION NULL) (QUOTE (NIL A B C NIL)) :ALLOW-OTHER-KEYS NIL) 3)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (COUNT-IF-NOT (FUNCTION IDENTITY) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.4 (SIGNALS-ERROR (COUNT-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.5 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.6 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.7 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.8 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.9 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION NULL) NIL 3 3) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.10 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.11 (SIGNALS-ERROR (LOCALLY (COUNT-IF-NOT (FUNCTION IDENTITY) 1) T) TYPE-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.12 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.13 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.14 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CDR)) TYPE-ERROR) T)
;; Loading (DEFTEST COUNT-IF-NOT.ERROR.15 (SIGNALS-ERROR (COUNT-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "reverse.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/reverse.lsp 81654887>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REVERSE-LIST.1 (REVERSE NIL) NIL)
;; Loading (DEFTEST REVERSE-LIST.2 (LET ((X (QUOTE (A B C)))) (VALUES (REVERSE X) X)) (C B A) (A B C))
;; Loading (DEFTEST REVERSE-VECTOR.1 (REVERSE #()) #())
;; Loading (DEFTEST REVERSE-VECTOR.2 (LET ((X #(A B C D E))) (VALUES (REVERSE X) X)) #(E D C B A) #(A B C D E))
;; Loading (DEFTEST REVERSE-VECTOR.3 (LET ((X (MAKE-ARRAY 0 :FILL-POINTER T :ADJUSTABLE T))) (REVERSE X)) #())
;; Loading (DEFTEST REVERSE-VECTOR.4 (LET* ((X (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :FILL-POINTER T :ADJUSTABLE T)) (Y (REVERSE X))) (VALUES Y X)) #(5 4 3 2 1) #(1 2 3 4 5))
;; Loading (DEFTEST REVERSE-VECTOR.5 (LET* ((X (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 5)) (Y (REVERSE X))) Y) #(5 4 3 2 1))
;; Loading (DEFTEST REVERSE-VECTOR.6 (DO-SPECIAL-INTEGER-VECTORS (V #(1 1 0 1 1 0) NIL) (LET ((NV (REVERSE V))) (ASSERT (TYPEP NV (QUOTE SIMPLE-ARRAY))) (ASSERT (NOT (EQL V NV))) (ASSERT (EQUALP NV #(0 1 1 0 1 1))) (ASSERT (EQUALP V #(1 1 0 1 1 0))))) NIL)
;; Loading (DEFTEST REVERSE-VECTOR.7 (DO-SPECIAL-INTEGER-VECTORS (V #(-1 -1 0 -1 -1 0) NIL) (LET ((NV (REVERSE V))) (ASSERT (TYPEP NV (QUOTE SIMPLE-ARRAY))) (ASSERT (NOT (EQL V NV))) (ASSERT (EQUALP NV #(0 -1 -1 0 -1 -1))) (ASSERT (EQUALP V #(-1 -1 0 -1 -1 0))))) NIL)
;; Loading (DEFTEST REVERSE-VECTOR.8 (LET ((LEN 10)) (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL)) FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COERCE I ETYPE)) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR NVEC = (REVERSE VEC) UNLESS (AND (EQL (LENGTH NVEC) LEN) (TYPEP NVEC (QUOTE SIMPLE-ARRAY)) (NOT (EQL VEC NVEC)) (EVERY (FUNCTION EQL) (REVERSE VALS) NVEC) (EVERY (FUNCTION EQL) VALS VEC)) COLLECT (LIST ETYPE VALS VEC NVEC))) NIL)
;; Loading (DEFTEST REVERSE-VECTOR.9 (LET ((LEN 10)) (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL INTEGER)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR NVEC = (REVERSE VEC) UNLESS (AND (EQL (LENGTH NVEC) LEN) (TYPEP NVEC (QUOTE SIMPLE-ARRAY)) (NOT (EQL VEC NVEC)) (EVERY (FUNCTION EQL) (REVERSE VALS) NVEC) (EVERY (FUNCTION EQL) VALS VEC)) COLLECT (LIST ETYPE VALS VEC NVEC))) NIL)
;; Loading (DEFTEST REVERSE-BIT-VECTOR.1 (REVERSE #*) #*)
;; Loading (DEFTEST REVERSE-BIT-VECTOR.2 (LET ((X #*000110110110)) (VALUES (REVERSE X) X)) #*011011011000 #*000110110110)
;; Loading (DEFTEST REVERSE-BIT-VECTOR.3 (LET* ((X (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (0 0 0 1 1 0 1 0 1 0)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (Y (REVERSE X))) Y) #*11000)
;; Loading (DEFTEST REVERSE-STRING.1 (REVERSE "") "")
;; Loading (DEFTEST REVERSE-STRING.2 (LET ((X "000110110110")) (VALUES (REVERSE X) X)) "011011011000" "000110110110")
;; Loading (DEFTEST REVERSE-STRING.3 (LET* ((X (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (Y (REVERSE X))) Y) "edcba")
;; Loading (DEFTEST REVERSE-STRING.4 (LET* ((X (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR))) (Y (REVERSE X))) Y) "edcba")
;; Loading (DEFTEST REVERSE-STRING.5 (DO-SPECIAL-STRINGS (S (COPY-SEQ "12345") NIL) (LET ((S2 (REVERSE S))) (ASSERT (TYPEP S2 (QUOTE SIMPLE-ARRAY))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= "12345" S)) (ASSERT (STRING= "54321" S2)))) NIL)
;; Loading (DEFTEST REVERSE.ORDER.1 (LET ((I 0)) (VALUES (REVERSE (PROGN (INCF I) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) I)) (D C B A) 1)
;; Loading (DEF-FOLD-TEST REVERSE.FOLD.1 (REVERSE (QUOTE (A B C))))
;; Loading (DEF-FOLD-TEST REVERSE.FOLD.2 (REVERSE #(A B C)))
;; Loading (DEF-FOLD-TEST REVERSE.FOLD.3 (REVERSE #*00111101011011))
;; Loading (DEF-FOLD-TEST REVERSE.FOLD.4 (REVERSE "abcdefgh"))
;; Loading (DEFTEST REVERSE.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION REVERSE) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST REVERSE.ERROR.6 (SIGNALS-ERROR (REVERSE) PROGRAM-ERROR) T)
;; Loading (DEFTEST REVERSE.ERROR.7 (SIGNALS-ERROR (REVERSE NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REVERSE.ERROR.8 (SIGNALS-ERROR (LOCALLY (REVERSE (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (LOAD "nreverse.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nreverse.lsp 81776D37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NREVERSE-LIST.1 (NREVERSE NIL) NIL)
;; Loading (DEFTEST NREVERSE-LIST.2 (LET ((X (COPY-SEQ (QUOTE (A B C))))) (NREVERSE X)) (C B A))
;; Loading (DEFTEST NREVERSE-VECTOR.1 (NREVERSE #()) #())
;; Loading (DEFTEST NREVERSE-VECTOR.2 (LET ((X (COPY-SEQ #(A B C D E)))) (NREVERSE X)) #(E D C B A))
;; Loading (DEFTEST NREVERSE-VECTOR.4 (LET ((X (MAKE-ARRAY 0 :FILL-POINTER T :ADJUSTABLE T))) (NREVERSE X)) #())
;; Loading (DEFTEST NREVERSE-VECTOR.5 (LET* ((X (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)) :FILL-POINTER T :ADJUSTABLE T)) (Y (NREVERSE X))) (VALUES Y (EQUALT (TYPE-OF X) (TYPE-OF Y)))) #(5 4 3 2 1) T)
;; Loading (DEFTEST NREVERSE-VECTOR.6 (LET* ((X (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 5)) (Y (NREVERSE X))) (VALUES Y (EQUALT (TYPE-OF X) (TYPE-OF Y)))) #(5 4 3 2 1) T)
;; Loading (DEFTEST NREVERSE-VECTOR.7 (DO-SPECIAL-INTEGER-VECTORS (V #(0 0 1 0 1 1) NIL) (LET ((NV (NREVERSE V))) (ASSERT (= (LENGTH NV) 6)) (ASSERT (EVERY (FUNCTION =) NV #(1 1 0 1 0 0))))) NIL)
;; Loading (DEFTEST NREVERSE-VECTOR.8 (DO-SPECIAL-INTEGER-VECTORS (V #(0 0 -1 0 -1 -1 0 -1) NIL) (LET ((NV (NREVERSE V))) (ASSERT (= (LENGTH NV) 8)) (ASSERT (EVERY (FUNCTION =) NV #(-1 0 -1 -1 0 -1 0 0))))) NIL)
;; Loading (DEFTEST NREVERSE-VECTOR.9 (LET ((LEN 10)) (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL)) FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COERCE I ETYPE)) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR NVEC = (NREVERSE VEC) UNLESS (AND (EQL (LENGTH NVEC) LEN) (EVERY (FUNCTION EQL) (REVERSE VALS) NVEC)) COLLECT (LIST ETYPE VALS NVEC))) NIL)
;; Loading (DEFTEST NREVERSE-VECTOR.10 (LET ((LEN 10)) (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL INTEGER)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR NVEC = (NREVERSE VEC) UNLESS (AND (EQL (LENGTH NVEC) LEN) (EVERY (FUNCTION EQL) (REVERSE VALS) NVEC)) COLLECT (LIST ETYPE VALS NVEC))) NIL)
;; Loading (DEFTEST NREVERSE-BIT-VECTOR.1 (NREVERSE #*) #*)
;; Loading (DEFTEST NREVERSE-BIT-VECTOR.2 (LET ((X (COPY-SEQ #*000110110110))) (NREVERSE X)) #*011011011000)
;; Loading (DEFTEST NREVERSE-BIT-VECTOR.3 (LET* ((X (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (0 0 0 1 1 0 1 0 1 0)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (Y (NREVERSE X))) Y) #*11000)
;; Loading (DEFTEST NREVERSE-STRING.1 (NREVERSE "") "")
;; Loading (DEFTEST NREVERSE-STRING.2 (LET ((X (COPY-SEQ "000110110110"))) (NREVERSE X)) "011011011000")
;; Loading (DEFTEST NREVERSE-STRING.3 (LET* ((X (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (Y (NREVERSE X))) Y) "edcba")
;; Loading (DEFTEST NREVERSE-STRING.4 (LET* ((X (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR))) (Y (NREVERSE X))) Y) "edcba")
;; Loading (DEFTEST NREVERSE-STRING.5 (DO-SPECIAL-STRINGS (S (COPY-SEQ "12345") NIL) (LET ((S2 (NREVERSE S))) (ASSERT (STRINGP S2)) (ASSERT (STRING= S2 "54321")) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))))) NIL)
;; Loading (DEFTEST NREVERSE.ORDER.1 (LET ((I 0)) (VALUES (NREVERSE (PROGN (INCF I) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) I)) (D C B A) 1)
;; Loading (DEFTEST NREVERSE.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION NREVERSE) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST NREVERSE.ERROR.6 (SIGNALS-ERROR (NREVERSE) PROGRAM-ERROR) T)
;; Loading (DEFTEST NREVERSE.ERROR.7 (SIGNALS-ERROR (NREVERSE NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NREVERSE.ERROR.8 (SIGNALS-ERROR (LOCALLY (NREVERSE (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (LOAD "sort.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/sort.lsp 81871B47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SORT-LIST.1 (LET ((A (LIST 1 4 2 5 3))) (SORT A (FUNCTION <))) (1 2 3 4 5))
;; Loading (DEFTEST SORT-LIST.2 (LET ((A (LIST 1 4 2 5 3))) (SORT A (FUNCTION <) :KEY (FUNCTION -))) (5 4 3 2 1))
;; Loading (DEFTEST SORT-LIST.3 (LET ((A (LIST 1 4 2 5 3))) (SORT A (FUNCTION (LAMBDA (X Y) NIL))) (SORT A (FUNCTION <))) (1 2 3 4 5))
;; Loading (DEFTEST SORT-LIST.4 (LOOP REPEAT 100 ALWAYS (LET ((A (LIST 1 2 3 4 5 6 7 8 9 0)) (CMP (MAKE-ARRAY (QUOTE (10 10))))) (LOOP FOR I FROM 0 TO 9 DO (LOOP FOR J FROM 0 TO 9 DO (SETF (AREF CMP I J) (ZEROP (LOGAND (RANDOM 1024) 512))))) (SETQ A (SORT A (FUNCTION (LAMBDA (I J) (AREF CMP I J))))) (AND (EQLT (LENGTH A) 10) (EQUALT (SORT A (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))))) T)
;; Loading (DEFTEST SORT-VECTOR.1 (LET ((A (COPY-SEQ #(1 4 2 5 3)))) (SORT A (FUNCTION <))) #(1 2 3 4 5))
;; Loading (DEFTEST SORT-VECTOR.2 (LET ((A (COPY-SEQ #(1 4 2 5 3)))) (SORT A (FUNCTION <) :KEY (FUNCTION -))) #(5 4 3 2 1))
;; Loading (DEFTEST SORT-VECTOR.3 (LET ((A (COPY-SEQ #(1 4 2 5 3)))) (SORT A (FUNCTION (LAMBDA (X Y) NIL))) (SORT A (FUNCTION <))) #(1 2 3 4 5))
;; Loading (DEFTEST SORT-VECTOR.4 (LET ((A (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (10 40 20 50 30 15 45 25 55 35)) :FILL-POINTER 5))) (SORT A (FUNCTION <))) #(10 20 30 40 50))
;; Loading (DEFTEST SORT-VECTOR.5 (LOOP REPEAT 100 ALWAYS (LET ((A (VECTOR 1 2 3 4 5 6 7 8 9 0)) (CMP (MAKE-ARRAY (QUOTE (10 10))))) (LOOP FOR I FROM 0 TO 9 DO (LOOP FOR J FROM 0 TO 9 DO (SETF (AREF CMP I J) (ZEROP (LOGAND (RANDOM 1024) 512))))) (SETQ A (SORT A (FUNCTION (LAMBDA (I J) (AREF CMP I J))))) (AND (EQLT (LENGTH A) 10) (EQUALPT (SORT A (FUNCTION <)) #(0 1 2 3 4 5 6 7 8 9))))) T)
;; Loading (DEFTEST SORT-VECTOR.6 (DO-SPECIAL-INTEGER-VECTORS (V #(1 4 7 3 2 6 5) NIL) (LET ((SV (SORT V (FUNCTION <)))) (ASSERT (EQUALP SV #(1 2 3 4 5 6 7))))) NIL)
;; Loading (DEFTEST SORT-VECTOR.7 (DO-SPECIAL-INTEGER-VECTORS (V #(0 1 1 0 1 1 0 1 0) NIL) (LET ((SV (SORT V (FUNCTION <)))) (ASSERT (EQUALP SV #(0 0 0 0 1 1 1 1 1))))) NIL)
;; Loading (DEFTEST SORT-VECTOR.8 (DO-SPECIAL-INTEGER-VECTORS (V #(0 -1 -1 0 -1 -1 0 -1 0) NIL) (LET ((SV (SORT V (FUNCTION >)))) (ASSERT (EQUALP SV #(0 0 0 0 -1 -1 -1 -1 -1))))) NIL)
;; Loading (DEFTEST SORT-VECTOR.9 (LET* ((IVALS (QUOTE (1 4 7 3 2 6 5))) (SIVALS (QUOTE (1 2 3 4 5 6 7))) (LEN (LENGTH IVALS))) (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL)) FOR VALS = (LOOP FOR I IN IVALS COLLECT (COERCE I ETYPE)) FOR SVALS = (LOOP FOR I IN SIVALS COLLECT (COERCE I ETYPE)) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR SVEC = (SORT VEC (FUNCTION <)) UNLESS (AND (EQL (LENGTH SVEC) LEN) (EVERY (FUNCTION EQL) SVALS SVEC)) COLLECT (LIST ETYPE VALS SVEC))) NIL)
;; Loading (DEFTEST SORT-VECTOR.10 (LET* ((IVALS (QUOTE (1 4 7 3 2 6 5))) (SIVALS (QUOTE (1 2 3 4 5 6 7))) (LEN (LENGTH IVALS))) (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR I IN IVALS COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR SVALS = (LOOP FOR I IN SIVALS COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR SVEC = (SORT VEC (FUNCTION (LAMBDA (X Y) (< (ABS X) (ABS Y))))) UNLESS (AND (EQL (LENGTH SVEC) LEN) (EVERY (FUNCTION EQL) SVALS SVEC)) COLLECT (LIST ETYPE VALS SVEC))) NIL)
;; Loading (DEFTEST SORT-BIT-VECTOR.1 (LET ((A (COPY-SEQ #*10011101))) (SORT A (FUNCTION <))) #*00011111)
;; Loading (DEFTEST SORT-BIT-VECTOR.2 (LET ((A (COPY-SEQ #*10011101))) (VALUES (SORT A (FUNCTION <) :KEY (FUNCTION -)) A)) #*11111000 #*11111000)
;; Loading (DEFTEST SORT-BIT-VECTOR.3 (LET ((A (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 0 0 1 1 1 1 0 1 1)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5))) (SORT A (FUNCTION <))) #*00111)
;; Loading (DEFTEST SORT-STRING.1 (LET ((A (COPY-SEQ "10011101"))) (VALUES (SORT A (FUNCTION CHAR<)) A)) "00011111" "00011111")
;; Loading (DEFTEST SORT-STRING.2 (LET ((A (COPY-SEQ "10011101"))) (VALUES (SORT A (FUNCTION CHAR<) :KEY (FUNCTION (LAMBDA (C) (IF (EQL C #\0) #\1 #\0)))) A)) "11111000" "11111000")
;; Loading (DEFTEST SORT-STRING.3 (LET ((A (MAKE-ARRAY 10 :INITIAL-CONTENTS "1001111011" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5))) (SORT A (FUNCTION CHAR<))) "00111")
;; Loading (DEFTEST SORT-STRING.4 (DO-SPECIAL-STRINGS (S "aebdc" NIL) (LET ((S2 (SORT S (FUNCTION CHAR<)))) (ASSERT (EQ S S2)) (ASSERT (STRING= S2 "abcde")))) NIL)
;; Loading (DEFTEST SORT.ORDER.1 (LET ((I 0) X Y) (VALUES (SORT (PROGN (SETF X (INCF I)) (LIST 1 7 3 2)) (PROGN (SETF Y (INCF I)) (FUNCTION <))) I X Y)) (1 2 3 7) 2 1 2)
;; Loading (DEFTEST SORT.ORDER.2 (LET ((I 0) X Y Z) (VALUES (SORT (PROGN (SETF X (INCF I)) (LIST 1 7 3 2)) (PROGN (SETF Y (INCF I)) (FUNCTION <)) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION -))) I X Y Z)) (7 3 2 1) 3 1 2 3)
;; Loading (DEFTEST SORT.ERROR.1 (SIGNALS-ERROR (SORT) PROGRAM-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.2 (SIGNALS-ERROR (SORT NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.3 (SIGNALS-ERROR (SORT NIL (FUNCTION <) :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.4 (SIGNALS-ERROR (SORT NIL (FUNCTION <) (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.5 (SIGNALS-ERROR (SORT NIL (FUNCTION <) (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.6 (SIGNALS-ERROR (SORT NIL (FUNCTION <) 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.7 (SIGNALS-ERROR (SORT (LIST 1 2 3 4) (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.8 (SIGNALS-ERROR (SORT (LIST 1 2 3 4) (FUNCTION <) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.9 (SIGNALS-ERROR (SORT (LIST 1 2 3 4) (FUNCTION <) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.10 (SIGNALS-ERROR (SORT (LIST 1 2 3 4) (FUNCTION ELT)) TYPE-ERROR) T)
;; Loading (DEFTEST SORT.ERROR.11 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SORT X (FUNCTION <)))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (LOAD "stable-sort.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/stable-sort.lsp 819F25B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STABLE-SORT-LIST.1 (LET ((A (LIST 1 4 2 5 3))) (STABLE-SORT A (FUNCTION <))) (1 2 3 4 5))
;; Loading (DEFTEST STABLE-SORT-LIST.2 (LET ((A (LIST 1 4 2 5 3))) (STABLE-SORT A (FUNCTION <) :KEY (FUNCTION -))) (5 4 3 2 1))
;; Loading (DEFTEST STABLE-SORT-LIST.3 (LET ((A (LIST 1 4 2 5 3))) (STABLE-SORT A (FUNCTION (LAMBDA (X Y) NIL))) (STABLE-SORT A (FUNCTION <))) (1 2 3 4 5))
;; Loading (DEFTEST STABLE-SORT-LIST.4 (LET ((A (COPY-SEQ (QUOTE ((1 A) (2 A) (1 B) (2 B) (1 C) (2 C)))))) (STABLE-SORT A (FUNCTION (LAMBDA (X Y) (< (CAR X) (CAR Y)))))) ((1 A) (1 B) (1 C) (2 A) (2 B) (2 C)))
;; Loading (DEFTEST STABLE-SORT-LIST.5 (LET ((A (REVERSE (COPY-SEQ (QUOTE ((1 A) (2 A) (1 B) (2 B) (1 C) (2 C))))))) (STABLE-SORT A (FUNCTION (LAMBDA (X Y) (< (CAR X) (CAR Y)))))) ((1 C) (1 B) (1 A) (2 C) (2 B) (2 A)))
;; Loading (DEFTEST STABLE-SORT-VECTOR.1 (LET ((A (COPY-SEQ #(1 4 2 5 3)))) (STABLE-SORT A (FUNCTION <))) #(1 2 3 4 5))
;; Loading (DEFTEST STABLE-SORT-VECTOR.2 (LET ((A (COPY-SEQ #(1 4 2 5 3)))) (STABLE-SORT A (FUNCTION <) :KEY (FUNCTION -))) #(5 4 3 2 1))
;; Loading (DEFTEST STABLE-SORT-VECTOR.3 (LET ((A (COPY-SEQ #(1 4 2 5 3)))) (STABLE-SORT A (FUNCTION (LAMBDA (X Y) NIL))) (STABLE-SORT A (FUNCTION <))) #(1 2 3 4 5))
;; Loading (DEFTEST STABLE-SORT-VECTOR.4 (LET ((A (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (10 40 20 50 30 15 45 25 55 35)) :FILL-POINTER 5))) (STABLE-SORT A (FUNCTION <))) #(10 20 30 40 50))
;; Loading (DEFTEST STABLE-SORT-VECTOR.6 (DO-SPECIAL-INTEGER-VECTORS (V #(1 4 7 3 2 6 5) NIL) (LET ((SV (STABLE-SORT V (FUNCTION <)))) (ASSERT (EQUALP SV #(1 2 3 4 5 6 7))))) NIL)
;; Loading (DEFTEST STABLE-SORT-VECTOR.7 (DO-SPECIAL-INTEGER-VECTORS (V #(0 1 1 0 1 1 0 1 0) NIL) (LET ((SV (STABLE-SORT V (FUNCTION <)))) (ASSERT (EQUALP SV #(0 0 0 0 1 1 1 1 1))))) NIL)
;; Loading (DEFTEST STABLE-SORT-VECTOR.8 (DO-SPECIAL-INTEGER-VECTORS (V #(0 -1 -1 0 -1 -1 0 -1 0) NIL) (LET ((SV (STABLE-SORT V (FUNCTION >)))) (ASSERT (EQUALP SV #(0 0 0 0 -1 -1 -1 -1 -1))))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST STABLE-SORT-VECTOR.9 (LET* ((IVALS (QUOTE (1 4 7 3 2 6 5))) (SIVALS (QUOTE (1 2 3 4 5 6 7))) (LEN (LENGTH IVALS))) (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL)) FOR VALS = (LOOP FOR I IN IVALS COLLECT (COERCE I ETYPE)) FOR SVALS = (LOOP FOR I IN SIVALS COLLECT (COERCE I ETYPE)) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR SVEC = (STABLE-SORT VEC (FUNCTION <)) UNLESS (AND (EQL (LENGTH SVEC) LEN) (EVERY (FUNCTION EQL) SVALS SVEC)) COLLECT (LIST ETYPE VALS SVEC))) NIL)
;; Loading (DEFTEST STABLE-SORT-VECTOR.10 (LET* ((IVALS (QUOTE (1 4 7 3 2 6 5))) (SIVALS (QUOTE (1 2 3 4 5 6 7))) (LEN (LENGTH IVALS))) (LOOP FOR CETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL)) FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CETYPE))) FOR VALS = (LOOP FOR I IN IVALS COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR SVALS = (LOOP FOR I IN SIVALS COLLECT (COMPLEX (COERCE I CETYPE) (COERCE (- I) CETYPE))) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS VALS) FOR SVEC = (STABLE-SORT VEC (FUNCTION (LAMBDA (X Y) (< (ABS X) (ABS Y))))) UNLESS (AND (EQL (LENGTH SVEC) LEN) (EVERY (FUNCTION EQL) SVALS SVEC)) COLLECT (LIST ETYPE VALS SVEC))) NIL)
;; Loading (DEFTEST STABLE-SORT-BIT-VECTOR.1 (LET ((A (COPY-SEQ #*10011101))) (STABLE-SORT A (FUNCTION <))) #*00011111)
;; Loading (DEFTEST STABLE-SORT-BIT-VECTOR.2 (LET ((A (COPY-SEQ #*10011101))) (VALUES (STABLE-SORT A (FUNCTION <) :KEY (FUNCTION -)) A)) #*11111000 #*11111000)
;; Loading (DEFTEST STABLE-SORT-BIT-VECTOR.3 (LET ((A (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (1 0 0 1 1 1 1 0 1 1)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5))) (STABLE-SORT A (FUNCTION <))) #*00111)
;; Loading (DEFTEST STABLE-SORT-STRING.1 (LET ((A (COPY-SEQ "10011101"))) (VALUES (STABLE-SORT A (FUNCTION CHAR<)) A)) "00011111" "00011111")
;; Loading (DEFTEST STABLE-SORT-STRING.2 (LET ((A (COPY-SEQ "10011101"))) (VALUES (STABLE-SORT A (FUNCTION CHAR<) :KEY (FUNCTION (LAMBDA (C) (IF (EQL C #\0) #\1 #\0)))) A)) "11111000" "11111000")
;; Loading (DEFTEST STABLE-SORT-STRING.3 (LET ((A (MAKE-ARRAY 10 :INITIAL-CONTENTS "1001111011" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5))) (STABLE-SORT A (FUNCTION CHAR<))) "00111")
;; Loading (DEFTEST STABLE-SORT-STRING.4 (DO-SPECIAL-STRINGS (S "aebdc" NIL) (LET ((S2 (STABLE-SORT S (FUNCTION CHAR<)))) (ASSERT (EQ S S2)) (ASSERT (STRING= S2 "abcde")))) NIL)
;; Loading (DEFTEST STABLE-SORT.ORDER.1 (LET ((I 0) X Y) (VALUES (STABLE-SORT (PROGN (SETF X (INCF I)) (LIST 1 7 3 2)) (PROGN (SETF Y (INCF I)) (FUNCTION <))) I X Y)) (1 2 3 7) 2 1 2)
;; Loading (DEFTEST STABLE-SORT.ORDER.2 (LET ((I 0) X Y Z) (VALUES (STABLE-SORT (PROGN (SETF X (INCF I)) (LIST 1 7 3 2)) (PROGN (SETF Y (INCF I)) (FUNCTION <)) :KEY (PROGN (SETF Z (INCF I)) (FUNCTION -))) I X Y Z)) (7 3 2 1) 3 1 2 3)
;; Loading (DEFTEST STABLE-SORT.ERROR.1 (SIGNALS-ERROR (STABLE-SORT) PROGRAM-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.2 (SIGNALS-ERROR (STABLE-SORT NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.3 (SIGNALS-ERROR (STABLE-SORT NIL (FUNCTION <) :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.4 (SIGNALS-ERROR (STABLE-SORT NIL (FUNCTION <) (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.5 (SIGNALS-ERROR (STABLE-SORT NIL (FUNCTION <) (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.6 (SIGNALS-ERROR (STABLE-SORT NIL (FUNCTION <) 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.7 (SIGNALS-ERROR (STABLE-SORT (LIST 1 2 3 4) (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.8 (SIGNALS-ERROR (STABLE-SORT (LIST 1 2 3 4) (FUNCTION <) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.9 (SIGNALS-ERROR (STABLE-SORT (LIST 1 2 3 4) (FUNCTION <) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.10 (SIGNALS-ERROR (STABLE-SORT (LIST 1 2 3 4) (FUNCTION ELT)) TYPE-ERROR) T)
;; Loading (DEFTEST STABLE-SORT.ERROR.11 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (STABLE-SORT X (FUNCTION <)))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (LOAD "length.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/length.lsp C152E4F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LENGTH.LIST.1 (LENGTH NIL) 0)
;; Loading (DEFTEST LENGTH.LIST.2 (LENGTH (QUOTE (A B C D E))) 5)
;; Loading (DEFTEST LENGTH.LIST.3 (LENGTH (MAKE-LIST 200000)) 200000)
;; Loading (DEFUN LENGTH.LIST-4-BODY NIL (LET ((X NIL)) (LOOP FOR I FROM 0 TO 999 DO (PROGN (UNLESS (EQL (LENGTH X) I) (RETURN NIL)) (PUSH I X)) FINALLY (RETURN T))))
;; Loading (DEFTEST LENGTH.LIST-4 (LENGTH.LIST-4-BODY) T)
;; Loading (DEFTEST LENGTH.VECTOR.1 (LENGTH #()) 0)
;; Loading (DEFTEST LENGTH.VECTOR.2 (LENGTH #(A)) 1)
;; Loading (DEFTEST LENGTH.VECTOR.3 (LENGTH #(A B)) 2)
;; Loading (DEFTEST LENGTH.VECTOR.4 (LENGTH #(A B C)) 3)
;; Loading (DEFTEST LENGTH.NONSIMPLE-VECTOR.1 (LENGTH (MAKE-ARRAY 10 :FILL-POINTER T :ADJUSTABLE T)) 10)
;; Loading (DEFTEST LENGTH.NONSIMPLE-VECTOR.2 (LET ((A (MAKE-ARRAY 10 :FILL-POINTER T :ADJUSTABLE T))) (SETF (FILL-POINTER A) 5) (LENGTH A)) 5)
;; Loading (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST LENGTH.BIT-VECTOR.1 (LENGTH #*) 0))
;; Loading (DEFTEST LENGTH.BIT-VECTOR.2 (LENGTH #*1) 1)
;; Loading (DEFTEST LENGTH.BIT-VECTOR.3 (LENGTH #*0) 1)
;; Loading (DEFTEST LENGTH.BIT-VECTOR.4 (LENGTH #*010101) 6)
;; Loading (DEFTEST LENGTH.BIT-VECTOR.5 (LET ((I 0)) (FLET ((%F NIL (INCF I) (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 0 1 1 0))))) (VALUES (LENGTH (THE (SIMPLE-BIT-VECTOR 5) (%F))) I))) 5 1)
;; Loading (DEFTEST LENGTH.STRING.1 (LENGTH "") 0)
;; Loading (DEFTEST LENGTH.STRING.2 (LENGTH "a") 1)
;; Loading (DEFTEST LENGTH.STRING.3 (LENGTH "abcdefghijklm") 13)
;; Loading (DEFTEST LENGTH.STRING.4 (LENGTH " ") 1)
;; Loading (DEFTEST LENGTH.STRING.5 (LET ((I 0)) (FLET ((%F NIL (INCF I) (MAKE-STRING 5 :INITIAL-ELEMENT #\a))) (VALUES (LENGTH (THE (SIMPLE-STRING 5) (%F))) I))) 5 1)
;; Loading (DEFTEST LENGTH.STRING.6 (LET ((I 0)) (FLET ((%F NIL (INCF I) (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\a))) (VALUES (LENGTH (THE (SIMPLE-BASE-STRING 5) (%F))) I))) 5 1)
;; Loading (DEFTEST LENGTH.STRING.7 (DO-SPECIAL-STRINGS (S "12345" NIL) (ASSERT (= (LENGTH S) 5))) NIL)
;; Loading (DEFTEST LENGTH.STRING.8 (DO-SPECIAL-STRINGS (S "" NIL) (ASSERT (= (LENGTH S) 0))) NIL)
;; Loading (DEFTEST LENGTH.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION LENGTH) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE SEQUENCE))))) NIL)
;; Loading (DEFTEST LENGTH.ERROR.6 (SIGNALS-ERROR (LENGTH) PROGRAM-ERROR) T)
;; Loading (DEFTEST LENGTH.ERROR.7 (SIGNALS-ERROR (LENGTH NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST LENGTH.ERROR.8 (SIGNALS-ERROR (LOCALLY (LENGTH (QUOTE A)) T) TYPE-ERROR) T)
;; Loading (DEFTEST LENGTH.ARRAY.1 (LENGTH (MAKE-ARRAY (QUOTE (20)))) 20)
;; Loading (DEFTEST LENGTH.ARRAY.2 (LENGTH (MAKE-ARRAY (QUOTE (100001)))) 100001)
;; Loading (DEFTEST LENGTH.ARRAY.3 (LENGTH (MAKE-ARRAY (QUOTE (0)))) 0)
;; Loading (DEFTEST LENGTH.ARRAY.4 (LET ((X (MAKE-ARRAY (QUOTE (100)) :FILL-POINTER 10))) (LENGTH X)) 10)
;; Loading (DEFTEST LENGTH.ARRAY.5 (LET ((X (MAKE-ARRAY (QUOTE (100)) :FILL-POINTER 10))) (SETF (FILL-POINTER X) 20) (LENGTH X)) 20)
;; Loading (DEFTEST LENGTH.ARRAY.6 (LOOP FOR I FROM 1 TO 40 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR VEC = (MAKE-ARRAY 7 :ELEMENT-TYPE ETYPE :INITIAL-ELEMENT 0) FOR LEN = (LENGTH VEC) UNLESS (EQL LEN 7) COLLECT (LIST I VEC LEN)) NIL)
;; Loading (DEFTEST LENGTH.ARRAY.7 (LOOP FOR I FROM 1 TO 40 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR VEC = (MAKE-ARRAY 13 :ELEMENT-TYPE ETYPE :INITIAL-ELEMENT 0) FOR LEN = (LENGTH VEC) UNLESS (EQL LEN 13) COLLECT (LIST I VEC LEN)) NIL)
;; Loading (DEFTEST LENGTH.ARRAY.8 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT RATIONAL)) FOR VEC = (MAKE-ARRAY 5 :ELEMENT-TYPE ETYPE :INITIAL-ELEMENT (COERCE 0 ETYPE)) FOR LEN = (LENGTH VEC) UNLESS (EQL LEN 5) COLLECT (LIST ETYPE VEC LEN)) NIL)
;; Loading (DEFTEST LENGTH.ARRAY.9 (DO-SPECIAL-INTEGER-VECTORS (V #(0 1 1 0 0 1) NIL) (ASSERT (EQL (LENGTH V) 6))) NIL)
;; Loading (LOAD "find.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/find.lsp C162F917>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FIND-LIST.1 (FIND (QUOTE C) (QUOTE (A B C D E C A))) C)
;; Loading (DEFTEST FIND-LIST.2 (FIND (QUOTE C) (QUOTE (A B C D E C A)) :FROM-END T) C)
;; Loading (DEFTEST FIND-LIST.3 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND (QUOTE C) (QUOTE (A B C D E C A)) :START I)) (C C C C C C NIL NIL))
;; Loading (DEFTEST FIND-LIST.4 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND (QUOTE C) (QUOTE (A B C D E C A)) :START I :END NIL)) (C C C C C C NIL NIL))
;; Loading (DEFTEST FIND-LIST.5 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (FIND (QUOTE C) (QUOTE (A B C D E C A)) :END I)) (C C C C C NIL NIL NIL))
;; Loading (DEFTEST FIND-LIST.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND (QUOTE C) (QUOTE (A B C D E C A)) :START I :FROM-END T)) (C C C C C C NIL NIL))
;; Loading (DEFTEST FIND-LIST.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND (QUOTE C) (QUOTE (A B C D E C A)) :START I :END NIL :FROM-END T)) (C C C C C C NIL NIL))
;; Loading (DEFTEST FIND-LIST.8 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (FIND (QUOTE C) (QUOTE (A B C D E C A)) :END I :FROM-END T)) (C C C C C NIL NIL NIL))
;; Loading (DEFTEST FIND-LIST.9 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (FIND (QUOTE C) (QUOTE (A B C D E C A)) :START I :END J))) ((NIL NIL C C C C C) (NIL C C C C C) (C C C C C) (NIL NIL C C) (NIL C C) (C C) (NIL)))
;; Loading (DEFTEST FIND-LIST.10 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (FIND (QUOTE C) (QUOTE (A B C D E C A)) :START I :END J :FROM-END T))) ((NIL NIL C C C C C) (NIL C C C C C) (C C C C C) (NIL NIL C C) (NIL C C) (C C) (NIL)))
;; Loading (DEFTEST FIND-LIST.11 (FIND 5 (QUOTE (1 2 3 4 5 6 4 8)) :KEY (FUNCTION 1+)) 4)
;; Loading (DEFTEST FIND-LIST.12 (FIND 5 (QUOTE (1 2 3 4 5 6 4 8)) :KEY (QUOTE 1+)) 4)
;; Loading (DEFTEST FIND-LIST.13 (FIND 5 (QUOTE (1 2 3 4 5 6 4 8)) :KEY (FUNCTION 1+) :FROM-END T) 4)
;; Loading (DEFTEST FIND-LIST.14 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST (COMPLEMENT (FUNCTION EQL))) B)
;; Loading (DEFTEST FIND-LIST.15 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST (COMPLEMENT (FUNCTION EQL)) :FROM-END T) F)
;; Loading (DEFTEST FIND-LIST.16 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL)) B)
;; Loading (DEFTEST FIND-LIST.17 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (QUOTE EQL) :FROM-END T) F)
;; Loading (DEFTEST FIND-LIST.18 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (QUOTE EQL)) B)
;; Loading (DEFTEST FIND-LIST.19 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL) :FROM-END T) F)
;; Loading (DEFTEST FIND-LIST.20 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL)) B)
;; Loading (DEFTEST FIND-LIST.21 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST (FUNCTION EQL) :START 2) A)
;; Loading (DEFTEST FIND-LIST.22 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST (FUNCTION EQL) :START 2 :END NIL) A)
;; Loading (DEFTEST FIND-LIST.23 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL) :START 0 :END 5) B)
;; Loading (DEFTEST FIND-LIST.24 (FIND (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) C)
;; Loading (DEFTEST FIND-LIST.25 (FIND "ab" (QUOTE ("a" #(#\b #\a) #(#\a #\b #\c) #(#\a #\b) #(#\d #\e) F)) :TEST (FUNCTION EQUALP)) #(#\a #\b))
;; Loading (DEFTEST FIND-LIST.26 (FIND (QUOTE A) (QUOTE ((C) (B A) (A B C) (A B) (D E) F)) :KEY (FUNCTION CAR)) (A B C))
;; Loading (DEFTEST FIND-LIST.27 (FIND (QUOTE A) (QUOTE ((C) (B A) (A B C) (Z) (A B) (D E) F)) :KEY (FUNCTION CAR) :START 3) (A B))
;; Loading (DEFTEST FIND-LIST.28 (FIND (QUOTE A) (QUOTE ((C) (B A) (A B C) (Z) (A B) (D E) (F))) :KEY (FUNCTION CAR) :START 2 :FROM-END T) (A B))
;; Loading (DEFTEST FIND-LIST.29 (FIND 10 (QUOTE (1 2 3 8 20 3 1 21 3)) :TEST (FUNCTION <)) 20)
;; Loading (DEFTEST FIND-LIST.30 (FIND 10 (QUOTE (1 2 3 8 20 3 1 21 3)) :TEST-NOT (FUNCTION >=)) 20)
;; Loading (DEFTEST FIND-VECTOR.1 (FIND (QUOTE C) #(A B C D E C A)) C)
;; Loading (DEFTEST FIND-VECTOR.1A (FIND (QUOTE Z) #(A B C D E C A)) NIL)
;; Loading (DEFTEST FIND-VECTOR.2 (FIND (QUOTE C) #(A B C D E C A) :FROM-END T) C)
;; Loading (DEFTEST FIND-VECTOR.2A (FIND (QUOTE Z) #(A B C D E C A) :FROM-END T) NIL)
;; Loading (DEFTEST FIND-VECTOR.3 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND (QUOTE C) #(A B C D E C A) :START I)) (C C C C C C NIL NIL))
;; Loading (DEFTEST FIND-VECTOR.4 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND (QUOTE C) #(A B C D E C A) :START I :END NIL)) (C C C C C C NIL NIL))
;; Loading (DEFTEST FIND-VECTOR.5 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (FIND (QUOTE C) #(A B C D E C A) :END I)) (C C C C C NIL NIL NIL))
;; Loading (DEFTEST FIND-VECTOR.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND (QUOTE C) #(A B C D E C A) :START I :FROM-END T)) (C C C C C C NIL NIL))
;; Loading (DEFTEST FIND-VECTOR.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND (QUOTE C) #(A B C D E C A) :START I :END NIL :FROM-END T)) (C C C C C C NIL NIL))
;; Loading (DEFTEST FIND-VECTOR.8 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (FIND (QUOTE C) #(A B C D E C A) :END I :FROM-END T)) (C C C C C NIL NIL NIL))
;; Loading (DEFTEST FIND-VECTOR.9 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (FIND (QUOTE C) #(A B C D E C A) :START I :END J))) ((NIL NIL C C C C C) (NIL C C C C C) (C C C C C) (NIL NIL C C) (NIL C C) (C C) (NIL)))
;; Loading (DEFTEST FIND-VECTOR.10 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (FIND (QUOTE C) #(A B C D E C A) :START I :END J :FROM-END T))) ((NIL NIL C C C C C) (NIL C C C C C) (C C C C C) (NIL NIL C C) (NIL C C) (C C) (NIL)))
;; Loading (DEFTEST FIND-VECTOR.11 (FIND 5 #(1 2 3 4 5 6 4 8) :KEY (FUNCTION 1+)) 4)
;; Loading (DEFTEST FIND-VECTOR.12 (FIND 5 #(1 2 3 4 5 6 4 8) :KEY (QUOTE 1+)) 4)
;; Loading (DEFTEST FIND-VECTOR.13 (FIND 5 #(1 2 3 4 5 6 4 8) :KEY (FUNCTION 1+) :FROM-END T) 4)
;; Loading (DEFTEST FIND-VECTOR.14 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST (COMPLEMENT (FUNCTION EQL))) B)
;; Loading (DEFTEST FIND-VECTOR.15 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST (COMPLEMENT (FUNCTION EQL)) :FROM-END T) F)
;; Loading (DEFTEST FIND-VECTOR.16 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL)) B)
;; Loading (DEFTEST FIND-VECTOR.17 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (QUOTE EQL) :FROM-END T) F)
;; Loading (DEFTEST FIND-VECTOR.18 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (QUOTE EQL)) B)
;; Loading (DEFTEST FIND-VECTOR.19 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL) :FROM-END T) F)
;; Loading (DEFTEST FIND-VECTOR.20 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL)) B)
;; Loading (DEFTEST FIND-VECTOR.21 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST (FUNCTION EQL) :START 2) A)
;; Loading (DEFTEST FIND-VECTOR.22 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST (FUNCTION EQL) :START 2 :END NIL) A)
;; Loading (DEFTEST FIND-VECTOR.23 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL) :START 0 :END 5) B)
;; Loading (DEFTEST FIND-VECTOR.24 (FIND (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) C)
;; Loading (DEFTEST FIND-VECTOR.25 (FIND "ab" #("a" #(#\b #\a) #(#\a #\b #\c) #(#\a #\b) #(#\d #\e) F) :TEST (FUNCTION EQUALP)) #(#\a #\b))
;; Loading (DEFTEST FIND-VECTOR.26 (FIND (QUOTE A) #((C) (B A) (A B C) (A B) (D E) F) :KEY (FUNCTION CAR)) (A B C))
;; Loading (DEFTEST FIND-VECTOR.27 (FIND (QUOTE A) #((C) (B A) (A B C) (Z) (A B) (D E) F) :KEY (FUNCTION CAR) :START 3) (A B))
;; Loading (DEFTEST FIND-VECTOR.28 (FIND (QUOTE A) #((C) (B A) (A B C) (Z) (A B) (D E) (F)) :KEY (FUNCTION CAR) :START 2 :FROM-END T) (A B))
;; Loading (DEFTEST FIND-VECTOR.29 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 5))) (LOOP FOR I FROM 1 TO 10 COLLECT (FIND I A))) (1 2 3 4 5 NIL NIL NIL NIL NIL))
;; Loading (DEFTEST FIND-VECTOR.30 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP FOR I FROM 1 FOR E IN (QUOTE (1 2 3 4 5 5 4 3 2 1)) COLLECT (LIST E I)) :FILL-POINTER 5))) (LOOP FOR I FROM 1 TO 5 COLLECT (FIND I A :FROM-END T :KEY (FUNCTION CAR)))) ((1 1) (2 2) (3 3) (4 4) (5 5)))
;; Loading (DEFTEST FIND-VECTOR.31 (FIND 10 #(1 2 3 8 20 3 1 21 3) :TEST (FUNCTION <)) 20)
;; Loading (DEFTEST FIND-VECTOR.32 (FIND 10 #(1 2 3 8 20 3 1 21 3) :TEST-NOT (FUNCTION >=)) 20)
;; Loading (DEFTEST FIND-VECTOR.33 (DO-SPECIAL-INTEGER-VECTORS (V #(1 2 3 4 5 6 7) NIL) (ASSERT (NULL (FIND 0 V))) (ASSERT (= (FIND 4 V) 4)) (ASSERT (= (FIND -1 V :TEST (FUNCTION <)) 1)) (ASSERT (= (FIND -1 V :TEST (FUNCTION <) :FROM-END T) 7))) NIL)
;; Loading (DEFTEST FIND-VECTOR.34 (DO-SPECIAL-INTEGER-VECTORS (V #(0 0 0 0) NIL) (ASSERT (EQL (FIND 0 V) 0)) (ASSERT (EQL (FIND 0 V :START 1) 0)) (ASSERT (EQL (FIND 0 V :FROM-END T) 0)) (ASSERT (NULL (FIND 1 V))) (ASSERT (NULL (FIND (QUOTE A) V))) (ASSERT (NULL (FIND 0.0 V))) (ASSERT (NULL (FIND #C(1.0 0.0) V))) (ASSERT (NULL (FIND -1 V))) (ASSERT (NULL (FIND 2 V)))) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.1 (FIND 1 #*001001010100) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.1A (FIND 0 #*001001010100) 0)
;; Loading (DEFTEST FIND-BIT-VECTOR.1B (FIND 2 #*001001010100) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.1C (FIND (QUOTE A) #*001001010100) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.1D (FIND 1 #*000000) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.2 (FIND 1 #*001001010100 :FROM-END T) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.2A (FIND 1 #*00000 :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.2B (FIND 0 #*00000 :FROM-END T) 0)
;; Loading (DEFTEST FIND-BIT-VECTOR.2C (FIND 0 #*11111 :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.2D (FIND 2 #*11111 :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.2E (FIND (QUOTE A) #*11111 :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.3 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND 1 #*0010010 :START I)) (1 1 1 1 1 1 NIL NIL))
;; Loading (DEFTEST FIND-BIT-VECTOR.4 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND 1 #*0010010 :START I :END NIL)) (1 1 1 1 1 1 NIL NIL))
;; Loading (DEFTEST FIND-BIT-VECTOR.5 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (FIND 1 #*0010010 :END I)) (1 1 1 1 1 NIL NIL NIL))
;; Loading (DEFTEST FIND-BIT-VECTOR.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND 1 #*0010010 :START I :FROM-END T)) (1 1 1 1 1 1 NIL NIL))
;; Loading (DEFTEST FIND-BIT-VECTOR.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND 0 #*1101101 :START I :END NIL :FROM-END T)) (0 0 0 0 0 0 NIL NIL))
;; Loading (DEFTEST FIND-BIT-VECTOR.8 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (FIND 0 #*1101101 :END I :FROM-END T)) (0 0 0 0 0 NIL NIL NIL))
;; Loading (DEFTEST FIND-BIT-VECTOR.9 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (FIND 1 #*0010010 :START I :END J))) ((NIL NIL 1 1 1 1 1) (NIL 1 1 1 1 1) (1 1 1 1 1) (NIL NIL 1 1) (NIL 1 1) (1 1) (NIL)))
;; Loading (DEFTEST FIND-BIT-VECTOR.10 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (FIND 1 #*0010010 :START I :END J :FROM-END T))) ((NIL NIL 1 1 1 1 1) (NIL 1 1 1 1 1) (1 1 1 1 1) (NIL NIL 1 1) (NIL 1 1) (1 1) (NIL)))
;; Loading (DEFTEST FIND-BIT-VECTOR.11 (FIND 2 #*00010001010 :KEY (FUNCTION 1+)) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.12 (FIND 2 #*00010001010 :KEY (QUOTE 1+)) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.13 (FIND 2 #*0010001000 :KEY (FUNCTION 1+) :FROM-END T) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.14 (FIND 0 #*0010111010 :TEST (COMPLEMENT (FUNCTION EQL))) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.15 (FIND 0 #*0010111010 :TEST (COMPLEMENT (FUNCTION EQL)) :FROM-END T) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.16 (FIND 0 #*0010111010 :TEST-NOT (FUNCTION EQL)) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.16A (FIND 1 #*111111111111 :TEST-NOT (FUNCTION EQL)) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.16B (FIND 0 #*0000000 :TEST-NOT (FUNCTION EQL)) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.17 (FIND 0 #*001011101 :TEST-NOT (QUOTE EQL) :FROM-END T) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.17A (FIND 0 #*0000000 :TEST-NOT (QUOTE EQL) :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.17B (FIND 1 #*111111111111 :TEST-NOT (QUOTE EQL) :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.18 (FIND 0 #*00101110 :TEST-NOT (QUOTE EQL)) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.18A (FIND 0 #*00000000 :TEST-NOT (QUOTE EQL)) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.19 (FIND 0 #*00101110 :TEST-NOT (FUNCTION EQL) :FROM-END T) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.19A (FIND 0 #*00000000 :TEST-NOT (FUNCTION EQL) :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.20 (FIND 0 #*00101110 :TEST-NOT (FUNCTION EQL)) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.21 (FIND 0 #*00101110 :TEST (FUNCTION EQL) :START 2) 0)
;; Loading (DEFTEST FIND-BIT-VECTOR.21A (FIND 0 #*00111111 :TEST (FUNCTION EQL) :START 2) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.21B (FIND 1 #*00111111 :TEST (FUNCTION EQL) :START 2) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.22 (FIND 0 #*00101110 :TEST (FUNCTION EQL) :START 2 :END NIL) 0)
;; Loading (DEFTEST FIND-BIT-VECTOR.22A (FIND 0 #*001111111 :TEST (FUNCTION EQL) :START 2 :END NIL) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.22B (FIND 1 #*001111111 :TEST (FUNCTION EQL) :START 2 :END NIL) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.23 (FIND 0 #*00101110 :TEST-NOT (FUNCTION EQL) :START 0 :END 5) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.23A (FIND 0 #*00000111 :TEST-NOT (FUNCTION EQL) :START 0 :END 5) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.23B (FIND 0 #*00001000 :TEST-NOT (FUNCTION EQL) :START 0 :END 5) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.24 (FIND 0 #*00101110 :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.24A (FIND 0 #*0000001111 :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.24B (FIND 0 #*0000100 :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.25 (FIND 2 #*1100001010 :KEY (FUNCTION 1+) :START 3) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.26 (FIND 2 #*11100000 :KEY (FUNCTION 1+) :START 3) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.26A (FIND 2 #*11110000 :KEY (FUNCTION 1+) :START 3) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.27 (FIND 2 #*1100001010 :KEY (FUNCTION 1+) :START 2 :FROM-END T) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.28 (FIND 2 #*1100000000 :KEY (FUNCTION 1+) :START 2 :FROM-END T) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.29 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5))) (VALUES (FIND 0 A) (FIND 0 A :FROM-END T))) NIL NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.30 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 1 1 0 0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5))) (VALUES (FIND 0 A) (FIND 0 A :FROM-END T))) 0 0)
;; Loading (DEFTEST FIND-BIT-VECTOR.31 (FIND 2 #*00011010010 :TEST (FUNCTION <)) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.32 (FIND 2 #*0010101101 :TEST-NOT (FUNCTION >=)) NIL)
;; Loading (DEFTEST FIND-BIT-VECTOR.33 (FIND 0 #*00011010010 :TEST (FUNCTION <)) 1)
;; Loading (DEFTEST FIND-BIT-VECTOR.34 (FIND 0 #*0010101101 :TEST-NOT (FUNCTION >=)) 1)
;; Loading (DEFTEST FIND-STRING.1 (FIND #\c "abcdeca") #\c)
;; Loading (DEFTEST FIND-STRING.1A (FIND #\c "abCa") NIL)
;; Loading (DEFTEST FIND-STRING.2 (FIND #\c "abcdeca" :FROM-END T) #\c)
;; Loading (DEFTEST FIND-STRING.2A (FIND #\c "abCCCa" :FROM-END T) NIL)
;; Loading (DEFTEST FIND-STRING.3 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND #\c "abcdeca" :START I)) (#\c #\c #\c #\c #\c #\c NIL NIL))
;; Loading (DEFTEST FIND-STRING.4 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND #\c "abcdeca" :START I :END NIL)) (#\c #\c #\c #\c #\c #\c NIL NIL))
;; Loading (DEFTEST FIND-STRING.5 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (FIND #\c "abcdeca" :END I)) (#\c #\c #\c #\c #\c NIL NIL NIL))
;; Loading (DEFTEST FIND-STRING.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND #\c "abcdeca" :START I :FROM-END T)) (#\c #\c #\c #\c #\c #\c NIL NIL))
;; Loading (DEFTEST FIND-STRING.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND #\c "abcdeca" :START I :END NIL :FROM-END T)) (#\c #\c #\c #\c #\c #\c NIL NIL))
;; Loading (DEFTEST FIND-STRING.8 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (FIND #\c "abcdeca" :END I :FROM-END T)) (#\c #\c #\c #\c #\c NIL NIL NIL))
;; Loading (DEFTEST FIND-STRING.9 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (FIND #\c "abcdeca" :START I :END J))) ((NIL NIL #\c #\c #\c #\c #\c) (NIL #\c #\c #\c #\c #\c) (#\c #\c #\c #\c #\c) (NIL NIL #\c #\c) (NIL #\c #\c) (#\c #\c) (NIL)))
;; Loading (DEFTEST FIND-STRING.10 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (FIND #\c "abcdeca" :START I :END J :FROM-END T))) ((NIL NIL #\c #\c #\c #\c #\c) (NIL #\c #\c #\c #\c #\c) (#\c #\c #\c #\c #\c) (NIL NIL #\c #\c) (NIL #\c #\c) (#\c #\c) (NIL)))
;; Loading (DEFTEST FIND-STRING.11 (FIND 5 "12345648" :KEY (FUNCTION (LAMBDA (C) (1+ (READ-FROM-STRING (STRING C)))))) #\4)
;; Loading (DEFTEST FIND-STRING.13 (FIND 5 "12345648" :KEY (FUNCTION (LAMBDA (C) (1+ (READ-FROM-STRING (STRING C))))) :FROM-END T) #\4)
;; Loading (DEFTEST FIND-STRING.14 (FIND #\a "aabacedafa" :TEST (COMPLEMENT (FUNCTION EQL))) #\b)
;; Loading (DEFTEST FIND-STRING.15 (FIND #\a "aabacedafa" :TEST (COMPLEMENT (FUNCTION EQL)) :FROM-END T) #\f)
;; Loading (DEFTEST FIND-STRING.16 (FIND #\a "aabacedafa" :TEST-NOT (FUNCTION EQL)) #\b)
;; Loading (DEFTEST FIND-STRING.17 (FIND #\a "aabacedafa" :TEST-NOT (QUOTE EQL) :FROM-END T) #\f)
;; Loading (DEFTEST FIND-STRING.18 (FIND #\a "aabacedafa" :TEST-NOT (QUOTE EQL)) #\b)
;; Loading (DEFTEST FIND-STRING.19 (FIND #\a "aabacedafa" :TEST-NOT (FUNCTION EQL) :FROM-END T) #\f)
;; Loading (DEFTEST FIND-STRING.20 (FIND #\a "aabacedafa" :TEST-NOT (FUNCTION EQL)) #\b)
;; Loading (DEFTEST FIND-STRING.21 (FIND #\a "aabAcedafa" :TEST (FUNCTION CHAR-EQUAL) :START 2) #\A)
;; Loading (DEFTEST FIND-STRING.22 (FIND #\a "aabAcedafa" :TEST (FUNCTION CHAR-EQUAL) :START 2 :END NIL) #\A)
;; Loading (DEFTEST FIND-STRING.23 (FIND #\a "aAbAcedafa" :TEST-NOT (FUNCTION CHAR-EQUAL) :START 0 :END 5) #\b)
;; Loading (DEFTEST FIND-STRING.24 (FIND #\a "aabacedafa" :TEST-NOT (FUNCTION CHAR-EQUAL) :START 0 :END 5 :FROM-END T) #\c)
;; Loading (DEFTEST FIND-STRING.25 (LET ((S (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcdefghij" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5))) (VALUES (LOOP FOR E ACROSS "abcdefghij" COLLECT (FIND E S)) (LOOP FOR E ACROSS "abcdefghij" COLLECT (FIND E S :FROM-END T)))) (#\a #\b #\c #\d #\e NIL NIL NIL NIL NIL) (#\a #\b #\c #\d #\e NIL NIL NIL NIL NIL))
;; Loading (DEFTEST FIND-STRING.26 (FIND #\k "abcdmnop" :TEST (FUNCTION CHAR<)) #\m)
;; Loading (DEFTEST FIND-STRING.27 (FIND #\k "abcdmnop" :TEST-NOT (FUNCTION CHAR>=)) #\m)
;; Loading (DEFTEST FIND-STRING.28 (DO-SPECIAL-STRINGS (S "abcdef" NIL) (ASSERT (CHAR= (FIND #\c S :TEST (FUNCTION CHAR<)) #\d))) NIL)
;; Loading (DEFHARMLESS FIND-LIST.TEST-AND-TEST-NOT.1 (FIND (QUOTE B) (QUOTE (A B C)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS FIND-LIST.TEST-AND-TEST-NOT.2 (FIND (QUOTE B) (QUOTE (A B C)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS FIND-VECTOR.TEST-AND-TEST-NOT.1 (FIND (QUOTE B) #(A B C) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS FIND-VECTOR.TEST-AND-TEST-NOT.2 (FIND (QUOTE B) #(A B C) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS FIND-STRING.TEST-AND-TEST-NOT.1 (FIND #\b "abc" :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS FIND-STRING.TEST-AND-TEST-NOT.2 (FIND #\b "abc" :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS FIND-BIT-STRING.TEST-AND-TEST-NOT.1 (FIND 0 #*110110 :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFHARMLESS FIND-BIT-STRING.TEST-AND-TEST-NOT.2 (FIND 0 #*110110 :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST FIND.ALLOW-OTHER-KEYS.1 (FIND 0 (QUOTE (1 2 3 4 5)) :KEY (FUNCTION (LAMBDA (X) (MOD X 2))) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST FIND.ALLOW-OTHER-KEYS.2 (FIND 0 (QUOTE (1 2 3 4 5)) :KEY (FUNCTION (LAMBDA (X) (MOD X 2))) :ALLOW-OTHER-KEYS T :ALSO-BAD T) 2)
;; Loading (DEFTEST FIND.ALLOW-OTHER-KEYS.3 (FIND 0 (QUOTE (1 2 3 4 5)) :KEY (FUNCTION (LAMBDA (X) (MOD X 2))) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST FIND.KEYWORDS.4 (FIND 2 (QUOTE (1 2 3 4 5)) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION 1+)) 2)
;; Loading (DEFTEST FIND.ALLOW-OTHER-KEYS.5 (FIND (QUOTE B) (QUOTE (NIL A B C NIL)) :ALLOW-OTHER-KEYS NIL) B)
;; Loading (DEFTEST FIND.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (FIND (QUOTE A) X))) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE SEQUENCE))))) NIL)
;; Loading (DEFTEST FIND.ERROR.4 (SIGNALS-ERROR (FIND (QUOTE E) (QUOTE (A B C . D))) TYPE-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.5 (SIGNALS-ERROR (FIND) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.6 (SIGNALS-ERROR (FIND (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.7 (SIGNALS-ERROR (FIND (QUOTE A) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.8 (SIGNALS-ERROR (FIND (QUOTE A) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.9 (SIGNALS-ERROR (FIND (QUOTE A) NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.10 (SIGNALS-ERROR (FIND (QUOTE A) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.11 (SIGNALS-ERROR (LOCALLY (FIND (QUOTE A) (QUOTE B)) T) TYPE-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.12 (SIGNALS-ERROR (FIND (QUOTE B) (QUOTE (A B C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.13 (SIGNALS-ERROR (FIND (QUOTE B) (QUOTE (A B C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.14 (SIGNALS-ERROR (FIND (QUOTE C) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND.ERROR.15 (SIGNALS-ERROR (FIND (QUOTE C) (QUOTE (A B C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST FIND.ORDER.1 (LET ((I 0) X Y) (VALUES (FIND (PROGN (SETF X (INCF I)) (QUOTE A)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL)))) I X Y)) A 2 1 2)
;; Loading (DEFTEST FIND.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (FIND (PROGN (SETF A (INCF I)) NIL) (PROGN (SETF B (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL))) :START (PROGN (SETF C (INCF I)) 1) :END (PROGN (SETF D (INCF I)) 4) :FROM-END (SETF E (INCF I)) :KEY (PROGN (SETF F (INCF I)) (FUNCTION NULL))) I A B C D E F)) A 6 1 2 3 4 5 6)
;; Loading (DEFTEST FIND.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (FIND (PROGN (SETF A (INCF I)) NIL) (PROGN (SETF B (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL))) :KEY (PROGN (SETF C (INCF I)) (FUNCTION NULL)) :FROM-END (SETF D (INCF I)) :END (PROGN (SETF E (INCF I)) 4) :START (PROGN (SETF F (INCF I)) 1)) I A B C D E F)) A 6 1 2 3 4 5 6)
;; Loading (LOAD "find-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/find-if.lsp 814EA6C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FIND-IF-LIST.1 (FIND-IF (FUNCTION IDENTITY) NIL) NIL)
;; Loading (DEFTEST FIND-IF-LIST.2 (FIND-IF (FUNCTION IDENTITY) (QUOTE (A))) A)
;; Loading (DEFTEST FIND-IF-LIST.2A (FIND-IF (QUOTE IDENTITY) (QUOTE (A))) A)
;; Loading (DEFTEST FIND-IF-LIST.3 (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7))) 2)
;; Loading (DEFTEST FIND-IF-LIST.4 (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :FROM-END T) 6)
;; Loading (DEFTEST FIND-IF-LIST.5 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :START I)) (2 2 4 8 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-LIST.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :START I :END NIL)) (2 2 4 8 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-LIST.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :START I :FROM-END T)) (6 6 6 6 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-LIST.8 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :START I :END NIL :FROM-END T)) (6 6 6 6 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-LIST.9 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :END I)) (NIL NIL 2 2 2 2 2 2 2))
;; Loading (DEFTEST FIND-IF-LIST.10 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :END I :FROM-END T)) (NIL NIL 2 4 8 8 8 6 6))
;; Loading (DEFTEST FIND-IF-LIST.11 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :START J :END I))) ((NIL 2 2 2 2 2 2 2) (2 2 2 2 2 2 2) (4 4 4 4 4 4) (8 8 8 8 8) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-LIST.12 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :START J :END I :FROM-END T))) ((NIL 2 4 8 8 8 6 6) (2 4 8 8 8 6 6) (4 8 8 8 6 6) (8 8 8 6 6) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-LIST.13 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 6 11 32 45 71 100)) :KEY (FUNCTION 1+) :START I)) (1 11 11 45 45 71 NIL))
;; Loading (DEFTEST FIND-IF-LIST.14 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 6 11 32 45 71 100)) :KEY (QUOTE 1+) :START I :FROM-END T)) (71 71 71 71 71 71 NIL))
;; Loading (DEFTEST FIND-IF-LIST.15 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 6 11 32 45 71 100)) :KEY (FUNCTION 1+) :END I)) (NIL 1 1 1 1 1 1 1))
;; Loading (DEFTEST FIND-IF-LIST.16 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) (QUOTE (1 6 11 32 45 71 100)) :KEY (QUOTE 1+) :END I :FROM-END T)) (NIL 1 1 11 11 45 71 71))
;; Loading (DEFTEST FIND-IF-LIST.17 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :START J :END I :KEY (FUNCTION 1-)))) ((NIL 2 2 2 2 2 2 2) (2 2 2 2 2 2 2) (4 4 4 4 4 4) (8 8 8 8 8) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-LIST.18 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :START J :END I :FROM-END T :KEY (FUNCTION 1+)))) ((NIL 2 4 8 8 8 6 6) (2 4 8 8 8 6 6) (4 8 8 8 6 6) (8 8 8 6 6) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-VECTOR.1 (FIND-IF (FUNCTION IDENTITY) #()) NIL)
;; Loading (DEFTEST FIND-IF-VECTOR.2 (FIND-IF (FUNCTION IDENTITY) #(A)) A)
;; Loading (DEFTEST FIND-IF-VECTOR.2A (FIND-IF (QUOTE IDENTITY) #(A)) A)
;; Loading (DEFTEST FIND-IF-VECTOR.3 (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7)) 2)
;; Loading (DEFTEST FIND-IF-VECTOR.4 (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :FROM-END T) 6)
;; Loading (DEFTEST FIND-IF-VECTOR.5 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :START I)) (2 2 4 8 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-VECTOR.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :START I :END NIL)) (2 2 4 8 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-VECTOR.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :START I :FROM-END T)) (6 6 6 6 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-VECTOR.8 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :START I :END NIL :FROM-END T)) (6 6 6 6 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-VECTOR.9 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :END I)) (NIL NIL 2 2 2 2 2 2 2))
;; Loading (DEFTEST FIND-IF-VECTOR.10 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :END I :FROM-END T)) (NIL NIL 2 4 8 8 8 6 6))
;; Loading (DEFTEST FIND-IF-VECTOR.11 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :START J :END I))) ((NIL 2 2 2 2 2 2 2) (2 2 2 2 2 2 2) (4 4 4 4 4 4) (8 8 8 8 8) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-VECTOR.12 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :START J :END I :FROM-END T))) ((NIL 2 4 8 8 8 6 6) (2 4 8 8 8 6 6) (4 8 8 8 6 6) (8 8 8 6 6) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-VECTOR.13 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF (FUNCTION EVENP) #(1 6 11 32 45 71 100) :KEY (FUNCTION 1+) :START I)) (1 11 11 45 45 71 NIL))
;; Loading (DEFTEST FIND-IF-VECTOR.14 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF (FUNCTION EVENP) #(1 6 11 32 45 71 100) :KEY (QUOTE 1+) :START I :FROM-END T)) (71 71 71 71 71 71 NIL))
;; Loading (DEFTEST FIND-IF-VECTOR.15 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) #(1 6 11 32 45 71 100) :KEY (FUNCTION 1+) :END I)) (NIL 1 1 1 1 1 1 1))
;; Loading (DEFTEST FIND-IF-VECTOR.16 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) #(1 6 11 32 45 71 100) :KEY (QUOTE 1+) :END I :FROM-END T)) (NIL 1 1 11 11 45 71 71))
;; Loading (DEFTEST FIND-IF-VECTOR.17 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :START J :END I :KEY (FUNCTION 1-)))) ((NIL 2 2 2 2 2 2 2) (2 2 2 2 2 2 2) (4 4 4 4 4 4) (8 8 8 8 8) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-VECTOR.18 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :START J :END I :FROM-END T :KEY (FUNCTION 1+)))) ((NIL 2 4 8 8 8 6 6) (2 4 8 8 8 6 6) (4 8 8 8 6 6) (8 8 8 6 6) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-VECTOR.19 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 5))) (VALUES (FIND-IF (FUNCTION EVENP) A) (FIND-IF (FUNCTION EVENP) A :FROM-END T) (FIND-IF (FUNCTION ODDP) A) (FIND-IF (FUNCTION ODDP) A :FROM-END T))) 2 4 1 5)
;; Loading (DEFTEST FIND-IF-BIT-VECTOR.1 (FIND-IF (FUNCTION IDENTITY) #*) NIL)
;; Loading (DEFTEST FIND-IF-BIT-VECTOR.2 (FIND-IF (FUNCTION IDENTITY) #*1) 1)
;; Loading (DEFTEST FIND-IF-BIT-VECTOR.3 (FIND-IF (FUNCTION IDENTITY) #*0) 0)
;; Loading (DEFTEST FIND-IF-BIT-VECTOR.4 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM I TO 7 COLLECT (FIND-IF (FUNCTION EVENP) #*0110110 :START I :END J))) ((NIL 0 0 0 0 0 0 0) (NIL NIL NIL 0 0 0 0) (NIL NIL 0 0 0 0) (NIL 0 0 0 0) (NIL NIL NIL 0) (NIL NIL 0) (NIL 0)))
;; Loading (DEFTEST FIND-IF-BIT-VECTOR.5 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM I TO 7 COLLECT (FIND-IF (FUNCTION EVENP) #*0110110 :START I :END J :FROM-END T))) ((NIL 0 0 0 0 0 0 0) (NIL NIL NIL 0 0 0 0) (NIL NIL 0 0 0 0) (NIL 0 0 0 0) (NIL NIL NIL 0) (NIL NIL 0) (NIL 0)))
;; Loading (DEFTEST FIND-IF-BIT-VECTOR.6 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM I TO 7 COLLECT (FIND-IF (FUNCTION ODDP) #*0110110 :START I :END J :FROM-END T :KEY (FUNCTION 1+)))) ((NIL 0 0 0 0 0 0 0) (NIL NIL NIL 0 0 0 0) (NIL NIL 0 0 0 0) (NIL 0 0 0 0) (NIL NIL NIL 0) (NIL NIL 0) (NIL 0)))
;; Loading (DEFTEST FIND-IF-BIT-VECTOR.7 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM I TO 7 COLLECT (FIND-IF (FUNCTION ODDP) #*0110110 :START I :END J :KEY (QUOTE 1-)))) ((NIL 0 0 0 0 0 0 0) (NIL NIL NIL 0 0 0 0) (NIL NIL 0 0 0 0) (NIL 0 0 0 0) (NIL NIL NIL 0) (NIL NIL 0) (NIL 0)))
;; Loading (DEFTEST FIND-IF-STRING.1 (FIND-IF (FUNCTION IDENTITY) "") NIL)
;; Loading (DEFTEST FIND-IF-STRING.2 (FIND-IF (FUNCTION IDENTITY) "a") #\a)
;; Loading (DEFTEST FIND-IF-STRING.2A (FIND-IF (QUOTE IDENTITY) "a") #\a)
;; Loading (DEFTEST FIND-IF-STRING.3 (FIND-IF (FUNCTION EVENDIGITP) "12483167") #\2)
;; Loading (DEFTEST FIND-IF-STRING.3A (FIND-IF (FUNCTION EVENP) "12483167" :KEY (FUNCTION (LAMBDA (C) (READ-FROM-STRING (STRING C))))) #\2)
;; Loading (DEFTEST FIND-IF-STRING.4 (FIND-IF (FUNCTION EVENDIGITP) "12483167" :FROM-END T) #\6)
;; Loading (DEFTEST FIND-IF-STRING.5 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENDIGITP) "12483167" :START I)) (#\2 #\2 #\4 #\8 #\6 #\6 #\6 NIL))
;; Loading (DEFTEST FIND-IF-STRING.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENDIGITP) "12483167" :START I :END NIL)) (#\2 #\2 #\4 #\8 #\6 #\6 #\6 NIL))
;; Loading (DEFTEST FIND-IF-STRING.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENDIGITP) "12483167" :START I :FROM-END T)) (#\6 #\6 #\6 #\6 #\6 #\6 #\6 NIL))
;; Loading (DEFTEST FIND-IF-STRING.8 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENDIGITP) "12483167" :START I :END NIL :FROM-END T)) (#\6 #\6 #\6 #\6 #\6 #\6 #\6 NIL))
;; Loading (DEFTEST FIND-IF-STRING.9 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF (FUNCTION EVENDIGITP) "12483167" :END I)) (NIL NIL #\2 #\2 #\2 #\2 #\2 #\2 #\2))
;; Loading (DEFTEST FIND-IF-STRING.10 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF (FUNCTION EVENDIGITP) "12483167" :END I :FROM-END T)) (NIL NIL #\2 #\4 #\8 #\8 #\8 #\6 #\6))
;; Loading (DEFTEST FIND-IF-STRING.11 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION EVENDIGITP) "12483167" :START J :END I))) ((NIL #\2 #\2 #\2 #\2 #\2 #\2 #\2) (#\2 #\2 #\2 #\2 #\2 #\2 #\2) (#\4 #\4 #\4 #\4 #\4 #\4) (#\8 #\8 #\8 #\8 #\8) (NIL NIL #\6 #\6) (NIL #\6 #\6) (#\6 #\6) (NIL)))
;; Loading (DEFTEST FIND-IF-STRING.12 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF (FUNCTION EVENDIGITP) "12483167" :START J :END I :FROM-END T))) ((NIL #\2 #\4 #\8 #\8 #\8 #\6 #\6) (#\2 #\4 #\8 #\8 #\8 #\6 #\6) (#\4 #\8 #\8 #\8 #\6 #\6) (#\8 #\8 #\8 #\6 #\6) (NIL NIL #\6 #\6) (NIL #\6 #\6) (#\6 #\6) (NIL)))
;; Loading (DEFTEST FIND-IF-STRING.13 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF (FUNCTION EVENP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :START I)) (#\4 #\4 #\8 #\8 #\8 #\6 #\6))
;; Loading (DEFTEST FIND-IF-STRING.14 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF (FUNCTION EVENP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :START I :FROM-END T)) (#\6 #\6 #\6 #\6 #\6 #\6 #\6))
;; Loading (DEFTEST FIND-IF-STRING.15 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :END I)) (NIL NIL #\4 #\4 #\4 #\4 #\4 #\4))
;; Loading (DEFTEST FIND-IF-STRING.16 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF (FUNCTION EVENP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :END I :FROM-END T)) (NIL NIL #\4 #\4 #\4 #\8 #\8 #\6))
;; Loading (DEFTEST FIND-IF-STRING.17 (LOOP FOR J FROM 0 TO 6 COLLECT (LOOP FOR I FROM (1+ J) TO 7 COLLECT (FIND-IF (FUNCTION EVENP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :START J :END I))) ((NIL #\4 #\4 #\4 #\4 #\4 #\4) (#\4 #\4 #\4 #\4 #\4 #\4) (NIL NIL #\8 #\8 #\8) (NIL #\8 #\8 #\8) (#\8 #\8 #\8) (NIL #\6) (#\6)))
;; Loading (DEFTEST FIND-IF-STRING.18 (LOOP FOR J FROM 0 TO 6 COLLECT (LOOP FOR I FROM (1+ J) TO 7 COLLECT (FIND-IF (FUNCTION EVENP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :START J :END I :FROM-END T))) ((NIL #\4 #\4 #\4 #\8 #\8 #\6) (#\4 #\4 #\4 #\8 #\8 #\6) (NIL NIL #\8 #\8 #\6) (NIL #\8 #\8 #\6) (#\8 #\8 #\6) (NIL #\6) (#\6)))
;; Loading (DEFTEST FIND-IF-STRING.19 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "123456789a" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (FIND-IF (FUNCTION EVENDIGITP) A) (FIND-IF (FUNCTION EVENDIGITP) A :FROM-END T) (FIND-IF (FUNCTION ODDDIGITP) A) (FIND-IF (FUNCTION ODDDIGITP) A :FROM-END T))) #\2 #\4 #\1 #\5)
;; Loading (DEFTEST FIND-IF-STRING.20 (DO-SPECIAL-STRINGS (S "123a456" NIL) (ASSERT (EQL (FIND-IF (FUNCTION ALPHA-CHAR-P) S) #\a))) NIL)
;; Loading (DEFTEST FIND-IF.ALLOW-OTHER-KEYS.1 (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST FIND-IF.ALLOW-OTHER-KEYS.2 (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALSO-BAD T) 2)
;; Loading (DEFTEST FIND-IF.ALLOW-OTHER-KEYS.3 (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST FIND-IF.KEYWORDS.4 (FIND-IF (FUNCTION EVENP) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION 1+)) 2)
;; Loading (DEFTEST FIND-IF.ALLOW-OTHER-KEYS.5 (FIND-IF (FUNCTION IDENTITY) (QUOTE (NIL A B C NIL)) :ALLOW-OTHER-KEYS NIL) A)
;; Loading (DEFTEST FIND-IF.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (FIND-IF (FUNCTION NULL) X))) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE SEQUENCE))))) NIL)
;; Loading (DEFTEST FIND-IF.ERROR.4 (SIGNALS-ERROR (FIND-IF (QUOTE NULL) (QUOTE (A B C . D))) TYPE-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.5 (SIGNALS-ERROR (FIND-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.6 (SIGNALS-ERROR (FIND-IF (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.7 (SIGNALS-ERROR (FIND-IF (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.8 (SIGNALS-ERROR (FIND-IF (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.9 (SIGNALS-ERROR (FIND-IF (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.10 (SIGNALS-ERROR (FIND-IF (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.11 (SIGNALS-ERROR (LOCALLY (FIND-IF (FUNCTION NULL) (QUOTE B)) T) TYPE-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.12 (SIGNALS-ERROR (FIND-IF (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.13 (SIGNALS-ERROR (FIND-IF (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.14 (SIGNALS-ERROR (FIND-IF (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF.ERROR.15 (SIGNALS-ERROR (FIND-IF (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST FIND-IF.ORDER.1 (LET ((I 0) X Y) (VALUES (FIND-IF (PROGN (SETF X (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL)))) I X Y)) A 2 1 2)
;; Loading (DEFTEST FIND-IF.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (FIND-IF (PROGN (SETF A (INCF I)) (FUNCTION NULL)) (PROGN (SETF B (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL))) :START (PROGN (SETF C (INCF I)) 1) :END (PROGN (SETF D (INCF I)) 4) :FROM-END (SETF E (INCF I)) :KEY (PROGN (SETF F (INCF I)) (FUNCTION NULL))) I A B C D E F)) A 6 1 2 3 4 5 6)
;; Loading (DEFTEST FIND-IF.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (FIND-IF (PROGN (SETF A (INCF I)) (FUNCTION NULL)) (PROGN (SETF B (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL))) :KEY (PROGN (SETF C (INCF I)) (FUNCTION NULL)) :FROM-END (SETF D (INCF I)) :END (PROGN (SETF E (INCF I)) 4) :START (PROGN (SETF F (INCF I)) 1)) I A B C D E F)) A 6 1 2 3 4 5 6)
;; Loading (LOAD "find-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/find-if-not.lsp 818931B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FIND-IF-NOT-LIST.1 (FIND-IF-NOT (FUNCTION IDENTITY) NIL) NIL)
;; Loading (DEFTEST FIND-IF-NOT-LIST.2 (FIND-IF-NOT (FUNCTION NULL) (QUOTE (A))) A)
;; Loading (DEFTEST FIND-IF-NOT-LIST.2A (FIND-IF-NOT (QUOTE NULL) (QUOTE (A))) A)
;; Loading (DEFTEST FIND-IF-NOT-LIST.3 (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7))) 2)
;; Loading (DEFTEST FIND-IF-NOT-LIST.4 (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :FROM-END T) 6)
;; Loading (DEFTEST FIND-IF-NOT-LIST.5 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :START I)) (2 2 4 8 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-LIST.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :START I :END NIL)) (2 2 4 8 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-LIST.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :START I :FROM-END T)) (6 6 6 6 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-LIST.8 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :START I :END NIL :FROM-END T)) (6 6 6 6 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-LIST.9 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :END I)) (NIL NIL 2 2 2 2 2 2 2))
;; Loading (DEFTEST FIND-IF-NOT-LIST.10 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :END I :FROM-END T)) (NIL NIL 2 4 8 8 8 6 6))
;; Loading (DEFTEST FIND-IF-NOT-LIST.11 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :START J :END I))) ((NIL 2 2 2 2 2 2 2) (2 2 2 2 2 2 2) (4 4 4 4 4 4) (8 8 8 8 8) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-LIST.12 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 4 8 3 1 6 7)) :START J :END I :FROM-END T))) ((NIL 2 4 8 8 8 6 6) (2 4 8 8 8 6 6) (4 8 8 8 6 6) (8 8 8 6 6) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-LIST.13 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 6 11 32 45 71 100)) :KEY (FUNCTION 1+) :START I)) (1 11 11 45 45 71 NIL))
;; Loading (DEFTEST FIND-IF-NOT-LIST.14 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 6 11 32 45 71 100)) :KEY (QUOTE 1+) :START I :FROM-END T)) (71 71 71 71 71 71 NIL))
;; Loading (DEFTEST FIND-IF-NOT-LIST.15 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 6 11 32 45 71 100)) :KEY (FUNCTION 1+) :END I)) (NIL 1 1 1 1 1 1 1))
;; Loading (DEFTEST FIND-IF-NOT-LIST.16 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 6 11 32 45 71 100)) :KEY (QUOTE 1+) :END I :FROM-END T)) (NIL 1 1 11 11 45 71 71))
;; Loading (DEFTEST FIND-IF-NOT-LIST.17 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :START J :END I :KEY (FUNCTION 1-)))) ((NIL 2 2 2 2 2 2 2) (2 2 2 2 2 2 2) (4 4 4 4 4 4) (8 8 8 8 8) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-LIST.18 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION EVENP) (QUOTE (1 2 4 8 3 1 6 7)) :START J :END I :FROM-END T :KEY (FUNCTION 1+)))) ((NIL 2 4 8 8 8 6 6) (2 4 8 8 8 6 6) (4 8 8 8 6 6) (8 8 8 6 6) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.1 (FIND-IF-NOT (FUNCTION IDENTITY) #()) NIL)
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.2 (FIND-IF-NOT (FUNCTION NOT) #(A)) A)
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.2A (FIND-IF-NOT (QUOTE NULL) #(A)) A)
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.3 (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7)) 2)
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.4 (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :FROM-END T) 6)
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.5 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :START I)) (2 2 4 8 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :START I :END NIL)) (2 2 4 8 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :START I :FROM-END T)) (6 6 6 6 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.8 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :START I :END NIL :FROM-END T)) (6 6 6 6 6 6 6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.9 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :END I)) (NIL NIL 2 2 2 2 2 2 2))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.10 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :END I :FROM-END T)) (NIL NIL 2 4 8 8 8 6 6))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.11 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :START J :END I))) ((NIL 2 2 2 2 2 2 2) (2 2 2 2 2 2 2) (4 4 4 4 4 4) (8 8 8 8 8) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.12 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 2 4 8 3 1 6 7) :START J :END I :FROM-END T))) ((NIL 2 4 8 8 8 6 6) (2 4 8 8 8 6 6) (4 8 8 8 6 6) (8 8 8 6 6) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.13 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 6 11 32 45 71 100) :KEY (FUNCTION 1+) :START I)) (1 11 11 45 45 71 NIL))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.14 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 6 11 32 45 71 100) :KEY (QUOTE 1+) :START I :FROM-END T)) (71 71 71 71 71 71 NIL))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.15 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 6 11 32 45 71 100) :KEY (FUNCTION 1+) :END I)) (NIL 1 1 1 1 1 1 1))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.16 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #(1 6 11 32 45 71 100) :KEY (QUOTE 1+) :END I :FROM-END T)) (NIL 1 1 11 11 45 71 71))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.17 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :START J :END I :KEY (FUNCTION 1-)))) ((NIL 2 2 2 2 2 2 2) (2 2 2 2 2 2 2) (4 4 4 4 4 4) (8 8 8 8 8) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-VECTOR.18 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION EVENP) #(1 2 4 8 3 1 6 7) :START J :END I :FROM-END T :KEY (FUNCTION 1+)))) ((NIL 2 4 8 8 8 6 6) (2 4 8 8 8 6 6) (4 8 8 8 6 6) (8 8 8 6 6) (NIL NIL 6 6) (NIL 6 6) (6 6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-BIT-VECTOR.1 (FIND-IF-NOT (FUNCTION IDENTITY) #*) NIL)
;; Loading (DEFTEST FIND-IF-NOT-BIT-VECTOR.2 (FIND-IF-NOT (FUNCTION NULL) #*1) 1)
;; Loading (DEFTEST FIND-IF-NOT-BIT-VECTOR.3 (FIND-IF-NOT (FUNCTION NOT) #*0) 0)
;; Loading (DEFTEST FIND-IF-NOT-BIT-VECTOR.4 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM I TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #*0110110 :START I :END J))) ((NIL 0 0 0 0 0 0 0) (NIL NIL NIL 0 0 0 0) (NIL NIL 0 0 0 0) (NIL 0 0 0 0) (NIL NIL NIL 0) (NIL NIL 0) (NIL 0)))
;; Loading (DEFTEST FIND-IF-NOT-BIT-VECTOR.5 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM I TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) #*0110110 :START I :END J :FROM-END T))) ((NIL 0 0 0 0 0 0 0) (NIL NIL NIL 0 0 0 0) (NIL NIL 0 0 0 0) (NIL 0 0 0 0) (NIL NIL NIL 0) (NIL NIL 0) (NIL 0)))
;; Loading (DEFTEST FIND-IF-NOT-BIT-VECTOR.6 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM I TO 7 COLLECT (FIND-IF-NOT (FUNCTION EVENP) #*0110110 :START I :END J :FROM-END T :KEY (FUNCTION 1+)))) ((NIL 0 0 0 0 0 0 0) (NIL NIL NIL 0 0 0 0) (NIL NIL 0 0 0 0) (NIL 0 0 0 0) (NIL NIL NIL 0) (NIL NIL 0) (NIL 0)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FIND-IF-NOT-BIT-VECTOR.7 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM I TO 7 COLLECT (FIND-IF-NOT (FUNCTION EVENP) #*0110110 :START I :END J :KEY (QUOTE 1-)))) ((NIL 0 0 0 0 0 0 0) (NIL NIL NIL 0 0 0 0) (NIL NIL 0 0 0 0) (NIL 0 0 0 0) (NIL NIL NIL 0) (NIL NIL 0) (NIL 0)))
;; Loading (DEFTEST FIND-IF-NOT-STRING.1 (FIND-IF-NOT (FUNCTION IDENTITY) "") NIL)
;; Loading (DEFTEST FIND-IF-NOT-STRING.2 (FIND-IF-NOT (FUNCTION NULL) "a") #\a)
;; Loading (DEFTEST FIND-IF-NOT-STRING.2A (FIND-IF-NOT (QUOTE NULL) "a") #\a)
;; Loading (DEFTEST FIND-IF-NOT-STRING.3 (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167") #\2)
;; Loading (DEFTEST FIND-IF-NOT-STRING.3A (FIND-IF-NOT (FUNCTION ODDP) "12483167" :KEY (FUNCTION (LAMBDA (C) (READ-FROM-STRING (STRING C))))) #\2)
;; Loading (DEFTEST FIND-IF-NOT-STRING.4 (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :FROM-END T) #\6)
;; Loading (DEFTEST FIND-IF-NOT-STRING.5 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :START I)) (#\2 #\2 #\4 #\8 #\6 #\6 #\6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-STRING.6 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :START I :END NIL)) (#\2 #\2 #\4 #\8 #\6 #\6 #\6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-STRING.7 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :START I :FROM-END T)) (#\6 #\6 #\6 #\6 #\6 #\6 #\6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-STRING.8 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :START I :END NIL :FROM-END T)) (#\6 #\6 #\6 #\6 #\6 #\6 #\6 NIL))
;; Loading (DEFTEST FIND-IF-NOT-STRING.9 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :END I)) (NIL NIL #\2 #\2 #\2 #\2 #\2 #\2 #\2))
;; Loading (DEFTEST FIND-IF-NOT-STRING.10 (LOOP FOR I FROM 0 TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :END I :FROM-END T)) (NIL NIL #\2 #\4 #\8 #\8 #\8 #\6 #\6))
;; Loading (DEFTEST FIND-IF-NOT-STRING.11 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :START J :END I))) ((NIL #\2 #\2 #\2 #\2 #\2 #\2 #\2) (#\2 #\2 #\2 #\2 #\2 #\2 #\2) (#\4 #\4 #\4 #\4 #\4 #\4) (#\8 #\8 #\8 #\8 #\8) (NIL NIL #\6 #\6) (NIL #\6 #\6) (#\6 #\6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-STRING.12 (LOOP FOR J FROM 0 TO 7 COLLECT (LOOP FOR I FROM (1+ J) TO 8 COLLECT (FIND-IF-NOT (FUNCTION ODDDIGITP) "12483167" :START J :END I :FROM-END T))) ((NIL #\2 #\4 #\8 #\8 #\8 #\6 #\6) (#\2 #\4 #\8 #\8 #\8 #\6 #\6) (#\4 #\8 #\8 #\8 #\6 #\6) (#\8 #\8 #\8 #\6 #\6) (NIL NIL #\6 #\6) (NIL #\6 #\6) (#\6 #\6) (NIL)))
;; Loading (DEFTEST FIND-IF-NOT-STRING.13 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF-NOT (FUNCTION ODDP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :START I)) (#\4 #\4 #\8 #\8 #\8 #\6 #\6))
;; Loading (DEFTEST FIND-IF-NOT-STRING.14 (LOOP FOR I FROM 0 TO 6 COLLECT (FIND-IF-NOT (FUNCTION ODDP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :START I :FROM-END T)) (#\6 #\6 #\6 #\6 #\6 #\6 #\6))
;; Loading (DEFTEST FIND-IF-NOT-STRING.15 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :END I)) (NIL NIL #\4 #\4 #\4 #\4 #\4 #\4))
;; Loading (DEFTEST FIND-IF-NOT-STRING.16 (LOOP FOR I FROM 0 TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :END I :FROM-END T)) (NIL NIL #\4 #\4 #\4 #\8 #\8 #\6))
;; Loading (DEFTEST FIND-IF-NOT-STRING.17 (LOOP FOR J FROM 0 TO 6 COLLECT (LOOP FOR I FROM (1+ J) TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :START J :END I))) ((NIL #\4 #\4 #\4 #\4 #\4 #\4) (#\4 #\4 #\4 #\4 #\4 #\4) (NIL NIL #\8 #\8 #\8) (NIL #\8 #\8 #\8) (#\8 #\8 #\8) (NIL #\6) (#\6)))
;; Loading (DEFTEST FIND-IF-NOT-STRING.18 (LOOP FOR J FROM 0 TO 6 COLLECT (LOOP FOR I FROM (1+ J) TO 7 COLLECT (FIND-IF-NOT (FUNCTION ODDP) "1473816" :KEY (COMPOSE (FUNCTION READ-FROM-STRING) (FUNCTION STRING)) :START J :END I :FROM-END T))) ((NIL #\4 #\4 #\4 #\8 #\8 #\6) (#\4 #\4 #\4 #\8 #\8 #\6) (NIL NIL #\8 #\8 #\6) (NIL #\8 #\8 #\6) (#\8 #\8 #\6) (NIL #\6) (#\6)))
;; Loading (DEFTEST FIND-IF-NOT-STRING.19 (DO-SPECIAL-STRINGS (S "abc1def" NIL) (ASSERT (EQL (FIND-IF-NOT (FUNCTION ALPHA-CHAR-P) S) #\1))) NIL)
;; Loading (DEFTEST FIND-IF-NOT.ALLOW-OTHER-KEYS.1 (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST FIND-IF-NOT.ALLOW-OTHER-KEYS.2 (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALSO-BAD T) 2)
;; Loading (DEFTEST FIND-IF-NOT.ALLOW-OTHER-KEYS.3 (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST FIND-IF-NOT.KEYWORDS.4 (FIND-IF-NOT (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION 1+)) 2)
;; Loading (DEFTEST FIND-IF-NOT.ALLOW-OTHER-KEYS.5 (FIND-IF-NOT (FUNCTION NULL) (QUOTE (NIL A B C NIL)) :ALLOW-OTHER-KEYS NIL) A)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (FIND-IF-NOT (FUNCTION NULL) X))) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE SEQUENCE))))) NIL)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.4 (SIGNALS-ERROR (FIND-IF-NOT (QUOTE IDENTITY) (QUOTE (A B C . D))) TYPE-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.5 (SIGNALS-ERROR (FIND-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.6 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.7 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.8 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.9 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.10 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.11 (SIGNALS-ERROR (LOCALLY (FIND-IF-NOT (FUNCTION NULL) (QUOTE B)) T) TYPE-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.12 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION CONS) (QUOTE (A B C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.13 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION CAR) (QUOTE (A B C))) TYPE-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.14 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ERROR.15 (SIGNALS-ERROR (FIND-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST FIND-IF-NOT.ORDER.1 (LET ((I 0) X Y) (VALUES (FIND-IF-NOT (PROGN (SETF X (INCF I)) (FUNCTION NULL)) (PROGN (SETF Y (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL)))) I X Y)) A 2 1 2)
;; Loading (DEFTEST FIND-IF-NOT.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (FIND-IF-NOT (PROGN (SETF A (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF B (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL))) :START (PROGN (SETF C (INCF I)) 1) :END (PROGN (SETF D (INCF I)) 4) :FROM-END (SETF E (INCF I)) :KEY (PROGN (SETF F (INCF I)) (FUNCTION NULL))) I A B C D E F)) A 6 1 2 3 4 5 6)
;; Loading (DEFTEST FIND-IF-NOT.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (FIND-IF-NOT (PROGN (SETF A (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF B (INCF I)) (QUOTE (NIL NIL NIL A NIL NIL))) :KEY (PROGN (SETF C (INCF I)) (FUNCTION NULL)) :FROM-END (SETF D (INCF I)) :END (PROGN (SETF E (INCF I)) 4) :START (PROGN (SETF F (INCF I)) 1)) I A B C D E F)) A 6 1 2 3 4 5 6)
;; Loading (LOAD "position.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/position.lsp C15F7567>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST POSITION-LIST.1 (POSITION (QUOTE C) (QUOTE (A B C D E C A))) 2)
;; Loading (DEFTEST POSITION-LIST.2 (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :FROM-END T) 5)
;; Loading (DEFTEST POSITION-LIST.3 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :START I)) (2 2 2 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-LIST.4 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :START I :END NIL)) (2 2 2 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-LIST.5 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :END I)) (2 2 2 2 2 NIL NIL NIL))
;; Loading (DEFTEST POSITION-LIST.6 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :START I :FROM-END T)) (5 5 5 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-LIST.7 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :START I :END NIL :FROM-END T)) (5 5 5 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-LIST.8 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :END I :FROM-END T)) (5 5 2 2 2 NIL NIL NIL))
;; Loading (DEFTEST POSITION-LIST.9 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :START I :END J))) ((NIL NIL 2 2 2 2 2) (NIL 2 2 2 2 2) (2 2 2 2 2) (NIL NIL 5 5) (NIL 5 5) (5 5) (NIL)))
;; Loading (DEFTEST POSITION-LIST.10 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (POSITION (QUOTE C) (QUOTE (A B C D E C A)) :START I :END J :FROM-END T))) ((NIL NIL 2 2 2 5 5) (NIL 2 2 2 5 5) (2 2 2 5 5) (NIL NIL 5 5) (NIL 5 5) (5 5) (NIL)))
;; Loading (DEFTEST POSITION-LIST.11 (POSITION 5 (QUOTE (1 2 3 4 5 6 4 8)) :KEY (FUNCTION 1+)) 3)
;; Loading (DEFTEST POSITION-LIST.12 (POSITION 5 (QUOTE (1 2 3 4 5 6 4 8)) :KEY (QUOTE 1+)) 3)
;; Loading (DEFTEST POSITION-LIST.13 (POSITION 5 (QUOTE (1 2 3 4 5 6 4 8)) :KEY (FUNCTION 1+) :FROM-END T) 6)
;; Loading (DEFTEST POSITION-LIST.14 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST (COMPLEMENT (FUNCTION EQL))) 2)
;; Loading (DEFTEST POSITION-LIST.15 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST (COMPLEMENT (FUNCTION EQL)) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-LIST.16 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL)) 2)
;; Loading (DEFTEST POSITION-LIST.17 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (QUOTE EQL) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-LIST.18 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (QUOTE EQL)) 2)
;; Loading (DEFTEST POSITION-LIST.19 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-LIST.20 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL)) 2)
;; Loading (DEFTEST POSITION-LIST.21 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST (FUNCTION EQL) :START 2) 3)
;; Loading (DEFTEST POSITION-LIST.22 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST (FUNCTION EQL) :START 2 :END NIL) 3)
;; Loading (DEFTEST POSITION-LIST.23 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL) :START 0 :END 5) 2)
;; Loading (DEFTEST POSITION-LIST.24 (POSITION (QUOTE A) (QUOTE (A A B A C E D A F A)) :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) 4)
;; Loading (DEFTEST POSITION-LIST.25 (POSITION (QUOTE (A B)) (QUOTE (A (B A) (A B C) (A B) (D E) F)) :TEST (FUNCTION EQUAL)) 3)
;; Loading (DEFTEST POSITION-LIST.26 (POSITION (QUOTE A) (QUOTE ((C) (B A) (A B C) (A B) (D E) F)) :KEY (FUNCTION CAR)) 2)
;; Loading (DEFTEST POSITION-LIST.27 (POSITION (QUOTE A) (QUOTE ((C) (B A) (A B C) (Z) (A B) (D E) F)) :KEY (FUNCTION CAR) :START 3) 4)
;; Loading (DEFTEST POSITION-LIST.28 (POSITION (QUOTE A) (QUOTE ((C) (B A) (A B C) (Z) (A B) (D E) (F))) :KEY (FUNCTION CAR) :START 2 :FROM-END T) 4)
;; Loading (DEFTEST POSITION-LIST.29 (POSITION 10 (QUOTE (1 4 8 10 15 20)) :TEST (FUNCTION <)) 4)
;; Loading (DEFTEST POSITION-LIST.30 (POSITION 10 (QUOTE (1 4 8 10 15 20)) :TEST-NOT (FUNCTION >=)) 4)
;; Loading (DEFTEST POSITION-VECTOR.1 (POSITION (QUOTE C) #(A B C D E C A)) 2)
;; Loading (DEFTEST POSITION-VECTOR.2 (POSITION (QUOTE C) #(A B C D E C A) :FROM-END T) 5)
;; Loading (DEFTEST POSITION-VECTOR.3 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION (QUOTE C) #(A B C D E C A) :START I)) (2 2 2 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-VECTOR.4 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION (QUOTE C) #(A B C D E C A) :START I :END NIL)) (2 2 2 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-VECTOR.5 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (POSITION (QUOTE C) #(A B C D E C A) :END I)) (2 2 2 2 2 NIL NIL NIL))
;; Loading (DEFTEST POSITION-VECTOR.6 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION (QUOTE C) #(A B C D E C A) :START I :FROM-END T)) (5 5 5 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-VECTOR.7 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION (QUOTE C) #(A B C D E C A) :START I :END NIL :FROM-END T)) (5 5 5 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-VECTOR.8 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (POSITION (QUOTE C) #(A B C D E C A) :END I :FROM-END T)) (5 5 2 2 2 NIL NIL NIL))
;; Loading (DEFTEST POSITION-VECTOR.9 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (POSITION (QUOTE C) #(A B C D E C A) :START I :END J))) ((NIL NIL 2 2 2 2 2) (NIL 2 2 2 2 2) (2 2 2 2 2) (NIL NIL 5 5) (NIL 5 5) (5 5) (NIL)))
;; Loading (DEFTEST POSITION-VECTOR.10 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (POSITION (QUOTE C) #(A B C D E C A) :START I :END J :FROM-END T))) ((NIL NIL 2 2 2 5 5) (NIL 2 2 2 5 5) (2 2 2 5 5) (NIL NIL 5 5) (NIL 5 5) (5 5) (NIL)))
;; Loading (DEFTEST POSITION-VECTOR.11 (POSITION 5 #(1 2 3 4 5 6 4 8) :KEY (FUNCTION 1+)) 3)
;; Loading (DEFTEST POSITION-VECTOR.12 (POSITION 5 #(1 2 3 4 5 6 4 8) :KEY (QUOTE 1+)) 3)
;; Loading (DEFTEST POSITION-VECTOR.13 (POSITION 5 #(1 2 3 4 5 6 4 8) :KEY (FUNCTION 1+) :FROM-END T) 6)
;; Loading (DEFTEST POSITION-VECTOR.14 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST (COMPLEMENT (FUNCTION EQL))) 2)
;; Loading (DEFTEST POSITION-VECTOR.15 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST (COMPLEMENT (FUNCTION EQL)) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-VECTOR.16 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL)) 2)
;; Loading (DEFTEST POSITION-VECTOR.17 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (QUOTE EQL) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-VECTOR.18 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (QUOTE EQL)) 2)
;; Loading (DEFTEST POSITION-VECTOR.19 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-VECTOR.20 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL)) 2)
;; Loading (DEFTEST POSITION-VECTOR.21 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST (FUNCTION EQL) :START 2) 3)
;; Loading (DEFTEST POSITION-VECTOR.22 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST (FUNCTION EQL) :START 2 :END NIL) 3)
;; Loading (DEFTEST POSITION-VECTOR.23 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL) :START 0 :END 5) 2)
;; Loading (DEFTEST POSITION-VECTOR.24 (POSITION (QUOTE A) #(A A B A C E D A F A) :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) 4)
;; Loading (DEFTEST POSITION-VECTOR.25 (POSITION (QUOTE (A B)) #(A (B A) (A B C) (A B) (D E) F) :TEST (FUNCTION EQUAL)) 3)
;; Loading (DEFTEST POSITION-VECTOR.26 (POSITION (QUOTE A) #((C) (B A) (A B C) (A B) (D E) F) :KEY (FUNCTION CAR)) 2)
;; Loading (DEFTEST POSITION-VECTOR.27 (POSITION (QUOTE A) #((C) (B A) (A B C) (Z) (A B) (D E) F) :KEY (FUNCTION CAR) :START 3) 4)
;; Loading (DEFTEST POSITION-VECTOR.28 (POSITION (QUOTE A) #((C) (B A) (A B C) (Z) (A B) (D E) (F)) :KEY (FUNCTION CAR) :START 2 :FROM-END T) 4)
;; Loading (DEFTEST POSITION-VECTOR.29 (POSITION (QUOTE A) (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (B B B B B A A A A A)) :FILL-POINTER 5)) NIL)
;; Loading (DEFTEST POSITION-VECTOR.30 (POSITION (QUOTE A) (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (B B B B A A A A A A)) :FILL-POINTER 5)) 4)
;; Loading (DEFTEST POSITION-VECTOR.31 (POSITION (QUOTE A) (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (B A B B A A A A A A)) :FILL-POINTER 5) :FROM-END T) 4)
;; Loading (DEFTEST POSITION-VECTOR.32 (POSITION 10 #(1 4 8 10 15 20) :TEST (FUNCTION <)) 4)
;; Loading (DEFTEST POSITION-VECTOR.33 (POSITION 10 #(1 4 8 10 15 20) :TEST-NOT (FUNCTION >=)) 4)
;; Loading (DEFTEST POSITION-VECTOR.34 (LET* ((V1 #(X X X A B C D A B C D Y Y Y Y Y)) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (POSITION (QUOTE C) V2) (POSITION (QUOTE C) V2 :FROM-END T))) 2 6)
;; Loading (DEFTEST POSITION-BIT-VECTOR.1 (POSITION 1 #*001001010100) 2)
;; Loading (DEFTEST POSITION-BIT-VECTOR.2 (POSITION 1 #*001001010100 :FROM-END T) 9)
;; Loading (DEFTEST POSITION-BIT-VECTOR.3 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION 1 #*0010010 :START I)) (2 2 2 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-BIT-VECTOR.4 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION 1 #*0010010 :START I :END NIL)) (2 2 2 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-BIT-VECTOR.5 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (POSITION 1 #*0010010 :END I)) (2 2 2 2 2 NIL NIL NIL))
;; Loading (DEFTEST POSITION-BIT-VECTOR.6 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION 1 #*0010010 :START I :FROM-END T)) (5 5 5 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-BIT-VECTOR.7 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION 0 #*1101101 :START I :END NIL :FROM-END T)) (5 5 5 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-BIT-VECTOR.8 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (POSITION 0 #*1101101 :END I :FROM-END T)) (5 5 2 2 2 NIL NIL NIL))
;; Loading (DEFTEST POSITION-BIT-VECTOR.9 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (POSITION 1 #*0010010 :START I :END J))) ((NIL NIL 2 2 2 2 2) (NIL 2 2 2 2 2) (2 2 2 2 2) (NIL NIL 5 5) (NIL 5 5) (5 5) (NIL)))
;; Loading (DEFTEST POSITION-BIT-VECTOR.10 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (POSITION 1 #*0010010 :START I :END J :FROM-END T))) ((NIL NIL 2 2 2 5 5) (NIL 2 2 2 5 5) (2 2 2 5 5) (NIL NIL 5 5) (NIL 5 5) (5 5) (NIL)))
;; Loading (DEFTEST POSITION-BIT-VECTOR.11 (POSITION 2 #*00010001010 :KEY (FUNCTION 1+)) 3)
;; Loading (DEFTEST POSITION-BIT-VECTOR.12 (POSITION 2 #*00010001010 :KEY (QUOTE 1+)) 3)
;; Loading (DEFTEST POSITION-BIT-VECTOR.13 (POSITION 2 #*0010001000 :KEY (FUNCTION 1+) :FROM-END T) 6)
;; Loading (DEFTEST POSITION-BIT-VECTOR.14 (POSITION 0 #*0010111010 :TEST (COMPLEMENT (FUNCTION EQL))) 2)
;; Loading (DEFTEST POSITION-BIT-VECTOR.15 (POSITION 0 #*0010111010 :TEST (COMPLEMENT (FUNCTION EQL)) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-BIT-VECTOR.16 (POSITION 0 #*0010111010 :TEST-NOT (FUNCTION EQL)) 2)
;; Loading (DEFTEST POSITION-BIT-VECTOR.17 (POSITION 0 #*001011101 :TEST-NOT (QUOTE EQL) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-BIT-VECTOR.18 (POSITION 0 #*00101110 :TEST-NOT (QUOTE EQL)) 2)
;; Loading (DEFTEST POSITION-BIT-VECTOR.19 (POSITION 0 #*00101110 :TEST-NOT (FUNCTION EQL) :FROM-END T) 6)
;; Loading (DEFTEST POSITION-BIT-VECTOR.20 (POSITION 0 #*00101110 :TEST-NOT (FUNCTION EQL)) 2)
;; Loading (DEFTEST POSITION-BIT-VECTOR.21 (POSITION 0 #*00101110 :TEST (FUNCTION EQL) :START 2) 3)
;; Loading (DEFTEST POSITION-BIT-VECTOR.22 (POSITION 0 #*00101110 :TEST (FUNCTION EQL) :START 2 :END NIL) 3)
;; Loading (DEFTEST POSITION-BIT-VECTOR.23 (POSITION 0 #*00101110 :TEST-NOT (FUNCTION EQL) :START 0 :END 5) 2)
;; Loading (DEFTEST POSITION-BIT-VECTOR.24 (POSITION 0 #*00101110 :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) 4)
;; Loading (DEFTEST POSITION-BIT-VECTOR.25 (POSITION 2 #*1100001010 :KEY (FUNCTION 1+) :START 3) 6)
;; Loading (DEFTEST POSITION-BIT-VECTOR.27 (POSITION 2 #*1100001010 :KEY (FUNCTION 1+) :START 2 :FROM-END T) 8)
;; Loading (DEFTEST POSITION-BIT-VECTOR.28 (POSITION 0 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5)) NIL)
;; Loading (DEFTEST POSITION-BIT-VECTOR.29 (POSITION 0 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5) :FROM-END T) NIL)
;; Loading (DEFTEST POSITION-BIT-VECTOR.30 (POSITION 0 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 1 1 0 0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5)) 4)
;; Loading (DEFTEST POSITION-BIT-VECTOR.31 (POSITION 0 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5) :FROM-END T) 4)
;; Loading (DEFTEST POSITION-BIT-VECTOR.32 (POSITION 0 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 0 1 1 0 0 0 0 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5)) 1)
;; Loading (DEFTEST POSITION-BIT-VECTOR.33 (POSITION 0 #*1111000 :TEST (FUNCTION >=)) 4)
;; Loading (DEFTEST POSITION-BIT-VECTOR.34 (POSITION 0 #*1111000 :TEST-NOT (FUNCTION <)) 4)
;; Loading (DEFTEST POSITION-STRING.1 (POSITION #\c "abcdeca") 2)
;; Loading (DEFTEST POSITION-STRING.2 (POSITION #\c "abcdeca" :FROM-END T) 5)
;; Loading (DEFTEST POSITION-STRING.3 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION #\c "abcdeca" :START I)) (2 2 2 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-STRING.4 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION #\c "abcdeca" :START I :END NIL)) (2 2 2 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-STRING.5 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (POSITION #\c "abcdeca" :END I)) (2 2 2 2 2 NIL NIL NIL))
;; Loading (DEFTEST POSITION-STRING.6 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION #\c "abcdeca" :START I :FROM-END T)) (5 5 5 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-STRING.7 (LOOP FOR I FROM 0 TO 7 COLLECT (POSITION #\c "abcdeca" :START I :END NIL :FROM-END T)) (5 5 5 5 5 5 NIL NIL))
;; Loading (DEFTEST POSITION-STRING.8 (LOOP FOR I FROM 7 DOWNTO 0 COLLECT (POSITION #\c "abcdeca" :END I :FROM-END T)) (5 5 2 2 2 NIL NIL NIL))
;; Loading (DEFTEST POSITION-STRING.9 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (POSITION #\c "abcdeca" :START I :END J))) ((NIL NIL 2 2 2 2 2) (NIL 2 2 2 2 2) (2 2 2 2 2) (NIL NIL 5 5) (NIL 5 5) (5 5) (NIL)))
;; Loading (DEFTEST POSITION-STRING.10 (LOOP FOR I FROM 0 TO 6 COLLECT (LOOP FOR J FROM (1+ I) TO 7 COLLECT (POSITION #\c "abcdeca" :START I :END J :FROM-END T))) ((NIL NIL 2 2 2 5 5) (NIL 2 2 2 5 5) (2 2 2 5 5) (NIL NIL 5 5) (NIL 5 5) (5 5) (NIL)))
;; Loading (DEFTEST POSITION-STRING.11 (POSITION 5 "12345648" :KEY (FUNCTION (LAMBDA (C) (1+ (READ-FROM-STRING (STRING C)))))) 3)
;; Loading (DEFTEST POSITION-STRING.13 (POSITION 5 "12345648" :KEY (FUNCTION (LAMBDA (C) (1+ (READ-FROM-STRING (STRING C))))) :FROM-END T) 6)
;; Loading (DEFTEST POSITION-STRING.14 (POSITION #\a "aabacedafa" :TEST (COMPLEMENT (FUNCTION EQL))) 2)
;; Loading (DEFTEST POSITION-STRING.15 (POSITION #\a "aabacedafa" :TEST (COMPLEMENT (FUNCTION EQL)) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-STRING.16 (POSITION #\a "aabacedafa" :TEST-NOT (FUNCTION EQL)) 2)
;; Loading (DEFTEST POSITION-STRING.17 (POSITION #\a "aabacedafa" :TEST-NOT (QUOTE EQL) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-STRING.18 (POSITION #\a "aabacedafa" :TEST-NOT (QUOTE EQL)) 2)
;; Loading (DEFTEST POSITION-STRING.19 (POSITION #\a "aabacedafa" :TEST-NOT (FUNCTION EQL) :FROM-END T) 8)
;; Loading (DEFTEST POSITION-STRING.20 (POSITION #\a "aabacedafa" :TEST-NOT (FUNCTION EQL)) 2)
;; Loading (DEFTEST POSITION-STRING.21 (POSITION #\a "aabacedafa" :TEST (FUNCTION EQL) :START 2) 3)
;; Loading (DEFTEST POSITION-STRING.22 (POSITION #\a "aabacedafa" :TEST (FUNCTION EQL) :START 2 :END NIL) 3)
;; Loading (DEFTEST POSITION-STRING.23 (POSITION #\a "aabacedafa" :TEST-NOT (FUNCTION EQL) :START 0 :END 5) 2)
;; Loading (DEFTEST POSITION-STRING.24 (POSITION #\a "aabacedafa" :TEST-NOT (FUNCTION EQL) :START 0 :END 5 :FROM-END T) 4)
;; Loading (DEFTEST POSITION-STRING.25 (POSITION #\a (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "bbbbbaaaaa" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5)) NIL)
;; Loading (DEFTEST POSITION-STRING.26 (POSITION #\a (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "bbbbbaaaaa" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5) :FROM-END T) NIL)
;; Loading (DEFTEST POSITION-STRING.27 (POSITION #\a (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "bbbbaaaaaa" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5)) 4)
;; Loading (DEFTEST POSITION-STRING.28 (POSITION #\a (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "babbaaaaaa" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5) :FROM-END T) 4)
;; Loading (DEFTEST POSITION-STRING.29 (POSITION #\m "adfmpz" :TEST (FUNCTION CHAR<)) 4)
;; Loading (DEFTEST POSITION-STRING.30 (POSITION #\m "adfmpz" :TEST-NOT (FUNCTION CHAR>=)) 4)
;; Loading (DEFTEST POSITION-STRING.31 (LET* ((S1 (COPY-SEQ "xxxabcdyyyyy")) (S2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET 3 :ELEMENT-TYPE (ARRAY-ELEMENT-TYPE S1)))) (POSITION #\c S2)) 2)
;; Loading (DEFTEST POSITION-STRING.32 (LET* ((S1 (COPY-SEQ "xxxabcdabcdyyyyyyyy")) (S2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET 3 :ELEMENT-TYPE (ARRAY-ELEMENT-TYPE S1)))) (POSITION #\c S2 :FROM-END T)) 6)
;; Loading (DEFTEST POSITION-STRING.33 (DO-SPECIAL-STRINGS (S "abcdabcdabcd" NIL) (LET* ((C #\c) (POS (POSITION C S))) (ASSERT (EQL POS 2) NIL "First position of ~A in ~A is ~A" C S POS))) NIL)
;; Loading (DEFTEST POSITION-STRING.34 (DO-SPECIAL-STRINGS (S "abcdabcdabcd" NIL) (LET* ((C #\c) (POS (POSITION C S :FROM-END T))) (ASSERT (EQL POS 10) NIL "Last position of ~A in ~A is ~A" C S POS))) NIL)
;; Loading (DEFHARMLESS POSITION.TEST-AND-TEST-NOT.1 (POSITION (QUOTE B) (QUOTE (A B C D)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS POSITION.TEST-AND-TEST-NOT.2 (POSITION (QUOTE B) (QUOTE (A B C D)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS POSITION.TEST-AND-TEST-NOT.3 (POSITION (QUOTE B) #(A B C D) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS POSITION.TEST-AND-TEST-NOT.4 (POSITION (QUOTE B) #(A B C D) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS POSITION.TEST-AND-TEST-NOT.5 (POSITION #\b "abcd" :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS POSITION.TEST-AND-TEST-NOT.6 (POSITION #\b "abcd" :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS POSITION.TEST-AND-TEST-NOT.7 (POSITION 1 #*001010010 :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS POSITION.TEST-AND-TEST-NOT.8 (POSITION 0 #*1110010110111 :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST POSITION.ORDER.1 (LET ((I 0) A B C D E F G) (VALUES (POSITION (PROGN (SETF A (INCF I)) 0) (PROGN (SETF B (INCF I)) (QUOTE (3 1 8 2 1 2 3 4))) :FROM-END (SETF C (INCF I)) :START (PROGN (SETF D (INCF I)) 1) :END (PROGN (SETF E (INCF I)) 6) :KEY (PROGN (SETF F (INCF I)) (FUNCTION 1-)) :TEST (PROGN (SETF G (INCF I)) (FUNCTION =))) I A B C D E F G)) 4 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST POSITION.ORDER.2 (LET ((I 0) A B C D E F G) (VALUES (POSITION (PROGN (SETF A (INCF I)) 0) (PROGN (SETF B (INCF I)) (QUOTE (3 1 8 2 1 2 3 4))) :TEST-NOT (PROGN (SETF C (INCF I)) (FUNCTION /=)) :KEY (PROGN (SETF D (INCF I)) (FUNCTION 1-)) :END (PROGN (SETF E (INCF I)) 6) :START (PROGN (SETF F (INCF I)) 1) :FROM-END (SETF G (INCF I))) I A B C D E F G)) 4 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST POSITION.ALLOW-OTHER-KEYS.1 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST POSITION.ALLOW-OTHER-KEYS.2 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION.ALLOW-OTHER-KEYS.3 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS T :BAD T) 2)
;; Loading (DEFTEST POSITION.ALLOW-OTHER-KEYS.4 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST POSITION.ALLOW-OTHER-KEYS.5 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :BAD T :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) 0)
;; Loading (DEFTEST POSITION.KEYWORDS.6 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) 0)
;; Loading (DEFTEST POSITION.ALLOW-OTHER-KEYS.7 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION.ALLOW-OTHER-KEYS.8 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION.ALLOW-OTHER-KEYS.9 (POSITION 0 (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST POSITION.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (POSITION (QUOTE A) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST POSITION.ERROR.4 (SIGNALS-ERROR (POSITION (QUOTE E) (QUOTE (A B C . D))) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.5 (SIGNALS-ERROR (POSITION) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.6 (SIGNALS-ERROR (POSITION (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.7 (SIGNALS-ERROR (POSITION (QUOTE A) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.8 (SIGNALS-ERROR (POSITION (QUOTE A) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.9 (SIGNALS-ERROR (POSITION (QUOTE A) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.10 (SIGNALS-ERROR (POSITION (QUOTE A) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.11 (SIGNALS-ERROR (LOCALLY (POSITION (QUOTE A) (QUOTE B)) T) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.12 (SIGNALS-ERROR (POSITION (QUOTE B) (QUOTE (A B C D)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.13 (SIGNALS-ERROR (POSITION (QUOTE B) (QUOTE (A B C D)) :TEST-NOT (FUNCTION NOT)) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.14 (SIGNALS-ERROR (POSITION (QUOTE B) (QUOTE (A B C D)) :KEY (FUNCTION CDR)) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION.ERROR.15 (SIGNALS-ERROR (POSITION (QUOTE B) (QUOTE (A B C D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "position-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/position-if.lsp 814BDD57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST POSITION-IF-LIST.1 (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9))) 3)
;; Loading (DEFTEST POSITION-IF-LIST.2 (POSITION-IF (QUOTE EVENP) (QUOTE (1 3 1 4 3 2 1 8 9))) 3)
;; Loading (DEFTEST POSITION-IF-LIST.3 (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START 4) 5)
;; Loading (DEFTEST POSITION-IF-LIST.4 (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-LIST.5 (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :FROM-END NIL) 3)
;; Loading (DEFTEST POSITION-IF-LIST.6 (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START 4 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-LIST.7 (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :END NIL) 3)
;; Loading (DEFTEST POSITION-IF-LIST.8 (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :END 3) NIL)
;; Loading (DEFTEST POSITION-IF-LIST.9 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START I :END J))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-LIST.10 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START I :END J :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-LIST.11 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START I :END J :KEY (QUOTE 1+)))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-LIST.12 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START I :END J :KEY (FUNCTION 1+) :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-VECTOR.1 (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9)) 3)
;; Loading (DEFTEST POSITION-IF-VECTOR.2 (POSITION-IF (QUOTE EVENP) #(1 3 1 4 3 2 1 8 9)) 3)
;; Loading (DEFTEST POSITION-IF-VECTOR.3 (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :START 4) 5)
;; Loading (DEFTEST POSITION-IF-VECTOR.4 (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-VECTOR.5 (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :FROM-END NIL) 3)
;; Loading (DEFTEST POSITION-IF-VECTOR.6 (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :START 4 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-VECTOR.7 (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :END NIL) 3)
;; Loading (DEFTEST POSITION-IF-VECTOR.8 (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :END 3) NIL)
;; Loading (DEFTEST POSITION-IF-VECTOR.9 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :START I :END J))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-VECTOR.10 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :START I :END J :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-VECTOR.11 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :START I :END J :KEY (QUOTE 1+)))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-VECTOR.12 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :START I :END J :KEY (FUNCTION 1+) :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-VECTOR.13 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 1 4 3 1 2 1 8 9)) :FILL-POINTER 5))) (FLET ((%F (X) (EQL X 1))) (VALUES (POSITION-IF (FUNCTION %F) A) (POSITION-IF (FUNCTION %F) A :FROM-END T)))) 0 2)
;; Loading (DEFTEST POSITION-IF-VECTOR.14 (LET* ((V1 #(X X X A B 1 D A B 2 D Y Y Y Y Y)) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (POSITION-IF (FUNCTION INTEGERP) V2) (POSITION-IF (FUNCTION INTEGERP) V2 :FROM-END T))) 2 6)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.1 (POSITION-IF (FUNCTION EVENP) #*111010101) 3)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.2 (POSITION-IF (QUOTE EVENP) #*111010101) 3)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.3 (POSITION-IF (FUNCTION EVENP) #*111010101 :START 4) 5)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.4 (POSITION-IF (FUNCTION EVENP) #*111010101 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.5 (POSITION-IF (FUNCTION EVENP) #*111010101 :FROM-END NIL) 3)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.6 (POSITION-IF (FUNCTION EVENP) #*111010101 :START 4 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.7 (POSITION-IF (FUNCTION EVENP) #*111010101 :END NIL) 3)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.8 (POSITION-IF (FUNCTION EVENP) #*111010101 :END 3) NIL)
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.9 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION EVENP) #*111010101 :START I :END J))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.10 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION EVENP) #*111010101 :START I :END J :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.11 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION ODDP) #*111010101 :START I :END J :KEY (FUNCTION 1+)))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.12 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION ODDP) #*111010101 :START I :END J :KEY (QUOTE 1+) :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-BIT-VECTOR.13 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 0 0 0 0 0)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (POSITION-IF (FUNCTION EVENP) A) (POSITION-IF (FUNCTION EVENP) A :FROM-END (QUOTE FOO)) (POSITION-IF (FUNCTION ODDP) A) (POSITION-IF (FUNCTION ODDP) A :FROM-END (QUOTE FOO)))) NIL NIL 0 4)
;; Loading (DEFTEST POSITION-IF-STRING.1 (POSITION-IF (FUNCTION EVENDIGITP) "131432189") 3)
;; Loading (DEFTEST POSITION-IF-STRING.2 (POSITION-IF (QUOTE EVENDIGITP) "131432189") 3)
;; Loading (DEFTEST POSITION-IF-STRING.3 (POSITION-IF (FUNCTION EVENDIGITP) "131432189" :START 4) 5)
;; Loading (DEFTEST POSITION-IF-STRING.4 (POSITION-IF (FUNCTION EVENDIGITP) "131432189" :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-STRING.5 (POSITION-IF (FUNCTION EVENDIGITP) "131432189" :FROM-END NIL) 3)
;; Loading (DEFTEST POSITION-IF-STRING.6 (POSITION-IF (FUNCTION EVENDIGITP) "131432189" :START 4 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-STRING.7 (POSITION-IF (FUNCTION EVENDIGITP) "131432189" :END NIL) 3)
;; Loading (DEFTEST POSITION-IF-STRING.8 (POSITION-IF (FUNCTION EVENDIGITP) "131432189" :END 3) NIL)
;; Loading (DEFTEST POSITION-IF-STRING.9 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION EVENDIGITP) "131432189" :START I :END J))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-STRING.10 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION EVENDIGITP) "131432189" :START I :END J :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-STRING.11 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION ODDDIGITP) "131432189" :START I :END J :KEY (FUNCTION NEXTDIGIT)))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-STRING.12 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF (FUNCTION ODDDIGITP) "131432189" :START I :END J :KEY (QUOTE NEXTDIGIT) :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-STRING.13 (FLET ((%F (C) (EQL C #\0)) (%G (C) (EQL C #\1))) (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "1111100000" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (POSITION-IF (FUNCTION %F) A) (POSITION-IF (FUNCTION %F) A :FROM-END (QUOTE FOO)) (POSITION-IF (FUNCTION %G) A) (POSITION-IF (FUNCTION %G) A :FROM-END (QUOTE FOO))))) NIL NIL 0 4)
;; Loading (DEFTEST POSITION-IF-STRING.14 (DO-SPECIAL-STRINGS (S "12345a6  78b90" NIL) (LET ((POS (POSITION-IF (FUNCTION ALPHA-CHAR-P) S))) (ASSERT (EQL POS 5) NIL "First alpha char in ~A is at position ~A" S POS))) NIL)
;; Loading (DEFTEST POSITION-IF-STRING.15 (DO-SPECIAL-STRINGS (S "12345a6  78b90" NIL) (LET ((POS (POSITION-IF (FUNCTION ALPHA-CHAR-P) S :FROM-END T))) (ASSERT (EQL POS 11) NIL "Last alpha char in ~A is at position ~A" S POS))) NIL)
;; Loading (DEFTEST POSITION-IF.ORDER.1 (LET ((I 0) A B C D E F) (VALUES (POSITION-IF (PROGN (SETF A (INCF I)) (FUNCTION ZEROP)) (PROGN (SETF B (INCF I)) (QUOTE (3 1 8 2 1 2 3 4))) :FROM-END (SETF C (INCF I)) :START (PROGN (SETF D (INCF I)) 1) :END (PROGN (SETF E (INCF I)) 6) :KEY (PROGN (SETF F (INCF I)) (FUNCTION 1-))) I A B C D E F)) 4 6 1 2 3 4 5 6)
;; Loading (DEFTEST POSITION-IF.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (POSITION-IF (PROGN (SETF A (INCF I)) (FUNCTION ZEROP)) (PROGN (SETF B (INCF I)) (QUOTE (3 1 8 2 1 2 3 4))) :KEY (PROGN (SETF C (INCF I)) (FUNCTION 1-)) :END (PROGN (SETF D (INCF I)) 6) :START (PROGN (SETF E (INCF I)) 1) :FROM-END (SETF F (INCF I))) I A B C D E F)) 4 6 1 2 3 4 5 6)
;; Loading (DEFTEST POSITION-IF.ALLOW-OTHER-KEYS.1 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST POSITION-IF.ALLOW-OTHER-KEYS.2 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION-IF.ALLOW-OTHER-KEYS.3 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS T :BAD T) 2)
;; Loading (DEFTEST POSITION-IF.ALLOW-OTHER-KEYS.4 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST POSITION-IF.ALLOW-OTHER-KEYS.5 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :BAD T :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) 0)
;; Loading (DEFTEST POSITION-IF.KEYWORDS.6 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) 0)
;; Loading (DEFTEST POSITION-IF.ALLOW-OTHER-KEYS.7 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION-IF.ALLOW-OTHER-KEYS.8 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION-IF.ALLOW-OTHER-KEYS.9 (POSITION-IF (FUNCTION ZEROP) (QUOTE (1 2 0 3 2 1)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST POSITION-IF.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (POSITION-IF (FUNCTION IDENTITY) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST POSITION-IF.ERROR.4 (SIGNALS-ERROR (POSITION-IF (QUOTE NULL) (QUOTE (A B C . D))) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.5 (SIGNALS-ERROR (POSITION-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.6 (SIGNALS-ERROR (POSITION-IF (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.7 (SIGNALS-ERROR (POSITION-IF (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.8 (SIGNALS-ERROR (POSITION-IF (FUNCTION NULL) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.9 (SIGNALS-ERROR (POSITION-IF (FUNCTION NULL) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.10 (SIGNALS-ERROR (POSITION-IF (FUNCTION NULL) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.11 (SIGNALS-ERROR (LOCALLY (POSITION-IF (FUNCTION IDENTITY) (QUOTE B)) T) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.12 (SIGNALS-ERROR (POSITION-IF (FUNCTION CONS) (QUOTE (A B C D))) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.13 (SIGNALS-ERROR (POSITION-IF (FUNCTION CAR) (QUOTE (A B C D))) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.14 (SIGNALS-ERROR (POSITION-IF (FUNCTION IDENTITY) (QUOTE (A B C D)) :KEY (FUNCTION CDR)) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION-IF.ERROR.15 (SIGNALS-ERROR (POSITION-IF (FUNCTION IDENTITY) (QUOTE (A B C D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "position-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/position-if-not.lsp 81808707>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.1 (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9))) 3)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.2 (POSITION-IF-NOT (QUOTE ODDP) (QUOTE (1 3 1 4 3 2 1 8 9))) 3)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.3 (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START 4) 5)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.4 (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.5 (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :FROM-END NIL) 3)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.6 (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START 4 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.7 (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :END NIL) 3)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.8 (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :END 3) NIL)
;; Loading (DEFTEST POSITION-IF-NOT-LIST.9 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START I :END J))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-LIST.10 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION ODDP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START I :END J :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-LIST.11 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START I :END J :KEY (QUOTE 1+)))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-LIST.12 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION EVENP) (QUOTE (1 3 1 4 3 2 1 8 9)) :START I :END J :KEY (FUNCTION 1+) :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.1 (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9)) 3)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.2 (POSITION-IF-NOT (QUOTE ODDP) #(1 3 1 4 3 2 1 8 9)) 3)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.3 (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :START 4) 5)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.4 (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.5 (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :FROM-END NIL) 3)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.6 (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :START 4 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.7 (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :END NIL) 3)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.8 (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :END 3) NIL)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.9 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :START I :END J))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.10 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION ODDP) #(1 3 1 4 3 2 1 8 9) :START I :END J :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.11 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :START I :END J :KEY (QUOTE 1+)))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.12 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION EVENP) #(1 3 1 4 3 2 1 8 9) :START I :END J :KEY (FUNCTION 1+) :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.13 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 A B C D E)) :FILL-POINTER 5))) (VALUES (POSITION-IF-NOT (FUNCTION NUMBERP) A) (POSITION-IF-NOT (FUNCTION SYMBOLP) A) (POSITION-IF-NOT (FUNCTION NUMBERP) A :FROM-END T) (POSITION-IF-NOT (FUNCTION SYMBOLP) A :FROM-END T))) NIL 0 NIL 4)
;; Loading (DEFTEST POSITION-IF-NOT-VECTOR.14 (LET* ((V1 #(X X X A B 1 D A B 2 D Y Y Y Y Y)) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (POSITION-IF-NOT (FUNCTION SYMBOLP) V2) (POSITION-IF-NOT (FUNCTION SYMBOLP) V2 :FROM-END T))) 2 6)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.1 (POSITION-IF-NOT (FUNCTION ODDP) #*111010101) 3)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.2 (POSITION-IF-NOT (QUOTE ODDP) #*111010101) 3)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.3 (POSITION-IF-NOT (FUNCTION ODDP) #*111010101 :START 4) 5)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.4 (POSITION-IF-NOT (FUNCTION ODDP) #*111010101 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.5 (POSITION-IF-NOT (FUNCTION ODDP) #*111010101 :FROM-END NIL) 3)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.6 (POSITION-IF-NOT (FUNCTION ODDP) #*111010101 :START 4 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.7 (POSITION-IF-NOT (FUNCTION ODDP) #*111010101 :END NIL) 3)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.8 (POSITION-IF-NOT (FUNCTION ODDP) #*111010101 :END 3) NIL)
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.9 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION ODDP) #*111010101 :START I :END J))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.10 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION ODDP) #*111010101 :START I :END J :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.11 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION EVENP) #*111010101 :START I :END J :KEY (FUNCTION 1+)))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.12 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION EVENP) #*111010101 :START I :END J :KEY (QUOTE 1+) :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-BIT-VECTOR.13 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 1 1 1 0 0 0 0 0)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (POSITION-IF-NOT (FUNCTION ZEROP) A) (POSITION-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) A) (POSITION-IF-NOT (FUNCTION ZEROP) A :FROM-END T) (POSITION-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) A :FROM-END T))) 0 NIL 4 NIL)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.1 (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189") 3)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.2 (POSITION-IF-NOT (QUOTE ODDDIGITP) "131432189") 3)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.3 (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189" :START 4) 5)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.4 (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189" :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.5 (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189" :FROM-END NIL) 3)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.6 (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189" :START 4 :FROM-END T) 7)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.7 (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189" :END NIL) 3)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.8 (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189" :END 3) NIL)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.9 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189" :START I :END J))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-STRING.10 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION ODDDIGITP) "131432189" :START I :END J :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-STRING.11 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION EVENDIGITP) "131432183" :START I :END J :KEY (FUNCTION NEXTDIGIT)))) ((NIL NIL NIL 3 3 3 3 3 3) (NIL NIL 3 3 3 3 3 3) (NIL 3 3 3 3 3 3) (3 3 3 3 3 3) (NIL 5 5 5 5) (5 5 5 5) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-STRING.12 (LOOP FOR I FROM 0 TO 8 COLLECT (LOOP FOR J FROM (1+ I) TO 9 COLLECT (POSITION-IF-NOT (FUNCTION EVENDIGITP) "131432183" :START I :END J :KEY (QUOTE NEXTDIGIT) :FROM-END T))) ((NIL NIL NIL 3 3 5 5 7 7) (NIL NIL 3 3 5 5 7 7) (NIL 3 3 5 5 7 7) (3 3 5 5 7 7) (NIL 5 5 7 7) (5 5 7 7) (NIL 7 7) (7 7) (NIL)))
;; Loading (DEFTEST POSITION-IF-NOT-STRING.13 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "55555aaaaa" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (STRINGP A) (VALUES (POSITION-IF-NOT (FUNCTION DIGIT-CHAR-P) A) (POSITION-IF-NOT (COMPLEMENT (FUNCTION DIGIT-CHAR-P)) A) (POSITION-IF-NOT (FUNCTION DIGIT-CHAR-P) A :FROM-END T) (POSITION-IF-NOT (COMPLEMENT (FUNCTION DIGIT-CHAR-P)) A :FROM-END T)))) NIL 0 NIL 4)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.14 (DO-SPECIAL-STRINGS (S "12345a6  78b90" NIL) (LET ((POS (POSITION-IF-NOT (COMPLEMENT (FUNCTION ALPHA-CHAR-P)) S))) (ASSERT (EQL POS 5) NIL "First alpha char in ~A is at position ~A" S POS))) NIL)
;; Loading (DEFTEST POSITION-IF-NOT-STRING.15 (DO-SPECIAL-STRINGS (S "12345a6  78b90" NIL) (LET ((POS (POSITION-IF-NOT (COMPLEMENT (FUNCTION ALPHA-CHAR-P)) S :FROM-END T))) (ASSERT (EQL POS 11) NIL "Last alpha char in ~A is at position ~A" S POS))) NIL)
;; Loading (DEFTEST POSITION-IF-NOT.ORDER.1 (LET ((I 0) A B C D E F) (VALUES (POSITION-IF-NOT (PROGN (SETF A (INCF I)) (COMPLEMENT (FUNCTION ZEROP))) (PROGN (SETF B (INCF I)) (QUOTE (3 1 8 2 1 2 3 4))) :FROM-END (SETF C (INCF I)) :START (PROGN (SETF D (INCF I)) 1) :END (PROGN (SETF E (INCF I)) 6) :KEY (PROGN (SETF F (INCF I)) (FUNCTION 1-))) I A B C D E F)) 4 6 1 2 3 4 5 6)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST POSITION-IF-NOT.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (POSITION-IF-NOT (PROGN (SETF A (INCF I)) (COMPLEMENT (FUNCTION ZEROP))) (PROGN (SETF B (INCF I)) (QUOTE (3 1 8 2 1 2 3 4))) :KEY (PROGN (SETF C (INCF I)) (FUNCTION 1-)) :END (PROGN (SETF D (INCF I)) 6) :START (PROGN (SETF E (INCF I)) 1) :FROM-END (SETF F (INCF I))) I A B C D E F)) 4 6 1 2 3 4 5 6)
;; Loading (DEFTEST POSITION-IF-NOT.ALLOW-OTHER-KEYS.1 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 3 2 0 1)) :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST POSITION-IF-NOT.ALLOW-OTHER-KEYS.2 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 3 2 0 1)) :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION-IF-NOT.ALLOW-OTHER-KEYS.3 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 1 2 3 0)) :ALLOW-OTHER-KEYS T :BAD T) 2)
;; Loading (DEFTEST POSITION-IF-NOT.ALLOW-OTHER-KEYS.4 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 1 2 3 0)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST POSITION-IF-NOT.ALLOW-OTHER-KEYS.5 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 1 2 3 0)) :BAD T :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) 0)
;; Loading (DEFTEST POSITION-IF-NOT.KEYWORDS.6 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 1 2 3 0)) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) 0)
;; Loading (DEFTEST POSITION-IF-NOT.ALLOW-OTHER-KEYS.7 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 1 2 3 0)) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION-IF-NOT.ALLOW-OTHER-KEYS.8 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 1 2 3 0)) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST POSITION-IF-NOT.ALLOW-OTHER-KEYS.9 (POSITION-IF-NOT (FUNCTION ZEROP) (QUOTE (0 0 1 2 3 0)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (POSITION-IF-NOT (FUNCTION IDENTITY) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.4 (SIGNALS-ERROR (POSITION-IF-NOT (QUOTE IDENTITY) (QUOTE (A B C . D))) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.5 (SIGNALS-ERROR (POSITION-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.6 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.7 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.8 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION NULL) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.9 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION NULL) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.10 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION NULL) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.11 (SIGNALS-ERROR (LOCALLY (POSITION-IF-NOT (FUNCTION IDENTITY) (QUOTE B)) T) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.12 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION CONS) (QUOTE (A B C D))) PROGRAM-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.13 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION CAR) (QUOTE (A B C D))) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.14 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B C D)) :KEY (FUNCTION CDR)) TYPE-ERROR) T)
;; Loading (DEFTEST POSITION-IF-NOT.ERROR.15 (SIGNALS-ERROR (POSITION-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B C D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "search-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/search-list.lsp C1539A57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "search-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/search-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFPARAMETER *SEARCHED-LIST* (QUOTE (B B A B B B B B B B A B A B B B A B A B B B A A A A B A A B A A A A A A B A B B A B A A B A A A B B A A B A A A A B B A B A B A A A B A B B A B A A B B B B B A A A A A B A B B B B B A B A B B A B A B))).
;; Compiling form (DEFPARAMETER *PATTERN-SUBLISTS* (REMOVE-DUPLICATES (LET* ((S *SEARCHED-LIST*) (LEN (LENGTH S))) (LOOP FOR X FROM 0 TO 8 NCONC (LOOP FOR Y FROM 0 TO (- LEN X) COLLECT (SUBSEQ S Y (+ Y X))))) :TEST (FUNCTION EQUAL))).
;; Compiling form (DEFPARAMETER *SEARCHED-VECTOR* (MAKE-ARRAY (LENGTH *SEARCHED-LIST*) :INITIAL-CONTENTS *SEARCHED-LIST*)).
;; Compiling form (DEFPARAMETER *PATTERN-SUBVECTORS* (MAPCAR (FUNCTION (LAMBDA (X) (APPLY (FUNCTION VECTOR) X))) *PATTERN-SUBLISTS*)).
;; Compiling form (DEFPARAMETER *SEARCHED-BITVECTOR* #*1101111111010111010111000010010000001011010010001100100001101010001011010011111000001011111010110101).
;; Compiling form (DEFPARAMETER *PATTERN-SUBBITVECTORS* (REMOVE-DUPLICATES (LET* ((S *SEARCHED-BITVECTOR*) (LEN (LENGTH S))) (LOOP FOR X FROM 0 TO 8 NCONC (LOOP FOR Y FROM 0 TO (- LEN X) COLLECT (SUBSEQ S Y (+ Y X))))) :TEST (FUNCTION EQUALP))).
;; Compiling form (DEFPARAMETER *SEARCHED-STRING* "1101111111010111010111000010010000001011010010001100100001101010001011010011111000001011111010110101").
;; Compiling form (DEFPARAMETER *PATTERN-SUBSTRINGS* (REMOVE-DUPLICATES (LET* ((S *SEARCHED-STRING*) (LEN (LENGTH S))) (LOOP FOR X FROM 0 TO 8 NCONC (LOOP FOR Y FROM 0 TO (- LEN X) COLLECT (SUBSEQ S Y (+ Y X))))) :TEST (FUNCTION EQUALP))).
;; Compiling form (DEFUN SUBSEQ-EQUALP (SEQ1 SEQ2 START1 START2 LEN &KEY (TEST (FUNCTION EQUALP))) (ASSERT (AND (>= START1 0) (>= START2 0) (<= (+ START1 LEN) (LENGTH SEQ1)) (<= (+ START2 LEN) (LENGTH SEQ2)))) (SETQ TEST (COERCE TEST (QUOTE FUNCTION))) (IF (AND (LISTP SEQ1) (LISTP SEQ2)) (LOOP FOR I FROM 0 TO (1- LEN) FOR E1 IN (NTHCDR START1 SEQ1) FOR E2 IN (NTHCDR START2 SEQ2) ALWAYS (FUNCALL TEST E1 E2)) (LOOP FOR I FROM 0 TO (1- LEN) ALWAYS (FUNCALL (THE FUNCTION TEST) (ELT SEQ1 (+ START1 I)) (ELT SEQ2 (+ START2 I)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN SEARCH-CHECK (PATTERN SEARCHED POS &KEY (START1 0) (END1 NIL) (START2 0) (END2 NIL) KEY FROM-END (TEST (FUNCTION EQUALP))) (UNLESS END1 (SETQ END1 (LENGTH PATTERN))) (UNLESS END2 (SETQ END2 (LENGTH SEARCHED))) (ASSERT (<= START1 END1)) (ASSERT (<= START2 END2)) (LET* ((PLEN (- END1 START1))) (WHEN KEY (SETQ PATTERN (MAP (QUOTE LIST) KEY PATTERN)) (SETQ SEARCHED (MAP (QUOTE LIST) KEY SEARCHED))) (IF POS (AND (SUBSEQ-EQUALP SEARCHED PATTERN POS START1 PLEN :TEST TEST) (IF FROM-END (LOOP FOR I FROM (1+ POS) TO (- END2 PLEN) NEVER (SUBSEQ-EQUALP SEARCHED PATTERN I START1 PLEN :TEST TEST)) (LOOP FOR I FROM START2 TO (1- POS) NEVER (SUBSEQ-EQUALP SEARCHED PATTERN I START1 PLEN :TEST TEST)))) (LOOP FOR I FROM START2 TO (- END2 PLEN) NEVER (SUBSEQ-EQUALP SEARCHED PATTERN I START1 PLEN :TEST TEST))))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/search-aux.llf 81A1F4C7>
;; Loading (DEFTEST SEARCH-LIST.1 (LET ((TARGET *SEARCHED-LIST*) (PAT (QUOTE (A)))) (LOOP FOR I FROM 0 TO (1- (LENGTH TARGET)) FOR TAIL ON TARGET ALWAYS (LET ((POS (SEARCH PAT TAIL))) (SEARCH-CHECK PAT TAIL POS)))) T)
;; Loading (DEFTEST SEARCH-LIST.2 (LET ((TARGET *SEARCHED-LIST*) (PAT (QUOTE (A)))) (LOOP FOR I FROM 1 TO (LENGTH TARGET) ALWAYS (LET ((POS (SEARCH PAT TARGET :END2 I :FROM-END T))) (SEARCH-CHECK PAT TARGET POS :END2 I :FROM-END T)))) T)
;; Loading (DEFTEST SEARCH-LIST.3 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET) UNLESS (SEARCH-CHECK PAT TARGET POS) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.4 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET :FROM-END T) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.5 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET :START2 25 :END2 75) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 25 :END2 75) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.6 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 25 :END2 75) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 25 :END2 75) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.7 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET :START2 20) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.8 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20) COLLECT PAT)) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SEARCH-LIST.9 (LET ((TARGET (SUBLIS (QUOTE ((A . 1) (B . 2))) *SEARCHED-LIST*))) (LOOP FOR PAT IN (SUBLIS (QUOTE ((A . 3) (B . 4))) *PATTERN-SUBLISTS*) FOR POS = (SEARCH PAT TARGET :START2 20 :KEY (FUNCTION EVENP)) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20 :KEY (FUNCTION EVENP)) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.10 (LET ((TARGET (SUBLIS (QUOTE ((A . 1) (B . 2))) *SEARCHED-LIST*))) (LOOP FOR PAT IN (SUBLIS (QUOTE ((A . 3) (B . 4))) *PATTERN-SUBLISTS*) FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20 :KEY (QUOTE ODDP)) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20 :KEY (QUOTE ODDP)) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.11 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.12 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20 :TEST-NOT (FUNCTION EQL)) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.13 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* WHEN (AND (> (LENGTH PAT) 0) (LET ((POS (SEARCH PAT TARGET :START1 1 :TEST (COMPLEMENT (FUNCTION EQL))))) (NOT (SEARCH-CHECK PAT TARGET POS :START1 1 :TEST (COMPLEMENT (FUNCTION EQL)))))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.14 (LET ((TARGET *SEARCHED-LIST*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* WHEN (LET ((LEN (LENGTH PAT))) (AND (> LEN 0) (LET ((POS (SEARCH PAT TARGET :END1 (1- LEN) :TEST (COMPLEMENT (FUNCTION EQL))))) (NOT (SEARCH-CHECK PAT TARGET POS :END1 (1- LEN) :TEST (COMPLEMENT (FUNCTION EQL))))))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-LIST.15 (LET ((PAT (QUOTE (10))) (TARGET (QUOTE (1 4 6 10 15 20)))) (SEARCH PAT TARGET :TEST (FUNCTION <))) 4)
;; Loading (DEFTEST SEARCH-LIST.16 (LET ((PAT (QUOTE (10))) (TARGET (QUOTE (1 4 6 10 15 20)))) (SEARCH PAT TARGET :TEST-NOT (FUNCTION >=))) 4)
;; Loading (DEFHARMLESS SEARCH.TEST-AND-TEST-NOT.1 (SEARCH (QUOTE (B C)) (QUOTE (A B C D)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SEARCH.TEST-AND-TEST-NOT.2 (SEARCH (QUOTE (B C)) (QUOTE (A B C D)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS SEARCH.TEST-AND-TEST-NOT.3 (SEARCH #(B C) #(A B C D) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SEARCH.TEST-AND-TEST-NOT.4 (SEARCH #(B C) #(A B C D) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS SEARCH.TEST-AND-TEST-NOT.5 (SEARCH "bc" "abcd" :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SEARCH.TEST-AND-TEST-NOT.6 (SEARCH "bc" "abcd" :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS SEARCH.TEST-AND-TEST-NOT.7 (SEARCH #*01 #*0011 :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SEARCH.TEST-AND-TEST-NOT.8 (SEARCH #*01 #*0011 :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST SEARCH.ALLOW-OTHER-KEYS.1 (SEARCH (QUOTE (C D)) (QUOTE (A B C D C D E)) :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST SEARCH.ALLOW-OTHER-KEYS.2 (SEARCH (QUOTE (C D)) (QUOTE (A B C D C D E)) :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST SEARCH.ALLOW-OTHER-KEYS.3 (SEARCH (QUOTE (C D)) (QUOTE (A B C D C D E)) :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST SEARCH.ALLOW-OTHER-KEYS.4 (SEARCH (QUOTE (C D)) (QUOTE (A B C D C D E)) :ALLOW-OTHER-KEYS (QUOTE FOO) :BAD NIL) 2)
;; Loading (DEFTEST SEARCH.ALLOW-OTHER-KEYS.5 (SEARCH (QUOTE (C D)) (QUOTE (A B C D C D E)) :BAD1 1 :ALLOW-OTHER-KEYS T :BAD2 2 :ALLOW-OTHER-KEYS NIL :BAD3 3) 2)
;; Loading (DEFTEST SEARCH.ALLOW-OTHER-KEYS.6 (SEARCH (QUOTE (C D)) (QUOTE (A B C D C D E)) :ALLOW-OTHER-KEYS (QUOTE FOO) :FROM-END T) 4)
;; Loading (DEFTEST SEARCH.ALLOW-OTHER-KEYS.7 (SEARCH (QUOTE (C D)) (QUOTE (A B C D C D E)) :FROM-END T :ALLOW-OTHER-KEYS T) 4)
;; Loading (DEFTEST SEARCH.KEYWORDS.8 (SEARCH (QUOTE (C D)) (QUOTE (A B C D C D E)) :START1 0 :START2 0 :START1 1 :START2 6 :FROM-END T :FROM-END NIL) 4)
;; Loading (DEFTEST SEARCH.ERROR.1 (SIGNALS-ERROR (SEARCH) PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.2 (SIGNALS-ERROR (SEARCH "a") PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.3 (SIGNALS-ERROR (SEARCH "a" "a" :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.4 (SIGNALS-ERROR (SEARCH "a" "a" (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.5 (SIGNALS-ERROR (SEARCH "a" "a" (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.6 (SIGNALS-ERROR (SEARCH "a" "a" 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.7 (SIGNALS-ERROR (SEARCH "c" "abcde" :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.8 (SIGNALS-ERROR (SEARCH "c" "abcde" :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.9 (SIGNALS-ERROR (SEARCH "c" "abcde" :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SEARCH.ERROR.10 (SIGNALS-ERROR (SEARCH "c" "abcde" :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST SEARCH.ORDER.1 (LET ((I 0) A B C D E F G H J) (VALUES (SEARCH (PROGN (SETF A (INCF I)) (QUOTE (NIL A B NIL))) (PROGN (SETF B (INCF I)) (QUOTE (Z Z Z A A B B Z Z Z))) :FROM-END (PROGN (SETF C (INCF I)) T) :START1 (PROGN (SETF D (INCF I)) 1) :END1 (PROGN (SETF E (INCF I)) 3) :START2 (PROGN (SETF F (INCF I)) 1) :END2 (PROGN (SETF G (INCF I)) 8) :KEY (PROGN (SETF H (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF J (INCF I)) (FUNCTION EQL))) I A B C D E F G H J)) 4 9 1 2 3 4 5 6 7 8 9)
;; Loading (DEFTEST SEARCH.ORDER.2 (LET ((I 0) A B C D E F G H J) (VALUES (SEARCH (PROGN (SETF A (INCF I)) (QUOTE (NIL A B NIL))) (PROGN (SETF B (INCF I)) (QUOTE (Z Z Z A A B B Z Z Z))) :TEST-NOT (PROGN (SETF C (INCF I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF D (INCF I)) (FUNCTION IDENTITY)) :END2 (PROGN (SETF E (INCF I)) 8) :START2 (PROGN (SETF F (INCF I)) 1) :END1 (PROGN (SETF G (INCF I)) 3) :START1 (PROGN (SETF H (INCF I)) 1) :FROM-END (PROGN (SETF J (INCF I)) T)) I A B C D E F G H J)) 4 9 1 2 3 4 5 6 7 8 9)
;; Loading (LOAD "search-vector.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/search-vector.lsp C1607787>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "search-aux.lsp")
;; Loading (DEFTEST SEARCH-VECTOR.1 (LET ((TARGET *SEARCHED-VECTOR*) (PAT #(A))) (LOOP FOR I FROM 0 TO (1- (LENGTH TARGET)) FOR TAIL = (SUBSEQ TARGET I) ALWAYS (LET ((POS (SEARCH PAT TAIL))) (SEARCH-CHECK PAT TAIL POS)))) T)
;; Loading (DEFTEST SEARCH-VECTOR.2 (LET ((TARGET *SEARCHED-VECTOR*) (PAT #(A))) (LOOP FOR I FROM 1 TO (LENGTH TARGET) ALWAYS (LET ((POS (SEARCH PAT TARGET :END2 I :FROM-END T))) (SEARCH-CHECK PAT TARGET POS :END2 I :FROM-END T)))) T)
;; Loading (DEFTEST SEARCH-VECTOR.3 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* FOR POS = (SEARCH PAT TARGET) UNLESS (SEARCH-CHECK PAT TARGET POS) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.4 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* FOR POS = (SEARCH PAT TARGET :FROM-END T) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.5 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* FOR POS = (SEARCH PAT TARGET :START2 25 :END2 75) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 25 :END2 75) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.6 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 25 :END2 75) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 25 :END2 75) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.7 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* FOR POS = (SEARCH PAT TARGET :START2 20) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.8 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.9 (LET ((TARGET (MAP (QUOTE VECTOR) (FUNCTION (LAMBDA (X) (SUBLIS (QUOTE ((A . 1) (B . 2))) X))) *SEARCHED-LIST*))) (LOOP FOR PAT IN (MAPCAR (FUNCTION (LAMBDA (X) (MAP (QUOTE VECTOR) (FUNCTION (LAMBDA (Y) (SUBLIS (QUOTE ((A . 3) (B . 4))) Y))) X))) *PATTERN-SUBLISTS*) FOR POS = (SEARCH PAT TARGET :START2 20 :KEY (FUNCTION EVENP)) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20 :KEY (FUNCTION EVENP)) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.10 (LET ((TARGET (MAP (QUOTE VECTOR) (FUNCTION (LAMBDA (X) (SUBLIS (QUOTE ((A . 1) (B . 2))) X))) *SEARCHED-LIST*))) (LOOP FOR PAT IN (MAPCAR (FUNCTION (LAMBDA (X) (MAP (QUOTE VECTOR) (FUNCTION (LAMBDA (Y) (SUBLIS (QUOTE ((A . 3) (B . 4))) Y))) X))) *PATTERN-SUBLISTS*) FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20 :KEY (QUOTE ODDP)) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20 :KEY (QUOTE ODDP)) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.11 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* FOR POS = (SEARCH PAT TARGET :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.12 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20 :TEST-NOT (FUNCTION EQL)) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.13 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* WHEN (AND (> (LENGTH PAT) 0) (LET ((POS (SEARCH PAT TARGET :START1 1 :TEST (COMPLEMENT (FUNCTION EQL))))) (NOT (SEARCH-CHECK PAT TARGET POS :START1 1 :TEST (COMPLEMENT (FUNCTION EQL)))))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.14 (LET ((TARGET *SEARCHED-VECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBVECTORS* WHEN (LET ((LEN (LENGTH PAT))) (AND (> LEN 0) (LET ((POS (SEARCH PAT TARGET :END1 (1- LEN) :TEST (COMPLEMENT (FUNCTION EQL))))) (NOT (SEARCH-CHECK PAT TARGET POS :END1 (1- LEN) :TEST (COMPLEMENT (FUNCTION EQL))))))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-VECTOR.15 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B B A A A B A B B)) :FILL-POINTER 5))) (VALUES (SEARCH (QUOTE (A)) A) (SEARCH (QUOTE (A)) A :FROM-END T) (SEARCH (QUOTE (A B)) A) (SEARCH (QUOTE (A B)) A :FROM-END T) (SEARCH (QUOTE (A B A)) A) (SEARCH (QUOTE (A B A)) A :FROM-END T))) 0 4 0 0 NIL NIL)
;; Loading (DEFTEST SEARCH-VECTOR.16 (LET ((PAT (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (QUOTE (A B A)) :FILL-POINTER 1)) (A #(A B B A A))) (VALUES (SEARCH PAT A) (SEARCH PAT A :FROM-END T) (PROGN (SETF (FILL-POINTER PAT) 2) (SEARCH PAT A)) (SEARCH PAT A :FROM-END T) (PROGN (SETF (FILL-POINTER PAT) 3) (SEARCH PAT A)) (SEARCH PAT A :FROM-END T))) 0 4 0 0 NIL NIL)
;; Loading (DEFTEST SEARCH-VECTOR.17 (LET ((PAT #(10)) (TARGET #(1 4 6 10 15 20))) (SEARCH PAT TARGET :TEST (FUNCTION <))) 4)
;; Loading (DEFTEST SEARCH-VECTOR.18 (LET ((PAT #(10)) (TARGET #(1 4 6 10 15 20))) (SEARCH PAT TARGET :TEST-NOT (FUNCTION >=))) 4)
;; Loading (LOAD "search-bitvector.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/search-bitvector.lsp C1768937>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "search-aux.lsp")
;; Loading (DEFTEST SEARCH-BITVECTOR.1 (LET ((TARGET *SEARCHED-BITVECTOR*) (PAT #*0)) (LOOP FOR I FROM 0 TO (1- (LENGTH TARGET)) FOR TAIL = (SUBSEQ TARGET I) ALWAYS (LET ((POS (SEARCH PAT TAIL))) (SEARCH-CHECK PAT TAIL POS)))) T)
;; Loading (DEFTEST SEARCH-BITVECTOR.2 (LET ((TARGET *SEARCHED-BITVECTOR*) (PAT #*0)) (LOOP FOR I FROM 1 TO (LENGTH TARGET) ALWAYS (LET ((POS (SEARCH PAT TARGET :END2 I :FROM-END T))) (SEARCH-CHECK PAT TARGET POS :END2 I :FROM-END T)))) T)
;; Loading (DEFTEST SEARCH-BITVECTOR.3 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* FOR POS = (SEARCH PAT TARGET) UNLESS (SEARCH-CHECK PAT TARGET POS) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.4 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* FOR POS = (SEARCH PAT TARGET :FROM-END T) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.5 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* FOR POS = (SEARCH PAT TARGET :START2 25 :END2 75) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 25 :END2 75) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.6 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 25 :END2 75) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 25 :END2 75) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.7 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* FOR POS = (SEARCH PAT TARGET :START2 20) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.8 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.9 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN (MAPCAR (FUNCTION (LAMBDA (X) (MAP (QUOTE VECTOR) (FUNCTION (LAMBDA (Y) (SUBLIS (QUOTE ((A . 2) (B . 3))) Y))) X))) *PATTERN-SUBLISTS*) FOR POS = (SEARCH PAT TARGET :START2 20 :KEY (FUNCTION EVENP)) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20 :KEY (FUNCTION EVENP)) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.10 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN (MAPCAR (FUNCTION (LAMBDA (X) (MAP (QUOTE VECTOR) (FUNCTION (LAMBDA (Y) (SUBLIS (QUOTE ((A . 2) (B . 3))) Y))) X))) *PATTERN-SUBLISTS*) FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20 :KEY (QUOTE ODDP)) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20 :KEY (QUOTE ODDP)) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.11 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* FOR POS = (SEARCH PAT TARGET :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.12 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20 :TEST-NOT (FUNCTION EQL)) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.13 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* WHEN (AND (> (LENGTH PAT) 0) (LET ((POS (SEARCH PAT TARGET :START1 1 :TEST (COMPLEMENT (FUNCTION EQL))))) (NOT (SEARCH-CHECK PAT TARGET POS :START1 1 :TEST (COMPLEMENT (FUNCTION EQL)))))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.14 (LET ((TARGET *SEARCHED-BITVECTOR*)) (LOOP FOR PAT IN *PATTERN-SUBBITVECTORS* WHEN (LET ((LEN (LENGTH PAT))) (AND (> LEN 0) (LET ((POS (SEARCH PAT TARGET :END1 (1- LEN) :TEST (COMPLEMENT (FUNCTION EQL))))) (NOT (SEARCH-CHECK PAT TARGET POS :END1 (1- LEN) :TEST (COMPLEMENT (FUNCTION EQL))))))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.15 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 1 0 0 0 1 0 1 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (SEARCH #*0 A) (SEARCH #*0 A :FROM-END T) (SEARCH #*01 A) (SEARCH #*01 A :FROM-END T) (SEARCH #*010 A) (SEARCH #*010 A :FROM-END T))) 0 4 0 0 NIL NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.16 (LET ((PAT (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (QUOTE (0 1 0)) :FILL-POINTER 1)) (A #*01100)) (VALUES (SEARCH PAT A) (SEARCH PAT A :FROM-END T) (PROGN (SETF (FILL-POINTER PAT) 2) (SEARCH PAT A)) (SEARCH PAT A :FROM-END T) (PROGN (SETF (FILL-POINTER PAT) 3) (SEARCH PAT A)) (SEARCH PAT A :FROM-END T))) 0 4 0 0 NIL NIL)
;; Loading (DEFTEST SEARCH-BITVECTOR.17 (LET ((PAT #*10) (TARGET #*000011)) (SEARCH PAT TARGET :TEST (FUNCTION <=))) 4)
;; Loading (DEFTEST SEARCH-BITVECTOR.18 (LET ((PAT #*10) (TARGET #*000011)) (SEARCH PAT TARGET :TEST-NOT (FUNCTION >))) 4)
;; Loading (LOAD "search-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/search-string.lsp C18BFD07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "search-aux.lsp")
;; Loading (DEFTEST SEARCH-STRING.2 (LET ((TARGET *SEARCHED-STRING*) (PAT #(A))) (LOOP FOR I FROM 1 TO (LENGTH TARGET) ALWAYS (LET ((POS (SEARCH PAT TARGET :END2 I :FROM-END T))) (SEARCH-CHECK PAT TARGET POS :END2 I :FROM-END T)))) T)
;; Loading (DEFTEST SEARCH-STRING.3 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* FOR POS = (SEARCH PAT TARGET) UNLESS (SEARCH-CHECK PAT TARGET POS) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.4 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* FOR POS = (SEARCH PAT TARGET :FROM-END T) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.5 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* FOR POS = (SEARCH PAT TARGET :START2 25 :END2 75) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 25 :END2 75) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.6 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 25 :END2 75) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 25 :END2 75) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.7 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* FOR POS = (SEARCH PAT TARGET :START2 20) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.8 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.9 (FLET ((%F (X) (CASE X ((#\0 A) (QUOTE C)) ((#\1 B) (QUOTE D)) (T NIL)))) (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBLISTS* FOR POS = (SEARCH PAT TARGET :START2 20 :KEY (FUNCTION %F)) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20 :KEY (FUNCTION %F)) COLLECT PAT))) NIL)
;; Loading (DEFTEST SEARCH-STRING.10 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* FOR POS = (SEARCH PAT TARGET :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) UNLESS (SEARCH-CHECK PAT TARGET POS :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.11 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* FOR POS = (SEARCH PAT TARGET :FROM-END T :START2 20 :TEST-NOT (FUNCTION EQL)) UNLESS (SEARCH-CHECK PAT TARGET POS :FROM-END T :START2 20 :TEST (COMPLEMENT (FUNCTION EQL))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.13 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* WHEN (AND (> (LENGTH PAT) 0) (LET ((POS (SEARCH PAT TARGET :START1 1 :TEST (COMPLEMENT (FUNCTION EQL))))) (NOT (SEARCH-CHECK PAT TARGET POS :START1 1 :TEST (COMPLEMENT (FUNCTION EQL)))))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.14 (LET ((TARGET *SEARCHED-STRING*)) (LOOP FOR PAT IN *PATTERN-SUBSTRINGS* WHEN (LET ((LEN (LENGTH PAT))) (AND (> LEN 0) (LET ((POS (SEARCH PAT TARGET :END1 (1- LEN) :TEST (COMPLEMENT (FUNCTION EQL))))) (NOT (SEARCH-CHECK PAT TARGET POS :END1 (1- LEN) :TEST (COMPLEMENT (FUNCTION EQL))))))) COLLECT PAT)) NIL)
;; Loading (DEFTEST SEARCH-STRING.15 (LET ((A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abbaaababb" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (SEARCH "a" A) (SEARCH "a" A :FROM-END T) (SEARCH "ab" A) (SEARCH "ab" A :FROM-END T) (SEARCH "aba" A) (SEARCH "aba" A :FROM-END T))) 0 4 0 0 NIL NIL)
;; Loading (DEFTEST SEARCH-STRING.16 (LET ((PAT (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\a)) :FILL-POINTER 1)) (A "abbaa")) (VALUES (SEARCH PAT A) (SEARCH PAT A :FROM-END T) (PROGN (SETF (FILL-POINTER PAT) 2) (SEARCH PAT A)) (SEARCH PAT A :FROM-END T) (PROGN (SETF (FILL-POINTER PAT) 3) (SEARCH PAT A)) (SEARCH PAT A :FROM-END T))) 0 4 0 0 NIL NIL)
;; Loading (DEFTEST SEARCH-STRING.17 (LET ((PAT "m") (TARGET (QUOTE "adgmnpq"))) (SEARCH PAT TARGET :TEST (FUNCTION CHAR<))) 4)
;; Loading (DEFTEST SEARCH-STRING.18 (LET ((PAT "m") (TARGET (QUOTE "adgmnpq"))) (SEARCH PAT TARGET :TEST-NOT (FUNCTION CHAR>=))) 4)
;; Loading (DEFTEST SEARCH-STRING.19 (DO-SPECIAL-STRINGS (S "a" NIL) (ASSERT (EQL (SEARCH S "xyza123apqr") 3)) (ASSERT (EQL (SEARCH S "xyza1a3apqr" :START2 4) 5)) (ASSERT (EQL (SEARCH S "xyza123apqr" :FROM-END T) 7))) NIL)
;; Loading (DEFTEST SEARCH-STRING.20 (DO-SPECIAL-STRINGS (S "xababcdefabc123ababc18" NIL) (ASSERT (EQL (SEARCH "abc" S) 3)) (ASSERT (EQL (SEARCH "abc" S :START2 4) 9)) (ASSERT (EQL (SEARCH "abc" S :FROM-END T) 17))) NIL)
;; Loading (LOAD "mismatch.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/mismatch.lsp C1A07DA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MISMATCH-LIST.1 (MISMATCH (QUOTE NIL) (QUOTE (A B C))) 0)
;; Loading (DEFTEST MISMATCH-LIST.2 (MISMATCH (QUOTE (A B C D)) (QUOTE NIL)) 0)
;; Loading (DEFTEST MISMATCH-LIST.3 (MISMATCH (QUOTE (A B C)) (QUOTE (A B C))) NIL)
;; Loading (DEFTEST MISMATCH-LIST.4 (MISMATCH (QUOTE (A B C)) (QUOTE (A B D))) 2)
;; Loading (DEFTEST MISMATCH-LIST.5 (MISMATCH (QUOTE (A B C)) (QUOTE (B C)) :START1 1) NIL)
;; Loading (DEFTEST MISMATCH-LIST.6 (MISMATCH (QUOTE (A B C D)) (QUOTE (Z B C E)) :START1 1 :START2 1) 3)
;; Loading (DEFTEST MISMATCH-LIST.7 (MISMATCH (QUOTE (A B C D)) (QUOTE (Z B C E)) :START1 1 :START2 1 :END1 3 :END2 3) NIL)
;; Loading (DEFTEST MISMATCH-LIST.8 (MISMATCH (QUOTE (1 2 3 4)) (QUOTE (5 6 7 8)) :TEST (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) NIL)
;; Loading (DEFTEST MISMATCH-LIST.9 (MISMATCH (QUOTE (1 2 3 4)) (QUOTE (5 6 17 8)) :TEST (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) 2)
;; Loading (DEFTEST MISMATCH-LIST.10 (MISMATCH (QUOTE (1 2 3 4)) (QUOTE (10 11 7 123)) :TEST-NOT (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) 2)
;; Loading (DEFTEST MISMATCH-LIST.11 (MISMATCH (QUOTE (1 2 3 4)) (QUOTE (5 6 17 8)) :KEY (FUNCTION EVENP)) NIL)
;; Loading (DEFTEST MISMATCH-LIST.12 (MISMATCH (QUOTE (1 2 3 4)) (QUOTE (5 6 12 8)) :KEY (QUOTE ODDP)) 2)
;; Loading (DEFTEST MISMATCH-LIST.13 (MISMATCH (QUOTE (1 2 3 4)) (QUOTE (1 2 3 4)) :TEST (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-LIST.14 (MISMATCH (QUOTE (1 2 3 4)) (QUOTE (5 6 7 8)) :TEST-NOT (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-LIST.15 (MISMATCH (QUOTE (A B C D E F G H I J K)) (QUOTE (A B C C E F G H Z J K))) 3)
;; Loading (DEFTEST MISMATCH-LIST.16 (MISMATCH (QUOTE (A B C D E F G H I J K)) (QUOTE (A B C C Y F G H Z J K)) :FROM-END T) 9)
;; Loading (DEFTEST MISMATCH-LIST.17 (MISMATCH (QUOTE (A B C)) (QUOTE (A B C A B C D)) :FROM-END T) 3)
;; Loading (DEFTEST MISMATCH-LIST.18 (MISMATCH (QUOTE (A B C A B C D)) (QUOTE (A B C)) :FROM-END T) 7)
;; Loading (DEFTEST MISMATCH-LIST.19 (MISMATCH (QUOTE (1 1 1)) (QUOTE (2 2 2 2 2 1 2 2)) :FROM-END T :TEST-NOT (QUOTE EQL)) 1)
;; Loading (DEFTEST MISMATCH-LIST.20 (MISMATCH (QUOTE (1 1 1 1 1 1 1)) (QUOTE (2 3 3)) :FROM-END T :KEY (FUNCTION EVENP)) 5)
;; Loading (DEFTEST MISMATCH-LIST.21 (MISMATCH (QUOTE (1 1 1)) (QUOTE (2 2 2 2 2 1 2 2)) :FROM-END T :TEST-NOT (FUNCTION EQUAL)) 1)
;; Loading (DEFTEST MISMATCH-LIST.22 (MISMATCH (QUOTE (1 1 1 1 1 1 1)) (QUOTE (2 3 3)) :FROM-END T :KEY (QUOTE EVENP)) 5)
;; Loading (DEFTEST MISMATCH-VECTOR.1 (MISMATCH #() #(A B C)) 0)
;; Loading (DEFTEST MISMATCH-VECTOR.2 (MISMATCH #(A B C D) #()) 0)
;; Loading (DEFTEST MISMATCH-VECTOR.3 (MISMATCH #(A B C) #(A B C)) NIL)
;; Loading (DEFTEST MISMATCH-VECTOR.4 (MISMATCH #(A B C) #(A B D)) 2)
;; Loading (DEFTEST MISMATCH-VECTOR.5 (MISMATCH #(A B C) #(B C) :START1 1) NIL)
;; Loading (DEFTEST MISMATCH-VECTOR.6 (MISMATCH #(A B C D) #(Z B C E) :START1 1 :START2 1) 3)
;; Loading (DEFTEST MISMATCH-VECTOR.7 (MISMATCH #(A B C D) #(Z B C E) :START1 1 :START2 1 :END1 3 :END2 3) NIL)
;; Loading (DEFTEST MISMATCH-VECTOR.8 (MISMATCH #(1 2 3 4) #(5 6 7 8) :TEST (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) NIL)
;; Loading (DEFTEST MISMATCH-VECTOR.9 (MISMATCH #(1 2 3 4) #(5 6 17 8) :TEST (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) 2)
;; Loading (DEFTEST MISMATCH-VECTOR.10 (MISMATCH #(1 2 3 4) #(10 11 7 123) :TEST-NOT (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) 2)
;; Loading (DEFTEST MISMATCH-VECTOR.11 (MISMATCH #(1 2 3 4) #(5 6 17 8) :KEY (FUNCTION EVENP)) NIL)
;; Loading (DEFTEST MISMATCH-VECTOR.12 (MISMATCH #(1 2 3 4) #(5 6 12 8) :KEY (QUOTE ODDP)) 2)
;; Loading (DEFTEST MISMATCH-VECTOR.13 (MISMATCH #(1 2 3 4) #(1 2 3 4) :TEST (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-VECTOR.14 (MISMATCH #(1 2 3 4) #(5 6 7 8) :TEST-NOT (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-VECTOR.15 (MISMATCH #(A B C D E F G H I J K) #(A B C C E F G H Z J K)) 3)
;; Loading (DEFTEST MISMATCH-VECTOR.16 (MISMATCH #(A B C D E F G H I J K) #(A B C C Y F G H Z J K) :FROM-END T) 9)
;; Loading (DEFTEST MISMATCH-VECTOR.17 (MISMATCH #(A B C) #(A B C A B C D) :FROM-END T) 3)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISMATCH-VECTOR.18 (MISMATCH #(A B C A B C D) #(A B C) :FROM-END T) 7)
;; Loading (DEFTEST MISMATCH-VECTOR.19 (MISMATCH #(1 1 1) #(2 2 2 2 2 1 2 2) :FROM-END T :TEST-NOT (QUOTE EQL)) 1)
;; Loading (DEFTEST MISMATCH-VECTOR.20 (MISMATCH #(1 1 1 1 1 1 1) #(2 3 3) :FROM-END T :KEY (FUNCTION EVENP)) 5)
;; Loading (DEFTEST MISMATCH-VECTOR.21 (MISMATCH #(1 1 1) #(2 2 2 2 2 1 2 2) :FROM-END T :TEST-NOT (FUNCTION EQUAL)) 1)
;; Loading (DEFTEST MISMATCH-VECTOR.22 (MISMATCH #(1 1 1 1 1 1 1) #(2 3 3) :FROM-END T :KEY (QUOTE EVENP)) 5)
;; Loading (DEFTEST MISMATCH-VECTOR.23 (LET ((A (MAKE-ARRAY (QUOTE (9)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9)) :FILL-POINTER 5))) (VALUES (MISMATCH (QUOTE (1 2 3 4 5)) A) (MISMATCH (QUOTE (1 2 3 4 5)) A :FROM-END T) (MISMATCH (QUOTE (1 2 3 4)) A) (MISMATCH (QUOTE (1 2 3 4 5 6)) A) (MISMATCH (QUOTE (6 7 8 9)) A :FROM-END T) (MISMATCH (QUOTE (2 3 4 5)) A :FROM-END T))) NIL NIL 4 5 4 0)
;; Loading (DEFTEST MISMATCH-VECTOR.24 (LET ((M (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6)) :FILL-POINTER 4)) (A (QUOTE (1 2 3 4 5)))) (LIST (MISMATCH M A) (MISMATCH M A :FROM-END T) (SETF (FILL-POINTER M) 5) (MISMATCH M A) (MISMATCH M A :FROM-END T) (SETF (FILL-POINTER M) 6) (MISMATCH M A) (MISMATCH M A :FROM-END T))) (4 4 5 NIL NIL 6 5 6))
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.1 (MISMATCH "" #*111) 0)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.1A (MISMATCH (QUOTE NIL) #*111) 0)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.1B (MISMATCH "" (QUOTE (1 1 1))) 0)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.2 (MISMATCH #*1010 #*) 0)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.2A (MISMATCH #*1010 (QUOTE NIL)) 0)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.2B (MISMATCH (QUOTE (1 0 1 0)) #*) 0)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.3 (MISMATCH #*101 #*101) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.4 (MISMATCH #*101 #*100) 2)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.5 (MISMATCH #*101 #*01 :START1 1) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.6 (MISMATCH #*0110 #*0111 :START1 1 :START2 1) 3)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.7 (MISMATCH #*0110 #*0111 :START1 1 :START2 1 :END1 3 :END2 3) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.7A (MISMATCH (QUOTE (0 1 1 0)) #*0111 :START1 1 :START2 1 :END1 3 :END2 3) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.7B (MISMATCH #*0110 (QUOTE (0 1 1 1)) :START1 1 :START2 1 :END1 3 :END2 3) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.8 (MISMATCH #*1001 #*0110 :TEST (FUNCTION (LAMBDA (X Y) (= X (- 1 Y))))) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.8A (MISMATCH #*1001 (QUOTE (5 4 4 5)) :TEST (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.9 (MISMATCH #*1001 (QUOTE (5 4 17 5)) :TEST (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) 2)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.9A (MISMATCH (QUOTE (5 4 17 5)) #*1001 :TEST (FUNCTION (LAMBDA (X Y) (= Y (- X 4))))) 2)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.9B (MISMATCH #*0100 #*1001 :TEST (FUNCTION (LAMBDA (X Y) (= X (- 1 Y))))) 2)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.10 (MISMATCH #*1001 (QUOTE (10 11 4 123)) :TEST-NOT (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) 2)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.10A (MISMATCH #*1001 (QUOTE (10 11 100 123)) :TEST-NOT (FUNCTION (LAMBDA (X Y) (= X (- Y 4))))) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.11 (MISMATCH #*1010 (QUOTE (5 6 17 8)) :KEY (FUNCTION EVENP)) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.11A (MISMATCH (QUOTE (5 6 17 8)) #*1010 :KEY (FUNCTION EVENP)) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.11B (MISMATCH #*0101 #*1010 :KEY (FUNCTION EVENP) :TEST-NOT (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.11C (MISMATCH (QUOTE (5 6 17 8)) #*10101 :KEY (FUNCTION EVENP)) 4)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.11D (MISMATCH (QUOTE (5 6 17 8 100)) #*1010 :KEY (FUNCTION EVENP)) 4)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.12 (MISMATCH #*1010 #*1000 :KEY (QUOTE ODDP)) 2)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.12A (MISMATCH #*1010 (QUOTE (5 6 8 8)) :KEY (QUOTE ODDP)) 2)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.12B (MISMATCH (QUOTE (5 6 8 8)) #*1010 :KEY (QUOTE ODDP)) 2)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.13 (MISMATCH #*0001 #*0001 :TEST (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.14 (MISMATCH (QUOTE #*10001) #*01110 :TEST-NOT (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.15 (MISMATCH #*00100010100 #*00110010000) 3)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.16 (MISMATCH #*00100010100 #*00110010000 :FROM-END T) 9)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.17 (MISMATCH #*001 #*0010010 :FROM-END T) 3)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.18 (MISMATCH #*0010010 #*001 :FROM-END T) 7)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.19 (MISMATCH #*000 #*11111011 :FROM-END T :TEST-NOT (QUOTE EQL)) 1)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.20 (MISMATCH #*1111111 (QUOTE (2 3 3)) :FROM-END T :KEY (FUNCTION EVENP)) 5)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.21 (MISMATCH #*111 #*00000100 :FROM-END T :TEST-NOT (FUNCTION EQUAL)) 1)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.22 (MISMATCH #*1111111 (QUOTE (2 3 3)) :FROM-END T :KEY (QUOTE EVENP)) 5)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.23 (LET ((A (MAKE-ARRAY (QUOTE (9)) :INITIAL-CONTENTS #*001011000 :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (MISMATCH #*00101 A) (MISMATCH #*00101 A :FROM-END T) (MISMATCH #*0010 A) (MISMATCH #*001011 A) (MISMATCH #*1000 A :FROM-END T) (MISMATCH #*0010 A :FROM-END T))) NIL NIL 4 5 4 4)
;; Loading (DEFTEST MISMATCH-BIT-VECTOR.24 (LET ((M (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS #*001011 :FILL-POINTER 4 :ELEMENT-TYPE (QUOTE BIT))) (A #*00101)) (LIST (MISMATCH M A) (MISMATCH M A :FROM-END T) (SETF (FILL-POINTER M) 5) (MISMATCH M A) (MISMATCH M A :FROM-END T) (SETF (FILL-POINTER M) 6) (MISMATCH M A) (MISMATCH M A :FROM-END T))) (4 4 5 NIL NIL 6 5 5))
;; Loading (DEFTEST MISMATCH-STRING.1 (MISMATCH "" "111") 0)
;; Loading (DEFTEST MISMATCH-STRING.1A (MISMATCH (QUOTE NIL) "111") 0)
;; Loading (DEFTEST MISMATCH-STRING.1B (MISMATCH "" (QUOTE (1 1 1))) 0)
;; Loading (DEFTEST MISMATCH-STRING.2 (MISMATCH "1010" "") 0)
;; Loading (DEFTEST MISMATCH-STRING.2A (MISMATCH "1010" (QUOTE NIL)) 0)
;; Loading (DEFTEST MISMATCH-STRING.2B (MISMATCH (QUOTE (1 0 1 0)) "") 0)
;; Loading (DEFTEST MISMATCH-STRING.3 (MISMATCH "101" "101") NIL)
;; Loading (DEFTEST MISMATCH-STRING.4 (MISMATCH "101" "100") 2)
;; Loading (DEFTEST MISMATCH-STRING.5 (MISMATCH "101" "01" :START1 1) NIL)
;; Loading (DEFTEST MISMATCH-STRING.6 (MISMATCH "0110" "0111" :START1 1 :START2 1) 3)
;; Loading (DEFTEST MISMATCH-STRING.7 (MISMATCH "0110" "0111" :START1 1 :START2 1 :END1 3 :END2 3) NIL)
;; Loading (DEFTEST MISMATCH-STRING.7A (MISMATCH (QUOTE (#\0 #\1 #\1 #\0)) "0111" :START1 1 :START2 1 :END1 3 :END2 3) NIL)
;; Loading (DEFTEST MISMATCH-STRING.7B (MISMATCH "0110" (QUOTE (#\0 #\1 #\1 #\1)) :START1 1 :START2 1 :END1 3 :END2 3) NIL)
;; Loading (DEFTEST MISMATCH-STRING.8 (MISMATCH "1001" "0110" :TEST (FUNCTION (LAMBDA (X Y) (EQL X (IF (EQL Y #\0) #\1 #\0))))) NIL)
;; Loading (DEFTEST MISMATCH-STRING.8A (MISMATCH "1001" (QUOTE (5 4 4 5)) :TEST (FUNCTION (LAMBDA (X Y) (SETQ X (READ-FROM-STRING (STRING X))) (= X (- Y 4))))) NIL)
;; Loading (DEFTEST MISMATCH-STRING.9 (MISMATCH "1001" (QUOTE (5 4 17 5)) :TEST (FUNCTION (LAMBDA (X Y) (SETQ X (READ-FROM-STRING (STRING X))) (= X (- Y 4))))) 2)
;; Loading (DEFTEST MISMATCH-STRING.9A (MISMATCH (QUOTE (5 4 17 5)) "1001" :TEST (FUNCTION (LAMBDA (X Y) (SETQ Y (READ-FROM-STRING (STRING Y))) (= Y (- X 4))))) 2)
;; Loading (DEFTEST MISMATCH-STRING.9B (MISMATCH "0100" "1001" :TEST (FUNCTION (LAMBDA (X Y) (EQL X (IF (EQL Y #\0) #\1 #\0))))) 2)
;; Loading (DEFTEST MISMATCH-STRING.10 (MISMATCH "1001" "0049" :TEST-NOT (FUNCTION (LAMBDA (X Y) (SETQ X (READ-FROM-STRING (STRING X))) (SETQ Y (READ-FROM-STRING (STRING Y))) (EQL X (- Y 4))))) 2)
;; Loading (DEFTEST MISMATCH-STRING.10A (MISMATCH "1001" "3333" :TEST-NOT (FUNCTION (LAMBDA (X Y) (SETQ X (READ-FROM-STRING (STRING X))) (SETQ Y (READ-FROM-STRING (STRING Y))) (EQL X (- Y 4))))) NIL)
;; Loading (DEFTEST MISMATCH-STRING.11 (MISMATCH "1010" "5678" :KEY (FUNCTION EVENDIGITP)) NIL)
;; Loading (DEFTEST MISMATCH-STRING.11A (MISMATCH "5678" "1010" :KEY (FUNCTION ODDDIGITP)) NIL)
;; Loading (DEFTEST MISMATCH-STRING.11B (MISMATCH "0101" "1010" :KEY (FUNCTION EVENDIGITP) :TEST-NOT (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-STRING.11C (MISMATCH "5678" "10101" :KEY (FUNCTION EVENDIGITP)) 4)
;; Loading (DEFTEST MISMATCH-STRING.11D (MISMATCH "56122" "1010" :KEY (FUNCTION EVENDIGITP)) 4)
;; Loading (DEFTEST MISMATCH-STRING.11E (MISMATCH "0101" (QUOTE (#\1 #\0 #\1 #\0)) :KEY (FUNCTION EVENDIGITP) :TEST-NOT (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-STRING.12 (MISMATCH "1010" "1000" :KEY (QUOTE ODDDIGITP)) 2)
;; Loading (DEFTEST MISMATCH-STRING.12A (MISMATCH "1010" "5688" :KEY (QUOTE ODDDIGITP)) 2)
;; Loading (DEFTEST MISMATCH-STRING.12B (MISMATCH (QUOTE (#\5 #\6 #\8 #\8)) "1010" :KEY (QUOTE ODDDIGITP)) 2)
;; Loading (DEFTEST MISMATCH-STRING.13 (MISMATCH "0001" "0001" :TEST (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-STRING.14 (MISMATCH "10001" "01110" :TEST-NOT (QUOTE EQL)) NIL)
;; Loading (DEFTEST MISMATCH-STRING.15 (MISMATCH "00100010100" "00110010000") 3)
;; Loading (DEFTEST MISMATCH-STRING.16 (MISMATCH "00100010100" "00110010000" :FROM-END T) 9)
;; Loading (DEFTEST MISMATCH-STRING.17 (MISMATCH "001" "0010010" :FROM-END T) 3)
;; Loading (DEFTEST MISMATCH-STRING.18 (MISMATCH "0010010" "001" :FROM-END T) 7)
;; Loading (DEFTEST MISMATCH-STRING.19 (MISMATCH "000" "11111011" :FROM-END T :TEST-NOT (QUOTE EQL)) 1)
;; Loading (DEFTEST MISMATCH-STRING.20 (MISMATCH "1111111" "233" :FROM-END T :KEY (FUNCTION EVENDIGITP)) 5)
;; Loading (DEFTEST MISMATCH-STRING.20A (MISMATCH "1111111" (QUOTE (#\2 #\3 #\3)) :FROM-END T :KEY (FUNCTION EVENDIGITP)) 5)
;; Loading (DEFTEST MISMATCH-STRING.21 (MISMATCH "111" "00000100" :FROM-END T :TEST-NOT (FUNCTION EQUAL)) 1)
;; Loading (DEFTEST MISMATCH-STRING.22 (MISMATCH "1111111" "233" :FROM-END T :KEY (QUOTE EVENDIGITP)) 5)
;; Loading (DEFTEST MISMATCH-STRING.23 (LET ((A (MAKE-ARRAY (QUOTE (9)) :INITIAL-CONTENTS "123456789" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (MISMATCH "12345" A) (MISMATCH "12345" A :FROM-END T) (MISMATCH "1234" A) (MISMATCH "123456" A) (MISMATCH "6789" A :FROM-END T) (MISMATCH "2345" A :FROM-END T))) NIL NIL 4 5 4 0)
;; Loading (DEFTEST MISMATCH-STRING.24 (LET ((M (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "123456" :FILL-POINTER 4 :ELEMENT-TYPE (QUOTE CHARACTER))) (A "12345")) (LIST (MISMATCH M A) (MISMATCH M A :FROM-END T) (SETF (FILL-POINTER M) 5) (MISMATCH M A) (MISMATCH M A :FROM-END T) (SETF (FILL-POINTER M) 6) (MISMATCH M A) (MISMATCH M A :FROM-END T))) (4 4 5 NIL NIL 6 5 6))
;; Loading (DEFTEST MISTMATCH-STRING.25 (LET ((S0 "12345") (S1 "123A") (S2 "245")) (DO-SPECIAL-STRINGS (S S0 NIL) (ASSERT (NULL (MISMATCH S S0))) (ASSERT (NULL (MISMATCH S0 S))) (ASSERT (NULL (MISMATCH S S0 :FROM-END T))) (ASSERT (NULL (MISMATCH S0 S :FROM-END T))) (ASSERT (EQL (MISMATCH S S1) 3)) (ASSERT (EQL (MISMATCH S1 S) 3)))) NIL)
;; Loading (DEFHARMLESS MISMATCH.TEST-AND-TEST-NOT.1 (MISMATCH (QUOTE (1 2 3)) (QUOTE (1 2 4)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS MISMATCH.TEST-AND-TEST-NOT.2 (MISMATCH (QUOTE (1 2 3)) (QUOTE (1 2 4)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS MISMATCH.TEST-AND-TEST-NOT.3 (MISMATCH #(1 2 3) #(1 2 4) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS MISMATCH.TEST-AND-TEST-NOT.4 (MISMATCH #(1 2 3) #(1 2 4) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS MISMATCH.TEST-AND-TEST-NOT.5 (MISMATCH "abc" "abd" :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS MISMATCH.TEST-AND-TEST-NOT.6 (MISMATCH "abc" "abd" :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS MISMATCH.TEST-AND-TEST-NOT.7 (MISMATCH #*011 #*010 :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS MISMATCH.TEST-AND-TEST-NOT.8 (MISMATCH #*011 #*010 :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST MISMATCH.ALLOW-OTHER-KEYS.1 (MISMATCH "1234" "1244" :ALLOW-OTHER-KEYS T :BAD T) 2)
;; Loading (DEFTEST MISMATCH.ALLOW-OTHER-KEYS.2 (MISMATCH "1234" "1244" :BAD T :ALLOW-OTHER-KEYS T) 2)
;; Loading (DEFTEST MISMATCH.ALLOW-OTHER-KEYS.3 (MISMATCH "1234" "1244" :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST MISMATCH.ALLOW-OTHER-KEYS.4 (MISMATCH "1234" "1244" :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) 2)
;; Loading (DEFTEST MISMATCH.ALLOW-OTHER-KEYS.5 (MISMATCH "1234" "1244" :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) 2)
;; Loading (DEFTEST MISMATCH.KEYWORDS.6 (MISMATCH "1234" "1244" :TEST (FUNCTION EQUAL) :TEST (COMPLEMENT (FUNCTION EQUAL))) 2)
;; Loading (DEFTEST MISMATCH.ALLOW-OTHER-KEYS.7 (MISMATCH "1234" "1244" :BAD T :ALLOW-OTHER-KEYS T :TEST (COMPLEMENT (FUNCTION EQUAL))) 0)
;; Loading (DEFTEST MISMATCH.ORDER.1 (LET ((I 0) A B) (VALUES (MISMATCH (PROGN (SETF A (INCF I)) "abcd") (PROGN (SETF B (INCF I)) "abzd")) I A B)) 2 2 1 2)
;; Loading (DEFTEST MISMATCH.ORDER.2 (LET ((I 0) A B C D E F G H J) (VALUES (MISMATCH (PROGN (SETF A (INCF I)) "abcdef") (PROGN (SETF B (INCF I)) "abcdef") :KEY (PROGN (SETF C (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF D (INCF I)) (FUNCTION EQUAL)) :START1 (PROGN (SETF E (INCF I)) 1) :START2 (PROGN (SETF F (INCF I)) 1) :END1 (PROGN (SETF G (INCF I)) 4) :END2 (PROGN (SETF H (INCF I)) 4) :FROM-END (SETF J (INCF I))) I A B C D E F G H J)) NIL 9 1 2 3 4 5 6 7 8 9)
;; Loading (DEFTEST MISMATCH.ORDER.3 (LET ((I 0) A B C D E F G H J) (VALUES (MISMATCH (PROGN (SETF A (INCF I)) "abcdef") (PROGN (SETF B (INCF I)) "abcdef") :FROM-END (SETF C (INCF I)) :END2 (PROGN (SETF D (INCF I)) 4) :END1 (PROGN (SETF E (INCF I)) 4) :START2 (PROGN (SETF F (INCF I)) 1) :START1 (PROGN (SETF G (INCF I)) 1) :TEST (PROGN (SETF H (INCF I)) (FUNCTION EQUAL)) :KEY (PROGN (SETF J (INCF I)) (FUNCTION IDENTITY))) I A B C D E F G H J)) NIL 9 1 2 3 4 5 6 7 8 9)
;; Loading (DEFTEST MISMATCH.ERROR.1 (SIGNALS-ERROR (MISMATCH) PROGRAM-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.2 (SIGNALS-ERROR (MISMATCH NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.3 (SIGNALS-ERROR (MISMATCH NIL NIL :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.4 (SIGNALS-ERROR (MISMATCH NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.5 (SIGNALS-ERROR (MISMATCH NIL NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.6 (SIGNALS-ERROR (MISMATCH NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.7 (SIGNALS-ERROR (MISMATCH (QUOTE (A B)) (QUOTE (A B)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.8 (SIGNALS-ERROR (MISMATCH (QUOTE (A B)) (QUOTE (A B)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.9 (SIGNALS-ERROR (MISMATCH (QUOTE (A B)) (QUOTE (A B)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST MISMATCH.ERROR.10 (SIGNALS-ERROR (MISMATCH (QUOTE (A B)) (QUOTE (A B)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (LOAD "replace.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/replace.lsp 81816C67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REPLACE-LIST.1 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z))))) (VALUES (EQT X RESULT) RESULT)) T (X Y Z D E F G))
;; Loading (DEFTEST REPLACE-LIST.2 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START1 1))) (VALUES (EQT X RESULT) RESULT)) T (A X Y Z E F G))
;; Loading (DEFTEST REPLACE-LIST.3 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START1 4))) (VALUES (EQT X RESULT) RESULT)) T (A B C D X Y Z))
;; Loading (DEFTEST REPLACE-LIST.4 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START1 5))) (VALUES (EQT X RESULT) RESULT)) T (A B C D E X Y))
;; Loading (DEFTEST REPLACE-LIST.5 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START1 6))) (VALUES (EQT X RESULT) RESULT)) T (A B C D E F X))
;; Loading (DEFTEST REPLACE-LIST.6 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X #(X Y Z) :START1 2))) (VALUES (EQT X RESULT) RESULT)) T (A B X Y Z F G))
;; Loading (DEFTEST REPLACE-LIST.7 (REPLACE NIL #(X Y Z)) NIL)
;; Loading (DEFTEST REPLACE-LIST.8 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :END1 1))) (VALUES (EQT X RESULT) RESULT)) T (X B C D E F G))
;; Loading (DEFTEST REPLACE-LIST.9 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START1 3 :END1 4))) (VALUES (EQT X RESULT) RESULT)) T (A B C X E F G))
;; Loading (DEFTEST REPLACE-LIST.10 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START1 0 :END1 5))) (VALUES (EQT X RESULT) RESULT)) T (X Y Z D E F G))
;; Loading (DEFTEST REPLACE-LIST.11 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START2 1))) (VALUES (EQT X RESULT) RESULT)) T (Y Z C D E F G))
;; Loading (DEFTEST REPLACE-LIST.12 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START2 1 :END1 NIL))) (VALUES (EQT X RESULT) RESULT)) T (Y Z C D E F G))
;; Loading (DEFTEST REPLACE-LIST.13 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START2 1 :END2 NIL))) (VALUES (EQT X RESULT) RESULT)) T (Y Z C D E F G))
;; Loading (DEFTEST REPLACE-LIST.14 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START2 1 :END2 2))) (VALUES (EQT X RESULT) RESULT)) T (Y B C D E F G))
;; Loading (DEFTEST REPLACE-LIST.15 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F G)))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START1 4 :END1 5 :START2 1 :END2 2))) (VALUES (EQT X RESULT) RESULT)) T (A B C D Y F G))
;; Loading (DEFTEST REPLACE-LIST.16 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F)))) (Y #(1 2 3)) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T (A 1 2 3 E F))
;; Loading (DEFTEST REPLACE-LIST.17 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F)))) (Y (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (QUOTE (1 2 3)) :FILL-POINTER T)) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T (A 1 2 3 E F))
;; Loading (DEFTEST REPLACE-LIST.18 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F)))) (Y (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6)) :FILL-POINTER 3)) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T (A 1 2 3 E F))
;; Loading (DEFTEST REPLACE-LIST.19 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F)))) (RESULT (REPLACE X X :START1 0 :END1 3 :START2 1 :END2 4))) (VALUES (EQT X RESULT) RESULT)) T (B C D D E F))
;; Loading (DEFTEST REPLACE-LIST.20 (LET* ((X (COPY-SEQ (QUOTE (A B C D E F)))) (RESULT (REPLACE X X :START1 1 :END1 4 :START2 0 :END2 3))) (VALUES (EQT X RESULT) RESULT)) T (A A B C E F))
;; Loading (DEFTEST REPLACE-VECTOR.1 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z)))) (VALUES (EQT X RESULT) RESULT)) T #(X Y Z D E F G))
;; Loading (DEFTEST REPLACE-VECTOR.2 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START1 1))) (VALUES (EQT X RESULT) RESULT)) T #(A X Y Z E F G))
;; Loading (DEFTEST REPLACE-VECTOR.3 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START1 4))) (VALUES (EQT X RESULT) RESULT)) T #(A B C D X Y Z))
;; Loading (DEFTEST REPLACE-VECTOR.4 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START1 5))) (VALUES (EQT X RESULT) RESULT)) T #(A B C D E X Y))
;; Loading (DEFTEST REPLACE-VECTOR.5 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START1 6))) (VALUES (EQT X RESULT) RESULT)) T #(A B C D E F X))
;; Loading (DEFTEST REPLACE-VECTOR.6 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X (QUOTE (X Y Z)) :START1 2))) (VALUES (EQT X RESULT) RESULT)) T #(A B X Y Z F G))
;; Loading (DEFTEST REPLACE-VECTOR.7 (REPLACE #() #(X Y Z)) #())
;; Loading (DEFTEST REPLACE-VECTOR.8 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :END1 1))) (VALUES (EQT X RESULT) RESULT)) T #(X B C D E F G))
;; Loading (DEFTEST REPLACE-VECTOR.9 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START1 3 :END1 4))) (VALUES (EQT X RESULT) RESULT)) T #(A B C X E F G))
;; Loading (DEFTEST REPLACE-VECTOR.10 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START1 0 :END1 5))) (VALUES (EQT X RESULT) RESULT)) T #(X Y Z D E F G))
;; Loading (DEFTEST REPLACE-VECTOR.11 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START2 1))) (VALUES (EQT X RESULT) RESULT)) T #(Y Z C D E F G))
;; Loading (DEFTEST REPLACE-VECTOR.12 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START2 1 :END1 NIL))) (VALUES (EQT X RESULT) RESULT)) T #(Y Z C D E F G))
;; Loading (DEFTEST REPLACE-VECTOR.13 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START2 1 :END2 NIL))) (VALUES (EQT X RESULT) RESULT)) T #(Y Z C D E F G))
;; Loading (DEFTEST REPLACE-VECTOR.14 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START2 1 :END2 2))) (VALUES (EQT X RESULT) RESULT)) T #(Y B C D E F G))
;; Loading (DEFTEST REPLACE-VECTOR.15 (LET* ((X (COPY-SEQ #(A B C D E F G))) (RESULT (REPLACE X #(X Y Z) :START1 4 :END1 5 :START2 1 :END2 2))) (VALUES (EQT X RESULT) RESULT)) T #(A B C D Y F G))
;; Loading (DEFTEST REPLACE-VECTOR.16 (LET* ((X (COPY-SEQ #(A B C D E F))) (Y (QUOTE (1 2 3))) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T #(A 1 2 3 E F))
;; Loading (DEFTEST REPLACE-VECTOR.17 (LET* ((X (COPY-SEQ #(A B C D E F))) (Y (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (QUOTE (1 2 3)) :FILL-POINTER T)) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T #(A 1 2 3 E F))
;; Loading (DEFTEST REPLACE-VECTOR.18 (LET* ((X (COPY-SEQ #(A B C D E F))) (Y (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6)) :FILL-POINTER 3)) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T #(A 1 2 3 E F))
;; Loading (DEFTEST REPLACE-VECTOR.19 (LET* ((X (COPY-SEQ #(A B C D E F))) (RESULT (REPLACE X X :START1 0 :END1 3 :START2 1 :END2 4))) (VALUES (EQT X RESULT) RESULT)) T #(B C D D E F))
;; Loading (DEFTEST REPLACE-VECTOR.21 (LET* ((X (COPY-SEQ #(A B C D E F))) (RESULT (REPLACE X X :START1 1 :END1 4 :START2 0 :END2 3))) (VALUES (EQT X RESULT) RESULT)) T #(A A B C E F))
;; Loading (DEFTEST REPLACE-BIT-VECTOR.1 (LET* ((X (COPY-SEQ #*1101001)) (RESULT (REPLACE X #*011))) (VALUES (EQT X RESULT) RESULT)) T #*0111001)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.2 (LET* ((X (COPY-SEQ #*1101001)) (RESULT (REPLACE X #*011 :START1 1))) (VALUES (EQT X RESULT) RESULT)) T #*1011001)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.3 (LET* ((X (COPY-SEQ #*1101001)) (RESULT (REPLACE X #*011 :START1 4))) (VALUES (EQT X RESULT) RESULT)) T #*1101011)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.4 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*111 :START1 5))) (VALUES (EQT X RESULT) RESULT)) T #*0000011)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.5 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*100 :START1 6))) (VALUES (EQT X RESULT) RESULT)) T #*0000001)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.6 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X (QUOTE (1 1 1)) :START1 2))) (VALUES (EQT X RESULT) RESULT)) T #*0011100)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.7 (REPLACE #* #*111) #*)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.8 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*111 :END1 1))) (VALUES (EQT X RESULT) RESULT)) T #*1000000)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.9 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*110 :START1 3 :END1 4))) (VALUES (EQT X RESULT) RESULT)) T #*0001000)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.10 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*111 :START1 0 :END1 5))) (VALUES (EQT X RESULT) RESULT)) T #*1110000)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.11 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*011 :START2 1))) (VALUES (EQT X RESULT) RESULT)) T #*1100000)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.12 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*011 :START2 1 :END1 NIL))) (VALUES (EQT X RESULT) RESULT)) T #*1100000)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.13 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*011 :START2 1 :END2 NIL))) (VALUES (EQT X RESULT) RESULT)) T #*1100000)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.14 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*011 :START2 1 :END2 2))) (VALUES (EQT X RESULT) RESULT)) T #*1000000)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.15 (LET* ((X (COPY-SEQ #*0000000)) (RESULT (REPLACE X #*011 :START1 4 :END1 5 :START2 1 :END2 2))) (VALUES (EQT X RESULT) RESULT)) T #*0000100)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.16 (LET* ((X (COPY-SEQ #*001011)) (Y (QUOTE (1 0 1))) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T #*010111)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.17 (LET* ((X (COPY-SEQ #*001011)) (Y (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (QUOTE (1 0 1)) :FILL-POINTER T :ELEMENT-TYPE (QUOTE BIT))) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T #*010111)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.18 (LET* ((X (COPY-SEQ #*001011)) (Y (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (1 0 1 0 0 1)) :FILL-POINTER 3 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T #*010111)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.19 (LET* ((X (COPY-SEQ #*001011)) (RESULT (REPLACE X X :START1 0 :END1 3 :START2 1 :END2 4))) (VALUES (EQT X RESULT) RESULT)) T #*010011)
;; Loading (DEFTEST REPLACE-BIT-VECTOR.21 (LET* ((X (COPY-SEQ #*001011)) (RESULT (REPLACE X X :START1 1 :END1 4 :START2 0 :END2 3))) (VALUES (EQT X RESULT) RESULT)) T #*000111)
;; Loading (DEFTEST REPLACE-STRING.1 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz"))) (VALUES (EQT X RESULT) RESULT)) T "xyzdefg")
;; Loading (DEFTEST REPLACE-STRING.2 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START1 1))) (VALUES (EQT X RESULT) RESULT)) T "axyzefg")
;; Loading (DEFTEST REPLACE-STRING.3 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START1 4))) (VALUES (EQT X RESULT) RESULT)) T "abcdxyz")
;; Loading (DEFTEST REPLACE-STRING.4 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START1 5))) (VALUES (EQT X RESULT) RESULT)) T "abcdexy")
;; Loading (DEFTEST REPLACE-STRING.5 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START1 6))) (VALUES (EQT X RESULT) RESULT)) T "abcdefx")
;; Loading (DEFTEST REPLACE-STRING.6 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X (QUOTE (#\x #\y #\z)) :START1 2))) (VALUES (EQT X RESULT) RESULT)) T "abxyzfg")
;; Loading (DEFTEST REPLACE-STRING.7 (REPLACE "" "xyz") "")
;; Loading (DEFTEST REPLACE-STRING.8 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :END1 1))) (VALUES (EQT X RESULT) RESULT)) T "xbcdefg")
;; Loading (DEFTEST REPLACE-STRING.9 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START1 3 :END1 4))) (VALUES (EQT X RESULT) RESULT)) T "abcxefg")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST REPLACE-STRING.10 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START1 0 :END1 5))) (VALUES (EQT X RESULT) RESULT)) T "xyzdefg")
;; Loading (DEFTEST REPLACE-STRING.11 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START2 1))) (VALUES (EQT X RESULT) RESULT)) T "yzcdefg")
;; Loading (DEFTEST REPLACE-STRING.12 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START2 1 :END1 NIL))) (VALUES (EQT X RESULT) RESULT)) T "yzcdefg")
;; Loading (DEFTEST REPLACE-STRING.13 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START2 1 :END2 NIL))) (VALUES (EQT X RESULT) RESULT)) T "yzcdefg")
;; Loading (DEFTEST REPLACE-STRING.14 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START2 1 :END2 2))) (VALUES (EQT X RESULT) RESULT)) T "ybcdefg")
;; Loading (DEFTEST REPLACE-STRING.15 (LET* ((X (COPY-SEQ "abcdefg")) (RESULT (REPLACE X "xyz" :START1 4 :END1 5 :START2 1 :END2 2))) (VALUES (EQT X RESULT) RESULT)) T "abcdyfg")
;; Loading (DEFTEST REPLACE-STRING.16 (LET* ((X (COPY-SEQ "abcdef")) (Y (COERCE "123" (QUOTE LIST))) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T "a123ef")
;; Loading (DEFTEST REPLACE-STRING.17 (LET* ((X (COPY-SEQ "abcdef")) (Y (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (QUOTE (#\1 #\2 #\3)) :FILL-POINTER T :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T "a123ef")
;; Loading (DEFTEST REPLACE-STRING.18 (LET* ((X (COPY-SEQ "abcdef")) (Y (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "123456" :FILL-POINTER 3 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (REPLACE X Y :START1 1))) (VALUES (EQT X RESULT) RESULT)) T "a123ef")
;; Loading (DEFTEST REPLACE-STRING.19 (LET* ((X (COPY-SEQ "abcdef")) (RESULT (REPLACE X X :START1 0 :END1 3 :START2 1 :END2 4))) (VALUES (EQT X RESULT) RESULT)) T "bcddef")
;; Loading (DEFTEST REPLACE-STRING.21 (LET* ((X (COPY-SEQ "abcdef")) (RESULT (REPLACE X X :START1 1 :END1 4 :START2 0 :END2 3))) (VALUES (EQT X RESULT) RESULT)) T "aabcef")
;; Loading (DEFTEST REPLACE-STRING.22 (DO-SPECIAL-STRINGS (S "abcdefg" NIL) (ASSERT (EQ S (REPLACE S "XYZ"))) (ASSERT (STRING= S "XYZdefg"))) NIL)
;; Loading (DEFTEST REPLACE-STRING.23 (DO-SPECIAL-STRINGS (S "abcdefg" NIL) (ASSERT (EQ S (REPLACE S "XYZ" :START1 1))) (ASSERT (STRING= S "aXYZefg"))) NIL)
;; Loading (DEFTEST REPLACE-STRING.24 (DO-SPECIAL-STRINGS (S "abcdefg" NIL) (ASSERT (EQ S (REPLACE S "XYZ" :START1 1 :END2 2))) (ASSERT (STRING= S "aXYdefg"))) NIL)
;; Loading (DEFTEST REPLACE-STRING.25 (DO-SPECIAL-STRINGS (S "abcdefg" NIL) (ASSERT (EQ S (REPLACE S "XYZ" :END1 2))) (ASSERT (STRING= S "XYcdefg"))) NIL)
;; Loading (DEFTEST REPLACE-STRING.26 (DO-SPECIAL-STRINGS (S "abcdefg" NIL) (ASSERT (EQ S (REPLACE S "XYZ" :START2 1))) (ASSERT (STRING= S "YZcdefg"))) NIL)
;; Loading (DEFTEST REPLACE.ORDER.1 (LET ((I 0) A B) (VALUES (REPLACE (PROGN (SETF A (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (PROGN (SETF B (INCF I)) (LIST (QUOTE E) (QUOTE F)))) I A B)) (E F C) 2 1 2)
;; Loading (DEFTEST REPLACE.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (REPLACE (PROGN (SETF A (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (PROGN (SETF B (INCF I)) (LIST (QUOTE E) (QUOTE F))) :START1 (PROGN (SETF C (INCF I)) 1) :END1 (PROGN (SETF D (INCF I)) 3) :START2 (PROGN (SETF E (INCF I)) 0) :END2 (PROGN (SETF F (INCF I)) 2)) I A B C D E F)) (A E F) 6 1 2 3 4 5 6)
;; Loading (DEFTEST REPLACE.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (REPLACE (PROGN (SETF A (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (PROGN (SETF B (INCF I)) (LIST (QUOTE E) (QUOTE F))) :END2 (PROGN (SETF C (INCF I)) 2) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) 3) :START1 (PROGN (SETF F (INCF I)) 1)) I A B C D E F)) (A E F) 6 1 2 3 4 5 6)
;; Loading (DEFTEST REPLACE.ALLOW-OTHER-KEYS.1 (REPLACE (COPY-SEQ "abcdefg") "xyz" :ALLOW-OTHER-KEYS T) "xyzdefg")
;; Loading (DEFTEST REPLACE.ALLOW-OTHER-KEYS.2 (REPLACE (COPY-SEQ "abcdefg") "xyz" :ALLOW-OTHER-KEYS NIL) "xyzdefg")
;; Loading (DEFTEST REPLACE.ALLOW-OTHER-KEYS.3 (REPLACE (COPY-SEQ "abcdefg") "xyz" :ALLOW-OTHER-KEYS T :BAD T) "xyzdefg")
;; Loading (DEFTEST REPLACE.ALLOW-OTHER-KEYS.4 (REPLACE (COPY-SEQ "abcdefg") "xyz" :BAD T :ALLOW-OTHER-KEYS T) "xyzdefg")
;; Loading (DEFTEST REPLACE.ALLOW-OTHER-KEYS.5 (REPLACE (COPY-SEQ "abcdefg") "xyz" :BAD1 T :ALLOW-OTHER-KEYS T :BAD2 T :ALLOW-OTHER-KEYS NIL :BAD3 NIL) "xyzdefg")
;; Loading (DEFTEST REPLACE.ALLOW-OTHER-KEYS.6 (REPLACE (COPY-SEQ "abcdefg") "xyz" :ALLOW-OTHER-KEYS T :START1 1) "axyzefg")
;; Loading (DEFTEST REPLACE.KEYWORDS.7 (REPLACE (COPY-SEQ "abcdefg") "xyz" :START1 0 :START2 0 :END1 3 :END2 3 :START1 1 :START2 1 :END1 2 :END1 2) "xyzdefg")
;; Loading (DEFTEST REPLACE.ERROR.1 (SIGNALS-ERROR (REPLACE) PROGRAM-ERROR) T)
;; Loading (DEFTEST REPLACE.ERROR.2 (SIGNALS-ERROR (REPLACE NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REPLACE.ERROR.3 (SIGNALS-ERROR (REPLACE NIL NIL :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST REPLACE.ERROR.4 (SIGNALS-ERROR (REPLACE NIL NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST REPLACE.ERROR.5 (SIGNALS-ERROR (REPLACE NIL NIL :ALLOW-OTHER-KEYS NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST REPLACE.ERROR.6 (SIGNALS-ERROR (REPLACE NIL NIL 1 2) PROGRAM-ERROR) T)
;; Loading (LOAD "subseq.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subseq.lsp C160A3D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "subseq-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/subseq-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN SUBSEQ-LIST.4-BODY NIL (BLOCK DONE (LET ((X (LOOP FOR I FROM 0 TO 19 COLLECT I))) (LOOP FOR I FROM 0 TO 20 DO (LOOP FOR J FROM I TO 20 DO (LET ((Y (SUBSEQ X I J))) (LOOP FOR E IN Y AND K FROM I TO (1- J) DO (UNLESS (EQLT E K) (RETURN-FROM DONE NIL))))))) T)).
;; Compiling form (DEFUN SUBSEQ-LIST.5-BODY NIL (BLOCK DONE (LET ((X (LOOP FOR I FROM 0 TO 29 COLLECT I))) (LOOP FOR I FROM 0 TO 30 DO (UNLESS (EQUALT (SUBSEQ X I) (LOOP FOR J FROM I TO 29 COLLECT J)) (RETURN-FROM DONE NIL)))) T)).
;; Compiling form (DEFUN SUBSEQ-LIST.6-BODY NIL (LET* ((X (MAKE-LIST 100)) (Z (LOOP FOR E ON X COLLECT E)) (Y (SUBSEQ X 0))) (LOOP FOR E ON X AND F ON Y AND G IN Z DO (WHEN (OR (NOT (EQT G E)) (NOT (EQLT (CAR E) (CAR F))) (CAR E) (EQT E F)) (RETURN NIL)) FINALLY (RETURN T)))).
;; Compiling form (DEFUN SUBSEQ-VECTOR.1-BODY NIL (BLOCK NIL (LET* ((X (MAKE-SEQUENCE (QUOTE VECTOR) 10 :INITIAL-ELEMENT (QUOTE A))) (Y (SUBSEQ X 4 8))) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (EQT E (QUOTE A)))) X) (RETURN 1)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (EQT E (QUOTE A)))) Y) (RETURN 2)) (UNLESS (EQLT (LENGTH X) 10) (RETURN 3)) (UNLESS (EQLT (LENGTH Y) 4) (RETURN 4)) (LOOP FOR I FROM 0 TO 9 DO (SETF (ELT X I) (QUOTE B))) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (EQT E (QUOTE A)))) Y) (RETURN 5)) (LOOP FOR I FROM 0 TO 3 DO (SETF (ELT Y I) (QUOTE C))) (OR (NOT (NOT (EVERY (FUNCTION (LAMBDA (E) (EQT E (QUOTE B)))) X))) 6)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN SUBSEQ-VECTOR.2-BODY NIL (BLOCK NIL (LET* ((X (MAKE-SEQUENCE (QUOTE (VECTOR FIXNUM)) 10 :INITIAL-ELEMENT 1)) (Y (SUBSEQ X 4 8))) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (EQLT E 1))) X) (RETURN 1)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (EQLT E 1))) Y) (RETURN 2)) (UNLESS (EQLT (LENGTH X) 10) (RETURN 3)) (UNLESS (EQLT (LENGTH Y) 4) (RETURN 4)) (LOOP FOR I FROM 0 TO 9 DO (SETF (ELT X I) 2)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (EQLT E 1))) Y) (RETURN 5)) (LOOP FOR I FROM 0 TO 3 DO (SETF (ELT Y I) 3)) (OR (NOT (NOT (EVERY (FUNCTION (LAMBDA (E) (EQLT E 2))) X))) 6)))).
;; Compiling form (DEFUN SUBSEQ-VECTOR.3-BODY NIL (BLOCK NIL (LET* ((X (MAKE-SEQUENCE (QUOTE (VECTOR SINGLE-FLOAT)) 10 :INITIAL-ELEMENT 1.0)) (Y (SUBSEQ X 4 8))) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) X) (RETURN 1)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) Y) (RETURN 2)) (UNLESS (EQLT (LENGTH X) 10) (RETURN 3)) (UNLESS (EQLT (LENGTH Y) 4) (RETURN 4)) (LOOP FOR I FROM 0 TO 9 DO (SETF (ELT X I) 2.0)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) Y) (RETURN 5)) (LOOP FOR I FROM 0 TO 3 DO (SETF (ELT Y I) 3.0)) (OR (NOT (NOT (EVERY (FUNCTION (LAMBDA (E) (= E 2.0))) X))) 6)))).
;; Compiling form (DEFUN SUBSEQ-VECTOR.4-BODY NIL (BLOCK NIL (LET* ((X (MAKE-SEQUENCE (QUOTE (VECTOR DOUBLE-FLOAT)) 10 :INITIAL-ELEMENT 1.0)) (Y (SUBSEQ X 4 8))) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) X) (RETURN 1)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) Y) (RETURN 2)) (UNLESS (EQLT (LENGTH X) 10) (RETURN 3)) (UNLESS (EQLT (LENGTH Y) 4) (RETURN 4)) (LOOP FOR I FROM 0 TO 9 DO (SETF (ELT X I) 2.0)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) Y) (RETURN 5)) (LOOP FOR I FROM 0 TO 3 DO (SETF (ELT Y I) 3.0)) (OR (NOT (NOT (EVERY (FUNCTION (LAMBDA (E) (= E 2.0))) X))) 6)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN SUBSEQ-VECTOR.5-BODY NIL (BLOCK NIL (LET* ((X (MAKE-SEQUENCE (QUOTE (VECTOR SHORT-FLOAT)) 10 :INITIAL-ELEMENT 1.0)) (Y (SUBSEQ X 4 8))) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) X) (RETURN 1)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) Y) (RETURN 2)) (UNLESS (EQLT (LENGTH X) 10) (RETURN 3)) (UNLESS (EQLT (LENGTH Y) 4) (RETURN 4)) (LOOP FOR I FROM 0 TO 9 DO (SETF (ELT X I) 2.0)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) Y) (RETURN 5)) (LOOP FOR I FROM 0 TO 3 DO (SETF (ELT Y I) 3.0)) (OR (NOT (NOT (EVERY (FUNCTION (LAMBDA (E) (= E 2.0))) X))) 6)))).
;; Compiling form (DEFUN SUBSEQ-VECTOR.6-BODY NIL (BLOCK NIL (LET* ((X (MAKE-SEQUENCE (QUOTE (VECTOR LONG-FLOAT)) 10 :INITIAL-ELEMENT 1.0)) (Y (SUBSEQ X 4 8))) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) X) (RETURN 1)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) Y) (RETURN 2)) (UNLESS (EQLT (LENGTH X) 10) (RETURN 3)) (UNLESS (EQLT (LENGTH Y) 4) (RETURN 4)) (LOOP FOR I FROM 0 TO 9 DO (SETF (ELT X I) 2.0)) (UNLESS (EVERY (FUNCTION (LAMBDA (E) (= E 1.0))) Y) (RETURN 5)) (LOOP FOR I FROM 0 TO 3 DO (SETF (ELT Y I) 3.0)) (OR (NOT (NOT (EVERY (FUNCTION (LAMBDA (E) (= E 2.0))) X))) 6)))).
;; Compiling form (DEFUN SUBSEQ-STRING.1-BODY NIL (LET* ((S1 "abcdefgh") (LEN (LENGTH S1))) (LOOP FOR START FROM 0 BELOW LEN ALWAYS (STRING= (SUBSEQ S1 START) (COERCE (LOOP FOR I FROM START TO (1- LEN) COLLECT (ELT S1 I)) (QUOTE STRING)))))).
;; Compiling form (DEFUN SUBSEQ-STRING.2-BODY NIL (LET* ((S1 "abcdefgh") (LEN (LENGTH S1))) (LOOP FOR START FROM 0 BELOW LEN ALWAYS (LOOP FOR END FROM (1+ START) TO LEN ALWAYS (STRING= (SUBSEQ S1 START END) (COERCE (LOOP FOR I FROM START BELOW END COLLECT (ELT S1 I)) (QUOTE STRING))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN SUBSEQ-STRING.3-BODY NIL (LET* ((S1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 8 :ELEMENT-TYPE (QUOTE CHARACTER))) (LEN (LENGTH S1))) (AND (EQLT LEN 8) (LOOP FOR START FROM 0 BELOW LEN ALWAYS (STRING= (SUBSEQ S1 START) (COERCE (LOOP FOR I FROM START TO (1- LEN) COLLECT (ELT S1 I)) (QUOTE STRING)))) (LOOP FOR START FROM 0 BELOW LEN ALWAYS (LOOP FOR END FROM (1+ START) TO LEN ALWAYS (STRING= (SUBSEQ S1 START END) (COERCE (LOOP FOR I FROM START BELOW END COLLECT (ELT S1 I)) (QUOTE STRING)))))))).
;; Compiling form (DEFUN SUBSEQ-BIT-VECTOR.1-BODY NIL (LET* ((S1 #*11001000) (LEN (LENGTH S1))) (LOOP FOR START FROM 0 BELOW LEN ALWAYS (EQUALP (SUBSEQ S1 START) (COERCE (LOOP FOR I FROM START TO (1- LEN) COLLECT (ELT S1 I)) (QUOTE BIT-VECTOR)))))).
;; Compiling form (DEFUN SUBSEQ-BIT-VECTOR.2-BODY NIL (LET* ((S1 #*01101011) (LEN (LENGTH S1))) (LOOP FOR START FROM 0 BELOW LEN ALWAYS (LOOP FOR END FROM (1+ START) TO LEN ALWAYS (EQUALP (SUBSEQ S1 START END) (COERCE (LOOP FOR I FROM START BELOW END COLLECT (ELT S1 I)) (QUOTE BIT-VECTOR))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN SUBSEQ-BIT-VECTOR.3-BODY NIL (LET* ((S1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS #*1101100110 :FILL-POINTER 8 :ELEMENT-TYPE (QUOTE BIT))) (LEN (LENGTH S1))) (AND (EQLT LEN 8) (LOOP FOR START FROM 0 BELOW LEN ALWAYS (EQUALP (SUBSEQ S1 START) (COERCE (LOOP FOR I FROM START TO (1- LEN) COLLECT (ELT S1 I)) (QUOTE BIT-VECTOR)))) (LOOP FOR START FROM 0 BELOW LEN ALWAYS (LOOP FOR END FROM (1+ START) TO LEN ALWAYS (EQUALP (SUBSEQ S1 START END) (COERCE (LOOP FOR I FROM START BELOW END COLLECT (ELT S1 I)) (QUOTE BIT-VECTOR)))))))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subseq-aux.llf C19F3497>
;; Loading (DEFTEST SUBSEQ-LIST.1 (SUBSEQ (QUOTE (A B C D E)) 0 0) NIL)
;; Loading (DEFTEST SUBSEQ-LIST.2 (SUBSEQ (QUOTE (A B C)) 0) (A B C))
;; Loading (DEFTEST SUBSEQ-LIST.3 (SUBSEQ (QUOTE (A B C)) 1) (B C))
;; Loading (DEFTEST SUBSEQ-LIST.4 (SUBSEQ-LIST.4-BODY) T)
;; Loading (DEFTEST SUBSEQ-LIST.5 (SUBSEQ-LIST.5-BODY) T)
;; Loading (DEFTEST SUBSEQ-LIST.6 (SUBSEQ-LIST.6-BODY) T)
;; Loading (DEFTEST SUBSEQ-LIST.7 (LET ((X (LOOP FOR I FROM 0 TO 9 COLLECT I))) (SETF (SUBSEQ X 0 3) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) X) (A B C 3 4 5 6 7 8 9))
;; Loading (DEFTEST SUBSEQ-LIST.8 (LET* ((X (QUOTE (A B C D E))) (Y (COPY-SEQ X))) (SETF (SUBSEQ Y 0) (QUOTE (F G H))) (LIST X Y)) ((A B C D E) (F G H D E)))
;; Loading (DEFTEST SUBSEQ-LIST.9 (LET* ((X (QUOTE (A B C D E))) (Y (COPY-SEQ X))) (SETF (SUBSEQ Y 1 3) (QUOTE (1 2 3 4 5))) (LIST X Y)) ((A B C D E) (A 1 2 D E)))
;; Loading (DEFTEST SUBSEQ-LIST.10 (LET* ((X (QUOTE (A B C D E))) (Y (COPY-SEQ X))) (SETF (SUBSEQ Y 5) (QUOTE (1 2 3 4 5))) (LIST X Y)) ((A B C D E) (A B C D E)))
;; Loading (DEFTEST SUBSEQ-LIST.11 (LET* ((X (QUOTE (A B C D E))) (Y (COPY-SEQ X))) (SETF (SUBSEQ Y 2 5) (QUOTE (1))) (LIST X Y)) ((A B C D E) (A B 1 D E)))
;; Loading (DEFTEST SUBSEQ-LIST.12 (LET* ((X (QUOTE (A B C D E))) (Y (COPY-SEQ X))) (SETF (SUBSEQ Y 0 0) (QUOTE (1 2))) (LIST X Y)) ((A B C D E) (A B C D E)))
;; Loading (DEFTEST SUBSEQ-VECTOR.1 (SUBSEQ-VECTOR.1-BODY) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.2 (SUBSEQ-VECTOR.2-BODY) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.3 (SUBSEQ-VECTOR.3-BODY) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.4 (SUBSEQ-VECTOR.4-BODY) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.5 (SUBSEQ-VECTOR.5-BODY) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.6 (SUBSEQ-VECTOR.6-BODY) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.7 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)))) (Y (SUBSEQ X 2 8))) (EQUAL-ARRAY Y (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (C D E F G H))))) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.8 (LET* ((X (MAKE-ARRAY (QUOTE (200)) :INITIAL-ELEMENT 107 :ELEMENT-TYPE (QUOTE FIXNUM))) (Y (SUBSEQ X 17 95))) (AND (EQLT (LENGTH Y) (- 95 17)) (EQUAL-ARRAY Y (MAKE-ARRAY (LIST (- 95 17)) :INITIAL-ELEMENT 107 :ELEMENT-TYPE (QUOTE FIXNUM))))) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.9 (LET* ((X (MAKE-ARRAY (QUOTE (1000)) :INITIAL-ELEMENT 1.76 :ELEMENT-TYPE (QUOTE SINGLE-FLOAT))) (LO 164) (HI 873) (Y (SUBSEQ X LO HI))) (AND (EQLT (LENGTH Y) (- HI LO)) (EQUAL-ARRAY Y (MAKE-ARRAY (LIST (- HI LO)) :INITIAL-ELEMENT 1.76 :ELEMENT-TYPE (QUOTE SINGLE-FLOAT))))) T)
;; Loading (DEFTEST SUBSEQ-VECTOR.10 (LET* ((X (MAKE-ARRAY (QUOTE (2000)) :INITIAL-ELEMENT 31415.927734 :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT))) (LO 731) (HI 1942) (Y (SUBSEQ X LO HI))) (AND (EQLT (LENGTH Y) (- HI LO)) (EQUAL-ARRAY Y (MAKE-ARRAY (LIST (- HI LO)) :INITIAL-ELEMENT 31415.927734 :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT))))) T)
;; Loading (DEFTEST SUBSEQ-STRING.1 (SUBSEQ-STRING.1-BODY) T)
;; Loading (DEFTEST SUBSEQ-STRING.2 (SUBSEQ-STRING.2-BODY) T)
;; Loading (DEFTEST SUBSEQ-STRING.3 (SUBSEQ-STRING.3-BODY) T)
;; Loading (DEFTEST SUBSEQ.SPECIALIZED-STRING.1 (LET* ((S0 "abcde") (LEN (LENGTH S0))) (DO-SPECIAL-STRINGS (S "abcde" NIL) (LOOP FOR I FROM 0 BELOW LEN FOR S1 = (SUBSEQ S I) DO (ASSERT (TYPEP S1 (QUOTE SIMPLE-ARRAY))) DO (ASSERT (STRING= (SUBSEQ S I) (SUBSEQ S0 I))) DO (LOOP FOR J FROM I TO LEN FOR S2 = (SUBSEQ S I J) DO (ASSERT (TYPEP S2 (QUOTE SIMPLE-ARRAY))) (ASSERT (STRING= S2 (SUBSEQ S0 I J))))))) NIL)
;; Loading (DEFTEST SUBSEQ.SPECIALIZED-VECTOR.1 (LET* ((V0 #(1 0 1 1 0 1 1 0)) (LEN (LENGTH V0))) (DO-SPECIAL-INTEGER-VECTORS (V (COPY-SEQ V0) NIL) (LOOP FOR I FROM 0 BELOW LEN FOR V1 = (SUBSEQ V I) DO (ASSERT (TYPEP V1 (QUOTE SIMPLE-ARRAY))) DO (ASSERT (EQUALP (SUBSEQ V I) (SUBSEQ V0 I))) DO (LOOP FOR J FROM I TO LEN FOR V2 = (SUBSEQ V I J) DO (ASSERT (TYPEP V2 (QUOTE SIMPLE-ARRAY))) (ASSERT (EQUALP V2 (SUBSEQ V0 I J))))))) NIL)
;; Loading (DEFTEST SUBSEQ.SPECIALIZED-VECTOR.2 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT)) FOR LEN = 10 FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COERCE I TYPE)) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE TYPE :INITIAL-CONTENTS VALS) FOR RESULT = (SUBSEQ VEC 1 9) UNLESS (AND (= (LENGTH RESULT) 8) (EQUAL (ARRAY-ELEMENT-TYPE VEC) (ARRAY-ELEMENT-TYPE RESULT)) (EQUALP RESULT (APPLY (FUNCTION VECTOR) (SUBSEQ VALS 1 9)))) COLLECT (LIST TYPE VALS RESULT)) NIL)
;; Loading (DEFTEST SUBSEQ.SPECIALIZED-VECTOR.3 (LOOP FOR ETYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT INTEGER RATIONAL)) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA ETYPE))) FOR LEN = 10 FOR VALS = (LOOP FOR I FROM 1 TO LEN COLLECT (COMPLEX (COERCE I ETYPE) (COERCE (- I) ETYPE))) FOR VEC = (MAKE-ARRAY LEN :ELEMENT-TYPE TYPE :INITIAL-CONTENTS VALS) FOR RESULT = (SUBSEQ VEC 1 9) UNLESS (AND (= (LENGTH RESULT) 8) (EQUAL (ARRAY-ELEMENT-TYPE VEC) (ARRAY-ELEMENT-TYPE RESULT)) (EQUALP RESULT (APPLY (FUNCTION VECTOR) (SUBSEQ VALS 1 9)))) COLLECT (LIST TYPE VALS RESULT)) NIL)
;; Loading (DEFTEST SUBSEQ-BIT-VECTOR.1 (SUBSEQ-BIT-VECTOR.1-BODY) T)
;; Loading (DEFTEST SUBSEQ-BIT-VECTOR.2 (SUBSEQ-BIT-VECTOR.2-BODY) T)
;; Loading (DEFTEST SUBSEQ-BIT-VECTOR.3 (SUBSEQ-BIT-VECTOR.3-BODY) T)
;; Loading (DEFTEST SUBSEQ.ORDER.1 (LET ((I 0) A B C) (VALUES (SUBSEQ (PROGN (SETF A (INCF I)) "abcdefgh") (PROGN (SETF B (INCF I)) 1) (PROGN (SETF C (INCF I)) 4)) I A B C)) "bcd" 3 1 2 3)
;; Loading (DEFTEST SUBSEQ.ORDER.2 (LET ((I 0) A B) (VALUES (SUBSEQ (PROGN (SETF A (INCF I)) "abcdefgh") (PROGN (SETF B (INCF I)) 1)) I A B)) "bcdefgh" 2 1 2)
;; Loading (DEFTEST SUBSEQ.ORDER.3 (LET ((I 0) A B C D (S (COPY-SEQ "abcdefgh"))) (VALUES (SETF (SUBSEQ (PROGN (SETF A (INCF I)) S) (PROGN (SETF B (INCF I)) 1) (PROGN (SETF C (INCF I)) 4)) (PROGN (SETF D (INCF I)) "xyz")) S I A B C D)) "xyz" "axyzefgh" 4 1 2 3 4)
;; Loading (DEFTEST SUBSEQ.ORDER.4 (LET ((I 0) A B C (S (COPY-SEQ "abcd"))) (VALUES (SETF (SUBSEQ (PROGN (SETF A (INCF I)) S) (PROGN (SETF B (INCF I)) 1)) (PROGN (SETF C (INCF I)) "xyz")) S I A B C)) "xyz" "axyz" 3 1 2 3)
;; Loading (DEF-FOLD-TEST SUBSEQ.FOLD.1 (SUBSEQ (QUOTE (1 2 3)) 0))
;; Loading (DEF-FOLD-TEST SUBSEQ.FOLD.2 (SUBSEQ #(1 2 3) 0))
;; Loading (DEF-FOLD-TEST SUBSEQ.FOLD.3 (SUBSEQ #*011101 0))
;; Loading (DEF-FOLD-TEST SUBSEQ.FOLD.4 (SUBSEQ "abcdef" 0))
;; Loading (DEFTEST SUBSEQ.ERROR.1 (SIGNALS-ERROR (SUBSEQ) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSEQ.ERROR.2 (SIGNALS-ERROR (SUBSEQ NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSEQ.ERROR.3 (SIGNALS-ERROR (SUBSEQ NIL 0 0 0) PROGRAM-ERROR) T)
;; Loading (LOAD "substitute.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/substitute.lsp C1D4A167>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SUBSTITUTE-LIST.1 (LET ((X (QUOTE NIL))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X) X)) NIL NIL)
;; Loading (DEFTEST SUBSTITUTE-LIST.2 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.3 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT NIL) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.4 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 2) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.5 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 1) X)) (B B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.6 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 0) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.7 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT -1) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.8 (LET ((X (QUOTE NIL))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T) X)) NIL NIL)
;; Loading (DEFTEST SUBSTITUTE-LIST.9 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.10 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T :COUNT NIL) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.11 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 2 :FROM-END T) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.12 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 1 :FROM-END T) X)) (A B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.13 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 0 :FROM-END T) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.14 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT -1 :FROM-END T) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-LIST.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-LIST.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :FROM-END T))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-LIST.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :COUNT C))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-LIST.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-LIST.19 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE X) 5 X :TEST (FUNCTION (LAMBDA (A B) (<= (ABS (- A B)) 2)))))) (AND (EQUAL ORIG X) RESULT)) (1 2 X X X X X 8 9))
;; Loading (DEFTEST SUBSTITUTE-LIST.20 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (C -4) (RESULT (SUBSTITUTE (QUOTE X) 5 X :TEST (FUNCTION (LAMBDA (A B) (INCF C 2) (= (+ B C) A)))))) (AND (EQUAL ORIG X) RESULT)) (1 2 X 4 5 6 7 8 9))
;; Loading (DEFTEST SUBSTITUTE-LIST.21 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (C 5) (RESULT (SUBSTITUTE (QUOTE X) 9 X :TEST (FUNCTION (LAMBDA (A B) (INCF C -2) (= (+ B C) A))) :FROM-END T))) (AND (EQUAL ORIG X) RESULT)) (1 2 3 4 5 6 7 X 9))
;; Loading (DEFTEST SUBSTITUTE-LIST.22 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (C -4) (RESULT (SUBSTITUTE (QUOTE X) 5 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C 2) (/= (+ B C) A)))))) (AND (EQUAL ORIG X) RESULT)) (1 2 X 4 5 6 7 8 9))
;; Loading (DEFTEST SUBSTITUTE-LIST.23 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (C 5) (RESULT (SUBSTITUTE (QUOTE X) 9 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C -2) (/= (+ B C) A))) :FROM-END T))) (AND (EQUAL ORIG X) RESULT)) (1 2 3 4 5 6 7 X 9))
;; Loading (DEFTEST SUBSTITUTE-LIST.24 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR)))) (AND (EQUAL ORIG X) RESULT)) ((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-LIST.25 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :START 1 :END 5))) (AND (EQUAL ORIG X) RESULT)) ((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-LIST.26 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :TEST (COMPLEMENT (FUNCTION EQL))))) (AND (EQUAL ORIG X) RESULT)) ((A 1) (A 10) (A 3) (A 10) (A 10) (A 6) (A 10)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SUBSTITUTE-LIST.27 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :TEST-NOT (FUNCTION EQL)))) (AND (EQUAL ORIG X) RESULT)) ((A 1) (A 10) (A 3) (A 10) (A 10) (A 6) (A 10)))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.1 (LET ((X #())) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X) X)) #() #())
;; Loading (DEFTEST SUBSTITUTE-VECTOR.2 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.3 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT NIL) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.4 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 2) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.5 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 1) X)) #(B B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.6 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 0) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.7 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT -1) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.8 (LET ((X #())) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T) X)) #() #())
;; Loading (DEFTEST SUBSTITUTE-VECTOR.9 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.10 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T :COUNT NIL) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.11 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 2 :FROM-END T) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.12 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 1 :FROM-END T) X)) #(A B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.13 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 0 :FROM-END T) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.14 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT -1 :FROM-END T) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-VECTOR.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-VECTOR.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-VECTOR.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-VECTOR.19 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE X) 5 X :TEST (FUNCTION (LAMBDA (A B) (<= (ABS (- A B)) 2)))))) (AND (EQUALP ORIG X) RESULT)) #(1 2 X X X X X 8 9))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.20 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (C -4) (RESULT (SUBSTITUTE (QUOTE X) 5 X :TEST (FUNCTION (LAMBDA (A B) (INCF C 2) (= (+ B C) A)))))) (AND (EQUALP ORIG X) RESULT)) #(1 2 X 4 5 6 7 8 9))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.21 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (C 5) (RESULT (SUBSTITUTE (QUOTE X) 9 X :TEST (FUNCTION (LAMBDA (A B) (INCF C -2) (= (+ B C) A))) :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #(1 2 3 4 5 6 7 X 9))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.22 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (C -4) (RESULT (SUBSTITUTE (QUOTE X) 5 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C 2) (/= (+ B C) A)))))) (AND (EQUALP ORIG X) RESULT)) #(1 2 X 4 5 6 7 8 9))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.23 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (C 5) (RESULT (SUBSTITUTE (QUOTE X) 9 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C -2) (/= (+ B C) A))) :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #(1 2 3 4 5 6 7 X 9))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.24 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR)))) (AND (EQUALP ORIG X) RESULT)) #((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.25 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :START 1 :END 5))) (AND (EQUALP ORIG X) RESULT)) #((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.26 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :TEST (COMPLEMENT (FUNCTION EQL))))) (AND (EQUALP ORIG X) RESULT)) #((A 1) (A 10) (A 3) (A 10) (A 10) (A 6) (A 10)))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.27 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :TEST-NOT (FUNCTION EQL)))) (AND (EQUALP ORIG X) RESULT)) #((A 1) (A 10) (A 3) (A 10) (A 10) (A 6) (A 10)))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE (QUOTE Z) (QUOTE A) X))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE (QUOTE Z) (QUOTE A) X :FROM-END T))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE (QUOTE Z) (QUOTE A) X :COUNT 1))) RESULT) #(Z B A C B))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE (QUOTE Z) (QUOTE A) X :FROM-END T :COUNT 1))) RESULT) #(A B Z C B))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.32 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (SUBSTITUTE (QUOTE X) (QUOTE C) V2 :COUNT 1) V1)) #(D A B X D A B C) #(A B C D A B C D A B C D A B C D))
;; Loading (DEFTEST SUBSTITUTE-VECTOR.33 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (SUBSTITUTE (QUOTE X) (QUOTE C) V2 :COUNT 1 :FROM-END T) V1)) #(D A B C D A B X) #(A B C D A B C D A B C D A B C D))
;; Loading (DEFTEST SUBSTITUTE-STRING.1 (LET ((X "")) (VALUES (SUBSTITUTE #\b #\a X) X)) "" "")
;; Loading (DEFTEST SUBSTITUTE-STRING.2 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.3 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT NIL) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.4 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT 2) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.5 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT 1) X)) "bbac" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.6 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT 0) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.7 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT -1) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.8 (LET ((X "")) (VALUES (SUBSTITUTE #\b #\a X :FROM-END T) X)) "" "")
;; Loading (DEFTEST SUBSTITUTE-STRING.9 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :FROM-END T) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.10 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :FROM-END T :COUNT NIL) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.11 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT 2 :FROM-END T) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.12 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT 1 :FROM-END T) X)) "abbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.13 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT 0 :FROM-END T) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.14 (LET ((X "abac")) (VALUES (SUBSTITUTE #\b #\a X :COUNT -1 :FROM-END T) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-STRING.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE #\x #\a X :START I :END J))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST SUBSTITUTE-STRING.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE #\x #\a X :START I :END J :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST SUBSTITUTE-STRING.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE #\x #\a X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT #\a)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-STRING.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE #\x #\a X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-STRING.19 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE #\x #\5 X :TEST (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (<= (ABS (- A B)) 2)))))) (AND (EQUALP ORIG X) RESULT)) "12xxxxx89")
;; Loading (DEFTEST SUBSTITUTE-STRING.20 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (C -4) (RESULT (SUBSTITUTE #\x #\5 X :TEST (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (INCF C 2) (= (+ B C) A)))))) (AND (EQUALP ORIG X) RESULT)) "12x456789")
;; Loading (DEFTEST SUBSTITUTE-STRING.21 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (C 5) (RESULT (SUBSTITUTE #\x #\9 X :TEST (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (INCF C -2) (= (+ B C) A))) :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) "1234567x9")
;; Loading (DEFTEST SUBSTITUTE-STRING.22 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (C -4) (RESULT (SUBSTITUTE #\x #\5 X :TEST-NOT (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (INCF C 2) (/= (+ B C) A)))))) (AND (EQUALP ORIG X) RESULT)) "12x456789")
;; Loading (DEFTEST SUBSTITUTE-STRING.23 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (C 5) (RESULT (SUBSTITUTE #\x #\9 X :TEST-NOT (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (INCF C -2) (/= (+ B C) A))) :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) "1234567x9")
;; Loading (DEFTEST SUBSTITUTE-STRING.24 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE #\a #\1 X :KEY (FUNCTION NEXTDIGIT)))) (AND (EQUALP ORIG X) RESULT)) "a1a2342a15")
;; Loading (DEFTEST SUBSTITUTE-STRING.25 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE #\a #\1 X :KEY (FUNCTION NEXTDIGIT) :START 1 :END 6))) (AND (EQUALP ORIG X) RESULT)) "01a2342015")
;; Loading (DEFTEST SUBSTITUTE-STRING.26 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE #\a #\1 X :KEY (FUNCTION NEXTDIGIT) :TEST (COMPLEMENT (FUNCTION EQL))))) (AND (EQUALP ORIG X) RESULT)) "0a0aaaa0aa")
;; Loading (DEFTEST SUBSTITUTE-STRING.27 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE #\a #\1 X :KEY (FUNCTION NEXTDIGIT) :TEST-NOT (FUNCTION EQL)))) (AND (EQUALP ORIG X) RESULT)) "0a0aaaa0aa")
;; Loading (DEFTEST SUBSTITUTE-STRING.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE #\z #\a X))) RESULT) "zbzcb")
;; Loading (DEFTEST SUBSTITUTE-STRING.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE #\z #\a X :FROM-END T))) RESULT) "zbzcb")
;; Loading (DEFTEST SUBSTITUTE-STRING.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE #\z #\a X :COUNT 1))) RESULT) "zbacb")
;; Loading (DEFTEST SUBSTITUTE-STRING.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE #\z #\a X :FROM-END T :COUNT 1))) RESULT) "abzcb")
;; Loading (DEFTEST SUBSTITUTE-STRING.32 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (SUBSTITUTE #\! #\a S) "xyz!bcxyz!bc")) (ASSERT (STRING= (SUBSTITUTE #\! #\a S :COUNT 1) "xyz!bcxyzabc")) (ASSERT (STRING= (SUBSTITUTE #\! #\a S :COUNT 1 :FROM-END T) "xyzabcxyz!bc")) (ASSERT (STRING= S "xyzabcxyzabc"))) NIL)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.1 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 0 1 X))) (AND (EQUALP ORIG X) RESULT)) #*)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.2 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X))) (AND (EQUALP ORIG X) RESULT)) #*)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.3 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 0 1 X))) (AND (EQUALP ORIG X) RESULT)) #*000000)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.4 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.5 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :START 1))) (AND (EQUALP ORIG X) RESULT)) #*011111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.6 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 0 1 X :START 2 :END NIL))) (AND (EQUALP ORIG X) RESULT)) #*010000)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.7 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :END 4))) (AND (EQUALP ORIG X) RESULT)) #*111101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.8 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 0 1 X :END NIL))) (AND (EQUALP ORIG X) RESULT)) #*000000)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.9 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 0 1 X :END 3))) (AND (EQUALP ORIG X) RESULT)) #*000101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.10 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 0 1 X :START 2 :END 4))) (AND (EQUALP ORIG X) RESULT)) #*010001)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.11 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :START 2 :END 4))) (AND (EQUALP ORIG X) RESULT)) #*011101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.12 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :COUNT 1))) (AND (EQUALP ORIG X) RESULT)) #*110101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.13 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :COUNT 0))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.14 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :COUNT -1))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.15 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :COUNT 1 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.16 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :COUNT 0 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.17 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :COUNT -1 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.18 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :COUNT NIL))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.19 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 0 X :COUNT NIL :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.20 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*0000000000) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE 1 0 X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST I :INITIAL-ELEMENT 0) (MAKE-LIST C :INITIAL-ELEMENT 1) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT 0)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.21 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*1111111111) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE 0 1 X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST (- J C) :INITIAL-ELEMENT 1) (MAKE-LIST C :INITIAL-ELEMENT 0) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT 1)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.22 (LET* ((ORIG #*0101010101) (X (COPY-SEQ ORIG)) (C 0) (RESULT (SUBSTITUTE 1 0 X :TEST (FUNCTION (LAMBDA (A B) (INCF C) (AND (<= 2 C 5) (= A B))))))) (AND (EQUALP ORIG X) RESULT)) #*0111110101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.23 (LET* ((ORIG #*0101010101) (X (COPY-SEQ ORIG)) (C 0) (RESULT (SUBSTITUTE 1 0 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C) (NOT (AND (<= 2 C 5) (= A B)))))))) (AND (EQUALP ORIG X) RESULT)) #*0111110101)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.24 (LET* ((ORIG #*0101010101) (X (COPY-SEQ ORIG)) (C 0) (RESULT (SUBSTITUTE 1 0 X :TEST (FUNCTION (LAMBDA (A B) (INCF C) (AND (<= 2 C 5) (= A B)))) :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*0101011111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.25 (LET* ((ORIG #*0101010101) (X (COPY-SEQ ORIG)) (C 0) (RESULT (SUBSTITUTE 1 0 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C) (NOT (AND (<= 2 C 5) (= A B))))) :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*0101011111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.26 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 1 X :KEY (FUNCTION 1+)))) (AND (EQUALP ORIG X) RESULT)) #*11111111111111111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.27 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 1 1 X :KEY (FUNCTION 1+) :START 1 :END 10))) (AND (EQUALP ORIG X) RESULT)) #*01111111111010110)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.28 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 0 1 X :KEY (FUNCTION 1+) :TEST (COMPLEMENT (FUNCTION EQL))))) (AND (EQUALP ORIG X) RESULT)) #*00000000000000000)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.29 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE 0 1 X :KEY (FUNCTION 1+) :TEST-NOT (FUNCTION EQL)))) (AND (EQUALP ORIG X) RESULT)) #*00000000000000000)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE 1 0 X))) RESULT) #*11111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE 1 0 X :FROM-END T))) RESULT) #*11111)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.32 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE 1 0 X :COUNT 1))) RESULT) #*11011)
;; Loading (DEFTEST SUBSTITUTE-BIT-VECTOR.33 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE 1 0 X :FROM-END T :COUNT 1))) RESULT) #*01111)
;; Loading (DEFHARMLESS SUBSTITUTE.TEST-AND-TEST-NOT.1 (SUBSTITUTE (QUOTE B) (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE B)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBSTITUTE.TEST-AND-TEST-NOT.2 (SUBSTITUTE (QUOTE B) (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE B)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBSTITUTE.TEST-AND-TEST-NOT.3 (SUBSTITUTE (QUOTE B) (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE B)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBSTITUTE.TEST-AND-TEST-NOT.4 (SUBSTITUTE (QUOTE B) (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE B)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBSTITUTE.TEST-AND-TEST-NOT.5 (SUBSTITUTE #\b #\a (COPY-SEQ "abcdab") :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBSTITUTE.TEST-AND-TEST-NOT.6 (SUBSTITUTE #\b #\a (COPY-SEQ "abcdab") :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBSTITUTE.TEST-AND-TEST-NOT.7 (SUBSTITUTE 1 0 (COPY-SEQ #*001101001) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS SUBSTITUTE.TEST-AND-TEST-NOT.8 (SUBSTITUTE 0 1 (COPY-SEQ #*1100110101) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST SUBSTITUTE.ORDER.1 (LET ((I 0) A B C D E F G H) (VALUES (SUBSTITUTE (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) NIL) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :COUNT (PROGN (SETF D (INCF I)) 2) :START (PROGN (SETF E (INCF I)) 0) :END (PROGN (SETF F (INCF I)) 7) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :FROM-END (SETF H (INCF I))) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST SUBSTITUTE.ORDER.2 (LET ((I 0) A B C D E F G H) (VALUES (SUBSTITUTE (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) NIL) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :FROM-END (SETF H (INCF I)) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF F (INCF I)) 7) :START (PROGN (SETF E (INCF I)) 0) :COUNT (PROGN (SETF D (INCF I)) 2)) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 8 7 6 5 4)
;; Loading (DEFTEST SUBSTITUTE.ALLOW-OTHER-KEYS.1 (SUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE.ALLOW-OTHER-KEYS.2 (SUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE.ALLOW-OTHER-KEYS.3 (SUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE.ALLOW-OTHER-KEYS.4 (SUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE.ALLOW-OTHER-KEYS.5 (SUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) (A 2 0 3 A 0 3))
;; Loading (DEFTEST SUBSTITUTE.KEYWORDS.6 (SUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) (A 2 0 3 A 0 3))
;; Loading (DEFTEST SUBSTITUTE.ALLOW-OTHER-KEYS.7 (SUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE.ALLOW-OTHER-KEYS.8 (SUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEF-FOLD-TEST SUBSTITUTE.FOLD.1 (SUBSTITUTE (QUOTE Z) (QUOTE B) (QUOTE (A B C))))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-FOLD-TEST SUBSTITUTE.FOLD.2 (SUBSTITUTE (QUOTE Z) (QUOTE B) #(A B C)))
;; Loading (DEF-FOLD-TEST SUBSTITUTE.FOLD.3 (SUBSTITUTE 0 1 #*001101))
;; Loading (DEF-FOLD-TEST SUBSTITUTE.FOLD.4 (SUBSTITUTE #\a #\b "abcebadfke"))
;; Loading (DEFTEST SUBSTITUTE.ERROR.1 (SIGNALS-ERROR (SUBSTITUTE) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.2 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.3 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.4 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.5 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.6 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.7 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.8 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.9 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.10 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.11 (SIGNALS-ERROR (SUBSTITUTE (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SUBSTITUTE (QUOTE A) (QUOTE B) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (LOAD "substitute-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/substitute-if.lsp C1561E67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.1 (LET ((X (QUOTE NIL))) (VALUES (SUBSTITUTE-IF (QUOTE B) (FUNCTION IDENTITY) X) X)) NIL NIL)
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.2 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.3 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT NIL) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.4 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 2) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.5 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 1) X)) (B B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.6 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 0) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.7 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT -1) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.8 (LET ((X (QUOTE NIL))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T) X)) NIL NIL)
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.9 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.10 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T :COUNT NIL) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.11 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 2 :FROM-END T) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.12 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 1 :FROM-END T) X)) (A B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.13 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 0 :FROM-END T) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.14 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT -1 :FROM-END T) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :FROM-END T))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :COUNT C))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.1 (LET ((X #())) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X) X)) #() #())
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.2 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.3 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT NIL) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.4 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 2) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.5 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 1) X)) #(B B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.6 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 0) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.7 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT -1) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.8 (LET ((X #())) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T) X)) #() #())
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.9 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.10 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T :COUNT NIL) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.11 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 2 :FROM-END T) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.12 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 1 :FROM-END T) X)) #(A B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.13 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 0 :FROM-END T) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.14 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT -1 :FROM-END T) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE-IF (QUOTE Z) (IS-EQL-P (QUOTE A)) X))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE-IF (QUOTE Z) (IS-EQL-P (QUOTE A)) X :FROM-END T))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE-IF (QUOTE Z) (IS-EQL-P (QUOTE A)) X :COUNT 1))) RESULT) #(Z B A C B))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE-IF (QUOTE Z) (IS-EQL-P (QUOTE A)) X :FROM-END T :COUNT 1))) RESULT) #(A B Z C B))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.32 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE C)) V2 :COUNT 1) V1)) #(D A B X D A B C) #(A B C D A B C D A B C D A B C D))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.33 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (SUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE C)) V2 :COUNT 1 :FROM-END T) V1)) #(D A B C D A B X) #(A B C D A B C D A B C D A B C D))
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.1 (LET ((X "")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X) X)) "" "")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.2 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.3 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT NIL) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.4 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 2) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.5 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 1) X)) "bbac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.6 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 0) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.7 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT -1) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.8 (LET ((X "")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :FROM-END T) X)) "" "")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.9 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :FROM-END T) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.10 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :FROM-END T :COUNT NIL) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.11 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 2 :FROM-END T) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.12 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 1 :FROM-END T) X)) "abbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.13 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 0 :FROM-END T) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.14 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT -1 :FROM-END T) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF #\x (IS-EQL-P #\a) X :START I :END J))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF #\x (IS-EQL-P #\a) X :START I :END J :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF #\x (IS-EQL-P #\a) X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT #\a)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF #\x (IS-EQL-P #\a) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE-IF #\z (IS-EQL-P #\a) X))) RESULT) "zbzcb")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE-IF #\z (IS-EQL-P #\a) X :FROM-END T))) RESULT) "zbzcb")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE-IF #\z (IS-EQL-P #\a) X :COUNT 1))) RESULT) "zbacb")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE-IF #\z (IS-EQL-P #\a) X :FROM-END T :COUNT 1))) RESULT) "abzcb")
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.1 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 0 (IS-EQL-P 1) X))) (AND (EQUALP ORIG X) RESULT)) #*)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.2 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (QUOTE ZEROP) X))) (AND (EQUALP ORIG X) RESULT)) #*)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.3 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 0 (IS-EQL-P 1) X))) (AND (EQUALP ORIG X) RESULT)) #*000000)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.4 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.5 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :START 1))) (AND (EQUALP ORIG X) RESULT)) #*011111)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.6 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 0 (IS-EQL-P 1) X :START 2 :END NIL))) (AND (EQUALP ORIG X) RESULT)) #*010000)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.7 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :END 4))) (AND (EQUALP ORIG X) RESULT)) #*111101)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.8 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 0 (IS-EQL-P 1) X :END NIL))) (AND (EQUALP ORIG X) RESULT)) #*000000)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.9 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 0 (IS-EQL-P 1) X :END 3))) (AND (EQUALP ORIG X) RESULT)) #*000101)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.10 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 0 (IS-EQL-P 1) X :START 2 :END 4))) (AND (EQUALP ORIG X) RESULT)) #*010001)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.11 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :START 2 :END 4))) (AND (EQUALP ORIG X) RESULT)) #*011101)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.12 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT 1))) (AND (EQUALP ORIG X) RESULT)) #*110101)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.13 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT 0))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.14 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT -1))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.15 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT 1 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010111)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.16 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT 0 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.17 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT -1 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.18 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT NIL))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.19 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT NIL :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.20 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*0000000000) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST I :INITIAL-ELEMENT 0) (MAKE-LIST C :INITIAL-ELEMENT 1) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT 0)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.21 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*1111111111) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF 0 (IS-EQL-P 1) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST (- J C) :INITIAL-ELEMENT 1) (MAKE-LIST C :INITIAL-ELEMENT 0) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT 1)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.24 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF (QUOTE (A 10)) (IS-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR)))) (AND (EQUAL ORIG X) RESULT)) ((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-IF-LIST.25 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF (QUOTE (A 10)) (IS-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR) :START 1 :END 5))) (AND (EQUAL ORIG X) RESULT)) ((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.24 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF (QUOTE (A 10)) (IS-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR)))) (AND (EQUALP ORIG X) RESULT)) #((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-IF-VECTOR.25 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF (QUOTE (A 10)) (IS-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR) :START 1 :END 5))) (AND (EQUALP ORIG X) RESULT)) #((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.24 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF #\a (IS-EQL-P #\1) X :KEY (FUNCTION NEXTDIGIT)))) (AND (EQUALP ORIG X) RESULT)) "a1a2342a15")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.25 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF #\a (IS-EQL-P #\1) X :KEY (FUNCTION NEXTDIGIT) :START 1 :END 6))) (AND (EQUALP ORIG X) RESULT)) "01a2342015")
;; Loading (DEFTEST SUBSTITUTE-IF-STRING.26 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (SUBSTITUTE-IF #\! (IS-EQL-P #\a) S) "xyz!bcxyz!bc")) (ASSERT (STRING= (SUBSTITUTE-IF #\! (IS-EQL-P #\a) S :COUNT 1) "xyz!bcxyzabc")) (ASSERT (STRING= (SUBSTITUTE-IF #\! (IS-EQL-P #\a) S :COUNT 1 :FROM-END T) "xyzabcxyz!bc")) (ASSERT (STRING= S "xyzabcxyzabc"))) NIL)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.22 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (IS-EQL-P 1) X :KEY (FUNCTION 1+)))) (AND (EQUALP ORIG X) RESULT)) #*11111111111111111)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.23 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF 1 (IS-EQL-P 1) X :KEY (FUNCTION 1+) :START 1 :END 10))) (AND (EQUALP ORIG X) RESULT)) #*01111111111010110)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.24 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X))) RESULT) #*11111)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.25 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :FROM-END T))) RESULT) #*11111)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.26 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT 1))) RESULT) #*11011)
;; Loading (DEFTEST SUBSTITUTE-IF-BIT-VECTOR.27 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE-IF 1 (FUNCTION ZEROP) X :FROM-END T :COUNT 1))) RESULT) #*01111)
;; Loading (DEFTEST SUBSTITUTE-IF.ORDER.1 (LET ((I 0) A B C D E F G H) (VALUES (SUBSTITUTE-IF (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (FUNCTION NULL)) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :COUNT (PROGN (SETF D (INCF I)) 2) :START (PROGN (SETF E (INCF I)) 0) :END (PROGN (SETF F (INCF I)) 7) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :FROM-END (SETF H (INCF I))) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST SUBSTITUTE-IF.ORDER.2 (LET ((I 0) A B C D E F G H) (VALUES (SUBSTITUTE-IF (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (FUNCTION NULL)) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :FROM-END (SETF H (INCF I)) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF F (INCF I)) 7) :START (PROGN (SETF E (INCF I)) 0) :COUNT (PROGN (SETF D (INCF I)) 2)) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 8 7 6 5 4)
;; Loading (DEFTEST SUBSTITUTE-IF.ALLOW-OTHER-KEYS.1 (SUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE-IF.ALLOW-OTHER-KEYS.2 (SUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE-IF.ALLOW-OTHER-KEYS.3 (SUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (1 2 A 3 1 A 3))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SUBSTITUTE-IF.ALLOW-OTHER-KEYS.4 (SUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE-IF.ALLOW-OTHER-KEYS.5 (SUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) (A 2 0 3 A 0 3))
;; Loading (DEFTEST SUBSTITUTE-IF.KEYWORDS.6 (SUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) (A 2 0 3 A 0 3))
;; Loading (DEFTEST SUBSTITUTE-IF.ALLOW-OTHER-KEYS.7 (SUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST SUBSTITUTE-IF.ALLOW-OTHER-KEYS.8 (SUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEF-FOLD-TEST SUBSTITUTE-IF.FOLD.1 (SUBSTITUTE-IF (QUOTE Z) (QUOTE NULL) (QUOTE (A NIL B))))
;; Loading (DEF-FOLD-TEST SUBSTITUTE-IF.FOLD.2 (SUBSTITUTE-IF (QUOTE Z) (QUOTE NULL) #(A NIL B)))
;; Loading (DEF-FOLD-TEST SUBSTITUTE-IF.FOLD.3 (SUBSTITUTE-IF 0 (QUOTE PLUSP) #*100110))
;; Loading (DEF-FOLD-TEST SUBSTITUTE-IF.FOLD.4 (SUBSTITUTE-IF #\x (QUOTE DIGIT-CHAR-P) "asdf8234n123f"))
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.1 (SIGNALS-ERROR (SUBSTITUTE-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.2 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.3 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.4 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION NULL) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.5 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION NULL) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.6 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.7 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION NULL) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.8 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION CONS) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.9 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION CAR) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) TYPE-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.10 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION IDENTITY) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.11 (SIGNALS-ERROR (SUBSTITUTE-IF (QUOTE A) (FUNCTION IDENTITY) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SUBSTITUTE-IF (QUOTE A) (FUNCTION NOT) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (LOAD "substitute-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/substitute-if-not.lsp 815B9157>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.1 (LET ((X (QUOTE NIL))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (FUNCTION NULL) X) X)) NIL NIL)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.2 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.3 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT NIL) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.4 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 2) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.5 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1) X)) (B B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.6 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 0) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.7 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT -1) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.8 (LET ((X (QUOTE NIL))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T) X)) NIL NIL)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.9 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.10 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T :COUNT NIL) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.11 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 2 :FROM-END T) X)) (B B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.12 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1 :FROM-END T) X)) (A B B C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.13 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 0 :FROM-END T) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.14 (LET ((X (QUOTE (A B A C)))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT -1 :FROM-END T) X)) (A B A C) (A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :FROM-END T))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :COUNT C))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUAL ORIG X) (EQUAL Y (NCONC (MAKE-LIST (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.1 (LET ((X #())) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X) X)) #() #())
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.2 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.3 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT NIL) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.4 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 2) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.5 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1) X)) #(B B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.6 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 0) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.7 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT -1) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.8 (LET ((X #())) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T) X)) #() #())
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.9 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.10 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T :COUNT NIL) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.11 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 2 :FROM-END T) X)) #(B B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.12 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1 :FROM-END T) X)) #(A B B C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.13 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 0 :FROM-END T) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.14 (LET ((X #(A B A C))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT -1 :FROM-END T) X)) #(A B A C) #(A B A C))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE-IF-NOT (QUOTE Z) (IS-NOT-EQL-P (QUOTE A)) X))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE-IF-NOT (QUOTE Z) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE-IF-NOT (QUOTE Z) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1))) RESULT) #(Z B A C B))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (SUBSTITUTE-IF-NOT (QUOTE Z) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T :COUNT 1))) RESULT) #(A B Z C B))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.32 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE C)) V2 :COUNT 1) V1)) #(D A B X D A B C) #(A B C D A B C D A B C D A B C D))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.33 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (SUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE C)) V2 :COUNT 1 :FROM-END T) V1)) #(D A B C D A B X) #(A B C D A B C D A B C D A B C D))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.1 (LET ((X "")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X) X)) "" "")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.2 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.3 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT NIL) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.4 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 2) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.5 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 1) X)) "bbac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.6 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 0) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.7 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT -1) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.8 (LET ((X "")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :FROM-END T) X)) "" "")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.9 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :FROM-END T) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.10 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :FROM-END T :COUNT NIL) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.11 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 2 :FROM-END T) X)) "bbbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.12 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 1 :FROM-END T) X)) "abbc" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.13 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 0 :FROM-END T) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.14 (LET ((X "abac")) (VALUES (SUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT -1 :FROM-END T) X)) "abac" "abac")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT #\x (IS-NOT-EQL-P #\a) X :START I :END J))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT #\x (IS-NOT-EQL-P #\a) X :START I :END J :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT #\x (IS-NOT-EQL-P #\a) X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT #\a)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT #\x (IS-NOT-EQL-P #\a) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE-IF-NOT #\z (IS-NOT-EQL-P #\a) X))) RESULT) "zbzcb")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE-IF-NOT #\z (IS-NOT-EQL-P #\a) X :FROM-END T))) RESULT) "zbzcb")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE-IF-NOT #\z (IS-NOT-EQL-P #\a) X :COUNT 1))) RESULT) "zbacb")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (SUBSTITUTE-IF-NOT #\z (IS-NOT-EQL-P #\a) X :FROM-END T :COUNT 1))) RESULT) "abzcb")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.1 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X))) (AND (EQUALP ORIG X) RESULT)) #*)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.2 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X))) (AND (EQUALP ORIG X) RESULT)) #*)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.3 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X))) (AND (EQUALP ORIG X) RESULT)) #*000000)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.4 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.5 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :START 1))) (AND (EQUALP ORIG X) RESULT)) #*011111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.6 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :START 2 :END NIL))) (AND (EQUALP ORIG X) RESULT)) #*010000)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.7 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :END 4))) (AND (EQUALP ORIG X) RESULT)) #*111101)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.8 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :END NIL))) (AND (EQUALP ORIG X) RESULT)) #*000000)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.9 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :END 3))) (AND (EQUALP ORIG X) RESULT)) #*000101)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.10 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :START 2 :END 4))) (AND (EQUALP ORIG X) RESULT)) #*010001)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.11 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :START 2 :END 4))) (AND (EQUALP ORIG X) RESULT)) #*011101)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.12 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :COUNT 1))) (AND (EQUALP ORIG X) RESULT)) #*110101)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.13 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :COUNT 0))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.14 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :COUNT -1))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.15 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :COUNT 1 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.16 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :COUNT 0 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.17 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :COUNT -1 :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*010101)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.18 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :COUNT NIL))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.19 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :COUNT NIL :FROM-END T))) (AND (EQUALP ORIG X) RESULT)) #*111111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.20 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*0000000000) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT 1 (COMPLEMENT (FUNCTION ZEROP)) X :START I :END J :COUNT C))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST I :INITIAL-ELEMENT 0) (MAKE-LIST C :INITIAL-ELEMENT 1) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT 0)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.21 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*1111111111) (X (COPY-SEQ ORIG)) (Y (SUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :START I :END J :COUNT C :FROM-END T))) (AND (EQUALP ORIG X) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST (- J C) :INITIAL-ELEMENT 1) (MAKE-LIST C :INITIAL-ELEMENT 0) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT 1)))))))) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.24 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT (QUOTE (A 10)) (IS-NOT-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR)))) (AND (EQUAL ORIG X) RESULT)) ((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-LIST.25 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT (QUOTE (A 10)) (IS-NOT-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR) :START 1 :END 5))) (AND (EQUAL ORIG X) RESULT)) ((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.24 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT (QUOTE (A 10)) (IS-NOT-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR)))) (AND (EQUALP ORIG X) RESULT)) #((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-VECTOR.25 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT (QUOTE (A 10)) (IS-NOT-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR) :START 1 :END 5))) (AND (EQUALP ORIG X) RESULT)) #((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.24 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT #\a (IS-NOT-EQL-P #\1) X :KEY (FUNCTION NEXTDIGIT)))) (AND (EQUALP ORIG X) RESULT)) "a1a2342a15")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.25 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT #\a (IS-NOT-EQL-P #\1) X :KEY (FUNCTION NEXTDIGIT) :START 1 :END 6))) (AND (EQUALP ORIG X) RESULT)) "01a2342015")
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-STRING.26 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (SUBSTITUTE-IF-NOT #\! (IS-NOT-EQL-P #\a) S) "xyz!bcxyz!bc")) (ASSERT (STRING= (SUBSTITUTE-IF-NOT #\! (IS-NOT-EQL-P #\a) S :COUNT 1) "xyz!bcxyzabc")) (ASSERT (STRING= (SUBSTITUTE-IF-NOT #\! (IS-NOT-EQL-P #\a) S :COUNT 1 :FROM-END T) "xyzabcxyz!bc")) (ASSERT (STRING= S "xyzabcxyzabc"))) NIL)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.26 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 1) X :KEY (FUNCTION 1+)))) (AND (EQUALP ORIG X) RESULT)) #*11111111111111111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BITSTRING.27 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (SUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 1) X :KEY (FUNCTION 1+) :START 1 :END 10))) (AND (EQUALP ORIG X) RESULT)) #*01111111111010110)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BIT-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE-IF-NOT 1 (FUNCTION ONEP) X))) RESULT) #*11111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BIT-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE-IF-NOT 1 (FUNCTION ONEP) X :FROM-END T))) RESULT) #*11111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BIT-VECTOR.32 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE-IF-NOT 1 (FUNCTION ONEP) X :COUNT 1))) RESULT) #*11011)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SUBSTITUTE-IF-NOT-BIT-VECTOR.33 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (SUBSTITUTE-IF-NOT 1 (FUNCTION ONEP) X :FROM-END T :COUNT 1))) RESULT) #*01111)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ORDER.1 (LET ((I 0) A B C D E F G H) (VALUES (SUBSTITUTE-IF-NOT (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :COUNT (PROGN (SETF D (INCF I)) 2) :START (PROGN (SETF E (INCF I)) 0) :END (PROGN (SETF F (INCF I)) 7) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :FROM-END (SETF H (INCF I))) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ORDER.2 (LET ((I 0) A B C D E F G H) (VALUES (SUBSTITUTE-IF-NOT (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :FROM-END (SETF H (INCF I)) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF F (INCF I)) 7) :START (PROGN (SETF E (INCF I)) 0) :COUNT (PROGN (SETF D (INCF I)) 2)) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 8 7 6 5 4)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.1 (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T) (A A 0 A A 0 A))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.2 (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T) (A A 0 A A 0 A))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.3 (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (A A 0 A A 0 A))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.4 (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (A A 0 A A 0 A))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.5 (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) (1 A A A 1 A A))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.KEYWORDS.6 (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) (1 A A A 1 A A))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.7 (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) (A A 0 A A 0 A))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.8 (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS NIL) (A A 0 A A 0 A))
;; Loading (DEF-FOLD-TEST SUBSTITUTE-IF-NOT.FOLD.1 (SUBSTITUTE-IF-NOT (QUOTE Z) (QUOTE IDENTITY) (QUOTE (A NIL B))))
;; Loading (DEF-FOLD-TEST SUBSTITUTE-IF-NOT.FOLD.2 (SUBSTITUTE-IF-NOT (QUOTE Z) (QUOTE IDENTITY) #(A NIL B)))
;; Loading (DEF-FOLD-TEST SUBSTITUTE-IF-NOT.FOLD.3 (SUBSTITUTE-IF-NOT 0 (QUOTE ZEROP) #*100110))
;; Loading (DEF-FOLD-TEST SUBSTITUTE-IF-NOT.FOLD.4 (SUBSTITUTE-IF-NOT #\0 (FUNCTION DIGIT-CHAR-P) "asdaw82213nn1239123dd"))
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.1 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.2 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.3 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.4 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.5 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.6 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.7 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.8 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION CONS) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.9 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION CAR) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) TYPE-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.10 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION IDENTITY) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.11 (SIGNALS-ERROR (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION IDENTITY) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBSTITUTE-IF-NOT.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NOT) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (LOAD "nsubstitute.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nsubstitute.lsp C163FB07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NSUBSTITUTE-LIST.1 (NSUBSTITUTE (QUOTE B) (QUOTE A) NIL) NIL)
;; Loading (DEFTEST NSUBSTITUTE-LIST.2 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X) X) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.3 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT NIL)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.4 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 2)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.5 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 1)) (B B A C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.6 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 0)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.7 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT -1)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.8 (NSUBSTITUTE (QUOTE B) (QUOTE A) NIL :FROM-END T) NIL)
;; Loading (DEFTEST NSUBSTITUTE-LIST.9 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.10 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T :COUNT NIL)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.11 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 2 :FROM-END T)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.12 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 1 :FROM-END T)) (A B B C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.13 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 0 :FROM-END T)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.14 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT -1 :FROM-END T)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-LIST.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-LIST.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :FROM-END T))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-LIST.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :COUNT C))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-LIST.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :COUNT C :FROM-END T))) (EQUAL Y (NCONC (MAKE-LIST (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-LIST.19 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE X) 5 X :TEST (FUNCTION (LAMBDA (A B) (<= (ABS (- A B)) 2)))))) RESULT) (1 2 X X X X X 8 9))
;; Loading (DEFTEST NSUBSTITUTE-LIST.20 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (C -4) (RESULT (NSUBSTITUTE (QUOTE X) 5 X :TEST (FUNCTION (LAMBDA (A B) (INCF C 2) (= (+ B C) A)))))) RESULT) (1 2 X 4 5 6 7 8 9))
;; Loading (DEFTEST NSUBSTITUTE-LIST.21 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (C 5) (RESULT (NSUBSTITUTE (QUOTE X) 9 X :TEST (FUNCTION (LAMBDA (A B) (INCF C -2) (= (+ B C) A))) :FROM-END T))) RESULT) (1 2 3 4 5 6 7 X 9))
;; Loading (DEFTEST NSUBSTITUTE-LIST.22 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (C -4) (RESULT (NSUBSTITUTE (QUOTE X) 5 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C 2) (/= (+ B C) A)))))) RESULT) (1 2 X 4 5 6 7 8 9))
;; Loading (DEFTEST NSUBSTITUTE-LIST.23 (LET* ((ORIG (QUOTE (1 2 3 4 5 6 7 8 9))) (X (COPY-SEQ ORIG)) (C 5) (RESULT (NSUBSTITUTE (QUOTE X) 9 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C -2) (/= (+ B C) A))) :FROM-END T))) RESULT) (1 2 3 4 5 6 7 X 9))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.1 (LET ((X #())) (VALUES (NSUBSTITUTE (QUOTE B) (QUOTE A) X) X)) #() #())
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.2 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.3 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT NIL) X) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.4 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 2)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.5 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 1)) #(B B A C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.6 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 0)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.7 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT -1)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.8 (LET ((X #())) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T)) #())
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.9 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.10 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :FROM-END T :COUNT NIL)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.11 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 2 :FROM-END T)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.12 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 1 :FROM-END T)) #(A B B C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.13 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT 0 :FROM-END T)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.14 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE (QUOTE B) (QUOTE A) X :COUNT -1 :FROM-END T)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE (QUOTE X) (QUOTE A) X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.19 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE X) 5 X :TEST (FUNCTION (LAMBDA (A B) (<= (ABS (- A B)) 2)))))) RESULT) #(1 2 X X X X X 8 9))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.20 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (C -4) (RESULT (NSUBSTITUTE (QUOTE X) 5 X :TEST (FUNCTION (LAMBDA (A B) (INCF C 2) (= (+ B C) A)))))) RESULT) #(1 2 X 4 5 6 7 8 9))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.21 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (C 5) (RESULT (NSUBSTITUTE (QUOTE X) 9 X :TEST (FUNCTION (LAMBDA (A B) (INCF C -2) (= (+ B C) A))) :FROM-END T))) RESULT) #(1 2 3 4 5 6 7 X 9))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.22 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (C -4) (RESULT (NSUBSTITUTE (QUOTE X) 5 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C 2) (/= (+ B C) A)))))) RESULT) #(1 2 X 4 5 6 7 8 9))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.23 (LET* ((ORIG #(1 2 3 4 5 6 7 8 9)) (X (COPY-SEQ ORIG)) (C 5) (RESULT (NSUBSTITUTE (QUOTE X) 9 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C -2) (/= (+ B C) A))) :FROM-END T))) RESULT) #(1 2 3 4 5 6 7 X 9))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE (QUOTE Z) (QUOTE A) X))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE (QUOTE Z) (QUOTE A) X :FROM-END T))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE (QUOTE Z) (QUOTE A) X :COUNT 1))) RESULT) #(Z B A C B))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE (QUOTE Z) (QUOTE A) X :FROM-END T :COUNT 1))) RESULT) #(A B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-STRING.1 (LET ((X "")) (NSUBSTITUTE #\b #\a X)) "")
;; Loading (DEFTEST NSUBSTITUTE-STRING.2 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-STRING.3 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT NIL)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-STRING.4 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT 2)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-STRING.5 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT 1)) "bbac")
;; Loading (DEFTEST NSUBSTITUTE-STRING.6 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT 0)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-STRING.7 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT -1)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-STRING.8 (LET ((X "")) (NSUBSTITUTE #\b #\a X :FROM-END T)) "")
;; Loading (DEFTEST NSUBSTITUTE-STRING.9 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :FROM-END T)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-STRING.10 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :FROM-END T :COUNT NIL)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-STRING.11 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT 2 :FROM-END T)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-STRING.12 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT 1 :FROM-END T)) "abbc")
;; Loading (DEFTEST NSUBSTITUTE-STRING.13 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT 0 :FROM-END T)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-STRING.14 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE #\b #\a X :COUNT -1 :FROM-END T)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-STRING.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE #\x #\a X :START I :END J))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))) T)
;; Loading (DEFTEST NSUBSTITUTE-STRING.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE #\x #\a X :START I :END J :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))) T)
;; Loading (DEFTEST NSUBSTITUTE-STRING.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE #\x #\a X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-STRING.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE #\x #\a X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-STRING.19 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE #\x #\5 X :TEST (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (<= (ABS (- A B)) 2)))))) RESULT) "12xxxxx89")
;; Loading (DEFTEST NSUBSTITUTE-STRING.20 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (C -4) (RESULT (NSUBSTITUTE #\x #\5 X :TEST (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (INCF C 2) (= (+ B C) A)))))) RESULT) "12x456789")
;; Loading (DEFTEST NSUBSTITUTE-STRING.21 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (C 5) (RESULT (NSUBSTITUTE #\x #\9 X :TEST (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (INCF C -2) (= (+ B C) A))) :FROM-END T))) RESULT) "1234567x9")
;; Loading (DEFTEST NSUBSTITUTE-STRING.22 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (C -4) (RESULT (NSUBSTITUTE #\x #\5 X :TEST-NOT (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (INCF C 2) (/= (+ B C) A)))))) RESULT) "12x456789")
;; Loading (DEFTEST NSUBSTITUTE-STRING.23 (LET* ((ORIG "123456789") (X (COPY-SEQ ORIG)) (C 5) (RESULT (NSUBSTITUTE #\x #\9 X :TEST-NOT (FUNCTION (LAMBDA (A B) (SETQ A (READ-FROM-STRING (STRING A))) (SETQ B (READ-FROM-STRING (STRING B))) (INCF C -2) (/= (+ B C) A))) :FROM-END T))) RESULT) "1234567x9")
;; Loading (DEFTEST NSUBSTITUTE-STRING.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE #\z #\a X))) RESULT) "zbzcb")
;; Loading (DEFTEST NSUBSTITUTE-STRING.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE #\z #\a X :FROM-END T))) RESULT) "zbzcb")
;; Loading (DEFTEST NSUBSTITUTE-STRING.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE #\z #\a X :COUNT 1))) RESULT) "zbacb")
;; Loading (DEFTEST NSUBSTITUTE-STRING.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE #\z #\a X :FROM-END T :COUNT 1))) RESULT) "abzcb")
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.1 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 0 1 X))) RESULT) #*)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.2 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X))) RESULT) #*)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.3 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 0 1 X))) RESULT) #*000000)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.4 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.5 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :START 1))) RESULT) #*011111)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.6 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 0 1 X :START 2 :END NIL))) RESULT) #*010000)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.7 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :END 4))) RESULT) #*111101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.8 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 0 1 X :END NIL))) RESULT) #*000000)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.9 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 0 1 X :END 3))) RESULT) #*000101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.10 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 0 1 X :START 2 :END 4))) RESULT) #*010001)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.11 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :START 2 :END 4))) RESULT) #*011101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.12 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :COUNT 1))) RESULT) #*110101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.13 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :COUNT 0))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.14 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :COUNT -1))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.15 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :COUNT 1 :FROM-END T))) RESULT) #*010111)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.16 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :COUNT 0 :FROM-END T))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.17 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :COUNT -1 :FROM-END T))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.18 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :COUNT NIL))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.19 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE 1 0 X :COUNT NIL :FROM-END T))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.20 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*0000000000) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE 1 0 X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST I :INITIAL-ELEMENT 0) (MAKE-LIST C :INITIAL-ELEMENT 1) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT 0))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.21 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*1111111111) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE 0 1 X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST (- J C) :INITIAL-ELEMENT 1) (MAKE-LIST C :INITIAL-ELEMENT 0) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT 1))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.22 (LET* ((ORIG #*0101010101) (X (COPY-SEQ ORIG)) (C 0) (RESULT (NSUBSTITUTE 1 0 X :TEST (FUNCTION (LAMBDA (A B) (INCF C) (AND (<= 2 C 5) (= A B))))))) RESULT) #*0111110101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.23 (LET* ((ORIG #*0101010101) (X (COPY-SEQ ORIG)) (C 0) (RESULT (NSUBSTITUTE 1 0 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C) (NOT (AND (<= 2 C 5) (= A B)))))))) RESULT) #*0111110101)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.24 (LET* ((ORIG #*0101010101) (X (COPY-SEQ ORIG)) (C 0) (RESULT (NSUBSTITUTE 1 0 X :TEST (FUNCTION (LAMBDA (A B) (INCF C) (AND (<= 2 C 5) (= A B)))) :FROM-END T))) RESULT) #*0101011111)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.25 (LET* ((ORIG #*0101010101) (X (COPY-SEQ ORIG)) (C 0) (RESULT (NSUBSTITUTE 1 0 X :TEST-NOT (FUNCTION (LAMBDA (A B) (INCF C) (NOT (AND (<= 2 C 5) (= A B))))) :FROM-END T))) RESULT) #*0101011111)
;; Loading (DEFHARMLESS NSUBSTITUTE.TEST-AND-TEST-NOT.1 (NSUBSTITUTE (QUOTE B) (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE B)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSUBSTITUTE.TEST-AND-TEST-NOT.2 (NSUBSTITUTE (QUOTE B) (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE B)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSUBSTITUTE.TEST-AND-TEST-NOT.3 (NSUBSTITUTE (QUOTE B) (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE B)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSUBSTITUTE.TEST-AND-TEST-NOT.4 (NSUBSTITUTE (QUOTE B) (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE B)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSUBSTITUTE.TEST-AND-TEST-NOT.5 (NSUBSTITUTE #\b #\a (COPY-SEQ "abcdab") :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSUBSTITUTE.TEST-AND-TEST-NOT.6 (NSUBSTITUTE #\b #\a (COPY-SEQ "abcdab") :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSUBSTITUTE.TEST-AND-TEST-NOT.7 (NSUBSTITUTE 1 0 (COPY-SEQ #*001101001) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS NSUBSTITUTE.TEST-AND-TEST-NOT.8 (NSUBSTITUTE 0 1 (COPY-SEQ #*1100110101) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFTEST NSUBSTITUTE-LIST.24 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR)))) RESULT) ((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-LIST.25 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :START 1 :END 5))) RESULT) ((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-LIST.26 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :TEST (COMPLEMENT (FUNCTION EQL))))) RESULT) ((A 1) (A 10) (A 3) (A 10) (A 10) (A 6) (A 10)))
;; Loading (DEFTEST NSUBSTITUTE-LIST.27 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :TEST-NOT (FUNCTION EQL)))) RESULT) ((A 1) (A 10) (A 3) (A 10) (A 10) (A 6) (A 10)))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.24 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR)))) RESULT) #((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.25 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :START 1 :END 5))) RESULT) #((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.26 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :TEST (COMPLEMENT (FUNCTION EQL))))) RESULT) #((A 1) (A 10) (A 3) (A 10) (A 10) (A 6) (A 10)))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.27 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE (QUOTE (A 10)) (QUOTE A) X :KEY (FUNCTION CAR) :TEST-NOT (FUNCTION EQL)))) RESULT) #((A 1) (A 10) (A 3) (A 10) (A 10) (A 6) (A 10)))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.32 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (NSUBSTITUTE (QUOTE X) (QUOTE C) V2 :COUNT 1) V1)) #(D A B X D A B C) #(A B C D A B X D A B C D A B C D))
;; Loading (DEFTEST NSUBSTITUTE-VECTOR.33 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (NSUBSTITUTE (QUOTE X) (QUOTE C) V2 :COUNT 1 :FROM-END T) V1)) #(D A B C D A B X) #(A B C D A B C D A B X D A B C D))
;; Loading (DEFTEST NSUBSTITUTE-STRING.24 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE #\a #\1 X :KEY (FUNCTION NEXTDIGIT)))) RESULT) "a1a2342a15")
;; Loading (DEFTEST NSUBSTITUTE-STRING.25 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE #\a #\1 X :KEY (FUNCTION NEXTDIGIT) :START 1 :END 6))) RESULT) "01a2342015")
;; Loading (DEFTEST NSUBSTITUTE-STRING.26 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE #\a #\1 X :KEY (FUNCTION NEXTDIGIT) :TEST (COMPLEMENT (FUNCTION EQL))))) RESULT) "0a0aaaa0aa")
;; Loading (DEFTEST NSUBSTITUTE-STRING.27 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE #\a #\1 X :KEY (FUNCTION NEXTDIGIT) :TEST-NOT (FUNCTION EQL)))) RESULT) "0a0aaaa0aa")
;; Loading (DEFTEST NSUBSTITUTE-STRING.32 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE #\! #\a S) "xyz!bcxyz!bc")) (ASSERT (STRING= S "xyz!bcxyz!bc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-STRING.33 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE #\! #\a S :COUNT 1) "xyz!bcxyzabc")) (ASSERT (STRING= S "xyz!bcxyzabc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-STRING.34 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE #\! #\a S :COUNT 1 :FROM-END T) "xyzabcxyz!bc")) (ASSERT (STRING= S "xyzabcxyz!bc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE 1 0 X))) RESULT) #*11111)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE 1 0 X :FROM-END T))) RESULT) #*11111)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.32 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE 1 0 X :COUNT 1))) RESULT) #*11011)
;; Loading (DEFTEST NSUBSTITUTE-BIT-VECTOR.33 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE 1 0 X :FROM-END T :COUNT 1))) RESULT) #*01111)
;; Loading (DEFTEST NSUBSTITUTE.ORDER.1 (LET ((I 0) A B C D E F G H) (VALUES (NSUBSTITUTE (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) NIL) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :COUNT (PROGN (SETF D (INCF I)) 2) :START (PROGN (SETF E (INCF I)) 0) :END (PROGN (SETF F (INCF I)) 7) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :FROM-END (SETF H (INCF I))) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST NSUBSTITUTE.ORDER.2 (LET ((I 0) A B C D E F G H) (VALUES (NSUBSTITUTE (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) NIL) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :FROM-END (SETF H (INCF I)) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF F (INCF I)) 7) :START (PROGN (SETF E (INCF I)) 0) :COUNT (PROGN (SETF D (INCF I)) 2)) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 8 7 6 5 4)
;; Loading (DEFTEST NSUBSTITUTE.ALLOW-OTHER-KEYS.1 (NSUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE.ALLOW-OTHER-KEYS.2 (NSUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE.ALLOW-OTHER-KEYS.3 (NSUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE.ALLOW-OTHER-KEYS.4 (NSUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE.ALLOW-OTHER-KEYS.5 (NSUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) (A 2 0 3 A 0 3))
;; Loading (DEFTEST NSUBSTITUTE.KEYWORDS.6 (NSUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) (A 2 0 3 A 0 3))
;; Loading (DEFTEST NSUBSTITUTE.ALLOW-OTHER-KEYS.7 (NSUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE.ALLOW-OTHER-KEYS.8 (NSUBSTITUTE (QUOTE A) 0 (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE.ERROR.1 (SIGNALS-ERROR (NSUBSTITUTE) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.2 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.3 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.4 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.5 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.6 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.7 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.8 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.9 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.10 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.11 (SIGNALS-ERROR (NSUBSTITUTE (QUOTE A) (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NSUBSTITUTE 1 0 X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (LOAD "nsubstitute-if.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nsubstitute-if.lsp 8178C857>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.1 (NSUBSTITUTE-IF (QUOTE B) (QUOTE IDENTITY) NIL) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.2 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X) X) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.3 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT NIL)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.4 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 2)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.5 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 1)) (B B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.6 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 0)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.7 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT -1)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.8 (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) NIL :FROM-END T) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.9 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.10 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T :COUNT NIL)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.11 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 2 :FROM-END T)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.12 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 1 :FROM-END T)) (A B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.13 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 0 :FROM-END T)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.14 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT -1 :FROM-END T)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :FROM-END T))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :COUNT C))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :COUNT C :FROM-END T))) (EQUAL Y (NCONC (MAKE-LIST (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.1 (LET ((X #())) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X)) #())
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.2 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.3 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT NIL) X) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.4 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 2)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.5 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 1)) #(B B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.6 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 0)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.7 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT -1)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.8 (LET ((X #())) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T)) #())
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.9 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.10 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :FROM-END T :COUNT NIL)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.11 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 2 :FROM-END T)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.12 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 1 :FROM-END T)) #(A B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.13 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT 0 :FROM-END T)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.14 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF (QUOTE B) (IS-EQL-P (QUOTE A)) X :COUNT -1 :FROM-END T)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE A)) X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE-IF (QUOTE Z) (IS-EQL-P (QUOTE A)) X))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE-IF (QUOTE Z) (IS-EQL-P (QUOTE A)) X :FROM-END T))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE-IF (QUOTE Z) (IS-EQL-P (QUOTE A)) X :COUNT 1))) RESULT) #(Z B A C B))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE-IF (QUOTE Z) (IS-EQL-P (QUOTE A)) X :FROM-END T :COUNT 1))) RESULT) #(A B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.32 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE C)) V2 :COUNT 1) V1)) #(D A B X D A B C) #(A B C D A B X D A B C D A B C D))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.33 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (VALUES (NSUBSTITUTE-IF (QUOTE X) (IS-EQL-P (QUOTE C)) V2 :COUNT 1 :FROM-END T) V1)) #(D A B C D A B X) #(A B C D A B C D A B X D A B C D))
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.1 (LET ((X "")) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X)) "")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.2 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.3 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT NIL)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.4 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 2)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.5 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 1)) "bbac")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.6 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 0)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.7 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT -1)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.8 (LET ((X "")) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :FROM-END T)) "")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.9 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :FROM-END T)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.10 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :FROM-END T :COUNT NIL)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.11 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 2 :FROM-END T)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.12 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 1 :FROM-END T)) "abbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.13 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT 0 :FROM-END T)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.14 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF #\b (IS-EQL-P #\a) X :COUNT -1 :FROM-END T)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF #\x (IS-EQL-P #\a) X :START I :END J))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF #\x (IS-EQL-P #\a) X :START I :END J :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF #\x (IS-EQL-P #\a) X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF #\x (IS-EQL-P #\a) X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE-IF #\z (IS-EQL-P #\a) X))) RESULT) "zbzcb")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE-IF #\z (IS-EQL-P #\a) X :FROM-END T))) RESULT) "zbzcb")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE-IF #\z (IS-EQL-P #\a) X :COUNT 1))) RESULT) "zbacb")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE-IF #\z (IS-EQL-P #\a) X :FROM-END T :COUNT 1))) RESULT) "abzcb")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.32 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE-IF #\! (IS-EQL-P #\a) S) "xyz!bcxyz!bc")) (ASSERT (STRING= S "xyz!bcxyz!bc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.33 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE-IF #\! (IS-EQL-P #\a) S :COUNT 1) "xyz!bcxyzabc")) (ASSERT (STRING= S "xyz!bcxyzabc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.34 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE-IF #\! (IS-EQL-P #\a) S :COUNT 1 :FROM-END T) "xyzabcxyz!bc")) (ASSERT (STRING= S "xyzabcxyz!bc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.1 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 0 (IS-EQL-P 1) X))) RESULT) #*)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.2 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X))) RESULT) #*)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.3 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 0 (IS-EQL-P 1) X))) RESULT) #*000000)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.4 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.5 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :START 1))) RESULT) #*011111)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.6 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 0 (IS-EQL-P 1) X :START 2 :END NIL))) RESULT) #*010000)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.7 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :END 4))) RESULT) #*111101)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.8 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 0 (IS-EQL-P 1) X :END NIL))) RESULT) #*000000)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.9 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 0 (IS-EQL-P 1) X :END 3))) RESULT) #*000101)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.10 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 0 (IS-EQL-P 1) X :START 2 :END 4))) RESULT) #*010001)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.11 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :START 2 :END 4))) RESULT) #*011101)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.12 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :COUNT 1))) RESULT) #*110101)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.13 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :COUNT 0))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.14 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :COUNT -1))) RESULT) #*010101)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.15 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :COUNT 1 :FROM-END T))) RESULT) #*010111)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.16 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :COUNT 0 :FROM-END T))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.17 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :COUNT -1 :FROM-END T))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.18 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :COUNT NIL))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.19 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :COUNT NIL :FROM-END T))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.20 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*0000000000) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF 1 (IS-EQL-P 0) X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST I :INITIAL-ELEMENT 0) (MAKE-LIST C :INITIAL-ELEMENT 1) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT 0))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.21 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*1111111111) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF 0 (IS-EQL-P 1) X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST (- J C) :INITIAL-ELEMENT 1) (MAKE-LIST C :INITIAL-ELEMENT 0) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT 1))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.24 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF (QUOTE (A 10)) (IS-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR)))) RESULT) ((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-IF-LIST.25 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF (QUOTE (A 10)) (IS-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR) :START 1 :END 5))) RESULT) ((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.24 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF (QUOTE (A 10)) (IS-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR)))) RESULT) #((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-IF-VECTOR.25 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF (QUOTE (A 10)) (IS-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR) :START 1 :END 5))) RESULT) #((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.24 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF #\a (IS-EQL-P #\1) X :KEY (FUNCTION NEXTDIGIT)))) RESULT) "a1a2342a15")
;; Loading (DEFTEST NSUBSTITUTE-IF-STRING.25 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF #\a (IS-EQL-P #\1) X :KEY (FUNCTION NEXTDIGIT) :START 1 :END 6))) RESULT) "01a2342015")
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.26 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 1) X :KEY (FUNCTION 1+)))) RESULT) #*11111111111111111)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.27 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF 1 (IS-EQL-P 1) X :KEY (FUNCTION 1+) :START 1 :END 10))) RESULT) #*01111111111010110)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE-IF 1 (FUNCTION ZEROP) X))) RESULT) #*11111)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE-IF 1 (FUNCTION ZEROP) X :FROM-END T))) RESULT) #*11111)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.32 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE-IF 1 (FUNCTION ZEROP) X :COUNT 1))) RESULT) #*11011)
;; Loading (DEFTEST NSUBSTITUTE-IF-BIT-VECTOR.33 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE-IF 1 (FUNCTION ZEROP) X :FROM-END T :COUNT 1))) RESULT) #*01111)
;; Loading (DEFTEST NSUBSTITUTE-IF.ORDER.1 (LET ((I 0) A B C D E F G H) (VALUES (NSUBSTITUTE-IF (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (FUNCTION NULL)) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :COUNT (PROGN (SETF D (INCF I)) 2) :START (PROGN (SETF E (INCF I)) 0) :END (PROGN (SETF F (INCF I)) 7) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :FROM-END (SETF H (INCF I))) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST NSUBSTITUTE-IF.ORDER.2 (LET ((I 0) A B C D E F G H) (VALUES (NSUBSTITUTE-IF (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (FUNCTION NULL)) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :FROM-END (SETF H (INCF I)) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF F (INCF I)) 7) :START (PROGN (SETF E (INCF I)) 0) :COUNT (PROGN (SETF D (INCF I)) 2)) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 8 7 6 5 4)
;; Loading (DEFTEST NSUBSTITUTE-IF.ALLOW-OTHER-KEYS.1 (NSUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE-IF.ALLOW-OTHER-KEYS.2 (NSUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE-IF.ALLOW-OTHER-KEYS.3 (NSUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE-IF.ALLOW-OTHER-KEYS.4 (NSUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE-IF.ALLOW-OTHER-KEYS.5 (NSUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) (A 2 0 3 A 0 3))
;; Loading (DEFTEST NSUBSTITUTE-IF.KEYWORDS.6 (NSUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) (A 2 0 3 A 0 3))
;; Loading (DEFTEST NSUBSTITUTE-IF.ALLOW-OTHER-KEYS.7 (NSUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE-IF.ALLOW-OTHER-KEYS.8 (NSUBSTITUTE-IF (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS NIL) (1 2 A 3 1 A 3))
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.1 (SIGNALS-ERROR (NSUBSTITUTE-IF) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.2 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.3 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.4 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION NULL) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.5 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION NULL) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.6 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.7 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION NULL) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.8 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION CONS) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.9 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION CAR) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) TYPE-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.10 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION IDENTITY) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.11 (SIGNALS-ERROR (NSUBSTITUTE-IF (QUOTE A) (FUNCTION IDENTITY) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NSUBSTITUTE-IF 0 (FUNCTION IDENTITY) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (LOAD "nsubstitute-if-not.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nsubstitute-if-not.lsp C1840387>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.1 (NSUBSTITUTE-IF-NOT (QUOTE B) (QUOTE IDENTITY) NIL) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.2 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X) X) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.3 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT NIL)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.4 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 2)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.5 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1)) (B B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.6 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 0)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.7 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT -1)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.8 (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) NIL :FROM-END T) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.9 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.10 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T :COUNT NIL)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.11 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 2 :FROM-END T)) (B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.12 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1 :FROM-END T)) (A B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.13 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 0 :FROM-END T)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.14 (LET ((X (COPY-SEQ (QUOTE (A B A C))))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT -1 :FROM-END T)) (A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :FROM-END T))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :COUNT C))) (EQUAL Y (NCONC (MAKE-LIST I :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG (QUOTE (A A A A A A A A A A))) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :COUNT C :FROM-END T))) (EQUAL Y (NCONC (MAKE-LIST (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-LIST C :INITIAL-ELEMENT (QUOTE X)) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.1 (LET ((X #())) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X)) #())
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.2 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.3 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT NIL) X) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.4 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 2)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.5 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1)) #(B B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.6 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 0)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.7 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT -1)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.8 (LET ((X #())) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T)) #())
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.9 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.10 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T :COUNT NIL)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.11 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 2 :FROM-END T)) #(B B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.12 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1 :FROM-END T)) #(A B B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.13 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 0 :FROM-END T)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.14 (LET ((X (COPY-SEQ #(A B A C)))) (NSUBSTITUTE-IF-NOT (QUOTE B) (IS-NOT-EQL-P (QUOTE A)) X :COUNT -1 :FROM-END T)) #(A B A C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY I :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #(A A A A A A A A A A)) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE A)) X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-VECTOR) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT (QUOTE A)) (MAKE-ARRAY C :INITIAL-ELEMENT (QUOTE X)) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT (QUOTE A)))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE-IF-NOT (QUOTE Z) (IS-NOT-EQL-P (QUOTE A)) X))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE-IF-NOT (QUOTE Z) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T))) RESULT) #(Z B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE-IF-NOT (QUOTE Z) (IS-NOT-EQL-P (QUOTE A)) X :COUNT 1))) RESULT) #(Z B A C B))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B A C B A D E A F)) :FILL-POINTER 5)) (RESULT (NSUBSTITUTE-IF-NOT (QUOTE Z) (IS-NOT-EQL-P (QUOTE A)) X :FROM-END T :COUNT 1))) RESULT) #(A B Z C B))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.32 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE C)) V2 :COUNT 1)) #(D A B X D A B C))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.33 (LET* ((V1 (COPY-SEQ #(A B C D A B C D A B C D A B C D))) (V2 (MAKE-ARRAY (QUOTE (8)) :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 3))) (NSUBSTITUTE-IF-NOT (QUOTE X) (IS-NOT-EQL-P (QUOTE C)) V2 :COUNT 1 :FROM-END T)) #(D A B C D A B X))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.1 (LET ((X "")) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X)) "")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.2 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.3 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT NIL)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.4 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 2)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.5 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 1)) "bbac")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.6 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 0)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.7 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT -1)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.8 (LET ((X "")) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :FROM-END T)) "")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.9 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :FROM-END T)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.10 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :FROM-END T :COUNT NIL)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.11 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 2 :FROM-END T)) "bbbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.12 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 1 :FROM-END T)) "abbc")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.13 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT 0 :FROM-END T)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.14 (LET ((X (COPY-SEQ "abac"))) (NSUBSTITUTE-IF-NOT #\b (IS-NOT-EQL-P #\a) X :COUNT -1 :FROM-END T)) "abac")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.15 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT #\x (IS-NOT-EQL-P #\a) X :START I :END J))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.16 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT #\x (IS-NOT-EQL-P #\a) X :START I :END J :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY (- J I) :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a)))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.17 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT #\x (IS-NOT-EQL-P #\a) X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY I :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 (+ I C)) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.18 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG "aaaaaaaaaa") (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT #\x (IS-NOT-EQL-P #\a) X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-STRING) (MAKE-ARRAY (- J C) :INITIAL-ELEMENT #\a) (MAKE-ARRAY C :INITIAL-ELEMENT #\x) (MAKE-ARRAY (- 10 J) :INITIAL-ELEMENT #\a))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE-IF-NOT #\z (IS-NOT-EQL-P #\a) X))) RESULT) "zbzcb")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE-IF-NOT #\z (IS-NOT-EQL-P #\a) X :FROM-END T))) RESULT) "zbzcb")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE-IF-NOT #\z (IS-NOT-EQL-P #\a) X :COUNT 1))) RESULT) "zbacb")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abacbadeaf" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (RESULT (NSUBSTITUTE-IF-NOT #\z (IS-NOT-EQL-P #\a) X :FROM-END T :COUNT 1))) RESULT) "abzcb")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.32 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE-IF-NOT #\! (IS-NOT-EQL-P #\a) S) "xyz!bcxyz!bc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.33 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE-IF-NOT #\! (IS-NOT-EQL-P #\a) S :COUNT 1) "xyz!bcxyzabc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.34 (DO-SPECIAL-STRINGS (S "xyzabcxyzabc" NIL) (ASSERT (STRING= (NSUBSTITUTE-IF-NOT #\! (IS-NOT-EQL-P #\a) S :COUNT 1 :FROM-END T) "xyzabcxyz!bc"))) NIL)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.1 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X))) RESULT) #*)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.2 (LET* ((ORIG #*) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X))) RESULT) #*)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.3 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X))) RESULT) #*000000)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.4 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.5 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :START 1))) RESULT) #*011111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.6 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :START 2 :END NIL))) RESULT) #*010000)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.7 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :END 4))) RESULT) #*111101)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.8 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :END NIL))) RESULT) #*000000)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.9 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :END 3))) RESULT) #*000101)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.10 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :START 2 :END 4))) RESULT) #*010001)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.11 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :START 2 :END 4))) RESULT) #*011101)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.12 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :COUNT 1))) RESULT) #*110101)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.13 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :COUNT 0))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.14 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :COUNT -1))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.15 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :COUNT 1 :FROM-END T))) RESULT) #*010111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.16 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :COUNT 0 :FROM-END T))) RESULT) #*010101)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.17 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :COUNT -1 :FROM-END T))) RESULT) #*010101)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.18 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :COUNT NIL))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.19 (LET* ((ORIG #*010101) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :COUNT NIL :FROM-END T))) RESULT) #*111111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.20 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*0000000000) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 0) X :START I :END J :COUNT C))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST I :INITIAL-ELEMENT 0) (MAKE-LIST C :INITIAL-ELEMENT 1) (MAKE-LIST (- 10 (+ I C)) :INITIAL-ELEMENT 0))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.21 (LOOP FOR I FROM 0 TO 9 ALWAYS (LOOP FOR J FROM I TO 10 ALWAYS (LOOP FOR C FROM 0 TO (- J I) ALWAYS (LET* ((ORIG #*1111111111) (X (COPY-SEQ ORIG)) (Y (NSUBSTITUTE-IF-NOT 0 (IS-NOT-EQL-P 1) X :START I :END J :COUNT C :FROM-END T))) (EQUALP Y (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (MAKE-LIST (- J C) :INITIAL-ELEMENT 1) (MAKE-LIST C :INITIAL-ELEMENT 0) (MAKE-LIST (- 10 J) :INITIAL-ELEMENT 1))))))) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.24 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT (QUOTE (A 10)) (IS-NOT-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR)))) RESULT) ((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-LIST.25 (LET* ((ORIG (QUOTE ((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7)))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT (QUOTE (A 10)) (IS-NOT-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR) :START 1 :END 5))) RESULT) ((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.24 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT (QUOTE (A 10)) (IS-NOT-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR)))) RESULT) #((A 10) (B 2) (A 10) (C 4) (D 5) (A 10) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-VECTOR.25 (LET* ((ORIG #((A 1) (B 2) (A 3) (C 4) (D 5) (A 6) (E 7))) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT (QUOTE (A 10)) (IS-NOT-EQL-P (QUOTE A)) X :KEY (FUNCTION CAR) :START 1 :END 5))) RESULT) #((A 1) (B 2) (A 10) (C 4) (D 5) (A 6) (E 7)))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.24 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT #\a (IS-NOT-EQL-P #\1) X :KEY (FUNCTION NEXTDIGIT)))) RESULT) "a1a2342a15")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-STRING.25 (LET* ((ORIG "0102342015") (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT #\a (IS-NOT-EQL-P #\1) X :KEY (FUNCTION NEXTDIGIT) :START 1 :END 6))) RESULT) "01a2342015")
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.26 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 1) X :KEY (FUNCTION 1+)))) RESULT) #*11111111111111111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.27 (LET* ((ORIG #*00111001011010110) (X (COPY-SEQ ORIG)) (RESULT (NSUBSTITUTE-IF-NOT 1 (IS-NOT-EQL-P 1) X :KEY (FUNCTION 1+) :START 1 :END 10))) RESULT) #*01111111111010110)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE-IF-NOT 1 (FUNCTION ONEP) X))) RESULT) #*11111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.31 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE-IF-NOT 1 (FUNCTION ONEP) X :FROM-END T))) RESULT) #*11111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.32 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE-IF-NOT 1 (FUNCTION ONEP) X :COUNT 1))) RESULT) #*11011)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT-BIT-VECTOR.33 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 1 0 1)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (RESULT (NSUBSTITUTE-IF-NOT 1 (FUNCTION ONEP) X :FROM-END T :COUNT 1))) RESULT) #*01111)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ORDER.1 (LET ((I 0) A B C D E F G H) (VALUES (NSUBSTITUTE-IF-NOT (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :COUNT (PROGN (SETF D (INCF I)) 2) :START (PROGN (SETF E (INCF I)) 0) :END (PROGN (SETF F (INCF I)) 7) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :FROM-END (SETF H (INCF I))) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ORDER.2 (LET ((I 0) A B C D E F G H) (VALUES (NSUBSTITUTE-IF-NOT (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (FUNCTION IDENTITY)) (PROGN (SETF C (INCF I)) (LIST NIL 1 2 NIL 3 4 NIL 5)) :FROM-END (SETF H (INCF I)) :KEY (PROGN (SETF G (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF F (INCF I)) 7) :START (PROGN (SETF E (INCF I)) 0) :COUNT (PROGN (SETF D (INCF I)) 2)) I A B C D E F G H)) (NIL 1 2 A 3 4 A 5) 8 1 2 3 8 7 6 5 4)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.1 (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T) (A A 0 A A 0 A))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.2 (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T) (A A 0 A A 0 A))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.3 (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (A A 0 A A 0 A))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.4 (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (A A 0 A A 0 A))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.5 (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :KEY (FUNCTION 1-)) (1 A A A 1 A A))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.KEYWORDS.6 (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :KEY (FUNCTION 1-) :KEY (FUNCTION IDENTITY)) (1 A A A 1 A A))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.7 (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) (A A 0 A A 0 A))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ALLOW-OTHER-KEYS.8 (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION ZEROP) (LIST 1 2 0 3 1 0 3) :ALLOW-OTHER-KEYS NIL) (A A 0 A A 0 A))
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.1 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.2 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.3 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.4 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.5 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.6 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.7 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION NULL) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.8 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION CONS) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.9 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION CAR) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) TYPE-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.10 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION IDENTITY) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.11 (SIGNALS-ERROR (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION IDENTITY) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSUBSTITUTE-IF-NOT.ERROR.12 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (NSUBSTITUTE-IF-NOT 1 (FUNCTION NULL) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (LOAD "concatenate.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/concatenate.lsp 81888147>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CONCATENATE.1 (CONCATENATE (QUOTE LIST)) NIL)
;; Loading (DEFTEST CONCATENATE.2 (LET* ((ORIG (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (COPY (CONCATENATE (QUOTE LIST) ORIG))) (VALUES COPY (INTERSECTION (LOOP FOR E ON ORIG COLLECT E) (LOOP FOR E ON COPY COLLECT E) :TEST (FUNCTION EQ)))) (A B C D E) NIL)
;; Loading (DEFTEST CONCATENATE.3 (CONCATENATE (QUOTE LIST) "") NIL)
;; Loading (DEFTEST CONCATENATE.4 (CONCATENATE (QUOTE LIST) "abcd" (QUOTE (X Y Z)) NIL #*1101 #()) (#\a #\b #\c #\d X Y Z 1 1 0 1))
;; Loading (DEFTEST CONCATENATE.5 (CONCATENATE (QUOTE VECTOR)) #())
;; Loading (DEFTEST CONCATENATE.6 (CONCATENATE (QUOTE VECTOR) NIL "abcd" (QUOTE (X Y Z)) NIL #*1101 #()) #(#\a #\b #\c #\d X Y Z 1 1 0 1))
;; Loading (DEFTEST CONCATENATE.7 (LET* ((ORIG (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (COPY (CONCATENATE (QUOTE VECTOR) ORIG))) (VALUES COPY (EQT COPY ORIG))) #(A B C D E) NIL)
;; Loading (DEFTEST CONCATENATE.8 (CONCATENATE (QUOTE SIMPLE-VECTOR) (QUOTE (A B C)) #(1 2 3)) #(A B C 1 2 3))
;; Loading (DEFTEST CONCATENATE.9 (CONCATENATE (QUOTE SIMPLE-VECTOR)) #())
;; Loading (DEFTEST CONCATENATE.10 (CONCATENATE (QUOTE BIT-VECTOR) NIL) #*)
;; Loading (DEFTEST CONCATENATE.11 (CONCATENATE (QUOTE BIT-VECTOR)) #*)
;; Loading (DEFTEST CONCATENATE.12 (CONCATENATE (QUOTE BIT-VECTOR) (QUOTE (0 1 1)) NIL #(1 0 1) #()) #*011101)
;; Loading (DEFTEST CONCATENATE.13 (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) NIL) #*)
;; Loading (DEFTEST CONCATENATE.14 (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR)) #*)
;; Loading (DEFTEST CONCATENATE.15 (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (QUOTE (0 1 1)) NIL #(1 0 1) #()) #*011101)
;; Loading (DEFTEST CONCATENATE.16 (CONCATENATE (QUOTE STRING) "abc" (QUOTE (#\d #\e)) NIL #() "fg") "abcdefg")
;; Loading (DEFTEST CONCATENATE.17 (CONCATENATE (QUOTE SIMPLE-STRING) "abc" (QUOTE (#\d #\e)) NIL #() "fg") "abcdefg")
;; Loading (DEFTEST CONCATENATE.18 (CONCATENATE (QUOTE (VECTOR * *)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.18A (CONCATENATE (QUOTE (VECTOR *)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.18B (CONCATENATE (QUOTE (VECTOR)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.18C (CONCATENATE (QUOTE (SIMPLE-VECTOR *)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.18D (CONCATENATE (QUOTE (SIMPLE-VECTOR)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.19 (CONCATENATE (QUOTE (VECTOR * 8)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.20 (CONCATENATE (QUOTE (VECTOR SYMBOL 8)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.21 (CONCATENATE (QUOTE (VECTOR SYMBOL)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.22 (CONCATENATE (QUOTE (VECTOR SYMBOL *)) (QUOTE (A B C)) (QUOTE (D E F)) #(G H)) #(A B C D E F G H))
;; Loading (DEFTEST CONCATENATE.23 (CONCATENATE (QUOTE CONS) (QUOTE (A B C)) (QUOTE (D E F))) (A B C D E F))
;; Loading (DEFTEST CONCATENATE.24 (CONCATENATE (QUOTE NULL) NIL NIL) NIL)
;; Loading (DEFTEST CONCATENATE.25 (LET ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)) :FILL-POINTER 5))) (CONCATENATE (QUOTE LIST) X X)) (A B C D E A B C D E))
;; Loading (DEFTEST CONCATENATE.26 (LET ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)) :FILL-POINTER 5))) (CONCATENATE (QUOTE LIST) X)) (A B C D E))
;; Loading (DEFTEST CONCATENATE.27 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)) :FILL-POINTER 5)) (RESULT (CONCATENATE (QUOTE VECTOR) X))) (VALUES (NOT (SIMPLE-VECTOR-P RESULT)) RESULT)) NIL #(A B C D E))
;; Loading (DEFTEST CONCATENATE.28 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (CONCATENATE (QUOTE STRING) X (QUOTE (#\z))) (CONCATENATE (QUOTE STRING) (QUOTE (#\z)) X) (CONCATENATE (QUOTE STRING) X X) (CONCATENATE (QUOTE STRING) X) (NOT (SIMPLE-STRING-P (CONCATENATE (QUOTE STRING) X))))) "abcdez" "zabcde" "abcdeabcde" "abcde" NIL)
;; Loading (DEFTEST CONCATENATE.29 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (CONCATENATE (QUOTE STRING) X (QUOTE (#\z))) (CONCATENATE (QUOTE STRING) (QUOTE (#\z)) X) (CONCATENATE (QUOTE STRING) X X) (CONCATENATE (QUOTE STRING) X) (NOT (SIMPLE-STRING-P (CONCATENATE (QUOTE STRING) X))))) "abcdez" "zabcde" "abcdeabcde" "abcde" NIL)
;; Loading (DEFTEST CONCATENATE.30 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS #*0110010111 :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (CONCATENATE (QUOTE BIT-VECTOR) X (QUOTE (0))) (CONCATENATE (QUOTE (BIT-VECTOR)) (QUOTE (0)) X) (CONCATENATE (QUOTE (BIT-VECTOR 10)) X X) (CONCATENATE (QUOTE (BIT-VECTOR *)) X) (NOT (SIMPLE-BIT-VECTOR-P (CONCATENATE (QUOTE BIT-VECTOR) X))))) #*011000 #*001100 #*0110001100 #*01100 NIL)
;; Loading (DEFTEST CONCATENATE.30A (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS #*0110010111 :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) X (QUOTE (0))) (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) (QUOTE (0)) X) (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) X X) (CONCATENATE (QUOTE SIMPLE-BIT-VECTOR) X) (NOT (SIMPLE-BIT-VECTOR-P (CONCATENATE (QUOTE BIT-VECTOR) X))))) #*011000 #*001100 #*0110001100 #*01100 NIL)
;; Loading (DEFTEST CONCATENATE.31 :NOTES (:NIL-VECTORS-ARE-STRINGS) (CONCATENATE (QUOTE STRING) "abc" (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) "def") "abcdef")
;; Loading (DEFTEST CONCATENATE.32 :NOTES (:NIL-VECTORS-ARE-STRINGS) (CONCATENATE (QUOTE (ARRAY NIL (*)))) "")
;; Loading (DEFTEST CONCATENATE.33 (DO-SPECIAL-STRINGS (S "abc" NIL) (ASSERT (STRING= (CONCATENATE (QUOTE STRING) S S S) "abcabcabc")) (ASSERT (STRING= (CONCATENATE (QUOTE STRING) "xy" S) "xyabc")) (ASSERT (STRING= (CONCATENATE (QUOTE SIMPLE-STRING) S "z" S "w" S) "abczabcwabc")) (ASSERT (STRING= (CONCATENATE (QUOTE BASE-STRING) S "z" S "w" S) "abczabcwabc")) (ASSERT (STRING= (CONCATENATE (QUOTE SIMPLE-BASE-STRING) S "z" S "w" S) "abczabcwabc")) (ASSERT (STRING= (CONCATENATE (QUOTE (VECTOR CHARACTER)) S "z" S "w" S) "abczabcwabc"))) NIL)
;; Loading (DEFTEST CONCATENATE.34 (CONCATENATE (QUOTE SIMPLE-STRING) "abc" "def") "abcdef")
;; Loading (DEFTEST CONCATENATE.35 (CONCATENATE (QUOTE (SIMPLE-STRING)) "abc" "def") "abcdef")
;; Loading (DEFTEST CONCATENATE.36 (CONCATENATE (QUOTE (SIMPLE-STRING *)) "abc" "def") "abcdef")
;; Loading (DEFTEST CONCATENATE.37 (CONCATENATE (QUOTE (SIMPLE-STRING 6)) "abc" "def") "abcdef")
;; Loading (DEFTEST CONCATENATE.38 (CONCATENATE (QUOTE (STRING)) "abc" "def") "abcdef")
;; Loading (DEFTEST CONCATENATE.39 (CONCATENATE (QUOTE (STRING *)) "abc" "def") "abcdef")
;; Loading (DEFTEST CONCATENATE.40 (CONCATENATE (QUOTE (STRING 6)) "abc" "def") "abcdef")
;; Loading (DEFTEST CONCATENATE.ORDER.1 (LET ((I 0) W X Y Z) (VALUES (CONCATENATE (PROGN (SETF W (INCF I)) (QUOTE STRING)) (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "def") (PROGN (SETF Z (INCF I)) "ghi")) I W X Y Z)) "abcdefghi" 4 1 2 3 4)
;; Loading (DEFTEST CONCATENATE.ORDER.2 (LET ((I 0) X Y Z) (VALUES (CONCATENATE (QUOTE STRING) (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "def") (PROGN (SETF Z (INCF I)) "ghi")) I X Y Z)) "abcdefghi" 3 1 2 3)
;; Loading (DEF-FOLD-TEST CONCATENATE.FOLD.1 (CONCATENATE (QUOTE LIST) (QUOTE (A B)) (QUOTE (C D))))
;; Loading (DEF-FOLD-TEST CONCATENATE.FOLD.2 (CONCATENATE (QUOTE VECTOR) (QUOTE (A B)) (QUOTE (C D))))
;; Loading (DEF-FOLD-TEST CONCATENATE.FOLD.3 (CONCATENATE (QUOTE BIT-VECTOR) (QUOTE (0 0)) (QUOTE (1 0 1))))
;; Loading (DEF-FOLD-TEST CONCATENATE.FOLD.4 (CONCATENATE (QUOTE STRING) "ab" "cd"))
;; Loading (DEF-FOLD-TEST CONCATENATE.FOLD.5 (CONCATENATE (QUOTE LIST) (QUOTE (A B C D))))
;; Loading (DEF-FOLD-TEST CONCATENATE.FOLD.6 (CONCATENATE (QUOTE VECTOR) #(A B C D)))
;; Loading (DEF-FOLD-TEST CONCATENATE.FOLD.7 (CONCATENATE (QUOTE BIT-VECTOR) #*110101101))
;; Loading (DEF-FOLD-TEST CONCATENATE.FOLD.8 (CONCATENATE (QUOTE STRING) "abcdef"))
;; Loading (DEFTEST CONCATENATE.ERROR.1 (SIGNALS-ERROR (CONCATENATE (QUOTE SEQUENCE) (QUOTE (A B C))) ERROR) T)
;; Loading (DEFTEST CONCATENATE.ERROR.2 (SIGNALS-ERROR-ALWAYS (CONCATENATE (QUOTE FIXNUM) (QUOTE (A B C D E))) ERROR) T T)
;; Loading (DEFTEST CONCATENATE.ERROR.3 (SIGNALS-ERROR (CONCATENATE (QUOTE (VECTOR * 3)) (QUOTE (A B C D E))) TYPE-ERROR) T)
;; Loading (DEFTEST CONCATENATE.ERROR.4 (SIGNALS-ERROR (CONCATENATE) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONCATENATE.ERROR.5 (SIGNALS-ERROR (LOCALLY (CONCATENATE (QUOTE (VECTOR * 3)) (QUOTE (A B C D E))) T) TYPE-ERROR) T)
;; Loading (DEFTEST CONCATENATE.ERROR.6 :NOTES (:RESULT-TYPE-ELEMENT-TYPE-BY-SUBTYPE) (LET ((TYPE (QUOTE (OR (VECTOR BIT) (VECTOR T))))) (IF (SUBTYPEP TYPE (QUOTE VECTOR)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR-ALWAYS (CONCATENATE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TYPE)) (QUOTE (0 1 0)) (QUOTE (1 1 0))) ERROR))) (VALUES T T))) T T)
;; Loading (LOAD "merge.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/merge.lsp 81ABE407>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MERGE-LIST.1 (LET ((X (LIST 1 3 7 8 10)) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE LIST) X Y (FUNCTION <))) (1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-LIST.2 (LET ((X NIL) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE LIST) X Y (FUNCTION <))) (2 4 5 8 11))
;; Loading (DEFTEST MERGE-LIST.3 (LET ((X NIL) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE LIST) Y X (FUNCTION <))) (2 4 5 8 11))
;; Loading (DEFTEST MERGE-LIST.4 (MERGE (QUOTE LIST) NIL NIL (FUNCTION <)) NIL)
;; Loading (DEFTEST MERGE-LIST.5 (LET ((X (VECTOR 1 3 7 8 10)) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE LIST) X Y (FUNCTION <))) (1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-LIST.6 (LET ((X (LIST 1 3 7 8 10)) (Y (VECTOR 2 4 5 8 11))) (MERGE (QUOTE LIST) X Y (FUNCTION <))) (1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-LIST.7 (LET ((X (VECTOR 1 3 7 8 10)) (Y (VECTOR 2 4 5 8 11))) (MERGE (QUOTE LIST) X Y (FUNCTION <))) (1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-LIST.8 (LET ((X (SORT (LIST 1 3 7 8 10) (FUNCTION >))) (Y (SORT (LIST 2 4 5 8 11) (FUNCTION >)))) (MERGE (QUOTE LIST) X Y (FUNCTION <) :KEY (FUNCTION -))) (11 10 8 8 7 5 4 3 2 1))
;; Loading (DEFTEST MERGE-LIST.9 (LET ((X (LIST 1 3 7 8 10)) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE LIST) X Y (FUNCTION <) :KEY NIL)) (1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-LIST.10 (LET ((X (LIST 1 3 7 8 10)) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE LIST) X Y (QUOTE <))) (1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-LIST.11 (LET ((X (VECTOR)) (Y (VECTOR))) (MERGE (QUOTE LIST) X Y (FUNCTION <))) NIL)
;; Loading (DEFTEST MERGE-LIST.12 (LET ((X NIL) (Y (VECTOR 1 2 3))) (MERGE (QUOTE LIST) X Y (FUNCTION <))) (1 2 3))
;; Loading (DEFTEST MERGE-LIST.13 (LET ((X (VECTOR)) (Y (LIST 1 2 3))) (MERGE (QUOTE LIST) X Y (FUNCTION <))) (1 2 3))
;; Loading (DEFTEST MERGE-LIST.14 (LET ((X NIL) (Y (VECTOR 1 2 3))) (MERGE (QUOTE LIST) Y X (FUNCTION <))) (1 2 3))
;; Loading (DEFTEST MERGE-LIST.15 (LET ((X (VECTOR)) (Y (LIST 1 2 3))) (MERGE (QUOTE LIST) Y X (FUNCTION <))) (1 2 3))
;; Loading (DEFTEST MERGE-VECTOR.1 (LET ((X (LIST 1 3 7 8 10)) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #(1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-VECTOR.2 (LET ((X NIL) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #(2 4 5 8 11))
;; Loading (DEFTEST MERGE-VECTOR.3 (LET ((X NIL) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE VECTOR) Y X (FUNCTION <))) #(2 4 5 8 11))
;; Loading (DEFTEST MERGE-VECTOR.4 (MERGE (QUOTE VECTOR) NIL NIL (FUNCTION <)) #())
;; Loading (DEFTEST MERGE-VECTOR.5 (LET ((X (VECTOR 1 3 7 8 10)) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #(1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-VECTOR.6 (LET ((X (LIST 1 3 7 8 10)) (Y (VECTOR 2 4 5 8 11))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #(1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-VECTOR.7 (LET ((X (VECTOR 1 3 7 8 10)) (Y (VECTOR 2 4 5 8 11))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #(1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-VECTOR.8 (LET ((X (SORT (LIST 1 3 7 8 10) (FUNCTION >))) (Y (SORT (LIST 2 4 5 8 11) (FUNCTION >)))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <) :KEY (FUNCTION -))) #(11 10 8 8 7 5 4 3 2 1))
;; Loading (DEFTEST MERGE-VECTOR.9 (LET ((X (LIST 1 3 7 8 10)) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <) :KEY NIL)) #(1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-VECTOR.10 (LET ((X (LIST 1 3 7 8 10)) (Y (LIST 2 4 5 8 11))) (MERGE (QUOTE VECTOR) X Y (QUOTE <))) #(1 2 3 4 5 7 8 8 10 11))
;; Loading (DEFTEST MERGE-VECTOR.11 (LET ((X (VECTOR)) (Y (VECTOR))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #())
;; Loading (DEFTEST MERGE-VECTOR.12 (LET ((X NIL) (Y (VECTOR 1 2 3))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #(1 2 3))
;; Loading (DEFTEST MERGE-VECTOR.13 (LET ((X (VECTOR)) (Y (LIST 1 2 3))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #(1 2 3))
;; Loading (DEFTEST MERGE-VECTOR.14 (LET ((X NIL) (Y (VECTOR 1 2 3))) (MERGE (QUOTE VECTOR) Y X (FUNCTION <))) #(1 2 3))
;; Loading (DEFTEST MERGE-VECTOR.15 (LET ((X (VECTOR)) (Y (LIST 1 2 3))) (MERGE (QUOTE VECTOR) Y X (FUNCTION <))) #(1 2 3))
;; Loading (DEFTEST MERGE-VECTOR.16 (LET ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (2 5 8 9 11 12 14 15 18 30)) :FILL-POINTER 5)) (Y (LIST 1 6 10))) (MERGE (QUOTE VECTOR) X Y (FUNCTION <))) #(1 2 5 6 8 9 10 11))
;; Loading (DEFTEST MERGE-VECTOR.16A (LET ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (2 5 8 9 11 12 14 15 18 30)) :FILL-POINTER 5)) (Y (LIST 1 6 10))) (MERGE (QUOTE VECTOR) Y X (FUNCTION <))) #(1 2 5 6 8 9 10 11))
;; Loading (DEFTEST MERGE-VECTOR.17 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (2 5 8 9 11 12 14 15 18 30)) :FILL-POINTER 5)) (RESULT (MERGE (QUOTE VECTOR) X NIL (FUNCTION <)))) (VALUES (ARRAY-ELEMENT-TYPE RESULT) RESULT)) T #(2 5 8 9 11))
;; Loading (DEFTEST MERGE-VECTOR.18 (MERGE (QUOTE (VECTOR)) (LIST 1 3 10) (LIST 2 4 6) (FUNCTION <)) #(1 2 3 4 6 10))
;; Loading (DEFTEST MERGE-VECTOR.19 (MERGE (QUOTE (VECTOR *)) (LIST 1 3 10) (LIST 2 4 6) (FUNCTION <)) #(1 2 3 4 6 10))
;; Loading (DEFTEST MERGE-VECTOR.20 (MERGE (QUOTE (VECTOR T)) (LIST 1 3 10) (LIST 2 4 6) (FUNCTION <)) #(1 2 3 4 6 10))
;; Loading (DEFTEST MERGE-VECTOR.21 (MERGE (QUOTE (VECTOR * 6)) (LIST 1 3 10) (LIST 2 4 6) (FUNCTION <)) #(1 2 3 4 6 10))
;; Loading (DEFTEST MERGE-VECTOR.22 (MERGE (QUOTE (SIMPLE-VECTOR)) (LIST 2 4 6) (LIST 1 3 5) (FUNCTION <)) #(1 2 3 4 5 6))
;; Loading (DEFTEST MERGE-VECTOR.23 (MERGE (QUOTE (SIMPLE-VECTOR *)) (LIST 2 4 6) (LIST 1 3 5) (FUNCTION <)) #(1 2 3 4 5 6))
;; Loading (DEFTEST MERGE-VECTOR.24 (MERGE (QUOTE (SIMPLE-VECTOR 6)) (LIST 2 4 6) (LIST 1 3 5) (FUNCTION <)) #(1 2 3 4 5 6))
;; Loading (DEFTEST MERGE-STRING.1 (LET ((X (LIST #\1 #\3 #\7 #\8)) (Y (LIST #\2 #\4 #\5 #\9))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "12345789")
;; Loading (DEFTEST MERGE-STRING.1A (LET ((X (COPY-SEQ "1378")) (Y (LIST #\2 #\4 #\5 #\9))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "12345789")
;; Loading (DEFTEST MERGE-STRING.1B (LET ((X (LIST #\1 #\3 #\7 #\8)) (Y (COPY-SEQ "2459"))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "12345789")
;; Loading (DEFTEST MERGE-STRING.1C (LET ((X (COPY-SEQ "1378")) (Y (COPY-SEQ "2459"))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "12345789")
;; Loading (DEFTEST MERGE-STRING.1D (LET ((X (COPY-SEQ "1378")) (Y (COPY-SEQ "2459"))) (MERGE (QUOTE STRING) Y X (FUNCTION CHAR<))) "12345789")
;; Loading (DEFTEST MERGE-STRING.2 (LET ((X NIL) (Y (LIST #\2 #\4 #\5 #\9))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "2459")
;; Loading (DEFTEST MERGE-STRING.3 (LET ((X NIL) (Y (LIST #\2 #\4 #\5 #\9))) (MERGE (QUOTE STRING) Y X (FUNCTION CHAR<))) "2459")
;; Loading (DEFTEST MERGE-STRING.4 (MERGE (QUOTE STRING) NIL NIL (FUNCTION CHAR<)) "")
;; Loading (DEFTEST MERGE-STRING.8 (LET ((X (LIST #\1 #\3 #\7 #\8)) (Y (LIST #\2 #\4 #\5))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<) :KEY (FUNCTION NEXTDIGIT))) "1234578")
;; Loading (DEFTEST MERGE-STRING.9 (LET ((X (LIST #\1 #\3 #\7 #\8)) (Y (LIST #\2 #\4 #\5 #\9))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<) :KEY NIL)) "12345789")
;; Loading (DEFTEST MERGE-STRING.10 (LET ((X (LIST #\1 #\3 #\7 #\8)) (Y (LIST #\2 #\4 #\5 #\9))) (MERGE (QUOTE STRING) X Y (QUOTE CHAR<))) "12345789")
;; Loading (DEFTEST MERGE-STRING.11 (LET ((X (VECTOR)) (Y (VECTOR))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "")
;; Loading (DEFTEST MERGE-STRING.12 (LET ((X NIL) (Y (VECTOR #\1 #\2 #\3))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "123")
;; Loading (DEFTEST MERGE-STRING.13 (LET ((X (VECTOR)) (Y (LIST #\1 #\2 #\3))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "123")
;; Loading (DEFTEST MERGE-STRING.13A (LET ((X (COPY-SEQ "")) (Y (LIST #\1 #\2 #\3))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "123")
;; Loading (DEFTEST MERGE-STRING.14 (LET ((X NIL) (Y (VECTOR #\1 #\2 #\3))) (MERGE (QUOTE STRING) Y X (FUNCTION CHAR<))) "123")
;; Loading (DEFTEST MERGE-STRING.14A (LET ((X (COPY-SEQ "")) (Y (VECTOR #\1 #\2 #\3))) (MERGE (QUOTE STRING) Y X (FUNCTION CHAR<))) "123")
;; Loading (DEFTEST MERGE-STRING.15 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "adgkmpruwv" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (Y (COPY-SEQ "bci"))) (MERGE (QUOTE STRING) X Y (FUNCTION CHAR<))) "abcdgikm")
;; Loading (DEFTEST MERGE-STRING.16 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "adgkmpruwv" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (Y (COPY-SEQ "bci"))) (MERGE (QUOTE STRING) Y X (FUNCTION CHAR<))) "abcdgikm")
;; Loading (DEFTEST MERGE-STRING.17 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "adgkmpruwv" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (MERGE (QUOTE STRING) NIL X (FUNCTION CHAR<))) "adgkm")
;; Loading (DEFTEST MERGE-STRING.18 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "adgkmpruwv" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (MERGE (QUOTE STRING) X NIL (FUNCTION CHAR<))) "adgkm")
;; Loading (DEFTEST MERGE-STRING.19 (DO-SPECIAL-STRINGS (S "ace" NIL) (ASSERT (STRING= (MERGE (QUOTE STRING) S (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef"))) NIL)
;; Loading (DEFTEST MERGE-STRING.20 (DO-SPECIAL-STRINGS (S "ace" NIL) (ASSERT (STRING= (MERGE (QUOTE BASE-STRING) (COPY-SEQ "bdf") S (FUNCTION CHAR<)) "abcdef"))) NIL)
;; Loading (DEFTEST MERGE-STRING.21 (DO-SPECIAL-STRINGS (S "ace" NIL) (ASSERT (STRING= (MERGE (QUOTE SIMPLE-STRING) S (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef"))) NIL)
;; Loading (DEFTEST MERGE-STRING.22 (DO-SPECIAL-STRINGS (S "ace" NIL) (ASSERT (STRING= (MERGE (QUOTE SIMPLE-BASE-STRING) S (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef"))) NIL)
;; Loading (DEFTEST MERGE-STRING.23 (DO-SPECIAL-STRINGS (S "ace" NIL) (ASSERT (STRING= (MERGE (QUOTE (VECTOR CHARACTER)) S (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef"))) NIL)
;; Loading (DEFTEST MERGE-STRING.24 (MERGE (QUOTE (STRING)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.25 (MERGE (QUOTE (STRING *)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.26 (MERGE (QUOTE (STRING 6)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.27 (MERGE (QUOTE (SIMPLE-STRING)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MERGE-STRING.28 (MERGE (QUOTE (SIMPLE-STRING *)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.29 (MERGE (QUOTE (SIMPLE-STRING 6)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.30 (MERGE (QUOTE (BASE-STRING)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.31 (MERGE (QUOTE (BASE-STRING *)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.32 (MERGE (QUOTE (BASE-STRING 6)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.33 (MERGE (QUOTE (SIMPLE-BASE-STRING)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.34 (MERGE (QUOTE (SIMPLE-BASE-STRING *)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-STRING.35 (MERGE (QUOTE (SIMPLE-BASE-STRING 6)) (COPY-SEQ "ace") (COPY-SEQ "bdf") (FUNCTION CHAR<)) "abcdef")
;; Loading (DEFTEST MERGE-BIT-VECTOR.1 (LET ((X (LIST 0 0 1 1 1)) (Y (LIST 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.2 (LET ((X NIL) (Y (LIST 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*00011)
;; Loading (DEFTEST MERGE-BIT-VECTOR.3 (LET ((X NIL) (Y (LIST 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) Y X (FUNCTION <))) #*00011)
;; Loading (DEFTEST MERGE-BIT-VECTOR.4 (MERGE (QUOTE BIT-VECTOR) NIL NIL (FUNCTION <)) #*)
;; Loading (DEFTEST MERGE-BIT-VECTOR.5 (LET ((X (VECTOR 0 0 1 1 1)) (Y (LIST 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.5A (LET ((X (COPY-SEQ #*00111)) (Y (LIST 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.5B (LET ((X (LIST 0 0 1 1 1)) (Y (COPY-SEQ #*00011))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.5C (LET ((X (COPY-SEQ #*00111)) (Y (COPY-SEQ #*00011))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.5D (LET ((X (COPY-SEQ #*11111)) (Y (COPY-SEQ #*00000))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.5E (LET ((X (COPY-SEQ #*11111)) (Y (COPY-SEQ #*00000))) (MERGE (QUOTE BIT-VECTOR) Y X (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.6 (LET ((X (LIST 0 0 1 1 1)) (Y (VECTOR 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.7 (LET ((X (VECTOR 0 0 1 1 1)) (Y (VECTOR 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.8 (LET ((X (LIST 1 1 1 0 0)) (Y (LIST 1 1 0 0 0))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <) :KEY (FUNCTION -))) #*1111100000)
;; Loading (DEFTEST MERGE-BIT-VECTOR.9 (LET ((X (LIST 0 0 1 1 1)) (Y (LIST 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <) :KEY NIL)) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.10 (LET ((X (LIST 0 0 1 1 1)) (Y (LIST 0 0 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (QUOTE <))) #*0000011111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.11 (LET ((X (COPY-SEQ #*)) (Y (COPY-SEQ #*))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*)
;; Loading (DEFTEST MERGE-BIT-VECTOR.12 (LET ((X (COPY-SEQ #*)) (Y (COPY-SEQ #*011))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*011)
;; Loading (DEFTEST MERGE-BIT-VECTOR.13 (LET ((X (COPY-SEQ #*)) (Y (LIST 0 1 1))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*011)
;; Loading (DEFTEST MERGE-BIT-VECTOR.14 (LET ((X NIL) (Y (VECTOR 0 1 1))) (MERGE (QUOTE BIT-VECTOR) Y X (FUNCTION <))) #*011)
;; Loading (DEFTEST MERGE-BIT-VECTOR.15 (LET ((X (COPY-SEQ #*)) (Y (LIST 0 1 1))) (MERGE (QUOTE BIT-VECTOR) Y X (FUNCTION <))) #*011)
;; Loading (DEFTEST MERGE-BIT-VECTOR.16 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS #*0001101010 :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (Y (COPY-SEQ #*001))) (MERGE (QUOTE BIT-VECTOR) X Y (FUNCTION <))) #*00000111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.17 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS #*0001101010 :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT))) (Y (COPY-SEQ #*001))) (MERGE (QUOTE BIT-VECTOR) Y X (FUNCTION <))) #*00000111)
;; Loading (DEFTEST MERGE-BIT-VECTOR.18 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS #*0001101010 :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (MERGE (QUOTE BIT-VECTOR) NIL X (FUNCTION <))) #*00011)
;; Loading (DEFTEST MERGE-BIT-VECTOR.19 (LET* ((X (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS #*0001101010 :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BIT)))) (MERGE (QUOTE BIT-VECTOR) X NIL (FUNCTION <))) #*00011)
;; Loading (DEFTEST MERGE-CONS.1 (MERGE (QUOTE CONS) (LIST 1 2 3) (LIST 4 5 6) (FUNCTION <)) (1 2 3 4 5 6))
;; Loading (DEFTEST MERGE-NULL.1 (MERGE (QUOTE NULL) NIL NIL (FUNCTION <)) NIL)
;; Loading (DEFTEST MERGE-VECTOR-LENGTH.1 (MERGE (QUOTE (VECTOR * 6)) (LIST 1 2 3) (LIST 4 5 6) (FUNCTION <)) #(1 2 3 4 5 6))
;; Loading (DEFTEST MERGE-BIT-VECTOR-LENGTH.1 (MERGE (QUOTE (BIT-VECTOR 6)) (LIST 0 1 1) (LIST 0 0 1) (FUNCTION <)) #*000111)
;; Loading (DEFTEST MERGE.ORDER.1 (LET ((I 0) A B C D) (VALUES (MERGE (PROGN (SETF A (INCF I)) (QUOTE LIST)) (PROGN (SETF B (INCF I)) (LIST 2 5 6)) (PROGN (SETF C (INCF I)) (LIST 1 3 4)) (PROGN (SETF D (INCF I)) (FUNCTION <))) I A B C D)) (1 2 3 4 5 6) 4 1 2 3 4)
;; Loading (DEFTEST MERGE.ERROR.1 (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (MERGE (QUOTE SYMBOL) (LIST 1 2 3) (LIST 4 5 6) (FUNCTION <))))) (ERROR NIL :CAUGHT)) :CAUGHT)
;; Loading (DEFTEST MERGE.ERROR.2 (SIGNALS-ERROR (MERGE (QUOTE (VECTOR * 3)) (LIST 1 2 3) (LIST 4 5 6) (FUNCTION <)) TYPE-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.3 (SIGNALS-ERROR (MERGE (QUOTE (BIT-VECTOR 3)) (LIST 0 0 0) (LIST 1 1 1) (FUNCTION <)) TYPE-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.4 (SIGNALS-ERROR (MERGE (QUOTE (VECTOR * 7)) (LIST 1 2 3) (LIST 4 5 6) (FUNCTION <)) TYPE-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.5 (SIGNALS-ERROR (MERGE (QUOTE (BIT-VECTOR 7)) (LIST 0 0 0) (LIST 1 1 1) (FUNCTION <)) TYPE-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.6 (SIGNALS-ERROR (MERGE (QUOTE NULL) (LIST 1 2 3) (LIST 4 5 6) (FUNCTION <)) TYPE-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.7 (SIGNALS-ERROR (MERGE) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.8 (SIGNALS-ERROR (MERGE (QUOTE LIST)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.9 (SIGNALS-ERROR (MERGE (QUOTE LIST) (LIST 2 4 6)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.10 (SIGNALS-ERROR (MERGE (QUOTE LIST) (LIST 2 4 6) (LIST 1 3 5)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.11 (SIGNALS-ERROR (MERGE (QUOTE LIST) (LIST 2 4 6) (LIST 1 3 5) (FUNCTION <) :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.12 (SIGNALS-ERROR (MERGE (QUOTE LIST) (LIST 2 4 6) (LIST 1 3 5) (FUNCTION <) :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.13 (SIGNALS-ERROR (MERGE (QUOTE LIST) (LIST 2 4 6) (LIST 1 3 5) (FUNCTION <) :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.14 (SIGNALS-ERROR (MERGE (QUOTE LIST) (LIST 2 4 6) (LIST 1 3 5) (FUNCTION <) 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.15 (SIGNALS-ERROR (LOCALLY (MERGE (QUOTE (VECTOR * 3)) (LIST 1 2 3) (LIST 4 5 6) (FUNCTION <)) T) TYPE-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.16 (SIGNALS-ERROR (MERGE (QUOTE LIST) (LIST 1 2) (LIST 3 4) (FUNCTION CAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MERGE.ERROR.17 (SIGNALS-ERROR (MERGE (QUOTE LIST) (LIST (QUOTE A) (QUOTE B)) (LIST 3 4) (FUNCTION MAX)) TYPE-ERROR) T)
;; Loading (LOAD "remove.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/remove.lsp C18670D7>
;; Loading (COMPILE-AND-LOAD "remove-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/remove-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN MAKE-RANDOM-ELEMENT (TYPE) (COND ((SUBTYPEP* (QUOTE FIXNUM) TYPE) (RANDOM MOST-POSITIVE-FIXNUM)) ((AND (LISTP TYPE) (EQL (CAR TYPE) (QUOTE INTEGER)) (INTEGERP (CADR TYPE)) (INTEGERP (CADDR TYPE)) (NULL (CDDDR TYPE))) (+ (CADR TYPE) (RANDOM (- (1+ (CADDR TYPE)) (CADR TYPE))))) ((SUBTYPEP* (QUOTE (INTEGER 0 255)) TYPE) (RANDOM 255)) ((SUBTYPEP* (QUOTE (INTEGER 0 7)) TYPE) (RANDOM 8)) ((SUBTYPEP* (QUOTE BIT) TYPE) (RANDOM 2)) ((SUBTYPEP* (QUOTE SYMBOL) TYPE) (ELT (QUOTE (A B C D E F G H)) (RANDOM 8))) ((SUBTYPEP* (QUOTE (MEMBER #\a #\b #\c #\d #\e #\f #\g #\h)) TYPE) (ELT "abcdefgh" (RANDOM 8))) (T (ERROR "Can't get random element of type ~A~%." TYPE)))).
;; Compiling form (DEFUN MAKE-RANDOM-REMOVE-INPUT (LEN TYPE ELEMENT-TYPE) "Randomly generate a test case for REMOVE.  Given a length
   a sequence type, and an element type, produce a random
   sequence of length LEN of sequence type TYPE, and either
   generate a random member of the sequence or a random
   element of the element type to delete from the sequence." (LET* ((SEQ (IF (SUBTYPEP* TYPE (QUOTE LIST)) (LOOP FOR I FROM 1 TO LEN COLLECT (MAKE-RANDOM-ELEMENT ELEMENT-TYPE)) (LET ((SEQ (IF (AND (SUBTYPEP TYPE (QUOTE VECTOR)) (COIN 3)) (MAKE-ARRAY (LIST (+ LEN (RANDOM (1+ LEN)))) :INITIAL-ELEMENT (MAKE-RANDOM-ELEMENT ELEMENT-TYPE) :FILL-POINTER LEN :ELEMENT-TYPE ELEMENT-TYPE) (MAKE-SEQUENCE TYPE LEN)))) (DOTIMES (I LEN) (SETF (ELT SEQ I) (MAKE-RANDOM-ELEMENT ELEMENT-TYPE))) SEQ))) (E (IF (AND (> LEN 0) (COIN)) (ELT SEQ (RANDOM LEN)) (MAKE-RANDOM-ELEMENT ELEMENT-TYPE)))) (VALUES LEN SEQ E))).
;; Compiling form (DEFUN MY-REMOVE (ELEMENT SEQUENCE &KEY (START 0) (END NIL) (TEST (FUNCTION EQL) TEST-P) (TEST-NOT NIL TEST-NOT-P) (KEY NIL) (FROM-END NIL) (COUNT NIL)) (ASSERT (NOT (AND TEST-P TEST-NOT-P))) (MY-REMOVE-IF (COND (TEST-P (SETF TEST (COERCE TEST (QUOTE FUNCTION))) (FUNCTION (LAMBDA (X) (FUNCALL (THE FUNCTION TEST) ELEMENT X)))) (TEST-NOT-P (SETF TEST-NOT (COERCE TEST-NOT (QUOTE FUNCTION))) (FUNCTION (LAMBDA (X) (NOT (FUNCALL (THE FUNCTION TEST-NOT) ELEMENT X))))) (T (FUNCTION (LAMBDA (X) (EQL ELEMENT X))))) SEQUENCE :START START :END END :KEY KEY :FROM-END FROM-END :COUNT COUNT)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MY-REMOVE-IF (PREDICATE ORIGINAL-SEQUENCE &KEY (FROM-END NIL) (START 0) (END NIL) (COUNT NIL) (KEY (FUNCTION IDENTITY))) (LET ((LEN (LENGTH ORIGINAL-SEQUENCE)) (SEQUENCE (COPY-SEQ ORIGINAL-SEQUENCE))) (UNLESS END (SETQ END LEN)) (UNLESS KEY (SETQ KEY (FUNCTION IDENTITY))) (UNLESS COUNT (SETQ COUNT LEN)) (ASSERT (<= 0 START END LEN)) (ASSERT (TYPEP SEQUENCE (QUOTE SEQUENCE))) (ASSERT (INTEGERP COUNT)) (ASSERT (OR (SYMBOLP PREDICATE) (FUNCTIONP PREDICATE))) (ASSERT (OR (SYMBOLP KEY) (FUNCTIONP KEY))) (SETF PREDICATE (COERCE PREDICATE (QUOTE FUNCTION))) (SETF KEY (COERCE KEY (QUOTE FUNCTION))) (WHEN FROM-END (PSETQ SEQUENCE (NREVERSE SEQUENCE) START (- LEN END) END (- LEN START))) (LET ((POS 0) (RESULT NIL)) (MAP NIL (FUNCTION (LAMBDA (E) (IF (AND (> COUNT 0) (>= POS START) (< POS END) (FUNCALL (THE FUNCTION PREDICATE) (FUNCALL (THE FUNCTION KEY) E))) (DECF COUNT) (PUSH E RESULT)) (INCF POS))) SEQUENCE) (UNLESS FROM-END (SETQ RESULT (NREVERSE RESULT))) (IF (LISTP SEQUENCE) RESULT (LET ((ELEMENT-TYPE (ARRAY-ELEMENT-TYPE ORIGINAL-SEQUENCE))) (MAKE-ARRAY (LENGTH RESULT) :ELEMENT-TYPE ELEMENT-TYPE :INITIAL-CONTENTS RESULT)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MY-REMOVE-IF-NOT (PRED &REST ARGS) (WHEN (SYMBOLP PRED) (SETQ PRED (COERCE PRED (QUOTE FUNCTION)))) (ASSERT (TYPEP PRED (QUOTE FUNCTION))) (APPLY (FUNCTION MY-REMOVE-IF) (COMPLEMENT PRED) ARGS)).
;; Compiling form (DEFUN MAKE-RANDOM-RD-PARAMS (MAXLEN) "Generate random paramaters for remove/delete/etc. functions." (LET* ((ELEMENT-TYPE (RCASE (2 T) (1 (QUOTE BIT)) (1 (QUOTE (INTEGER 0 2))) (1 (QUOTE SYMBOL)))) (TYPE-SELECT (RANDOM 7)) (TYPE (CASE TYPE-SELECT (0 (QUOTE LIST)) (1 (QUOTE VECTOR)) (2 (SETQ ELEMENT-TYPE (QUOTE CHARACTER)) (QUOTE STRING)) (3 (SETQ ELEMENT-TYPE (QUOTE BIT)) (QUOTE BIT-VECTOR)) (4 (QUOTE SIMPLE-VECTOR)) (5 (SETQ ELEMENT-TYPE (QUOTE (INTEGER 0 255))) (QUOTE (VECTOR (INTEGER 0 255)))) (6 (SETQ ELEMENT-TYPE (QUOTE FIXNUM)) (QUOTE (VECTOR FIXNUM))) (T (ERROR "Can't happen?!~%")))) (LEN (RANDOM MAXLEN)) (START (AND (COIN) (> LEN 0) (RANDOM LEN))) (END (AND (COIN) (IF START (+ START (RANDOM (- LEN START))) (RANDOM (1+ LEN))))) (FROM-END (COIN)) (COUNT (CASE (RANDOM 5) ((0 1) NIL) ((2 3) (RANDOM (1+ LEN))) (T (IF (COIN) -1 -10000000000000)))) (SEQ (MULTIPLE-VALUE-BIND (X Y Z) (MAKE-RANDOM-REMOVE-INPUT LEN TYPE ELEMENT-TYPE) (DECLARE (IGNORE X Z)) Y)) (KEY (AND (COIN) (CASE TYPE-SELECT (2 (RANDOM-CASE (FUNCTION CHAR-UPCASE) (QUOTE CHAR-UPCASE) (FUNCTION CHAR-DOWNCASE) (QUOTE CHAR-DOWNCASE))) (3 (FUNCTION (LAMBDA (X) (- 1 X)))) ((5 6) (RANDOM-CASE (FUNCTION 1+) (QUOTE 1+) (FUNCTION 1-) (QUOTE 1-))) (T (RANDOM-CASE (QUOTE IDENTITY) (FUNCTION IDENTITY)))))) (TEST (AND (EQL (RANDOM 3) 0) (RANDOM-CASE (QUOTE EQ) (QUOTE EQL) (QUOTE EQUAL) (FUNCTION EQ) (FUNCTION EQL) (FUNCTION EQUAL)))) (TEST-NOT (AND (NOT TEST) (COIN) (RANDOM-CASE (QUOTE EQ) (QUOTE EQL) (QUOTE EQUAL) (FUNCTION EQ) (FUNCTION EQL) (FUNCTION EQUAL))))) (VALUES ELEMENT-TYPE TYPE LEN START END FROM-END COUNT SEQ KEY TEST TEST-NOT))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN RANDOM-TEST-REMOVE-ARGS (MAXLEN) (MULTIPLE-VALUE-BIND (ELEMENT-TYPE TYPE LEN START END FROM-END COUNT SEQ KEY TEST TEST-NOT) (MAKE-RANDOM-RD-PARAMS MAXLEN) (DECLARE (IGNORE TYPE)) (LET ((ELEMENT (IF (AND (COIN) (> LEN 0)) (RANDOM-FROM-SEQ SEQ) (MAKE-RANDOM-ELEMENT ELEMENT-TYPE))) (ARG-LIST (REDUCE (FUNCTION NCONC) (RANDOM-PERMUTE (LIST (WHEN START (LIST :START START)) (COND (END (LIST :END END)) ((COIN) (LIST :END NIL))) (COND (FROM-END (LIST :FROM-END FROM-END)) ((COIN) (LIST :FROM-END NIL))) (COND (COUNT (LIST :COUNT COUNT)) ((COIN) (LIST :COUNT NIL))) (COND (KEY (LIST :KEY KEY))) (WHEN TEST (LIST :TEST TEST)) (WHEN TEST-NOT (LIST :TEST TEST-NOT))))))) (VALUES ELEMENT SEQ ARG-LIST)))).
;; Compiling form (DEFPARAMETER *REMOVE-FAIL-ARGS* NIL).
;; Compiling form (DEFUN RANDOM-TEST-REMOVE (MAXLEN &KEY (TESTED-FN (FUNCTION REMOVE)) (CHECK-FN (FUNCTION MY-REMOVE)) (PURE T)) (SETF TESTED-FN (COERCE TESTED-FN (QUOTE FUNCTION))) (SETF CHECK-FN (COERCE CHECK-FN (QUOTE FUNCTION))) (MULTIPLE-VALUE-BIND (ELEMENT SEQ ARG-LIST) (RANDOM-TEST-REMOVE-ARGS MAXLEN) (LET* ((SEQ1 (COPY-SEQ SEQ)) (SEQ2 (COPY-SEQ SEQ)) (SEQ1R (APPLY (THE FUNCTION TESTED-FN) ELEMENT SEQ1 ARG-LIST)) (SEQ2R (APPLY (THE FUNCTION CHECK-FN) ELEMENT SEQ2 ARG-LIST))) (SETQ *REMOVE-FAIL-ARGS* (LIST* ELEMENT SEQ ARG-LIST)) (COND ((AND PURE (NOT (EQUALP SEQ SEQ1))) :FAIL1) ((AND PURE (NOT (EQUALP SEQ SEQ2))) :FAIL2) ((NOT (EQUALP SEQ1R SEQ2R)) :FAIL3) (T T))))).
;; Compiling form (DEFUN RANDOM-TEST-REMOVE-IF (MAXLEN &OPTIONAL (NEGATE NIL)) (MULTIPLE-VALUE-BIND (ELEMENT SEQ ARG-LIST) (RANDOM-TEST-REMOVE-ARGS MAXLEN) (LET ((FN (GETF ARG-LIST :KEY)) (TEST (GETF ARG-LIST :TEST))) (REMF ARG-LIST :KEY) (REMF ARG-LIST :TEST) (REMF ARG-LIST :TEST-NOT) (UNLESS TEST (SETQ TEST (FUNCTION EQL))) (SETF TEST (COERCE TEST (QUOTE FUNCTION))) (IF FN (CASE (RANDOM 3) (0 (SETF ARG-LIST (LIST* :KEY (QUOTE IDENTITY) ARG-LIST))) (1 (SETF ARG-LIST (LIST* :KEY (FUNCTION IDENTITY) ARG-LIST))) (T NIL)) (SETF FN (IF (COIN) (QUOTE IDENTITY) (FUNCTION (LAMBDA (X) (FUNCALL (THE FUNCTION TEST) ELEMENT X)))))) (LET* ((SEQ1 (COPY-SEQ SEQ)) (SEQ2 (COPY-SEQ SEQ)) (SEQ1R (APPLY (IF NEGATE (FUNCTION REMOVE-IF-NOT) (FUNCTION REMOVE-IF)) FN SEQ1 ARG-LIST)) (SEQ2R (APPLY (IF NEGATE (FUNCTION MY-REMOVE-IF-NOT) (FUNCTION MY-REMOVE-IF)) FN SEQ2 ARG-LIST))) (SETQ *REMOVE-FAIL-ARGS* (CONS SEQ1 ARG-LIST)) (COND ((NOT (EQUALP SEQ SEQ1)) :FAIL1) ((NOT (EQUALP SEQ SEQ2)) :FAIL2) ((NOT (EQUALP SEQ1R SEQ2R)) :FAIL3) (T T)))))).
;; Compiling form (DEFUN RANDOM-TEST-DELETE (MAXLEN) (RANDOM-TEST-REMOVE MAXLEN :TESTED-FN (FUNCTION DELETE) :PURE NIL)).
;; Compiling form (DEFUN RANDOM-TEST-DELETE-IF (MAXLEN &OPTIONAL (NEGATE NIL)) (MULTIPLE-VALUE-BIND (ELEMENT SEQ ARG-LIST) (RANDOM-TEST-REMOVE-ARGS MAXLEN) (LET ((FN (GETF ARG-LIST :KEY)) (TEST (GETF ARG-LIST :TEST))) (REMF ARG-LIST :KEY) (REMF ARG-LIST :TEST) (REMF ARG-LIST :TEST-NOT) (UNLESS TEST (SETQ TEST (FUNCTION EQL))) (SETF TEST (COERCE TEST (QUOTE FUNCTION))) (IF FN (CASE (RANDOM 3) (0 (SETF ARG-LIST (LIST* :KEY (QUOTE IDENTITY) ARG-LIST))) (1 (SETF ARG-LIST (LIST* :KEY (FUNCTION IDENTITY) ARG-LIST))) (T NIL)) (SETF FN (IF (COIN) (QUOTE IDENTITY) (FUNCTION (LAMBDA (X) (FUNCALL (THE FUNCTION TEST) ELEMENT X)))))) (SETQ *REMOVE-FAIL-ARGS* (LIST* SEQ ARG-LIST)) (LET* ((SEQ1 (COPY-SEQ SEQ)) (SEQ2 (COPY-SEQ SEQ)) (SEQ1R (APPLY (IF NEGATE (FUNCTION DELETE-IF-NOT) (FUNCTION DELETE-IF)) FN SEQ1 ARG-LIST)) (SEQ2R (APPLY (IF NEGATE (FUNCTION MY-REMOVE-IF-NOT) (FUNCTION MY-REMOVE-IF)) FN SEQ2 ARG-LIST))) (COND ((NOT (EQUALP SEQ1R SEQ2R)) :FAIL3) (T T)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/remove-aux.llf C194A897>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST REMOVE-LIST.1 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST REMOVE-LIST.2 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :COUNT NIL))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST REMOVE-LIST.3 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :KEY NIL))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST REMOVE-LIST.4 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :COUNT 100))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST REMOVE-LIST.5 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :COUNT 0))) (AND (EQUALP ORIG X) Y)) (A B C A B D A C B A E))
;; Loading (DEFTEST REMOVE-LIST.6 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :COUNT 1))) (AND (EQUALP ORIG X) Y)) (B C A B D A C B A E))
;; Loading (DEFTEST REMOVE-LIST.7 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE C) X :COUNT 1))) (AND (EQUALP ORIG X) Y)) (A B A B D A C B A E))
;; Loading (DEFTEST REMOVE-LIST.8 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :FROM-END T))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST REMOVE-LIST.9 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :FROM-END T :COUNT 1))) (AND (EQUALP ORIG X) Y)) (A B C A B D A C B E))
;; Loading (DEFTEST REMOVE-LIST.10 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :FROM-END T :COUNT 4))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST REMOVE-LIST.11 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG))) (VALUES (LOOP FOR I FROM 0 TO 10 COLLECT (REMOVE (QUOTE A) X :START I)) (EQUALP ORIG X))) ((B C B D C B E) (A B C B D C B E) (A B C B D C B E) (A B C B D C B E) (A B C A B D C B E) (A B C A B D C B E) (A B C A B D C B E) (A B C A B D A C B E) (A B C A B D A C B E) (A B C A B D A C B E) (A B C A B D A C B A E)) T)
;; Loading (DEFTEST REMOVE-LIST.12 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG))) (VALUES (LOOP FOR I FROM 0 TO 10 COLLECT (REMOVE (QUOTE A) X :START I :END NIL)) (EQUALP ORIG X))) ((B C B D C B E) (A B C B D C B E) (A B C B D C B E) (A B C B D C B E) (A B C A B D C B E) (A B C A B D C B E) (A B C A B D C B E) (A B C A B D A C B E) (A B C A B D A C B E) (A B C A B D A C B E) (A B C A B D A C B A E)) T)
;; Loading (DEFTEST REMOVE-LIST.13 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG))) (VALUES (LOOP FOR I FROM 0 TO 10 COLLECT (REMOVE (QUOTE A) X :START I :END 11)) (EQUALP ORIG X))) ((B C B D C B E) (A B C B D C B E) (A B C B D C B E) (A B C B D C B E) (A B C A B D C B E) (A B C A B D C B E) (A B C A B D C B E) (A B C A B D A C B E) (A B C A B D A C B E) (A B C A B D A C B E) (A B C A B D A C B A E)) T)
;; Loading (DEFTEST REMOVE-LIST.14 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE (QUOTE A) X :END NIL))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST REMOVE-LIST.15 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG))) (VALUES (LOOP FOR I FROM 0 TO 9 COLLECT (REMOVE (QUOTE A) X :START I :END 9)) (EQUALP ORIG X))) ((B C B D C B A E) (A B C B D C B A E) (A B C B D C B A E) (A B C B D C B A E) (A B C A B D C B A E) (A B C A B D C B A E) (A B C A B D C B A E) (A B C A B D A C B A E) (A B C A B D A C B A E) (A B C A B D A C B A E)) T)
;; Loading (DEFTEST REMOVE-LIST.16 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG))) (VALUES (LOOP FOR I FROM 0 TO 10 COLLECT (REMOVE (QUOTE A) X :START I :END 11 :COUNT 1)) (EQUALP ORIG X))) ((B C A B D A C B A E) (A B C B D A C B A E) (A B C B D A C B A E) (A B C B D A C B A E) (A B C A B D C B A E) (A B C A B D C B A E) (A B C A B D C B A E) (A B C A B D A C B E) (A B C A B D A C B E) (A B C A B D A C B E) (A B C A B D A C B A E)) T)
;; Loading (DEFTEST REMOVE-LIST.17 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG))) (VALUES (LOOP FOR I FROM 0 TO 10 COLLECT (REMOVE (QUOTE A) X :START I :END (1+ I))) (EQUALP ORIG X))) ((B C A B D A C B A E) (A B C A B D A C B A E) (A B C A B D A C B A E) (A B C B D A C B A E) (A B C A B D A C B A E) (A B C A B D A C B A E) (A B C A B D C B A E) (A B C A B D A C B A E) (A B C A B D A C B A E) (A B C A B D A C B E) (A B C A B D A C B A E)) T)
;; Loading (DEFTEST REMOVE-LIST.19 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 1 X :KEY (FUNCTION 1-)))) (AND (EQUALP ORIG X) Y)) (1 3 6 1 4 1 3 7))
;; Loading (DEFTEST REMOVE-LIST.20 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 3 X :TEST (FUNCTION >)))) (AND (EQUALP ORIG X) Y)) (3 6 4 3 7))
;; Loading (DEFTEST REMOVE-LIST.21 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 3 X :TEST (QUOTE >) :FROM-END T))) (AND (EQUALP ORIG X) Y)) (3 6 4 3 7))
;; Loading (DEFTEST REMOVE-LIST.22 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 2 X :KEY NIL))) (AND (EQUALP ORIG X) Y)) (1 3 6 1 4 1 3 7))
;; Loading (DEFTEST REMOVE-LIST.23 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 1 X :KEY (QUOTE 1-)))) (AND (EQUALP ORIG X) Y)) (1 3 6 1 4 1 3 7))
;; Loading (DEFTEST REMOVE-LIST.24 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 3 X :TEST-NOT (FUNCTION <=)))) (AND (EQUALP ORIG X) Y)) (3 6 4 3 7))
;; Loading (DEFTEST REMOVE-LIST.25 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 3 X :TEST-NOT (QUOTE <=) :FROM-END T))) (AND (EQUALP ORIG X) Y)) (3 6 4 3 7))
;; Loading (DEFTEST REMOVE-LIST.26 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 3 X :FROM-END T :START 1 :END 5))) (AND (EQUALP ORIG X) Y)) (1 2 2 6 1 2 4 1 3 2 7))
;; Loading (DEFTEST REMOVE-LIST.27 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 3 X :COUNT -1))) (AND (EQUALP ORIG X) (EQUALPT X Y))) T)
;; Loading (DEFTEST REMOVE-LIST.28 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 3 X :COUNT -1000000000000))) (AND (EQUALP ORIG X) (EQUALPT X Y))) T)
;; Loading (DEFTEST REMOVE-LIST.29 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE 3 X :COUNT 1000000000000))) (AND (EQUALP ORIG X) Y)) (1 2 2 6 1 2 4 1 2 7))
;; Loading (DEFTEST REMOVE-VECTOR.1 (REMOVE (QUOTE A) (VECTOR (QUOTE B) (QUOTE C) (QUOTE D))) #(B C D))
;; Loading (DEFTEST REMOVE-VECTOR.2 (REMOVE (QUOTE A) (VECTOR (QUOTE B) (QUOTE C) (QUOTE D)) :COUNT -1) #(B C D))
;; Loading (DEFTEST REMOVE-VECTOR.3 (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :COUNT -1) #(A B C D))
;; Loading (DEFTEST REMOVE-STRING.1 (REMOVE #\a (COPY-SEQ "abcad")) "bcd")
;; Loading (DEFTEST REMOVE-STRING.2 (REMOVE #\a (COPY-SEQ "abcad") :COUNT -1) "abcad")
;; Loading (DEFTEST REMOVE-STRING.3 (REMOVE #\a (COPY-SEQ "bcd") :COUNT -1) "bcd")
;; Loading (DEFTEST REMOVE-STRING.4 (DO-SPECIAL-STRINGS (S "abcdbad" NIL) (LET ((S2 (REMOVE #\b S))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "acdad"))) (LET ((S2 (REMOVE #\b S :COUNT 1))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "acdbad"))) (LET ((S2 (REMOVE #\b S :COUNT 1 :FROM-END T))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "abcdad")))) NIL)
;; Loading (DEFTEST DELETE-VECTOR.1 (DELETE (QUOTE A) (VECTOR (QUOTE B) (QUOTE C) (QUOTE D))) #(B C D))
;; Loading (DEFTEST DELETE-VECTOR.2 (DELETE (QUOTE A) (VECTOR (QUOTE B) (QUOTE C) (QUOTE D)) :COUNT -1) #(B C D))
;; Loading (DEFTEST DELETE-VECTOR.3 (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)) :COUNT -1) #(A B C D))
;; Loading (DEFTEST DELETE-STRING.1 (DELETE #\a (COPY-SEQ "abcad")) "bcd")
;; Loading (DEFTEST DELETE-STRING.2 (DELETE #\a (COPY-SEQ "abcad") :COUNT -1) "abcad")
;; Loading (DEFTEST DELETE-STRING.3 (DELETE #\a (COPY-SEQ "bcd") :COUNT -1) "bcd")
;; Loading (DEFTEST DELETE-STRING.4 (DO-SPECIAL-STRINGS (S "abcdbad" NIL) (LET ((S2 (DELETE #\b S))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "acdad")))) NIL)
;; Loading (DEFTEST DELETE-STRING.5 (DO-SPECIAL-STRINGS (S "abcdbad" NIL) (LET ((S2 (DELETE #\b S :COUNT 1))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "acdbad")))) NIL)
;; Loading (DEFTEST DELETE-STRING.6 (DO-SPECIAL-STRINGS (S "abcdbad" NIL) (LET ((S2 (DELETE #\b S :COUNT 1 :FROM-END T))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "abcdad")))) NIL)
;; Loading (DEFTEST REMOVE-BIT-VECTOR.1 (REMOVE 0 (COPY-SEQ #*00011101101)) #*111111)
;; Loading (DEFTEST REMOVE-BIT-VECTOR.2 (REMOVE 0 (COPY-SEQ #*00011101101) :COUNT -1) #*00011101101)
;; Loading (DEFTEST REMOVE-BIT-VECTOR.3 (REMOVE 0 (COPY-SEQ #*11111) :COUNT -1) #*11111)
;; Loading (DEFTEST DELETE-BIT-VECTOR.1 (DELETE 0 (COPY-SEQ #*00011101101)) #*111111)
;; Loading (DEFTEST DELETE-BIT-VECTOR.2 (DELETE 0 (COPY-SEQ #*00011101101) :COUNT -1) #*00011101101)
;; Loading (DEFTEST DELETE-BIT-VECTOR.3 (DELETE 0 (COPY-SEQ #*11111) :COUNT -1) #*11111)
;; Loading (DEFHARMLESS REMOVE-LIST.TEST-AND-TEST-NOT.1 (REMOVE (QUOTE A) (QUOTE (A B C)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS REMOVE-LIST.TEST-AND-TEST-NOT.2 (REMOVE (QUOTE A) (QUOTE (A B C)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS REMOVE-VECTOR.TEST-AND-TEST-NOT.1 (REMOVE (QUOTE A) #(A B C) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS REMOVE-VECTOR.TEST-AND-TEST-NOT.2 (REMOVE (QUOTE A) #(A B C) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS REMOVE-BIT-STRING.TEST-AND-TEST-NOT.1 (REMOVE 0 #*0001100100 :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS REMOVE-BIT-STRING.TEST-AND-TEST-NOT.2 (REMOVE 0 #*0001100100 :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS REMOVE-STRING.TEST-AND-TEST-NOT.1 (REMOVE #\0 "0001100100" :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS REMOVE-STRING.TEST-AND-TEST-NOT.2 (REMOVE #\0 "0001100100" :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-LIST.TEST-AND-TEST-NOT.1 (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-LIST.TEST-AND-TEST-NOT.2 (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-VECTOR.TEST-AND-TEST-NOT.1 (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-VECTOR.TEST-AND-TEST-NOT.2 (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-BIT-STRING.TEST-AND-TEST-NOT.1 (DELETE 0 (COPY-SEQ #*0001100100) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-BIT-STRING.TEST-AND-TEST-NOT.2 (DELETE 0 (COPY-SEQ #*0001100100) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-STRING.TEST-AND-TEST-NOT.1 (DELETE #\0 (COPY-SEQ "0001100100") :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-STRING.TEST-AND-TEST-NOT.2 (DELETE #\0 (COPY-SEQ "0001100100") :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEF-FOLD-TEST REMOVE.FOLD.1 (REMOVE (QUOTE C) (QUOTE (A B C D E))))
;; Loading (DEF-FOLD-TEST REMOVE.FOLD.2 (REMOVE (QUOTE C) #(A B C D E)))
;; Loading (DEF-FOLD-TEST REMOVE.FOLD.3 (REMOVE 1 #*0011011001))
;; Loading (DEF-FOLD-TEST REMOVE.FOLD.4 (REMOVE #\c "abcde"))
;; Loading (DEF-FOLD-TEST REMOVE-IF.FOLD.1 (REMOVE-IF (QUOTE NULL) (QUOTE (A B NIL D E))))
;; Loading (DEF-FOLD-TEST REMOVE-IF.FOLD.2 (REMOVE-IF (FUNCTION NULL) #(A B NIL D E)))
;; Loading (DEF-FOLD-TEST REMOVE-IF.FOLD.3 (REMOVE-IF (QUOTE PLUSP) #*0011011001))
;; Loading (DEF-FOLD-TEST REMOVE-IF.FOLD.4 (REMOVE-IF (QUOTE DIGIT-CHAR-P) "ab0de"))
;; Loading (DEF-FOLD-TEST REMOVE-IF-NOT.FOLD.1 (REMOVE-IF-NOT (FUNCTION IDENTITY) (QUOTE (A B NIL D E))))
;; Loading (DEF-FOLD-TEST REMOVE-IF-NOT.FOLD.2 (REMOVE-IF-NOT (QUOTE IDENTITY) #(A B NIL D E)))
;; Loading (DEF-FOLD-TEST REMOVE-IF-NOT.FOLD.3 (REMOVE-IF-NOT (FUNCTION ZEROP) #*0011011001))
;; Loading (DEF-FOLD-TEST REMOVE-IF-NOT.FOLD.4 (REMOVE-IF-NOT (FUNCTION ALPHA-CHAR-P) "ab-de"))
;; Loading (DEFTEST REMOVE.ORDER.1 (LET ((I 0) A B C D E F G H) (VALUES (REMOVE (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :FROM-END (PROGN (SETF C (INCF I)) T) :COUNT (PROGN (SETF D (INCF I)) 1) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF F (INCF I)) (FUNCTION EQ)) :START (PROGN (SETF G (INCF I)) 0) :END (PROGN (SETF H (INCF I)) NIL)) I A B C D E F G H)) (A B C D F) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST REMOVE.ORDER.2 (LET ((I 0) A B C D E F G H) (VALUES (REMOVE (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :END (PROGN (SETF C (INCF I)) NIL) :START (PROGN (SETF D (INCF I)) 0) :TEST-NOT (PROGN (SETF E (INCF I)) (COMPLEMENT (FUNCTION EQ))) :KEY (PROGN (SETF F (INCF I)) (FUNCTION IDENTITY)) :COUNT (PROGN (SETF G (INCF I)) 1) :FROM-END (PROGN (SETF H (INCF I)) T)) I A B C D E F G H)) (A B C D F) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST DELETE.ORDER.1 (LET ((I 0) A B C D E F G H) (VALUES (DELETE (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :FROM-END (PROGN (SETF C (INCF I)) T) :COUNT (PROGN (SETF D (INCF I)) 1) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF F (INCF I)) (FUNCTION EQ)) :START (PROGN (SETF G (INCF I)) 0) :END (PROGN (SETF H (INCF I)) NIL)) I A B C D E F G H)) (A B C D F) 8 1 2 3 4 5 6 7 8)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST DELETE.ORDER.2 (LET ((I 0) A B C D E F G H) (VALUES (DELETE (PROGN (SETF A (INCF I)) (QUOTE A)) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :END (PROGN (SETF C (INCF I)) NIL) :START (PROGN (SETF D (INCF I)) 0) :TEST-NOT (PROGN (SETF E (INCF I)) (COMPLEMENT (FUNCTION EQ))) :KEY (PROGN (SETF F (INCF I)) (FUNCTION IDENTITY)) :COUNT (PROGN (SETF G (INCF I)) 1) :FROM-END (PROGN (SETF H (INCF I)) T)) I A B C D E F G H)) (A B C D F) 8 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST REMOVE-IF.ORDER.1 (LET ((I 0) A B C D E F G) (VALUES (REMOVE-IF (PROGN (SETF A (INCF I)) (FUNCTION (LAMBDA (X) (EQ X (QUOTE A))))) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :FROM-END (PROGN (SETF C (INCF I)) T) :COUNT (PROGN (SETF D (INCF I)) 1) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :START (PROGN (SETF F (INCF I)) 0) :END (PROGN (SETF G (INCF I)) NIL)) I A B C D E F G)) (A B C D F) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST REMOVE-IF.ORDER.2 (LET ((I 0) A B C D E F G) (VALUES (REMOVE-IF (PROGN (SETF A (INCF I)) (FUNCTION (LAMBDA (X) (EQ X (QUOTE A))))) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :END (PROGN (SETF C (INCF I)) NIL) :START (PROGN (SETF D (INCF I)) 0) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :COUNT (PROGN (SETF F (INCF I)) 1) :FROM-END (PROGN (SETF G (INCF I)) T)) I A B C D E F G)) (A B C D F) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST DELETE-IF.ORDER.1 (LET ((I 0) A B C D E F G) (VALUES (DELETE-IF (PROGN (SETF A (INCF I)) (FUNCTION (LAMBDA (X) (EQ X (QUOTE A))))) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :FROM-END (PROGN (SETF C (INCF I)) T) :COUNT (PROGN (SETF D (INCF I)) 1) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :START (PROGN (SETF F (INCF I)) 0) :END (PROGN (SETF G (INCF I)) NIL)) I A B C D E F G)) (A B C D F) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST DELETE-IF.ORDER.2 (LET ((I 0) A B C D E F G) (VALUES (DELETE-IF (PROGN (SETF A (INCF I)) (FUNCTION (LAMBDA (X) (EQ X (QUOTE A))))) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :END (PROGN (SETF C (INCF I)) NIL) :START (PROGN (SETF D (INCF I)) 0) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :COUNT (PROGN (SETF F (INCF I)) 1) :FROM-END (PROGN (SETF G (INCF I)) T)) I A B C D E F G)) (A B C D F) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST REMOVE-IF-NOT.ORDER.1 (LET ((I 0) A B C D E F G) (VALUES (REMOVE-IF-NOT (PROGN (SETF A (INCF I)) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A)))))) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :FROM-END (PROGN (SETF C (INCF I)) T) :COUNT (PROGN (SETF D (INCF I)) 1) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :START (PROGN (SETF F (INCF I)) 0) :END (PROGN (SETF G (INCF I)) NIL)) I A B C D E F G)) (A B C D F) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST REMOVE-IF-NOT.ORDER.2 (LET ((I 0) A B C D E F G) (VALUES (REMOVE-IF-NOT (PROGN (SETF A (INCF I)) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A)))))) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :END (PROGN (SETF C (INCF I)) NIL) :START (PROGN (SETF D (INCF I)) 0) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :COUNT (PROGN (SETF F (INCF I)) 1) :FROM-END (PROGN (SETF G (INCF I)) T)) I A B C D E F G)) (A B C D F) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST DELETE-IF-NOT.ORDER.1 (LET ((I 0) A B C D E F G) (VALUES (DELETE-IF-NOT (PROGN (SETF A (INCF I)) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A)))))) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :FROM-END (PROGN (SETF C (INCF I)) T) :COUNT (PROGN (SETF D (INCF I)) 1) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :START (PROGN (SETF F (INCF I)) 0) :END (PROGN (SETF G (INCF I)) NIL)) I A B C D E F G)) (A B C D F) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST DELETE-IF-NOT.ORDER.2 (LET ((I 0) A B C D E F G) (VALUES (DELETE-IF-NOT (PROGN (SETF A (INCF I)) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A)))))) (PROGN (SETF B (INCF I)) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE F))) :END (PROGN (SETF C (INCF I)) NIL) :START (PROGN (SETF D (INCF I)) 0) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :COUNT (PROGN (SETF F (INCF I)) 1) :FROM-END (PROGN (SETF G (INCF I)) T)) I A B C D E F G)) (A B C D F) 7 1 2 3 4 5 6 7)
;; Loading (DEFTEST REMOVE-RANDOM (LOOP FOR I FROM 1 TO 2500 UNLESS (EQ (RANDOM-TEST-REMOVE 20) T) DO (RETURN *REMOVE-FAIL-ARGS*)) NIL)
;; Loading (DEFTEST REMOVE-IF-RANDOM (LOOP FOR I FROM 1 TO 2500 UNLESS (EQ (RANDOM-TEST-REMOVE-IF 20) T) DO (RETURN *REMOVE-FAIL-ARGS*)) NIL)
;; Loading (DEFTEST REMOVE-IF-NOT-RANDOM (LOOP FOR I FROM 1 TO 2500 UNLESS (EQ (RANDOM-TEST-REMOVE-IF 20 T) T) DO (RETURN *REMOVE-FAIL-ARGS*)) NIL)
;; Loading (DEFTEST DELETE-RANDOM (LOOP FOR I FROM 1 TO 2500 UNLESS (EQ (RANDOM-TEST-DELETE 20) T) DO (RETURN *REMOVE-FAIL-ARGS*)) NIL)
;; Loading (DEFTEST DELETE-IF-RANDOM (LOOP FOR I FROM 1 TO 2500 UNLESS (EQ (RANDOM-TEST-DELETE-IF 20) T) DO (RETURN *REMOVE-FAIL-ARGS*)) NIL)
;; Loading (DEFTEST DELETE-IF-NOT-RANDOM (LOOP FOR I FROM 1 TO 2500 UNLESS (EQ (RANDOM-TEST-DELETE-IF 20 T) T) DO (RETURN *REMOVE-FAIL-ARGS*)) NIL)
;; Loading (DEFTEST REMOVE-IF-LIST.1 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE-IF (FUNCTION EVENP) X :KEY NIL))) (AND (EQUALP ORIG X) Y)) (1 3 1 1 3 7))
;; Loading (DEFTEST REMOVE-IF-LIST.2 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE-IF (FUNCTION (LAMBDA (Y) (EQT Y (QUOTE A)))) X :KEY NIL))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST REMOVE-IF-NOT-LIST.1 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE-IF-NOT (FUNCTION ODDP) X :KEY NIL))) (AND (EQUALP ORIG X) Y)) (1 3 1 1 3 7))
;; Loading (DEFTEST REMOVE-IF-NOT-LIST.2 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (REMOVE-IF-NOT (FUNCTION (LAMBDA (Y) (NOT (EQT Y (QUOTE A))))) X :KEY NIL))) (AND (EQUALP ORIG X) Y)) (B C B D C B E))
;; Loading (DEFTEST DELETE-IF-LIST.1 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (DELETE-IF (FUNCTION EVENP) X :KEY NIL))) Y) (1 3 1 1 3 7))
;; Loading (DEFTEST DELETE-IF-LIST.2 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (DELETE-IF (FUNCTION (LAMBDA (Y) (EQT Y (QUOTE A)))) X :KEY NIL))) Y) (B C B D C B E))
;; Loading (DEFTEST DELETE-IF-NOT-LIST.1 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (DELETE-IF-NOT (FUNCTION ODDP) X :KEY NIL))) Y) (1 3 1 1 3 7))
;; Loading (DEFTEST DELETE-IF-NOT-LIST.2 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (DELETE-IF-NOT (FUNCTION (LAMBDA (Y) (NOT (EQT Y (QUOTE A))))) X :KEY NIL))) Y) (B C B D C B E))
;; Loading (DEFTEST DELETE-LIST.1 (LET* ((ORIG (QUOTE (A B C A B D A C B A E))) (X (COPY-SEQ ORIG)) (Y (DELETE (QUOTE A) X :KEY NIL))) Y) (B C B D C B E))
;; Loading (DEFTEST DELETE-LIST.2 (LET* ((ORIG (QUOTE (1 2 3 2 6 1 2 4 1 3 2 7))) (X (COPY-SEQ ORIG)) (Y (DELETE 2 X :KEY NIL))) Y) (1 3 6 1 4 1 3 7))
;; Loading (DEFTEST REMOVE.ALLOW-OTHER-KEYS.1 (REMOVE (QUOTE A) (QUOTE (A B C A D)) :ALLOW-OTHER-KEYS T) (B C D))
;; Loading (DEFTEST REMOVE.ALLOW-OTHER-KEYS.2 (REMOVE (QUOTE A) (QUOTE (A B C A D)) :ALLOW-OTHER-KEYS NIL) (B C D))
;; Loading (DEFTEST REMOVE.ALLOW-OTHER-KEYS.3 (REMOVE (QUOTE A) (QUOTE (A B C A D)) :BAD T :ALLOW-OTHER-KEYS T) (B C D))
;; Loading (DEFTEST REMOVE.ALLOW-OTHER-KEYS.4 (REMOVE (QUOTE A) (QUOTE (A B C A D)) :ALLOW-OTHER-KEYS T :BAD T :BAD NIL) (B C D))
;; Loading (DEFTEST REMOVE.ALLOW-OTHER-KEYS.5 (REMOVE (QUOTE A) (QUOTE (A B C A D)) :BAD1 T :ALLOW-OTHER-KEYS T :BAD2 T :ALLOW-OTHER-KEYS NIL :BAD3 T) (B C D))
;; Loading (DEFTEST REMOVE.ALLOW-OTHER-KEYS.6 (REMOVE (QUOTE A) (QUOTE (A B C A D)) :ALLOW-OTHER-KEYS T :FROM-END T :COUNT 1) (A B C D))
;; Loading (DEFTEST REMOVE.KEYWORDS.7 (REMOVE (QUOTE A) (QUOTE (A B C A D)) :FROM-END T :COUNT 1 :FROM-END NIL :COUNT 10) (A B C D))
;; Loading (DEFTEST DELETE.ALLOW-OTHER-KEYS.1 (DELETE (QUOTE A) (COPY-SEQ (QUOTE (A B C A D))) :ALLOW-OTHER-KEYS T) (B C D))
;; Loading (DEFTEST DELETE.ALLOW-OTHER-KEYS.2 (DELETE (QUOTE A) (COPY-SEQ (QUOTE (A B C A D))) :ALLOW-OTHER-KEYS NIL) (B C D))
;; Loading (DEFTEST DELETE.ALLOW-OTHER-KEYS.3 (DELETE (QUOTE A) (COPY-SEQ (QUOTE (A B C A D))) :BAD T :ALLOW-OTHER-KEYS T) (B C D))
;; Loading (DEFTEST DELETE.ALLOW-OTHER-KEYS.4 (DELETE (QUOTE A) (COPY-SEQ (QUOTE (A B C A D))) :ALLOW-OTHER-KEYS T :BAD T :BAD NIL) (B C D))
;; Loading (DEFTEST DELETE.ALLOW-OTHER-KEYS.5 (DELETE (QUOTE A) (COPY-SEQ (QUOTE (A B C A D))) :BAD1 T :ALLOW-OTHER-KEYS T :BAD2 T :ALLOW-OTHER-KEYS NIL :BAD3 T) (B C D))
;; Loading (DEFTEST DELETE.ALLOW-OTHER-KEYS.6 (DELETE (QUOTE A) (COPY-SEQ (QUOTE (A B C A D))) :ALLOW-OTHER-KEYS T :FROM-END T :COUNT 1) (A B C D))
;; Loading (DEFTEST DELETE.KEYWORDS.7 (DELETE (QUOTE A) (COPY-SEQ (QUOTE (A B C A D))) :FROM-END T :COUNT 1 :FROM-END NIL :COUNT 10) (A B C D))
;; Loading (DEFTEST REMOVE.ERROR.1 (SIGNALS-ERROR (REMOVE) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.2 (SIGNALS-ERROR (REMOVE (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.3 (SIGNALS-ERROR (REMOVE (QUOTE A) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.4 (SIGNALS-ERROR (REMOVE (QUOTE A) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.4A (SIGNALS-ERROR (REMOVE (QUOTE A) NIL NIL T) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.5 (SIGNALS-ERROR (REMOVE (QUOTE A) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.6 (SIGNALS-ERROR (REMOVE (QUOTE A) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.7 (SIGNALS-ERROR (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.8 (SIGNALS-ERROR (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.9 (SIGNALS-ERROR (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.10 (SIGNALS-ERROR (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST REMOVE.ERROR.11 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (REMOVE (QUOTE A) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST DELETE.ERROR.1 (SIGNALS-ERROR (DELETE) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.2 (SIGNALS-ERROR (DELETE (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.3 (SIGNALS-ERROR (DELETE (QUOTE A) NIL :KEY) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.4 (SIGNALS-ERROR (DELETE (QUOTE A) NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.5 (SIGNALS-ERROR (DELETE (QUOTE A) NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.6 (SIGNALS-ERROR (DELETE (QUOTE A) NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.7 (SIGNALS-ERROR (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.8 (SIGNALS-ERROR (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.9 (SIGNALS-ERROR (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.10 (SIGNALS-ERROR (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST DELETE.ERROR.11 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (DELETE (QUOTE A) X))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST REMOVE-IF-STRING.1 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (REMOVE-IF (FUNCTION ALPHA-CHAR-P) S))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "1234")) (ASSERT (STRING= S "ab1c23def4")))) NIL)
;; Loading (DEFTEST REMOVE-IF-STRING.2 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (REMOVE-IF (FUNCTION ALPHA-CHAR-P) S :COUNT 3))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "123def4")) (ASSERT (STRING= S "ab1c23def4")))) NIL)
;; Loading (DEFTEST REMOVE-IF-STRING.3 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (REMOVE-IF (FUNCTION ALPHA-CHAR-P) S :COUNT 3 :FROM-END T))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "ab1c234")) (ASSERT (STRING= S "ab1c23def4")))) NIL)
;; Loading (DEFTEST REMOVE-IF-NOT-STRING.1 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (REMOVE-IF-NOT (FUNCTION DIGIT-CHAR-P) S))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "1234")) (ASSERT (STRING= S "ab1c23def4")))) NIL)
;; Loading (DEFTEST REMOVE-IF-NOT-STRING.2 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (REMOVE-IF-NOT (FUNCTION DIGIT-CHAR-P) S :COUNT 3))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "123def4")) (ASSERT (STRING= S "ab1c23def4")))) NIL)
;; Loading (DEFTEST REMOVE-IF-NOT-STRING.3 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (REMOVE-IF-NOT (FUNCTION DIGIT-CHAR-P) S :COUNT 3 :FROM-END T))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "ab1c234")) (ASSERT (STRING= S "ab1c23def4")))) NIL)
;; Loading (DEFTEST DELETE-IF-STRING.1 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (DELETE-IF (FUNCTION ALPHA-CHAR-P) S))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "1234")))) NIL)
;; Loading (DEFTEST DELETE-IF-STRING.2 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (DELETE-IF (FUNCTION ALPHA-CHAR-P) S :COUNT 3))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "123def4")))) NIL)
;; Loading (DEFTEST DELETE-IF-STRING.3 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (DELETE-IF (FUNCTION ALPHA-CHAR-P) S :COUNT 3 :FROM-END T))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "ab1c234")))) NIL)
;; Loading (DEFTEST DELETE-IF-NOT-STRING.1 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (DELETE-IF-NOT (FUNCTION DIGIT-CHAR-P) S))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "1234")))) NIL)
;; Loading (DEFTEST DELETE-IF-NOT-STRING.2 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (DELETE-IF-NOT (FUNCTION DIGIT-CHAR-P) S :COUNT 3))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "123def4")))) NIL)
;; Loading (DEFTEST DELETE-IF-NOT-STRING.3 (DO-SPECIAL-STRINGS (S "ab1c23def4" NIL) (LET ((S2 (DELETE-IF-NOT (FUNCTION DIGIT-CHAR-P) S :COUNT 3 :FROM-END T))) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "ab1c234")))) NIL)
;; Loading (LOAD "remove-duplicates.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/remove-duplicates.lsp 81A18807>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "remove-aux.lsp")
;; Loading (COMPILE-AND-LOAD "remove-duplicates-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/remove-duplicates-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN MY-REMOVE-DUPLICATES (ORIG-SEQUENCE &KEY FROM-END TEST TEST-NOT (START 0) END KEY) (ASSERT (TYPEP ORIG-SEQUENCE (QUOTE SEQUENCE))) (LET* ((SEQUENCE ORIG-SEQUENCE) (LEN (LENGTH SEQUENCE))) (UNLESS END (SETQ END LEN)) (UNLESS KEY (SETQ KEY (FUNCTION IDENTITY))) (SETF KEY (COERCE KEY (QUOTE FUNCTION))) (COND (TEST (SETF TEST (COERCE TEST (QUOTE FUNCTION))) (ASSERT (NOT TEST-NOT))) (TEST-NOT (SETF TEST-NOT (COERCE TEST-NOT (QUOTE FUNCTION))) (SETQ TEST (FUNCTION (LAMBDA (X Y) (NOT (FUNCALL (THE FUNCTION TEST) X Y)))))) (T (SETQ TEST (FUNCTION EQL)))) (ASSERT (INTEGERP START)) (ASSERT (INTEGERP END)) (ASSERT (<= 0 START END LEN)) (IF FROM-END (PSETQ START (- LEN END) END (- LEN START) SEQUENCE (REVERSE SEQUENCE)) (SETQ SEQUENCE (COPY-SEQ SEQUENCE))) (ASSERT (<= 0 START END LEN) (START END LEN)) (LET ((RESULT NIL)) (LOOP FOR I FROM 0 BELOW START DO (PUSH (ELT SEQUENCE I) RESULT)) (LOOP FOR I FROM START BELOW END FOR X = (ELT SEQUENCE I) FOR KX = (FUNCALL (THE FUNCTION KEY) X) UNLESS (POSITION KX SEQUENCE :START (1+ I) :END END :TEST (THE FUNCTION TEST) :KEY (THE FUNCTION KEY)) DO (PUSH X RESULT)) (LOOP FOR I FROM END BELOW LEN DO (PUSH (ELT SEQUENCE I) RESULT)) (UNLESS FROM-END (SETQ RESULT (REVERSE RESULT))) (COND ((LISTP ORIG-SEQUENCE) RESULT) ((ARRAYP ORIG-SEQUENCE) (MAKE-ARRAY (LENGTH RESULT) :INITIAL-CONTENTS RESULT :ELEMENT-TYPE (ARRAY-ELEMENT-TYPE ORIG-SEQUENCE))) (T (ASSERT NIL)))))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MAKE-RANDOM-RDUP-PARAMS (MAXLEN) "Make random input parameters for REMOVE-DUPLICATES." (MULTIPLE-VALUE-BIND (ELEMENT-TYPE TYPE LEN START END FROM-END COUNT SEQ KEY TEST TEST-NOT) (MAKE-RANDOM-RD-PARAMS MAXLEN) (DECLARE (IGNORE COUNT ELEMENT-TYPE LEN TYPE)) (LET ((ARG-LIST (REDUCE (FUNCTION NCONC) (RANDOM-PERMUTE (LIST (WHEN START (LIST :START START)) (COND (END (LIST :END END)) ((COIN) (LIST :END NIL))) (COND (FROM-END (LIST :FROM-END FROM-END)) ((COIN) (LIST :FROM-END NIL))) (COND (KEY (LIST :KEY KEY))) (WHEN TEST (LIST :TEST TEST)) (WHEN TEST-NOT (LIST :TEST TEST-NOT))))))) (VALUES SEQ ARG-LIST)))).
;; Compiling form (DEFUN RANDOM-TEST-REMOVE-DUPS (MAXLEN &OPTIONAL (PURE T)) (MULTIPLE-VALUE-BIND (SEQ ARG-LIST) (MAKE-RANDOM-RDUP-PARAMS MAXLEN) (LET* ((SEQ1 (COPY-SEQ SEQ)) (SEQ2 (COPY-SEQ SEQ)) (SEQ1R (APPLY (IF PURE (FUNCTION REMOVE-DUPLICATES) (FUNCTION DELETE-DUPLICATES)) SEQ1 ARG-LIST)) (SEQ2R (APPLY (FUNCTION MY-REMOVE-DUPLICATES) SEQ2 ARG-LIST))) (COND ((AND PURE (NOT (EQUALP SEQ SEQ1))) (LIST :FAIL1 SEQ SEQ1R SEQ2R ARG-LIST)) ((AND PURE (NOT (EQUALP SEQ SEQ2))) (LIST :FAIL2 SEQ SEQ1R SEQ2R ARG-LIST)) ((NOT (EQUALP SEQ1R SEQ2R)) (LIST :FAIL3 SEQ SEQ1R SEQ2R ARG-LIST)) (T T))))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/remove-duplicates-aux.llf 8196E667>
;; Loading (DEFTEST RANDOM-REMOVE-DUPLICATES (LOOP FOR RESULT = (RANDOM-TEST-REMOVE-DUPS (1+ (RANDOM 20))) REPEAT 1000 UNLESS (EQ RESULT T) COLLECT RESULT) NIL)
;; Loading (DEFTEST RANDOM-DELETE-DUPLICATES (LOOP FOR RESULT = (RANDOM-TEST-REMOVE-DUPS (1+ (RANDOM 20)) NIL) REPEAT 1000 UNLESS (EQ RESULT T) COLLECT RESULT) NIL)
;; Loading (DEFTEST REMOVE-DUPLICATES.1 (LET* ((ORIG (QUOTE (1 2 3 4 1 3 4 1 2 5 6 2 7))) (X (COPY-SEQ ORIG)) (Y (REMOVE-DUPLICATES X :KEY NIL))) (AND (EQUALP ORIG X) Y)) (3 4 1 5 6 2 7))
;; Loading (DEFTEST DELETE-DUPLICATES.1 (LET* ((ORIG (QUOTE (1 2 3 4 1 3 4 1 2 5 6 2 7))) (X (COPY-SEQ ORIG)) (Y (DELETE-DUPLICATES X :KEY NIL))) Y) (3 4 1 5 6 2 7))
;; Loading (DEFHARMLESS REMOVE-DUPLICATES.TEST-AND-TEST-NOT.1 (REMOVE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE E) (QUOTE F) (QUOTE D) (QUOTE G)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS REMOVE-DUPLICATES.TEST-AND-TEST-NOT.2 (REMOVE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE E) (QUOTE F) (QUOTE D) (QUOTE G)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-DUPLICATES.TEST-AND-TEST-NOT.1 (DELETE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE E) (QUOTE F) (QUOTE D) (QUOTE G)) :TEST (FUNCTION EQL) :TEST-NOT (FUNCTION EQL)))
;; Loading (DEFHARMLESS DELETE-DUPLICATES.TEST-AND-TEST-NOT.2 (DELETE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE A) (QUOTE E) (QUOTE F) (QUOTE D) (QUOTE G)) :TEST-NOT (FUNCTION EQL) :TEST (FUNCTION EQL)))
;; Loading (DEF-FOLD-TEST REMOVE-DUPLICATES.FOLD.1 (REMOVE-DUPLICATES (QUOTE (1 2 3 3))))
;; Loading (DEF-FOLD-TEST REMOVE-DUPLICATES.FOLD.2 (REMOVE-DUPLICATES #(1 2 3 3)))
;; Loading (DEF-FOLD-TEST REMOVE-DUPLICATES.FOLD.3 (REMOVE-DUPLICATES #*0011))
;; Loading (DEF-FOLD-TEST REMOVE-DUPLICATES.FOLD.4 (REMOVE-DUPLICATES "1233"))
;; Loading (DEFTEST REMOVE-DUPLICATES.ORDER.1 (LET ((I 0) A B C D E F) (VALUES (REMOVE-DUPLICATES (PROGN (SETF A (INCF I)) (LIST 1 2 3 1 3 1 2 4)) :FROM-END (PROGN (SETF B (INCF I)) NIL) :START (PROGN (SETF C (INCF I)) 0) :END (PROGN (SETF D (INCF I)) NIL) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF F (INCF I)) (FUNCTION =))) I A B C D E F)) (3 1 2 4) 6 1 2 3 4 5 6)
;; Loading (DEFTEST REMOVE-DUPLICATES.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (REMOVE-DUPLICATES (PROGN (SETF A (INCF I)) (LIST 1 2 3 1 3 1 2 4)) :TEST-NOT (PROGN (SETF B (INCF I)) (FUNCTION /=)) :KEY (PROGN (SETF C (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF D (INCF I)) NIL) :START (PROGN (SETF E (INCF I)) 0) :FROM-END (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) (3 1 2 4) 6 1 2 3 4 5 6)
;; Loading (DEFTEST REMOVE-DUPLICATES.ALLOW-OTHER-KEYS.1 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :ALLOW-OTHER-KEYS T) (3 4 2 7 8 1 5))
;; Loading (DEFTEST REMOVE-DUPLICATES.ALLOW-OTHER-KEYS.2 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :ALLOW-OTHER-KEYS NIL) (3 4 2 7 8 1 5))
;; Loading (DEFTEST REMOVE-DUPLICATES.ALLOW-OTHER-KEYS.3 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :BAD T :ALLOW-OTHER-KEYS T) (3 4 2 7 8 1 5))
;; Loading (DEFTEST REMOVE-DUPLICATES.ALLOW-OTHER-KEYS.4 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :ALLOW-OTHER-KEYS T :BAD T) (3 4 2 7 8 1 5))
;; Loading (DEFTEST REMOVE-DUPLICATES.ALLOW-OTHER-KEYS.5 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (3 4 2 7 8 1 5))
;; Loading (DEFTEST REMOVE-DUPLICATES.ALLOW-OTHER-KEYS.6 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) (3 4 2 7 8 1 5))
;; Loading (DEFTEST REMOVE-DUPLICATES.ALLOW-OTHER-KEYS.7 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (3 4 2 7 8 1 5))
;; Loading (DEFTEST REMOVE-DUPLICATES.ALLOW-OTHER-KEYS.8 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :ALLOW-OTHER-KEYS T :FROM-END T) (1 2 3 4 7 8 5))
;; Loading (DEFTEST REMOVE-DUPLICATES.KEYWORDS.1 (REMOVE-DUPLICATES (QUOTE (1 2 3 4 2 7 8 1 5)) :FROM-END T :FROM-END NIL) (1 2 3 4 7 8 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ALLOW-OTHER-KEYS.1 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :ALLOW-OTHER-KEYS T) (3 4 2 7 8 1 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ALLOW-OTHER-KEYS.2 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :ALLOW-OTHER-KEYS NIL) (3 4 2 7 8 1 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ALLOW-OTHER-KEYS.3 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :BAD T :ALLOW-OTHER-KEYS T) (3 4 2 7 8 1 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ALLOW-OTHER-KEYS.4 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :ALLOW-OTHER-KEYS T :BAD T) (3 4 2 7 8 1 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ALLOW-OTHER-KEYS.5 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (3 4 2 7 8 1 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ALLOW-OTHER-KEYS.6 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL) (3 4 2 7 8 1 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ALLOW-OTHER-KEYS.7 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T) (3 4 2 7 8 1 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ALLOW-OTHER-KEYS.8 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :ALLOW-OTHER-KEYS T :FROM-END T) (1 2 3 4 7 8 5))
;; Loading (DEFTEST DELETE-DUPLICATES.KEYWORDS.1 (DELETE-DUPLICATES (LIST 1 2 3 4 2 7 8 1 5) :FROM-END T :FROM-END NIL) (1 2 3 4 7 8 5))
;; Loading (DEFTEST DELETE-DUPLICATES.ORDER.1 (LET ((I 0) A B C D E F) (VALUES (DELETE-DUPLICATES (PROGN (SETF A (INCF I)) (LIST 1 2 3 1 3 1 2 4)) :FROM-END (PROGN (SETF B (INCF I)) NIL) :START (PROGN (SETF C (INCF I)) 0) :END (PROGN (SETF D (INCF I)) NIL) :KEY (PROGN (SETF E (INCF I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF F (INCF I)) (FUNCTION =))) I A B C D E F)) (3 1 2 4) 6 1 2 3 4 5 6)
;; Loading (DEFTEST DELETE-DUPLICATES.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (DELETE-DUPLICATES (PROGN (SETF A (INCF I)) (LIST 1 2 3 1 3 1 2 4)) :TEST-NOT (PROGN (SETF B (INCF I)) (FUNCTION /=)) :KEY (PROGN (SETF C (INCF I)) (FUNCTION IDENTITY)) :END (PROGN (SETF D (INCF I)) NIL) :START (PROGN (SETF E (INCF I)) 0) :FROM-END (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) (3 1 2 4) 6 1 2 3 4 5 6)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.1 (SIGNALS-ERROR (REMOVE-DUPLICATES) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.2 (SIGNALS-ERROR (REMOVE-DUPLICATES NIL :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.3 (SIGNALS-ERROR (REMOVE-DUPLICATES NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.4 (SIGNALS-ERROR (REMOVE-DUPLICATES NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.5 (SIGNALS-ERROR (REMOVE-DUPLICATES NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.6 (SIGNALS-ERROR (REMOVE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.7 (SIGNALS-ERROR (REMOVE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.8 (SIGNALS-ERROR (REMOVE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.9 (SIGNALS-ERROR (REMOVE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST REMOVE-DUPLICATES.ERROR.10 (CHECK-TYPE-ERROR (FUNCTION REMOVE-DUPLICATES) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.1 (SIGNALS-ERROR (DELETE-DUPLICATES) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.2 (SIGNALS-ERROR (DELETE-DUPLICATES NIL :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.3 (SIGNALS-ERROR (DELETE-DUPLICATES NIL (QUOTE BAD) T) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.4 (SIGNALS-ERROR (DELETE-DUPLICATES NIL (QUOTE BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.5 (SIGNALS-ERROR (DELETE-DUPLICATES NIL 1 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.6 (SIGNALS-ERROR (DELETE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.7 (SIGNALS-ERROR (DELETE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.8 (SIGNALS-ERROR (DELETE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.9 (SIGNALS-ERROR (DELETE-DUPLICATES (LIST (QUOTE A) (QUOTE B) (QUOTE C)) :KEY (FUNCTION CAR)) TYPE-ERROR) T)
;; Loading (DEFTEST DELETE-DUPLICATES.ERROR.10 (CHECK-TYPE-ERROR (FUNCTION DELETE-DUPLICATES) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST REMOVE-DUPLICATES.STRING.1 (DO-SPECIAL-STRINGS (S "abcadefabgz" NIL) (LET ((S2 (REMOVE-DUPLICATES S))) (ASSERT (STRING= S "abcadefabgz")) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "cdefabgz")))) NIL)
;; Loading (DEFTEST REMOVE-DUPLICATES.STRING.2 (DO-SPECIAL-STRINGS (S "abcadefabgz" NIL) (LET ((S2 (REMOVE-DUPLICATES S :FROM-END T))) (ASSERT (STRING= S "abcadefabgz")) (ASSERT (EQUAL (ARRAY-ELEMENT-TYPE S) (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "abcdefgz")))) NIL)
;; Loading (DEFTEST DELETE-DUPLICATES.STRING.1 (DO-SPECIAL-STRINGS (S "abcadefabgz" NIL) (LET ((AET (ARRAY-ELEMENT-TYPE S)) (S2 (DELETE-DUPLICATES S))) (ASSERT (EQUAL AET (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "cdefabgz")))) NIL)
;; Loading (DEFTEST DELETE-DUPLICATES.STRING.2 (DO-SPECIAL-STRINGS (S "abcadefabgz" NIL) (LET ((AET (ARRAY-ELEMENT-TYPE S)) (S2 (DELETE-DUPLICATES S :FROM-END T))) (ASSERT (EQUAL AET (ARRAY-ELEMENT-TYPE S2))) (ASSERT (STRING= S2 "abcdefgz")))) NIL)
;; Loading (DEFTEST REMOVE-DUPLICATES.2 (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (REMOVE-DUPLICATES (LIST X Y) :TEST (QUOTE EQUAL)))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A)) NIL T)
;; Loading (DEFTEST REMOVE-DUPLICATES.2A (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (REMOVE-DUPLICATES (LIST X (QUOTE X) Y) :TEST (QUOTE EQUAL)))) (VALUES RESULT (NOTNOT (EQL (CADR RESULT) X)) (NOTNOT (EQL (CADR RESULT) Y)))) (X (A)) NIL T)
;; Loading (DEFTEST REMOVE-DUPLICATES.3 (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (REMOVE-DUPLICATES (LIST X Y) :TEST (QUOTE EQUAL) :FROM-END T))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A)) T NIL)
;; Loading (DEFTEST REMOVE-DUPLICATES.3A (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (REMOVE-DUPLICATES (LIST X (QUOTE U) (QUOTE V) Y) :TEST (QUOTE EQUAL) :FROM-END T))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A) U V) T NIL)
;; Loading (DEFTEST REMOVE-DUPLICATES.4 (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (REMOVE-DUPLICATES (LIST X Y) :TEST (QUOTE EQUALP)))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A)) NIL T)
;; Loading (DEFTEST REMOVE-DUPLICATES.5 (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (REMOVE-DUPLICATES (LIST X Y) :TEST (QUOTE EQUALP) :FROM-END T))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A)) T NIL)
;; Loading (DEFTEST DELETE-DUPLICATES.2 (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (DELETE-DUPLICATES (LIST X Y) :TEST (QUOTE EQUAL)))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A)) NIL T)
;; Loading (DEFTEST DELETE-DUPLICATES.2A (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (DELETE-DUPLICATES (LIST X (QUOTE X) Y) :TEST (QUOTE EQUAL)))) (VALUES RESULT (NOTNOT (EQL (CADR RESULT) X)) (NOTNOT (EQL (CADR RESULT) Y)))) (X (A)) NIL T)
;; Loading (DEFTEST DELETE-DUPLICATES.3 (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (DELETE-DUPLICATES (LIST X Y) :TEST (QUOTE EQUAL) :FROM-END T))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A)) T NIL)
;; Loading (DEFTEST DELETE-DUPLICATES.3A (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (DELETE-DUPLICATES (LIST X (QUOTE U) (QUOTE V) Y) :TEST (QUOTE EQUAL) :FROM-END T))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A) U V) T NIL)
;; Loading (DEFTEST DELETE-DUPLICATES.4 (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (DELETE-DUPLICATES (LIST X Y) :TEST (QUOTE EQUALP)))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A)) NIL T)
;; Loading (DEFTEST DELETE-DUPLICATES.5 (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE A))) (RESULT (DELETE-DUPLICATES (LIST X Y) :TEST (QUOTE EQUALP) :FROM-END T))) (VALUES RESULT (NOTNOT (EQL (CAR RESULT) X)) (NOTNOT (EQL (CAR RESULT) Y)))) ((A)) T NIL)
;; Loading (LOAD "load-structures.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-structures.lsp 81DE6E27>
;; Loading (LOAD "structure-00.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/structure-00.lsp 81DF8AC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFUN MAKE-STRUCT-TEST-NAME (STRUCTURE-NAME N) (ASSERT (TYPEP STRUCTURE-NAME (QUOTE (OR STRING SYMBOL CHARACTER)))) (SETF STRUCTURE-NAME (STRING STRUCTURE-NAME)) (INTERN (CONCATENATE (QUOTE STRING) STRUCTURE-NAME "/" (PRINC-TO-STRING N))))
;; Loading (DEFUN MAKE-STRUCT-P-FN (STRUCTURE-NAME) (ASSERT (TYPEP STRUCTURE-NAME (QUOTE (OR STRING SYMBOL CHARACTER)))) (SETF STRUCTURE-NAME (STRING STRUCTURE-NAME)) (INTERN (CONCATENATE (QUOTE STRING) STRUCTURE-NAME (STRING (QUOTE #:-P)))))
;; Loading (DEFUN MAKE-STRUCT-COPY-FN (STRUCTURE-NAME) (ASSERT (TYPEP STRUCTURE-NAME (QUOTE (OR STRING SYMBOL CHARACTER)))) (SETF STRUCTURE-NAME (STRING STRUCTURE-NAME)) (INTERN (CONCATENATE (QUOTE STRING) (STRING (QUOTE #:COPY-)) STRUCTURE-NAME)))
;; Loading (DEFUN MAKE-STRUCT-FIELD-FN (CONC-NAME FIELD-NAME) "Make field accessor for a field in a structure" (COND ((NULL CONC-NAME) FIELD-NAME) (T (ASSERT (TYPEP CONC-NAME (QUOTE (OR STRING SYMBOL CHARACTER)))) (ASSERT (TYPEP FIELD-NAME (QUOTE (OR STRING SYMBOL CHARACTER)))) (SETF CONC-NAME (STRING CONC-NAME)) (SETF FIELD-NAME (STRING FIELD-NAME)) (INTERN (CONCATENATE (QUOTE STRING) CONC-NAME FIELD-NAME)))))
;; Loading (DEFUN MAKE-STRUCT-MAKE-FN (STRUCTURE-NAME) "Make the make- function for a structure" (ASSERT (TYPEP STRUCTURE-NAME (QUOTE (OR STRING SYMBOL CHARACTER)))) (SETF STRUCTURE-NAME (STRING STRUCTURE-NAME)) (INTERN (CONCATENATE (QUOTE STRING) (STRING (QUOTE #:MAKE-)) STRUCTURE-NAME)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFUN CREATE-INSTANCE-OF-TYPE (TYPE) "Return an instance of a type.  Signal an error if
  it can't figure out a value for the type." (COND ((EQT TYPE T) (QUOTE A)) ((EQT TYPE (QUOTE SYMBOL)) (QUOTE B)) ((EQT TYPE (QUOTE NULL)) NIL) ((EQT TYPE (QUOTE BOOLEAN)) T) ((EQT TYPE (QUOTE KEYWORD)) :FOO) ((EQT TYPE NIL) (ERROR "Cannot obtain element of type ~S~%" TYPE)) ((EQT TYPE (QUOTE CONS)) (CONS (QUOTE A) (QUOTE B))) ((EQT TYPE (QUOTE LIST)) (LIST 1 2 3)) ((EQT TYPE (QUOTE FIXNUM)) 17) ((EQT TYPE (QUOTE BIGNUM)) (LET ((X 1)) (LOOP UNTIL (TYPEP X (QUOTE BIGNUM)) DO (SETQ X (* 2 X))) X)) ((AND (SYMBOLP TYPE) (TYPEP TYPE (QUOTE STRUCTURE-CLASS))) (LET ((MAKE-FN (INTERN (CONCATENATE (QUOTE STRING) (STRING (QUOTE #:MAKE-)) (SYMBOL-NAME TYPE)) (SYMBOL-PACKAGE TYPE)))) (EVAL (LIST MAKE-FN)))) ((EQT TYPE (QUOTE CHARACTER)) #\w) ((EQT TYPE (QUOTE BASE-CHAR)) #\z) ((MEMBER TYPE (QUOTE (INTEGER UNSIGNED-BYTE SIGNED-BYTE))) 35) ((EQT TYPE (QUOTE BIT)) 1) ((AND (CONSP TYPE) (CONSP (CDR TYPE)) (CONSP (CDDR TYPE)) (NULL (CDDDR TYPE)) (EQT (CAR TYPE) (QUOTE INTEGER)) (INTEGERP (SECOND TYPE))) (SECOND TYPE)) ((MEMBER TYPE (QUOTE (FLOAT SINGLE-FLOAT LONG-FLOAT DOUBLE-FLOAT SHORT-FLOAT))) 0.0) ((AND (CONSP TYPE) (EQT (CAR TYPE) (QUOTE MEMBER)) (CONSP (CDR TYPE))) (SECOND TYPE)) ((AND (CONSP TYPE) (EQT (CAR TYPE) (QUOTE OR)) (CONSP (SECOND TYPE))) (CREATE-INSTANCE-OF-TYPE (SECOND TYPE))) (T (ERROR "Cannot generate element for type ~S~%" TYPE))))
;; Loading (DEFUN FIND-OPTION (OPTION-LIST OPTION &OPTIONAL DEFAULT) (LOOP FOR OPT IN OPTION-LIST WHEN (OR (EQ OPT OPTION) (AND (CONSP OPT) (EQ (CAR OPT) OPTION))) RETURN OPT FINALLY (RETURN DEFAULT)))
;; Loading (DEFVAR *DEFSTRUCT-WITH-TESTS-NAMES* NIL "Names of structure types defined with DEFSRUCT-WITH-TESTS.")
;; Loading (DEFMACRO DEFSTRUCT-WITH-TESTS (NAME-AND-OPTIONS &BODY SLOT-DESCRIPTIONS-AND-DOCUMENTATION) "Construct standardized tests for a defstruct, and also
do the defstruct." (DEFSTRUCT-WITH-TESTS-FUN NAME-AND-OPTIONS SLOT-DESCRIPTIONS-AND-DOCUMENTATION))
;; Loading (DEFUN DEFSTRUCT-WITH-TESTS-FUN (NAME-AND-OPTIONS SLOT-DESCRIPTIONS-AND-DOCUMENTATION) (LET* ((DOC-STRING (WHEN (AND (CONSP SLOT-DESCRIPTIONS-AND-DOCUMENTATION) (STRINGP (CAR SLOT-DESCRIPTIONS-AND-DOCUMENTATION))) (CAR SLOT-DESCRIPTIONS-AND-DOCUMENTATION))) (SLOT-DESCRIPTIONS (IF DOC-STRING (CDR SLOT-DESCRIPTIONS-AND-DOCUMENTATION) SLOT-DESCRIPTIONS-AND-DOCUMENTATION)) (NAME (IF (CONSP NAME-AND-OPTIONS) (CAR NAME-AND-OPTIONS) NAME-AND-OPTIONS)) (OPTIONS (IF (CONSP NAME-AND-OPTIONS) (CDR NAME-AND-OPTIONS) NIL)) (SLOT-NAMES (LOOP FOR X IN SLOT-DESCRIPTIONS COLLECT (IF (CONSP X) (CAR X) X))) (SLOT-TYPES (LOOP FOR X IN SLOT-DESCRIPTIONS COLLECT (IF (CONSP X) (GETF (CDDR X) :TYPE :NONE) :NONE))) (SLOT-READ-ONLY (LOOP FOR X IN SLOT-DESCRIPTIONS COLLECT (AND (CONSP X) (GETF (CDDR X) :READ-ONLY)))) (MAKE-FN (MAKE-STRUCT-MAKE-FN NAME)) (TYPE-OPTION (FIND-OPTION OPTIONS :TYPE)) (STRUCT-TYPE (SECOND TYPE-OPTION)) (NAMED-OPTION (FIND-OPTION OPTIONS :NAMED)) (INCLUDE-OPTION (FIND-OPTION OPTIONS :INCLUDE)) (PREDICATE-OPTION (FIND-OPTION OPTIONS :PREDICATE)) (P-FN-DEFAULT (MAKE-STRUCT-P-FN NAME)) (P-FN (COND ((AND TYPE-OPTION (NOT NAMED-OPTION)) NIL) ((OR (EQ PREDICATE-OPTION :PREDICATE) (NULL (CDR PREDICATE-OPTION))) P-FN-DEFAULT) ((CADR PREDICATE-OPTION) (CADR PREDICATE-OPTION)) (T NIL))) (COPIER-OPTION (FIND-OPTION OPTIONS :COPIER)) (COPY-FN-DEFAULT (MAKE-STRUCT-COPY-FN NAME)) (COPY-FN (COND ((OR (EQ COPIER-OPTION :COPIER) (NULL (CDR COPIER-OPTION))) COPY-FN-DEFAULT) ((CADR COPIER-OPTION) (CADR COPIER-OPTION)) (T NIL))) (CONC-OPTION (FIND-OPTION OPTIONS :CONC-NAME)) (CONC-PREFIX-DEFAULT (CONCATENATE (QUOTE STRING) (STRING NAME) "-")) (CONC-PREFIX (COND ((NULL CONC-OPTION) CONC-PREFIX-DEFAULT) ((OR (EQ CONC-OPTION :CONC-NAME) (NULL (CADR CONC-OPTION))) NIL) (T (STRING (CADR CONC-OPTION))))) (INITIAL-OFFSET-OPTION (FIND-OPTION OPTIONS :INITIAL-OFFSET)) (INITIAL-OFFSET (SECOND INITIAL-OFFSET-OPTION)) (FIELD-FNS (LOOP FOR SLOT-NAME IN SLOT-NAMES COLLECT (MAKE-STRUCT-FIELD-FN CONC-PREFIX SLOT-NAME))) (INITIAL-VALUE-ALIST (LOOP FOR SLOT-DESC IN SLOT-DESCRIPTIONS FOR SLOT-NAME IN SLOT-NAMES FOR TYPE IN SLOT-TYPES FOR I FROM 1 COLLECT (IF (NOT (EQ TYPE :NONE)) (CONS SLOT-NAME (CREATE-INSTANCE-OF-TYPE TYPE)) (CONS SLOT-NAME (DEFSTRUCT-MAKETEMP NAME "SLOTTEMP" I)))))) (DECLARE (IGNORABLE INITIAL-OFFSET)) (SYSTEM.INTERNALS::BACKQUOTE (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (REPORT-AND-IGNORE-ERRORS (EVAL (QUOTE (DEFSTRUCT (SYSTEM.INTERNALS::BQ-COMMA NAME-AND-OPTIONS) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN SLOT-DESCRIPTIONS-AND-DOCUMENTATION)))) (SYSTEM.INTERNALS::BQ-COMMA (UNLESS (OR TYPE-OPTION INCLUDE-OPTION) (SYSTEM.INTERNALS::BACKQUOTE (PUSHNEW (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)) *DEFSTRUCT-WITH-TESTS-NAMES*)))) NIL) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 1)) (AND (FBOUNDP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA MAKE-FN))) (FUNCTIONP (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA MAKE-FN))) (SYMBOL-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA MAKE-FN))) (TYPEP ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (IF TYPE-OPTION STRUCT-TYPE NAME)))) T) T) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN P-FN (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 2)) (LET ((S ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)))) (AND (FBOUNDP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA P-FN))) (FUNCTIONP (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA P-FN))) (SYMBOL-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA P-FN))) (NOTNOT (FUNCALL (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA P-FN)) S)) (NOTNOT-MV ((SYSTEM.INTERNALS::BQ-COMMA P-FN) S)))) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME "ERROR.1")) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA P-FN)) PROGRAM-ERROR) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME "ERROR.2")) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA P-FN) ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)) NIL) PROGRAM-ERROR) T))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN P-FN (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 3)) (COUNT-IF (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA P-FN)) *UNIVERSE*) 0))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS TYPE-OPTION (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 4)) (COUNT-IF (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME))))) *UNIVERSE*) 0))))) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 5)) (SYSTEM.INTERNALS::BQ-COMMA (LET ((INITS NIL) (TESTS NIL) (VAR (DEFSTRUCT-MAKETEMP NAME "TEMP-5"))) (LOOP FOR (SLOT-NAME . INITVAL) IN INITIAL-VALUE-ALIST FOR FIELD-FN IN FIELD-FNS DO (SETF INITS (LIST* (INTERN (STRING SLOT-NAME) "KEYWORD") (LIST (QUOTE QUOTE) INITVAL) INITS)) (PUSH (SYSTEM.INTERNALS::BACKQUOTE (AND (EQLT (QUOTE (SYSTEM.INTERNALS::BQ-COMMA INITVAL)) ((SYSTEM.INTERNALS::BQ-COMMA FIELD-FN) (SYSTEM.INTERNALS::BQ-COMMA VAR))) (EQLT (QUOTE (SYSTEM.INTERNALS::BQ-COMMA INITVAL)) (FUNCALL (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA FIELD-FN)) (SYSTEM.INTERNALS::BQ-COMMA VAR))))) TESTS)) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR) ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN) SYSTEM.INTERNALS::BQ-COMMA INITS))) (AND (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN TESTS) T))))) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME "ERROR.3")) (REMOVE NIL (LIST (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR (SLOT-NAME . INITVAL) IN INITIAL-VALUE-ALIST FOR FIELD-FN IN FIELD-FNS COLLECT (SYSTEM.INTERNALS::BACKQUOTE (MULTIPLE-VALUE-BIND (X VAL) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA FIELD-FN)) PROGRAM-ERROR) (UNLESS X (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA SLOT-NAME)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FIELD-FN)) VAL)))))))) NIL) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME "ERROR.4")) (REMOVE NIL (LIST (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR (SLOT-NAME . INITVAL) IN INITIAL-VALUE-ALIST FOR FIELD-FN IN FIELD-FNS COLLECT (SYSTEM.INTERNALS::BACKQUOTE (MULTIPLE-VALUE-BIND (X VAL) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA FIELD-FN) ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)) NIL) PROGRAM-ERROR) (UNLESS X (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA SLOT-NAME)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA FIELD-FN)) VAL)))))))) NIL) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 6)) (EQT ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)) ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN))) NIL) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 7)) (SYSTEM.INTERNALS::BQ-COMMA (LET* ((VAR (DEFSTRUCT-MAKETEMP NAME "TEMP-7-1")) (VAR2 (DEFSTRUCT-MAKETEMP NAME "TEMP-7-2")) (TESTS (LOOP FOR (SLOT-NAME . INITVAL) IN INITIAL-VALUE-ALIST FOR READ-ONLY-P IN SLOT-READ-ONLY FOR SLOT-DESC IN SLOT-DESCRIPTIONS FOR FIELD-FN IN FIELD-FNS UNLESS READ-ONLY-P COLLECT (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR2) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA INITVAL)))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA FIELD-FN) (SYSTEM.INTERNALS::BQ-COMMA VAR)) (SYSTEM.INTERNALS::BQ-COMMA VAR2)) (EQLT ((SYSTEM.INTERNALS::BQ-COMMA FIELD-FN) (SYSTEM.INTERNALS::BQ-COMMA VAR)) (SYSTEM.INTERNALS::BQ-COMMA VAR2))))))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR) ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)))) (AND (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN TESTS) T))))) T) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN COPY-FN (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 8)) (AND (FBOUNDP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA COPY-FN))) (FUNCTIONP (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA COPY-FN))) (SYMBOL-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA COPY-FN))) T) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME "ERROR.5")) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA COPY-FN)) PROGRAM-ERROR) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME "ERROR.6")) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA COPY-FN) ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)) NIL) PROGRAM-ERROR) T))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN COPY-FN (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 9)) (SYSTEM.INTERNALS::BQ-COMMA (LET* ((VAR (QUOTE XTEMP-9)) (VAR2 (QUOTE YTEMP-9)) (VAR3 (QUOTE ZTEMP-9))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR) ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR (SLOT-NAME . INITVAL) IN INITIAL-VALUE-ALIST NCONC (LIST (INTERN (STRING SLOT-NAME) "KEYWORD") (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA INITVAL))))))))) (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR2) ((SYSTEM.INTERNALS::BQ-COMMA COPY-FN) (SYSTEM.INTERNALS::BQ-COMMA VAR))) ((SYSTEM.INTERNALS::BQ-COMMA VAR3) (FUNCALL (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA COPY-FN)) (SYSTEM.INTERNALS::BQ-COMMA VAR)))) (AND (NOT (EQLT (SYSTEM.INTERNALS::BQ-COMMA VAR) (SYSTEM.INTERNALS::BQ-COMMA VAR2))) (NOT (EQLT (SYSTEM.INTERNALS::BQ-COMMA VAR) (SYSTEM.INTERNALS::BQ-COMMA VAR3))) (NOT (EQLT (SYSTEM.INTERNALS::BQ-COMMA VAR2) (SYSTEM.INTERNALS::BQ-COMMA VAR3))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR (SLOT-NAME) IN INITIAL-VALUE-ALIST FOR FN IN FIELD-FNS COLLECT (SYSTEM.INTERNALS::BACKQUOTE (AND (EQLT ((SYSTEM.INTERNALS::BQ-COMMA FN) (SYSTEM.INTERNALS::BQ-COMMA VAR)) ((SYSTEM.INTERNALS::BQ-COMMA FN) (SYSTEM.INTERNALS::BQ-COMMA VAR2))) (EQLT ((SYSTEM.INTERNALS::BQ-COMMA FN) (SYSTEM.INTERNALS::BQ-COMMA VAR)) ((SYSTEM.INTERNALS::BQ-COMMA FN) (SYSTEM.INTERNALS::BQ-COMMA VAR3))))))) T)))))) T))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQ P-FN P-FN-DEFAULT) (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 10)) (FBOUNDP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA P-FN-DEFAULT))) NIL))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (EQ COPY-FN COPY-FN-DEFAULT) (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 11)) (FBOUNDP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA COPY-FN-DEFAULT))) NIL))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (LOOP FOR X IN SLOT-READ-ONLY THEREIS X) (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 12)) (AND (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR SLOT-NAME IN SLOT-NAMES FOR READ-ONLY IN SLOT-READ-ONLY FOR FIELD-FN IN FIELD-FNS WHEN READ-ONLY COLLECT (SYSTEM.INTERNALS::BACKQUOTE (NOT-MV (FBOUNDP (QUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA FIELD-FN)))))))) T) T))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS TYPE-OPTION (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 13)) (NOTNOT-MV (TYPEP ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)) (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME))))) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 14)) (LET ((CLASS (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME))))) (NOTNOT-MV (TYPEP CLASS (QUOTE STRUCTURE-CLASS)))) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 15)) (NOTNOT-MV (TYPEP ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN)) (QUOTE STRUCTURE-OBJECT))) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 16)) (LOOP FOR TYPE IN *DISJOINT-TYPES-LIST* UNLESS (AND (EQUALT (MULTIPLE-VALUE-LIST (SUBTYPEP* TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)))) (QUOTE (NIL T))) (EQUALT (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)) TYPE)) (QUOTE (NIL T)))) COLLECT TYPE) NIL) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 17)) (LET ((CLASS (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME))))) (LOOP FOR TYPE IN *DISJOINT-TYPES-LIST* UNLESS (AND (EQUALT (MULTIPLE-VALUE-LIST (SUBTYPEP* TYPE CLASS)) (QUOTE (NIL T))) (EQUALT (MULTIPLE-VALUE-LIST (SUBTYPEP* CLASS TYPE)) (QUOTE (NIL T)))) COLLECT TYPE)) NIL) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME "15A")) (LET ((CLASS (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME))))) (NOTNOT-MV (SUBTYPEP CLASS (QUOTE STRUCTURE-OBJECT)))) T T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME "15B")) (NOTNOT-MV (SUBTYPEP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)) (QUOTE STRUCTURE-OBJECT))) T T))))) (SYSTEM.INTERNALS::BQ-COMMA (WHEN DOC-STRING (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 18)) (LET ((DOC (DOCUMENTATION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)) (QUOTE STRUCTURE)))) (OR (NULL DOC) (EQUALT DOC (QUOTE (SYSTEM.INTERNALS::BQ-COMMA DOC-STRING))))) T)))) (SYSTEM.INTERNALS::BQ-COMMA (WHEN (AND DOC-STRING (NOT TYPE-OPTION)) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 19)) (LET ((DOC (DOCUMENTATION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA NAME)) (QUOTE TYPE)))) (OR (NULL DOC) (EQUALT DOC (QUOTE (SYSTEM.INTERNALS::BQ-COMMA DOC-STRING))))) T)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS TYPE-OPTION (SYSTEM.INTERNALS::BACKQUOTE ((DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (MAKE-STRUCT-TEST-NAME NAME 20)) (SYSTEM.INTERNALS::BQ-COMMA (LET* ((VAR (QUOTE XTEMP-20)) (VAR2 (QUOTE YTEMP-20))) (SYSTEM.INTERNALS::BACKQUOTE (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR) ((SYSTEM.INTERNALS::BQ-COMMA MAKE-FN) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR (SLOT-NAME . INITVAL) IN INITIAL-VALUE-ALIST NCONC (LIST (INTERN (STRING SLOT-NAME) "KEYWORD") (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA INITVAL))))))))) (LET (((SYSTEM.INTERNALS::BQ-COMMA VAR2) (COPY-STRUCTURE (SYSTEM.INTERNALS::BQ-COMMA VAR)))) (AND (NOT (EQLT (SYSTEM.INTERNALS::BQ-COMMA VAR) (SYSTEM.INTERNALS::BQ-COMMA VAR2))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR (SLOT-NAME) IN INITIAL-VALUE-ALIST FOR FN IN FIELD-FNS COLLECT (SYSTEM.INTERNALS::BACKQUOTE (EQLT ((SYSTEM.INTERNALS::BQ-COMMA FN) (SYSTEM.INTERNALS::BQ-COMMA VAR)) ((SYSTEM.INTERNALS::BQ-COMMA FN) (SYSTEM.INTERNALS::BQ-COMMA VAR2)))))) T)))))) T))))) NIL))))
;; Loading (DEFUN DEFSTRUCT-MAKETEMP (STEM SUFFIX1 &OPTIONAL SUFFIX2) "Make a temporary variable for DEFSTRUCT-WITH-TESTS." (INTERN (IF SUFFIX2 (FORMAT NIL "~A-~A-~A" STEM SUFFIX1 SUFFIX2) (FORMAT NIL "~A-~A" STEM SUFFIX1))))
;; Loading (LOAD "structures-01.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/structures-01.lsp C195BBF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFSTRUCT S-1 FOO BAR)
;; Loading (DEFTEST STRUCTURE-1-1 (NOTNOT-MV (TYPEP (MAKE-S-1) (QUOTE S-1))) T)
;; Loading (DEFTEST STRUCTURE-1-2 (NOTNOT-MV (S-1-P (MAKE-S-1))) T)
;; Loading (DEFTEST STRUCTURE-1-3 (COUNT-IF (FUNCTION S-1-P) *UNIVERSE*) 0)
;; Loading (DEFTEST STRUCTURE-1-4 (COUNT-IF (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE S-1)))) *UNIVERSE*) 0)
;; Loading (DEFTEST STRUCTURE-1-5 (S-1-FOO (MAKE-S-1 :FOO (QUOTE A))) A)
;; Loading (DEFTEST STRUCTURE-1-6 (S-1-BAR (MAKE-S-1 :BAR (QUOTE B))) B)
;; Loading (DEFTEST STRUCTURE-1-7 (LET ((S (MAKE-S-1 :FOO (QUOTE C) :BAR (QUOTE D)))) (LIST (S-1-FOO S) (S-1-BAR S))) (C D))
;; Loading (DEFTEST STRUCTURE-1-8 (LET ((S (MAKE-S-1))) (SETF (S-1-FOO S) (QUOTE E)) (SETF (S-1-BAR S) (QUOTE F)) (LIST (S-1-FOO S) (S-1-BAR S))) (E F))
;; Loading (DEFTEST STRUCTURE-1-9 (LET ((S (MAKE-S-1 :FOO (QUOTE A) :BAR (QUOTE B)))) (SETF (S-1-FOO S) (QUOTE E)) (SETF (S-1-BAR S) (QUOTE F)) (LIST (S-1-FOO S) (S-1-BAR S))) (E F))
;; Loading (DEFTEST STRUCTURE-1-10 (LET ((S (MAKE-S-1 :FOO (QUOTE A) :BAR (QUOTE B)))) (LET ((S2 (COPY-S-1 S))) (SETF (S-1-FOO S) NIL) (SETF (S-1-BAR S) NIL) (LIST (S-1-FOO S2) (S-1-BAR S2)))) (A B))
;; Loading (DEFTEST STRUCTURE-1-11 (EQT (MAKE-S-1) (MAKE-S-1)) NIL)
;; Loading (DEFTEST STRUCTURE-1-12 (EQT (MAKE-S-1 :FOO (QUOTE A) :BAR (QUOTE B)) (MAKE-S-1 :FOO (QUOTE A) :BAR (QUOTE B))) NIL)
;; Loading (DEFTEST STRUCTURE-1-13 (NOTNOT-MV (TYPEP (CLASS-OF (MAKE-S-1)) (QUOTE STRUCTURE-CLASS))) T)
;; Loading (DEFTEST STRUCTURE-1-14 (NOTNOT-MV (TYPEP (MAKE-S-1) (QUOTE STRUCTURE-OBJECT))) T)
;; Loading (DEFTEST STRUCTURE-1-15 (SUBTYPEP* (QUOTE S-1) (QUOTE STRUCTURE-OBJECT)) T T)
;; Loading (LOAD "structures-02.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/structures-02.lsp C1ADFFC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFVAR *S-2-F6-COUNTER* 0)
;; Loading (DEFSTRUCT S-2 (F1 0) (F2 (QUOTE A)) (F3 1.21) (F4 #\d) (F5 (LIST (QUOTE A) (QUOTE B))) (F6 (INCF *S-2-F6-COUNTER*)))
;; Loading (DEFTEST STRUCTURE-2-1 (LET ((*S-2-F6-COUNTER* 0)) (LET ((S (MAKE-S-2))) (AND (EQLT (S-2-F1 S) 0) (EQT (S-2-F2 S) (QUOTE A)) (= (S-2-F3 S) 1.21) (EQLT (S-2-F4 S) #\d) (EQUALT (S-2-F5 S) (QUOTE (A B))) (EQLT (S-2-F6 S) *S-2-F6-COUNTER*) (EQLT *S-2-F6-COUNTER* 1)))) T)
;; Loading (DEFTEST STRUCTURE-2-2 (LET ((*S-2-F6-COUNTER* 0)) (EQT (S-2-F5 (MAKE-S-2)) (S-2-F5 (MAKE-S-2)))) NIL)
;; Loading (DEFTEST STRUCTURE-2-3 (LET* ((*S-2-F6-COUNTER* 0) (S (MAKE-S-2 :F1 17))) (AND (EQLT (S-2-F1 S) 17) (EQT (S-2-F2 S) (QUOTE A)) (= (S-2-F3 S) 1.21) (EQLT (S-2-F4 S) #\d) (EQUALT (S-2-F5 S) (QUOTE (A B))) (EQLT (S-2-F6 S) *S-2-F6-COUNTER*) (EQLT *S-2-F6-COUNTER* 1))) T)
;; Loading (DEFTEST STRUCTURE-2-4 (LET* ((*S-2-F6-COUNTER* 0) (S (MAKE-S-2 :F2 (QUOTE Z)))) (AND (EQLT (S-2-F1 S) 0) (EQT (S-2-F2 S) (QUOTE Z)) (= (S-2-F3 S) 1.21) (EQLT (S-2-F4 S) #\d) (EQUALT (S-2-F5 S) (QUOTE (A B))) (EQLT (S-2-F6 S) *S-2-F6-COUNTER*) (EQLT *S-2-F6-COUNTER* 1))) T)
;; Loading (DEFTEST STRUCTURE-2-5 (LET* ((*S-2-F6-COUNTER* 0) (S (MAKE-S-2 :F3 1.0))) (AND (EQLT (S-2-F1 S) 0) (EQT (S-2-F2 S) (QUOTE A)) (= (S-2-F3 S) 1.0) (EQLT (S-2-F4 S) #\d) (EQUALT (S-2-F5 S) (QUOTE (A B))) (EQLT (S-2-F6 S) *S-2-F6-COUNTER*) (EQLT *S-2-F6-COUNTER* 1))) T)
;; Loading (DEFTEST STRUCTURE-2-6 (LET* ((*S-2-F6-COUNTER* 0) (S (MAKE-S-2 :F4 #\z))) (AND (EQLT (S-2-F1 S) 0) (EQT (S-2-F2 S) (QUOTE A)) (= (S-2-F3 S) 1.21) (EQLT (S-2-F4 S) #\z) (EQUALT (S-2-F5 S) (QUOTE (A B))) (EQLT (S-2-F6 S) *S-2-F6-COUNTER*) (EQLT *S-2-F6-COUNTER* 1))) T)
;; Loading (DEFTEST STRUCTURE-2-7 (LET* ((*S-2-F6-COUNTER* 0) (S (MAKE-S-2 :F5 (QUOTE (C D E))))) (AND (EQLT (S-2-F1 S) 0) (EQT (S-2-F2 S) (QUOTE A)) (= (S-2-F3 S) 1.21) (EQLT (S-2-F4 S) #\d) (EQUALT (S-2-F5 S) (QUOTE (C D E))) (EQLT (S-2-F6 S) *S-2-F6-COUNTER*) (EQLT *S-2-F6-COUNTER* 1))) T)
;; Loading (DEFTEST STRUCTURE-2-8 (LET* ((*S-2-F6-COUNTER* 0) (S (MAKE-S-2 :F6 10))) (AND (EQLT (S-2-F1 S) 0) (EQT (S-2-F2 S) (QUOTE A)) (= (S-2-F3 S) 1.21) (EQLT (S-2-F4 S) #\d) (EQUALT (S-2-F5 S) (QUOTE (A B))) (EQLT (S-2-F6 S) 10) (EQLT *S-2-F6-COUNTER* 0))) T)
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-03 A B C D)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-04) A B C)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-05 :CONSTRUCTOR) A05 B05 C05)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-06 (:CONSTRUCTOR)) A06 B06 C06)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-07 :CONC-NAME) A07 B07)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-08 (:CONC-NAME)) A08 B08)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-09 (:CONC-NAME NIL)) A09 B09)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-10 (:CONC-NAME "")) A10 B10)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-11 (:CONC-NAME "BLAH-")) A11 B11)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-12 (:CONC-NAME BLAH-)) A12 B12)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-13 (:CONC-NAME #\X)) FOO-A13 FOO-B13)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-14 (:PREDICATE)) A14 B14)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-15 (:PREDICATE NIL)) A15 B15)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-16 :PREDICATE) A16 B16)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-17 (:PREDICATE STRUCT-TEST-17-ALTERNATE-PRED)) A17 B17)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-18 :COPIER) A18 B18)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-19 (:COPIER)) A19 B19)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-20 (:COPIER NIL)) A20 B20)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-21 (:COPIER STRUCT-TEST-21-ALT-COPIER)) A21 B21)
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-22 (A22) (B22))
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-23 (A23 1) (B23 2))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-24 (A24 1 :TYPE FIXNUM) (B24 2 :TYPE INTEGER))
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-25)
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-26 (A26 NIL :READ-ONLY NIL) (B26 (QUOTE A) :READ-ONLY NIL))
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-27 (A27 1 :READ-ONLY T) (B27 1.399999 :READ-ONLY A))
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-28 (A28 1 :TYPE INTEGER :READ-ONLY T) (B28 (QUOTE XX) :READ-ONLY A :TYPE SYMBOL))
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-29 A29 (B29 (QUOTE XX) :READ-ONLY 1) C29)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-30 #:A30 #:B30)
;; Loading (DEFSTRUCT-WITH-TESTS #:STRUCT-TEST-31 A31 B31)
;; Loading (DEFPACKAGE STRUCT-TEST-PACKAGE (:USE))
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-32 STRUCT-TEST-PACKAGE::A32 STRUCT-TEST-PACKAGE::B32)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-33 (:CONC-NAME)) STRUCT-TEST-PACKAGE::A33 STRUCT-TEST-PACKAGE::B33)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-34 :CONC-NAME) STRUCT-TEST-PACKAGE::A34 STRUCT-TEST-PACKAGE::B34)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-35 (:CONC-NAME NIL)) STRUCT-TEST-PACKAGE::A35 STRUCT-TEST-PACKAGE::B35)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-36 (:CONC-NAME "")) STRUCT-TEST-PACKAGE::ST36-A36 STRUCT-TEST-PACKAGE::ST26-B36)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-37 (:TYPE LIST)) A37 B37 C37)
;; Loading (DEFTEST STRUCTURE-37-1 (MAKE-STRUCT-TEST-37 :A37 1 :B37 2 :C37 4) (1 2 4))
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-38 (:TYPE LIST) :NAMED) A38 B38 C38)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST STRUCTURE-38-1 (MAKE-STRUCT-TEST-38 :A38 11 :B38 12 :C38 4) (STRUCT-TEST-38 11 12 4))
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-39 (:PREDICATE NIL) (:TYPE LIST) :NAMED) A39 B39 C39)
;; Loading (DEFTEST STRUCTURE-39-1 (MAKE-STRUCT-TEST-39 :A39 11 :B39 12 :C39 4) (STRUCT-TEST-39 11 12 4))
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-40 (:TYPE VECTOR)) A40 B40)
#<Simple-Error Currently unsupported defstruct type VECTOR.>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-41 (:TYPE VECTOR) :NAMED) A41 B41)
#<Simple-Error Currently unsupported defstruct type VECTOR.>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-42 (:TYPE (VECTOR T))) A42 B42)
#<Simple-Error Invalid :TYPE option (:TYPE (VECTOR T)).%>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-43 (:TYPE (VECTOR T)) :NAMED) A43 B43)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
#<Simple-Error Invalid :TYPE option (:TYPE (VECTOR T)).%>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-44 (:TYPE LIST)) (A44 0 :TYPE INTEGER) (B44 (QUOTE A) :TYPE SYMBOL))
;; Loading (DEFTEST STRUCTS-ARE-DISJOINT (LOOP FOR S1 IN *DEFSTRUCT-WITH-TESTS-NAMES* SUM (LOOP FOR S2 IN *DEFSTRUCT-WITH-TESTS-NAMES* UNLESS (EQ S1 S2) COUNT (NOT (EQUALT (MULTIPLE-VALUE-LIST (SUBTYPEP* S1 S2)) (QUOTE (NIL T)))))) 0)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-45 (:TYPE LIST) (:INITIAL-OFFSET 2)) A45 B45)
#<Simple-Error Unsupported DEFSTRUCT option (:INITIAL-OFFSET 2)>
;; Loading (DEFTEST STRUCTURE-45-1 (CDDR (MAKE-STRUCT-TEST-45 :A45 1 :B45 2)) (1 2))
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-46 (:TYPE LIST) (:INCLUDE STRUCT-TEST-45)) C46 D46)
#<Simple-Error Included LIST structures not supported yet.>
;; Loading (DEFTEST STRUCTURE-46-1 (CDDR (MAKE-STRUCT-TEST-46 :A45 1 :B45 2 :C46 3 :D46 4)) (1 2 3 4))
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-47 (:TYPE LIST) (:INITIAL-OFFSET 3) (:INCLUDE STRUCT-TEST-45)) C47 D47)
#<Simple-Error Unsupported DEFSTRUCT option (:INITIAL-OFFSET 3)>
;; Loading (DEFTEST STRUCTURE-47-1 (LET ((S (MAKE-STRUCT-TEST-47 :A45 1 :B45 2 :C47 3 :D47 4))) (VALUES (THIRD S) (FOURTH S) (EIGHTH S) (NINTH S))) 1 2 3 4)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-48 (:TYPE LIST) (:INITIAL-OFFSET 0) (:INCLUDE STRUCT-TEST-45)) C48 D48)
#<Simple-Error Unsupported DEFSTRUCT option (:INITIAL-OFFSET 0)>
;; Loading (DEFTEST STRUCTURE-48-1 (CDDR (MAKE-STRUCT-TEST-48 :A45 1 :B45 2 :C48 3 :D48 4)) (1 2 3 4))
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-49 (:TYPE (VECTOR BIT))) (A49 0 :TYPE BIT) (B49 0 :TYPE BIT))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
#<Simple-Error Invalid :TYPE option (:TYPE (VECTOR BIT)).%>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-50 (:TYPE (VECTOR CHARACTER))) (A50 #\g :TYPE CHARACTER) (B50 #\k :TYPE CHARACTER))
#<Simple-Error Invalid :TYPE option (:TYPE (VECTOR CHARACTER)).%>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-51 (:TYPE (VECTOR (INTEGER 0 255)))) (A51 17 :TYPE (INTEGER 0 255)) (B51 25 :TYPE (INTEGER 0 255)))
#<Simple-Error Invalid :TYPE option (:TYPE (VECTOR (INTEGER 0 255))).%>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-52 (:TYPE VECTOR) (:INITIAL-OFFSET 0)) A52 B52)
#<Simple-Error Unsupported DEFSTRUCT option (:INITIAL-OFFSET 0)>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-53 (:TYPE VECTOR) (:INITIAL-OFFSET 5)) "This is struct-test-53" A53 B53)
#<Simple-Error Unsupported DEFSTRUCT option (:INITIAL-OFFSET 5)>
;; Loading (DEFTEST STRUCTURE-53-1 (LET ((S (MAKE-STRUCT-TEST-53 :A53 10 :B53 (QUOTE A)))) (VALUES (MY-AREF S 5) (MY-AREF S 6))) 10 A)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-54 (:TYPE VECTOR) (:INITIAL-OFFSET 2) (:INCLUDE STRUCT-TEST-53)) "This is struct-test-54" A54 B54)
#<Simple-Error Unsupported DEFSTRUCT option (:INITIAL-OFFSET 2)>
;; Loading (DEFTEST STRUCTURE-54-1 (LET ((S (MAKE-STRUCT-TEST-54 :A53 8 :B53 (QUOTE G) :A54 10 :B54 (QUOTE A)))) (VALUES (MY-AREF S 5) (MY-AREF S 6) (MY-AREF S 9) (MY-AREF S 10))) 8 G 10 A)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-55 (:TYPE LIST) (:INITIAL-OFFSET 2) :NAMED) A55 B55 C55)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
#<Simple-Error Unsupported DEFSTRUCT option (:INITIAL-OFFSET 2)>
;; Loading (DEFTEST STRUCTURE-55-1 (LET ((S (MAKE-STRUCT-TEST-55 :A55 (QUOTE P) :C55 (QUOTE Q)))) (VALUES (THIRD S) (FOURTH S) (SIXTH S))) STRUCT-TEST-55 P Q)
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-56 (:TYPE LIST) (:INITIAL-OFFSET 3) (:INCLUDE STRUCT-TEST-55) :NAMED) D56 E56)
#<Simple-Error Unsupported DEFSTRUCT option (:INITIAL-OFFSET 3)>
;; Loading (DEFTEST STRUCTURE-56-1 (LET ((S (MAKE-STRUCT-TEST-56 :A55 3 :B55 7 :D56 (QUOTE X) :E56 (QUOTE Y)))) (MAPCAR (FUNCTION (LAMBDA (I) (NTH I S))) (QUOTE (2 3 4 9 10 11)))) (STRUCT-TEST-55 3 7 STRUCT-TEST-56 X Y))
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-57 (:INCLUDE STRUCT-TEST-22)) C57 D57)
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-58 "This is struct-test-58" A-58 B-58)
#<Simple-Error "This is struct-test-58" does not match destructuring sublist (SYSTEM.INTERNALS::SLOT-NAME &OPTIONAL SYSTEM.INTERNALS::SLOT-INITFORM &KEY (TYPE (QUOTE T)) SYSTEM.INTERNALS::READ-ONLY).>
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-59 (:INCLUDE STRUCT-TEST-58)) "This is struct-test-59" A-59 B-59)
#<Simple-Error Unknown structure type STRUCT-TEST-58.>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFVAR *ST-60* 100)
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-60 (A60 *ST-60* :TYPE INTEGER) (*ST-60* 0 :TYPE INTEGER) (B60 *ST-60* :TYPE INTEGER))
;; Loading (DEFTEST STRUCTURE-60-1 (LET ((*ST-60* 10)) (LET ((S (MAKE-STRUCT-TEST-60 :*ST-60* 200))) (VALUES (STRUCT-TEST-60-A60 S) (STRUCT-TEST-60-*ST-60* S) (STRUCT-TEST-60-B60 S)))) 10 200 10)
;; Loading (DEFSTRUCT STRUCT-TEST-61 (A NIL :TYPE INTEGER) (B 0 :TYPE SYMBOL))
;; Loading (DEFTEST STRUCTURE-61-1 (LET ((S (MAKE-STRUCT-TEST-61 :A 10 :B (QUOTE C)))) (VALUES (STRUCT-TEST-61-A S) (STRUCT-TEST-61-B S))) 10 C)
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (LET ((X NIL)) (FLET ((%F NIL X) (%G (Y) (SETF X Y))) (DEFSTRUCT STRUCT-TEST-62 (A (PROGN (SETF X (QUOTE A)) NIL)) (F (FUNCTION %F)) (G (FUNCTION %G))))))
;; Loading (DEFTEST STRUCTURE-62-1 (LET* ((S (MAKE-STRUCT-TEST-62 :A 1)) (F (STRUCT-TEST-62-F S))) (ASSERT (TYPEP F (QUOTE FUNCTION))) (VALUES (STRUCT-TEST-62-A S) (FUNCALL (THE FUNCTION F)))) 1 NIL)
;; Loading (DEFTEST STRUCTURE-62-2 (LET* ((S (MAKE-STRUCT-TEST-62)) (F (STRUCT-TEST-62-F S)) (G (STRUCT-TEST-62-G S))) (ASSERT (TYPEP F (QUOTE FUNCTION))) (ASSERT (TYPEP G (QUOTE FUNCTION))) (LOCALLY (DECLARE (TYPE FUNCTION F G)) (VALUES (STRUCT-TEST-62-A S) (FUNCALL F) (FUNCALL G NIL) (FUNCALL F)))) NIL A NIL NIL)
;; Loading (DEFSTRUCT-WITH-TESTS :STRUCT-TEST-63 A63 B63 C63)
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-64 :A63 :B63 :C63)
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-65 ARRAY-DIMENSION-LIMIT ARRAY-RANK-LIMIT ARRAY-TOTAL-SIZE-LIMIT BOOLE-1 BOOLE-2 BOOLE-AND BOOLE-ANDC1 BOOLE-ANDC2 BOOLE-C1 BOOLE-C2 BOOLE-CLR BOOLE-EQV BOOLE-IOR BOOLE-NAND BOOLE-NOR BOOLE-ORC1 BOOLE-ORC2 BOOLE-SET BOOLE-XOR CALL-ARGUMENTS-LIMIT CHAR-CODE-LIMIT DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON INTERNAL-TIME-UNITS-PER-SECOND LAMBDA-LIST-KEYWORDS LAMBDA-PARAMETERS-LIMIT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LONG-FLOAT-EPSILON LONG-FLOAT-NEGATIVE-EPSILON MOST-NEGATIVE-DOUBLE-FLOAT MOST-NEGATIVE-FIXNUM MOST-NEGATIVE-LONG-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-FIXNUM MOST-POSITIVE-LONG-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MULTIPLE-VALUES-LIMIT PI SHORT-FLOAT-EPSILON SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-66 NIL)
;; Loading (DEFSTRUCT-WITH-TESTS STRUCT-TEST-67 (A 0 :TYPE (INTEGER 0 (4294967296))) (B NIL))
;; Loading (DEFSTRUCT-WITH-TESTS (STRUCT-TEST-68 (:INCLUDE STRUCT-TEST-67)) C D)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST COPY-STRUCTURE.ERROR.1 (SIGNALS-ERROR (COPY-STRUCTURE) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-STRUCTURE.ERROR.2 (SIGNALS-ERROR (COPY-STRUCTURE (MAKE-S-2) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "structures-03.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/structures-03.lsp C18B3F47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN SBT-SLOTS (SNAME S &REST SLOTS) (LOOP FOR SLOTNAME IN SLOTS COLLECT (LET ((FUN (INTERN (CONCATENATE (QUOTE STRING) (STRING SNAME) "-" (STRING SLOTNAME)) :CL-TEST))) (FUNCALL (SYMBOL-FUNCTION FUN) S))))
;; Loading (DEFSTRUCT* (SBT-01 (:CONSTRUCTOR SBT-01-CON (B A C))) A B C)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-01/1 (LET ((S (SBT-01-CON 1 2 3))) (VALUES (SBT-01-A S) (SBT-01-B S) (SBT-01-C S))) 2 1 3)
;; Loading (DEFSTRUCT* (SBT-02 (:CONSTRUCTOR SBT-02-CON (A B C)) (:CONSTRUCTOR SBT-02-CON-2 (A B)) (:CONSTRUCTOR SBT-02-CON-3 NIL)) (A (QUOTE X)) (B (QUOTE Y)) (C (QUOTE Z)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-02/1 (LET ((S (SBT-02-CON 1 2 3))) (VALUES (SBT-02-A S) (SBT-02-B S) (SBT-02-C S))) 1 2 3)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-02/2 (LET ((S (SBT-02-CON-2 (QUOTE P) (QUOTE Q)))) (VALUES (SBT-02-A S) (SBT-02-B S) (SBT-02-C S))) P Q Z)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-02/3 (LET ((S (SBT-02-CON-3))) (VALUES (SBT-02-A S) (SBT-02-B S) (SBT-02-C S))) X Y Z)
;; Loading (DEFSTRUCT* (SBT-03 (:CONSTRUCTOR SBT-03-CON (A B &OPTIONAL C))) C B A)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-03/1 (LET ((S (SBT-03-CON 1 2))) (VALUES (SBT-03-A S) (SBT-03-B S))) 1 2)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-03/2 (LET ((S (SBT-03-CON 1 2 3))) (VALUES (SBT-03-A S) (SBT-03-B S) (SBT-03-C S))) 1 2 3)
;; Loading (DEFSTRUCT* (SBT-04 (:CONSTRUCTOR SBT-04-CON (A B &OPTIONAL C))) (C NIL) B (A NIL))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-04/1 (LET ((S (SBT-04-CON 1 2))) (VALUES (SBT-04-A S) (SBT-04-B S) (SBT-04-C S))) 1 2 NIL)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-04/2 (LET ((S (SBT-04-CON 1 2 4))) (VALUES (SBT-04-A S) (SBT-04-B S) (SBT-04-C S))) 1 2 4)
;; Loading (DEFSTRUCT* (SBT-05 (:CONSTRUCTOR SBT-05-CON (&OPTIONAL A B C))) (C 1) (B 2) (A 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-05/1 (LET ((S (SBT-05-CON))) (VALUES (SBT-05-A S) (SBT-05-B S) (SBT-05-C S))) 3 2 1)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-05/2 (LET ((S (SBT-05-CON (QUOTE X)))) (VALUES (SBT-05-A S) (SBT-05-B S) (SBT-05-C S))) X 2 1)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-05/3 (LET ((S (SBT-05-CON (QUOTE X) (QUOTE Y)))) (VALUES (SBT-05-A S) (SBT-05-B S) (SBT-05-C S))) X Y 1)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-05/4 (LET ((S (SBT-05-CON (QUOTE X) (QUOTE Y) (QUOTE Z)))) (VALUES (SBT-05-A S) (SBT-05-B S) (SBT-05-C S))) X Y Z)
;; Loading (DEFSTRUCT* (SBT-06 (:CONSTRUCTOR SBT-06-CON (&OPTIONAL (A (QUOTE P)) (B (QUOTE Q)) (C (QUOTE R))))) (C 1) (B 2) (A 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-06/1 (LET ((S (SBT-06-CON))) (VALUES (SBT-06-A S) (SBT-06-B S) (SBT-06-C S))) P Q R)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-06/2 (LET ((S (SBT-06-CON (QUOTE X)))) (VALUES (SBT-06-A S) (SBT-06-B S) (SBT-06-C S))) X Q R)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-06/3 (LET ((S (SBT-06-CON (QUOTE X) (QUOTE Y)))) (VALUES (SBT-06-A S) (SBT-06-B S) (SBT-06-C S))) X Y R)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-06/4 (LET ((S (SBT-06-CON (QUOTE X) (QUOTE Y) (QUOTE Z)))) (VALUES (SBT-06-A S) (SBT-06-B S) (SBT-06-C S))) X Y Z)
;; Loading (DEFSTRUCT* (SBT-07 (:CONSTRUCTOR SBT-07-CON (&OPTIONAL (A (QUOTE P) A-P) (B (QUOTE Q) B-P) (C (QUOTE R) C-P) &AUX (D (LIST (NOTNOT A-P) (NOTNOT B-P) (NOTNOT C-P)))))) A B C D)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-07/1 (SBT-SLOTS (QUOTE SBT-07) (SBT-07-CON) :A :B :C :D) (P Q R (NIL NIL NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-07/2 (SBT-SLOTS (QUOTE SBT-07) (SBT-07-CON (QUOTE X)) :A :B :C :D) (X Q R (T NIL NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-07/3 (SBT-SLOTS (QUOTE SBT-07) (SBT-07-CON (QUOTE X) (QUOTE Y)) :A :B :C :D) (X Y R (T T NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-07/4 (SBT-SLOTS (QUOTE SBT-07) (SBT-07-CON (QUOTE X) (QUOTE Y) (QUOTE Z)) :A :B :C :D) (X Y Z (T T T)))
;; Loading (DEFSTRUCT* (SBT-08 (:CONSTRUCTOR SBT-08-CON (&KEY ((:FOO A))))) A)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-08/1 (SBT-SLOTS (QUOTE SBT-08) (SBT-08-CON :FOO 10) :A) (10))
;; Loading (DEFSTRUCT* (SBT-09 (:CONSTRUCTOR SBT-09-CON (&KEY (A (QUOTE P) A-P) ((:X B) (QUOTE Q)) (C (QUOTE R)) D ((:Y E)) ((:Z F) (QUOTE S) Z-P) &AUX (G (LIST (NOTNOT A-P) (NOTNOT Z-P)))))) A B C D E F G)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-09/1 (SBT-SLOTS (QUOTE SBT-09) (SBT-09-CON) :A :B :C :F :G) (P Q R S (NIL NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-09/2 (SBT-SLOTS (QUOTE SBT-09) (SBT-09-CON :D 1) :A :B :C :D :F :G) (P Q R 1 S (NIL NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-09/3 (SBT-SLOTS (QUOTE SBT-09) (SBT-09-CON :A 1) :A :B :C :F :G) (1 Q R S (T NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-09/4 (SBT-SLOTS (QUOTE SBT-09) (SBT-09-CON :X 1) :A :B :C :F :G) (P 1 R S (NIL NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-09/5 (SBT-SLOTS (QUOTE SBT-09) (SBT-09-CON :C 1) :A :B :C :F :G) (P Q 1 S (NIL NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-09/6 (SBT-SLOTS (QUOTE SBT-09) (SBT-09-CON :Y 1) :A :B :C :E :F :G) (P Q R 1 S (NIL NIL)))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-09/7 (SBT-SLOTS (QUOTE SBT-09) (SBT-09-CON :Z 1) :A :B :C :F :G) (P Q R 1 (NIL T)))
;; Loading (DEFSTRUCT* (SBT-10 (:CONSTRUCTOR SBT-10-CON (&AUX (A 10) (B (1+ A))))) (A 1) (B 2))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-10/1 (SBT-SLOTS (QUOTE SBT-10) (SBT-10-CON) :A :B) (10 11))
;; Loading (DEFSTRUCT* (SBT-11 (:CONSTRUCTOR SBT-11-CON (&AUX A B))) A (B 0 :TYPE INTEGER))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-11/1 (LET ((S (SBT-11-CON))) (SETF (SBT-11-A S) (QUOTE P)) (SETF (SBT-11-B S) 10) (SBT-SLOTS (QUOTE SBT-11) S :A :B)) (P 10))
;; Loading (DEFSTRUCT* (SBT-12 (:CONSTRUCTOR SBT-12-CON (A &OPTIONAL (B 1) &REST C &AUX (D (LIST A B C))))) D)
;; Loading (DEFTEST STRUCTURE-BOA-12/1 (SBT-12-D (SBT-12-CON (QUOTE X))) (X 1 NIL))
;; Loading (DEFTEST STRUCTURE-BOA-12/2 (SBT-12-D (SBT-12-CON (QUOTE X) (QUOTE Y))) (X Y NIL))
;; Loading (DEFTEST STRUCTURE-BOA-12/3 (SBT-12-D (SBT-12-CON (QUOTE X) (QUOTE Y) 1 2 3)) (X Y (1 2 3)))
;; Loading (DEFSTRUCT* (SBT-13 (:CONSTRUCTOR SBT-13-CON (&KEY (A 1) (B 2) C &AUX (D (LIST A B C))))) D)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-13/1 (SBT-13-D (SBT-13-CON)) (1 2 NIL))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-13/2 (SBT-13-D (SBT-13-CON :A 10)) (10 2 NIL))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-13/3 (SBT-13-D (SBT-13-CON :B 10)) (1 10 NIL))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-13/4 (SBT-13-D (SBT-13-CON :C 10)) (1 2 10))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-13/5 (SBT-13-D (SBT-13-CON :C 10 :A 3)) (3 2 10))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-13/6 (SBT-13-D (SBT-13-CON :C 10 :B 3)) (1 3 10))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-13/7 (SBT-13-D (SBT-13-CON :A 10 :B 3)) (10 3 NIL))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-13/8 (SBT-13-D (SBT-13-CON :A 10 :C (QUOTE A) :B 3)) (10 3 A))
;; Loading (DEFSTRUCT* (SBT-14 (:CONSTRUCTOR SBT-14-CON (&KEY A B C &ALLOW-OTHER-KEYS))) (A 1) (B 2) (C 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-14/1 (SBT-SLOTS (QUOTE SBT-14) (SBT-14-CON) :A :B :C) (1 2 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-14/2 (SBT-SLOTS (QUOTE SBT-14) (SBT-14-CON :A 9) :A :B :C) (9 2 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-14/3 (SBT-SLOTS (QUOTE SBT-14) (SBT-14-CON :B 9) :A :B :C) (1 9 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-14/4 (SBT-SLOTS (QUOTE SBT-14) (SBT-14-CON :C 9) :A :B :C) (1 2 9))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-14/5 (SBT-SLOTS (QUOTE SBT-14) (SBT-14-CON :D 9) :A :B :C) (1 2 3))
;; Loading (DEFSTRUCT* (SBT-15 (:CONSTRUCTOR SBT-15-CON (&KEY ((:X A) NIL) ((Y B) NIL) (C NIL)))) A B C)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-15/1 (SBT-SLOTS (QUOTE SBT-15) (SBT-15-CON :X 1 (QUOTE Y) 2 :C 3) :A :B :C) (1 2 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-15/2 (SIGNALS-ERROR (SBT-15-CON :A 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-15/3 (SIGNALS-ERROR (SBT-15-CON :B 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-15/4 (SIGNALS-ERROR (SBT-15-CON (QUOTE X) 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-15/5 (SIGNALS-ERROR (SBT-15-CON :Y 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-15/6 (SIGNALS-ERROR (SBT-15-CON (QUOTE C) 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-15/7 (SIGNALS-ERROR (SBT-15-CON (QUOTE A) 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-15/8 (SIGNALS-ERROR (SBT-15-CON (QUOTE B) 1) PROGRAM-ERROR) T)
;; Loading (DEFSTRUCT* (SBT-16 (:CONSTRUCTOR) (:CONSTRUCTOR SBT-16-CON (A B C))) A B C)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/1 (SBT-SLOTS (QUOTE SBT-16) (MAKE-SBT-16 :A 1 :B 2 :C 3) :A :B :C) (1 2 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/2 (SBT-SLOTS (QUOTE SBT-16) (SBT-16-CON 4 5 6) :A :B :C) (4 5 6))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/3 (SIGNALS-ERROR (MAKE-SBT-16 :D 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/4 (SIGNALS-ERROR (MAKE-SBT-16 :A) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/5 (SIGNALS-ERROR (MAKE-SBT-16 (QUOTE A)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/6 (SIGNALS-ERROR (MAKE-SBT-16 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/7 (SBT-SLOTS (QUOTE SBT-16) (MAKE-SBT-16 :A 1 :B 2 :C 3 :D 5 :ALLOW-OTHER-KEYS T) :A :B :C) (1 2 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/8 (SBT-SLOTS (QUOTE SBT-16) (MAKE-SBT-16 :ALLOW-OTHER-KEYS T :A 1 :B 2 :C 3 :D 5) :A :B :C) (1 2 3))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/10 (SBT-SLOTS (QUOTE SBT-16) (MAKE-SBT-16 :A 1 :A 2 :B 3 :B 4 :C 5 :C 6) :A :B :C) (1 3 5))
;; Loading (DEFTEST STRUCTURE-BOA-TEST-16/11 (SBT-SLOTS (QUOTE SBT-16) (MAKE-SBT-16 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :A 1 :B 2 :C 3 :D 5) :A :B :C) (1 2 3))
;; Loading (DEF-MACRO-TEST STRUCT.ERROR.1 (DEFSTRUCT NONEXISTENT-STRUCTURE-TYPE A B C))
;; Loading (LOAD "load-types-and-class.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-types-and-class.lsp C1BCC577>
;; Loading (LOAD "types-and-class.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/types-and-class.lsp C1BDE9D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DECLAIM (OPTIMIZE (SAFETY 3)))
;; Loading (DEFTEST BOOLEAN-TYPE.1 (NOTNOT-MV (TYPEP NIL (QUOTE BOOLEAN))) T)
;; Loading (DEFTEST BOOLEAN-TYPE.2 (NOTNOT-MV (TYPEP T (QUOTE BOOLEAN))) T)
;; Loading (DEFTEST BOOLEAN-TYPE.3 (CHECK-TYPE-PREDICATE (QUOTE IS-T-OR-NIL) (QUOTE BOOLEAN)) NIL)
;; Loading (DEFTEST TYPES.3 (LOOP FOR (T1 T2) IN *SUBTYPE-TABLE* FOR M1 = (CHECK-SUBTYPEP T1 T2 T T) FOR M2 = (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA T1) (SYSTEM.INTERNALS::BQ-COMMA T2))) T1 T) FOR M3 = (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA T2) (SYSTEM.INTERNALS::BQ-COMMA T1))) T1 T) FOR M4 = (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA T1) (NOT (SYSTEM.INTERNALS::BQ-COMMA T2)))) NIL T) FOR M5 = (CHECK-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (AND (NOT (SYSTEM.INTERNALS::BQ-COMMA T2)) (SYSTEM.INTERNALS::BQ-COMMA T1))) NIL T) WHEN M1 COLLECT M1 WHEN M2 COLLECT M2 WHEN M3 COLLECT M3 WHEN M4 COLLECT M4 WHEN M5 COLLECT M5) NIL)
;; Loading (DECLAIM (SPECIAL +FLOAT-TYPES+ *SUBTYPE-TABLE*))
;; Loading (DEFTEST TYPES.6 (TYPES.6-BODY) NIL)
;; Loading (DECLAIM (SPECIAL *DISJOINT-TYPES-LIST*))
;; Loading (DEFTEST TYPES.7B (LOOP FOR E ON *DISJOINT-TYPES-LIST* FOR TP1 = (FIRST E) APPEND (LOOP FOR TP2 IN (REST E) APPEND (CLASSES-ARE-DISJOINT TP1 TP2))) NIL)
;; Loading (DEFTEST TYPES.7C (LOOP FOR E ON *DISJOINT-TYPES-LIST2* FOR LIST1 = (FIRST E) APPEND (LOOP FOR TP1 IN LIST1 APPEND (LOOP FOR LIST2 IN (REST E) APPEND (LOOP FOR TP2 IN LIST2 APPEND (CLASSES-ARE-DISJOINT TP1 TP2))))) NIL)
;; Loading (DEFTEST TYPES.8 (LOOP FOR TP IN *DISJOINT-TYPES-LIST* COUNT (COND ((AND (NOT (EQT TP (QUOTE CONS))) (NOT (SUBTYPEP* TP (QUOTE ATOM)))) (FORMAT T "~%Should be atomic, but isn't: ~S" TP) T))) 0)
;; Loading (DECLAIM (SPECIAL *TYPE-LIST* *SUPERTYPE-TABLE*))
;; Loading (DEFTEST TYPES.9 (TYPES.9-BODY) NIL)
;; Loading (DEFTEST TYPES.9A (TYPES.9A-BODY) 0)
;; Loading (DEFTEST ALL-CLASSES-ARE-TYPE-EQUIVALENT-TO-THEIR-NAMES (LOOP FOR SYM BEING THE EXTERNAL-SYMBOLS OF "COMMON-LISP" FOR CLASS = (FIND-CLASS SYM NIL) WHEN CLASS APPEND (CHECK-EQUIVALENCE SYM CLASS)) NIL)
;; Loading (DEFTEST ALL-CLASSES-ARE-TYPE-EQUIVALENT-TO-THEIR-NAMES.2 (LOOP FOR X IN *UNIVERSE* FOR CL = (CLASS-OF X) FOR NAME = (CLASS-NAME CL) WHEN NAME APPEND (CHECK-EQUIVALENCE NAME CL)) NIL)
;; Loading (DEFTEST ALL-STANDARD-CLASSES-ARE-SUBTYPES-OF-STANDARD-OBJECT (LOOP FOR SYM BEING THE EXTERNAL-SYMBOLS OF "COMMON-LISP" FOR CLASS = (FIND-CLASS SYM NIL) WHEN (AND CLASS (TYPEP CLASS (QUOTE STANDARD-CLASS)) (OR (NOT (SUBTYPEP SYM (QUOTE STANDARD-OBJECT))) (NOT (SUBTYPEP CLASS (QUOTE STANDARD-OBJECT))))) COLLECT SYM) NIL)
;; Loading (DEFTEST ALL-STANDARD-CLASSES-ARE-SUBTYPES-OF-STANDARD-OBJECT.2 (LOOP FOR X IN *UNIVERSE* FOR CLASS = (CLASS-OF X) WHEN (AND (TYPEP CLASS (QUOTE STANDARD-CLASS)) (NOT (SUBTYPEP CLASS (QUOTE STANDARD-OBJECT)))) COLLECT X) NIL)
;; Loading (DEFTEST ALL-STRUCTURE-CLASSES-ARE-SUBTYPES-OF-STRUCTURE-OBJECT (LOOP FOR SYM BEING THE EXTERNAL-SYMBOLS OF "COMMON-LISP" FOR CLASS = (FIND-CLASS SYM NIL) WHEN (AND CLASS (TYPEP CLASS (QUOTE STRUCTURE-CLASS)) (OR (NOT (SUBTYPEP SYM (QUOTE STRUCTURE-OBJECT))) (NOT (SUBTYPEP CLASS (QUOTE STRUCTURE-OBJECT))))) COLLECT SYM) NIL)
;; Loading (DEFTEST ALL-STRUCTURE-CLASSES-ARE-SUBTYPES-OF-STRUCTURE-OBJECT.2 (LOOP FOR X IN *UNIVERSE* FOR CL = (CLASS-OF X) WHEN (AND (TYPEP CL (QUOTE STRUCTURE-CLASS)) (NOT (SUBTYPEP CL (QUOTE STRUCTURE-OBJECT)))) COLLECT X) NIL)
;; Loading (DEFTEST ALL-EXPORTED-CL-CLASS-NAMES-ARE-VALID (LOOP FOR SYM BEING THE EXTERNAL-SYMBOLS OF "COMMON-LISP" WHEN (AND (FIND-CLASS SYM NIL) (NOT (MEMBER SYM *CL-ALL-TYPE-SYMBOLS* :TEST (FUNCTION EQ)))) COLLECT SYM) NIL)
;; Loading (DEFTEST ALL-STANDARD-GENERIC-FUNCTIONS-ARE-INSTANCES-OF-THAT-CLASS (LOOP FOR SYM IN *CL-STANDARD-GENERIC-FUNCTION-SYMBOLS* FOR FUN = (AND (FBOUNDP SYM) (SYMBOL-FUNCTION SYM)) UNLESS (AND (TYPEP FUN (QUOTE GENERIC-FUNCTION)) (TYPEP FUN (QUOTE STANDARD-GENERIC-FUNCTION))) COLLECT (LIST SYM FUN)) NIL)
;; Loading (DEFTEST STRUCTURE-OBJECT-IS-IN-STRUCTURE-CLASS (NOTNOT-MV (TYPEP (FIND-CLASS (QUOTE STRUCTURE-OBJECT)) (QUOTE STRUCTURE-CLASS))) T)
;; Loading (DEFTEST STANDARD-OBJECT-IS-IN-STANDARD-CLASS (NOTNOT-MV (TYPEP (FIND-CLASS (QUOTE STANDARD-OBJECT)) (QUOTE STANDARD-CLASS))) T)
;; Loading (DEFPARAMETER *TYPE-AND-CLASS-FNS* (QUOTE (COERCE SUBTYPEP TYPE-OF TYPEP TYPE-ERROR-DATUM TYPE-ERROR-EXPECTED-TYPE)))
;; Loading (DEFTEST TYPE-AND-CLASS-FNS (REMOVE-IF (FUNCTION FBOUNDP) *TYPE-AND-CLASS-FNS*) NIL)
;; Loading (DEFTEST TYPE-AND-CLASS-MACROS (NOTNOT-MV (MACRO-FUNCTION (QUOTE DEFTYPE))) T)
;; Loading (DEFTEST TYPE-ERROR-DATUM.1 (LET ((C (MAKE-CONDITION (QUOTE TYPE-ERROR) :DATUM (QUOTE A) :EXPECTED-TYPE (QUOTE INTEGER)))) (TYPE-ERROR-DATUM C)) A)
;; Loading (DEFTEST TYPE-ERROR-EXPECTED-TYPE.1 (LET ((C (MAKE-CONDITION (QUOTE TYPE-ERROR) :DATUM (QUOTE A) :EXPECTED-TYPE (QUOTE INTEGER)))) (TYPE-ERROR-EXPECTED-TYPE C)) INTEGER)
;; Loading (DEFTEST TYPE-ERROR-DATUM.ERROR.1 (SIGNALS-ERROR (TYPE-ERROR-DATUM) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPE-ERROR-DATUM.ERROR.2 (SIGNALS-ERROR (LET ((C (MAKE-CONDITION (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE T))) (TYPE-ERROR-DATUM C NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPE-ERROR-EXPECTED-TYPE.ERROR.1 (SIGNALS-ERROR (TYPE-ERROR-EXPECTED-TYPE) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPE-ERROR-EXPECTED-TYPE.ERROR.2 (SIGNALS-ERROR (LET ((C (MAKE-CONDITION (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE T))) (TYPE-ERROR-EXPECTED-TYPE C NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "types-and-class-2.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/types-and-class-2.lsp C1DA8997>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST TYPE-OR-NOT-TYPE-IS-EVERYTHING (LOOP FOR L IN *DISJOINT-TYPES-LIST2* APPEND (LOOP FOR TYPE IN L APPEND (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA TYPE) (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) T) APPEND (CHECK-SUBTYPEP T (SYSTEM.INTERNALS::BACKQUOTE (OR (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE)) (SYSTEM.INTERNALS::BQ-COMMA TYPE))) T))) NIL)
;; Loading (DEFCLASS TAC-1-CLASS NIL (A B C))
;; Loading (DEFCLASS TAC-1A-CLASS (TAC-1-CLASS) (D E))
;; Loading (DEFCLASS TAC-1B-CLASS (TAC-1-CLASS) (F G))
;; Loading (DEFTEST USER-CLASS-DISJOINTNESS (LOOP FOR L IN *DISJOINT-TYPES-LIST2* APPEND (LOOP FOR TYPE IN L APPEND (CLASSES-ARE-DISJOINT TYPE (QUOTE TAC-1-CLASS)))) NIL)
;; Loading (DEFTEST USER-CLASS-DISJOINTNESS-2 (CHECK-DISJOINTNESS (QUOTE TAC-1A-CLASS) (QUOTE TAC-1B-CLASS)) NIL)
;; Loading (DEFSTRUCT TAC-2-STRUCT A B C)
;; Loading (DEFSTRUCT (TAC-2A-STRUCT (:INCLUDE TAC-2-STRUCT)) D E)
;; Loading (DEFSTRUCT (TAC-2B-STRUCT (:INCLUDE TAC-2-STRUCT)) F G)
;; Loading (DEFTEST USER-STRUCT-DISJOINTNESS (LOOP FOR L IN *DISJOINT-TYPES-LIST2* APPEND (LOOP FOR TYPE IN L APPEND (CHECK-DISJOINTNESS TYPE (QUOTE TAC-2-STRUCT)))) NIL)
;; Loading (DEFTEST USER-STRUCT-DISJOINTNESS-2 (CHECK-DISJOINTNESS (QUOTE TAC-2A-STRUCT) (QUOTE TAC-2B-STRUCT)) NIL)
;; Loading (DEFCLASS TAC-3-A NIL (X))
;; Loading (DEFCLASS TAC-3-B NIL (Y))
;; Loading (DEFCLASS TAC-3-C NIL (Z))
;; Loading (DEFCLASS TAC-3-AB (TAC-3-A TAC-3-B) NIL)
;; Loading (DEFCLASS TAC-3-AC (TAC-3-A TAC-3-C) NIL)
;; Loading (DEFCLASS TAC-3-BC (TAC-3-B TAC-3-C) NIL)
;; Loading (DEFCLASS TAC-3-ABC (TAC-3-AB TAC-3-AC TAC-3-BC) NIL)
;; Loading (DEFTEST TAC-3.1 (SUBTYPEP* (QUOTE TAC-3-AB) (QUOTE TAC-3-A)) T T)
;; Loading (DEFTEST TAC-3.2 (SUBTYPEP* (QUOTE TAC-3-AB) (QUOTE TAC-3-B)) T T)
;; Loading (DEFTEST TAC-3.3 (SUBTYPEP* (QUOTE TAC-3-AB) (QUOTE TAC-3-C)) NIL T)
;; Loading (DEFTEST TAC-3.4 (SUBTYPEP* (QUOTE TAC-3-A) (QUOTE TAC-3-AB)) NIL T)
;; Loading (DEFTEST TAC-3.5 (SUBTYPEP* (QUOTE TAC-3-B) (QUOTE TAC-3-AB)) NIL T)
;; Loading (DEFTEST TAC-3.6 (SUBTYPEP* (QUOTE TAC-3-C) (QUOTE TAC-3-AB)) NIL T)
;; Loading (DEFTEST TAC-3.7 (SUBTYPEP* (QUOTE TAC-3-ABC) (QUOTE TAC-3-A)) T T)
;; Loading (DEFTEST TAC-3.8 (SUBTYPEP* (QUOTE TAC-3-ABC) (QUOTE TAC-3-B)) T T)
;; Loading (DEFTEST TAC-3.9 (SUBTYPEP* (QUOTE TAC-3-ABC) (QUOTE TAC-3-C)) T T)
;; Loading (DEFTEST TAC-3.10 (SUBTYPEP* (QUOTE TAC-3-ABC) (QUOTE TAC-3-AB)) T T)
;; Loading (DEFTEST TAC-3.11 (SUBTYPEP* (QUOTE TAC-3-ABC) (QUOTE TAC-3-AC)) T T)
;; Loading (DEFTEST TAC-3.12 (SUBTYPEP* (QUOTE TAC-3-ABC) (QUOTE TAC-3-BC)) T T)
;; Loading (DEFTEST TAC-3.13 (SUBTYPEP* (QUOTE TAC-3-AB) (QUOTE TAC-3-ABC)) NIL T)
;; Loading (DEFTEST TAC-3.14 (SUBTYPEP* (QUOTE TAC-3-AC) (QUOTE TAC-3-ABC)) NIL T)
;; Loading (DEFTEST TAC-3.15 (SUBTYPEP* (QUOTE TAC-3-BC) (QUOTE TAC-3-ABC)) NIL T)
;; Loading (DEFTEST TAC-3.16 (CHECK-EQUIVALENCE (QUOTE (AND TAC-3-A TAC-3-B)) (QUOTE TAC-3-AB)) NIL)
;; Loading (DEFTEST TAC-3.17 (CHECK-EQUIVALENCE (QUOTE (AND (OR TAC-3-A TAC-3-B) (OR (NOT TAC-3-A) (NOT TAC-3-B)) (OR TAC-3-A TAC-3-C) (OR (NOT TAC-3-A) (NOT TAC-3-C)) (OR TAC-3-B TAC-3-C) (OR (NOT TAC-3-B) (NOT TAC-3-C)))) NIL) NIL)
;; Loading (DEFTEST UNIVERSE-ELEMENTS-IN-AT-MOST-ONE-DISJOINT-TYPE (LOOP FOR E IN *UNIVERSE* FOR TYPES = (REMOVE-IF-NOT (FUNCTION (LAMBDA (X) (TYPEP E X))) *DISJOINT-TYPES-LIST*) WHEN (> (LENGTH TYPES) 1) COLLECT (LIST E TYPES)) NIL)
;; Loading (DEFTEST INTEGER-AND-RATIO-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE INTEGER) (QUOTE RATIO)) NIL)
;; Loading (DEFTEST BIGNUM-AND-RATIO-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE BIGNUM) (QUOTE RATIO)) NIL)
;; Loading (DEFTEST BIGNUM-AND-FIXNUM-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE BIGNUM) (QUOTE FIXNUM)) NIL)
;; Loading (DEFTEST FIXNUM-AND-RATIO-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE FIXNUM) (QUOTE RATIO)) NIL)
;; Loading (DEFTEST BYTE8-AND-RATIO-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE (UNSIGNED-BYTE 8)) (QUOTE RATIO)) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST BIT-AND-RATIO-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE BIT) (QUOTE RATIO)) NIL)
;; Loading (DEFTEST INTEGER-AND-FLOAT-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE INTEGER) (QUOTE FLOAT)) NIL)
;; Loading (DEFTEST RATIO-AND-FLOAT-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE RATIO) (QUOTE FLOAT)) NIL)
;; Loading (DEFTEST COMPLEX-AND-FLOAT-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE COMPLEX) (QUOTE FLOAT)) NIL)
;; Loading (DEFTEST INTEGER-SUBRANGES-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE (INTEGER 0 (10))) (QUOTE (INTEGER 10 (20)))) NIL)
;; Loading (DEFTEST KEYWORD-AND-NULL-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE KEYWORD) (QUOTE NULL)) NIL)
;; Loading (DEFTEST KEYWORD-AND-BOOLEAN-ARE-DISJOINT (CLASSES-ARE-DISJOINT (QUOTE KEYWORD) (QUOTE BOOLEAN)) NIL)
;; Loading (LOAD "coerce.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/coerce.lsp 818AA8E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COERCE.1 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (LET ((TYPE (TYPE-OF X))) (OR (AND (CONSP TYPE) (EQT (CAR TYPE) (QUOTE FUNCTION))) (EQL (COERCE X TYPE) X)))))) NIL)
;; Loading (DEFTEST COERCE.2 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (EQL (COERCE X T) X)))) NIL)
;; Loading (DEFTEST COERCE.3 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (LET ((CLASS (CLASS-OF X))) (EQL (COERCE X CLASS) X))))) NIL)
;; Loading (DEFTEST COERCE.4 (LOOP FOR X IN (QUOTE (NIL #() #*)) NEVER (COERCE X (QUOTE LIST))) T)
;; Loading (DEFTEST COERCE.5 (LOOP FOR X IN (QUOTE ((1 0) #(1 0) #*10)) ALWAYS (EQUAL (COERCE X (QUOTE LIST)) (QUOTE (1 0)))) T)
;; Loading (DEFTEST COERCE.6 (LOOP FOR X IN (QUOTE (NIL #() #*)) ALWAYS (EQUALP (COERCE X (QUOTE VECTOR)) #())) T)
;; Loading (DEFTEST COERCE.7 (LOOP FOR X IN (QUOTE ((1 0) #(1 0) #*10)) FOR Y = (COERCE X (QUOTE VECTOR)) ALWAYS (AND (EQUALP Y #(1 0)) (VECTORP Y))) T)
;; Loading (DEFTEST COERCE.8 (LOOP FOR X IN (QUOTE ((1 0) #(1 0) #*10)) FOR Y = (COERCE X (QUOTE (VECTOR *))) ALWAYS (AND (EQUALP Y #(1 0)) (VECTORP Y))) T)
;; Loading (DEFTEST COERCE.9 (LOOP FOR X IN (QUOTE ((1 0) #(1 0) #*10)) FOR Y = (COERCE X (QUOTE (VECTOR * 2))) ALWAYS (AND (EQUALP Y #(1 0)) (VECTORP Y))) T)
;; Loading (DEFTEST COERCE.10 (VALUES (COERCE #\A (QUOTE CHARACTER)) (COERCE (QUOTE A) (QUOTE CHARACTER)) (COERCE "A" (QUOTE CHARACTER))) #\A #\A #\A)
;; Loading (DEFTEST COERCE.11 (LOOP WITH CLASS = (FIND-CLASS (QUOTE VECTOR)) FOR X IN (QUOTE ((1 0) #(1 0) #*10)) FOR Y = (COERCE X CLASS) ALWAYS (AND (EQUALP Y #(1 0)) (VECTORP Y))) T)
;; Loading (DEFTEST COERCE.12 (LOOP FOR X IN (QUOTE ((1 0) #(1 0) #*10)) FOR Y = (COERCE X (QUOTE BIT-VECTOR)) ALWAYS (AND (EQUALP Y #*10) (BIT-VECTOR-P Y))) T)
;; Loading (DEFTEST COERCE.13 (LOOP FOR X IN (QUOTE ((#\a #\b #\c) "abc")) FOR Y = (COERCE X (QUOTE STRING)) ALWAYS (AND (STRINGP Y) (STRING= Y "abc"))) T)
;; Loading (DEFTEST COERCE.14 (LOOP FOR X IN (QUOTE ((#\a #\b #\c) "abc")) FOR Y = (COERCE X (QUOTE SIMPLE-STRING)) ALWAYS (AND (TYPEP Y (QUOTE SIMPLE-STRING)) (STRING= Y "abc"))) T)
;; Loading (DEFTEST COERCE.15 (LOOP FOR X IN (QUOTE ((1 0) #(1 0) #*10)) FOR Y = (COERCE X (QUOTE SIMPLE-VECTOR)) ALWAYS (AND (EQUALP Y #(1 0)) (SIMPLE-VECTOR-P Y))) T)
;; Loading (DEFTEST COERCE.16 (COERCE 0 (QUOTE INTEGER)) 0)
;; Loading (DEFTEST COERCE.17 (COERCE 0 (QUOTE COMPLEX)) 0)
;; Loading (DEFTEST COERCE.18 (COERCE 3 (QUOTE COMPLEX)) 3)
;; Loading (DEFTEST COERCE.19 (COERCE 5/3 (QUOTE COMPLEX)) 5/3)
;; Loading (DEFTEST COERCE.20 (COERCE 1.0 (QUOTE COMPLEX)) #C(1.0 0.0))
;; Loading (DEFTEST COERCE.21 (EQT (SYMBOL-FUNCTION (QUOTE CAR)) (COERCE (QUOTE CAR) (QUOTE FUNCTION))) T)
;; Loading (DEFTEST COERCE.22 (FUNCALL (COERCE (QUOTE (LAMBDA NIL 10)) (QUOTE FUNCTION))) 10)
;; Loading (DEFTEST COERCE.ORDER.1 (LET ((I 0) A B) (VALUES (COERCE (PROGN (SETF A (INCF I)) 10) (PROGN (SETF B (INCF I)) (QUOTE SINGLE-FLOAT))) I A B)) 10.0 2 1 2)
;; Loading (DEF-FOLD-TEST COERCE.FOLD.1 (COERCE (QUOTE (1 2 3)) (QUOTE VECTOR)))
;; Loading (DEF-FOLD-TEST COERCE.FOLD.2 (COERCE (QUOTE (1 0 1)) (QUOTE BIT-VECTOR)))
;; Loading (DEF-FOLD-TEST COERCE.FOLD.3 (COERCE (QUOTE (#\a #\b #\c)) (QUOTE STRING)))
;; Loading (DEFTEST COERCE.ERROR.2 (SIGNALS-ERROR (COERCE (QUOTE (A B C)) (QUOTE (VECTOR * 2))) TYPE-ERROR) T)
;; Loading (DEFTEST COERCE.ERROR.3 (SIGNALS-ERROR (COERCE (QUOTE (A B C)) (QUOTE (VECTOR * 4))) TYPE-ERROR) T)
;; Loading (DEFTEST COERCE.ERROR.4 (SIGNALS-ERROR (COERCE NIL (QUOTE CONS)) TYPE-ERROR) T)
;; Loading (DEFTEST COERCE.ERROR.5 (HANDLER-CASE (EVAL (QUOTE (COERCE (QUOTE NOT-A-BOUND-FUNCTION) (QUOTE FUNCTION)))) (ERROR NIL :CAUGHT)) :CAUGHT)
;; Loading (DEFTEST COERCE.ERROR.6 (SIGNALS-ERROR (COERCE) PROGRAM-ERROR) T)
;; Loading (DEFTEST COERCE.ERROR.7 (SIGNALS-ERROR (COERCE T) PROGRAM-ERROR) T)
;; Loading (DEFTEST COERCE.ERROR.8 (SIGNALS-ERROR (COERCE (QUOTE X) T (QUOTE FOO)) PROGRAM-ERROR) T)
;; Loading (DEFTEST COERCE.ERROR.9 (SIGNALS-ERROR (LOCALLY (COERCE NIL (QUOTE CONS)) T) TYPE-ERROR) T)
;; Loading (DEFTEST COERCE.ERROR.10 :NOTES (:RESULT-TYPE-ELEMENT-TYPE-BY-SUBTYPE) (LET* ((TP1 (QUOTE (VECTOR CHARACTER))) (TP2 (SYSTEM.INTERNALS::BACKQUOTE (VECTOR T))) (TP3 (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA TP1) (SYSTEM.INTERNALS::BQ-COMMA TP2))))) (IF (NOT (SUBTYPEP TP3 (QUOTE VECTOR))) T (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (COERCE (QUOTE (#\a #\b #\c)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TP3))))) (TYPE-ERROR (C) (COND ((TYPEP (TYPE-ERROR-DATUM C) (TYPE-ERROR-EXPECTED-TYPE C)) (SYSTEM.INTERNALS::BACKQUOTE ((TYPEP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (TYPE-ERROR-DATUM C))) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (TYPE-ERROR-EXPECTED-TYPE C)))) "==>" TRUE))) (T T))) (ERROR (C) (DECLARE (IGNORE C)) T)))) T)
;; Loading (LOAD "subtypep.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep.lsp 819F98D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP.ORDER.1 (LET ((I 0) X Y) (VALUES (NOTNOT (SUBTYPEP (PROGN (SETF X (INCF I)) T) (PROGN (SETF Y (INCF I)) T))) I X Y)) T 2 1 2)
;; Loading (DEFTEST SIMPLE-BASE-STRING-IS-SEQUENCE (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE SEQUENCE)) T T)
;; Loading (DEFTEST SUBTYPE.ENV.1 (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (SUBTYPEP (QUOTE BIT) (QUOTE INTEGER) NIL))) (T T))
;; Loading (DEFTEST SUBTYPE.ENV.2 (MACROLET ((%FOO (&ENVIRONMENT ENV) (LIST (QUOTE QUOTE) (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (SUBTYPEP (QUOTE BIT) (QUOTE INTEGER) ENV)))))) (%FOO)) (T T))
;; Loading (DEFTEST SUBTYPE.ENV.3 (MACROLET ((%FOO (&ENVIRONMENT ENV) (MULTIPLE-VALUE-BIND (SUB GOOD) (SUBTYPEP NIL (TYPE-OF ENV)) (OR (NOT GOOD) (NOTNOT SUB))))) (%FOO)) T)
;; Loading (DEFTEST SUBTYPE.ENV.4 (MACROLET ((%FOO (&ENVIRONMENT ENV) (MULTIPLE-VALUE-BIND (SUB GOOD) (SUBTYPEP (TYPE-OF ENV) (TYPE-OF ENV)) (OR (NOT GOOD) (NOTNOT SUB))))) (%FOO)) T)
;; Loading (DEFTEST SUBTYPE.ENV.5 (MACROLET ((%FOO (&ENVIRONMENT ENV) (MULTIPLE-VALUE-BIND (SUB GOOD) (SUBTYPEP (TYPE-OF ENV) T) (OR (NOT GOOD) (NOTNOT SUB))))) (%FOO)) T)
;; Loading (DEFTEST SUBTYPEP.ERROR.1 (SIGNALS-ERROR (SUBTYPEP) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBTYPEP.ERROR.2 (SIGNALS-ERROR (SUBTYPEP T) PROGRAM-ERROR) T)
;; Loading (DEFTEST SUBTYPEP.ERROR.3 (SIGNALS-ERROR (SUBTYPEP T T NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST KEYWORD-IS-SUBTYPE-OF-ATOM (SUBTYPEP* (QUOTE KEYWORD) (QUOTE ATOM)) T T)
;; Loading (DEFTEST RATIO-IS-SUBTYPE-OF-ATOM (SUBTYPEP* (QUOTE RATIO) (QUOTE ATOM)) T T)
;; Loading (DEFTEST EXTENDED-CHAR-IS-SUBTYPE-OF-ATOM (SUBTYPEP* (QUOTE EXTENDED-CHAR) (QUOTE ATOM)) T T)
;; Loading (DEFTEST STRING-IS-NOT-SIMPLE-VECTOR (SUBTYPEP* (QUOTE STRING) (QUOTE SIMPLE-VECTOR)) NIL T)
;; Loading (DEFTEST BASE-STRING-IS-NOT-SIMPLE-VECTOR (SUBTYPEP* (QUOTE BASE-STRING) (QUOTE SIMPLE-VECTOR)) NIL T)
;; Loading (DEFTEST SIMPLE-STRING-IS-NOT-SIMPLE-VECTOR (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE SIMPLE-VECTOR)) NIL T)
;; Loading (DEFTEST SIMPLE-BASE-STRING-IS-NOT-SIMPLE-VECTOR (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE SIMPLE-VECTOR)) NIL T)
;; Loading (DEFTEST BIT-VECTOR-IS-NOT-SIMPLE-VECTOR (SUBTYPEP* (QUOTE BIT-VECTOR) (QUOTE SIMPLE-VECTOR)) NIL T)
;; Loading (DEFTEST SIMPLE-BIT-VECTOR-IS-NOT-SIMPLE-VECTOR (SUBTYPEP* (QUOTE SIMPLE-BIT-VECTOR) (QUOTE SIMPLE-VECTOR)) NIL T)
;; Loading (DEFTEST SUBTYPEP.EXTENDED-CHAR.1 (IF (SUBTYPEP* (QUOTE CHARACTER) (QUOTE BASE-CHAR)) (SUBTYPEP* (QUOTE EXTENDED-CHAR) NIL) (VALUES T T)) T T)
;; Loading (DEFTEST SUBTYPEP.EXTENDED-CHAR.2 (IF (SUBTYPEP* (QUOTE EXTENDED-CHAR) NIL) (SUBTYPEP* (QUOTE CHARACTER) (QUOTE BASE-CHAR)) (VALUES T T)) T T)
;; Loading (DEFTEST SUBTYPEP.EXTENDED-CHAR.3 (CHECK-EQUIVALENCE (QUOTE EXTENDED-CHAR) (QUOTE (AND CHARACTER (NOT BASE-CHAR)))) NIL)
;; Loading (DEFTEST SUBTYPEP.AND/OR.1 (CHECK-EQUIVALENCE (QUOTE (AND (OR SYMBOL (INTEGER 0 15)) (OR SYMBOL (INTEGER 10 25)))) (QUOTE (OR SYMBOL (INTEGER 10 15)))) NIL)
;; Loading (DEFTEST SUBTYPEP.AND/OR.2 (CHECK-EQUIVALENCE (QUOTE (AND (OR (NOT SYMBOL) (INTEGER 0 10)) (OR SYMBOL (INTEGER 11 25)))) (QUOTE (INTEGER 11 25))) NIL)
;; Loading (DEFTEST SUBTYPEP.AND.1 (LOOP FOR TYPE IN *TYPES-LIST3* APPEND (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA TYPE))) TYPE)) NIL)
;; Loading (DEFTEST SUBTYPEP.OR.1 (LOOP FOR TYPE IN *TYPES-LIST3* APPEND (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA TYPE))) TYPE)) NIL)
;; Loading (DEFTEST SUBTYPEP.AND.2 (CHECK-EQUIVALENCE T (QUOTE (AND))) NIL)
;; Loading (DEFTEST SUBTYPEP.OR.2 (CHECK-EQUIVALENCE NIL (QUOTE (OR))) NIL)
;; Loading (DEFTEST SUBTYPEP.AND.3 (LOOP FOR TYPE IN *TYPES-LIST3* APPEND (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TYPE))) TYPE)) NIL)
;; Loading (DEFTEST SUBTYPEP.OR.3 (LOOP FOR TYPE IN *TYPES-LIST3* APPEND (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA TYPE))) TYPE)) NIL)
;; Loading (DEFTEST SUBTYPEP.AND.4 (LET* ((N (LENGTH *TYPES-LIST3*)) (A (MAKE-ARRAY N :INITIAL-CONTENTS *TYPES-LIST3*))) (TRIM-LIST (LOOP FOR I BELOW 1000 FOR TP1 = (AREF A (RANDOM N)) FOR TP2 = (AREF A (RANDOM N)) APPEND (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TP1) (SYSTEM.INTERNALS::BQ-COMMA TP2))) (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA TP2) (SYSTEM.INTERNALS::BQ-COMMA TP1))))) 100)) NIL)
;; Loading (DEFTEST SUBTYPEP.OR.4 (LET* ((N (LENGTH *TYPES-LIST3*)) (A (MAKE-ARRAY N :INITIAL-CONTENTS *TYPES-LIST3*))) (TRIM-LIST (LOOP FOR I BELOW 1000 FOR TP1 = (AREF A (RANDOM N)) FOR TP2 = (AREF A (RANDOM N)) APPEND (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA TP1) (SYSTEM.INTERNALS::BQ-COMMA TP2))) (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA TP2) (SYSTEM.INTERNALS::BQ-COMMA TP1))))) 100)) NIL)
;; Loading (DEFTEST SUBTYPEP.NIL.1 (LOOP FOR (TYPE) IN *SUBTYPE-TABLE* UNLESS (MEMBER TYPE (QUOTE (NIL EXTENDED-CHAR))) APPEND (CHECK-ALL-NOT-SUBTYPEP TYPE NIL)) NIL)
;; Loading (DEFTEST SUBTYPEP.NIL.2 (LOOP FOR (TYPE) IN *SUBTYPE-TABLE* FOR CLASS = (FIND-CLASS TYPE NIL) UNLESS (OR (NOT CLASS) (MEMBER TYPE (QUOTE (NIL EXTENDED-CHAR)))) APPEND (CHECK-ALL-NOT-SUBTYPEP CLASS NIL)) NIL)
;; Loading (LOAD "subtypep-integer.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-integer.lsp 81B43017>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP.FIXNUM-OR-BIGNUM (CHECK-EQUIVALENCE (QUOTE (OR FIXNUM BIGNUM)) (QUOTE INTEGER)) NIL)
;; Loading (DEFTEST SUBTYPEP.FIXNUM.INTEGER (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (INTEGER (SYSTEM.INTERNALS::BQ-COMMA MOST-NEGATIVE-FIXNUM) (SYSTEM.INTERNALS::BQ-COMMA MOST-POSITIVE-FIXNUM))) (QUOTE FIXNUM)) NIL)
;; Loading (DEFTEST SUBTYPEP.BIGNUM.INTEGER (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (OR (INTEGER * ((SYSTEM.INTERNALS::BQ-COMMA MOST-NEGATIVE-FIXNUM))) (INTEGER ((SYSTEM.INTERNALS::BQ-COMMA MOST-POSITIVE-FIXNUM)) *))) (QUOTE BIGNUM)) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.1 (SUBTYPEP* (QUOTE (INTEGER 0 10)) (QUOTE (INTEGER 0 20))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.2 (SUBTYPEP* (QUOTE (INTEGER 0 10)) (QUOTE (INTEGER 0 (10)))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.3 (SUBTYPEP* (QUOTE (INTEGER 10 100)) (QUOTE INTEGER)) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.3A (SUBTYPEP* (QUOTE (INTEGER 10 100)) (QUOTE (INTEGER))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.3B (SUBTYPEP* (QUOTE (INTEGER 10 100)) (QUOTE (INTEGER *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.3C (SUBTYPEP* (QUOTE (INTEGER 10 100)) (QUOTE (INTEGER * *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.4 (SUBTYPEP* (QUOTE INTEGER) (QUOTE (INTEGER 10 100))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.4A (SUBTYPEP* (QUOTE (INTEGER)) (QUOTE (INTEGER 10 100))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.4B (SUBTYPEP* (QUOTE (INTEGER *)) (QUOTE (INTEGER 10 100))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.4C (SUBTYPEP* (QUOTE (INTEGER * *)) (QUOTE (INTEGER 10 100))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.5 (SUBTYPEP* (QUOTE (INTEGER 10 *)) (QUOTE INTEGER)) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.5A (SUBTYPEP* (QUOTE (INTEGER 10 *)) (QUOTE (INTEGER))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.5B (SUBTYPEP* (QUOTE (INTEGER 10 *)) (QUOTE (INTEGER *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.5C (SUBTYPEP* (QUOTE (INTEGER 10 *)) (QUOTE (INTEGER * *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.6 (SUBTYPEP* (QUOTE INTEGER) (QUOTE (INTEGER 10 *))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.6A (SUBTYPEP* (QUOTE (INTEGER)) (QUOTE (INTEGER 10 *))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.6B (SUBTYPEP* (QUOTE (INTEGER *)) (QUOTE (INTEGER 10 *))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.6C (SUBTYPEP* (QUOTE (INTEGER * *)) (QUOTE (INTEGER 10 *))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.7 (SUBTYPEP* (QUOTE (INTEGER 10)) (QUOTE INTEGER)) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.7A (SUBTYPEP* (QUOTE (INTEGER 10)) (QUOTE (INTEGER))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.7B (SUBTYPEP* (QUOTE (INTEGER 10)) (QUOTE (INTEGER *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.7C (SUBTYPEP* (QUOTE (INTEGER 10)) (QUOTE (INTEGER * *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.8 (SUBTYPEP* (QUOTE INTEGER) (QUOTE (INTEGER 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.8A (SUBTYPEP* (QUOTE (INTEGER)) (QUOTE (INTEGER 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.8B (SUBTYPEP* (QUOTE (INTEGER *)) (QUOTE (INTEGER 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.8C (SUBTYPEP* (QUOTE (INTEGER * *)) (QUOTE (INTEGER 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.9 (SUBTYPEP* (QUOTE (INTEGER * 10)) (QUOTE INTEGER)) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.9A (SUBTYPEP* (QUOTE (INTEGER * 10)) (QUOTE (INTEGER))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.9B (SUBTYPEP* (QUOTE (INTEGER * 10)) (QUOTE (INTEGER *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.9C (SUBTYPEP* (QUOTE (INTEGER * 10)) (QUOTE (INTEGER * *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.10 (SUBTYPEP* (QUOTE INTEGER) (QUOTE (INTEGER * 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.10A (SUBTYPEP* (QUOTE (INTEGER)) (QUOTE (INTEGER * 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.10B (SUBTYPEP* (QUOTE (INTEGER *)) (QUOTE (INTEGER * 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.10C (SUBTYPEP* (QUOTE (INTEGER * *)) (QUOTE (INTEGER * 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.11 (SUBTYPEP* (QUOTE (INTEGER 10)) (QUOTE (INTEGER 5))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.12 (SUBTYPEP* (QUOTE (INTEGER 5)) (QUOTE (INTEGER 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.13 (SUBTYPEP* (QUOTE (INTEGER 10 *)) (QUOTE (INTEGER 5))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.14 (SUBTYPEP* (QUOTE (INTEGER 5)) (QUOTE (INTEGER 10 *))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.15 (SUBTYPEP* (QUOTE (INTEGER 10)) (QUOTE (INTEGER 5 *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.16 (SUBTYPEP* (QUOTE (INTEGER 5 *)) (QUOTE (INTEGER 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.17 (SUBTYPEP* (QUOTE (INTEGER 10 *)) (QUOTE (INTEGER 5 *))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.18 (SUBTYPEP* (QUOTE (INTEGER 5 *)) (QUOTE (INTEGER 10 *))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.19 (SUBTYPEP* (QUOTE (INTEGER * 5)) (QUOTE (INTEGER * 10))) T T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.20 (SUBTYPEP* (QUOTE (INTEGER * 10)) (QUOTE (INTEGER * 5))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.21 (SUBTYPEP* (QUOTE (INTEGER 10 *)) (QUOTE (INTEGER * 10))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.22 (SUBTYPEP* (QUOTE (INTEGER * 10)) (QUOTE (INTEGER 10 *))) NIL T)
;; Loading (DEFTEST SUBTYPEP.INTEGER.23 (CHECK-EQUIVALENCE (QUOTE (INTEGER (9))) (QUOTE (INTEGER 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.24 (CHECK-EQUIVALENCE (QUOTE (INTEGER * (11))) (QUOTE (INTEGER * 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.25 (CHECK-EQUIVALENCE (QUOTE (AND (OR (INTEGER 0 10) (INTEGER 20 30)) (OR (INTEGER 5 15) (INTEGER 25 35)))) (QUOTE (OR (INTEGER 5 10) (INTEGER 25 30)))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.26 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER 0 10) (INTEGER 5 15))) (QUOTE (INTEGER 5 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.27 (CHECK-EQUIVALENCE (QUOTE (OR (INTEGER 0 10) (INTEGER 5 15))) (QUOTE (INTEGER 0 15))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.28 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (NOT (EQL 10)))) (QUOTE (OR (INTEGER * 9) (INTEGER 11 *)))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.29 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (NOT (INTEGER 1 10)))) (QUOTE (OR (INTEGER * 0) (INTEGER 11 *)))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.30 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER -100 100) (NOT (INTEGER 1 10)))) (QUOTE (OR (INTEGER -100 0) (INTEGER 11 100)))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.1 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (REAL 4 10))) (QUOTE (INTEGER 4 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.2 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER 4 *) (REAL * 10))) (QUOTE (INTEGER 4 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.3 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER * 10) (REAL 4))) (QUOTE (INTEGER 4 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.4 (LOOP FOR INT-TYPE IN (QUOTE (INTEGER (INTEGER) (INTEGER *) (INTEGER * *))) APPEND (LOOP FOR REAL-TYPE IN (QUOTE (REAL (REAL) (REAL *) (REAL * *))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* INT-TYPE REAL-TYPE)) (QUOTE (T T))) COLLECT (LIST INT-TYPE REAL-TYPE))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.5 (LOOP FOR INT-TYPE IN (QUOTE ((INTEGER 10) (INTEGER 10 *))) APPEND (LOOP FOR REAL-TYPE IN (QUOTE (REAL (REAL) (REAL *) (REAL * *) (REAL 10.0) (REAL 10.0 *) (REAL 10) (REAL 10 *))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* INT-TYPE REAL-TYPE)) (QUOTE (T T))) COLLECT (LIST INT-TYPE REAL-TYPE))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.6 (LOOP FOR INT-TYPE IN (QUOTE ((INTEGER * 10) (INTEGER * 5))) APPEND (LOOP FOR REAL-TYPE IN (QUOTE (REAL (REAL) (REAL *) (REAL * *) (REAL * 10.0) (REAL * 10) (REAL * 1000000000000))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* INT-TYPE REAL-TYPE)) (QUOTE (T T))) COLLECT (LIST INT-TYPE REAL-TYPE))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.7 (LOOP FOR INT-TYPE IN (QUOTE ((INTEGER 0 10) (INTEGER 2 5))) APPEND (LOOP FOR REAL-TYPE IN (QUOTE (REAL (REAL) (REAL *) (REAL * *) (REAL * 10) (REAL * 1000000000000) (REAL -10) (REAL -10.0) (REAL -10 *) (REAL -10.0 *) (REAL 0) (REAL 0.0) (REAL 0 10) (REAL * 10) (REAL 0 *) (REAL 0 10))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* INT-TYPE REAL-TYPE)) (QUOTE (T T))) COLLECT (LIST INT-TYPE REAL-TYPE))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.8 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER 4) (REAL * 10))) (QUOTE (INTEGER 4 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.9 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER * 10) (REAL 4))) (QUOTE (INTEGER 4 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.10 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER 4) (REAL * (10)))) (QUOTE (INTEGER 4 9))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.REAL.11 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER * 10) (REAL (4)))) (QUOTE (INTEGER 5 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.1 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (RATIONAL 4 10))) (QUOTE (INTEGER 4 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.2 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER 4 *) (RATIONAL * 10))) (QUOTE (INTEGER 4 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.3 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER * 10) (RATIONAL 4))) (QUOTE (INTEGER 4 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.4 (LOOP FOR INT-TYPE IN (QUOTE (INTEGER (INTEGER) (INTEGER *) (INTEGER * *))) APPEND (LOOP FOR RATIONAL-TYPE IN (QUOTE (RATIONAL (RATIONAL) (RATIONAL *) (RATIONAL * *))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* INT-TYPE RATIONAL-TYPE)) (QUOTE (T T))) COLLECT (LIST INT-TYPE RATIONAL-TYPE))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.5 (LOOP FOR INT-TYPE IN (QUOTE ((INTEGER 10) (INTEGER 10 *))) APPEND (LOOP FOR RATIONAL-TYPE IN (QUOTE (RATIONAL (RATIONAL) (RATIONAL *) (RATIONAL * *) (RATIONAL 19/2) (RATIONAL 19/2 *) (RATIONAL 10) (RATIONAL 10 *))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* INT-TYPE RATIONAL-TYPE)) (QUOTE (T T))) COLLECT (LIST INT-TYPE RATIONAL-TYPE))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.6 (LOOP FOR INT-TYPE IN (QUOTE ((INTEGER * 10) (INTEGER * 5))) APPEND (LOOP FOR RATIONAL-TYPE IN (QUOTE (RATIONAL (RATIONAL) (RATIONAL *) (RATIONAL * *) (RATIONAL * 21/2) (RATIONAL * 10) (RATIONAL * 1000000000000))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* INT-TYPE RATIONAL-TYPE)) (QUOTE (T T))) COLLECT (LIST INT-TYPE RATIONAL-TYPE))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.7 (LOOP FOR INT-TYPE IN (QUOTE ((INTEGER 0 10) (INTEGER 2 5))) APPEND (LOOP FOR RATIONAL-TYPE IN (QUOTE (RATIONAL (RATIONAL) (RATIONAL *) (RATIONAL * *) (RATIONAL * 10) (RATIONAL * 1000000000000) (RATIONAL -1) (RATIONAL 1/2) (RATIONAL -1 *) (RATIONAL 1/2 *) (RATIONAL 0) (RATIONAL 0 10) (RATIONAL * 10) (RATIONAL 0 *) (RATIONAL 0 10))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* INT-TYPE RATIONAL-TYPE)) (QUOTE (T T))) COLLECT (LIST INT-TYPE RATIONAL-TYPE))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.8 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (RATIONAL (4) 10))) (QUOTE (INTEGER 5 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.9 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER 4 *) (RATIONAL * (10)))) (QUOTE (INTEGER 4 9))) NIL)
;; Loading (DEFTEST SUBTYPEP.INTEGER.RATIONAL.10 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER * 10) (RATIONAL (4)))) (QUOTE (INTEGER 5 10))) NIL)
;; Loading (LOAD "subtypep-float.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-float.lsp 81DE9C07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP.FLOAT.1 (LOOP FOR TP IN +FLOAT-TYPES+ APPEND (CHECK-SUBTYPEP TP (QUOTE FLOAT) T T)) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.2 (IF (SUBTYPEP (QUOTE SHORT-FLOAT) (QUOTE LONG-FLOAT)) (LOOP FOR TP IN +FLOAT-TYPES+ APPEND (LOOP FOR TP2 IN +FLOAT-TYPES+ APPEND (CHECK-SUBTYPEP TP TP2 T T))) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.3 (IF (AND (NOT (SUBTYPEP (QUOTE SHORT-FLOAT) (QUOTE SINGLE-FLOAT))) (SUBTYPEP (QUOTE SINGLE-FLOAT) (QUOTE LONG-FLOAT))) (APPEND (CHECK-EQUIVALENCE (QUOTE SINGLE-FLOAT) (QUOTE DOUBLE-FLOAT)) (CHECK-EQUIVALENCE (QUOTE SINGLE-FLOAT) (QUOTE LONG-FLOAT)) (CHECK-EQUIVALENCE (QUOTE DOUBLE-FLOAT) (QUOTE LONG-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SHORT-FLOAT) (QUOTE SINGLE-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SHORT-FLOAT) (QUOTE DOUBLE-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SHORT-FLOAT) (QUOTE LONG-FLOAT))) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.4 (IF (AND (SUBTYPEP (QUOTE SINGLE-FLOAT) (QUOTE SHORT-FLOAT)) (SUBTYPEP (QUOTE DOUBLE-FLOAT) (QUOTE LONG-FLOAT)) (NOT (SUBTYPEP (QUOTE SHORT-FLOAT) (QUOTE DOUBLE-FLOAT)))) (APPEND (CHECK-EQUIVALENCE (QUOTE SHORT-FLOAT) (QUOTE SINGLE-FLOAT)) (CHECK-EQUIVALENCE (QUOTE DOUBLE-FLOAT) (QUOTE LONG-FLOAT)) (LOOP FOR TP IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT)) APPEND (LOOP FOR TP2 IN (QUOTE (DOUBLE-FLOAT LONG-FLOAT)) APPEND (CLASSES-ARE-DISJOINT TP TP2)))) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.5 (IF (AND (NOT (SUBTYPEP (QUOTE SINGLE-FLOAT) (QUOTE SHORT-FLOAT))) (NOT (SUBTYPEP (QUOTE SINGLE-FLOAT) (QUOTE DOUBLE-FLOAT))) (SUBTYPEP (QUOTE DOUBLE-FLOAT) (QUOTE LONG-FLOAT))) (APPEND (CLASSES-ARE-DISJOINT (QUOTE SHORT-FLOAT) (QUOTE SINGLE-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SHORT-FLOAT) (QUOTE DOUBLE-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SHORT-FLOAT) (QUOTE LONG-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SINGLE-FLOAT) (QUOTE DOUBLE-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SINGLE-FLOAT) (QUOTE LONG-FLOAT)) (CHECK-EQUIVALENCE (QUOTE DOUBLE-FLOAT) (QUOTE LONG-FLOAT))) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.6 (IF (AND (SUBTYPEP (QUOTE SINGLE-FLOAT) (QUOTE SHORT-FLOAT)) (NOT (SUBTYPEP (QUOTE SINGLE-FLOAT) (QUOTE DOUBLE-FLOAT))) (NOT (SUBTYPEP (QUOTE DOUBLE-FLOAT) (QUOTE LONG-FLOAT)))) (APPEND (CHECK-EQUIVALENCE (QUOTE SHORT-FLOAT) (QUOTE SINGLE-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SINGLE-FLOAT) (QUOTE DOUBLE-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE SINGLE-FLOAT) (QUOTE LONG-FLOAT)) (CLASSES-ARE-DISJOINT (QUOTE DOUBLE-FLOAT) (QUOTE LONG-FLOAT))) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.7 (IF (AND (NOT (SUBTYPEP (QUOTE SINGLE-FLOAT) (QUOTE SHORT-FLOAT))) (NOT (SUBTYPEP (QUOTE SINGLE-FLOAT) (QUOTE DOUBLE-FLOAT))) (NOT (SUBTYPEP (QUOTE DOUBLE-FLOAT) (QUOTE LONG-FLOAT)))) (LOOP FOR TP IN +FLOAT-TYPES+ APPEND (LOOP FOR TP2 IN +FLOAT-TYPES+ UNLESS (EQ TP TP2) APPEND (CLASSES-ARE-DISJOINT TP TP2))) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.8 (SUBTYPEP* (QUOTE (SHORT-FLOAT 0.0 10.0)) (QUOTE (SHORT-FLOAT 0.0 11.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.9 (SUBTYPEP* (QUOTE (SINGLE-FLOAT 0.0 10.0)) (QUOTE (SINGLE-FLOAT 0.0 11.0))) T T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SUBTYPEP.FLOAT.10 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT 0.0 10.0)) (QUOTE (DOUBLE-FLOAT 0.0 11.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.11 (SUBTYPEP* (QUOTE (LONG-FLOAT 0.0 10.0)) (QUOTE (LONG-FLOAT 0.0 11.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.12 (SUBTYPEP* (QUOTE (SHORT-FLOAT 0.0 11.0)) (QUOTE (SHORT-FLOAT 0.0 10.0))) NIL T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.13 (SUBTYPEP* (QUOTE (SINGLE-FLOAT 0.0 11.0)) (QUOTE (SINGLE-FLOAT 0.0 10.0))) NIL T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.14 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT 0.0 11.0)) (QUOTE (DOUBLE-FLOAT 0.0 10.0))) NIL T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.15 (SUBTYPEP* (QUOTE (LONG-FLOAT 0.0 11.0)) (QUOTE (LONG-FLOAT 0.0 10.0))) NIL T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.16 (SUBTYPEP* (QUOTE (SHORT-FLOAT 0.0 (10.0))) (QUOTE (SHORT-FLOAT 0.0 10.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.17 (SUBTYPEP* (QUOTE (SINGLE-FLOAT 0.0 (10.0))) (QUOTE (SINGLE-FLOAT 0.0 10.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.18 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT 0.0 (10.0))) (QUOTE (DOUBLE-FLOAT 0.0 10.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.19 (SUBTYPEP* (QUOTE (LONG-FLOAT 0.0 (10.0))) (QUOTE (LONG-FLOAT 0.0 10.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.20 (SUBTYPEP* (QUOTE (SHORT-FLOAT 0.0 10.0)) (QUOTE (SHORT-FLOAT 0.0 (10.0)))) NIL T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.21 (SUBTYPEP* (QUOTE (SINGLE-FLOAT 0.0 10.0)) (QUOTE (SINGLE-FLOAT 0.0 (10.0)))) NIL T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.22 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT 0.0 10.0)) (QUOTE (DOUBLE-FLOAT 0.0 (10.0)))) NIL T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.23 (SUBTYPEP* (QUOTE (LONG-FLOAT 0.0 10.0)) (QUOTE (LONG-FLOAT 0.0 (10.0)))) NIL T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.24 (CHECK-EQUIVALENCE (QUOTE (AND (SHORT-FLOAT 0.0 2.0) (SHORT-FLOAT 1.0 3.0))) (QUOTE (SHORT-FLOAT 1.0 2.0))) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.25 (CHECK-EQUIVALENCE (QUOTE (AND (SINGLE-FLOAT 0.0 2.0) (SINGLE-FLOAT 1.0 3.0))) (QUOTE (SINGLE-FLOAT 1.0 2.0))) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.26 (CHECK-EQUIVALENCE (QUOTE (AND (DOUBLE-FLOAT 0.0 2.0) (DOUBLE-FLOAT 1.0 3.0))) (QUOTE (DOUBLE-FLOAT 1.0 2.0))) NIL)
;; Loading (DEFTEST SUBTYPEP.FLOAT.27 (CHECK-EQUIVALENCE (QUOTE (AND (LONG-FLOAT 0.0 2.0) (LONG-FLOAT 1.0 3.0))) (QUOTE (LONG-FLOAT 1.0 2.0))) NIL)
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.1 (CHECK-EQUIVALENCE (QUOTE (SHORT-FLOAT 0.0 *)) (QUOTE (OR (SHORT-FLOAT (0.0) *) (MEMBER 0.0 0.0)))) NIL)
;; Loading (UNLESS (EQL 0.0 0.0) (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.2A (VALUES (SUBTYPEP (QUOTE (SHORT-FLOAT 0.0)) (QUOTE (OR (SHORT-FLOAT (0.0)) (MEMBER 0.0))))) NIL) (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.2B (VALUES (SUBTYPEP (QUOTE (SHORT-FLOAT 0.0)) (QUOTE (OR (SHORT-FLOAT (0.0)) (MEMBER 0.0))))) NIL))
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.3 (SUBTYPEP* (QUOTE (SHORT-FLOAT 0.0 *)) (QUOTE (SHORT-FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.4 (SUBTYPEP* (QUOTE (SHORT-FLOAT * 0.0)) (QUOTE (SHORT-FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.5 (SUBTYPEP* (QUOTE (SHORT-FLOAT (0.0) *)) (QUOTE (SHORT-FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.6 (SUBTYPEP* (QUOTE (SHORT-FLOAT * (0.0))) (QUOTE (SHORT-FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.7 (SUBTYPEP* (QUOTE (SHORT-FLOAT 0.0 *)) (QUOTE (SHORT-FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.8 (SUBTYPEP* (QUOTE (SHORT-FLOAT * 0.0)) (QUOTE (SHORT-FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.9 (SUBTYPEP* (QUOTE (SHORT-FLOAT (0.0) *)) (QUOTE (SHORT-FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.SHORT-FLOAT.ZERO.10 (SUBTYPEP* (QUOTE (SHORT-FLOAT * (0.0))) (QUOTE (SHORT-FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.ZERO.3 (SUBTYPEP* (QUOTE (FLOAT 0.0 *)) (QUOTE (FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.ZERO.4 (SUBTYPEP* (QUOTE (FLOAT * 0.0)) (QUOTE (FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.ZERO.5 (SUBTYPEP* (QUOTE (FLOAT (0.0) *)) (QUOTE (FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.ZERO.6 (SUBTYPEP* (QUOTE (FLOAT * (0.0))) (QUOTE (FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.ZERO.7 (SUBTYPEP* (QUOTE (FLOAT 0.0 *)) (QUOTE (FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.ZERO.8 (SUBTYPEP* (QUOTE (FLOAT * 0.0)) (QUOTE (FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.ZERO.9 (SUBTYPEP* (QUOTE (FLOAT (0.0) *)) (QUOTE (FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.FLOAT.ZERO.10 (SUBTYPEP* (QUOTE (FLOAT * (0.0))) (QUOTE (FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.1 (CHECK-EQUIVALENCE (QUOTE (SINGLE-FLOAT 0.0 *)) (QUOTE (OR (SINGLE-FLOAT (0.0) *) (MEMBER 0.0 0.0)))) NIL)
;; Loading (UNLESS (EQL 0.0 0.0) (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.2A (VALUES (SUBTYPEP (QUOTE (SINGLE-FLOAT 0.0)) (QUOTE (OR (SINGLE-FLOAT (0.0)) (MEMBER 0.0))))) NIL) (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.2B (VALUES (SUBTYPEP (QUOTE (SINGLE-FLOAT 0.0)) (QUOTE (OR (SINGLE-FLOAT (0.0)) (MEMBER 0.0))))) NIL))
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.3 (SUBTYPEP* (QUOTE (SINGLE-FLOAT 0.0 *)) (QUOTE (SINGLE-FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.4 (SUBTYPEP* (QUOTE (SINGLE-FLOAT * 0.0)) (QUOTE (SINGLE-FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.5 (SUBTYPEP* (QUOTE (SINGLE-FLOAT (0.0) *)) (QUOTE (SINGLE-FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.6 (SUBTYPEP* (QUOTE (SINGLE-FLOAT * (0.0))) (QUOTE (SINGLE-FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.7 (SUBTYPEP* (QUOTE (SINGLE-FLOAT 0.0 *)) (QUOTE (SINGLE-FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.8 (SUBTYPEP* (QUOTE (SINGLE-FLOAT * 0.0)) (QUOTE (SINGLE-FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.9 (SUBTYPEP* (QUOTE (SINGLE-FLOAT (0.0) *)) (QUOTE (SINGLE-FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.SINGLE-FLOAT.ZERO.10 (SUBTYPEP* (QUOTE (SINGLE-FLOAT * (0.0))) (QUOTE (SINGLE-FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.1 (CHECK-EQUIVALENCE (QUOTE (LONG-FLOAT 0.0 *)) (QUOTE (OR (LONG-FLOAT (0.0) *) (MEMBER 0.0 0.0)))) NIL)
;; Loading (UNLESS (EQL 0.0 0.0) (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.2A (VALUES (SUBTYPEP (QUOTE (LONG-FLOAT 0.0)) (QUOTE (OR (LONG-FLOAT (0.0)) (MEMBER 0.0))))) NIL) (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.2B (VALUES (SUBTYPEP (QUOTE (LONG-FLOAT 0.0)) (QUOTE (OR (LONG-FLOAT (0.0)) (MEMBER 0.0))))) NIL))
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.3 (SUBTYPEP* (QUOTE (LONG-FLOAT 0.0 *)) (QUOTE (LONG-FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.4 (SUBTYPEP* (QUOTE (LONG-FLOAT * 0.0)) (QUOTE (LONG-FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.5 (SUBTYPEP* (QUOTE (LONG-FLOAT (0.0) *)) (QUOTE (LONG-FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.6 (SUBTYPEP* (QUOTE (LONG-FLOAT * (0.0))) (QUOTE (LONG-FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.7 (SUBTYPEP* (QUOTE (LONG-FLOAT 0.0 *)) (QUOTE (LONG-FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.8 (SUBTYPEP* (QUOTE (LONG-FLOAT * 0.0)) (QUOTE (LONG-FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.9 (SUBTYPEP* (QUOTE (LONG-FLOAT (0.0) *)) (QUOTE (LONG-FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.LONG-FLOAT.ZERO.10 (SUBTYPEP* (QUOTE (LONG-FLOAT * (0.0))) (QUOTE (LONG-FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.1 (CHECK-EQUIVALENCE (QUOTE (DOUBLE-FLOAT 0.0 *)) (QUOTE (OR (DOUBLE-FLOAT (0.0) *) (MEMBER 0.0 0.0)))) NIL)
;; Loading (UNLESS (EQL 0.0 0.0) (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.2A (VALUES (SUBTYPEP (QUOTE (DOUBLE-FLOAT 0.0)) (QUOTE (OR (DOUBLE-FLOAT (0.0)) (MEMBER 0.0))))) NIL) (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.2B (VALUES (SUBTYPEP (QUOTE (DOUBLE-FLOAT 0.0)) (QUOTE (OR (DOUBLE-FLOAT (0.0)) (MEMBER 0.0))))) NIL))
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.3 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT 0.0 *)) (QUOTE (DOUBLE-FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.4 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT * 0.0)) (QUOTE (DOUBLE-FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.5 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT (0.0) *)) (QUOTE (DOUBLE-FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.6 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT * (0.0))) (QUOTE (DOUBLE-FLOAT * (0.0)))) T T)
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.7 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT 0.0 *)) (QUOTE (DOUBLE-FLOAT 0.0 *))) T T)
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.8 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT * 0.0)) (QUOTE (DOUBLE-FLOAT * 0.0))) T T)
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.9 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT (0.0) *)) (QUOTE (DOUBLE-FLOAT (0.0) *))) T T)
;; Loading (DEFTEST SUBTYPEP.DOUBLE-FLOAT.ZERO.10 (SUBTYPEP* (QUOTE (DOUBLE-FLOAT * (0.0))) (QUOTE (DOUBLE-FLOAT * (0.0)))) T T)
;; Loading (LOAD "subtypep-rational.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-rational.lsp C1A836B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP.RATIONAL.1 (LOOP FOR TP1 IN (QUOTE ((RATIONAL 10) (RATIONAL 10 *) (RATIONAL 10 20) (RATIONAL (10) 20) (RATIONAL 10 (20)) (RATIONAL (10) (20)) (RATIONAL 10 1000000000000000) (RATIONAL (10)) (RATIONAL (10) *))) APPEND (LOOP FOR TP2 IN (QUOTE (RATIONAL (RATIONAL) (RATIONAL *) (RATIONAL * *) (RATIONAL 10) (RATIONAL 10 *) (RATIONAL 0) (RATIONAL 0 *) (RATIONAL 19/2) (RATIONAL 19/2 *) (RATIONAL -1000000000000000) REAL (REAL) (REAL *) (REAL * *) (REAL 10) (REAL 10 *) (REAL 0) (REAL 0 *) (REAL 19/2) (REAL 19/2 *) (REAL -1000000000000000))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) (QUOTE (T T))) COLLECT (LIST TP1 TP2))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.2 (LOOP FOR TP1 IN (QUOTE ((RATIONAL * 10) (RATIONAL 0 10) (RATIONAL 0 (10)) (RATIONAL (0) 10) (RATIONAL (0) (10)) (RATIONAL -1000000000000000 10) (RATIONAL * (10)))) APPEND (LOOP FOR TP2 IN (QUOTE (RATIONAL (RATIONAL) (RATIONAL *) (RATIONAL * *) (RATIONAL * 10) (RATIONAL * 21/2) (RATIONAL * 1000000000000000) REAL (REAL) (REAL *) (REAL * *) (REAL * 10) (REAL * 21/2) (REAL * 1000000000000000))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) (QUOTE (T T))) COLLECT (LIST TP1 TP2))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.3 (LOOP FOR TP1 IN (QUOTE ((RATIONAL 10) (RATIONAL 10 *) (RATIONAL 10 20) (RATIONAL 10 (21)) (RATIONAL 10 1000000000000000))) APPEND (LOOP FOR TP2 IN (QUOTE ((RATIONAL 11) (RATIONAL 11 *) (RATIONAL (10)) (RATIONAL (10) *) (INTEGER 10) (INTEGER 10 *) (REAL 11) (REAL (10)) (REAL 11 *) (REAL (10) *) (RATIONAL * (20)) (RATIONAL * 19) (REAL * (20)) (REAL * 19))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) (QUOTE (NIL T))) COLLECT (LIST TP1 TP2))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.4 (LOOP FOR TP1 IN (QUOTE ((RATIONAL * 10) (RATIONAL 0 10) (RATIONAL (0) 10) (RATIONAL -1000000000000000 10))) APPEND (LOOP FOR TP2 IN (QUOTE ((RATIONAL * 9) (RATIONAL * (10)) (INTEGER * 10) (REAL * 9) (REAL * (10)))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) (QUOTE (NIL T))) COLLECT (LIST TP1 TP2))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.5 (CHECK-EQUIVALENCE (QUOTE (OR (RATIONAL 0 0) (RATIONAL (0)))) (QUOTE (RATIONAL 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.6 (CHECK-EQUIVALENCE (QUOTE (AND (RATIONAL 0 10) (RATIONAL 5 15))) (QUOTE (RATIONAL 5 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.7 (CHECK-EQUIVALENCE (QUOTE (AND (RATIONAL (0) 10) (RATIONAL 5 15))) (QUOTE (RATIONAL 5 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.8 (CHECK-EQUIVALENCE (QUOTE (AND (RATIONAL 0 (10)) (RATIONAL 5 15))) (QUOTE (RATIONAL 5 (10)))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.9 (CHECK-EQUIVALENCE (QUOTE (AND (RATIONAL (0) (10)) (RATIONAL 5 15))) (QUOTE (RATIONAL 5 (10)))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.10 (CHECK-EQUIVALENCE (QUOTE (AND (RATIONAL 0 10) (RATIONAL (5) 15))) (QUOTE (RATIONAL (5) 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.11 (CHECK-EQUIVALENCE (QUOTE (AND (RATIONAL 0 (10)) (RATIONAL (5) 15))) (QUOTE (RATIONAL (5) (10)))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.12 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (RATIONAL 0 10) (NOT (RATIONAL (0) (10))))) (QUOTE (MEMBER 0 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.13 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (RATIONAL 1/2 1/2))) (QUOTE (INTEGER 0 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.14 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (RATIONAL 1/2 1/2))) (QUOTE (EQL 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.15 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (RATIONAL (1/2) 1/2))) (QUOTE (INTEGER 0 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.16 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (RATIONAL (1/2) (1/2)))) (QUOTE (INTEGER 0 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.17 (CHECK-ALL-SUBTYPEP (QUOTE (NOT (RATIONAL 1/2 1/2))) (QUOTE (NOT (INTEGER 0 0)))) NIL)
;; Loading (DEFTEST SUBTYPEP.RATIONAL.18 (CHECK-ALL-SUBTYPEP (QUOTE (NOT (RATIONAL 1/2 1/2))) (QUOTE (NOT (EQL 0)))) NIL)
;; Loading (LOAD "subtypep-real.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-real.lsp C1BB3697>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP.REAL.1 (LOOP FOR TP1 IN (QUOTE ((REAL 10) (REAL 10 *) (REAL 10 20) (REAL (10) 20) (REAL 10 (20)) (REAL (10) (20)) (REAL 10 1000000000000000) (REAL (10)) (REAL (10) *))) APPEND (LOOP FOR TP2 IN (QUOTE (REAL (REAL) (REAL *) (REAL * *) (REAL 10) (REAL 10 *) (REAL 0) (REAL 0 *) (REAL 19/2) (REAL 19/2 *) (REAL 9.5) (REAL 9.5 *) (REAL -1000000000000000))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) (QUOTE (T T))) COLLECT (LIST TP1 TP2))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.2 (LOOP FOR TP1 IN (QUOTE ((REAL * 10) (REAL 0 10) (REAL 0 (10)) (REAL (0) 10) (REAL (0) (10)) (REAL -1000000000000000 10) (REAL * (10)))) APPEND (LOOP FOR TP2 IN (QUOTE (REAL (REAL) (REAL *) (REAL * *) (REAL * 10) (REAL * 21/2) (REAL * 10.5) (REAL * 1000000000000000))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) (QUOTE (T T))) COLLECT (LIST TP1 TP2))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.3 (LOOP FOR TP1 IN (QUOTE ((REAL 10) (REAL 10 *) (REAL 10 20) (REAL 10 (21)) (REAL 10 1000000000000000))) APPEND (LOOP FOR TP2 IN (QUOTE ((REAL 11) (REAL 11 *) (REAL (10)) (REAL (10) *) (INTEGER 10) (INTEGER 10 *) (REAL 11) (REAL (10)) (REAL 11 *) (REAL (10) *) (REAL * (20)) (REAL * 19) (REAL * (20)) (REAL * 19))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) (QUOTE (NIL T))) COLLECT (LIST TP1 TP2))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.4 (LOOP FOR TP1 IN (QUOTE ((REAL * 10) (REAL 0 10) (REAL (0) 10) (REAL -1000000000000000 10))) APPEND (LOOP FOR TP2 IN (QUOTE ((REAL * 9) (REAL * (10)) (INTEGER * 10) (REAL * 9) (REAL * (10)))) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) (QUOTE (NIL T))) COLLECT (LIST TP1 TP2))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.5 (CHECK-EQUIVALENCE (QUOTE (OR (REAL 0 0) (REAL (0)))) (QUOTE (REAL 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.6 (CHECK-EQUIVALENCE (QUOTE (AND (REAL 0 10) (REAL 5 15))) (QUOTE (REAL 5 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.7 (CHECK-EQUIVALENCE (QUOTE (AND (REAL (0) 10) (REAL 5 15))) (QUOTE (REAL 5 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.8 (CHECK-EQUIVALENCE (QUOTE (AND (REAL 0 (10)) (REAL 5 15))) (QUOTE (REAL 5 (10)))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.9 (CHECK-EQUIVALENCE (QUOTE (AND (REAL (0) (10)) (REAL 5 15))) (QUOTE (REAL 5 (10)))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.10 (CHECK-EQUIVALENCE (QUOTE (AND (REAL 0 10) (REAL (5) 15))) (QUOTE (REAL (5) 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.11 (CHECK-EQUIVALENCE (QUOTE (AND (REAL 0 (10)) (REAL (5) 15))) (QUOTE (REAL (5) (10)))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.12 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (REAL 0 10) (NOT (REAL (0) (10))))) (QUOTE (MEMBER 0 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.13 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (REAL 1/2 1/2))) (QUOTE (INTEGER 0 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.14 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (REAL 1/2 1/2))) (QUOTE (EQL 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.15 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (REAL (1/2) 1/2))) (QUOTE (INTEGER 0 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.16 (CHECK-EQUIVALENCE (QUOTE (AND INTEGER (REAL (1/2) (1/2)))) (QUOTE (INTEGER 0 0))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.17 (CHECK-EQUIVALENCE (QUOTE (REAL 0 10)) (QUOTE (REAL 0.0 10.0))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.18 (CHECK-EQUIVALENCE (QUOTE (AND RATIONAL (REAL 0 10))) (QUOTE (RATIONAL 0 10))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.19 (CHECK-EQUIVALENCE (QUOTE (AND RATIONAL (REAL 0 (10)))) (QUOTE (RATIONAL 0 (10)))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.20 (CHECK-EQUIVALENCE (QUOTE (AND RATIONAL (REAL (0) (10)))) (QUOTE (RATIONAL (0) (10)))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.21 (CHECK-EQUIVALENCE (QUOTE (AND RATIONAL (REAL 1/2 7/3))) (QUOTE (RATIONAL 1/2 7/3))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.22 (CHECK-EQUIVALENCE (QUOTE (AND RATIONAL (REAL (1/11) (8/37)))) (QUOTE (RATIONAL (1/11) (8/37)))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.23 (CHECK-ALL-SUBTYPEP (QUOTE (NOT (REAL 1/2 1/2))) (QUOTE (NOT (INTEGER 0 0)))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.24 (CHECK-ALL-SUBTYPEP (QUOTE (NOT (REAL 1/2 1/2))) (QUOTE (NOT (EQL 0)))) NIL)
;; Loading (DEFTEST SUBTYPEP.REAL.25 (CHECK-ALL-SUBTYPEP T (QUOTE (OR (NOT (REAL 0 10)) (NOT (REAL -100 -50))))) NIL)
;; Loading (LOAD "subtypep-cons.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-cons.lsp C1CF0817>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFVAR *CONS-TYPES* (QUOTE (CONS (CONS) (CONS *) (CONS * *) (CONS T) (CONS T T) (CONS T *) (CONS * T))))
;; Loading (DEFTEST SUBTYPEP.CONS.1 (LOOP FOR T1 IN *CONS-TYPES* APPEND (LOOP FOR T2 IN *CONS-TYPES* UNLESS (EQUAL (MAPCAR (FUNCTION NOTNOT) (MULTIPLE-VALUE-LIST (SUBTYPEP T1 T2))) (QUOTE (T T))) COLLECT (LIST T1 T2))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.2 (LOOP FOR T1 IN (QUOTE ((CONS NIL) (CONS NIL *) (CONS NIL T) (CONS * NIL) (CONS T NIL) (CONS NIL NIL))) UNLESS (SUBTYPEP T1 NIL) COLLECT T1) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.3 (CHECK-EQUIVALENCE (QUOTE (AND (CONS SYMBOL *) (CONS * SYMBOL))) (QUOTE (CONS SYMBOL SYMBOL))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.4 (CHECK-EQUIVALENCE (QUOTE (AND (CONS (INTEGER 0 10) *) (CONS (INTEGER 5 15) (INTEGER 10 20)) (CONS * (INTEGER 15 25)))) (QUOTE (CONS (INTEGER 5 10) (INTEGER 15 20)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.5 (CHECK-EQUIVALENCE (QUOTE (AND CONS (NOT (CONS SYMBOL SYMBOL)))) (QUOTE (OR (CONS (NOT SYMBOL) *) (CONS * (NOT SYMBOL))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.6 (CHECK-EQUIVALENCE (QUOTE (OR (CONS INTEGER SYMBOL) (CONS INTEGER INTEGER) (CONS SYMBOL INTEGER) (CONS SYMBOL SYMBOL))) (QUOTE (CONS (OR INTEGER SYMBOL) (OR INTEGER SYMBOL)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.7 (CHECK-EQUIVALENCE (QUOTE (OR (CONS (INTEGER 0 8) (INTEGER 5 15)) (CONS (INTEGER 0 7) (INTEGER 0 6)) (CONS (INTEGER 6 15) (INTEGER 0 9)) (CONS (INTEGER 3 15) (INTEGER 4 15)))) (QUOTE (CONS (INTEGER 0 15) (INTEGER 0 15)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.8 (CHECK-EQUIVALENCE (QUOTE (OR (CONS INTEGER (CONS SYMBOL INTEGER)) (CONS SYMBOL (CONS INTEGER SYMBOL)) (CONS SYMBOL (CONS SYMBOL INTEGER)) (CONS SYMBOL (CONS INTEGER INTEGER)) (CONS INTEGER (CONS INTEGER SYMBOL)) (CONS SYMBOL (CONS SYMBOL SYMBOL)) (CONS INTEGER (CONS INTEGER INTEGER)) (CONS INTEGER (CONS SYMBOL SYMBOL)))) (QUOTE (CONS (OR SYMBOL INTEGER) (CONS (OR SYMBOL INTEGER) (OR SYMBOL INTEGER))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.9 (CHECK-EQUIVALENCE (QUOTE (OR (CONS (INTEGER 0 (3)) (INTEGER 0 (6))) (CONS (INTEGER 3 (9)) (INTEGER 0 (3))) (CONS (INTEGER 0 (6)) (INTEGER 6 (9))) (CONS (INTEGER 6 (9)) (INTEGER 3 (9))) (CONS (INTEGER 3 (6)) (INTEGER 3 (6))))) (QUOTE (CONS (INTEGER 0 (9)) (INTEGER 0 (9))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.10 (CHECK-EQUIVALENCE (QUOTE (OR (CONS (RATIONAL 0 (3)) (RATIONAL 0 (6))) (CONS (RATIONAL 3 (9)) (RATIONAL 0 (3))) (CONS (RATIONAL 0 (6)) (RATIONAL 6 (9))) (CONS (RATIONAL 6 (9)) (RATIONAL 3 (9))) (CONS (RATIONAL 3 (6)) (RATIONAL 3 (6))))) (QUOTE (CONS (RATIONAL 0 (9)) (RATIONAL 0 (9))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.11 (CHECK-EQUIVALENCE (QUOTE (OR (CONS (REAL 0 (3)) (REAL 0 (6))) (CONS (REAL 3 (9)) (REAL 0 (3))) (CONS (REAL 0 (6)) (REAL 6 (9))) (CONS (REAL 6 (9)) (REAL 3 (9))) (CONS (REAL 3 (6)) (REAL 3 (6))))) (QUOTE (CONS (REAL 0 (9)) (REAL 0 (9))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.12 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (CONS (OR INTEGER SYMBOL) (OR INTEGER SYMBOL))) (QUOTE (OR (CONS INTEGER SYMBOL) (CONS SYMBOL INTEGER)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.13 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (NOT LIST)) (QUOTE CONS)) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.14 (CHECK-ALL-SUBTYPEP (QUOTE (AND (OR (CONS (NOT SYMBOL)) (CONS * INTEGER)) (CONS SYMBOL))) (QUOTE (CONS * INTEGER))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.15 (CHECK-ALL-SUBTYPEP (QUOTE (AND (OR (CONS (NOT SYMBOL)) (CONS * INTEGER)) (CONS * (NOT INTEGER)))) (QUOTE (CONS (NOT SYMBOL)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.16 (CHECK-ALL-SUBTYPEP (QUOTE (AND (OR (CONS SYMBOL (CONS * *)) (CONS * (CONS INTEGER *))) (OR (CONS * (CONS (NOT INTEGER) *)) (CONS * (CONS * FLOAT))))) (QUOTE (OR (CONS SYMBOL (CONS * *)) (CONS * (CONS * FLOAT))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.17 (CHECK-ALL-SUBTYPEP (QUOTE (AND (OR (CONS SYMBOL (CONS * *)) (CONS * (CONS INTEGER *))) (OR (CONS * (CONS (NOT INTEGER))) (CONS * (CONS * FLOAT))) (OR (CONS * (CONS * (NOT FLOAT))) (CONS SYMBOL (CONS * *))))) (QUOTE (CONS SYMBOL))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.18 (CHECK-ALL-SUBTYPEP (QUOTE (CONS SYMBOL)) (QUOTE (OR (CONS SYMBOL (NOT INTEGER)) (CONS * INTEGER)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.19 (CHECK-EQUIVALENCE (QUOTE (OR (CONS (EQL A) (EQL X)) (CONS (EQL B) (EQL Y)) (CONS (EQL C) (EQL Z)) (CONS (EQL A) (EQL Y)) (CONS (EQL B) (EQL Z)) (CONS (EQL C) (EQL X)) (CONS (EQL A) (EQL Z)) (CONS (EQL B) (EQL X)) (CONS (EQL C) (EQL Y)))) (QUOTE (CONS (MEMBER A B C) (MEMBER X Y Z)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.20 (CHECK-EQUIVALENCE (QUOTE (OR (CONS (EQL A) (EQL X)) (CONS (EQL B) (EQL Y)) (CONS (EQL A) (EQL Y)) (CONS (EQL B) (EQL Z)) (CONS (EQL C) (EQL X)) (CONS (EQL A) (EQL Z)) (CONS (EQL B) (EQL X)) (CONS (EQL C) (EQL Y)))) (QUOTE (AND (CONS (MEMBER A B C) (MEMBER X Y Z)) (NOT (CONS (EQL C) (EQL Z)))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.21 (CHECK-ALL-SUBTYPEP (QUOTE (CONS INTEGER SINGLE-FLOAT)) (QUOTE (OR (CONS FIXNUM SINGLE-FLOAT) (CONS BIGNUM SINGLE-FLOAT)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.22 (CHECK-ALL-SUBTYPEP (QUOTE (CONS SINGLE-FLOAT INTEGER)) (QUOTE (OR (CONS SINGLE-FLOAT FIXNUM) (CONS SINGLE-FLOAT BIGNUM)))) NIL)
;; Loading (DEFTEST SUBTYPE.CONS.23 (LET ((T1 (QUOTE (CONS T (CONS (NOT LONG-FLOAT) SYMBOL)))) (T2 (QUOTE (NOT (CONS SYMBOL (CONS INTEGER INTEGER)))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT T1 T2)) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SUBTYPE.CONS.24 (LET ((T1 (QUOTE (CONS (EQL 3671) (CONS SHORT-FLOAT (EQL -663423073525))))) (T2 (QUOTE (NOT (CONS T (CONS (NOT COMPLEX) (CONS INTEGER T))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT T1 T2)) T)
;; Loading (DEFTEST SUBTYPE.CONS.25 (LET ((T1 (QUOTE (CONS T (CONS (NOT LONG-FLOAT) (INTEGER 44745969 61634129))))) (T2 (QUOTE (NOT (CONS (EQL -3) (CONS SHORT-FLOAT (CONS T FLOAT))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT T1 T2)) T)
;; Loading (DEFTEST SUBTYPE.CONS.26 (LET ((T1 (QUOTE (CONS INTEGER (CONS SINGLE-FLOAT (CONS T T))))) (T2 (QUOTE (CONS T (CONS (NOT COMPLEX) (NOT (EQL 8))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT T1 T2)) T)
;; Loading (DEFTEST SUBTYPE.CONS.27 (LET ((T1 (QUOTE (CONS (NOT (INTEGER -27 30)) (CONS RATIONAL (CONS INTEGER INTEGER))))) (T2 (QUOTE (NOT (CONS INTEGER (CONS INTEGER (EQL 378132631))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT T1 T2)) T)
;; Loading (DEFTEST SUBTYPE.CONS.28 (LET ((T1 (QUOTE (CONS (INTEGER -1696888 -1460338) (CONS SINGLE-FLOAT SYMBOL)))) (T2 (QUOTE (NOT (CONS (NOT (INTEGER -14 20)) (CONS (NOT INTEGER) CONS)))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT T1 T2)) T)
;; Loading (DEFTEST SUBTYPEP.CONS.29 (LET ((T2 (QUOTE (OR (NOT (CONS UNSIGNED-BYTE CONS)) (NOT (CONS (INTEGER -6 22) RATIONAL)))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT (QUOTE CONS) T2)) T)
;; Loading (DEFTEST SUBTYPEP.CONS.30 (LET ((T1 (QUOTE (NOT (CONS T (CONS T (CONS CONS T)))))) (T2 (QUOTE (OR (OR (CONS (CONS T INTEGER) T) (NOT (CONS T (CONS T CONS)))) (NOT (CONS (CONS (EQL -27111309) T) (CONS T (EQL 1140730)))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT T1 T2)) T)
;; Loading (DEFTEST SUBTYPEP.CONS.31 (LET ((T2 (QUOTE (OR (NOT (CONS (OR (CONS T RATIO) (CONS SHORT-FLOAT T)) (CONS (CONS (EQL -7418623) (INTEGER -9 53)) (CONS CONS T)))) (NOT (CONS (CONS T (EQL -265039)) (CONS (CONS T CONS) T))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT (QUOTE CONS) T2)) T)
;; Loading (DEFTEST SUBTYPEP.CONS.32 (LET ((T2 (QUOTE (CONS T (OR (NOT (CONS INTEGER (EQL 0))) (NOT (CONS (OR FLOAT (EQL 0)) CONS))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT (QUOTE CONS) T2)) T)
;; Loading (DEFTEST SUBTYPEP.CONS.33 (LET ((T2 (QUOTE (OR (NOT (CONS (CONS T CONS) (CONS T (CONS UNSIGNED-BYTE T)))) (NOT (CONS (CONS INTEGER T) (CONS T (CONS CONS T)))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT (QUOTE CONS) T2)) T)
;; Loading (DEFTEST SUBTYPEP.CONS.34 (LET ((T2 (QUOTE (OR (NOT (CONS (OR (EQL 0) RATIO) (NOT CONS))) (NOT (CONS INTEGER CONS)))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT (QUOTE CONS) T2)) T)
;; Loading (DEFTEST SUBTYPEP.CONS.35 (NOTNOT-MV (SUBTYPEP (QUOTE (CONS NIL T)) (QUOTE FLOAT))) T T)
;; Loading (DEFTEST SUBTYPEP.CONS.36 (NOTNOT-MV (SUBTYPEP (QUOTE (CONS T NIL)) (QUOTE SYMBOL))) T T)
;; Loading (DEFTEST SUBTYPEP.CONS.37 (NOTNOT-MV (SUBTYPEP (QUOTE (CONS NIL NIL)) (QUOTE REAL))) T T)
;; Loading (DEFTEST SUBTYPEP.CONS.38 (LET ((T1 (QUOTE (CONS T (COMPLEX (REAL -32 0))))) (T2 (SYSTEM.INTERNALS::BACKQUOTE (NOT (CONS T (COMPLEX (INTEGER * -500))))))) (SUBTYPEP-AND-CONTRAPOSITIVE-ARE-CONSISTENT T1 T2)) T)
;; Loading (DEFTEST SUBTYPEP.CONS.39 (VALUES (SUBTYPEP T (QUOTE (AND (NOT (CONS CONS (CONS CONS T))) (NOT (CONS T CONS)))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.40 (LET ((TYPE1 (QUOTE (CONS (EQL 0) CONS))) (TYPE2 (QUOTE (CONS UNSIGNED-BYTE SYMBOL)))) (VALUES (SUBTYPEP* TYPE1 TYPE2) (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)))))) NIL NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.41 (LET ((TYPE1 (QUOTE (CONS T (COMPLEX (REAL -10 -4))))) (TYPE2 (QUOTE (NOT (CONS T (COMPLEX (INTEGER -200 -100))))))) (MULTIPLE-VALUE-BIND (SUB1 SUCCESS1) (SUBTYPEP* TYPE1 TYPE2) (MULTIPLE-VALUE-BIND (SUB2 SUCCESS2) (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE2))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA TYPE1)))) (IF (AND SUCCESS1 SUCCESS2 (NOT (EQ SUB1 SUB2))) (VALUES SUB1 SUB2) NIL)))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.42 (LET ((T1 (QUOTE (CONS (CONS (CONS (REAL -744833699 -744833699) CONS) (INTEGER -234496 215373)) INTEGER))) (T2 (QUOTE (CONS (CONS (CONS INTEGER INTEGER) (INTEGER -234496 215373)) T)))) (VALUES (SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA T2))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA T1)))))) NIL)
;; Loading (DEFTEST SUBTYPEP.CONS.43 (LET* ((N -39265100.0) (T1 (QUOTE (NOT (CONS FLOAT T)))) (T2 (SYSTEM.INTERNALS::BACKQUOTE (OR (NOT (CONS (EQL 0) (REAL (SYSTEM.INTERNALS::BQ-COMMA N) (SYSTEM.INTERNALS::BQ-COMMA N)))) (NOT (CONS T (EQL 0))))))) (MULTIPLE-VALUE-BIND (SUB1 GOOD1) (SUBTYPEP* T1 T2) (MULTIPLE-VALUE-BIND (SUB2 GOOD2) (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA T2))) (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA T1)))) (OR (NOT GOOD1) (NOT GOOD2) (AND SUB1 SUB2) (AND (NOT SUB1) (NOT SUB2)))))) T)
;; Loading (LOAD "subtypep-member.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-member.lsp 819D7067>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP.MEMBER.1 (CHECK-ALL-SUBTYPEP (QUOTE (MEMBER A B C)) (QUOTE (MEMBER A B C D))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.2 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (MEMBER A B C)) (QUOTE (MEMBER A B))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.3 (CHECK-EQUIVALENCE (QUOTE (MEMBER)) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.4 (CHECK-ALL-SUBTYPEP (QUOTE (EQL B)) (QUOTE (MEMBER A B C))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.5 (CHECK-ALL-SUBTYPEP (QUOTE (MEMBER A B C D E)) (QUOTE SYMBOL)) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.6 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (MEMBER A B 10 D E)) (QUOTE SYMBOL)) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.7 (CHECK-ALL-SUBTYPEP (QUOTE NULL) (QUOTE (MEMBER A B NIL C D E))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.8 (CHECK-ALL-NOT-SUBTYPEP (QUOTE NULL) (QUOTE (MEMBER A B C D E))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.9 (LET ((B1 (1+ MOST-POSITIVE-FIXNUM)) (B2 (1+ MOST-POSITIVE-FIXNUM))) (CHECK-ALL-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (MEMBER 10 (SYSTEM.INTERNALS::BQ-COMMA B1) 20)) (SYSTEM.INTERNALS::BACKQUOTE (MEMBER 10 20 (SYSTEM.INTERNALS::BQ-COMMA B2))))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.10 (CHECK-ALL-SUBTYPEP (QUOTE (MEMBER :A :B :C)) (QUOTE KEYWORD)) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.11 (LET ((B1 (COPY-LIST (QUOTE (A)))) (B2 (COPY-LIST (QUOTE (A))))) (CHECK-ALL-NOT-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (MEMBER 10 (SYSTEM.INTERNALS::BQ-COMMA B1) 20)) (SYSTEM.INTERNALS::BACKQUOTE (MEMBER 10 20 (SYSTEM.INTERNALS::BQ-COMMA B2))))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.12 (LET ((B1 (QUOTE (A)))) (CHECK-ALL-SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (MEMBER 10 (SYSTEM.INTERNALS::BQ-COMMA B1) 20)) (SYSTEM.INTERNALS::BACKQUOTE (MEMBER 10 20 (SYSTEM.INTERNALS::BQ-COMMA B1))))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.13 (CHECK-ALL-SUBTYPEP (QUOTE (MEMBER 10 20 30)) (QUOTE (INTEGER 0 100))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.14 (CHECK-ALL-SUBTYPEP (QUOTE (INTEGER 3 6)) (QUOTE (MEMBER 0 1 2 3 4 5 6 7 8 100))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.15 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (INTEGER 3 6)) (QUOTE (MEMBER 0 1 2 3 5 6 7 8))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.16 (CHECK-EQUIVALENCE (QUOTE (INTEGER 2 5)) (QUOTE (MEMBER 2 5 4 3))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.17 (LET ((S1 (COPY-SEQ "abc")) (S2 (COPY-SEQ "abc"))) (LET ((T1 (SYSTEM.INTERNALS::BACKQUOTE (MEMBER (SYSTEM.INTERNALS::BQ-COMMA S1)))) (T2 (SYSTEM.INTERNALS::BACKQUOTE (MEMBER (SYSTEM.INTERNALS::BQ-COMMA S2))))) (COND ((SUBTYPEP T1 T2) "T1 is subtype of T2") ((SUBTYPEP T2 T1) "T2 is subtype of T1") (T (CHECK-DISJOINTNESS T1 T2))))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.18 (LET ((S1 (COPY-SEQ (QUOTE (A B C)))) (S2 (COPY-SEQ (QUOTE (A B C))))) (LET ((T1 (SYSTEM.INTERNALS::BACKQUOTE (MEMBER (SYSTEM.INTERNALS::BQ-COMMA S1)))) (T2 (SYSTEM.INTERNALS::BACKQUOTE (MEMBER (SYSTEM.INTERNALS::BQ-COMMA S2))))) (COND ((SUBTYPEP T1 T2) "T1 is subtype of T2") ((SUBTYPEP T2 T1) "T2 is subtype of T1") (T (CHECK-DISJOINTNESS T1 T2))))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.19 (LET ((I1 (1+ MOST-POSITIVE-FIXNUM)) (I2 (1+ MOST-POSITIVE-FIXNUM))) (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (MEMBER 0 (SYSTEM.INTERNALS::BQ-COMMA I1))) (SYSTEM.INTERNALS::BACKQUOTE (MEMBER 0 (SYSTEM.INTERNALS::BQ-COMMA I2))))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.20 (CHECK-EQUIVALENCE (QUOTE (AND (MEMBER A B C D) (MEMBER E D B F G))) (QUOTE (MEMBER B D))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.21 (CHECK-EQUIVALENCE (QUOTE (AND (MEMBER A B C D) (MEMBER E D F G))) (QUOTE (EQL D))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.22 (CHECK-EQUIVALENCE (QUOTE (AND (MEMBER A B C D) (MEMBER E F G))) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.23 (CHECK-EQUIVALENCE (QUOTE (OR (MEMBER A B C) (MEMBER Z B W))) (QUOTE (MEMBER Z A B W C))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.24 (CHECK-EQUIVALENCE (QUOTE (OR (MEMBER A B C) (EQL D))) (QUOTE (MEMBER D C B A))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.25 (CHECK-EQUIVALENCE (QUOTE BOOLEAN) (QUOTE (MEMBER NIL T))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.26 (CHECK-EQUIVALENCE (QUOTE (OR (EQL A) (EQL B))) (QUOTE (MEMBER A B))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.27 (CHECK-ALL-SUBTYPEP (QUOTE (MEMBER A B C D)) (QUOTE (SATISFIES SYMBOLP))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.28 (CHECK-ALL-SUBTYPEP (QUOTE (MEMBER A B C D)) T) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.29 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (MEMBER A B 10 Z)) (QUOTE (SATISFIES SYMBOLP))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.30 (CHECK-DISJOINTNESS (QUOTE (MEMBER 1 6 10)) (QUOTE (SATISFIES SYMBOLP))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.31 (CHECK-EQUIVALENCE (QUOTE (MEMBER A B C D)) (QUOTE (MEMBER C D B A))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.32 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (NOT (MEMBER A B 10 Z))) (QUOTE (SATISFIES SYMBOLP))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.33 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (SATISFIES SYMBOLP)) (QUOTE (MEMBER A B 10 Z))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.34 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (MEMBER A B 10 Z)) (QUOTE (NOT (SATISFIES SYMBOLP)))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.35 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (SATISFIES SYMBOLP)) (QUOTE (MEMBER A B C D))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.36 (CHECK-DISJOINTNESS (QUOTE (EQL A)) (QUOTE (OR (MEMBER B C D) (EQL E)))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.37 (CHECK-EQUIVALENCE (QUOTE (AND (MEMBER A B C D) (NOT (EQL C)))) (QUOTE (MEMBER A B D))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.38 (CHECK-EQUIVALENCE (QUOTE (AND (MEMBER A B C D E F G) (NOT (MEMBER B F)))) (QUOTE (MEMBER A C D E G))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.39 (CHECK-EQUIVALENCE (QUOTE (AND (NOT (MEMBER B D E F G)) (NOT (MEMBER X Y B Z D)))) (QUOTE (NOT (MEMBER B D E F G X Y Z)))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.40 (CHECK-EQUIVALENCE (QUOTE (AND (NOT (EQL A)) (NOT (EQL B)))) (QUOTE (NOT (MEMBER A B)))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.41 (CHECK-EQUIVALENCE (QUOTE (AND (NOT (EQL A)) (NOT (EQL B)) (NOT (EQL C)))) (QUOTE (NOT (MEMBER C B A)))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.42 (CHECK-EQUIVALENCE (QUOTE (AND (NOT (MEMBER A B)) (NOT (MEMBER B C)))) (QUOTE (NOT (MEMBER C B A)))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.43 (CHECK-EQUIVALENCE (QUOTE (AND (NOT (MEMBER A G B K E)) (NOT (MEMBER B H K C F)))) (QUOTE (NOT (MEMBER C B K A E F G H)))) NIL)
;; Loading (DEFTEST SUBTYPEP.MEMBER.44 (CHECK-EQUIVALENCE (QUOTE (AND (INTEGER 0 30) (NOT (MEMBER 3 4 5 9 10 11 17 18 19)))) (QUOTE (OR (INTEGER 0 2) (INTEGER 6 8) (INTEGER 12 16) (INTEGER 20 30)))) NIL)
;; Loading (LOAD "subtypep-eql.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-eql.lsp 81B5D0B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP.EQL.1 (LET ((S1 (COPY-SEQ "abc")) (S2 (COPY-SEQ "abc"))) (LET ((T1 (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA S1)))) (T2 (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA S2))))) (COND ((SUBTYPEP T1 T2) "T1 is subtype of T2") ((SUBTYPEP T2 T1) "T2 is subtype of T1") (T (CHECK-DISJOINTNESS T1 T2))))) NIL)
;; Loading (DEFTEST SUBTYPEP.EQL.2 (LET ((S1 (COPY-SEQ (QUOTE (A B C)))) (S2 (COPY-SEQ (QUOTE (A B C))))) (LET ((T1 (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA S1)))) (T2 (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA S2))))) (COND ((SUBTYPEP T1 T2) "T1 is subtype of T2") ((SUBTYPEP T2 T1) "T2 is subtype of T1") (T (CHECK-DISJOINTNESS T1 T2))))) NIL)
;; Loading (DEFTEST SUBTYPEP.EQL.3 (LET ((I1 (1+ MOST-POSITIVE-FIXNUM)) (I2 (1+ MOST-POSITIVE-FIXNUM))) (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA I1))) (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA I2))))) NIL)
;; Loading (DEFTEST SUBTYPEP.EQL.4 (CHECK-EQUIVALENCE (QUOTE (AND (EQL A) (EQL B))) NIL) NIL)
;; Loading (DEFTEST SUBTYPEP.EQL.5 (CHECK-ALL-SUBTYPEP (QUOTE (EQL A)) (QUOTE (SATISFIES SYMBOLP))) NIL)
;; Loading (DEFTEST SUBTYPEP.EQL.6 (CHECK-DISJOINTNESS (QUOTE (EQL 17)) (QUOTE (SATISFIES SYMBOLP))) NIL)
;; Loading (DEFTEST SUBTYPEP.EQL.7 (CHECK-ALL-SUBTYPEP (QUOTE (EQL NIL)) (QUOTE (SATISFIES SYMBOLP))) NIL)
;; Loading (DEFTEST SUBTYPEP.EQL.8 (CHECK-ALL-NOT-SUBTYPEP (QUOTE (SATISFIES SYMBOLP)) (QUOTE (EQL A))) NIL)
;; Loading (LOAD "subtypep-array.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-array.lsp 81BD5747>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP.ARRAY.1 (LET ((ARRAY-TYPES (CONS (FIND-CLASS (QUOTE ARRAY)) (QUOTE (ARRAY (ARRAY) (ARRAY *) (ARRAY * *)))))) (LOOP FOR TP1 IN ARRAY-TYPES APPEND (LOOP FOR TP2 IN ARRAY-TYPES UNLESS (SUBTYPEP TP1 TP2) COLLECT (LIST TP1 TP2)))) NIL)
;; Loading (DEFTEST SUBTYPEP.ARRAY.2 (AND (SUBTYPEP* (QUOTE (ARRAY T)) (QUOTE (ARRAY T *))) (SUBTYPEP* (QUOTE (ARRAY T *)) (QUOTE (ARRAY T))) T) T)
;; Loading (DEFTEST SUBTYPEP.ARRAY.3 (LOOP FOR I FROM 0 BELOW (MIN 16 ARRAY-RANK-LIMIT) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY * (SYSTEM.INTERNALS::BQ-COMMA I))) FOR TYPE2 = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY * (SYSTEM.INTERNALS::BQ-COMMA (MAKE-LIST I :INITIAL-ELEMENT (QUOTE *))))) UNLESS (AND (SUBTYPEP TYPE (QUOTE ARRAY)) (SUBTYPEP TYPE (QUOTE (ARRAY))) (SUBTYPEP TYPE (QUOTE (ARRAY *))) (SUBTYPEP TYPE (QUOTE (ARRAY * *))) (SUBTYPEP TYPE TYPE2)) COLLECT TYPE) NIL)
;; Loading (DEFTEST SUBTYPEP.ARRAY.4 (LOOP FOR I FROM 0 BELOW (MIN 16 ARRAY-RANK-LIMIT) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY T (SYSTEM.INTERNALS::BQ-COMMA I))) FOR TYPE2 = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY T (SYSTEM.INTERNALS::BQ-COMMA (MAKE-LIST I :INITIAL-ELEMENT (QUOTE *))))) UNLESS (AND (SUBTYPEP TYPE (QUOTE (ARRAY T))) (SUBTYPEP TYPE (QUOTE (ARRAY T *))) (SUBTYPEP TYPE TYPE2)) COLLECT TYPE) NIL)
;; Loading (DEFTEST SUBTYPEP.ARRAY.5 (LOOP FOR ELEMENT-TYPE IN (CONS (QUOTE *) *ARRAY-ELEMENT-TYPES*) NCONC (LOOP FOR I FROM 0 BELOW (MIN 16 ARRAY-RANK-LIMIT) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA I))) FOR TYPE2 = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA (MAKE-LIST I :INITIAL-ELEMENT (QUOTE 0))))) FOR TYPE3 = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) (SYSTEM.INTERNALS::BQ-COMMA (MAKE-LIST I :INITIAL-ELEMENT (QUOTE 1))))) UNLESS (AND (SUBTYPEP TYPE2 TYPE) (SUBTYPEP TYPE3 TYPE) (LOOP FOR J FROM 0 TO I ALWAYS (AND (SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (MAKE-LIST J :INITIAL-ELEMENT (QUOTE *))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (MAKE-LIST (- I J) :INITIAL-ELEMENT 2))))) TYPE) (SUBTYPEP (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE) ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (MAKE-LIST J :INITIAL-ELEMENT 2)) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (MAKE-LIST (- I J) :INITIAL-ELEMENT (QUOTE *)))))) TYPE)))) COLLECT TYPE)) NIL)
;; Loading (DEFTEST SUBTYPEP.ARRAY.6 (LOOP FOR ETYPE IN (CONS (QUOTE *) *ARRAY-ELEMENT-TYPES*) APPEND (CHECK-EQUIVALENCE (SYSTEM.INTERNALS::BACKQUOTE (AND (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ETYPE) (* 10 * * *)) (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ETYPE) (* * * 29 *)))) (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ETYPE) (* 10 * 29 *))))) NIL)
;; Loading (DEFTEST SUBTYPEP.ARRAY.7 (LET ((ETYPES *ARRAY-ELEMENT-TYPES*)) (LOOP FOR ETP1 IN ETYPES FOR UAETP1 = (UPGRADED-ARRAY-ELEMENT-TYPE ETP1) APPEND (LOOP FOR ETP2 IN ETYPES FOR UAETP2 = (UPGRADED-ARRAY-ELEMENT-TYPE ETP2) WHEN (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* UAETP1 UAETP2)) (QUOTE (NIL T))) APPEND (CHECK-DISJOINTNESS (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ETP1))) (SYSTEM.INTERNALS::BACKQUOTE (ARRAY (SYSTEM.INTERNALS::BQ-COMMA ETP2))))))) NIL)
;; Loading (DEFTEST SUBTYPEP.ARRAY.8 (LET ((LIMIT (MIN 16 ARRAY-RANK-LIMIT))) (LOOP FOR I BELOW LIMIT FOR TYPE1 = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY T (SYSTEM.INTERNALS::BQ-COMMA I))) NCONC (LOOP FOR J BELOW LIMIT FOR TYPE2 = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY T (SYSTEM.INTERNALS::BQ-COMMA J))) WHEN (AND (/= I J) (SUBTYPEP TYPE1 TYPE2)) COLLECT (LIST TYPE1 TYPE2)))) NIL)
;; Loading (DEFTEST SUBTYPEP.ARRAY.9 (LET ((LIMIT (MIN 16 ARRAY-RANK-LIMIT))) (LOOP FOR I BELOW LIMIT FOR TYPE1 = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY T (SYSTEM.INTERNALS::BQ-COMMA (MAKE-LIST I :INITIAL-ELEMENT 1)))) NCONC (LOOP FOR J BELOW LIMIT FOR TYPE2 = (SYSTEM.INTERNALS::BACKQUOTE (ARRAY T (SYSTEM.INTERNALS::BQ-COMMA (MAKE-LIST J :INITIAL-ELEMENT 1)))) WHEN (AND (/= I J) (SUBTYPEP TYPE1 TYPE2)) COLLECT (LIST TYPE1 TYPE2)))) NIL)
;; Loading (DEFTEST SUBTYPEP.ARRAY.10 (SUBTYPEP* (QUOTE (ARRAY T NIL)) (QUOTE INTEGER)) NIL T)
;; Loading (DEFTEST SUBTYPEP.ARRAY.11 (SUBTYPEP* (QUOTE (ARRAY T NIL)) (QUOTE (ARRAY T (*)))) NIL T)
;; Loading (DEFTEST SUBTYPEP.ARRAY.12 (SUBTYPEP* (QUOTE (ARRAY T NIL)) (QUOTE (ARRAY T 1))) NIL T)
;; Loading (DEFTEST SUBTYPEP.ARRAY.13 (SUBTYPEP* (QUOTE (ARRAY BIT NIL)) (QUOTE (ARRAY BIT 1))) NIL T)
;; Loading (DEFTEST STRING-IS-NOT-VECTOR-OF-CHARACTER.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (OR (SUBTYPEP* (QUOTE STRING) (QUOTE (VECTOR CHARACTER))) (SUBTYPEP* (QUOTE STRING) (QUOTE (VECTOR BASE-CHAR))) (SUBTYPEP* (QUOTE STRING) (QUOTE (VECTOR EXTENDED-CHAR)))) NIL T)
;; Loading (DEFTEST VECTOR-OF-CHARACTER-IS-STRING.2 (SUBTYPEP* (QUOTE (VECTOR CHARACTER)) (QUOTE STRING)) T T)
;; Loading (DEFTEST STRING-IS-NOT-VECTOR-OF-CHARACTER.3 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (STRING *)) (QUOTE (VECTOR CHARACTER))) NIL T)
;; Loading (DEFTEST VECTOR-OF-CHARACTER-IS-STRING.4 (SUBTYPEP* (QUOTE (VECTOR CHARACTER)) (QUOTE (STRING *))) T T)
;; Loading (DEFTEST STRING-IS-NOT-VECTOR-OF-CHARACTER.5 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (STRING 17)) (QUOTE (VECTOR CHARACTER 17))) NIL T)
;; Loading (DEFTEST VECTOR-OF-CHARACTER-IS-STRING.6 (SUBTYPEP* (QUOTE (VECTOR CHARACTER 17)) (QUOTE (STRING 17))) T T)
;; Loading (DEFTEST BASE-STRING-IS-VECTOR-OF-BASE-CHAR.1 (SUBTYPEP* (QUOTE BASE-STRING) (QUOTE (VECTOR BASE-CHAR))) T T)
;; Loading (DEFTEST BASE-STRING-IS-VECTOR-OF-BASE-CHAR.2 (SUBTYPEP* (QUOTE (VECTOR BASE-CHAR)) (QUOTE BASE-STRING)) T T)
;; Loading (DEFTEST BASE-STRING-IS-VECTOR-OF-BASE-CHAR.3 (SUBTYPEP* (QUOTE (BASE-STRING *)) (QUOTE (VECTOR BASE-CHAR))) T T)
;; Loading (DEFTEST BASE-STRING-IS-VECTOR-OF-BASE-CHAR.4 (SUBTYPEP* (QUOTE (VECTOR BASE-CHAR)) (QUOTE (BASE-STRING *))) T T)
;; Loading (DEFTEST BASE-STRING-IS-VECTOR-OF-BASE-CHAR.5 (SUBTYPEP* (QUOTE (BASE-STRING 17)) (QUOTE (VECTOR BASE-CHAR 17))) T T)
;; Loading (DEFTEST BASE-STRING-IS-VECTOR-OF-BASE-CHAR.6 (SUBTYPEP* (QUOTE (VECTOR BASE-CHAR 17)) (QUOTE (BASE-STRING 17))) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING-IS-SIMPLE-1D-ARRAY-OF-BASE-CHAR.1 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE (SIMPLE-ARRAY BASE-CHAR (*)))) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING-IS-SIMPLE-1D-ARRAY-OF-BASE-CHAR.2 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY BASE-CHAR (*))) (QUOTE SIMPLE-BASE-STRING)) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING-IS-SIMPLE-1D-ARRAY-OF-BASE-CHAR.3 (SUBTYPEP* (QUOTE (SIMPLE-BASE-STRING *)) (QUOTE (SIMPLE-ARRAY BASE-CHAR (*)))) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING-IS-SIMPLE-1D-ARRAY-OF-BASE-CHAR.4 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY BASE-CHAR (*))) (QUOTE (SIMPLE-BASE-STRING *))) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING-IS-SIMPLE-1D-ARRAY-OF-BASE-CHAR.5 (SUBTYPEP* (QUOTE (SIMPLE-BASE-STRING 17)) (QUOTE (SIMPLE-ARRAY BASE-CHAR (17)))) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING-IS-SIMPLE-1D-ARRAY-OF-BASE-CHAR.6 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY BASE-CHAR (17))) (QUOTE (SIMPLE-BASE-STRING 17))) T T)
;; Loading (DEFTEST SIMPLE-STRING-IS-NOT-SIMPLE-1D-ARRAY-OF-CHARACTER.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE (SIMPLE-ARRAY CHARACTER (*)))) NIL T)
;; Loading (DEFTEST SIMPLE-1D-ARRAY-OF-CHARACTER-IS-SIMPLE-STRING.2 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY CHARACTER (*))) (QUOTE SIMPLE-STRING)) T T)
;; Loading (DEFTEST SIMPLE-STRING-IS-NOT-SIMPLE-1D-ARRAY-OF-CHARACTER.3 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (SIMPLE-STRING *)) (QUOTE (SIMPLE-ARRAY CHARACTER (*)))) NIL T)
;; Loading (DEFTEST SIMPLE-1D-ARRAY-OF-CHARACTER-IS-SIMPLE-STRING.4 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY CHARACTER (*))) (QUOTE (SIMPLE-STRING *))) T T)
;; Loading (DEFTEST SIMPLE-STRING-IS-NOT-SIMPLE-1D-ARRAY-OF-CHARACTER.5 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (SIMPLE-STRING 17)) (QUOTE (SIMPLE-ARRAY CHARACTER (17)))) NIL T)
;; Loading (DEFTEST SIMPLE-1D-ARRAY-OF-CHARACTER-IS-SIMPLE-STRING.6 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY CHARACTER (17))) (QUOTE (SIMPLE-STRING 17))) T T)
;; Loading (DEFTEST VECTOR-IS-1D-ARRAY.1 (SUBTYPEP* (QUOTE VECTOR) (QUOTE (ARRAY * (*)))) T T)
;; Loading (DEFTEST VECTOR-IS-1D-ARRAY.2 (SUBTYPEP* (QUOTE (ARRAY * (*))) (QUOTE VECTOR)) T T)
;; Loading (DEFTEST VECTOR-IS-1D-ARRAY.3 (SUBTYPEP* (QUOTE (VECTOR *)) (QUOTE (ARRAY * (*)))) T T)
;; Loading (DEFTEST VECTOR-IS-1D-ARRAY.4 (SUBTYPEP* (QUOTE (ARRAY * (*))) (QUOTE (VECTOR *))) T T)
;; Loading (DEFTEST VECTOR-IS-1D-ARRAY.5 (SUBTYPEP* (QUOTE (VECTOR * 17)) (QUOTE (ARRAY * (17)))) T T)
;; Loading (DEFTEST VECTOR-IS-1D-ARRAY.6 (SUBTYPEP* (QUOTE (ARRAY * (17))) (QUOTE (VECTOR * 17))) T T)
;; Loading (DEFTEST SIMPLE-VECTOR-IS-SIMPLE-1D-ARRAY.1 (SUBTYPEP* (QUOTE SIMPLE-VECTOR) (QUOTE (SIMPLE-ARRAY T (*)))) T T)
;; Loading (DEFTEST SIMPLE-VECTOR-IS-SIMPLE-1D-ARRAY.2 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY T (*))) (QUOTE SIMPLE-VECTOR)) T T)
;; Loading (DEFTEST SIMPLE-VECTOR-IS-SIMPLE-1D-ARRAY.3 (SUBTYPEP* (QUOTE (SIMPLE-VECTOR *)) (QUOTE (SIMPLE-ARRAY T (*)))) T T)
;; Loading (DEFTEST SIMPLE-VECTOR-IS-SIMPLE-1D-ARRAY.4 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY T (*))) (QUOTE (SIMPLE-VECTOR *))) T T)
;; Loading (DEFTEST SIMPLE-VECTOR-IS-SIMPLE-1D-ARRAY.5 (SUBTYPEP* (QUOTE (SIMPLE-VECTOR 17)) (QUOTE (SIMPLE-ARRAY T (17)))) T T)
;; Loading (DEFTEST SIMPLE-VECTOR-IS-SIMPLE-1D-ARRAY.6 (SUBTYPEP* (QUOTE (SIMPLE-ARRAY T (17))) (QUOTE (SIMPLE-VECTOR 17))) T T)
;; Loading (LOAD "subtypep-function.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-function.lsp 81DE2407>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP-FUNCTION.1 (CHECK-ALL-NOT-SUBTYPEP T (QUOTE (FUNCTION (T) T))) NIL)
;; Loading (DEFTEST SUBTYPEP-FUNCTION.2 (CHECK-ALL-SUBTYPEP NIL (QUOTE (FUNCTION (T) T))) NIL)
;; Loading (DEFTEST SUBTYPEP-FUNCTION.3 (CHECK-ALL-SUBTYPEP (QUOTE (FUNCTION (T) T)) (QUOTE FUNCTION)) NIL)
;; Loading (DEFTEST SUBTYPEP-FUNCTION.4 (CHECK-ALL-SUBTYPEP (QUOTE (FUNCTION (T) INTEGER)) (QUOTE (FUNCTION (T) REAL))) NIL)
;; Loading (LOAD "subtypep-complex.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/subtypep-complex.lsp 81E28867>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST SUBTYPEP-COMPLEX.1 (SUBTYPEP* (QUOTE COMPLEX) (QUOTE NUMBER)) T T)
;; Loading (DEFTEST SUBTYPEP-COMPLEX.2 (SUBTYPEP* (QUOTE NUMBER) (QUOTE COMPLEX)) NIL T)
;; Loading (DEFUN CHECK-NOT-COMPLEX-TYPE (TYPE) (LET ((RESULT1 (MULTIPLE-VALUE-LIST (SUBTYPEP* TYPE (QUOTE COMPLEX)))) (RESULT2 (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE COMPLEX) TYPE)))) (IF (AND (EQUAL RESULT1 (QUOTE (NIL T))) (EQUAL RESULT2 (QUOTE (NIL T)))) NIL (LIST (LIST TYPE RESULT1 RESULT2)))))
;; Loading (DEFTEST SUBTYPEP-COMPLEX.3 (MAPCAN (FUNCTION CHECK-NOT-COMPLEX-TYPE) (QUOTE (BIT UNSIGNED-BYTE INTEGER RATIONAL RATIO REAL FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FIXNUM BIGNUM))) NIL)
;; Loading (DEFTEST SUBTYPEP-COMPLEX.4 (LOOP FOR I FROM 1 TO 100 NCONC (CHECK-NOT-COMPLEX-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))))) NIL)
;; Loading (DEFTEST SUBTYPEP-COMPLEX.5 (LOOP FOR I FROM 1 TO 100 NCONC (CHECK-NOT-COMPLEX-TYPE (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))))) NIL)
;; Loading (DEFTEST SUBTYPEP-COMPLEX.7 (LET ((TYPES (QUOTE (COMPLEX (COMPLEX) (COMPLEX *))))) (LOOP FOR TP1 IN TYPES NCONC (LOOP FOR TP2 IN TYPES FOR RESULT = (MULTIPLE-VALUE-LIST (SUBTYPEP* TP1 TP2)) UNLESS (EQUAL RESULT (QUOTE (T T))) COLLECT (LIST TP1 TP2 RESULT)))) NIL)
;; Loading (DEFUN CHECK-COMPLEX-UPGRADING (T1 T2) (LET* ((UCPT1 (UPGRADED-COMPLEX-PART-TYPE T1)) (UCPT2 (UPGRADED-COMPLEX-PART-TYPE T2)) (RESULT (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA T1))) (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA T2))))))) (COND ((OR (EQUAL UCPT1 UCPT2) (SUBTYPEP T1 T2)) (UNLESS (EQUAL RESULT (QUOTE (T T))) (LIST (LIST :CASE1 T1 T2 UCPT1 UCPT2 RESULT)))) (T (MULTIPLE-VALUE-BIND (UCPT-SUB1? GOOD1?) (SUBTYPEP* UCPT1 UCPT2) (MULTIPLE-VALUE-BIND (UCPT-SUB2? GOOD2?) (SUBTYPEP* UCPT2 UCPT1) (COND ((AND GOOD2? UCPT-SUB1? (NOT UCPT-SUB2?)) (ASSERT GOOD1?) (UNLESS (EQUAL RESULT (QUOTE (NIL T))) (LIST (LIST :CASE2 T1 T2 UCPT1 UCPT2 RESULT)))) ((AND GOOD1? (NOT UCPT-SUB1?) UCPT-SUB2?) (ASSERT GOOD2?) (UNLESS (EQUAL RESULT (QUOTE (NIL T))) (LIST (LIST :CASE3 T1 T2 UCPT1 UCPT2 RESULT)))) ((AND UCPT-SUB1? UCPT-SUB2?) (ASSERT GOOD1?) (ASSERT GOOD2?) (UNLESS (EQUAL RESULT (QUOTE (T T))) (LIST (LIST :CASE4 T1 T2 UCPT1 UCPT2 RESULT)))))))))))
;; Loading (DEFTEST SUBTYPEP-COMPLEX.8 (LET ((TYPES (REVERSE (QUOTE (BIT FIXNUM BIGNUM INTEGER UNSIGNED-BYTE RATIONAL RATIO SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FLOAT REAL)))) (FLOAT-TYPES (REMOVE-DUPLICATES (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) :TEST (FUNCTION (LAMBDA (T1 T2) (EQL (COERCE 0 T1) (COERCE 0 T2))))))) (LOOP FOR I IN (QUOTE (1 2 3 4 6 8 13 16 17 28 29 31 32 48 64)) DO (PUSH (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) TYPES) DO (PUSH (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) TYPES) DO (LOOP FOR FTP IN FLOAT-TYPES DO (PUSH (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA FTP) (SYSTEM.INTERNALS::BQ-COMMA (COERCE 0 FTP)) (SYSTEM.INTERNALS::BQ-COMMA (COERCE I FTP)))) TYPES) DO (PUSH (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA FTP) ((SYSTEM.INTERNALS::BQ-COMMA (COERCE (- I) FTP))) (SYSTEM.INTERNALS::BQ-COMMA (COERCE I FTP)))) TYPES)) DO (PUSH (SYSTEM.INTERNALS::BACKQUOTE (FLOAT (SYSTEM.INTERNALS::BQ-COMMA (COERCE 0 (QUOTE SINGLE-FLOAT))) (SYSTEM.INTERNALS::BQ-COMMA (COERCE I (QUOTE SINGLE-FLOAT))))) TYPES)) (SETQ TYPES (REVERSE TYPES)) (LET ((RESULTS (MAPCAN (FUNCTION (LAMBDA (T1) (MAPCAN (FUNCTION (LAMBDA (T2) (CHECK-COMPLEX-UPGRADING T1 T2))) TYPES))) TYPES))) (SUBSEQ RESULTS 0 (MIN 100 (LENGTH RESULTS))))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (LOAD "deftype.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/deftype.lsp C16DA997>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "types-aux.lsp")
;; Loading (DEFTEST DEFTYPE.1 (TYPEP 1 (QUOTE (EVEN-ARRAY INTEGER (10)))) NIL)
;; Loading (DEFTEST DEFTYPE.2 (TYPEP NIL (QUOTE (EVEN-ARRAY T (*)))) NIL)
;; Loading (DEFTEST DEFTYPE.3 (NOTNOT-MV (TYPEP (MAKE-ARRAY (QUOTE (10))) (QUOTE (EVEN-ARRAY T (*))))) T)
;; Loading (DEFTEST DEFTYPE.4 (TYPEP (MAKE-ARRAY (QUOTE (5))) (QUOTE (EVEN-ARRAY T (*)))) NIL)
;; Loading (DEFTEST DEFTYPE.5 (NOTNOT-MV (TYPEP (MAKE-STRING 10) (QUOTE (EVEN-ARRAY CHARACTER (*))))) T)
;; Loading (DEFTEST DEFTYPE.6 (NOTNOT-MV (TYPEP (MAKE-ARRAY (QUOTE (3 5 6)) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))) (QUOTE (EVEN-ARRAY (UNSIGNED-BYTE 8))))) T)
;; Loading (DEFTEST DEFTYPE.7 (LET ((SYM (GENSYM))) (ASSERT (EQ (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (QUOTE (INTEGER 0 10))))) SYM)) (DOCUMENTATION SYM (QUOTE TYPE))) NIL)
;; Loading (DEFTEST DEFTYPE.8 (LET ((SYM (GENSYM))) (ASSERT (EQ (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL "FOO" (QUOTE (INTEGER 0 10))))) SYM)) (OR (DOCUMENTATION SYM (QUOTE TYPE)) "FOO")) "FOO")
;; Loading (DEFTEST DEFTYPE.9 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) (&OPTIONAL X) (SYSTEM.INTERNALS::BACKQUOTE (INTEGER 0 (SYSTEM.INTERNALS::BQ-COMMA X))))))) (VALUES (EQLT (EVAL FORM) SYM) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM))) (QUOTE UNSIGNED-BYTE))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE UNSIGNED-BYTE) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM))))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) 4)) (QUOTE (INTEGER 0 4)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (INTEGER 0 4)) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) 4)))) (LOOP FOR X IN (QUOTE (A -1 0 1 2 3 4 5 B)) COLLECT (NOTNOT (TYPEP X SYM))) (LOOP FOR X IN (QUOTE (A -1 0 1 2 3 4 5 B)) COLLECT (NOTNOT (TYPEP X (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) 4))))))) T (T T) (T T) (T T) (T T) (NIL NIL T T T T T T NIL) (NIL NIL T T T T T NIL NIL))
;; Loading (DEFTEST DEFTYPE.10 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) (&OPTIONAL (X 14)) (SYSTEM.INTERNALS::BACKQUOTE (INTEGER 0 (SYSTEM.INTERNALS::BQ-COMMA X))))))) (VALUES (EQLT (EVAL FORM) SYM) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM))) (QUOTE (INTEGER 0 14)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (INTEGER 0 14)) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM))))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) 4)) (QUOTE (INTEGER 0 4)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (INTEGER 0 4)) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) 4)))) (LOOP FOR X IN (QUOTE (A -1 0 1 2 3 4 5 14 15 B)) COLLECT (NOTNOT (TYPEP X SYM))) (LOOP FOR X IN (QUOTE (A -1 0 1 2 3 4 5 14 15 B)) COLLECT (NOTNOT (TYPEP X (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) 4))))))) T (T T) (T T) (T T) (T T) (NIL NIL T T T T T T T NIL NIL) (NIL NIL T T T T T NIL NIL NIL NIL))
;; Loading (DEFTEST DEFTYPE.11 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) (&KEY FOO BAR) (SYSTEM.INTERNALS::BACKQUOTE (INTEGER (SYSTEM.INTERNALS::BQ-COMMA FOO) (SYSTEM.INTERNALS::BQ-COMMA BAR))))))) (VALUES (EQLT (EVAL FORM) SYM) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM))) (QUOTE INTEGER))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE INTEGER) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM))))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :ALLOW-OTHER-KEYS NIL)) (QUOTE INTEGER))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE INTEGER) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :ALLOW-OTHER-KEYS NIL)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :XYZ 17 :ALLOW-OTHER-KEYS T)) (QUOTE INTEGER))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE INTEGER) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :ALLOW-OTHER-KEYS T ABC NIL)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :FOO 3)) (QUOTE (INTEGER 3)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (INTEGER 3)) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :FOO 3)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :BAR 10)) (QUOTE (INTEGER * 10)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (INTEGER * 10)) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :BAR 10)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :FOO 3 :FOO 4 :BAR 6)) (QUOTE (INTEGER 3 6)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (INTEGER 3 6)) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :FOO 3 :FOO 4 :BAR 6)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :BAR * :FOO (1))) (QUOTE (INTEGER 2)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (INTEGER 2)) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :BAR * :FOO (1))))))) T (T T) (T T) (T T) (T T) (T T) (T T) (T T) (T T) (T T) (T T) (T T) (T T) (T T) (T T))
;; Loading (DEFTEST DEFTYPE.12 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) (&KEY FOO BAR &ALLOW-OTHER-KEYS) (SYSTEM.INTERNALS::BACKQUOTE (INTEGER (SYSTEM.INTERNALS::BQ-COMMA FOO) (SYSTEM.INTERNALS::BQ-COMMA BAR))))))) (VALUES (EQLT (EVAL FORM) SYM) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :XYZ T)) (QUOTE INTEGER))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE INTEGER) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :XYZ T)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :ALLOW-OTHER-KEYS NIL ABC T)) (QUOTE INTEGER))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE INTEGER) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :ALLOW-OTHER-KEYS NIL ABC T)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :FOO -10 :BAR 20)) (QUOTE (INTEGER -10 20)))) (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE (INTEGER -10 20)) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) :FOO -10 :BAR 20)))))) T (T T) (T T) (T T) (T T) (T T) (T T))
;; Loading (DEFTEST DEFTYPE.13 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) (&REST ARGS) (IF ARGS (SYSTEM.INTERNALS::BACKQUOTE (MEMBER (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS))) NIL))))) (VALUES (EQLT (EVAL FORM) SYM) (MULTIPLE-VALUE-LIST (SUBTYPEP* (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM))) NIL)) (MULTIPLE-VALUE-LIST (SUBTYPEP* NIL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM))))) (NOTNOT (TYPEP (QUOTE A) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) A)))) (NOTNOT (TYPEP (QUOTE B) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) A)))) (NOTNOT (TYPEP (QUOTE *) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) A)))) (NOTNOT (TYPEP (QUOTE A) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) A B)))) (NOTNOT (TYPEP (QUOTE B) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) A B)))) (NOTNOT (TYPEP (QUOTE C) (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) A B)))))) T (T T) (T T) T NIL NIL T T NIL)
;; Loading (DEFTEST DEFTYPE.15 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LET ((A 1)) (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) (&OPTIONAL (X A)) (DECLARE (SPECIAL A)) (SYSTEM.INTERNALS::BACKQUOTE (INTEGER 0 (SYSTEM.INTERNALS::BQ-COMMA X)))))))) (VALUES (EQLT (EVAL FORM) SYM) (LET ((A 2)) (DECLARE (SPECIAL A)) (LOOP FOR I FROM -1 TO 3 COLLECT (TYPEP* I (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA SYM) 1))))) (LET ((A 2)) (DECLARE (SPECIAL A)) (LOOP FOR I FROM -1 TO 3 COLLECT (TYPEP* I SYM))))) T (NIL T T NIL NIL) (NIL T T NIL NIL))
;; Loading (DEFTEST DEFTYPE.16 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA SYM) (QUOTE INTEGER)))))) (VALUES (EQLT (EVAL FORM) SYM) (SUBTYPEP* SYM (QUOTE INTEGER)) (SUBTYPEP* (QUOTE INTEGER) SYM))) T T T)
;; Loading (DEFTEST DEFTYPE.17 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (VALUES (QUOTE INTEGER) T))))) (VALUES (EQLT (EVAL FORM) SYM) (SUBTYPEP* SYM (QUOTE INTEGER)) (SUBTYPEP* (QUOTE INTEGER) SYM))) T T T)
;; Loading (DEFTEST DEFTYPE.18 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL)))) (VALUES (EQLT (EVAL FORM) SYM) (SUBTYPEP* SYM NIL) (SUBTYPEP* NIL SYM))) T T T)
;; Loading (DEFTEST DEFTYPE.19 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (DECLARE (OPTIMIZE SPEED SAFETY DEBUG COMPILATION-SPEED SPACE)) (QUOTE INTEGER))))) (VALUES (EQLT (EVAL FORM) SYM) (SUBTYPEP* SYM (QUOTE INTEGER)) (SUBTYPEP* (QUOTE INTEGER) SYM))) T T T)
;; Loading (DEFTEST DEFTYPE.ERROR.1 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFTYPE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFTYPE.ERROR.2 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFTYPE)) (QUOTE (DEFTYPE NONEXISTENT-TYPE NIL NIL))) PROGRAM-ERROR) T)
;; Loading (DEFTEST DEFTYPE.ERROR.3 (SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFTYPE)) (QUOTE (DEFTYPE NONEXISTENT-TYPE NIL NIL)) NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "standard-generic-function.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/standard-generic-function.lsp C1AD0CB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (UNLESS (TYPEP (FUNCTION CONS) (QUOTE GENERIC-FUNCTION)) (DEFTEST STANDARD-GENERIC-FUNCTION.1 (PROGN (EVAL (QUOTE (DEFGENERIC SGF-CPL-GF.1 (X) (:METHOD ((X GENERIC-FUNCTION)) 1) (:METHOD ((X FUNCTION)) 2) (:METHOD ((X T)) 3)))) (VALUES (SGF-CPL-GF.1 (FUNCTION MAKE-INSTANCE)) (SGF-CPL-GF.1 (FUNCTION CONS)) (SGF-CPL-GF.1 (QUOTE A)))) 1 2 3) (DEFTEST STANDARD-GENERIC-FUNCTION.2 (PROGN (EVAL (QUOTE (DEFGENERIC SGF-CPL-GF.2 (X) (:METHOD ((X STANDARD-GENERIC-FUNCTION)) 1) (:METHOD ((X FUNCTION)) 2) (:METHOD ((X T)) 3)))) (VALUES (SGF-CPL-GF.2 (FUNCTION MAKE-INSTANCE)) (SGF-CPL-GF.2 (FUNCTION CONS)) (SGF-CPL-GF.2 (QUOTE A)))) 1 2 3))
;; Loading (LOAD "type-of.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/type-of.lsp C1B10DC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TYPE-OF.1 :NOTES :TYPE-OF/STRICT-BUILTINS (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) FOR FAILURES = (LOOP FOR TP2 IN *CL-ALL-TYPE-SYMBOLS* WHEN (AND (TYPEP X TP2) (NOT (SUBTYPEP TP TP2))) COLLECT TP2) WHEN FAILURES COLLECT (LIST X FAILURES)) NIL)
;; Loading (DEFTEST TYPE-OF.1-RELAXED (LOOP FOR X IN *UNIVERSE* FOR BUILTINS = (REMOVE X *CL-ALL-TYPE-SYMBOLS* :TEST (COMPLEMENT (FUNCTION TYPEP))) FOR TP = (TYPE-OF X) WHEN (AND BUILTINS (NOT (LOOP FOR TP2 IN BUILTINS THEREIS (SUBTYPEP TP TP2)))) COLLECT X) NIL)
;; Loading (DEFTEST TYPE-OF.2 (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) WHEN (AND (CONSP TP) (MEMBER (CAR TP) (QUOTE (AND EQL MEMBER NOT OR SATISFIES VALUES FUNCTION)))) COLLECT X) NIL)
;; Loading (DEFTEST TYPE-OF.3 (LOOP FOR X IN *UNIVERSE* UNLESS (TYPEP X (TYPE-OF X)) COLLECT X) NIL)
;; Loading (DEFTEST TYPE-OF.4 (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) FOR CLASS = (CLASS-OF X) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP CLASS)) (QUOTE (T T))) COLLECT X) NIL)
;; Loading (DEFTEST TYPE-OF.5 (LOOP FOR X IN *CL-CONDITION-TYPE-SYMBOLS* FOR CND = (MAKE-CONDITION X) FOR TP = (TYPE-OF CND) UNLESS (EQ X TP) COLLECT X) NIL)
;; Loading (DEFSTRUCT TYPE-OF.EXAMPLE-STRUCT A B C)
;; Loading (DEFTEST TYPE-OF.6 (TYPE-OF (MAKE-TYPE-OF.EXAMPLE-STRUCT)) TYPE-OF.EXAMPLE-STRUCT)
;; Loading (DEFCLASS TYPE-OF.EXAMPLE-CLASS NIL NIL)
;; Loading (DEFTEST TYPE-OF.7 (TYPE-OF (MAKE-INSTANCE (QUOTE TYPE-OF.EXAMPLE-CLASS))) TYPE-OF.EXAMPLE-CLASS)
;; Loading (DEFTEST TYPE-OF.8 (LET ((CLASS (EVAL (QUOTE (DEFCLASS TYPE-OF.EXAMPLE-CLASS-2 NIL ((A) (B) (C))))))) (SETF (CLASS-NAME CLASS) NIL) (EQT (TYPE-OF (MAKE-INSTANCE CLASS)) CLASS)) T)
;; Loading (DEFTEST TYPE-OF.9 (LET ((CLASS (EVAL (QUOTE (DEFCLASS TYPE-OF.EXAMPLE-CLASS-3 NIL ((A) (B) (C))))))) (SETF (FIND-CLASS (QUOTE TYPE-OF.EXAMPLE-CLASS-3)) NIL) (EQT (TYPE-OF (MAKE-INSTANCE CLASS)) CLASS)) T)
;; Loading (DEFTEST TYPE-OF.10 (LET* ((CLASS (EVAL (QUOTE (DEFCLASS TYPE-OF.EXAMPLE-CLASS-4 NIL ((A) (B) (C)))))) (OBJ (MAKE-INSTANCE CLASS))) (SETF (CLASS-NAME CLASS) NIL) (NOTNOT-MV (TYPEP OBJ CLASS))) T)
;; Loading (DEFTEST TYPE-OF.11 (LET* ((C #C(-1 1/2)) (TYPE (TYPE-OF C))) (NOTNOT (TYPEP C TYPE))) T)
;; Loading (DEFTEST TYPE-OF.ERROR.1 (SIGNALS-ERROR (TYPE-OF) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPE-OF.ERROR.2 (SIGNALS-ERROR (TYPE-OF NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "typep.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/typep.lsp C1BD4207>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TYPEP.ERROR.1 (SIGNALS-ERROR (TYPEP) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPEP.ERROR.2 (SIGNALS-ERROR (TYPEP NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPEP.ERROR.3 (SIGNALS-ERROR (TYPEP NIL T NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST TYPEP.ERROR.4 (SIGNALS-ERROR-ALWAYS (TYPEP NIL (QUOTE VALUES)) ERROR) T T)
;; Loading (DEFTEST TYPEP.ERROR.5 (SIGNALS-ERROR-ALWAYS (TYPEP NIL (QUOTE (VALUES))) ERROR) T T)
;; Loading (DEFTEST TYPEP.ERROR.6 (SIGNALS-ERROR-ALWAYS (TYPEP NIL (QUOTE (VALUES T T T T))) ERROR) T T)
;; Loading (DEFTEST TYPEP.ERROR.7 (SIGNALS-ERROR-ALWAYS (TYPEP NIL (QUOTE (FUNCTION NIL T))) ERROR) T T)
;; Loading (DEFTEST TYPEP-NIL-NULL (NOTNOT-MV (TYPEP NIL (QUOTE NULL))) T)
;; Loading (DEFTEST TYPEP-T-NULL (TYPEP T (QUOTE NULL)) NIL)
;; Loading (DEFTEST TYPEP.ENV.1 (NOTNOT-MV (TYPEP 0 (QUOTE BIT) NIL)) T)
;; Loading (DEFTEST TYPEP.ENV.2 (MACROLET ((%FOO (&ENVIRONMENT ENV) (NOTNOT-MV (TYPEP 0 (QUOTE BIT) ENV)))) (%FOO)) T)
;; Loading (DEFTEST TYPEP.ENV.3 (MACROLET ((%FOO (&ENVIRONMENT ENV) (NOTNOT-MV (TYPEP ENV (TYPE-OF ENV))))) (%FOO)) T)
;; Loading (DEFTEST TYPEP.1 (NOTNOT-MV (TYPEP (QUOTE A) (QUOTE (EQL A)))) T)
;; Loading (DEFTEST TYPEP.2 (NOTNOT-MV (TYPEP (QUOTE A) (QUOTE (AND (EQL A))))) T)
;; Loading (DEFTEST TYPEP.3 (NOTNOT-MV (TYPEP (QUOTE A) (QUOTE (OR (EQL A))))) T)
;; Loading (DEFTEST TYPEP.4 (TYPEP (QUOTE A) (QUOTE (EQL B))) NIL)
;; Loading (DEFTEST TYPEP.5 (TYPEP (QUOTE A) (QUOTE (AND (EQL B)))) NIL)
;; Loading (DEFTEST TYPEP.6 (TYPEP (QUOTE A) (QUOTE (OR (EQL B)))) NIL)
;; Loading (DEFTEST TYPEP.7 (NOTNOT-MV (TYPEP (QUOTE A) (QUOTE (SATISFIES SYMBOLP)))) T)
;; Loading (DEFTEST TYPEP.8 (TYPEP 10 (QUOTE (SATISFIES SYMBOLP))) NIL)
;; Loading (DEFTEST TYPEP.9 (LET ((CLASS (FIND-CLASS (QUOTE SYMBOL)))) (NOTNOT-MV (TYPEP (QUOTE A) CLASS))) T)
;; Loading (DEFTEST TYPEP.10 (LET ((CLASS (FIND-CLASS (QUOTE SYMBOL)))) (NOTNOT-MV (TYPEP (QUOTE A) (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA CLASS)))))) T)
;; Loading (DEFTEST TYPEP.11 (LET ((CLASS (FIND-CLASS (QUOTE SYMBOL)))) (TYPEP 10 CLASS)) NIL)
;; Loading (DEFTEST TYPEP.12 (LET ((CLASS (FIND-CLASS (QUOTE SYMBOL)))) (TYPEP 10 (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA CLASS))))) NIL)
;; Loading (DEFTEST TYPEP.13 (TYPEP (QUOTE A) (QUOTE (AND SYMBOL INTEGER))) NIL)
;; Loading (DEFTEST TYPEP.14 (NOTNOT-MV (TYPEP (QUOTE A) (QUOTE (OR SYMBOL INTEGER)))) T)
;; Loading (DEFTEST TYPEP.15 (NOTNOT-MV (TYPEP (QUOTE A) (QUOTE (OR INTEGER SYMBOL)))) T)
;; Loading (DEFTEST TYPEP.16 (LET ((C1 (FIND-CLASS (QUOTE NUMBER))) (C2 (FIND-CLASS (QUOTE SYMBOL)))) (NOTNOT-MV (TYPEP (QUOTE A) (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA C1) (SYSTEM.INTERNALS::BQ-COMMA C2)))))) T)
;; Loading (DEFTEST TYPEP.17 (LET ((C1 (FIND-CLASS (QUOTE NUMBER))) (C2 (FIND-CLASS (QUOTE SYMBOL)))) (NOTNOT-MV (TYPEP (QUOTE A) (SYSTEM.INTERNALS::BACKQUOTE (OR (SYSTEM.INTERNALS::BQ-COMMA C2) (SYSTEM.INTERNALS::BQ-COMMA C1)))))) T)
;; Loading (DEFTEST TYPEP.18 (LET ((I 0)) (VALUES (NOTNOT (TYPEP (INCF I) (QUOTE (AND (INTEGER 0 10) (INTEGER -5 6))))) I)) T 1)
;; Loading (DEFUN TYPEP.19-FN (REPS &OPTIONAL (PROB 0.5)) (LET* ((VEC "abcdefghijklmnopqrstuvwxyz")) (FLET ((%MAKE-RANDOM-TYPE NIL (SYSTEM.INTERNALS::BACKQUOTE (AND CHARACTER (MEMBER (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP FOR E ACROSS VEC WHEN (< (RANDOM 1.0) PROB) COLLECT E))))))) (LOOP FOR T1 = (%MAKE-RANDOM-TYPE) FOR T2 = (%MAKE-RANDOM-TYPE) FOR T3 = (SYSTEM.INTERNALS::BACKQUOTE (AND (SYSTEM.INTERNALS::BQ-COMMA T1) (SYSTEM.INTERNALS::BQ-COMMA T2))) FOR RESULT1 = (LOOP FOR E ACROSS VEC WHEN (IF (TYPEP E T3) (OR (NOT (TYPEP E T1)) (NOT (TYPEP E T2))) (AND (TYPEP E T1) (TYPEP E T2))) COLLECT E) REPEAT REPS WHEN RESULT1 NCONC (LIST RESULT1 T1 T2 T3)))))
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL) (COMPILE (QUOTE TYPEP.19-FN)))
;; Loading (DEFTEST TYPEP.19 (TYPEP.19-FN 1000) NIL)
;; Loading (LOAD "class-precedence-lists.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/class-precedence-lists.lsp C1CC0127>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (UNLESS NIL (REPORT-AND-IGNORE-ERRORS (DEFGENERIC CLASS-PRECEDENCE-LIST-FOO (X) (:METHOD-COMBINATION LIST) (:METHOD LIST ((X ARITHMETIC-ERROR)) (QUOTE ARITHMETIC-ERROR)) (:METHOD LIST ((X ARRAY)) (QUOTE ARRAY)) (:METHOD LIST ((X BIT-VECTOR)) (QUOTE BIT-VECTOR)) (:METHOD LIST ((X BROADCAST-STREAM)) (QUOTE BROADCAST-STREAM)) (:METHOD LIST ((X BUILT-IN-CLASS)) (QUOTE BUILT-IN-CLASS)) (:METHOD LIST ((X CELL-ERROR)) (QUOTE CELL-ERROR)) (:METHOD LIST ((X CHARACTER)) (QUOTE CHARACTER)) (:METHOD LIST ((X CLASS)) (QUOTE CLASS)) (:METHOD LIST ((X COMPLEX)) (QUOTE COMPLEX)) (:METHOD LIST ((X CONCATENATED-STREAM)) (QUOTE CONCATENATED-STREAM)) (:METHOD LIST ((X CONDITION)) (QUOTE CONDITION)) (:METHOD LIST ((X CONS)) (QUOTE CONS)) (:METHOD LIST ((X CONTROL-ERROR)) (QUOTE CONTROL-ERROR)) (:METHOD LIST ((X DIVISION-BY-ZERO)) (QUOTE DIVISION-BY-ZERO)) (:METHOD LIST ((X ECHO-STREAM)) (QUOTE ECHO-STREAM)) (:METHOD LIST ((X END-OF-FILE)) (QUOTE END-OF-FILE)) (:METHOD LIST ((X ERROR)) (QUOTE ERROR)) (:METHOD LIST ((X FILE-ERROR)) (QUOTE FILE-ERROR)) (:METHOD LIST ((X FILE-STREAM)) (QUOTE FILE-STREAM)) (:METHOD LIST ((X FLOAT)) (QUOTE FLOAT)) (:METHOD LIST ((X FLOATING-POINT-INEXACT)) (QUOTE FLOATING-POINT-INEXACT)) (:METHOD LIST ((X FLOATING-POINT-INVALID-OPERATION)) (QUOTE FLOATING-POINT-INVALID-OPERATION)) (:METHOD LIST ((X FLOATING-POINT-OVERFLOW)) (QUOTE FLOATING-POINT-OVERFLOW)) (:METHOD LIST ((X FLOATING-POINT-UNDERFLOW)) (QUOTE FLOATING-POINT-UNDERFLOW)) (:METHOD LIST ((X FUNCTION)) (QUOTE FUNCTION)) (:METHOD LIST ((X GENERIC-FUNCTION)) (QUOTE GENERIC-FUNCTION)) (:METHOD LIST ((X HASH-TABLE)) (QUOTE HASH-TABLE)) (:METHOD LIST ((X INTEGER)) (QUOTE INTEGER)) (:METHOD LIST ((X LIST)) (QUOTE LIST)) (:METHOD LIST ((X LOGICAL-PATHNAME)) (QUOTE LOGICAL-PATHNAME)) (:METHOD LIST ((X METHOD)) (QUOTE METHOD)) (:METHOD LIST ((X METHOD-COMBINATION)) (QUOTE METHOD-COMBINATION)) (:METHOD LIST ((X NULL)) (QUOTE NULL)) (:METHOD LIST ((X NUMBER)) (QUOTE NUMBER)) (:METHOD LIST ((X PACKAGE)) (QUOTE PACKAGE)) (:METHOD LIST ((X PACKAGE-ERROR)) (QUOTE PACKAGE-ERROR)) (:METHOD LIST ((X PARSE-ERROR)) (QUOTE PARSE-ERROR)) (:METHOD LIST ((X PATHNAME)) (QUOTE PATHNAME)) (:METHOD LIST ((X PRINT-NOT-READABLE)) (QUOTE PRINT-NOT-READABLE)) (:METHOD LIST ((X PROGRAM-ERROR)) (QUOTE PROGRAM-ERROR)) (:METHOD LIST ((X RANDOM-STATE)) (QUOTE RANDOM-STATE)) (:METHOD LIST ((X RATIO)) (QUOTE RATIO)) (:METHOD LIST ((X RATIONAL)) (QUOTE RATIONAL)) (:METHOD LIST ((X READER-ERROR)) (QUOTE READER-ERROR)) (:METHOD LIST ((X READTABLE)) (QUOTE READTABLE)) (:METHOD LIST ((X REAL)) (QUOTE REAL)) (:METHOD LIST ((X RESTART)) (QUOTE RESTART)) (:METHOD LIST ((X SEQUENCE)) (QUOTE SEQUENCE)) (:METHOD LIST ((X SERIOUS-CONDITION)) (QUOTE SERIOUS-CONDITION)) (:METHOD LIST ((X SIMPLE-CONDITION)) (QUOTE SIMPLE-CONDITION)) (:METHOD LIST ((X SIMPLE-ERROR)) (QUOTE SIMPLE-ERROR)) (:METHOD LIST ((X SIMPLE-TYPE-ERROR)) (QUOTE SIMPLE-TYPE-ERROR)) (:METHOD LIST ((X SIMPLE-WARNING)) (QUOTE SIMPLE-WARNING)) (:METHOD LIST ((X STANDARD-CLASS)) (QUOTE STANDARD-CLASS)) (:METHOD LIST ((X STANDARD-GENERIC-FUNCTION)) (QUOTE STANDARD-GENERIC-FUNCTION)) (:METHOD LIST ((X STANDARD-METHOD)) (QUOTE STANDARD-METHOD)) (:METHOD LIST ((X STANDARD-OBJECT)) (QUOTE STANDARD-OBJECT)) (:METHOD LIST ((X STORAGE-CONDITION)) (QUOTE STORAGE-CONDITION)) (:METHOD LIST ((X STREAM)) (QUOTE STREAM)) (:METHOD LIST ((X STREAM-ERROR)) (QUOTE STREAM-ERROR)) (:METHOD LIST ((X STRING)) (QUOTE STRING)) (:METHOD LIST ((X STRING-STREAM)) (QUOTE STRING-STREAM)) (:METHOD LIST ((X STRUCTURE-CLASS)) (QUOTE STRUCTURE-CLASS)) (:METHOD LIST ((X STRUCTURE-OBJECT)) (QUOTE STRUCTURE-OBJECT)) (:METHOD LIST ((X STYLE-WARNING)) (QUOTE STYLE-WARNING)) (:METHOD LIST ((X SYMBOL)) (QUOTE SYMBOL)) (:METHOD LIST ((X SYNONYM-STREAM)) (QUOTE SYNONYM-STREAM)) (:METHOD LIST ((X T)) (QUOTE T)) (:METHOD LIST ((X TWO-WAY-STREAM)) (QUOTE TWO-WAY-STREAM)) (:METHOD LIST ((X TYPE-ERROR)) (QUOTE TYPE-ERROR)) (:METHOD LIST ((X UNBOUND-SLOT)) (QUOTE UNBOUND-SLOT)) (:METHOD LIST ((X UNBOUND-VARIABLE)) (QUOTE UNBOUND-VARIABLE)) (:METHOD LIST ((X UNDEFINED-FUNCTION)) (QUOTE UNDEFINED-FUNCTION)) (:METHOD LIST ((X VECTOR)) (QUOTE VECTOR)) (:METHOD LIST ((X WARNING)) (QUOTE WARNING))))))
#<Simple-Error Unknown &KEY argument :METHOD-COMBINATION. Expected one of (:NAME :LAMBDA-LIST :METHOD-CLASS :DOCUMENTATION).>
;; Loading (DEFMACRO DEF-CPL-TEST (OBJFORM EXPECTED-CPL &OPTIONAL NAME) (LET* ((ORDERED (LOOP FOR E = EXPECTED-CPL THEN (CDR E) FOR X = (CAR E) FOR Y = (CADR E) WHILE Y ALWAYS (SUBTYPEP X Y)))) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (OR NAME (INTERN (CONCATENATE (QUOTE STRING) (SYMBOL-NAME (FIRST EXPECTED-CPL)) "-CPL") :CL-TEST))) (LET* ((OBJ (SYSTEM.INTERNALS::BQ-COMMA OBJFORM)) (CPL (CLASS-PRECEDENCE-LIST-FOO OBJ))) (OR (SYSTEM.INTERNALS::BQ-COMMA (IF ORDERED NIL (SYSTEM.INTERNALS::BACKQUOTE (AND (NOT (EQL (CLASS-OF OBJ) (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (FIRST EXPECTED-CPL)))))) (PROGN (FORMAT T "~%Note: ~S not a direct instance of ~A~%" (QUOTE (SYSTEM.INTERNALS::BQ-COMMA OBJFORM)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (FIRST EXPECTED-CPL)))) T))))) (AND (SYSTEM.INTERNALS::BQ-COMMA (IF ORDERED T (SYSTEM.INTERNALS::BACKQUOTE (EQL (FIRST CPL) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (FIRST EXPECTED-CPL))))))) (IS-NONCONTIGUOUS-SUBLIST-OF (QUOTE (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-CPL)) CPL)))) T))))
;; Loading (DEFMACRO DEF-COND-CPL-TEST (EXPECTED-CPL) (SYSTEM.INTERNALS::BACKQUOTE (DEF-CPL-TEST (MAKE-CONDITION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (FIRST EXPECTED-CPL)))) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-CPL))))
;; Loading (DEF-COND-CPL-TEST (ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (CELL-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (CONDITION T))
;; Loading (DEF-COND-CPL-TEST (CONTROL-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (DIVISION-BY-ZERO ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (END-OF-FILE STREAM-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (FILE-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (FLOATING-POINT-INEXACT ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (FLOATING-POINT-INVALID-OPERATION ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (FLOATING-POINT-OVERFLOW ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (FLOATING-POINT-UNDERFLOW ARITHMETIC-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (PACKAGE-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (PARSE-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (PRINT-NOT-READABLE ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (PROGRAM-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (READER-ERROR PARSE-ERROR STREAM-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (SIMPLE-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (SIMPLE-ERROR SIMPLE-CONDITION ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (SIMPLE-TYPE-ERROR SIMPLE-CONDITION TYPE-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (SIMPLE-WARNING SIMPLE-CONDITION WARNING CONDITION T))
;; Loading (DEF-COND-CPL-TEST (STORAGE-CONDITION SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (STREAM-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (STYLE-WARNING WARNING CONDITION T))
;; Loading (DEF-COND-CPL-TEST (TYPE-ERROR ERROR SERIOUS-CONDITION CONDITION T))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-COND-CPL-TEST (UNBOUND-SLOT CELL-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (UNBOUND-VARIABLE CELL-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (UNDEFINED-FUNCTION CELL-ERROR ERROR SERIOUS-CONDITION CONDITION T))
;; Loading (DEF-COND-CPL-TEST (WARNING CONDITION T))
;; Loading (DEF-CPL-TEST (MAKE-ARRAY (QUOTE (2 3 4))) (ARRAY T))
;; Loading (DEF-CPL-TEST (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :ADJUSTABLE T :FILL-POINTER 5) (BIT-VECTOR VECTOR ARRAY SEQUENCE T))
;; Loading (DEF-CPL-TEST (MAKE-BROADCAST-STREAM) (BROADCAST-STREAM STREAM T))
;; Loading (DEF-CPL-TEST (CLASS-OF (QUOTE SYMBOL)) (BUILT-IN-CLASS CLASS STANDARD-OBJECT T))
;; Loading (DEF-CPL-TEST #\a (CHARACTER T) CHARACTER-CPL.1)
;; Loading (DEF-CPL-TEST #C(1.0 2.0) (COMPLEX NUMBER T) COMPLEX-CPL.1)
;; Loading (DEF-CPL-TEST #C(1 2) (COMPLEX NUMBER T) COMPLEX-CPL.2)
;; Loading (DEF-CPL-TEST #C(1/2 2/3) (COMPLEX NUMBER T) COMPLEX-CPL.3)
;; Loading (DEF-CPL-TEST (MAKE-CONCATENATED-STREAM) (CONCATENATED-STREAM STREAM T))
;; Loading (DEF-CPL-TEST (QUOTE (A B C)) (CONS LIST SEQUENCE T))
;; Loading (DEF-CPL-TEST (LET ((OUT (MAKE-STRING-OUTPUT-STREAM))) (MAKE-ECHO-STREAM (MAKE-STRING-INPUT-STREAM "foo") OUT)) (ECHO-STREAM STREAM T))
;; Loading (DEF-CPL-TEST (OPEN "class-precedence-lists.lsp" :DIRECTION :PROBE) (FILE-STREAM STREAM T))
;; Loading (DEF-CPL-TEST 1.0 (FLOAT REAL NUMBER T) FLOAT-CPL.1)
;; Loading (DEF-CPL-TEST 1.0 (FLOAT REAL NUMBER T) FLOAT-CPL.2)
;; Loading (DEF-CPL-TEST 1.0 (FLOAT REAL NUMBER T) FLOAT-CPL.3)
;; Loading (DEF-CPL-TEST 1.0 (FLOAT REAL NUMBER T) FLOAT-CPL.4)
;; Loading (DEF-CPL-TEST (FUNCTION CAR) (FUNCTION T))
;; Loading (DEF-CPL-TEST (MAKE-HASH-TABLE) (HASH-TABLE T) HASH-TABLE-CPL.1)
;; Loading (DEF-CPL-TEST (MAKE-HASH-TABLE :TEST (QUOTE EQ)) (HASH-TABLE T) HASH-TABLE-CPL.2)
;; Loading (DEF-CPL-TEST (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)) (HASH-TABLE T) HASH-TABLE-CPL.3)
;; Loading (DEF-CPL-TEST 0 (INTEGER RATIONAL REAL NUMBER T) INTEGER-CPL.1)
;; Loading (DEF-CPL-TEST (1+ MOST-POSITIVE-FIXNUM) (INTEGER RATIONAL REAL NUMBER T) INTEGER-CPL.2)
;; Loading (DEF-CPL-TEST (1- MOST-NEGATIVE-FIXNUM) (INTEGER RATIONAL REAL NUMBER T) INTEGER-CPL.3)
;; Loading (DEF-CPL-TEST NIL (LIST SEQUENCE T) LIST-CPL.1)
;; Loading (DEF-CPL-TEST (QUOTE (A B C)) (LIST SEQUENCE T) LIST-CPL.2)
;; Loading (DEF-CPL-TEST NIL (NULL SYMBOL LIST SEQUENCE T))
;; Loading (DEF-CPL-TEST (FIND-PACKAGE "CL") (PACKAGE T))
;; Loading (DEF-CPL-TEST (PARSE-NAMESTRING (QUOTE "foo")) (PATHNAME T))
;; Loading (DEF-CPL-TEST *RANDOM-STATE* (RANDOM-STATE T))
;; Loading (DEF-CPL-TEST 5/3 (RATIO RATIONAL REAL NUMBER T))
;; Loading (DEF-CPL-TEST *READTABLE* (READTABLE T))
;; Loading (DEFCLASS CPL-EXAMPLE-CLASS NIL NIL)
;; Loading (DEF-CPL-TEST (FIND-CLASS (QUOTE CPL-EXAMPLE-CLASS)) (STANDARD-CLASS CLASS STANDARD-OBJECT T))
;; Loading (DEFGENERIC CPL-EXAMPLE-GF (X Y))
;; Loading (DEF-CPL-TEST (FUNCTION CPL-EXAMPLE-GF) (STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION FUNCTION T))
;; Loading (DEF-CPL-TEST (EVAL (QUOTE (DEFMETHOD CPL-EXAMPLE-GF ((X T) (Y T)) (LIST Y X)))) (STANDARD-METHOD METHOD STANDARD-OBJECT T))
;; Loading (DEF-CPL-TEST (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\a :FILL-POINTER T :ADJUSTABLE T) (STRING VECTOR ARRAY SEQUENCE T) STRING-CPL.1)
;; Loading (DEF-CPL-TEST "abcd" (STRING VECTOR ARRAY SEQUENCE T) STRING-CPL.2)
;; Loading (DEF-CPL-TEST (MAKE-STRING-INPUT-STREAM "abcdef") (STRING-STREAM STREAM T))
;; Loading (DEFSTRUCT CPL-EXAMPLE-STRUCTURE-CLASS A B C)
;; Loading (DEF-CPL-TEST (QUOTE A) (SYMBOL T))
;; Loading (DEFPARAMETER *CPL-INPUT-STREAM* (MAKE-STRING-INPUT-STREAM "foofoofoofoo"))
;; Loading (DEF-CPL-TEST (MAKE-SYNONYM-STREAM (QUOTE *CPL-INPUT-STREAM*)) (SYNONYM-STREAM STREAM T))
;; Loading (DEFPARAMETER *CPL-OUTPUT-STREAM* (MAKE-STRING-OUTPUT-STREAM))
;; Loading (DEF-CPL-TEST (MAKE-TWO-WAY-STREAM *CPL-INPUT-STREAM* *CPL-OUTPUT-STREAM*) (TWO-WAY-STREAM STREAM T))
;; Loading (DEF-CPL-TEST (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER T :ADJUSTABLE T :INITIAL-ELEMENT (QUOTE (A B C))) (VECTOR ARRAY SEQUENCE T))
;; Loading (LOAD "load-strings.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-strings.lsp 81C0D707>
;; Loading (LOAD "char-schar.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/char-schar.lsp 81C22667>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CHAR.1 (LET ((S "abcd")) (VALUES (CHAR S 0) (CHAR S 1) (CHAR S 2) (CHAR S 3))) #\a #\b #\c #\d)
;; Loading (DEFTEST CHAR.2 (LET ((S0 (COPY-SEQ "abcd")) (S1 (COPY-SEQ "abcd")) (S2 (COPY-SEQ "abcd")) (S3 (COPY-SEQ "abcd"))) (SETF (CHAR S0 0) #\X) (SETF (CHAR S1 1) #\X) (SETF (CHAR S2 2) #\X) (SETF (CHAR S3 3) #\X) (VALUES S0 S1 S2 S3)) "Xbcd" "aXcd" "abXd" "abcX")
;; Loading (DEFTEST CHAR.3 (LET ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e #\f))))) (SETF (CHAR S 3) #\X) S) "abcXef")
;; Loading (DEFTEST CHAR.4 (LET ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e #\f)) :FILL-POINTER 4))) (SETF (CHAR S 3) #\X) S) "abcX")
;; Loading (DEFTEST CHAR.5 (LET ((S (MAKE-STRING 5 :INITIAL-ELEMENT #\a))) (SETF (CHAR S 3) #\X) S) "aaaXa")
;; Loading (DEFTEST CHAR.6 (LET ((S (MAKE-STRING 5 :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (SETF (CHAR S 3) #\X) S) "aaaXa")
;; Loading (DEFTEST CHAR.7 (LET ((S (MAKE-STRING 5 :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE CHARACTER)))) (SETF (CHAR S 3) #\X) S) "aaaXa")
;; Loading (DEFTEST CHAR.8 (LET ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e #\f)) :FILL-POINTER 4))) (SETF (CHAR S 5) #\X) (SETF (FILL-POINTER S) 6) S) "abcdeX")
;; Loading (DEFTEST CHAR.9 (LET ((S (MAKE-STRING 5 :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (SETF (CHAR S 3) #\X) S) "aaaXa")
;; Loading (DEFTEST CHAR.10 (LET ((S (MAKE-STRING 5 :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE STANDARD-CHAR)))) (SETF (CHAR S 3) #\X) S) "aaaXa")
;; Loading (DEFTEST CHAR.ORDER.1 (LET ((I 0) A B) (VALUES (CHAR (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) 1)) I A B)) #\b 2 1 2)
;; Loading (DEFTEST CHAR.ORDER.2 (LET ((I 0) A B C (S (MAKE-STRING 5 :INITIAL-ELEMENT #\z))) (VALUES (SETF (CHAR (PROGN (SETF A (INCF I)) S) (PROGN (SETF B (INCF I)) 1)) (PROGN (SETF C (INCF I)) #\a)) S I A B C)) #\a "zazzz" 3 1 2 3)
;; Loading (DEFTEST CHAR.ERROR.1 (SIGNALS-ERROR (CHAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR.ERROR.2 (SIGNALS-ERROR (CHAR "abc") PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR.ERROR.3 (SIGNALS-ERROR (CHAR "abc" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SCHAR.1 (LET ((S "abcd")) (VALUES (SCHAR S 0) (SCHAR S 1) (SCHAR S 2) (SCHAR S 3))) #\a #\b #\c #\d)
;; Loading (DEFTEST SCHAR.2 (LET ((S0 (COPY-SEQ "abcd")) (S1 (COPY-SEQ "abcd")) (S2 (COPY-SEQ "abcd")) (S3 (COPY-SEQ "abcd"))) (SETF (SCHAR S0 0) #\X) (SETF (SCHAR S1 1) #\X) (SETF (SCHAR S2 2) #\X) (SETF (SCHAR S3 3) #\X) (VALUES S0 S1 S2 S3)) "Xbcd" "aXcd" "abXd" "abcX")
;; Loading (DEFTEST SCHAR.3 (LET ((S (MAKE-STRING 6 :INITIAL-ELEMENT #\x))) (SETF (SCHAR S 2) #\X) S) "xxXxxx")
;; Loading (DEFTEST SCHAR.4 (LET ((S (MAKE-STRING 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)))) (SETF (SCHAR S 2) #\X) S) "xxXxxx")
;; Loading (DEFTEST SCHAR.5 (LET ((S (MAKE-STRING 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE STANDARD-CHAR)))) (SETF (SCHAR S 2) #\X) S) "xxXxxx")
;; Loading (DEFTEST SCHAR.6 (LET ((S (MAKE-STRING 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (SETF (SCHAR S 2) #\X) S) "xxXxxx")
;; Loading (DEFTEST SCHAR.7 (LET ((S (MAKE-STRING 6 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE STANDARD-CHAR)))) (SETF (SCHAR S 2) #\X) S) "xxXxxx")
;; Loading (DEFTEST SCHAR.ORDER.1 (LET ((I 0) A B) (VALUES (SCHAR (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) 1)) I A B)) #\b 2 1 2)
;; Loading (DEFTEST SCHAR.ORDER.2 (LET ((I 0) A B C (S (COPY-SEQ "zzzzz"))) (VALUES (SETF (SCHAR (PROGN (SETF A (INCF I)) S) (PROGN (SETF B (INCF I)) 1)) (PROGN (SETF C (INCF I)) #\a)) S I A B C)) #\a "zazzz" 3 1 2 3)
;; Loading (DEFTEST SCHAR.ERROR.1 (SIGNALS-ERROR (SCHAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST SCHAR.ERROR.2 (SIGNALS-ERROR (SCHAR "abc") PROGRAM-ERROR) T)
;; Loading (DEFTEST SCHAR.ERROR.3 (SIGNALS-ERROR (SCHAR "abc" 1 NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string.lsp 81D29937>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STRING.1 (SUBTYPEP* (QUOTE STRING) (QUOTE ARRAY)) T T)
;; Loading (DEFTEST STRING.2 (SUBTYPEP* (QUOTE STRING) (QUOTE VECTOR)) T T)
;; Loading (DEFTEST STRING.3 (SUBTYPEP* (QUOTE STRING) (QUOTE SEQUENCE)) T T)
;; Loading (DEFTEST STRING.4 (LET ((S (STRING #\a))) (VALUES (NOTNOT (STRINGP S)) S)) T "a")
;; Loading (DEFTEST STRING.5 (LET ((S (STRING ""))) (VALUES (NOTNOT (STRINGP S)) S)) T "")
;; Loading (DEFTEST STRING.6 (LET ((S (STRING (QUOTE FOO)))) (VALUES (NOTNOT (STRINGP S)) S)) T "FOO")
;; Loading (DEFTEST STRING.7 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (HANDLER-CASE (STRINGP (STRING X)) (TYPE-ERROR NIL :CAUGHT))))) NIL)
;; Loading (DEFTEST STRING.8 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (ARRAY NIL (*))) (QUOTE STRING)) T T)
;; Loading (DEFTEST STRING.9 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (ARRAY NIL 1)) (QUOTE STRING)) T T)
;; Loading (DEFTEST STRING.10 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (STRING (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST STRING.11 (TYPEP* "abcd" (QUOTE STRING)) T)
;; Loading (DEFTEST STRING.12 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (TYPEP* (MAKE-ARRAY (QUOTE (17)) :ELEMENT-TYPE NIL) (QUOTE STRING)) T)
;; Loading (DEFTEST STRING.13 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (TYPEP* (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) (QUOTE STRING)) T)
;; Loading (DEFTEST STRING.14 (LET ((COUNT 0)) (LOOP FOR I BELOW (MIN CHAR-CODE-LIMIT 65536) FOR C = (CODE-CHAR I) FOR S = (AND C (STRING C)) WHEN (AND C (OR (NOT (STRINGP S)) (NOT (= (LENGTH S) 1)) (NOT (EQL C (CHAR S 0))))) COLLECT (PROGN (INCF COUNT) (LIST I C S)) UNTIL (>= COUNT 100))) NIL)
;; Loading (DEFTEST STRING.15 (WHEN (> CHAR-CODE-LIMIT 65536) (LOOP FOR I = (RANDOM CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S = (AND C (STRING C)) REPEAT 2000 WHEN (AND C (OR (NOT (STRINGP S)) (NOT (= (LENGTH S) 1)) (NOT (EQL C (CHAR S 0))))) COLLECT (LIST I C S))) NIL)
;; Loading (DEFTEST STRING.16 (CHECK-PREDICATE (FUNCTION (LAMBDA (S) (OR (NOT (STRINGP S)) (EQ S (STRING S)))))) NIL)
;; Loading (DEFTEST STRING.17 (TYPEP* "abc" (QUOTE (STRING))) T)
;; Loading (DEFTEST STRING.18 (TYPEP* "abc" (QUOTE (STRING *))) T)
;; Loading (DEFTEST STRING.19 (TYPEP* "abc" (QUOTE (STRING 3))) T)
;; Loading (DEFTEST STRING.20 (TYPEP* "abc" (QUOTE (STRING 2))) NIL)
;; Loading (DEFTEST STRING.21 (TYPEP* "abc" (QUOTE (STRING 4))) NIL)
;; Loading (DEFTEST STRING.22 (DO-SPECIAL-STRINGS (S "X") (ASSERT (TYPEP S (QUOTE STRING)))) NIL)
;; Loading (DEFTEST STRING.23 (DO-SPECIAL-STRINGS (S "X") (ASSERT (TYPEP S (QUOTE (STRING))))) NIL)
;; Loading (DEFTEST STRING.24 (DO-SPECIAL-STRINGS (S "X") (ASSERT (TYPEP S (QUOTE (STRING *))))) NIL)
;; Loading (DEFTEST STRING.25 (DO-SPECIAL-STRINGS (S "X") (OR (ARRAY-HAS-FILL-POINTER-P S) (ASSERT (TYPEP S (QUOTE (STRING 1)))))) NIL)
;; Loading (DEFTEST STRING.26 (LET ((I 0)) (VALUES (STRING (PROGN (INCF I) "")) I)) "" 1)
;; Loading (DEF-FOLD-TEST STRING.FOLD.1 (STRING #\A))
;; Loading (DEFTEST STRING.ERROR.1 (SIGNALS-ERROR (STRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING.ERROR.2 (SIGNALS-ERROR (STRING NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "base-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/base-string.lsp 81DFD9B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BASE-STRING.1 (SUBTYPEP* (QUOTE BASE-STRING) (QUOTE STRING)) T T)
;; Loading (DEFTEST BASE-STRING.2 (SUBTYPEP* (QUOTE BASE-STRING) (QUOTE VECTOR)) T T)
;; Loading (DEFTEST BASE-STRING.3 (SUBTYPEP* (QUOTE BASE-STRING) (QUOTE ARRAY)) T T)
;; Loading (DEFTEST BASE-STRING.4 (SUBTYPEP* (QUOTE BASE-STRING) (QUOTE SEQUENCE)) T T)
;; Loading (DEFTEST BASE-STRING.5 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (ARRAY NIL (*))) (QUOTE BASE-STRING)) NIL T)
;; Loading (DEFTEST BASE-STRING.6 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE STRING) (QUOTE BASE-STRING)) NIL T)
;; Loading (LOAD "simple-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/simple-string.lsp 81E380B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIMPLE-STRING.1 (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE STRING)) T T)
;; Loading (DEFTEST SIMPLE-STRING.2 (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE VECTOR)) T T)
;; Loading (DEFTEST SIMPLE-STRING.3 (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE SIMPLE-ARRAY)) T T)
;; Loading (DEFTEST SIMPLE-STRING.4 (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE ARRAY)) T T)
;; Loading (DEFTEST SIMPLE-STRING.5 (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE SEQUENCE)) T T)
;; Loading (DEFTEST SIMPLE-STRING.6 (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE (SIMPLE-ARRAY * (*)))) T T)
;; Loading (DEFTEST SIMPLE-STRING.7 (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE (SIMPLE-ARRAY * 1))) T T)
;; Loading (DEFTEST SIMPLE-STRING.8 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE (SIMPLE-ARRAY CHARACTER (*)))) NIL T)
;; Loading (DEFTEST SIMPLE-STRING.9 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE (SIMPLE-ARRAY BASE-CHAR (*)))) NIL T)
;; Loading (DEFTEST SIMPLE-STRING.10 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE SIMPLE-STRING) (QUOTE SIMPLE-BASE-STRING)) NIL T)
;; Loading (DEFTEST SIMPLE-STRING.11 :NOTES (:NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (SIMPLE-ARRAY NIL (*))) (QUOTE SIMPLE-STRING)) T T)
;; Loading (DEFTEST SIMPLE-STRING.12 :NOTES (:NIL-VECTORS-ARE-STRINGS) (TYPEP* (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) (QUOTE SIMPLE-STRING)) T)
;; Loading (DEFTEST SIMPLE-STRING.13 :NOTES (:NIL-VECTORS-ARE-STRINGS) (TYPEP* (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE NIL) (QUOTE SIMPLE-STRING)) T)
;; Loading (DEFTEST SIMPLE-STRING.14 (TYPEP* "abc" (QUOTE (SIMPLE-STRING))) T)
;; Loading (DEFTEST SIMPLE-STRING.15 (TYPEP* "abc" (QUOTE (SIMPLE-STRING *))) T)
;; Loading (DEFTEST SIMPLE-STRING.16 (TYPEP* "abc" (QUOTE (SIMPLE-STRING 3))) T)
;; Loading (DEFTEST SIMPLE-STRING.17 (TYPEP* "abc" (QUOTE (SIMPLE-STRING 2))) NIL)
;; Loading (DEFTEST SIMPLE-STRING.18 (TYPEP* "abc" (QUOTE (SIMPLE-STRING 4))) NIL)
;; Loading (LOAD "simple-base-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/simple-base-string.lsp 81EB7717>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIMPLE-BASE-STRING.1 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE STRING)) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.2 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE VECTOR)) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.3 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE SIMPLE-ARRAY)) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.4 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE ARRAY)) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.5 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE SEQUENCE)) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.6 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE BASE-STRING)) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.7 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE SIMPLE-STRING)) T T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.8 (SUBTYPEP* (QUOTE SIMPLE-BASE-STRING) (QUOTE SIMPLE-VECTOR)) NIL T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.9 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (SUBTYPEP* (QUOTE (SIMPLE-ARRAY NIL (*))) (QUOTE SIMPLE-BASE-STRING)) NIL T)
;; Loading (DEFTEST SIMPLE-BASE-STRING.10 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (TYPEP* (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) (QUOTE SIMPLE-BASE-STRING)) NIL)
;; Loading (DEFTEST SIMPLE-BASE-STRING.11 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (TYPEP* (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE NIL) (QUOTE SIMPLE-BASE-STRING)) NIL)
;; Loading (LOAD "simple-string-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/simple-string-p.lsp 81F15F47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SIMPLE-STRING-P.1 (CHECK-TYPE-PREDICATE (FUNCTION SIMPLE-STRING-P) (QUOTE SIMPLE-STRING)) NIL)
;; Loading (DEFTEST SIMPLE-STRING-P.2 (NOTNOT-MV (SIMPLE-STRING-P "ancd")) T)
;; Loading (DEFTEST SIMPLE-STRING-P.3 (SIMPLE-STRING-P 0) NIL)
;; Loading (DEFTEST SIMPLE-STRING-P.5 (NOTNOT-MV (SIMPLE-STRING-P (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\a #\a #\b))))) T)
;; Loading (DEFTEST SIMPLE-STRING-P.6 (NOTNOT-MV (SIMPLE-STRING-P (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE STANDARD-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\a #\a #\b))))) T)
;; Loading (DEFTEST SIMPLE-STRING-P.8 :NOTES (:NIL-VECTORS-ARE-STRINGS) (NOTNOT-MV (SIMPLE-STRING-P (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) T)
;; Loading (DEFTEST SIMPLE-STRING-P.9 :NOTES (:NIL-VECTORS-ARE-STRINGS) (NOTNOT-MV (SIMPLE-STRING-P (MAKE-ARRAY (QUOTE (37)) :ELEMENT-TYPE NIL))) T)
;; Loading (DEFTEST SIMPLE-STRING-P.10 (LET ((I 0)) (VALUES (NOTNOT (SIMPLE-STRING-P (PROGN (INCF I) ""))) I)) T 1)
;; Loading (DEFTEST SIMPLE-STRING-P.ERROR.1 (SIGNALS-ERROR (SIMPLE-STRING-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST SIMPLE-STRING-P.ERROR.2 (SIGNALS-ERROR (SIMPLE-STRING-P "" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "stringp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/stringp.lsp 81F7EB37>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STRINGP.1 (CHECK-TYPE-PREDICATE (FUNCTION STRINGP) (QUOTE STRING)) NIL)
;; Loading (DEFTEST STRINGP.2 (NOTNOT (STRINGP "abcd")) T)
;; Loading (DEFTEST STRINGP.3 (NOTNOT (STRINGP (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))) T)
;; Loading (DEFTEST STRINGP.4 (NOTNOT (STRINGP (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))) T)
;; Loading (DEFTEST STRINGP.5 (NOTNOT (STRINGP (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE STANDARD-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))) T)
;; Loading (DEFTEST STRINGP.6 (STRINGP 0) NIL)
;; Loading (DEFTEST STRINGP.7 (STRINGP #\a) NIL)
;; Loading (DEFTEST STRINGP.8 (LET* ((S (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\a)) (S2 (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO S :DISPLACED-INDEX-OFFSET 2))) (NOTNOT (STRINGP S2))) T)
;; Loading (DEFTEST STRINGP.9 :NOTES (:NIL-VECTORS-ARE-STRINGS) (NOTNOT-MV (STRINGP (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) T)
;; Loading (DEFTEST STRINGP.10 :NOTES (:NIL-VECTORS-ARE-STRINGS) (NOTNOT-MV (STRINGP (MAKE-ARRAY (QUOTE (37)) :ELEMENT-TYPE NIL))) T)
;; Loading (DEFTEST STRINGP.11 (NOTNOT (STRINGP (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))) T)
;; Loading (DEFTEST STRINGP.12 (NOTNOT (STRINGP (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))) T)
;; Loading (DEFTEST STRINGP.13 (NOTNOT (STRINGP (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))) T)
;; Loading (DEFTEST STRINGP.14 (NOTNOT (STRINGP (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))) T)
;; Loading (DEFTEST STRINGP.15 (LET ((I 0)) (VALUES (NOTNOT (STRINGP (PROGN (INCF I) ""))) I)) T 1)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST STRINGP.ERROR.1 (SIGNALS-ERROR (STRINGP) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRINGP.ERROR.2 (SIGNALS-ERROR (STRINGP "" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "string-upcase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string-upcase.lsp C18FF797>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STRING-UPCASE.1 (LET ((S "a")) (VALUES (STRING-UPCASE S) S)) "A" "a")
;; Loading (DEFTEST STRING-UPCASE.2 (LET ((S "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")) (VALUES (STRING-UPCASE S) S)) "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ" "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
;; Loading (DEFTEST STRING-UPCASE.3 (LET ((S "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ ")) (VALUES (STRING-UPCASE S) S)) "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ " "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ ")
;; Loading (DEFTEST STRING-UPCASE.4 (STRING-UPCASE #\a) "A")
;; Loading (DEFTEST STRING-UPCASE.5 (LET ((SYM (QUOTE \a))) (VALUES (STRING-UPCASE SYM) SYM)) "A" \a)
;; Loading (DEFTEST STRING-UPCASE.6 (LET ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e #\f))))) (VALUES (STRING-UPCASE S) S)) "ABCDEF" "abcdef")
;; Loading (DEFTEST STRING-UPCASE.7 (LET ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE STANDARD-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\b #\7 #\d #\e #\f))))) (VALUES (STRING-UPCASE S) S)) "AB7DEF" "ab7def")
;; Loading (DEFTEST STRING-UPCASE.8 (LET ((S "abcdef")) (VALUES (LOOP FOR I FROM 0 TO 6 COLLECT (STRING-UPCASE S :START I)) S)) ("ABCDEF" "aBCDEF" "abCDEF" "abcDEF" "abcdEF" "abcdeF" "abcdef") "abcdef")
;; Loading (DEFTEST STRING-UPCASE.9 (LET ((S "abcdef")) (VALUES (LOOP FOR I FROM 0 TO 6 COLLECT (STRING-UPCASE S :START I :END NIL)) S)) ("ABCDEF" "aBCDEF" "abCDEF" "abcDEF" "abcdEF" "abcdeF" "abcdef") "abcdef")
;; Loading (DEFTEST STRING-UPCASE.10 (LET ((S "abcde")) (VALUES (LOOP FOR I FROM 0 TO 4 COLLECT (LOOP FOR J FROM I TO 5 COLLECT (STRING-UPCASE S :START I :END J))) S)) (("abcde" "Abcde" "ABcde" "ABCde" "ABCDe" "ABCDE") ("abcde" "aBcde" "aBCde" "aBCDe" "aBCDE") ("abcde" "abCde" "abCDe" "abCDE") ("abcde" "abcDe" "abcDE") ("abcde" "abcdE")) "abcde")
;; Loading (DEFTEST STRING-UPCASE.11 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-UPCASE (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST STRING-UPCASE.12 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS "aB0cDefGHi") COLLECT (LIST S (STRING-UPCASE S))) (("aB0cD" "AB0CD") ("aB0cD" "AB0CD") ("aB0cD" "AB0CD")))
;; Loading (DEFTEST STRING-UPCASE.13 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S0 = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS "zZaB0cDefG") FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 2) COLLECT (LIST S (STRING-UPCASE S))) (("aB0cD" "AB0CD") ("aB0cD" "AB0CD") ("aB0cD" "AB0CD")))
;; Loading (DEFTEST STRING-UPCASE.14 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :ADJUSTABLE T :INITIAL-CONTENTS "aB0cD") COLLECT (LIST S (STRING-UPCASE S))) (("aB0cD" "AB0CD") ("aB0cD" "AB0CD") ("aB0cD" "AB0CD")))
;; Loading (DEFTEST STRING-UPCASE.ORDER.1 (LET ((I 0) A B C (S (COPY-SEQ "abcdef"))) (VALUES (STRING-UPCASE (PROGN (SETF A (INCF I)) S) :START (PROGN (SETF B (INCF I)) 1) :END (PROGN (SETF C (INCF I)) 4)) I A B C)) "aBCDef" 3 1 2 3)
;; Loading (DEFTEST STRING-UPCASE.ORDER.2 (LET ((I 0) A B C (S (COPY-SEQ "abcdef"))) (VALUES (STRING-UPCASE (PROGN (SETF A (INCF I)) S) :END (PROGN (SETF B (INCF I)) 4) :START (PROGN (SETF C (INCF I)) 1)) I A B C)) "aBCDef" 3 1 2 3)
;; Loading (DEF-FOLD-TEST STRING-UPCASE.FOLD.1 (STRING-UPCASE "abcde"))
;; Loading (DEFTEST STRING-UPCASE.ERROR.1 (SIGNALS-ERROR (STRING-UPCASE) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-UPCASE.ERROR.2 (SIGNALS-ERROR (STRING-UPCASE (COPY-SEQ "abc") :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-UPCASE.ERROR.3 (SIGNALS-ERROR (STRING-UPCASE (COPY-SEQ "abc") :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-UPCASE.ERROR.4 (SIGNALS-ERROR (STRING-UPCASE (COPY-SEQ "abc") :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-UPCASE.ERROR.5 (SIGNALS-ERROR (STRING-UPCASE (COPY-SEQ "abc") :END) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-UPCASE.ERROR.6 (SIGNALS-ERROR (STRING-UPCASE (COPY-SEQ "abc") 1 2) PROGRAM-ERROR) T)
;; Loading (LOAD "string-downcase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string-downcase.lsp C1A0F6A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STRING-DOWNCASE.1 (LET ((S "A")) (VALUES (STRING-DOWNCASE S) S)) "a" "A")
;; Loading (DEFTEST STRING-DOWNCASE.2 (LET ((S "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")) (VALUES (STRING-DOWNCASE S) S)) "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz" "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
;; Loading (DEFTEST STRING-DOWNCASE.3 (LET ((S "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ ")) (VALUES (STRING-DOWNCASE S) S)) "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ " "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ ")
;; Loading (DEFTEST STRING-DOWNCASE.4 (STRING-DOWNCASE #\A) "a")
;; Loading (DEFTEST STRING-DOWNCASE.5 (LET ((SYM (QUOTE A))) (VALUES (STRING-DOWNCASE SYM) SYM)) "a" A)
;; Loading (DEFTEST STRING-DOWNCASE.6 (LET ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\A #\B #\C #\D #\E #\F))))) (VALUES (STRING-DOWNCASE S) S)) "abcdef" "ABCDEF")
;; Loading (DEFTEST STRING-DOWNCASE.7 (LET ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE STANDARD-CHAR) :INITIAL-CONTENTS (QUOTE (#\A #\B #\7 #\D #\E #\F))))) (VALUES (STRING-DOWNCASE S) S)) "ab7def" "AB7DEF")
;; Loading (DEFTEST STRING-DOWNCASE.8 (LET ((S "ABCDEF")) (VALUES (LOOP FOR I FROM 0 TO 6 COLLECT (STRING-DOWNCASE S :START I)) S)) ("abcdef" "Abcdef" "ABcdef" "ABCdef" "ABCDef" "ABCDEf" "ABCDEF") "ABCDEF")
;; Loading (DEFTEST STRING-DOWNCASE.9 (LET ((S "ABCDEF")) (VALUES (LOOP FOR I FROM 0 TO 6 COLLECT (STRING-DOWNCASE S :START I :END NIL)) S)) ("abcdef" "Abcdef" "ABcdef" "ABCdef" "ABCDef" "ABCDEf" "ABCDEF") "ABCDEF")
;; Loading (DEFTEST STRING-DOWNCASE.10 (LET ((S "ABCDE")) (VALUES (LOOP FOR I FROM 0 TO 4 COLLECT (LOOP FOR J FROM I TO 5 COLLECT (STRING-INVERTCASE (STRING-DOWNCASE S :START I :END J)))) S)) (("abcde" "Abcde" "ABcde" "ABCde" "ABCDe" "ABCDE") ("abcde" "aBcde" "aBCde" "aBCDe" "aBCDE") ("abcde" "abCde" "abCDe" "abCDE") ("abcde" "abcDe" "abcDE") ("abcde" "abcdE")) "ABCDE")
;; Loading (DEFTEST STRING-DOWNCASE.11 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-DOWNCASE (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST STRING-DOWNCASE.12 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS "aB0cDefGHi") COLLECT (LIST S (STRING-DOWNCASE S))) (("aB0cD" "ab0cd") ("aB0cD" "ab0cd") ("aB0cD" "ab0cd")))
;; Loading (DEFTEST STRING-DOWNCASE.13 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S0 = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS "zZaB0cDefG") FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 2) COLLECT (LIST S (STRING-DOWNCASE S))) (("aB0cD" "ab0cd") ("aB0cD" "ab0cd") ("aB0cD" "ab0cd")))
;; Loading (DEFTEST STRING-DOWNCASE.14 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :ADJUSTABLE T :INITIAL-CONTENTS "aB0cD") COLLECT (LIST S (STRING-DOWNCASE S))) (("aB0cD" "ab0cd") ("aB0cD" "ab0cd") ("aB0cD" "ab0cd")))
;; Loading (DEFTEST STRING-DOWNCASE.ORDER.1 (LET ((I 0) A B C (S (COPY-SEQ "ABCDEF"))) (VALUES (STRING-DOWNCASE (PROGN (SETF A (INCF I)) S) :START (PROGN (SETF B (INCF I)) 1) :END (PROGN (SETF C (INCF I)) 4)) I A B C)) "AbcdEF" 3 1 2 3)
;; Loading (DEFTEST STRING-DOWNCASE.ORDER.2 (LET ((I 0) A B C (S (COPY-SEQ "ABCDEF"))) (VALUES (STRING-DOWNCASE (PROGN (SETF A (INCF I)) S) :END (PROGN (SETF B (INCF I)) 4) :START (PROGN (SETF C (INCF I)) 1)) I A B C)) "AbcdEF" 3 1 2 3)
;; Loading (DEF-FOLD-TEST STRING-DOWNCASE.FOLD.1 (STRING-DOWNCASE "ABCDE"))
;; Loading (DEFTEST STRING-DOWNCASE.ERROR.1 (SIGNALS-ERROR (STRING-DOWNCASE) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-DOWNCASE.ERROR.2 (SIGNALS-ERROR (STRING-DOWNCASE (COPY-SEQ "abc") :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-DOWNCASE.ERROR.3 (SIGNALS-ERROR (STRING-DOWNCASE (COPY-SEQ "abc") :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-DOWNCASE.ERROR.4 (SIGNALS-ERROR (STRING-DOWNCASE (COPY-SEQ "abc") :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-DOWNCASE.ERROR.5 (SIGNALS-ERROR (STRING-DOWNCASE (COPY-SEQ "abc") :END) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-DOWNCASE.ERROR.6 (SIGNALS-ERROR (STRING-DOWNCASE (COPY-SEQ "abc") 1 2) PROGRAM-ERROR) T)
;; Loading (LOAD "string-capitalize.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string-capitalize.lsp C1B21077>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STRING-CAPITALIZE.1 (LET ((S "abCd")) (VALUES (STRING-CAPITALIZE S) S)) "Abcd" "abCd")
;; Loading (DEFTEST STRING-CAPITALIZE.2 (LET ((S "0adA2Cdd3wXy")) (VALUES (STRING-CAPITALIZE S) S)) "0ada2cdd3wxy" "0adA2Cdd3wXy")
;; Loading (DEFTEST STRING-CAPITALIZE.3 (LET ((S "1a")) (VALUES (STRING-CAPITALIZE S) S)) "1a" "1a")
;; Loading (DEFTEST STRING-CAPITALIZE.4 (LET ((S "a1a")) (VALUES (STRING-CAPITALIZE S) S)) "A1a" "a1a")
;; Loading (DEFTEST STRING-CAPITALIZE.5 (LET ((S #\a)) (VALUES (STRING-CAPITALIZE S) S)) "A" #\a)
;; Loading (DEFTEST STRING-CAPITALIZE.6 (LET ((S (QUOTE \a\b\cD\e))) (VALUES (STRING-CAPITALIZE S) (SYMBOL-NAME S))) "Abcde" "abcDe")
;; Loading (DEFTEST STRING-CAPITALIZE.7 (LET ((S "ABCDEF")) (VALUES (LOOP FOR I FROM 0 TO 5 COLLECT (STRING-CAPITALIZE S :START I)) S)) ("Abcdef" "ABcdef" "ABCdef" "ABCDef" "ABCDEf" "ABCDEF") "ABCDEF")
;; Loading (DEFTEST STRING-CAPITALIZE.8 (LET ((S "ABCDEF")) (VALUES (LOOP FOR I FROM 0 TO 5 COLLECT (STRING-CAPITALIZE S :START I :END NIL)) S)) ("Abcdef" "ABcdef" "ABCdef" "ABCDef" "ABCDEf" "ABCDEF") "ABCDEF")
;; Loading (DEFTEST STRING-CAPITALIZE.9 (LET ((S "ABCDEF")) (VALUES (LOOP FOR I FROM 0 TO 6 COLLECT (STRING-CAPITALIZE S :END I)) S)) ("ABCDEF" "ABCDEF" "AbCDEF" "AbcDEF" "AbcdEF" "AbcdeF" "Abcdef") "ABCDEF")
;; Loading (DEFTEST STRING-CAPITALIZE.10 (LET ((S "ABCDEF")) (VALUES (LOOP FOR I FROM 0 TO 5 COLLECT (LOOP FOR J FROM I TO 6 COLLECT (STRING-CAPITALIZE S :START I :END J))) S)) (("ABCDEF" "ABCDEF" "AbCDEF" "AbcDEF" "AbcdEF" "AbcdeF" "Abcdef") ("ABCDEF" "ABCDEF" "ABcDEF" "ABcdEF" "ABcdeF" "ABcdef") ("ABCDEF" "ABCDEF" "ABCdEF" "ABCdeF" "ABCdef") ("ABCDEF" "ABCDEF" "ABCDeF" "ABCDef") ("ABCDEF" "ABCDEF" "ABCDEf") ("ABCDEF" "ABCDEF")) "ABCDEF")
;; Loading (DEFTEST STRING-CAPITALIZE.11 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-CAPITALIZE (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST STRING-CAPITALIZE.12 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS "aB0cDefGHi") COLLECT (LIST S (STRING-CAPITALIZE S))) (("aB0cD" "Ab0cd") ("aB0cD" "Ab0cd") ("aB0cD" "Ab0cd")))
;; Loading (DEFTEST STRING-CAPITALIZE.13 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S0 = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS "zZaB0cDefG") FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 2) COLLECT (LIST S (STRING-CAPITALIZE S))) (("aB0cD" "Ab0cd") ("aB0cD" "Ab0cd") ("aB0cD" "Ab0cd")))
;; Loading (DEFTEST STRING-CAPITALIZE.14 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :ADJUSTABLE T :INITIAL-CONTENTS "aB0cD") COLLECT (LIST S (STRING-CAPITALIZE S))) (("aB0cD" "Ab0cd") ("aB0cD" "Ab0cd") ("aB0cD" "Ab0cd")))
;; Loading (DEFTEST STRING-CAPITALIZE.ORDER.1 (LET ((I 0) A B C (S (COPY-SEQ "abcdef"))) (VALUES (STRING-CAPITALIZE (PROGN (SETF A (INCF I)) S) :START (PROGN (SETF B (INCF I)) 1) :END (PROGN (SETF C (INCF I)) 4)) I A B C)) "aBcdef" 3 1 2 3)
;; Loading (DEFTEST STRING-CAPITALIZE.ORDER.2 (LET ((I 0) A B C (S (COPY-SEQ "abcdef"))) (VALUES (STRING-CAPITALIZE (PROGN (SETF A (INCF I)) S) :END (PROGN (SETF B (INCF I)) 4) :START (PROGN (SETF C (INCF I)) 1)) I A B C)) "aBcdef" 3 1 2 3)
;; Loading (DEF-FOLD-TEST STRING-CAPITALIZE.FOLD.1 (STRING-CAPITALIZE "ABCDE"))
;; Loading (DEFTEST STRING-CAPITALIZE.ERROR.1 (SIGNALS-ERROR (STRING-CAPITALIZE) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-CAPITALIZE.ERROR.2 (SIGNALS-ERROR (STRING-CAPITALIZE (COPY-SEQ "abc") :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-CAPITALIZE.ERROR.3 (SIGNALS-ERROR (STRING-CAPITALIZE (COPY-SEQ "abc") :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-CAPITALIZE.ERROR.4 (SIGNALS-ERROR (STRING-CAPITALIZE (COPY-SEQ "abc") :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-CAPITALIZE.ERROR.5 (SIGNALS-ERROR (STRING-CAPITALIZE (COPY-SEQ "abc") :END) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-CAPITALIZE.ERROR.6 (SIGNALS-ERROR (STRING-CAPITALIZE (COPY-SEQ "abc") 1 2) PROGRAM-ERROR) T)
;; Loading (LOAD "nstring-upcase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nstring-upcase.lsp C1C2C337>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NSTRING-UPCASE.1 (LET* ((S (COPY-SEQ "a")) (S2 (NSTRING-UPCASE S))) (VALUES (EQT S S2) S)) T "A")
;; Loading (DEFTEST NSTRING-UPCASE.2 (LET* ((S (COPY-SEQ "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")) (S2 (NSTRING-UPCASE S))) (VALUES (EQT S S2) S)) T "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")
;; Loading (DEFTEST NSTRING-UPCASE.3 (LET* ((S (COPY-SEQ "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ ")) (S2 (NSTRING-UPCASE S))) (VALUES (EQT S S2) S)) T "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ ")
;; Loading (DEFTEST NSTRING-UPCASE.6 (LET* ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d #\e #\f)))) (S2 (NSTRING-UPCASE S))) (VALUES (EQT S S2) S)) T "ABCDEF")
;; Loading (DEFTEST NSTRING-UPCASE.7 (LET* ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE STANDARD-CHAR) :INITIAL-CONTENTS (QUOTE (#\a #\b #\7 #\d #\e #\f)))) (S2 (NSTRING-UPCASE S))) (VALUES (EQT S S2) S)) T "AB7DEF")
;; Loading (DEFTEST NSTRING-UPCASE.8 (LET ((S "abcdef")) (LOOP FOR I FROM 0 TO 6 COLLECT (NSTRING-UPCASE (COPY-SEQ S) :START I))) ("ABCDEF" "aBCDEF" "abCDEF" "abcDEF" "abcdEF" "abcdeF" "abcdef"))
;; Loading (DEFTEST NSTRING-UPCASE.9 (LET ((S "abcdef")) (LOOP FOR I FROM 0 TO 6 COLLECT (NSTRING-UPCASE (COPY-SEQ S) :START I :END NIL))) ("ABCDEF" "aBCDEF" "abCDEF" "abcDEF" "abcdEF" "abcdeF" "abcdef"))
;; Loading (DEFTEST NSTRING-UPCASE.10 (LET ((S "abcde")) (LOOP FOR I FROM 0 TO 4 COLLECT (LOOP FOR J FROM I TO 5 COLLECT (NSTRING-UPCASE (COPY-SEQ S) :START I :END J)))) (("abcde" "Abcde" "ABcde" "ABCde" "ABCDe" "ABCDE") ("abcde" "aBcde" "aBCde" "aBCDe" "aBCDE") ("abcde" "abCde" "abCDe" "abCDE") ("abcde" "abcDe" "abcDE") ("abcde" "abcdE")))
;; Loading (DEFTEST NSTRING-UPCASE.11 :NOTES (:NIL-VECTORS-ARE-STRINGS) (NSTRING-UPCASE (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST NSTRING-UPCASE.12 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS "aB0cDefGHi") COLLECT (LIST (COPY-SEQ S) (COPY-SEQ (NSTRING-UPCASE S)) (COPY-SEQ S) (PROGN (SETF (FILL-POINTER S) 10) (COPY-SEQ S)))) (("aB0cD" "AB0CD" "AB0CD" "AB0CDefGHi") ("aB0cD" "AB0CD" "AB0CD" "AB0CDefGHi") ("aB0cD" "AB0CD" "AB0CD" "AB0CDefGHi")))
;; Loading (DEFTEST NSTRING-UPCASE.13 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S0 = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS "zZaB0cDefG") FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 2) COLLECT (LIST (COPY-SEQ S) (NSTRING-UPCASE S) (COPY-SEQ S) S0)) (("aB0cD" "AB0CD" "AB0CD" "zZAB0CDefG") ("aB0cD" "AB0CD" "AB0CD" "zZAB0CDefG") ("aB0cD" "AB0CD" "AB0CD" "zZAB0CDefG")))
;; Loading (DEFTEST NSTRING-UPCASE.14 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :ADJUSTABLE T :INITIAL-CONTENTS "aB0cD") COLLECT (LIST (COPY-SEQ S) (NSTRING-UPCASE S) (COPY-SEQ S))) (("aB0cD" "AB0CD" "AB0CD") ("aB0cD" "AB0CD" "AB0CD") ("aB0cD" "AB0CD" "AB0CD")))
;; Loading (DEFTEST NSTRING-UPCASE.ORDER.1 (LET ((I 0) A B C (S (COPY-SEQ "abcdef"))) (VALUES (NSTRING-UPCASE (PROGN (SETF A (INCF I)) S) :START (PROGN (SETF B (INCF I)) 1) :END (PROGN (SETF C (INCF I)) 4)) I A B C)) "aBCDef" 3 1 2 3)
;; Loading (DEFTEST NSTRING-UPCASE.ORDER.2 (LET ((I 0) A B C (S (COPY-SEQ "abcdef"))) (VALUES (NSTRING-UPCASE (PROGN (SETF A (INCF I)) S) :END (PROGN (SETF B (INCF I)) 4) :START (PROGN (SETF C (INCF I)) 1)) I A B C)) "aBCDef" 3 1 2 3)
;; Loading (DEFTEST NSTRING-UPCASE.ERROR.1 (SIGNALS-ERROR (NSTRING-UPCASE) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-UPCASE.ERROR.2 (SIGNALS-ERROR (NSTRING-UPCASE (COPY-SEQ "abc") :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-UPCASE.ERROR.3 (SIGNALS-ERROR (NSTRING-UPCASE (COPY-SEQ "abc") :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-UPCASE.ERROR.4 (SIGNALS-ERROR (NSTRING-UPCASE (COPY-SEQ "abc") :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-UPCASE.ERROR.5 (SIGNALS-ERROR (NSTRING-UPCASE (COPY-SEQ "abc") :END) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-UPCASE.ERROR.6 (SIGNALS-ERROR (NSTRING-UPCASE (COPY-SEQ "abc") 1 2) PROGRAM-ERROR) T)
;; Loading (LOAD "nstring-downcase.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nstring-downcase.lsp C1D428C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NSTRING-DOWNCASE.1 (LET* ((S (COPY-SEQ "A")) (S2 (NSTRING-DOWNCASE S))) (VALUES (EQT S S2) S)) T "a")
;; Loading (DEFTEST NSTRING-DOWNCASE.2 (LET* ((S (COPY-SEQ "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")) (S2 (NSTRING-DOWNCASE S))) (VALUES (EQT S S2) S)) T "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz")
;; Loading (DEFTEST NSTRING-DOWNCASE.3 (LET* ((S (COPY-SEQ "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ ")) (S2 (NSTRING-DOWNCASE S))) (VALUES (EQT S S2) S)) T "0123456789!@#$%^&*()_-+=|\\{}[]:\";'<>?,./ ")
;; Loading (DEFTEST NSTRING-DOWNCASE.6 (LET* ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\A #\B #\C #\D #\E #\F)))) (S2 (NSTRING-DOWNCASE S))) (VALUES (EQT S S2) S)) T "abcdef")
;; Loading (DEFTEST NSTRING-DOWNCASE.7 (LET* ((S (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE STANDARD-CHAR) :INITIAL-CONTENTS (QUOTE (#\A #\B #\7 #\D #\E #\F)))) (S2 (NSTRING-DOWNCASE S))) (VALUES (EQT S S2) S)) T "ab7def")
;; Loading (DEFTEST NSTRING-DOWNCASE.8 (LET ((S "ABCDEF")) (LOOP FOR I FROM 0 TO 6 COLLECT (NSTRING-DOWNCASE (COPY-SEQ S) :START I))) ("abcdef" "Abcdef" "ABcdef" "ABCdef" "ABCDef" "ABCDEf" "ABCDEF"))
;; Loading (DEFTEST NSTRING-DOWNCASE.9 (LET ((S "ABCDEF")) (LOOP FOR I FROM 0 TO 6 COLLECT (NSTRING-DOWNCASE (COPY-SEQ S) :START I :END NIL))) ("abcdef" "Abcdef" "ABcdef" "ABCdef" "ABCDef" "ABCDEf" "ABCDEF"))
;; Loading (DEFTEST NSTRING-DOWNCASE.10 (LET ((S "ABCDE")) (LOOP FOR I FROM 0 TO 4 COLLECT (LOOP FOR J FROM I TO 5 COLLECT (STRING-INVERTCASE (NSTRING-DOWNCASE (COPY-SEQ S) :START I :END J))))) (("abcde" "Abcde" "ABcde" "ABCde" "ABCDe" "ABCDE") ("abcde" "aBcde" "aBCde" "aBCDe" "aBCDE") ("abcde" "abCde" "abCDe" "abCDE") ("abcde" "abcDe" "abcDE") ("abcde" "abcdE")))
;; Loading (DEFTEST NSTRING-DOWNCASE.11 :NOTES (:NIL-VECTORS-ARE-STRINGS) (NSTRING-DOWNCASE (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST NSTRING-DOWNCASE.12 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS "aB0cDefGHi") COLLECT (LIST (COPY-SEQ S) (COPY-SEQ (NSTRING-DOWNCASE S)) (COPY-SEQ S) (PROGN (SETF (FILL-POINTER S) 10) (COPY-SEQ S)))) (("aB0cD" "ab0cd" "ab0cd" "ab0cdefGHi") ("aB0cD" "ab0cd" "ab0cd" "ab0cdefGHi") ("aB0cD" "ab0cd" "ab0cd" "ab0cdefGHi")))
;; Loading (DEFTEST NSTRING-DOWNCASE.13 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S0 = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS "zZaB0cDefG") FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 2) COLLECT (LIST (COPY-SEQ S) (NSTRING-DOWNCASE S) (COPY-SEQ S) S0)) (("aB0cD" "ab0cd" "ab0cd" "zZab0cdefG") ("aB0cD" "ab0cd" "ab0cd" "zZab0cdefG") ("aB0cD" "ab0cd" "ab0cd" "zZab0cdefG")))
;; Loading (DEFTEST NSTRING-DOWNCASE.14 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :ADJUSTABLE T :INITIAL-CONTENTS "aB0cD") COLLECT (LIST (COPY-SEQ S) (NSTRING-DOWNCASE S) (COPY-SEQ S))) (("aB0cD" "ab0cd" "ab0cd") ("aB0cD" "ab0cd" "ab0cd") ("aB0cD" "ab0cd" "ab0cd")))
;; Loading (DEFTEST NSTRING-DOWNCASE.ORDER.1 (LET ((I 0) A B C (S (COPY-SEQ "ABCDEF"))) (VALUES (NSTRING-DOWNCASE (PROGN (SETF A (INCF I)) S) :START (PROGN (SETF B (INCF I)) 1) :END (PROGN (SETF C (INCF I)) 4)) I A B C)) "AbcdEF" 3 1 2 3)
;; Loading (DEFTEST NSTRING-DOWNCASE.ORDER.2 (LET ((I 0) A B C (S (COPY-SEQ "ABCDEF"))) (VALUES (NSTRING-DOWNCASE (PROGN (SETF A (INCF I)) S) :END (PROGN (SETF B (INCF I)) 4) :START (PROGN (SETF C (INCF I)) 1)) I A B C)) "AbcdEF" 3 1 2 3)
;; Loading (DEFTEST NSTRING-DOWNCASE.ERROR.1 (SIGNALS-ERROR (NSTRING-DOWNCASE) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-DOWNCASE.ERROR.2 (SIGNALS-ERROR (NSTRING-DOWNCASE (COPY-SEQ "abc") :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-DOWNCASE.ERROR.3 (SIGNALS-ERROR (NSTRING-DOWNCASE (COPY-SEQ "abc") :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-DOWNCASE.ERROR.4 (SIGNALS-ERROR (NSTRING-DOWNCASE (COPY-SEQ "abc") :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-DOWNCASE.ERROR.5 (SIGNALS-ERROR (NSTRING-DOWNCASE (COPY-SEQ "abc") :END) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-DOWNCASE.ERROR.6 (SIGNALS-ERROR (NSTRING-DOWNCASE (COPY-SEQ "abc") 1 2) PROGRAM-ERROR) T)
;; Loading (LOAD "nstring-capitalize.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/nstring-capitalize.lsp C1E5E3D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NSTRING-CAPITALIZE.1 (LET* ((S (COPY-SEQ "abCd")) (S2 (NSTRING-CAPITALIZE S))) (VALUES (EQT S S2) S)) T "Abcd")
;; Loading (DEFTEST NSTRING-CAPITALIZE.2 (LET* ((S (COPY-SEQ "0adA2Cdd3wXy")) (S2 (NSTRING-CAPITALIZE S))) (VALUES (EQT S S2) S)) T "0ada2cdd3wxy")
;; Loading (DEFTEST NSTRING-CAPITALIZE.3 (LET* ((S (COPY-SEQ "1a")) (S2 (NSTRING-CAPITALIZE S))) (VALUES (EQT S S2) S)) T "1a")
;; Loading (DEFTEST NSTRING-CAPITALIZE.4 (LET* ((S (COPY-SEQ "a1a")) (S2 (NSTRING-CAPITALIZE S))) (VALUES (EQT S S2) S)) T "A1a")
;; Loading (DEFTEST NSTRING-CAPITALIZE.7 (LET ((S "ABCDEF")) (LOOP FOR I FROM 0 TO 5 COLLECT (NSTRING-CAPITALIZE (COPY-SEQ S) :START I))) ("Abcdef" "ABcdef" "ABCdef" "ABCDef" "ABCDEf" "ABCDEF"))
;; Loading (DEFTEST NSTRING-CAPITALIZE.8 (LET ((S "ABCDEF")) (LOOP FOR I FROM 0 TO 5 COLLECT (NSTRING-CAPITALIZE (COPY-SEQ S) :START I :END NIL))) ("Abcdef" "ABcdef" "ABCdef" "ABCDef" "ABCDEf" "ABCDEF"))
;; Loading (DEFTEST NSTRING-CAPITALIZE.9 (LET ((S "ABCDEF")) (LOOP FOR I FROM 0 TO 6 COLLECT (NSTRING-CAPITALIZE (COPY-SEQ S) :END I))) ("ABCDEF" "ABCDEF" "AbCDEF" "AbcDEF" "AbcdEF" "AbcdeF" "Abcdef"))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST NSTRING-CAPITALIZE.10 (LET ((S "ABCDEF")) (LOOP FOR I FROM 0 TO 5 COLLECT (LOOP FOR J FROM I TO 6 COLLECT (NSTRING-CAPITALIZE (COPY-SEQ S) :START I :END J)))) (("ABCDEF" "ABCDEF" "AbCDEF" "AbcDEF" "AbcdEF" "AbcdeF" "Abcdef") ("ABCDEF" "ABCDEF" "ABcDEF" "ABcdEF" "ABcdeF" "ABcdef") ("ABCDEF" "ABCDEF" "ABCdEF" "ABCdeF" "ABCdef") ("ABCDEF" "ABCDEF" "ABCDeF" "ABCDef") ("ABCDEF" "ABCDEF" "ABCDEf") ("ABCDEF" "ABCDEF")))
;; Loading (DEFTEST NSTRING-CAPITALIZE.11 (NSTRING-CAPITALIZE "") "")
;; Loading (DEFTEST NSTRING-CAPITALIZE.12 :NOTES (:NIL-VECTORS-ARE-STRINGS) (NSTRING-CAPITALIZE (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST NSTRING-CAPITALIZE.13 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS "aB0cDefGHi") COLLECT (LIST (COPY-SEQ S) (COPY-SEQ (NSTRING-CAPITALIZE S)) (COPY-SEQ S) (PROGN (SETF (FILL-POINTER S) 10) (COPY-SEQ S)))) (("aB0cD" "Ab0cd" "Ab0cd" "Ab0cdefGHi") ("aB0cD" "Ab0cd" "Ab0cd" "Ab0cdefGHi") ("aB0cD" "Ab0cd" "Ab0cd" "Ab0cdefGHi")))
;; Loading (DEFTEST NSTRING-CAPITALIZE.14 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S0 = (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS "zZaB0cDefG") FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 2) COLLECT (LIST (COPY-SEQ S) (NSTRING-CAPITALIZE S) (COPY-SEQ S) S0)) (("aB0cD" "Ab0cd" "Ab0cd" "zZAb0cdefG") ("aB0cD" "Ab0cd" "Ab0cd" "zZAb0cdefG") ("aB0cD" "Ab0cd" "Ab0cd" "zZAb0cdefG")))
;; Loading (DEFTEST NSTRING-CAPITALIZE.15 (LOOP FOR TYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S = (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE TYPE :ADJUSTABLE T :INITIAL-CONTENTS "aB0cD") COLLECT (LIST (COPY-SEQ S) (NSTRING-CAPITALIZE S) (COPY-SEQ S))) (("aB0cD" "Ab0cd" "Ab0cd") ("aB0cD" "Ab0cd" "Ab0cd") ("aB0cD" "Ab0cd" "Ab0cd")))
;; Loading (DEFTEST NSTRING-CAPITALIZE.ORDER.1 (LET ((I 0) A B C (S (COPY-SEQ "abcdef"))) (VALUES (NSTRING-CAPITALIZE (PROGN (SETF A (INCF I)) S) :START (PROGN (SETF B (INCF I)) 1) :END (PROGN (SETF C (INCF I)) 4)) I A B C)) "aBcdef" 3 1 2 3)
;; Loading (DEFTEST NSTRING-CAPITALIZE.ORDER.2 (LET ((I 0) A B C (S (COPY-SEQ "abcdef"))) (VALUES (NSTRING-CAPITALIZE (PROGN (SETF A (INCF I)) S) :END (PROGN (SETF B (INCF I)) 4) :START (PROGN (SETF C (INCF I)) 1)) I A B C)) "aBcdef" 3 1 2 3)
;; Loading (DEFTEST NSTRING-CAPITALIZE.ERROR.1 (SIGNALS-ERROR (NSTRING-CAPITALIZE) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-CAPITALIZE.ERROR.2 (SIGNALS-ERROR (NSTRING-CAPITALIZE (COPY-SEQ "abc") :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-CAPITALIZE.ERROR.3 (SIGNALS-ERROR (NSTRING-CAPITALIZE (COPY-SEQ "abc") :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-CAPITALIZE.ERROR.4 (SIGNALS-ERROR (NSTRING-CAPITALIZE (COPY-SEQ "abc") :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-CAPITALIZE.ERROR.5 (SIGNALS-ERROR (NSTRING-CAPITALIZE (COPY-SEQ "abc") :END) PROGRAM-ERROR) T)
;; Loading (DEFTEST NSTRING-CAPITALIZE.ERROR.6 (SIGNALS-ERROR (NSTRING-CAPITALIZE (COPY-SEQ "abc") 1 2) PROGRAM-ERROR) T)
;; Loading (LOAD "string-trim.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string-trim.lsp 819B26D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STRING-TRIM.1 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.2 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM (QUOTE (#\a #\b)) S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.3 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM #(#\a #\b) S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.4 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b))) S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.5 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE CHARACTER)) S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.6 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE STANDARD-CHAR)) S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.7 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE BASE-CHAR)) S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.8 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM (MAKE-ARRAY 4 :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 2) S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.8A (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-TRIM (MAKE-ARRAY 4 :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 2) S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.9 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE CHARACTER))) (S2 (STRING-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.10 (LET* ((S (MAKE-ARRAY 9 :INITIAL-CONTENTS "abcdabadd" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 7)) (S2 (STRING-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.10A (LET* ((S (MAKE-ARRAY 9 :INITIAL-CONTENTS "abcdabadd" :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :FILL-POINTER 7)) (S2 (STRING-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.11 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE STANDARD-CHAR))) (S2 (STRING-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.12 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S2 (STRING-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.13 (LET* ((S (COPY-SEQ "Aa")) (S2 (STRING-TRIM "a" S))) (VALUES S S2)) "Aa" "A")
;; Loading (DEFTEST STRING-TRIM.14 (LET* ((S (QUOTE \a\b\c\d\a\b\a)) (S2 (STRING-TRIM "ab" S))) (VALUES (SYMBOL-NAME S) S2)) "abcdaba" "cd")
;; Loading (DEFTEST STRING-TRIM.15 (STRING-TRIM "abc" "") "")
;; Loading (DEFTEST STRING-TRIM.16 (STRING-TRIM "a" #\a) "")
;; Loading (DEFTEST STRING-TRIM.17 (STRING-TRIM "b" #\a) "a")
;; Loading (DEFTEST STRING-TRIM.18 (STRING-TRIM "" (COPY-SEQ "abcde")) "abcde")
;; Loading (DEFTEST STRING-TRIM.19 (STRING-TRIM "abc" (COPY-SEQ "abcabcabc")) "")
;; Loading (DEFTEST STRING-TRIM.20 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-TRIM "abcd" (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST STRING-TRIM.21 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-TRIM (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) "abcd") "abcd")
;; Loading (DEFTEST STRING-TRIM.22 (LET ((S (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T))) (VALUES (STRING-TRIM "ab" S) S)) "cae" "abcaeb")
;; Loading (DEFTEST STRING-TRIM.23 (LET ((S (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T))) (VALUES (STRING-TRIM "ab" S) S)) "cae" "abcaeb")
;; Loading (DEFTEST STRING-TRIM.24 (LET* ((ETYPE (QUOTE BASE-CHAR)) (S0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE ETYPE)) (S (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE ETYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 1))) (VALUES (STRING-TRIM "ab" S) S S0)) "c" "bca" "abcaeb")
;; Loading (DEFTEST STRING-TRIM.25 (LET* ((ETYPE (QUOTE CHARACTER)) (S0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE ETYPE)) (S (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE ETYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 1))) (VALUES (STRING-TRIM "ab" S) S S0)) "c" "bca" "abcaeb")
;; Loading (DEFTEST STRING-TRIM.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-TRIM (PROGN (SETF X (INCF I)) " ") (PROGN (SETF Y (INCF I)) (COPY-SEQ "   abc d e f  "))) I X Y)) "abc d e f" 2 1 2)
;; Loading (DEF-FOLD-TEST STRING-TRIM.FOLD.1 (STRING-TRIM " " " abcd "))
;; Loading (DEFTEST STRING-TRIM.ERROR.1 (SIGNALS-ERROR (STRING-TRIM) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-TRIM.ERROR.2 (SIGNALS-ERROR (STRING-TRIM "abc") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-TRIM.ERROR.3 (SIGNALS-ERROR (STRING-TRIM "abc" "abcdddabc" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "string-left-trim.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string-left-trim.lsp 81AFA5B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STRING-LEFT-TRIM.1 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-LEFT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.2 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-LEFT-TRIM (QUOTE (#\a #\b)) S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.3 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-LEFT-TRIM #(#\a #\b) S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.4 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-LEFT-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b))) S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.5 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-LEFT-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE CHARACTER)) S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.6 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-LEFT-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE STANDARD-CHAR)) S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.7 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-LEFT-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE BASE-CHAR)) S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.8 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-LEFT-TRIM (MAKE-ARRAY 4 :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 2) S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.9 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE CHARACTER))) (S2 (STRING-LEFT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.10 (LET* ((S (MAKE-ARRAY 9 :INITIAL-CONTENTS "abcdabadd" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 7)) (S2 (STRING-LEFT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.10A (LET* ((S (MAKE-ARRAY 9 :INITIAL-CONTENTS "abcdabadd" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 7)) (S2 (STRING-LEFT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.10B (LET* ((S (MAKE-ARRAY 9 :INITIAL-CONTENTS "abcdabadd" :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :FILL-POINTER 7)) (S2 (STRING-LEFT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.11 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE STANDARD-CHAR))) (S2 (STRING-LEFT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.12 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S2 (STRING-LEFT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.13 (LET* ((S (COPY-SEQ "aA")) (S2 (STRING-LEFT-TRIM "a" S))) (VALUES S S2)) "aA" "A")
;; Loading (DEFTEST STRING-LEFT-TRIM.14 (LET* ((S (QUOTE \a\b\c\d\a\b\a)) (S2 (STRING-LEFT-TRIM "ab" S))) (VALUES (SYMBOL-NAME S) S2)) "abcdaba" "cdaba")
;; Loading (DEFTEST STRING-LEFT-TRIM.15 (STRING-LEFT-TRIM "abc" "") "")
;; Loading (DEFTEST STRING-LEFT-TRIM.16 (STRING-LEFT-TRIM "a" #\a) "")
;; Loading (DEFTEST STRING-LEFT-TRIM.17 (STRING-LEFT-TRIM "b" #\a) "a")
;; Loading (DEFTEST STRING-LEFT-TRIM.18 (STRING-LEFT-TRIM "" (COPY-SEQ "abcde")) "abcde")
;; Loading (DEFTEST STRING-LEFT-TRIM.19 (STRING-LEFT-TRIM "abc" (COPY-SEQ "abcabcabc")) "")
;; Loading (DEFTEST STRING-LEFT-TRIM.20 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-LEFT-TRIM "abcd" (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST STRING-LEFT-TRIM.21 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-LEFT-TRIM (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) "abcd") "abcd")
;; Loading (DEFTEST STRING-LEFT-TRIM.22 (LET ((S (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T))) (VALUES (STRING-LEFT-TRIM "ab" S) S)) "caeb" "abcaeb")
;; Loading (DEFTEST STRING-LEFT-TRIM.23 (LET ((S (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T))) (VALUES (STRING-LEFT-TRIM "ab" S) S)) "caeb" "abcaeb")
;; Loading (DEFTEST STRING-LEFT-TRIM.24 (LET* ((ETYPE (QUOTE BASE-CHAR)) (S0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE ETYPE)) (S (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE ETYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 1))) (VALUES (STRING-LEFT-TRIM "ab" S) S S0)) "ca" "bca" "abcaeb")
;; Loading (DEFTEST STRING-LEFT-TRIM.25 (LET* ((ETYPE (QUOTE CHARACTER)) (S0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE ETYPE)) (S (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE ETYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 1))) (VALUES (STRING-LEFT-TRIM "ab" S) S S0)) "ca" "bca" "abcaeb")
;; Loading (DEFTEST STRING-LEFT-TRIM.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-LEFT-TRIM (PROGN (SETF X (INCF I)) " ") (PROGN (SETF Y (INCF I)) (COPY-SEQ "   abc d e f  "))) I X Y)) "abc d e f  " 2 1 2)
;; Loading (DEF-FOLD-TEST STRING-LEFT-TRIM.FOLD.1 (STRING-LEFT-TRIM " " " abcd"))
;; Loading (DEFTEST STRING-LEFT-TRIM.ERROR.1 (SIGNALS-ERROR (STRING-LEFT-TRIM) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-LEFT-TRIM.ERROR.2 (SIGNALS-ERROR (STRING-LEFT-TRIM "abc") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-LEFT-TRIM.ERROR.3 (SIGNALS-ERROR (STRING-LEFT-TRIM "abc" "abcdddabc" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "string-right-trim.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string-right-trim.lsp 81C4D1B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STRING-RIGHT-TRIM.1 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-RIGHT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.2 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-RIGHT-TRIM (QUOTE (#\a #\b)) S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.3 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-RIGHT-TRIM #(#\a #\b) S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.4 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-RIGHT-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b))) S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.5 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-RIGHT-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE CHARACTER)) S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.6 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-RIGHT-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE STANDARD-CHAR)) S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.7 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-RIGHT-TRIM (MAKE-ARRAY 2 :INITIAL-CONTENTS (QUOTE (#\a #\b)) :ELEMENT-TYPE (QUOTE BASE-CHAR)) S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.8 (LET* ((S (COPY-SEQ "abcdaba")) (S2 (STRING-RIGHT-TRIM (MAKE-ARRAY 4 :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 2) S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.9 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE CHARACTER))) (S2 (STRING-RIGHT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.10 (LET* ((S (MAKE-ARRAY 9 :INITIAL-CONTENTS "abcdabadd" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 7)) (S2 (STRING-RIGHT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.10A (LET* ((S (MAKE-ARRAY 9 :INITIAL-CONTENTS "abcdabadd" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 7)) (S2 (STRING-RIGHT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.10B (LET* ((S (MAKE-ARRAY 9 :INITIAL-CONTENTS "abcdabadd" :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :FILL-POINTER 7)) (S2 (STRING-RIGHT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.11 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE STANDARD-CHAR))) (S2 (STRING-RIGHT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.12 (LET* ((S (MAKE-ARRAY 7 :INITIAL-CONTENTS "abcdaba" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (S2 (STRING-RIGHT-TRIM "ab" S))) (VALUES S S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.13 (LET* ((S (COPY-SEQ "Aa")) (S2 (STRING-RIGHT-TRIM "a" S))) (VALUES S S2)) "Aa" "A")
;; Loading (DEFTEST STRING-RIGHT-TRIM.14 (LET* ((S (QUOTE \a\b\c\d\a\b\a)) (S2 (STRING-RIGHT-TRIM "ab" S))) (VALUES (SYMBOL-NAME S) S2)) "abcdaba" "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.15 (STRING-RIGHT-TRIM "abc" "") "")
;; Loading (DEFTEST STRING-RIGHT-TRIM.16 (STRING-RIGHT-TRIM "a" #\a) "")
;; Loading (DEFTEST STRING-RIGHT-TRIM.17 (STRING-RIGHT-TRIM "b" #\a) "a")
;; Loading (DEFTEST STRING-RIGHT-TRIM.18 (STRING-RIGHT-TRIM "" (COPY-SEQ "abcde")) "abcde")
;; Loading (DEFTEST STRING-RIGHT-TRIM.19 (STRING-RIGHT-TRIM "abc" (COPY-SEQ "abcabcabc")) "")
;; Loading (DEFTEST STRING-RIGHT-TRIM.20 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-RIGHT-TRIM "abcd" (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST STRING-RIGHT-TRIM.21 :NOTES (:NIL-VECTORS-ARE-STRINGS) (STRING-RIGHT-TRIM (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) "abcd") "abcd")
;; Loading (DEFTEST STRING-RIGHT-TRIM.22 (LET ((S (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T))) (VALUES (STRING-RIGHT-TRIM "ab" S) S)) "abcae" "abcaeb")
;; Loading (DEFTEST STRING-RIGHT-TRIM.23 (LET ((S (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T))) (VALUES (STRING-RIGHT-TRIM "ab" S) S)) "abcae" "abcaeb")
;; Loading (DEFTEST STRING-RIGHT-TRIM.24 (LET* ((ETYPE (QUOTE BASE-CHAR)) (S0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE ETYPE)) (S (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE ETYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 1))) (VALUES (STRING-RIGHT-TRIM "ab" S) S S0)) "bc" "bca" "abcaeb")
;; Loading (DEFTEST STRING-RIGHT-TRIM.25 (LET* ((ETYPE (QUOTE CHARACTER)) (S0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS "abcaeb" :ELEMENT-TYPE ETYPE)) (S (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE ETYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 1))) (VALUES (STRING-RIGHT-TRIM "ab" S) S S0)) "bc" "bca" "abcaeb")
;; Loading (DEFTEST STRING-RIGHT-TRIM.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-RIGHT-TRIM (PROGN (SETF X (INCF I)) " ") (PROGN (SETF Y (INCF I)) (COPY-SEQ "   abc d e f  "))) I X Y)) "   abc d e f" 2 1 2)
;; Loading (DEF-FOLD-TEST STRING-RIGHT-TRIM.FOLD.1 (STRING-RIGHT-TRIM " " "abcd "))
;; Loading (DEFTEST STRING-RIGHT-TRIM.ERROR.1 (SIGNALS-ERROR (STRING-RIGHT-TRIM) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-RIGHT-TRIM.ERROR.2 (SIGNALS-ERROR (STRING-RIGHT-TRIM "abc") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-RIGHT-TRIM.ERROR.3 (SIGNALS-ERROR (STRING-RIGHT-TRIM "abc" "abcdddabc" NIL) PROGRAM-ERROR) T)
;; Loading (COMPILE-AND-LOAD "string-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/string-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (COMPILE-AND-LOAD "random-aux.lsp")).
;; Compiling form (DEFUN MY-STRING-COMPARE (STRING1 STRING2 COMPARISON &KEY (START1 0) END1 (START2 0) END2 CASE &AUX (LEN1 (PROGN (ASSERT (STRINGP STRING1)) (LENGTH STRING1))) (LEN2 (PROGN (ASSERT (STRINGP STRING2)) (LENGTH STRING2))) (COMPARE-FN (CASE COMPARISON (< (IF CASE (FUNCTION CHAR-LESSP) (FUNCTION CHAR<))) (<= (IF CASE (FUNCTION CHAR-NOT-GREATERP) (FUNCTION CHAR<=))) (= (IF CASE (FUNCTION CHAR-EQUAL) (FUNCTION CHAR=))) (/= (IF CASE (FUNCTION CHAR-NOT-EQUAL) (FUNCTION CHAR/=))) (> (IF CASE (FUNCTION CHAR-GREATERP) (FUNCTION CHAR>))) (>= (IF CASE (FUNCTION CHAR-NOT-LESSP) (FUNCTION CHAR>=))) (T (ERROR "Bad comparison arg: ~A~%" COMPARISON)))) (EQUAL-FN (IF CASE (FUNCTION CHAR-EQUAL) (FUNCTION CHAR=)))) (ASSERT (INTEGERP START1)) (ASSERT (INTEGERP START2)) (UNLESS END1 (SETQ END1 LEN1)) (UNLESS END2 (SETQ END2 LEN2)) (ASSERT (<= 0 START1 END1)) (ASSERT (<= 0 START2 END2)) (LOOP FOR I1 FROM START1 FOR I2 FROM START2 DO (COND ((= I1 END1) (RETURN (COND ((= I2 END2) (IF (MEMBER COMPARISON (QUOTE (= <= >=))) END1 NIL)) (T (IF (MEMBER COMPARISON (QUOTE (/= < <=))) END1 NIL))))) ((= I2 END2) (RETURN (IF (MEMBER COMPARISON (QUOTE (/= > >=))) I1 NIL))) (T (LET ((C1 (MY-AREF STRING1 I1)) (C2 (MY-AREF STRING2 I2))) (COND ((FUNCALL EQUAL-FN C1 C2)) (T (RETURN (IF (FUNCALL COMPARE-FN C1 C2) I1 NIL))))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MAKE-RANDOM-STRING-COMPARE-TEST (N) (LET* ((LEN (RANDOM N)) (LEN1 (IF (OR (COIN) (= LEN 0)) LEN (+ LEN (RANDOM LEN)))) (LEN2 (IF (OR (COIN) (= LEN 0)) LEN (+ LEN (RANDOM LEN)))) (S1 (MAKE-RANDOM-STRING LEN1)) (S2 (MAKE-RANDOM-STRING LEN2)) (LEN1 (LENGTH S1)) (LEN2 (LENGTH S2)) (SUBLEN1 (IF (OR (COIN) (= LEN1 0)) (MIN LEN1 LEN2) (RANDOM LEN1))) (SUBLEN2 (IF (OR (COIN) (= LEN2 0)) (MIN LEN2 SUBLEN1) (RANDOM LEN2))) (START1 (IF (COIN 3) 0 (MAX 0 (MIN (1- LEN1) (RANDOM (- LEN1 SUBLEN1 -1)))))) (END1 (+ START1 SUBLEN1)) (START2 (IF (COIN 3) 0 (MAX 0 (MIN (1- LEN2) (RANDOM (- LEN2 SUBLEN2 -1)))))) (END2 (+ START2 SUBLEN2))) (WHEN (AND (COIN) (EQUAL (ARRAY-ELEMENT-TYPE S1) (ARRAY-ELEMENT-TYPE S2))) (IF (<= SUBLEN1 SUBLEN2) (SETF (SUBSEQ S2 START2 (+ START2 SUBLEN1)) (SUBSEQ S1 START1 (+ START1 SUBLEN1))) (SETF (SUBSEQ S1 START1 (+ START1 SUBLEN2)) (SUBSEQ S2 START2 (+ START2 SUBLEN2))))) (VALUES S1 S2 (REDUCE (FUNCTION NCONC) (RANDOM-PERMUTE (LIST (IF (AND (= START1 0) (COIN)) NIL (LIST :START1 START1)) (IF (AND (= END1 LEN1) (COIN)) NIL (LIST :END1 END1)) (IF (AND (= START2 0) (COIN)) NIL (LIST :START2 START2)) (IF (AND (= END2 LEN2) (COIN)) NIL (LIST :END2 END2)))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN RANDOM-STRING-COMPARE-TEST (N COMPARISON CASE &OPTIONAL (ITERATIONS 1)) (LOOP FOR I FROM 1 TO ITERATIONS COUNT (MULTIPLE-VALUE-BIND (S1 S2 ARGS) (MAKE-RANDOM-STRING-COMPARE-TEST N) (LET ((X (APPLY (CASE COMPARISON (< (IF CASE (FUNCTION STRING-LESSP) (FUNCTION STRING<))) (<= (IF CASE (FUNCTION STRING-NOT-GREATERP) (FUNCTION STRING<=))) (= (IF CASE (FUNCTION STRING-EQUAL) (FUNCTION STRING=))) (/= (IF CASE (FUNCTION STRING-NOT-EQUAL) (FUNCTION STRING/=))) (> (IF CASE (FUNCTION STRING-GREATERP) (FUNCTION STRING>))) (>= (IF CASE (FUNCTION STRING-NOT-LESSP) (FUNCTION STRING>=))) (T (ERROR "Bad comparison arg: ~A~%" COMPARISON))) S1 S2 ARGS)) (Y (APPLY (FUNCTION MY-STRING-COMPARE) S1 S2 COMPARISON :CASE CASE ARGS))) (NOT (OR (EQL X Y) (AND X Y (EQT COMPARISON (QUOTE =))))))))).
;; Compiling form (DEFUN STRING-ALL-THE-SAME (S) (LET ((LEN (LENGTH S))) (OR (= LEN 0) (LET ((C (MY-AREF S 0))) (LOOP FOR I BELOW LEN FOR D = (MY-AREF S I) ALWAYS (EQL C D)))))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string-aux.llf C1C0BC87>
;; Loading (LOAD "string-comparisons.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/string-comparisons.lsp C1CE23A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "string-aux.lsp")
;; Loading (DEFTEST STRING=.1 (NOT (STRING= "abc" (COPY-SEQ "abc"))) NIL)
;; Loading (DEFTEST STRING=.2 (STRING= "A" "a") NIL)
;; Loading (DEFTEST STRING=.3 (NOT (STRING= #\a "a")) NIL)
;; Loading (DEFTEST STRING=.4 (NOT (STRING= (QUOTE \a\b\c) (COPY-SEQ "abc"))) NIL)
;; Loading (DEFTEST STRING=.5 (NOT (STRING= (COPY-SEQ "abc") (QUOTE #:\a\b\c))) NIL)
;; Loading (DEFTEST STRING=.6 (LET ((S1 (COPY-SEQ "abc")) (S2 (COPY-SEQ "abd")) (C (OR (CODE-CHAR 0) #\a))) (SETF (CHAR S1 1) C) (SETF (CHAR S2 1) C) (VALUES (LENGTH S1) (LENGTH S2) (STRING= S1 S2))) 3 3 NIL)
;; Loading (DEFTEST STRING=.7 (LOOP FOR I FROM 0 TO 3 COLLECT (NOT (STRING= "abc" "abd" :START1 0 :END1 I :END2 I))) (NIL NIL NIL T))
;; Loading (DEFTEST STRING=.8 (LOOP FOR I FROM 0 TO 3 COLLECT (NOT (STRING= "abc" "ab" :END1 I))) (T T NIL T))
;; Loading (DEFTEST STRING=.9 (LOOP FOR I FROM 0 TO 3 COLLECT (NOT (STRING= "abc" "abd" :START2 0 :END2 I :END1 I))) (NIL NIL NIL T))
;; Loading (DEFTEST STRING=.10 (LOOP FOR I FROM 0 TO 3 COLLECT (NOT (STRING= "ab" "abc" :END2 I))) (T T NIL T))
;; Loading (DEFTEST STRING=.11 (LOOP FOR I FROM 0 TO 3 COLLECT (NOT (STRING= "xyab" "ab" :START1 I))) (T T NIL T))
;; Loading (DEFTEST STRING=.12 (LOOP FOR I FROM 0 TO 3 COLLECT (NOT (STRING= "ab" "xyab" :START2 I))) (T T NIL T))
;; Loading (DEFTEST STRING=.13 (LOOP FOR I FROM 0 TO 3 COLLECT (NOT (STRING= "xyab" "ab" :START1 I :END1 NIL))) (T T NIL T))
;; Loading (DEFTEST STRING=.14 (LOOP FOR I FROM 0 TO 3 COLLECT (NOT (STRING= "ab" "xyab" :START2 I :END2 NIL))) (T T NIL T))
;; Loading (DEFTEST STRING-COMPARISON.ALLOW-OTHER-KEYS.1 (LOOP FOR FN IN (QUOTE (STRING= STRING<= STRING>= STRING/= STRING< STRING> STRING-EQUAL STRING-NOT-GREATERP STRING-NOT-LESSP STRING-NOT-EQUAL STRING-LESSP STRING-GREATERP)) FOR EXPECTED IN (QUOTE (NIL 0 NIL 0 0 NIL NIL 0 NIL 0 0 NIL)) FOR RESULT = (FUNCALL FN "a" "b" :ALLOW-OTHER-KEYS T :FOO NIL) UNLESS (EQL RESULT EXPECTED) COLLECT (LIST FN EXPECTED RESULT)) NIL)
;; Loading (DEFTEST STRING-COMPARISON.ALLOW-OTHER-KEYS.2 (LOOP FOR FN IN (QUOTE (STRING= STRING<= STRING>= STRING/= STRING< STRING> STRING-EQUAL STRING-NOT-GREATERP STRING-NOT-LESSP STRING-NOT-EQUAL STRING-LESSP STRING-GREATERP)) FOR EXPECTED IN (QUOTE (NIL NIL 0 0 NIL 0 NIL NIL 0 0 NIL 0)) FOR RESULT = (FUNCALL FN "c" "b" :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO 1) UNLESS (EQL RESULT EXPECTED) COLLECT (LIST FN EXPECTED RESULT)) NIL)
;; Loading (DEFTEST STRING-COMPARISON.ALLOW-OTHER-KEYS.3 (LOOP FOR FN IN (QUOTE (STRING= STRING<= STRING>= STRING/= STRING< STRING> STRING-EQUAL STRING-NOT-GREATERP STRING-NOT-LESSP STRING-NOT-EQUAL STRING-LESSP STRING-GREATERP)) FOR EXPECTED IN (QUOTE (NIL 0 NIL 0 0 NIL NIL 0 NIL 0 0 NIL)) FOR RESULT = (FUNCALL FN "a" "b" :ALLOW-OTHER-KEYS NIL) UNLESS (EQL RESULT EXPECTED) COLLECT (LIST FN EXPECTED RESULT)) NIL)
;; Loading (DEFTEST STRING=.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING= (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING=.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING= (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING=.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING= (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING<=.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING<= (PROGN (SETF X (INCF I)) "abf") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING<=.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING<= (PROGN (SETF A (INCF I)) "abf") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING<=.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING<= (PROGN (SETF A (INCF I)) "abf") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING<.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING< (PROGN (SETF X (INCF I)) "abf") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING<.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING< (PROGN (SETF A (INCF I)) "abf") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING<.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING< (PROGN (SETF A (INCF I)) "abf") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING/=.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING/= (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "abc")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING/=.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING/= (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abc") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING/=.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING/= (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abc") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING>=.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING<= (PROGN (SETF X (INCF I)) "abf") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING>=.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING>= (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING>=.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING>= (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING>.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING> (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING>.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING> (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING>.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING> (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-EQUAL.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-EQUAL (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST STRING-EQUAL.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING-EQUAL (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-EQUAL.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING-EQUAL (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-NOT-GREATERP.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-NOT-GREATERP (PROGN (SETF X (INCF I)) "abf") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING-NOT-GREATERP.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING-NOT-GREATERP (PROGN (SETF A (INCF I)) "abf") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-NOT-GREATERP.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING-NOT-GREATERP (PROGN (SETF A (INCF I)) "abf") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-LESSP.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-LESSP (PROGN (SETF X (INCF I)) "abf") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING-LESSP.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING-LESSP (PROGN (SETF A (INCF I)) "abf") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-LESSP.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING-LESSP (PROGN (SETF A (INCF I)) "abf") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-NOT-EQUAL.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-NOT-EQUAL (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "abc")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING-NOT-EQUAL.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING-NOT-EQUAL (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abc") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-NOT-EQUAL.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING-NOT-EQUAL (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abc") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-NOT-LESSP.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-NOT-LESSP (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING-NOT-LESSP.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING-NOT-LESSP (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-NOT-LESSP.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING-NOT-LESSP (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-GREATERP.ORDER.1 (LET ((I 0) X Y) (VALUES (STRING-GREATERP (PROGN (SETF X (INCF I)) "abc") (PROGN (SETF Y (INCF I)) "abd")) I X Y)) NIL 2 1 2)
;; Loading (DEFTEST STRING-GREATERP.ORDER.2 (LET ((I 0) A B C D E F) (VALUES (STRING-GREATERP (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :START1 (PROGN (SETF C (INCF I)) 0) :START2 (PROGN (SETF D (INCF I)) 0) :END1 (PROGN (SETF E (INCF I)) NIL) :END2 (PROGN (SETF F (INCF I)) NIL)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST STRING-GREATERP.ORDER.3 (LET ((I 0) A B C D E F) (VALUES (STRING-GREATERP (PROGN (SETF A (INCF I)) "abc") (PROGN (SETF B (INCF I)) "abd") :END2 (PROGN (SETF C (INCF I)) NIL) :END1 (PROGN (SETF D (INCF I)) NIL) :START2 (PROGN (SETF E (INCF I)) 0) :START1 (PROGN (SETF F (INCF I)) 0)) I A B C D E F)) NIL 6 1 2 3 4 5 6)
;; Loading (DEFTEST RANDOM-STRING-COMPARISON-TESTS (LOOP FOR CMP IN (QUOTE (= /= < > <= >=)) APPEND (LOOP FOR CASE IN (QUOTE (NIL T)) COLLECT (LIST CMP CASE (RANDOM-STRING-COMPARE-TEST 10 CMP CASE 1000)))) ((= NIL 0) (= T 0) (/= NIL 0) (/= T 0) (< NIL 0) (< T 0) (> NIL 0) (> T 0) (<= NIL 0) (<= T 0) (>= NIL 0) (>= T 0)))
;; Loading (DEFTEST STRING=.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (NOTNOT (STRING= S1 S1)) (NOTNOT (STRING= S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (NOTNOT (STRING= S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (NOTNOT (STRING= S1 "")) (NOTNOT (STRING= "" S1)) (STRING= S1 "a") (STRING= "a" S1))) T T T T T NIL NIL)
;; Loading (DEFTEST STRING/=.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING/= S1 S1) (STRING/= S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING/= S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING/= S1 "") (STRING/= "" S1) (STRING/= S1 "a") (STRING/= "a" S1))) NIL NIL NIL NIL NIL 0 0)
;; Loading (DEFTEST STRING<.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING< S1 S1) (STRING< S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING< S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING< S1 "") (STRING< "" S1) (STRING< S1 "a") (STRING< "a" S1))) NIL NIL NIL NIL NIL 0 NIL)
;; Loading (DEFTEST STRING<=.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING<= S1 S1) (STRING<= S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING<= S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING<= S1 "") (STRING<= "" S1) (STRING<= S1 "a") (STRING<= "a" S1))) 0 0 0 0 0 0 NIL)
;; Loading (DEFTEST STRING>.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING> S1 S1) (STRING> S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING> S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING> S1 "") (STRING> "" S1) (STRING> S1 "a") (STRING> "a" S1))) NIL NIL NIL NIL NIL NIL 0)
;; Loading (DEFTEST STRING>=.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING>= S1 S1) (STRING>= S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING>= S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING>= S1 "") (STRING>= "" S1) (STRING>= S1 "a") (STRING>= "a" S1))) 0 0 0 0 0 NIL 0)
;; Loading (DEFTEST STRING-EQUAL.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (NOTNOT (STRING-EQUAL S1 S1)) (NOTNOT (STRING-EQUAL S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (NOTNOT (STRING-EQUAL S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (NOTNOT (STRING-EQUAL S1 "")) (NOTNOT (STRING-EQUAL "" S1)) (STRING-EQUAL S1 "a") (STRING-EQUAL "a" S1))) T T T T T NIL NIL)
;; Loading (DEFTEST STRING-NOT-EQUAL.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING-NOT-EQUAL S1 S1) (STRING-NOT-EQUAL S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING-NOT-EQUAL S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING-NOT-EQUAL S1 "") (STRING-NOT-EQUAL "" S1) (STRING-NOT-EQUAL S1 "a") (STRING-NOT-EQUAL "a" S1))) NIL NIL NIL NIL NIL 0 0)
;; Loading (DEFTEST STRING-LESSP.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING-LESSP S1 S1) (STRING-LESSP S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING-LESSP S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING-LESSP S1 "") (STRING-LESSP "" S1) (STRING-LESSP S1 "a") (STRING-LESSP "a" S1))) NIL NIL NIL NIL NIL 0 NIL)
;; Loading (DEFTEST STRING-NOT-GREATERP.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING-NOT-GREATERP S1 S1) (STRING-NOT-GREATERP S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING-NOT-GREATERP S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING-NOT-GREATERP S1 "") (STRING-NOT-GREATERP "" S1) (STRING-NOT-GREATERP S1 "a") (STRING-NOT-GREATERP "a" S1))) 0 0 0 0 0 0 NIL)
;; Loading (DEFTEST STRING-GREATERP.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING-GREATERP S1 S1) (STRING-GREATERP S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING-GREATERP S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING-GREATERP S1 "") (STRING-GREATERP "" S1) (STRING-GREATERP S1 "a") (STRING-GREATERP "a" S1))) NIL NIL NIL NIL NIL NIL 0)
;; Loading (DEFTEST STRING-NOT-LESSP.NIL-ARRAY.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (VALUES (STRING-NOT-LESSP S1 S1) (STRING-NOT-LESSP S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (STRING-NOT-LESSP S1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (STRING-NOT-LESSP S1 "") (STRING-NOT-LESSP "" S1) (STRING-NOT-LESSP S1 "a") (STRING-NOT-LESSP "a" S1))) 0 0 0 0 0 NIL 0)
;; Loading (DEFTEST STRING=.ERROR.1 (SIGNALS-ERROR (STRING=) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING=.ERROR.2 (SIGNALS-ERROR (STRING= "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING=.ERROR.3 (SIGNALS-ERROR (STRING= "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING=.ERROR.4 (SIGNALS-ERROR (STRING= "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING=.ERROR.5 (SIGNALS-ERROR (STRING= "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING=.ERROR.6 (SIGNALS-ERROR (STRING= "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING/=.ERROR.1 (SIGNALS-ERROR (STRING/=) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING/=.ERROR.2 (SIGNALS-ERROR (STRING/= "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING/=.ERROR.3 (SIGNALS-ERROR (STRING/= "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING/=.ERROR.4 (SIGNALS-ERROR (STRING/= "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING/=.ERROR.5 (SIGNALS-ERROR (STRING/= "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING/=.ERROR.6 (SIGNALS-ERROR (STRING/= "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<.ERROR.1 (SIGNALS-ERROR (STRING<) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<.ERROR.2 (SIGNALS-ERROR (STRING< "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<.ERROR.3 (SIGNALS-ERROR (STRING< "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<.ERROR.4 (SIGNALS-ERROR (STRING< "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<.ERROR.5 (SIGNALS-ERROR (STRING< "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<.ERROR.6 (SIGNALS-ERROR (STRING< "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<=.ERROR.1 (SIGNALS-ERROR (STRING<=) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<=.ERROR.2 (SIGNALS-ERROR (STRING<= "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<=.ERROR.3 (SIGNALS-ERROR (STRING<= "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<=.ERROR.4 (SIGNALS-ERROR (STRING<= "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<=.ERROR.5 (SIGNALS-ERROR (STRING<= "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING<=.ERROR.6 (SIGNALS-ERROR (STRING<= "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>.ERROR.1 (SIGNALS-ERROR (STRING>) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>.ERROR.2 (SIGNALS-ERROR (STRING> "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>.ERROR.3 (SIGNALS-ERROR (STRING> "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>.ERROR.4 (SIGNALS-ERROR (STRING> "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>.ERROR.5 (SIGNALS-ERROR (STRING> "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>.ERROR.6 (SIGNALS-ERROR (STRING> "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>=.ERROR.1 (SIGNALS-ERROR (STRING>=) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>=.ERROR.2 (SIGNALS-ERROR (STRING>= "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>=.ERROR.3 (SIGNALS-ERROR (STRING>= "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>=.ERROR.4 (SIGNALS-ERROR (STRING>= "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>=.ERROR.5 (SIGNALS-ERROR (STRING>= "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING>=.ERROR.6 (SIGNALS-ERROR (STRING>= "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-EQUAL.ERROR.1 (SIGNALS-ERROR (STRING-EQUAL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-EQUAL.ERROR.2 (SIGNALS-ERROR (STRING-EQUAL "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-EQUAL.ERROR.3 (SIGNALS-ERROR (STRING-EQUAL "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-EQUAL.ERROR.4 (SIGNALS-ERROR (STRING-EQUAL "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-EQUAL.ERROR.5 (SIGNALS-ERROR (STRING-EQUAL "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-EQUAL.ERROR.6 (SIGNALS-ERROR (STRING-EQUAL "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-EQUAL.ERROR.1 (SIGNALS-ERROR (STRING-NOT-EQUAL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-EQUAL.ERROR.2 (SIGNALS-ERROR (STRING-NOT-EQUAL "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-EQUAL.ERROR.3 (SIGNALS-ERROR (STRING-NOT-EQUAL "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-EQUAL.ERROR.4 (SIGNALS-ERROR (STRING-NOT-EQUAL "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-EQUAL.ERROR.5 (SIGNALS-ERROR (STRING-NOT-EQUAL "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-EQUAL.ERROR.6 (SIGNALS-ERROR (STRING-NOT-EQUAL "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-LESSP.ERROR.1 (SIGNALS-ERROR (STRING-LESSP) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-LESSP.ERROR.2 (SIGNALS-ERROR (STRING-LESSP "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-LESSP.ERROR.3 (SIGNALS-ERROR (STRING-LESSP "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-LESSP.ERROR.4 (SIGNALS-ERROR (STRING-LESSP "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-LESSP.ERROR.5 (SIGNALS-ERROR (STRING-LESSP "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-LESSP.ERROR.6 (SIGNALS-ERROR (STRING-LESSP "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-GREATERP.ERROR.1 (SIGNALS-ERROR (STRING-GREATERP) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-GREATERP.ERROR.2 (SIGNALS-ERROR (STRING-GREATERP "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-GREATERP.ERROR.3 (SIGNALS-ERROR (STRING-GREATERP "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-GREATERP.ERROR.4 (SIGNALS-ERROR (STRING-GREATERP "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-GREATERP.ERROR.5 (SIGNALS-ERROR (STRING-GREATERP "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-GREATERP.ERROR.6 (SIGNALS-ERROR (STRING-GREATERP "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-LESSP.ERROR.1 (SIGNALS-ERROR (STRING-NOT-LESSP) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-LESSP.ERROR.2 (SIGNALS-ERROR (STRING-NOT-LESSP "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-LESSP.ERROR.3 (SIGNALS-ERROR (STRING-NOT-LESSP "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-LESSP.ERROR.4 (SIGNALS-ERROR (STRING-NOT-LESSP "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-LESSP.ERROR.5 (SIGNALS-ERROR (STRING-NOT-LESSP "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-LESSP.ERROR.6 (SIGNALS-ERROR (STRING-NOT-LESSP "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-GREATERP.ERROR.1 (SIGNALS-ERROR (STRING-NOT-GREATERP) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-GREATERP.ERROR.2 (SIGNALS-ERROR (STRING-NOT-GREATERP "") PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-GREATERP.ERROR.3 (SIGNALS-ERROR (STRING-NOT-GREATERP "a" "b" NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-GREATERP.ERROR.4 (SIGNALS-ERROR (STRING-NOT-GREATERP "a" "b" :START1) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-GREATERP.ERROR.5 (SIGNALS-ERROR (STRING-NOT-GREATERP "a" "b" 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STRING-NOT-GREATERP.ERROR.6 (SIGNALS-ERROR (STRING-NOT-GREATERP "a" "b" :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (LOAD "make-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-string.lsp 81D21BF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-STRING.1 (LET ((S (MAKE-STRING 10))) (AND (STRINGP S) (EQLT (LENGTH S) 10))) T)
;; Loading (DEFTEST MAKE-STRING.2 (LET ((S (MAKE-STRING 10 :INITIAL-ELEMENT #\a))) (AND (STRINGP S) (EQL (LENGTH S) 10) S)) "aaaaaaaaaa")
;; Loading (DEFTEST MAKE-STRING.3 (LET ((S (MAKE-STRING 10 :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (STRINGP S) (EQL (LENGTH S) 10) S)) "aaaaaaaaaa")
;; Loading (DEFTEST MAKE-STRING.4 (LET ((S (MAKE-STRING 10 :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE STANDARD-CHAR)))) (AND (STRINGP S) (EQL (LENGTH S) 10) S)) "aaaaaaaaaa")
;; Loading (DEFTEST MAKE-STRING.5 (LET ((S (MAKE-STRING 10 :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (AND (STRINGP S) (EQL (LENGTH S) 10) S)) "aaaaaaaaaa")
;; Loading (DEFTEST MAKE-STRING.6 (MAKE-STRING 0) "")
;; Loading (DEFTEST MAKE-STRING.7 (LET ((S (MAKE-STRING 10 :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (STRINGP S) (EQLT (LENGTH S) 10))) T)
;; Loading (DEFTEST MAKE-STRING.8 (LET ((S (MAKE-STRING 10 :ELEMENT-TYPE (QUOTE STANDARD-CHAR)))) (AND (STRINGP S) (EQLT (LENGTH S) 10))) T)
;; Loading (DEFTEST MAKE-STRING.9 (LET ((S (MAKE-STRING 10 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (AND (STRINGP S) (EQLT (LENGTH S) 10))) T)
;; Loading (DEFTEST MAKE-STRING.10 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S (MAKE-STRING 0 :ELEMENT-TYPE NIL))) (VALUES (NOTNOT (STRINGP S)) (EQLT (LENGTH S) 0) (EQUALT S ""))) T T T)
;; Loading (DEF-FOLD-TEST MAKE-STRING.FOLD.1 (MAKE-STRING 5 :INITIAL-ELEMENT #\a))
;; Loading (DEFTEST MAKE-STRING.ALLOW-OTHER-KEYS.1 (MAKE-STRING 5 :ALLOW-OTHER-KEYS T :INITIAL-ELEMENT #\a) "aaaaa")
;; Loading (DEFTEST MAKE-STRING.ALLOW-OTHER-KEYS.2 (MAKE-STRING 5 :INITIAL-ELEMENT #\a :ALLOW-OTHER-KEYS T) "aaaaa")
;; Loading (DEFTEST MAKE-STRING.ALLOW-OTHER-KEYS.3 (MAKE-STRING 5 :INITIAL-ELEMENT #\a :ALLOW-OTHER-KEYS T :BAD T) "aaaaa")
;; Loading (DEFTEST MAKE-STRING.ALLOW-OTHER-KEYS.4 (MAKE-STRING 5 :BAD T :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :INITIAL-ELEMENT #\a) "aaaaa")
;; Loading (DEFTEST MAKE-STRING.ALLOW-OTHER-KEYS.5 (MAKE-STRING 5 :ALLOW-OTHER-KEYS T :BAD T :ALLOW-OTHER-KEYS NIL :INITIAL-ELEMENT #\a) "aaaaa")
;; Loading (DEFTEST MAKE-STRING.ALLOW-OTHER-KEYS.6 (MAKE-STRING 5 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD NIL :INITIAL-ELEMENT #\a) "aaaaa")
;; Loading (DEFTEST MAKE-STRING.KEYWORDS.7 (MAKE-STRING 5 :INITIAL-ELEMENT #\a :INITIAL-ELEMENT #\b) "aaaaa")
;; Loading (DEFTEST MAKE-STRING.ERROR.1 (SIGNALS-ERROR (MAKE-STRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING.ERROR.2 (SIGNALS-ERROR (MAKE-STRING 10 :BAD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING.ERROR.3 (SIGNALS-ERROR (MAKE-STRING 10 :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING.ERROR.4 (SIGNALS-ERROR (MAKE-STRING 10 :INITIAL-ELEMENT) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING.ERROR.5 (SIGNALS-ERROR (MAKE-STRING 10 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING.ERROR.6 (SIGNALS-ERROR (MAKE-STRING 10 :ELEMENT-TYPE) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING.ORDER.1 (LET ((I 0) A B) (VALUES (MAKE-STRING (PROGN (SETF A (INCF I)) 4) :INITIAL-ELEMENT (PROGN (SETF B (INCF I)) #\a)) I A B)) "aaaa" 2 1 2)
;; Loading (DEFTEST MAKE-STRING.ORDER.2 (LET ((I 0) A B C) (VALUES (MAKE-STRING (PROGN (SETF A (INCF I)) 4) :INITIAL-ELEMENT (PROGN (SETF B (INCF I)) #\a) :ELEMENT-TYPE (PROGN (SETF C (INCF I)) (QUOTE BASE-CHAR))) I A B C)) "aaaa" 3 1 2 3)
;; Loading (DEFTEST MAKE-STRING.ORDER.3 (LET ((I 0) A B C) (VALUES (MAKE-STRING (PROGN (SETF A (INCF I)) 4) :ELEMENT-TYPE (PROGN (SETF B (INCF I)) (QUOTE BASE-CHAR)) :INITIAL-ELEMENT (PROGN (SETF C (INCF I)) #\a)) I A B C)) "aaaa" 3 1 2 3)
;; Loading (LOAD "load-characters.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-characters.lsp 81E25437>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "char-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/char-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN IS-ORDERED-BY (SEQ FN) (DECLARE (TYPE FUNCTION FN)) (LET ((N (LENGTH SEQ))) (LOOP FOR I FROM 0 BELOW (1- N) FOR E = (ELT SEQ I) ALWAYS (LOOP FOR J FROM (1+ I) BELOW N ALWAYS (FUNCALL FN E (ELT SEQ J)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN IS-ANTISYMMETRICALLY-ORDERED-BY (SEQ FN) (DECLARE (TYPE FUNCTION FN)) (AND (IS-ORDERED-BY SEQ FN) (IS-ORDERED-BY (REVERSE SEQ) (COMPLEMENT FN)))).
;; Compiling form (DEFUN IS-CASE-INSENSITIVE (FN) (WHEN (SYMBOLP FN) (ASSERT (FBOUNDP FN)) (SETF FN (SYMBOL-FUNCTION FN))) (ASSERT (TYPEP FN (QUOTE FUNCTION))) (LOCALLY (DECLARE (TYPE FUNCTION FN)) (LOOP FOR C ACROSS +CODE-CHARS+ FOR C1 = (CHAR-UPCASE C) FOR C2 = (IF (EQL C C1) (CHAR-DOWNCASE C) C1) ALWAYS (LOOP FOR D ACROSS +CODE-CHARS+ FOR D1 = (CHAR-UPCASE D) FOR D2 = (IF (EQL D D1) (CHAR-DOWNCASE D) D1) ALWAYS (EQUIV (FUNCALL FN C D) (FUNCALL FN C2 D) (FUNCALL FN C D2) (FUNCALL FN C2 D2)))))).
;; Compiling form (DEFUN EQUIV (&REST ARGS) (DECLARE (DYNAMIC-EXTENT ARGS)) (COND ((NULL ARGS) T) ((CAR ARGS) (LOOP FOR E IN (CDR ARGS) ALWAYS E)) (T (LOOP FOR E IN (CDR ARGS) NEVER E)))).
;; Compiling form (DEFUN CHAR-TYPE-ERROR-CHECK (FN) (WHEN (SYMBOLP FN) (ASSERT (FBOUNDP FN)) (SETF FN (SYMBOL-FUNCTION FN))) (ASSERT (TYPEP FN (QUOTE FUNCTION))) (LOCALLY (DECLARE (TYPE FUNCTION FN)) (LOOP FOR X IN *UNIVERSE* ALWAYS (OR (CHARACTERP X) (EQT (CATCH-TYPE-ERROR (FUNCALL FN X)) (QUOTE TYPE-ERROR)))))).
;; Compiling form (DEFUN STANDARD-CHAR.5.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) UNLESS (NOT (AND (TYPEP C (QUOTE STANDARD-CHAR)) (NOT (STANDARD-CHAR-P C)))) COLLECT (CHAR-NAME C))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN EXTENDED-CHAR.3.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) UNLESS (NOT (AND (TYPEP C (QUOTE BASE-CHAR)) (TYPEP C (QUOTE EXTENDED-CHAR)))) COLLECT (CHAR-NAME C))).
;; Compiling form (DEFUN CHARACTER.1.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) UNLESS (OR (NULL C) (LET ((S (STRING C))) (AND (EQLT (CHARACTER C) C) (EQLT (CHARACTER S) C) (EQLT (CHARACTER (MAKE-SYMBOL S)) C)))) COLLECT (CHAR-NAME C))).
;; Compiling form (DEFUN CHARACTER.2.BODY NIL (LOOP FOR X IN *UNIVERSE* WHEN (NOT (OR (CHARACTERP X) (AND (STRINGP X) (EQLT (LENGTH X) 1)) (AND (SYMBOLP X) (EQLT (LENGTH (SYMBOL-NAME X)) 1)) (LET ((C (CATCH-TYPE-ERROR (CHARACTER X)))) (OR (EQLT C (QUOTE TYPE-ERROR)) (LET ((S (CATCH-TYPE-ERROR (STRING X)))) (AND (STRINGP S) (EQLT (MY-AREF S 0) C))))))) DO (RETURN X))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN CHARACTERP.2.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) UNLESS (OR (NULL C) (CHARACTERP C)) COLLECT (CHAR-NAME C))).
;; Compiling form (DEFUN CHARACTERP.3.BODY NIL (LOOP FOR X IN *UNIVERSE* UNLESS (LET ((P (CHARACTERP X)) (Q (TYPEP X (QUOTE CHARACTER)))) (IF P (NOTNOT Q) (NOT Q))) COLLECT X)).
;; Compiling form (DEFUN ALPHANUMERICP.4.BODY NIL (LOOP FOR X IN *UNIVERSE* UNLESS (OR (NOT (CHARACTERP X)) (IF (OR (DIGIT-CHAR-P X) (ALPHA-CHAR-P X)) (ALPHANUMERICP X) T)) COLLECT X)).
;; Compiling form (DEFUN ALPHANUMERICP.5.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR X = (CODE-CHAR I) UNLESS (OR (NOT (CHARACTERP X)) (IF (OR (DIGIT-CHAR-P X) (ALPHA-CHAR-P X)) (ALPHANUMERICP X) T)) COLLECT (CHAR-NAME X))).
;; Compiling form (DEFUN DIGIT-CHAR.1.BODY.OLD NIL (LOOP FOR R FROM 2 TO 36 ALWAYS (LOOP FOR I FROM 0 TO 36 ALWAYS (LET* ((C (DIGIT-CHAR I R)) (RESULT (IF (>= I R) (NULL C) (EQLT C (CHAR +EXTENDED-DIGIT-CHARS+ I))))) (UNLESS RESULT (FORMAT T "~A ~A ~A~%" R I C)) RESULT)))).
;; Compiling form (DEFUN DIGIT-CHAR.1.BODY NIL (LOOP FOR R FROM 2 TO 36 NCONC (LOOP FOR I FROM 0 TO 36 FOR C = (DIGIT-CHAR I R) UNLESS (IF (>= I R) (NULL C) (EQLT C (CHAR +EXTENDED-DIGIT-CHARS+ I))) COLLECT (LIST R I C)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN DIGIT-CHAR-P.1.BODY NIL (LOOP FOR X IN *UNIVERSE* UNLESS (NOT (AND (CHARACTERP X) (NOT (ALPHANUMERICP X)) (DIGIT-CHAR-P X))) COLLECT X)).
;; Compiling form (DEFUN DIGIT-CHAR-P.2.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR X = (CODE-CHAR I) UNLESS (OR (NOT X) (NOT (AND (NOT (ALPHANUMERICP X)) (DIGIT-CHAR-P X)))) COLLECT (CHAR-NAME X))).
;; Compiling form (DEFUN DIGIT-CHAR-P.3.BODY NIL (LOOP FOR R FROM 2 TO 35 FOR BAD = (LOOP FOR I FROM R TO 35 FOR C = (CHAR +EXTENDED-DIGIT-CHARS+ I) WHEN (OR (DIGIT-CHAR-P C R) (DIGIT-CHAR-P (CHAR-DOWNCASE C) R)) COLLECT I) WHEN BAD COLLECT (CONS R BAD))).
;; Compiling form (DEFUN DIGIT-CHAR-P.4.BODY NIL (LOOP FOR R FROM 2 TO 35 FOR BAD = (LOOP FOR I FROM 0 BELOW R FOR C = (CHAR +EXTENDED-DIGIT-CHARS+ I) UNLESS (AND (EQLT (DIGIT-CHAR-P C R) I) (EQLT (DIGIT-CHAR-P (CHAR-DOWNCASE C) R) I)) COLLECT I) WHEN BAD COLLECT (CONS R BAD))).
;; Compiling form (DEFUN STANDARD-CHAR-P.2.BODY NIL (LOOP FOR X IN *UNIVERSE* UNLESS (OR (NOT (CHARACTERP X)) (FIND X +STANDARD-CHARS+) (NOT (STANDARD-CHAR-P X))) COLLECT X)).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN STANDARD-CHAR-P.2A.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR X = (CODE-CHAR I) UNLESS (OR (NOT (CHARACTERP X)) (FIND X +STANDARD-CHARS+) (NOT (STANDARD-CHAR-P X))) COLLECT (CHAR-NAME X))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
;; Compiling form (DEFUN CHAR-UPCASE.1.BODY NIL (LOOP FOR X IN *UNIVERSE* UNLESS (OR (NOT (CHARACTERP X)) (LET ((U (CHAR-UPCASE X))) (AND (OR (LOWER-CASE-P X) (EQLT U X)) (EQLT U (CHAR-UPCASE U))))) COLLECT (CHAR-NAME X))).
;; Compiling form (DEFUN CHAR-UPCASE.2.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR X = (CODE-CHAR I) UNLESS (OR (NOT X) (LET ((U (CHAR-UPCASE X))) (AND (OR (LOWER-CASE-P X) (EQLT U X)) (EQLT U (CHAR-UPCASE U))))) COLLECT (CHAR-NAME X))).
;; Compiling form (DEFUN CHAR-DOWNCASE.1.BODY NIL (LOOP FOR X IN *UNIVERSE* UNLESS (OR (NOT (CHARACTERP X)) (LET ((U (CHAR-DOWNCASE X))) (AND (OR (UPPER-CASE-P X) (EQLT U X)) (EQLT U (CHAR-DOWNCASE U))))) COLLECT (CHAR-NAME X))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN CHAR-DOWNCASE.2.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR X = (CODE-CHAR I) UNLESS (OR (NOT X) (LET ((U (CHAR-DOWNCASE X))) (AND (OR (UPPER-CASE-P X) (EQLT U X)) (EQLT U (CHAR-DOWNCASE U))))) COLLECT (CHAR-NAME X))).
;; Compiling form (DEFUN BOTH-CASE-P.1.BODY NIL (LOOP FOR X IN *UNIVERSE* UNLESS (OR (NOT (CHARACTERP X)) (IF (BOTH-CASE-P X) (AND (GRAPHIC-CHAR-P X) (OR (UPPER-CASE-P X) (LOWER-CASE-P X))) (NOT (OR (UPPER-CASE-P X) (LOWER-CASE-P X))))) COLLECT (CHAR-NAME X))).
;; Compiling form (DEFUN BOTH-CASE-P.2.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR X = (CODE-CHAR I) UNLESS (OR (NOT (CHARACTERP X)) (IF (BOTH-CASE-P X) (AND (GRAPHIC-CHAR-P X) (OR (UPPER-CASE-P X) (LOWER-CASE-P X))) (NOT (OR (UPPER-CASE-P X) (LOWER-CASE-P X))))) COLLECT (CHAR-NAME X))).
;; Compiling form (DEFUN CHAR-CODE.2.BODY NIL (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) UNLESS (OR (NOT C) (EQLT (CHAR-CODE C) I)) COLLECT (CHAR-NAME C))).
;; Compiling form (DEFUN CHAR-INT.2.FN NIL (DECLARE (OPTIMIZE (SAFETY 3) (SPEED 1) (SPACE 1))) (LET ((C->I (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL))) (I->C (MAKE-HASH-TABLE :TEST (FUNCTION EQL)))) (FLET ((%INSERT (C) (OR (NOT (CHARACTERP C)) (LET* ((I (CHAR-INT C)) (J (GETHASH C C->I)) (D (GETHASH I I->C))) (AND (OR (NULL J) (EQLT J I)) (OR (NULL D) (CHAR= C D)) (PROGN (SETF (GETHASH C C->I) I) (SETF (GETHASH I I->C) C) T)))))) (OR (LOOP FOR I FROM 0 BELOW (MIN (ASH 1 16) CHAR-CODE-LIMIT) UNLESS (%INSERT (CODE-CHAR I)) COLLECT I) (LOOP FOR I = (RANDOM CHAR-CODE-LIMIT) REPEAT 1000 UNLESS (%INSERT (CODE-CHAR I)) COLLECT I) (FIND-IF-NOT (FUNCTION %INSERT) +STANDARD-CHARS+) (FIND-IF-NOT (FUNCTION %INSERT) *UNIVERSE*))))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN CHAR-NAME.1.FN NIL (DECLARE (OPTIMIZE (SAFETY 3) (SPEED 1) (SPACE 1))) (FLET ((%CHECK (C) (OR (NOT (CHARACTERP C)) (LET ((NAME (CHAR-NAME C))) (OR (NULL NAME) (AND (STRINGP NAME) (EQLT C (NAME-CHAR NAME)))))))) (AND (LOOP FOR I FROM 0 BELOW (MIN (ASH 1 16) CHAR-CODE-LIMIT) ALWAYS (%CHECK (CODE-CHAR I))) (EVERY (FUNCTION %CHECK) +STANDARD-CHARS+) (EVERY (FUNCTION %CHECK) *UNIVERSE*) T))).
;; Compiling form (DEFUN NAME-CHAR.1.BODY NIL (DECLARE (OPTIMIZE (SAFETY 3))) (LOOP FOR X IN *UNIVERSE* FOR S = (CATCH-TYPE-ERROR (STRING X)) UNLESS (OR (EQLT S (QUOTE TYPE-ERROR)) (LET ((C (NAME-CHAR X))) (OR (NOT C) (CHARACTERP C)))) COLLECT X)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/char-aux.llf C19B1867>
;; Loading (LOAD "character.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/character.lsp C1CE1407>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CHARACTER-CLASS.1 (SUBTYPEP* (QUOTE CHARACTER) T) T T)
;; Loading (DEFTEST BASE-CHAR.1 (SUBTYPEP* (QUOTE BASE-CHAR) (QUOTE CHARACTER)) T T)
;; Loading (DEFTEST BASE-CHAR.2 (SUBTYPEP* (QUOTE BASE-CHAR) T) T T)
;; Loading (DEFTEST BASE-CHAR.3 (EVERY (FUNCTION (LAMBDA (C) (TYPEP C (QUOTE BASE-CHAR)))) +STANDARD-CHARS+) T)
;; Loading (DEFTEST STANDARD-CHAR.1 (SUBTYPEP* (QUOTE STANDARD-CHAR) (QUOTE BASE-CHAR)) T T)
;; Loading (DEFTEST STANDARD-CHAR.2 (SUBTYPEP* (QUOTE STANDARD-CHAR) (QUOTE CHARACTER)) T T)
;; Loading (DEFTEST STANDARD-CHAR.3 (SUBTYPEP* (QUOTE STANDARD-CHAR) T) T T)
;; Loading (DEFTEST STANDARD-CHAR.4 (EVERY (FUNCTION (LAMBDA (C) (TYPEP C (QUOTE STANDARD-CHAR)))) +STANDARD-CHARS+) T)
;; Loading (DEFTEST STANDARD-CHAR.5 (STANDARD-CHAR.5.BODY) NIL)
;; Loading (DEFTEST EXTENDED-CHAR.1 (SUBTYPEP* (QUOTE EXTENDED-CHAR) (QUOTE CHARACTER)) T T)
;; Loading (DEFTEST EXTENDED-CHAR.2 (SUBTYPEP* (QUOTE EXTENDED-CHAR) T) T T)
;; Loading (DEFTEST EXTENDED-CHAR.3 (EXTENDED-CHAR.3.BODY) NIL)
;; Loading (DEFTEST CHARACTER.1 (CHARACTER.1.BODY) NIL)
;; Loading (DEFTEST CHARACTER.2 (CHARACTER.2.BODY) NIL)
;; Loading (DEFTEST CHARACTER.ORDER.1 (LET ((I 0)) (VALUES (CHARACTER (PROGN (INCF I) #\a)) I)) #\a 1)
;; Loading (DEFTEST CHARACTER.ERROR.1 (SIGNALS-ERROR (CHARACTER) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHARACTER.ERROR.2 (SIGNALS-ERROR (CHARACTER #\a #\a) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHARACTERP.1 (EVERY (FUNCTION CHARACTERP) +STANDARD-CHARS+) T)
;; Loading (DEFTEST CHARACTERP.2 (CHARACTERP.2.BODY) NIL)
;; Loading (DEFTEST CHARACTERP.3 (CHARACTERP.3.BODY) NIL)
;; Loading (DEFTEST CHARACTERP.ORDER.1 (LET ((I 0)) (VALUES (CHARACTERP (INCF I)) I)) NIL 1)
;; Loading (DEFTEST CHARACTERP.ERROR.1 (SIGNALS-ERROR (CHARACTERP) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHARACTERP.ERROR.2 (SIGNALS-ERROR (CHARACTERP #\a #\b) PROGRAM-ERROR) T)
;; Loading (DEFTEST ALPHA-CHAR-P.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ UNLESS (OR (FIND C +ALPHA-CHARS+) (NOT (ALPHA-CHAR-P C))) COLLECT C) NIL)
;; Loading (DEFTEST ALPHA-CHAR-P.2 (EVERY (FUNCTION ALPHA-CHAR-P) +ALPHA-CHARS+) T)
;; Loading (DEFTEST ALPHA-CHAR-P.3 (CHAR-TYPE-ERROR-CHECK (FUNCTION ALPHA-CHAR-P)) T)
;; Loading (DEFTEST ALPHA-CHAR-P.4 (MACROLET ((%M (Z) Z)) (ALPHA-CHAR-P (EXPAND-IN-CURRENT-ENV (%M #\?)))) NIL)
;; Loading (DEFTEST ALPHA-CHAR-P.ORDER.1 (LET ((I 0)) (VALUES (ALPHA-CHAR-P (PROGN (INCF I) #\8)) I)) NIL 1)
;; Loading (DEFTEST ALPHA-CHAR-P.ERROR.1 (SIGNALS-ERROR (ALPHA-CHAR-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST ALPHA-CHAR-P.ERROR.2 (SIGNALS-ERROR (ALPHA-CHAR-P #\a #\b) PROGRAM-ERROR) T)
;; Loading (DEFTEST ALPHANUMERICP.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ UNLESS (OR (FIND C +ALPHANUMERIC-CHARS+) (NOT (ALPHANUMERICP C))) COLLECT C) NIL)
;; Loading (DEFTEST ALPHANUMERICP.2 (EVERY (FUNCTION ALPHANUMERICP) +ALPHANUMERIC-CHARS+) T)
;; Loading (DEFTEST ALPHANUMERICP.3 (CHAR-TYPE-ERROR-CHECK (FUNCTION ALPHANUMERICP)) T)
;; Loading (DEFTEST ALPHANUMERICP.4 (ALPHANUMERICP.4.BODY) NIL)
;; Loading (DEFTEST ALPHANUMERICP.5 (ALPHANUMERICP.5.BODY) NIL)
;; Loading (DEFTEST ALPHANUMBERICP.6 (MACROLET ((%M (Z) Z)) (ALPHANUMERICP (EXPAND-IN-CURRENT-ENV (%M #\=)))) NIL)
;; Loading (DEFTEST ALPHANUMERICP.ORDER.1 (LET ((I 0)) (VALUES (ALPHANUMERICP (PROGN (INCF I) #\?)) I)) NIL 1)
;; Loading (DEFTEST ALPHANUMERICP.ERROR.1 (SIGNALS-ERROR (ALPHANUMERICP) PROGRAM-ERROR) T)
;; Loading (DEFTEST ALPHANUMERICP.ERROR.2 (SIGNALS-ERROR (ALPHANUMERICP #\a #\b) PROGRAM-ERROR) T)
;; Loading (DEFTEST DIGIT-CHAR.1 (DIGIT-CHAR.1.BODY) NIL)
;; Loading (DEFTEST DIGIT-CHAR.2 (MAP (QUOTE LIST) (FUNCTION DIGIT-CHAR) (LOOP FOR I FROM 0 TO 39 COLLECT I)) (#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL))
;; Loading (DEFTEST DIGIT-CHAR.ORDER.1 (LET ((I 0)) (VALUES (DIGIT-CHAR (INCF I)) I)) #\1 1)
;; Loading (DEFTEST DIGIT-CHAR.ORDER.2 (LET ((I 0) X) (VALUES (DIGIT-CHAR (INCF I) (PROGN (SETF X (INCF I)) 10)) I X)) #\1 2 2)
;; Loading (DEFTEST DIGIT-CHAR.ERROR.1 (SIGNALS-ERROR (DIGIT-CHAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST DIGIT-CHAR.ERROR.2 (SIGNALS-ERROR (DIGIT-CHAR 0 10 (QUOTE FOO)) PROGRAM-ERROR) T)
;; Loading (DEFTEST DIGIT-CHAR-P.1 (DIGIT-CHAR-P.1.BODY) NIL)
;; Loading (DEFTEST DIGIT-CHAR-P.2 (DIGIT-CHAR-P.2.BODY) NIL)
;; Loading (DEFTEST DIGIT-CHAR-P.3 (DIGIT-CHAR-P.3.BODY) NIL)
;; Loading (DEFTEST DIGIT-CHAR-P.4 (DIGIT-CHAR-P.4.BODY) NIL)
;; Loading (DEFTEST DIGIT-CHAR-P.5 (LOOP FOR I FROM 10 TO 35 FOR C = (CHAR +EXTENDED-DIGIT-CHARS+ I) WHEN (OR (DIGIT-CHAR-P C) (DIGIT-CHAR-P (CHAR-DOWNCASE C))) COLLECT C) NIL)
;; Loading (DEFTEST DIGIT-CHAR-P.6 (LOOP FOR I FROM 0 BELOW 10 FOR C = (CHAR +EXTENDED-DIGIT-CHARS+ I) UNLESS (EQLT (DIGIT-CHAR-P C) I) COLLECT I) NIL)
;; Loading (DEFTEST DIGIT-CHAR-P.ORDER.1 (LET ((I 0)) (VALUES (DIGIT-CHAR-P (PROGN (INCF I) #\0)) I)) 0 1)
;; Loading (DEFTEST DIGIT-CHAR-P.ORDER.2 (LET ((I 0) X Y) (VALUES (DIGIT-CHAR-P (PROGN (SETF X (INCF I)) #\0) (PROGN (SETF Y (INCF I)) 10)) I X Y)) 0 2 1 2)
;; Loading (DEFTEST DIGIT-CHAR-P.ERROR.1 (SIGNALS-ERROR (DIGIT-CHAR-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST DIGIT-CHAR-P.ERROR.2 (SIGNALS-ERROR (DIGIT-CHAR-P #\1 10 (QUOTE FOO)) PROGRAM-ERROR) T)
;; Loading (DEFTEST GRAPHIC-CHAR-P.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ UNLESS (IF (EQLT C #\Newline) (NOT (GRAPHIC-CHAR-P C)) (GRAPHIC-CHAR-P C)) COLLECT C) NIL)
;; Loading (DEFTEST GRAPHIC-CHAR-P.2 (LOOP FOR NAME IN (QUOTE ("Rubout" "Page" "Backspace" "Tab" "Linefeed" "Return")) FOR C = (NAME-CHAR NAME) WHEN (AND C (GRAPHIC-CHAR-P C)) COLLECT C) NIL)
;; Loading (DEFTEST GRAPHIC-CHAR-P.3 (CHAR-TYPE-ERROR-CHECK (FUNCTION GRAPHIC-CHAR-P)) T)
;; Loading (DEFTEST GRAPHIC-CHAR-P.ORDER.1 (LET ((I 0)) (VALUES (NOT (GRAPHIC-CHAR-P (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST GRAPHIC-CHAR-P.ERROR.1 (SIGNALS-ERROR (GRAPHIC-CHAR-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST GRAPHIC-CHAR-P.ERROR.2 (SIGNALS-ERROR (GRAPHIC-CHAR-P #\a #\a) PROGRAM-ERROR) T)
;; Loading (DEFTEST STANDARD-CHAR-P.1 (EVERY (FUNCTION STANDARD-CHAR-P) +STANDARD-CHARS+) T)
;; Loading (DEFTEST STANDARD-CHAR-P.2 (STANDARD-CHAR-P.2.BODY) NIL)
;; Loading (DEFTEST STANDARD-CHAR-P.2A (STANDARD-CHAR-P.2A.BODY) NIL)
;; Loading (DEFTEST STANDARD-CHAR-P.3 (CHAR-TYPE-ERROR-CHECK (FUNCTION STANDARD-CHAR-P)) T)
;; Loading (DEFTEST STANDARD-CHAR-P.ORDER.1 (LET ((I 0)) (VALUES (NOT (STANDARD-CHAR-P (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST STANDARD-CHAR-P.ERROR.1 (SIGNALS-ERROR (STANDARD-CHAR-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST STANDARD-CHAR-P.ERROR.2 (SIGNALS-ERROR (STANDARD-CHAR-P #\a #\a) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-UPCASE.1 (CHAR-UPCASE.1.BODY) NIL)
;; Loading (DEFTEST CHAR-UPCASE.2 (CHAR-UPCASE.2.BODY) NIL)
;; Loading (DEFTEST CHAR-UPCASE.3 (MAP (QUOTE STRING) (FUNCTION CHAR-UPCASE) +ALPHA-CHARS+) "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")
;; Loading (DEFTEST CHAR-UPCASE.4 (CHAR-TYPE-ERROR-CHECK (FUNCTION CHAR-UPCASE)) T)
;; Loading (DEFTEST CHAR-UPCASE.ORDER.1 (LET ((I 0)) (VALUES (CHAR-UPCASE (PROGN (INCF I) #\a)) I)) #\A 1)
;; Loading (DEFTEST CHAR-UPCASE.ERROR.1 (SIGNALS-ERROR (CHAR-UPCASE) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-UPCASE.ERROR.2 (SIGNALS-ERROR (CHAR-UPCASE #\a #\a) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-DOWNCASE.1 (CHAR-DOWNCASE.1.BODY) NIL)
;; Loading (DEFTEST CHAR-DOWNCASE.2 (CHAR-DOWNCASE.2.BODY) NIL)
;; Loading (DEFTEST CHAR-DOWNCASE.3 (MAP (QUOTE STRING) (FUNCTION CHAR-DOWNCASE) +ALPHA-CHARS+) "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz")
;; Loading (DEFTEST CHAR-DOWNCASE.4 (CHAR-TYPE-ERROR-CHECK (FUNCTION CHAR-DOWNCASE)) T)
;; Loading (DEFTEST CHAR-DOWNCASE.ORDER.1 (LET ((I 0)) (VALUES (CHAR-DOWNCASE (PROGN (INCF I) #\A)) I)) #\a 1)
;; Loading (DEFTEST CHAR-DOWNCASE.ERROR.1 (SIGNALS-ERROR (CHAR-DOWNCASE) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-DOWNCASE.ERROR.2 (SIGNALS-ERROR (CHAR-DOWNCASE #\A #\A) PROGRAM-ERROR) T)
;; Loading (DEFTEST UPPER-CASE-P.1 (FIND-IF-NOT (FUNCTION UPPER-CASE-P) +STANDARD-CHARS+ :START 26 :END 52) NIL)
;; Loading (DEFTEST UPPER-CASE-P.2 (FIND-IF (FUNCTION UPPER-CASE-P) +STANDARD-CHARS+ :END 26) NIL)
;; Loading (DEFTEST UPPER-CASE-P.3 (FIND (FUNCTION UPPER-CASE-P) +STANDARD-CHARS+ :START 52) NIL)
;; Loading (DEFTEST UPPER-CASE-P.4 (CHAR-TYPE-ERROR-CHECK (FUNCTION UPPER-CASE-P)) T)
;; Loading (DEFTEST UPPER-CASE-P.ORDER.1 (LET ((I 0)) (VALUES (UPPER-CASE-P (PROGN (INCF I) #\a)) I)) NIL 1)
;; Loading (DEFTEST UPPER-CASE-P.ERROR.1 (SIGNALS-ERROR (UPPER-CASE-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST UPPER-CASE-P.ERROR.2 (SIGNALS-ERROR (UPPER-CASE-P #\a #\A) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOWER-CASE-P.1 (FIND-IF-NOT (FUNCTION LOWER-CASE-P) +STANDARD-CHARS+ :END 26) NIL)
;; Loading (DEFTEST LOWER-CASE-P.2 (FIND-IF (FUNCTION LOWER-CASE-P) +STANDARD-CHARS+ :START 26) NIL)
;; Loading (DEFTEST LOWER-CASE-P.3 (CHAR-TYPE-ERROR-CHECK (FUNCTION LOWER-CASE-P)) T)
;; Loading (DEFTEST LOWER-CASE-P.ORDER.1 (LET ((I 0)) (VALUES (LOWER-CASE-P (PROGN (INCF I) #\A)) I)) NIL 1)
;; Loading (DEFTEST LOWER-CASE-P.ERROR.1 (SIGNALS-ERROR (LOWER-CASE-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOWER-CASE-P.ERROR.2 (SIGNALS-ERROR (LOWER-CASE-P #\a #\a) PROGRAM-ERROR) T)
;; Loading (DEFTEST BOTH-CASE-P.1 (BOTH-CASE-P.1.BODY) NIL)
;; Loading (DEFTEST BOTH-CASE-P.2 (BOTH-CASE-P.2.BODY) NIL)
;; Loading (DEFTEST BOTH-CASE-P.3 (CHAR-TYPE-ERROR-CHECK (FUNCTION BOTH-CASE-P)) T)
;; Loading (DEFTEST BOTH-CASE-P.4 (NOTNOT (MACROLET ((%M (Z) Z)) (BOTH-CASE-P (EXPAND-IN-CURRENT-ENV (%M #\a))))) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST BOTH-CASE-P.ORDER.1 (LET ((I 0)) (VALUES (BOTH-CASE-P (PROGN (INCF I) #\5)) I)) NIL 1)
;; Loading (DEFTEST BOTH-CASE-P.ERROR.1 (SIGNALS-ERROR (BOTH-CASE-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST BOTH-CASE-P.ERROR.2 (SIGNALS-ERROR (BOTH-CASE-P #\a #\a) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-CODE.1 (CHAR-TYPE-ERROR-CHECK (FUNCTION CHAR-CODE)) T)
;; Loading (DEFTEST CHAR-CODE.2 (CHAR-CODE.2.BODY) NIL)
;; Loading (DEFTEST CHAR-CODE.ORDER.1 (LET ((I 0)) (VALUES (NOT (NUMBERP (CHAR-CODE (PROGN (INCF I) #\a)))) I)) NIL 1)
;; Loading (DEFTEST CHAR-CODE.ERROR.1 (SIGNALS-ERROR (CHAR-CODE) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-CODE.ERROR.2 (SIGNALS-ERROR (CHAR-CODE #\a #\a) PROGRAM-ERROR) T)
;; Loading (DEFTEST CODE-CHAR.1 (LOOP FOR X ACROSS +STANDARD-CHARS+ UNLESS (EQLT (CODE-CHAR (CHAR-CODE X)) X) COLLECT X) NIL)
;; Loading (DEFTEST CODE-CHAR.ORDER.1 (LET ((I 0)) (VALUES (CODE-CHAR (PROGN (INCF I) (CHAR-CODE #\a))) I)) #\a 1)
;; Loading (DEFTEST CODE-CHAR.ERROR.1 (SIGNALS-ERROR (CODE-CHAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST CODE-CHAR.ERROR.2 (SIGNALS-ERROR (CODE-CHAR 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-INT.1 (LOOP FOR X ACROSS +STANDARD-CHARS+ UNLESS (EQLT (CHAR-INT X) (CHAR-CODE X)) COLLECT X) NIL)
;; Loading (DEFTEST CHAR-INT.2 (CHAR-INT.2.FN) NIL)
;; Loading (DEFTEST CHAR-INT.ORDER.1 (LET ((I 0)) (VALUES (CODE-CHAR (CHAR-INT (PROGN (INCF I) #\a))) I)) #\a 1)
;; Loading (DEFTEST CHAR-INT.ERROR.1 (SIGNALS-ERROR (CHAR-INT) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-INT.ERROR.2 (SIGNALS-ERROR (CHAR-INT #\a #\a) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-NAME.1 (CHAR-NAME.1.FN) T)
;; Loading (DEFTEST CHAR-NAME.2 (NOTNOT-MV (STRING= (CHAR-NAME #\Space) "Space")) T)
;; Loading (DEFTEST CHAR-NAME.3 (NOTNOT-MV (STRING= (CHAR-NAME #\Newline) "Newline")) T)
;; Loading (DEFTEST CHAR-NAME.4 (LOOP FOR S IN (QUOTE ("Rubout" "Page" "Backspace" "Return" "Tab" "Linefeed")) FOR C = (NAME-CHAR S) UNLESS (OR (NOT C) (NOT (STRING-EQUAL (CHAR-NAME C) S)) (STRING= (CHAR-NAME C) S)) COLLECT (LIST S C (CHAR-NAME C))) NIL)
;; Loading (DEFTEST CHAR-NAME.5 (CHAR-TYPE-ERROR-CHECK (FUNCTION CHAR-NAME)) T)
;; Loading (DEFTEST CHAR-NAME.ORDER.1 (LET ((I 0)) (VALUES (CHAR-NAME (PROGN (INCF I) #\Space)) I)) "Space" 1)
;; Loading (DEFTEST CHAR-NAME.ERROR.1 (SIGNALS-ERROR (CHAR-NAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST CHAR-NAME.ERROR.2 (SIGNALS-ERROR (CHAR-NAME #\a #\a) PROGRAM-ERROR) T)
;; Loading (LOAD "char-compare.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/char-compare.lsp 819DECE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CHAR-COMPARE-NO-ARGS (LOOP FOR F IN (QUOTE (CHAR= CHAR/= CHAR< CHAR> CHAR<= CHAR>= CHAR-LESSP CHAR-GREATERP CHAR-EQUAL CHAR-NOT-LESSP CHAR-NOT-GREATERP CHAR-NOT-EQUAL)) COLLECT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (FUNCALL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA F))) PROGRAM-ERROR)))) (T T T T T T T T T T T T))
;; Loading (DEFTEST CHAR=.1 (IS-ORDERED-BY +CODE-CHARS+ (FUNCTION (LAMBDA (C1 C2) (NOT (CHAR= C1 C2))))) T)
;; Loading (DEFTEST CHAR=.2 (LOOP FOR C ACROSS +CODE-CHARS+ ALWAYS (CHAR= C C)) T)
;; Loading (DEFTEST CHAR=.3 (EVERY (FUNCTION CHAR=) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR=.4 (IS-ORDERED-BY +REV-CODE-CHARS+ (FUNCTION (LAMBDA (C1 C2) (NOT (CHAR= C1 C2))))) T)
;; Loading (DEFTEST CHAR=.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR= (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR=.ORDER.2 (LET ((I 0) A B) (VALUES (CHAR= (PROGN (SETF A (INCF I)) #\a) (PROGN (SETF B (INCF I)) #\b)) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR=.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR= (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR/=.1 (IS-ORDERED-BY +CODE-CHARS+ (FUNCTION CHAR/=)) T)
;; Loading (DEFTEST CHAR/=.2 (LOOP FOR C ACROSS +CODE-CHARS+ NEVER (CHAR/= C C)) T)
;; Loading (DEFTEST CHAR/=.3 (EVERY (FUNCTION CHAR/=) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR/=.4 (IS-ORDERED-BY +REV-CODE-CHARS+ (FUNCTION CHAR/=)) T)
;; Loading (DEFTEST CHAR/=.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR/= (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR/=.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR/= (PROGN (SETF A (INCF I)) #\a) (PROGN (SETF B (INCF I)) #\b))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR/=.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR/= (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR<=.1 (LOOP FOR C ACROSS +CODE-CHARS+ ALWAYS (CHAR<= C C)) T)
;; Loading (DEFTEST CHAR<=.2 (EVERY (FUNCTION CHAR<=) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR<=.3 (IS-ANTISYMMETRICALLY-ORDERED-BY +CODE-CHARS+ (FUNCTION CHAR<=)) T)
;; Loading (DEFTEST CHAR<=.4 (IS-ANTISYMMETRICALLY-ORDERED-BY +LOWER-CASE-CHARS+ (FUNCTION CHAR<=)) T)
;; Loading (DEFTEST CHAR<=.5 (IS-ANTISYMMETRICALLY-ORDERED-BY +UPPER-CASE-CHARS+ (FUNCTION CHAR<=)) T)
;; Loading (DEFTEST CHAR<=.6 (IS-ANTISYMMETRICALLY-ORDERED-BY +DIGIT-CHARS+ (FUNCTION CHAR<=)) T)
;; Loading (DEFTEST CHAR<=.7 (NOTNOT-MV (OR (CHAR<= #\9 #\A) (CHAR<= #\Z #\0))) T)
;; Loading (DEFTEST CHAR<=.8 (NOTNOT-MV (OR (CHAR<= #\9 #\a) (CHAR<= #\z #\0))) T)
;; Loading (DEFTEST CHAR<=.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR<= (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR<=.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR<= (PROGN (SETF A (INCF I)) #\a) (PROGN (SETF B (INCF I)) #\b))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR<=.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR<= (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR<.1 (LOOP FOR C ACROSS +CODE-CHARS+ NEVER (CHAR< C C)) T)
;; Loading (DEFTEST CHAR<.2 (EVERY (FUNCTION CHAR<) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR<.3 (IS-ANTISYMMETRICALLY-ORDERED-BY +CODE-CHARS+ (FUNCTION CHAR<)) T)
;; Loading (DEFTEST CHAR<.4 (IS-ANTISYMMETRICALLY-ORDERED-BY +LOWER-CASE-CHARS+ (FUNCTION CHAR<)) T)
;; Loading (DEFTEST CHAR<.5 (IS-ANTISYMMETRICALLY-ORDERED-BY +UPPER-CASE-CHARS+ (FUNCTION CHAR<)) T)
;; Loading (DEFTEST CHAR<.6 (IS-ANTISYMMETRICALLY-ORDERED-BY +DIGIT-CHARS+ (FUNCTION CHAR<)) T)
;; Loading (DEFTEST CHAR<.7 (NOTNOT-MV (OR (CHAR< #\9 #\A) (CHAR< #\Z #\0))) T)
;; Loading (DEFTEST CHAR<.8 (NOTNOT-MV (OR (CHAR< #\9 #\a) (CHAR< #\z #\0))) T)
;; Loading (DEFTEST CHAR<.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR< (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR<.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR< (PROGN (SETF A (INCF I)) #\a) (PROGN (SETF B (INCF I)) #\b))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR<.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR< (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR<.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR< (PROGN (SETQ A (INCF I)) #\b) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR>=.1 (LOOP FOR C ACROSS +CODE-CHARS+ ALWAYS (CHAR>= C C)) T)
;; Loading (DEFTEST CHAR>=.2 (EVERY (FUNCTION CHAR>=) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR>=.3 (IS-ANTISYMMETRICALLY-ORDERED-BY +REV-CODE-CHARS+ (FUNCTION CHAR>=)) T)
;; Loading (DEFTEST CHAR>=.4 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +LOWER-CASE-CHARS+) (FUNCTION CHAR>=)) T)
;; Loading (DEFTEST CHAR>=.5 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +UPPER-CASE-CHARS+) (FUNCTION CHAR>=)) T)
;; Loading (DEFTEST CHAR>=.6 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +DIGIT-CHARS+) (FUNCTION CHAR>=)) T)
;; Loading (DEFTEST CHAR>=.7 (NOTNOT-MV (OR (CHAR>= #\A #\9) (CHAR>= #\0 #\Z))) T)
;; Loading (DEFTEST CHAR>=.8 (NOTNOT-MV (OR (CHAR>= #\a #\9) (CHAR>= #\0 #\z))) T)
;; Loading (DEFTEST CHAR>=.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR>= (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR>=.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR>= (PROGN (SETF A (INCF I)) #\b) (PROGN (SETF B (INCF I)) #\a))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR>=.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR>= (PROGN (SETQ A (INCF I)) #\b) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR>=.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR>= (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR>.1 (LOOP FOR C ACROSS +CODE-CHARS+ NEVER (CHAR> C C)) T)
;; Loading (DEFTEST CHAR>.2 (EVERY (FUNCTION CHAR>) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR>.3 (IS-ANTISYMMETRICALLY-ORDERED-BY +REV-CODE-CHARS+ (FUNCTION CHAR>)) T)
;; Loading (DEFTEST CHAR>.4 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +LOWER-CASE-CHARS+) (FUNCTION CHAR>)) T)
;; Loading (DEFTEST CHAR>.5 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +UPPER-CASE-CHARS+) (FUNCTION CHAR>)) T)
;; Loading (DEFTEST CHAR>.6 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +DIGIT-CHARS+) (FUNCTION CHAR>)) T)
;; Loading (DEFTEST CHAR>.7 (NOTNOT-MV (OR (CHAR> #\A #\9) (CHAR> #\0 #\Z))) T)
;; Loading (DEFTEST CHAR>.8 (NOTNOT-MV (OR (CHAR> #\a #\9) (CHAR> #\0 #\z))) T)
;; Loading (DEFTEST CHAR>.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR> (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR>.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR> (PROGN (SETF A (INCF I)) #\b) (PROGN (SETF B (INCF I)) #\a))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR>.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR> (PROGN (SETQ A (INCF I)) #\b) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR>.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR> (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-EQUAL.1 (IS-ORDERED-BY +CODE-CHARS+ (FUNCTION (LAMBDA (C1 C2) (OR (CHAR= (CHAR-DOWNCASE C1) (CHAR-DOWNCASE C2)) (NOT (CHAR-EQUAL C1 C2)))))) T)
;; Loading (DEFTEST CHAR-EQUAL.2 (LOOP FOR C ACROSS +CODE-CHARS+ ALWAYS (CHAR-EQUAL C C)) T)
;; Loading (DEFTEST CHAR-EQUAL.3 (LOOP FOR C ACROSS +CODE-CHARS+ ALWAYS (CHAR-EQUAL C)) T)
;; Loading (DEFTEST CHAR-EQUAL.4 (IS-ORDERED-BY +REV-CODE-CHARS+ (FUNCTION (LAMBDA (C1 C2) (OR (CHAR= (CHAR-DOWNCASE C1) (CHAR-DOWNCASE C2)) (NOT (CHAR-EQUAL C1 C2)))))) T)
;; Loading (DEFTEST CHAR-EQUAL.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR-EQUAL (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR-EQUAL.ORDER.2 (LET ((I 0) A B) (VALUES (CHAR-EQUAL (PROGN (SETF A (INCF I)) #\b) (PROGN (SETF B (INCF I)) #\a)) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR-EQUAL.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR-EQUAL (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-EQUAL.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR-EQUAL (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-NOT-EQUAL.1 (IS-ORDERED-BY +CODE-CHARS+ (FUNCTION (LAMBDA (C1 C2) (OR (CHAR= (CHAR-DOWNCASE C1) (CHAR-DOWNCASE C2)) (CHAR-NOT-EQUAL C1 C2))))) T)
;; Loading (DEFTEST CHAR-NOT-EQUAL.2 (LOOP FOR C ACROSS +CODE-CHARS+ NEVER (CHAR-NOT-EQUAL C C)) T)
;; Loading (DEFTEST CHAR-NOT-EQUAL.3 (EVERY (FUNCTION CHAR-NOT-EQUAL) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR-NOT-EQUAL.4 (IS-ORDERED-BY +REV-CODE-CHARS+ (FUNCTION (LAMBDA (C1 C2) (OR (CHAR= (CHAR-DOWNCASE C1) (CHAR-DOWNCASE C2)) (CHAR-NOT-EQUAL C1 C2))))) T)
;; Loading (DEFTEST CHAR-NOT-EQUAL.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR-NOT-EQUAL (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR-NOT-EQUAL.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR-NOT-EQUAL (PROGN (SETF A (INCF I)) #\b) (PROGN (SETF B (INCF I)) #\a))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR-NOT-EQUAL.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR-NOT-EQUAL (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-NOT-EQUAL.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR-NOT-EQUAL (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-NOT-GREATERP.1 (LOOP FOR C ACROSS +CODE-CHARS+ ALWAYS (CHAR-NOT-GREATERP C C)) T)
;; Loading (DEFTEST CHAR-NOT-GREATERP.2 (EVERY (FUNCTION CHAR-NOT-GREATERP) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR-NOT-GREATERP.3 (IS-CASE-INSENSITIVE (FUNCTION CHAR-NOT-GREATERP)) T)
;; Loading (DEFTEST CHAR-NOT-GREATERP.4 (IS-ANTISYMMETRICALLY-ORDERED-BY +LOWER-CASE-CHARS+ (FUNCTION CHAR-NOT-GREATERP)) T)
;; Loading (DEFTEST CHAR-NOT-GREATERP.5 (IS-ANTISYMMETRICALLY-ORDERED-BY +UPPER-CASE-CHARS+ (FUNCTION CHAR-NOT-GREATERP)) T)
;; Loading (DEFTEST CHAR-NOT-GREATERP.6 (IS-ANTISYMMETRICALLY-ORDERED-BY +DIGIT-CHARS+ (FUNCTION CHAR-NOT-GREATERP)) T)
;; Loading (DEFTEST CHAR-NOT-GREATERP.7 (NOTNOT-MV (OR (CHAR-NOT-GREATERP #\9 #\A) (CHAR-NOT-GREATERP #\Z #\0))) T)
;; Loading (DEFTEST CHAR-NOT-GREATERP.8 (NOTNOT-MV (OR (CHAR-NOT-GREATERP #\9 #\a) (CHAR-NOT-GREATERP #\z #\0))) T)
;; Loading (DEFTEST CHAR-NOT-GREATERP.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR-NOT-GREATERP (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR-NOT-GREATERP.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR-NOT-GREATERP (PROGN (SETF A (INCF I)) #\a) (PROGN (SETF B (INCF I)) #\b))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR-NOT-GREATERP.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR-NOT-GREATERP (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-NOT-GREATERP.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR-NOT-GREATERP (PROGN (SETQ A (INCF I)) #\b) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-LESSP.1 (LOOP FOR C ACROSS +CODE-CHARS+ NEVER (CHAR-LESSP C C)) T)
;; Loading (DEFTEST CHAR-LESSP.2 (EVERY (FUNCTION CHAR-LESSP) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR-LESSP.3 (IS-CASE-INSENSITIVE (FUNCTION CHAR-LESSP)) T)
;; Loading (DEFTEST CHAR-LESSP.4 (IS-ANTISYMMETRICALLY-ORDERED-BY +LOWER-CASE-CHARS+ (FUNCTION CHAR-LESSP)) T)
;; Loading (DEFTEST CHAR-LESSP.5 (IS-ANTISYMMETRICALLY-ORDERED-BY +UPPER-CASE-CHARS+ (FUNCTION CHAR-LESSP)) T)
;; Loading (DEFTEST CHAR-LESSP.6 (IS-ANTISYMMETRICALLY-ORDERED-BY +DIGIT-CHARS+ (FUNCTION CHAR-LESSP)) T)
;; Loading (DEFTEST CHAR-LESSP.7 (NOTNOT-MV (OR (CHAR-LESSP #\9 #\A) (CHAR-LESSP #\Z #\0))) T)
;; Loading (DEFTEST CHAR-LESSP.8 (NOTNOT-MV (OR (CHAR-LESSP #\9 #\a) (CHAR-LESSP #\z #\0))) T)
;; Loading (DEFTEST CHAR-LESSP.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR-LESSP (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR-LESSP.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR-LESSP (PROGN (SETF A (INCF I)) #\a) (PROGN (SETF B (INCF I)) #\b))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR-LESSP.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR-LESSP (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-LESSP.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR-LESSP (PROGN (SETQ A (INCF I)) #\b) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-NOT-LESSP.1 (LOOP FOR C ACROSS +CODE-CHARS+ ALWAYS (CHAR-NOT-LESSP C C)) T)
;; Loading (DEFTEST CHAR-NOT-LESSP.2 (EVERY (FUNCTION CHAR-NOT-LESSP) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR-NOT-LESSP.3 (IS-CASE-INSENSITIVE (FUNCTION CHAR-NOT-LESSP)) T)
;; Loading (DEFTEST CHAR-NOT-LESSP.4 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +LOWER-CASE-CHARS+) (FUNCTION CHAR-NOT-LESSP)) T)
;; Loading (DEFTEST CHAR-NOT-LESSP.5 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +UPPER-CASE-CHARS+) (FUNCTION CHAR-NOT-LESSP)) T)
;; Loading (DEFTEST CHAR-NOT-LESSP.6 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +DIGIT-CHARS+) (FUNCTION CHAR-NOT-LESSP)) T)
;; Loading (DEFTEST CHAR-NOT-LESSP.7 (NOTNOT-MV (OR (CHAR-NOT-LESSP #\A #\9) (CHAR-NOT-LESSP #\0 #\Z))) T)
;; Loading (DEFTEST CHAR-NOT-LESSP.8 (NOTNOT-MV (OR (CHAR-NOT-LESSP #\a #\9) (CHAR-NOT-LESSP #\0 #\z))) T)
;; Loading (DEFTEST CHAR-NOT-LESSP.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR-NOT-LESSP (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR-NOT-LESSP.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR-NOT-LESSP (PROGN (SETF A (INCF I)) #\b) (PROGN (SETF B (INCF I)) #\a))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR-NOT-LESSP.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR-NOT-LESSP (PROGN (SETQ A (INCF I)) #\b) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-NOT-LESSP.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR-NOT-LESSP (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-GREATERP.1 (LOOP FOR C ACROSS +CODE-CHARS+ NEVER (CHAR-GREATERP C C)) T)
;; Loading (DEFTEST CHAR-GREATERP.2 (EVERY (FUNCTION CHAR-GREATERP) +CODE-CHARS+) T)
;; Loading (DEFTEST CHAR-GREATERP.3 (IS-CASE-INSENSITIVE (FUNCTION CHAR-GREATERP)) T)
;; Loading (DEFTEST CHAR-GREATERP.4 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +LOWER-CASE-CHARS+) (FUNCTION CHAR-GREATERP)) T)
;; Loading (DEFTEST CHAR-GREATERP.5 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +UPPER-CASE-CHARS+) (FUNCTION CHAR-GREATERP)) T)
;; Loading (DEFTEST CHAR-GREATERP.6 (IS-ANTISYMMETRICALLY-ORDERED-BY (REVERSE +DIGIT-CHARS+) (FUNCTION CHAR-GREATERP)) T)
;; Loading (DEFTEST CHAR-GREATERP.7 (NOTNOT-MV (OR (CHAR-GREATERP #\A #\9) (CHAR-GREATERP #\0 #\Z))) T)
;; Loading (DEFTEST CHAR-GREATERP.8 (NOTNOT-MV (OR (CHAR-GREATERP #\a #\9) (CHAR-GREATERP #\0 #\z))) T)
;; Loading (DEFTEST CHAR-GREATERP.ORDER.1 (LET ((I 0)) (VALUES (NOT (CHAR-GREATERP (PROGN (INCF I) #\a))) I)) NIL 1)
;; Loading (DEFTEST CHAR-GREATERP.ORDER.2 (LET ((I 0) A B) (VALUES (NOT (CHAR-GREATERP (PROGN (SETF A (INCF I)) #\b) (PROGN (SETF B (INCF I)) #\a))) I A B)) NIL 2 1 2)
;; Loading (DEFTEST CHAR-GREATERP.ORDER.3 (LET ((I 0) A B C) (VALUES (CHAR-GREATERP (PROGN (SETQ A (INCF I)) #\b) (PROGN (SETQ B (INCF I)) #\a) (PROGN (SETQ C (INCF I)) #\b)) I A B C)) NIL 3 1 2 3)
;; Loading (DEFTEST CHAR-GREATERP.ORDER.4 (LET ((I 0) A B C) (VALUES (CHAR-GREATERP (PROGN (SETQ A (INCF I)) #\a) (PROGN (SETQ B (INCF I)) #\b) (PROGN (SETQ C (INCF I)) #\a)) I A B C)) NIL 3 1 2 3)
;; Loading (LOAD "name-char.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/name-char.lsp 81DC7DC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "char-aux.lsp")
;; Loading (DEFTEST NAME-CHAR.1 (NAME-CHAR.1.BODY) NIL)
;; Loading (DEFTEST NAME-CHAR.2 (LOOP FOR S IN (QUOTE ("RubOut" "PAGe" "BacKspace" "RetUrn" "Tab" "LineFeed" "SpaCE" "NewLine")) UNLESS (LET ((C1 (NAME-CHAR (STRING-UPCASE S))) (C2 (NAME-CHAR (STRING-DOWNCASE S))) (C3 (NAME-CHAR (STRING-CAPITALIZE S))) (C4 (NAME-CHAR S))) (AND (EQLT C1 C2) (EQLT C2 C3) (EQLT C3 C4))) COLLECT S) NIL)
;; Loading (DEFTEST NAME-CHAR.ORDER.1 (LET ((I 0)) (VALUES (NAME-CHAR (PROGN (INCF I) "Space")) I)) #\Space 1)
;; Loading (DEFTEST NAME-CHAR.SPECIALIZED.1 (LOOP FOR ETYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) APPEND (LOOP FOR S IN (QUOTE ("Rubout" "Page" "Backspace" "Return" "Tab" "Linefeed" "Space" "Newline")) FOR S2 = (MAKE-ARRAY (LENGTH S) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS S) UNLESS (EQL (NAME-CHAR S) (NAME-CHAR S2)) COLLECT (LIST S S2))) NIL)
;; Loading (DEFTEST NAME-CHAR.SPECIALIZED.2 (LOOP FOR ETYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) APPEND (LOOP FOR S IN (QUOTE ("Rubout" "Page" "Backspace" "Return" "Tab" "Linefeed" "Space" "Newline")) FOR S2 = (MAKE-ARRAY (LENGTH S) :ELEMENT-TYPE ETYPE :ADJUSTABLE T :INITIAL-CONTENTS S) UNLESS (EQL (NAME-CHAR S) (NAME-CHAR S2)) COLLECT (LIST ETYPE S S2))) NIL)
;; Loading (DEFTEST NAME-CHAR.SPECIALIZED.3 (LOOP FOR ETYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) APPEND (LOOP FOR S IN (QUOTE ("Rubout" "Page" "Backspace" "Return" "Tab" "Linefeed" "Space" "Newline")) FOR S2 = (MAKE-ARRAY (+ 3 (LENGTH S)) :ELEMENT-TYPE ETYPE :FILL-POINTER (LENGTH S) :INITIAL-CONTENTS (CONCATENATE (QUOTE STRING) S "   ")) UNLESS (EQL (NAME-CHAR S) (NAME-CHAR S2)) COLLECT (LIST ETYPE S S2))) NIL)
;; Loading (DEFTEST NAME-CHAR.SPECIALIZED.4 (LOOP FOR ETYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) APPEND (LOOP FOR S IN (QUOTE ("Rubout" "Page" "Backspace" "Return" "Tab" "Linefeed" "Space" "Newline")) FOR S1 = (MAKE-ARRAY (+ 4 (LENGTH S)) :ELEMENT-TYPE ETYPE :INITIAL-CONTENTS (CONCATENATE (QUOTE STRING) "  " S "  ")) FOR S2 = (MAKE-ARRAY (LENGTH S) :ELEMENT-TYPE ETYPE :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET 2) UNLESS (EQL (NAME-CHAR S) (NAME-CHAR S2)) COLLECT (LIST ETYPE S S2))) NIL)
;; Loading (DEFTEST NAME-CHAR.ERROR.1 (SIGNALS-ERROR (NAME-CHAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST NAME-CHAR.ERROR.2 (SIGNALS-ERROR (NAME-CHAR "space" "space") PROGRAM-ERROR) T)
;; Loading (LOAD "load-pathnames.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-pathnames.lsp 81E8D1A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/pathnames-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN COULD-BE-PATHNAME-DESIGNATOR (X) (OR (STRINGP X) (PATHNAMEP X) (TYPEP X (QUOTE FILE-STREAM)) (AND (TYPEP X (QUOTE SYNONYM-STREAM)) (COULD-BE-PATHNAME-DESIGNATOR (SYMBOL-VALUE (SYNONYM-STREAM-SYMBOL X)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN EXPLODE-PATHNAME (PN) (LIST :HOST (PATHNAME-HOST PN) :DEVICE (PATHNAME-DEVICE PN) :DIRECTORY (PATHNAME-DIRECTORY PN) :NAME (PATHNAME-NAME PN) :TYPE (PATHNAME-TYPE PN) :VERSION (PATHNAME-VERSION PN))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathnames-aux.llf C1952227>
;; Loading (LOAD "pathnames.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathnames.lsp C19B1907>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PATHNAMES-PRINT-AND-READ-PROPERLY (WITH-STANDARD-IO-SYNTAX (LOOP FOR P1 IN *PATHNAMES* FOR S = (HANDLER-CASE (WRITE-TO-STRING P1 :READABLY T) (PRINT-NOT-READABLE NIL :UNREADABLE-ERROR)) UNLESS (EQL S :UNREADABLE-ERROR) APPEND (LET ((P2 (READ-FROM-STRING S))) (UNLESS (EQUAL P1 P2) (LIST (LIST P1 S P2)))))) NIL)
;; Loading (LOAD "pathname.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathname.lsp C1AD1197>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PATHNAME.1 (LOOP FOR X IN *PATHNAMES* ALWAYS (EQ X (PATHNAME X))) T)
;; Loading (DEFTEST PATHNAME.2 (EQUALT (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp")) (PATHNAME "ansi-aux.lsp")) T)
;; Loading (DEFTEST PATHNAME.3 (LET ((S (OPEN "ansi-aux.lsp" :DIRECTION :INPUT))) (PROG1 (EQUALT (TRUENAME (PATHNAME S)) (TRUENAME (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp")))) (CLOSE S))) T)
;; Loading (DEFTEST PATHNAME.4 (LET ((S (OPEN "ansi-aux.lsp" :DIRECTION :INPUT))) (CLOSE S) (EQUALT (TRUENAME (PATHNAME S)) (TRUENAME (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp"))))) T)
;; Loading (DEFTEST PATHNAME.5 (LOOP FOR X IN *LOGICAL-PATHNAMES* ALWAYS (EQ X (PATHNAME X))) T)
;; Loading (DEFTEST PATHNAME.6 (EQUALT (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp")) (PATHNAME (MAKE-ARRAY 12 :INITIAL-CONTENTS "ansi-aux.lsp" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) T)
;; Loading (DEFTEST PATHNAME.7 (EQUALT (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp")) (PATHNAME (MAKE-ARRAY 15 :INITIAL-CONTENTS "ansi-aux.lspXXX" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 12))) T)
;; Loading (DEFTEST PATHNAME.8 (EQUALT (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp")) (PATHNAME (MAKE-ARRAY 12 :INITIAL-CONTENTS "ansi-aux.lsp" :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T))) T)
;; Loading (DEFTEST PATHNAME.9 (EQUALT (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp")) (PATHNAME (MAKE-ARRAY 15 :INITIAL-CONTENTS "ansi-aux.lspXXX" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 12))) T)
;; Loading (DEFTEST PATHNAME.10 (EQUALT (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp")) (PATHNAME (MAKE-ARRAY 12 :INITIAL-CONTENTS "ansi-aux.lsp" :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T))) T)
;; Loading (DEFTEST PATHNAME.11 (LOOP FOR ETYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) COLLECT (EQUALT (PARSE-NAMESTRING (QUOTE "ansi-aux.lsp")) (PATHNAME (LET* ((S (MAKE-ARRAY 15 :INITIAL-CONTENTS "XXansi-aux.lspX" :ELEMENT-TYPE ETYPE))) (MAKE-ARRAY 12 :ELEMENT-TYPE ETYPE :DISPLACED-TO S :DISPLACED-INDEX-OFFSET 2))))) (T T T))
;; Loading (DEFTEST PATHNAME.ERROR.1 (SIGNALS-ERROR (PATHNAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME.ERROR.2 (SIGNALS-ERROR (PATHNAME (FIRST *PATHNAMES*) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "pathnamep.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathnamep.lsp C1B62F47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PATHNAMEP.1 (CHECK-TYPE-PREDICATE (FUNCTION PATHNAMEP) (QUOTE PATHNAME)) NIL)
;; Loading (DEFTEST PATHNAMEP.2 (CHECK-PREDICATE (FUNCTION (LAMBDA (X) (EQL (LENGTH (MULTIPLE-VALUE-LIST (PATHNAMEP X))) 1)))) NIL)
;; Loading (DEFTEST PATHNAMEP.3 (CHECK-PREDICATE (TYPEF (QUOTE (NOT LOGICAL-PATHNAME))) (FUNCTION PATHNAMEP)) NIL)
;; Loading (DEFTEST PATHNAMEP.ERROR.1 (SIGNALS-ERROR (PATHNAMEP) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAMEP.ERROR.2 (SIGNALS-ERROR (PATHNAMEP NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAMEP.ERROR.3 (SIGNALS-ERROR (PATHNAMEP *DEFAULT-PATHNAME-DEFAULTS* NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "make-pathname.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-pathname.lsp C1B9EFE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFVAR *NULL-PATHNAME* (MAKE-PATHNAME))
;; Loading (DEFUN MAKE-PATHNAME-TEST (&REST ARGS &KEY (DEFAULTS NIL) (HOST (IF DEFAULTS (PATHNAME-HOST DEFAULTS) (PATHNAME-HOST *DEFAULT-PATHNAME-DEFAULTS*))) (DEVICE (IF DEFAULTS (PATHNAME-DEVICE DEFAULTS) (PATHNAME-DEVICE *NULL-PATHNAME*))) (DIRECTORY (IF DEFAULTS (PATHNAME-DIRECTORY DEFAULTS) (PATHNAME-DIRECTORY *NULL-PATHNAME*))) (NAME (IF DEFAULTS (PATHNAME-NAME DEFAULTS) (PATHNAME-NAME *NULL-PATHNAME*))) (TYPE (IF DEFAULTS (PATHNAME-TYPE DEFAULTS) (PATHNAME-TYPE *NULL-PATHNAME*))) (VERSION (IF DEFAULTS (PATHNAME-VERSION DEFAULTS) (PATHNAME-VERSION *NULL-PATHNAME*))) CASE) (DECLARE (IGNORABLE CASE)) (LET* ((VALS (MULTIPLE-VALUE-LIST (APPLY (FUNCTION MAKE-PATHNAME) ARGS))) (PN (FIRST VALS))) (AND (= (LENGTH VALS) 1) (TYPEP PN (QUOTE PATHNAME)) (EQUALP (PATHNAME-HOST PN) HOST) (EQUALP (PATHNAME-DEVICE PN) DEVICE) (LET ((PND (PATHNAME-DIRECTORY PN))) (IF (EQ DIRECTORY :WILD) (MEMBER PND (QUOTE ((:ABSOLUTE :WILD-INFERIORS) (:ABSOLUTE :WILD))) :TEST (FUNCTION EQUAL)) (EQUALP PND DIRECTORY))) (EQUALP (PATHNAME-NAME PN) NAME) (EQUALP (PATHNAME-TYPE PN) TYPE) (EQUALP (PATHNAME-VERSION PN) VERSION) T)))
;; Loading (DEFTEST MAKE-PATHNAME.1 (MAKE-PATHNAME-TEST) T)
;; Loading (DEFTEST MAKE-PATHNAME.2 (MAKE-PATHNAME-TEST :NAME "foo") T)
;; Loading (DEFTEST MAKE-PATHNAME.2A (DO-SPECIAL-STRINGS (S "foo") (ASSERT (MAKE-PATHNAME-TEST :NAME S))) NIL)
;; Loading (DEFTEST MAKE-PATHNAME.3 (MAKE-PATHNAME-TEST :NAME "foo" :TYPE "txt") T)
;; Loading (DEFTEST MAKE-PATHNAME.3A (DO-SPECIAL-STRINGS (S "txt") (ASSERT (MAKE-PATHNAME-TEST :NAME "foo" :TYPE S))) NIL)
;; Loading (DEFTEST MAKE-PATHNAME.4 (MAKE-PATHNAME-TEST :TYPE "lsp") T)
;; Loading (DEFTEST MAKE-PATHNAME.5 (MAKE-PATHNAME-TEST :DIRECTORY :WILD) T)
;; Loading (DEFTEST MAKE-PATHNAME.6 (MAKE-PATHNAME-TEST :NAME :WILD) T)
;; Loading (DEFTEST MAKE-PATHNAME.7 (MAKE-PATHNAME-TEST :TYPE :WILD) T)
;; Loading (DEFTEST MAKE-PATHNAME.8 (MAKE-PATHNAME-TEST :VERSION :WILD) T)
;; Loading (DEFTEST MAKE-PATHNAME.9 (MAKE-PATHNAME-TEST :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*) T)
;; Loading (DEFTEST MAKE-PATHNAME.10 (MAKE-PATHNAME-TEST :DEFAULTS (MAKE-PATHNAME :NAME "foo" :TYPE "bar")) T)
;; Loading (DEFTEST MAKE-PATHNAME.11 (MAKE-PATHNAME-TEST :VERSION :NEWEST) T)
;; Loading (DEFTEST MAKE-PATHNAME.12 (MAKE-PATHNAME-TEST :CASE :LOCAL) T)
;; Loading (DEFTEST MAKE-PATHNAME.13 (MAKE-PATHNAME-TEST :CASE :COMMON) T)
;; Loading (DEFTEST MAKE-PATHNAME.14 (LET ((*DEFAULT-PATHNAME-DEFAULTS* (MAKE-PATHNAME :NAME "foo" :TYPE "lsp" :VERSION :NEWEST))) (MAKE-PATHNAME-TEST)) T)
;; Loading (DEFTEST MAKE-PATHNAME.REBUILD (LOOP FOR P IN *PATHNAMES* FOR HOST = (PATHNAME-HOST P) FOR DEVICE = (PATHNAME-DEVICE P) FOR DIRECTORY = (PATHNAME-DIRECTORY P) FOR NAME = (PATHNAME-NAME P) FOR TYPE = (PATHNAME-TYPE P) FOR VERSION = (PATHNAME-VERSION P) FOR P2 = (MAKE-PATHNAME :HOST HOST :DEVICE DEVICE :DIRECTORY DIRECTORY :NAME NAME :TYPE TYPE :VERSION VERSION) UNLESS (EQUAL P P2) COLLECT (LIST P P2)) NIL)
;; Loading (DEFTEST MAKE-PATHNAME-ERROR-ABSOLUTE-UP (SIGNALS-ERROR (DIRECTORY (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE :UP)))) FILE-ERROR) T)
;; Loading (DEFTEST MAKE-PATHNAME-ERROR-ABSOLUTE-BACK (SIGNALS-ERROR (DIRECTORY (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE :BACK)))) FILE-ERROR) T)
;; Loading (DEFTEST MAKE-PATHNAME-ERROR-RELATIVE-WILD-INFERIORS-UP (SIGNALS-ERROR (LENGTH (DIRECTORY (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD-INFERIORS :UP))))) FILE-ERROR) T)
;; Loading (DEFTEST MAKE-PATHNAME-ERROR-ABSOLUTE-WILD-INFERIORS-BACK (SIGNALS-ERROR (DIRECTORY (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE :WILD-INFERIORS :BACK)))) FILE-ERROR) T)
;; Loading (DEFTEST MAKE-PATHNAME-ERROR-RELATIVE-WILD-INFERIORS-BACK (SIGNALS-ERROR (DIRECTORY (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD-INFERIORS :BACK)))) FILE-ERROR) T)
;; Loading (LOAD "pathname-host.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathname-host.lsp C1C9D547>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Loading (DEFTEST PATHNAME-HOST.1 (LOOP FOR P IN *PATHNAMES* ALWAYS (EQL (LENGTH (MULTIPLE-VALUE-LIST (PATHNAME-HOST P))) 1)) T)
;; Loading (DEFTEST PATHNAME-HOST.2 (LOOP FOR P IN *PATHNAMES* ALWAYS (EQL (LENGTH (MULTIPLE-VALUE-LIST (PATHNAME-HOST P :CASE :LOCAL))) 1)) T)
;; Loading (DEFTEST PATHNAME-HOST.3 (LOOP FOR P IN *PATHNAMES* ALWAYS (EQL (LENGTH (MULTIPLE-VALUE-LIST (PATHNAME-HOST P :CASE :COMMON))) 1)) T)
;; Loading (DEFTEST PATHNAME-HOST.4 (LOOP FOR P IN *PATHNAMES* ALWAYS (EQL (LENGTH (MULTIPLE-VALUE-LIST (PATHNAME-HOST P :ALLOW-OTHER-KEYS NIL))) 1)) T)
;; Loading (DEFTEST PATHNAME-HOST.5 (LOOP FOR P IN *PATHNAMES* ALWAYS (EQL (LENGTH (MULTIPLE-VALUE-LIST (PATHNAME-HOST P :FOO T :ALLOW-OTHER-KEYS T))) 1)) T)
;; Loading (DEFTEST PATHNAME-HOST.6 (LOOP FOR P IN *PATHNAMES* ALWAYS (EQL (LENGTH (MULTIPLE-VALUE-LIST (PATHNAME-HOST P :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE FOO) T))) 1)) T)
;; Loading (DEFTEST PATHNAME-HOST.7 (LOOP FOR P IN *LOGICAL-PATHNAMES* WHEN (EQ (PATHNAME-HOST P) :UNSPECIFIC) COLLECT P) NIL)
;; Loading (DEFTEST PATHNAME-HOST.8 (DO-SPECIAL-STRINGS (S "" NIL) (PATHNAME-HOST S)) NIL)
;; Loading (DEFTEST PATHNAME-HOST.ERROR.1 (SIGNALS-ERROR (PATHNAME-HOST) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-HOST.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION PATHNAME-HOST) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (DEFTEST PATHNAME-HOST.ERROR.3 (SIGNALS-ERROR (PATHNAME-HOST *DEFAULT-PATHNAME-DEFAULTS* (QUOTE #:BOGUS) T) PROGRAM-ERROR) T)
;; Loading (LOAD "pathname-device.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathname-device.lsp C1D29ED7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Loading (DEFTEST PATHNAME-DEVICE.1 (LOOP FOR P IN *PATHNAMES* FOR DEVICE = (PATHNAME-DEVICE P) UNLESS (OR (STRINGP DEVICE) (MEMBER DEVICE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P DEVICE)) NIL)
;; Loading (DEFTEST PATHNAME-DEVICE.2 (LOOP FOR P IN *PATHNAMES* FOR DEVICE = (PATHNAME-DEVICE P :CASE :LOCAL) UNLESS (OR (STRINGP DEVICE) (MEMBER DEVICE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P DEVICE)) NIL)
;; Loading (DEFTEST PATHNAME-DEVICE.3 (LOOP FOR P IN *PATHNAMES* FOR DEVICE = (PATHNAME-DEVICE P :CASE :COMMON) UNLESS (OR (STRINGP DEVICE) (MEMBER DEVICE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P DEVICE)) NIL)
;; Loading (DEFTEST PATHNAME-DEVICE.4 (LOOP FOR P IN *PATHNAMES* FOR DEVICE = (PATHNAME-DEVICE P :ALLOW-OTHER-KEYS NIL) UNLESS (OR (STRINGP DEVICE) (MEMBER DEVICE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P DEVICE)) NIL)
;; Loading (DEFTEST PATHNAME-DEVICE.5 (LOOP FOR P IN *PATHNAMES* FOR DEVICE = (PATHNAME-DEVICE P :FOO (QUOTE BAR) :ALLOW-OTHER-KEYS T) UNLESS (OR (STRINGP DEVICE) (MEMBER DEVICE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P DEVICE)) NIL)
;; Loading (DEFTEST PATHNAME-DEVICE.6 (LOOP FOR P IN *PATHNAMES* FOR DEVICE = (PATHNAME-DEVICE P :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO (QUOTE BAR)) UNLESS (OR (STRINGP DEVICE) (MEMBER DEVICE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P DEVICE)) NIL)
;; Loading (DEFTEST PATHNAME-DEVICE.7 (LOOP FOR P IN *LOGICAL-PATHNAMES* ALWAYS (EQ (PATHNAME-DEVICE P) :UNSPECIFIC)) T)
;; Loading (DEFTEST PATHNAME-DEVICE.8 (DO-SPECIAL-STRINGS (S "" NIL) (PATHNAME-DEVICE S)) NIL)
;; Loading (DEFTEST PATHNAME-DEVICE.ERROR.1 (SIGNALS-ERROR (PATHNAME-DEVICE) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-DEVICE.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION PATHNAME-DEVICE) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (LOAD "pathname-directory.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathname-directory.lsp C1DC0737>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Loading (DEFTEST PATHNAME-DIRECTORY.1 (LOOP FOR P IN *PATHNAMES* FOR DIRECTORY = (PATHNAME-DIRECTORY P) UNLESS (OR (STRINGP DIRECTORY) (MEMBER DIRECTORY (QUOTE (NIL :WILD :UNSPECIFIC))) (AND (CONSP DIRECTORY) (MEMBER (CAR DIRECTORY) (QUOTE (:ABSOLUTE :RELATIVE))))) COLLECT (LIST P DIRECTORY)) NIL)
;; Loading (DEFTEST PATHNAME-DIRECTORY.2 (LOOP FOR P IN *PATHNAMES* FOR DIRECTORY = (PATHNAME-DIRECTORY P :CASE :LOCAL) UNLESS (OR (STRINGP DIRECTORY) (MEMBER DIRECTORY (QUOTE (NIL :WILD :UNSPECIFIC))) (AND (CONSP DIRECTORY) (MEMBER (CAR DIRECTORY) (QUOTE (:ABSOLUTE :RELATIVE))))) COLLECT (LIST P DIRECTORY)) NIL)
;; Loading (DEFTEST PATHNAME-DIRECTORY.3 (LOOP FOR P IN *PATHNAMES* FOR DIRECTORY = (PATHNAME-DIRECTORY P :CASE :COMMON) UNLESS (OR (STRINGP DIRECTORY) (MEMBER DIRECTORY (QUOTE (NIL :WILD :UNSPECIFIC))) (AND (CONSP DIRECTORY) (MEMBER (CAR DIRECTORY) (QUOTE (:ABSOLUTE :RELATIVE))))) COLLECT (LIST P DIRECTORY)) NIL)
;; Loading (DEFTEST PATHNAME-DIRECTORY.4 (LOOP FOR P IN *PATHNAMES* FOR DIRECTORY = (PATHNAME-DIRECTORY P :ALLOW-OTHER-KEYS NIL) UNLESS (OR (STRINGP DIRECTORY) (MEMBER DIRECTORY (QUOTE (NIL :WILD :UNSPECIFIC))) (AND (CONSP DIRECTORY) (MEMBER (CAR DIRECTORY) (QUOTE (:ABSOLUTE :RELATIVE))))) COLLECT (LIST P DIRECTORY)) NIL)
;; Loading (DEFTEST PATHNAME-DIRECTORY.5 (LOOP FOR P IN *PATHNAMES* FOR DIRECTORY = (PATHNAME-DIRECTORY P :FOO (QUOTE BAR) :ALLOW-OTHER-KEYS T) UNLESS (OR (STRINGP DIRECTORY) (MEMBER DIRECTORY (QUOTE (NIL :WILD :UNSPECIFIC))) (AND (CONSP DIRECTORY) (MEMBER (CAR DIRECTORY) (QUOTE (:ABSOLUTE :RELATIVE))))) COLLECT (LIST P DIRECTORY)) NIL)
;; Loading (DEFTEST PATHNAME-DIRECTORY.6 (LOOP FOR P IN *PATHNAMES* FOR DIRECTORY = (PATHNAME-DIRECTORY P :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE FOO) (QUOTE BAR)) UNLESS (OR (STRINGP DIRECTORY) (MEMBER DIRECTORY (QUOTE (NIL :WILD :UNSPECIFIC))) (AND (CONSP DIRECTORY) (MEMBER (CAR DIRECTORY) (QUOTE (:ABSOLUTE :RELATIVE))))) COLLECT (LIST P DIRECTORY)) NIL)
;; Loading (DEFTEST PATHNAME-DIRECTORY.7 (LOOP FOR P IN *LOGICAL-PATHNAMES* WHEN (EQ (PATHNAME-DIRECTORY P) :UNSPECIFIC) COLLECT P) NIL)
;; Loading (DEFTEST PATHNAME-DIRECTORY.8 (DO-SPECIAL-STRINGS (S "" NIL) (PATHNAME-DIRECTORY S)) NIL)
;; Loading (DEFTEST PATHNAME-DIRECTORY.ERROR.1 (SIGNALS-ERROR (PATHNAME-DIRECTORY) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-DIRECTORY.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION PATHNAME-DIRECTORY) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (LOAD "pathname-name.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathname-name.lsp C1E7D5C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Loading (DEFTEST PATHNAME-NAME.1 (LOOP FOR P IN *PATHNAMES* FOR NAME = (PATHNAME-NAME P) UNLESS (OR (STRINGP NAME) (MEMBER NAME (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P NAME)) NIL)
;; Loading (DEFTEST PATHNAME-NAME.2 (LOOP FOR P IN *PATHNAMES* FOR NAME = (PATHNAME-NAME P :CASE :LOCAL) UNLESS (OR (STRINGP NAME) (MEMBER NAME (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P NAME)) NIL)
;; Loading (DEFTEST PATHNAME-NAME.3 (LOOP FOR P IN *PATHNAMES* FOR NAME = (PATHNAME-NAME P :CASE :COMMON) UNLESS (OR (STRINGP NAME) (MEMBER NAME (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P NAME)) NIL)
;; Loading (DEFTEST PATHNAME-NAME.4 (LOOP FOR P IN *PATHNAMES* FOR NAME = (PATHNAME-NAME P :ALLOW-OTHER-KEYS NIL) UNLESS (OR (STRINGP NAME) (MEMBER NAME (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P NAME)) NIL)
;; Loading (DEFTEST PATHNAME-NAME.5 (LOOP FOR P IN *PATHNAMES* FOR NAME = (PATHNAME-NAME P :FOO (QUOTE BAR) :ALLOW-OTHER-KEYS T) UNLESS (OR (STRINGP NAME) (MEMBER NAME (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P NAME)) NIL)
;; Loading (DEFTEST PATHNAME-NAME.6 (LOOP FOR P IN *PATHNAMES* FOR NAME = (PATHNAME-NAME P :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO (QUOTE BAR)) UNLESS (OR (STRINGP NAME) (MEMBER NAME (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P NAME)) NIL)
;; Loading (DEFTEST PATHNAME-NAME.7 (LOOP FOR P IN *LOGICAL-PATHNAMES* WHEN (EQ (PATHNAME-NAME P) :UNSPECIFIC) COLLECT P) NIL)
;; Loading (DEFTEST PATHNAME-NAME.8 (DO-SPECIAL-STRINGS (S "" NIL) (PATHNAME-NAME S)) NIL)
;; Loading (DEFTEST PATHNAME-NAME.ERROR.1 (SIGNALS-ERROR (PATHNAME-NAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-NAME.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION PATHNAME-NAME) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (LOAD "pathname-type.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathname-type.lsp C1F10847>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Loading (DEFTEST PATHNAME-TYPE.1 (LOOP FOR P IN *PATHNAMES* FOR TYPE = (PATHNAME-TYPE P) UNLESS (OR (STRINGP TYPE) (MEMBER TYPE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P TYPE)) NIL)
;; Loading (DEFTEST PATHNAME-TYPE.2 (LOOP FOR P IN *PATHNAMES* FOR TYPE = (PATHNAME-TYPE P :CASE :LOCAL) UNLESS (OR (STRINGP TYPE) (MEMBER TYPE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P TYPE)) NIL)
;; Loading (DEFTEST PATHNAME-TYPE.3 (LOOP FOR P IN *PATHNAMES* FOR TYPE = (PATHNAME-TYPE P :CASE :COMMON) UNLESS (OR (STRINGP TYPE) (MEMBER TYPE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P TYPE)) NIL)
;; Loading (DEFTEST PATHNAME-TYPE.4 (LOOP FOR P IN *PATHNAMES* FOR TYPE = (PATHNAME-TYPE P :ALLOW-OTHER-KEYS NIL) UNLESS (OR (STRINGP TYPE) (MEMBER TYPE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P TYPE)) NIL)
;; Loading (DEFTEST PATHNAME-TYPE.5 (LOOP FOR P IN *PATHNAMES* FOR TYPE = (PATHNAME-TYPE P :FOO (QUOTE BAR) :ALLOW-OTHER-KEYS T) UNLESS (OR (STRINGP TYPE) (MEMBER TYPE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P TYPE)) NIL)
;; Loading (DEFTEST PATHNAME-TYPE.6 (LOOP FOR P IN *PATHNAMES* FOR TYPE = (PATHNAME-TYPE P :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO (QUOTE BAR)) UNLESS (OR (STRINGP TYPE) (MEMBER TYPE (QUOTE (NIL :WILD :UNSPECIFIC)))) COLLECT (LIST P TYPE)) NIL)
;; Loading (DEFTEST PATHNAME-TYPE.7 (LOOP FOR P IN *LOGICAL-PATHNAMES* WHEN (EQ (PATHNAME-TYPE P) :UNSPECIFIC) COLLECT P) NIL)
;; Loading (DEFTEST PATHNAME-TYPE.8 (DO-SPECIAL-STRINGS (S "" NIL) (PATHNAME-TYPE S)) NIL)
;; Loading (DEFTEST PATHNAME-TYPE.ERROR.1 (SIGNALS-ERROR (PATHNAME-TYPE) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-TYPE.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION PATHNAME-TYPE) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (LOAD "pathname-version.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathname-version.lsp C1FA4807>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Loading (DEFTEST PATHNAME-VERSION.1 (LOOP FOR P IN *PATHNAMES* FOR VERSION = (PATHNAME-VERSION P) UNLESS (OR (INTEGERP VERSION) (SYMBOLP VERSION)) COLLECT (LIST P VERSION)) NIL)
;; Loading (DEFTEST PATHNAME-VERSION.2 (LOOP FOR P IN *LOGICAL-PATHNAMES* WHEN (EQ (PATHNAME-VERSION P) :UNSPECIFIC) COLLECT P) NIL)
;; Loading (DEFTEST PATHNAME-VERSION.3 (DO-SPECIAL-STRINGS (S "" NIL) (PATHNAME-VERSION S)) NIL)
;; Loading (DEFTEST PATHNAME-VERSION.ERROR.1 (SIGNALS-ERROR (PATHNAME-VERSION) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-VERSION.ERROR.2 (SIGNALS-ERROR (PATHNAME-VERSION *DEFAULT-PATHNAME-DEFAULTS* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-VERSION.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION PATHNAME-VERSION) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (LOAD "load-logical-pathname-translations.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-logical-pathname-translations.lsp 818731E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LOAD-LOGICAL-PATHNAME-TRANSLATIONS.1 (LOAD-LOGICAL-PATHNAME-TRANSLATIONS "CLTESTROOT") NIL)
;; Loading (DEFTEST LOAD-LOGICAL-PATHNAME-TRANSLATIONS.ERROR.1 (HANDLER-CASE (PROGN (LOAD-LOGICAL-PATHNAME-TRANSLATIONS "THEREHADBETTERNOTBEAHOSTCALLEDTHIS") NIL) (ERROR NIL :GOOD)) :GOOD)
;; Loading (DEFTEST LOAD-LOGICAL-PATHNAME-TRANSLATIONS.ERROR.2 (SIGNALS-ERROR (LOAD-LOGICAL-PATHNAME-TRANSLATIONS) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOAD-LOGICAL-PATHNAME-TRANSLATIONS.ERROR.3 (SIGNALS-ERROR (LOAD-LOGICAL-PATHNAME-TRANSLATIONS "CLTESTROOT" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "logical-pathname.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logical-pathname.lsp 819A8D27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LOGICAL-PATHNAME.1 (LOOP FOR X IN *LOGICAL-PATHNAMES* ALWAYS (EQL X (LOGICAL-PATHNAME X))) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.2 (NOTNOT-MV (TYPEP (LOGICAL-PATHNAME "CLTEST:FOO") (QUOTE LOGICAL-PATHNAME))) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.3 (LET ((NAME "CLTEST:TEMP.DAT.NEWEST")) (WITH-OPEN-FILE (S (LOGICAL-PATHNAME NAME) :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :IF-DOES-NOT-EXIST :CREATE) (OR (EQUALT (LOGICAL-PATHNAME S) (LOGICAL-PATHNAME NAME)) (LIST (LOGICAL-PATHNAME S) (LOGICAL-PATHNAME NAME))))) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION LOGICAL-PATHNAME) (TYPEF (QUOTE (OR STRING STREAM LOGICAL-PATHNAME)))) NIL)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.2 (SIGNALS-ERROR (LOGICAL-PATHNAME "FOO.TXT") TYPE-ERROR) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.3 (SIGNALS-ERROR (WITH-OPEN-FILE (S (PARSE-NAMESTRING (QUOTE "logical-pathname.lsp")) :DIRECTION :INPUT) (LOGICAL-PATHNAME S)) TYPE-ERROR) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.4 (SIGNALS-ERROR (WITH-OPEN-STREAM (IS (MAKE-CONCATENATED-STREAM)) (WITH-OPEN-STREAM (OS (MAKE-BROADCAST-STREAM)) (WITH-OPEN-STREAM (S (MAKE-TWO-WAY-STREAM IS OS)) (LOGICAL-PATHNAME S)))) TYPE-ERROR) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.5 (SIGNALS-ERROR (WITH-OPEN-STREAM (IS (MAKE-CONCATENATED-STREAM)) (WITH-OPEN-STREAM (OS (MAKE-BROADCAST-STREAM)) (WITH-OPEN-STREAM (S (MAKE-ECHO-STREAM IS OS)) (LOGICAL-PATHNAME S)))) TYPE-ERROR) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.6 (SIGNALS-ERROR (WITH-OPEN-STREAM (S (MAKE-BROADCAST-STREAM)) (LOGICAL-PATHNAME S)) TYPE-ERROR) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.7 (SIGNALS-ERROR (WITH-OPEN-STREAM (S (MAKE-CONCATENATED-STREAM)) (LOGICAL-PATHNAME S)) TYPE-ERROR) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.8 (SIGNALS-ERROR (WITH-OPEN-STREAM (S (MAKE-STRING-INPUT-STREAM "foo")) (LOGICAL-PATHNAME S)) TYPE-ERROR) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.9 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (LOGICAL-PATHNAME S)) TYPE-ERROR) T)
;; Loading (DEFTEST LOGICAL-PATHNAME.ERROR.10 (HANDLER-CASE (PROGN (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (LOGICAL-PATHNAME "CLROOT:%")))) T) (TYPE-ERROR NIL T)) T)
;; Loading (LOAD "logical-pathname-translations.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/logical-pathname-translations.lsp 81A3C937>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (LOAD "translate-logical-pathname.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/translate-logical-pathname.lsp 81A59BA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TRANSLATE-LOGICAL-PATHNAME.1 (LOOP FOR P IN *PATHNAMES* UNLESS (OR (TYPEP P (QUOTE LOGICAL-PATHNAME)) (EQ P (TRANSLATE-LOGICAL-PATHNAME P))) COLLECT P) NIL)
;; Loading (DEFTEST TRANSLATE-LOGICAL-PATHNAME.2 (LOOP FOR P IN *PATHNAMES* UNLESS (OR (TYPEP P (QUOTE LOGICAL-PATHNAME)) (EQ P (TRANSLATE-LOGICAL-PATHNAME P :ALLOW-OTHER-KEYS T))) COLLECT P) NIL)
;; Loading (DEFTEST TRANSLATE-LOGICAL-PATHNAME.3 (LOOP FOR P IN *PATHNAMES* UNLESS (OR (TYPEP P (QUOTE LOGICAL-PATHNAME)) (EQ P (TRANSLATE-LOGICAL-PATHNAME P :ALLOW-OTHER-KEYS NIL))) COLLECT P) NIL)
;; Loading (DEFTEST TRANSLATE-LOGICAL-PATHNAME.4 (LOOP FOR P IN *PATHNAMES* UNLESS (OR (TYPEP P (QUOTE LOGICAL-PATHNAME)) (EQ P (TRANSLATE-LOGICAL-PATHNAME P :FOO 1 :ALLOW-OTHER-KEYS T :BAR 2))) COLLECT P) NIL)
;; Loading (DEFTEST TRANSLATE-LOGICAL-PATHNAME.ERROR.1 (SIGNALS-ERROR (TRANSLATE-LOGICAL-PATHNAME) PROGRAM-ERROR) T)
;; Loading (LOAD "namestring.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/namestring.lsp 81AAD0D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST NAMESTRING.1 (LET* ((VALS (MULTIPLE-VALUE-LIST (NAMESTRING "namestring.lsp"))) (S (FIRST VALS))) (IF (AND (NULL (CDR VALS)) (STRINGP S) (EQUAL (NAMESTRING S) S)) :GOOD VALS)) :GOOD)
;; Loading (DEFTEST NAMESTRING.2 (DO-SPECIAL-STRINGS (S "namestring.lsp" NIL) (LET ((NS (NAMESTRING S))) (ASSERT (STRINGP NS)) (ASSERT (STRING= (NAMESTRING NS) NS)))) NIL)
;; Loading (DEFTEST NAMESTRING.ERROR.1 (SIGNALS-ERROR (NAMESTRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST NAMESTRING.ERROR.2 (SIGNALS-ERROR (NAMESTRING "namestring.lsp" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "file-namestring.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/file-namestring.lsp 81B0CC87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILE-NAMESTRING.1 (LET* ((VALS (MULTIPLE-VALUE-LIST (FILE-NAMESTRING "file-namestring.lsp"))) (S (FIRST VALS))) (IF (AND (NULL (CDR VALS)) (STRINGP S) (EQUAL (FILE-NAMESTRING S) S)) :GOOD VALS)) :GOOD)
;; Loading (DEFTEST FILE-NAMESTRING.2 (DO-SPECIAL-STRINGS (S "file-namestring.lsp" NIL) (LET ((NS (FILE-NAMESTRING S))) (ASSERT (STRINGP NS)) (ASSERT (STRING= (FILE-NAMESTRING NS) NS)))) NIL)
;; Loading (DEFTEST FILE-NAMESTRING.3 (LET* ((NAME "file-namestring.lsp") (PN (MERGE-PATHNAMES (PATHNAME NAME))) (NAME2 (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (FILE-NAMESTRING S))) (NAME3 (FILE-NAMESTRING PN))) (OR (EQUALT NAME2 NAME3) (LIST NAME2 NAME3))) T)
;; Loading (DEFTEST FILE-NAMESTRING.ERROR.1 (SIGNALS-ERROR (FILE-NAMESTRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-NAMESTRING.ERROR.2 (SIGNALS-ERROR (FILE-NAMESTRING "file-namestring.lsp" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "directory-namestring.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/directory-namestring.lsp 81B5C447>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DIRECTORY-NAMESTRING.1 (LET* ((VALS (MULTIPLE-VALUE-LIST (DIRECTORY-NAMESTRING "directory-namestring.lsp"))) (S (FIRST VALS))) (IF (AND (NULL (CDR VALS)) (STRINGP S) (EQUAL (DIRECTORY-NAMESTRING S) S)) :GOOD VALS)) :GOOD)
;; Loading (DEFTEST DIRECTORY-NAMESTRING.2 (DO-SPECIAL-STRINGS (S "directory-namestring.lsp" NIL) (LET ((NS (DIRECTORY-NAMESTRING S))) (ASSERT (STRINGP NS)) (ASSERT (STRING= (DIRECTORY-NAMESTRING NS) NS)))) NIL)
;; Loading (DEFTEST DIRECTORY-NAMESTRING.3 (LET* ((NAME "directory-namestring.lsp") (PN (MERGE-PATHNAMES (PATHNAME NAME))) (NAME2 (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (DIRECTORY-NAMESTRING S))) (NAME3 (DIRECTORY-NAMESTRING PN))) (OR (EQUALT NAME2 NAME3) (LIST NAME2 NAME3))) T)
;; Loading (DEFTEST DIRECTORY-NAMESTRING.ERROR.1 (SIGNALS-ERROR (DIRECTORY-NAMESTRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST DIRECTORY-NAMESTRING.ERROR.2 (SIGNALS-ERROR (DIRECTORY-NAMESTRING "directory-namestring.lsp" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "host-namestring.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/host-namestring.lsp 81BB6E67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST HOST-NAMESTRING.1 (LET* ((VALS (MULTIPLE-VALUE-LIST (HOST-NAMESTRING "host-namestring.lsp"))) (S (FIRST VALS))) (IF (AND (NULL (CDR VALS)) (OR (NULL S) (STRINGP S))) :GOOD VALS)) :GOOD)
;; Loading (DEFTEST HOST-NAMESTRING.2 (DO-SPECIAL-STRINGS (S "host-namestring.lsp" NIL) (LET ((NS (HOST-NAMESTRING S))) (WHEN NS (ASSERT (STRINGP NS))))) NIL)
;; Loading (DEFTEST HOST-NAMESTRING.3 (LET* ((NAME "host-namestring.lsp") (PN (MERGE-PATHNAMES (PATHNAME NAME))) (NAME2 (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (HOST-NAMESTRING S))) (NAME3 (HOST-NAMESTRING PN))) (OR (EQUALT NAME2 NAME3) (LIST NAME2 NAME3))) T)
;; Loading (DEFTEST HOST-NAMESTRING.ERROR.1 (SIGNALS-ERROR (HOST-NAMESTRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST HOST-NAMESTRING.ERROR.2 (SIGNALS-ERROR (HOST-NAMESTRING "host-namestring.lsp" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "enough-namestring.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/enough-namestring.lsp 81C07187>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ENOUGH-NAMESTRING.1 (LET* ((VALS (MULTIPLE-VALUE-LIST (ENOUGH-NAMESTRING "enough-namestring.lsp"))) (S (FIRST VALS))) (IF (AND (NULL (CDR VALS)) (STRINGP S) (EQUAL (ENOUGH-NAMESTRING S) S)) :GOOD VALS)) :GOOD)
;; Loading (DEFTEST ENOUGH-NAMESTRING.2 (DO-SPECIAL-STRINGS (S "enough-namestring.lsp" NIL) (LET ((NS (ENOUGH-NAMESTRING S))) (ASSERT (STRINGP NS)) (ASSERT (STRING= (ENOUGH-NAMESTRING NS) NS)))) NIL)
;; Loading (DEFTEST ENOUGH-NAMESTRING.3 (LET* ((NAME "enough-namestring.lsp") (PN (MERGE-PATHNAMES (PATHNAME NAME))) (NAME2 (ENOUGH-NAMESTRING PN)) (NAME3 (ENOUGH-NAMESTRING NAME))) (OR (EQUALT NAME2 NAME3) (LIST NAME2 NAME3))) T)
;; Loading (DEFTEST ENOUGH-NAMESTRING.4 (LET* ((NAME "enough-namestring.lsp") (PN (MERGE-PATHNAMES (PATHNAME NAME))) (NAME2 (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (ENOUGH-NAMESTRING S))) (NAME3 (ENOUGH-NAMESTRING NAME))) (OR (EQUALT NAME2 NAME3) (LIST NAME2 NAME3))) T)
;; Loading (DEFTEST ENOUGH-NAMESTRING.5 (LET* ((VALS (MULTIPLE-VALUE-LIST (ENOUGH-NAMESTRING "enough-namestring.lsp" *DEFAULT-PATHNAME-DEFAULTS*))) (S (FIRST VALS))) (IF (AND (NULL (CDR VALS)) (STRINGP S) (EQUAL (ENOUGH-NAMESTRING S) S)) :GOOD VALS)) :GOOD)
;; Loading (DEFTEST ENOUGH-NAMESTRING.6 (LET* ((VALS (MULTIPLE-VALUE-LIST (ENOUGH-NAMESTRING "enough-namestring.lsp" (NAMESTRING *DEFAULT-PATHNAME-DEFAULTS*)))) (S (FIRST VALS))) (IF (AND (NULL (CDR VALS)) (STRINGP S) (EQUAL (ENOUGH-NAMESTRING S) S)) :GOOD VALS)) :GOOD)
;; Loading (DEFTEST ENOUGH-NAMESTRING.7 (DO-SPECIAL-STRINGS (S (NAMESTRING *DEFAULT-PATHNAME-DEFAULTS*) NIL) (LET* ((VALS (MULTIPLE-VALUE-LIST (ENOUGH-NAMESTRING "enough-namestring.lsp" S))) (S2 (FIRST VALS))) (ASSERT (NULL (CDR VALS))) (ASSERT (STRINGP S2)) (ASSERT (EQUAL (ENOUGH-NAMESTRING S2) S2)))) NIL)
;; Loading (DEFTEST ENOUGH-NAMESTRING.ERROR.1 (SIGNALS-ERROR (ENOUGH-NAMESTRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST ENOUGH-NAMESTRING.ERROR.2 (SIGNALS-ERROR (ENOUGH-NAMESTRING "enough-namestring.lsp" *DEFAULT-PATHNAME-DEFAULTS* NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "wild-pathname-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/wild-pathname-p.lsp 81C97D67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Loading (DEFTEST WILD-PATHNAME-P.1 (WILD-PATHNAME-P (MAKE-PATHNAME)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.2 (LOOP FOR KEY IN (QUOTE (:HOST :DEVICE :DIRECTORY :NAME :TYPE :VERSION NIL)) WHEN (WILD-PATHNAME-P (MAKE-PATHNAME) KEY) COLLECT KEY) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.3 (LET ((P (MAKE-PATHNAME :DIRECTORY :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.4 (LET ((P (MAKE-PATHNAME :DIRECTORY :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P NIL))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.5 (LET ((P (MAKE-PATHNAME :DIRECTORY :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P :DIRECTORY))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.6 (LET ((P (MAKE-PATHNAME :DIRECTORY :WILD))) (LOOP FOR KEY IN (QUOTE (:HOST :DEVICE :NAME :TYPE :VERSION)) WHEN (WILD-PATHNAME-P P KEY) COLLECT KEY)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.7 (LET ((P (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE :WILD))))) (NOTNOT-MV (WILD-PATHNAME-P P))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.8 (LET ((P (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE :WILD))))) (NOTNOT-MV (WILD-PATHNAME-P P NIL))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.9 (LET ((P (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE :WILD))))) (NOTNOT-MV (WILD-PATHNAME-P P :DIRECTORY))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.10 (LET ((P (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE :WILD))))) (LOOP FOR KEY IN (QUOTE (:HOST :DEVICE :NAME :TYPE :VERSION)) WHEN (WILD-PATHNAME-P P KEY) COLLECT KEY)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.11 (LET ((P (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD))))) (NOTNOT-MV (WILD-PATHNAME-P P))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.12 (LET ((P (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD))))) (NOTNOT-MV (WILD-PATHNAME-P P NIL))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.13 (LET ((P (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD))))) (NOTNOT-MV (WILD-PATHNAME-P P :DIRECTORY))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.14 (LET ((P (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD))))) (LOOP FOR KEY IN (QUOTE (:HOST :DEVICE :NAME :TYPE :VERSION)) WHEN (WILD-PATHNAME-P P KEY) COLLECT KEY)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.15 (LET ((P (MAKE-PATHNAME :NAME :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.16 (LET ((P (MAKE-PATHNAME :NAME :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P NIL))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.17 (LET ((P (MAKE-PATHNAME :NAME :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P :NAME))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.18 (LET ((P (MAKE-PATHNAME :NAME :WILD))) (LOOP FOR KEY IN (QUOTE (:HOST :DEVICE :DIRECTORY :TYPE :VERSION)) WHEN (WILD-PATHNAME-P P KEY) COLLECT KEY)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.19 (LET ((P (MAKE-PATHNAME :TYPE :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.20 (LET ((P (MAKE-PATHNAME :TYPE :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P NIL))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.21 (LET ((P (MAKE-PATHNAME :TYPE :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P :TYPE))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.22 (LET ((P (MAKE-PATHNAME :TYPE :WILD))) (LOOP FOR KEY IN (QUOTE (:HOST :DEVICE :DIRECTORY :NAME :VERSION)) WHEN (WILD-PATHNAME-P P KEY) COLLECT KEY)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.23 (LET ((P (MAKE-PATHNAME :VERSION :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.24 (LET ((P (MAKE-PATHNAME :VERSION :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P NIL))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.25 (LET ((P (MAKE-PATHNAME :VERSION :WILD))) (NOTNOT-MV (WILD-PATHNAME-P P :VERSION))) T)
;; Loading (DEFTEST WILD-PATHNAME-P.26 (LET ((P (MAKE-PATHNAME :VERSION :WILD))) (LOOP FOR KEY IN (QUOTE (:HOST :DEVICE :DIRECTORY :NAME :TYPE)) WHEN (WILD-PATHNAME-P P KEY) COLLECT KEY)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.27 (LOOP FOR P IN (APPEND *PATHNAMES* *LOGICAL-PATHNAMES*) UNLESS (IF (WILD-PATHNAME-P P) (WILD-PATHNAME-P P NIL) (NOT (WILD-PATHNAME-P P NIL))) COLLECT P) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.28 (LOOP FOR P IN (APPEND *PATHNAMES* *LOGICAL-PATHNAMES*) WHEN (AND (LOOP FOR KEY IN (QUOTE (:HOST :DEVICE :DIRECTORY :NAME :TYPE :VERSION)) THEREIS (WILD-PATHNAME-P P KEY)) (NOT (WILD-PATHNAME-P P))) COLLECT P) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.29 (WITH-OPEN-FILE (S "foo.lsp" :DIRECTION :OUTPUT :IF-EXISTS :APPEND :IF-DOES-NOT-EXIST :CREATE) (WILD-PATHNAME-P S)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.30 (LET ((S (OPEN "foo.lsp" :DIRECTION :OUTPUT :IF-EXISTS :APPEND :IF-DOES-NOT-EXIST :CREATE))) (CLOSE S) (WILD-PATHNAME-P S)) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.31 (WILD-PATHNAME-P "CLTEST:FOO.LISP") NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.32 (DO-SPECIAL-STRINGS (S "CLTEST:FOO.LISP" NIL) (LET ((VALS (MULTIPLE-VALUE-LIST (WILD-PATHNAME-P S)))) (ASSERT (EQUAL VALS (QUOTE (NIL)))))) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.ERROR.1 (SIGNALS-ERROR (WILD-PATHNAME-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST WILD-PATHNAME-P.ERROR.2 (SIGNALS-ERROR (WILD-PATHNAME-P *DEFAULT-PATHNAME-DEFAULTS* NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST WILD-PATHNAME-P.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION WILD-PATHNAME-P) (TYPEF (QUOTE (OR PATHNAME STRING FILE-STREAM SYNONYM-STREAM)))) NIL)
;; Loading (DEFTEST WILD-PATHNAME-P.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (DECLARE (OPTIMIZE (SAFETY 0))) (WILD-PATHNAME-P X))) (TYPEF (QUOTE (OR PATHNAME STRING FILE-STREAM SYNONYM-STREAM)))) NIL)
;; Loading (LOAD "merge-pathnames.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/merge-pathnames.lsp 81DFAA17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MERGE-PATHNAMES.1 (LET* ((P1 (MAKE-PATHNAME :NAME "foo")) (P2 (MERGE-PATHNAMES P1 P1 NIL))) (VALUES (EQUALPT (PATHNAME-NAME P1) "foo") (IF (EQUALPT P1 P2) T (LIST P1 P2)))) T T)
;; Loading (DEFTEST MERGE-PATHNAMES.2 (LET* ((P1 (MAKE-PATHNAME :NAME "foo")) (P2 (MERGE-PATHNAMES P1 P1))) (VALUES (EQUALPT (PATHNAME-HOST P1) (PATHNAME-HOST P2)) (EQUALPT (PATHNAME-DEVICE P1) (PATHNAME-DEVICE P2)) (EQUALPT (PATHNAME-DIRECTORY P1) (PATHNAME-DIRECTORY P2)) (PATHNAME-NAME P1) (PATHNAME-NAME P2) (EQUALPT (PATHNAME-TYPE P1) (PATHNAME-TYPE P2)) (IF (PATHNAME-VERSION P1) (EQUALPT (PATHNAME-VERSION P1) (PATHNAME-VERSION P2)) (EQUALPT (PATHNAME-VERSION P2) :NEWEST)))) T T T "foo" "foo" T T)
;; Loading (DEFTEST MERGE-PATHNAMES.3 (LET* ((P1 (MAKE-PATHNAME :NAME "foo")) (P2 (MAKE-PATHNAME :NAME "bar")) (P3 (MERGE-PATHNAMES P1 P2))) (VALUES (EQUALPT (PATHNAME-HOST P1) (PATHNAME-HOST P3)) (EQUALPT (PATHNAME-DEVICE P1) (PATHNAME-DEVICE P3)) (EQUALPT (PATHNAME-DIRECTORY P1) (PATHNAME-DIRECTORY P3)) (PATHNAME-NAME P1) (PATHNAME-NAME P3) (EQUALPT (PATHNAME-TYPE P1) (PATHNAME-TYPE P3)) (IF (PATHNAME-VERSION P1) (EQUALPT (PATHNAME-VERSION P1) (PATHNAME-VERSION P3)) (EQUALPT (PATHNAME-VERSION P3) :NEWEST)))) T T T "foo" "foo" T T)
;; Loading (DEFTEST MERGE-PATHNAMES.4 (LET* ((P1 (MAKE-PATHNAME :NAME "foo")) (P2 (MAKE-PATHNAME :TYPE "lsp")) (P3 (MERGE-PATHNAMES P1 P2))) (VALUES (EQUALPT (PATHNAME-HOST P1) (PATHNAME-HOST P3)) (EQUALPT (PATHNAME-DEVICE P1) (PATHNAME-DEVICE P3)) (EQUALPT (PATHNAME-DIRECTORY P1) (PATHNAME-DIRECTORY P3)) (PATHNAME-NAME P1) (PATHNAME-TYPE P2) (PATHNAME-TYPE P3) (EQUALPT (PATHNAME-TYPE P2) (PATHNAME-TYPE P3)) (IF (PATHNAME-VERSION P1) (EQUALPT (PATHNAME-VERSION P1) (PATHNAME-VERSION P3)) (EQUALPT (PATHNAME-VERSION P3) :NEWEST)))) T T T "foo" "lsp" "lsp" T T)
;; Loading (DEFTEST MERGE-PATHNAMES.5 (LET* ((P1 (MAKE-PATHNAME :NAME "foo")) (P2 (MAKE-PATHNAME :TYPE "lsp" :VERSION :NEWEST)) (P3 (MERGE-PATHNAMES P1 P2 NIL))) (VALUES (EQUALPT (PATHNAME-HOST P1) (PATHNAME-HOST P3)) (EQUALPT (PATHNAME-DEVICE P1) (PATHNAME-DEVICE P3)) (EQUALPT (PATHNAME-DIRECTORY P1) (PATHNAME-DIRECTORY P3)) (PATHNAME-NAME P1) (PATHNAME-NAME P3) (PATHNAME-TYPE P2) (PATHNAME-TYPE P3) (EQUALPT (PATHNAME-VERSION P1) (PATHNAME-VERSION P3)))) T T T "foo" "foo" "lsp" "lsp" T)
;; Loading (DEFTEST MERGE-PATHNAMES.6 (LET* ((P1 (MAKE-PATHNAME)) (P2 (MAKE-PATHNAME :NAME "foo" :VERSION :NEWEST)) (P3 (MERGE-PATHNAMES P1 P2 NIL))) (VALUES (EQUALPT (PATHNAME-HOST P1) (PATHNAME-HOST P3)) (EQUALPT (PATHNAME-DEVICE P1) (PATHNAME-DEVICE P3)) (EQUALPT (PATHNAME-DIRECTORY P1) (PATHNAME-DIRECTORY P3)) (PATHNAME-NAME P2) (PATHNAME-NAME P3) (EQUALPT (PATHNAME-TYPE P2) (PATHNAME-TYPE P3)) (PATHNAME-VERSION P2) (PATHNAME-VERSION P3))) T T T "foo" "foo" T :NEWEST :NEWEST)
;; Loading (DEFTEST MERGE-PATHNAMES.7 (LET* ((P1 (MAKE-PATHNAME)) (P2 *DEFAULT-PATHNAME-DEFAULTS*) (P3 (MERGE-PATHNAMES P1))) (VALUES (EQUALPT (PATHNAME-HOST P1) (PATHNAME-HOST P3)) (EQUALPT (PATHNAME-HOST P2) (PATHNAME-HOST P3)) (EQUALPT (PATHNAME-DEVICE P2) (PATHNAME-DEVICE P3)) (EQUALPT (PATHNAME-DIRECTORY P2) (PATHNAME-DIRECTORY P3)) (EQUALPT (PATHNAME-NAME P2) (PATHNAME-NAME P3)) (EQUALPT (PATHNAME-TYPE P2) (PATHNAME-TYPE P3)) (COND ((PATHNAME-VERSION P1) (EQUALPT (PATHNAME-VERSION P1) (PATHNAME-VERSION P3))) ((PATHNAME-VERSION P2) (EQUALPT (PATHNAME-VERSION P2) (PATHNAME-VERSION P3))) (T (EQUALPT (PATHNAME-VERSION P3) :NEWEST))))) T T T T T T T)
;; Loading (LOAD "pathname-match-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pathname-match-p.lsp 81EDFA77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "pathnames-aux.lsp")
;; Loading (DEFTEST PATHNAME-MATCH-P.1 (LET ((PN1 (MAKE-PATHNAME :NAME :WILD)) (PN2 (MAKE-PATHNAME :NAME "foo"))) (PATHNAME-MATCH-P PN1 PN2)) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.2 (LET ((PN1 (MAKE-PATHNAME :TYPE :WILD)) (PN2 (MAKE-PATHNAME :TYPE "txt"))) (PATHNAME-MATCH-P PN1 PN2)) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.3 (LET ((PN1 (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE :WILD)))) (PN2 (MAKE-PATHNAME :DIRECTORY (QUOTE (:ABSOLUTE))))) (PATHNAME-MATCH-P PN1 PN2)) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.4 (LET ((PN1 (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD)))) (PN2 (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE))))) (PATHNAME-MATCH-P PN1 PN2)) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.5 (LET ((PN1 (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD)))) (PN2 (MAKE-PATHNAME :DIRECTORY NIL))) (AND (WILD-PATHNAME-P PN1) (NOT (PATHNAME-DIRECTORY PN2)) (NOT (PATHNAME-MATCH-P PN1 PN2)))) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.6 (LET ((PN1 (MAKE-PATHNAME :VERSION :WILD)) (PN2 (MAKE-PATHNAME))) (AND (WILD-PATHNAME-P PN1) (NOT (PATHNAME-VERSION PN2)) (NOT (PATHNAME-MATCH-P PN1 PN2)))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PATHNAME-MATCH-P.7 (LET ((WPN (PARSE-NAMESTRING "CLTEST:*.LSP"))) (ASSERT (WILD-PATHNAME-P WPN)) (DO-SPECIAL-STRINGS (S "CLTEST:FOO.LSP" NIL) (ASSERT (PATHNAME-MATCH-P S WPN)))) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.8 (DO-SPECIAL-STRINGS (S "CLTEST:*.LSP" NIL) (ASSERT (PATHNAME-MATCH-P "CLTEST:FOO.LSP" S))) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.ERROR.1 (SIGNALS-ERROR (PATHNAME-MATCH-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-MATCH-P.ERROR.2 (SIGNALS-ERROR (PATHNAME-MATCH-P (PARSE-NAMESTRING (QUOTE ""))) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-MATCH-P.ERROR.3 (SIGNALS-ERROR (PATHNAME-MATCH-P (PARSE-NAMESTRING (QUOTE "")) (PARSE-NAMESTRING (QUOTE "")) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PATHNAME-MATCH-P.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (PATHNAME-MATCH-P X (PARSE-NAMESTRING (QUOTE ""))))) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (DECLARE (OPTIMIZE (SAFETY 0))) (PATHNAME-MATCH-P X (PARSE-NAMESTRING (QUOTE ""))))) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.ERROR.6 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (PATHNAME-MATCH-P (PARSE-NAMESTRING (QUOTE "")) X))) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (DEFTEST PATHNAME-MATCH-P.ERROR.7 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (DECLARE (OPTIMIZE (SAFETY 0))) (PATHNAME-MATCH-P (PARSE-NAMESTRING (QUOTE "")) X))) (FUNCTION COULD-BE-PATHNAME-DESIGNATOR)) NIL)
;; Loading (LOAD "parse-namestring.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/parse-namestring.lsp C19C0F07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PARSE-NAMESTRING.1 (LET ((VALS (MULTIPLE-VALUE-LIST (PARSE-NAMESTRING "")))) (ASSERT (= (LENGTH VALS) 2)) (LET ((PN (FIRST VALS)) (POS (SECOND VALS))) (VALUES (PATHNAME-DIRECTORY PN) (PATHNAME-DEVICE PN) (PATHNAME-NAME PN) (PATHNAME-TYPE PN) (PATHNAME-VERSION PN) POS))) NIL NIL NIL NIL NIL 0)
;; Loading (DEFTEST PARSE-NAMESTRING.2 (LET ((VALS (MULTIPLE-VALUE-LIST (PARSE-NAMESTRING (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR)))))) (ASSERT (= (LENGTH VALS) 2)) (LET ((PN (FIRST VALS)) (POS (SECOND VALS))) (VALUES (PATHNAME-DIRECTORY PN) (PATHNAME-DEVICE PN) (PATHNAME-NAME PN) (PATHNAME-TYPE PN) (PATHNAME-VERSION PN) POS))) NIL NIL NIL NIL NIL 0)
;; Loading (DEFTEST PARSE-NAMESTRING.3 (LET ((VALS (MULTIPLE-VALUE-LIST (PARSE-NAMESTRING (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\X :FILL-POINTER 0))))) (ASSERT (= (LENGTH VALS) 2)) (LET ((PN (FIRST VALS)) (POS (SECOND VALS))) (VALUES (PATHNAME-DIRECTORY PN) (PATHNAME-DEVICE PN) (PATHNAME-NAME PN) (PATHNAME-TYPE PN) (PATHNAME-VERSION PN) POS))) NIL NIL NIL NIL NIL 0)
;; Loading (DEFTEST PARSE-NAMESTRING.4 (LOOP FOR ETYPE IN (QUOTE (STANDARD-CHAR BASE-CHAR CHARACTER)) FOR S0 = (MAKE-ARRAY 4 :ELEMENT-TYPE ETYPE :INITIAL-ELEMENT #\X) FOR S = (MAKE-ARRAY 0 :ELEMENT-TYPE ETYPE :DISPLACED-TO S0 :DISPLACED-INDEX-OFFSET 1) FOR VALS = (MULTIPLE-VALUE-LIST (PARSE-NAMESTRING S)) FOR PN = (FIRST VALS) FOR POS = (SECOND VALS) DO (ASSERT (= (LENGTH VALS) 2)) NCONC (LET ((RESULT (LIST (PATHNAME-DIRECTORY PN) (PATHNAME-DEVICE PN) (PATHNAME-NAME PN) (PATHNAME-TYPE PN) (PATHNAME-VERSION PN) POS))) (UNLESS (EQUAL RESULT (QUOTE (NIL NIL NIL NIL NIL 0))) (LIST (LIST ETYPE RESULT))))) NIL)
;; Loading (DEFTEST PARSE-NAMESTRING.ERROR.1 (SIGNALS-ERROR (PARSE-NAMESTRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST PARSE-NAME-STRING.ERROR.2 (SIGNALS-ERROR (PARSE-NAMESTRING "" NIL *DEFAULT-PATHNAME-DEFAULTS* :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PARSE-NAME-STRING.ERROR.3 (SIGNALS-ERROR (PARSE-NAMESTRING "" NIL *DEFAULT-PATHNAME-DEFAULTS* :START) PROGRAM-ERROR) T)
;; Loading (LOAD "load-files.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-files.lsp C1A63A97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (LOAD "directory.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/directory.lsp C1A79397>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DIRECTORY.1 (DIRECTORY "nonexistent") NIL)
;; Loading (DEFTEST DIRECTORY.2 (DIRECTORY (PARSE-NAMESTRING (QUOTE "nonexistent"))) NIL)
;; Loading (DEFTEST DIRECTORY.3 (DIRECTORY "nonexistent" :ALLOW-OTHER-KEYS NIL) NIL)
;; Loading (DEFTEST DIRECTORY.4 (DIRECTORY "nonexistent" :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) NIL)
;; Loading (DEFTEST DIRECTORY.5 (DIRECTORY "nonexistent" :FOO 0 :ALLOW-OTHER-KEYS T) NIL)
;; Loading (DEFTEST DIRECTORY.6 (LET* ((PATTERN-PATHNAME (MAKE-PATHNAME :NAME :WILD :TYPE :WILD :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (PATHNAMES (DIRECTORY PATTERN-PATHNAME))) (VALUES (REMOVE-IF (FUNCTION PATHNAMEP) PATHNAMES) (LOOP FOR PN IN PATHNAMES UNLESS (EQUAL PN (TRUENAME PN)) COLLECT PN))) NIL NIL)
;; Loading (DEFTEST DIRECTORY.7 (LET* ((PATTERN-PATHNAME (MAKE-PATHNAME :NAME :WILD :TYPE :WILD :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (PATHNAMES (DIRECTORY PATTERN-PATHNAME))) (LOOP FOR PN IN PATHNAMES UNLESS (EQUAL PN (PROBE-FILE PN)) COLLECT PN)) NIL)
;; Loading (DEFTEST DIRECTORY.8 (LET* ((PATHNAME-PATTERN "CLTEST:*.*") (LEN (LENGTH (DIRECTORY PATHNAME-PATTERN)))) (IF (< LEN 500) LEN NIL)) NIL)
;; Loading (DEFTEST DIRECTORY.9 (DO-SPECIAL-STRINGS (S "nonexistent" NIL) (ASSERT (NULL (DIRECTORY S)))) NIL)
;; Loading (DEFTEST DIRECTORY.ERROR.1 (SIGNALS-ERROR (DIRECTORY) PROGRAM-ERROR) T)
;; Loading (LOAD "probe-file.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/probe-file.lsp C1AE38D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PROBE-FILE.1 (PROBE-FILE (PARSE-NAMESTRING (QUOTE "nonexistent"))) NIL)
;; Loading (DEFTEST PROBE-FILE.2 (LET ((S (OPEN (PARSE-NAMESTRING (QUOTE "probe-file.lsp")) :DIRECTION :INPUT))) (PROG1 (EQUALPT (TRUENAME (PARSE-NAMESTRING (QUOTE "probe-file.lsp"))) (PROBE-FILE S)) (CLOSE S))) T)
;; Loading (DEFTEST PROBE-FILE.3 (LET ((S (OPEN (PARSE-NAMESTRING (QUOTE "probe-file.lsp")) :DIRECTION :INPUT))) (CLOSE S) (EQUALPT (TRUENAME (PARSE-NAMESTRING (QUOTE "probe-file.lsp"))) (PROBE-FILE S))) T)
;; Loading (DEFTEST PROBE-FILE.4 (EQUALPT (TRUENAME (PARSE-NAMESTRING (QUOTE "probe-file.lsp"))) (PROBE-FILE "CLTEST:probe-file.lsp")) T)
;; Loading (DEFTEST PROBE-FILE.5 (DO-SPECIAL-STRINGS (STR "probe-file.lsp" NIL) (LET ((S (OPEN STR :DIRECTION :INPUT))) (ASSERT (EQUALPT (TRUENAME (PARSE-NAMESTRING (QUOTE "probe-file.lsp"))) (PROBE-FILE S))) (CLOSE S))) NIL)
;; Loading (DEFTEST PROBE-FILE.ERROR.1 (SIGNALS-ERROR (PROBE-FILE) PROGRAM-ERROR) T)
;; Loading (DEFTEST PROBE-FILE.ERROR.2 (SIGNALS-ERROR (PROBE-FILE (PARSE-NAMESTRING (QUOTE "probe-file.lsp")) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PROBE-FILE.ERROR.3 (SIGNALS-ERROR-ALWAYS (PROBE-FILE (MAKE-PATHNAME :NAME :WILD)) FILE-ERROR) T T)
;; Loading (DEFTEST PROBE-FILE.ERROR.4 (SIGNALS-ERROR-ALWAYS (PROBE-FILE "CLTEST:*.FOO") FILE-ERROR) T T)
;; Loading (LOAD "ensure-directories-exist.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ensure-directories-exist.lsp C1B42C87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.1 (LET* ((PN (MAKE-PATHNAME :NAME "ensure-directories-exist.lsp" :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN)))))) (VALUES (LENGTH RESULTS) (EQUALT (TRUENAME PN) (TRUENAME (FIRST RESULTS))) (SECOND RESULTS) VERBOSITY)) 2 T NIL "")
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.2 (WITH-OPEN-FILE (S "ensure-directories-exist.lsp" :DIRECTION :INPUT) (LET* ((RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST S)))) (VALUES (LENGTH RESULTS) (EQUALT (TRUENAME (FIRST RESULTS)) (TRUENAME S)) (SECOND RESULTS)))) 2 T NIL)
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.3 (LET ((S (OPEN "ensure-directories-exist.lsp" :DIRECTION :INPUT))) (CLOSE S) (LET* ((RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST S)))) (VALUES (LENGTH RESULTS) (EQUALT (TRUENAME (FIRST RESULTS)) (TRUENAME S)) (SECOND RESULTS)))) 2 T NIL)
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.4 (LET* ((PN (MAKE-PATHNAME :NAME "ensure-directories-exist.lsp" :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN :VERBOSE NIL)))))) (VALUES (LENGTH RESULTS) (EQUALT (TRUENAME PN) (TRUENAME (FIRST RESULTS))) (SECOND RESULTS) VERBOSITY)) 2 T NIL "")
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.5 (LET* ((PN (MAKE-PATHNAME :NAME "ensure-directories-exist.lsp" :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN :VERBOSE T)))))) (VALUES (LENGTH RESULTS) (EQUALT (TRUENAME PN) (TRUENAME (FIRST RESULTS))) (SECOND RESULTS) VERBOSITY)) 2 T NIL "")
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.6 (LET* ((PN (MAKE-PATHNAME :NAME "ensure-directories-exist.lsp" :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN :ALLOW-OTHER-KEYS NIL)))))) (VALUES (LENGTH RESULTS) (EQUALT (TRUENAME PN) (TRUENAME (FIRST RESULTS))) (SECOND RESULTS) VERBOSITY)) 2 T NIL "")
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.7 (LET* ((PN (MAKE-PATHNAME :NAME "ensure-directories-exist.lsp" :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN :ALLOW-OTHER-KEYS T :NONSENSE T)))))) (VALUES (LENGTH RESULTS) (EQUALT (TRUENAME PN) (TRUENAME (FIRST RESULTS))) (SECOND RESULTS) VERBOSITY)) 2 T NIL "")
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.8 (LET* ((SUBDIR (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE "scratch")) :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (PN (MAKE-PATHNAME :NAME "foo" :TYPE "txt" :DEFAULTS SUBDIR))) (ASSERT (NOT (PROBE-FILE PN)) NIL "Delete subdirectory scratch and its contents!") (LET* ((RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN))))) (RESULT-PN (FIRST RESULTS)) (CREATED (SECOND RESULTS))) (WITH-OPEN-FILE (*STANDARD-OUTPUT* PN :DIRECTION :OUTPUT :IF-EXISTS :ERROR :IF-DOES-NOT-EXIST :CREATE) (PRINT NIL)) (VALUES (LENGTH RESULTS) (NOTNOT CREATED) (EQUALT PN RESULT-PN) (NOTNOT (PROBE-FILE PN)) VERBOSITY))) 2 T T T "")
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.9 (DO-SPECIAL-STRINGS (STR "ensure-directories-exist.lsp" NIL) (LET* ((RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST STR)))) (ASSERT (EQL (LENGTH RESULTS) 2)) (ASSERT (EQUALT (TRUENAME (FIRST RESULTS)) (TRUENAME STR))) (ASSERT (NULL (SECOND RESULTS))))) NIL)
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.ERROR.1 (SIGNALS-ERROR-ALWAYS (ENSURE-DIRECTORIES-EXIST (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE :WILD)) :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) FILE-ERROR) T T)
;; Loading (DEFTEST ENSURE-DIRECTORIES-EXIST.ERROR.2 (SIGNALS-ERROR (ENSURE-DIRECTORIES-EXIST) PROGRAM-ERROR) T)
;; Loading (LOAD "truename.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/truename.lsp C1C4C537>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TRUENAME.1 (LET* ((PN (PARSE-NAMESTRING (QUOTE "truename.lsp"))) (TN (TRUENAME PN))) (VALUES (NOTNOT (PATHNAMEP PN)) (TYPEP PN (QUOTE LOGICAL-PATHNAME)) (EQUALT (PATHNAME-NAME PN) (PATHNAME-NAME TN)) (EQUALT (PATHNAME-TYPE PN) (PATHNAME-TYPE TN)))) T NIL T T)
;; Loading (DEFTEST TRUENAME.2 (LET* ((NAME "truename.lsp") (PN (PATHNAME NAME)) (TN (TRUENAME NAME))) (VALUES (NOTNOT (PATHNAMEP PN)) (TYPEP PN (QUOTE LOGICAL-PATHNAME)) (EQUALT (PATHNAME-NAME PN) (PATHNAME-NAME TN)) (EQUALT (PATHNAME-TYPE PN) (PATHNAME-TYPE TN)))) T NIL T T)
;; Loading (DEFTEST TRUENAME.3 (LET* ((PN (PARSE-NAMESTRING (QUOTE "truename.lsp")))) (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (LET ((TN (TRUENAME S))) (VALUES (NOTNOT (PATHNAMEP PN)) (TYPEP PN (QUOTE LOGICAL-PATHNAME)) (EQUALT (PATHNAME-NAME PN) (PATHNAME-NAME TN)) (EQUALT (PATHNAME-TYPE PN) (PATHNAME-TYPE TN)))))) T NIL T T)
;; Loading (DEFTEST TRUENAME.4 (LET* ((PN (PARSE-NAMESTRING (QUOTE "truename.lsp")))) (LET ((S (OPEN PN :DIRECTION :INPUT))) (CLOSE S) (LET ((TN (TRUENAME S))) (VALUES (NOTNOT (PATHNAMEP PN)) (TYPEP PN (QUOTE LOGICAL-PATHNAME)) (EQUALT (PATHNAME-NAME PN) (PATHNAME-NAME TN)) (EQUALT (PATHNAME-TYPE PN) (PATHNAME-TYPE TN)))))) T NIL T T)
;; Loading (DEFTEST TRUENAME.5 (LET* ((LPN "CLTEST:foo.txt") (PN (TRANSLATE-LOGICAL-PATHNAME LPN))) (UNLESS (PROBE-FILE LPN) (WITH-OPEN-FILE (S LPN :DIRECTION :OUTPUT) (FORMAT S "Stuff~%"))) (LET ((TN (TRUENAME LPN))) (VALUES (NOTNOT (PATHNAMEP PN)) (IF (EQUALT (PATHNAME-NAME PN) (PATHNAME-NAME TN)) T (LIST (PATHNAME-NAME PN) (PATHNAME-NAME TN))) (IF (EQUALT (PATHNAME-TYPE PN) (PATHNAME-TYPE TN)) T (LIST (PATHNAME-TYPE PN) (PATHNAME-TYPE TN)))))) T T T)
;; Loading (DEFTEST TRUENAME.6 (DO-SPECIAL-STRINGS (S "truename.lsp" NIL) (ASSERT (EQUALP (TRUENAME S) (TRUENAME "truename.lsp")))) NIL)
;; Loading (DEFTEST TRUENAME.ERROR.1 (SIGNALS-ERROR (TRUENAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST TRUENAME.ERROR.2 (SIGNALS-ERROR (TRUENAME "truename.lsp" NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST TRUENAME.ERROR.3 (SIGNALS-ERROR-ALWAYS (TRUENAME "nonexistent") FILE-ERROR) T T)
;; Loading (DEFTEST TRUENAME.ERROR.4 (SIGNALS-ERROR-ALWAYS (TRUENAME (PARSE-NAMESTRING (QUOTE "nonexistent"))) FILE-ERROR) T T)
;; Loading (DEFTEST TRUENAME.ERROR.5 (SIGNALS-ERROR-ALWAYS (TRUENAME (LOGICAL-PATHNAME "CLTESTROOT:nonexistent")) FILE-ERROR) T T)
;; Loading (DEFTEST TRUENAME.ERROR.6 (SIGNALS-ERROR-ALWAYS (LET ((PN (MAKE-PATHNAME :NAME :WILD :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*))) (TRUENAME PN)) FILE-ERROR) T T)
;; Loading (LOAD "file-author.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/file-author.lsp C1CF4457>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILE-AUTHOR.1 (LOOP FOR PN IN (DIRECTORY (MAKE-PATHNAME :NAME :WILD :TYPE :WILD :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) FOR AUTHOR = (FILE-AUTHOR PN) UNLESS (OR (NULL AUTHOR) (STRINGP AUTHOR)) COLLECT (LIST PN AUTHOR)) NIL)
;; Loading (DEFTEST FILE-AUTHOR.2 (LET ((AUTHOR (FILE-AUTHOR "file-author.lsp"))) (IF (OR (NULL AUTHOR) (STRINGP AUTHOR)) NIL AUTHOR)) NIL)
;; Loading (DEFTEST FILE-AUTHOR.3 (LET ((AUTHOR (FILE-AUTHOR (PARSE-NAMESTRING (QUOTE "file-author.lsp"))))) (IF (OR (NULL AUTHOR) (STRINGP AUTHOR)) NIL AUTHOR)) NIL)
;; Loading (DEFTEST FILE-AUTHOR.4 (LET ((AUTHOR (FILE-AUTHOR (TRUENAME "file-author.lsp")))) (IF (OR (NULL AUTHOR) (STRINGP AUTHOR)) NIL AUTHOR)) NIL)
;; Loading (DEFTEST FILE-AUTHOR.5 (LET ((AUTHOR (WITH-OPEN-FILE (S "file-author.lsp" :DIRECTION :INPUT) (FILE-AUTHOR S)))) (IF (OR (NULL AUTHOR) (STRINGP AUTHOR)) NIL AUTHOR)) NIL)
;; Loading (DEFTEST FILE-AUTHOR.6 (LET ((AUTHOR (LET ((S (OPEN "file-author.lsp" :DIRECTION :INPUT))) (CLOSE S) (FILE-AUTHOR S)))) (IF (OR (NULL AUTHOR) (STRINGP AUTHOR)) NIL AUTHOR)) NIL)
;; Loading (DEFTEST FILE-AUTHOR.7 (DO-SPECIAL-STRINGS (S "file-author.lsp" NIL) (ASSERT (EQUAL (FILE-AUTHOR S) (FILE-AUTHOR "file-author.lsp")))) NIL)
;; Loading (DEFTEST FILE-AUTHOR.ERROR.1 (SIGNALS-ERROR (FILE-AUTHOR) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-AUTHOR.ERROR.2 (SIGNALS-ERROR (FILE-AUTHOR "file-author.lsp" NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-AUTHOR.ERROR.3 (SIGNALS-ERROR-ALWAYS (FILE-AUTHOR (MAKE-PATHNAME :NAME :WILD :TYPE "lsp" :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) FILE-ERROR) T T)
;; Loading (DEFTEST FILE-AUTHOR.ERROR.4 (SIGNALS-ERROR-ALWAYS (FILE-AUTHOR (MAKE-PATHNAME :NAME "file-author" :TYPE :WILD :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) FILE-ERROR) T T)
;; Loading (LOAD "file-write-date.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/file-write-date.lsp C1D77977>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILE-WRITE-DATE.1 (LET* ((PN "file-write-date.lsp") (DATE (FILE-WRITE-DATE PN)) (TIME (GET-UNIVERSAL-TIME))) (OR (NULL DATE) (AND (INTEGERP DATE) (<= 0 DATE TIME) T))) T)
;; Loading (DEFTEST FILE-WRITE-DATE.2 (LET* ((PN (PARSE-NAMESTRING (QUOTE "file-write-date.lsp"))) (DATE (FILE-WRITE-DATE PN)) (TIME (GET-UNIVERSAL-TIME))) (OR (NULL DATE) (AND (INTEGERP DATE) (<= 0 DATE TIME) T))) T)
;; Loading (DEFTEST FILE-WRITE-DATE.3 (LET* ((PN (TRUENAME "file-write-date.lsp")) (DATE (FILE-WRITE-DATE PN)) (TIME (GET-UNIVERSAL-TIME))) (OR (NULL DATE) (AND (INTEGERP DATE) (<= 0 DATE TIME) T))) T)
;; Loading (DEFTEST FILE-WRITE-DATE.4 (LOOP FOR PN IN (DIRECTORY (MAKE-PATHNAME :NAME :WILD :TYPE :WILD :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) FOR DATE = (FILE-WRITE-DATE PN) FOR TIME = (GET-UNIVERSAL-TIME) UNLESS (OR (NULL DATE) (<= 0 DATE TIME)) COLLECT (LIST PN DATE TIME)) NIL)
;; Loading (DEFTEST FILE-WRITE-DATE.5 (LENGTH (MULTIPLE-VALUE-LIST (FILE-WRITE-DATE "file-write-date.lsp"))) 1)
;; Loading (DEFTEST FILE-WRITE-DATE.6 (LET* ((STR "file-write-date.lsp") (DATE (FILE-WRITE-DATE STR))) (DO-SPECIAL-STRINGS (S STR NIL) (ASSERT (EQUAL (FILE-WRITE-DATE S) DATE)))) NIL)
;; Loading (DEFTEST FILE-WRITE-DATE.ERROR.1 (SIGNALS-ERROR (FILE-WRITE-DATE) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-WRITE-DATE.ERROR.2 (SIGNALS-ERROR (FILE-WRITE-DATE "file-write-date.lsp" NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-WRITE-DATE.ERROR.3 (SIGNALS-ERROR-ALWAYS (FILE-WRITE-DATE (MAKE-PATHNAME :NAME :WILD :TYPE "lsp" :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) FILE-ERROR) T T)
;; Loading (DEFTEST FILE-WRITE-DATE.ERROR.4 (SIGNALS-ERROR-ALWAYS (FILE-WRITE-DATE (MAKE-PATHNAME :NAME "file-write-date" :TYPE :WILD :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) FILE-ERROR) T T)
;; Loading (LOAD "rename-file.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/rename-file.lsp C1DFBE97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST RENAME-FILE.1 (LET ((PN1 (PARSE-NAMESTRING (QUOTE "file-to-be-renamed.txt"))) (PN2 (PARSE-NAMESTRING (QUOTE "file-that-was-renamed.txt")))) (DELETE-ALL-VERSIONS PN1) (DELETE-ALL-VERSIONS PN2) (WITH-OPEN-FILE (S PN1 :DIRECTION :OUTPUT) (FORMAT S "Whatever~%")) (LET ((RESULTS (MULTIPLE-VALUE-LIST (RENAME-FILE PN1 PN2)))) (DESTRUCTURING-BIND (DEFAULTED-NEW-NAME OLD-TRUENAME NEW-TRUENAME) RESULTS (VALUES (=T (LENGTH RESULTS) 3) (PROBE-FILE PN1) (NOTNOT (PROBE-FILE PN2)) (LIST (NOTNOT (PATHNAMEP DEFAULTED-NEW-NAME)) (NOTNOT (PATHNAMEP OLD-TRUENAME)) (NOTNOT (PATHNAMEP NEW-TRUENAME)) (TYPEP OLD-TRUENAME (QUOTE LOGICAL-PATHNAME)) (TYPEP NEW-TRUENAME (QUOTE LOGICAL-PATHNAME))) (NOTNOT (PROBE-FILE DEFAULTED-NEW-NAME)) (PROBE-FILE OLD-TRUENAME) (NOTNOT (PROBE-FILE NEW-TRUENAME)))))) T NIL T (T T T NIL NIL) T NIL T)
;; Loading (DEFTEST RENAME-FILE.2 (LET ((PN1 "file-to-be-renamed.txt") (PN2 "file-that-was-renamed.txt")) (DELETE-ALL-VERSIONS PN1) (DELETE-ALL-VERSIONS PN2) (WITH-OPEN-FILE (S PN1 :DIRECTION :OUTPUT) (FORMAT S "Whatever~%")) (LET ((RESULTS (MULTIPLE-VALUE-LIST (RENAME-FILE PN1 PN2)))) (DESTRUCTURING-BIND (DEFAULTED-NEW-NAME OLD-TRUENAME NEW-TRUENAME) RESULTS (VALUES (=T (LENGTH RESULTS) 3) (PROBE-FILE PN1) (NOTNOT (PROBE-FILE PN2)) (LIST (NOTNOT (PATHNAMEP DEFAULTED-NEW-NAME)) (NOTNOT (PATHNAMEP OLD-TRUENAME)) (NOTNOT (PATHNAMEP NEW-TRUENAME)) (TYPEP OLD-TRUENAME (QUOTE LOGICAL-PATHNAME)) (TYPEP NEW-TRUENAME (QUOTE LOGICAL-PATHNAME))) (NOTNOT (PROBE-FILE DEFAULTED-NEW-NAME)) (PROBE-FILE OLD-TRUENAME) (NOTNOT (PROBE-FILE NEW-TRUENAME)))))) T NIL T (T T T NIL NIL) T NIL T)
;; Loading (DEFTEST RENAME-FILE.3 (LET* ((PN1 (MAKE-PATHNAME :NAME "file-to-be-renamed" :TYPE "txt" :VERSION :NEWEST :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (PN2 (MAKE-PATHNAME :NAME "file-that-was-renamed")) (PN3 (MAKE-PATHNAME :NAME "file-that-was-renamed" :DEFAULTS PN1))) (DELETE-ALL-VERSIONS PN1) (DELETE-ALL-VERSIONS PN3) (WITH-OPEN-FILE (S PN1 :DIRECTION :OUTPUT) (FORMAT S "Whatever~%")) (LET ((RESULTS (MULTIPLE-VALUE-LIST (RENAME-FILE PN1 PN2)))) (DESTRUCTURING-BIND (DEFAULTED-NEW-NAME OLD-TRUENAME NEW-TRUENAME) RESULTS (VALUES (EQUALPT (PATHNAME-TYPE PN1) (PATHNAME-TYPE DEFAULTED-NEW-NAME)) (=T (LENGTH RESULTS) 3) (PROBE-FILE PN1) (NOTNOT (PROBE-FILE PN3)) (LIST (NOTNOT (PATHNAMEP DEFAULTED-NEW-NAME)) (NOTNOT (PATHNAMEP OLD-TRUENAME)) (NOTNOT (PATHNAMEP NEW-TRUENAME)) (TYPEP OLD-TRUENAME (QUOTE LOGICAL-PATHNAME)) (TYPEP NEW-TRUENAME (QUOTE LOGICAL-PATHNAME))) (NOTNOT (PROBE-FILE DEFAULTED-NEW-NAME)) (PROBE-FILE OLD-TRUENAME) (NOTNOT (PROBE-FILE NEW-TRUENAME)))))) T T NIL T (T T T NIL NIL) T NIL T)
;; Loading (DEFTEST RENAME-FILE.4 (LET ((PN1 "file-to-be-renamed.txt") (PN2 "file-that-was-renamed.txt")) (DELETE-ALL-VERSIONS PN1) (DELETE-ALL-VERSIONS PN2) (LET ((S (OPEN PN1 :DIRECTION :OUTPUT))) (FORMAT S "Whatever~%") (CLOSE S) (LET ((RESULTS (MULTIPLE-VALUE-LIST (RENAME-FILE S PN2)))) (DESTRUCTURING-BIND (DEFAULTED-NEW-NAME OLD-TRUENAME NEW-TRUENAME) RESULTS (VALUES (=T (LENGTH RESULTS) 3) (PROBE-FILE PN1) (NOTNOT (PROBE-FILE PN2)) (LIST (NOTNOT (PATHNAMEP DEFAULTED-NEW-NAME)) (NOTNOT (PATHNAMEP OLD-TRUENAME)) (NOTNOT (PATHNAMEP NEW-TRUENAME)) (TYPEP OLD-TRUENAME (QUOTE LOGICAL-PATHNAME)) (TYPEP NEW-TRUENAME (QUOTE LOGICAL-PATHNAME))) (NOTNOT (PROBE-FILE DEFAULTED-NEW-NAME)) (PROBE-FILE OLD-TRUENAME) (NOTNOT (PROBE-FILE NEW-TRUENAME))))))) T NIL T (T T T NIL NIL) T NIL T)
;; Loading (DEFTEST RENAME-FILE.5 (LET ((PN1 "CLTEST:file-to-be-renamed.txt") (PN2 "CLTEST:file-that-was-renamed.txt")) (DELETE-ALL-VERSIONS PN1) (DELETE-ALL-VERSIONS PN2) (ASSERT (TYPEP (PATHNAME PN1) (QUOTE LOGICAL-PATHNAME))) (ASSERT (TYPEP (PATHNAME PN2) (QUOTE LOGICAL-PATHNAME))) (WITH-OPEN-FILE (S PN1 :DIRECTION :OUTPUT) (FORMAT S "Whatever~%")) (LET ((RESULTS (MULTIPLE-VALUE-LIST (RENAME-FILE PN1 PN2)))) (DESTRUCTURING-BIND (DEFAULTED-NEW-NAME OLD-TRUENAME NEW-TRUENAME) RESULTS (VALUES (=T (LENGTH RESULTS) 3) (PROBE-FILE PN1) (NOTNOT (PROBE-FILE PN2)) (LIST (NOTNOT (PATHNAMEP DEFAULTED-NEW-NAME)) (NOTNOT (PATHNAMEP OLD-TRUENAME)) (NOTNOT (PATHNAMEP NEW-TRUENAME)) (TYPEP OLD-TRUENAME (QUOTE LOGICAL-PATHNAME)) (TYPEP NEW-TRUENAME (QUOTE LOGICAL-PATHNAME))) (NOTNOT (PROBE-FILE DEFAULTED-NEW-NAME)) (PROBE-FILE OLD-TRUENAME) (NOTNOT (PROBE-FILE NEW-TRUENAME)) (NOTNOT (TYPEP DEFAULTED-NEW-NAME (QUOTE LOGICAL-PATHNAME))))))) T NIL T (T T T NIL NIL) T NIL T T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST RENAME-FILE.6 (DO-SPECIAL-STRINGS (S "file-to-be-renamed.txt" NIL) (LET ((PN1 S) (PN2 "file-that-was-renamed.txt")) (DELETE-ALL-VERSIONS PN1) (DELETE-ALL-VERSIONS PN2) (WITH-OPEN-FILE (S PN1 :DIRECTION :OUTPUT) (FORMAT S "Whatever~%")) (LET ((RESULTS (MULTIPLE-VALUE-LIST (RENAME-FILE PN1 PN2)))) (DESTRUCTURING-BIND (DEFAULTED-NEW-NAME OLD-TRUENAME NEW-TRUENAME) RESULTS (ASSERT (EQUAL (LIST (=T (LENGTH RESULTS) 3) (PROBE-FILE PN1) (NOTNOT (PROBE-FILE PN2)) (LIST (NOTNOT (PATHNAMEP DEFAULTED-NEW-NAME)) (NOTNOT (PATHNAMEP OLD-TRUENAME)) (NOTNOT (PATHNAMEP NEW-TRUENAME)) (TYPEP OLD-TRUENAME (QUOTE LOGICAL-PATHNAME)) (TYPEP NEW-TRUENAME (QUOTE LOGICAL-PATHNAME))) (NOTNOT (PROBE-FILE DEFAULTED-NEW-NAME)) (PROBE-FILE OLD-TRUENAME) (NOTNOT (PROBE-FILE NEW-TRUENAME))) (QUOTE (T NIL T (T T T NIL NIL) T NIL T)))))))) NIL)
;; Loading (DEFTEST RENAME-FILE.7 (DO-SPECIAL-STRINGS (S "file-that-was-renamed.txt" NIL) (LET ((PN1 "file-to-be-renamed.txt") (PN2 S)) (DELETE-ALL-VERSIONS PN1) (DELETE-ALL-VERSIONS PN2) (WITH-OPEN-FILE (S PN1 :DIRECTION :OUTPUT) (FORMAT S "Whatever~%")) (LET ((RESULTS (MULTIPLE-VALUE-LIST (RENAME-FILE PN1 PN2)))) (DESTRUCTURING-BIND (DEFAULTED-NEW-NAME OLD-TRUENAME NEW-TRUENAME) RESULTS (ASSERT (EQUAL (LIST (=T (LENGTH RESULTS) 3) (PROBE-FILE PN1) (NOTNOT (PROBE-FILE PN2)) (LIST (NOTNOT (PATHNAMEP DEFAULTED-NEW-NAME)) (NOTNOT (PATHNAMEP OLD-TRUENAME)) (NOTNOT (PATHNAMEP NEW-TRUENAME)) (TYPEP OLD-TRUENAME (QUOTE LOGICAL-PATHNAME)) (TYPEP NEW-TRUENAME (QUOTE LOGICAL-PATHNAME))) (NOTNOT (PROBE-FILE DEFAULTED-NEW-NAME)) (PROBE-FILE OLD-TRUENAME) (NOTNOT (PROBE-FILE NEW-TRUENAME))) (QUOTE (T NIL T (T T T NIL NIL) T NIL T)))))))) NIL)
;; Loading (DEFTEST RENAME-FILE.ERROR.1 (SIGNALS-ERROR (RENAME-FILE) PROGRAM-ERROR) T)
;; Loading (LOAD "delete-file.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/delete-file.lsp 819CA917>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DELETE-FILE.1 (LET ((PN "scratchfile.txt")) (UNLESS (PROBE-FILE PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (FORMAT S "Contents~%"))) (VALUES (NOTNOT (PROBE-FILE PN)) (MULTIPLE-VALUE-LIST (DELETE-FILE PN)) (PROBE-FILE PN))) T (T) NIL)
;; Loading (DEFTEST DELETE-FILE.2 (LET ((PN (PARSE-NAMESTRING (QUOTE "scratchfile.txt")))) (UNLESS (PROBE-FILE PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (FORMAT S "Contents~%"))) (VALUES (NOTNOT (PROBE-FILE PN)) (MULTIPLE-VALUE-LIST (DELETE-FILE PN)) (PROBE-FILE PN))) T (T) NIL)
;; Loading (DEFTEST DELETE-FILE.3 (LET ((PN "CLTEST:scratchfile.txt")) (ASSERT (TYPEP (PATHNAME PN) (QUOTE LOGICAL-PATHNAME))) (UNLESS (PROBE-FILE PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (FORMAT S "Contents~%"))) (VALUES (NOTNOT (PROBE-FILE PN)) (MULTIPLE-VALUE-LIST (DELETE-FILE PN)) (PROBE-FILE PN))) T (T) NIL)
;; Loading (DEFTEST DELETE-FILE.4 (LET ((PN "CLTEST:scratchfile.txt")) (ASSERT (TYPEP (PATHNAME PN) (QUOTE LOGICAL-PATHNAME))) (UNLESS (PROBE-FILE PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (FORMAT S "Contents~%"))) (LET ((S (OPEN PN :DIRECTION :INPUT))) (CLOSE S) (VALUES (NOTNOT (PROBE-FILE PN)) (MULTIPLE-VALUE-LIST (DELETE-FILE S)) (PROBE-FILE PN)))) T (T) NIL)
;; Loading (DEFTEST DELETE-FILE.5 (DO-SPECIAL-STRINGS (PN "scratchfile.txt" NIL) (UNLESS (PROBE-FILE PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (FORMAT S "Contents~%"))) (ASSERT (PROBE-FILE PN)) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (DELETE-FILE PN)) (QUOTE (T)))) (ASSERT (NOT (PROBE-FILE PN)))) NIL)
;; Loading (DEFTEST DELETE-FILE.ERROR.1 (SIGNALS-ERROR (DELETE-FILE) PROGRAM-ERROR) T)
;; Loading (DEFTEST DELETE-FILE.ERROR.2 (LET ((PN "scratch.txt")) (UNLESS (PROBE-FILE PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (FORMAT S "Contents~%"))) (VALUES (NOTNOT (PROBE-FILE PN)) (SIGNALS-ERROR (DELETE-FILE "scratch.txt" NIL) PROGRAM-ERROR) (NOTNOT (PROBE-FILE PN)) (DELETE-FILE PN) (PROBE-FILE PN))) T T T T NIL)
;; Loading (LOAD "file-error.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/file-error.lsp 81A5D307>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILE-ERROR.1 (LET ((PN (MAKE-PATHNAME :NAME :WILD :TYPE "txt" :VERSION :NEWEST :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*))) (HANDLER-CASE (PROBE-FILE PN) (ERROR (C) (VALUES (NOTNOT (TYPEP C (QUOTE FILE-ERROR))) (IF (EQUALP (FILE-ERROR-PATHNAME C) PN) T (LIST (FILE-ERROR-PATHNAME C) PN)))))) T T)
;; Loading (DEFTEST FILE-ERROR-PATHNAME.1 (LET ((C (MAKE-CONDITION (QUOTE FILE-ERROR) :PATHNAME "foo.txt"))) (VALUES (NOTNOT (TYPEP C (QUOTE FILE-ERROR))) (EQLT (CLASS-OF C) (FIND-CLASS (QUOTE FILE-ERROR))) (FILE-ERROR-PATHNAME C))) T T "foo.txt")
;; Loading (DEFTEST FILE-ERROR-PATHNAME.2 (LET ((C (MAKE-CONDITION (QUOTE FILE-ERROR) :PATHNAME (PARSE-NAMESTRING (QUOTE "foo.txt"))))) (VALUES (NOTNOT (TYPEP C (QUOTE FILE-ERROR))) (EQLT (CLASS-OF C) (FIND-CLASS (QUOTE FILE-ERROR))) (EQUALT (PARSE-NAMESTRING (QUOTE "foo.txt")) (FILE-ERROR-PATHNAME C)))) T T T)
;; Loading (DEFTEST FILE-ERROR-PATHNAME.3 (LET ((C (MAKE-CONDITION (QUOTE FILE-ERROR) :PATHNAME "CLTEST:foo.txt"))) (VALUES (NOTNOT (TYPEP C (QUOTE FILE-ERROR))) (EQLT (CLASS-OF C) (FIND-CLASS (QUOTE FILE-ERROR))) (EQUALPT "CLTEST:foo.txt" (FILE-ERROR-PATHNAME C)))) T T T)
;; Loading (DEFTEST FILE-ERROR-PATHNAME.4 (LET ((C (MAKE-CONDITION (QUOTE FILE-ERROR) :PATHNAME (LOGICAL-PATHNAME "CLTEST:foo.txt")))) (VALUES (NOTNOT (TYPEP C (QUOTE FILE-ERROR))) (EQLT (CLASS-OF C) (FIND-CLASS (QUOTE FILE-ERROR))) (EQUALPT (LOGICAL-PATHNAME "CLTEST:foo.txt") (FILE-ERROR-PATHNAME C)))) T T T)
;; Loading (DEFTEST FILE-ERROR-PATHNAME.5 (WITH-OPEN-FILE (S "file-error.lsp" :DIRECTION :INPUT) (LET ((C (MAKE-CONDITION (QUOTE FILE-ERROR) :PATHNAME S))) (VALUES (NOTNOT (TYPEP C (QUOTE FILE-ERROR))) (EQLT (CLASS-OF C) (FIND-CLASS (QUOTE FILE-ERROR))) (EQUALPT S (FILE-ERROR-PATHNAME C))))) T T T)
;; Loading (DEFTEST FILE-ERROR-PATHNAME.6 (LET ((S (OPEN "file-error.lsp" :DIRECTION :INPUT))) (CLOSE S) (LET ((C (MAKE-CONDITION (QUOTE FILE-ERROR) :PATHNAME S))) (VALUES (NOTNOT (TYPEP C (QUOTE FILE-ERROR))) (EQLT (CLASS-OF C) (FIND-CLASS (QUOTE FILE-ERROR))) (EQUALPT S (FILE-ERROR-PATHNAME C))))) T T T)
;; Loading (DEFTEST FILE-ERROR-PATHNAME.ERROR.1 (SIGNALS-ERROR (FILE-ERROR-PATHNAME) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-ERROR-PATHNAME.ERROR.2 (SIGNALS-ERROR (FILE-ERROR-PATHNAME (MAKE-CONDITION (QUOTE FILE-ERROR) :PATHNAME "foo.txt") NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "load-streams.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-streams.lsp 81AFFCC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (LOAD "input-stream-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/input-stream-p.lsp 81B16AA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST INPUT-STREAM-P.1 (NOTNOT-MV (INPUT-STREAM-P *STANDARD-INPUT*)) T)
;; Loading (DEFTEST INPUT-STREAM-P.2 (NOTNOT-MV (INPUT-STREAM-P *TERMINAL-IO*)) T)
;; Loading (DEFTEST INPUT-STREAM-P.3 (WITH-OPEN-FILE (S "input-stream-p.lsp" :DIRECTION :INPUT) (NOTNOT-MV (INPUT-STREAM-P S))) T)
;; Loading (DEFTEST INPUT-STREAM-P.4 (WITH-OPEN-FILE (S "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (INPUT-STREAM-P S)) NIL)
;; Loading (DEFTEST INPUT-STREAM-P.ERROR.1 (SIGNALS-ERROR (INPUT-STREAM-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST INPUT-STREAM-P.ERROR.2 (SIGNALS-ERROR (INPUT-STREAM-P *STANDARD-INPUT* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST INPUT-STREAM-P.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION INPUT-STREAM-P) (FUNCTION STREAMP)) NIL)
;; Loading (LOAD "output-stream-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/output-stream-p.lsp 81B5B907>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST OUTPUT-STREAM-P.1 (NOTNOT-MV (OUTPUT-STREAM-P *STANDARD-OUTPUT*)) T)
;; Loading (DEFTEST OUTPUT-STREAM-P.2 (NOTNOT-MV (OUTPUT-STREAM-P *TERMINAL-IO*)) T)
;; Loading (DEFTEST OUTPUT-STREAM-P.3 (WITH-OPEN-FILE (S "output-stream-p.lsp" :DIRECTION :INPUT) (OUTPUT-STREAM-P S)) NIL)
;; Loading (DEFTEST OUTPUT-STREAM-P.4 (WITH-OPEN-FILE (S "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (NOTNOT-MV (OUTPUT-STREAM-P S))) T)
;; Loading (DEFTEST OUTPUT-STREAM-P.ERROR.1 (SIGNALS-ERROR (OUTPUT-STREAM-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST OUTPUT-STREAM-P.ERROR.2 (SIGNALS-ERROR (OUTPUT-STREAM-P *STANDARD-OUTPUT* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST OUTPUT-STREAM-P.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION OUTPUT-STREAM-P) (FUNCTION STREAMP)) NIL)
;; Loading (LOAD "interactive-stream-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/interactive-stream-p.lsp 81BA12E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST INTERACTIVE-STREAM-P.1 (LET ((STREAMS (LIST *DEBUG-IO* *ERROR-OUTPUT* *QUERY-IO* *STANDARD-INPUT* *STANDARD-OUTPUT* *TRACE-OUTPUT* *TERMINAL-IO*))) (MAPC (FUNCTION INTERACTIVE-STREAM-P) STREAMS) NIL) NIL)
;; Loading (DEFTEST INTERACTIVE-STREAM-P.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION INTERACTIVE-STREAM-P) (FUNCTION STREAMP)) NIL)
;; Loading (DEFTEST INTERACTIVE-STREAM-P.ERROR.2 (SIGNALS-ERROR (INTERACTIVE-STREAM-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERACTIVE-STREAM-P.ERROR.3 (SIGNALS-ERROR (INTERACTIVE-STREAM-P *TERMINAL-IO* NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "open-stream-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/open-stream-p.lsp 81BDBCB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST OPEN-STREAM-P.1 (LOOP FOR S IN (LIST *DEBUG-IO* *ERROR-OUTPUT* *QUERY-IO* *STANDARD-INPUT* *STANDARD-OUTPUT* *TRACE-OUTPUT* *TERMINAL-IO*) FOR RESULTS = (MULTIPLE-VALUE-LIST (OPEN-STREAM-P S)) UNLESS (AND (EQL (LENGTH RESULTS) 1) (CAR RESULTS)) COLLECT S) NIL)
;; Loading (DEFTEST OPEN-STREAM-P.2 (WITH-OPEN-FILE (S "open-stream-p.lsp" :DIRECTION :INPUT) (NOTNOT-MV (OPEN-STREAM-P S))) T)
;; Loading (DEFTEST OPEN-STREAM-P.3 (WITH-OPEN-FILE (S "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (NOTNOT-MV (OPEN-STREAM-P S))) T)
;; Loading (DEFTEST OPEN-STREAM-P.4 (LET ((S (OPEN "open-stream-p.lsp" :DIRECTION :INPUT))) (CLOSE S) (OPEN-STREAM-P S)) NIL)
;; Loading (DEFTEST OPEN-STREAM-P.5 (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE))) (CLOSE S) (OPEN-STREAM-P S)) NIL)
;; Loading (DEFTEST OPEN-STREAM-P.ERROR.1 (SIGNALS-ERROR (OPEN-STREAM-P) PROGRAM-ERROR) T)
;; Loading (DEFTEST OPEN-STREAM-P.ERROR.2 (SIGNALS-ERROR (OPEN-STREAM-P *STANDARD-INPUT* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST OPEN-STREAM-P.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION OPEN-STREAM-P) (FUNCTION STREAMP)) NIL)
;; Loading (LOAD "stream-element-type.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/stream-element-type.lsp 81C37517>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.1 (LOOP FOR S IN (LIST *DEBUG-IO* *ERROR-OUTPUT* *QUERY-IO* *STANDARD-INPUT* *STANDARD-OUTPUT* *TRACE-OUTPUT* *TERMINAL-IO*) FOR RESULTS = (MULTIPLE-VALUE-LIST (STREAM-ELEMENT-TYPE S)) UNLESS (AND (EQL (LENGTH RESULTS) 1) (CAR RESULTS)) COLLECT S) NIL)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.2 (LET ((PN "foo.txt")) (LOOP FOR I FROM 1 TO 100 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR S = (PROGN (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :OUTPUT :ELEMENT-TYPE ETYPE)) UNLESS (MULTIPLE-VALUE-BIND (SUB GOOD) (SUBTYPEP ETYPE (STREAM-ELEMENT-TYPE S)) (CLOSE S) (OR SUB (NOT GOOD))) COLLECT I)) NIL)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.3 (LET ((PN "foo.txt")) (LOOP FOR I FROM 1 TO 100 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR S = (PROGN (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :OUTPUT :ELEMENT-TYPE ETYPE)) UNLESS (MULTIPLE-VALUE-BIND (SUB GOOD) (SUBTYPEP ETYPE (STREAM-ELEMENT-TYPE S)) (CLOSE S) (OR SUB (NOT GOOD))) COLLECT I)) NIL)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.4 (LET ((PN "foo.txt")) (LOOP FOR I FROM 1 TO 100 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (INTEGER 0 (SYSTEM.INTERNALS::BQ-COMMA I))) FOR S = (PROGN (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :OUTPUT :ELEMENT-TYPE ETYPE)) UNLESS (MULTIPLE-VALUE-BIND (SUB GOOD) (SUBTYPEP ETYPE (STREAM-ELEMENT-TYPE S)) (CLOSE S) (OR SUB (NOT GOOD))) COLLECT I)) NIL)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.5 :NOTES (:ASSUME-NO-SIMPLE-STREAMS) (LET ((PN "foo.txt")) (DELETE-ALL-VERSIONS PN) (LET ((S (OPEN PN :DIRECTION :OUTPUT))) (LET ((ETYPE (STREAM-ELEMENT-TYPE S))) (UNWIND-PROTECT (EQUALT (MULTIPLE-VALUE-LIST (SUBTYPEP* (QUOTE CHARACTER) ETYPE)) (QUOTE (NIL T))) (CLOSE S))))) NIL)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.6 :NOTES (:ASSUME-NO-SIMPLE-STREAMS) (LET ((PN "foo.txt")) (DELETE-ALL-VERSIONS PN) (LET ((S (OPEN PN :DIRECTION :OUTPUT :ELEMENT-TYPE :DEFAULT))) (LET ((ETYPE (STREAM-ELEMENT-TYPE S))) (UNWIND-PROTECT (MULTIPLE-VALUE-BIND (SUB1 GOOD1) (SUBTYPEP* ETYPE (QUOTE INTEGER)) (MULTIPLE-VALUE-BIND (SUB2 GOOD2) (SUBTYPEP* ETYPE (QUOTE CHARACTER)) (OR (NOT GOOD1) (NOT GOOD2) SUB1 SUB2))) (CLOSE S))))) T)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.ERROR.1 (SIGNALS-ERROR (STREAM-ELEMENT-TYPE) PROGRAM-ERROR) T)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.ERROR.2 (SIGNALS-ERROR (STREAM-ELEMENT-TYPE *STANDARD-INPUT* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST STREAM-ELEMENT-TYPE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION STREAM-ELEMENT-TYPE) (FUNCTION STREAMP)) NIL)
;; Loading (LOAD "streamp.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/streamp.lsp 81D0C687>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STREAMP.1 (LOOP FOR S IN (LIST *DEBUG-IO* *ERROR-OUTPUT* *QUERY-IO* *STANDARD-INPUT* *STANDARD-OUTPUT* *TRACE-OUTPUT* *TERMINAL-IO*) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (NOTNOT-MV (STREAMP S))) (QUOTE (T))) COLLECT S) NIL)
;; Loading (DEFTEST STREAMP.2 (CHECK-TYPE-PREDICATE (FUNCTION STREAMP) (QUOTE STREAM)) NIL)
;; Loading (DEFTEST STREAMP.3 (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE))) (CLOSE S) (NOTNOT-MV (STREAMP S))) T)
;; Loading (DEFTEST STREAMP.4 (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE))) (UNWIND-PROTECT (NOTNOT-MV (STREAMP S)) (CLOSE S))) T)
;; Loading (DEFTEST STREAMP.ERROR.1 (SIGNALS-ERROR (STREAMP) PROGRAM-ERROR) T)
;; Loading (DEFTEST STREAMP.ERROR.2 (SIGNALS-ERROR (STREAMP *STANDARD-INPUT* NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "read-byte.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-byte.lsp 81D552D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READ-BYTE.1 (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))) (VALUES (WRITE-BYTE 17 S) (CLOSE S) (PROGN (SETQ S (OPEN "foo.txt" :DIRECTION :INPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (READ-BYTE S)) (CLOSE S))) 17 T 17 T)
;; Loading (DEFTEST READ-BYTE.2 (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))) (VALUES (CLOSE S) (PROGN (SETQ S (OPEN "foo.txt" :DIRECTION :INPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (READ-BYTE S NIL (QUOTE FOO))) (READ-BYTE S NIL) (CLOSE S))) T FOO NIL T)
;; Loading (DEFTEST READ-BYTE.3 (LOOP WITH B1 = 0 AND B2 = 0 FOR I FROM 1 TO 32 DO (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))))) (WRITE-BYTE (1- (ASH 1 I)) S) (WRITE-BYTE 1 S) (CLOSE S)) UNLESS (LET ((S (OPEN "foo.txt" :DIRECTION :INPUT :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))))) (PROG1 (AND (EQL (SETQ B1 (READ-BYTE S)) (1- (ASH 1 I))) (EQL (SETQ B2 (READ-BYTE S)) 1)) (CLOSE S))) COLLECT (LIST I B1 B2)) NIL)
;; Loading (DEFTEST READ-BYTE.4 (LOOP WITH B1 = 0 AND B2 = 0 FOR I FROM 33 TO 200 BY 7 DO (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))))) (WRITE-BYTE (1- (ASH 1 I)) S) (WRITE-BYTE 1 S) (CLOSE S)) UNLESS (LET ((S (OPEN "foo.txt" :DIRECTION :INPUT :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))))) (PROG1 (AND (EQL (SETQ B1 (READ-BYTE S)) (1- (ASH 1 I))) (EQL (SETQ B2 (READ-BYTE S)) 1)) (CLOSE S))) COLLECT (LIST I B1 B2)) NIL)
;; Loading (DEFTEST READ-BYTE.ERROR.1 (SIGNALS-ERROR (READ-BYTE) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-BYTE.ERROR.2 (PROGN (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE 8))))) (CLOSE S)) (SIGNALS-ERROR (LET ((S (OPEN "foo.txt" :DIRECTION :INPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))) (READ-BYTE S)) END-OF-FILE)) T)
;; Loading (DEFTEST READ-BYTE.ERROR.3 (PROGN (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE))) (CLOSE S)) (SIGNALS-ERROR (LET ((S (OPEN "foo.txt" :DIRECTION :INPUT))) (UNWIND-PROTECT (READ-BYTE S) (CLOSE S))) ERROR)) T)
;; Loading (DEFTEST READ-BYTE.ERROR.4 (SIGNALS-ERROR-ALWAYS (PROGN (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))) (CLOSE S)) (LET ((S (OPEN "foo.txt" :DIRECTION :INPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))) (UNWIND-PROTECT (READ-BYTE S T) (CLOSE S)))) END-OF-FILE) T T)
;; Loading (DEFTEST READ-BYTE.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION READ-BYTE) (FUNCTION STREAMP)) NIL)
;; Loading (DEFTEST READ-BYTE.ERROR.6 (PROGN (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))) (CLOSE S)) (SIGNALS-ERROR (LET ((S (OPEN "foo.txt" :DIRECTION :INPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))) (UNWIND-PROTECT (READ-BYTE S T T NIL) (CLOSE S))) PROGRAM-ERROR)) T)
;; Loading (DEFTEST WRITE-BYTE.ERROR.1 (SIGNALS-ERROR (WRITE-BYTE) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-BYTE.ERROR.2 (SIGNALS-ERROR (WRITE-BYTE 0) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-BYTE.ERROR.3 (SIGNALS-ERROR (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))) (UNWIND-PROTECT (WRITE 1 S NIL) (CLOSE S))) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-BYTE.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (WRITE-BYTE 0 X))) (FUNCTION STREAMP)) NIL)
;; Loading (DEFTEST WRITE-BYTE.ERROR.5 (SIGNALS-ERROR (LET ((S (OPEN "foo.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE))) (UNWIND-PROTECT (WRITE 1 S) (CLOSE S))) ERROR) T)
;; Loading (LOAD "peek-char.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/peek-char.lsp 81E5BCF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PEEK-CHAR.1 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "abc") (VALUES (PEEK-CHAR) (READ-CHAR) (READ-CHAR) (PEEK-CHAR) (READ-CHAR))) #\a #\a #\b #\c #\c)
;; Loading (DEFTEST PEEK-CHAR.2 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "   ab") (VALUES (PEEK-CHAR) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR))) #\Space #\Space #\a #\a #\b #\b)
;; Loading (DEFTEST PEEK-CHAR.3 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* (CONCATENATE (QUOTE STRING) (STRING #\Newline) (STRING #\Newline) "  " (STRING #\Newline) "ab")) (VALUES (PEEK-CHAR) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR))) #\Newline #\Newline #\a #\a #\b #\b)
;; Loading (WHEN (NAME-CHAR "Linefeed") (DEFTEST PEEK-CHAR.4 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* (CONCATENATE (QUOTE STRING) (STRING (NAME-CHAR "Linefeed")) (STRING (NAME-CHAR "Linefeed")) "abc")) (VALUES (PEEK-CHAR) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR))) #\Newline #\Newline #\a #\a))
;; Loading (WHEN (NAME-CHAR "Page") (DEFTEST PEEK-CHAR.5 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* (CONCATENATE (QUOTE STRING) (STRING (NAME-CHAR "Page")) (STRING (NAME-CHAR "Page")) "abc")) (VALUES (PEEK-CHAR) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR))) #\Page #\Page #\a #\a))
;; Loading (WHEN (NAME-CHAR "Tab") (DEFTEST PEEK-CHAR.6 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* (CONCATENATE (QUOTE STRING) (STRING (NAME-CHAR "Tab")) (STRING (NAME-CHAR "Tab")) "abc")) (VALUES (PEEK-CHAR) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR))) #\Tab #\Tab #\a #\a))
;; Loading (WHEN (NAME-CHAR "Return") (DEFTEST PEEK-CHAR.7 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* (CONCATENATE (QUOTE STRING) (STRING (NAME-CHAR "Return")) (STRING (NAME-CHAR "Return")) "abc")) (VALUES (PEEK-CHAR) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR))) #\Return #\Return #\a #\a))
;; Loading (DEFTEST PEEK-CHAR.8 (WITH-INPUT-FROM-STRING (S "a bcd") (VALUES (PEEK-CHAR NIL S) (READ-CHAR S) (PEEK-CHAR T S) (READ-CHAR S) (PEEK-CHAR T S) (READ-CHAR S))) #\a #\a #\b #\b #\c #\c)
;; Loading (DEFTEST PEEK-CHAR.9 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* " a bCcde") (VALUES (PEEK-CHAR #\c) (READ-CHAR) (READ-CHAR))) #\c #\c #\d)
;; Loading (DEFTEST PEEK-CHAR.10 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "  ; foo") (VALUES (PEEK-CHAR T) (READ-CHAR))) #\; #\;)
;; Loading (DEFTEST PEEK-CHAR.11 (WITH-INPUT-FROM-STRING (S "") (PEEK-CHAR NIL S NIL)) NIL)
;; Loading (DEFTEST PEEK-CHAR.12 (WITH-INPUT-FROM-STRING (S "") (PEEK-CHAR NIL S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST PEEK-CHAR.13 (WITH-INPUT-FROM-STRING (S "   ") (PEEK-CHAR T S NIL)) NIL)
;; Loading (DEFTEST PEEK-CHAR.14 (WITH-INPUT-FROM-STRING (S "   ") (PEEK-CHAR T S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST PEEK-CHAR.15 (WITH-INPUT-FROM-STRING (S "ab c d") (PEEK-CHAR #\z S NIL)) NIL)
;; Loading (DEFTEST PEEK-CHAR.16 (WITH-INPUT-FROM-STRING (S "ab c d") (PEEK-CHAR #\z S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST PEEK-CHAR.17 (BLOCK DONE (WITH-INPUT-FROM-STRING (IS "ab") (WITH-OUTPUT-TO-STRING (OS) (LET ((ES (MAKE-ECHO-STREAM IS OS))) (LET ((POS1 (FILE-POSITION OS))) (UNLESS (ZEROP POS1) (RETURN-FROM DONE :GOOD)) (PEEK-CHAR NIL ES NIL) (LET ((POS2 (FILE-POSITION OS))) (RETURN-FROM DONE (IF (EQL POS1 POS2) :GOOD (LIST POS1 POS2))))))))) :GOOD)
;; Loading (DEFTEST PEEK-CHAR.18 (BLOCK DONE (WITH-INPUT-FROM-STRING (IS "   ab") (WITH-OUTPUT-TO-STRING (OS) (LET ((ES (MAKE-ECHO-STREAM IS OS))) (LET ((POS1 (FILE-POSITION OS))) (UNLESS (ZEROP POS1) (RETURN-FROM DONE :GOOD)) (PEEK-CHAR T ES NIL) (LET ((POS2 (FILE-POSITION OS))) (RETURN-FROM DONE (IF (EQL POS1 POS2) POS1 :GOOD)))))))) :GOOD)
;; Loading (DEFTEST PEEK-CHAR.19 (BLOCK DONE (WITH-INPUT-FROM-STRING (IS "abcde") (WITH-OUTPUT-TO-STRING (OS) (LET ((ES (MAKE-ECHO-STREAM IS OS))) (LET ((POS1 (FILE-POSITION OS))) (UNLESS (ZEROP POS1) (RETURN-FROM DONE :GOOD)) (PEEK-CHAR #\c ES NIL) (LET ((POS2 (FILE-POSITION OS))) (RETURN-FROM DONE (IF (EQL POS1 POS2) POS1 :GOOD)))))))) :GOOD)
;; Loading (DEFTEST PEEK-CHAR.20 (LET ((*READTABLE* (COPY-READTABLE))) (SET-SYNTAX-FROM-CHAR #\Space #\a) (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "  x") (VALUES (PEEK-CHAR) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR)))) #\Space #\Space #\Space #\Space)
;; Loading (DEFTEST PEEK-CHAR.21 (LET ((*READTABLE* (COPY-READTABLE))) (SET-SYNTAX-FROM-CHAR #\x #\Space) (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "xxa") (VALUES (PEEK-CHAR) (READ-CHAR) (PEEK-CHAR T) (READ-CHAR)))) #\x #\x #\a #\a)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PEEK-CHAR.22 (WITH-INPUT-FROM-STRING (IS "!?*") (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS (MAKE-STRING-OUTPUT-STREAM)))) (PEEK-CHAR NIL T))) #\!)
;; Loading (DEFTEST PEEK-CHAR.23 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "345") (PEEK-CHAR NIL NIL)) #\3)
;; Loading (DEFTEST PEEK-CHAR.ERROR.1 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "abc") (PEEK-CHAR S NIL NIL NIL NIL (QUOTE NONSENSE))) PROGRAM-ERROR) T)
;; Loading (DEFTEST PEEK-CHAR.ERROR.2 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "") (PEEK-CHAR)) END-OF-FILE) T T)
;; Loading (DEFTEST PEEK-CHAR.ERROR.3 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (PEEK-CHAR NIL S)) END-OF-FILE) T T)
;; Loading (DEFTEST PEEK-CHAR.ERROR.4 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S " ") (PEEK-CHAR T S)) END-OF-FILE) T T)
;; Loading (DEFTEST PEEK-CHAR.ERROR.5 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "abcd") (PEEK-CHAR #\z S)) END-OF-FILE) T T)
;; Loading (LOAD "read-char.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-char.lsp C19CEA97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READ-CHAR.1 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "a") (READ-CHAR)) #\a)
;; Loading (DEFTEST READ-CHAR.2 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "abc") (VALUES (READ-CHAR) (READ-CHAR) (READ-CHAR))) #\a #\b #\c)
;; Loading (WHEN (CODE-CHAR 0) (DEFTEST READ-CHAR.3 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* (CONCATENATE (QUOTE STRING) "a" (STRING (CODE-CHAR 0)) "b")) (VALUES (READ-CHAR) (READ-CHAR) (READ-CHAR))) #\a #\Nul #\b))
;; Loading (DEFTEST READ-CHAR.4 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (READ-CHAR S) (READ-CHAR S) (READ-CHAR S))) #\a #\b #\c)
;; Loading (DEFTEST READ-CHAR.5 (WITH-INPUT-FROM-STRING (S "") (READ-CHAR S NIL)) NIL)
;; Loading (DEFTEST READ-CHAR.6 (WITH-INPUT-FROM-STRING (S "") (READ-CHAR S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST READ-CHAR.7 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (READ-CHAR S NIL NIL) (READ-CHAR S NIL NIL) (READ-CHAR S NIL NIL))) #\a #\b #\c)
;; Loading (DEFTEST READ-CHAR.8 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (READ-CHAR S NIL T) (READ-CHAR S NIL T) (READ-CHAR S NIL T))) #\a #\b #\c)
;; Loading (DEFTEST READ-CHAR.9 (WITH-INPUT-FROM-STRING (IS "!?*") (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS (MAKE-STRING-OUTPUT-STREAM)))) (READ-CHAR T))) #\!)
;; Loading (DEFTEST READ-CHAR.10 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "345") (READ-CHAR NIL)) #\3)
;; Loading (DEFTEST READ-CHAR.ERROR.1 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "abc") (READ-CHAR S NIL NIL NIL NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-CHAR.ERROR.2 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (READ-CHAR S)) END-OF-FILE) T T)
;; Loading (DEFTEST READ-CHAR.ERROR.3 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (READ-CHAR S T)) END-OF-FILE) T T)
;; Loading (DEFTEST READ-CHAR.ERROR.4 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (READ-CHAR S T T)) END-OF-FILE) T T)
;; Loading (LOAD "read-char-no-hang.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-char-no-hang.lsp C1A597B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READ-CHAR-NO-HANG.1 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "a") (READ-CHAR-NO-HANG)) #\a)
;; Loading (DEFTEST READ-CHAR-NO-HANG.2 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "abc") (VALUES (READ-CHAR-NO-HANG) (READ-CHAR-NO-HANG) (READ-CHAR-NO-HANG))) #\a #\b #\c)
;; Loading (WHEN (CODE-CHAR 0) (DEFTEST READ-CHAR-NO-HANG.3 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* (CONCATENATE (QUOTE STRING) "a" (STRING (CODE-CHAR 0)) "b")) (VALUES (READ-CHAR-NO-HANG) (READ-CHAR-NO-HANG) (READ-CHAR-NO-HANG))) #\a #\Nul #\b))
;; Loading (DEFTEST READ-CHAR-NO-HANG.4 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (READ-CHAR-NO-HANG S) (READ-CHAR-NO-HANG S) (READ-CHAR-NO-HANG S))) #\a #\b #\c)
;; Loading (DEFTEST READ-CHAR-NO-HANG.5 (WITH-INPUT-FROM-STRING (S "") (READ-CHAR-NO-HANG S NIL)) NIL)
;; Loading (DEFTEST READ-CHAR-NO-HANG.6 (WITH-INPUT-FROM-STRING (S "") (READ-CHAR-NO-HANG S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST READ-CHAR-NO-HANG.7 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (READ-CHAR-NO-HANG S NIL NIL) (READ-CHAR-NO-HANG S NIL NIL) (READ-CHAR-NO-HANG S NIL NIL))) #\a #\b #\c)
;; Loading (DEFTEST READ-CHAR-NO-HANG.8 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (READ-CHAR-NO-HANG S NIL T) (READ-CHAR-NO-HANG S NIL T) (READ-CHAR-NO-HANG S NIL T))) #\a #\b #\c)
;; Loading (DEFTEST READ-CHAR-NO-HANG.9 (WITH-INPUT-FROM-STRING (IS "!?*") (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS (MAKE-STRING-OUTPUT-STREAM)))) (READ-CHAR-NO-HANG T))) #\!)
;; Loading (DEFTEST READ-CHAR-NO-HANG.10 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "345") (READ-CHAR-NO-HANG NIL)) #\3)
;; Loading (DEFTEST READ-CHAR-NO-HANG.ERROR.1 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "abc") (READ-CHAR-NO-HANG S NIL NIL NIL NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-CHAR-NO-HANG.ERROR.2 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (READ-CHAR-NO-HANG S)) END-OF-FILE) T T)
;; Loading (DEFTEST READ-CHAR-NO-HANG.ERROR.3 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (READ-CHAR-NO-HANG S T)) END-OF-FILE) T T)
;; Loading (DEFTEST READ-CHAR-NO-HANG.ERROR.4 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (READ-CHAR-NO-HANG S T T)) END-OF-FILE) T T)
;; Loading (LOAD "terpri.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/terpri.lsp C1AEE997>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TERPRI.1 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE-CHAR #\a) (SETQ RESULT (TERPRI))) RESULT)) "a
" NIL)
;; Loading (DEFTEST TERPRI.2 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (WRITE-CHAR #\a S) (SETQ RESULT (TERPRI S))) RESULT)) "a
" NIL)
;; Loading (DEFTEST TERPRI.3 (WITH-OUTPUT-TO-STRING (S) (WRITE-CHAR #\x S) (TERPRI S) (TERPRI S) (WRITE-CHAR #\y S)) "x

y")
;; Loading (DEFTEST TERPRI.4 (WITH-OUTPUT-TO-STRING (OS) (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM *STANDARD-INPUT* OS))) (TERPRI T) (FINISH-OUTPUT T))) "
")
;; Loading (DEFTEST TERPRI.5 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (TERPRI NIL)) "
")
;; Loading (DEFTEST TERPRI.ERROR.1 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (TERPRI S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "fresh-line.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/fresh-line.lsp C1B3DD67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FRESH-LINE.1 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE-CHAR #\a) (SETQ RESULT (NOTNOT (FRESH-LINE)))) RESULT)) "a
" T)
;; Loading (DEFTEST FRESH-LINE.2 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (WRITE-CHAR #\a S) (SETQ RESULT (NOTNOT (FRESH-LINE S)))) RESULT)) "a
" T)
;; Loading (DEFTEST FRESH-LINE.3 (WITH-OUTPUT-TO-STRING (S) (WRITE-CHAR #\x S) (FRESH-LINE S) (FRESH-LINE S) (WRITE-CHAR #\y S)) "x
y")
;; Loading (DEFTEST FRESH-LINE.4 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (FRESH-LINE)))) RESULT)) "" (NIL))
;; Loading (DEFTEST FRESH-LINE.5 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (WRITE-CHAR #\Space S) (SETQ RESULT (LIST (MULTIPLE-VALUE-LIST (NOTNOT-MV (FRESH-LINE S))) (MULTIPLE-VALUE-LIST (FRESH-LINE S)) (MULTIPLE-VALUE-LIST (FRESH-LINE S))))) RESULT)) "
" ((T) (NIL) (NIL)))
;; Loading (DEFTEST FRESH-LINE.6 (WITH-OUTPUT-TO-STRING (OS) (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM *STANDARD-INPUT* OS))) (WRITE-CHAR #\a T) (FRESH-LINE T) (FINISH-OUTPUT T))) "a
")
;; Loading (DEFTEST FRESH-LINE.7 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE-CHAR #\a NIL) (TERPRI NIL)) "a
")
;; Loading (DEFTEST FRESH-LINE.ERROR.1 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (FRESH-LINE S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "unread-char.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/unread-char.lsp C1BAF307>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST UNREAD-CHAR.1 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "abc") (VALUES (READ-CHAR) (UNREAD-CHAR #\a) (READ-CHAR) (READ-CHAR) (UNREAD-CHAR #\b) (READ-CHAR) (READ-CHAR))) #\a NIL #\a #\b NIL #\b #\c)
;; Loading (DEFTEST UNREAD-CHAR.2 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (READ-CHAR S) (UNREAD-CHAR #\a S) (READ-CHAR S) (READ-CHAR S) (UNREAD-CHAR #\b S) (READ-CHAR S) (READ-CHAR S))) #\a NIL #\a #\b NIL #\b #\c)
;; Loading (DEFTEST UNREAD-CHAR.3 (WITH-INPUT-FROM-STRING (IS "abc") (WITH-OUTPUT-TO-STRING (OS) (LET ((S (MAKE-ECHO-STREAM IS OS))) (READ-CHAR S) (UNREAD-CHAR #\a S) (READ-CHAR S) (READ-CHAR S) (READ-CHAR S) (UNREAD-CHAR #\c S) (READ-CHAR S)))) "abc")
;; Loading (DEFTEST UNREAD-CHAR.4 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "abc") (VALUES (READ-CHAR) (UNREAD-CHAR #\a NIL) (READ-CHAR) (READ-CHAR) (UNREAD-CHAR #\b NIL) (READ-CHAR) (READ-CHAR))) #\a NIL #\a #\b NIL #\b #\c)
;; Loading (DEFTEST UNREAD-CHAR.5 (WITH-INPUT-FROM-STRING (IS "abc") (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS (MAKE-STRING-OUTPUT-STREAM)))) (VALUES (READ-CHAR T) (UNREAD-CHAR #\a T) (READ-CHAR T) (READ-CHAR T) (UNREAD-CHAR #\b T) (READ-CHAR T) (READ-CHAR T)))) #\a NIL #\a #\b NIL #\b #\c)
;; Loading (DEFTEST UNREAD-CHAR.ERROR.1 (SIGNALS-ERROR (UNREAD-CHAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST UNREAD-CHAR.ERROR.2 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "abc") (READ-CHAR S) (UNREAD-CHAR #\a S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "write-char.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/write-char.lsp C1C1CF27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WRITE-CHAR.1 (LOOP FOR I FROM 0 TO 255 FOR C = (CODE-CHAR I) WHEN C UNLESS (STRING= (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE-CHAR C)) (STRING C)) COLLECT C) NIL)
;; Loading (DEFTEST WRITE-CHAR.2 (WITH-INPUT-FROM-STRING (IS "abcd") (WITH-OUTPUT-TO-STRING (OS) (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS))) (WRITE-CHAR #\$ T) (CLOSE *TERMINAL-IO*)))) "$")
;; Loading (DEFTEST WRITE-CHAR.3 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE-CHAR #\: NIL)) ":")
;; Loading (DEFTEST WRITE-CHAR.ERROR.1 (SIGNALS-ERROR (WRITE-CHAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-CHAR.ERROR.2 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (WRITE-CHAR #\a S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "read-line.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-line.lsp C1C62107>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READ-LINE.1 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* " abcd ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-LINE)))) (ASSERT (= (LENGTH VALS) 2)) (VALUES (FIRST VALS) (NOTNOT (SECOND VALS))))) " abcd " T)
;; Loading (DEFTEST READ-LINE.2 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* (STRING #\Newline)) (READ-LINE)) "" NIL)
;; Loading (DEFTEST READ-LINE.3 (WITH-INPUT-FROM-STRING (S (CONCATENATE (QUOTE STRING) "abc" (STRING #\Newline))) (READ-LINE S)) "abc" NIL)
;; Loading (DEFTEST READ-LINE.4 (WITH-INPUT-FROM-STRING (S "") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-LINE S NIL)))) (ASSERT (= (LENGTH VALS) 2)) (VALUES (FIRST VALS) (NOTNOT (SECOND VALS))))) NIL T)
;; Loading (DEFTEST READ-LINE.5 (WITH-INPUT-FROM-STRING (S "") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-LINE S NIL (QUOTE FOO))))) (ASSERT (= (LENGTH VALS) 2)) (VALUES (FIRST VALS) (NOTNOT (SECOND VALS))))) FOO T)
;; Loading (DEFTEST READ-LINE.6 (WITH-INPUT-FROM-STRING (S " abcd ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-LINE S T NIL T)))) (ASSERT (= (LENGTH VALS) 2)) (VALUES (FIRST VALS) (NOTNOT (SECOND VALS))))) " abcd " T)
;; Loading (DEFTEST READ-LINE.7 (WITH-INPUT-FROM-STRING (IS "abc") (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS *STANDARD-OUTPUT*))) (LET ((VALS (MULTIPLE-VALUE-LIST (READ-LINE T)))) (ASSERT (= (LENGTH VALS) 2)) (ASSERT (SECOND VALS)) (FIRST VALS)))) "abc")
;; Loading (DEFTEST READ-LINE.8 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "abc") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-LINE NIL)))) (ASSERT (= (LENGTH VALS) 2)) (ASSERT (SECOND VALS)) (FIRST VALS))) "abc")
;; Loading (DEFTEST READ-LINE.ERROR.1 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S (CONCATENATE (QUOTE STRING) "abc" (STRING #\Newline))) (READ-LINE S T NIL NIL NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-LINE.ERROR.2 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (READ-LINE S)) END-OF-FILE) T T)
;; Loading (DEFTEST READ-LINE.ERROR.3 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "") (READ-LINE)) END-OF-FILE) T T)
;; Loading (DEFTEST READ-LINE.ERROR.4 (SIGNALS-ERROR-ALWAYS (WITH-INPUT-FROM-STRING (S "") (READ-LINE S T)) END-OF-FILE) T T)
;; Loading (LOAD "write-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/write-string.lsp C1CF4407>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WRITE-STRING.1 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "")))) RESULT)) "" (""))
;; Loading (DEFTEST WRITE-STRING.2 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))))) RESULT)) "" (""))
;; Loading (DEFTEST WRITE-STRING.3 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde")))) RESULT)) "abcde" ("abcde"))
;; Loading (DEFTEST WRITE-STRING.4 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde" S :START 1)))) RESULT)) "bcde" ("abcde"))
;; Loading (DEFTEST WRITE-STRING.5 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde" S :START 1 :END 3)))) RESULT)) "bc" ("abcde"))
;; Loading (DEFTEST WRITE-STRING.6 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde" S :START 1 :END NIL)))) RESULT)) "bcde" ("abcde"))
;; Loading (DEFTEST WRITE-STRING.7 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde" S :END 3)))) RESULT)) "abc" ("abcde"))
;; Loading (DEFTEST WRITE-STRING.8 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde" S :END 3 :ALLOW-OTHER-KEYS NIL)))) RESULT)) "abc" ("abcde"))
;; Loading (DEFTEST WRITE-STRING.9 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde" S :END 3 :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR))))) RESULT)) "abc" ("abcde"))
;; Loading (DEFTEST WRITE-STRING.10 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde" S :END 3 :END 2)))) RESULT)) "abc" ("abcde"))
;; Loading (DEFTEST WRITE-STRING.11 (WITH-INPUT-FROM-STRING (IS "abcd") (WITH-OUTPUT-TO-STRING (OS) (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS))) (WRITE-STRING "951" T) (CLOSE *TERMINAL-IO*)))) "951")
;; Loading (DEFTEST WRITE-STRING.12 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE-STRING "-=|!" NIL)) "-=|!")
;; Loading (DEFTEST WRITE-STRING.13 (LET (RESULT) (DO-SPECIAL-STRINGS (S "abcde" NIL) (ASSERT (EQUAL (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING "abcde")))) "abcde")) (ASSERT (EQUAL RESULT (QUOTE ("abcde")))))) NIL)
;; Loading (DEFTEST WRITE-STRING.ERROR.1 (SIGNALS-ERROR (WRITE-STRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-STRING.ERROR.2 (SIGNALS-ERROR (WRITE-STRING "" *STANDARD-OUTPUT* :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-STRING.ERROR.3 (SIGNALS-ERROR (WRITE-STRING "" *STANDARD-OUTPUT* :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-STRING.ERROR.4 (SIGNALS-ERROR (WRITE-STRING "" *STANDARD-OUTPUT* :ALLOW-OTHER-KEYS NIL :FOO NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "write-line.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/write-line.lsp C1DBD1D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WRITE-LINE.1 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "")))) RESULT)) "
" (""))
;; Loading (DEFTEST WRITE-LINE.2 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))))) RESULT)) "
" (""))
;; Loading (DEFTEST WRITE-LINE.3 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde")))) RESULT)) "abcde
" ("abcde"))
;; Loading (DEFTEST WRITE-LINE.4 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde" S :START 1)))) RESULT)) "bcde
" ("abcde"))
;; Loading (DEFTEST WRITE-LINE.5 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde" S :START 1 :END 3)))) RESULT)) "bc
" ("abcde"))
;; Loading (DEFTEST WRITE-LINE.6 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde" S :START 1 :END NIL)))) RESULT)) "bcde
" ("abcde"))
;; Loading (DEFTEST WRITE-LINE.7 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde" S :END 3)))) RESULT)) "abc
" ("abcde"))
;; Loading (DEFTEST WRITE-LINE.8 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde" S :END 3 :ALLOW-OTHER-KEYS NIL)))) RESULT)) "abc
" ("abcde"))
;; Loading (DEFTEST WRITE-LINE.9 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde" S :END 3 :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR))))) RESULT)) "abc
" ("abcde"))
;; Loading (DEFTEST WRITE-LINE.10 (LET (RESULT) (VALUES (WITH-OUTPUT-TO-STRING (S) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde" S :END 3 :END 2)))) RESULT)) "abc
" ("abcde"))
;; Loading (DEFTEST WRITE-LINE.11 (WITH-INPUT-FROM-STRING (IS "abcd") (WITH-OUTPUT-TO-STRING (OS) (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS))) (WRITE-LINE "951" T) (CLOSE *TERMINAL-IO*)))) "951
")
;; Loading (DEFTEST WRITE-LINE.12 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE-LINE "-=|!" NIL)) "-=|!
")
;; Loading (DEFTEST WRITE-LINE.13 (DO-SPECIAL-STRINGS (S "abcde" NIL) (ASSERT (EQUAL (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (MULTIPLE-VALUE-LIST (WRITE-LINE "abcde"))) "abcde
"))) NIL)
;; Loading (DEFTEST WRITE-LINE.ERROR.1 (SIGNALS-ERROR (WRITE-LINE) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-LINE.ERROR.2 (SIGNALS-ERROR (WRITE-LINE "" *STANDARD-OUTPUT* :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-LINE.ERROR.3 (SIGNALS-ERROR (WRITE-LINE "" *STANDARD-OUTPUT* :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-LINE.ERROR.4 (SIGNALS-ERROR (WRITE-LINE "" *STANDARD-OUTPUT* :ALLOW-OTHER-KEYS NIL :FOO NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "read-sequence.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-sequence.lsp C1E92A87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFMACRO DEF-READ-SEQUENCE-TEST (NAME INIT ARGS INPUT &REST EXPECTED) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((S (SYSTEM.INTERNALS::BQ-COMMA INIT))) (WITH-INPUT-FROM-STRING (IS (SYSTEM.INTERNALS::BQ-COMMA INPUT)) (VALUES (READ-SEQUENCE S IS (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)) S))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN EXPECTED))))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.1 (COPY-SEQ "     ") NIL "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.2 (COPY-SEQ "     ") NIL "abc" 3 "abc  ")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.3 (COPY-SEQ "     ") (:START 1) "abcdefghijk" 5 " abcd")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.4 (COPY-SEQ "     ") (:END 3) "abcdefghijk" 3 "abc  ")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.5 (COPY-SEQ "     ") (:START 1 :END 4) "abcdefghijk" 4 " abc ")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.6 (COPY-SEQ "     ") (:START 0 :END 0) "abcdefghijk" 0 "     ")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.7 (COPY-SEQ "     ") (:END NIL) "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.8 (COPY-SEQ "     ") (:ALLOW-OTHER-KEYS NIL) "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.9 (COPY-SEQ "     ") (:ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.10 (COPY-SEQ "     ") (:FOO (QUOTE BAR) :ALLOW-OTHER-KEYS (QUOTE X)) "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.11 (COPY-SEQ "     ") (:FOO (QUOTE BAR) :ALLOW-OTHER-KEYS (QUOTE X) :ALLOW-OTHER-KEYS NIL) "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.STRING.12 (COPY-SEQ "     ") (:END 5 :END 3 :START 0 :START 1) "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.BASE-STRING.1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)) NIL "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.BASE-STRING.2 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\Space) NIL "abc" 3 "abc  ")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.BASE-STRING.3 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\Space) (:START 1) "abcdefghijk" 5 " abcd")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.BASE-STRING.4 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\Space) (:END 3) "abcdefghijk" 3 "abc  ")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.BASE-STRING.5 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\Space) (:START 1 :END 4) "abcdefghijk" 4 " abc ")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.BASE-STRING.6 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\Space) (:START 0 :END 0) "abcdefghijk" 0 "     ")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.BASE-STRING.7 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\Space) (:END NIL) "abcdefghijk" 5 "abcde")
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.LIST.1 (MAKE-LIST 5) NIL "abcdefghijk" 5 (#\a #\b #\c #\d #\e))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.LIST.2 (MAKE-LIST 5) NIL "abc" 3 (#\a #\b #\c NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.LIST.3 (MAKE-LIST 5) (:START 1) "abcdefghijk" 5 (NIL #\a #\b #\c #\d))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.LIST.4 (MAKE-LIST 5) (:END 3) "abcdefghijk" 3 (#\a #\b #\c NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.LIST.5 (MAKE-LIST 5) (:END 4 :START 1) "abcdefghijk" 4 (NIL #\a #\b #\c NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.LIST.6 (MAKE-LIST 5) (:START 0 :END 0) "abcdefghijk" 0 (NIL NIL NIL NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.LIST.7 (MAKE-LIST 5) (:END NIL) "abcdefghijk" 5 (#\a #\b #\c #\d #\e))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.VECTOR.1 (VECTOR NIL NIL NIL NIL NIL) NIL "abcdefghijk" 5 #(#\a #\b #\c #\d #\e))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.VECTOR.2 (VECTOR NIL NIL NIL NIL NIL) NIL "abc" 3 #(#\a #\b #\c NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.VECTOR.3 (VECTOR NIL NIL NIL NIL NIL) (:START 2) "abcdefghijk" 5 #(NIL NIL #\a #\b #\c))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.VECTOR.4 (VECTOR NIL NIL NIL NIL NIL) (:START 1 :END 4) "abcdefghijk" 4 #(NIL #\a #\b #\c NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.VECTOR.5 (VECTOR NIL NIL NIL NIL NIL) (:END 2) "abcdefghijk" 2 #(#\a #\b NIL NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.VECTOR.6 (VECTOR NIL NIL NIL NIL NIL) (:END 0 :START 0) "abcdefghijk" 0 #(NIL NIL NIL NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.VECTOR.7 (VECTOR NIL NIL NIL NIL NIL) (:END NIL) "abcdefghijk" 5 #(#\a #\b #\c #\d #\e))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.FILL-VECTOR.1 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL :FILL-POINTER 5) NIL "abcdefghijk" 5 #(#\a #\b #\c #\d #\e))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.FILL-VECTOR.2 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL :FILL-POINTER 5) NIL "ab" 2 #(#\a #\b NIL NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.FILL-VECTOR.3 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL :FILL-POINTER 5) NIL "" 0 #(NIL NIL NIL NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.FILL-VECTOR.4 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL :FILL-POINTER 5) (:START 2) "abcdefghijk" 5 #(NIL NIL #\a #\b #\c))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.FILL-VECTOR.5 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL :FILL-POINTER 5) (:START 1 :END 4) "abcdefghijk" 4 #(NIL #\a #\b #\c NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.FILL-VECTOR.6 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL :FILL-POINTER 5) (:END 2) "abcdefghijk" 2 #(#\a #\b NIL NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.FILL-VECTOR.7 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL :FILL-POINTER 5) (:END 0 :START 0) "abcdefghijk" 0 #(NIL NIL NIL NIL NIL))
;; Loading (DEF-READ-SEQUENCE-TEST READ-SEQUENCE.FILL-VECTOR.8 (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL :FILL-POINTER 5) (:END NIL) "abcdefghijk" 5 #(#\a #\b #\c #\d #\e))
;; Loading (DEFTEST READ-SEQUENCE.NIL-VECTOR.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S (MAKE-ARRAY 0 :ELEMENT-TYPE NIL))) (WITH-INPUT-FROM-STRING (IS "abcde") (VALUES (READ-SEQUENCE S IS) S))) 0 "")
;; Loading (DEFMACRO DEF-READ-SEQUENCE-BV-TEST (NAME INIT ARGS &REST EXPECTED) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (PROGN (LET (OS) (UNWIND-PROTECT (PROGN (SETQ OS (OPEN "temp.dat" :DIRECTION :OUTPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)) :IF-EXISTS :SUPERSEDE)) (LOOP FOR I IN (QUOTE (0 1 1 0 0 1 1 0 1 0 1 1 1 0)) DO (WRITE-BYTE I OS))) (WHEN OS (CLOSE OS)))) (LET (IS (BV (COPY-SEQ (SYSTEM.INTERNALS::BQ-COMMA INIT)))) (UNWIND-PROTECT (PROGN (SETQ IS (OPEN "temp.dat" :DIRECTION :INPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (VALUES (READ-SEQUENCE BV IS (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)) BV)) (WHEN IS (CLOSE IS))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN EXPECTED))))
;; Loading (DEF-READ-SEQUENCE-BV-TEST READ-SEQUENCE.BV.1 #*00000000000000 NIL 14 #*01100110101110)
;; Loading (DEF-READ-SEQUENCE-BV-TEST READ-SEQUENCE.BV.2 #*00000000000000 (:START 0) 14 #*01100110101110)
;; Loading (DEF-READ-SEQUENCE-BV-TEST READ-SEQUENCE.BV.3 #*00000000000000 (:END 14) 14 #*01100110101110)
;; Loading (DEF-READ-SEQUENCE-BV-TEST READ-SEQUENCE.BV.4 #*00000000000000 (:END NIL) 14 #*01100110101110)
;; Loading (DEF-READ-SEQUENCE-BV-TEST READ-SEQUENCE.BV.5 #*00000000000000 (:START 2) 14 #*00011001101011)
;; Loading (DEF-READ-SEQUENCE-BV-TEST READ-SEQUENCE.BV.6 #*00000000000000 (:START 2 :END 13) 13 #*00011001101010)
;; Loading (DEF-READ-SEQUENCE-BV-TEST READ-SEQUENCE.BV.7 #*00000000000000 (:END 6) 6 #*01100100000000)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.1 (SIGNALS-ERROR (READ-SEQUENCE) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.2 (SIGNALS-ERROR (READ-SEQUENCE (MAKE-STRING 10)) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.3 (SIGNALS-ERROR (READ-SEQUENCE (MAKE-STRING 5) (MAKE-STRING-INPUT-STREAM "abc") :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.4 (SIGNALS-ERROR (READ-SEQUENCE (MAKE-STRING 5) (MAKE-STRING-INPUT-STREAM "abc") :FOO 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.5 (SIGNALS-ERROR (READ-SEQUENCE (MAKE-STRING 5) (MAKE-STRING-INPUT-STREAM "abc") :ALLOW-OTHER-KEYS NIL :BAR 2) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.6 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (READ-SEQUENCE X (MAKE-STRING-INPUT-STREAM "abc")))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.7 (SIGNALS-ERROR (READ-SEQUENCE (CONS (QUOTE A) (QUOTE B)) (MAKE-STRING-INPUT-STREAM "abc")) TYPE-ERROR) T)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.8 (SIGNALS-TYPE-ERROR X -1 (READ-SEQUENCE (MAKE-STRING 3) (MAKE-STRING-INPUT-STREAM "abc") :START X)) T)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.9 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (S) (READ-SEQUENCE (MAKE-STRING 3) (MAKE-STRING-INPUT-STREAM "abc") :START S))) (TYPEF (QUOTE UNSIGNED-BYTE))) NIL)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.10 (SIGNALS-TYPE-ERROR X -1 (READ-SEQUENCE (MAKE-STRING 3) (MAKE-STRING-INPUT-STREAM "abc") :END X)) T)
;; Loading (DEFTEST READ-SEQUENCE.ERROR.11 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (E) (READ-SEQUENCE (MAKE-STRING 3) (MAKE-STRING-INPUT-STREAM "abc") :END E))) (TYPEF (QUOTE (OR UNSIGNED-BYTE NULL)))) NIL)
;; Loading (LOAD "write-sequence.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/write-sequence.lsp 81C42767>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFMACRO DEF-WRITE-SEQUENCE-TEST (NAME INPUT ARGS &REST EXPECTED) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((S (SYSTEM.INTERNALS::BQ-COMMA INPUT))) (WITH-OUTPUT-TO-STRING (OS) (ASSERT (EQ (WRITE-SEQUENCE S OS (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)) S)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN EXPECTED))))
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.1 "abcde" NIL "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.2 "abcde" (:START 1) "bcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.3 "abcde" (:END 3) "abc")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.4 "abcde" (:START 1 :END 4) "bcd")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.5 "abcde" (:END NIL) "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.6 "abcde" (:START 3 :END 3) "")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.7 "abcde" (:END NIL :START 1) "bcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.8 "abcde" (:ALLOW-OTHER-KEYS NIL) "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.9 "abcde" (:ALLOW-OTHER-KEYS T :FOO NIL) "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.10 "abcde" (:ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO NIL) "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.11 "abcde" (:BAR (QUOTE X) :ALLOW-OTHER-KEYS T) "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.12 "abcde" (:START 1 :END 4 :START 2 :END 3) "bcd")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.STRING.13 "" NIL "")
;; Loading (DEFMACRO DEF-WRITE-SEQUENCE-SPECIAL-TEST (NAME STRING ARGS EXPECTED) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((STR (SYSTEM.INTERNALS::BQ-COMMA STRING)) (EXPECTED (SYSTEM.INTERNALS::BQ-COMMA EXPECTED))) (DO-SPECIAL-STRINGS (S STR NIL) (LET ((OUT (WITH-OUTPUT-TO-STRING (OS) (ASSERT (EQ (WRITE-SEQUENCE S OS (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)) S))))) (ASSERT (EQUAL OUT EXPECTED))))) NIL)))
;; Loading (DEF-WRITE-SEQUENCE-SPECIAL-TEST WRITE-SEQUENCE.STRING.14 "12345" NIL "12345")
;; Loading (DEF-WRITE-SEQUENCE-SPECIAL-TEST WRITE-SEQUENCE.STRING.15 "12345" (:START 1 :END 3) "23")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.LIST.1 (COERCE "abcde" (QUOTE LIST)) NIL "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.LIST.2 (COERCE "abcde" (QUOTE LIST)) (:START 1) "bcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.LIST.3 (COERCE "abcde" (QUOTE LIST)) (:END 3) "abc")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.LIST.4 (COERCE "abcde" (QUOTE LIST)) (:START 1 :END 4) "bcd")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.LIST.5 (COERCE "abcde" (QUOTE LIST)) (:END NIL) "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.LIST.6 (COERCE "abcde" (QUOTE LIST)) (:START 3 :END 3) "")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.LIST.7 (COERCE "abcde" (QUOTE LIST)) (:END NIL :START 1) "bcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.LIST.8 NIL NIL "")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.SIMPLE-VECTOR.1 (COERCE "abcde" (QUOTE SIMPLE-VECTOR)) NIL "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.SIMPLE-VECTOR.2 (COERCE "abcde" (QUOTE SIMPLE-VECTOR)) (:START 1) "bcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.SIMPLE-VECTOR.3 (COERCE "abcde" (QUOTE SIMPLE-VECTOR)) (:END 3) "abc")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.SIMPLE-VECTOR.4 (COERCE "abcde" (QUOTE SIMPLE-VECTOR)) (:START 1 :END 4) "bcd")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.SIMPLE-VECTOR.5 (COERCE "abcde" (QUOTE SIMPLE-VECTOR)) (:END NIL) "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.SIMPLE-VECTOR.6 (COERCE "abcde" (QUOTE SIMPLE-VECTOR)) (:START 3 :END 3) "")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.SIMPLE-VECTOR.7 (COERCE "abcde" (QUOTE SIMPLE-VECTOR)) (:END NIL :START 1) "bcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.SIMPLE-VECTOR.8 #() NIL "")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.FILL-VECTOR.1 (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcde     " :FILL-POINTER 5) NIL "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.FILL-VECTOR.2 (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcde     " :FILL-POINTER 5) (:START 1) "bcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.FILL-VECTOR.3 (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcde     " :FILL-POINTER 5) (:END 3) "abc")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.FILL-VECTOR.4 (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcde     " :FILL-POINTER 5) (:START 1 :END 4) "bcd")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.FILL-VECTOR.5 (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcde     " :FILL-POINTER 5) (:END NIL) "abcde")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.FILL-VECTOR.6 (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcde     " :FILL-POINTER 5) (:START 3 :END 3) "")
;; Loading (DEF-WRITE-SEQUENCE-TEST WRITE-SEQUENCE.FILL-VECTOR.7 (MAKE-ARRAY 10 :INITIAL-CONTENTS "abcde     " :FILL-POINTER 5) (:END NIL :START 1) "bcde")
;; Loading (DEFMACRO DEF-WRITE-SEQUENCE-BV-TEST (NAME INPUT ARGS EXPECTED) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((S (SYSTEM.INTERNALS::BQ-COMMA INPUT)) (EXPECTED (SYSTEM.INTERNALS::BQ-COMMA EXPECTED))) (WITH-OPEN-FILE (OS "tmp.dat" :DIRECTION :OUTPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)) :IF-EXISTS :SUPERSEDE) (ASSERT (EQ (WRITE-SEQUENCE S OS (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)) S))) (WITH-OPEN-FILE (IS "tmp.dat" :DIRECTION :INPUT :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))) (LOOP FOR I FROM 0 BELOW (LENGTH EXPECTED) FOR E = (ELT EXPECTED I) ALWAYS (EQL (READ-BYTE IS) E)))) T)))
;; Loading (DEF-WRITE-SEQUENCE-BV-TEST WRITE-SEQUENCE.BV.1 #*00111010 NIL #*00111010)
;; Loading (DEF-WRITE-SEQUENCE-BV-TEST WRITE-SEQUENCE.BV.2 #*00111010 (:START 1) #*0111010)
;; Loading (DEF-WRITE-SEQUENCE-BV-TEST WRITE-SEQUENCE.BV.3 #*00111010 (:END 5) #*00111)
;; Loading (DEF-WRITE-SEQUENCE-BV-TEST WRITE-SEQUENCE.BV.4 #*00111010 (:START 1 :END 6) #*01110)
;; Loading (DEF-WRITE-SEQUENCE-BV-TEST WRITE-SEQUENCE.BV.5 #*00111010 (:START 1 :END NIL) #*0111010)
;; Loading (DEF-WRITE-SEQUENCE-BV-TEST WRITE-SEQUENCE.BV.6 #*00111010 (:START 1 :END NIL :END 4) #*0111010)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.1 (SIGNALS-ERROR (WRITE-SEQUENCE) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.2 (SIGNALS-ERROR (WRITE-SEQUENCE "abcde") PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.3 (SIGNALS-ERROR (WRITE-SEQUENCE (QUOTE (#\a . #\b)) *STANDARD-OUTPUT*) TYPE-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.4 (SIGNALS-ERROR (WRITE-SEQUENCE #\a *STANDARD-OUTPUT*) TYPE-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.5 (SIGNALS-ERROR (WRITE-SEQUENCE "ABC" *STANDARD-OUTPUT* :START -1) TYPE-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.6 (SIGNALS-ERROR (WRITE-SEQUENCE "ABC" *STANDARD-OUTPUT* :START (QUOTE X)) TYPE-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.7 (SIGNALS-ERROR (WRITE-SEQUENCE "ABC" *STANDARD-OUTPUT* :START 0.0) TYPE-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.8 (SIGNALS-ERROR (WRITE-SEQUENCE "ABC" *STANDARD-OUTPUT* :END -1) TYPE-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.9 (SIGNALS-ERROR (WRITE-SEQUENCE "ABC" *STANDARD-OUTPUT* :END (QUOTE X)) TYPE-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.10 (SIGNALS-ERROR (WRITE-SEQUENCE "ABC" *STANDARD-OUTPUT* :END 2.0) TYPE-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.11 (SIGNALS-ERROR (WRITE-SEQUENCE "abcde" *STANDARD-OUTPUT* :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.12 (SIGNALS-ERROR (WRITE-SEQUENCE "abcde" *STANDARD-OUTPUT* :ALLOW-OTHER-KEYS NIL :FOO T) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.13 (SIGNALS-ERROR (WRITE-SEQUENCE "abcde" *STANDARD-OUTPUT* :START) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.14 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (WRITE-SEQUENCE X *STANDARD-OUTPUT*))) (FUNCTION SEQUENCEP)) NIL)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.15 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (WRITE-SEQUENCE "abcde" *STANDARD-OUTPUT* :START X))) (TYPEF (QUOTE UNSIGNED-BYTE))) NIL)
;; Loading (DEFTEST WRITE-SEQUENCE.ERROR.16 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (WRITE-SEQUENCE "abcde" *STANDARD-OUTPUT* :END X))) (TYPEF (QUOTE (OR NULL UNSIGNED-BYTE)))) NIL)
;; Loading (LOAD "file-length.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/file-length.lsp 81F0F677>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILE-LENGTH.ERROR.1 (SIGNALS-ERROR (FILE-LENGTH) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.2 (SIGNALS-ERROR (WITH-OPEN-FILE (IS "file-length.lsp" :DIRECTION :INPUT) (FILE-LENGTH IS NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.3 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (TYPEP X (QUOTE FILE-STREAM)) (TYPEP X (QUOTE BROADCAST-STREAM)) (HANDLER-CASE (PROGN (FILE-LENGTH X) NIL) (TYPE-ERROR (C) (ASSERT (NOT (TYPEP X (TYPE-ERROR-EXPECTED-TYPE C)))) T) (CONDITION NIL NIL))) COLLECT X) NIL)
;; Loading (DEFTEST FILE-LENGTH.ERROR.4 :NOTES (:ASSUME-NO-SIMPLE-STREAMS :ASSUME-NO-GRAY-STREAMS) (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "abc") (FILE-LENGTH S)) TYPE-ERROR) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.5 (SIGNALS-ERROR (WITH-OPEN-FILE (IS "file-length.lsp" :DIRECTION :INPUT) (WITH-OPEN-FILE (OS "tmp.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (LET ((S (MAKE-TWO-WAY-STREAM IS OS))) (UNWIND-PROTECT (FILE-LENGTH S) (CLOSE S))))) TYPE-ERROR) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.6 (SIGNALS-ERROR (WITH-OPEN-FILE (IS "file-length.lsp" :DIRECTION :INPUT) (WITH-OPEN-FILE (OS "tmp.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (LET ((S (MAKE-ECHO-STREAM IS OS))) (UNWIND-PROTECT (FILE-LENGTH S) (CLOSE S))))) TYPE-ERROR) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.8 (WITH-OPEN-FILE (OS "tmp.txt" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (LET ((S (MAKE-BROADCAST-STREAM OS))) (EQLT (FILE-LENGTH S) (FILE-LENGTH OS)))) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.9 (SIGNALS-TYPE-ERROR S (MAKE-CONCATENATED-STREAM) (UNWIND-PROTECT (FILE-LENGTH S) (CLOSE S))) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.10 (SIGNALS-ERROR (WITH-OPEN-FILE (IS "file-length.lsp" :DIRECTION :INPUT) (LET ((S (MAKE-CONCATENATED-STREAM IS))) (UNWIND-PROTECT (FILE-LENGTH S) (CLOSE S)))) TYPE-ERROR) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.11 :NOTES (:ASSUME-NO-SIMPLE-STREAMS :ASSUME-NO-GRAY-STREAMS) (SIGNALS-TYPE-ERROR S (MAKE-STRING-INPUT-STREAM "abcde") (UNWIND-PROTECT (FILE-LENGTH S) (CLOSE S))) T)
;; Loading (DEFTEST FILE-LENGTH.ERROR.12 :NOTES (:ASSUME-NO-SIMPLE-STREAMS :ASSUME-NO-GRAY-STREAMS) (SIGNALS-TYPE-ERROR S (MAKE-STRING-OUTPUT-STREAM) (UNWIND-PROTECT (FILE-LENGTH S) (CLOSE S))) T)
;; Loading (DEFTEST FILE-LENGTH.1 (LET ((RESULTS (MULTIPLE-VALUE-LIST (WITH-OPEN-FILE (IS "file-length.lsp" :DIRECTION :INPUT) (FILE-LENGTH IS))))) (AND (= (LENGTH RESULTS) 1) (TYPEP (CAR RESULTS) (QUOTE (INTEGER 1))) T)) T)
;; Loading (DEFTEST FILE-LENGTH.2 (LOOP FOR I FROM 1 TO 32 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR E = (MAX 0 (- (ASH 1 I) 5)) FOR OS = (OPEN "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ETYPE) DO (LOOP REPEAT 17 DO (WRITE-BYTE E OS)) DO (FINISH-OUTPUT OS) UNLESS (= (FILE-LENGTH OS) 17) COLLECT (LIST I (FILE-LENGTH OS)) DO (CLOSE OS)) NIL)
;; Loading (DEFTEST FILE-LENGTH.3 (LOOP FOR I FROM 1 TO 32 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR E = (MAX 0 (- (ASH 1 I) 5)) FOR OS = (OPEN "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ETYPE) FOR LEN = 0 DO (LOOP REPEAT 17 DO (WRITE-BYTE E OS)) DO (CLOSE OS) UNLESS (LET ((IS (OPEN "tmp.dat" :DIRECTION :INPUT :ELEMENT-TYPE ETYPE))) (PROG1 (= (FILE-LENGTH IS) 17) (CLOSE IS))) COLLECT I) NIL)
;; Loading (DEFTEST FILE-LENGTH.4 (LOOP FOR I FROM 33 TO 100 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR E = (MAX 0 (- (ASH 1 I) 5)) FOR OS = (OPEN "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ETYPE) DO (LOOP REPEAT 17 DO (WRITE-BYTE E OS)) DO (FINISH-OUTPUT OS) UNLESS (= (FILE-LENGTH OS) 17) COLLECT (LIST I (FILE-LENGTH OS)) DO (CLOSE OS)) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FILE-LENGTH.5 (LOOP FOR I FROM 33 TO 100 FOR ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR E = (MAX 0 (- (ASH 1 I) 5)) FOR OS = (OPEN "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ETYPE) FOR LEN = 0 DO (LOOP REPEAT 17 DO (WRITE-BYTE E OS)) DO (CLOSE OS) UNLESS (LET ((IS (OPEN "tmp.dat" :DIRECTION :INPUT :ELEMENT-TYPE ETYPE))) (PROG1 (= (FILE-LENGTH IS) 17) (CLOSE IS))) COLLECT I) NIL)
;; Loading (DEFTEST FILE-LENGTH.6 (WITH-OPEN-FILE (*FOO* "file-length.lsp" :DIRECTION :INPUT) (DECLARE (SPECIAL *FOO*)) (LET ((S (MAKE-SYNONYM-STREAM (QUOTE *FOO*)))) (UNWIND-PROTECT (TYPEP* (FILE-LENGTH S) (QUOTE (INTEGER 1))) (CLOSE S)))) T)
;; Loading (LOAD "file-position.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/file-position.lsp C1A053F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILE-POSITION.1 (WITH-OPEN-FILE (IS "file-position.lsp" :DIRECTION :INPUT) (FILE-POSITION IS)) 0)
;; Loading (DEFTEST FILE-POSITION.2 (WITH-OPEN-FILE (IS "file-position.lsp" :DIRECTION :INPUT) (VALUES (MULTIPLE-VALUE-LIST (NOTNOT-MV (FILE-POSITION IS :START))) (FILE-POSITION IS))) (T) 0)
;; Loading (DEFTEST FILE-POSITION.3 (WITH-OPEN-FILE (IS "file-position.lsp" :DIRECTION :INPUT) (VALUES (MULTIPLE-VALUE-LIST (NOTNOT-MV (FILE-POSITION IS :END))) (NOTNOT (> (FILE-POSITION IS) 0)))) (T) T)
;; Loading (DEFTEST FILE-POSITION.4 (WITH-OPEN-FILE (IS "file-position.lsp" :DIRECTION :INPUT) (VALUES (FILE-POSITION IS) (READ-CHAR IS) (NOTNOT (> (FILE-POSITION IS) 0)))) 0 #\; T)
;; Loading (DEFTEST FILE-POSITION.5 (WITH-OPEN-FILE (OS "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (VALUES (FILE-POSITION OS) (WRITE-CHAR #\x OS) (NOTNOT (> (FILE-POSITION OS) 0)))) 0 #\x T)
;; Loading (DEFTEST FILE-POSITION.6 (WITH-OPEN-FILE (OS "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (LET ((P1 (FILE-POSITION OS)) (DELTA (FILE-STRING-LENGTH OS #\x))) (WRITE-CHAR #\x OS) (LET ((P2 (FILE-POSITION OS))) (OR (NULL P1) (NULL P2) (NULL DELTA) (=T (+ P1 DELTA) P2))))) T)
;; Loading (DEFTEST FILE-POSITION.7 (LOOP FOR LEN FROM 1 TO 32 FOR N = (ASH 1 LEN) DO (WITH-OPEN-FILE (OS "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA LEN)))) (LOOP FOR I FROM 0 BELOW 100 FOR R = (LOGAND (1- N) I) FOR POS = (FILE-POSITION OS) DO (ASSERT (OR (NOT POS) (EQL POS I))) DO (WRITE-BYTE R OS))) DO (WITH-OPEN-FILE (IS "tmp.dat" :DIRECTION :INPUT :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA LEN)))) (LOOP FOR I FROM 0 BELOW 100 FOR POS = (FILE-POSITION IS) DO (ASSERT (OR (NOT POS) (EQL POS I))) DO (LET ((BYTE (READ-BYTE IS))) (ASSERT (EQL BYTE (LOGAND (1- N) I))))))) NIL)
;; Loading (DEFTEST FILE-POSITION.8 (LOOP FOR LEN FROM 33 TO 100 FOR N = (ASH 1 LEN) DO (WITH-OPEN-FILE (OS "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA LEN)))) (LOOP FOR I FROM 0 BELOW 100 FOR R = (LOGAND (1- N) I) FOR POS = (FILE-POSITION OS) DO (ASSERT (OR (NOT POS) (EQL POS I))) DO (WRITE-BYTE R OS))) DO (WITH-OPEN-FILE (IS "tmp.dat" :DIRECTION :INPUT :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA LEN)))) (LOOP FOR I FROM 0 BELOW 100 FOR POS = (FILE-POSITION IS) DO (ASSERT (OR (NOT POS) (EQL POS I))) DO (LET ((BYTE (READ-BYTE IS))) (ASSERT (EQL BYTE (LOGAND (1- N) I))))))) NIL)
;; Loading (DEFTEST FILE-POSITION.9 (WITH-INPUT-FROM-STRING (S "abcdefghijklmnopqrstuvwxyz") (LOOP REPEAT 26 FOR P = (FILE-POSITION S) UNLESS (OR (NOT P) (PROGN (FILE-POSITION S P) (EQL (FILE-POSITION S) P))) COLLECT P DO (READ-CHAR S))) NIL)
;; Loading (DEFTEST FILE-POSITION.10 (WITH-OUTPUT-TO-STRING (S) (LOOP REPEAT 26 FOR P = (FILE-POSITION S) UNLESS (OR (NOT P) (PROGN (FILE-POSITION S P) (EQL (FILE-POSITION S) P))) COLLECT P DO (WRITE-CHAR #\x S))) "xxxxxxxxxxxxxxxxxxxxxxxxxx")
;; Loading (DEFTEST FILE-POSITION.ERROR.1 (SIGNALS-ERROR (FILE-POSITION) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-POSITION.ERROR.2 (SIGNALS-ERROR (FILE-POSITION (MAKE-STRING-INPUT-STREAM "abc") :START NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "file-string-length.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/file-string-length.lsp C1AFA977>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FILE-STRING-LENGTH.1 (WITH-OPEN-FILE (S "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (LOOP FOR X ACROSS +STANDARD-CHARS+ FOR LEN = (FILE-STRING-LENGTH S X) DO (ASSERT (TYPEP LEN (QUOTE (OR NULL (INTEGER 0))))) DO (LET ((POS1 (FILE-POSITION S))) (WRITE-CHAR X S) (LET ((POS2 (FILE-POSITION S))) (WHEN (AND POS1 POS2 LEN) (ASSERT (= (+ POS1 LEN) POS2))))))) NIL)
;; Loading (DEFTEST FILE-STRING-LENGTH.2 (WITH-OPEN-FILE (S "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (LOOP FOR X ACROSS +STANDARD-CHARS+ FOR LEN = (FILE-STRING-LENGTH S (STRING X)) DO (ASSERT (TYPEP LEN (QUOTE (OR NULL (INTEGER 0))))) DO (LET ((POS1 (FILE-POSITION S))) (WRITE-SEQUENCE (STRING X) S) (LET ((POS2 (FILE-POSITION S))) (WHEN (AND POS1 POS2 LEN) (ASSERT (= (+ POS1 LEN) POS2))))))) NIL)
;; Loading (DEFTEST FILE-STRING-LENGTH.3 (WITH-OPEN-FILE (STREAM "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (LET* ((S1 "abcde") (N (FILE-STRING-LENGTH STREAM S1))) (DO-SPECIAL-STRINGS (S2 S1 NIL) (ASSERT (= (FILE-STRING-LENGTH STREAM S2) N))))) NIL)
;; Loading (DEFTEST FILE-STRING-LENGTH.ERROR.1 (SIGNALS-ERROR (FILE-STRING-LENGTH) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-STRING-LENGTH.ERROR.2 (SIGNALS-ERROR (WITH-OPEN-FILE (S "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (FILE-STRING-LENGTH S)) PROGRAM-ERROR) T)
;; Loading (DEFTEST FILE-STRING-LENGTH.ERROR.3 (SIGNALS-ERROR (WITH-OPEN-FILE (S "tmp.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (FILE-STRING-LENGTH S #\x NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "open.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/open.lsp C1B6E677>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN GENERATOR-FOR-ELEMENT-TYPE (TYPE) (ETYPECASE TYPE ((MEMBER CHARACTER BASE-CHAR) (FUNCTION (LAMBDA (I) (AREF "abcdefghijklmnopqrstuvwxyz" (MOD I 26))))) ((MEMBER SIGNED-BYTE UNSIGNED-BYTE BIT) (FUNCTION (LAMBDA (I) (LOGAND I 1)))) (CONS (LET ((OP (CAR TYPE)) (ARG1 (CADR TYPE)) (ARG2 (CADDR TYPE))) (ECASE OP (UNSIGNED-BYTE (LET ((MASK (1- (ASH 1 ARG1)))) (FUNCTION (LAMBDA (I) (LOGAND I MASK))))) (SIGNED-BYTE (LET ((MASK (1- (ASH 1 (1- ARG1))))) (FUNCTION (LAMBDA (I) (LOGAND I MASK))))) (INTEGER (LET* ((LO ARG1) (HI ARG2) (LOWER-BOUND (ETYPECASE LO (INTEGER LO) (CONS (1+ (CAR LO))))) (UPPER-BOUND (ETYPECASE HI (INTEGER HI) (CONS (1- (CAR HI))))) (RANGE (1+ (- UPPER-BOUND LOWER-BOUND)))) (FUNCTION (LAMBDA (I) (+ LOWER-BOUND (MOD I RANGE)))))))))))
;; Loading (COMPILE (QUOTE GENERATOR-FOR-ELEMENT-TYPE))
;; Loading (DEFMACRO DEF-OPEN-TEST (NAME ARGS FORM EXPECTED &KEY (NOTES NIL NOTES-P) (BUILD-FORM NIL BUILD-FORM-P) (ELEMENT-TYPE (QUOTE CHARACTER) ELEMENT-TYPE-P) (PATHNAME (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (WHEN ELEMENT-TYPE-P (SETF ARGS (APPEND ARGS (LIST :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE))))))) (UNLESS BUILD-FORM-P (LET ((WRITE-ELEMENT-FORM (COND ((SUBTYPEP ELEMENT-TYPE (QUOTE INTEGER)) (SYSTEM.INTERNALS::BACKQUOTE (WRITE-BYTE (FUNCALL (THE FUNCTION (GENERATOR-FOR-ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE)))) I) OS))) ((SUBTYPEP ELEMENT-TYPE (QUOTE CHARACTER)) (SYSTEM.INTERNALS::BACKQUOTE (WRITE-CHAR (FUNCALL (THE FUNCTION (GENERATOR-FOR-ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE)))) I) OS)))))) (SETQ BUILD-FORM (SYSTEM.INTERNALS::BACKQUOTE (WITH-OPEN-FILE (OS PN :DIRECTION :OUTPUT (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (IF ELEMENT-TYPE-P (SYSTEM.INTERNALS::BACKQUOTE (:ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE)))))) :IF-EXISTS :SUPERSEDE) (ASSERT (OPEN-STREAM-P OS)) (DOTIMES (I 10) (SYSTEM.INTERNALS::BQ-COMMA WRITE-ELEMENT-FORM)) (FINISH-OUTPUT OS)))))) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN NOTES-P (SYSTEM.INTERNALS::BACKQUOTE (:NOTES (SYSTEM.INTERNALS::BQ-COMMA NOTES))))) (LET ((PN (SYSTEM.INTERNALS::BQ-COMMA PATHNAME))) (DELETE-ALL-VERSIONS PN) (SYSTEM.INTERNALS::BQ-COMMA BUILD-FORM) (LET ((S (OPEN PN (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)))) (UNWIND-PROTECT (PROGN (ASSERT (OPEN-STREAM-P S)) (ASSERT (TYPEP S (QUOTE FILE-STREAM))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (UNLESS (MEMBER ELEMENT-TYPE (QUOTE (SIGNED-BYTE UNSIGNED-BYTE))) (SYSTEM.INTERNALS::BACKQUOTE ((ASSERT (SUBTYPEP (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE)) (STREAM-ELEMENT-TYPE S))))))) (SYSTEM.INTERNALS::BQ-COMMA FORM)) (CLOSE S)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN EXPECTED))))
;; Loading (DEF-OPEN-TEST OPEN.1 NIL (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.2 (:DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij") :ELEMENT-TYPE CHARACTER)
;; Loading (DEF-OPEN-TEST OPEN.3 (:DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.4 (:DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij") :ELEMENT-TYPE BASE-CHAR)
;; Loading (DEF-OPEN-TEST OPEN.5 (:IF-EXISTS :ERROR) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.6 (:IF-EXISTS :ERROR :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.7 (:IF-EXISTS :NEW-VERSION) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.8 (:IF-EXISTS :NEW-VERSION :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.9 (:IF-EXISTS :RENAME) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.10 (:IF-EXISTS :RENAME :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.11 (:IF-EXISTS :RENAME-AND-DELETE) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.12 (:IF-EXISTS :RENAME-AND-DELETE :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.13 (:IF-EXISTS :OVERWRITE) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.14 (:IF-EXISTS :OVERWRITE :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-OPEN-TEST OPEN.15 (:IF-EXISTS :APPEND) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.16 (:IF-EXISTS :APPEND :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.17 (:IF-EXISTS :SUPERSEDE) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.18 (:IF-EXISTS :SUPERSEDE :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.19 (:IF-EXISTS NIL) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.20 (:IF-EXISTS NIL :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.21 (:IF-DOES-NOT-EXIST NIL) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.22 (:IF-DOES-NOT-EXIST NIL :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.23 (:IF-DOES-NOT-EXIST :ERROR) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.24 (:IF-DOES-NOT-EXIST :ERROR :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.25 (:IF-DOES-NOT-EXIST :CREATE) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.26 (:IF-DOES-NOT-EXIST :CREATE :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.27 (:EXTERNAL-FORMAT :DEFAULT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.28 (:EXTERNAL-FORMAT :DEFAULT :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)) ("abcdefghij"))
;; Loading (DEF-OPEN-TEST OPEN.29 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 1))
;; Loading (DEF-OPEN-TEST OPEN.30 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 1))
;; Loading (DEF-OPEN-TEST OPEN.31 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 0 1 2 3 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 2))
;; Loading (DEF-OPEN-TEST OPEN.32 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 0 1 2 3 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 2))
;; Loading (DEF-OPEN-TEST OPEN.33 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 3))
;; Loading (DEF-OPEN-TEST OPEN.34 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 3))
;; Loading (DEF-OPEN-TEST OPEN.35 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 4))
;; Loading (DEF-OPEN-TEST OPEN.36 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 4))
;; Loading (DEF-OPEN-TEST OPEN.37 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 5))
;; Loading (DEF-OPEN-TEST OPEN.38 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 5))
;; Loading (DEF-OPEN-TEST OPEN.39 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 6))
;; Loading (DEF-OPEN-TEST OPEN.40 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 6))
;; Loading (DEF-OPEN-TEST OPEN.41 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 7))
;; Loading (DEF-OPEN-TEST OPEN.42 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 7))
;; Loading (DEF-OPEN-TEST OPEN.43 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 8))
;; Loading (DEF-OPEN-TEST OPEN.44 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 8))
;; Loading (DEF-OPEN-TEST OPEN.45 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 9))
;; Loading (DEF-OPEN-TEST OPEN.46 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 9))
;; Loading (DEF-OPEN-TEST OPEN.47 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 10))
;; Loading (DEF-OPEN-TEST OPEN.48 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 10))
;; Loading (DEF-OPEN-TEST OPEN.49 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 20))
;; Loading (DEF-OPEN-TEST OPEN.50 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 20))
;; Loading (DEF-OPEN-TEST OPEN.51 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 25))
;; Loading (DEF-OPEN-TEST OPEN.52 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 25))
;; Loading (DEF-OPEN-TEST OPEN.53 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 30))
;; Loading (DEF-OPEN-TEST OPEN.54 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 30))
;; Loading (DEF-OPEN-TEST OPEN.55 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 32))
;; Loading (DEF-OPEN-TEST OPEN.56 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 32))
;; Loading (DEF-OPEN-TEST OPEN.57 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 33))
;; Loading (DEF-OPEN-TEST OPEN.58 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 33))
;; Loading (DEF-OPEN-TEST OPEN.59 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE UNSIGNED-BYTE)
;; Loading (DEF-OPEN-TEST OPEN.60 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE UNSIGNED-BYTE)
;; Loading (DEF-OPEN-TEST OPEN.61 NIL (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE SIGNED-BYTE)
;; Loading (DEF-OPEN-TEST OPEN.62 (:DIRECTION :INPUT) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE SIGNED-BYTE)
;; Loading (DEF-OPEN-TEST OPEN.63 NIL (VALUES (READ-LINE S NIL)) ("abcdefghij") :PATHNAME "tmp.dat")
;; Loading (DEF-OPEN-TEST OPEN.64 NIL (VALUES (READ-LINE S GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
NIL)) ("abcdefghij") :PATHNAME (LOGICAL-PATHNAME "CLTEST:TMP.DAT"))
;; Loading (DEFTEST OPEN.65 (LET ((TYPE (QUOTE (OR (INTEGER 0 1) (INTEGER 100 200)))) (PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (VALS (QUOTE (0 1 100 120 130 190 200 1 0 150)))) (OR (NOT (SUBTYPEP TYPE (QUOTE INTEGER))) (PROGN (WITH-OPEN-FILE (OS PN :DIRECTION :OUTPUT :ELEMENT-TYPE TYPE :IF-EXISTS :SUPERSEDE) (DOLIST (E VALS) (WRITE-BYTE E OS))) (LET ((S (OPEN PN :DIRECTION :INPUT :ELEMENT-TYPE TYPE)) (SEQ (MAKE-ARRAY 10))) (UNWIND-PROTECT (PROGN (READ-SEQUENCE SEQ S) SEQ) (CLOSE S)) (NOTNOT (EVERY (FUNCTION EQL) SEQ VALS)))))) T)
;; Loading (DEFTEST OPEN.66 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S PN :DIRECTION :IO :IF-EXISTS :RENAME-AND-DELETE :IF-DOES-NOT-EXIST :CREATE) (FORMAT S "some stuff~%") (FINISH-OUTPUT S) (LET ((IS (OPEN S :DIRECTION :INPUT))) (UNWIND-PROTECT (VALUES (READ-CHAR IS) (NOTNOT (FILE-POSITION S :START)) (READ-LINE IS) (READ-LINE S)) (CLOSE IS))))) #\s T "ome stuff" "some stuff")
;; Loading (DEFTEST OPEN.67 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (LET ((S (OPEN PN :DIRECTION :OUTPUT))) (UNWIND-PROTECT (PROGN (FORMAT S "some stuff~%") (FINISH-OUTPUT S) (CLOSE S) (LET ((IS (OPEN S :DIRECTION :INPUT))) (UNWIND-PROTECT (VALUES (READ-LINE IS)) (CLOSE IS)))) (WHEN (OPEN-STREAM-P S) (CLOSE S))))) "some stuff")
;; Loading (DEFMACRO DEF-OPEN-OUTPUT-TEST (NAME ARGS FORM EXPECTED &REST KEYARGS &KEY (ELEMENT-TYPE (QUOTE CHARACTER)) (BUILD-FORM (SYSTEM.INTERNALS::BACKQUOTE (DOTIMES (I 10) (SYSTEM.INTERNALS::BQ-COMMA (COND ((SUBTYPEP ELEMENT-TYPE (QUOTE INTEGER)) (SYSTEM.INTERNALS::BACKQUOTE (WRITE-BYTE (FUNCALL (THE FUNCTION (GENERATOR-FOR-ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE)))) I) S))) ((SUBTYPEP ELEMENT-TYPE (QUOTE CHARACTER)) (SYSTEM.INTERNALS::BACKQUOTE (WRITE-CHAR (FUNCALL (THE FUNCTION (GENERATOR-FOR-ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE)))) I) S)))))))) &ALLOW-OTHER-KEYS) (SYSTEM.INTERNALS::BACKQUOTE (DEF-OPEN-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (:DIRECTION :OUTPUT (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)) (PROGN (SYSTEM.INTERNALS::BQ-COMMA BUILD-FORM) (ASSERT (OUTPUT-STREAM-P S)) (SYSTEM.INTERNALS::BQ-COMMA FORM)) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED) :BUILD-FORM NIL (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN KEYARGS))))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.1 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.2 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS "tmp.dat") (VALUES (READ-LINE IS NIL)))) ("abcdefghij") :PATHNAME "tmp.dat")
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.3 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (LOGICAL-PATHNAME "CLTEST:TMP.DAT")) (VALUES (READ-LINE IS NIL)))) ("abcdefghij") :PATHNAME (LOGICAL-PATHNAME "CLTEST:TMP.DAT"))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.4 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE CHARACTER)) (VALUES (READ-LINE IS NIL)))) ("abcdefghij") :ELEMENT-TYPE CHARACTER)
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.5 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE BASE-CHAR)) (VALUES (READ-LINE IS NIL)))) ("abcdefghij") :ELEMENT-TYPE BASE-CHAR)
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.6 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (INTEGER 0 1))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE (INTEGER 0 1))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.7 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE BIT)) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE BIT)
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.8 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 1))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 1))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.9 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 2))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 0 1 2 3 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 2))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.10 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 3))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 3))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.11 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 4))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 4))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.12 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 6))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 6))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.13 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 8))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.14 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 12))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 12))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.15 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 16))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 16))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.16 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 24))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 24))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.17 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 32))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 32))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.18 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 64))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 64))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.19 NIL (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat")) :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 100))) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ IS) SEQ))) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 100))
;; Loading (DEFTEST OPEN.OUTPUT.20 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE)) (OPEN PN :DIRECTION :OUTPUT :IF-EXISTS NIL)) NIL)
;; Loading (DEF-OPEN-TEST OPEN.OUTPUT.21 (:IF-EXISTS :NEW-VERSION :DIRECTION :OUTPUT) (PROGN (WRITE-SEQUENCE "wxyz" S) (CLOSE S) (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)))) ("wxyz") :NOTES (:OPEN-IF-EXISTS-NEW-VERSION-NO-ERROR))
;; Loading (DEF-OPEN-TEST OPEN.OUTPUT.22 (:IF-EXISTS :RENAME :DIRECTION :OUTPUT) (PROGN (WRITE-SEQUENCE "wxyz" S) (CLOSE S) (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)))) ("wxyz"))
;; Loading (DEF-OPEN-TEST OPEN.OUTPUT.23 (:IF-EXISTS :RENAME-AND-DELETE :DIRECTION :OUTPUT) (PROGN (WRITE-SEQUENCE "wxyz" S) (CLOSE S) (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)))) ("wxyz"))
;; Loading (DEF-OPEN-TEST OPEN.OUTPUT.24 (:IF-EXISTS :OVERWRITE :DIRECTION :OUTPUT) (PROGN (WRITE-SEQUENCE "wxyz" S) (CLOSE S) (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)))) ("wxyzefghij"))
;; Loading (DEF-OPEN-TEST OPEN.OUTPUT.25 (:IF-EXISTS :APPEND :DIRECTION :OUTPUT) (PROGN (WRITE-SEQUENCE "wxyz" S) (CLOSE S) (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)))) ("abcdefghijwxyz"))
;; Loading (DEF-OPEN-TEST OPEN.OUTPUT.26 (:IF-EXISTS :SUPERSEDE :DIRECTION :OUTPUT) (PROGN (WRITE-SEQUENCE "wxyz" S) (CLOSE S) (WITH-OPEN-FILE (S PN :DIRECTION :INPUT) (VALUES (READ-LINE S NIL)))) ("wxyz"))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.27 (:IF-DOES-NOT-EXIST :CREATE :DIRECTION :OUTPUT) (PROGN (CLOSE S) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
;; Loading (DEFTEST OPEN.OUTPUT.28 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :OUTPUT :IF-DOES-NOT-EXIST NIL)) NIL)
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.28A (:EXTERNAL-FORMAT :DEFAULT) (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.29 (:EXTERNAL-FORMAT (PROG1 (WITH-OPEN-FILE (S "foo.dat" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (STREAM-EXTERNAL-FORMAT S)) (DELETE-ALL-VERSIONS "foo.dat"))) (PROGN (CLOSE S) (WITH-OPEN-FILE (IS (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
;; Loading (DEFTEST OPEN.OUTPUT.30 :NOTES (:OPEN-IF-EXISTS-NEW-VERSION-NO-ERROR) (LET ((PN (MAKE-PATHNAME :NAME "tmp" :TYPE "dat" :VERSION :NEWEST))) (OR (NOT (EQL (PATHNAME-VERSION PN) :NEWEST)) (PROGN (LET ((S1 (OPEN PN :DIRECTION :OUTPUT :IF-EXISTS :OVERWRITE :IF-DOES-NOT-EXIST :CREATE))) (UNWIND-PROTECT (LET ((S2 (OPEN PN :DIRECTION :OUTPUT))) (UNWIND-PROTECT (WRITE-LINE "abcdef" S2) (CLOSE S2)) (UNWIND-PROTECT (PROGN (SETQ S2 (OPEN S1 :DIRECTION :INPUT)) (EQUALT (READ-LINE S2 NIL) "abcdef")) (CLOSE S2))) (CLOSE S1) (DELETE-ALL-VERSIONS PN)))))) T)
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.31 (:IF-EXISTS :RENAME :DIRECTION :OUTPUT) (PROGN (CLOSE S) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.32 (:IF-EXISTS :RENAME-AND-DELETE :DIRECTION :OUTPUT) (PROGN (CLOSE S) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.33 (:IF-EXISTS :NEW-VERSION :DIRECTION :OUTPUT) (PROGN (CLOSE S) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.34 (:IF-EXISTS :SUPERSEDE :DIRECTION :OUTPUT) (PROGN (CLOSE S) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
;; Loading (DEF-OPEN-OUTPUT-TEST OPEN.OUTPUT.35 (:IF-EXISTS NIL :DIRECTION :OUTPUT) (PROGN (CLOSE S) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT) (VALUES (READ-LINE IS NIL)))) ("abcdefghij"))
;; Loading (DEFMACRO DEF-OPEN-IO-TEST (NAME ARGS FORM EXPECTED &REST KEYARGS &KEY (ELEMENT-TYPE (QUOTE CHARACTER)) (BUILD-FORM (SYSTEM.INTERNALS::BACKQUOTE (DOTIMES (I 10) (SYSTEM.INTERNALS::BQ-COMMA (COND ((SUBTYPEP ELEMENT-TYPE (QUOTE INTEGER)) (SYSTEM.INTERNALS::BACKQUOTE (WRITE-BYTE (FUNCALL (THE FUNCTION (GENERATOR-FOR-ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE)))) I) S))) ((SUBTYPEP ELEMENT-TYPE (QUOTE CHARACTER)) (SYSTEM.INTERNALS::BACKQUOTE (WRITE-CHAR (FUNCALL (THE FUNCTION (GENERATOR-FOR-ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA ELEMENT-TYPE)))) I) S)))))))) &ALLOW-OTHER-KEYS) (SYSTEM.INTERNALS::BACKQUOTE (DEF-OPEN-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (:DIRECTION :IO (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)) (PROGN (SYSTEM.INTERNALS::BQ-COMMA BUILD-FORM) (ASSERT (INPUT-STREAM-P S)) (ASSERT (OUTPUT-STREAM-P S)) (SYSTEM.INTERNALS::BQ-COMMA FORM)) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED) :BUILD-FORM NIL (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN KEYARGS))))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.1 NIL (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.2 NIL (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij") :PATHNAME "tmp.dat")
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.3 NIL (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij") :PATHNAME (LOGICAL-PATHNAME "CLTEST:TMP.DAT"))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.4 NIL (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij") :ELEMENT-TYPE CHARACTER)
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.5 NIL (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij") :ELEMENT-TYPE BASE-CHAR)
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.6 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE (INTEGER 0 1))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.7 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE BIT)
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.8 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 0 1 0 1 0 1 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 1))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.9 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 0 1 2 3 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 2))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.10 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 0 1)) :ELEMENT-TYPE (UNSIGNED-BYTE 3))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.11 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 4))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.12 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 6))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.13 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 8))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.14 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 12))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.15 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 16))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.16 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 24))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.17 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 32))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.18 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 64))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.19 NIL (PROGN (FILE-POSITION S :START) (LET ((SEQ (MAKE-ARRAY 10))) (READ-SEQUENCE SEQ S) SEQ)) (#(0 1 2 3 4 5 6 7 8 9)) :ELEMENT-TYPE (UNSIGNED-BYTE 100))
;; Loading (DEFTEST OPEN.IO.20 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (WITH-OPEN-FILE (S PN :DIRECTION :IO :IF-EXISTS :SUPERSEDE)) (OPEN PN :DIRECTION :IO :IF-EXISTS NIL)) NIL)
;; Loading (DEF-OPEN-TEST OPEN.IO.21 (:IF-EXISTS :NEW-VERSION :DIRECTION :IO) (PROGN (WRITE-SEQUENCE "wxyz" S) (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("wxyz") :NOTES (:OPEN-IF-EXISTS-NEW-VERSION-NO-ERROR))
;; Loading (DEF-OPEN-TEST OPEN.IO.22 (:IF-EXISTS :RENAME :DIRECTION :IO) (PROGN (WRITE-SEQUENCE "wxyz" S) (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("wxyz"))
;; Loading (DEF-OPEN-TEST OPEN.IO.23 (:IF-EXISTS :RENAME-AND-DELETE :DIRECTION :IO) (PROGN (WRITE-SEQUENCE "wxyz" S) (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("wxyz"))
;; Loading (DEF-OPEN-TEST OPEN.IO.24 (:IF-EXISTS :OVERWRITE :DIRECTION :IO) (PROGN (WRITE-SEQUENCE "wxyz" S) (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("wxyzefghij"))
;; Loading (DEF-OPEN-TEST OPEN.IO.25 (:IF-EXISTS :APPEND :DIRECTION :IO) (PROGN (WRITE-SEQUENCE "wxyz" S) (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghijwxyz"))
;; Loading (DEF-OPEN-TEST OPEN.IO.26 (:IF-EXISTS :SUPERSEDE :DIRECTION :IO) (PROGN (WRITE-SEQUENCE "wxyz" S) (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("wxyz"))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.27 (:IF-DOES-NOT-EXIST :CREATE :DIRECTION :IO) (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
;; Loading (DEFTEST OPEN.IO.28 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :IO :IF-DOES-NOT-EXIST NIL)) NIL)
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.28A (:EXTERNAL-FORMAT :DEFAULT) (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.29 (:EXTERNAL-FORMAT (PROG1 (WITH-OPEN-FILE (S "foo.dat" :DIRECTION :IO :IF-EXISTS :SUPERSEDE) (STREAM-EXTERNAL-FORMAT S)) (DELETE-ALL-VERSIONS "foo.dat"))) (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
;; Loading (DEFTEST OPEN.IO.30 :NOTES (:OPEN-IF-EXISTS-NEW-VERSION-NO-ERROR) (LET ((PN (MAKE-PATHNAME :NAME "tmp" :TYPE "dat" :VERSION :NEWEST))) (OR (NOT (EQL (PATHNAME-VERSION PN) :NEWEST)) (PROGN (LET ((S1 (OPEN PN :DIRECTION :IO :IF-EXISTS :OVERWRITE :IF-DOES-NOT-EXIST :CREATE))) (UNWIND-PROTECT (LET ((S2 (OPEN PN :DIRECTION :IO))) (UNWIND-PROTECT (WRITE-LINE "abcdef" S2) (CLOSE S2)) (UNWIND-PROTECT (PROGN (SETQ S2 (OPEN S1 :DIRECTION :INPUT)) (EQUALT (READ-LINE S2 NIL) "abcdef")) (CLOSE S2))) (CLOSE S1) (DELETE-ALL-VERSIONS PN)))))) T)
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.31 (:IF-EXISTS :RENAME :DIRECTION :IO) (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.32 (:IF-EXISTS :RENAME-AND-DELETE :DIRECTION :IO) (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.33 (:IF-EXISTS :NEW-VERSION :DIRECTION :IO) (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.34 (:IF-EXISTS :SUPERSEDE :DIRECTION :IO) (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
;; Loading (DEF-OPEN-IO-TEST OPEN.IO.35 (:IF-EXISTS NIL :DIRECTION :IO) (PROGN (FILE-POSITION S :START) (VALUES (READ-LINE S NIL))) ("abcdefghij"))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFMACRO DEF-OPEN-PROBE-TEST (NAME ARGS FORM &KEY (BUILD-FORM NIL BUILD-FORM-P) (PATHNAME (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (UNLESS BUILD-FORM-P (SETF BUILD-FORM (SYSTEM.INTERNALS::BACKQUOTE (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE))))) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((PN (SYSTEM.INTERNALS::BQ-COMMA PATHNAME))) (DELETE-ALL-VERSIONS PN) (SYSTEM.INTERNALS::BQ-COMMA BUILD-FORM) (LET ((S (OPEN PN :DIRECTION :PROBE (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)))) (VALUES (SYSTEM.INTERNALS::BQ-COMMA (IF BUILD-FORM (SYSTEM.INTERNALS::BACKQUOTE (AND (TYPEP S (QUOTE FILE-STREAM)) (NOT (OPEN-STREAM-P S)))) (SYSTEM.INTERNALS::BACKQUOTE (NOT S)))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) T T)))
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.1 NIL T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.2 (:IF-EXISTS :ERROR) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.3 (:IF-EXISTS :NEW-VERSION) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.4 (:IF-EXISTS :RENAME) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.5 (:IF-EXISTS :RENAME-AND-DELETE) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.6 (:IF-EXISTS :OVERWRITE) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.7 (:IF-EXISTS :APPEND) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.8 (:IF-EXISTS :SUPERSEDE) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.9 (:IF-DOES-NOT-EXIST :ERROR) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.10 (:IF-DOES-NOT-EXIST NIL) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.11 (:IF-DOES-NOT-EXIST :CREATE) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.12 NIL T :BUILD-FORM NIL)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.13 (:IF-EXISTS :ERROR) T :BUILD-FORM NIL)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.14 (:IF-EXISTS :NEW-VERSION) T :BUILD-FORM NIL)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.15 (:IF-EXISTS :RENAME) T :BUILD-FORM NIL)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.16 (:IF-EXISTS :RENAME-AND-DELETE) T :BUILD-FORM NIL)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.17 (:IF-EXISTS :OVERWRITE) T :BUILD-FORM NIL)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.18 (:IF-EXISTS :APPEND) T :BUILD-FORM NIL)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.19 (:IF-EXISTS :SUPERSEDE) T :BUILD-FORM NIL)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.20 (:IF-DOES-NOT-EXIST NIL) T :BUILD-FORM NIL)
;; Loading (DEFTEST OPEN.PROBE.21 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (LET ((S (OPEN PN :DIRECTION :PROBE :IF-DOES-NOT-EXIST :CREATE))) (VALUES (NOTNOT S) (NOTNOT (PROBE-FILE PN))))) T T)
;; Loading (DEFTEST OPEN.PROBE.22 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (LET ((S (OPEN PN :DIRECTION :PROBE :IF-DOES-NOT-EXIST :CREATE :IF-EXISTS :ERROR))) (VALUES (NOTNOT S) (NOTNOT (PROBE-FILE PN))))) T T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.23 (:EXTERNAL-FORMAT :DEFAULT) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.24 (:ELEMENT-TYPE (QUOTE CHARACTER)) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.25 (:ELEMENT-TYPE (QUOTE BIT)) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.26 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 2))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.27 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 4))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.28 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.29 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 9))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.30 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 15))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.31 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 16))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.32 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 17))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.33 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 31))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.34 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 32))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.35 (:ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 33))) T)
;; Loading (DEF-OPEN-PROBE-TEST OPEN.PROBE.36 (:ELEMENT-TYPE (QUOTE (INTEGER -1002 13112))) T)
;; Loading (DEFTEST OPEN.ERROR.1 (SIGNALS-ERROR (OPEN) PROGRAM-ERROR) T)
;; Loading (DEFTEST OPEN.ERROR.2 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (CLOSE (OPEN PN :DIRECTION :OUTPUT :IF-DOES-NOT-EXIST :CREATE)) (OPEN PN :IF-EXISTS :ERROR :DIRECTION :OUTPUT)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.3 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (CLOSE (OPEN PN :DIRECTION :OUTPUT :IF-DOES-NOT-EXIST :CREATE)) (OPEN PN :IF-EXISTS :ERROR :DIRECTION :IO)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.4 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.5 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :IF-DOES-NOT-EXIST :ERROR)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.6 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :INPUT)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.7 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :IF-DOES-NOT-EXIST :ERROR :DIRECTION :INPUT)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.8 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :OUTPUT :IF-DOES-NOT-EXIST :ERROR)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.9 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :IO :IF-DOES-NOT-EXIST :ERROR)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.10 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :PROBE :IF-DOES-NOT-EXIST :ERROR)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.11 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :OUTPUT :IF-EXISTS :OVERWRITE)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.12 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :OUTPUT :IF-EXISTS :APPEND)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.13 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :IO :IF-EXISTS :OVERWRITE)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.14 (SIGNALS-ERROR-ALWAYS (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (OPEN PN :DIRECTION :IO :IF-EXISTS :APPEND)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.15 (SIGNALS-ERROR-ALWAYS (OPEN (MAKE-PATHNAME :NAME :WILD :TYPE "lsp")) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.16 (SIGNALS-ERROR-ALWAYS (OPEN (MAKE-PATHNAME :NAME "open" :TYPE :WILD)) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.17 (SIGNALS-ERROR-ALWAYS (LET ((PN (MAKE-PATHNAME :NAME "open" :TYPE "lsp" :VERSION :WILD))) (IF (WILD-PATHNAME-P PN) (OPEN PN) (ERROR (QUOTE FILE-ERROR)))) FILE-ERROR) T T)
;; Loading (DEFTEST OPEN.ERROR.18 (SIGNALS-ERROR-ALWAYS (OPEN (PARSE-NAMESTRING (QUOTE "tmp.dat")) :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :EXTERNAL-FORM (GENSYM)) ERROR) T T)
;; Loading (LOAD "stream-external-format.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/stream-external-format.lsp C1D25BF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STREAM-EXTERNAL-FORMAT.ERROR.1 (SIGNALS-ERROR (STREAM-EXTERNAL-FORMAT) PROGRAM-ERROR) T)
;; Loading (DEFTEST STREAM-EXTERNAL-FORMAT.ERROR.2 (SIGNALS-ERROR (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (STREAM-EXTERNAL-FORMAT S NIL))) PROGRAM-ERROR) T)
;; Loading (LOAD "with-open-file.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-open-file.lsp C1D58CF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-OPEN-FILE.1 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT))) NIL)
;; Loading (DEFTEST WITH-OPEN-FILE.2 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (NOTNOT-MV (OUTPUT-STREAM-P S)))) T)
;; Loading (DEFTEST WITH-OPEN-FILE.3 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (VALUES))))
;; Loading (DEFTEST WITH-OPEN-FILE.4 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (VALUES 1 2 3 4 5 6 7 8))) 1 2 3 4 5 6 7 8)
;; Loading (DEFTEST WITH-OPEN-FILE.5 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT) (DECLARE (IGNORE S)) (DECLARE (OPTIMIZE)))) NIL)
;; Loading (DEFTEST WITH-OPEN-FILE.6 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S PN (CDR (QUOTE (NIL . :DIRECTION))) (CAR (QUOTE (:OUTPUT)))) (FORMAT S "foo!~%")) (WITH-OPEN-FILE (S PN) (READ-LINE S))) "foo!" NIL)
;; Loading (DEFTEST WITH-OPEN-FILE.7 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-OPEN-FILE (S (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST WITH-OPEN-FILE.8 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-OPEN-FILE (S "with-open-file.lsp" (RETURN-FROM DONE X) :INPUT) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST WITH-OPEN-FILE.9 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-OPEN-FILE (S "with-open-file.lsp" :DIRECTION (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST WITH-OPEN-FILE.10 (MACROLET ((%M (Z) Z)) (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat")))) (DELETE-ALL-VERSIONS PN) (WITH-OPEN-FILE (S (EXPAND-IN-CURRENT-ENV (%M PN)) :DIRECTION :OUTPUT)))) NIL)
;; Loading (LOAD "with-open-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-open-stream.lsp C1DE8FF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-OPEN-STREAM.1 (WITH-OPEN-STREAM (OS (MAKE-STRING-OUTPUT-STREAM))) NIL)
;; Loading (DEFTEST WITH-OPEN-STREAM.2 (WITH-OPEN-STREAM (OS (MAKE-STRING-OUTPUT-STREAM)) (DECLARE (IGNORE OS))) NIL)
;; Loading (DEFTEST WITH-OPEN-STREAM.3 (WITH-OPEN-STREAM (OS (MAKE-STRING-OUTPUT-STREAM)) (DECLARE (IGNORE OS)) (DECLARE (TYPE STRING-STREAM OS))) NIL)
;; Loading (DEFTEST WITH-OPEN-STREAM.4 (WITH-OPEN-STREAM (OS (MAKE-STRING-OUTPUT-STREAM)) (DECLARE (IGNORE OS)) (VALUES)))
;; Loading (DEFTEST WITH-OPEN-STREAM.5 (WITH-OPEN-STREAM (OS (MAKE-STRING-OUTPUT-STREAM)) (DECLARE (IGNORE OS)) (VALUES (QUOTE A) (QUOTE B))) A B)
;; Loading (DEFTEST WITH-OPEN-STREAM.6 (LET ((S (MAKE-STRING-OUTPUT-STREAM))) (VALUES (WITH-OPEN-STREAM (OS S)) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (OPEN-STREAM-P S))) NIL T NIL)
;; Loading (DEFTEST WITH-OPEN-STREAM.7 (LET ((S (MAKE-STRING-INPUT-STREAM "123"))) (VALUES (WITH-OPEN-STREAM (IS S) (READ-CHAR S)) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (OPEN-STREAM-P S))) #\1 T NIL)
;; Loading (DEFTEST WITH-OPEN-STREAM.8 (LET ((S (MAKE-STRING-OUTPUT-STREAM))) (VALUES (BLOCK DONE (WITH-OPEN-STREAM (OS S) (RETURN-FROM DONE NIL))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (OPEN-STREAM-P S))) NIL T NIL)
;; Loading (DEFTEST WITH-OPEN-STREAM.9 (LET ((S (MAKE-STRING-OUTPUT-STREAM))) (VALUES (CATCH (QUOTE DONE) (WITH-OPEN-STREAM (OS S) (THROW (QUOTE DONE) NIL))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (OPEN-STREAM-P S))) NIL T NIL)
;; Loading (DEFTEST WITH-OPEN-STREAM.10 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-OPEN-STREAM (S (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (LOAD "listen.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/listen.lsp C1E632D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST LISTEN.1 (WITH-INPUT-FROM-STRING (S "") (LISTEN S)) NIL)
;; Loading (DEFTEST LISTEN.2 (WITH-INPUT-FROM-STRING (S "x") (NOTNOT-MV (LISTEN S))) T)
;; Loading (DEFTEST LISTEN.3 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "") (LISTEN)) NIL)
;; Loading (DEFTEST LISTEN.4 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "A") (NOTNOT-MV (LISTEN))) T)
;; Loading (DEFTEST LISTEN.6 (WITH-INPUT-FROM-STRING (S "x") (VALUES (READ-CHAR S) (LISTEN S) (UNREAD-CHAR #\x S) (NOTNOT (LISTEN S)) (READ-CHAR S))) #\x NIL NIL T #\x)
;; Loading (DEFTEST LISTEN.7 (WITH-OPEN-FILE (S "listen.lsp") (VALUES (NOTNOT (LISTEN S)) (HANDLER-CASE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (LOOP (READ-CHAR S))) (END-OF-FILE NIL (LISTEN S))))) T NIL)
;; Loading (DEFTEST LISTEN.8 (WITH-INPUT-FROM-STRING (IS "abc") (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS (MAKE-BROADCAST-STREAM)))) (NOTNOT-MV (LISTEN T)))) T)
;; Loading (DEFTEST LISTEN.9 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "345") (NOTNOT-MV (LISTEN NIL))) T)
;; Loading (DEFTEST LISTEN.ERROR.1 :NOTES (:ASSUME-NO-SIMPLE-STREAMS) (SIGNALS-ERROR (LISTEN *STANDARD-INPUT* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST LISTEN.ERROR.2 (SIGNALS-ERROR (LISTEN *STANDARD-INPUT* NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "clear-input.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/clear-input.lsp C1EC5C57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CLEAR-INPUT.1 (LOOP FOR S IN (LIST *DEBUG-IO* *QUERY-IO* *STANDARD-INPUT* *TERMINAL-IO*) ALWAYS (EQ (CLEAR-INPUT S) NIL)) T)
;; Loading (DEFTEST CLEAR-INPUT.2 (CLEAR-INPUT) NIL)
;; Loading (DEFTEST CLEAR-INPUT.3 (CLEAR-INPUT NIL) NIL)
;; Loading (DEFTEST CLEAR-INPUT.4 (CLEAR-INPUT T) NIL)
;; Loading (DEFTEST CLEAR-INPUT.5 (WITH-INPUT-FROM-STRING (IS "!?*") (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS (MAKE-BROADCAST-STREAM)))) (CLEAR-INPUT T))) NIL)
;; Loading (DEFTEST CLEAR-INPUT.6 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "345") (CLEAR-INPUT NIL)) NIL)
;; Loading (DEFTEST CLEAR-INPUT.ERROR.1 :NOTES (:ASSUME-NO-SIMPLE-STREAMS) (SIGNALS-ERROR (CLEAR-INPUT T NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLEAR-INPUT.ERROR.2 :NOTES (:ASSUME-NO-SIMPLE-STREAMS) (SIGNALS-ERROR (CLEAR-INPUT NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLEAR-INPUT.ERROR.3 (SIGNALS-ERROR (CLEAR-INPUT T NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLEAR-INPUT.ERROR.4 (SIGNALS-ERROR (CLEAR-INPUT NIL NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLEAR-INPUT.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION CLEAR-INPUT) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR STREAM (MEMBER NIL T))))))) NIL)
;; Loading (LOAD "finish-output.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/finish-output.lsp C1F24397>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FINISH-OUTPUT.1 (FINISH-OUTPUT) NIL)
;; Loading (DEFTEST FINISH-OUTPUT.2 (FINISH-OUTPUT T) NIL)
;; Loading (DEFTEST FINISH-OUTPUT.3 (FINISH-OUTPUT NIL) NIL)
;; Loading (DEFTEST FINISH-OUTPUT.4 (LOOP FOR S IN (LIST *DEBUG-IO* *ERROR-OUTPUT* *QUERY-IO* *STANDARD-OUTPUT* *TRACE-OUTPUT* *TERMINAL-IO*) FOR RESULTS = (MULTIPLE-VALUE-LIST (FINISH-OUTPUT S)) UNLESS (EQUAL RESULTS (QUOTE (NIL))) COLLECT S) NIL)
;; Loading (DEFTEST FINISH-OUTPUT.5 (LET ((OS (MAKE-STRING-OUTPUT-STREAM))) (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM (MAKE-STRING-INPUT-STREAM "") OS))) (FINISH-OUTPUT T))) NIL)
;; Loading (DEFTEST FINISH-OUTPUT.6 (LET ((*STANDARD-OUTPUT* (MAKE-STRING-OUTPUT-STREAM))) (FINISH-OUTPUT NIL)) NIL)
;; Loading (DEFTEST FINISH-OUTPUT.ERROR.1 (SIGNALS-ERROR (FINISH-OUTPUT NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FINISH-OUTPUT.ERROR.2 (SIGNALS-ERROR (FINISH-OUTPUT T NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FINISH-OUTPUT.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION FINISH-OUTPUT) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR STREAM (MEMBER NIL T))))))) NIL)
;; Loading (LOAD "force-output.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/force-output.lsp C1F7B467>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FORCE-OUTPUT.1 (FORCE-OUTPUT) NIL)
;; Loading (DEFTEST FORCE-OUTPUT.2 (FORCE-OUTPUT T) NIL)
;; Loading (DEFTEST FORCE-OUTPUT.3 (FORCE-OUTPUT NIL) NIL)
;; Loading (DEFTEST FORCE-OUTPUT.4 (LOOP FOR S IN (LIST *DEBUG-IO* *ERROR-OUTPUT* *QUERY-IO* *STANDARD-OUTPUT* *TRACE-OUTPUT* *TERMINAL-IO*) FOR RESULTS = (MULTIPLE-VALUE-LIST (FORCE-OUTPUT S)) UNLESS (EQUAL RESULTS (QUOTE (NIL))) COLLECT S) NIL)
;; Loading (DEFTEST FORCE-OUTPUT.5 (LET ((OS (MAKE-STRING-OUTPUT-STREAM))) (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM (MAKE-STRING-INPUT-STREAM "") OS))) (FORCE-OUTPUT T))) NIL)
;; Loading (DEFTEST FORCE-OUTPUT.6 (LET ((*STANDARD-OUTPUT* (MAKE-STRING-OUTPUT-STREAM))) (FORCE-OUTPUT NIL)) NIL)
;; Loading (DEFTEST FORCE-OUTPUT.ERROR.1 (SIGNALS-ERROR (FORCE-OUTPUT NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FORCE-OUTPUT.ERROR.2 (SIGNALS-ERROR (FORCE-OUTPUT T NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST FORCE-OUTPUT.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION FORCE-OUTPUT) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR STREAM (MEMBER NIL T))))))) NIL)
;; Loading (LOAD "clear-output.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/clear-output.lsp C1FD18B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CLEAR-OUTPUT.1 (PROGN (FINISH-OUTPUT) (CLEAR-OUTPUT)) NIL)
;; Loading (DEFTEST CLEAR-OUTPUT.2 (PROGN (FINISH-OUTPUT) (CLEAR-OUTPUT T)) NIL)
;; Loading (DEFTEST CLEAR-OUTPUT.3 (PROGN (FINISH-OUTPUT) (CLEAR-OUTPUT NIL)) NIL)
;; Loading (DEFTEST CLEAR-OUTPUT.4 (LOOP FOR S IN (LIST *DEBUG-IO* *ERROR-OUTPUT* *QUERY-IO* *STANDARD-OUTPUT* *TRACE-OUTPUT* *TERMINAL-IO*) FOR DUMMY = (FINISH-OUTPUT S) FOR RESULTS = (MULTIPLE-VALUE-LIST (CLEAR-OUTPUT S)) UNLESS (EQUAL RESULTS (QUOTE (NIL))) COLLECT S) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST CLEAR-OUTPUT.5 (LET ((OS (MAKE-STRING-OUTPUT-STREAM))) (LET ((*TERMINAL-IO* (MAKE-TWO-WAY-STREAM (MAKE-STRING-INPUT-STREAM "") OS))) (CLEAR-OUTPUT T))) NIL)
;; Loading (DEFTEST CLEAR-OUTPUT.6 (LET ((*STANDARD-OUTPUT* (MAKE-STRING-OUTPUT-STREAM))) (CLEAR-OUTPUT NIL)) NIL)
;; Loading (DEFTEST CLEAR-OUTPUT.ERROR.1 (SIGNALS-ERROR (CLEAR-OUTPUT NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLEAR-OUTPUT.ERROR.2 (SIGNALS-ERROR (CLEAR-OUTPUT T NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST CLEAR-OUTPUT.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION CLEAR-OUTPUT) (FUNCTION (LAMBDA (X) (TYPEP X (QUOTE (OR STREAM (MEMBER NIL T))))))) NIL)
;; Loading (LOAD "make-synonym-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-synonym-stream.lsp 81A3CEF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-SYNONYM-STREAM.1 (WITH-INPUT-FROM-STRING (*S* "abcde") (DECLARE (SPECIAL *S*)) (LET ((SS (MAKE-SYNONYM-STREAM (QUOTE *S*)))) (ASSERT (TYPEP SS (QUOTE STREAM))) (ASSERT (TYPEP SS (QUOTE SYNONYM-STREAM))) (ASSERT (INPUT-STREAM-P SS)) (ASSERT (NOT (OUTPUT-STREAM-P SS))) (ASSERT (OPEN-STREAM-P SS)) (ASSERT (STREAMP SS)) (ASSERT (STREAM-ELEMENT-TYPE SS)) (VALUES (READ-CHAR *S*) (READ-CHAR SS) (READ-CHAR *S*) (READ-CHAR SS) (READ-CHAR SS)))) #\a #\b #\c #\d #\e)
;; Loading (DEFTEST MAKE-SYNONYM-STREAM.3 (WITH-OUTPUT-TO-STRING (*S*) (DECLARE (SPECIAL *S*)) (LET ((SS (MAKE-SYNONYM-STREAM (QUOTE *S*)))) (ASSERT (TYPEP SS (QUOTE STREAM))) (ASSERT (TYPEP SS (QUOTE SYNONYM-STREAM))) (ASSERT (OUTPUT-STREAM-P SS)) (ASSERT (NOT (INPUT-STREAM-P SS))) (ASSERT (OPEN-STREAM-P SS)) (ASSERT (STREAMP SS)) (ASSERT (STREAM-ELEMENT-TYPE SS)) (WRITE-CHAR #\a *S*) (WRITE-CHAR #\b SS) (WRITE-CHAR #\x *S*) (WRITE-CHAR #\y SS))) "abxy")
;; Loading (DEFTEST MAKE-SYNONYM-STREAM.4 (LET ((SS (MAKE-SYNONYM-STREAM (QUOTE *TERMINAL-IO*)))) (ASSERT (TYPEP SS (QUOTE STREAM))) (ASSERT (TYPEP SS (QUOTE SYNONYM-STREAM))) (ASSERT (OUTPUT-STREAM-P SS)) (ASSERT (INPUT-STREAM-P SS)) (ASSERT (OPEN-STREAM-P SS)) (ASSERT (STREAMP SS)) (ASSERT (STREAM-ELEMENT-TYPE SS)) NIL) NIL)
;; Loading (DEFTEST MAKE-SYNONYM-STREAM.ERROR.1 (SIGNALS-ERROR (MAKE-SYNONYM-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SYNONYM-STREAM.ERROR.2 (SIGNALS-ERROR (MAKE-SYNONYM-STREAM (QUOTE *STANDARD-INPUT*) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-SYNONYM-STREAM.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION MAKE-SYNONYM-STREAM) (FUNCTION SYMBOLP)) NIL)
;; Loading (LOAD "synonym-stream-symbol.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/synonym-stream-symbol.lsp 81AC6AD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SYNONYM-STREAM-SYMBOL.1 (SYNONYM-STREAM-SYMBOL (MAKE-SYNONYM-STREAM (QUOTE *STANDARD-INPUT*))) *STANDARD-INPUT*)
;; Loading (DEFTEST SYNONYM-STREAM-SYMBOL.ERROR.1 (SIGNALS-ERROR (SYNONYM-STREAM-SYMBOL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SYNONYM-STREAM-SYMBOL.ERROR.2 (SIGNALS-ERROR (SYNONYM-STREAM-SYMBOL (MAKE-SYNONYM-STREAM (QUOTE *TERMINAL-IO*)) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "make-broadcast-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-broadcast-stream.lsp 81AF7C77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.1 (LET ((S (MAKE-BROADCAST-STREAM))) (ASSERT (TYPEP S (QUOTE STREAM))) (ASSERT (TYPEP S (QUOTE BROADCAST-STREAM))) (ASSERT (OUTPUT-STREAM-P S)) (ASSERT (OPEN-STREAM-P S)) (ASSERT (STREAMP S)) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE BROADCAST-STREAM))) (NOTNOT (OUTPUT-STREAM-P S)) (PROGN (WRITE-CHAR #\x S) NIL))) T T T NIL)
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.2 (WITH-OUTPUT-TO-STRING (S1) (LET ((S (MAKE-BROADCAST-STREAM S1))) (ASSERT (TYPEP S (QUOTE STREAM))) (ASSERT (TYPEP S (QUOTE BROADCAST-STREAM))) (ASSERT (OUTPUT-STREAM-P S)) (ASSERT (OPEN-STREAM-P S)) (ASSERT (STREAMP S)) (ASSERT (EQL (STREAM-ELEMENT-TYPE S) (STREAM-ELEMENT-TYPE S1))) (WRITE-CHAR #\x S))) "x")
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.3 (LET ((S1 (MAKE-STRING-OUTPUT-STREAM)) (S2 (MAKE-STRING-OUTPUT-STREAM))) (LET ((S (MAKE-BROADCAST-STREAM S1 S2))) (ASSERT (TYPEP S (QUOTE STREAM))) (ASSERT (TYPEP S (QUOTE BROADCAST-STREAM))) (ASSERT (OUTPUT-STREAM-P S)) (ASSERT (OPEN-STREAM-P S)) (ASSERT (STREAMP S)) (ASSERT (EQL (STREAM-ELEMENT-TYPE S) (STREAM-ELEMENT-TYPE S2))) (FORMAT S "This is a test")) (VALUES (GET-OUTPUT-STREAM-STRING S1) (GET-OUTPUT-STREAM-STRING S2))) "This is a test" "This is a test")
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.4 (FRESH-LINE (MAKE-BROADCAST-STREAM)) NIL)
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.5 (FILE-LENGTH (MAKE-BROADCAST-STREAM)) 0)
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.6 (FILE-POSITION (MAKE-BROADCAST-STREAM)) 0)
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.7 (FILE-STRING-LENGTH (MAKE-BROADCAST-STREAM) "antidisestablishmentarianism") 1)
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.8 (STREAM-EXTERNAL-FORMAT (MAKE-BROADCAST-STREAM)) :DEFAULT)
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION MAKE-BROADCAST-STREAM) (FUNCTION (LAMBDA (X) (AND (STREAMP X) (OUTPUT-STREAM-P X))))) NIL)
;; Loading (DEFTEST MAKE-BROADCAST-STREAM.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION MAKE-BROADCAST-STREAM) (FUNCTION (LAMBDA (X) (AND (STREAMP X) (OUTPUT-STREAM-P X)))) *STREAMS*) NIL)
;; Loading (LOAD "broadcast-stream-streams.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/broadcast-stream-streams.lsp 81B90FB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST BROADCAST-STREAM-STREAMS.1 (BROADCAST-STREAM-STREAMS (MAKE-BROADCAST-STREAM)) NIL)
;; Loading (DEFTEST BROADCAST-STREAM-STREAMS.2 (EQUALT (BROADCAST-STREAM-STREAMS (MAKE-BROADCAST-STREAM *STANDARD-OUTPUT*)) (LIST *STANDARD-OUTPUT*)) T)
;; Loading (DEFTEST BROADCAST-STREAM-STREAMS.ERROR.1 (SIGNALS-ERROR (BROADCAST-STREAM-STREAMS) PROGRAM-ERROR) T)
;; Loading (DEFTEST BROADCAST-STREAM-STREAMS.ERROR.2 (SIGNALS-ERROR (BROADCAST-STREAM-STREAMS (MAKE-BROADCAST-STREAM) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "make-two-way-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-two-way-stream.lsp 81BC7D47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.1 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (ASSERT (TYPEP S (QUOTE STREAM))) (ASSERT (TYPEP S (QUOTE TWO-WAY-STREAM))) (ASSERT (STREAMP S)) (ASSERT (OPEN-STREAM-P S)) (ASSERT (INPUT-STREAM-P S)) (ASSERT (OUTPUT-STREAM-P S)) (ASSERT (STREAM-ELEMENT-TYPE S)) (VALUES (READ-CHAR S) (WRITE-CHAR #\b S) (READ-CHAR S) (WRITE-CHAR #\a S) (READ-CHAR S) (WRITE-CHAR #\r S) (GET-OUTPUT-STREAM-STRING OS))) #\f #\b #\o #\a #\o #\r "bar")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.2 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (CLOSE S) (OPEN-STREAM-P S) (NOTNOT (OPEN-STREAM-P IS)) (NOTNOT (OPEN-STREAM-P OS)) (WRITE-CHAR #\8 OS) (GET-OUTPUT-STREAM-STRING OS))) T NIL T T #\8 "8")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.3 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (PEEK-CHAR NIL S) (READ-CHAR S) (GET-OUTPUT-STREAM-STRING OS))) #\f #\f "")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.4 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (READ-CHAR-NO-HANG S) (READ-CHAR-NO-HANG S NIL) (READ-CHAR-NO-HANG S T :EOF) (READ-CHAR-NO-HANG S NIL :EOF) (GET-OUTPUT-STREAM-STRING OS))) #\f #\o #\o :EOF "")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.5 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (TERPRI S) (GET-OUTPUT-STREAM-STRING OS))) NIL "
")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.6 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (WRITE-CHAR #\+ S) (NOTNOT (FRESH-LINE S)) (READ-CHAR S) (GET-OUTPUT-STREAM-STRING OS))) #\+ T #\f "+
")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.7 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (READ-CHAR S) (UNREAD-CHAR #\f S) (READ-CHAR S) (READ-CHAR S) (UNREAD-CHAR #\o S) (GET-OUTPUT-STREAM-STRING OS))) #\f NIL #\f #\o NIL "")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.8 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (READ-LINE S) (GET-OUTPUT-STREAM-STRING OS))) "foo" "")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.9 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (WRITE-STRING "bar" S) (GET-OUTPUT-STREAM-STRING OS))) "bar" "bar")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.10 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (WRITE-LINE "bar" S) (GET-OUTPUT-STREAM-STRING OS))) "bar" "bar
")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.11 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (LET ((X (VECTOR NIL NIL NIL))) (VALUES (READ-SEQUENCE X S) X (GET-OUTPUT-STREAM-STRING OS)))) 3 #(#\f #\o #\o) "")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.12 (LET ((PN1 (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (PN2 (PARSE-NAMESTRING (QUOTE "tmp2.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (S PN1 :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ELEMENT-TYPE) (DOLIST (B (QUOTE (3 8 19 41))) (WRITE-BYTE B S))) (WITH-OPEN-FILE (IS PN1 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (WITH-OPEN-FILE (OS PN2 :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (LET ((S (MAKE-TWO-WAY-STREAM IS OS)) (X (VECTOR NIL NIL NIL NIL))) (ASSERT (EQL (READ-SEQUENCE X S) 4)) (ASSERT (EQUALP X #(3 8 19 41))) (LET ((Y #(100 5 18 211 0 178))) (ASSERT (EQL (WRITE-SEQUENCE Y S) Y)) (CLOSE S))))) (WITH-OPEN-FILE (S PN2 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LET ((X (VECTOR NIL NIL NIL NIL NIL NIL NIL))) (VALUES (READ-SEQUENCE X S) X)))) 6 #(100 5 18 211 0 178 NIL))
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.13 (LET ((PN1 (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (PN2 (PARSE-NAMESTRING (QUOTE "tmp2.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 32)))) (WITH-OPEN-FILE (S PN1 :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ELEMENT-TYPE) (DOLIST (B (QUOTE (3 8 19 41))) (WRITE-BYTE B S))) (WITH-OPEN-FILE (IS PN1 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (WITH-OPEN-FILE (OS PN2 :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (LET ((S (MAKE-TWO-WAY-STREAM IS OS)) (X (VECTOR NIL NIL NIL NIL))) (ASSERT (EQL (READ-SEQUENCE X S) 4)) (ASSERT (EQUALP X #(3 8 19 41))) (LET ((Y #(100 5 18 211 0 178))) (ASSERT (EQL (WRITE-SEQUENCE Y S) Y)) (CLOSE S))))) (WITH-OPEN-FILE (S PN2 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LET ((X (VECTOR NIL NIL NIL NIL NIL NIL NIL))) (VALUES (READ-SEQUENCE X S) X)))) 6 #(100 5 18 211 0 178 NIL))
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.14 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (VALUES (WRITE-STRING "abc" S) (CLEAR-INPUT S) (WRITE-STRING "def" S) (GET-OUTPUT-STREAM-STRING OS))) "abc" NIL "def" "abcdef")
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.ERROR.1 (SIGNALS-ERROR (MAKE-TWO-WAY-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.ERROR.2 (SIGNALS-ERROR (MAKE-TWO-WAY-STREAM (MAKE-STRING-INPUT-STREAM "foo")) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.ERROR.3 (SIGNALS-ERROR (LET ((OS (MAKE-STRING-OUTPUT-STREAM))) (MAKE-TWO-WAY-STREAM (MAKE-STRING-INPUT-STREAM "foo") OS NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAKE-TWO-WAY-STREAM X (MAKE-STRING-OUTPUT-STREAM)))) (FUNCTION (LAMBDA (X) (AND (STREAMP X) (INPUT-STREAM-P X))))) NIL)
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAKE-TWO-WAY-STREAM X (MAKE-STRING-OUTPUT-STREAM)))) (FUNCTION (LAMBDA (X) (AND (STREAMP X) (INPUT-STREAM-P X)))) *STREAMS*) NIL)
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.ERROR.6 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAKE-TWO-WAY-STREAM (MAKE-STRING-INPUT-STREAM "foo") X))) (FUNCTION (LAMBDA (X) (AND (STREAMP X) (OUTPUT-STREAM-P X))))) NIL)
;; Loading (DEFTEST MAKE-TWO-WAY-STREAM.ERROR.7 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (MAKE-TWO-WAY-STREAM (MAKE-STRING-INPUT-STREAM "foo") X))) (FUNCTION (LAMBDA (X) (AND (STREAMP X) (OUTPUT-STREAM-P X)))) *STREAMS*) NIL)
;; Loading (LOAD "two-way-stream-input-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/two-way-stream-input-stream.lsp 81D53D97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TWO-WAY-STREAM-INPUT-STREAM.1 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (EQUALT (MULTIPLE-VALUE-LIST (TWO-WAY-STREAM-INPUT-STREAM S)) (LIST IS))) T)
;; Loading (DEFTEST TWO-WAY-STREAM-INPUT-STREAM.ERROR.1 (SIGNALS-ERROR (TWO-WAY-STREAM-INPUT-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST TWO-WAY-STREAM-INPUT-STREAM.ERROR.2 (SIGNALS-ERROR (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (TWO-WAY-STREAM-INPUT-STREAM S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "two-way-stream-output-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/two-way-stream-output-stream.lsp 81D91ED7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TWO-WAY-STREAM-OUTPUT-STREAM.1 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (EQUALT (MULTIPLE-VALUE-LIST (TWO-WAY-STREAM-OUTPUT-STREAM S)) (LIST OS))) T)
;; Loading (DEFTEST TWO-WAY-STREAM-OUTPUT-STREAM.ERROR.1 (SIGNALS-ERROR (TWO-WAY-STREAM-OUTPUT-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST TWO-WAY-STREAM-OUTPUT-STREAM.ERROR.2 (SIGNALS-ERROR (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-TWO-WAY-STREAM IS OS))) (TWO-WAY-STREAM-OUTPUT-STREAM S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "echo-stream-input-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/echo-stream-input-stream.lsp 81DD0177>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ECHO-STREAM-INPUT-STREAM.1 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (EQUALT (MULTIPLE-VALUE-LIST (ECHO-STREAM-INPUT-STREAM S)) (LIST IS))) T)
;; Loading (DEFTEST ECHO-STREAM-INPUT-STREAM.ERROR.1 (SIGNALS-ERROR (ECHO-STREAM-INPUT-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST ECHO-STREAM-INPUT-STREAM.ERROR.2 (SIGNALS-ERROR (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (ECHO-STREAM-INPUT-STREAM S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "echo-stream-output-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/echo-stream-output-stream.lsp 81E0CCD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ECHO-STREAM-OUTPUT-STREAM.1 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (EQUALT (MULTIPLE-VALUE-LIST (ECHO-STREAM-OUTPUT-STREAM S)) (LIST OS))) T)
;; Loading (DEFTEST ECHO-STREAM-OUTPUT-STREAM.ERROR.1 (SIGNALS-ERROR (ECHO-STREAM-OUTPUT-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST ECHO-STREAM-OUTPUT-STREAM.ERROR.2 (SIGNALS-ERROR (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (ECHO-STREAM-OUTPUT-STREAM S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "make-echo-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-echo-stream.lsp 81E49437>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-ECHO-STREAM.1 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (READ-CHAR S) (GET-OUTPUT-STREAM-STRING OS))) #\f "f")
;; Loading (DEFTEST MAKE-ECHO-STREAM.2 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (GET-OUTPUT-STREAM-STRING OS)) "")
;; Loading (DEFTEST MAKE-ECHO-STREAM.3 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (READ-LINE S NIL) (GET-OUTPUT-STREAM-STRING OS))) "foo" "foo")
;; Loading (DEFTEST MAKE-ECHO-STREAM.4 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (PN2 (PARSE-NAMESTRING (QUOTE "tmp2.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (OS PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (LOOP FOR X IN (QUOTE (2 3 5 7 11)) DO (WRITE-BYTE X OS))) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (VALUES (WITH-OPEN-FILE (OS PN2 :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-ECHO-STREAM IS OS))) (LOOP REPEAT 6 COLLECT (READ-BYTE S NIL :EOF1)))) (WITH-OPEN-FILE (S PN2 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LOOP REPEAT 6 COLLECT (READ-BYTE S NIL :EOF2)))))) (2 3 5 7 11 :EOF1) (2 3 5 7 11 :EOF2))
;; Loading (DEFTEST MAKE-ECHO-STREAM.5 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (PN2 (PARSE-NAMESTRING (QUOTE "tmp2.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (OS PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (LOOP FOR X IN (QUOTE (2 3 5 7 11)) DO (WRITE-BYTE X OS))) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (VALUES (WITH-OPEN-FILE (OS PN2 :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-ECHO-STREAM IS OS))) (LOOP REPEAT 6 COLLECT (READ-BYTE S NIL 100)))) (WITH-OPEN-FILE (S PN2 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LOOP REPEAT 6 COLLECT (READ-BYTE S NIL 200)))))) (2 3 5 7 11 100) (2 3 5 7 11 200))
;; Loading (DEFTEST MAKE-ECHO-STREAM.6 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (COERCE (LOOP REPEAT 3 COLLECT (READ-CHAR-NO-HANG S)) (QUOTE STRING)) (GET-OUTPUT-STREAM-STRING OS))) "foo" "foo")
;; Loading (DEFTEST MAKE-ECHO-STREAM.7 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (COERCE (LOOP REPEAT 4 COLLECT (READ-CHAR-NO-HANG S NIL (QUOTE #\z))) (QUOTE STRING)) (GET-OUTPUT-STREAM-STRING OS))) "fooz" "foo")
;; Loading (DEFTEST MAKE-ECHO-STREAM.8 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS)) (X (COPY-SEQ "xxxxxx"))) (VALUES (READ-SEQUENCE X S) X (GET-OUTPUT-STREAM-STRING OS))) 3 "fooxxx" "foo")
;; Loading (DEFTEST MAKE-ECHO-STREAM.9 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (PN2 (PARSE-NAMESTRING (QUOTE "tmp2.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (OS PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (LOOP FOR X IN (QUOTE (2 3 5 7 11)) DO (WRITE-BYTE X OS))) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (VALUES (WITH-OPEN-FILE (OS PN2 :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-ECHO-STREAM IS OS)) (X (VECTOR 0 0 0 0 0 0 0 0))) (LIST (READ-SEQUENCE X S) X))) (WITH-OPEN-FILE (S PN2 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LOOP REPEAT 8 COLLECT (READ-BYTE S NIL NIL)))))) (5 #(2 3 5 7 11 0 0 0)) (2 3 5 7 11 NIL NIL NIL))
;; Loading (DEFTEST MAKE-ECHO-STREAM.10 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (NOTNOT (OPEN-STREAM-P S)) (CLOSE S) (OPEN-STREAM-P S) (NOTNOT (OPEN-STREAM-P IS)) (NOTNOT (OPEN-STREAM-P OS)))) T T NIL T T)
;; Loading (DEFTEST MAKE-ECHO-STREAM.11 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (NOTNOT (LISTEN S)) (READ-CHAR S) (NOTNOT (LISTEN S)) (READ-CHAR S) (NOTNOT (LISTEN S)) (READ-CHAR S) (LISTEN S))) T #\f T #\o T #\o NIL)
;; Loading (DEFTEST MAKE-ECHO-STREAM.12 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (NOTNOT (STREAMP S)) (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE ECHO-STREAM))) (NOTNOT (INPUT-STREAM-P S)) (NOTNOT (OUTPUT-STREAM-P S)) (NOTNOT (STREAM-ELEMENT-TYPE S)))) T T T T T T)
;; Loading (DEFTEST MAKE-ECHO-STREAM.13 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (WRITE-CHAR #\0 S) (CLOSE S) (GET-OUTPUT-STREAM-STRING OS))) #\0 T "0")
;; Loading (DEFTEST MAKE-ECHO-STREAM.14 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (TERPRI S) (CLOSE S) (GET-OUTPUT-STREAM-STRING OS))) NIL T "
")
;; Loading (DEFTEST MAKE-ECHO-STREAM.15 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (PN2 (PARSE-NAMESTRING (QUOTE "tmp2.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (OS PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE)) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (VALUES (WITH-OPEN-FILE (OS PN2 :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-ECHO-STREAM IS OS)) (X (MAPCAR (FUNCTION CHAR-CODE) (COERCE "abcdefg" (QUOTE LIST))))) (LOOP FOR B IN X DO (ASSERT (EQUAL (LIST B) (MULTIPLE-VALUE-LIST (WRITE-BYTE B S))))) (CLOSE S))))) (WITH-OPEN-FILE (IS PN2 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LET ((X (VECTOR 0 0 0 0 0 0 0))) (READ-SEQUENCE X IS) (VALUES (READ-BYTE IS NIL :DONE) (MAP (QUOTE STRING) (FUNCTION CODE-CHAR) X))))) :DONE "abcdefg")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MAKE-ECHO-STREAM.16 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (PN2 (PARSE-NAMESTRING (QUOTE "tmp2.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (OS PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE)) (WITH-OPEN-FILE (IS PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (VALUES (WITH-OPEN-FILE (OS PN2 :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-ECHO-STREAM IS OS)) (X (MAP (QUOTE VECTOR) (FUNCTION CHAR-CODE) "abcdefg"))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (WRITE-SEQUENCE X S)) (LIST X))) (CLOSE S))))) (WITH-OPEN-FILE (IS PN2 :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LET ((X (VECTOR 0 0 0 0 0 0 0))) (READ-SEQUENCE X IS) (VALUES (READ-BYTE IS NIL :DONE) (MAP (QUOTE STRING) (FUNCTION CODE-CHAR) X))))) :DONE "abcdefg")
;; Loading (DEFTEST MAKE-ECHO-STREAM.17 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (WRITE-CHAR #\X S) (NOTNOT (FRESH-LINE S)) (FINISH-OUTPUT S) (FORCE-OUTPUT S) (CLOSE S) (GET-OUTPUT-STREAM-STRING OS))) #\X T NIL NIL T "X
")
;; Loading (DEFTEST MAKE-ECHO-STREAM.18 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (WRITE-STRING "159" S) (CLOSE S) (GET-OUTPUT-STREAM-STRING OS))) "159" T "159")
;; Loading (DEFTEST MAKE-ECHO-STREAM.20 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (WRITE-STRING "0159X" S :START 1 :END 4) (CLOSE S) (GET-OUTPUT-STREAM-STRING OS))) "0159X" T "159")
;; Loading (DEFTEST MAKE-ECHO-STREAM.21 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (WRITE-LINE "159" S) (CLOSE S) (GET-OUTPUT-STREAM-STRING OS))) "159" T "159
")
;; Loading (DEFTEST MAKE-ECHO-STREAM.22 (LET* ((IS (MAKE-STRING-INPUT-STREAM "foo")) (OS (MAKE-STRING-OUTPUT-STREAM)) (S (MAKE-ECHO-STREAM IS OS))) (VALUES (WRITE-CHAR #\0 S) (CLEAR-OUTPUT S))) #\0 NIL)
;; Loading (DEFTEST MAKE-ECHO-STREAM.ERROR.1 (SIGNALS-ERROR (MAKE-ECHO-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-ECHO-STREAM.ERROR.2 (SIGNALS-ERROR (MAKE-ECHO-STREAM *STANDARD-INPUT*) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-ECHO-STREAM.ERROR.3 (SIGNALS-ERROR (MAKE-ECHO-STREAM *STANDARD-INPUT* *STANDARD-OUTPUT* NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "concatenated-stream-streams.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/concatenated-stream-streams.lsp C1AA8257>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CONCATENATED-STREAM-STREAMS.1 (CONCATENATED-STREAM-STREAMS (MAKE-CONCATENATED-STREAM)) NIL)
;; Loading (DEFTEST CONCATENATED-STREAM-STREAMS.2 (EQUALT (LIST (LIST *STANDARD-INPUT*)) (MULTIPLE-VALUE-LIST (CONCATENATED-STREAM-STREAMS (MAKE-CONCATENATED-STREAM *STANDARD-INPUT*)))) T)
;; Loading (DEFTEST CONCATENATED-STREAM-STREAMS.3 (WITH-INPUT-FROM-STRING (S1 "abc") (WITH-INPUT-FROM-STRING (S2 "def") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (EQUALT (LIST (LIST S1 S2)) (MULTIPLE-VALUE-LIST (CONCATENATED-STREAM-STREAMS S)))))) T)
;; Loading (DEFTEST CONCATENATED-STREAM-STREAMS.4 (WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "def") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (EQUALT (LIST (LIST S1 S2)) (MULTIPLE-VALUE-LIST (CONCATENATED-STREAM-STREAMS S)))))) T)
;; Loading (DEFTEST CONCATENATED-STREAM-STREAMS.5 (WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "def") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (VALUES (READ-CHAR S) (EQUALT (LIST (LIST S2)) (MULTIPLE-VALUE-LIST (CONCATENATED-STREAM-STREAMS S))))))) #\d T)
;; Loading (DEFTEST CONCATENATED-STREAM-STREAMS.ERROR.1 (SIGNALS-ERROR (CONCATENATED-STREAM-STREAMS) PROGRAM-ERROR) T)
;; Loading (DEFTEST CONCATENATED-STREAM-STREAMS.ERROR.2 (SIGNALS-ERROR (CONCATENATED-STREAM-STREAMS (MAKE-CONCATENATED-STREAM) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "make-concatenated-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-concatenated-stream.lsp C1B13C47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.1 (LET ((S (MAKE-CONCATENATED-STREAM))) (READ S NIL :EOF)) :EOF)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.2 (LET ((S (MAKE-CONCATENATED-STREAM))) (NOTNOT-MV (INPUT-STREAM-P S))) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.3 (LET ((S (MAKE-CONCATENATED-STREAM))) (OUTPUT-STREAM-P S)) NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.4 (LET ((S (MAKE-CONCATENATED-STREAM))) (NOTNOT-MV (STREAMP S))) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.5 (LET ((S (MAKE-CONCATENATED-STREAM))) (NOTNOT-MV (TYPEP S (QUOTE STREAM)))) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.6 (LET ((S (MAKE-CONCATENATED-STREAM))) (NOTNOT-MV (TYPEP S (QUOTE CONCATENATED-STREAM)))) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.7 (LET ((S (MAKE-CONCATENATED-STREAM))) (NOTNOT-MV (OPEN-STREAM-P S))) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.8 (LET ((S (MAKE-CONCATENATED-STREAM *STANDARD-INPUT*))) (NOTNOT-MV (STREAM-ELEMENT-TYPE S))) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.9 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (DOLIST (B (QUOTE (1 5 9 13))) (WRITE-BYTE B S))) (WITH-OPEN-FILE (S1 PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (WITH-OPEN-FILE (S2 PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (LOOP REPEAT 8 COLLECT (READ-BYTE S)))))) (1 5 9 13 1 5 9 13))
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.10 (LET ((S (MAKE-CONCATENATED-STREAM))) (READ-BYTE S NIL :EOF)) :EOF)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.11 (LET ((S (MAKE-CONCATENATED-STREAM))) (PEEK-CHAR NIL S NIL :EOF)) :EOF)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.12 (WITH-INPUT-FROM-STRING (S1 "a") (WITH-INPUT-FROM-STRING (S2 "b") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (VALUES (PEEK-CHAR NIL S) (READ-CHAR S) (PEEK-CHAR NIL S) (READ-CHAR S) (PEEK-CHAR NIL S NIL :EOF))))) #\a #\a #\b #\b :EOF)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.13 (WITH-INPUT-FROM-STRING (S1 "  a  ") (WITH-INPUT-FROM-STRING (S2 "  b  ") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (VALUES (PEEK-CHAR T S) (READ-CHAR S) (PEEK-CHAR T S) (READ-CHAR S) (PEEK-CHAR T S NIL :EOF))))) #\a #\a #\b #\b :EOF)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.14 (WITH-INPUT-FROM-STRING (S1 "a") (WITH-INPUT-FROM-STRING (S2 "b") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (VALUES (READ-CHAR S) (UNREAD-CHAR #\a S) (READ-CHAR S) (READ-CHAR S) (UNREAD-CHAR #\b S) (READ-CHAR S) (READ-CHAR S NIL :EOF))))) #\a NIL #\a #\b NIL #\b :EOF)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.15 (LET ((S (MAKE-CONCATENATED-STREAM))) (READ-CHAR-NO-HANG S NIL :EOF)) :EOF)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.16 (WITH-INPUT-FROM-STRING (S1 "a") (WITH-INPUT-FROM-STRING (S2 "b") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (VALUES (READ-CHAR-NO-HANG S) (READ-CHAR-NO-HANG S) (READ-CHAR-NO-HANG S NIL :EOF))))) #\a #\b :EOF)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.17 (WITH-INPUT-FROM-STRING (S1 "a") (WITH-INPUT-FROM-STRING (S2 "b") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (MULTIPLE-VALUE-BIND (STR MNP) (READ-LINE S) (VALUES STR (NOTNOT MNP)))))) "ab" T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.18 (WITH-INPUT-FROM-STRING (S1 "ab") (WITH-INPUT-FROM-STRING (S2 "") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (MULTIPLE-VALUE-BIND (STR MNP) (READ-LINE S) (VALUES STR (NOTNOT MNP)))))) "ab" T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.19 (WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "ab") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (MULTIPLE-VALUE-BIND (STR MNP) (READ-LINE S) (VALUES STR (NOTNOT MNP)))))) "ab" T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.20 (WITH-INPUT-FROM-STRING (S1 "ab") (WITH-INPUT-FROM-STRING (S2 (CONCATENATE (QUOTE STRING) (STRING #\Newline) "def")) (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (READ-LINE S)))) "ab" NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.21 (WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (MULTIPLE-VALUE-BIND (STR MNP) (READ-LINE S NIL :EOF) (VALUES STR (NOTNOT MNP)))))) :EOF T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.22 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (DOLIST (B (QUOTE (1 5 9 13))) (WRITE-BYTE B S))) (WITH-OPEN-FILE (S1 PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (WITH-OPEN-FILE (S2 PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-CONCATENATED-STREAM S1 S2)) (X (VECTOR NIL NIL NIL NIL NIL NIL NIL NIL))) (VALUES (READ-SEQUENCE X S) X))))) 8 #(1 5 9 13 1 5 9 13))
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.23 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (DOLIST (B (QUOTE (1 5 9 13))) (WRITE-BYTE B S))) (WITH-OPEN-FILE (S1 PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (WITH-OPEN-FILE (S2 PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-CONCATENATED-STREAM S1 S2)) (X (VECTOR NIL NIL NIL NIL NIL NIL))) (VALUES (READ-SEQUENCE X S) X))))) 6 #(1 5 9 13 1 5))
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.24 (LET ((PN (PARSE-NAMESTRING (QUOTE "tmp.dat"))) (ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (WITH-OPEN-FILE (S PN :DIRECTION :OUTPUT :ELEMENT-TYPE ELEMENT-TYPE :IF-EXISTS :SUPERSEDE) (DOLIST (B (QUOTE (1 5 9 13))) (WRITE-BYTE B S))) (WITH-OPEN-FILE (S1 PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (WITH-OPEN-FILE (S2 PN :DIRECTION :INPUT :ELEMENT-TYPE ELEMENT-TYPE) (LET ((S (MAKE-CONCATENATED-STREAM S1 S2)) (X (VECTOR NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL))) (VALUES (READ-SEQUENCE X S) X))))) 8 #(1 5 9 13 1 5 9 13 NIL NIL))
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.25 (CLOSE (MAKE-CONCATENATED-STREAM)) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.26 (LET ((S (MAKE-CONCATENATED-STREAM))) (VALUES (PROG1 (CLOSE S) (CLOSE S)) (OPEN-STREAM-P S))) T NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.27 (WITH-INPUT-FROM-STRING (S1 "abc") (LET ((S (MAKE-CONCATENATED-STREAM S1))) (VALUES (NOTNOT (OPEN-STREAM-P S1)) (NOTNOT (OPEN-STREAM-P S)) (CLOSE S) (NOTNOT (OPEN-STREAM-P S1)) (OPEN-STREAM-P S)))) T T T T NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.28 (WITH-INPUT-FROM-STRING (S1 "a") (LET ((S (MAKE-CONCATENATED-STREAM S1))) (NOTNOT-MV (LISTEN S)))) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.28A (LISTEN (MAKE-CONCATENATED-STREAM)) NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.29 (WITH-INPUT-FROM-STRING (S1 "") (LET ((S (MAKE-CONCATENATED-STREAM S1))) (LISTEN S))) NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.30 (WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "a") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (NOTNOT-MV (LISTEN S))))) T)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.31 (WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (LISTEN S)))) NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.32 (CLEAR-INPUT (MAKE-CONCATENATED-STREAM)) NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.33 (WITH-INPUT-FROM-STRING (S1 "abc") (CLEAR-INPUT (MAKE-CONCATENATED-STREAM S1))) NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.ERROR.1 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (AND (STREAMP X) (INPUT-STREAM-P X)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (MAKE-CONCATENATED-STREAM (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X))) T)))) COLLECT X) NIL)
;; Loading (DEFTEST MAKE-CONCATENATED-STREAM.ERROR.2 (LOOP FOR X IN *STREAMS* UNLESS (OR (AND (STREAMP X) (INPUT-STREAM-P X)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (MAKE-CONCATENATED-STREAM (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X))) T)))) COLLECT X) NIL)
;; Loading (LOAD "get-output-stream-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/get-output-stream-string.lsp C1D0D017>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST GET-OUTPUT-STREAM-STRING.1 (LET ((S (MAKE-STRING-OUTPUT-STREAM))) (VALUES (GET-OUTPUT-STREAM-STRING S) (WRITE-STRING "abc" S) (WRITE-STRING "def" S) (GET-OUTPUT-STREAM-STRING S) (GET-OUTPUT-STREAM-STRING S))) "" "abc" "def" "abcdef" "")
;; Loading (DEFTEST GET-OUTPUT-STREAM-STRING.ERROR.1 (SIGNALS-ERROR (GET-OUTPUT-STREAM-STRING) T) T)
;; Loading (DEFTEST GET-OUTPUT-STREAM-STRING.ERROR.2 (SIGNALS-ERROR (GET-OUTPUT-STREAM-STRING (MAKE-STRING-OUTPUT-STREAM) NIL) T) T)
;; Loading (LOAD "make-string-input-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-string-input-stream.lsp C1D45C47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.1 (LET ((S (MAKE-STRING-INPUT-STREAM ""))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (STREAMP S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S))) T T T NIL)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.2 (LET ((S (MAKE-STRING-INPUT-STREAM "abcd"))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (STREAMP S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S))) T T T NIL)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.3 (LET ((S (MAKE-STRING-INPUT-STREAM "abcd" 1))) (VALUES (READ-LINE S))) "bcd")
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.4 (LET ((S (MAKE-STRING-INPUT-STREAM "abcd" 0 2))) (VALUES (READ-LINE S))) "ab")
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.5 (LET ((S (MAKE-STRING-INPUT-STREAM "abcd" 1 NIL))) (VALUES (READ-LINE S))) "bcd")
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.6 (LET ((STR1 (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdef" :FILL-POINTER 4))) (LET ((S (MAKE-STRING-INPUT-STREAM STR1))) (VALUES (READ-LINE S) (READ-CHAR S NIL :EOF)))) "abcd" :EOF)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.7 (LET* ((STR1 (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdef")) (STR2 (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO STR1))) (LET ((S (MAKE-STRING-INPUT-STREAM STR2))) (VALUES (READ-LINE S) (READ-CHAR S NIL :EOF)))) "abcd" :EOF)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.8 (LET* ((STR1 (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdef")) (STR2 (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO STR1 :DISPLACED-INDEX-OFFSET 1))) (LET ((S (MAKE-STRING-INPUT-STREAM STR2))) (VALUES (READ-LINE S) (READ-CHAR S NIL :EOF)))) "bcde" :EOF)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.9 (LET ((STR1 (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdef" :ADJUSTABLE T))) (LET ((S (MAKE-STRING-INPUT-STREAM STR1))) (VALUES (READ-LINE S) (READ-CHAR S NIL :EOF)))) "abcdef" :EOF)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.10 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (LET ((S (MAKE-STRING-INPUT-STREAM (MAKE-ARRAY 0 :ELEMENT-TYPE NIL)))) (READ-CHAR S NIL :EOF)) :EOF)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.ERROR.1 (SIGNALS-ERROR (MAKE-STRING-INPUT-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING-INPUT-STREAM.ERROR.2 (SIGNALS-ERROR (MAKE-STRING-INPUT-STREAM "abc" 1 2 NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "make-string-output-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/make-string-output-stream.lsp C1DEA467>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.1 (LET ((S (MAKE-STRING-OUTPUT-STREAM))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (INPUT-STREAM-P S) (NOTNOT (OUTPUT-STREAM-P S)) (NOTNOT (OPEN-STREAM-P S)))) T T NIL T T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.2 (LET ((S (MAKE-STRING-OUTPUT-STREAM :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (INPUT-STREAM-P S) (NOTNOT (OUTPUT-STREAM-P S)) (NOTNOT (OPEN-STREAM-P S)))) T T NIL T T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.3 (LET ((S (MAKE-STRING-OUTPUT-STREAM :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (INPUT-STREAM-P S) (NOTNOT (OUTPUT-STREAM-P S)) (NOTNOT (OPEN-STREAM-P S)))) T T NIL T T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.4 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S (MAKE-STRING-OUTPUT-STREAM :ELEMENT-TYPE NIL))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (INPUT-STREAM-P S) (NOTNOT (OUTPUT-STREAM-P S)) (NOTNOT (OPEN-STREAM-P S)))) T T NIL T T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.5 (LET ((S (MAKE-STRING-OUTPUT-STREAM :ALLOW-OTHER-KEYS NIL))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (INPUT-STREAM-P S) (NOTNOT (OUTPUT-STREAM-P S)) (NOTNOT (OPEN-STREAM-P S)))) T T NIL T T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.6 (LET ((S (MAKE-STRING-OUTPUT-STREAM :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (INPUT-STREAM-P S) (NOTNOT (OUTPUT-STREAM-P S)) (NOTNOT (OPEN-STREAM-P S)))) T T NIL T T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.7 (LET ((S (MAKE-STRING-OUTPUT-STREAM :FOO (QUOTE BAR) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO2 (QUOTE X)))) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (INPUT-STREAM-P S) (NOTNOT (OUTPUT-STREAM-P S)) (NOTNOT (OPEN-STREAM-P S)))) T T NIL T T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.8 (LET ((S (MAKE-STRING-OUTPUT-STREAM))) (WRITE-STRING "abc" S) (WRITE-STRING "def" S) (GET-OUTPUT-STREAM-STRING S)) "abcdef")
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.9 (LET ((S (MAKE-STRING-OUTPUT-STREAM :ELEMENT-TYPE (QUOTE CHARACTER)))) (WRITE-STRING "abc" S) (WRITE-STRING "def" S) (GET-OUTPUT-STREAM-STRING S)) "abcdef")
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.10 (LET ((S (MAKE-STRING-OUTPUT-STREAM :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (WRITE-STRING "abc" S) (WRITE-STRING "def" S) (GET-OUTPUT-STREAM-STRING S)) "abcdef")
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.11 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S (MAKE-STRING-OUTPUT-STREAM :ELEMENT-TYPE NIL))) (GET-OUTPUT-STREAM-STRING S)) "")
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.12 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S (MAKE-STRING-OUTPUT-STREAM :ELEMENT-TYPE NIL))) (TYPEP #\a (ARRAY-ELEMENT-TYPE (GET-OUTPUT-STREAM-STRING S)))) NIL)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.13 (LET ((S (MAKE-STRING-OUTPUT-STREAM))) (VALUES (CLOSE S) (OPEN-STREAM-P S))) T NIL)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.ERROR.1 (SIGNALS-ERROR (MAKE-STRING-OUTPUT-STREAM NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.ERROR.2 (SIGNALS-ERROR (MAKE-STRING-OUTPUT-STREAM :FOO NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST MAKE-STRING-OUTPUT-STREAM.ERROR.3 (SIGNALS-ERROR (MAKE-STRING-OUTPUT-STREAM :ALLOW-OTHER-KEYS NIL :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (LOAD "with-input-from-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-input-from-string.lsp C1EC7757>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.1 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (READ-CHAR S) (READ-CHAR S) (READ-CHAR S) (READ-CHAR S NIL :EOF))) #\a #\b #\c :EOF)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.2 (WITH-INPUT-FROM-STRING (S "abc")) NIL)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.3 (WITH-INPUT-FROM-STRING (S "abc") (DECLARE (OPTIMIZE SPEED))) NIL)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.3A (WITH-INPUT-FROM-STRING (S "abc") (DECLARE (OPTIMIZE SPEED)) (DECLARE (OPTIMIZE SPACE))) NIL)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.4 (WITH-INPUT-FROM-STRING (S "abc") (DECLARE (OPTIMIZE SAFETY)) (READ-CHAR S) (READ-CHAR S)) #\b)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.5 (LET ((I NIL)) (VALUES (WITH-INPUT-FROM-STRING (S "abc" :INDEX I)) I)) NIL 0)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.6 (LET ((I (LIST NIL))) (VALUES (WITH-INPUT-FROM-STRING (S "abc" :INDEX (CAR I))) I)) NIL (0))
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.7 (LET ((I NIL)) (VALUES (WITH-INPUT-FROM-STRING (S "abc" :INDEX I) (LIST I (READ-CHAR S) I (READ-CHAR S) I)) I)) (NIL #\a NIL #\b NIL) 2)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.9 (WITH-INPUT-FROM-STRING (S "abc") (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (NOTNOT (OPEN-STREAM-P S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S))) T T T T NIL)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.10 :NOTES (:NIL-VECTORS-ARE-STRINGS) (WITH-INPUT-FROM-STRING (S (MAKE-ARRAY 0 :ELEMENT-TYPE NIL)) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (NOTNOT (OPEN-STREAM-P S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S))) T T T T NIL)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.11 (WITH-INPUT-FROM-STRING (S (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abc")) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (NOTNOT (OPEN-STREAM-P S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S) (READ-LINE S))) T T T T NIL "abc")
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.12 (WITH-INPUT-FROM-STRING (S (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abc")) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (NOTNOT (OPEN-STREAM-P S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S) (READ-LINE S))) T T T T NIL "abc")
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.13 (WITH-INPUT-FROM-STRING (S "abcdef" :START 2) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (NOTNOT (OPEN-STREAM-P S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S) (READ-LINE S))) T T T T NIL "cdef")
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.14 (WITH-INPUT-FROM-STRING (S "abcdef" :END 3) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (NOTNOT (OPEN-STREAM-P S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S) (READ-LINE S))) T T T T NIL "abc")
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.15 (WITH-INPUT-FROM-STRING (S "abcdef" :START 1 :END 5) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (NOTNOT (OPEN-STREAM-P S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S) (READ-LINE S))) T T T T NIL "bcde")
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.16 (WITH-INPUT-FROM-STRING (S "abcdef" :START 1 :END NIL) (VALUES (NOTNOT (TYPEP S (QUOTE STREAM))) (NOTNOT (TYPEP S (QUOTE STRING-STREAM))) (NOTNOT (OPEN-STREAM-P S)) (NOTNOT (INPUT-STREAM-P S)) (OUTPUT-STREAM-P S) (READ-LINE S))) T T T T NIL "bcdef")
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.17 (LET ((I 2)) (VALUES (WITH-INPUT-FROM-STRING (S "abcdef" :INDEX I :START I) (READ-CHAR S)) I)) #\c 3)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.18 (BLOCK DONE (TAGBODY (WITH-INPUT-FROM-STRING (S "abc") (GO 1) 1 (RETURN-FROM DONE :BAD)) 1 (RETURN-FROM DONE :GOOD))) :GOOD)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.19 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-INPUT-FROM-STRING (S (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.20 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-INPUT-FROM-STRING (S "abc" :START (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.21 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-INPUT-FROM-STRING (S "abc" :END (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.22 (LET ((I NIL)) (VALUES (BLOCK DONE (WITH-INPUT-FROM-STRING (S "abcde" :INDEX I) (RETURN-FROM DONE (READ-CHAR S)))) I)) #\a NIL)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.23 (MACROLET ((%M (Z) Z)) (WITH-INPUT-FROM-STRING (S (EXPAND-IN-CURRENT-ENV (%M "123"))) (READ-CHAR S))) #\1)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.24 (MACROLET ((%M (Z) Z)) (WITH-INPUT-FROM-STRING (S "123" :START (EXPAND-IN-CURRENT-ENV (%M 1))) (READ-CHAR S))) #\2)
;; Loading (DEFTEST WITH-INPUT-FROM-STRING.25 (MACROLET ((%M (Z) Z)) (WITH-INPUT-FROM-STRING (S "123" :START 0 :END (EXPAND-IN-CURRENT-ENV (%M 0))) (READ-CHAR S NIL NIL))) NIL)
;; Loading (LOAD "with-output-to-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-output-to-string.lsp 81A675E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.1 (WITH-OUTPUT-TO-STRING (S)) "")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.2 (WITH-OUTPUT-TO-STRING (S) (WRITE-CHAR #\3 S)) "3")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.3 (WITH-OUTPUT-TO-STRING (S (MAKE-ARRAY 10 :FILL-POINTER 0 :ELEMENT-TYPE (QUOTE CHARACTER)))) NIL)
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.4 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (LET ((STR (MAKE-ARRAY 10 :FILL-POINTER 0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (VALUES (WITH-OUTPUT-TO-STRING (S STR :ELEMENT-TYPE NIL) (WRITE-STRING "abcdef" S)) STR)) "abcdef" "abcdef")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.5 (WITH-OUTPUT-TO-STRING (S (MAKE-ARRAY 10 :FILL-POINTER 0 :ELEMENT-TYPE (QUOTE CHARACTER))) (VALUES)))
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.6 (WITH-OUTPUT-TO-STRING (S (MAKE-ARRAY 10 :FILL-POINTER 0 :ELEMENT-TYPE (QUOTE CHARACTER))) (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) A B C D)
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.7 (WITH-OUTPUT-TO-STRING (S NIL :ELEMENT-TYPE (QUOTE CHARACTER)) (WRITE-CHAR #\& S)) "&")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.8 (LET ((STR (WITH-OUTPUT-TO-STRING (S NIL :ELEMENT-TYPE (QUOTE BASE-CHAR)) (WRITE-CHAR #\8 S)))) (ASSERT (TYPEP STR (QUOTE SIMPLE-BASE-STRING))) STR) "8")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.9 :NOTES (:ALLOW-NIL-ARRAYS :NIL-VECTORS-ARE-STRINGS) (WITH-OUTPUT-TO-STRING (S NIL :ELEMENT-TYPE NIL)) "")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.10 (LET* ((S1 (MAKE-ARRAY 20 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\.)) (S2 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET 5 :FILL-POINTER 0))) (VALUES (WITH-OUTPUT-TO-STRING (S S2) (WRITE-STRING "0123456789" S)) S1 S2)) "0123456789" ".....0123456789....." "0123456789")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.11 (WITH-OUTPUT-TO-STRING (S) (DECLARE (OPTIMIZE SAFETY))) "")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.12 (WITH-OUTPUT-TO-STRING (S) (DECLARE (OPTIMIZE SAFETY)) (DECLARE (OPTIMIZE (SPEED 0)))) "")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.13 (WITH-OUTPUT-TO-STRING (S) (WRITE-CHAR #\0 S) (WRITE-CHAR #\4 S) (WRITE-CHAR #\9 S)) "049")
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.14 (LET* ((STR1 (MAKE-ARRAY (QUOTE (256)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 0)) (STR2 (WITH-OUTPUT-TO-STRING (S NIL :ELEMENT-TYPE (QUOTE BASE-CHAR)) (LOOP FOR I BELOW 256 FOR C = (CODE-CHAR I) WHEN (TYPEP C (QUOTE BASE-CHAR)) DO (PROGN (WRITE-CHAR C S) (VECTOR-PUSH C STR1)))))) (IF (STRING= STR1 STR2) :GOOD (LIST STR1 STR2))) :GOOD)
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.15 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD)) (WITH-OUTPUT-TO-STRING (S (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (DEFTEST WITH-OUTPUT-TO-STRING.16 (BLOCK DONE (LET ((X :BAD)) (DECLARE (SPECIAL X)) (LET ((X :GOOD) (STR (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 0))) (WITH-OUTPUT-TO-STRING (S STR :ELEMENT-TYPE (RETURN-FROM DONE X)) (DECLARE (SPECIAL X)))))) :GOOD)
;; Loading (LOAD "stream-error-stream.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/stream-error-stream.lsp 81B370D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST STREAM-ERROR-STREAM.1 (WITH-INPUT-FROM-STRING (S "") (HANDLER-CASE (READ-CHAR S) (STREAM-ERROR (C) (EQLT (STREAM-ERROR-STREAM C) S)))) T)
;; Loading (DEFTEST STREAM-ERROR-STREAM.ERROR.1 (SIGNALS-ERROR (STREAM-ERROR-STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST STREAM-ERROR-STREAM.ERROR.2 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "") (HANDLER-CASE (READ-CHAR S) (STREAM-ERROR (C) (STREAM-ERROR-STREAM C NIL)))) PROGRAM-ERROR) T)
;; Loading (LOAD "load-printer.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-printer.lsp 81B72E07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/printer-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (COMPILE-AND-LOAD "random-aux.lsp")).
;; Compiling form (DEFMACRO DEF-PRINT-TEST (NAME FORM RESULT &REST BINDINGS) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (IF (EQUALPT (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (LET (SYSTEM.INTERNALS::BQ-COMMA BINDINGS) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PRIN1 (SYSTEM.INTERNALS::BQ-COMMA FORM)))))) (SYSTEM.INTERNALS::BQ-COMMA RESULT)) T (SYSTEM.INTERNALS::BQ-COMMA RESULT)) T))).
;; Compiling form (DEFMACRO DEF-PPRINT-TEST (NAME FORM EXPECTED-VALUE &KEY (MARGIN 100) (MISER NIL) (CIRCLE NIL) (LEN NIL) (PRETTY T) (ESCAPE NIL) (READABLY NIL) (PACKAGE (FIND-PACKAGE "CL-TEST"))) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* (SYSTEM.INTERNALS::BQ-COMMA PRETTY)) (*PRINT-ESCAPE* (SYSTEM.INTERNALS::BQ-COMMA ESCAPE)) (*PRINT-READABLY* (SYSTEM.INTERNALS::BQ-COMMA READABLY)) (*PRINT-RIGHT-MARGIN* (SYSTEM.INTERNALS::BQ-COMMA MARGIN)) (*PACKAGE* (SYSTEM.INTERNALS::BQ-COMMA PACKAGE)) (*PRINT-LENGTH* (SYSTEM.INTERNALS::BQ-COMMA LEN)) (*PRINT-MISER-WIDTH* (SYSTEM.INTERNALS::BQ-COMMA MISER)) (*PRINT-CIRCLE* (SYSTEM.INTERNALS::BQ-COMMA CIRCLE))) (SYSTEM.INTERNALS::BQ-COMMA FORM))) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-VALUE)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMACRO DEF-PPBLOCK-TEST (NAME FORM EXPECTED-VALUE &REST KEY-ARGS) (SYSTEM.INTERNALS::BACKQUOTE (DEF-PPRINT-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (SYSTEM.INTERNALS::BQ-COMMA FORM))) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-VALUE) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN KEY-ARGS)))).
;; Compiling form (DEFVAR *RANDOM-READ-CHECK-DEBUG* NIL "When set to true, RANDOMLY-CHECK-READABILITY will dump out parameter
   settings before trying a test.  This is intended for cases where the
   error that occurs is fatal.").
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN RANDOMLY-CHECK-READABILITY (OBJ &KEY (CAN-FAIL NIL) (TEST (FUNCTION EQUAL)) (READABLE T) (CIRCLE NIL CIRCLE-P) (ESCAPE NIL ESCAPE-P) (GENSYM NIL GENSYM-P) (DEBUG *RANDOM-READ-CHECK-DEBUG*)) (DECLARE (TYPE FUNCTION TEST)) (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-ARRAY* (COIN)) (*PRINT-BASE* (+ 2 (RANDOM 34))) (*PRINT-RADIX* (COIN)) (*PRINT-CASE* (RANDOM-FROM-SEQ #(:UPCASE :DOWNCASE :CAPITALIZE))) (*PRINT-CIRCLE* (IF CIRCLE-P CIRCLE (COIN))) (*PRINT-ESCAPE* (IF ESCAPE-P ESCAPE (COIN))) (*PRINT-GENSYM* (IF GENSYM-P GENSYM (COIN))) (*PRINT-LEVEL* (RANDOM 50)) (*PRINT-LENGTH* (IF READABLE (RANDOM 50) NIL)) (*PRINT-LINES* (IF READABLE (RANDOM 50) NIL)) (*PRINT-MISER-WIDTH* (AND (COIN) (RANDOM 100))) (*PRINT-PRETTY* (COIN)) (*PRINT-RIGHT-MARGIN* (AND (COIN) (RANDOM 100))) (*PRINT-READABLY* READABLE) (*READ-DEFAULT-FLOAT-FORMAT* (RCASE (1 (QUOTE SHORT-FLOAT)) (1 (QUOTE SINGLE-FLOAT)) (1 (QUOTE DOUBLE-FLOAT)) (1 (QUOTE LONG-FLOAT)) (1 *READ-DEFAULT-FLOAT-FORMAT*))) (*READTABLE* (COPY-READTABLE)) (READCASE (RANDOM-FROM-SEQ #(:UPCASE :DOWNCASE :PRESERVE :INVERT)))) (FLET ((%PARAMS NIL (LIST (LIST (QUOTE *PRINT-READABLY*) *PRINT-READABLY*) (LIST (QUOTE *PRINT-ARRAY*) *PRINT-ARRAY*) (LIST (QUOTE *PRINT-BASE*) *PRINT-BASE*) (LIST (QUOTE *PRINT-RADIX*) *PRINT-RADIX*) (LIST (QUOTE *PRINT-CASE*) *PRINT-CASE*) (LIST (QUOTE *PRINT-CIRCLE*) *PRINT-CIRCLE*) (LIST (QUOTE *PRINT-ESCAPE*) *PRINT-ESCAPE*) (LIST (QUOTE *PRINT-GENSYM*) *PRINT-GENSYM*) (LIST (QUOTE *PRINT-LEVEL*) *PRINT-LEVEL*) (LIST (QUOTE *PRINT-LENGTH*) *PRINT-LENGTH*) (LIST (QUOTE *PRINT-LINES*) *PRINT-LINES*) (LIST (QUOTE *PRINT-MISER-WIDTH*) *PRINT-MISER-WIDTH*) (LIST (QUOTE *PRINT-PRETTY*) *PRINT-PRETTY*) (LIST (QUOTE *PRINT-RIGHT-MARGIN*) *PRINT-RIGHT-MARGIN*) (LIST (QUOTE *READ-DEFAULT-FLOAT-FORMAT*) *READ-DEFAULT-FLOAT-FORMAT*) (LIST (QUOTE READTABLE-CASE) READCASE)))) (WHEN DEBUG (LET ((PARAMS (%PARAMS))) (WITH-STANDARD-IO-SYNTAX (FORMAT *DEBUG-IO* "~%~A~%" PARAMS))) (FINISH-OUTPUT *DEBUG-IO*)) (SETF (READTABLE-CASE *READTABLE*) READCASE) (LET* ((STR (HANDLER-CASE (WITH-OUTPUT-TO-STRING (S) (WRITE OBJ :STREAM S)) (PRINT-NOT-READABLE NIL (IF CAN-FAIL (RETURN-FROM RANDOMLY-CHECK-READABILITY NIL) ":print-not-readable-error")))) (OBJ2 (LET ((*READ-BASE* *PRINT-BASE*)) (HANDLER-CASE (LET ((*READTABLE* (IF *PRINT-READABLY* (COPY-READTABLE NIL) *READTABLE*))) (READ-FROM-STRING STR)) (READER-ERROR NIL :READER-ERROR) (END-OF-FILE NIL :END-OF-FILE) (STREAM-ERROR NIL :STREAM-ERROR) (FILE-ERROR NIL :FILE-ERROR))))) (UNLESS (FUNCALL TEST OBJ OBJ2) (LIST (LIST* OBJ STR OBJ2 (%PARAMS))))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN PARSE-ESCAPED-STRING (STRING) "Parse a string into a list of either characters (representing
   themselves unescaped) or lists (<char> :escape) (representing
   escaped characters.)" (ASSERT (STRINGP STRING) NIL "Not a string: ~A" STRING) (LET ((RESULT NIL) (LEN (LENGTH STRING)) (INDEX 0)) (PROG NIL NORMAL (WHEN (= INDEX LEN) (RETURN)) (LET ((C (ELT STRING INDEX))) (COND ((EQL C #\\) (ASSERT (< (INCF INDEX) LEN) NIL "End of string after \\") (PUSH (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA (ELT STRING INDEX)) :ESCAPED)) RESULT) (INCF INDEX) (GO NORMAL)) ((EQL C #\|) (INCF INDEX) (GO MULTIPLE-ESCAPED)) (T (PUSH C RESULT) (INCF INDEX) (GO NORMAL)))) MULTIPLE-ESCAPED (ASSERT (< INDEX LEN) NIL "End of string inside |") (LET ((C (ELT STRING INDEX))) (COND ((EQ C #\|) (INCF INDEX) (GO NORMAL)) (T (PUSH (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA C) :ESCAPED)) RESULT) (INCF INDEX) (GO MULTIPLE-ESCAPED))))) (NREVERSE RESULT))).
;; Compiling form (DEFUN ESCAPED-EQUAL (LIST1 LIST2) "Determine that everything escaped in list1 is also escaped
   in list2, and that the characters are also the same." (AND (= (LENGTH LIST1) (LENGTH LIST2)) (LOOP FOR E1 IN LIST1 FOR E2 IN LIST2 FOR IS-ESCAPED1 = (AND (CONSP E1) (EQ (CADR E1) :ESCAPED)) FOR IS-ESCAPED2 = (AND (CONSP E2) (EQ (CADR E2) :ESCAPED)) FOR C1 = (IF IS-ESCAPED1 (CAR E1) E1) FOR C2 = (IF IS-ESCAPED2 (CAR E2) E2) ALWAYS (AND (IF IS-ESCAPED1 IS-ESCAPED2 T) (CHAR= C1 C2))))).
;; Compiling form (DEFUN SIMILAR-UNINTERNED-SYMBOLS (S1 S2) (AND (SYMBOLP S1) (SYMBOLP S2) (NULL (SYMBOL-PACKAGE S1)) (NULL (SYMBOL-PACKAGE S2)) (STRING= (SYMBOL-NAME S1) (SYMBOL-NAME S2)))).
;; Compiling form (DEFUN MAKE-RANDOM-CONS-TREE (SIZE) (IF (<= SIZE 1) (RCASE (5 NIL) (1 (RANDOM 1000)) (1 (RANDOM 1000.0)) (2 (RANDOM-FROM-SEQ #(A B C D E F G 1 2 .)))) (LET ((S1 (1+ (RANDOM (1- SIZE))))) (CONS (MAKE-RANDOM-CONS-TREE S1) (MAKE-RANDOM-CONS-TREE (- SIZE S1)))))).
;; Compiling form (DEFUN MAKE-RANDOM-VECTOR (SIZE) (IF (> SIZE 1) (LET* ((NELEMS (MIN (1- SIZE) (1+ (RANDOM (MAX 2 (FLOOR SIZE 4)))))) (SIZES (MAPCAR (FUNCTION 1+) (RANDOM-PARTITION* (- SIZE NELEMS 1) NELEMS)))) (MAKE-ARRAY NELEMS :INITIAL-CONTENTS (MAPCAR (FUNCTION MAKE-RANDOM-VECTOR) SIZES))) (RCASE (1 (RANDOM-FROM-SEQ #(A B C D E F G))) (1 (- (RANDOM 2001) 1000)) (1 (RANDOM 1000.0))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN FUNCALL-WITH-PRINT-BINDINGS (FUN &KEY ((:ARRAY *PRINT-ARRAY*) *PRINT-ARRAY*) ((:BASE *PRINT-BASE*) *PRINT-BASE*) ((:CASE *PRINT-CASE*) *PRINT-CASE*) ((:CIRCLE *PRINT-CIRCLE*) *PRINT-CIRCLE*) ((:ESCAPE *PRINT-ESCAPE*) *PRINT-ESCAPE*) ((:GENSYM *PRINT-GENSYM*) *PRINT-GENSYM*) ((:LENGTH *PRINT-LENGTH*) *PRINT-LENGTH*) ((:LEVEL *PRINT-LEVEL*) *PRINT-LEVEL*) ((:LINES *PRINT-LINES*) *PRINT-LINES*) ((:MISER-WIDTH *PRINT-MISER-WIDTH*) *PRINT-MISER-WIDTH*) ((:PPRINT-DISPATCH *PRINT-PPRINT-DISPATCH*) *PRINT-PPRINT-DISPATCH*) ((:PRETTY *PRINT-PRETTY*) *PRINT-PRETTY*) ((:RADIX *PRINT-RADIX*) *PRINT-RADIX*) ((:READABLY *PRINT-READABLY*) *PRINT-READABLY*) ((:RIGHT-MARGIN *PRINT-RIGHT-MARGIN*) *PRINT-RIGHT-MARGIN*) ((:STREAM *STANDARD-OUTPUT*) *STANDARD-OUTPUT*)) (FUNCALL FUN)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN OUTPUT-TEST (OBJ &KEY (FUN (FUNCTION WRITE)) ((:ARRAY *PRINT-ARRAY*) *PRINT-ARRAY*) ((:BASE *PRINT-BASE*) *PRINT-BASE*) ((:CASE *PRINT-CASE*) *PRINT-CASE*) ((:CIRCLE *PRINT-CIRCLE*) *PRINT-CIRCLE*) ((:ESCAPE *PRINT-ESCAPE*) *PRINT-ESCAPE*) ((:GENSYM *PRINT-GENSYM*) *PRINT-GENSYM*) ((:LENGTH *PRINT-LENGTH*) *PRINT-LENGTH*) ((:LEVEL *PRINT-LEVEL*) *PRINT-LEVEL*) ((:LINES *PRINT-LINES*) *PRINT-LINES*) ((:MISER-WIDTH *PRINT-MISER-WIDTH*) *PRINT-MISER-WIDTH*) ((:PPRINT-DISPATCH *PRINT-PPRINT-DISPATCH*) *PRINT-PPRINT-DISPATCH*) ((:PRETTY *PRINT-PRETTY*) *PRINT-PRETTY*) ((:RADIX *PRINT-RADIX*) *PRINT-RADIX*) ((:READABLY *PRINT-READABLY*) *PRINT-READABLY*) ((:RIGHT-MARGIN *PRINT-RIGHT-MARGIN*) *PRINT-RIGHT-MARGIN*) ((:STREAM *STANDARD-OUTPUT*) *STANDARD-OUTPUT*)) (LET ((RESULTS (MULTIPLE-VALUE-LIST (FUNCALL FUN OBJ)))) (ASSERT (= (LENGTH RESULTS) 1)) (ASSERT (EQL (CAR RESULTS) OBJ)) OBJ)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MAKE-RANDOM-KEY-PARAM (NAME) (RCASE (1 NIL) (1 (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA NAME) NIL))) (1 (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA NAME) T))))).
;; Compiling form (DEFUN MAKE-RANDOM-KEY-INTEGER-OR-NIL-PARAM (NAME BOUND) (RCASE (1 NIL) (1 (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA NAME) NIL))) (1 (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA NAME) (SYSTEM.INTERNALS::BQ-COMMA (RANDOM BOUND))))))).
;; Compiling form (DEFUN MAKE-RANDOM-WRITE-ARGS NIL (LET* ((ARG-LISTS (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (MAPCAR (FUNCTION MAKE-RANDOM-KEY-PARAM) (QUOTE (:ARRAY :CIRCLE :ESCAPE :GENSYM :PRETTY :RADIX :READABLY)))) (SYSTEM.INTERNALS::BQ-COMMA (RCASE (1 NIL) (1 (SYSTEM.INTERNALS::BACKQUOTE (:BASE (SYSTEM.INTERNALS::BQ-COMMA (+ 2 (RANDOM 35)))))))) (SYSTEM.INTERNALS::BQ-COMMA (AND (COIN) (SYSTEM.INTERNALS::BACKQUOTE (:CASE (SYSTEM.INTERNALS::BQ-COMMA (RANDOM-FROM-SEQ #(:UPCASE :DOWNCASE :CAPITALIZE))))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (MAPCAR (FUNCTION MAKE-RANDOM-KEY-INTEGER-OR-NIL-PARAM) (QUOTE (:LENGTH :LEVEL :LINES :MISER-WIDTH :RIGHT-MARGIN)) (QUOTE (100 20 50 200 200)))))))) (REDUCE (FUNCTION APPEND) (RANDOM-PERMUTE ARG-LISTS) :FROM-END T))).
;; Compiling form (DEFUN FILTER-UNREADABLE-FORMS (STRING) "Find #<...> strings and replace with #<>." (LET ((LEN (LENGTH STRING)) (POS 0)) (LOOP WHILE (< POS LEN) DO (LET ((NEXT (SEARCH "#<" STRING :START2 POS))) (UNLESS NEXT (RETURN STRING)) (LET ((END (POSITION #\> STRING :START NEXT))) (UNLESS END (RETURN STRING)) (SETQ STRING (CONCATENATE (QUOTE STRING) (SUBSEQ STRING 0 NEXT) "#<>" (SUBSEQ STRING (1+ END))) POS (+ NEXT 3) LEN (+ LEN (- NEXT END) 3))))))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
;; Compiling form (DEFMACRO DEF-RANDOM-WRITE-TEST-FUN (NAME WRITE-ARGS TEST-FN &KEY (PREFIX "") (SUFFIX "")) (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA NAME) (N &KEY (SIZE 10)) (LOOP FOR ARGS = (MAKE-RANDOM-WRITE-ARGS) FOR PACKAGE = (FIND-PACKAGE (RANDOM-FROM-SEQ #("CL-TEST" "CL-USER" "KEYWORD"))) FOR OBJ = (LET ((*RANDOM-READABLE* T)) (DECLARE (SPECIAL *RANDOM-READABLE*)) (RANDOM-THING (RANDOM SIZE))) FOR S1 = (LET ((*PACKAGE* PACKAGE)) (WITH-OUTPUT-TO-STRING (S) (APPLY (FUNCTION WRITE) OBJ :STREAM S (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN WRITE-ARGS) ARGS))) FOR S2 = (LET ((*PACKAGE* PACKAGE)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (APPLY (FUNCTION OUTPUT-TEST) OBJ :FUN (SYSTEM.INTERNALS::BQ-COMMA TEST-FN) ARGS))) REPEAT N UNLESS (STRING= (FILTER-UNREADABLE-FORMS (CONCATENATE (QUOTE STRING) (SYSTEM.INTERNALS::BQ-COMMA PREFIX) S1 (SYSTEM.INTERNALS::BQ-COMMA SUFFIX))) (FILTER-UNREADABLE-FORMS S2)) COLLECT (LIST OBJ S1 S2 ARGS))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEF-RANDOM-WRITE-TEST-FUN RANDOM-WRITE-TEST NIL (FUNCTION WRITE)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEF-RANDOM-WRITE-TEST-FUN RANDOM-PRIN1-TEST (:ESCAPE T) (FUNCTION PRIN1)).
;; Compiling form (DEF-RANDOM-WRITE-TEST-FUN RANDOM-PRINC-TEST (:ESCAPE NIL :READABLY NIL) (FUNCTION PRINC)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEF-RANDOM-WRITE-TEST-FUN RANDOM-PRINT-TEST (:ESCAPE T) (FUNCTION PRINT) :PREFIX (STRING #\Newline) :SUFFIX " ").
;; Compiling form (DEF-RANDOM-WRITE-TEST-FUN RANDOM-PPRINT-TEST (:ESCAPE T :PRETTY T) (FUNCTION (LAMBDA (OBJ) (ASSERT (NULL (MULTIPLE-VALUE-LIST (PPRINT OBJ)))) OBJ)) :PREFIX (STRING #\Newline)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMACRO DEF-RANDOM-WRITE-TO-STRING-TEST-FUN (NAME WRITE-ARGS TEST-FN &KEY (PREFIX "") (SUFFIX "")) (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA NAME) (N) (LOOP FOR ARGS = (MAKE-RANDOM-WRITE-ARGS) FOR PACKAGE = (FIND-PACKAGE (RANDOM-FROM-SEQ #("CL-TEST" "CL-USER" "KEYWORD"))) FOR OBJ = (LET ((*RANDOM-READABLE* T)) (DECLARE (SPECIAL *RANDOM-READABLE*)) (RANDOM-THING (RANDOM 10))) FOR S1 = (LET ((*PACKAGE* PACKAGE)) (WITH-OUTPUT-TO-STRING (S) (APPLY (FUNCTION WRITE) OBJ :STREAM S (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN WRITE-ARGS) ARGS))) FOR S2 = (LET ((*PACKAGE* PACKAGE)) (APPLY (SYSTEM.INTERNALS::BQ-COMMA TEST-FN) OBJ ARGS)) REPEAT N UNLESS (STRING= (FILTER-UNREADABLE-FORMS (CONCATENATE (QUOTE STRING) (SYSTEM.INTERNALS::BQ-COMMA PREFIX) S1 (SYSTEM.INTERNALS::BQ-COMMA SUFFIX))) (FILTER-UNREADABLE-FORMS S2)) COLLECT (LIST OBJ S1 S2))))).
;; Compiling form (DEF-RANDOM-WRITE-TO-STRING-TEST-FUN RANDOM-WRITE-TO-STRING-TEST NIL (FUNCTION WRITE-TO-STRING)).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEF-RANDOM-WRITE-TO-STRING-TEST-FUN RANDOM-PRIN1-TO-STRING-TEST (:ESCAPE T) (FUNCTION (LAMBDA (OBJ &REST ARGS) (APPLY (FUNCTION FUNCALL-WITH-PRINT-BINDINGS) (FUNCTION (LAMBDA NIL (PRIN1-TO-STRING OBJ))) ARGS)))).
;; Compiling form (DEF-RANDOM-WRITE-TO-STRING-TEST-FUN RANDOM-PRINC-TO-STRING-TEST (:ESCAPE NIL :READABLY NIL) (FUNCTION (LAMBDA (OBJ &REST ARGS) (APPLY (FUNCTION FUNCALL-WITH-PRINT-BINDINGS) (FUNCTION (LAMBDA NIL (PRINC-TO-STRING OBJ))) ARGS)))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN DECODE-FIXED-DECIMAL-STRING (S) "Return a rational equal to the number represented by a decimal floating
   (without exponent).  Trim off leading/trailing spaces." (SETQ S (STRING-TRIM " " S)) (ASSERT (> (LENGTH S) 0)) (LET (NEG) (WHEN (EQL (ELT S 0) #\-) (SETQ S (SUBSEQ S 1)) (SETQ NEG T)) (LET ((DOT-POS (POSITION #\. S))) (ASSERT DOT-POS) (LET ((PREFIX (SUBSEQ S 0 DOT-POS)) (SUFFIX (SUBSEQ S (1+ DOT-POS)))) (ASSERT (EVERY (FUNCTION DIGIT-CHAR-P) PREFIX)) (ASSERT (EVERY (FUNCTION DIGIT-CHAR-P) SUFFIX)) (LET* ((PREFIX-LEN (LENGTH PREFIX)) (PREFIX-INTEGER (IF (EQL PREFIX-LEN 0) 0 (PARSE-INTEGER PREFIX))) (SUFFIX-LEN (LENGTH SUFFIX)) (SUFFIX-INTEGER (IF (EQL SUFFIX-LEN 0) 0 (PARSE-INTEGER SUFFIX))) (MAGNITUDE (+ PREFIX-INTEGER (* SUFFIX-INTEGER (EXPT 1/10 SUFFIX-LEN))))) (IF NEG (- MAGNITUDE) MAGNITUDE)))))).
Style-Warning: #<Simple-Style-Warning Possible optimizer infinite loop.>
;; Compiling form (DEFMACRO DEF-FORMAT-TEST (NAME STRING ARGS EXPECTED-OUTPUT &OPTIONAL (NUM-LEFT 0)) (ASSERT (SYMBOLP NAME)) (LET* ((S (SYMBOL-NAME NAME)) (EXPECTED-PREFIX (STRING (QUOTE FORMAT.))) (EXPECTED-PREFIX-LENGTH (LENGTH EXPECTED-PREFIX))) (ASSERT (>= (LENGTH S) EXPECTED-PREFIX-LENGTH)) (ASSERT (STRING-EQUAL (SUBSEQ S 0 EXPECTED-PREFIX-LENGTH) EXPECTED-PREFIX)) (LET* ((FORMATTER-TEST-NAME-STRING (CONCATENATE (QUOTE STRING) (STRING (QUOTE FORMATTER.)) (SUBSEQ S EXPECTED-PREFIX-LENGTH))) (FORMATTER-TEST-NAME (INTERN FORMATTER-TEST-NAME-STRING (SYMBOL-PACKAGE NAME))) (FORMATTER-FORM (IF (STRINGP STRING) (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA STRING))) (LIST (QUOTE FORMATTER) (EVAL STRING))))) (SYSTEM.INTERNALS::BACKQUOTE (PROGN (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (SYMBOL-PACKAGE (QUOTE ABC)))) (FORMAT NIL (SYSTEM.INTERNALS::BQ-COMMA STRING) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)))) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-OUTPUT)) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA FORMATTER-TEST-NAME) (LET ((FN (SYSTEM.INTERNALS::BQ-COMMA FORMATTER-FORM)) (ARGS (LIST (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS)))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (SYMBOL-PACKAGE (QUOTE ABC)))) (WITH-OUTPUT-TO-STRING (STREAM) (LET ((TAIL (APPLY FN STREAM ARGS))) (ASSERT (= (LENGTH TAIL) (SYSTEM.INTERNALS::BQ-COMMA NUM-LEFT)) (TAIL) "Tail is ~A, length should be ~A" TAIL (SYSTEM.INTERNALS::BQ-COMMA NUM-LEFT))))))) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-OUTPUT))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFMACRO FORMATTER-CALL-TO-STRING (FN &BODY ARGS) (LET ((STREAM (GENSYM "S"))) (SYSTEM.INTERNALS::BACKQUOTE (WITH-OUTPUT-TO-STRING ((SYSTEM.INTERNALS::BQ-COMMA STREAM)) (ASSERT (EQUAL (FUNCALL (SYSTEM.INTERNALS::BQ-COMMA FN) (SYSTEM.INTERNALS::BQ-COMMA STREAM) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS) (QUOTE A)) (QUOTE (A)))))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/printer-aux.llf C1992C07>
;; Loading (LOAD "copy-pprint-dispatch.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/copy-pprint-dispatch.lsp C1DA6277>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.1 (WITH-STANDARD-IO-SYNTAX (LET ((OBJ (QUOTE (FOO BAR))) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (*PRINT-READABLY* NIL) (*PRINT-PRETTY* T)) (VALUES (PRIN1-TO-STRING OBJ) (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH))) (SET-PPRINT-DISPATCH (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA OBJ))) (FUNCTION (LAMBDA (S OBJ2) (LET ((*PRINT-PRETTY* NIL)) (FORMAT S "#.'~S" OBJ2))))) (PRIN1-TO-STRING OBJ)) (PRIN1-TO-STRING OBJ)))) "(FOO BAR)" "#.'(FOO BAR)" "(FOO BAR)")
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.2 (WITH-STANDARD-IO-SYNTAX (LET ((OBJ (QUOTE (FOO BAR))) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (*PRINT-READABLY* NIL) (*PRINT-PRETTY* T)) (VALUES (PRIN1-TO-STRING OBJ) (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH *PRINT-PPRINT-DISPATCH*))) (SET-PPRINT-DISPATCH (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA OBJ))) (FUNCTION (LAMBDA (S OBJ2) (LET ((*PRINT-PRETTY* NIL)) (FORMAT S "#.'~S" OBJ2))))) (PRIN1-TO-STRING OBJ)) (PRIN1-TO-STRING OBJ)))) "(FOO BAR)" "#.'(FOO BAR)" "(FOO BAR)")
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.3 (WITH-STANDARD-IO-SYNTAX (LET ((OBJ (QUOTE (FOO BAR))) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (*PRINT-READABLY* NIL) (*PRINT-PRETTY* T)) (VALUES (PRIN1-TO-STRING OBJ) (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL))) (SET-PPRINT-DISPATCH (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA OBJ))) (FUNCTION (LAMBDA (S OBJ2) (LET ((*PRINT-PRETTY* NIL)) (FORMAT S "#.'~S" OBJ2))))) (PRIN1-TO-STRING OBJ)) (PRIN1-TO-STRING OBJ)))) "(FOO BAR)" "#.'(FOO BAR)" "(FOO BAR)")
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.4 (WITH-STANDARD-IO-SYNTAX (LET ((OBJ (QUOTE (FOO BAR))) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (*PRINT-READABLY* NIL) (*PRINT-PRETTY* T)) (VALUES (PRIN1-TO-STRING OBJ) (LET ((TABLE (COPY-PPRINT-DISPATCH))) (SET-PPRINT-DISPATCH (SYSTEM.INTERNALS::BACKQUOTE (EQL (SYSTEM.INTERNALS::BQ-COMMA OBJ))) (FUNCTION (LAMBDA (S OBJ2) (LET ((*PRINT-PRETTY* NIL)) (FORMAT S "#.'~S" OBJ2)))) 0 TABLE) (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH TABLE))) (PRIN1-TO-STRING OBJ))) (PRIN1-TO-STRING OBJ)))) "(FOO BAR)" "#.'(FOO BAR)" "(FOO BAR)")
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.5 (LET ((NEW-TABLE (COPY-PPRINT-DISPATCH))) (VALUES (EQL NEW-TABLE *PRINT-PPRINT-DISPATCH*) (MEMBER NEW-TABLE *UNIVERSE*))) NIL NIL)
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.6 (LET ((NEW-TABLE (COPY-PPRINT-DISPATCH *PRINT-PPRINT-DISPATCH*))) (VALUES (EQL NEW-TABLE *PRINT-PPRINT-DISPATCH*) (MEMBER NEW-TABLE *UNIVERSE*))) NIL NIL)
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.7 (LET ((NEW-TABLE (COPY-PPRINT-DISPATCH NIL))) (VALUES (EQL NEW-TABLE *PRINT-PPRINT-DISPATCH*) (MEMBER NEW-TABLE *UNIVERSE*))) NIL NIL)
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.8 (LET* ((TABLE1 (COPY-PPRINT-DISPATCH)) (TABLE2 (COPY-PPRINT-DISPATCH TABLE1))) (EQL TABLE1 TABLE2)) NIL)
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.ERROR.1 (SIGNALS-ERROR (COPY-PPRINT-DISPATCH NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST COPY-PPRINT-DISPATCH.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION COPY-PPRINT-DISPATCH) (FUNCTION NULL)) NIL)
;; Loading (LOAD "print-integers.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-integers.lsp C1F581E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.1 1 "1")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.2 2 "2")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.3 3 "3")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.4 4 "4")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.5 5 "5")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.6 6 "6")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.7 7 "7")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.8 8 "8")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.9 9 "9")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.10 0 "0")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.11 -1 "-1")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.12 -2 "-2")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.13 -3 "-3")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.14 -4 "-4")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.15 -5 "-5")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.16 -6 "-6")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.17 -7 "-7")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.18 -8 "-8")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.19 -9 "-9")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.20 (EXPT 10 20) "100000000000000000000")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.21 (- (EXPT 10 20)) "-100000000000000000000")
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.0 0 "0" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.1 1 "1" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.2 2 "10" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.3 3 "11" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.4 -1 "-1" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.5 -2 "-10" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.6 -3 "-11" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.7 255 "11111111" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.8 -252 "-11111100" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.9 (EXPT 2 40) "10000000000000000000000000000000000000000" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.2.10 (- (EXPT 2 40)) "-10000000000000000000000000000000000000000" (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.0 0 "0" (*PRINT-BASE* 3))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.1 1 "1" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.2 2 "2" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.3 3 "10" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.4 -1 "-1" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.5 -2 "-2" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.6 -3 "-10" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.7 80 "2222" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.8 -78 "-2220" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.9 (EXPT 3 40) "10000000000000000000000000000000000000000" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.3.10 (- (EXPT 3 40)) "-10000000000000000000000000000000000000000" (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.0 0 "0" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.1 1 "1" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.2 2 "2" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.3 3 "3" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.4 4 "10" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.5 5 "11" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.6 -1 "-1" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.7 -2 "-2" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.8 -3 "-3" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.9 -4 "-10" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.10 -5 "-11" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.11 255 "3333" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.12 -255 "-3333" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.13 (EXPT 4 40) "10000000000000000000000000000000000000000" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.4.14 (- (EXPT 4 40)) "-10000000000000000000000000000000000000000" (*PRINT-BASE* 4))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.0 0 "0" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.1 1 "1" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.2 2 "2" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.3 16 "22" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.4 66 "123" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.5 -1 "-1" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.6 -7 "-10" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.7 -48 "-66" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.8 (EXPT 7 40) "10000000000000000000000000000000000000000" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.7.9 (- (EXPT 7 40)) "-10000000000000000000000000000000000000000" (*PRINT-BASE* 7))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.0 0 "0" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.1 1 "1" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.2 2 "2" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.3 10 "A" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.4 11 "10" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.5 121 "100" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.6 -1 "-1" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.7 -10 "-A" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.8 -21 "-1A" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.9 -110 "-A0" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.10 (EXPT 11 40) "10000000000000000000000000000000000000000" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.11.11 (- (EXPT 11 40)) "-10000000000000000000000000000000000000000" (*PRINT-BASE* 11))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.0 0 "0" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.1 1 "1" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.2 2 "2" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.3 12 "C" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.4 17 "11" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.5 256 "100" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.6 -1 "-1" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.7 -14 "-E" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.8 -30 "-1E" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.9 -208 "-D0" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.10 (EXPT 16 40) "10000000000000000000000000000000000000000" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.16.11 (- (EXPT 16 40)) "-10000000000000000000000000000000000000000" (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.0 0 "0" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.1 1 "1" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.2 2 "2" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.3 12 "C" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.4 37 "11" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.5 (* 36 36) "100" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.6 -1 "-1" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.7 -14 "-E" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.8 -35 "-Z" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.9 -37 "-11" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.10 (- 2 (* 36 36)) "-ZY" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.11 (EXPT 36 40) "10000000000000000000000000000000000000000" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.BASE.36.12 (- (EXPT 36 40)) "-10000000000000000000000000000000000000000" (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.0 0 "0." (*PRINT-RADIX* T))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.1 1 "1." (*PRINT-RADIX* T))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.2 123456 "123456." (*PRINT-RADIX* T))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.3 123456789 "123456789." (*PRINT-RADIX* T))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.4 -5 "-5." (*PRINT-RADIX* T))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.5 -249213 "-249213." (*PRINT-RADIX* T))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.6 -917512001 "-917512001." (*PRINT-RADIX* T))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.0 0 "#b0" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.1 1 "#b1" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.2 2 "#b10" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.3 3 "#b11" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.4 -1 "#b-1" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.5 -2 "#b-10" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.6 -3 "#b-11" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.7 256 "#b100000000" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.8 -256 "#b-100000000" (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.9 (EXPT 2 100) (CONCATENATE (QUOTE STRING) "#b1" (MAKE-STRING 100 :INITIAL-ELEMENT #\0)) (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.2.10 (- (EXPT 2 200)) (CONCATENATE (QUOTE STRING) "#b-1" (MAKE-STRING 200 :INITIAL-ELEMENT #\0)) (*PRINT-RADIX* T) (*PRINT-BASE* 2))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.0 0 "#3r0" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.1 1 "#3r1" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.2 2 "#3r2" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.3 4 "#3r11" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.4 -1 "#3r-1" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.5 -2 "#3r-2" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.6 -4 "#3r-11" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.7 6561 "#3r100000000" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.8 -81 "#3r-10000" (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.9 (EXPT 3 100) (CONCATENATE (QUOTE STRING) "#3r1" (MAKE-STRING 100 :INITIAL-ELEMENT #\0)) (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.3.10 (- 1 (EXPT 3 200)) (CONCATENATE (QUOTE STRING) "#3r-" (MAKE-STRING 200 :INITIAL-ELEMENT #\2)) (*PRINT-RADIX* T) (*PRINT-BASE* 3))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.0 0 "#5r0" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.1 1 "#5r1" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.2 2 "#5r2" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.3 6 "#5r11" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.4 -1 "#5r-1" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.5 -2 "#5r-2" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.6 -8 "#5r-13" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.7 390625 "#5r100000000" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.8 -625 "#5r-10000" (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.9 (EXPT 5 100) (CONCATENATE (QUOTE STRING) "#5r1" (MAKE-STRING 100 :INITIAL-ELEMENT #\0)) (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.5.10 (- 1 (EXPT 5 200)) (CONCATENATE (QUOTE STRING) "#5r-" (MAKE-STRING 200 :INITIAL-ELEMENT #\4)) (*PRINT-RADIX* T) (*PRINT-BASE* 5))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.0 0 "#o0" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.1 1 "#o1" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.2 2 "#o2" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.3 9 "#o11" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.4 -1 "#o-1" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.5 -2 "#o-2" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.6 -11 "#o-13" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.7 16777216 "#o100000000" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.8 -4096 "#o-10000" (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.9 (EXPT 8 100) (CONCATENATE (QUOTE STRING) "#o1" (MAKE-STRING 100 :INITIAL-ELEMENT #\0)) (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.8.10 (- 1 (EXPT 8 200)) (CONCATENATE (QUOTE STRING) "#o-" (MAKE-STRING 200 :INITIAL-ELEMENT #\7)) (*PRINT-RADIX* T) (*PRINT-BASE* 8))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.0 0 "#12r0" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.1 1 "#12r1" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.2 2 "#12r2" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.3 13 "#12r11" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.4 -1 "#12r-1" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.5 -2 "#12r-2" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.6 -15 "#12r-13" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.7 (EXPT 12 8) "#12r100000000" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.8 (- (* 12 12 12 12)) "#12r-10000" (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.9 (EXPT 12 100) (CONCATENATE (QUOTE STRING) "#12r1" (MAKE-STRING 100 :INITIAL-ELEMENT #\0)) (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.12.10 (- 1 (EXPT 12 200)) (CONCATENATE (QUOTE STRING) "#12r-" (MAKE-STRING 200 :INITIAL-ELEMENT #\B)) (*PRINT-RADIX* T) (*PRINT-BASE* 12))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.0 0 "#x0" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.1 1 "#x1" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.2 2 "#x2" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.3 17 "#x11" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.4 -1 "#x-1" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.5 -2 "#x-2" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.6 -19 "#x-13" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.7 (EXPT 16 8) "#x100000000" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.8 (- (* 16 16 16 16)) "#x-10000" (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.9 (EXPT 16 100) (CONCATENATE (QUOTE STRING) "#x1" (MAKE-STRING 100 :INITIAL-ELEMENT #\0)) (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.16.10 (- 1 (EXPT 16 200)) (CONCATENATE (QUOTE STRING) "#x-" (MAKE-STRING 200 :INITIAL-ELEMENT #\F)) (*PRINT-RADIX* T) (*PRINT-BASE* 16))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.0 0 "#36r0" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.1 1 "#36r1" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.2 2 "#36r2" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.3 37 "#36r11" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.4 -1 "#36r-1" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.5 -2 "#36r-2" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.6 -39 "#36r-13" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.7 (EXPT 36 8) "#36r100000000" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.8 (- (* 36 36 36 36)) "#36r-10000" (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.9 (EXPT 36 100) (CONCATENATE (QUOTE STRING) "#36r1" (MAKE-STRING 100 :INITIAL-ELEMENT #\0)) (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEF-PRINT-TEST PRINT.INTEGERS.RADIX.BASE.36.10 (- 1 (EXPT 36 200)) (CONCATENATE (QUOTE STRING) "#36r-" (MAKE-STRING 200 :INITIAL-ELEMENT #\Z)) (*PRINT-RADIX* T) (*PRINT-BASE* 36))
;; Loading (DEFTEST PRINT.INTEGERS.BASE.VARIOUS.1 (WITH-STANDARD-IO-SYNTAX (LOOP FOR B FROM 2 TO 36 NCONC (LET ((*PRINT-BASE* B) (*READ-BASE* B)) (LOOP FOR I FROM 1 TO 100 FOR N = (EXPT B I) FOR STR = (WITH-OUTPUT-TO-STRING (S) (PRIN1 N S)) FOR RESULT = (READ-FROM-STRING STR) UNLESS (= N RESULT) COLLECT (LIST B I N STR RESULT))))) NIL)
;; Loading (DEFTEST PRINT.INTEGERS.BASE.VARIOUS.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR B FROM 2 TO 36 NCONC (LET ((*PRINT-BASE* B) (*READ-BASE* B)) (LOOP FOR I FROM 1 TO 100 FOR N = (- (EXPT B I)) FOR STR = (WITH-OUTPUT-TO-STRING (S) (PRIN1 N S)) FOR RESULT = (READ-FROM-STRING STR) UNLESS (= N RESULT) COLLECT (LIST B I N STR RESULT))))) NIL)
;; Loading (DEFTEST PRINT.INTEGERS.BASE.VARIOUS.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR B FROM 2 TO 36 NCONC (LET ((*PRINT-BASE* B) (*READ-BASE* B) (*PRINT-RADIX* T)) (LOOP FOR I FROM 1 TO 100 FOR N = (EXPT B I) FOR STR = (WITH-OUTPUT-TO-STRING (S) (PRIN1 N S)) FOR RESULT = (READ-FROM-STRING STR) UNLESS (= N RESULT) COLLECT (LIST B I N STR RESULT))))) NIL)
;; Loading (DEFTEST PRINT.INTEGERS.BASE.VARIOUS.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR B FROM 2 TO 36 NCONC (LET ((*PRINT-BASE* B) (*READ-BASE* B) (*PRINT-RADIX* T)) (LOOP FOR I FROM 1 TO 100 FOR N = (- (EXPT B I)) FOR STR = (WITH-OUTPUT-TO-STRING (S) (PRIN1 N S)) FOR RESULT = (READ-FROM-STRING STR) UNLESS (= N RESULT) COLLECT (LIST B I N STR RESULT))))) NIL)
;; Loading (DEFTEST PRINT.INTEGERS.RANDOM.1 (LOOP FOR NUMBITS = (RANDOM 40) FOR BOUND = (ASH 1 NUMBITS) FOR R = (- (RANDOM (+ BOUND BOUND)) BOUND) REPEAT 10000 NCONC (RANDOMLY-CHECK-READABILITY R)) NIL)
;; Loading (LOAD "print-ratios.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-ratios.lsp 81E1C0C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINT.RATIOS.RANDOM (LOOP FOR I FROM 1 TO 1000 FOR NUMBITS = (1+ (RANDOM 40)) FOR BOUND = (ASH 1 NUMBITS) FOR NUM = (- (RANDOM (+ BOUND BOUND)) BOUND) FOR DENOM = (1+ (RANDOM BOUND)) FOR R = (/ NUM DENOM) NCONC (RANDOMLY-CHECK-READABILITY R)) NIL)
;; Loading (LOAD "print-floats.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-floats.lsp 81E60517>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINT.SHORT-FLOAT.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SHORT-FLOAT))) (LOOP FOR I FROM -4000 TO 4000 FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR S2 = (FORMAT NIL "~A.0" I) UNLESS (EQUALP S1 S2) COLLECT (LIST I F S1 S2)))) NIL)
;; Loading (DEFTEST PRINT.SHORT-FLOAT.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SHORT-FLOAT))) (LOOP FOR I = (- (RANDOM 20000000) 10000000) FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR S2 = (FORMAT NIL "~A.0" I) REPEAT 10000 UNLESS (OR (/= I (RATIONAL F)) (EQUALP S1 S2)) COLLECT (LIST I F S1 S2)))) NIL)
;; Loading (DEFPARAMETER *POSSIBLE-SHORT-FLOAT-EXPONENT-MARKERS* (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR C ACROSS "SFDL" WHEN (SUBTYPEP (QUOTE SHORT-FLOAT) TYPE) NCONC (LIST C (CHAR-DOWNCASE C))))
;; Loading (DEFTEST PRINT.SHORT-FLOAT.3 (LET ((CHARS *POSSIBLE-SHORT-FLOAT-EXPONENT-MARKERS*)) (LOOP FOR TYPE IN (QUOTE (SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (AND (NOT (SUBTYPEP (QUOTE SHORT-FLOAT) TYPE)) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (LOOP FOR I FROM -4000 TO 4000 FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR LEN1 = (LENGTH S1) FOR S2 = (FORMAT NIL "~A.0" I) UNLESS (AND (> LEN1 4) (STRING-EQUAL S1 S2 :START1 0 :END1 (- LEN1 2)) (EQL (CHAR S1 (- LEN1 1)) #\0) (MEMBER (CHAR S1 (- LEN1 2)) CHARS)) COLLECT (LIST TYPE I F S1 S2))))))) NIL)
;; Loading (DEFTEST PRINT.SHORT-FLOAT.4 (LET ((CHARS *POSSIBLE-SHORT-FLOAT-EXPONENT-MARKERS*)) (LOOP FOR TYPE IN (QUOTE (SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (AND (NOT (SUBTYPEP (QUOTE SHORT-FLOAT) TYPE)) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (LOOP FOR I = (- (RANDOM 20000000) 10000000) FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR LEN1 = (LENGTH S1) FOR S2 = (FORMAT NIL "~A.0" I) REPEAT 10000 UNLESS (OR (/= I (RATIONAL F)) (AND (> LEN1 4) (STRING-EQUAL S1 S2 :START1 0 :END1 (- LEN1 2)) (EQL (CHAR S1 (- LEN1 1)) #\0) (MEMBER (CHAR S1 (- LEN1 2)) CHARS))) COLLECT (LIST TYPE I F S1 S2))))))) NIL)
;; Loading (DEFTEST PRINT.SHORT-FLOAT.RANDOM (LET ((LOWER-BOUND (IF (< (LOG LEAST-POSITIVE-SHORT-FLOAT 10) -100) (EXPT 0.1 100) LEAST-POSITIVE-SHORT-FLOAT)) (UPPER-BOUND (/ (IF (> (LOG MOST-POSITIVE-SHORT-FLOAT 10) 100) (EXPT 10.0 100) MOST-POSITIVE-SHORT-FLOAT) 10))) (LOOP FOR SF = LOWER-BOUND THEN (* 10 SF) WHILE (< SF UPPER-BOUND) NCONC (LOOP FOR X = (HANDLER-CASE (RANDOM SF) (ARITHMETIC-ERROR (C) 0.0)) FOR Y = (IF (COIN) (- X) X) REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY Y)))) NIL)
;; Loading (DEFTEST PRINT.SINGLE-FLOAT.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SINGLE-FLOAT))) (LOOP FOR I FROM -4000 TO 4000 FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR S2 = (FORMAT NIL "~A.0" I) UNLESS (EQUALP S1 S2) COLLECT (LIST I F S1 S2)))) NIL)
;; Loading (DEFTEST PRINT.SINGLE-FLOAT.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SINGLE-FLOAT))) (LOOP FOR I = (- (RANDOM 20000000) 10000000) FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR S2 = (FORMAT NIL "~A.0" I) REPEAT 10000 UNLESS (OR (/= I (RATIONAL F)) (EQUALP S1 S2)) COLLECT (LIST I F S1 S2)))) NIL)
;; Loading (DEFPARAMETER *POSSIBLE-SINGLE-FLOAT-EXPONENT-MARKERS* (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR C ACROSS "SFDL" WHEN (SUBTYPEP (QUOTE SINGLE-FLOAT) TYPE) NCONC (LIST C (CHAR-DOWNCASE C))))
;; Loading (DEFTEST PRINT.SINGLE-FLOAT.3 (LET ((CHARS *POSSIBLE-SINGLE-FLOAT-EXPONENT-MARKERS*)) (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (AND (NOT (SUBTYPEP (QUOTE SINGLE-FLOAT) TYPE)) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (LOOP FOR I FROM -4000 TO 4000 FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR LEN1 = (LENGTH S1) FOR S2 = (FORMAT NIL "~A.0" I) UNLESS (AND (> LEN1 4) (STRING-EQUAL S1 S2 :START1 0 :END1 (- LEN1 2)) (EQL (CHAR S1 (- LEN1 1)) #\0) (MEMBER (CHAR S1 (- LEN1 2)) CHARS)) COLLECT (LIST TYPE I F S1 S2))))))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PRINT.SINGLE-FLOAT.4 (LET ((CHARS *POSSIBLE-SINGLE-FLOAT-EXPONENT-MARKERS*)) (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (AND (NOT (SUBTYPEP (QUOTE SINGLE-FLOAT) TYPE)) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (LOOP FOR I = (- (RANDOM 20000000) 10000000) FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR LEN1 = (LENGTH S1) FOR S2 = (FORMAT NIL "~A.0" I) REPEAT 10000 UNLESS (OR (/= I (RATIONAL F)) (AND (> LEN1 4) (STRING-EQUAL S1 S2 :START1 0 :END1 (- LEN1 2)) (EQL (CHAR S1 (- LEN1 1)) #\0) (MEMBER (CHAR S1 (- LEN1 2)) CHARS))) COLLECT (LIST TYPE I F S1 S2))))))) NIL)
;; Loading (DEFTEST PRINT.SINGLE-FLOAT.RANDOM (LET ((LOWER-BOUND (IF (< (LOG LEAST-POSITIVE-SINGLE-FLOAT 10) -100) (EXPT 0.1 100) LEAST-POSITIVE-SINGLE-FLOAT)) (UPPER-BOUND (/ (IF (> (LOG MOST-POSITIVE-SINGLE-FLOAT 10) 100) (EXPT 10.0 100) MOST-POSITIVE-SINGLE-FLOAT) 10))) (LOOP FOR F = LOWER-BOUND THEN (* 10 F) WHILE (< F UPPER-BOUND) NCONC (LOOP FOR X = (HANDLER-CASE (RANDOM F) (ARITHMETIC-ERROR (C) 0.0)) FOR Y = (IF (COIN) (- X) X) REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY Y)))) NIL)
;; Loading (DEFTEST PRINT.DOUBLE-FLOAT.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE DOUBLE-FLOAT))) (LOOP FOR I FROM -4000 TO 4000 FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR S2 = (FORMAT NIL "~A.0" I) UNLESS (EQUALP S1 S2) COLLECT (LIST I F S1 S2)))) NIL)
;; Loading (DEFTEST PRINT.DOUBLE-FLOAT.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE DOUBLE-FLOAT))) (LOOP FOR I = (- (RANDOM 20000000) 10000000) FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR S2 = (FORMAT NIL "~A.0" I) REPEAT 10000 UNLESS (OR (/= I (RATIONAL F)) (EQUALP S1 S2)) COLLECT (LIST I F S1 S2)))) NIL)
;; Loading (DEFPARAMETER *POSSIBLE-DOUBLE-FLOAT-EXPONENT-MARKERS* (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR C ACROSS "SFDL" WHEN (SUBTYPEP (QUOTE DOUBLE-FLOAT) TYPE) NCONC (LIST C (CHAR-DOWNCASE C))))
;; Loading (DEFTEST PRINT.DOUBLE-FLOAT.3 (LET ((CHARS *POSSIBLE-DOUBLE-FLOAT-EXPONENT-MARKERS*)) (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (AND (NOT (SUBTYPEP (QUOTE DOUBLE-FLOAT) TYPE)) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (LOOP FOR I FROM -4000 TO 4000 FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR LEN1 = (LENGTH S1) FOR S2 = (FORMAT NIL "~A.0" I) UNLESS (AND (> LEN1 4) (STRING-EQUAL S1 S2 :START1 0 :END1 (- LEN1 2)) (EQL (CHAR S1 (- LEN1 1)) #\0) (MEMBER (CHAR S1 (- LEN1 2)) CHARS)) COLLECT (LIST TYPE I F S1 S2))))))) NIL)
;; Loading (DEFTEST PRINT.DOUBLE-FLOAT.4 (LET ((CHARS *POSSIBLE-DOUBLE-FLOAT-EXPONENT-MARKERS*)) (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (AND (NOT (SUBTYPEP (QUOTE DOUBLE-FLOAT) TYPE)) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (LOOP FOR I = (- (RANDOM 20000000) 10000000) FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR LEN1 = (LENGTH S1) FOR S2 = (FORMAT NIL "~A.0" I) REPEAT 10000 UNLESS (OR (/= I (RATIONAL F)) (AND (> LEN1 4) (STRING-EQUAL S1 S2 :START1 0 :END1 (- LEN1 2)) (EQL (CHAR S1 (- LEN1 1)) #\0) (MEMBER (CHAR S1 (- LEN1 2)) CHARS))) COLLECT (LIST TYPE I F S1 S2))))))) NIL)
;; Loading (DEFTEST PRINT.DOUBLE-FLOAT.RANDOM (LET ((LOWER-BOUND (IF (< (LOG LEAST-POSITIVE-DOUBLE-FLOAT 10) -100) (EXPT 0.1 100) LEAST-POSITIVE-DOUBLE-FLOAT)) (UPPER-BOUND (/ (IF (> (LOG MOST-POSITIVE-DOUBLE-FLOAT 10) 100) (EXPT 10.0 100) MOST-POSITIVE-DOUBLE-FLOAT) 10))) (LOOP FOR F = LOWER-BOUND THEN (* 10 F) WHILE (< F UPPER-BOUND) NCONC (LOOP FOR X = (HANDLER-CASE (RANDOM F) (ARITHMETIC-ERROR (C) 0.0)) FOR Y = (IF (COIN) (- X) X) REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY Y)))) NIL)
;; Loading (DEFTEST PRINT.LONG-FLOAT.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE LONG-FLOAT))) (LOOP FOR I FROM -4000 TO 4000 FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR S2 = (FORMAT NIL "~A.0" I) UNLESS (EQUALP S1 S2) COLLECT (LIST I F S1 S2)))) NIL)
;; Loading (DEFTEST PRINT.LONG-FLOAT.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* (QUOTE LONG-FLOAT))) (LOOP FOR I = (- (RANDOM 20000000) 10000000) FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR S2 = (FORMAT NIL "~A.0" I) REPEAT 10000 UNLESS (OR (/= I (RATIONAL F)) (EQUALP S1 S2)) COLLECT (LIST I F S1 S2)))) NIL)
;; Loading (DEFPARAMETER *POSSIBLE-LONG-FLOAT-EXPONENT-MARKERS* (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR C ACROSS "SFDL" WHEN (SUBTYPEP (QUOTE LONG-FLOAT) TYPE) NCONC (LIST C (CHAR-DOWNCASE C))))
;; Loading (DEFTEST PRINT.LONG-FLOAT.3 (LET ((CHARS *POSSIBLE-LONG-FLOAT-EXPONENT-MARKERS*)) (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (AND (NOT (SUBTYPEP (QUOTE LONG-FLOAT) TYPE)) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (LOOP FOR I FROM -4000 TO 4000 FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR LEN1 = (LENGTH S1) FOR S2 = (FORMAT NIL "~A.0" I) UNLESS (AND (> LEN1 4) (STRING-EQUAL S1 S2 :START1 0 :END1 (- LEN1 2)) (EQL (CHAR S1 (- LEN1 1)) #\0) (MEMBER (CHAR S1 (- LEN1 2)) CHARS)) COLLECT (LIST TYPE I F S1 S2))))))) NIL)
;; Loading (DEFTEST PRINT.LONG-FLOAT.4 (LET ((CHARS *POSSIBLE-LONG-FLOAT-EXPONENT-MARKERS*)) (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (AND (NOT (SUBTYPEP (QUOTE LONG-FLOAT) TYPE)) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (LOOP FOR I = (- (RANDOM 20000000) 10000000) FOR F = (FLOAT I 0.0) FOR S1 = (WITH-OUTPUT-TO-STRING (S) (PRIN1 F S)) FOR LEN1 = (LENGTH S1) FOR S2 = (FORMAT NIL "~A.0" I) REPEAT 10000 UNLESS (OR (/= I (RATIONAL F)) (AND (> LEN1 4) (STRING-EQUAL S1 S2 :START1 0 :END1 (- LEN1 2)) (EQL (CHAR S1 (- LEN1 1)) #\0) (MEMBER (CHAR S1 (- LEN1 2)) CHARS))) COLLECT (LIST TYPE I F S1 S2))))))) NIL)
;; Loading (DEFTEST PRINT.LONG-FLOAT.RANDOM (LET ((LOWER-BOUND (IF (< (LOG LEAST-POSITIVE-LONG-FLOAT 10) -100) (EXPT 0.1 100) LEAST-POSITIVE-LONG-FLOAT)) (UPPER-BOUND (/ (IF (> (LOG MOST-POSITIVE-LONG-FLOAT 10) 100) (EXPT 10.0 100) MOST-POSITIVE-LONG-FLOAT) 10))) (LOOP FOR F = LOWER-BOUND THEN (* 10 F) WHILE (< F UPPER-BOUND) NCONC (LOOP FOR X = (HANDLER-CASE (RANDOM F) (ARITHMETIC-ERROR (C) 0.0)) FOR Y = (IF (COIN) (- X) X) REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY Y)))) NIL)
;; Loading (LOAD "print-complex.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-complex.lsp C1C42877>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINT.COMPLEX.1 (EQUALT (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (S) (PRIN1 (COMPLEX 1 2) S)))) "#C(1 2)") T)
;; Loading (DEFTEST PRINT.COMPLEX.2 (EQUALT (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (S) (PRIN1 (COMPLEX 1.0 2.0) S)))) "#C(1.0 2.0)") T)
;; Loading (DEFTEST PRINT.COMPLEX.RANDOM.1 (LOOP FOR NUMBITS = (RANDOM 40) FOR BOUND = (ASH 1 NUMBITS) FOR R = (- (RANDOM (+ BOUND BOUND)) BOUND) FOR I = (- (RANDOM (+ BOUND BOUND)) BOUND) REPEAT 1000 UNLESS (= I 0) NCONC (RANDOMLY-CHECK-READABILITY (COMPLEX R I))) NIL)
;; Loading (DEFTEST PRINT.COMPLEX.RANDOM.2 (LOOP FOR NUMBITS = (RANDOM 40) FOR BOUND = (ASH 1 NUMBITS) FOR NUM1 = (- (RANDOM (+ BOUND BOUND)) BOUND) FOR NUM2 = (- (RANDOM (+ BOUND BOUND)) BOUND) FOR DENOM1 = (1+ (RANDOM BOUND)) FOR DENOM2 = (1+ (RANDOM BOUND)) FOR R = (/ NUM1 DENOM1) FOR I = (/ NUM2 DENOM2) REPEAT 1000 UNLESS (= I 0) NCONC (RANDOMLY-CHECK-READABILITY (COMPLEX R I))) NIL)
;; Loading (LOAD "print-characters.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-characters.lsp C1CB3CD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINT.CHAR.1 (WITH-STANDARD-IO-SYNTAX (LOOP FOR C ACROSS +STANDARD-CHARS+ UNLESS (EQUAL (STRING C) (WITH-OUTPUT-TO-STRING (S) (PRINC C S))) COLLECT C)) NIL)
;; Loading (DEFTEST PRINT.CHAR.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR C ACROSS +CODE-CHARS+ UNLESS (EQUAL (STRING C) (WITH-OUTPUT-TO-STRING (S) (PRINC C S))) COLLECT C)) NIL)
;; Loading (DEFTEST PRINT.CHAR.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (LOOP FOR C ACROSS +BASE-CHARS+ UNLESS (OR (EQL C #\Space) (EQUAL (FORMAT NIL "#\\~C" C) (WITH-OUTPUT-TO-STRING (S) (PRIN1 C S)))) COLLECT C))) NIL)
;; Loading (DEFTEST PRINT.CHAR.4 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (S) (PRIN1 #\Space S)))) "#\\ ")
;; Loading (DEFTEST PRINT.CHAR.5 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (S) (PRIN1 #\Newline S)))) "#\\Newline")
;; Loading (DEFTEST PRINT.CHAR.6 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (S) (PRINC #\Newline S)))) "
")
;; Loading (DEFTEST PRINT.CHAR.7 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (LOOP FOR C ACROSS +CODE-CHARS+ FOR STR = (WITH-OUTPUT-TO-STRING (S) (PRIN1 C S)) FOR LEN = (LENGTH STR) UNLESS (AND (>= LEN 3) (EQUAL (SUBSEQ STR 0 2) "#\\") (OR (= LEN 3) (LET ((NAME (SUBSEQ STR 2))) (EQL C (NAME-CHAR NAME))))) COLLECT C))) NIL)
;; Loading (DEFTEST PRINT.CHAR.8 (LOOP FOR I = (RANDOM (MIN CHAR-CODE-LIMIT (ASH 1 16))) FOR C = (CODE-CHAR I) REPEAT 1000 UNLESS (NULL C) NCONC (LET ((RESULT (RANDOMLY-CHECK-READABILITY C))) (AND RESULT (LIST (CONS I (FIRST RESULT)))))) NIL)
;; Loading (DEFTEST PRINT.CHAR.9 (LOOP FOR I = (RANDOM (MIN CHAR-CODE-LIMIT (ASH 1 32))) FOR C = (CODE-CHAR I) REPEAT 1000 UNLESS (NULL C) NCONC (LET ((RESULT (RANDOMLY-CHECK-READABILITY C))) (AND RESULT (LIST (CONS I (FIRST RESULT)))))) NIL)
;; Loading (DEFTEST PRINT.CHAR.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR STR = (WITH-OUTPUT-TO-STRING (S) (PRIN1 C S)) UNLESS (OR (EQL C #\Newline) (EQUAL STR (CONCATENATE (QUOTE STRING) "#\\" (STRING C)))) COLLECT (LIST C STR)))) NIL)
;; Loading (DEFTEST PRINT.CHAR.11 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (LET ((NAMES (QUOTE ("Newline" "Tab" "Rubout" "Linefeed" "Page" "Backspace" "Return")))) (LOOP FOR NAME IN NAMES FOR C = (NAME-CHAR NAME) FOR STR = (WITH-OUTPUT-TO-STRING (S) (PRIN1 C S)) UNLESS (OR (NULL C) (AND (>= (LENGTH STR) 3) (EQUAL (SUBSEQ STR 0 2) "#\\") (MEMBER (SUBSEQ STR 2) NAMES :TEST (FUNCTION EQUAL)))) COLLECT (LIST C STR))))) NIL)
;; Loading (LOAD "print-symbols.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-symbols.lsp C1D858D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFUN PRINC.SYMBOL.FN (SYM CASE *PRINT-CASE* EXPECTED) (SETF (READTABLE-CASE *READTABLE*) CASE) (LET ((STR (WITH-OUTPUT-TO-STRING (S) (PRINC SYM S)))) (OR (EQUALT STR EXPECTED) (LIST STR EXPECTED))))
;; Loading (DEFUN PRIN1.SYMBOL.FN (SYM CASE *PRINT-CASE* EXPECTED) (SETF (READTABLE-CASE *READTABLE*) CASE) (LET ((STR (WITH-OUTPUT-TO-STRING (S) (PRIN1 SYM S)))) (OR (AND (MEMBER STR EXPECTED :TEST (FUNCTION STRING=)) T) (LIST STR EXPECTED))))
;; Loading (DEFTEST PRINT.SYMBOL.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE XYZ) :UPCASE :UPCASE "XYZ") (%P (QUOTE XYZ) :UPCASE :DOWNCASE "xyz") (%P (QUOTE XYZ) :UPCASE :CAPITALIZE "Xyz") (%P (QUOTE XYZ) :DOWNCASE :UPCASE "XYZ") (%P (QUOTE XYZ) :DOWNCASE :DOWNCASE "XYZ") (%P (QUOTE XYZ) :DOWNCASE :CAPITALIZE "XYZ") (%P (QUOTE XYZ) :PRESERVE :UPCASE "XYZ") (%P (QUOTE XYZ) :PRESERVE :DOWNCASE "XYZ") (%P (QUOTE XYZ) :PRESERVE :CAPITALIZE "XYZ") (%P (QUOTE XYZ) :INVERT :UPCASE "xyz") (%P (QUOTE XYZ) :INVERT :DOWNCASE "xyz") (%P (QUOTE XYZ) :INVERT :CAPITALIZE "xyz"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE \x\y\z) :UPCASE :UPCASE "xyz") (%P (QUOTE \x\y\z) :UPCASE :DOWNCASE "xyz") (%P (QUOTE \x\y\z) :UPCASE :CAPITALIZE "xyz") (%P (QUOTE \x\y\z) :DOWNCASE :UPCASE "XYZ") (%P (QUOTE \x\y\z) :DOWNCASE :DOWNCASE "xyz") (%P (QUOTE \x\y\z) :DOWNCASE :CAPITALIZE "Xyz") (%P (QUOTE \x\y\z) :PRESERVE :UPCASE "xyz") (%P (QUOTE \x\y\z) :PRESERVE :DOWNCASE "xyz") (%P (QUOTE \x\y\z) :PRESERVE :CAPITALIZE "xyz") (%P (QUOTE \x\y\z) :INVERT :UPCASE "XYZ") (%P (QUOTE \x\y\z) :INVERT :DOWNCASE "XYZ") (%P (QUOTE \x\y\z) :INVERT :CAPITALIZE "XYZ"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE X\y\z) :UPCASE :UPCASE "Xyz") (%P (QUOTE X\y\z) :UPCASE :DOWNCASE "xyz") (%P (QUOTE X\y\z) :UPCASE :CAPITALIZE "Xyz") (%P (QUOTE X\y\z) :DOWNCASE :UPCASE "XYZ") (%P (QUOTE X\y\z) :DOWNCASE :DOWNCASE "Xyz") (%P (QUOTE X\y\z) :DOWNCASE :CAPITALIZE "Xyz") (%P (QUOTE X\y\z) :PRESERVE :UPCASE "Xyz") (%P (QUOTE X\y\z) :PRESERVE :DOWNCASE "Xyz") (%P (QUOTE X\y\z) :PRESERVE :CAPITALIZE "Xyz") (%P (QUOTE X\y\z) :INVERT :UPCASE "Xyz") (%P (QUOTE X\y\z) :INVERT :DOWNCASE "Xyz") (%P (QUOTE X\y\z) :INVERT :CAPITALIZE "Xyz"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.4 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE \xYZ) :UPCASE :UPCASE "xYZ") (%P (QUOTE \xYZ) :UPCASE :DOWNCASE "xyz") (%P (QUOTE \xYZ) :UPCASE :CAPITALIZE "xyz") (%P (QUOTE \xYZ) :DOWNCASE :UPCASE "XYZ") (%P (QUOTE \xYZ) :DOWNCASE :DOWNCASE "xYZ") (%P (QUOTE \xYZ) :DOWNCASE :CAPITALIZE "XYZ") (%P (QUOTE \xYZ) :PRESERVE :UPCASE "xYZ") (%P (QUOTE \xYZ) :PRESERVE :DOWNCASE "xYZ") (%P (QUOTE \xYZ) :PRESERVE :CAPITALIZE "xYZ") (%P (QUOTE \xYZ) :INVERT :UPCASE "xYZ") (%P (QUOTE \xYZ) :INVERT :DOWNCASE "xYZ") (%P (QUOTE \xYZ) :INVERT :CAPITALIZE "xYZ"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.5 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE X1Z) :UPCASE :UPCASE "X1Z") (%P (QUOTE X1Z) :UPCASE :DOWNCASE "x1z") (%P (QUOTE X1Z) :UPCASE :CAPITALIZE "X1z") (%P (QUOTE X1Z) :DOWNCASE :UPCASE "X1Z") (%P (QUOTE X1Z) :DOWNCASE :DOWNCASE "X1Z") (%P (QUOTE X1Z) :DOWNCASE :CAPITALIZE "X1Z") (%P (QUOTE X1Z) :PRESERVE :UPCASE "X1Z") (%P (QUOTE X1Z) :PRESERVE :DOWNCASE "X1Z") (%P (QUOTE X1Z) :PRESERVE :CAPITALIZE "X1Z") (%P (QUOTE X1Z) :INVERT :UPCASE "x1z") (%P (QUOTE X1Z) :INVERT :DOWNCASE "x1z") (%P (QUOTE X1Z) :INVERT :CAPITALIZE "x1z"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.6 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE \x1\z) :UPCASE :UPCASE "x1z") (%P (QUOTE \x1\z) :UPCASE :DOWNCASE "x1z") (%P (QUOTE \x1\z) :UPCASE :CAPITALIZE "x1z") (%P (QUOTE \x1\z) :DOWNCASE :UPCASE "X1Z") (%P (QUOTE \x1\z) :DOWNCASE :DOWNCASE "x1z") (%P (QUOTE \x1\z) :DOWNCASE :CAPITALIZE "X1z") (%P (QUOTE \x1\z) :PRESERVE :UPCASE "x1z") (%P (QUOTE \x1\z) :PRESERVE :DOWNCASE "x1z") (%P (QUOTE \x1\z) :PRESERVE :CAPITALIZE "x1z") (%P (QUOTE \x1\z) :INVERT :UPCASE "X1Z") (%P (QUOTE \x1\z) :INVERT :DOWNCASE "X1Z") (%P (QUOTE \x1\z) :INVERT :CAPITALIZE "X1Z"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.7 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE X1\z) :UPCASE :UPCASE "X1z") (%P (QUOTE X1\z) :UPCASE :DOWNCASE "x1z") (%P (QUOTE X1\z) :UPCASE :CAPITALIZE "X1z") (%P (QUOTE X1\z) :DOWNCASE :UPCASE "X1Z") (%P (QUOTE X1\z) :DOWNCASE :DOWNCASE "X1z") (%P (QUOTE X1\z) :DOWNCASE :CAPITALIZE "X1z") (%P (QUOTE X1\z) :PRESERVE :UPCASE "X1z") (%P (QUOTE X1\z) :PRESERVE :DOWNCASE "X1z") (%P (QUOTE X1\z) :PRESERVE :CAPITALIZE "X1z") (%P (QUOTE X1\z) :INVERT :UPCASE "X1z") (%P (QUOTE X1\z) :INVERT :DOWNCASE "X1z") (%P (QUOTE X1\z) :INVERT :CAPITALIZE "X1z"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.8 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE \x1Z) :UPCASE :UPCASE "x1Z") (%P (QUOTE \x1Z) :UPCASE :DOWNCASE "x1z") (%P (QUOTE \x1Z) :UPCASE :CAPITALIZE "x1z") (%P (QUOTE \x1Z) :DOWNCASE :UPCASE "X1Z") (%P (QUOTE \x1Z) :DOWNCASE :DOWNCASE "x1Z") (%P (QUOTE \x1Z) :DOWNCASE :CAPITALIZE "X1Z") (%P (QUOTE \x1Z) :PRESERVE :UPCASE "x1Z") (%P (QUOTE \x1Z) :PRESERVE :DOWNCASE "x1Z") (%P (QUOTE \x1Z) :PRESERVE :CAPITALIZE "x1Z") (%P (QUOTE \x1Z) :INVERT :UPCASE "x1Z") (%P (QUOTE \x1Z) :INVERT :DOWNCASE "x1Z") (%P (QUOTE \x1Z) :INVERT :CAPITALIZE "x1Z"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.9 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE X Z) :UPCASE :UPCASE "X Z") (%P (QUOTE X Z) :UPCASE :DOWNCASE "x z") (%P (QUOTE X Z) :UPCASE :CAPITALIZE "X Z") (%P (QUOTE X Z) :DOWNCASE :UPCASE "X Z") (%P (QUOTE X Z) :DOWNCASE :DOWNCASE "X Z") (%P (QUOTE X Z) :DOWNCASE :CAPITALIZE "X Z") (%P (QUOTE X Z) :PRESERVE :UPCASE "X Z") (%P (QUOTE X Z) :PRESERVE :DOWNCASE "X Z") (%P (QUOTE X Z) :PRESERVE :CAPITALIZE "X Z") (%P (QUOTE X Z) :INVERT :UPCASE "x z") (%P (QUOTE X Z) :INVERT :DOWNCASE "x z") (%P (QUOTE X Z) :INVERT :CAPITALIZE "x z"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE \x \z) :UPCASE :UPCASE "x z") (%P (QUOTE \x \z) :UPCASE :DOWNCASE "x z") (%P (QUOTE \x \z) :UPCASE :CAPITALIZE "x z") (%P (QUOTE \x \z) :DOWNCASE :UPCASE "X Z") (%P (QUOTE \x \z) :DOWNCASE :DOWNCASE "x z") (%P (QUOTE \x \z) :DOWNCASE :CAPITALIZE "X Z") (%P (QUOTE \x \z) :PRESERVE :UPCASE "x z") (%P (QUOTE \x \z) :PRESERVE :DOWNCASE "x z") (%P (QUOTE \x \z) :PRESERVE :CAPITALIZE "x z") (%P (QUOTE \x \z) :INVERT :UPCASE "X Z") (%P (QUOTE \x \z) :INVERT :DOWNCASE "X Z") (%P (QUOTE \x \z) :INVERT :CAPITALIZE "X Z"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.11 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE X \z) :UPCASE :UPCASE "X z") (%P (QUOTE X \z) :UPCASE :DOWNCASE "x z") (%P (QUOTE X \z) :UPCASE :CAPITALIZE "X z") (%P (QUOTE X \z) :DOWNCASE :UPCASE "X Z") (%P (QUOTE X \z) :DOWNCASE :DOWNCASE "X z") (%P (QUOTE X \z) :DOWNCASE :CAPITALIZE "X Z") (%P (QUOTE X \z) :PRESERVE :UPCASE "X z") (%P (QUOTE X \z) :PRESERVE :DOWNCASE "X z") (%P (QUOTE X \z) :PRESERVE :CAPITALIZE "X z") (%P (QUOTE X \z) :INVERT :UPCASE "X z") (%P (QUOTE X \z) :INVERT :DOWNCASE "X z") (%P (QUOTE X \z) :INVERT :CAPITALIZE "X z"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.12 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRINC.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE \x Z) :UPCASE :UPCASE "x Z") (%P (QUOTE \x Z) :UPCASE :DOWNCASE "x z") (%P (QUOTE \x Z) :UPCASE :CAPITALIZE "x Z") (%P (QUOTE \x Z) :DOWNCASE :UPCASE "X Z") (%P (QUOTE \x Z) :DOWNCASE :DOWNCASE "x Z") (%P (QUOTE \x Z) :DOWNCASE :CAPITALIZE "X Z") (%P (QUOTE \x Z) :PRESERVE :UPCASE "x Z") (%P (QUOTE \x Z) :PRESERVE :DOWNCASE "x Z") (%P (QUOTE \x Z) :PRESERVE :CAPITALIZE "x Z") (%P (QUOTE \x Z) :INVERT :UPCASE "x Z") (%P (QUOTE \x Z) :INVERT :DOWNCASE "x Z") (%P (QUOTE \x Z) :INVERT :CAPITALIZE "x Z"))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.RANDOM.1 (LET ((PKG-NAME "PRINT-SYMBOL-TEST-PACKAGE")) (WHEN (FIND-PACKAGE PKG-NAME) (DELETE-PACKAGE PKG-NAME)) (PROG1 (LET ((*PACKAGE* (MAKE-PACKAGE PKG-NAME))) (TRIM-LIST (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (LOOP REPEAT 50 NCONC (RANDOMLY-CHECK-READABILITY (INTERN (STRING C))))) 10)))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PRINT.SYMBOL.RANDOM.2 (LET ((PKG-NAME "PRINT-SYMBOL-TEST-PACKAGE")) (WHEN (FIND-PACKAGE PKG-NAME) (DELETE-PACKAGE PKG-NAME)) (PROG1 (LET ((*PACKAGE* (MAKE-PACKAGE PKG-NAME)) (COUNT 0)) (TRIM-LIST (LOOP FOR C1 = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR C2 = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR STRING = (CONCATENATE (QUOTE STRING) (STRING C1) (STRING C2)) FOR RESULT = (RANDOMLY-CHECK-READABILITY (INTERN STRING)) FOR TRIES FROM 1 TO 10000 WHEN RESULT DO (INCF COUNT) NCONC RESULT WHEN (= COUNT 10) COLLECT (FORMAT NIL "... ~A out of ~A, stopping test ..." COUNT TRIES) WHILE (< COUNT 10)) 10)))) NIL)
;; Loading (DEFTEST PRINT.SYMBOL.RANDOM.3 (LET ((COUNT 0) (SYMBOLS (MAKE-ARRAY (QUOTE (1000)) :FILL-POINTER 0 :ADJUSTABLE T))) (DO-ALL-SYMBOLS (S) (WHEN (SYMBOL-PACKAGE S) (VECTOR-PUSH-EXTEND S SYMBOLS (ARRAY-DIMENSION SYMBOLS 0)))) (LOOP FOR I = (RANDOM (FILL-POINTER SYMBOLS)) FOR S = (AREF SYMBOLS I) FOR TRIES FROM 1 TO 10000 FOR PROBLEM = (RANDOMLY-CHECK-READABILITY S) NCONC PROBLEM WHEN PROBLEM DO (INCF COUNT) WHILE (< COUNT 10))) NIL)
;; Loading (DEFTEST PRINT.SYMBOL.RANDOM.4 (LET ((COUNT 0) (SYMBOLS (MAKE-ARRAY (QUOTE (1000)) :FILL-POINTER 0 :ADJUSTABLE T))) (DO-ALL-SYMBOLS (S) (WHEN (SYMBOL-PACKAGE S) (VECTOR-PUSH-EXTEND S SYMBOLS (ARRAY-DIMENSION SYMBOLS 0)))) (LOOP FOR I = (RANDOM (FILL-POINTER SYMBOLS)) FOR S = (AREF SYMBOLS I) FOR TRIES FROM 1 TO 10000 FOR PROBLEM = (LET ((*PACKAGE* (SYMBOL-PACKAGE S))) (RANDOMLY-CHECK-READABILITY S)) NCONC PROBLEM WHEN PROBLEM DO (INCF COUNT) WHILE (< COUNT 10))) NIL)
;; Loading (DEFTEST PRIN1.SYMBOL.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRIN1.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE X) :UPCASE :UPCASE (QUOTE ("x" "X" "\\X" "|X|"))) (%P (QUOTE X) :UPCASE :DOWNCASE (QUOTE ("x" "X" "\\X" "|X|"))) (%P (QUOTE X) :UPCASE :CAPITALIZE (QUOTE ("x" "X" "\\X" "|X|"))) (%P (QUOTE X) :DOWNCASE :UPCASE (QUOTE ("\\X" "|X|"))) (%P (QUOTE X) :DOWNCASE :DOWNCASE (QUOTE ("\\X" "|X|"))) (%P (QUOTE X) :DOWNCASE :CAPITALIZE (QUOTE ("\\X" "|X|"))) (%P (QUOTE X) :PRESERVE :UPCASE (QUOTE ("X" "\\X" "|X|"))) (%P (QUOTE X) :PRESERVE :DOWNCASE (QUOTE ("X" "\\X" "|X|"))) (%P (QUOTE X) :PRESERVE :CAPITALIZE (QUOTE ("X" "\\X" "|X|"))) (%P (QUOTE X) :INVERT :UPCASE (QUOTE ("x" "\\X" "|X|"))) (%P (QUOTE X) :INVERT :DOWNCASE (QUOTE ("x" "\\X" "|X|"))) (%P (QUOTE X) :INVERT :CAPITALIZE (QUOTE ("x" "\\X" "|X|"))))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRIN1.SYMBOL.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRIN1.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE \x) :UPCASE :UPCASE (QUOTE ("\\x" "|x|"))) (%P (QUOTE \x) :UPCASE :DOWNCASE (QUOTE ("\\x" "|x|"))) (%P (QUOTE \x) :UPCASE :CAPITALIZE (QUOTE ("\\x" "|x|"))) (%P (QUOTE \x) :DOWNCASE :UPCASE (QUOTE ("x" "X" "\\x" "|x|"))) (%P (QUOTE \x) :DOWNCASE :DOWNCASE (QUOTE ("x" "X" "\\x" "|x|"))) (%P (QUOTE \x) :DOWNCASE :CAPITALIZE (QUOTE ("x" "X" "\\x" "|x|"))) (%P (QUOTE \x) :PRESERVE :UPCASE (QUOTE ("x" "\\x" "|x|"))) (%P (QUOTE \x) :PRESERVE :DOWNCASE (QUOTE ("x" "\\x" "|x|"))) (%P (QUOTE \x) :PRESERVE :CAPITALIZE (QUOTE ("x" "\\x" "|x|"))) (%P (QUOTE \x) :INVERT :UPCASE (QUOTE ("X" "\\x" "|x|"))) (%P (QUOTE \x) :INVERT :DOWNCASE (QUOTE ("X" "\\x" "|x|"))) (%P (QUOTE \x) :INVERT :CAPITALIZE (QUOTE ("X" "\\x" "|x|"))))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRIN1.SYMBOL.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (*READTABLE* (COPY-READTABLE NIL))) (FLET ((%P (&REST ARGS) (APPLY (FUNCTION PRIN1.SYMBOL.FN) ARGS))) (VALUES (%P (QUOTE 1) :UPCASE :UPCASE (QUOTE ("\\1" "|1|"))) (%P (QUOTE 1) :UPCASE :DOWNCASE (QUOTE ("\\1" "|1|"))) (%P (QUOTE 1) :UPCASE :CAPITALIZE (QUOTE ("\\1" "|1|"))) (%P (QUOTE 1) :DOWNCASE :UPCASE (QUOTE ("1" "\\1" "|1|"))) (%P (QUOTE 1) :DOWNCASE :DOWNCASE (QUOTE ("1" "\\1" "|1|"))) (%P (QUOTE 1) :DOWNCASE :CAPITALIZE (QUOTE ("1" "\\1" "|1|"))) (%P (QUOTE 1) :PRESERVE :UPCASE (QUOTE ("1" "\\1" "|1|"))) (%P (QUOTE 1) :PRESERVE :DOWNCASE (QUOTE ("1" "\\1" "|1|"))) (%P (QUOTE 1) :PRESERVE :CAPITALIZE (QUOTE ("1" "\\1" "|1|"))) (%P (QUOTE 1) :INVERT :UPCASE (QUOTE ("1" "\\1" "|1|"))) (%P (QUOTE 1) :INVERT :DOWNCASE (QUOTE ("1" "\\1" "|1|"))) (%P (QUOTE 1) :INVERT :CAPITALIZE (QUOTE ("1" "\\1" "|1|"))))))) T T T T T T T T T T T T)
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.1 (WITH-STANDARD-IO-SYNTAX (LET ((S (WRITE-TO-STRING (MAKE-SYMBOL "ABC") :GENSYM T :CASE :UPCASE :ESCAPE T :READABLY NIL))) (IF (STRING= S "#:ABC") T S))) T)
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.2 (WITH-STANDARD-IO-SYNTAX (LET ((S (WRITE-TO-STRING (MAKE-SYMBOL "ABC") :GENSYM NIL :CASE :UPCASE :READABLY NIL :ESCAPE NIL))) (IF (STRING= S "ABC") T S))) T)
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.3 (WITH-STANDARD-IO-SYNTAX (LET ((S (WRITE-TO-STRING (MAKE-SYMBOL "ABC") :GENSYM NIL :CASE :UPCASE :READABLY T :ESCAPE NIL))) (IF (AND (STRING= (SUBSEQ S 0 2) "#:") (STRING= (SYMBOL-NAME (READ-FROM-STRING S)) "ABC")) T S))) T)
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.4 (WITH-STANDARD-IO-SYNTAX (LET ((S (WRITE-TO-STRING (MAKE-SYMBOL "ABC") :GENSYM NIL :CASE :UPCASE :READABLY NIL :ESCAPE T))) (IF (STRING= S "ABC") T S))) T)
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.5 (WITH-STANDARD-IO-SYNTAX (LET ((PKG-NAME "PRINT-SYMBOL-TEST-PACKAGE")) (WHEN (FIND-PACKAGE PKG-NAME) (DELETE-PACKAGE PKG-NAME)) (LET ((PKG (MAKE-PACKAGE PKG-NAME))) (MULTIPLE-VALUE-PROG1 (LET* ((*PACKAGE* (FIND-PACKAGE "CL-TEST")) (S (INTERN "ABC" PKG))) (VALUES (WRITE-TO-STRING S :CASE :UPCASE :READABLY NIL :ESCAPE T) (LET ((*PACKAGE* PKG)) (WRITE-TO-STRING S :CASE :UPCASE :READABLY NIL :ESCAPE T)) (LET ((*PACKAGE* PKG)) (WRITE-TO-STRING S :CASE :DOWNCASE :READABLY NIL :ESCAPE T)))))))) "PRINT-SYMBOL-TEST-PACKAGE::ABC" "ABC" "abc")
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.6 (LET ((PKG-NAME "PRINT-SYMBOL-TEST-PACKAGE")) (WHEN (FIND-PACKAGE PKG-NAME) (DELETE-PACKAGE PKG-NAME)) (LET ((PKG (MAKE-PACKAGE PKG-NAME))) (PROG1 (WITH-STANDARD-IO-SYNTAX (LET* ((*PACKAGE* PKG) (S (INTERN "X" PKG))) (WRITE-TO-STRING S :CASE :UPCASE :READABLY NIL)))))) "X")
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.6A (WITH-STANDARD-IO-SYNTAX (LET ((*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (WRITE-TO-STRING (QUOTE X) :CASE :UPCASE :READABLY NIL))) "X")
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.6B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE SPEED (SAFETY 0))) (WITH-STANDARD-IO-SYNTAX (LET ((*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (WRITE-TO-STRING (QUOTE X) :CASE :UPCASE :READABLY NIL))))))) "X")
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.7 (WITH-STANDARD-IO-SYNTAX (LET ((PKG-NAME "PRINT-SYMBOL-TEST-PACKAGE") (PKG-NAME2 "ANOTHER-PRINT-SYMBOL-TEST-PACKAGE")) (WHEN (FIND-PACKAGE PKG-NAME) (DELETE-PACKAGE PKG-NAME)) (WHEN (FIND-PACKAGE PKG-NAME2) (DELETE-PACKAGE PKG-NAME2)) (PROG1 (LET* ((PKG (MAKE-PACKAGE PKG-NAME)) (PKG2 (MAKE-PACKAGE PKG-NAME2)) (S (INTERN "ABC" PKG))) (IMPORT S PKG2) (LET ((*PACKAGE* PKG2)) (WRITE-TO-STRING S :CASE :UPCASE :READABLY NIL :ESCAPE T)))))) "ABC")
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.8 (WITH-STANDARD-IO-SYNTAX (LET ((PKG-NAME "PRINT-SYMBOL-TEST-PACKAGE") (PKG-NAME2 "ANOTHER-PRINT-SYMBOL-TEST-PACKAGE")) (WHEN (FIND-PACKAGE PKG-NAME) (DELETE-PACKAGE PKG-NAME)) (WHEN (FIND-PACKAGE PKG-NAME2) (DELETE-PACKAGE PKG-NAME2)) (PROG1 (LET* ((PKG (MAKE-PACKAGE PKG-NAME)) (PKG2 (MAKE-PACKAGE PKG-NAME2)) (S (INTERN "ABC" PKG2))) (IMPORT S PKG) (DELETE-PACKAGE PKG2) (LET ((*PACKAGE* PKG)) (WRITE-TO-STRING S :CASE :UPCASE :GENSYM T :READABLY NIL :ESCAPE T)))))) "#:ABC")
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.9 (WITH-STANDARD-IO-SYNTAX (LET ((PKG-NAME "PRINT-SYMBOL-TEST-PACKAGE")) (WHEN (FIND-PACKAGE PKG-NAME) (DELETE-PACKAGE PKG-NAME)) (PROG1 (LET* ((PKG (MAKE-PACKAGE PKG-NAME)) (S (INTERN "ABC" PKG))) (EXPORT S PKG) (LET ((*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (WRITE-TO-STRING S :CASE :UPCASE :READABLY NIL :ESCAPE T)))))) "PRINT-SYMBOL-TEST-PACKAGE:ABC")
;; Loading (DEFTEST PRINT.SYMBOL.PREFIX.10 (WITH-STANDARD-IO-SYNTAX (LET ((PKG-NAME "PRINT-SYMBOL-TEST-PACKAGE")) (WHEN (FIND-PACKAGE PKG-NAME) (DELETE-PACKAGE PKG-NAME)) (PROG1 (LET* ((PKG (MAKE-PACKAGE PKG-NAME)) (S :X)) (IMPORT S PKG) (LET ((*PACKAGE* PKG)) (WRITE-TO-STRING S :CASE :UPCASE :READABLY NIL :ESCAPE T)))))) ":X")
;; Loading (LOAD "print-strings.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-strings.lsp 81CC4A27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINT.STRING.1 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING "" :ESCAPE NIL :READABLY NIL)) "")
;; Loading (DEFTEST PRINT.STRING.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S1 = (STRING C) FOR S2 = (WRITE-TO-STRING S1 :ESCAPE NIL :READABLY NIL) UNLESS (STRING= S1 S2) COLLECT (LIST C S1 S2))) NIL)
;; Loading (DEFTEST PRINT.STRING.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I BELOW 256 FOR C = (CODE-CHAR I) WHEN C NCONC (LET* ((S1 (STRING C)) (S2 (WRITE-TO-STRING S1 :ESCAPE NIL :READABLY NIL))) (UNLESS (STRING= S1 S2) (LIST (LIST C S1 S2)))))) NIL)
;; Loading (DEFTEST PRINT.STRING.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S1 = (STRING C) FOR S2 = (WRITE-TO-STRING S1 :ESCAPE T :READABLY NIL) UNLESS (OR (FIND C "\"\\") (STRING= (CONCATENATE (QUOTE STRING) "\"" S1 "\"") S2)) COLLECT (LIST C S1 S2))) NIL)
;; Loading (DEFTEST PRINT.STRING.5 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING "\"" :ESCAPE T :READABLY NIL)) "\"\\\"\"")
;; Loading (DEFTEST PRINT.STRING.6 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING "\\" :ESCAPE T :READABLY NIL)) "\"\\\\\"")
;; Loading (DEFTEST PRINT.STRING.7 (WITH-STANDARD-IO-SYNTAX (LOOP FOR S1 IN (REMOVE-IF-NOT (FUNCTION STRINGP) *UNIVERSE*) FOR S2 = (WRITE-TO-STRING S1 :ESCAPE NIL :READABLY NIL) FOR S3 = (WRITE-TO-STRING S1 :ARRAY T :ESCAPE NIL :READABLY NIL) UNLESS (STRING= S2 S3) COLLECT (LIST S1 S2 S3))) NIL)
;; Loading (DEFTEST PRINT.STRING.8 (WITH-STANDARD-IO-SYNTAX (LOOP FOR S1 IN (REMOVE-IF-NOT (FUNCTION STRINGP) *UNIVERSE*) FOR S2 = (WRITE-TO-STRING S1 :ESCAPE T :READABLY NIL) FOR S3 = (WRITE-TO-STRING S1 :ARRAY T :ESCAPE T :READABLY NIL) UNLESS (STRING= S2 S3) COLLECT (LIST S1 S2 S3))) NIL)
;; Loading (DEFTEST PRINT.STRING.9 (LET* ((S (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij")) (RESULT (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING S :ESCAPE NIL :READABLY NIL)))) (OR (AND (STRING= RESULT "abcde") T) RESULT)) T)
;; Loading (DEFTEST PRINT.STRING.10 (LET* ((S (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "aBcDefGHij")) (RESULT (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING S :ESCAPE T :READABLY NIL)))) (OR (AND (STRING= RESULT "\"aBcDe\"") T) RESULT)) T)
;; Loading (DEFTEST PRINT.STRING.11 (LET* ((S (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefgh" :ADJUSTABLE T)) (RESULT (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING S :ESCAPE T :READABLY NIL)))) (OR (AND (STRING= RESULT "\"abcdefgh\"") T) RESULT)) T)
;; Loading (DEFTEST PRINT.STRING.12 (LET* ((S1 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefgh")) (S2 (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET 2)) (RESULT (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING S2 :ESCAPE T :READABLY NIL)))) (OR (AND (STRING= RESULT "\"cdef\"") T) RESULT)) T)
;; Loading (DEFTEST PRINT.STRING.13 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING "1234" :ARRAY NIL :READABLY NIL :ESCAPE T)) "\"1234\"")
;; Loading (DEFTEST PRINT.STRING.NIL.1 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (WRITE-TO-STRING S :ESCAPE NIL :READABLY NIL)) "")
;; Loading (DEFTEST PRINT.STRING.NIL.2 :NOTES (:NIL-VECTORS-ARE-STRINGS) (LET ((S (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL))) (WRITE-TO-STRING S :ESCAPE T :READABLY NIL)) "\"\"")
;; Loading (DEFTEST PRINT.STRING.RANDOM.1 (TRIM-LIST (LOOP FOR LEN = (1+ (RANDOM 5)) FOR S = (COERCE (LOOP REPEAT LEN COLLECT (RANDOM-FROM-SEQ +STANDARD-CHARS+)) (QUOTE STRING)) REPEAT 1000 APPEND (RANDOMLY-CHECK-READABILITY S)) 10) NIL)
;; Loading (LOAD "print-cons.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-cons.lsp 81DCC5E7>
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PRINT.CONS.1 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (A)) :CASE :UPCASE :PRETTY NIL :ESCAPE NIL))) "(A)")
;; Loading (DEFTEST PRINT.CONS.2 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (A B)) :CASE :UPCASE :PRETTY NIL :ESCAPE NIL))) "(A B)")
;; Loading (DEFTEST PRINT.CONS.3 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (CONS (QUOTE A) (QUOTE B)) :CASE :UPCASE :PRETTY NIL :ESCAPE NIL))) "(A . B)")
;; Loading (DEFTEST PRINT.CONS.4 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (LET ((S (QUOTE #:X))) (CONS S S)) :CASE :UPCASE :PRETTY NIL :ESCAPE T))) "(#:X . #:X)")
;; Loading (DEFTEST PRINT.CONS.5 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (LET ((S (QUOTE #:X))) (CONS S S)) :CASE :UPCASE :PRETTY NIL :ESCAPE T :CIRCLE T))) "(#1=#:X . #1#)")
;; Loading (DEFTEST PRINT.CONS.6 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (LET ((S1 (MAKE-SYMBOL "X")) (S2 (MAKE-SYMBOL "X"))) (LIST S1 S2 S1 S2)) :CASE :UPCASE :PRETTY NIL :ESCAPE T :CIRCLE T))) "(#1=#:X #2=#:X #1# #2#)")
;; Loading (DEFTEST PRINT.CONS.7 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (LET ((A (LIST 17 NIL))) (SETF (CDR A) A) A) :CIRCLE T :PRETTY NIL :ESCAPE NIL))) "#1=(17 . #1#)")
;; Loading (DEFTEST PRINT.CONS.RANDOM.1 (TRIM-LIST (LOOP FOR X = (MAKE-RANDOM-CONS-TREE (RANDOM 100)) REPEAT 50 NCONC (RANDOMLY-CHECK-READABILITY X)) 10) NIL)
;; Loading (DEFTEST PRINT.CONS.RANDOM.2 (LOOP REPEAT 50 NCONC (LET* ((N 20) (CONSES (APPLY (FUNCTION VECTOR) (LOOP REPEAT N COLLECT (CONS NIL NIL))))) (LOOP FOR X ACROSS CONSES FOR J = (RANDOM N) FOR K = (RANDOM N) DO (SETF (CAR X) (ELT CONSES J) (CDR X) (ELT CONSES K))) (RANDOMLY-CHECK-READABILITY (ELT CONSES 0) :TEST (FUNCTION IS-SIMILAR) :CIRCLE T))) NIL)
;; Loading (DEFTEST PRINT.CONS.LENGTH.1 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (A)) :LENGTH 0 :PRETTY NIL :ESCAPE NIL))) "(...)")
;; Loading (DEFTEST PRINT.CONS.LENGTH.2 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (81)) :LENGTH 1 :PRETTY NIL :ESCAPE NIL))) "(81)")
;; Loading (DEFTEST PRINT.CONS.LENGTH.3 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (4 . 8)) :LENGTH 1 :PRETTY NIL :ESCAPE NIL))) "(4 . 8)")
;; Loading (DEFTEST PRINT.CONS.LENGTH.4 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (4 8)) :LENGTH 1 :PRETTY NIL :ESCAPE NIL))) "(4 ...)")
;; Loading (DEFTEST PRINT.CONS.LENGTH.5 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (A B C D E F G H I J K L M N O P)) :CASE :DOWNCASE :LENGTH 10 :PRETTY NIL :ESCAPE NIL))) "(a b c d e f g h i j ...)")
;; Loading (DEFTEST PRINT.CONS.LENGTH.6 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (((((((0)))))))) :CASE :DOWNCASE :LENGTH 3 :PRETTY NIL :ESCAPE NIL))) "(((((((0)))))))")
;; Loading (DEFTEST PRINT.CONS.LEVEL.1 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (A)) :CASE :DOWNCASE :LEVEL 0 :ESCAPE NIL :PRETTY NIL))) "#")
;; Loading (DEFTEST PRINT.CONS.LEVEL.2 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (A)) :CASE :DOWNCASE :LEVEL 1 :ESCAPE NIL :PRETTY NIL))) "(a)")
;; Loading (DEFTEST PRINT.CONS.LEVEL.3 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE ((A))) :CASE :DOWNCASE :LEVEL 1 :ESCAPE NIL :PRETTY NIL))) "(#)")
;; Loading (DEFTEST PRINT.CONS.LEVEL.4 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (A)) :CASE :DOWNCASE :LEVEL 2 :ESCAPE NIL :PRETTY NIL))) "(a)")
;; Loading (DEFTEST PRINT.CONS.LEVEL.5 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WRITE-TO-STRING (QUOTE (#(A) #*1101 "abc")) :CASE :DOWNCASE :LEVEL 1 :PRETTY NIL))) "(# #*1101 \"abc\")")
;; Loading (LOAD "print-backquote.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-backquote.lsp 81EE5BC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (COMPILE-AND-LOAD "backquote-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/backquote-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFUN MAKE-RANDOM-BACKQUOTED-FORM (SIZE) (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "`" (MAKE-RANDOM-BACKQUOTED-SEQUENCE-STRING SIZE)))))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFUN MAKE-RANDOM-BACKQUOTED-SEQUENCE-STRING (SIZE) (CASE SIZE ((0 1) (MAKE-RANDOM-BACKQUOTED-STRING SIZE)) (T (LET* ((NELEMENTS (1+ (MIN (RANDOM (1- SIZE)) (RANDOM (1- SIZE)) 9))) (SIZES (RANDOM-PARTITION (1- SIZE) NELEMENTS)) (SUBSTRINGS (MAPCAR (FUNCTION MAKE-RANDOM-BACKQUOTED-STRING) SIZES))) (APPLY (FUNCTION CONCATENATE) (QUOTE STRING) "(" (CAR SUBSTRINGS) (IF NIL (NCONC (LOOP FOR S IN (CDDR SUBSTRINGS) COLLECT " " COLLECT S) (LIST " . " (CADR SUBSTRINGS) ")")) (NCONC (LOOP FOR S IN (CDR SUBSTRINGS) COLLECT " " COLLECT S) (LIST ")")))))))).
;; Compiling form (DEFUN MAKE-RANDOM-BACKQUOTED-STRING (SIZE) (IF (<= SIZE 1) (RCASE (1 "()") (1 (STRING (RANDOM-FROM-SEQ #("&ALLOW-OTHER-KEYS" "&AUX" "&BODY" "&ENVIRONMENT" "&KEY" "&OPTIONAL" "&REST" "&WHOLE" "*" "**" "***" "*BREAK-ON-SIGNALS*" "*COMPILE-FILE-PATHNAME*" "*COMPILE-FILE-TRUENAME*" "*COMPILE-PRINT*" "*COMPILE-VERBOSE*" "*DEBUG-IO*" "*DEBUGGER-HOOK*" "*DEFAULT-PATHNAME-DEFAULTS*" "*ERROR-OUTPUT*" "*FEATURES*" "*GENSYM-COUNTER*" "*LOAD-PATHNAME*" "*LOAD-PRINT*" "*LOAD-TRUENAME*" "*LOAD-VERBOSE*" "*MACROEXPAND-HOOK*" "*MODULES*" "*PACKAGE*" "*PRINT-ARRAY*" "*PRINT-BASE*" "*PRINT-CASE*" "*PRINT-CIRCLE*" "*PRINT-ESCAPE*" "*PRINT-GENSYM*" "*PRINT-LENGTH*" "*PRINT-LEVEL*" "*PRINT-LINES*" "*PRINT-MISER-WIDTH*" "*PRINT-PPRINT-DISPATCH*" "*PRINT-PRETTY*" "*PRINT-RADIX*" "*PRINT-READABLY*" "*PRINT-RIGHT-MARGIN*" "*QUERY-IO*" "*RANDOM-STATE*" "*READ-BASE*" "*READ-DEFAULT-FLOAT-FORMAT*" "*READ-EVAL*" "*READ-SUPPRESS*" "*READTABLE*" "*STANDARD-INPUT*" "*STANDARD-OUTPUT*" "*TERMINAL-IO*" "*TRACE-OUTPUT*" "+" "++" "+++" "-" "/" "//" "///" "/=" "1+" "1-" "<" "<=" "=" ">" ">=" "ABORT" "ABS" "ACONS" "ACOS" "ACOSH" "ADD-METHOD" "ADJOIN" "ADJUST-ARRAY" "ADJUSTABLE-ARRAY-P" "ALLOCATE-INSTANCE" "ALPHA-CHAR-P" "ALPHANUMERICP" "AND" "APPEND" "APPLY" "APROPOS" "APROPOS-LIST" "AREF" "ARITHMETIC-ERROR" "ARITHMETIC-ERROR-OPERANDS" "ARITHMETIC-ERROR-OPERATION" "ARRAY" "ARRAY-DIMENSION" "ARRAY-DIMENSION-LIMIT" "ARRAY-DIMENSIONS" "ARRAY-DISPLACEMENT" "ARRAY-ELEMENT-TYPE" "ARRAY-HAS-FILL-POINTER-P" "ARRAY-IN-BOUNDS-P" "ARRAY-RANK" "ARRAY-RANK-LIMIT" "ARRAY-ROW-MAJOR-INDEX" "ARRAY-TOTAL-SIZE" "ARRAY-TOTAL-SIZE-LIMIT" "ARRAYP" "ASH" "ASIN" "ASINH" "ASSERT" "ASSOC" "ASSOC-IF" "ASSOC-IF-NOT" "ATAN" "ATANH" "ATOM" "BASE-CHAR" "BASE-STRING" "BIGNUM" "BIT" "BIT-AND" "BIT-ANDC1" "BIT-ANDC2" "BIT-EQV" "BIT-IOR" "BIT-NAND" "BIT-NOR" "BIT-NOT" "BIT-ORC1" "BIT-ORC2" "BIT-VECTOR" "BIT-VECTOR-P" "BIT-XOR" "BLOCK" "BOOLE" "BOOLE-1" "BOOLE-2" "BOOLE-AND" "BOOLE-ANDC1" "BOOLE-ANDC2" "BOOLE-C1" "BOOLE-C2" "BOOLE-CLR" "BOOLE-EQV" "BOOLE-IOR" "BOOLE-NAND" "BOOLE-NOR" "BOOLE-ORC1" "BOOLE-ORC2" "BOOLE-SET" "BOOLE-XOR" "BOOLEAN" "BOTH-CASE-P" "BOUNDP" "BREAK" "BROADCAST-STREAM" "BROADCAST-STREAM-STREAMS" "BUILT-IN-CLASS" "BUTLAST" "BYTE" "BYTE-POSITION" "BYTE-SIZE" "CAAAAR" "CAAADR" "CAAAR" "CAADAR" "CAADDR" "CAADR" "CAAR" "CADAAR" "CADADR" "CADAR" "CADDAR" "CADDDR" "CADDR" "CADR" "CALL-ARGUMENTS-LIMIT" "CALL-METHOD" "CALL-NEXT-METHOD" "CAR" "CASE" "CATCH" "CCASE" "CDAAAR" "CDAADR" "CDAAR" "CDADAR" "CDADDR" "CDADR" "CDAR" "CDDAAR" "CDDADR" "CDDAR" "CDDDAR" "CDDDDR" "CDDDR" "CDDR" "CDR" "CEILING" "CELL-ERROR" "CELL-ERROR-NAME" "CERROR" "CHANGE-CLASS" "CHAR" "CHAR-CODE" "CHAR-CODE-LIMIT" "CHAR-DOWNCASE" "CHAR-EQUAL" "CHAR-GREATERP" "CHAR-INT" "CHAR-LESSP" "CHAR-NAME" "CHAR-NOT-EQUAL" "CHAR-NOT-GREATERP" "CHAR-NOT-LESSP" "CHAR-UPCASE" "CHAR/=" "CHAR<" "CHAR<=" "CHAR=" "CHAR>" "CHAR>=" "CHARACTER" "CHARACTERP" "CHECK-TYPE" "CIS" "CLASS" "CLASS-NAME" "CLASS-OF" "CLEAR-INPUT" "CLEAR-OUTPUT" "CLOSE" "CLRHASH" "CODE-CHAR" "COERCE" "COMPILATION-SPEED" "COMPILE" "COMPILE-FILE" "COMPILE-FILE-PATHNAME" "COMPILED-FUNCTION" "COMPILED-FUNCTION-P" "COMPILER-MACRO" "COMPILER-MACRO-FUNCTION" "COMPLEMENT" "COMPLEX" "COMPLEXP" "COMPUTE-APPLICABLE-METHODS" "COMPUTE-RESTARTS" "CONCATENATE" "CONCATENATED-STREAM" "CONCATENATED-STREAM-STREAMS" "COND" "CONDITION" "CONJUGATE" "CONS" "CONSP" "CONSTANTLY" "CONSTANTP" "CONTINUE" "CONTROL-ERROR" "COPY-ALIST" "COPY-LIST" "COPY-PPRINT-DISPATCH" "COPY-READTABLE" "COPY-SEQ" "COPY-STRUCTURE" "COPY-SYMBOL" "COPY-TREE" "COS" "COSH" "COUNT" "COUNT-IF" "COUNT-IF-NOT" "CTYPECASE" "DEBUG" "DECF" "DECLAIM" "DECLARATION" "DECLARE" "DECODE-FLOAT" "DECODE-UNIVERSAL-TIME" "DEFCLASS" "DEFCONSTANT" "DEFGENERIC" "DEFINE-COMPILER-MACRO" "DEFINE-CONDITION" "DEFINE-METHOD-COMBINATION" "DEFINE-MODIFY-MACRO" "DEFINE-SETF-EXPANDER" "DEFINE-SYMBOL-MACRO" "DEFMACRO" "DEFMETHOD" "DEFPACKAGE" "DEFPARAMETER" "DEFSETF" "DEFSTRUCT" "DEFTYPE" "DEFUN" "DEFVAR" "DELETE" "DELETE-DUPLICATES" "DELETE-FILE" "DELETE-IF" "DELETE-IF-NOT" "DELETE-PACKAGE" "DENOMINATOR" "DEPOSIT-FIELD" "DESCRIBE" "DESCRIBE-OBJECT" "DESTRUCTURING-BIND" "DIGIT-CHAR" "DIGIT-CHAR-P" "DIRECTORY" "DIRECTORY-NAMESTRING" "DISASSEMBLE" "DIVISION-BY-ZERO" "DO" "DO*" "DO-ALL-SYMBOLS" "DO-EXTERNAL-SYMBOLS" "DO-SYMBOLS" "DOCUMENTATION" "DOLIST" "DOTIMES" "DOUBLE-FLOAT" "DOUBLE-FLOAT-EPSILON" "DOUBLE-FLOAT-NEGATIVE-EPSILON" "DPB" "DRIBBLE" "DYNAMIC-EXTENT" "ECASE" "ECHO-STREAM" "ECHO-STREAM-INPUT-STREAM" "ECHO-STREAM-OUTPUT-STREAM" "ED" "EIGHTH" "ELT" "ENCODE-UNIVERSAL-TIME" "END-OF-FILE" "ENDP" "ENOUGH-NAMESTRING" "ENSURE-DIRECTORIES-EXIST" "ENSURE-GENERIC-FUNCTION" "EQ" "EQL" "EQUAL" "EQUALP" "ERROR" "ETYPECASE" "EVAL" "EVAL-WHEN" "EVENP" "EVERY" "EXP" "EXPORT" "EXPT" "EXTENDED-CHAR" "FBOUNDP" "FCEILING" "FDEFINITION" "FFLOOR" "FIFTH" "FILE-AUTHOR" "FILE-ERROR" "FILE-ERROR-PATHNAME" "FILE-LENGTH" "FILE-NAMESTRING" "FILE-POSITION" "FILE-STREAM" "FILE-STRING-LENGTH" "FILE-WRITE-DATE" "FILL" "FILL-POINTER" "FIND" "FIND-ALL-SYMBOLS" "FIND-CLASS" "FIND-IF" "FIND-IF-NOT" "FIND-METHOD" "FIND-PACKAGE" "FIND-RESTART" "FIND-SYMBOL" "FINISH-OUTPUT" "FIRST" "FIXNUM" "FLET" "FLOAT" "FLOAT-DIGITS" "FLOAT-PRECISION" "FLOAT-RADIX" "FLOAT-SIGN" "FLOATING-POINT-INEXACT" "FLOATING-POINT-INVALID-OPERATION" "FLOATING-POINT-OVERFLOW" "FLOATING-POINT-UNDERFLOW" "FLOATP" "FLOOR" "FMAKUNBOUND" "FORCE-OUTPUT" "FORMAT" "FORMATTER" "FOURTH" "FRESH-LINE" "FROUND" "FTRUNCATE" "FTYPE" "FUNCALL" "FUNCTION" "FUNCTION-KEYWORDS" "FUNCTION-LAMBDA-EXPRESSION" "FUNCTIONP" "GCD" "GENERIC-FUNCTION" "GENSYM" "GENTEMP" "GET" "GET-DECODED-TIME" "GET-DISPATCH-MACRO-CHARACTER" "GET-INTERNAL-REAL-TIME" "GET-INTERNAL-RUN-TIME" "GET-MACRO-CHARACTER" "GET-OUTPUT-STREAM-STRING" "GET-PROPERTIES" "GET-SETF-EXPANSION" "GET-UNIVERSAL-TIME" "GETF" "GETHASH" "GO" "GRAPHIC-CHAR-P" "HANDLER-BIND" "HANDLER-CASE" "HASH-TABLE" "HASH-TABLE-COUNT" "HASH-TABLE-P" "HASH-TABLE-REHASH-SIZE" "HASH-TABLE-REHASH-THRESHOLD" "HASH-TABLE-SIZE" "HASH-TABLE-TEST" "HOST-NAMESTRING" "IDENTITY" "IF" "IGNORABLE" "IGNORE" "IGNORE-ERRORS" "IMAGPART" "IMPORT" "IN-PACKAGE" "INCF" "INITIALIZE-INSTANCE" "INLINE" "INPUT-STREAM-P" "INSPECT" "INTEGER" "INTEGER-DECODE-FLOAT" "INTEGER-LENGTH" "INTEGERP" "INTERACTIVE-STREAM-P" "INTERN" "INTERNAL-TIME-UNITS-PER-SECOND" "INTERSECTION" "INVALID-METHOD-ERROR" "INVOKE-DEBUGGER" "INVOKE-RESTART" "INVOKE-RESTART-INTERACTIVELY" "ISQRT" "KEYWORD" "KEYWORDP" "LABELS" "LAMBDA" "LAMBDA-LIST-KEYWORDS" "LAMBDA-PARAMETERS-LIMIT" "LAST" "LCM" "LDB" "LDB-TEST" "LDIFF" "LEAST-NEGATIVE-DOUBLE-FLOAT" "LEAST-NEGATIVE-LONG-FLOAT" "LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT" "LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT" "LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT" "LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT" "LEAST-NEGATIVE-SHORT-FLOAT" "LEAST-NEGATIVE-SINGLE-FLOAT" "LEAST-POSITIVE-DOUBLE-FLOAT" "LEAST-POSITIVE-LONG-FLOAT" "LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT" "LEAST-POSITIVE-NORMALIZED-LONG-FLOAT" "LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT" "LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT" "LEAST-POSITIVE-SHORT-FLOAT" "LEAST-POSITIVE-SINGLE-FLOAT" "LENGTH" "LET" "LET*" "LISP-IMPLEMENTATION-TYPE" "LISP-IMPLEMENTATION-VERSION" "LIST" "LIST*" "LIST-ALL-PACKAGES" "LIST-LENGTH" "LISTEN" "LISTP" "LOAD" "LOAD-LOGICAL-PATHNAME-TRANSLATIONS" "LOAD-TIME-VALUE" "LOCALLY" "LOG" "LOGAND" "LOGANDC1" "LOGANDC2" "LOGBITP" "LOGCOUNT" "LOGEQV" "LOGICAL-PATHNAME" "LOGICAL-PATHNAME-TRANSLATIONS" "LOGIOR" "LOGNAND" "LOGNOR" "LOGNOT" "LOGORC1" "LOGORC2" "LOGTEST" "LOGXOR" "LONG-FLOAT" "LONG-FLOAT-EPSILON" "LONG-FLOAT-NEGATIVE-EPSILON" "LONG-SITE-NAME" "LOOP" "LOOP-FINISH" "LOWER-CASE-P" "MACHINE-INSTANCE" "MACHINE-TYPE" "MACHINE-VERSION" "MACRO-FUNCTION" "MACROEXPAND" "MACROEXPAND-1" "MACROLET" "MAKE-ARRAY" "MAKE-BROADCAST-STREAM" "MAKE-CONCATENATED-STREAM" "MAKE-CONDITION" "MAKE-DISPATCH-MACRO-CHARACTER" "MAKE-ECHO-STREAM" "MAKE-HASH-TABLE" "MAKE-INSTANCE" "MAKE-INSTANCES-OBSOLETE" "MAKE-LIST" "MAKE-LOAD-FORM" "MAKE-LOAD-FORM-SAVING-SLOTS" "MAKE-METHOD" "MAKE-PACKAGE" "MAKE-PATHNAME" "MAKE-RANDOM-STATE" "MAKE-SEQUENCE" "MAKE-STRING" "MAKE-STRING-INPUT-STREAM" "MAKE-STRING-OUTPUT-STREAM" "MAKE-SYMBOL" "MAKE-SYNONYM-STREAM" "MAKE-TWO-WAY-STREAM" "MAKUNBOUND" "MAP" "MAP-INTO" "MAPC" "MAPCAN" "MAPCAR" "MAPCON" "MAPHASH" "MAPL" "MAPLIST" "MASK-FIELD" "MAX" "MEMBER" "MEMBER-IF" "MEMBER-IF-NOT" "MERGE" "MERGE-PATHNAMES" "METHOD" "METHOD-COMBINATION" "METHOD-COMBINATION-ERROR" "METHOD-QUALIFIERS" "MIN" "MINUSP" "MISMATCH" "MOD" "MOST-NEGATIVE-DOUBLE-FLOAT" "MOST-NEGATIVE-FIXNUM" "MOST-NEGATIVE-LONG-FLOAT" "MOST-NEGATIVE-SHORT-FLOAT" "MOST-NEGATIVE-SINGLE-FLOAT" "MOST-POSITIVE-DOUBLE-FLOAT" "MOST-POSITIVE-FIXNUM" "MOST-POSITIVE-LONG-FLOAT" "MOST-POSITIVE-SHORT-FLOAT" "MOST-POSITIVE-SINGLE-FLOAT" "MUFFLE-WARNING" "MULTIPLE-VALUE-BIND" "MULTIPLE-VALUE-CALL" "MULTIPLE-VALUE-LIST" "MULTIPLE-VALUE-PROG1" "MULTIPLE-VALUE-SETQ" "MULTIPLE-VALUES-LIMIT" "NAME-CHAR" "NAMESTRING" "NBUTLAST" "NCONC" "NEXT-METHOD-P" "NIL" "NINTERSECTION" "NINTH" "NO-APPLICABLE-METHOD" "NO-NEXT-METHOD" "NOT" "NOTANY" "NOTEVERY" "NOTINLINE" "NRECONC" "NREVERSE" "NSET-DIFFERENCE" "NSET-EXCLUSIVE-OR" "NSTRING-CAPITALIZE" "NSTRING-DOWNCASE" "NSTRING-UPCASE" "NSUBLIS" "NSUBST" "NSUBST-IF" "NSUBST-IF-NOT" "NSUBSTITUTE" "NSUBSTITUTE-IF" "NSUBSTITUTE-IF-NOT" "NTH" "NTH-VALUE" "NTHCDR" "NULL" "NUMBER" "NUMBERP" "NUMERATOR" "NUNION" "ODDP" "OPEN" "OPEN-STREAM-P" "OPTIMIZE" "OR" "OTHERWISE" "OUTPUT-STREAM-P" "PACKAGE" "PACKAGE-ERROR" "PACKAGE-ERROR-PACKAGE" "PACKAGE-NAME" "PACKAGE-NICKNAMES" "PACKAGE-SHADOWING-SYMBOLS" "PACKAGE-USE-LIST" "PACKAGE-USED-BY-LIST" "PACKAGEP" "PAIRLIS" "PARSE-ERROR" "PARSE-INTEGER" "PARSE-NAMESTRING" "PATHNAME" "PATHNAME-DEVICE" "PATHNAME-DIRECTORY" "PATHNAME-HOST" "PATHNAME-MATCH-P" "PATHNAME-NAME" "PATHNAME-TYPE" "PATHNAME-VERSION" "PATHNAMEP" "PEEK-CHAR" "PHASE" "PI" "PLUSP" "POP" "POSITION" "POSITION-IF" "POSITION-IF-NOT" "PPRINT" "PPRINT-DISPATCH" "PPRINT-EXIT-IF-LIST-EXHAUSTED" "PPRINT-FILL" "PPRINT-INDENT" "PPRINT-LINEAR" "PPRINT-LOGICAL-BLOCK" "PPRINT-NEWLINE" "PPRINT-POP" "PPRINT-TAB" "PPRINT-TABULAR" "PRIN1" "PRIN1-TO-STRING" "PRINC" "PRINC-TO-STRING" "PRINT" "PRINT-NOT-READABLE" "PRINT-NOT-READABLE-OBJECT" "PRINT-OBJECT" "PRINT-UNREADABLE-OBJECT" "PROBE-FILE" "PROCLAIM" "PROG" "PROG*" "PROG1" "PROG2" "PROGN" "PROGRAM-ERROR" "PROGV" "PROVIDE" "PSETF" "PSETQ" "PUSH" "PUSHNEW" "QUOTE" "RANDOM" "RANDOM-STATE" "RANDOM-STATE-P" "RASSOC" "RASSOC-IF" "RASSOC-IF-NOT" "RATIO" "RATIONAL" "RATIONALIZE" "RATIONALP" "READ" "READ-BYTE" "READ-CHAR" "READ-CHAR-NO-HANG" "READ-DELIMITED-LIST" "READ-FROM-STRING" "READ-LINE" "READ-PRESERVING-WHITESPACE" "READ-SEQUENCE" "READER-ERROR" "READTABLE" "READTABLE-CASE" "READTABLEP" "REAL" "REALP" "REALPART" "REDUCE" "REINITIALIZE-INSTANCE" "REM" "REMF" "REMHASH" "REMOVE" "REMOVE-DUPLICATES" "REMOVE-IF" "REMOVE-IF-NOT" "REMOVE-METHOD" "REMPROP" "RENAME-FILE" "RENAME-PACKAGE" "REPLACE" "REQUIRE" "REST" "RESTART" "RESTART-BIND" "RESTART-CASE" "RESTART-NAME" "RETURN" "RETURN-FROM" "REVAPPEND" "REVERSE" "ROOM" "ROTATEF" "ROUND" "ROW-MAJOR-AREF" "RPLACA" "RPLACD" "SAFETY" "SATISFIES" "SBIT" "SCALE-FLOAT" "SCHAR" "SEARCH" "SECOND" "SEQUENCE" "SERIOUS-CONDITION" "SET" "SET-DIFFERENCE" "SET-DISPATCH-MACRO-CHARACTER" "SET-EXCLUSIVE-OR" "SET-MACRO-CHARACTER" "SET-PPRINT-DISPATCH" "SET-SYNTAX-FROM-CHAR" "SETF" "SETQ" "SEVENTH" "SHADOW" "SHADOWING-IMPORT" "SHARED-INITIALIZE" "SHIFTF" "SHORT-FLOAT" "SHORT-FLOAT-EPSILON" "SHORT-FLOAT-NEGATIVE-EPSILON" "SHORT-SITE-NAME" "SIGNAL" "SIGNED-BYTE" "SIGNUM" "SIMPLE-ARRAY" "SIMPLE-BASE-STRING" "SIMPLE-BIT-VECTOR" "SIMPLE-BIT-VECTOR-P" "SIMPLE-CONDITION" "SIMPLE-CONDITION-FORMAT-ARGUMENTS" "SIMPLE-CONDITION-FORMAT-CONTROL" "SIMPLE-ERROR" "SIMPLE-STRING" "SIMPLE-STRING-P" "SIMPLE-TYPE-ERROR" "SIMPLE-VECTOR" "SIMPLE-VECTOR-P" "SIMPLE-WARNING" "SIN" "SINGLE-FLOAT" "SINGLE-FLOAT-EPSILON" "SINGLE-FLOAT-NEGATIVE-EPSILON" "SINH" "SIXTH" "SLEEP" "SLOT-BOUNDP" "SLOT-EXISTS-P" "SLOT-MAKUNBOUND" "SLOT-MISSING" "SLOT-UNBOUND" "SLOT-VALUE" "SOFTWARE-TYPE" "SOFTWARE-VERSION" "SOME" "SORT" "SPACE" "SPECIAL" "SPECIAL-OPERATOR-P" "SPEED" "SQRT" "STABLE-SORT" "STANDARD" "STANDARD-CHAR" "STANDARD-CHAR-P" "STANDARD-CLASS" "STANDARD-GENERIC-FUNCTION" "STANDARD-METHOD" "STANDARD-OBJECT" "STEP" "STORAGE-CONDITION" "STORE-VALUE" "STREAM" "STREAM-ELEMENT-TYPE" "STREAM-ERROR" "STREAM-ERROR-STREAM" "STREAM-EXTERNAL-FORMAT" "STREAMP" "STRING" "STRING-CAPITALIZE" "STRING-DOWNCASE" "STRING-EQUAL" "STRING-GREATERP" "STRING-LEFT-TRIM" "STRING-LESSP" "STRING-NOT-EQUAL" "STRING-NOT-GREATERP" "STRING-NOT-LESSP" "STRING-RIGHT-TRIM" "STRING-STREAM" "STRING-TRIM" "STRING-UPCASE" "STRING/=" "STRING<" "STRING<=" "STRING=" "STRING>" "STRING>=" "STRINGP" "STRUCTURE" "STRUCTURE-CLASS" "STRUCTURE-OBJECT" "STYLE-WARNING" "SUBLIS" "SUBSEQ" "SUBSETP" "SUBST" "SUBST-IF" "SUBST-IF-NOT" "SUBSTITUTE" "SUBSTITUTE-IF" "SUBSTITUTE-IF-NOT" "SUBTYPEP" "SVREF" "SXHASH" "SYMBOL" "SYMBOL-FUNCTION" "SYMBOL-MACROLET" "SYMBOL-NAME" "SYMBOL-PACKAGE" "SYMBOL-PLIST" "SYMBOL-VALUE" "SYMBOLP" "SYNONYM-STREAM" "SYNONYM-STREAM-SYMBOL" "T" "TAGBODY" "TAILP" "TAN" "TANH" "TENTH" "TERPRI" "THE" "THIRD" "THROW" "TIME" "TRACE" "TRANSLATE-LOGICAL-PATHNAME" "TRANSLATE-PATHNAME" "TREE-EQUAL" "TRUENAME" "TRUNCATE" "TWO-WAY-STREAM" "TWO-WAY-STREAM-INPUT-STREAM" "TWO-WAY-STREAM-OUTPUT-STREAM" "TYPE" "TYPE-ERROR" "TYPE-ERROR-DATUM" "TYPE-ERROR-EXPECTED-TYPE" "TYPE-OF" "TYPECASE" "TYPEP" "UNBOUND-SLOT" "UNBOUND-SLOT-INSTANCE" "UNBOUND-VARIABLE" "UNDEFINED-FUNCTION" "UNEXPORT" "UNINTERN" "UNION" "UNLESS" "UNREAD-CHAR" "UNSIGNED-BYTE" "UNTRACE" "UNUSE-PACKAGE" "UNWIND-PROTECT" "UPDATE-INSTANCE-FOR-DIFFERENT-CLASS" "UPDATE-INSTANCE-FOR-REDEFINED-CLASS" "UPGRADED-ARRAY-ELEMENT-TYPE" "UPGRADED-COMPLEX-PART-TYPE" "UPPER-CASE-P" "USE-PACKAGE" "USE-VALUE" "USER-HOMEDIR-PATHNAME" "VALUES" "VALUES-LIST" "VARIABLE" "VECTOR" "VECTOR-POP" "VECTOR-PUSH" "VECTOR-PUSH-EXTEND" "VECTORP" "WARN" "WARNING" "WHEN" "WILD-PATHNAME-P" "WITH-ACCESSORS" "WITH-COMPILATION-UNIT" "WITH-CONDITION-RESTARTS" "WITH-HASH-TABLE-ITERATOR" "WITH-INPUT-FROM-STRING" "WITH-OPEN-FILE" "WITH-OPEN-STREAM" "WITH-OUTPUT-TO-STRING" "WITH-PACKAGE-ITERATOR" "WITH-SIMPLE-RESTART" "WITH-SLOTS" "WITH-STANDARD-IO-SYNTAX" "WRITE" "WRITE-BYTE" "WRITE-CHAR" "WRITE-LINE" "WRITE-SEQUENCE" "WRITE-STRING" "WRITE-TO-STRING" "Y-OR-N-P" "YES-OR-NO-P" "ZEROP")))) (1 (WRITE-TO-STRING (- (RANDOM 2001) 1000))) (2 (CONCATENATE (QUOTE STRING) "," (STRING (RANDOM-FROM-SEQ "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))))) (MAKE-RANDOM-BACKQUOTED-SEQUENCE-STRING SIZE))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/backquote-aux.llf 819330C7>
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.1 (LET* ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE (A (SYSTEM.INTERNALS::BQ-COMMA B) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN C) (D SYSTEM.INTERNALS::BQ-COMMA E) (SYSTEM.INTERNALS::BQ-COMMA-DOT F) #(1 2 (SYSTEM.INTERNALS::BQ-COMMA P) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN Q) (SYSTEM.INTERNALS::BQ-COMMA-DOT R) S) G)))) (Y (COPY-TREE X))) (OR (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY Y :TEST (FUNCTION IS-SIMILAR))) (AND (NOT (EQUAL X Y)) (LIST :MODIFIED X Y)))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.2 (LET* ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN A) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN B))))) (Y (COPY-TREE X))) (OR (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY Y :TEST (FUNCTION IS-SIMILAR))) (AND (NOT (IS-SIMILAR X Y)) (LIST :MODIFIED X Y)))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.3 (LET* ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-DOT A) (SYSTEM.INTERNALS::BQ-COMMA-DOT B))))) (Y (COPY-TREE X))) (OR (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY Y :TEST (FUNCTION IS-SIMILAR))) (AND (NOT (IS-SIMILAR X Y)) (LIST :MODIFIED X Y)))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.4 (LET* ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B))))) (Y (COPY-TREE X))) (OR (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY Y :TEST (FUNCTION IS-SIMILAR))) (AND (NOT (IS-SIMILAR X Y)) (LIST :MODIFIED X Y)))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.5 (LET* ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE #((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B))))) (Y (COPY-TREE X))) (OR (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY Y :TEST (FUNCTION IS-SIMILAR))) (AND (NOT (IS-SIMILAR X Y)) (LIST :MODIFIED X Y)))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.6 (LET ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN A) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN B)))))) (AND (CONSP X) (SYMBOLP (CAR X)) (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY (LIST (CAR X)) :TEST (FUNCTION IS-SIMILAR))))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.7 (LET ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-DOT A) (SYSTEM.INTERNALS::BQ-COMMA-DOT B)))))) (AND (CONSP X) (SYMBOLP (CAR X)) (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY (LIST (CAR X)) :TEST (FUNCTION IS-SIMILAR))))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.8 (LET ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B)))))) (AND (CONSP X) (SYMBOLP (CAR X)) (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY (LIST (CAR X)) :TEST (FUNCTION IS-SIMILAR))))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.9 (LET ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE #((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B)))))) (AND (CONSP X) (SYMBOLP (CAR X)) (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY (LIST (CAR X)) :TEST (FUNCTION IS-SIMILAR))))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.10 (LET ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE #((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA .B)))))) (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY X :TEST (FUNCTION IS-SIMILAR)))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.11 (LET ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE #((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA @B)))))) (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY X :TEST (FUNCTION IS-SIMILAR)))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.12 (LET ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE #((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B) C))))) (AND (CONSP X) (SYMBOLP (CAR X)) (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY (LIST (CAR X)) :TEST (FUNCTION IS-SIMILAR))))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.13 (LET* ((X (QUOTE (SYSTEM.INTERNALS::BACKQUOTE #((SYSTEM.INTERNALS::BQ-COMMA A) (SYSTEM.INTERNALS::BQ-COMMA B) C)))) (Y (COPY-TREE X))) (OR (LOOP REPEAT 20 NCONC (RANDOMLY-CHECK-READABILITY X :TEST (FUNCTION IS-SIMILAR))) (AND (NOT (IS-SIMILAR X Y)) (LIST :MODIFIED X Y)))) NIL)
;; Loading (DEFTEST PRINT.BACKQUOTE.RANDOM.14 (LOOP FOR X = (MAKE-RANDOM-BACKQUOTED-FORM 100) REPEAT 500 NCONC (RANDOMLY-CHECK-READABILITY X :TEST (FUNCTION IS-SIMILAR))) NIL)
;; Loading (LOAD "print-bit-vector.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-bit-vector.lsp 81D26B67>
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PRINT.BIT-VECTOR.1 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #* :READABLY NIL :ESCAPE NIL)) "#*")
;; Loading (DEFTEST PRINT.BIT-VECTOR.2 (WITH-STANDARD-IO-SYNTAX (SUBSEQ (WRITE-TO-STRING #* :READABLY NIL :ESCAPE NIL :ARRAY NIL) 0 2)) "#<")
;; Loading (DEFTEST PRINT.BIT-VECTOR.3 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #*001101010011011 :READABLY NIL :ESCAPE NIL)) "#*001101010011011")
;; Loading (DEFTEST PRINT.BIT-VECTOR.4 (WITH-STANDARD-IO-SYNTAX (SUBSEQ (WRITE-TO-STRING #*11010011010110101 :READABLY NIL :ESCAPE NIL :ARRAY NIL) 0 2)) "#<")
;; Loading (DEFTEST PRINT.BIT-VECTOR.5 (LET* ((BV1 #*0001100101) (BV2 (MAKE-ARRAY 5 :DISPLACED-TO BV1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT)))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING BV2 :READABLY NIL :ESCAPE NIL))) "#*00110")
;; Loading (DEFTEST PRINT.BIT-VECTOR.6 (LET* ((BV (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (1 0 0 1 0 0 1 1 1 0)) :FILL-POINTER 5))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING BV :READABLY NIL :ESCAPE NIL))) "#*10010")
;; Loading (DEFTEST PRINT.BIT-VECTOR.7 (LET* ((BV (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (1 0 0 1 0 0 1 1 1 0)) :ADJUSTABLE T))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING BV :READABLY NIL :ESCAPE NIL))) "#*1001001110")
;; Loading (DEFTEST PRINT.BIT-VECTOR.RANDOM (LOOP FOR LEN = (RANDOM 100) FOR BV = (COERCE (LOOP REPEAT LEN COLLECT (RANDOM 2)) (QUOTE BIT-VECTOR)) REPEAT 1000 NCONC (RANDOMLY-CHECK-READABILITY BV)) NIL)
;; Loading (LOAD "print-vector.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-vector.lsp 81DACA37>
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PRINT.VECTOR.1 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #() :READABLY NIL :ARRAY T)) "#()")
;; Loading (DEFTEST PRINT.VECTOR.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR A = (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))) FOR S = (WRITE-TO-STRING A :READABLY NIL :ARRAY T :PRETTY NIL) UNLESS (STRING= S "#()") COLLECT (LIST I S))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 1 TO 100 FOR A = (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))) FOR S = (WRITE-TO-STRING A :READABLY NIL :ARRAY T :PRETTY NIL) UNLESS (STRING= S "#()") COLLECT (LIST I S))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR A = (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE TYPE) FOR S = (WRITE-TO-STRING A :READABLY NIL :ARRAY T :PRETTY NIL) UNLESS (STRING= S "#()") COLLECT (LIST TYPE S))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.5 (WITH-STANDARD-IO-SYNTAX (LET* ((*PACKAGE* (FIND-PACKAGE "CL-TEST")) (RESULT (WRITE-TO-STRING #(A B C) :READABLY NIL :ARRAY T :PRETTY NIL :CASE :DOWNCASE))) (OR (AND (STRING= RESULT "#(a b c)") T) RESULT))) T)
;; Loading (DEFTEST PRINT.VECTOR.6 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR A = (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :INITIAL-CONTENTS (QUOTE (3 0 2 1))) FOR S = (WRITE-TO-STRING A :READABLY NIL :ARRAY T :PRETTY NIL) UNLESS (STRING= S "#(3 0 2 1)") COLLECT (LIST I A S))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.7 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR A = (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :INITIAL-CONTENTS (QUOTE (-2 -1 0 1))) FOR S = (WRITE-TO-STRING A :READABLY NIL :ARRAY T :PRETTY NIL) UNLESS (STRING= S "#(-2 -1 0 1)") COLLECT (LIST I A S))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.FILL.1 (WITH-STANDARD-IO-SYNTAX (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)) :FILL-POINTER 0)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (LOOP FOR I FROM 0 TO 10 DO (SETF (FILL-POINTER V) I) COLLECT (WRITE-TO-STRING V :READABLY NIL :ARRAY T :PRETTY NIL :CASE :DOWNCASE)))) ("#()" "#(a)" "#(a b)" "#(a b c)" "#(a b c d)" "#(a b c d e)" "#(a b c d e f)" "#(a b c d e f g)" "#(a b c d e f g h)" "#(a b c d e f g h i)" "#(a b c d e f g h i j)"))
;; Loading (DEFTEST PRINT.VECTOR.FILL.2 (WITH-STANDARD-IO-SYNTAX (LET ((EXPECTED (QUOTE ("#()" "#(0)" "#(0 1)" "#(0 1 2)" "#(0 1 2 3)")))) (LOOP FOR I FROM 2 TO 100 NCONC (LET ((V (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (0 1 2 3)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :FILL-POINTER 0))) (LOOP FOR FP FROM 0 TO 4 FOR EXPECTED-RESULT IN EXPECTED FOR ACTUAL-RESULT = (PROGN (SETF (FILL-POINTER V) FP) (WRITE-TO-STRING V :READABLY NIL :ARRAY T :PRETTY NIL)) UNLESS (STRING= EXPECTED-RESULT ACTUAL-RESULT) COLLECT (LIST I FP EXPECTED-RESULT ACTUAL-RESULT)))))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.FILL.3 (WITH-STANDARD-IO-SYNTAX (LET ((EXPECTED (QUOTE ("#()" "#(0)" "#(0 -1)" "#(0 -1 -2)" "#(0 -1 -2 1)")))) (LOOP FOR I FROM 2 TO 100 NCONC (LET ((V (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (0 -1 -2 1)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :FILL-POINTER 0))) (LOOP FOR FP FROM 0 TO 4 FOR EXPECTED-RESULT IN EXPECTED FOR ACTUAL-RESULT = (PROGN (SETF (FILL-POINTER V) FP) (WRITE-TO-STRING V :READABLY NIL :ARRAY T :PRETTY NIL)) UNLESS (STRING= EXPECTED-RESULT ACTUAL-RESULT) COLLECT (LIST I FP EXPECTED-RESULT ACTUAL-RESULT)))))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.DISPLACED.1 (LET* ((V1 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G))) (V2 (MAKE-ARRAY 3 :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 4))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING V2 :READABLY NIL :ARRAY T :CASE :DOWNCASE :PRETTY NIL :ESCAPE NIL))) "#(e f g)")
;; Loading (DEFTEST PRINT.VECTOR.DISPLACED.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 NCONC (LET* ((TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))) (V1 (MAKE-ARRAY 8 :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (0 1 2 3 0 1 2 3)))) (V2 (MAKE-ARRAY 5 :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE)) (RESULT (WRITE-TO-STRING V2 :READABLY NIL :ARRAY T :PRETTY NIL))) (UNLESS (STRING= RESULT "#(2 3 0 1 2)") (LIST (LIST I V1 V2 RESULT)))))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.DISPLACED.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 NCONC (LET* ((TYPE (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I)))) (V1 (MAKE-ARRAY 8 :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (0 1 -1 -2 0 1 -1 -2)))) (V2 (MAKE-ARRAY 5 :DISPLACED-TO V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE)) (RESULT (WRITE-TO-STRING V2 :READABLY NIL :ARRAY T :PRETTY NIL))) (UNLESS (STRING= RESULT "#(-1 -2 0 1 -1)") (LIST (LIST I V1 V2 RESULT)))))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.ADJUSTABLE.1 (WITH-STANDARD-IO-SYNTAX (LET ((V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J)) :ADJUSTABLE T))) (WRITE-TO-STRING V :READABLY NIL :ARRAY T :CASE :DOWNCASE :PRETTY NIL :ESCAPE NIL))) "#(a b c d e f g h i j)")
;; Loading (DEFTEST PRINT.VECTOR.ADJUSTABLE.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 1 2 3 3 0 2 1)) :ADJUSTABLE T) FOR S = (WRITE-TO-STRING V :READABLY NIL :ARRAY T :CASE :DOWNCASE :PRETTY NIL :ESCAPE NIL) UNLESS (STRING= S "#(0 1 2 3 3 0 2 1)") COLLECT (LIST I V S))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.ADJUSTABLE.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (0 1 -1 -2 -1 0 -2 1)) :ADJUSTABLE T) FOR S = (WRITE-TO-STRING V :READABLY NIL :ARRAY T :CASE :DOWNCASE :PRETTY NIL :ESCAPE NIL) UNLESS (STRING= S "#(0 1 -1 -2 -1 0 -2 1)") COLLECT (LIST I V S))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.UNREADABLE.1 (WITH-STANDARD-IO-SYNTAX (SUBSEQ (WRITE-TO-STRING #(A B C D E) :ARRAY NIL :READABLY NIL) 0 2)) "#<")
;; Loading (DEFTEST PRINT.VECTOR.UNREADABLE.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (0 1 2 3))) FOR RESULT = (WRITE-TO-STRING V :ARRAY NIL :READABLY NIL) UNLESS (STRING= (SUBSEQ RESULT 0 2) "#<") COLLECT (LIST I TYPE V RESULT))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.UNREADABLE.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (0 1 -2 -1))) FOR RESULT = (WRITE-TO-STRING V :ARRAY NIL :READABLY NIL) UNLESS (STRING= (SUBSEQ RESULT 0 2) "#<") COLLECT (LIST I TYPE V RESULT))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.RANDOM.1 (TRIM-LIST (LOOP FOR V IN *UNIVERSE* WHEN (VECTORP V) NCONC (LOOP REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY V :TEST (FUNCTION EQUALP) :CAN-FAIL (NOT (SUBTYPEP T (ARRAY-ELEMENT-TYPE V)))))) 10) NIL)
;; Loading (DEFTEST PRINT.VECTOR.RANDOM.2 (TRIM-LIST (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (1 3 2 0))) NCONC (LOOP REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY V :TEST (FUNCTION EQUALP) :CAN-FAIL T))) 10) NIL)
;; Loading (DEFTEST PRINT.VECTOR.RANDOM.3 (TRIM-LIST (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (-1 1 0 -2))) NCONC (LOOP REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY V :TEST (FUNCTION EQUALP) :CAN-FAIL T))) 10) NIL)
;; Loading (DEFTEST PRINT.VECTOR.RANDOM.4 (TRIM-LIST (LOOP FOR V = (MAKE-RANDOM-VECTOR (1+ (RANDOM 100))) REPEAT 1000 NCONC (RANDOMLY-CHECK-READABILITY V :TEST (FUNCTION EQUALP))) 10) NIL)
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.1 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #() :PRETTY NIL :LENGTH 0 :READABLY NIL)) "#()")
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.2 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #(1) :PRETTY NIL :LENGTH 0 :READABLY NIL)) "#(...)")
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.3 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #(1) :PRETTY NIL :LENGTH 1 :READABLY NIL)) "#(1)")
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.4 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #(A B C D E F G H) :PRETTY NIL :ARRAY T :ESCAPE NIL :LENGTH 5 :CASE :DOWNCASE :READABLY NIL)) "#(a b c d e ...)")
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE TYPE) FOR RESULT = (WRITE-TO-STRING V :ARRAY T :READABLY NIL :PRETTY NIL :LENGTH 0) UNLESS (STRING= RESULT "#()") COLLECT (LIST I TYPE V RESULT))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.6 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (1)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (2))) FOR RESULT = (WRITE-TO-STRING V :PRETTY NIL :ARRAY T :READABLY NIL :LENGTH 0) UNLESS (STRING= RESULT "#(...)") COLLECT (LIST I TYPE V RESULT))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.7 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 1 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (1)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (-1))) FOR RESULT = (WRITE-TO-STRING V :PRETTY NIL :ARRAY T :READABLY NIL :LENGTH 0) UNLESS (STRING= RESULT "#(...)") COLLECT (LIST I TYPE V RESULT))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.8 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (1 3 0 2))) FOR RESULT = (WRITE-TO-STRING V :PRETTY NIL :ARRAY T :READABLY NIL :LENGTH 2) UNLESS (STRING= RESULT "#(1 3 ...)") COLLECT (LIST I TYPE V RESULT))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.LENGTH.9 (WITH-STANDARD-IO-SYNTAX (LOOP FOR I FROM 2 TO 100 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR V = (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (QUOTE (1 -2 0 -1))) FOR RESULT = (WRITE-TO-STRING V :PRETTY NIL :ARRAY T :READABLY NIL :LENGTH 2) UNLESS (STRING= RESULT "#(1 -2 ...)") COLLECT (LIST I TYPE V RESULT))) NIL)
;; Loading (DEFTEST PRINT.VECTOR.LEVEL.1 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #() :LEVEL 0 :READABLY NIL :PRETTY NIL)) "#")
;; Loading (DEFTEST PRINT.VECTOR.LEVEL.2 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #() :LEVEL 1 :READABLY NIL :PRETTY NIL)) "#()")
;; Loading (DEFTEST PRINT.VECTOR.LEVEL.3 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #(17) :LEVEL 1 :READABLY NIL :PRETTY NIL)) "#(17)")
;; Loading (DEFTEST PRINT.VECTOR.LEVEL.4 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING #(4 (17) 9 (A) (B) 0) :LEVEL 1 :READABLY NIL :PRETTY NIL)) "#(4 # 9 # # 0)")
;; Loading (DEFTEST PRINT.VECTOR.LEVEL.5 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING (QUOTE (#(A))) :LEVEL 1 :READABLY NIL :PRETTY NIL)) "(#)")
;; Loading (DEFTEST PRINT.VECTOR.LEVEL.6 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING (QUOTE #(#(A))) :LEVEL 1 :READABLY NIL :PRETTY NIL)) "#(#)")
;; Loading (LOAD "print-array.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-array.lsp C1B3C077>
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PRINT.ARRAY.0.1 (LET ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT 0))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#0A0")
;; Loading (DEFTEST PRINT.ARRAY.0.2 (WITH-STANDARD-IO-SYNTAX (LET ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT (QUOTE A))) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#0AA")
;; Loading (DEFTEST PRINT.ARRAY.0.3 (LET* ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT 0)) (RESULT (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL))) (VALUES (SUBSEQ RESULT 0 2) (SUBSEQ RESULT (1- (LENGTH RESULT))))) "#<" ">")
;; Loading (DEFTEST PRINT.ARRAY.0.4 (LET ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ADJUSTABLE T))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#0A0")
;; Loading (DEFTEST PRINT.ARRAY.0.5 (LET* ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ADJUSTABLE T)) (B (MAKE-ARRAY NIL :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 0))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING B :READABLY NIL :ARRAY T))) "#0A0")
;; Loading (DEFTEST PRINT.ARRAY.0.6 (LET ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE (INTEGER 0 2))))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#0A0")
;; Loading (DEFTEST PRINT.ARRAY.0.7 (LOOP FOR A = (MAKE-ARRAY NIL :INITIAL-ELEMENT (- (RANDOM 1000000) 500000)) REPEAT 30 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.8 (LOOP FOR I FROM 1 TO 64 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) NCONC (LET ((A (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE TYPE))) (LOOP REPEAT 5 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T)))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.9 (LOOP FOR A = (MAKE-ARRAY NIL :INITIAL-ELEMENT (RANDOM 1000000) :ADJUSTABLE T) REPEAT 30 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.10 (LOOP FOR A = (MAKE-ARRAY NIL :INITIAL-ELEMENT (RANDOM 1000000000)) FOR B = (MAKE-ARRAY NIL :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 0) REPEAT 30 NCONC (RANDOMLY-CHECK-READABILITY B :TEST (FUNCTION IS-SIMILAR))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.11 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FLOAT)) FOR ZERO = (COERCE 0 TYPE) FOR A = (MAKE-ARRAY NIL :INITIAL-ELEMENT ZERO :ELEMENT-TYPE TYPE) NCONC (LOOP REPEAT 30 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.12 (LOOP FOR TYPE0 IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FLOAT)) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE0))) FOR ZERO = (COMPLEX (COERCE 0.0 TYPE0)) FOR A = (MAKE-ARRAY NIL :INITIAL-ELEMENT ZERO :ELEMENT-TYPE TYPE) NCONC (LOOP REPEAT 30 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.13 (LET ((RESULT (WRITE-TO-STRING (MAKE-ARRAY NIL :INITIAL-ELEMENT 0) :READABLY NIL :ARRAY NIL))) (VALUES (SUBSEQ RESULT 0 2) (SUBSEQ RESULT (1- (LENGTH RESULT))))) "#<" ">")
;; Loading (DEFTEST PRINT.ARRAY.0.14 (LOOP FOR I FROM 1 TO 64 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR A = (MAKE-ARRAY NIL :ELEMENT-TYPE TYPE :INITIAL-ELEMENT 1) FOR RESULT = (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL) UNLESS (AND (STRING= (SUBSEQ RESULT 0 2) "#<") (STRING= (SUBSEQ RESULT (1- (LENGTH RESULT))) ">")) COLLECT (LIST I RESULT)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.15 (LOOP FOR I FROM 1 TO 64 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR A = (MAKE-ARRAY NIL :ELEMENT-TYPE TYPE :INITIAL-ELEMENT -1) FOR RESULT = (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL) UNLESS (AND (STRING= (SUBSEQ RESULT 0 2) "#<") (STRING= (SUBSEQ RESULT (1- (LENGTH RESULT))) ">")) COLLECT (LIST I RESULT)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.16 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR A = (MAKE-ARRAY NIL :ELEMENT-TYPE TYPE :INITIAL-ELEMENT (COERCE 17 TYPE)) FOR RESULT = (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL) UNLESS (AND (STRING= (SUBSEQ RESULT 0 2) "#<") (STRING= (SUBSEQ RESULT (1- (LENGTH RESULT))) ">")) COLLECT (LIST TYPE RESULT)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.0.17 (LOOP FOR TYPE0 IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FLOAT REAL)) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE0))) FOR A = (MAKE-ARRAY NIL :ELEMENT-TYPE TYPE :INITIAL-ELEMENT (COMPLEX 0 (COERCE 3 TYPE0))) FOR RESULT = (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL) UNLESS (AND (STRING= (SUBSEQ RESULT 0 2) "#<") (STRING= (SUBSEQ RESULT (1- (LENGTH RESULT))) ">")) COLLECT (LIST TYPE RESULT)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.1 (LET ((A (MAKE-ARRAY (QUOTE (1 1)) :INITIAL-CONTENTS (QUOTE ((1)))))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#2A((1))")
;; Loading (DEFTEST PRINT.ARRAY.2.2 (LET ((A (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((1 3 8) (2 6 10)))))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#2A((1 3 8) (2 6 10))")
;; Loading (DEFTEST PRINT.ARRAY.2.3 (LET ((A (MAKE-ARRAY (QUOTE (0 1))))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#2A()")
;; Loading (DEFTEST PRINT.ARRAY.2.4 (LET ((A (MAKE-ARRAY (QUOTE (1 0))))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#2A(())")
;; Loading (DEFTEST PRINT.ARRAY.2.5 (LET ((A (MAKE-ARRAY (QUOTE (0 0))))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#2A()")
;; Loading (DEFTEST PRINT.ARRAY.2.6 (LET ((A (MAKE-ARRAY (QUOTE (10 0))))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#2A(() () () () () () () () () ())")
;; Loading (DEFTEST PRINT.ARRAY.2.7 (LET* ((A (MAKE-ARRAY (QUOTE (3 3)) :INITIAL-CONTENTS (QUOTE ((1 3 8) (2 67 121) (65 432 6))))) (B (MAKE-ARRAY (QUOTE (3 3)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 0))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING B :READABLY NIL :ARRAY T))) "#2A((1 3 8) (2 67 121) (65 432 6))")
;; Loading (DEFTEST PRINT.ARRAY.2.8 (LET* ((A (MAKE-ARRAY (QUOTE (3 3)) :INITIAL-CONTENTS (QUOTE ((1 3 8) (2 67 121) (65 432 6))))) (B (MAKE-ARRAY (QUOTE (2 3)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 0))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING B :READABLY NIL :ARRAY T))) "#2A((1 3 8) (2 67 121))")
;; Loading (DEFTEST PRINT.ARRAY.2.9 (LET* ((A (MAKE-ARRAY (QUOTE (3 3)) :INITIAL-CONTENTS (QUOTE ((1 3 8) (2 67 121) (65 432 6))))) (B (MAKE-ARRAY (QUOTE (2 2)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 4))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING B :READABLY NIL :ARRAY T))) "#2A((67 121) (65 432))")
;; Loading (DEFTEST PRINT.ARRAY.2.10 (LET* ((A (MAKE-ARRAY (QUOTE (3 3)) :INITIAL-CONTENTS (QUOTE ((1 3 8) (2 67 121) (65 432 6))))) (B (MAKE-ARRAY (QUOTE (2 2)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 4 :ADJUSTABLE T))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING B :READABLY NIL :ARRAY T))) "#2A((67 121) (65 432))")
;; Loading (DEFTEST PRINT.ARRAY.2.11 (LET* ((A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-CONTENTS (QUOTE ((7 8 9 10) (65 12 42 -1) (:W :X :Y :Z))) :ADJUSTABLE T))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T))) "#2A((7 8 9 10) (65 12 42 -1) (:W :X :Y :Z))")
;; Loading (DEFTEST PRINT.ARRAY.2.12 (LET ((DESIRED-RESULT "#2A((0 1 1) (1 1 0))")) (LOOP FOR I FROM 2 TO 64 FOR A = (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :INITIAL-CONTENTS (QUOTE ((0 1 1) (1 1 0)))) FOR RESULT = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T)) UNLESS (STRING= DESIRED-RESULT RESULT) COLLECT (LIST I A RESULT))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.13 (LET ((DESIRED-RESULT "#2A((0 -1 -1) (-1 -1 0))")) (LOOP FOR I FROM 1 TO 64 FOR A = (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :INITIAL-CONTENTS (QUOTE ((0 -1 -1) (-1 -1 0)))) FOR RESULT = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T)) UNLESS (STRING= DESIRED-RESULT RESULT) COLLECT (LIST I A RESULT))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.14 (LET ((DESIRED-RESULT "#2A((0 1 1) (1 1 0))")) (LOOP FOR I FROM 2 TO 64 FOR A = (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE ((0 1 1) (1 1 0)))) FOR RESULT = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T)) UNLESS (STRING= DESIRED-RESULT RESULT) COLLECT (LIST I A RESULT))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.15 (LET ((DESIRED-RESULT "#2A((0 -1 -1) (-1 -1 0))")) (LOOP FOR I FROM 1 TO 64 FOR A = (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE ((0 -1 -1) (-1 -1 0)))) FOR RESULT = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T)) UNLESS (STRING= DESIRED-RESULT RESULT) COLLECT (LIST I A RESULT))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.16 (LET ((DESIRED-RESULT "#2A((1 1) (1 0))")) (LOOP FOR I FROM 2 TO 64 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR A = (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE TYPE :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE ((0 1 1) (1 1 0)))) FOR B = (MAKE-ARRAY (QUOTE (2 2)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE) FOR RESULT = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING B :READABLY NIL :ARRAY T)) UNLESS (STRING= DESIRED-RESULT RESULT) COLLECT (LIST I B RESULT))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.17 (LET ((DESIRED-RESULT "#2A((1 -1) (-2 0))")) (LOOP FOR I FROM 2 TO 64 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR A = (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE TYPE :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE ((0 1 1) (-1 -2 0)))) FOR B = (MAKE-ARRAY (QUOTE (2 2)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE) FOR RESULT = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING B :READABLY NIL :ARRAY T)) UNLESS (STRING= DESIRED-RESULT RESULT) COLLECT (LIST I B RESULT))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.20 (LET* ((A (MAKE-ARRAY (QUOTE (9)) :INITIAL-CONTENTS (QUOTE (1 3 8 2 67 121 65 432 6)))) (B (MAKE-ARRAY (QUOTE (2 2)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 1))) (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING B :READABLY NIL :ARRAY T))) "#2A((3 8) (2 67))")
;; Loading (DEFTEST PRINT.ARRAY.2.21 (TRIM-LIST (LOOP FOR DIMS = (LIST (RANDOM 4) (RANDOM 4)) FOR A = (MAKE-ARRAY DIMS :INITIAL-ELEMENT (- (RANDOM 1000000) 500000)) REPEAT 100 NCONC (LET ((RESULT (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T))) (AND RESULT (LIST (CONS DIMS (FIRST RESULT)))))) 10) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.22 (LOOP FOR A = (MAKE-ARRAY (LIST (RANDOM 4) (RANDOM 4)) :INITIAL-ELEMENT (- (RANDOM 1000000) 500000) :ADJUSTABLE T) REPEAT 100 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.23 (LOOP FOR D1 = (RANDOM 10) FOR D2 = (RANDOM 10) FOR A = (MAKE-ARRAY (LIST D1 D2) :INITIAL-ELEMENT (- (RANDOM 1000000) 500000)) FOR D1A = (RANDOM (1+ D1)) FOR D2A = (RANDOM (1+ D2)) FOR OFFSET = (RANDOM (1+ (- (* D1 D2) (* D1A D2A)))) FOR B = (MAKE-ARRAY (LIST D1A D2A) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET OFFSET) REPEAT 100 NCONC (RANDOMLY-CHECK-READABILITY B :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.24 (LOOP FOR I FROM 1 TO 64 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) NCONC (LET ((A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-ELEMENT 1 :ELEMENT-TYPE TYPE))) (LOOP REPEAT 5 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T)))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.25 (LET ((A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.26 (LET ((A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY A :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.27 (LET ((STR (WRITE-TO-STRING (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-ELEMENT 0) :READABLY NIL :ARRAY NIL))) (VALUES (SUBSEQ STR 0 2) (SUBSEQ STR (1- (LENGTH STR))))) "#<" ">")
;; Loading (DEFTEST PRINT.ARRAY.2.28 (LOOP FOR I FROM 1 TO 64 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR A = (MAKE-ARRAY (QUOTE (4 3)) :ELEMENT-TYPE TYPE :INITIAL-ELEMENT 1) FOR RESULT = (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL) UNLESS (AND (STRING= (SUBSEQ RESULT 0 2) "#<") (STRING= (SUBSEQ RESULT (1- (LENGTH RESULT))) ">")) COLLECT (LIST I RESULT)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.29 (LOOP FOR I FROM 1 TO 64 FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA I))) FOR A = (MAKE-ARRAY (QUOTE (4 8)) :ELEMENT-TYPE TYPE :INITIAL-ELEMENT -1) FOR RESULT = (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL) UNLESS (AND (STRING= (SUBSEQ RESULT 0 2) "#<") (STRING= (SUBSEQ RESULT (1- (LENGTH RESULT))) ">")) COLLECT (LIST I RESULT)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.30 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR A = (MAKE-ARRAY (QUOTE (5 7)) :ELEMENT-TYPE TYPE :INITIAL-ELEMENT (COERCE 17 TYPE)) FOR RESULT = (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL) UNLESS (AND (STRING= (SUBSEQ RESULT 0 2) "#<") (STRING= (SUBSEQ RESULT (1- (LENGTH RESULT))) ">")) COLLECT (LIST TYPE RESULT)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.2.31 (LOOP FOR TYPE0 IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT FLOAT REAL)) FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE0))) FOR A = (MAKE-ARRAY (QUOTE (13 5)) :ELEMENT-TYPE TYPE :INITIAL-ELEMENT (COMPLEX 0 (COERCE 3 TYPE0))) FOR RESULT = (WRITE-TO-STRING A :READABLY NIL :ARRAY NIL) UNLESS (AND (STRING= (SUBSEQ RESULT 0 2) "#<") (STRING= (SUBSEQ RESULT (1- (LENGTH RESULT))) ">")) COLLECT (LIST TYPE RESULT)) NIL)
;; Loading (DEFTEST PRINT.ARRAY.3.1 (LET* ((A (MAKE-ARRAY (QUOTE (1 2 3)) :INITIAL-CONTENTS (QUOTE (((:A :B :C) (:D :E :F)))))) (B (MAKE-ARRAY (QUOTE (3 2 1)) :DISPLACED-TO A :DISPLACED-INDEX-OFFSET 0))) (WITH-STANDARD-IO-SYNTAX (VALUES (WRITE-TO-STRING A :READABLY NIL :ARRAY T) (WRITE-TO-STRING B :READABLY NIL :ARRAY T)))) "#3A(((:A :B :C) (:D :E :F)))" "#3A(((:A) (:B)) ((:C) (:D)) ((:E) (:F)))")
;; Loading (DEFTEST PRINT.ARRAY.MULTI-DIM.1 (WITH-STANDARD-IO-SYNTAX (LOOP FOR D IN (REMOVE ARRAY-RANK-LIMIT (QUOTE (4 5 6 7 8 9 10 12 16 20 30 40 100 200 400 600 800 1023)) :TEST (FUNCTION <=)) FOR DIMS = (MAKE-LIST D :INITIAL-ELEMENT 1) FOR A = (MAKE-ARRAY DIMS :INITIAL-ELEMENT 0) FOR RESULT = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T)) FOR EXPECTED-RESULT = (CONCATENATE (QUOTE STRING) (FORMAT NIL "#~DA" D) (MAKE-STRING D :INITIAL-ELEMENT #\() "0" (MAKE-STRING D :INITIAL-ELEMENT #\))) UNLESS (STRING= RESULT EXPECTED-RESULT) COLLECT (LIST D RESULT EXPECTED-RESULT))) NIL)
;; Loading (DEFTEST PRINT.ARRAY.MULTI-DIM.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR D = (+ 4 (RANDOM (MIN (- ARRAY-RANK-LIMIT 4) 1000))) FOR P = (RANDOM D) FOR DIMS = (LET ((LIST (MAKE-LIST D :INITIAL-ELEMENT 1))) (SETF (ELT LIST P) 0) LIST) FOR A = (MAKE-ARRAY DIMS :INITIAL-ELEMENT 0) FOR RESULT = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING A :READABLY NIL :ARRAY T)) FOR EXPECTED-RESULT = (CONCATENATE (QUOTE STRING) (FORMAT NIL "#~DA" D) (MAKE-STRING (1+ P) :INITIAL-ELEMENT #\() (MAKE-STRING (1+ P) :INITIAL-ELEMENT #\))) REPEAT 50 UNLESS (STRING= RESULT EXPECTED-RESULT) COLLECT (LIST D RESULT EXPECTED-RESULT))) NIL)
;; Loading (LOAD "print-random-state.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-random-state.lsp C1EE97C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINT.RANDOM-STATE.1 (LOOP REPEAT 100 DO (LOOP REPEAT 50 DO (RANDOM 1000)) NCONC (LET* ((RS1 (MAKE-RANDOM-STATE *RANDOM-STATE*)) (RS2 (WITH-STANDARD-IO-SYNTAX (READ-FROM-STRING (WRITE-TO-STRING RS1 :READABLY T)))) (RESULT (LIST (NOTNOT (RANDOM-STATE-P RS2)) (IS-SIMILAR RS1 RS2)))) (UNLESS (EQUAL RESULT (QUOTE (T T))) (LIST RESULT RS1 RS2)))) NIL)
;; Loading (LOAD "print-pathname.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-pathname.lsp C1F30227>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINT.PATHNAME.1 (LOOP FOR P IN *UNIVERSE* WHEN (TYPEP P (QUOTE PATHNAME)) NCONC (LOOP REPEAT 10 NCONC (RANDOMLY-CHECK-READABILITY P :TEST (FUNCTION IS-SIMILAR) :CAN-FAIL T))) NIL)
;; Loading (DEFTEST PRINT.PATHNAME.2 (LOOP FOR P IN *UNIVERSE* WHEN (TYPEP P (QUOTE PATHNAME)) NCONC (LET ((NS (IGNORE-ERRORS (NAMESTRING P)))) "Read 22.1.3.11 before commenting on this test" (WHEN NS (LET ((EXPECTED-RESULT (CONCATENATE (QUOTE STRING) "#P" (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING NS :READABLY NIL :ESCAPE T)))) (RESULT (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING P :READABLY NIL :ESCAPE T)))) (UNLESS (STRING= EXPECTED-RESULT RESULT) (LIST (LIST EXPECTED-RESULT RESULT))))))) NIL)
;; Loading (LOAD "print-structure.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-structure.lsp C1F8BA57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFSTRUCT PRINT-STRUCT-1 FOO BAR)
;; Loading (DEFTEST PRINT-STRUCTURE.1 (LET ((S (MAKE-PRINT-STRUCT-1 :FOO 1 :BAR 2))) (WITH-STANDARD-IO-SYNTAX (LET ((*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (LET ((STR (WRITE-TO-STRING S :READABLY NIL :CASE :UPCASE :ESCAPE NIL))) (ASSERT (STRING= (SUBSEQ STR 0 3) "#S(")) (LET ((VALS (READ-FROM-STRING (SUBSEQ STR 2)))) (ASSERT (LISTP VALS)) (ASSERT (= (LENGTH VALS) 5)) (ASSERT (EQ (CAR VALS) (QUOTE PRINT-STRUCT-1))) (ASSERT (SYMBOLP (CADR VALS))) (ASSERT (SYMBOLP (CADDDR VALS))) (COND ((STRING= (SYMBOL-NAME (CADR VALS)) "FOO") (ASSERT (STRING= (SYMBOL-NAME (CADDDR VALS)) "BAR")) (ASSERT (= (CADDR VALS) 1)) (ASSERT (= (CAR (CDDDDR VALS)) 2))) (T (ASSERT (STRING= (SYMBOL-NAME (CADR VALS)) "BAR")) (ASSERT (STRING= (SYMBOL-NAME (CADDDR VALS)) "FOO")) (ASSERT (= (CADDR VALS) 2)) (ASSERT (= (CAR (CDDDDR VALS)) 1)))) NIL))))) NIL)
;; Loading (LOAD "printer-control-vars.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/printer-control-vars.lsp C1FF7397>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PRINT-BASE.INIT.1 *PRINT-BASE* 10)
;; Loading (DEFTEST PRINT-RADIX.INIT.1 *PRINT-RADIX* NIL)
;; Loading (DEFTEST PRINT-CASE.INIT.1 *PRINT-CASE* :UPCASE)
;; Loading (DEFTEST PRINT-CIRCLE.INIT.1 *PRINT-CIRCLE* NIL)
;; Loading (DEFTEST PRINT-ESCAPE.INIT.1 (NOTNOT *PRINT-ESCAPE*) T)
;; Loading (DEFTEST PRINT-GENSYM.INIT.1 (NOTNOT *PRINT-GENSYM*) T)
;; Loading (DEFTEST PRINT-LEVEL.INIT.1 *PRINT-LEVEL* NIL)
;; Loading (DEFTEST PRINT-LENGTH.INIT.1 *PRINT-LENGTH* NIL)
;; Loading (DEFTEST PRINT-LINES.INIT.1 *PRINT-LINES* NIL)
;; Loading (DEFTEST PRINT-READABLY.INIT.1 *PRINT-READABLY* NIL)
;; Loading (DEFTEST PRINT-RIGHT-MARGIN.INIT.1 *PRINT-RIGHT-MARGIN* NIL)
;; Loading (LOAD "pprint-dispatch.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-dispatch.lsp 81AE4437>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PPRINT-DISPATCH.1 (LOOP FOR X IN (APPEND *UNIVERSE* *CL-SYMBOLS*) FOR VALS = (MULTIPLE-VALUE-LIST (PPRINT-DISPATCH X)) FOR VALS2 = (MULTIPLE-VALUE-LIST (PPRINT-DISPATCH X *PRINT-PPRINT-DISPATCH*)) UNLESS (AND (= (LENGTH VALS) 2) (= (LENGTH VALS2) 2) (DESTRUCTURING-BIND (FUN FOUNDP) VALS (IF FOUNDP (AND (OR (TYPEP FUN (QUOTE FUNCTION)) (AND (SYMBOLP FUN) (SYMBOL-FUNCTION FUN))) (DESTRUCTURING-BIND (FUN2 FOUNDP2) VALS2 (AND (EQUAL FUN FUN2) FOUNDP2))) (NOT (CADR VALS2))))) COLLECT (LIST X VALS VALS2)) NIL)
;; Loading (DEFTEST PPRINT-DISPATCH.3 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T)) (LET ((F (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "ABC" :STREAM STREAM))))) (VALUES (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) F) (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) NIL) (WRITE-TO-STRING (QUOTE X)))))) "X" NIL "ABC" NIL "X")
;; Loading (DEFTEST PPRINT-DISPATCH.4 (MY-WITH-STANDARD-IO-SYNTAX (LOOP FOR V1 IN (REMOVE-IF-NOT (FUNCTION REALP) *UNIVERSE*) UNLESS (EQUAL (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T)) (LET ((F (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "ABC" :STREAM STREAM))))) (LIST (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) F V1) (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) NIL) (WRITE-TO-STRING (QUOTE X))))) (QUOTE ("X" NIL "ABC" NIL "X"))) COLLECT V1)) NIL)
;; Loading (DEFTEST PPRINT-DISPATCH.5 (MY-WITH-STANDARD-IO-SYNTAX (LOOP FOR V1 IN (REMOVE-IF-NOT (FUNCTION REALP) *UNIVERSE*) UNLESS (EQUAL (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T)) (LET ((F (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "ABC" :STREAM STREAM))))) (LIST (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) F) (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) NIL V1) (WRITE-TO-STRING (QUOTE X))))) (QUOTE ("X" NIL "ABC" NIL "X"))) COLLECT V1)) NIL)
;; Loading (DEFTEST PPRINT-DISPATCH.6 (MY-WITH-STANDARD-IO-SYNTAX (LET ((OTHER-PPD-TABLE (COPY-PPRINT-DISPATCH NIL)) (*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T)) (LET ((F (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "ABC" :STREAM STREAM))))) (VALUES (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) F 0 OTHER-PPD-TABLE) (WRITE-TO-STRING (QUOTE X)) (LET ((*PRINT-PPRINT-DISPATCH* OTHER-PPD-TABLE)) (WRITE-TO-STRING (QUOTE X))) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) F) (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) NIL) (WRITE-TO-STRING (QUOTE X)))))) "X" NIL "X" "ABC" NIL "ABC" NIL "X")
;; Loading (DEFTEST PPRINT-DISPATCH.7 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T)) (LET ((F (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "ABC" :STREAM STREAM)))) (G (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "DEF" :STREAM STREAM))))) (VALUES (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) F) (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (MEMBER X Y)) G 0.000099) (WRITE-TO-STRING (QUOTE X)) (WRITE-TO-STRING (QUOTE Y)))))) "X" NIL "ABC" NIL "DEF" "DEF")
;; Loading (DEFTEST PPRINT-DISPATCH.8 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T)) (LET ((F (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "ABC" :STREAM STREAM)))) (G (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "DEF" :STREAM STREAM))))) (VALUES (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (EQL X)) F) (WRITE-TO-STRING (QUOTE X)) (SET-PPRINT-DISPATCH (QUOTE (MEMBER X Y)) G -0.000099) (WRITE-TO-STRING (QUOTE X)) (WRITE-TO-STRING (QUOTE Y)))))) "X" NIL "ABC" NIL "ABC" "DEF")
;; Loading (DEFUN PPRINT-DISPATCH-TEST-FN.1 (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "ABC" :STREAM STREAM))
;; Loading (DEFUN PPRINT-DISPATCH-TEST-FN.2 (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE "DEF" :STREAM STREAM))
;; Loading (DEFTEST PPRINT-DISPATCH.9 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T)) (VALUES (WRITE-TO-STRING (QUOTE X)) (MULTIPLE-VALUE-LIST (SET-PPRINT-DISPATCH (QUOTE (EQL X)) (QUOTE PPRINT-DISPATCH-TEST-FN.1))) (WRITE-TO-STRING (QUOTE X)) (MULTIPLE-VALUE-LIST (SET-PPRINT-DISPATCH (QUOTE (EQL X)) (QUOTE PPRINT-DISPATCH-TEST-FN.2))) (WRITE-TO-STRING (QUOTE X))))) "X" (NIL) "ABC" (NIL) "DEF")
;; Loading (DEFTEST PPRINT-DISPATCH.ERROR.1 (SIGNALS-ERROR (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL))) (PPRINT-DISPATCH)) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-DISPATCH.ERROR.2 (SIGNALS-ERROR (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL))) (PPRINT-DISPATCH NIL NIL NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-PPRINT-DISPATCH.ERROR.1 (SIGNALS-ERROR (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL))) (SET-PPRINT-DISPATCH)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-PPRINT-DISPATCH.ERROR.2 (SIGNALS-ERROR (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL))) (SET-PPRINT-DISPATCH T)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-PPRINT-DISPATCH.ERROR.3 (SIGNALS-ERROR (LET ((TABLE (COPY-PPRINT-DISPATCH NIL))) (SET-PPRINT-DISPATCH T (QUOTE IDENTITY) 0 TABLE NIL)) PROGRAM-ERROR) T)
;; Loading (DEFTEST SET-PPRINT-DISPATCH.ERROR.4 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (TYPEP X (QUOTE REAL)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (LET ((TABLE (COPY-PPRINT-DISPATCH NIL))) (SET-PPRINT-DISPATCH T (QUOTE IDENTITY) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)))) ERROR)))) COLLECT X) NIL)
;; Loading (DEFTEST SET-PPRINT-DISPATCH.ERROR.4-UNSAFE (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (TYPEP X (QUOTE REAL)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (LET ((TABLE (COPY-PPRINT-DISPATCH NIL))) (DECLARE (OPTIMIZE (SAFETY 0))) (SET-PPRINT-DISPATCH T (QUOTE IDENTITY) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)))) ERROR)))) COLLECT X) NIL)
;; Loading (LOAD "pprint-fill.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-fill.lsp 81CCB127>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PPRINT-FILL.1 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL)) (LOOP FOR OBJ IN *MINI-UNIVERSE* NCONC (AND (NOT (LISTP OBJ)) (LET ((S1 (WRITE-TO-STRING OBJ)) (S2 (WITH-OUTPUT-TO-STRING (S) (PPRINT-FILL S OBJ)))) (UNLESS (EQUAL S1 S2) (LIST (LIST OBJ S1 S2)))))))) NIL)
;; Loading (DEFTEST PPRINT-FILL.2 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-READABLY* NIL)) (LOOP FOR OBJ IN *MINI-UNIVERSE* NCONC (AND (NOT (LISTP OBJ)) (LET ((S1 (WRITE-TO-STRING OBJ)) (S2 (WITH-OUTPUT-TO-STRING (S) (PPRINT-FILL S OBJ)))) (UNLESS (EQUAL S1 S2) (LIST (LIST OBJ S1 S2)))))))) NIL)
;; Loading (DEFMACRO DEF-PPRINT-FILL-TEST (NAME ARGS EXPECTED-VALUE &KEY (MARGIN 100) (CIRCLE NIL) (LEN NIL)) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* (SYSTEM.INTERNALS::BQ-COMMA MARGIN)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (*PRINT-LENGTH* (SYSTEM.INTERNALS::BQ-COMMA LEN)) (*PRINT-CIRCLE* (SYSTEM.INTERNALS::BQ-COMMA CIRCLE))) (WITH-OUTPUT-TO-STRING (S) (PPRINT-FILL S (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS))))) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-VALUE))))
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.3 ((QUOTE (A))) "(A)")
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.4 ((QUOTE (A)) T) "(A)")
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.5 ((QUOTE (A)) NIL) "A")
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.6 ((QUOTE (1 2 3 4 5))) "(1 2 3 4 5)")
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.7 ((QUOTE ((1) (2) #(3) "abc" 5)) NIL) "(1) (2) #(3) \"abc\" 5")
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.8 ((QUOTE (1 2 3 4 5)) T NIL) "(1 2 3 4 5)")
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.9 ((QUOTE (1 2 3 4 5)) NIL T) "1 2 3 4 5")
;; Loading (DEFTEST PPRINT-FILL.10 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100)) (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PPRINT-FILL T (QUOTE (1 2 3)))))))) "(1 2 3)")
;; Loading (DEFTEST PPRINT-FILL.11 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-FILL NIL (QUOTE (1 2 3)))))) "(1 2 3)")
;; Loading (DEFTEST PPRINT-FILL.12 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (OBJ (QUOTE (M M M M M M M M M M)))) (LOOP FOR I FROM 1 TO 10 FOR RESULT = (LET* ((*PRINT-RIGHT-MARGIN* I) (S (WITH-OUTPUT-TO-STRING (OS) (TERPRI OS) (PPRINT-FILL OS OBJ)))) (COND ((NOT (EQL (ELT S 0) #\Newline)) (LIST :BAD1 S)) ((NOT (EQUAL (READ-FROM-STRING S) OBJ)) (LIST :BAD2 S)) ((NOT (FIND #\Newline S :START 1)) (LIST :BAD3 S)) (T T))) UNLESS (EQL RESULT T) COLLECT (LIST I RESULT)))) NIL)
;; Loading (DEFTEST PPRINT-FILL.13 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (OBJ (QUOTE (M M M M M M M M M M M)))) (LOOP FOR I FROM 1 TO 10 FOR RESULT = (LET* ((*PRINT-RIGHT-MARGIN* I) (S (WITH-OUTPUT-TO-STRING (OS) (TERPRI OS) (PPRINT-FILL OS OBJ NIL)))) (COND ((NOT (EQL (ELT S 0) #\Newline)) (LIST :BAD1 S)) ((NOT (EQUAL (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "(" S ")")) OBJ)) (LIST :BAD2 S)) ((NOT (FIND #\Newline S :START 1)) (LIST :BAD3 S)) (T T))) UNLESS (EQL RESULT T) COLLECT (LIST I RESULT)))) NIL)
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.14 ((LET ((X (LIST (QUOTE A)))) (LIST X X))) "(#1=(A) #1#)" :CIRCLE T)
;; Loading (DEF-PPRINT-FILL-TEST PPRINT-FILL.15 ((LET ((X (LIST (QUOTE A)))) (SETF (CDR X) X) X)) "#1=(A . #1#)" :CIRCLE T :LEN 500)
;; Loading (DEFTEST PPRINT-FILL.RETURN-VALUES.1 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (WITH-OPEN-STREAM (S (MAKE-BROADCAST-STREAM)) (PPRINT-FILL S (QUOTE (A B)))))) NIL)
;; Loading (DEFTEST PPRINT-FILL.RETURN-VALUES.2 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST))) (WITH-OPEN-STREAM (S (MAKE-BROADCAST-STREAM)) (PPRINT-FILL S 10 NIL T)))) NIL)
;; Loading (DEFTEST PPRINT-FILL.ERROR.1 (SIGNALS-ERROR (PPRINT-FILL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-FILL.ERROR.2 (SIGNALS-ERROR (PPRINT-FILL *STANDARD-OUTPUT*) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-FILL.ERROR.3 (SIGNALS-ERROR (PPRINT-FILL *STANDARD-OUTPUT* NIL T T T) PROGRAM-ERROR) T)
;; Loading (LOAD "pprint-linear.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-linear.lsp 81E51937>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PPRINT-LINEAR.1 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL)) (LOOP FOR OBJ IN *MINI-UNIVERSE* NCONC (AND (NOT (LISTP OBJ)) (LET ((S1 (WRITE-TO-STRING OBJ)) (S2 (WITH-OUTPUT-TO-STRING (S) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-LINEAR S OBJ)) (QUOTE (NIL))))))) (UNLESS (EQUAL S1 S2) (LIST (LIST OBJ S1 S2)))))))) NIL)
;; Loading (DEFTEST PPRINT-LINEAR.2 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-READABLY* NIL)) (LOOP FOR OBJ IN *MINI-UNIVERSE* NCONC (AND (NOT (LISTP OBJ)) (LET ((S1 (WRITE-TO-STRING OBJ)) (S2 (WITH-OUTPUT-TO-STRING (S) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-LINEAR S OBJ)) (QUOTE (NIL))))))) (UNLESS (EQUAL S1 S2) (LIST (LIST OBJ S1 S2)))))))) NIL)
;; Loading (DEFMACRO DEF-PPRINT-LINEAR-TEST (NAME ARGS EXPECTED-VALUE &KEY (MARGIN 100) (CIRCLE NIL)) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* (SYSTEM.INTERNALS::BQ-COMMA MARGIN)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (*PRINT-CIRCLE* (SYSTEM.INTERNALS::BQ-COMMA CIRCLE))) (WITH-OUTPUT-TO-STRING (S) (PPRINT-LINEAR S (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS))))) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-VALUE))))
;; Loading (DEF-PPRINT-LINEAR-TEST PPRINT-LINEAR.3 ((QUOTE (A))) "(A)")
;; Loading (DEF-PPRINT-LINEAR-TEST PPRINT-LINEAR.4 ((QUOTE (A)) T) "(A)")
;; Loading (DEF-PPRINT-LINEAR-TEST PPRINT-LINEAR.5 ((QUOTE (A)) NIL) "A")
;; Loading (DEF-PPRINT-LINEAR-TEST PPRINT-LINEAR.6 ((QUOTE (1 2 3 4 5))) "(1 2 3 4 5)")
;; Loading (DEF-PPRINT-LINEAR-TEST PPRINT-LINEAR.7 ((QUOTE ((1) (2) #(3) "abc" 5)) NIL) "(1) (2) #(3) \"abc\" 5")
;; Loading (DEF-PPRINT-LINEAR-TEST PPRINT-LINEAR.8 ((QUOTE (1 2 3 4 5)) T NIL) "(1 2 3 4 5)")
;; Loading (DEF-PPRINT-LINEAR-TEST PPRINT-LINEAR.9 ((QUOTE (1 2 3 4 5)) NIL T) "1 2 3 4 5")
;; Loading (DEFTEST PPRINT-LINEAR.10 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100)) (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PPRINT-LINEAR T (QUOTE (1 2 3)))))))) "(1 2 3)")
;; Loading (DEFTEST PPRINT-LINEAR.11 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LINEAR NIL (QUOTE (1 2 3)))))) "(1 2 3)")
;; Loading (DEFTEST PPRINT-LINEAR.12 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (OBJ (QUOTE (M M M M M M M M M M)))) (LOOP FOR I FROM 1 TO 10 FOR RESULT = (LET* ((*PRINT-RIGHT-MARGIN* I) (S (WITH-OUTPUT-TO-STRING (OS) (TERPRI OS) (PPRINT-LINEAR OS OBJ)))) (COND ((NOT (EQL (ELT S 0) #\Newline)) (LIST :BAD1 S)) ((NOT (EQUAL (READ-FROM-STRING S) OBJ)) (LIST :BAD2 S)) ((< (COUNT #\Newline S) (LENGTH OBJ)) (LIST :BAD3 S)) (T T))) UNLESS (EQL RESULT T) COLLECT (LIST I RESULT)))) NIL)
;; Loading (DEFTEST PPRINT-LINEAR.13 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (OBJ (QUOTE (M M M M M M M M M M M)))) (LOOP FOR I FROM 1 TO 10 FOR RESULT = (LET* ((*PRINT-RIGHT-MARGIN* I) (S (WITH-OUTPUT-TO-STRING (OS) (TERPRI OS) (PPRINT-LINEAR OS OBJ NIL)))) (COND ((NOT (EQL (ELT S 0) #\Newline)) (LIST :BAD1 S)) ((NOT (EQUAL (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "(" S ")")) OBJ)) (LIST :BAD2 S)) ((< (COUNT #\Newline S) (LENGTH OBJ)) (LIST :BAD3 S)) (T T))) UNLESS (EQL RESULT T) COLLECT (LIST I RESULT)))) NIL)
;; Loading (DEF-PPRINT-LINEAR-TEST PPRINT-LINEAR.14 ((LET ((X (LIST (QUOTE A)))) (LIST X X))) "(#1=(A) #1#)" :CIRCLE T)
;; Loading (DEFTEST PPRINT-LINEAR.ERROR.1 (SIGNALS-ERROR (PPRINT-LINEAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-LINEAR.ERROR.2 (SIGNALS-ERROR (PPRINT-LINEAR *STANDARD-OUTPUT*) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-LINEAR.ERROR.3 (SIGNALS-ERROR (PPRINT-LINEAR *STANDARD-OUTPUT* NIL T T T) PROGRAM-ERROR) T)
;; Loading (LOAD "pprint-tabular.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-tabular.lsp 81FAD117>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PPRINT-TABULAR.1 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL)) (LOOP FOR OBJ IN *MINI-UNIVERSE* NCONC (AND (NOT (LISTP OBJ)) (LET ((S1 (WRITE-TO-STRING OBJ)) (S2 (WITH-OUTPUT-TO-STRING (S) (PPRINT-TABULAR S OBJ)))) (UNLESS (EQUAL S1 S2) (LIST (LIST OBJ S1 S2)))))))) NIL)
;; Loading (DEFTEST PPRINT-TABULAR.2 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-READABLY* NIL)) (LOOP FOR OBJ IN *MINI-UNIVERSE* NCONC (AND (NOT (LISTP OBJ)) (LET ((S1 (WRITE-TO-STRING OBJ)) (S2 (WITH-OUTPUT-TO-STRING (S) (PPRINT-TABULAR S OBJ)))) (UNLESS (EQUAL S1 S2) (LIST (LIST OBJ S1 S2)))))))) NIL)
;; Loading (DEFMACRO DEF-PPRINT-TABULAR-TEST (NAME ARGS EXPECTED-VALUE &KEY (MARGIN 100) (CIRCLE NIL) (PRE NIL)) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* (SYSTEM.INTERNALS::BQ-COMMA MARGIN)) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (*PRINT-CIRCLE* (SYSTEM.INTERNALS::BQ-COMMA CIRCLE))) (WITH-OUTPUT-TO-STRING (S) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN PRE (LIST PRE))) (PPRINT-TABULAR S (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN ARGS))))) (SYSTEM.INTERNALS::BQ-COMMA EXPGC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
ECTED-VALUE))))
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.3 ((QUOTE (M))) "(M)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.4 ((QUOTE (M)) T) "(M)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.5 ((QUOTE (M)) NIL) "M")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.6 ((QUOTE (M M))) "(M               M)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.7 ((QUOTE (M M)) T NIL 1) "(M M)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.8 ((QUOTE (M M)) T T 3) "(M  M)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.9 ((QUOTE (M M)) T NIL 4) "(M   M)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.10 ((QUOTE (MM MM)) T NIL 4) "(MM  MM)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.11 ((QUOTE (MM MM)) T NIL 5) "(MM   MM)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.12 ((QUOTE (M MM)) T NIL 5) "(M    MM)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.13 ((LET ((X (LIST (QUOTE A)))) (LIST X X)) T NIL 1) "(#1=(A) #1#)" :CIRCLE T)
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.14 ((QUOTE (M M)) T T 4) "(M   M)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.15 ((QUOTE (1 2 3 4)) T T 1) "(1 2 3 4)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.16 ((QUOTE (10 20 30 40)) T T 1) "(10 20 30 40)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.17 ((QUOTE (10 200 3000 40000)) T T 1) "(10 200 3000 40000)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.18 ((QUOTE (10 20 30 40)) T T 2) "(10  20  30  40)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.19 ((QUOTE (10 200 3000 40000)) T T 2) "(10  200 3000  40000)")
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.20 ((QUOTE (1 2 3)) T NIL 1) "     (1 2 3)" :PRE (WRITE "     " :STREAM S :ESCAPE NIL))
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.21 ((QUOTE (1 2 3)) T NIL 1) "     (1
      2
      3)" :PRE (WRITE "     " :STREAM S :ESCAPE NIL) :MARGIN 9)
;; Loading (DEF-PPRINT-TABULAR-TEST PPRINT-TABULAR.22 ((QUOTE (1 2 3)) T NIL 1) "     (1 2
      3)" :PRE (WRITE "     " :STREAM S :ESCAPE NIL) :MARGIN 10)
;; Loading (DEFTEST PPRINT-TABULAR.23 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100)) (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PPRINT-TABULAR T (QUOTE (1 2 3)) T NIL 1)))))) "(1 2 3)")
;; Loading (DEFTEST PPRINT-TABULAR.24 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-TABULAR NIL (QUOTE (1 2 3)) T NIL 1)))) "(1 2 3)")
;; Loading (DEFTEST PPRINT-TABULAR.RETURN-VALUES.1 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST))) (WITH-OPEN-STREAM (S (MAKE-BROADCAST-STREAM)) (PPRINT-TABULAR S (QUOTE (A B)))))) NIL)
;; Loading (DEFTEST PPRINT-TABULAR.RETURN-VALUES.2 (MY-WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST))) (WITH-OPEN-STREAM (S (MAKE-BROADCAST-STREAM)) (PPRINT-TABULAR S 10 NIL NIL 100)))) NIL)
;; Loading (DEFTEST PPRINT-TABULAR.ERROR.1 (SIGNALS-ERROR (PPRINT-TABULAR) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-TABULAR.ERROR.2 (SIGNALS-ERROR (PPRINT-TABULAR *STANDARD-OUTPUT*) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-TABULAR.ERROR.3 (SIGNALS-ERROR (PPRINT-TABULAR *STANDARD-OUTPUT* NIL T NIL 1 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-TABULAR.ERROR.4 (SIGNALS-ERROR (PPRINT-TABULAR *STANDARD-OUTPUT* (QUOTE (A B C)) T T 1 NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "pprint-indent.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-indent.lsp C1C605E7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PPRINT-INDENT.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL)) (WITH-OPEN-STREAM (*STANDARD-OUTPUT* (MAKE-STRING-OUTPUT-STREAM)) (PPRINT-INDENT :BLOCK 0)))) NIL)
;; Loading (DEFTEST PPRINT-INDENT.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL)) (WITH-OPEN-STREAM (*STANDARD-OUTPUT* (MAKE-BROADCAST-STREAM)) (PPRINT-INDENT :CURRENT 0)))) NIL)
;; Loading (DEFTEST PPRINT-INDENT.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL)) (WITH-OPEN-STREAM (S (MAKE-STRING-OUTPUT-STREAM)) (PPRINT-INDENT :CURRENT 10 S)))) NIL)
;; Loading (DEFTEST PPRINT-INDENT.4 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL)) (WITH-OPEN-STREAM (S (MAKE-STRING-OUTPUT-STREAM)) (PPRINT-INDENT :BLOCK 1/2 S)))) NIL)
;; Loading (DEFTEST PPRINT-INDENT.5 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL)) (WITH-OPEN-STREAM (S (MAKE-STRING-OUTPUT-STREAM)) (PPRINT-INDENT :BLOCK 0.1 S)))) NIL)
;; Loading (DEFTEST PPRINT-INDENT.6 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL)) (LOOP FOR X IN (QUOTE (1.0 1.0 1.0 1.0)) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (WITH-OPEN-STREAM (S (MAKE-STRING-OUTPUT-STREAM)) (PPRINT-INDENT :BLOCK X S))) (QUOTE (NIL))) COLLECT X))) NIL)
;; Loading (DEFTEST PPRINT-INDENT.7 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL)) (WITH-OPEN-STREAM (*STANDARD-OUTPUT* (MAKE-BROADCAST-STREAM)) (PPRINT-INDENT :CURRENT 0 NIL)))) NIL)
;; Loading (DEFTEST PPRINT-INDENT.8 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL)) (WITH-OPEN-STREAM (OS (MAKE-STRING-OUTPUT-STREAM)) (WITH-OPEN-STREAM (IS (MAKE-STRING-INPUT-STREAM "")) (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PPRINT-INDENT :CURRENT 0 T)))))) NIL)
;; Loading (DEFTEST PPRINT-INDENT.9 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M))) (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :CURRENT 3 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) "M
    M")
;; Loading (DEFTEST PPRINT-INDENT.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M)) :PREFIX "(" :SUFFIX ")") (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :CURRENT 1 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) "(M
   M)")
;; Loading (DEFTEST PPRINT-INDENT.11 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M)) :PREFIX "(" :SUFFIX ")") (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :CURRENT -1 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) "(M
 M)")
;; Loading (DEFTEST PPRINT-INDENT.12 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M)) :PREFIX "(" :SUFFIX ")") (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :CURRENT -2.0 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) "(M
M)")
;; Loading (DEFTEST PPRINT-INDENT.13 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M))) (WRITE (QUOTE MMM) :STREAM OS) (PPRINT-INDENT :BLOCK 0 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE MMMMM) :STREAM OS))))) "MMM
MMMMM")
;; Loading (DEFTEST PPRINT-INDENT.13A (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M)) :PREFIX "(" :SUFFIX ")") (WRITE (QUOTE MMM) :STREAM OS) (PPRINT-INDENT :BLOCK 0 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE MMMMM) :STREAM OS))))) "(MMM
 MMMMM)")
;; Loading (DEFTEST PPRINT-INDENT.14 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M))) (WRITE (QUOTE MMM) :STREAM OS) (PPRINT-INDENT :BLOCK 1 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE MMMMM) :STREAM OS))))) "MMM
 MMMMM")
;; Loading (DEFTEST PPRINT-INDENT.15 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M))) (WRITE (QUOTE MMM) :STREAM OS) (PPRINT-INDENT :BLOCK -1 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE MMMMM) :STREAM OS))))) "MMM
MMMMM")
;; Loading (DEFTEST PPRINT-INDENT.16 (LOOP FOR N IN (QUOTE (3.0 3.0 3.0 3.0)) UNLESS (STRING= (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M))) (WRITE (QUOTE MMM) :STREAM OS) (PPRINT-INDENT :BLOCK N OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE MMMMM) :STREAM OS))))) "MMM
   MMMMM") COLLECT N) NIL)
;; Loading (DEFTEST PPRINT-INDENT.17 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M))) (WRITE (QUOTE M) :STREAM OS) (LET ((*PRINT-PRETTY* NIL)) (PPRINT-INDENT :CURRENT 3 OS)) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) "M
M")
;; Loading (DEFTEST PPRINT-INDENT.18 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M))) (WRITE (QUOTE M) :STREAM OS) (LET ((*PRINT-PRETTY* NIL)) (PPRINT-INDENT :BLOCK 3 OS)) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) "M
M")
;; Loading (DEFTEST PPRINT-INDENT.19 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M M)) :PER-LINE-PREFIX ">>>>") (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :BLOCK 2 OS) (WRITE #\Space :STREAM OS) (WRITE (QUOTE M) :STREAM OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) ">>>>M M
>>>>  M")
;; Loading (DEFTEST PPRINT-INDENT.20 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M)) :PER-LINE-PREFIX ">>>>") (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :BLOCK -1 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) ">>>>M
>>>>M")
;; Loading (DEFTEST PPRINT-INDENT.21 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (M M M M)) :PER-LINE-PREFIX ">>>>") (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :BLOCK 3 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :CURRENT -2 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS) (PPRINT-INDENT :CURRENT -5 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE (QUOTE M) :STREAM OS))))) ">>>>M
>>>>   M
>>>>  M
>>>>M")
;; Loading (DEFTEST PPRINT-INDENT.22 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-MISER-WIDTH* 200) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 2 3)) :PREFIX "(" :SUFFIX ")") (WRITE 1 :STREAM OS) (PPRINT-INDENT :CURRENT 1 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE 2 :STREAM OS) (PPRINT-INDENT :BLOCK 3 OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE 3 :STREAM OS))))) "(1
 2
 3)")
;; Loading (DEFTEST PPRINT-INDENT.23 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-READABLY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-ESCAPE* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 2 3 4))) (PPRINT-INDENT :BLOCK 2 OS) (WRITE 1 :STREAM OS) (TERPRI OS) (WRITE 2 :STREAM OS) (WRITE #\Newline :STREAM OS) (WRITE 3 :STREAM OS) (PPRINT-NEWLINE :MANDATORY OS) (WRITE 4 :STREAM OS))))) "1
2
3
  4")
;; Loading (DEFTEST PPRINT-INDENT.ERROR.1 (SIGNALS-ERROR (PPRINT-INDENT) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-INDENT.ERROR.2 (SIGNALS-ERROR (PPRINT-INDENT :CURRENT) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-INDENT.ERROR.3 (SIGNALS-ERROR (PPRINT-INDENT :BLOCK 0 *STANDARD-OUTPUT* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-INDENT.ERROR.4 (LOOP FOR X IN *MINI-UNIVERSE* WHEN (AND (NOT (MEMBER X (QUOTE (:BLOCK :CURRENT)))) (NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (PPRINT-INDENT (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) 0) ERROR))))) COLLECT X) NIL)
;; Loading (DEFTEST PPRINT-INDENT.ERROR.4-UNSAFE (LOOP FOR X IN *MINI-UNIVERSE* WHEN (AND (NOT (MEMBER X (QUOTE (:BLOCK :CURRENT)))) (NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (LOCALLY (DECLARE (OPTIMIZE (SAFETY 0))) (PPRINT-INDENT (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) 0)) ERROR))))) COLLECT X) NIL)
;; Loading (LOAD "pprint-logical-block.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-logical-block.lsp C1EB0497>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL)) (WITH-OPEN-STREAM (OS (MAKE-STRING-OUTPUT-STREAM)) (VALUES (MULTIPLE-VALUE-LIST (PPRINT-LOGICAL-BLOCK (OS 1))) (GET-OUTPUT-STREAM-STRING OS))))) (NIL) "1")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (1 A (B) (C . D) 1.0 2.0 -3.0 4.0 1/2 #(X Y Z))))) (STRING=T (WITH-OUTPUT-TO-STRING (S) (WRITE VAL :STREAM S)) (WITH-OUTPUT-TO-STRING (S) (PPRINT-LOGICAL-BLOCK (S VAL) (WRITE VAL :STREAM S)))))) T)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (NIL 1))))) "1")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.4 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PPRINT-LOGICAL-BLOCK (T 1))))))) "1")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.5 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (1)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL) (WRITE (CAR VAL) :STREAM OS))))) "1")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.6 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (2)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "[" :SUFFIX "]") (WRITE (CAR VAL) :STREAM OS))))) "[2]")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.7 :NOTES (:NIL-VECTORS-ARE-STRINGS) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (3)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL) :SUFFIX (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE NIL)) (WRITE (CAR VAL) :STREAM OS))))) "3")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.8 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (4)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 3) :SUFFIX (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "!?" :ADJUSTABLE T)) (WRITE (CAR VAL) :STREAM OS))))) "abc4!?")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.9 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LEVEL* 1) (VAL (QUOTE ((4))))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "{" :SUFFIX "}") (PPRINT-LOGICAL-BLOCK (OS (CAR VAL) :PREFIX "[" :SUFFIX "]") (WRITE (CAAR VAL) :STREAM OS)))))) "{#}")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LEVEL* 0) (VAL (QUOTE (5)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "[" :SUFFIX "]") (WRITE (CAR VAL) :STREAM OS))))) "#")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.11 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (6)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PER-LINE-PREFIX "abcd") (WRITE (CAR VAL) :STREAM OS))))) "abcd6")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.12 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (A B C)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PER-LINE-PREFIX "abcd") (WRITE 1 :STREAM OS) (TERPRI OS) (TERPRI OS) (WRITE 2 :STREAM OS) (TERPRI OS) (WRITE 3 :STREAM OS))))) "abcd1
abcd
abcd2
abcd3")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.13 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LEVEL* 0) (VAL (QUOTE (5)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "[" :SUFFIX "]") (WRITE (CAR VAL) :STREAM OS))))) "#")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.14 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (6)))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PER-LINE-PREFIX "[" :SUFFIX "]") (WRITE (CAR VAL) :STREAM OS))))) "[6]")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.15 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (X 0)) (WITH-OUTPUT-TO-STRING (OS) (DECLARE (INTEGER X)) (DECLARE (OPTIMIZE (SAFETY 3)))))) "")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.16 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL 9)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "[" :SUFFIX "]") (WRITE VAL :STREAM OS))))) "9")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.17 (WITH-STANDARD-IO-SYNTAX (LET* ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-CIRCLE* T) (V1 (QUOTE (8))) (VAL (LIST V1 V1))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "(" :SUFFIX ")") (PPRINT-LOGICAL-BLOCK (OS (CAR VAL) :PREFIX "(" :SUFFIX ")") (WRITE (CAAR VAL) :STREAM OS)) (WRITE-CHAR #\Space OS) (PPRINT-LOGICAL-BLOCK (OS (CADR VAL) :PREFIX "(" :SUFFIX ")") (WRITE (CAADR VAL) :STREAM OS)))))) "(#1=(8) #1#)GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
")
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* (QUOTE (1)) :PREFIX X)))) (FUNCTION STRINGP)) NIL)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.ERROR.1-UNSAFE (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (DECLARE (OPTIMIZE (SAFETY 0))) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* (QUOTE (1)) :PREFIX X)))) (FUNCTION STRINGP)) NIL)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.ERROR.2 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* (QUOTE (1)) :SUFFIX X)))) (FUNCTION STRINGP)) NIL)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.ERROR.2-UNSAFE (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (DECLARE (OPTIMIZE (SAFETY 0))) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* (QUOTE (1)) :SUFFIX X)))) (FUNCTION STRINGP)) NIL)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* (QUOTE (1)) :PER-LINE-PREFIX X)))) (FUNCTION STRINGP)) NIL)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.ERROR.3-UNSAFE (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (DECLARE (OPTIMIZE (SAFETY 0))) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* (QUOTE (1)) :PER-LINE-PREFIX X)))) (FUNCTION STRINGP)) NIL)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.ERROR.4 (SIGNALS-ERROR (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (7)))) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "" :PER-LINE-PREFIX "") (WRITE (CAR VAL) :STREAM OS)))) ERROR) T)
;; Loading (DEFTEST PPRINT-LOGICAL-BLOCK.ERROR.4-UNSAFE (SIGNALS-ERROR (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (VAL (QUOTE (7)))) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "" :PER-LINE-PREFIX "") (WRITE (CAR VAL) :STREAM OS)))) ERROR :SAFETY 0) T)
;; Loading (LOAD "pprint-exit-if-list-exhausted.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-exit-if-list-exhausted.lsp 81B42217>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST PPRINT-EXIT-IF-LIST-EXHAUSTED.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 2))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-EXIT-IF-LIST-EXHAUSTED)) (QUOTE (NIL)))) (WRITE (PPRINT-POP) :STREAM OS) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-EXIT-IF-LIST-EXHAUSTED)) (QUOTE (NIL)))) (WRITE #\Space :STREAM OS) (WRITE (PPRINT-POP) :STREAM OS) (PPRINT-EXIT-IF-LIST-EXHAUSTED) (ASSERT NIL))))) "1 2")
;; Loading (DEFTEST PPRINT-EXIT-IF-LIST-EXHAUSTED.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 2))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-EXIT-IF-LIST-EXHAUSTED)) (QUOTE (NIL)))) (WRITE (PPRINT-POP) :STREAM OS) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-EXIT-IF-LIST-EXHAUSTED)) (QUOTE (NIL)))) (WRITE #\Space :STREAM OS) (WRITE (PPRINT-POP) :STREAM OS) (PPRINT-EXIT-IF-LIST-EXHAUSTED) (ASSERT NIL))))) "1 2")
;; Loading (DEFTEST PPRINT-EXIT-IF-LIST-EXHAUSTED.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 . 2))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-EXIT-IF-LIST-EXHAUSTED)) (QUOTE (NIL)))) (WRITE (PPRINT-POP) :STREAM OS) (WRITE #\Space :STREAM OS) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-EXIT-IF-LIST-EXHAUSTED)) (QUOTE (NIL)))) (PPRINT-POP) (ASSERT NIL))))) "1 . 2")
;; Loading (DEFTEST PPRINT-EXIT-IF-LIST-EXHAUSTED.4 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 . 2)) :PREFIX "[" :SUFFIX "]") (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-EXIT-IF-LIST-EXHAUSTED)) (QUOTE (NIL)))) (WRITE (PPRINT-POP) :STREAM OS) (WRITE #\Space :STREAM OS) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PPRINT-EXIT-IF-LIST-EXHAUSTED)) (QUOTE (NIL)))) (PPRINT-POP) (ASSERT NIL))))) "[1 . 2]")
;; Loading (DEFTEST PPRINT-POP.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* 0)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS NIL) (PPRINT-POP) (ASSERT NIL))))) "...")
;; Loading (DEFTEST PPRINT-POP.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* 0)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS 1) (PPRINT-POP))))) "1")
;; Loading (DEFTEST PPRINT-POP.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* 1)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1))) (ASSERT (EQUAL (QUOTE (1)) (MULTIPLE-VALUE-LIST (PPRINT-POP)))))))) "")
;; Loading (DEFTEST PPRINT-POP.4 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* 0)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 2 3)) :PREFIX "{" :SUFFIX "}") (PPRINT-POP) (ASSERT NIL))))) "{...}")
;; Loading (DEFTEST PPRINT-POP.5 (FLET ((%F (LEN) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* LEN)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 2 3 4 5)) :PREFIX "{" :SUFFIX "}") (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE (PPRINT-POP) :STREAM OS) (LOOP (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE #\Space :STREAM OS) (WRITE (PPRINT-POP) :STREAM OS)))))))) (VALUES (%F 0) (%F 1) (%F 2) (%F 3) (%F 4) (%F 5) (%F 6))) "{...}" "{1 ...}" "{1 2 ...}" "{1 2 3 ...}" "{1 2 3 4 ...}" "{1 2 3 4 5}" "{1 2 3 4 5}")
;; Loading (DEFTEST PPRINT-POP.6 (FLET ((%F (LEN) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* LEN)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS (QUOTE (1 2 . 3)) :PREFIX "{" :SUFFIX "}") (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE (PPRINT-POP) :STREAM OS) (LOOP (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE #\Space :STREAM OS) (WRITE (PPRINT-POP) :STREAM OS)))))))) (VALUES (%F 0) (%F 1) (%F 2) (%F 3) (%F 4))) "{...}" "{1 ...}" "{1 2 . 3}" "{1 2 . 3}" "{1 2 . 3}")
;; Loading (DEFTEST PPRINT-POP.7 (FLET ((%F (LEN) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* LEN) (*PRINT-CIRCLE* T)) (WITH-OUTPUT-TO-STRING (OS) (LET* ((TAIL (LIST 1)) (X (LIST* TAIL 2 TAIL))) (PPRINT-LOGICAL-BLOCK (OS X :PREFIX "<" :SUFFIX ">") (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE (PPRINT-POP) :STREAM OS) (LOOP (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE #\Space :STREAM OS) (WRITE (PPRINT-POP) :STREAM OS))))))))) (VALUES (%F NIL) (%F 0) (%F 1) (%F 2) (%F 3) (%F 4))) "<#1=(1) 2 . #1#>" "<...>" "<(1) ...>" "<(1) 2 ...>" "<#1=(1) 2 . #1#>" "<#1=(1) 2 . #1#>")
;; Loading (DEFTEST PPRINT-POP.8 (FLET ((%F (LEN) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* LEN) (*PRINT-CIRCLE* T)) (WITH-OUTPUT-TO-STRING (OS) (LET* ((TAIL (LIST 2)) (X (LIST* 1 TAIL))) (SETF (CDR TAIL) TAIL) (PPRINT-LOGICAL-BLOCK (OS X :PREFIX "[[" :SUFFIX "]]") (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE (PPRINT-POP) :STREAM OS) (LOOP (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE #\Space :STREAM OS) (WRITE (PPRINT-POP) :STREAM OS))))))))) (VALUES (%F 0) (%F 1) (%F 2) (%F 3) (%F 10) (%F 20))) "[[...]]" "[[1 ...]]" "[[1 2 ...]]" "[[1 . #1=(2 . #1#)]]" "[[1 . #1=(2 . #1#)]]" "[[1 . #1=(2 . #1#)]]")
;; Loading (DEFTEST PPRINT-POP.9 (FLET ((%F (LEN) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-LENGTH* LEN)) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS NIL :PREFIX "{" :SUFFIX "}") (LET ((VALS (MULTIPLE-VALUE-LIST (PPRINT-POP)))) (ASSERT (EQUAL VALS (QUOTE (NIL))) NIL "First call returned ~A" VALS)) (WRITE 1 :STREAM OS) (WRITE #\Space :STREAM OS) (LET ((VALS (MULTIPLE-VALUE-LIST (PPRINT-POP)))) (ASSERT (EQUAL VALS (QUOTE (NIL))) NIL "Second call returned ~A" VALS)) (WRITE 2 :STREAM OS) (WRITE #\Space :STREAM OS) (LET ((VALS (MULTIPLE-VALUE-LIST (PPRINT-POP)))) (ASSERT (EQUAL VALS (QUOTE (NIL))) NIL "Third call returned ~A" VALS)) (WRITE 3 :STREAM OS))))))) (VALUES (%F NIL) (%F 0) (%F 1) (%F 2) (%F 3) (%F 4))) "{1 2 3}" "{...}" "{1 ...}" "{1 2 ...}" "{1 2 3}" "{1 2 3}")
;; Loading (DEFTEST PPRINT-EXIT-IF-LIST-EXHAUSTED.ERROR.1 (SIGNALS-ERROR (PPRINT-EXIT-IF-LIST-EXHAUSTED) ERROR) T)
;; Loading (DEFTEST PPRINT-EXIT-IF-LIST-EXHAUSTED.ERROR.1-UNSAFE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 0))) (SIGNALS-ERROR (LOCALLY (DECLARE (OPTIMIZE (SAFETY 0))) (PPRINT-EXIT-IF-LIST-EXHAUSTED)) ERROR)) T)
;; Loading (DEFTEST PPRINT-POP.ERROR.1 (SIGNALS-ERROR (PPRINT-POP) ERROR) T)
;; Loading (DEFTEST PPRINT-POP.ERROR.1-UNSAFE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 0))) (SIGNALS-ERROR (LOCALLY (DECLARE (OPTIMIZE (SAFETY 0))) (PPRINT-POP)) ERROR)) T)
;; Loading (LOAD "pprint-newline.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-newline.lsp 81D20F07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFMACRO DEF-PPRINT-NEWLINE-TEST (NAME FORM EXPECTED-VALUE &REST KEY-ARGS) (SYSTEM.INTERNALS::BACKQUOTE (DEF-PPRINT-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (SYSTEM.INTERNALS::BQ-COMMA FORM))) (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-VALUE) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN KEY-ARGS))))
;; Loading (DEF-PPRINT-TEST PPRINT-NEWLINE.1 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (DOTIMES (I 8) (WRITE-CHAR #\A) (WRITE-CHAR #\Space) (PPRINT-NEWLINE :FILL NIL)))) "A A A A A
A A A " :MARGIN 10)
;; Loading (DEF-PPRINT-TEST PPRINT-NEWLINE.2 (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PPRINT-LOGICAL-BLOCK (*TERMINAL-IO* NIL) (DOTIMES (I 8) (WRITE "A " :STREAM T) (PPRINT-NEWLINE :FILL T)))))) "A A A A A
A A A " :MARGIN 10)
;; Loading (DEF-PPRINT-TEST PPRINT-NEWLINE.3 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (DOTIMES (I 8) (WRITE-CHAR #\A) (WRITE-CHAR #\Space) (PPRINT-NEWLINE :FILL)))) "A A A A A
A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.1 (PROGN (DOTIMES (I 2) (WRITE "A ") (PPRINT-NEWLINE :FILL)) (WRITE "B ") (PPRINT-NEWLINE :LINEAR) (DOTIMES (I 3) (WRITE "A ") (PPRINT-NEWLINE :FILL))) "A A B
A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.2 (PROGN (DOTIMES (I 2) (WRITE "A ") (PPRINT-NEWLINE :FILL)) (WRITE "B ") (PPRINT-NEWLINE :LINEAR) (DOTIMES (I 2) (WRITE "C ") (PPRINT-NEWLINE :FILL)) (WRITE "D ") (PPRINT-NEWLINE :LINEAR) (DOTIMES (I 3) (WRITE "A ") (PPRINT-NEWLINE :FILL))) "A A B
C C D
A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.3 (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :LINEAR)) "A A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.4 (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :LINEAR)) "A A A A " :MARGIN 10 :MISER 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.5 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :LINEAR)) "A A A A A A A A A A " :MARGIN 10 :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.6 (DOTIMES (I 4) (WRITE "A             ") (PPRINT-NEWLINE :LINEAR)) "A
A
A
A
" :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.7 (PROGN (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :LINEAR)) (TERPRI) (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :LINEAR))) "A
A
A
A

A
A
A
A
" :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.8 (PROGN (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :LINEAR))) (PPRINT-NEWLINE :LINEAR) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :LINEAR)))) "A A A A
A A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.LINEAR.9 (DOTIMES (I 10) (WRITE "A ") (LET ((*PRINT-PRETTY* NIL)) (PPRINT-NEWLINE :LINEAR))) "A A A A A A A A A A " :MARGIN 10)
;; Loading (DEFTEST PPRINT-NEWLINE.LINEAR.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* NIL)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (DOTIMES (I 5) (WRITE "A ") (PPRINT-NEWLINE :LINEAR))))) "A A A A A ")
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.1 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :MISER)) "A A A A A A A A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.2 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :MISER)) "A A A A A A A A A A " :MARGIN 10 :MISER 0)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.3 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :MISER)) "A A A A A A A A A A " :MARGIN 10 :MISER 9)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.4 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :MISER)) "A
A
A
A
A
A
A
A
A
A
" :MARGIN 10 :MISER 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.5 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :MISER)) "A A A A A A A A A A " :MARGIN 10 :MISER 10 :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.6 (PROGN (TERPRI) (WRITE "A") (PPRINT-NEWLINE :MISER)) "
A
" :MARGIN 20 :MISER 20)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.7 (PROGN (PPRINT-NEWLINE :MISER) (WRITE "A") (TERPRI)) "
A
" :MARGIN 20 :MISER 20)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.8 (PROGN (WRITE "AAAA ") (PPRINT-NEWLINE :LINEAR) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :MISER)))) "AAAA
A A A A " :MARGIN 10 :MISER 8)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.9 (PROGN (WRITE "AAAA ") (PPRINT-NEWLINE :FILL) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :MISER)))) "AAAA
A A A A " :MARGIN 10 :MISER 8)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.10 (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL :PREFIX "(" :SUFFIX ")") (WRITE "A") (PPRINT-NEWLINE :MISER) (PPRINT-NEWLINE :MANDATORY)) "(A

 )" :MARGIN 20 :MISER 20)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.11 (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL :PREFIX "(" :SUFFIX ")") (WRITE "A") (PPRINT-NEWLINE :MISER) (PPRINT-NEWLINE :MANDATORY)) "(A

 )" :MARGIN 20 :MISER 19)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MISER.12 (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL :PREFIX "(" :SUFFIX ")") (WRITE "A") (PPRINT-NEWLINE :MISER) (PPRINT-NEWLINE :MANDATORY)) "(A
 )" :MARGIN 20 :MISER 18)
;; Loading (DEFTEST PPRINT-NEWLINE.MISER.13 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* 4)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (DOTIMES (I 5) (WRITE "A ") (PPRINT-NEWLINE :MISER))))) "A A A A A ")
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.FILL.1 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :FILL)) "A A A A A
A A A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.FILL.2 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :FILL)) "A A A
A A A
A A A
A " :MARGIN 6)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.FILL.3 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :FILL)) "A A A
A A A
A A A
A " :MARGIN 7)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.FILL.4 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :FILL)) "A A A A A
A A A A A " :MARGIN 10 :MISER 9)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.FILL.5 (DOTIMES (I 10) (WRITE "A ") (PPRINT-NEWLINE :FILL)) "A
A
A
A
A
A
A
A
A
A
" :MARGIN 10 :MISER 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.FILL.6 (DOTIMES (I 5) (WRITE (QUOTE (A B))) (WRITE #\Space) (PPRINT-NEWLINE :FILL)) "(A B) (A B)
(A B) (A B)
(A B) " :MARGIN 12)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.FILL.7 (DOLIST (X (QUOTE (A (A B) (A A A A A A A A) X (C D) (E F)))) (PPRINT-FILL NIL X) (WRITE #\Space) (PPRINT-NEWLINE :FILL)) "A (A B)
(A A A A A
 A A A)
X (C D)
(E F) " :MARGIN 12)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.FILL.8 (DOTIMES (I 5) (WRITE (QUOTE (A B)) :PRETTY NIL) (WRITE #\Space) (LET ((*PRINT-PRETTY* NIL)) (PPRINT-NEWLINE :FILL))) "(A B) (A B) (A B) (A B) (A B) " :MARGIN 12)
;; Loading (DEFTEST PPRINT-NEWLINE.FILL.9 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-PRETTY* T) (*PRINT-MISER-WIDTH* NIL)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (DOTIMES (I 5) (WRITE "A ") (PPRINT-NEWLINE :FILL))))) "A A A A A ")
;; Loading (DEFTEST PPRINT-NEWLINE.FILL.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-PRETTY* T) (*PRINT-MISER-WIDTH* 4)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (DOTIMES (I 5) (WRITE "A ") (PPRINT-NEWLINE :FILL))))) "A A A A A ")
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MANDATORY.1 (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :MANDATORY)) "A
A
A
A
")
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MANDATORY.2 (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :MANDATORY)) "A
A
A
A
" :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MANDATORY.3 (PROGN (WRITE "A ") (PPRINT-NEWLINE :MANDATORY) (WRITE "A ")) "A
A " :MARGIN 1)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MANDATORY.4 (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :MANDATORY)) "A A A A " :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST PPRINT-NEWLINE.MANDATORY.5 (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL :PREFIX "<<<" :SUFFIX ">>>") (DOTIMES (I 4) (WRITE "A ") (PPRINT-NEWLINE :MANDATORY)) (WRITE "A")) "<<<A
   A
   A
   A
   A>>>")
;; Loading (DEFTEST PPRINT-NEWLINE.MANDATORY.6 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* NIL)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (DOTIMES (I 5) (WRITE "A ") (PPRINT-NEWLINE :MANDATORY))))) "A A A A A ")
;; Loading (DEFTEST PPRINT-NEWLINE.ERROR.1 (CHECK-TYPE-ERROR (FUNCTION PPRINT-NEWLINE) (TYPEF (QUOTE (MEMBER :LINEAR :MISER :FILL :MANDATORY)))) NIL)
;; Loading (DEFTEST PPRINT-NEWLINE.ERROR.1-UNSAFE (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (DECLARE (OPTIMIZE (SAFETY 0))) (PPRINT-NEWLINE X))) (TYPEF (QUOTE (MEMBER :LINEAR :MISER :FILL :MANDATORY)))) NIL)
;; Loading (DEFTEST PPRINT-NEWLINE.ERROR.2 (SIGNALS-ERROR (PPRINT-NEWLINE) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-NEWLINE.ERROR.3 (SIGNALS-ERROR (PPRINT-NEWLINE :FILL NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "pprint-tab.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint-tab.lsp 81F83A17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.NON-PRETTY.1 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE "A") (PPRINT-TAB :LINE 10 3) (WRITE "B")) "AB")
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.NON-PRETTY.2 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE "A") (PPRINT-TAB :SECTION 10 3) (WRITE "B")) "AB")
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.NON-PRETTY.3 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE "A") (PPRINT-TAB :LINE-RELATIVE 10 3) (WRITE "B")) "AB")
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.NON-PRETTY.4 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE "A") (PPRINT-TAB :SECTION-RELATIVE 10 3) (WRITE "B")) "AB")
;; Loading (DEF-PPBLOCK-TEST PPRINT-TAB.NON-PRETTY.5 (PROGN (WRITE "A") (PPRINT-TAB :LINE 10 3) (WRITE "B")) "AB" :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST PPRINT-TAB.NON-PRETTY.6 (PROGN (WRITE "A") (PPRINT-TAB :SECTION 10 3) (WRITE "B")) "AB" :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST PPRINT-TAB.NON-PRETTY.7 (PROGN (WRITE "A") (PPRINT-TAB :LINE-RELATIVE 10 3) (WRITE "B")) "AB" :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST PPRINT-TAB.NON-PRETTY.8 (PROGN (WRITE "A") (PPRINT-TAB :SECTION-RELATIVE 10 3) (WRITE "B")) "AB" :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST PPRINT-TAB.NIL.1 (PROGN (WRITE "A") (PPRINT-TAB :LINE 10 1 NIL) (WRITE "B")) "A         B")
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.T.1 (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STGC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
REAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PPRINT-LOGICAL-BLOCK (*TERMINAL-IO* NIL) (WRITE "A" :STREAM T) (PPRINT-TAB :LINE 10 1 T) (WRITE "B" :STREAM T))))) "A         B")
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.LINE.1 (LOOP FOR OFFSET = (RANDOM 100) FOR COLNUM = (RANDOM 100) FOR COLINC = (MIN (RANDOM 50) (RANDOM 50)) FOR S = (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (DOTIMES (I OFFSET) (WRITE #\Space)) (PPRINT-TAB :LINE COLNUM COLINC) (WRITE #\A))) FOR EXPECTED-COL = (COND ((< OFFSET COLNUM) COLNUM) ((= COLINC 0) OFFSET) ((= OFFSET COLNUM) (+ OFFSET COLINC)) (T (LET ((K (MOD (- COLNUM OFFSET) COLINC))) (IF (= K 0) (+ OFFSET COLINC) (+ OFFSET K))))) REPEAT 200 NCONC (UNLESS (STRING= S (CONCATENATE (QUOTE STRING) (MAKE-STRING EXPECTED-COL :INITIAL-ELEMENT #\Space) "A")) (LIST (LIST OFFSET COLNUM COLINC EXPECTED-COL (COUNT #\Space S) S)))) NIL :MARGIN 1000)
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.SECTION.1 (LOOP FOR PREFIX-LENGTH = (RANDOM 50) FOR OFFSET = (RANDOM 50) FOR COLNUM = (RANDOM 50) FOR COLINC = (MIN (RANDOM 50) (RANDOM 50)) FOR S = (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL :PREFIX (MAKE-STRING PREFIX-LENGTH :INITIAL-ELEMENT #\Space)) (DOTIMES (I OFFSET) (WRITE #\Space)) (PPRINT-TAB :SECTION COLNUM COLINC) (WRITE #\A))) FOR EXPECTED-COL = (+ PREFIX-LENGTH (COND ((< OFFSET COLNUM) COLNUM) ((= COLINC 0) OFFSET) ((= OFFSET COLNUM) (+ OFFSET COLINC)) (T (LET ((K (MOD (- COLNUM OFFSET) COLINC))) (IF (= K 0) (+ OFFSET COLINC) (+ OFFSET K)))))) REPEAT 200 NCONC (UNLESS (STRING= S (CONCATENATE (QUOTE STRING) (MAKE-STRING EXPECTED-COL :INITIAL-ELEMENT #\Space) "A")) (LIST (LIST OFFSET COLNUM COLINC EXPECTED-COL (COUNT #\Space S) S)))) NIL :MARGIN 1000)
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.LINE-RELATIVE.1 (LOOP FOR OFFSET = (RANDOM 100) FOR COLREL = (RANDOM 100) FOR COLINC = (1+ (MIN (RANDOM 50) (RANDOM 50))) FOR EXTRA = (MOD (- (+ OFFSET COLREL)) COLINC) FOR S = (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (DOTIMES (I OFFSET) (WRITE #\Space)) (PPRINT-TAB :LINE-RELATIVE COLREL COLINC) (WRITE #\A))) FOR EXPECTED-COL = (+ OFFSET COLREL EXTRA) REPEAT 200 NCONC (UNLESS (STRING= S (CONCATENATE (QUOTE STRING) (MAKE-STRING EXPECTED-COL :INITIAL-ELEMENT #\Space) "A")) (LIST (LIST OFFSET COLREL COLINC EXPECTED-COL (COUNT #\Space S) S)))) NIL :MARGIN 1000)
;; Loading (DEF-PPRINT-TEST PPRINT-TAB.SECTION-RELATIVE.1 (LOOP FOR PREFIX-LENGTH = (RANDOM 50) FOR OFFSET = (RANDOM 50) FOR COLREL = (RANDOM 50) FOR COLINC = (1+ (MIN (RANDOM 50) (RANDOM 50))) FOR EXTRA = (MOD (- (+ OFFSET COLREL)) COLINC) FOR S = (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL :PREFIX (MAKE-STRING PREFIX-LENGTH :INITIAL-ELEMENT #\Space)) (DOTIMES (I OFFSET) (WRITE #\Space)) (PPRINT-TAB :SECTION-RELATIVE COLREL COLINC) (WRITE #\A))) FOR EXPECTED-COL = (+ PREFIX-LENGTH OFFSET COLREL EXTRA) REPEAT 200 NCONC (UNLESS (STRING= S (CONCATENATE (QUOTE STRING) (MAKE-STRING EXPECTED-COL :INITIAL-ELEMENT #\Space) "A")) (LIST (LIST PREFIX-LENGTH OFFSET COLREL COLINC EXTRA EXPECTED-COL (COUNT #\Space S) S)))) NIL :MARGIN 1000)
;; Loading (DEFTEST PPRINT-TAB.ERROR.1 (SIGNALS-ERROR (PPRINT-TAB) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-TAB.ERROR.2 (SIGNALS-ERROR (PPRINT-TAB :LINE) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-TAB.ERROR.3 (SIGNALS-ERROR (PPRINT-TAB :LINE 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-TAB.ERROR.4 (SIGNALS-ERROR (PPRINT-TAB :LINE 1 1 NIL NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT-TAB.ERROR.5 (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (MEMBER X (QUOTE (:LINE :SECTION :LINE-RELATIVE :SECTION-RELATIVE))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (PPRINT-TAB (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) 1 1) ERROR)))) COLLECT X) NIL)
;; Loading (DEFTEST PPRINT-TAB.ERROR.5-UNSAFE (LOOP FOR X IN *MINI-UNIVERSE* UNLESS (OR (MEMBER X (QUOTE (:LINE :SECTION :LINE-RELATIVE :SECTION-RELATIVE))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (LOCALLY (DECLARE (OPTIMIZE (SAFETY 0))) (PPRINT-TAB (QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) 1 1)) ERROR)))) COLLECT X) NIL)
;; Loading (LOAD "print-unreadable-object.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-unreadable-object.lsp C1C0AE87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PPRINT-TEST PRINT-UNREADABLE-OBJECT.1 (LOOP FOR X IN *MINI-UNIVERSE* FOR RETURN-VALS = NIL FOR S = (WITH-OUTPUT-TO-STRING (S) (SETQ RETURN-VALS (MULTIPLE-VALUE-LIST (PRINT-UNREADABLE-OBJECT (X S))))) UNLESS (AND (EQUAL RETURN-VALS (QUOTE (NIL))) (EQUAL S "#<>")) COLLECT (LIST X RETURN-VALS S)) NIL)
;; Loading (DEF-PPRINT-TEST PRINT-UNREADABLE-OBJECT.2 (LOOP FOR X IN *MINI-UNIVERSE* FOR RETURN-VALS1 = NIL FOR RETURN-VALS2 = NIL FOR S1 = (WITH-OUTPUT-TO-STRING (S) (SETQ RETURN-VALS1 (MULTIPLE-VALUE-LIST (PRINT-UNREADABLE-OBJECT (X S :TYPE T))))) FOR S2 = (WITH-OUTPUT-TO-STRING (S) (SETQ RETURN-VALS2 (MULTIPLE-VALUE-LIST (PRINT-UNREADABLE-OBJECT (X S :TYPE T) (WRITE-CHAR #\X S))))) UNLESS (AND (EQUAL RETURN-VALS1 (QUOTE (NIL))) (EQUAL RETURN-VALS2 (QUOTE (NIL))) (STRING= S1 "#<" :END1 2) (STRING= S1 S2 :END1 (- (LENGTH S1) 1) :END2 (- (LENGTH S2) 2)) (STRING= S2 " X>" :START1 (- (LENGTH S2) 3))) COLLECT (LIST X RETURN-VALS1 RETURN-VALS2 S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST PRINT-UNREADABLE-OBJECT.3 (LOOP FOR X IN *MINI-UNIVERSE* FOR RETURN-VALS1 = NIL FOR RETURN-VALS2 = NIL FOR S1 = (WITH-OUTPUT-TO-STRING (S) (SETQ RETURN-VALS1 (MULTIPLE-VALUE-LIST (PRINT-UNREADABLE-OBJECT (X S :IDENTITY T) (WRITE "FOO" :STREAM S) (VALUES 1 2 3 4 5))))) FOR S2 = (WITH-OUTPUT-TO-STRING (S) (SETQ RETURN-VALS2 (MULTIPLE-VALUE-LIST (PRINT-UNREADABLE-OBJECT (X S :IDENTITY T))))) UNLESS (AND (EQUAL RETURN-VALS1 (QUOTE (NIL))) (EQUAL RETURN-VALS2 (QUOTE (NIL))) (STRING= S1 "#<FOO " :END1 6) (STRING= S2 "#< " :END1 3) (EQL (CHAR S1 (1- (LENGTH S1))) #\>) (EQL (CHAR S2 (1- (LENGTH S2))) #\>) (STRING= S1 S2 :START2 3 :START1 6)) COLLECT (LIST X RETURN-VALS1 RETURN-VALS2 S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST PRINT-UNREADABLE-OBJECT.4 (LOOP FOR X IN *MINI-UNIVERSE* FOR RETURN-VALS = NIL FOR S = (WITH-OUTPUT-TO-STRING (S) (SETQ RETURN-VALS (MULTIPLE-VALUE-LIST (PRINT-UNREADABLE-OBJECT (X S :IDENTITY T :TYPE T) (WRITE "FOO" :STREAM S) (VALUES))))) UNLESS (AND (EQUAL RETURN-VALS (QUOTE (NIL))) (STRING= S "#<" :END1 2) (EQL (CHAR S (1- (LENGTH S))) #\>) (>= (COUNT #\Space S) 2)) COLLECT (LIST X RETURN-VALS S)) NIL)
;; Loading (DEFTEST PRINT-UNREADABLE-OBJECT.ERROR.1 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* T)) (LOOP FOR X IN *MINI-UNIVERSE* FOR FORM = (SYSTEM.INTERNALS::BACKQUOTE (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (SIGNALS-ERROR (PRINT-UNREADABLE-OBJECT ((QUOTE (SYSTEM.INTERNALS::BQ-COMMA X)) *STANDARD-OUTPUT*)) PRINT-NOT-READABLE)))) UNLESS (EQUAL (EVAL FORM) "") COLLECT X))) NIL)
;; Loading (DEFTEST PRINT-UNREADABLE-OBJECT.T.1 (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (LET ((*PRINT-READABLY* NIL)) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PRINT-UNREADABLE-OBJECT (1 T))) (QUOTE (NIL)))))))) "#<>")
;; Loading (DEFTEST PRINT-UNREADABLE-OBJECT.NIL.1 (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LET ((*PRINT-READABLY* NIL)) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (PRINT-UNREADABLE-OBJECT (1 NIL))) (QUOTE (NIL)))))) "#<>")
;; Loading (LOAD "write.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/write.lsp C1D08297>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST WRITE.1 (RANDOM-WRITE-TEST 1000) NIL)
;; Loading (DEFTEST WRITE.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE 2 :STREAM NIL)))) "2")
;; Loading (DEFTEST WRITE.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (WRITE 3 :STREAM T)))))) "3")
;; Loading (DEFTEST WRITE.4 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (OS) (WRITE 4 :STREAM OS)))) "4")
;; Loading (DEFTEST WRITE.5 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE 5 :ALLOW-OTHER-KEYS NIL)))) "5")
;; Loading (DEFTEST WRITE.6 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE 6 :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR))))) "6")
;; Loading (DEFTEST WRITE.7 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (WRITE 7 :BASE 10 :BASE 3)))) "7")
;; Loading (DEFTEST WRITE.ERROR.1 (SIGNALS-ERROR (WRITE) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE.ERROR.2 (SIGNALS-ERROR (WRITE 1 :STREAM) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE.ERROR.3 (SIGNALS-ERROR (WRITE 1 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE.ERROR.4 (SIGNALS-ERROR (WRITE 1 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO (QUOTE BAR)) PROGRAM-ERROR) T)
;; Loading (LOAD "print.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print.lsp C1D8CFD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINT.1 (RANDOM-PRINT-TEST 1000) NIL)
;; Loading (DEFTEST PRINT.2 (WITH-STANDARD-IO-SYNTAX (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PRINT 2 T))))) "
2 ")
;; Loading (DEFTEST PRINT.3 (WITH-STANDARD-IO-SYNTAX (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PRINT 3 NIL))) "
3 ")
;; Loading (DEFTEST PRINT.ERROR.1 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PRINT)) PROGRAM-ERROR) T)
;; Loading (DEFTEST PRINT.ERROR.2 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (PRINT NIL S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "pprint.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/pprint.lsp C1DDEFE7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PPRINT.1 (RANDOM-PPRINT-TEST 1000) NIL)
;; Loading (DEFTEST PPRINT.2 (WITH-STANDARD-IO-SYNTAX (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PPRINT 2 T))))) "
2")
;; Loading (DEFTEST PPRINT.3 (WITH-STANDARD-IO-SYNTAX (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT 3 NIL))) "
3")
;; Loading (DEFTEST PPRINT.ERROR.1 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PPRINT)) PROGRAM-ERROR) T)
;; Loading (DEFTEST PPRINT.ERROR.2 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (PPRINT NIL S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "prin1.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/prin1.lsp C1E31597>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRIN1.1 (RANDOM-PRIN1-TEST 1000) NIL)
;; Loading (DEFTEST PRIN1.2 (WITH-STANDARD-IO-SYNTAX (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PRIN1 2 T))))) "2")
;; Loading (DEFTEST PRIN1.3 (WITH-STANDARD-IO-SYNTAX (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PRIN1 3 NIL))) "3")
;; Loading (DEFTEST PRIN1.ERROR.1 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PRIN1)) PROGRAM-ERROR) T)
;; Loading (DEFTEST PRIN1.ERROR.2 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (PRIN1 NIL S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "princ.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/princ.lsp C1E83147>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINC.1 (RANDOM-PRINC-TEST 5) NIL)
;; Loading (DEFTEST PRINC.2 (WITH-STANDARD-IO-SYNTAX (WITH-OUTPUT-TO-STRING (OS) (WITH-INPUT-FROM-STRING (IS "") (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (PRINC 2 T))))) "2")
;; Loading (DEFTEST PRINC.3 (WITH-STANDARD-IO-SYNTAX (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PRINC 3 NIL))) "3")
;; Loading (DEFTEST PRINC.ERROR.1 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (PRINC)) PROGRAM-ERROR) T)
;; Loading (DEFTEST PRINC.ERROR.2 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (PRINC NIL S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "write-to-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/write-to-string.lsp C1ED5557>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST WRITE-TO-STRING.1 (RANDOM-WRITE-TO-STRING-TEST 1000) NIL)
;; Loading (DEFTEST WRITE-TO-STRING.2 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING 2 :ALLOW-OTHER-KEYS NIL)) "2")
;; Loading (DEFTEST WRITE-TO-STRING.3 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING 3 :ALLOW-OTHER-KEYS T (QUOTE #:G77358) 0)) "3")
;; Loading (DEFTEST WRITE-TO-STRING.4 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING 4 :BASE 10 :BASE 2)) "4")
;; Loading (DEFTEST WRITE-TO-STRING.ERROR.1 (SIGNALS-ERROR (WRITE-TO-STRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-TO-STRING.ERROR.2 (SIGNALS-ERROR (WRITE-TO-STRING NIL (QUOTE #:G77359) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST WRITE-TO-STRING.ERROR.3 (SIGNALS-ERROR (WRITE-TO-STRING NIL :RADIX) PROGRAM-ERROR) T)
;; Loading (LOAD "prin1-to-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/prin1-to-string.lsp C1F2EF57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRIN1-TO-STRING.1 (RANDOM-PRIN1-TO-STRING-TEST 5) NIL)
;; Loading (DEFTEST PRIN1-TO-STRING.2 (WITH-STANDARD-IO-SYNTAX (PRIN1-TO-STRING 2)) "2")
;; Loading (DEFTEST PRIN1-TO-STRING.ERROR.1 (SIGNALS-ERROR (PRIN1-TO-STRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST PRIN1-TO-STRING.ERROR.2 (SIGNALS-ERROR (PRIN1-TO-STRING NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "princ-to-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/princ-to-string.lsp C1F72B87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST PRINC-TO-STRING.1 (RANDOM-PRINC-TO-STRING-TEST 1000) NIL)
;; Loading (DEFTEST PRINC-TO-STRING.2 (WITH-STANDARD-IO-SYNTAX (PRINC-TO-STRING 2)) "2")
;; Loading (DEFTEST PRINC-TO-STRING.ERROR.1 (SIGNALS-ERROR (PRINC-TO-STRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST PRINC-TO-STRING.ERROR.2 (SIGNALS-ERROR (PRINC-TO-STRING NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "print-level.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-level.lsp C1FB65B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFCLASS PRINT-LEVEL-TEST-CLASS NIL (A B C))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST PRINT-LEVEL.3 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (A B C D))) :READABLY NIL :ARRAY T :LEVEL 0)) "#")
;; Loading (DEFTEST PRINT-LEVEL.4 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 1 0 1)) :ELEMENT-TYPE (QUOTE BIT)) :READABLY NIL :ARRAY T :LEVEL 0)) "#*1101")
;; Loading (DEFTEST PRINT-LEVEL.5 (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING "abcd" :READABLY NIL :ARRAY T :LEVEL 0)) "\"abcd\"")
;; Loading (DEFINE-CONDITION PRINT-LEVEL-CONDITION (CONDITION) (A B C))
;; Loading (DEFSTRUCT PRINT-LEVEL-STRUCT)
;; Loading (DEFTEST PRINT-LEVEL.8 (WITH-STANDARD-IO-SYNTAX (LET* ((*PACKAGE* (FIND-PACKAGE "CL-TEST")) (*PRINT-PRETTY* NIL) (S (MAKE-PRINT-LEVEL-STRUCT))) (VALUES (WRITE-TO-STRING S :LEVEL 0 :READABLY NIL) (WRITE-TO-STRING S :LEVEL 1 :READABLY NIL) (WRITE-TO-STRING S :LEVEL NIL :READABLY NIL)))) "#" "#S(PRINT-LEVEL-STRUCT)" "#S(PRINT-LEVEL-STRUCT)")
;; Loading (DEFTEST PRINT-LEVEL.9 (WITH-STANDARD-IO-SYNTAX (LET* ((*PACKAGE* (FIND-PACKAGE "CL-TEST")) (*PRINT-PRETTY* T) (S (MAKE-PRINT-LEVEL-STRUCT))) (VALUES (WRITE-TO-STRING S :LEVEL 0 :READABLY NIL) (WRITE-TO-STRING S :LEVEL 1 :READABLY NIL) (WRITE-TO-STRING S :LEVEL NIL :READABLY NIL)))) "#" "#S(PRINT-LEVEL-STRUCT)" "#S(PRINT-LEVEL-STRUCT)")
;; Loading (DEFSTRUCT PRINT-LEVEL-STRUCT2 A B C)
;; Loading (DEFTEST PRINT-LEVEL.12 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-LEVEL* (1+ MOST-POSITIVE-FIXNUM))) (WRITE-TO-STRING (QUOTE ((1 2) (3 4))) :PRETTY NIL :READABLY NIL))) "((1 2) (3 4))")
;; Loading (LOAD "print-length.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/print-length.lsp 81B712F7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PRINT-TEST PRINT-LENGTH.1 (QUOTE (1)) "(...)" (*PRINT-LENGTH* 0))
;; Loading (DEF-PRINT-TEST PRINT-LENGTH.2 (QUOTE (1)) "(1)" (*PRINT-LENGTH* NIL))
;; Loading (DEF-PRINT-TEST PRINT-LENGTH.3 (QUOTE (1)) "(1)" (*PRINT-LENGTH* 1))
;; Loading (DEF-PRINT-TEST PRINT-LENGTH.4 (QUOTE (1 . 2)) "(1 . 2)" (*PRINT-LENGTH* 1))
;; Loading (DEFTEST PRINT-LENGTH.5 (LET ((X (QUOTE (A B C D E F)))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-CASE* :UPCASE) (*PRINT-ESCAPE* NIL) (*PRINT-READABLY* NIL) (*PRINT-PRETTY* NIL) (*PRINT-LENGTH* NIL)) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 0 TO 8 COLLECT (LET ((*PRINT-LENGTH* I)) (WRITE-TO-STRING X))))))) "(...)" "(A ...)" "(A B ...)" "(A B C ...)" "(A B C D ...)" "(A B C D E ...)" "(A B C D E F)" "(A B C D E F)" "(A B C D E F)")
;; Loading (DEFTEST PRINT-LENGTH.6 (LET ((X (QUOTE (A B C D E F . G)))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-CASE* :UPCASE) (*PRINT-ESCAPE* NIL) (*PRINT-READABLY* NIL) (*PRINT-PRETTY* NIL) (*PRINT-LENGTH* NIL)) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 0 TO 8 COLLECT (LET ((*PRINT-LENGTH* I)) (WRITE-TO-STRING X))))))) "(...)" "(A ...)" "(A B ...)" "(A B C ...)" "(A B C D ...)" "(A B C D E ...)" "(A B C D E F . G)" "(A B C D E F . G)" "(A B C D E F . G)")
;; Loading (DEF-PRINT-TEST PRINT-LENGTH.7 (QUOTE (1)) "(1)" (*PRINT-LENGTH* (1+ MOST-POSITIVE-FIXNUM)))
;; Loading (DEFTEST PRINT-LENGTH.8 (LET ((X #(A B C D E F))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-CASE* :UPCASE) (*PRINT-ESCAPE* NIL) (*PRINT-READABLY* NIL) (*PRINT-PRETTY* NIL) (*PRINT-LENGTH* NIL)) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 0 TO 8 COLLECT (LET ((*PRINT-LENGTH* I)) (WRITE-TO-STRING X))))))) "#(...)" "#(A ...)" "#(A B ...)" "#(A B C ...)" "#(A B C D ...)" "#(A B C D E ...)" "#(A B C D E F)" "#(A B C D E F)" "#(A B C D E F)")
;; Loading (DEF-PRINT-TEST PRINT-LENGTH.9 "A modest sentence with six words." "\"A modest sentence with six words.\"" (*PRINT-LENGTH* 0))
;; Loading (DEF-PRINT-TEST PRINT-LENGTH.10 #*00110101100011 "#*00110101100011" (*PRINT-LENGTH* 0))
;; Loading (DEFSTRUCT PRINT-LENGTH-STRUCT FOO)
;; Loading (DEFTEST PRINT-LENGTH.11 (LET ((RESULT (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-CASE* :UPCASE) (*PRINT-ESCAPE* NIL) (*PRINT-READABLY* NIL) (*PRINT-PRETTY* NIL) (*PRINT-LENGTH* NIL) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (S (MAKE-PRINT-LENGTH-STRUCT :FOO 17))) (APPLY (FUNCTION LIST) (LOOP FOR I FROM 0 TO 4 COLLECT (LET ((*PRINT-LENGTH* I)) (WRITE-TO-STRING S)))))))) (IF (MEMBER RESULT (QUOTE (("#S(...)" "#S(PRINT-LENGTH-STRUCT ...)" "#S(PRINT-LENGTH-STRUCT :FOO ...)" "#S(PRINT-LENGTH-STRUCT :FOO 17)" "#S(PRINT-LENGTH-STRUCT :FOO 17)") ("#S(PRINT-LENGTH-STRUCT ...)" "#S(PRINT-LENGTH-STRUCT :FOO 17)" "#S(PRINT-LENGTH-STRUCT :FOO 17)" "#S(PRINT-LENGTH-STRUCT :FOO 17)" "#S(PRINT-LENGTH-STRUCT :FOO 17)"))) :TEST (QUOTE EQUAL)) :GOOD RESULT)) :GOOD)
;; Loading (LOAD "load-format.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-format.lsp 81C532C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (LOAD "format-c.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-c.lsp 81C69307>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMAT.C.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (FORMAT NIL "~C" C) UNLESS (STRING= S (STRING C)) COLLECT (LIST C S)) NIL)
;; Loading (DEFTEST FORMAT.C.1A (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S = (AND C (FORMAT NIL "~c" C)) UNLESS (OR (NOT C) (NOT (EQL (CHAR-CODE C) (CHAR-INT C))) (STRING= S (STRING C))) DO (INCF COUNT) AND COLLECT (LIST I C S) WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH)) NIL)
;; Loading (DEFTEST FORMAT.C.2 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (FORMAT NIL "~:c" C) UNLESS (OR (NOT (GRAPHIC-CHAR-P C)) (EQL C #\Space) (STRING= S (STRING C))) COLLECT (LIST C S)) NIL)
;; Loading (DEFTEST FORMAT.C.2A (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S = (AND C (FORMAT NIL "~:C" C)) UNLESS (OR (NOT C) (NOT (EQL (CHAR-CODE C) (CHAR-INT C))) (NOT (GRAPHIC-CHAR-P C)) (EQL C #\Space) (STRING= S (STRING C))) DO (INCF COUNT) AND COLLECT (LIST I C S) WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH)) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.C.3 "~:C" (#\Space) "Space")
;; Loading (DEFTEST FORMAT.C.4 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (FORMAT NIL "~:C" C) UNLESS (OR (GRAPHIC-CHAR-P C) (STRING= S (CHAR-NAME C))) COLLECT (LIST C (CHAR-NAME C) S)) NIL)
;; Loading (DEFTEST FORMAT.C.4A (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S = (AND C (FORMAT NIL "~:c" C)) UNLESS (OR (NOT C) (NOT (EQL (CHAR-CODE C) (CHAR-INT C))) (GRAPHIC-CHAR-P C) (STRING= S (CHAR-NAME C))) DO (INCF COUNT) AND COLLECT (PRINT (LIST I C S)) WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH)) NIL)
;; Loading (DEFTEST FORMAT.C.5 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (FORMAT NIL "~@c" C) FOR C2 = (READ-FROM-STRING S) UNLESS (EQL C C2) COLLECT (LIST C S C2)) NIL)
;; Loading (DEFTEST FORMAT.C.5A (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S = (AND C (FORMAT NIL "~@C" C)) FOR C2 = (AND C (READ-FROM-STRING S)) UNLESS (EQL C C2) DO (INCF COUNT) AND COLLECT (LIST C S C2) WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH)) NIL)
;; Loading (DEFTEST FORMAT.C.6 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S1 = (FORMAT NIL "~:C" C) FOR S2 = (FORMAT NIL "~:@C" C) UNLESS (EQL (SEARCH S1 S2) 0) COLLECT (LIST C S1 S2)) NIL)
;; Loading (DEFTEST FORMAT.C.6A (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S1 = (AND C (FORMAT NIL "~:C" C)) FOR S2 = (AND C (FORMAT NIL "~@:C" C)) UNLESS (OR (NOT C) (EQL (SEARCH S1 S2) 0)) DO (INCF COUNT) AND COLLECT (LIST C S1 S2) WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH)) NIL)
;; Loading (LOAD "formatter-c.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/formatter-c.lsp 81D49447>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMATTER.C.1 (LET ((FN (FORMATTER "~C"))) (LOOP FOR C ACROSS +STANDARD-CHARS+ WHEN (LET* (N (IGNORED (LOOP FOR I BELOW (RANDOM 5) COLLECT I)) (S (WITH-OUTPUT-TO-STRING (STREAM) (SETQ N (MULTIPLE-VALUE-LIST (APPLY FN STREAM C IGNORED)))))) (UNLESS (AND (STRING= S (STRING C)) (EQUAL N (LIST IGNORED))) (LIST S IGNORED N))) COLLECT IT)) NIL)
;; Loading (DEFTEST FORMATTER.C.1A (LET ((FN (FORMATTER "~c"))) (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR IGNORED = (LOOP FOR J BELOW (RANDOM 10) COLLECT J) WHEN (AND C (EQL (CHAR-CODE C) (CHAR-INT C)) (LET* (N (S (WITH-OUTPUT-TO-STRING (STREAM) (SETQ N (MULTIPLE-VALUE-LIST (APPLY FN STREAM C IGNORED)))))) (UNLESS (AND (STRING= S (STRING C)) (EQUAL N (LIST IGNORED))) (INCF COUNT) (LIST I C S IGNORED N)))) COLLECT IT WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH))) NIL)
;; Loading (DEFTEST FORMATTER.C.2 (LET ((FN (FORMATTER "~:C"))) (LOOP FOR C ACROSS +STANDARD-CHARS+ WHEN (AND (GRAPHIC-CHAR-P C) (NOT (EQL C #\Space)) (LET* (N (IGNORED (LOOP FOR I BELOW (RANDOM 5) COLLECT I)) (S (WITH-OUTPUT-TO-STRING (STREAM) (SETQ N (MULTIPLE-VALUE-LIST (APPLY FN STREAM C IGNORED)))))) (UNLESS (AND (STRING= S (STRING C)) (EQUAL N (LIST IGNORED))) (LIST S IGNORED N)))) COLLECT IT)) NIL)
;; Loading (DEFTEST FORMATTER.C.2A (LET ((FN (FORMATTER "~:C"))) (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR IGNORED = (LOOP FOR J BELOW (RANDOM 10) COLLECT J) WHEN (AND C (EQL (CHAR-CODE C) (CHAR-INT C)) (GRAPHIC-CHAR-P C) (NOT (EQL C #\Space)) (LET* (N (S (WITH-OUTPUT-TO-STRING (STREAM) (SETQ N (MULTIPLE-VALUE-LIST (APPLY FN STREAM C IGNORED)))))) (UNLESS (AND (STRING= S (STRING C)) (EQUAL N (LIST IGNORED))) (INCF COUNT) (LIST I C S IGNORED N)))) COLLECT IT WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH))) NIL)
;; Loading (DEFTEST FORMATTER.C.4 (LET ((FN (FORMATTER "~:C")) (N NIL)) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (WITH-OUTPUT-TO-STRING (STREAM) (SETQ N (MULTIPLE-VALUE-LIST (FUNCALL FN STREAM C)))) UNLESS (OR (GRAPHIC-CHAR-P C) (AND (STRING= S (CHAR-NAME C)) (EQUAL N (QUOTE (NIL))))) COLLECT (LIST C (CHAR-NAME C) S))) NIL)
;; Loading (DEFTEST FORMATTER.C.4A (LET ((FN (FORMATTER "~:C")) (N NIL)) (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S = (AND C (WITH-OUTPUT-TO-STRING (STREAM) (SETQ N (MULTIPLE-VALUE-LIST (FUNCALL FN STREAM C 5))))) UNLESS (OR (NOT C) (GRAPHIC-CHAR-P C) (AND (STRING= S (CHAR-NAME C)) (EQUAL N (QUOTE ((5)))))) COLLECT (LIST C (CHAR-NAME C) S))) NIL)
;; Loading (DEFTEST FORMATTER.C.5 (LET ((FN (FORMATTER "~@C")) (N NIL)) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (WITH-OUTPUT-TO-STRING (STREAM) (SETQ N (MULTIPLE-VALUE-LIST (FUNCALL FN STREAM C 1 2 3)))) FOR C2 = (READ-FROM-STRING S) UNLESS (AND (EQL C C2) (EQUAL N (QUOTE ((1 2 3))))) COLLECT (LIST C S C2))) NIL)
;; Loading (DEFTEST FORMATTER.C.6 (LET ((N NIL) (FN (FORMATTER "~@:c"))) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S1 = (WITH-OUTPUT-TO-STRING (STREAM) (SETF N (MULTIPLE-VALUE-LIST (FUNCALL FN STREAM C 1 2)))) FOR S2 = (FORMAT NIL "~:@C" C) UNLESS (AND (EQL (SEARCH S1 S2) 0) (EQUAL N (QUOTE ((1 2))))) COLLECT (LIST C S1 S2 N))) NIL)
;; Loading (LOAD "format-percent.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-percent.lsp 81E4F297>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.%.1 "~%" NIL "
")
;; Loading (DEFTEST FORMAT.%.2 (LOOP FOR I FROM 0 TO 100 FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\Newline) FOR FORMAT-STRING = (FORMAT NIL "~~~D%" I) FOR S2 = (FORMAT NIL FORMAT-STRING) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA S2)))) FOR S3 = (FORMATTER-CALL-TO-STRING FN) UNLESS (AND (STRING= S1 S2) (STRING= S1 S3)) COLLECT I) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.%.3 "~v%" (NIL) "
")
;; Loading (DEF-FORMAT-TEST FORMAT.%.4 "~V%" (1) "
")
;; Loading (DEFTEST FORMAT.%.5 (LOOP FOR I FROM 0 TO 100 FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\Newline) FOR S2 = (FORMAT NIL "~v%" I) UNLESS (STRING= S1 S2) COLLECT I) NIL)
;; Loading (DEFTEST FORMATTER.%.5 (LET ((FN (FORMATTER "~v%"))) (LOOP FOR I FROM 0 TO 100 FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\Newline) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) UNLESS (STRING= S1 S2) COLLECT I)) NIL)
;; Loading (DEFTEST FORMAT.%.6 (LOOP FOR I FROM 0 TO (MIN (- CALL-ARGUMENTS-LIMIT 3) 100) FOR ARGS = (MAKE-LIST I) FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\Newline) FOR S2 = (APPLY (FUNCTION FORMAT) NIL "~#%" ARGS) UNLESS (STRING= S1 S2) COLLECT I) NIL)
;; Loading (DEFTEST FORMATTER.%.6 (LET ((FN (FORMATTER "~#%"))) (LOOP FOR I FROM 0 TO (MIN (- CALL-ARGUMENTS-LIMIT 3) 100) FOR ARGS = (MAKE-LIST I) FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\Newline) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM ARGS) ARGS))) UNLESS (STRING= S1 S2) COLLECT I)) NIL)
;; Loading (LOAD "format-ampersand.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-ampersand.lsp 81F04167>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.&.1 "~0&" NIL "")
;; Loading (DEF-FORMAT-TEST FORMAT.&.2 "~&" NIL "")
;; Loading (DEF-FORMAT-TEST FORMAT.&.3 "X~&" NIL "X
")
;; Loading (DEF-FORMAT-TEST FORMAT.&.4 "X~%~&" NIL "X
")
;; Loading (DEFTEST FORMAT.&.5 (LOOP FOR I FROM 1 TO 100 FOR S1 = (MAKE-STRING (1- I) :INITIAL-ELEMENT #\Newline) FOR FORMAT-STRING = (FORMAT NIL "~~~D&" I) FOR S2 = (FORMAT NIL FORMAT-STRING) UNLESS (STRING= S1 S2) COLLECT I) NIL)
;; Loading (DEFTEST FORMATTER.&.5 (LOOP FOR I FROM 1 TO 100 FOR S1 = (MAKE-STRING (1- I) :INITIAL-ELEMENT #\Newline) FOR FORMAT-STRING = (FORMAT NIL "~~~D&" I) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FORMAT-STRING)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN) UNLESS (STRING= S1 S2) COLLECT I) NIL)
;; Loading (DEFTEST FORMAT.&.6 (LOOP FOR I FROM 1 TO 100 FOR S1 = (CONCATENATE (QUOTE STRING) "X" (MAKE-STRING I :INITIAL-ELEMENT #\Newline)) FOR FORMAT-STRING = (FORMAT NIL "X~~~D&" I) FOR S2 = (FORMAT NIL FORMAT-STRING) UNLESS (STRING= S1 S2) COLLECT I) NIL)
;; Loading (DEFTEST FORMATTER.&.6 (LOOP FOR I FROM 1 TO 100 FOR S1 = (CONCATENATE (QUOTE STRING) "X" (MAKE-STRING I :INITIAL-ELEMENT #\Newline)) FOR FORMAT-STRING = (FORMAT NIL "X~~~D&" I) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FORMAT-STRING)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN) UNLESS (STRING= S1 S2) COLLECT I) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.&.7 "~v&" (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.&.8 "X~v&" (NIL) "X
")
;; Loading (DEFTEST FORMAT.&.9 (LOOP FOR I FROM 1 TO 100 FOR S1 = (MAKE-STRING (1- I) :INITIAL-ELEMENT #\Newline) FOR S2 = (FORMAT NIL "~V&" I) UNLESS (STRING= S1 S2) COLLECT I) NIL)
;; Loading (DEFTEST FORMATTER.&.9 (LET ((FN (FORMATTER "~V&"))) (LOOP FOR I FROM 1 TO 100 FOR S1 = (MAKE-STRING (1- I) :INITIAL-ELEMENT #\Newline) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) UNLESS (STRING= S1 S2) COLLECT I)) NIL)
;; Loading (DEFTEST FORMAT.&.10 (LOOP FOR I FROM 1 TO (MIN (- CALL-ARGUMENTS-LIMIT 3) 100) FOR S1 = (MAKE-STRING (1- I) :INITIAL-ELEMENT #\Newline) FOR ARGS = (MAKE-LIST I) FOR S2 = (APPLY (FUNCTION FORMAT) NIL "~#&" ARGS) UNLESS (STRING= S1 S2) COLLECT I) NIL)
;; Loading (DEFTEST FORMATTER.&.10 (LET ((FN (FORMATTER "~#&"))) (LOOP FOR I FROM 1 TO (MIN (- CALL-ARGUMENTS-LIMIT 3) 100) FOR S1 = (MAKE-STRING (1- I) :INITIAL-ELEMENT #\Newline) FOR ARGS = (LOOP FOR J BELOW I COLLECT J) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM ARGS) ARGS))) UNLESS (STRING= S1 S2) COLLECT I)) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.&.11 "X~V%" (0) "X")
;; Loading (DEF-FORMAT-TEST FORMAT.&.12 "X~#%" NIL "X")
;; Loading (DEF-FORMAT-TEST FORMAT.&.13 "X~#%" ((QUOTE A) (QUOTE B) (QUOTE C)) "X


" 3)
;; Loading (LOAD "format-page.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-page.lsp 81FE4847>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-FORMAT-TEST FORMAT.PAGE.1 "~0|" NIL "")
;; Loading (DEFTEST FORMAT.PAGE.2 (LET ((S (FORMAT NIL "~|"))) (COND ((STRING= S "") NIL) ((> (LENGTH S) 1) (VALUES S :TOO-LONG)) (T (LET ((C (ELT S 0))) (LOOP FOR I FROM 2 TO 100 FOR S = (FORMAT NIL (FORMAT NIL "~~~D|" I)) UNLESS (AND (= (LENGTH S) I) (EVERY (FUNCTION (LAMBDA (C2) (CHAR= C C2))) S)) COLLECT I))))) NIL)
;; Loading (DEFTEST FORMAT.PAGE.3 (LET ((S (FORMAT NIL "~|"))) (COND ((STRING= S "") NIL) ((> (LENGTH S) 1) (VALUES S :TOO-LONG)) (T (LET ((C (ELT S 0))) (LOOP FOR I FROM 2 TO 100 FOR S = (FORMAT NIL "~v|" I) UNLESS (AND (= (LENGTH S) I) (EVERY (FUNCTION (LAMBDA (C2) (CHAR= C C2))) S)) COLLECT I))))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.PAGE.4 "~V|" (0) "")
;; Loading (DEF-FORMAT-TEST FORMAT.PAGE.5 "~v|" (NIL) "")
;; Loading (LOAD "format-tilde.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-tilde.lsp C1B48A27>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.~.1 "~~" NIL "~")
;; Loading (DEFTEST FORMAT.~.2 (LOOP FOR I FROM 0 TO 100 FOR S = (MAKE-STRING I :INITIAL-ELEMENT #\~) FOR FORMAT-STRING = (FORMAT NIL "~~~D~~" I) FOR S2 = (FORMAT NIL FORMAT-STRING) UNLESS (STRING= S S2) COLLECT (LIST I S S2)) NIL)
;; Loading (DEFTEST FORMATTER.~.2 (LOOP FOR I FROM 0 TO 100 FOR S = (MAKE-STRING I :INITIAL-ELEMENT #\~) FOR FORMAT-STRING = (FORMAT NIL "~~~D~~" I) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FORMAT-STRING)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN) UNLESS (STRING= S S2) COLLECT (LIST I S S2)) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.~.3 "~v~" (0) "")
;; Loading (DEFTEST FORMAT.~.4 (LOOP FOR I FROM 0 TO 100 FOR S = (MAKE-STRING I :INITIAL-ELEMENT #\~) FOR S2 = (FORMAT NIL "~V~" I) UNLESS (STRING= S S2) COLLECT (LIST I S S2)) NIL)
;; Loading (DEFTEST FORMATTER.~.4 (LET ((FN (FORMATTER "~v~"))) (LOOP FOR I FROM 0 TO 100 FOR S = (MAKE-STRING I :INITIAL-ELEMENT #\~) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) UNLESS (STRING= S S2) COLLECT (LIST I S S2))) NIL)
;; Loading (DEFTEST FORMAT.~.5 (LOOP FOR I FROM 0 TO (MIN (- CALL-ARGUMENTS-LIMIT 3) 100) FOR S = (MAKE-STRING I :INITIAL-ELEMENT #\~) FOR ARGS = (MAKE-LIST I) FOR S2 = (APPLY (FUNCTION FORMAT) NIL "~#~" ARGS) UNLESS (STRING= S S2) COLLECT (LIST I S S2)) NIL)
;; Loading (DEFTEST FORMATTER.~.5 (LET ((FN (FORMATTER "~#~"))) (LOOP FOR I FROM 0 TO (MIN (- CALL-ARGUMENTS-LIMIT 3) 100) FOR S = (MAKE-STRING I :INITIAL-ELEMENT #\~) FOR ARGS = (MAKE-LIST I) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM ARGS) ARGS))) UNLESS (STRING= S S2) COLLECT (LIST I S S2))) NIL)
;; Loading (LOAD "format-r.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-r.lsp C1C06FA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (COMPILE-AND-LOAD "roman-numerals.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/roman-numerals.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Compiling form (DEFPARAMETER *ROMAN-NUMERALS* (QUOTE ("I" "II" "III" "IV" "V" "VI" "VII" "VIII" "IX" "X" "XI" "XII" "XIII" "XIV" "XV" "XVI" "XVII" "XVIII" "XIX" "XX" "XXI" "XXII" "XXIII" "XXIV" "XXV" "XXVI" "XXVII" "XXVIII" "XXIX" "XXX" "XXXI" "XXXII" "XXXIII" "XXXIV" "XXXV" "XXXVI" "XXXVII" "XXXVIII" "XXXIX" "XL" "XLI" "XLII" "XLIII" "XLIV" "XLV" "XLVI" "XLVII" "XLVIII" "XLIX" "L" "LI" "LII" "LIII" "LIV" "LV" "LVI" "LVII" "LVIII" "LIX" "LX" "LXI" "LXII" "LXIII" "LXIV" "LXV" "LXVI" "LXVII" "LXVIII" "LXIX" "LXX" "LXXI" "LXXII" "LXXIII" "LXXIV" "LXXV" "LXXVI" "LXXVII" "LXXVIII" "LXXIX" "LXXX" "LXXXI" "LXXXII" "LXXXIII" "LXXXIV" "LXXXV" "LXXXVI" "LXXXVII" "LXXXVIII" "LXXXIX" "XC" "XCI" "XCII" "XCIII" "XCIV" "XCV" "XCVI" "XCVII" "XCVIII" "XCIX" "C" "CI" "CII" "CIII" "CIV" "CV" "CVI" "CVII" "CVIII" "CIX" "CX" "CXI" "CXII" "CXIII" "CXIV" "CXV" "CXVI" "CXVII" "CXVIII" "CXIX" "CXX" "CXXI" "CXXII" "CXXIII" "CXXIV" "CXXV" "CXXVI" "CXXVII" "CXXVIII" "CXXIX" "CXXX" "CXXXI" "CXXXII" "CXXXIII" "CXXXIV" "CXXXV" "CXXXVI" "CXXXVII" "CXXXVIII" "CXXXIX" "CXL" "CXLI" "CXLII" "CXLIII" "CXLIV" "CXLV" "CXLVI" "CXLVII" "CXLVIII" "CXLIX" "CL" "CLI" "CLII" "CLIII" "CLIV" "CLV" "CLVI" "CLVII" "CLVIII" "CLIX" "CLX" "CLXI" "CLXII" "CLXIII" "CLXIV" "CLXV" "CLXVI" "CLXVII" "CLXVIII" "CLXIX" "CLXX" "CLXXI" "CLXXII" "CLXXIII" "CLXXIV" "CLXXV" "CLXXVI" "CLXXVII" "CLXXVIII" "CLXXIX" "CLXXX" "CLXXXI" "CLXXXII" "CLXXXIII" "CLXXXIV" "CLXXXV" "CLXXXVI" "CLXXXVII" "CLXXXVIII" "CLXXXIX" "CXC" "CXCI" "CXCII" "CXCIII" "CXCIV" "CXCV" "CXCVI" "CXCVII" "CXCVIII" "CXCIX" "CC" "CCI" "CCII" "CCIII" "CCIV" "CCV" "CCVI" "CCVII" "CCVIII" "CCIX" "CCX" "CCXI" "CCXII" "CCXIII" "CCXIV" "CCXV" "CCXVI" "CCXVII" "CCXVIII" "CCXIX" "CCXX" "CCXXI" "CCXXII" "CCXXIII" "CCXXIV" "CCXXV" "CCXXVI" "CCXXVII" "CCXXVIII" "CCXXIX" "CCXXX" "CCXXXI" "CCXXXII" "CCXXXIII" "CCXXXIV" "CCXXXV" "CCXXXVI" "CCXXXVII" "CCXXXVIII" "CCXXXIX" "CCXL" "CCXLI" "CCXLII" "CCXLIII" "CCXLIV" "CCXLV" "CCXLVI" "CCXLVII" "CCXLVIII" "CCXLIX" "CCL" "CCLI" "CCLII" "CCLIII" "CCLIV" "CCLV" "CCLVI" "CCLVII" "CCLVIII" "CCLIX" "CCLX" "CCLXI" "CCLXII" "CCLXIII" "CCLXIV" "CCLXV" "CCLXVI" "CCLXVII" "CCLXVIII" "CCLXIX" "CCLXX" "CCLXXI" "CCLXXII" "CCLXXIII" "CCLXXIV" "CCLXXV" "CCLXXVI" "CCLXXVII" "CCLXXVIII" "CCLXXIX" "CCLXXX" "CCLXXXI" "CCLXXXII" "CCLXXXIII" "CCLXXXIV" "CCLXXXV" "CCLXXXVI" "CCLXXXVII" "CCLXXXVIII" "CCLXXXIX" "CCXC" "CCXCI" "CCXCII" "CCXCIII" "CCXCIV" "CCXCV" "CCXCVI" "CCXCVII" "CCXCVIII" "CCXCIX" "CCC" "CCCI" "CCCII" "CCCIII" "CCCIV" "CCCV" "CCCVI" "CCCVII" "CCCVIII" "CCCIX" "CCCX" "CCCXI" "CCCXII" "CCCXIII" "CCCXIV" "CCCXV" "CCCXVI" "CCCXVII" "CCCXVIII" "CCCXIX" "CCCXX" "CCCXXI" "CCCXXII" "CCCXXIII" "CCCXXIV" "CCCXXV" "CCCXXVI" "CCCXXVII" "CCCXXVIII" "CCCXXIX" "CCCXXX" "CCCXXXI" "CCCXXXII" "CCCXXXIII" "CCCXXXIV" "CCCXXXV" "CCCXXXVI" "CCCXXXVII" "CCCXXXVIII" "CCCXXXIX" "CCCXL" "CCCXLI" "CCCXLII" "CCCXLIII" "CCCXLIV" "CCCXLV" "CCCXLVI" "CCCXLVII" "CCCXLVIII" "CCCXLIX" "CCCL" "CCCLI" "CCCLII" "CCCLIII" "CCCLIV" "CCCLV" "CCCLVI" "CCCLVII" "CCCLVIII" "CCCLIX" "CCCLX" "CCCLXI" "CCCLXII" "CCCLXIII" "CCCLXIV" "CCCLXV" "CCCLXVI" "CCCLXVII" "CCCLXVIII" "CCCLXIX" "CCCLXX" "CCCLXXI" "CCCLXXII" "CCCLXXIII" "CCCLXXIV" "CCCLXXV" "CCCLXXVI" "CCCLXXVII" "CCCLXXVIII" "CCCLXXIX" "CCCLXXX" "CCCLXXXI" "CCCLXXXII" "CCCLXXXIII" "CCCLXXXIV" "CCCLXXXV" "CCCLXXXVI" "CCCLXXXVII" "CCCLXXXVIII" "CCCLXXXIX" "CCCXC" "CCCXCI" "CCCXCII" "CCCXCIII" "CCCXCIV" "CCCXCV" "CCCXCVI" "CCCXCVII" "CCCXCVIII" "CCCXCIX" "CD" "CDI" "CDII" "CDIII" "CDIV" "CDV" "CDVI" "CDVII" "CDVIII" "CDIX" "CDX" "CDXI" "CDXII" "CDXIII" "CDXIV" "CDXV" "CDXVI" "CDXVII" "CDXVIII" "CDXIX" "CDXX" "CDXXI" "CDXXII" "CDXXIII" "CDXXIV" "CDXXV" "CDXXVI" "CDXXVII" "CDXXVIII" "CDXXIX" "CDXXX" "CDXXXI" "CDXXXII" "CDXXXIII" "CDXXXIV" "CDXXXV" "CDXXXVI" "CDXXXVII" "CDXXXVIII" "CDXXXIX" "CDXL" "CDXLI" "CDXLII" "CDXLIII" "CDXLIV" "CDXLV" "CDXLVI" "CDXLVII" "CDXLVIII" "CDXLIX" "CDL" "CDLI" "CDLII" "CDLIII" "CDLIV" "CDLV" "CDLVI" "CDLVII" "CDLVIII" "CDLIX" "CDLX" "CDLXI" "CDLXII" "CDLXIII" "CDLXIV" "CDLXV" "CDLXVI" "CDLXVII" "CDLXVIII" "CDLXIX" "CDLXX" "CDLXXI" "CDLXXII" "CDLXXIII" "CDLXXIV" "CDLXXV" "CDLXXVI" "CDLXXVII" "CDLXXVIII" "CDLXXIX" "CDLXXX" "CDLXXXI" "CDLXXXII" "CDLXXXIII" "CDLXXXIV" "CDLXXXV" "CDLXXXVI" "CDLXXXVII" "CDLXXXVIII" "CDLXXXIX" "CDXC" "CDXCI" "CDXCII" "CDXCIII" "CDXCIV" "CDXCV" "CDXCVI" "CDXCVII" "CDXCVIII" "CDXCIX" "D" "DI" "DII" "DIII" "DIV" "DV" "DVI" "DVII" "DVIII" "DIX" "DX" "DXI" "DXII" "DXIII" "DXIV" "DXV" "DXVI" "DXVII" "DXVIII" "DXIX" "DXX" "DXXI" "DXXII" "DXXIII" "DXXIV" "DXXV" "DXXVI" "DXXVII" "DXXVIII" "DXXIX" "DXXX" "DXXXI" "DXXXII" "DXXXIII" "DXXXIV" "DXXXV" "DXXXVI" "DXXXVII" "DXXXVIII" "DXXXIX" "DXL" "DXLI" "DXLII" "DXLIII" "DXLIV" "DXLV" "DXLVI" "DXLVII" "DXLVIII" "DXLIX" "DL" "DLI" "DLII" "DLIII" "DLIV" "DLV" "DLVI" "DLVII" "DLVIII" "DLIX" "DLX" "DLXI" "DLXII" "DLXIII" "DLXIV" "DLXV" "DLXVI" "DLXVII" "DLXVIII" "DLXIX" "DLXX" "DLXXI" "DLXXII" "DLXXIII" "DLXXIV" "DLXXV" "DLXXVI" "DLXXVII" "DLXXVIII" "DLXXIX" "DLXXX" "DLXXXI" "DLXXXII" "DLXXXIII" "DLXXXIV" "DLXXXV" "DLXXXVI" "DLXXXVII" "DLXXXVIII" "DLXXXIX" "DXC" "DXCI" "DXCII" "DXCIII" "DXCIV" "DXCV" "DXCVI" "DXCVII" "DXCVIII" "DXCIX" "DC" "DCI" "DCII" "DCIII" "DCIV" "DCV" "DCVI" "DCVII" "DCVIII" "DCIX" "DCX" "DCXI" "DCXII" "DCXIII" "DCXIV" "DCXV" "DCXVI" "DCXVII" "DCXVIII" "DCXIX" "DCXX" "DCXXI" "DCXXII" "DCXXIII" "DCXXIV" "DCXXV" "DCXXVI" "DCXXVII" "DCXXVIII" "DCXXIX" "DCXXX" "DCXXXI" "DCXXXII" "DCXXXIII" "DCXXXIV" "DCXXXV" "DCXXXVI" "DCXXXVII" "DCXXXVIII" "DCXXXIX" "DCXL" "DCXLI" "DCXLII" "DCXLIII" "DCXLIV" "DCXLV" "DCXLVI" "DCXLVII" "DCXLVIII" "DCXLIX" "DCL" "DCLI" "DCLII" "DCLIII" "DCLIV" "DCLV" "DCLVI" "DCLVII" "DCLVIII" "DCLIX" "DCLX" "DCLXI" "DCLXII" "DCLXIII" "DCLXIV" "DCLXV" "DCLXVI" "DCLXVII" "DCLXVIII" "DCLXIX" "DCLXX" "DCLXXI" "DCLXXII" "DCLXXIII" "DCLXXIV" "DCLXXV" "DCLXXVI" "DCLXXVII" "DCLXXVIII" "DCLXXIX" "DCLXXX" "DCLXXXI" "DCLXXXII" "DCLXXXIII" "DCLXXXIV" "DCLXXXV" "DCLXXXVI" "DCLXXXVII" "DCLXXXVIII" "DCLXXXIX" "DCXC" "DCXCI" "DCXCII" "DCXCIII" "DCXCIV" "DCXCV" "DCXCVI" "DCXCVII" "DCXCVIII" "DCXCIX" "DCC" "DCCI" "DCCII" "DCCIII" "DCCIV" "DCCV" "DCCVI" "DCCVII" "DCCVIII" "DCCIX" "DCCX" "DCCXI" "DCCXII" "DCCXIII" "DCCXIV" "DCCXV" "DCCXVI" "DCCXVII" "DCCXVIII" "DCCXIX" "DCCXX" "DCCXXI" "DCCXXII" "DCCXXIII" "DCCXXIV" "DCCXXV" "DCCXXVI" "DCCXXVII" "DCCXXVIII" "DCCXXIX" "DCCXXX" "DCCXXXI" "DCCXXXII" "DCCXXXIII" "DCCXXXIV" "DCCXXXV" "DCCXXXVI" "DCCXXXVII" "DCCXXXVIII" "DCCXXXIX" "DCCXL" "DCCXLI" "DCCXLII" "DCCXLIII" "DCCXLIV" "DCCXLV" "DCCXLVI" "DCCXLVII" "DCCXLVIII" "DCCXLIX" "DCCL" "DCCLI" "DCCLII" "DCCLIII" "DCCLIV" "DCCLV" "DCCLVI" "DCCLVII" "DCCLVIII" "DCCLIX" "DCCLX" "DCCLXI" "DCCLXII" "DCCLXIII" "DCCLXIV" "DCCLXV" "DCCLXVI" "DCCLXVII" "DCCLXVIII" "DCCLXIX" "DCCLXX" "DCCLXXI" "DCCLXXII" "DCCLXXIII" "DCCLXXIV" "DCCLXXV" "DCCLXXVI" "DCCLXXVII" "DCCLXXVIII" "DCCLXXIX" "DCCLXXX" "DCCLXXXI" "DCCLXXXII" "DCCLXXXIII" "DCCLXXXIV" "DCCLXXXV" "DCCLXXXVI" "DCCLXXXVII" "DCCLXXXVIII" "DCCLXXXIX" "DCCXC" "DCCXCI" "DCCXCII" "DCCXCIII" "DCCXCIV" "DCCXCV" "DCCXCVI" "DCCXCVII" "DCCXCVIII" "DCCXCIX" "DCCC" "DCCCI" "DCCCII" "DCCCIII" "DCCCIV" "DCCCV" "DCCCVI" "DCCCVII" "DCCCVIII" "DCCCIX" "DCCCX" "DCCCXI" "DCCCXII" "DCCCXIII" "DCCCXIV" "DCCCXV" "DCCCXVI" "DCCCXVII" "DCCCXVIII" "DCCCXIX" "DCCCXX" "DCCCXXI" "DCCCXXII" "DCCCXXIII" "DCCCXXIV" "DCCCXXV" "DCCCXXVI" "DCCCXXVII" "DCCCXXVIII" "DCCCXXIX" "DCCCXXX" "DCCCXXXI" "DCCCXXXII" "DCCCXXXIII" "DCCCXXXIV" "DCCCXXXV" "DCCCXXXVI" "DCCCXXXVII" "DCCCXXXVIII" "DCCCXXXIX" "DCCCXL" "DCCCXLI" "DCCCXLII" "DCCCXLIII" "DCCCXLIV" "DCCCXLV" "DCCCXLVI" "DCCCXLVII" "DCCCXLVIII" "DCCCXLIX" "DCCCL" "DCCCLI" "DCCCLII" "DCCCLIII" "DCCCLIV" "DCCCLV" "DCCCLVI" "DCCCLVII" "DCCCLVIII" "DCCCLIX" "DCCCLX" "DCCCLXI" "DCCCLXII" "DCCCLXIII" "DCCCLXIV" "DCCCLXV" "DCCCLXVI" "DCCCLXVII" "DCCCLXVIII" "DCCCLXIX" "DCCCLXX" "DCCCLXXI" "DCCCLXXII" "DCCCLXXIII" "DCCCLXXIV" "DCCCLXXV" "DCCCLXXVI" "DCCCLXXVII" "DCCCLXXVIII" "DCCCLXXIX" "DCCCLXXX" "DCCCLXXXI" "DCCCLXXXII" "DCCCLXXXIII" "DCCCLXXXIV" "DCCCLXXXV" "DCCCLXXXVI" "DCCCLXXXVII" "DCCCLXXXVIII" "DCCCLXXXIX" "DCCCXC" "DCCCXCI" "DCCCXCII" "DCCCXCIII" "DCCCXCIV" "DCCCXCV" "DCCCXCVI" "DCCCXCVII" "DCCCXCVIII" "DCCCXCIX" "CM" "CMI" "CMII" "CMIII" "CMIV" "CMV" "CMVI" "CMVII" "CMVIII" "CMIX" "CMX" "CMXI" "CMXII" "CMXIII" "CMXIV" "CMXV" "CMXVI" "CMXVII" "CMXVIII" "CMXIX" "CMXX" "CMXXI" "CMXXII" "CMXXIII" "CMXXIV" "CMXXV" "CMXXVI" "CMXXVII" "CMXXVIII" "CMXXIX" "CMXXX" "CMXXXI" "CMXXXII" "CMXXXIII" "CMXXXIV" "CMXXXV" "CMXXXVI" "CMXXXVII" "CMXXXVIII" "CMXXXIX" "CMXL" "CMXLI" "CMXLII" "CMXLIII" "CMXLIV" "CMXLV" "CMXLVI" "CMXLVII" "CMXLVIII" "CMXLIX" "CML" "CMLI" "CMLII" "CMLIII" "CMLIV" "CMLV" "CMLVI" "CMLVII" "CMLVIII" "CMLIX" "CMLX" "CMLXI" "CMLXII" "CMLXIII" "CMLXIV" "CMLXV" "CMLXVI" "CMLXVII" "CMLXVIII" "CMLXIX" "CMLXX" "CMLXXI" "CMLXXII" "CMLXXIII" "CMLXXIV" "CMLXXV" "CMLXXVI" "CMLXXVII" "CMLXXVIII" "CMLXXIX" "CMLXXX" "CMLXXXI" "CMLXXXII" "CMLXXXIII" "CMLXXXIV" "CMLXXXV" "CMLXXXVI" "CMLXXXVII" "CMLXXXVIII" "CMLXXXIX" "CMXC" "CMXCI" "CMXCII" "CMXCIII" "CMXCIV" "CMXCV" "CMXCVI" "CMXCVII" "CMXCVIII" "CMXCIX" "M" "MI" "MII" "MIII" "MIV" "MV" "MVI" "MVII" "MVIII" "MIX" "MX" "MXI" "MXII" "MXIII" "MXIV" "MXV" "MXVI" "MXVII" "MXVIII" "MXIX" "MXX" "MXXI" "MXXII" "MXXIII" "MXXIV" "MXXV" "MXXVI" "MXXVII" "MXXVIII" "MXXIX" "MXXX" "MXXXI" "MXXXII" "MXXXIII" "MXXXIV" "MXXXV" "MXXXVI" "MXXXVII" "MXXXVIII" "MXXXIX" "MXL" "MXLI" "MXLII" "MXLIII" "MXLIV" "MXLV" "MXLVI" "MXLVII" "MXLVIII" "MXLIX" "ML" "MLI" "MLII" "MLIII" "MLIV" "MLV" "MLVI" "MLVII" "MLVIII" "MLIX" "MLX" "MLXI" "MLXII" "MLXIII" "MLXIV" "MLXV" "MLXVI" "MLXVII" "MLXVIII" "MLXIX" "MLXX" "MLXXI" "MLXXII" "MLXXIII" "MLXXIV" "MLXXV" "MLXXVI" "MLXXVII" "MLXXVIII" "MLXXIX" "MLXXX" "MLXXXI" "MLXXXII" "MLXXXIII" "MLXXXIV" "MLXXXV" "MLXXXVI" "MLXXXVII" "MLXXXVIII" "MLXXXIX" "MXC" "MXCI" "MXCII" "MXCIII" "MXCIV" "MXCV" "MXCVI" "MXCVII" "MXCVIII" "MXCIX" "MC" "MCI" "MCII" "MCIII" "MCIV" "MCV" "MCVI" "MCVII" "MCVIII" "MCIX" "MCX" "MCXI" "MCXII" "MCXIII" "MCXIV" "MCXV" "MCXVI" "MCXVII" "MCXVIII" "MCXIX" "MCXX" "MCXXI" "MCXXII" "MCXXIII" "MCXXIV" "MCXXV" "MCXXVI" "MCXXVII" "MCXXVIII" "MCXXIX" "MCXXX" "MCXXXI" "MCXXXII" "MCXXXIII" "MCXXXIV" "MCXXXV" "MCXXXVI" "MCXXXVII" "MCXXXVIII" "MCXXXIX" "MCXL" "MCXLI" "MCXLII" "MCXLIII" "MCXLIV" "MCXLV" "MCXLVI" "MCXLVII" "MCXLVIII" "MCXLIX" "MCL" "MCLI" "MCLII" "MCLIII" "MCLIV" "MCLV" "MCLVI" "MCLVII" "MCLVIII" "MCLIX" "MCLX" "MCLXI" "MCLXII" "MCLXIII" "MCLXIV" "MCLXV" "MCLXVI" "MCLXVII" "MCLXVIII" "MCLXIX" "MCLXX" "MCLXXI" "MCLXXII" "MCLXXIII" "MCLXXIV" "MCLXXV" "MCLXXVI" "MCLXXVII" "MCLXXVIII" "MCLXXIX" "MCLXXX" "MCLXXXI" "MCLXXXII" "MCLXXXIII" "MCLXXXIV" "MCLXXXV" "MCLXXXVI" "MCLXXXVII" "MCLXXXVIII" "MCLXXXIX" "MCXC" "MCXCI" "MCXCII" "MCXCIII" "MCXCIV" "MCXCV" "MCXCVI" "MCXCVII" "MCXCVIII" "MCXCIX" "MCC" "MCCI" "MCCII" "MCCIII" "MCCIV" "MCCV" "MCCVI" "MCCVII" "MCCVIII" "MCCIX" "MCCX" "MCCXI" "MCCXII" "MCCXIII" "MCCXIV" "MCCXV" "MCCXVI" "MCCXVII" "MCCXVIII" "MCCXIX" "MCCXX" "MCCXXI" "MCCXXII" "MCCXXIII" "MCCXXIV" "MCCXXV" "MCCXXVI" "MCCXXVII" "MCCXXVIII" "MCCXXIX" "MCCXXX" "MCCXXXI" "MCCXXXII" "MCCXXXIII" "MCCXXXIV" "MCCXXXV" "MCCXXXVI" "MCCXXXVII" "MCCXXXVIII" "MCCXXXIX" "MCCXL" "MCCXLI" "MCCXLII" "MCCXLIII" "MCCXLIV" "MCCXLV" "MCCXLVI" "MCCXLVII" "MCCXLVIII" "MCCXLIX" "MCCL" "MCCLI" "MCCLII" "MCCLIII" "MCCLIV" "MCCLV" "MCCLVI" "MCCLVII" "MCCLVIII" "MCCLIX" "MCCLX" "MCCLXI" "MCCLXII" "MCCLXIII" "MCCLXIV" "MCCLXV" "MCCLXVI" "MCCLXVII" "MCCLXVIII" "MCCLXIX" "MCCLXX" "MCCLXXI" "MCCLXXII" "MCCLXXIII" "MCCLXXIV" "MCCLXXV" "MCCLXXVI" "MCCLXXVII" "MCCLXXVIII" "MCCLXXIX" "MCCLXXX" "MCCLXXXI" "MCCLXXXII" "MCCLXXXIII" "MCCLXXXIV" "MCCLXXXV" "MCCLXXXVI" "MCCLXXXVII" "MCCLXXXVIII" "MCCLXXXIX" "MCCXC" "MCCXCI" "MCCXCII" "MCCXCIII" "MCCXCIV" "MCCXCV" "MCCXCVI" "MCCXCVII" "MCCXCVIII" "MCCXCIX" "MCCC" "MCCCI" "MCCCII" "MCCCIII" "MCCCIV" "MCCCV" "MCCCVI" "MCCCVII" "MCCCVIII" "MCCCIX" "MCCCX" "MCCCXI" "MCCCXII" "MCCCXIII" "MCCCXIV" "MCCCXV" "MCCCXVI" "MCCCXVII" "MCCCXVIII" "MCCCXIX" "MCCCXX" "MCCCXXI" "MCCCXXII" "MCCCXXIII" "MCCCXXIV" "MCCCXXV" "MCCCXXVI" "MCCCXXVII" "MCCCXXVIII" "MCCCXXIX" "MCCCXXX" "MCCCXXXI" "MCCCXXXII" "MCCCXXXIII" "MCCCXXXIV" "MCCCXXXV" "MCCCXXXVI" "MCCCXXXVII" "MCCCXXXVIII" "MCCCXXXIX" "MCCCXL" "MCCCXLI" "MCCCXLII" "MCCCXLIII" "MCCCXLIV" "MCCCXLV" "MCCCXLVI" "MCCCXLVII" "MCCCXLVIII" "MCCCXLIX" "MCCCL" "MCCCLI" "MCCCLII" "MCCCLIII" "MCCCLIV" "MCCCLV" "MCCCLVI" "MCCCLVII" "MCCCLVIII" "MCCCLIX" "MCCCLX" "MCCCLXI" "MCCCLXII" "MCCCLXIII" "MCCCLXIV" "MCCCLXV" "MCCCLXVI" "MCCCLXVII" "MCCCLXVIII" "MCCCLXIX" "MCCCLXX" "MCCCLXXI" "MCCCLXXII" "MCCCLXXIII" "MCCCLXXIV" "MCCCLXXV" "MCCCLXXVI" "MCCCLXXVII" "MCCCLXXVIII" "MCCCLXXIX" "MCCCLXXX" "MCCCLXXXI" "MCCCLXXXII" "MCCCLXXXIII" "MCCCLXXXIV" "MCCCLXXXV" "MCCCLXXXVI" "MCCCLXXXVII" "MCCCLXXXVIII" "MCCCLXXXIX" "MCCCXC" "MCCCXCI" "MCCCXCII" "MCCCXCIII" "MCCCXCIV" "MCCCXCV" "MCCCXCVI" "MCCCXCVII" "MCCCXCVIII" "MCCCXCIX" "MCD" "MCDI" "MCDII" "MCDIII" "MCDIV" "MCDV" "MCDVI" "MCDVII" "MCDVIII" "MCDIX" "MCDX" "MCDXI" "MCDXII" "MCDXIII" "MCDXIV" "MCDXV" "MCDXVI" "MCDXVII" "MCDXVIII" "MCDXIX" "MCDXX" "MCDXXI" "MCDXXII" "MCDXXIII" "MCDXXIV" "MCDXXV" "MCDXXVI" "MCDXXVII" "MCDXXVIII" "MCDXXIX" "MCDXXX" "MCDXXXI" "MCDXXXII" "MCDXXXIII" "MCDXXXIV" "MCDXXXV" "MCDXXXVI" "MCDXXXVII" "MCDXXXVIII" "MCDXXXIX" "MCDXL" "MCDXLI" "MCDXLII" "MCDXLIII" "MCDXLIV" "MCDXLV" "MCDXLVI" "MCDXLVII" "MCDXLVIII" "MCDXLIX" "MCDL" "MCDLI" "MCDLII" "MCDLIII" "MCDLIV" "MCDLV" "MCDLVI" "MCDLVII" "MCDLVIII" "MCDLIX" "MCDLX" "MCDLXI" "MCDLXII" "MCDLXIII" "MCDLXIV" "MCDLXV" "MCDLXVI" "MCDLXVII" "MCDLXVIII" "MCDLXIX" "MCDLXX" "MCDLXXI" "MCDLXXII" "MCDLXXIII" "MCDLXXIV" "MCDLXXV" "MCDLXXVI" "MCDLXXVII" "MCDLXXVIII" "MCDLXXIX" "MCDLXXX" "MCDLXXXI" "MCDLXXXII" "MCDLXXXIII" "MCDLXXXIV" "MCDLXXXV" "MCDLXXXVI" "MCDLXXXVII" "MCDLXXXVIII" "MCDLXXXIX" "MCDXC" "MCDXCI" "MCDXCII" "MCDXCIII" "MCDXCIV" "MCDXCV" "MCDXCVI" "MCDXCVII" "MCDXCVIII" "MCDXCIX" "MD" "MDI" "MDII" "MDIII" "MDIV" "MDV" "MDVI" "MDVII" "MDVIII" "MDIX" "MDX" "MDXI" "MDXII" "MDXIII" "MDXIV" "MDXV" "MDXVI" "MDXVII" "MDXVIII" "MDXIX" "MDXX" "MDXXI" "MDXXII" "MDXXIII" "MDXXIV" "MDXXV" "MDXXVI" "MDXXVII" "MDXXVIII" "MDXXIX" "MDXXX" "MDXXXI" "MDXXXII" "MDXXXIII" "MDXXXIV" "MDXXXV" "MDXXXVI" "MDXXXVII" "MDXXXVIII" "MDXXXIX" "MDXL" "MDXLI" "MDXLII" "MDXLIII" "MDXLIV" "MDXLV" "MDXLVI" "MDXLVII" "MDXLVIII" "MDXLIX" "MDL" "MDLI" "MDLII" "MDLIII" "MDLIV" "MDLV" "MDLVI" "MDLVII" "MDLVIII" "MDLIX" "MDLX" "MDLXI" "MDLXII" "MDLXIII" "MDLXIV" "MDLXV" "MDLXVI" "MDLXVII" "MDLXVIII" "MDLXIX" "MDLXX" "MDLXXI" "MDLXXII" "MDLXXIII" "MDLXXIV" "MDLXXV" "MDLXXVI" "MDLXXVII" "MDLXXVIII" "MDLXXIX" "MDLXXX" "MDLXXXI" "MDLXXXII" "MDLXXXIII" "MDLXXXIV" "MDLXXXV" "MDLXXXVI" "MDLXXXVII" "MDLXXXVIII" "MDLXXXIX" "MDXC" "MDXCI" "MDXCII" "MDXCIII" "MDXCIV" "MDXCV" "MDXCVI" "MDXCVII" "MDXCVIII" "MDXCIX" "MDC" "MDCI" "MDCII" "MDCIII" "MDCIV" "MDCV" "MDCVI" "MDCVII" "MDCVIII" "MDCIX" "MDCX" "MDCXI" "MDCXII" "MDCXIII" "MDCXIV" "MDCXV" "MDCXVI" "MDCXVII" "MDCXVIII" "MDCXIX" "MDCXX" "MDCXXI" "MDCXXII" "MDCXXIII" "MDCXXIV" "MDCXXV" "MDCXXVI" "MDCXXVII" "MDCXXVIII" "MDCXXIX" "MDCXXX" "MDCXXXI" "MDCXXXII" "MDCXXXIII" "MDCXXXIV" "MDCXXXV" "MDCXXXVI" "MDCXXXVII" "MDCXXXVIII" "MDCXXXIX" "MDCXL" "MDCXLI" "MDCXLII" "MDCXLIII" "MDCXLIV" "MDCXLV" "MDCXLVI" "MDCXLVII" "MDCXLVIII" "MDCXLIX" "MDCL" "MDCLI" "MDCLII" "MDCLIII" "MDCLIV" "MDCLV" "MDCLVI" "MDCLVII" "MDCLVIII" "MDCLIX" "MDCLX" "MDCLXI" "MDCLXII" "MDCLXIII" "MDCLXIV" "MDCLXV" "MDCLXVI" "MDCLXVII" "MDCLXVIII" "MDCLXIX" "MDCLXX" "MDCLXXI" "MDCLXXII" "MDCLXXIII" "MDCLXXIV" "MDCLXXV" "MDCLXXVI" "MDCLXXVII" "MDCLXXVIII" "MDCLXXIX" "MDCLXXX" "MDCLXXXI" "MDCLXXXII" "MDCLXXXIII" "MDCLXXXIV" "MDCLXXXV" "MDCLXXXVI" "MDCLXXXVII" "MDCLXXXVIII" "MDCLXXXIX" "MDCXC" "MDCXCI" "MDCXCII" "MDCXCIII" "MDCXCIV" "MDCXCV" "MDCXCVI" "MDCXCVII" "MDCXCVIII" "MDCXCIX" "MDCC" "MDCCI" "MDCCII" "MDCCIII" "MDCCIV" "MDCCV" "MDCCVI" "MDCCVII" "MDCCVIII" "MDCCIX" "MDCCX" "MDCCXI" "MDCCXII" "MDCCXIII" "MDCCXIV" "MDCCXV" "MDCCXVI" "MDCCXVII" "MDCCXVIII" "MDCCXIX" "MDCCXX" "MDCCXXI" "MDCCXXII" "MDCCXXIII" "MDCCXXIV" "MDCCXXV" "MDCCXXVI" "MDCCXXVII" "MDCCXXVIII" "MDCCXXIX" "MDCCXXX" "MDCCXXXI" "MDCCXXXII" "MDCCXXXIII" "MDCCXXXIV" "MDCCXXXV" "MDCCXXXVI" "MDCCXXXVII" "MDCCXXXVIII" "MDCCXXXIX" "MDCCXL" "MDCCXLI" "MDCCXLII" "MDCCXLIII" "MDCCXLIV" "MDCCXLV" "MDCCXLVI" "MDCCXLVII" "MDCCXLVIII" "MDCCXLIX" "MDCCL" "MDCCLI" "MDCCLII" "MDCCLIII" "MDCCLIV" "MDCCLV" "MDCCLVI" "MDCCLVII" "MDCCLVIII" "MDCCLIX" "MDCCLX" "MDCCLXI" "MDCCLXII" "MDCCLXIII" "MDCCLXIV" "MDCCLXV" "MDCCLXVI" "MDCCLXVII" "MDCCLXVIII" "MDCCLXIX" "MDCCLXX" "MDCCLXXI" "MDCCLXXII" "MDCCLXXIII" "MDCCLXXIV" "MDCCLXXV" "MDCCLXXVI" "MDCCLXXVII" "MDCCLXXVIII" "MDCCLXXIX" "MDCCLXXX" "MDCCLXXXI" "MDCCLXXXII" "MDCCLXXXIII" "MDCCLXXXIV" "MDCCLXXXV" "MDCCLXXXVI" "MDCCLXXXVII" "MDCCLXXXVIII" "MDCCLXXXIX" "MDCCXC" "MDCCXCI" "MDCCXCII" "MDCCXCIII" "MDCCXCIV" "MDCCXCV" "MDCCXCVI" "MDCCXCVII" "MDCCXCVIII" "MDCCXCIX" "MDCCC" "MDCCCI" "MDCCCII" "MDCCCIII" "MDCCCIV" "MDCCCV" "MDCCCVI" "MDCCCVII" "MDCCCVIII" "MDCCCIX" "MDCCCX" "MDCCCXI" "MDCCCXII" "MDCCCXIII" "MDCCCXIV" "MDCCCXV" "MDCCCXVI" "MDCCCXVII" "MDCCCXVIII" "MDCCCXIX" "MDCCCXX" "MDCCCXXI" "MDCCCXXII" "MDCCCXXIII" "MDCCCXXIV" "MDCCCXXV" "MDCCCXXVI" "MDCCCXXVII" "MDCCCXXVIII" "MDCCCXXIX" "MDCCCXXX" "MDCCCXXXI" "MDCCCXXXII" "MDCCCXXXIII" "MDCCCXXXIV" "MDCCCXXXV" "MDCCCXXXVI" "MDCCCXXXVII" "MDCCCXXXVIII" "MDCCCXXXIX" "MDCCCXL" "MDCCCXLI" "MDCCCXLII" "MDCCCXLIII" "MDCCCXLIV" "MDCCCXLV" "MDCCCXLVI" "MDCCCXLVII" "MDCCCXLVIII" "MDCCCXLIX" "MDCCCL" "MDCCCLI" "MDCCCLII" "MDCCCLIII" "MDCCCLIV" "MDCCCLV" "MDCCCLVI" "MDCCCLVII" "MDCCCLVIII" "MDCCCLIX" "MDCCCLX" "MDCCCLXI" "MDCCCLXII" "MDCCCLXIII" "MDCCCLXIV" "MDCCCLXV" "MDCCCLXVI" "MDCCCLXVII" "MDCCCLXVIII" "MDCCCLXIX" "MDCCCLXX" "MDCCCLXXI" "MDCCCLXXII" "MDCCCLXXIII" "MDCCCLXXIV" "MDCCCLXXV" "MDCCCLXXVI" "MDCCCLXXVII" "MDCCCLXXVIII" "MDCCCLXXIX" "MDCCCLXXX" "MDCCCLXXXI" "MDCCCLXXXII" "MDCCCLXXXIII" "MDCCCLXXXIV" "MDCCCLXXXV" "MDCCCLXXXVI" "MDCCCLXXXVII" "MDCCCLXXXVIII" "MDCCCLXXXIX" "MDCCCXC" "MDCCCXCI" "MDCCCXCII" "MDCCCXCIII" "MDCCCXCIV" "MDCCCXCV" "MDCCCXCVI" "MDCCCXCVII" "MDCCCXCVIII" "MDCCCXCIX" "MCM" "MCMI" "MCMII" "MCMIII" "MCMIV" "MCMV" "MCMVI" "MCMVII" "MCMVIII" "MCMIX" "MCMX" "MCMXI" "MCMXII" "MCMXIII" "MCMXIV" "MCMXV" "MCMXVI" "MCMXVII" "MCMXVIII" "MCMXIX" "MCMXX" "MCMXXI" "MCMXXII" "MCMXXIII" "MCMXXIV" "MCMXXV" "MCMXXVI" "MCMXXVII" "MCMXXVIII" "MCMXXIX" "MCMXXX" "MCMXXXI" "MCMXXXII" "MCMXXXIII" "MCMXXXIV" "MCMXXXV" "MCMXXXVI" "MCMXXXVII" "MCMXXXVIII" "MCMXXXIX" "MCMXL" "MCMXLI" "MCMXLII" "MCMXLIII" "MCMXLIV" "MCMXLV" "MCMXLVI" "MCMXLVII" "MCMXLVIII" "MCMXLIX" "MCML" "MCMLI" "MCMLII" "MCMLIII" "MCMLIV" "MCMLV" "MCMLVI" "MCMLVII" "MCMLVIII" "MCMLIX" "MCMLX" "MCMLXI" "MCMLXII" "MCMLXIII" "MCMLXIV" "MCMLXV" "MCMLXVI" "MCMLXVII" "MCMLXVIII" "MCMLXIX" "MCMLXX" "MCMLXXI" "MCMLXXII" "MCMLXXIII" "MCMLXXIV" "MCMLXXV" "MCMLXXVI" "MCMLXXVII" "MCMLXXVIII" "MCMLXXIX" "MCMLXXX" "MCMLXXXI" "MCMLXXXII" "MCMLXXXIII" "MCMLXXXIV" "MCMLXXXV" "MCMLXXXVI" "MCMLXXXVII" "MCMLXXXVIII" "MCMLXXXIX" "MCMXC" "MCMXCI" "MCMXCII" "MCMXCIII" "MCMXCIV" "MCMXCV" "MCMXCVI" "MCMXCVII" "MCMXCVIII" "MCMXCIX" "MM" "MMI" "MMII" "MMIII" "MMIV" "MMV" "MMVI" "MMVII" "MMVIII" "MMIX" "MMX" "MMXI" "MMXII" "MMXIII" "MMXIV" "MMXV" "MMXVI" "MMXVII" "MMXVIII" "MMXIX" "MMXX" "MMXXI" "MMXXII" "MMXXIII" "MMXXIV" "MMXXV" "MMXXVI" "MMXXVII" "MMXXVIII" "MMXXIX" "MMXXX" "MMXXXI" "MMXXXII" "MMXXXIII" "MMXXXIV" "MMXXXV" "MMXXXVI" "MMXXXVII" "MMXXXVIII" "MMXXXIX" "MMXL" "MMXLI" "MMXLII" "MMXLIII" "MMXLIV" "MMXLV" "MMXLVI" "MMXLVII" "MMXLVIII" "MMXLIX" "MML" "MMLI" "MMLII" "MMLIII" "MMLIV" "MMLV" "MMLVI" "MMLVII" "MMLVIII" "MMLIX" "MMLX" "MMLXI" "MMLXII" "MMLXIII" "MMLXIV" "MMLXV" "MMLXVI" "MMLXVII" "MMLXVIII" "MMLXIX" "MMLXX" "MMLXXI" "MMLXXII" "MMLXXIII" "MMLXXIV" "MMLXXV" "MMLXXVI" "MMLXXVII" "MMLXXVIII" "MMLXXIX" "MMLXXX" "MMLXXXI" "MMLXXXII" "MMLXXXIII" "MMLXXXIV" "MMLXXXV" "MMLXXXVI" "MMLXXXVII" "MMLXXXVIII" "MMLXXXIX" "MMXC" "MMXCI" "MMXCII" "MMXCIII" "MMXCIV" "MMXCV" "MMXCVI" "MMXCVII" "MMXCVIII" "MMXCIX" "MMC" "MMCI" "MMCII" "MMCIII" "MMCIV" "MMCV" "MMCVI" "MMCVII" "MMCVIII" "MMCIX" "MMCX" "MMCXI" "MMCXII" "MMCXIII" "MMCXIV" "MMCXV" "MMCXVI" "MMCXVII" "MMCXVIII" "MMCXIX" "MMCXX" "MMCXXI" "MMCXXII" "MMCXXIII" "MMCXXIV" "MMCXXV" "MMCXXVI" "MMCXXVII" "MMCXXVIII" "MMCXXIX" "MMCXXX" "MMCXXXI" "MMCXXXII" "MMCXXXIII" "MMCXXXIV" "MMCXXXV" "MMCXXXVI" "MMCXXXVII" "MMCXXXVIII" "MMCXXXIX" "MMCXL" "MMCXLI" "MMCXLII" "MMCXLIII" "MMCXLIV" "MMCXLV" "MMCXLVI" "MMCXLVII" "MMCXLVIII" "MMCXLIX" "MMCL" "MMCLI" "MMCLII" "MMCLIII" "MMCLIV" "MMCLV" "MMCLVI" "MMCLVII" "MMCLVIII" "MMCLIX" "MMCLX" "MMCLXI" "MMCLXII" "MMCLXIII" "MMCLXIV" "MMCLXV" "MMCLXVI" "MMCLXVII" "MMCLXVIII" "MMCLXIX" "MMCLXX" "MMCLXXI" "MMCLXXII" "MMCLXXIII" "MMCLXXIV" "MMCLXXV" "MMCLXXVI" "MMCLXXVII" "MMCLXXVIII" "MMCLXXIX" "MMCLXXX" "MMCLXXXI" "MMCLXXXII" "MMCLXXXIII" "MMCLXXXIV" "MMCLXXXV" "MMCLXXXVI" "MMCLXXXVII" "MMCLXXXVIII" "MMCLXXXIX" "MMCXC" "MMCXCI" "MMCXCII" "MMCXCIII" "MMCXCIV" "MMCXCV" "MMCXCVI" "MMCXCVII" "MMCXCVIII" "MMCXCIX" "MMCC" "MMCCI" "MMCCII" "MMCCIII" "MMCCIV" "MMCCV" "MMCCVI" "MMCCVII" "MMCCVIII" "MMCCIX" "MMCCX" "MMCCXI" "MMCCXII" "MMCCXIII" "MMCCXIV" "MMCCXV" "MMCCXVI" "MMCCXVII" "MMCCXVIII" "MMCCXIX" "MMCCXX" "MMCCXXI" "MMCCXXII" "MMCCXXIII" "MMCCXXIV" "MMCCXXV" "MMCCXXVI" "MMCCXXVII" "MMCCXXVIII" "MMCCXXIX" "MMCCXXX" "MMCCXXXI" "MMCCXXXII" "MMCCXXXIII" "MMCCXXXIV" "MMCCXXXV" "MMCCXXXVI" "MMCCXXXVII" "MMCCXXXVIII" "MMCCXXXIX" "MMCCXL" "MMCCXLI" "MMCCXLII" "MMCCXLIII" "MMCCXLIV" "MMCCXLV" "MMCCXLVI" "MMCCXLVII" "MMCCXLVIII" "MMCCXLIX" "MMCCL" "MMCCLI" "MMCCLII" "MMCCLIII" "MMCCLIV" "MMCCLV" "MMCCLVI" "MMCCLVII" "MMCCLVIII" "MMCCLIX" "MMCCLX" "MMCCLXI" "MMCCLXII" "MMCCLXIII" "MMCCLXIV" "MMCCLXV" "MMCCLXVI" "MMCCLXVII" "MMCCLXVIII" "MMCCLXIX" "MMCCLXX" "MMCCLXXI" "MMCCLXXII" "MMCCLXXIII" "MMCCLXXIV" "MMCCLXXV" "MMCCLXXVI" "MMCCLXXVII" "MMCCLXXVIII" "MMCCLXXIX" "MMCCLXXX" "MMCCLXXXI" "MMCCLXXXII" "MMCCLXXXIII" "MMCCLXXXIV" "MMCCLXXXV" "MMCCLXXXVI" "MMCCLXXXVII" "MMCCLXXXVIII" "MMCCLXXXIX" "MMCCXC" "MMCCXCI" "MMCCXCII" "MMCCXCIII" "MMCCXCIV" "MMCCXCV" "MMCCXCVI" "MMCCXCVII" "MMCCXCVIII" "MMCCXCIX" "MMCCC" "MMCCCI" "MMCCCII" "MMCCCIII" "MMCCCIV" "MMCCCV" "MMCCCVI" "MMCCCVII" "MMCCCVIII" "MMCCCIX" "MMCCCX" "MMCCCXI" "MMCCCXII" "MMCCCXIII" "MMCCCXIV" "MMCCCXV" "MMCCCXVI" "MMCCCXVII" "MMCCCXVIII" "MMCCCXIX" "MMCCCXX" "MMCCCXXI" "MMCCCXXII" "MMCCCXXIII" "MMCCCXXIV" "MMCCCXXV" "MMCCCXXVI" "MMCCCXXVII" "MMCCCXXVIII" "MMCCCXXIX" "MMCCCXXX" "MMCCCXXXI" "MMCCCXXXII" "MMCCCXXXIII" "MMCCCXXXIV" "MMCCCXXXV" "MMCCCXXXVI" "MMCCCXXXVII" "MMCCCXXXVIII" "MMCCCXXXIX" "MMCCCXL" "MMCCCXLI" "MMCCCXLII" "MMCCCXLIII" "MMCCCXLIV" "MMCCCXLV" "MMCCCXLVI" "MMCCCXLVII" "MMCCCXLVIII" "MMCCCXLIX" "MMCCCL" "MMCCCLI" "MMCCCLII" "MMCCCLIII" "MMCCCLIV" "MMCCCLV" "MMCCCLVI" "MMCCCLVII" "MMCCCLVIII" "MMCCCLIX" "MMCCCLX" "MMCCCLXI" "MMCCCLXII" "MMCCCLXIII" "MMCCCLXIV" "MMCCCLXV" "MMCCCLXVI" "MMCCCLXVII" "MMCCCLXVIII" "MMCCCLXIX" "MMCCCLXX" "MMCCCLXXI" "MMCCCLXXII" "MMCCCLXXIII" "MMCCCLXXIV" "MMCCCLXXV" "MMCCCLXXVI" "MMCCCLXXVII" "MMCCCLXXVIII" "MMCCCLXXIX" "MMCCCLXXX" "MMCCCLXXXI" "MMCCCLXXXII" "MMCCCLXXXIII" "MMCCCLXXXIV" "MMCCCLXXXV" "MMCCCLXXXVI" "MMCCCLXXXVII" "MMCCCLXXXVIII" "MMCCCLXXXIX" "MMCCCXC" "MMCCCXCI" "MMCCCXCII" "MMCCCXCIII" "MMCCCXCIV" "MMCCCXCV" "MMCCCXCVI" "MMCCCXCVII" "MMCCCXCVIII" "MMCCCXCIX" "MMCD" "MMCDI" "MMCDII" "MMCDIII" "MMCDIV" "MMCDV" "MMCDVI" "MMCDVII" "MMCDVIII" "MMCDIX" "MMCDX" "MMCDXI" "MMCDXII" "MMCDXIII" "MMCDXIV" "MMCDXV" "MMCDXVI" "MMCDXVII" "MMCDXVIII" "MMCDXIX" "MMCDXX" "MMCDXXI" "MMCDXXII" "MMCDXXIII" "MMCDXXIV" "MMCDXXV" "MMCDXXVI" "MMCDXXVII" "MMCDXXVIII" "MMCDXXIX" "MMCDXXX" "MMCDXXXI" "MMCDXXXII" "MMCDXXXIII" "MMCDXXXIV" "MMCDXXXV" "MMCDXXXVI" "MMCDXXXVII" "MMCDXXXVIII" "MMCDXXXIX" "MMCDXL" "MMCDXLI" "MMCDXLII" "MMCDXLIII" "MMCDXLIV" "MMCDXLV" "MMCDXLVI" "MMCDXLVII" "MMCDXLVIII" "MMCDXLIX" "MMCDL" "MMCDLI" "MMCDLII" "MMCDLIII" "MMCDLIV" "MMCDLV" "MMCDLVI" "MMCDLVII" "MMCDLVIII" "MMCDLIX" "MMCDLX" "MMCDLXI" "MMCDLXII" "MMCDLXIII" "MMCDLXIV" "MMCDLXV" "MMCDLXVI" "MMCDLXVII" "MMCDLXVIII" "MMCDLXIX" "MMCDLXX" "MMCDLXXI" "MMCDLXXII" "MMCDLXXIII" "MMCDLXXIV" "MMCDLXXV" "MMCDLXXVI" "MMCDLXXVII" "MMCDLXXVIII" "MMCDLXXIX" "MMCDLXXX" "MMCDLXXXI" "MMCDLXXXII" "MMCDLXXXIII" "MMCDLXXXIV" "MMCDLXXXV" "MMCDLXXXVI" "MMCDLXXXVII" "MMCDLXXXVIII" "MMCDLXXXIX" "MMCDXC" "MMCDXCI" "MMCDXCII" "MMCDXCIII" "MMCDXCIV" "MMCDXCV" "MMCDXCVI" "MMCDXCVII" "MMCDXCVIII" "MMCDXCIX" "MMD" "MMDI" "MMDII" "MMDIII" "MMDIV" "MMDV" "MMDVI" "MMDVII" "MMDVIII" "MMDIX" "MMDX" "MMDXI" "MMDXII" "MMDXIII" "MMDXIV" "MMDXV" "MMDXVI" "MMDXVII" "MMDXVIII" "MMDXIX" "MMDXX" "MMDXXI" "MMDXXII" "MMDXXIII" "MMDXXIV" "MMDXXV" "MMDXXVI" "MMDXXVII" "MMDXXVIII" "MMDXXIX" "MMDXXX" "MMDXXXI" "MMDXXXII" "MMDXXXIII" "MMDXXXIV" "MMDXXXV" "MMDXXXVI" "MMDXXXVII" "MMDXXXVIII" "MMDXXXIX" "MMDXL" "MMDXLI" "MMDXLII" "MMDXLIII" "MMDXLIV" "MMDXLV" "MMDXLVI" "MMDXLVII" "MMDXLVIII" "MMDXLIX" "MMDL" "MMDLI" "MMDLII" "MMDLIII" "MMDLIV" "MMDLV" "MMDLVI" "MMDLVII" "MMDLVIII" "MMDLIX" "MMDLX" "MMDLXI" "MMDLXII" "MMDLXIII" "MMDLXIV" "MMDLXV" "MMDLXVI" "MMDLXVII" "MMDLXVIII" "MMDLXIX" "MMDLXX" "MMDLXXI" "MMDLXXII" "MMDLXXIII" "MMDLXXIV" "MMDLXXV" "MMDLXXVI" "MMDLXXVII" "MMDLXXVIII" "MMDLXXIX" "MMDLXXX" "MMDLXXXI" "MMDLXXXII" "MMDLXXXIII" "MMDLXXXIV" "MMDLXXXV" "MMDLXXXVI" "MMDLXXXVII" "MMDLXXXVIII" "MMDLXXXIX" "MMDXC" "MMDXCI" "MMDXCII" "MMDXCIII" "MMDXCIV" "MMDXCV" "MMDXCVI" "MMDXCVII" "MMDXCVIII" "MMDXCIX" "MMDC" "MMDCI" "MMDCII" "MMDCIII" "MMDCIV" "MMDCV" "MMDCVI" "MMDCVII" "MMDCVIII" "MMDCIX" "MMDCX" "MMDCXI" "MMDCXII" "MMDCXIII" "MMDCXIV" "MMDCXV" "MMDCXVI" "MMDCXVII" "MMDCXVIII" "MMDCXIX" "MMDCXX" "MMDCXXI" "MMDCXXII" "MMDCXXIII" "MMDCXXIV" "MMDCXXV" "MMDCXXVI" "MMDCXXVII" "MMDCXXVIII" "MMDCXXIX" "MMDCXXX" "MMDCXXXI" "MMDCXXXII" "MMDCXXXIII" "MMDCXXXIV" "MMDCXXXV" "MMDCXXXVI" "MMDCXXXVII" "MMDCXXXVIII" "MMDCXXXIX" "MMDCXL" "MMDCXLI" "MMDCXLII" "MMDCXLIII" "MMDCXLIV" "MMDCXLV" "MMDCXLVI" "MMDCXLVII" "MMDCXLVIII" "MMDCXLIX" "MMDCL" "MMDCLI" "MMDCLII" "MMDCLIII" "MMDCLIV" "MMDCLV" "MMDCLVI" "MMDCLVII" "MMDCLVIII" "MMDCLIX" "MMDCLX" "MMDCLXI" "MMDCLXII" "MMDCLXIII" "MMDCLXIV" "MMDCLXV" "MMDCLXVI" "MMDCLXVII" "MMDCLXVIII" "MMDCLXIX" "MMDCLXX" "MMDCLXXI" "MMDCLXXII" "MMDCLXXIII" "MMDCLXXIV" "MMDCLXXV" "MMDCLXXVI" "MMDCLXXVII" "MMDCLXXVIII" "MMDCLXXIX" "MMDCLXXX" "MMDCLXXXI" "MMDCLXXXII" "MMDCLXXXIII" "MMDCLXXXIV" "MMDCLXXXV" "MMDCLXXXVI" "MMDCLXXXVII" "MMDCLXXXVIII" "MMDCLXXXIX" "MMDCXC" "MMDCXCI" "MMDCXCII" "MMDCXCIII" "MMDCXCIV" "MMDCXCV" "MMDCXCVI" "MMDCXCVII" "MMDCXCVIII" "MMDCXCIX" "MMDCC" "MMDCCI" "MMDCCII" "MMDCCIII" "MMDCCIV" "MMDCCV" "MMDCCVI" "MMDCCVII" "MMDCCVIII" "MMDCCIX" "MMDCCX" "MMDCCXI" "MMDCCXII" "MMDCCXIII" "MMDCCXIV" "MMDCCXV" "MMDCCXVI" "MMDCCXVII" "MMDCCXVIII" "MMDCCXIX" "MMDCCXX" "MMDCCXXI" "MMDCCXXII" "MMDCCXXIII" "MMDCCXXIV" "MMDCCXXV" "MMDCCXXVI" "MMDCCXXVII" "MMDCCXXVIII" "MMDCCXXIX" "MMDCCXXX" "MMDCCXXXI" "MMDCCXXXII" "MMDCCXXXIII" "MMDCCXXXIV" "MMDCCXXXV" "MMDCCXXXVI" "MMDCCXXXVII" "MMDCCXXXVIII" "MMDCCXXXIX" "MMDCCXL" "MMDCCXLI" "MMDCCXLII" "MMDCCXLIII" "MMDCCXLIV" "MMDCCXLV" "MMDCCXLVI" "MMDCCXLVII" "MMDCCXLVIII" "MMDCCXLIX" "MMDCCL" "MMDCCLI" "MMDCCLII" "MMDCCLIII" "MMDCCLIV" "MMDCCLV" "MMDCCLVI" "MMDCCLVII" "MMDCCLVIII" "MMDCCLIX" "MMDCCLX" "MMDCCLXI" "MMDCCLXII" "MMDCCLXIII" "MMDCCLXIV" "MMDCCLXV" "MMDCCLXVI" "MMDCCLXVII" "MMDCCLXVIII" "MMDCCLXIX" "MMDCCLXX" "MMDCCLXXI" "MMDCCLXXII" "MMDCCLXXIII" "MMDCCLXXIV" "MMDCCLXXV" "MMDCCLXXVI" "MMDCCLXXVII" "MMDCCLXXVIII" "MMDCCLXXIX" "MMDCCLXXX" "MMDCCLXXXI" "MMDCCLXXXII" "MMDCCLXXXIII" "MMDCCLXXXIV" "MMDCCLXXXV" "MMDCCLXXXVI" "MMDCCLXXXVII" "MMDCCLXXXVIII" "MMDCCLXXXIX" "MMDCCXC" "MMDCCXCI" "MMDCCXCII" "MMDCCXCIII" "MMDCCXCIV" "MMDCCXCV" "MMDCCXCVI" "MMDCCXCVII" "MMDCCXCVIII" "MMDCCXCIX" "MMDCCC" "MMDCCCI" "MMDCCCII" "MMDCCCIII" "MMDCCCIV" "MMDCCCV" "MMDCCCVI" "MMDCCCVII" "MMDCCCVIII" "MMDCCCIX" "MMDCCCX" "MMDCCCXI" "MMDCCCXII" "MMDCCCXIII" "MMDCCCXIV" "MMDCCCXV" "MMDCCCXVI" "MMDCCCXVII" "MMDCCCXVIII" "MMDCCCXIX" "MMDCCCXX" "MMDCCCXXI" "MMDCCCXXII" "MMDCCCXXIII" "MMDCCCXXIV" "MMDCCCXXV" "MMDCCCXXVI" "MMDCCCXXVII" "MMDCCCXXVIII" "MMDCCCXXIX" "MMDCCCXXX" "MMDCCCXXXI" "MMDCCCXXXII" "MMDCCCXXXIII" "MMDCCCXXXIV" "MMDCCCXXXV" "MMDCCCXXXVI" "MMDCCCXXXVII" "MMDCCCXXXVIII" "MMDCCCXXXIX" "MMDCCCXL" "MMDCCCXLI" "MMDCCCXLII" "MMDCCCXLIII" "MMDCCCXLIV" "MMDCCCXLV" "MMDCCCXLVI" "MMDCCCXLVII" "MMDCCCXLVIII" "MMDCCCXLIX" "MMDCCCL" "MMDCCCLI" "MMDCCCLII" "MMDCCCLIII" "MMDCCCLIV" "MMDCCCLV" "MMDCCCLVI" "MMDCCCLVII" "MMDCCCLVIII" "MMDCCCLIX" "MMDCCCLX" "MMDCCCLXI" "MMDCCCLXII" "MMDCCCLXIII" "MMDCCCLXIV" "MMDCCCLXV" "MMDCCCLXVI" "MMDCCCLXVII" "MMDCCCLXVIII" "MMDCCCLXIX" "MMDCCCLXX" "MMDCCCLXXI" "MMDCCCLXXII" "MMDCCCLXXIII" "MMDCCCLXXIV" "MMDCCCLXXV" "MMDCCCLXXVI" "MMDCCCLXXVII" "MMDCCCLXXVIII" "MMDCCCLXXIX" "MMDCCCLXXX" "MMDCCCLXXXI" "MMDCCCLXXXII" "MMDCCCLXXXIII" "MMDCCCLXXXIV" "MMDCCCLXXXV" "MMDCCCLXXXVI" "MMDCCCLXXXVII" "MMDCCCLXXXVIII" "MMDCCCLXXXIX" "MMDCCCXC" "MMDCCCXCI" "MMDCCCXCII" "MMDCCCXCIII" "MMDCCCXCIV" "MMDCCCXCV" "MMDCCCXCVI" "MMDCCCXCVII" "MMDCCCXCVIII" "MMDCCCXCIX" "MMCM" "MMCMI" "MMCMII" "MMCMIII" "MMCMIV" "MMCMV" "MMCMVI" "MMCMVII" "MMCMVIII" "MMCMIX" "MMCMX" "MMCMXI" "MMCMXII" "MMCMXIII" "MMCMXIV" "MMCMXV" "MMCMXVI" "MMCMXVII" "MMCMXVIII" "MMCMXIX" "MMCMXX" "MMCMXXI" "MMCMXXII" "MMCMXXIII" "MMCMXXIV" "MMCMXXV" "MMCMXXVI" "MMCMXXVII" "MMCMXXVIII" "MMCMXXIX" "MMCMXXX" "MMCMXXXI" "MMCMXXXII" "MMCMXXXIII" "MMCMXXXIV" "MMCMXXXV" "MMCMXXXVI" "MMCMXXXVII" "MMCMXXXVIII" "MMCMXXXIX" "MMCMXL" "MMCMXLI" "MMCMXLII" "MMCMXLIII" "MMCMXLIV" "MMCMXLV" "MMCMXLVI" "MMCMXLVII" "MMCMXLVIII" "MMCMXLIX" "MMCML" "MMCMLI" "MMCMLII" "MMCMLIII" "MMCMLIV" "MMCMLV" "MMCMLVI" "MMCMLVII" "MMCMLVIII" "MMCMLIX" "MMCMLX" "MMCMLXI" "MMCMLXII" "MMCMLXIII" "MMCMLXIV" "MMCMLXV" "MMCMLXVI" "MMCMLXVII" "MMCMLXVIII" "MMCMLXIX" "MMCMLXX" "MMCMLXXI" "MMCMLXXII" "MMCMLXXIII" "MMCMLXXIV" "MMCMLXXV" "MMCMLXXVI" "MMCMLXXVII" "MMCMLXXVIII" "MMCMLXXIX" "MMCMLXXX" "MMCMLXXXI" "MMCMLXXXII" "MMCMLXXXIII" "MMCMLXXXIV" "MMCMLXXXV" "MMCMLXXXVI" "MMCMLXXXVII" "MMCMLXXXVIII" "MMCMLXXXIX" "MMCMXC" "MMCMXCI" "MMCMXCII" "MMCMXCIII" "MMCMXCIV" "MMCMXCV" "MMCMXCVI" "MMCMXCVII" "MMCMXCVIII" "MMCMXCIX" "MMM" "MMMI" "MMMII" "MMMIII" "MMMIV" "MMMV" "MMMVI" "MMMVII" "MMMVIII" "MMMIX" "MMMX" "MMMXI" "MMMXII" "MMMXIII" "MMMXIV" "MMMXV" "MMMXVI" "MMMXVII" "MMMXVIII" "MMMXIX" "MMMXX" "MMMXXI" "MMMXXII" "MMMXXIII" "MMMXXIV" "MMMXXV" "MMMXXVI" "MMMXXVII" "MMMXXVIII" "MMMXXIX" "MMMXXX" "MMMXXXI" "MMMXXXII" "MMMXXXIII" "MMMXXXIV" "MMMXXXV" "MMMXXXVI" "MMMXXXVII" "MMMXXXVIII" "MMMXXXIX" "MMMXL" "MMMXLI" "MMMXLII" "MMMXLIII" "MMMXLIV" "MMMXLV" "MMMXLVI" "MMMXLVII" "MMMXLVIII" "MMMXLIX" "MMML" "MMMLI" "MMMLII" "MMMLIII" "MMMLIV" "MMMLV" "MMMLVI" "MMMLVII" "MMMLVIII" "MMMLIX" "MMMLX" "MMMLXI" "MMMLXII" "MMMLXIII" "MMMLXIV" "MMMLXV" "MMMLXVI" "MMMLXVII" "MMMLXVIII" "MMMLXIX" "MMMLXX" "MMMLXXI" "MMMLXXII" "MMMLXXIII" "MMMLXXIV" "MMMLXXV" "MMMLXXVI" "MMMLXXVII" "MMMLXXVIII" "MMMLXXIX" "MMMLXXX" "MMMLXXXI" "MMMLXXXII" "MMMLXXXIII" "MMMLXXXIV" "MMMLXXXV" "MMMLXXXVI" "MMMLXXXVII" "MMMLXXXVIII" "MMMLXXXIX" "MMMXC" "MMMXCI" "MMMXCII" "MMMXCIII" "MMMXCIV" "MMMXCV" "MMMXCVI" "MMMXCVII" "MMMXCVIII" "MMMXCIX" "MMMC" "MMMCI" "MMMCII" "MMMCIII" "MMMCIV" "MMMCV" "MMMCVI" "MMMCVII" "MMMCVIII" "MMMCIX" "MMMCX" "MMMCXI" "MMMCXII" "MMMCXIII" "MMMCXIV" "MMMCXV" "MMMCXVI" "MMMCXVII" "MMMCXVIII" "MMMCXIX" "MMMCXX" "MMMCXXI" "MMMCXXII" "MMMCXXIII" "MMMCXXIV" "MMMCXXV" "MMMCXXVI" "MMMCXXVII" "MMMCXXVIII" "MMMCXXIX" "MMMCXXX" "MMMCXXXI" "MMMCXXXII" "MMMCXXXIII" "MMMCXXXIV" "MMMCXXXV" "MMMCXXXVI" "MMMCXXXVII" "MMMCXXXVIII" "MMMCXXXIX" "MMMCXL" "MMMCXLI" "MMMCXLII" "MMMCXLIII" "MMMCXLIV" "MMMCXLV" "MMMCXLVI" "MMMCXLVII" "MMMCXLVIII" "MMMCXLIX" "MMMCL" "MMMCLI" "MMMCLII" "MMMCLIII" "MMMCLIV" "MMMCLV" "MMMCLVI" "MMMCLVII" "MMMCLVIII" "MMMCLIX" "MMMCLX" "MMMCLXI" "MMMCLXII" "MMMCLXIII" "MMMCLXIV" "MMMCLXV" "MMMCLXVI" "MMMCLXVII" "MMMCLXVIII" "MMMCLXIX" "MMMCLXX" "MMMCLXXI" "MMMCLXXII" "MMMCLXXIII" "MMMCLXXIV" "MMMCLXXV" "MMMCLXXVI" "MMMCLXXVII" "MMMCLXXVIII" "MMMCLXXIX" "MMMCLXXX" "MMMCLXXXI" "MMMCLXXXII" "MMMCLXXXIII" "MMMCLXXXIV" "MMMCLXXXV" "MMMCLXXXVI" "MMMCLXXXVII" "MMMCLXXXVIII" "MMMCLXXXIX" "MMMCXC" "MMMCXCI" "MMMCXCII" "MMMCXCIII" "MMMCXCIV" "MMMCXCV" "MMMCXCVI" "MMMCXCVII" "MMMCXCVIII" "MMMCXCIX" "MMMCC" "MMMCCI" "MMMCCII" "MMMCCIII" "MMMCCIV" "MMMCCV" "MMMCCVI" "MMMCCVII" "MMMCCVIII" "MMMCCIX" "MMMCCX" "MMMCCXI" "MMMCCXII" "MMMCCXIII" "MMMCCXIV" "MMMCCXV" "MMMCCXVI" "MMMCCXVII" "MMMCCXVIII" "MMMCCXIX" "MMMCCXX" "MMMCCXXI" "MMMCCXXII" "MMMCCXXIII" "MMMCCXXIV" "MMMCCXXV" "MMMCCXXVI" "MMMCCXXVII" "MMMCCXXVIII" "MMMCCXXIX" "MMMCCXXX" "MMMCCXXXI" "MMMCCXXXII" "MMMCCXXXIII" "MMMCCXXXIV" "MMMCCXXXV" "MMMCCXXXVI" "MMMCCXXXVII" "MMMCCXXXVIII" "MMMCCXXXIX" "MMMCCXL" "MMMCCXLI" "MMMCCXLII" "MMMCCXLIII" "MMMCCXLIV" "MMMCCXLV" "MMMCCXLVI" "MMMCCXLVII" "MMMCCXLVIII" "MMMCCXLIX" "MMMCCL" "MMMCCLI" "MMMCCLII" "MMMCCLIII" "MMMCCLIV" "MMMCCLV" "MMMCCLVI" "MMMCCLVII" "MMMCCLVIII" "MMMCCLIX" "MMMCCLX" "MMMCCLXI" "MMMCCLXII" "MMMCCLXIII" "MMMCCLXIV" "MMMCCLXV" "MMMCCLXVI" "MMMCCLXVII" "MMMCCLXVIII" "MMMCCLXIX" "MMMCCLXX" "MMMCCLXXI" "MMMCCLXXII" "MMMCCLXXIII" "MMMCCLXXIV" "MMMCCLXXV" "MMMCCLXXVI" "MMMCCLXXVII" "MMMCCLXXVIII" "MMMCCLXXIX" "MMMCCLXXX" "MMMCCLXXXI" "MMMCCLXXXII" "MMMCCLXXXIII" "MMMCCLXXXIV" "MMMCCLXXXV" "MMMCCLXXXVI" "MMMCCLXXXVII" "MMMCCLXXXVIII" "MMMCCLXXXIX" "MMMCCXC" "MMMCCXCI" "MMMCCXCII" "MMMCCXCIII" "MMMCCXCIV" "MMMCCXCV" "MMMCCXCVI" "MMMCCXCVII" "MMMCCXCVIII" "MMMCCXCIX" "MMMCCC" "MMMCCCI" "MMMCCCII" "MMMCCCIII" "MMMCCCIV" "MMMCCCV" "MMMCCCVI" "MMMCCCVII" "MMMCCCVIII" "MMMCCCIX" "MMMCCCX" "MMMCCCXI" "MMMCCCXII" "MMMCCCXIII" "MMMCCCXIV" "MMMCCCXV" "MMMCCCXVI" "MMMCCCXVII" "MMMCCCXVIII" "MMMCCCXIX" "MMMCCCXX" "MMMCCCXXI" "MMMCCCXXII" "MMMCCCXXIII" "MMMCCCXXIV" "MMMCCCXXV" "MMMCCCXXVI" "MMMCCCXXVII" "MMMCCCXXVIII" "MMMCCCXXIX" "MMMCCCXXX" "MMMCCCXXXI" "MMMCCCXXXII" "MMMCCCXXXIII" "MMMCCCXXXIV" "MMMCCCXXXV" "MMMCCCXXXVI" "MMMCCCXXXVII" "MMMCCCXXXVIII" "MMMCCCXXXIX" "MMMCCCXL" "MMMCCCXLI" "MMMCCCXLII" "MMMCCCXLIII" "MMMCCCXLIV" "MMMCCCXLV" "MMMCCCXLVI" "MMMCCCXLVII" "MMMCCCXLVIII" "MMMCCCXLIX" "MMMCCCL" "MMMCCCLI" "MMMCCCLII" "MMMCCCLIII" "MMMCCCLIV" "MMMCCCLV" "MMMCCCLVI" "MMMCCCLVII" "MMMCCCLVIII" "MMMCCCLIX" "MMMCCCLX" "MMMCCCLXI" "MMMCCCLXII" "MMMCCCLXIII" "MMMCCCLXIV" "MMMCCCLXV" "MMMCCCLXVI" "MMMCCCLXVII" "MMMCCCLXVIII" "MMMCCCLXIX" "MMMCCCLXX" "MMMCCCLXXI" "MMMCCCLXXII" "MMMCCCLXXIII" "MMMCCCLXXIV" "MMMCCCLXXV" "MMMCCCLXXVI" "MMMCCCLXXVII" "MMMCCCLXXVIII" "MMMCCCLXXIX" "MMMCCCLXXX" "MMMCCCLXXXI" "MMMCCCLXXXII" "MMMCCCLXXXIII" "MMMCCCLXXXIV" "MMMCCCLXXXV" "MMMCCCLXXXVI" "MMMCCCLXXXVII" "MMMCCCLXXXVIII" "MMMCCCLXXXIX" "MMMCCCXC" "MMMCCCXCI" "MMMCCCXCII" "MMMCCCXCIII" "MMMCCCXCIV" "MMMCCCXCV" "MMMCCCXCVI" "MMMCCCXCVII" "MMMCCCXCVIII" "MMMCCCXCIX" "MMMCD" "MMMCDI" "MMMCDII" "MMMCDIII" "MMMCDIV" "MMMCDV" "MMMCDVI" "MMMCDVII" "MMMCDVIII" "MMMCDIX" "MMMCDX" "MMMCDXI" "MMMCDXII" "MMMCDXIII" "MMMCDXIV" "MMMCDXV" "MMMCDXVI" "MMMCDXVII" "MMMCDXVIII" "MMMCDXIX" "MMMCDXX" "MMMCDXXI" "MMMCDXXII" "MMMCDXXIII" "MMMCDXXIV" "MMMCDXXV" "MMMCDXXVI" "MMMCDXXVII" "MMMCDXXVIII" "MMMCDXXIX" "MMMCDXXX" "MMMCDXXXI" "MMMCDXXXII" "MMMCDXXXIII" "MMMCDXXXIV" "MMMCDXXXV" "MMMCDXXXVI" "MMMCDXXXVII" "MMMCDXXXVIII" "MMMCDXXXIX" "MMMCDXL" "MMMCDXLI" "MMMCDXLII" "MMMCDXLIII" "MMMCDXLIV" "MMMCDXLV" "MMMCDXLVI" "MMMCDXLVII" "MMMCDXLVIII" "MMMCDXLIX" "MMMCDL" "MMMCDLI" "MMMCDLII" "MMMCDLIII" "MMMCDLIV" "MMMCDLV" "MMMCDLVI" "MMMCDLVII" "MMMCDLVIII" "MMMCDLIX" "MMMCDLX" "MMMCDLXI" "MMMCDLXII" "MMMCDLXIII" "MMMCDLXIV" "MMMCDLXV" "MMMCDLXVI" "MMMCDLXVII" "MMMCDLXVIII" "MMMCDLXIX" "MMMCDLXX" "MMMCDLXXI" "MMMCDLXXII" "MMMCDLXXIII" "MMMCDLXXIV" "MMMCDLXXV" "MMMCDLXXVI" "MMMCDLXXVII" "MMMCDLXXVIII" "MMMCDLXXIX" "MMMCDLXXX" "MMMCDLXXXI" "MMMCDLXXXII" "MMMCDLXXXIII" "MMMCDLXXXIV" "MMMCDLXXXV" "MMMCDLXXXVI" "MMMCDLXXXVII" "MMMCDLXXXVIII" "MMMCDLXXXIX" "MMMCDXC" "MMMCDXCI" "MMMCDXCII" "MMMCDXCIII" "MMMCDXCIV" "MMMCDXCV" "MMMCDXCVI" "MMMCDXCVII" "MMMCDXCVIII" "MMMCDXCIX" "MMMD" "MMMDI" "MMMDII" "MMMDIII" "MMMDIV" "MMMDV" "MMMDVI" "MMMDVII" "MMMDVIII" "MMMDIX" "MMMDX" "MMMDXI" "MMMDXII" "MMMDXIII" "MMMDXIV" "MMMDXV" "MMMDXVI" "MMMDXVII" "MMMDXVIII" "MMMDXIX" "MMMDXX" "MMMDXXI" "MMMDXXII" "MMMDXXIII" "MMMDXXIV" "MMMDXXV" "MMMDXXVI" "MMMDXXVII" "MMMDXXVIII" "MMMDXXIX" "MMMDXXX" "MMMDXXXI" "MMMDXXXII" "MMMDXXXIII" "MMMDXXXIV" "MMMDXXXV" "MMMDXXXVI" "MMMDXXXVII" "MMMDXXXVIII" "MMMDXXXIX" "MMMDXL" "MMMDXLI" "MMMDXLII" "MMMDXLIII" "MMMDXLIV" "MMMDXLV" "MMMDXLVI" "MMMDXLVII" "MMMDXLVIII" "MMMDXLIX" "MMMDL" "MMMDLI" "MMMDLII" "MMMDLIII" "MMMDLIV" "MMMDLV" "MMMDLVI" "MMMDLVII" "MMMDLVIII" "MMMDLIX" "MMMDLX" "MMMDLXI" "MMMDLXII" "MMMDLXIII" "MMMDLXIV" "MMMDLXV" "MMMDLXVI" "MMMDLXVII" "MMMDLXVIII" "MMMDLXIX" "MMMDLXX" "MMMDLXXI" "MMMDLXXII" "MMMDLXXIII" "MMMDLXXIV" "MMMDLXXV" "MMMDLXXVI" "MMMDLXXVII" "MMMDLXXVIII" "MMMDLXXIX" "MMMDLXXX" "MMMDLXXXI" "MMMDLXXXII" "MMMDLXXXIII" "MMMDLXXXIV" "MMMDLXXXV" "MMMDLXXXVI" "MMMDLXXXVII" "MMMDLXXXVIII" "MMMDLXXXIX" "MMMDXC" "MMMDXCI" "MMMDXCII" "MMMDXCIII" "MMMDXCIV" "MMMDXCV" "MMMDXCVI" "MMMDXCVII" "MMMDXCVIII" "MMMDXCIX" "MMMDC" "MMMDCI" "MMMDCII" "MMMDCIII" "MMMDCIV" "MMMDCV" "MMMDCVI" "MMMDCVII" "MMMDCVIII" "MMMDCIX" "MMMDCX" "MMMDCXI" "MMMDCXII" "MMMDCXIII" "MMMDCXIV" "MMMDCXV" "MMMDCXVI" "MMMDCXVII" "MMMDCXVIII" "MMMDCXIX" "MMMDCXX" "MMMDCXXI" "MMMDCXXII" "MMMDCXXIII" "MMMDCXXIV" "MMMDCXXV" "MMMDCXXVI" "MMMDCXXVII" "MMMDCXXVIII" "MMMDCXXIX" "MMMDCXXX" "MMMDCXXXI" "MMMDCXXXII" "MMMDCXXXIII" "MMMDCXXXIV" "MMMDCXXXV" "MMMDCXXXVI" "MMMDCXXXVII" "MMMDCXXXVIII" "MMMDCXXXIX" "MMMDCXL" "MMMDCXLI" "MMMDCXLII" "MMMDCXLIII" "MMMDCXLIV" "MMMDCXLV" "MMMDCXLVI" "MMMDCXLVII" "MMMDCXLVIII" "MMMDCXLIX" "MMMDCL" "MMMDCLI" "MMMDCLII" "MMMDCLIII" "MMMDCLIV" "MMMDCLV" "MMMDCLVI" "MMMDCLVII" "MMMDCLVIII" "MMMDCLIX" "MMMDCLX" "MMMDCLXI" "MMMDCLXII" "MMMDCLXIII" "MMMDCLXIV" "MMMDCLXV" "MMMDCLXVI" "MMMDCLXVII" "MMMDCLXVIII" "MMMDCLXIX" "MMMDCLXX" "MMMDCLXXI" "MMMDCLXXII" "MMMDCLXXIII" "MMMDCLXXIV" "MMMDCLXXV" "MMMDCLXXVI" "MMMDCLXXVII" "MMMDCLXXVIII" "MMMDCLXXIX" "MMMDCLXXX" "MMMDCLXXXI" "MMMDCLXXXII" "MMMDCLXXXIII" "MMMDCLXXXIV" "MMMDCLXXXV" "MMMDCLXXXVI" "MMMDCLXXXVII" "MMMDCLXXXVIII" "MMMDCLXXXIX" "MMMDCXC" "MMMDCXCI" "MMMDCXCII" "MMMDCXCIII" "MMMDCXCIV" "MMMDCXCV" "MMMDCXCVI" "MMMDCXCVII" "MMMDCXCVIII" "MMMDCXCIX" "MMMDCC" "MMMDCCI" "MMMDCCII" "MMMDCCIII" "MMMDCCIV" "MMMDCCV" "MMMDCCVI" "MMMDCCVII" "MMMDCCVIII" "MMMDCCIX" "MMMDCCX" "MMMDCCXI" "MMMDCCXII" "MMMDCCXIII" "MMMDCCXIV" "MMMDCCXV" "MMMDCCXVI" "MMMDCCXVII" "MMMDCCXVIII" "MMMDCCXIX" "MMMDCCXX" "MMMDCCXXI" "MMMDCCXXII" "MMMDCCXXIII" "MMMDCCXXIV" "MMMDCCXXV" "MMMDCCXXVI" "MMMDCCXXVII" "MMMDCCXXVIII" "MMMDCCXXIX" "MMMDCCXXX" "MMMDCCXXXI" "MMMDCCXXXII" "MMMDCCXXXIII" "MMMDCCXXXIV" "MMMDCCXXXV" "MMMDCCXXXVI" "MMMDCCXXXVII" "MMMDCCXXXVIII" "MMMDCCXXXIX" "MMMDCCXL" "MMMDCCXLI" "MMMDCCXLII" "MMMDCCXLIII" "MMMDCCXLIV" "MMMDCCXLV" "MMMDCCXLVI" "MMMDCCXLVII" "MMMDCCXLVIII" "MMMDCCXLIX" "MMMDCCL" "MMMDCCLI" "MMMDCCLII" "MMMDCCLIII" "MMMDCCLIV" "MMMDCCLV" "MMMDCCLVI" "MMMDCCLVII" "MMMDCCLVIII" "MMMDCCLIX" "MMMDCCLX" "MMMDCCLXI" "MMMDCCLXII" "MMMDCCLXIII" "MMMDCCLXIV" "MMMDCCLXV" "MMMDCCLXVI" "MMMDCCLXVII" "MMMDCCLXVIII" "MMMDCCLXIX" "MMMDCCLXX" "MMMDCCLXXI" "MMMDCCLXXII" "MMMDCCLXXIII" "MMMDCCLXXIV" "MMMDCCLXXV" "MMMDCCLXXVI" "MMMDCCLXXVII" "MMMDCCLXXVIII" "MMMDCCLXXIX" "MMMDCCLXXX" "MMMDCCLXXXI" "MMMDCCLXXXII" "MMMDCCLXXXIII" "MMMDCCLXXXIV" "MMMDCCLXXXV" "MMMDCCLXXXVI" "MMMDCCLXXXVII" "MMMDCCLXXXVIII" "MMMDCCLXXXIX" "MMMDCCXC" "MMMDCCXCI" "MMMDCCXCII" "MMMDCCXCIII" "MMMDCCXCIV" "MMMDCCXCV" "MMMDCCXCVI" "MMMDCCXCVII" "MMMDCCXCVIII" "MMMDCCXCIX" "MMMDCCC" "MMMDCCCI" "MMMDCCCII" "MMMDCCCIII" "MMMDCCCIV" "MMMDCCCV" "MMMDCCCVI" "MMMDCCCVII" "MMMDCCCVIII" "MMMDCCCIX" "MMMDCCCX" "MMMDCCCXI" "MMMDCCCXII" "MMMDCCCXIII" "MMMDCCCXIV" "MMMDCCCXV" "MMMDCCCXVI" "MMMDCCCXVII" "MMMDCCCXVIII" "MMMDCCCXIX" "MMMDCCCXX" "MMMDCCCXXI" "MMMDCCCXXII" "MMMDCCCXXIII" "MMMDCCCXXIV" "MMMDCCCXXV" "MMMDCCCXXVI" "MMMDCCCXXVII" "MMMDCCCXXVIII" "MMMDCCCXXIX" "MMMDCCCXXX" "MMMDCCCXXXI" "MMMDCCCXXXII" "MMMDCCCXXXIII" "MMMDCCCXXXIV" "MMMDCCCXXXV" "MMMDCCCXXXVI" "MMMDCCCXXXVII" "MMMDCCCXXXVIII" "MMMDCCCXXXIX" "MMMDCCCXL" "MMMDCCCXLI" "MMMDCCCXLII" "MMMDCCCXLIII" "MMMDCCCXLIV" "MMMDCCCXLV" "MMMDCCCXLVI" "MMMDCCCXLVII" "MMMDCCCXLVIII" "MMMDCCCXLIX" "MMMDCCCL" "MMMDCCCLI" "MMMDCCCLII" "MMMDCCCLIII" "MMMDCCCLIV" "MMMDCCCLV" "MMMDCCCLVI" "MMMDCCCLVII" "MMMDCCCLVIII" "MMMDCCCLIX" "MMMDCCCLX" "MMMDCCCLXI" "MMMDCCCLXII" "MMMDCCCLXIII" "MMMDCCCLXIV" "MMMDCCCLXV" "MMMDCCCLXVI" "MMMDCCCLXVII" "MMMDCCCLXVIII" "MMMDCCCLXIX" "MMMDCCCLXX" "MMMDCCCLXXI" "MMMDCCCLXXII" "MMMDCCCLXXIII" "MMMDCCCLXXIV" "MMMDCCCLXXV" "MMMDCCCLXXVI" "MMMDCCCLXXVII" "MMMDCCCLXXVIII" "MMMDCCCLXXIX" "MMMDCCCLXXX" "MMMDCCCLXXXI" "MMMDCCCLXXXII" "MMMDCCCLXXXIII" "MMMDCCCLXXXIV" "MMMDCCCLXXXV" "MMMDCCCLXXXVI" "MMMDCCCLXXXVII" "MMMDCCCLXXXVIII" "MMMDCCCLXXXIX" "MMMDCCCXC" "MMMDCCCXCI" "MMMDCCCXCII" "MMMDCCCXCIII" "MMMDCCCXCIV" "MMMDCCCXCV" "MMMDCCCXCVI" "MMMDCCCXCVII" "MMMDCCCXCVIII" "MMMDCCCXCIX" "MMMCM" "MMMCMI" "MMMCMII" "MMMCMIII" "MMMCMIV" "MMMCMV" "MMMCMVI" "MMMCMVII" "MMMCMVIII" "MMMCMIX" "MMMCMX" "MMMCMXI" "MMMCMXII" "MMMCMXIII" "MMMCMXIV" "MMMCMXV" "MMMCMXVI" "MMMCMXVII" "MMMCMXVIII" "MMMCMXIX" "MMMCMXX" "MMMCMXXI" "MMMCMXXII" "MMMCMXXIII" "MMMCMXXIV" "MMMCMXXV" "MMMCMXXVI" "MMMCMXXVII" "MMMCMXXVIII" "MMMCMXXIX" "MMMCMXXX" "MMMCMXXXI" "MMMCMXXXII" "MMMCMXXXIII" "MMMCMXXXIV" "MMMCMXXXV" "MMMCMXXXVI" "MMMCMXXXVII" "MMMCMXXXVIII" "MMMCMXXXIX" "MMMCMXL" "MMMCMXLI" "MMMCMXLII" "MMMCMXLIII" "MMMCMXLIV" "MMMCMXLV" "MMMCMXLVI" "MMMCMXLVII" "MMMCMXLVIII" "MMMCMXLIX" "MMMCML" "MMMCMLI" "MMMCMLII" "MMMCMLIII" "MMMCMLIV" "MMMCMLV" "MMMCMLVI" "MMMCMLVII" "MMMCMLVIII" "MMMCMLIX" "MMMCMLX" "MMMCMLXI" "MMMCMLXII" "MMMCMLXIII" "MMMCMLXIV" "MMMCMLXV" "MMMCMLXVI" "MMMCMLXVII" "MMMCMLXVIII" "MMMCMLXIX" "MMMCMLXX" "MMMCMLXXI" "MMMCMLXXII" "MMMCMLXXIII" "MMMCMLXXIV" "MMMCMLXXV" "MMMCMLXXVI" "MMMCMLXXVII" "MMMCMLXXVIII" "MMMCMLXXIX" "MMMCMLXXX" "MMMCMLXXXI" "MMMCMLXXXII" "MMMCMLXXXIII" "MMMCMLXXXIV" "MMMCMLXXXV" "MMMCMLXXXVI" "MMMCMLXXXVII" "MMMCMLXXXVIII" "MMMCMLXXXIX" "MMMCMXC" "MMMCMXCI" "MMMCMXCII" "MMMCMXCIII" "MMMCMXCIV" "MMMCMXCV" "MMMCMXCVI" "MMMCMXCVII" "MMMCMXCVIII" "MMMCMXCIX"))).
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/roman-numerals.llf C1DC84A7>
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FORMAT.R.1 (LOOP FOR I FROM 2 TO 36 FOR S = (FORMAT NIL "~~~dR" I) NCONC (LOOP FOR X = (LET ((BOUND (ASH 1 (+ 2 (RANDOM 40))))) (- (RANDOM (* BOUND 2)) BOUND)) FOR S1 = (FORMAT NIL S X) FOR S2 = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING X :BASE I :READABLY NIL)) REPEAT 100 UNLESS (STRING= S1 S2) COLLECT (LIST I X S1 S2))) NIL)
;; Loading (DEFTEST FORMATTER.R.1 (LOOP FOR I FROM 2 TO 36 FOR S = (FORMAT NIL "~~~dR" I) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA S)))) NCONC (LOOP FOR X = (LET ((BOUND (ASH 1 (+ 2 (RANDOM 40))))) (- (RANDOM (* BOUND 2)) BOUND)) FOR S1 = (FORMATTER-CALL-TO-STRING FN X) FOR S2 = (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING X :BASE I :READABLY NIL)) REPEAT 100 UNLESS (STRING= S1 S2) COLLECT (LIST I X S1 S2))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.R.2 "~2r" (14) "1110")
;; Loading (DEF-FORMAT-TEST FORMAT.R.3 "~3r" (29) "1002")
;; Loading (DEFTEST FORMAT.R.4 (LOOP FOR BASE FROM 2 TO 36 NCONC (LOOP FOR MINCOL FROM 0 TO 20 FOR FMT = (FORMAT NIL "~~~D,~DR" BASE MINCOL) FOR S = (FORMAT NIL FMT BASE) UNLESS (IF (<= MINCOL 2) (STRING= S "10") (STRING= (CONCATENATE (QUOTE STRING) (MAKE-STRING (- MINCOL 2) :INITIAL-ELEMENT #\Space) "10") S)) COLLECT (LIST BASE MINCOL S))) NIL)
;; Loading (DEFTEST FORMATTER.R.4 (LOOP FOR BASE FROM 2 TO 36 NCONC (LOOP FOR MINCOL FROM 0 TO 20 FOR FMT = (FORMAT NIL "~~~D,~DR" BASE MINCOL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S = (FORMATTER-CALL-TO-STRING FN BASE) UNLESS (IF (<= MINCOL 2) (STRING= S "10") (STRING= (CONCATENATE (QUOTE STRING) (MAKE-STRING (- MINCOL 2) :INITIAL-ELEMENT #\Space) "10") S)) COLLECT (LIST BASE MINCOL S))) NIL)
;; Loading (DEFTEST FORMAT.R.5 (LOOP FOR BASE FROM 2 TO 36 NCONC (LOOP FOR MINCOL FROM 0 TO 20 FOR FMT = (FORMAT NIL "~~~D,~D,'*r" BASE MINCOL) FOR S = (FORMAT NIL FMT BASE) UNLESS (IF (<= MINCOL 2) (STRING= S "10") (STRING= (CONCATENATE (QUOTE STRING) (MAKE-STRING (- MINCOL 2) :INITIAL-ELEMENT #\*) "10") S)) COLLECT (LIST BASE MINCOL S))) NIL)
;; Loading (DEFTEST FORMATTER.R.5 (LOOP FOR BASE FROM 2 TO 36 NCONC (LOOP FOR MINCOL FROM 0 TO 20 FOR FMT = (FORMAT NIL "~~~D,~D,'*r" BASE MINCOL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S = (FORMATTER-CALL-TO-STRING FN BASE) UNLESS (IF (<= MINCOL 2) (STRING= S "10") (STRING= (CONCATENATE (QUOTE STRING) (MAKE-STRING (- MINCOL 2) :INITIAL-ELEMENT #\*) "10") S)) COLLECT (LIST BASE MINCOL S))) NIL)
;; Loading (DEFTEST FORMAT.R.6 (LOOP FOR BASE FROM 2 TO 36 FOR S = (FORMAT NIL "~vr" BASE (1+ BASE)) UNLESS (STRING= S "11") COLLECT (LIST BASE S)) NIL)
;; Loading (DEFTEST FORMATTER.R.6 (LET ((FN (FORMATTER "~vr"))) (LOOP FOR BASE FROM 2 TO 36 FOR S = (FORMATTER-CALL-TO-STRING FN BASE (1+ BASE)) UNLESS (STRING= S "11") COLLECT (LIST BASE S))) NIL)
;; Loading (DEFPARAMETER *ENGLISH-NUMBER-NAMES* (QUOTE ("zero" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" "ten" "eleven" "twelve" "thirteen" "fourteen" "fifteen" "sixteen" "seventeen" "eighteen" "nineteen" "twenty" "twenty-one" "twenty-two" "twenty-three" "twenty-four" "twenty-five" "twenty-six" "twenty-seven" "twenty-eight" "twenty-nine" "thirty" "thirty-one" "thirty-two" "thirty-three" "thirty-four" "thirty-five" "thirty-six" "thirty-seven" "thirty-eight" "thirty-nine" "forty" "forty-one" "forty-two" "forty-three" "forty-four" "forty-five" "forty-six" "forty-seven" "forty-eight" "forty-nine" "fifty" "fifty-one" "fifty-two" "fifty-three" "fifty-four" "fifty-five" "fifty-six" "fifty-seven" "fifty-eight" "fifty-nine" "sixty" "sixty-one" "sixty-two" "sixty-three" "sixty-four" "sixty-five" "sixty-six" "sixty-seven" "sixty-eight" "sixty-nine" "seventy" "seventy-one" "seventy-two" "seventy-three" "seventy-four" "seventy-five" "seventy-six" "seventy-seven" "seventy-eight" "seventy-nine" "eighty" "eighty-one" "eighty-two" "eighty-three" "eighty-four" "eighty-five" "eighty-six" "eighty-seven" "eighty-eight" "eighty-nine" "ninety" "ninety-one" "ninety-two" "ninety-three" "ninety-four" "ninety-five" "ninety-six" "ninety-seven" "ninety-eight" "ninety-nine" "one hundred")))
;; Loading (DEFTEST FORMAT.R.7 (LOOP FOR I FROM 0 TO 100 FOR S1 = (FORMAT NIL "~r" I) FOR S2 IN *ENGLISH-NUMBER-NAMES* UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2)) NIL)
;; Loading (DEFTEST FORMATTER.R.7 (LET ((FN (FORMATTER "~r"))) (LOOP FOR I FROM 0 TO 100 FOR S1 = (FORMATTER-CALL-TO-STRING FN I) FOR S2 IN *ENGLISH-NUMBER-NAMES* UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2))) NIL)
;; Loading (DEFTEST FORMAT.R.7A (LOOP FOR I FROM 1 TO 100 FOR S1 = (FORMAT NIL "~r" (- I)) FOR S2 IN (CDR *ENGLISH-NUMBER-NAMES*) FOR S3 = (CONCATENATE (QUOTE STRING) "negative " S2) FOR S4 = (CONCATENATE (QUOTE STRING) "minus " S2) UNLESS (OR (STRING= S1 S3) (STRING= S1 S4)) COLLECT (LIST I S1 S3 S4)) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.R.8 "~vr" (NIL 5) "five")
;; Loading (DEF-FORMAT-TEST FORMAT.R.9 "~#r" (4 NIL NIL) "11" 2)
;; Loading (DEFTEST FORMAT.R.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-RADIX* T)) (FORMAT NIL "~10r" 123))) "123")
;; Loading (DEFTEST FORMATTER.R.10 (LET ((FN (FORMATTER "~10r"))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-RADIX* T)) (VALUES (FORMAT NIL FN 123) (FORMATTER-CALL-TO-STRING FN 123))))) "123" "123")
;; Loading (DEF-FORMAT-TEST FORMAT.R.11 "~8@R" (65) "+101")
;; Loading (DEF-FORMAT-TEST FORMAT.R.12 "~2:r" (126) "1,111,110")
;; Loading (DEF-FORMAT-TEST FORMAT.R.13 "~3@:r" (50447) "+2,120,012,102")
;; Loading (DEFTEST FORMAT.R.14 (LOOP FOR I FROM 2 TO 36 FOR S = (FORMAT NIL "~~~d:R" I) NCONC (LOOP FOR X = (LET ((BOUND (ASH 1 (+ 2 (RANDOM 40))))) (- (RANDOM (* BOUND 2)) BOUND)) FOR S1 = (REMOVE #\, (FORMAT NIL S X)) FOR Y = (LET ((*READ-BASE* I)) (READ-FROM-STRING S1)) REPEAT 100 UNLESS (= X Y) COLLECT (LIST I X S1 Y))) NIL)
;; Loading (DEFTEST FORMAT.R.15 (LOOP FOR I = (+ 2 (RANDOM 35)) FOR INTERVAL = (1+ (RANDOM 20)) FOR COMMA = (LOOP FOR C = (RANDOM-FROM-SEQ +STANDARD-CHARS+) UNLESS (ALPHANUMERICP C) RETURN C) FOR S = (FORMAT NIL "~~~d,,,'~c,~d:R" I COMMA INTERVAL) FOR X = (LET ((BOUND (ASH 1 (+ 2 (RANDOM 40))))) (- (RANDOM (* BOUND 2)) BOUND)) FOR S1 = (REMOVE COMMA (FORMAT NIL S X)) FOR Y = (LET ((*READ-BASE* I)) (READ-FROM-STRING S1)) REPEAT 1000 UNLESS (OR (AND (EQL COMMA #\-) (< X 0)) (= X Y)) COLLECT (LIST I INTERVAL COMMA X S1 Y)) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.R.16 "~2,,,,1000000000000000000r" (17) "10001")
;; Loading (DEF-FORMAT-TEST FORMAT.R.17 "~8,10:@r" (175172) "  +526,104")
;; Loading (DEFPARAMETER *ENGLISH-ORDINAL-NAMES* (QUOTE ("zeroth" "first" "second" "third" "fourth" "fifth" "sixth" "seventh" "eighth" "ninth" "tenth" "eleventh" "twelfth" "thirteenth" "fourteenth" "fifteenth" "sixteenth" "seventeenth" "eighteenth" "nineteenth" "twentieth" "twenty-first" "twenty-second" "twenty-third" "twenty-fourth" "twenty-fifth" "twenty-sixth" "twenty-seventh" "twenty-eighth" "twenty-ninth" "thirtieth" "thirty-first" "thirty-second" "thirty-third" "thirty-fourth" "thirty-fifth" "thirty-sixth" "thirty-seventh" "thirty-eighth" "thirty-ninth" "fortieth" "forty-first" "forty-second" "forty-third" "forty-fourth" "forty-fifth" "forty-sixth" "forty-seventh" "forty-eighth" "forty-ninth" "fiftieth" "fifty-first" "fifty-second" "fifty-third" "fifty-fourth" "fifty-fifth" "fifty-sixth" "fifty-seventh" "fifty-eighth" "fifty-ninth" "sixtieth" "sixty-first" "sixty-second" "sixty-third" "sixty-fourth" "sixty-fifth" "sixty-sixth" "sixty-seventh" "sixty-eighth" "sixty-ninth" "seventieth" "seventy-first" "seventy-second" "seventy-third" "seventy-fourth" "seventy-fifth" "seventy-sixth" "seventy-seventh" "seventy-eighth" "seventy-ninth" "eightieth" "eighty-first" "eighty-second" "eighty-third" "eighty-fourth" "eighty-fifth" "eighty-sixth" "eighty-seventh" "eighty-eighth" "eighty-ninth" "ninetieth" "ninety-first" "ninety-second" "ninety-third" "ninety-fourth" "ninety-fifth" "ninety-sixth" "ninety-seventh" "ninety-eighth" "ninety-ninth" "one hundredth")))
;; Loading (DEFTEST FORMAT.R.18 (LOOP FOR I FROM 0 TO 100 FOR S1 = (FORMAT NIL "~:r" I) FOR S2 IN *ENGLISH-ORDINAL-NAMES* UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2)) NIL)
;; Loading (DEFTEST FORMATTER.R.18 (LET ((FN (FORMATTER "~:r"))) (LOOP FOR I FROM 0 TO 100 FOR S1 = (FORMATTER-CALL-TO-STRING FN I) FOR S2 IN *ENGLISH-ORDINAL-NAMES* UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2))) NIL)
;; Loading (DEFTEST FORMAT.R.18A (LOOP FOR I FROM 1 TO 100 FOR S1 = (FORMAT NIL "~:r" (- I)) FOR S2 IN (CDR *ENGLISH-ORDINAL-NAMES*) FOR S3 = (CONCATENATE (QUOTE STRING) "negative " S2) FOR S4 = (CONCATENATE (QUOTE STRING) "minus " S2) UNLESS (OR (STRING= S1 S3) (STRING= S1 S4)) COLLECT (LIST I S1 S3 S4)) NIL)
;; Loading (DEFTEST FORMAT.R.19 (LOOP FOR I FROM 1 FOR S1 IN *ROMAN-NUMERALS* FOR S2 = (FORMAT NIL "~@R" I) UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2)) NIL)
;; Loading (DEFTEST FORMATTER.R.19 (LET ((FN (FORMATTER "~@r"))) (LOOP FOR I FROM 1 FOR S1 IN *ROMAN-NUMERALS* FOR S2 = (FORMATTER-CALL-TO-STRING FN I) UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2))) NIL)
;; Loading (DEFUN OLD-ROMAN-NUMERAL (X) (ASSERT (TYPEP X (QUOTE (INTEGER 1)))) (LET ((N-M 0) (N-D 0) (N-C 0) (N-L 0) (N-X 0) (N-V 0)) (LOOP WHILE (>= X 1000) DO (INCF N-M) (DECF X 1000)) (WHEN (>= X 500) (INCF N-D) (DECF X 500)) (LOOP WHILE (>= X 100) DO (INCF N-C) (DECF X 100)) (WHEN (>= X 50) (INCF N-L) (DECF X 50)) (LOOP WHILE (>= X 10) DO (INCF N-X) (DECF X 10)) (WHEN (>= X 5) (INCF N-V) (DECF X 5)) (CONCATENATE (QUOTE STRING) (MAKE-STRING N-M :INITIAL-ELEMENT #\M) (MAKE-STRING N-D :INITIAL-ELEMENT #\D) (MAKE-STRING N-C :INITIAL-ELEMENT #\C) (MAKE-STRING N-L :INITIAL-ELEMENT #\L) (MAKE-STRING N-X :INITIAL-ELEMENT #\X) (MAKE-STRING N-V :INITIAL-ELEMENT #\V) (MAKE-STRING X :INITIAL-ELEMENT #\I))))
;; Loading (DEFTEST FORMAT.R.20 (LOOP FOR I FROM 1 TO 4999 FOR S1 = (FORMAT NIL "~:@r" I) FOR S2 = (OLD-ROMAN-NUMERAL I) UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2)) NIL)
;; Loading (DEFTEST FORMATTER.R.20 (LET ((FN (FORMATTER "~@:R"))) (LOOP FOR I FROM 1 TO 4999 FOR S1 = (FORMATTER-CALL-TO-STRING FN I) FOR S2 = (OLD-ROMAN-NUMERAL I) UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2))) NIL)
;; Loading (DEFTEST FORMAT.R.21 (LOOP FOR I FROM 1 TO 4999 FOR S1 = (FORMAT NIL "~:@r" I) FOR S2 = (FORMAT NIL "~@:R" I) UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2)) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.R.22 "~2,12,,'*:r" (93) "   1*011*101")
;; Loading (DEF-FORMAT-TEST FORMAT.R.23 "~3,14,'X,',:R" (928) "XXXXX1,021,101")
;; Loading (DEF-FORMAT-TEST FORMAT.R.24 "~10,vr" (NIL 12345) "12345")
;; Loading (DEFTEST FORMAT.R.25 (LOOP FOR I FROM 0 TO 5 FOR S = (FORMAT NIL "~10,vr" I 12345) UNLESS (STRING= S "12345") COLLECT (LIST I S)) NIL)
;; Loading (DEFTEST FORMATTER.R.25 (LET ((FN (FORMATTER "~10,vr"))) (LOOP FOR I FROM 0 TO 5 FOR S = (FORMATTER-CALL-TO-STRING FN I 12345) UNLESS (STRING= S "12345") COLLECT (LIST I S))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.R.26 "~10,#r" (12345 NIL NIL NIL NIL NIL) " 12345" 5)
;; Loading (DEF-FORMAT-TEST FORMAT.R.27 "~10,12,vr" (#\/ 123456789) "///123456789")
;; Loading (DEF-FORMAT-TEST FORMAT.R.28 "~10,,,v:r" (#\/ 123456789) "123/456/789")
;; Loading (DEF-FORMAT-TEST FORMAT.R.29 "~10,,,v:r" (NIL 123456789) "123,456,789")
;; Loading (DEF-FORMAT-TEST FORMAT.R.30 "~8,,,,v:R" (NIL 2739128) "12,345,670")
;; Loading (DEF-FORMAT-TEST FORMAT.R.31 "~8,,,,v:R" (2 2739128) "12,34,56,70")
;; Loading (DEF-FORMAT-TEST FORMAT.R.32 "~16,,,,#:r" (305419888 NIL NIL NIL) "1234,5670" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.R.33 "~16,,,,1:r" (305419888) "1,2,3,4,5,6,7,0")
;; Loading (DEF-FORMAT-TEST FORMAT.R.34 "~+10r" (12345) "12345")
;; Loading (DEF-FORMAT-TEST FORMAT.R.35 "~10,+8r" (12345) "   12345")
;; Loading (DEF-FORMAT-TEST FORMAT.R.36 "~10,0r" (12345) "12345")
;; Loading (DEF-FORMAT-TEST FORMAT.R.37 "~10,-1r" (12345) "12345")
;; Loading (DEF-FORMAT-TEST FORMAT.R.38 "~10,-1000000000000000r" (12345) "12345")
;; Loading (DEFTEST FORMAT.R.39 (LET ((FN (FORMATTER "~v,v,v,v,vr"))) (LOOP FOR RADIX = (+ 2 (RANDOM 35)) FOR MINCOL = (AND (COIN) (RANDOM 50)) FOR PADCHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMACHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMAINT = (AND (COIN) (1+ (RANDOM 10))) FOR K = (ASH 1 (+ 2 (RANDOM 30))) FOR X = (- (RANDOM (+ K K)) K) FOR FMT = (CONCATENATE (QUOTE STRING) (FORMAT NIL "~~~d," RADIX) (IF MINCOL (FORMAT NIL "~d," MINCOL) ",") (IF PADCHAR (FORMAT NIL "'~c," PADCHAR) ",") (IF COMMACHAR (FORMAT NIL "'~c," COMMACHAR) ",") (IF COMMAINT (FORMAT NIL "~dr" COMMAINT) "r")) FOR S1 = (FORMAT NIL FMT X) FOR S2 = (FORMAT NIL "~v,v,v,v,vr" RADIX MINCOL PADCHAR COMMACHAR COMMAINT X) FOR S3 = (FORMATTER-CALL-TO-STRING FN RADIX MINCOL PADCHAR COMMACHAR COMMAINT X) REPEAT 2000 UNLESS (AND (STRING= S1 S2) (STRING= S1 S3)) COLLECT (LIST RADIX MINCOL PADCHAR COMMACHAR COMMAINT FMT X S1 S2 S3))) NIL)
;; Loading (LOAD "format-d.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-d.lsp 81F8D067>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMAT.D.1 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~D" I) FOR J = (READ-FROM-STRING S1) REPEAT 1000 WHEN (OR (/= I J) (FIND #\. S1) (FIND #\+ S1) (FIND-IF (FUNCTION ALPHA-CHAR-P) S1)) COLLECT (LIST I S1 J))) NIL)
;; Loading (DEFTEST FORMATTER.D.1 (LET ((FN (FORMATTER "~D"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMATTER-CALL-TO-STRING FN I) FOR J = (READ-FROM-STRING S1) REPEAT 1000 WHEN (OR (/= I J) (FIND #\. S1) (FIND #\+ S1) (FIND-IF (FUNCTION ALPHA-CHAR-P) S1)) COLLECT (LIST I S1 J)))) NIL)
;; Loading (DEFTEST FORMAT.D.2 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@d" I) FOR J = (READ-FROM-STRING S1) REPEAT 1000 WHEN (OR (/= I J) (FIND #\. S1) (FIND-IF (FUNCTION ALPHA-CHAR-P) S1)) COLLECT (LIST I S1 J))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FORMATTER.D.2 (LET ((FN (FORMATTER "~@D"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMATTER-CALL-TO-STRING FN I) FOR J = (READ-FROM-STRING S1) REPEAT 1000 WHEN (OR (/= I J) (FIND #\. S1) (FIND-IF (FUNCTION ALPHA-CHAR-P) S1)) COLLECT (LIST I S1 J)))) NIL)
;; Loading (DEFTEST FORMAT.D.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~d" I) FOR S2 = (FORMAT NIL (FORMAT NIL "~~~dd" MINCOL) I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.D.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~d" I) FOR FORMAT-STRING = (FORMAT NIL "~~~dd" MINCOL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FORMAT-STRING)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.D.4 (WITH-STANDARD-IO-SYNTAX (LOOP WITH LIMIT = 10 WITH COUNT = 0 FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@D" I) FOR FORMAT-STRING = (FORMAT NIL "~~~d@d" MINCOL) FOR S2 = (FORMAT NIL FORMAT-STRING I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (IF (> (INCF COUNT) LIMIT) "Count limit exceeded" (LIST I MINCOL S1 FORMAT-STRING S2 POS)) WHILE (<= COUNT LIMIT))) NIL)
;; Loading (DEFTEST FORMATTER.D.4 (WITH-STANDARD-IO-SYNTAX (LOOP WITH LIMIT = 10 WITH COUNT = 0 FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@D" I) FOR FORMAT-STRING = (FORMAT NIL "~~~d@d" MINCOL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FORMAT-STRING)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (IF (> (INCF COUNT) LIMIT) "Count limit exceeded" (LIST I MINCOL S1 S2 POS)) WHILE (<= COUNT LIMIT))) NIL)
;; Loading (DEFTEST FORMAT.D.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~d" I) FOR S2 = (FORMAT NIL (FORMAT NIL "~~~d,'~cd" MINCOL PADCHAR) I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.D.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~d" I) FOR FORMAT-STRING = (FORMAT NIL "~~~d,'~cd" MINCOL PADCHAR) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FORMAT-STRING)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.D.6 (LET ((FN (FORMATTER "~v,vd"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~d" I) FOR S2 = (FORMAT NIL "~v,vD" MINCOL PADCHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (NOT (STRING= S2 S3)) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 S3 POS)))) NIL)
;; Loading (DEFTEST FORMAT.D.7 (LET ((FN (FORMATTER "~v,v@D"))) (WITH-STANDARD-IO-SYNTAX (LOOP WITH LIMIT = 10 WITH COUNT = 0 FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@d" I) FOR S2 = (FORMAT NIL "~v,v@d" MINCOL PADCHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (NOT (STRING= S2 S3)) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (IF (> (INCF COUNT) LIMIT) "Count limit exceeded" (LIST I MINCOL S1 S2 S3 POS)) WHILE (<= COUNT LIMIT)))) NIL)
;; Loading (DEFTEST FORMAT.D.8 (LET ((FN1 (FORMATTER "~d")) (FN2 (FORMATTER "~:d"))) (LOOP FOR I FROM -999 TO 999 FOR S1 = (FORMAT NIL "~d" I) FOR S2 = (FORMAT NIL "~:d" I) FOR S3 = (FORMATTER-CALL-TO-STRING FN1 I) FOR S4 = (FORMATTER-CALL-TO-STRING FN2 I) UNLESS (AND (STRING= S1 S2) (STRING= S1 S3) (STRING= S1 S4)) COLLECT (LIST I S1 S2 S3 S4))) NIL)
;; Loading (DEFTEST FORMAT.D.9 (LET ((FN1 (FORMATTER "~d")) (FN2 (FORMATTER "~:d"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = #\, FOR S1 = (FORMAT NIL "~d" I) FOR S2 = (FORMAT NIL "~:d" I) FOR S3 = (FORMATTER-CALL-TO-STRING FN1 I) FOR S4 = (FORMATTER-CALL-TO-STRING FN2 I) REPEAT 1000 UNLESS (AND (STRING= S1 S3) (STRING= S2 S4) (STRING= S1 (REMOVE COMMACHAR S2)) (NOT (EQL (ELT S2 0) COMMACHAR)) (OR (>= I 0) (NOT (EQL (ELT S2 1) COMMACHAR))) (LET ((LEN (LENGTH S2)) (CI+1 4)) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (FIND (ELT S2 I) "0123456789"))))) COLLECT (LIST X I COMMACHAR S1 S2 S3 S4)))) NIL)
;; Loading (DEFTEST FORMAT.D.10 (LET ((FN (FORMATTER "~,,v:d"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~d" I) FOR S2 = (FORMAT NIL "~,,v:d" COMMACHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR I) REPEAT 1000 UNLESS (AND (STRING= S2 S3) (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.D.11 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~d" I) FOR FORMAT-STRING = (FORMAT NIL "~~,,'~c:d" COMMACHAR) FOR S2 = (FORMAT NIL FORMAT-STRING I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2))) NIL)
;; Loading (DEFTEST FORMATTER.D.11 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~d" I) FOR FORMAT-STRING = (FORMAT NIL "~~,,'~c:d" COMMACHAR) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FORMAT-STRING)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 100 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2))) NIL)
;; Loading (DEFTEST FORMAT.D.12 (LET ((FN (FORMATTER "~,,v,v:d"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR COMMAINT = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~d" I) FOR S2 = (FORMAT NIL "~,,v,v:D" COMMACHAR COMMAINT I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR COMMAINT I) REPEAT 1000 UNLESS (AND (STRING= S2 S3) (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 (1+ COMMAINT)) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.D.13 (LET ((FN (FORMATTER "~,,v,v:@D"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR COMMAINT = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~@d" I) FOR S2 = (FORMAT NIL "~,,v,v:@d" COMMACHAR COMMAINT I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR COMMAINT I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (EQL (ELT S1 1) (ELT S2 1)) (LET ((LEN (LENGTH S2)) (CI+1 (1+ COMMAINT)) (J 1)) (LOOP FOR I FROM 2 BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.D.14 "~vD" (NIL 100) "100")
;; Loading (DEF-FORMAT-TEST FORMAT.D.15 "~6,vD" (NIL 100) "   100")
;; Loading (DEF-FORMAT-TEST FORMAT.D.16 "~,,v:d" (NIL 12345) "12,345")
;; Loading (DEF-FORMAT-TEST FORMAT.D.17 "~,,'*,v:d" (NIL 12345) "12*345")
;; Loading (DEFTEST FORMAT.D.18 (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~d" X) FOR S2 = (FORMAT NIL "~A" X) UNLESS (OR (INTEGERP X) (STRING= S1 S2)) COLLECT (LIST X S1 S2)) NIL)
;; Loading (DEFTEST FORMAT.D.19 (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~:d" X) FOR S2 = (FORMAT NIL "~A" X) UNLESS (OR (INTEGERP X) (STRING= S1 S2)) COLLECT (LIST X S1 S2)) NIL)
;; Loading (DEFTEST FORMAT.D.20 (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~@d" X) FOR S2 = (FORMAT NIL "~A" X) UNLESS (OR (INTEGERP X) (STRING= S1 S2)) COLLECT (LIST X S1 S2)) NIL)
;; Loading (DEFTEST FORMAT.D.21 (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~A" X) FOR S2 = (FORMAT NIL "~@:d" X) FOR S3 = (FORMAT NIL "~A" X) UNLESS (OR (INTEGERP X) (STRING= S1 S2) (NOT (STRING= S1 S3))) COLLECT (LIST X S1 S2)) NIL)
;; Loading (DEFTEST FORMAT.D.22 (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~#d" 12345 ARGS) COLLECT S)) "12345" "12345" "12345" "12345" "12345" " 12345" "  12345" "   12345" "    12345" "     12345" "      12345")
;; Loading (DEFTEST FORMATTER.D.22 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~#D"))) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM 12345 ARGS) ARGS))) COLLECT S))) "12345" "12345" "12345" "12345" "12345" " 12345" "  12345" "   12345" "    12345" "     12345" "      12345")
;; Loading (DEFTEST FORMAT.D.23 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~,,,#:D"))) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~,,,#:d" 1234567890 ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM 1234567890 ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "1,2,3,4,5,6,7,8,9,0" "12,34,56,78,90" "1,234,567,890" "12,3456,7890" "12345,67890" "1234,567890" "123,4567890" "12,34567890" "1,234567890" "1234567890" "1234567890")
;; Loading (DEFTEST FORMAT.D.24 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~,,,#:@d"))) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~,,,#@:D" 1234567890 ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM 1234567890 ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "+1,2,3,4,5,6,7,8,9,0" "+12,34,56,78,90" "+1,234,567,890" "+12,3456,7890" "+12345,67890" "+1234,567890" "+123,4567890" "+12,34567890" "+1,234567890" "+1234567890" "+1234567890")
;; Loading (DEF-FORMAT-TEST FORMAT.D.25 "~+10d" (1234) "      1234")
;; Loading (DEF-FORMAT-TEST FORMAT.D.26 "~+10@d" (1234) "     +1234")
;; Loading (DEF-FORMAT-TEST FORMAT.D.27 "~-1d" (1234) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.D.28 "~-1000000000000000000d" (1234) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.D.29 "~vd" ((1- MOST-NEGATIVE-FIXNUM) 1234) "1234")
;; Loading (DEFTEST FORMAT.D.30 (LET ((FN (FORMATTER "~v,v,v,vD"))) (LOOP FOR MINCOL = (AND (COIN) (RANDOM 50)) FOR PADCHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMACHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMAINT = (AND (COIN) (1+ (RANDOM 10))) FOR K = (ASH 1 (+ 2 (RANDOM 30))) FOR X = (- (RANDOM (+ K K)) K) FOR FMT = (CONCATENATE (QUOTE STRING) (IF MINCOL (FORMAT NIL "~~~d," MINCOL) "~,") (IF PADCHAR (FORMAT NIL "'~c," PADCHAR) ",") (IF COMMACHAR (FORMAT NIL "'~c," COMMACHAR) ",") (IF COMMAINT (FORMAT NIL "~dd" COMMAINT) "d")) FOR S1 = (FORMAT NIL FMT X) FOR S2 = (FORMAT NIL "~v,v,v,vd" MINCOL PADCHAR COMMACHAR COMMAINT X) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR COMMACHAR COMMAINT X) REPEAT 2000 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST MINCOL PADCHAR COMMACHAR COMMAINT FMT X S1 S2 S3))) NIL)
;; Loading (LOAD "format-b.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-b.lsp C1EFB357>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMAT.B.1 (LET ((FN (FORMATTER "~b"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~B" I) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR J = (LET ((*READ-BASE* 2)) (READ-FROM-STRING S1)) REPEAT 1000 WHEN (OR (NOT (STRING= S1 S2)) (/= I J) (FIND #\+ S1) (LOOP FOR C ACROSS S1 THEREIS (NOT (FIND C "-01")))) COLLECT (LIST I S1 J S2)))) NIL)
;; Loading (DEFTEST FORMAT.B.2 (LET ((FN (FORMATTER "~@b"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@b" I) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR J = (LET ((*READ-BASE* 2)) (READ-FROM-STRING S1)) REPEAT 1000 WHEN (OR (/= I J) (NOT (STRING= S1 S2)) (LOOP FOR C ACROSS S1 THEREIS (NOT (FIND C "-+01")))) COLLECT (LIST I S1 J S2)))) NIL)
;; Loading (DEFTEST FORMAT.B.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~b" I) FOR FMT = (FORMAT NIL "~~~db" MINCOL) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.B.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~b" I) FOR FMT = (FORMAT NIL "~~~db" MINCOL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.B.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@B" I) FOR FMT = (FORMAT NIL "~~~d@b" MINCOL) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.B.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@B" I) FOR FMT = (FORMAT NIL "~~~d@b" MINCOL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FORMAT.B.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~b" I) FOR FMT = (FORMAT NIL "~~~d,'~c~c" MINCOL PADCHAR (RANDOM-FROM-SEQ "bB")) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.B.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~b" I) FOR FMT = (FORMAT NIL "~~~d,'~c~c" MINCOL PADCHAR (RANDOM-FROM-SEQ "bB")) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.B.6 (LET ((FN (FORMATTER "~v,vB"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~b" I) FOR S2 = (FORMAT NIL "~v,vb" MINCOL PADCHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (NOT (STRING= S2 S3)) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 S3 POS)))) NIL)
;; Loading (DEFTEST FORMAT.B.7 (LET ((FN (FORMATTER "~v,v@B"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@B" I) FOR S2 = (FORMAT NIL "~v,v@b" MINCOL PADCHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (NOT (STRING= S2 S3)) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 S3 POS)))) NIL)
;; Loading (DEFTEST FORMAT.B.8 (LET ((FN (FORMATTER "~:B"))) (LOOP FOR I FROM -7 TO 7 FOR S1 = (FORMAT NIL "~b" I) FOR S2 = (FORMAT NIL "~:b" I) FOR S3 = (FORMATTER-CALL-TO-STRING FN I) UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST I S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.B.9 (LET ((FN (FORMATTER "~:b"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = #\, FOR S1 = (FORMAT NIL "~b" I) FOR S2 = (FORMAT NIL "~:B" I) FOR S3 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 1000 UNLESS (AND (STRING= S1 (REMOVE COMMACHAR S2)) (STRING= S2 S3) (NOT (EQL (ELT S2 0) COMMACHAR)) (OR (>= I 0) (NOT (EQL (ELT S2 1) COMMACHAR))) (LET ((LEN (LENGTH S2)) (CI+1 4)) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (FIND (ELT S2 I) "01"))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.B.10 (LET ((FN (FORMATTER "~,,v:B"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~b" I) FOR S2 = (FORMAT NIL "~,,v:b" COMMACHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (STRING= S2 S3) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.B.11 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~b" I) FOR FMT = (FORMAT NIL "~~,,'~c:~c" COMMACHAR (RANDOM-FROM-SEQ "bB")) FOR S2 = (FORMAT NIL FMT I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2))) NIL)
;; Loading (DEFTEST FORMATTER.B.11 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~b" I) FOR FMT = (FORMAT NIL "~~,,'~c:~c" COMMACHAR (RANDOM-FROM-SEQ "bB")) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 100 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2))) NIL)
;; Loading (DEFTEST FORMAT.B.12 (LET ((FN (FORMATTER "~,,V,V:b"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR COMMAINT = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~b" I) FOR S2 = (FORMAT NIL "~,,v,v:B" COMMACHAR COMMAINT I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR COMMAINT I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (STRING= S2 S3) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 (1+ COMMAINT)) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.B.13 (LET ((FN (FORMATTER "~,,V,V@:B"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR COMMAINT = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~@B" I) FOR S2 = (FORMAT NIL "~,,v,v:@b" COMMACHAR COMMAINT I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR COMMAINT I) REPEAT 1000 UNLESS (AND (STRING= S2 S3) (EQL (ELT S1 0) (ELT S2 0)) (EQL (ELT S1 1) (ELT S2 1)) (LET ((LEN (LENGTH S2)) (CI+1 (1+ COMMAINT)) (J 1)) (LOOP FOR I FROM 2 BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.B.14 "~vb" (NIL 52) "110100")
;; Loading (DEF-FORMAT-TEST FORMAT.B.15 "~6,vB" (NIL 4) "   100")
;; Loading (DEF-FORMAT-TEST FORMAT.B.16 "~,,v:b" (NIL 19) "10,011")
;; Loading (DEF-FORMAT-TEST FORMAT.B.17 "~,,'*,v:B" (NIL 22) "10*110")
;; Loading (DEFTEST FORMAT.B.18 (LET ((FN (FORMATTER "~b"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~b" X) FOR S2 = (LET ((*PRINT-BASE* 2)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S1 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.B.19 (LET ((FN (FORMATTER "~:b"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~:B" X) FOR S2 = (LET ((*PRINT-BASE* 2)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S1 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.B.20 (LET ((FN (FORMATTER "~@b"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~@b" X) FOR S2 = (LET ((*PRINT-BASE* 2)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S1 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.B.21 (LET ((FN (FORMATTER "~:@b"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (LET ((*PRINT-BASE* 2)) (FORMAT NIL "~A" X)) FOR S2 = (FORMAT NIL "~@:B" X) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) FOR S4 = (LET ((*PRINT-BASE* 2)) (FORMAT NIL "~A" X)) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S1 S3)) (STRING/= S1 S4)) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.B.22 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~#B")) (BV 25)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~#b" BV ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM BV ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "11001" "11001" "11001" "11001" "11001" " 11001" "  11001" "   11001" "    11001" "     11001" "      11001")
;; Loading (DEFTEST FORMAT.B.23 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~,,,#:b")) (BV 802)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~,,,#:B" BV ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM BV ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "1,1,0,0,1,0,0,0,1,0" "11,00,10,00,10" "1,100,100,010" "11,0010,0010" "11001,00010" "1100,100010" "110,0100010" "11,00100010" "1,100100010" "1100100010" "1100100010")
;; Loading (DEFTEST FORMAT.B.24 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~,,,#@:B")) (BV 802)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~,,,#@:B" BV ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM BV ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "+1,1,0,0,1,0,0,0,1,0" "+11,00,10,00,10" "+1,100,100,010" "+11,0010,0010" "+11001,00010" "+1100,100010" "+110,0100010" "+11,00100010" "+1,100100010" "+1100100010" "+1100100010")
;; Loading (DEF-FORMAT-TEST FORMAT.B.25 "~+10b" (13) "      1101")
;; Loading (DEF-FORMAT-TEST FORMAT.B.26 "~+10@B" (13) "     +1101")
;; Loading (DEF-FORMAT-TEST FORMAT.B.27 "~-1b" (13) "1101")
;; Loading (DEF-FORMAT-TEST FORMAT.B.28 "~-1000000000000000000B" (13) "1101")
;; Loading (DEF-FORMAT-TEST FORMAT.B.29 "~vb" ((1- MOST-NEGATIVE-FIXNUM) 13) "1101")
;; Loading (DEFTEST FORMAT.B.30 (LET ((FN (FORMATTER "~V,V,V,VB"))) (LOOP FOR MINCOL = (AND (COIN) (RANDOM 50)) FOR PADCHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMACHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMAINT = (AND (COIN) (1+ (RANDOM 10))) FOR K = (ASH 1 (+ 2 (RANDOM 30))) FOR X = (- (RANDOM (+ K K)) K) FOR FMT = (CONCATENATE (QUOTE STRING) (IF MINCOL (FORMAT NIL "~~~d," MINCOL) "~,") (IF PADCHAR (FORMAT NIL "'~c," PADCHAR) ",") (IF COMMACHAR (FORMAT NIL "'~c," COMMACHAR) ",") (IF COMMAINT (FORMAT NIL "~db" COMMAINT) "b")) FOR S1 = (FORMAT NIL FMT X) FOR S2 = (FORMAT NIL "~v,v,v,vb" MINCOL PADCHAR COMMACHAR COMMAINT X) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR COMMACHAR COMMAINT X) REPEAT 2000 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST MINCOL PADCHAR COMMACHAR COMMAINT FMT X S1 S2))) NIL)
;; Loading (LOAD "format-o.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-o.lsp 81E62297>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMAT.O.1 (LET ((FN (FORMATTER "~o"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~O" I) FOR J = (LET ((*READ-BASE* 8)) (READ-FROM-STRING S1)) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 1000 WHEN (OR (/= I J) (NOT (STRING= S1 S2)) (FIND #\. S1) (FIND #\+ S1) (FIND-IF (FUNCTION ALPHA-CHAR-P) S1)) COLLECT (LIST I S1 J S2)))) NIL)
;; Loading (DEFTEST FORMAT.O.2 (LET ((FN (FORMATTER "~@O"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@o" I) FOR J = (LET ((*READ-BASE* 8)) (READ-FROM-STRING S1)) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 1000 WHEN (OR (/= I J) (NOT (STRING= S1 S2)) (FIND #\. S1) (FIND-IF (FUNCTION ALPHA-CHAR-P) S1)) COLLECT (LIST I S1 J S2)))) NIL)
;; Loading (DEFTEST FORMAT.O.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~o" I) FOR FMT = (FORMAT NIL "~~~do" MINCOL) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.O.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~o" I) FOR FMT = (FORMAT NIL "~~~do" MINCOL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.O.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@O" I) FOR FMT = (FORMAT NIL "~~~d@o" MINCOL) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.O.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@O" I) FOR FMT = (FORMAT NIL "~~~d@o" MINCOL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.O.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~o" I) FOR FMT = (FORMAT NIL "~~~d,'~c~c" MINCOL PADCHAR (RANDOM-FROM-SEQ "oO")) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.O.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~o" I) FOR FMT = (FORMAT NIL "~~~d,'~c~c" MINCOL PADCHAR (RANDOM-FROM-SEQ "oO")) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.O.6 (LET ((FN (FORMATTER "~V,Vo"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~o" I) FOR S2 = (FORMAT NIL "~v,vO" MINCOL PADCHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (NOT (STRING= S2 S3)) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 S3 POS)))) NIL)
;; Loading (DEFTEST FORMAT.O.7 (LET ((FN (FORMATTER "~v,V@O"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@o" I) FOR S2 = (FORMAT NIL "~v,v@o" MINCOL PADCHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (NOT (STRING= S2 S3)) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 S3 POS)))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FORMAT.O.8 (LET ((FN (FORMATTER "~:O"))) (LOOP FOR I FROM -511 TO 511 FOR S1 = (FORMAT NIL "~o" I) FOR S2 = (FORMAT NIL "~:o" I) FOR S3 = (FORMATTER-CALL-TO-STRING FN I) UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST I S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.O.9 (LET ((FN (FORMATTER "~:o"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = #\, FOR S1 = (FORMAT NIL "~o" I) FOR S2 = (FORMAT NIL "~:O" I) FOR S3 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 1000 UNLESS (AND (STRING= S1 (REMOVE COMMACHAR S2)) (STRING= S2 S3) (NOT (EQL (ELT S2 0) COMMACHAR)) (OR (>= I 0) (NOT (EQL (ELT S2 1) COMMACHAR))) (LET ((LEN (LENGTH S2)) (CI+1 4)) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (FIND (ELT S2 I) "01234567"))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.O.10 (LET ((FN (FORMATTER "~,,v:o"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~o" I) FOR S2 = (FORMAT NIL "~,,v:o" COMMACHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (STRING= S2 S3) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.O.11 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~o" I) FOR FMT = (FORMAT NIL "~~,,'~c:~c" COMMACHAR (RANDOM-FROM-SEQ "oO")) FOR S2 = (FORMAT NIL FMT I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2))) NIL)
;; Loading (DEFTEST FORMATTER.O.11 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~o" I) FOR FMT = (FORMAT NIL "~~,,'~c:~c" COMMACHAR (RANDOM-FROM-SEQ "oO")) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 100 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2))) NIL)
;; Loading (DEFTEST FORMAT.O.12 (LET ((FN (FORMATTER "~,,V,v:O"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR COMMAINT = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~o" I) FOR S2 = (FORMAT NIL "~,,v,v:O" COMMACHAR COMMAINT I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR COMMAINT I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (STRING= S2 S3) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 (1+ COMMAINT)) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.O.13 (LET ((FN (FORMATTER "~,,v,V@:O"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR COMMAINT = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~@o" I) FOR S2 = (FORMAT NIL "~,,v,v:@o" COMMACHAR COMMAINT I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR COMMAINT I) REPEAT 1000 UNLESS (AND (STRING= S2 S3) (EQL (ELT S1 0) (ELT S2 0)) (EQL (ELT S1 1) (ELT S2 1)) (LET ((LEN (LENGTH S2)) (CI+1 (1+ COMMAINT)) (J 1)) (LOOP FOR I FROM 2 BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.O.14 "~vO" (NIL 64) "100")
;; Loading (DEF-FORMAT-TEST FORMAT.O.15 "~6,vO" (NIL 64) "   100")
;; Loading (DEF-FORMAT-TEST FORMAT.O.16 "~,,v:o" (NIL 5349) "12,345")
;; Loading (DEF-FORMAT-TEST FORMAT.O.17 "~,,'*,v:o" (NIL 5349) "12*345")
;; Loading (DEFTEST FORMAT.O.18 (LET ((FN (FORMATTER "~o"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~o" X) FOR S2 = (LET ((*PRINT-BASE* 8)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S2 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.O.19 (LET ((FN (FORMATTER "~:o"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~:o" X) FOR S2 = (LET ((*PRINT-BASE* 8)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S2 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.O.20 (LET ((FN (FORMATTER "~@o"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~@o" X) FOR S2 = (LET ((*PRINT-BASE* 8)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S2 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.O.21 (LET ((FN (FORMATTER "~:@o"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (LET ((*PRINT-BASE* 8)) (FORMAT NIL "~A" X)) FOR S2 = (FORMAT NIL "~@:o" X) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) FOR S4 = (LET ((*PRINT-BASE* 8)) (FORMAT NIL "~A" X)) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S2 S3)) (STRING/= S1 S4)) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.O.22 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~#o")) (N 5349)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~#o" N ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM N ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "12345" "12345" "12345" "12345" "12345" " 12345" "  12345" "   12345" "    12345" "     12345" "      12345")
;; Loading (DEFTEST FORMAT.O.23 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~,,,#:o")) (N 175304202)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~,,,#:o" N ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM N ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "1,2,3,4,5,6,7,0,1,2" "12,34,56,70,12" "1,234,567,012" "12,3456,7012" "12345,67012" "1234,567012" "123,4567012" "12,34567012" "1,234567012" "1234567012" "1234567012")
;; Loading (DEFTEST FORMAT.O.24 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~,,,#:@o")) (N 175304202)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~,,,#@:O" N ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM N ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "+1,2,3,4,5,6,7,0,1,2" "+12,34,56,70,12" "+1,234,567,012" "+12,3456,7012" "+12345,67012" "+1234,567012" "+123,4567012" "+12,34567012" "+1,234567012" "+1234567012" "+1234567012")
;; Loading (DEF-FORMAT-TEST FORMAT.O.25 "~+10o" (668) "      1234")
;; Loading (DEF-FORMAT-TEST FORMAT.O.26 "~+10@O" (668) "     +1234")
;; Loading (DEF-FORMAT-TEST FORMAT.O.27 "~-1O" (668) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.O.28 "~-1000000000000000000o" (668) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.O.29 "~vo" ((1- MOST-NEGATIVE-FIXNUM) 668) "1234")
;; Loading (DEFTEST FORMAT.O.30 (LET ((FN (FORMATTER "~v,v,v,vo"))) (LOOP FOR MINCOL = (AND (COIN) (RANDOM 50)) FOR PADCHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMACHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMAINT = (AND (COIN) (1+ (RANDOM 10))) FOR K = (ASH 1 (+ 2 (RANDOM 30))) FOR X = (- (RANDOM (+ K K)) K) FOR FMT = (CONCATENATE (QUOTE STRING) (IF MINCOL (FORMAT NIL "~~~d," MINCOL) "~,") (IF PADCHAR (FORMAT NIL "'~c," PADCHAR) ",") (IF COMMACHAR (FORMAT NIL "'~c," COMMACHAR) ",") (IF COMMAINT (FORMAT NIL "~do" COMMAINT) "o")) FOR S1 = (FORMAT NIL FMT X) FOR S2 = (FORMAT NIL "~v,v,v,vo" MINCOL PADCHAR COMMACHAR COMMAINT X) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR COMMACHAR COMMAINT X) REPEAT 2000 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST MINCOL PADCHAR COMMACHAR COMMAINT FMT X S1 S2 S3))) NIL)
;; Loading (LOAD "format-x.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-x.lsp C1DD2CC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMAT.X.1 (LET ((FN (FORMATTER "~x"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~X" I) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR J = (LET ((*READ-BASE* 16)) (READ-FROM-STRING S1)) REPEAT 1000 WHEN (OR (/= I J) (NOT (STRING= S1 S2)) (FIND #\. S1) (FIND #\+ S1) (LOOP FOR C ACROSS S1 THEREIS (AND (NOT (EQL C #\-)) (NOT (DIGIT-CHAR-P C 16))))) COLLECT (LIST I S1 J S2)))) NIL)
;; Loading (DEFTEST FORMAT.X.2 (LET ((FN (FORMATTER "~@X"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@x" I) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR J = (LET ((*READ-BASE* 16)) (READ-FROM-STRING S1)) REPEAT 1000 WHEN (OR (/= I J) (NOT (STRING= S1 S2)) (FIND #\. S1) (LOOP FOR C ACROSS S1 THEREIS (AND (NOT (FIND C "-+")) (NOT (DIGIT-CHAR-P C 16))))) COLLECT (LIST I S1 J S2)))) NIL)
;; Loading (DEFTEST FORMAT.X.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~x" I) FOR FMT = (FORMAT NIL "~~~d~c" MINCOL (RANDOM-FROM-SEQ "xX")) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.X.3 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~x" I) FOR FMT = (FORMAT NIL "~~~d~c" MINCOL (RANDOM-FROM-SEQ "xX")) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.X.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@X" I) FOR FMT = (FORMAT NIL "~~~d@~c" MINCOL (RANDOM-FROM-SEQ "xX")) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.X.4 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@X" I) FOR FMT = (FORMAT NIL "~~~d@~c" MINCOL (RANDOM-FROM-SEQ "xX")) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (NOT (EQL (POSITION #\Space S2 :TEST-NOT (FUNCTION EQL)) (- (LENGTH S2) (LENGTH S1))))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.X.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~x" I) FOR FMT = (FORMAT NIL "~~~d,'~c~c" MINCOL PADCHAR (RANDOM-FROM-SEQ "xX")) FOR S2 = (FORMAT NIL FMT I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMATTER.X.5 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~x" I) FOR FMT = (FORMAT NIL "~~~d,'~c~c" MINCOL PADCHAR (RANDOM-FROM-SEQ "xX")) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) FOR POS = (SEARCH S1 S2) REPEAT 100 WHEN (OR (NULL POS) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 POS))) NIL)
;; Loading (DEFTEST FORMAT.X.6 (LET ((FN (FORMATTER "~V,vx"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~x" I) FOR S2 = (FORMAT NIL "~v,vX" MINCOL PADCHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (NOT (STRING= S2 S3)) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 S3 POS)))) NIL)
;; Loading (DEFTEST FORMAT.X.7 (LET ((FN (FORMATTER "~v,V@X"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR MINCOL = (RANDOM 30) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR I = (- (RANDOM (+ X X)) X) FOR S1 = (FORMAT NIL "~@x" I) FOR S2 = (FORMAT NIL "~v,v@x" MINCOL PADCHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR I) FOR POS = (SEARCH S1 S2) REPEAT 1000 WHEN (OR (NULL POS) (NOT (STRING= S2 S3)) (AND (>= I 0) (NOT (EQL (ELT S1 0) #\+))) (AND (> MINCOL (LENGTH S1)) (OR (/= (LENGTH S2) MINCOL) (FIND PADCHAR S2 :END (- (LENGTH S2) (LENGTH S1)) :TEST-NOT (FUNCTION EQL))))) COLLECT (LIST I MINCOL S1 S2 S3 POS)))) NIL)
;; Loading (DEFTEST FORMAT.X.8 (LET ((FN (FORMATTER "~:X"))) (LOOP FOR I FROM -999 TO 999 FOR S1 = (FORMAT NIL "~x" I) FOR S2 = (FORMAT NIL "~:x" I) FOR S3 = (FORMATTER-CALL-TO-STRING FN I) UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST I S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.X.9 (LET ((FN (FORMATTER "~:x"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = #\, FOR S1 = (FORMAT NIL "~x" I) FOR S2 = (FORMAT NIL "~:X" I) FOR S3 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 1000 UNLESS (AND (STRING= S1 (REMOVE COMMACHAR S2)) (STRING= S2 S3) (NOT (EQL (ELT S2 0) COMMACHAR)) (OR (>= I 0) (NOT (EQL (ELT S2 1) COMMACHAR))) (LET ((LEN (LENGTH S2)) (CI+1 4)) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (FIND (ELT S2 I) "0123456789ABCDEF" :TEST (FUNCTION CHAR-EQUAL)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.X.10 (LET ((FN (FORMATTER "~,,V:x"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~x" I) FOR S2 = (FORMAT NIL "~,,v:X" COMMACHAR I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (STRING= S2 S3) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FORMAT.X.11 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~x" I) FOR FMT = (FORMAT NIL "~~,,'~c:~c" COMMACHAR (RANDOM-FROM-SEQ "xX")) FOR S2 = (FORMAT NIL FMT I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2))) NIL)
;; Loading (DEFTEST FORMATTER.X.11 (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR S1 = (FORMAT NIL "~x" I) FOR FMT = (FORMAT NIL "~~,,'~c:~c" COMMACHAR (RANDOM-FROM-SEQ "xX")) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN I) REPEAT 100 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 4) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2))) NIL)
;; Loading (DEFTEST FORMAT.X.12 (LET ((FN (FORMATTER "~,,v,v:X"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR COMMAINT = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~x" I) FOR S2 = (FORMAT NIL "~,,v,v:X" COMMACHAR COMMAINT I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR COMMAINT I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (STRING= S2 S3) (IF (< I 0) (EQL (ELT S1 1) (ELT S2 1)) T) (LET ((LEN (LENGTH S2)) (CI+1 (1+ COMMAINT)) (J (IF (< I 0) 1 0))) (LOOP FOR I FROM (IF (< I 0) 2 1) BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEFTEST FORMAT.X.13 (LET ((FN (FORMATTER "~,,v,V:@x"))) (WITH-STANDARD-IO-SYNTAX (LOOP FOR X = (ASH 1 (+ 2 (RANDOM 80))) FOR I = (- (RANDOM (+ X X)) X) FOR COMMACHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR COMMAINT = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~@x" I) FOR S2 = (FORMAT NIL "~,,v,v:@x" COMMACHAR COMMAINT I) FOR S3 = (FORMATTER-CALL-TO-STRING FN COMMACHAR COMMAINT I) REPEAT 1000 UNLESS (AND (EQL (ELT S1 0) (ELT S2 0)) (EQL (ELT S1 1) (ELT S2 1)) (STRING= S2 S3) (LET ((LEN (LENGTH S2)) (CI+1 (1+ COMMAINT)) (J 1)) (LOOP FOR I FROM 2 BELOW LEN ALWAYS (IF (= (MOD (- LEN I) CI+1) 0) (EQL (ELT S2 I) COMMACHAR) (EQL (ELT S1 (INCF J)) (ELT S2 I)))))) COLLECT (LIST X I COMMACHAR S1 S2 S3)))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.X.14 "~vx" (NIL 256) "100")
;; Loading (DEF-FORMAT-TEST FORMAT.X.15 "~6,vX" (NIL 256) "   100")
;; Loading (DEF-FORMAT-TEST FORMAT.X.16 "~,,v:x" (NIL 74565) "12,345")
;; Loading (DEF-FORMAT-TEST FORMAT.X.17 "~,,'*,v:x" (NIL 74565) "12*345")
;; Loading (DEFTEST FORMAT.X.18 (LET ((FN (FORMATTER "~x"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~x" X) FOR S2 = (LET ((*PRINT-BASE* 16)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S2 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.X.19 (LET ((FN (FORMATTER "~:x"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~:x" X) FOR S2 = (LET ((*PRINT-BASE* 16)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S2 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.X.20 (LET ((FN (FORMATTER "~@x"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (FORMAT NIL "~@x" X) FOR S2 = (LET ((*PRINT-BASE* 16)) (FORMAT NIL "~A" X)) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (INTEGERP X) (AND (STRING= S1 S2) (STRING= S2 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.X.21 (LET ((FN (FORMATTER "~:@x"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S1 = (LET ((*PRINT-BASE* 16)) (FORMAT NIL "~A" X)) FOR S2 = (FORMAT NIL "~@:x" X) FOR S3 = (FORMATTER-CALL-TO-STRING FN X) FOR S4 = (LET ((*PRINT-BASE* 16)) (FORMAT NIL "~A" X)) UNLESS (OR (STRING/= S1 S4) (INTEGERP X) (AND (STRING= S1 S2) (STRING= S2 S3))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.X.22 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~#X")) (N 111614)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~#x" N ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM N ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT (STRING-UPCASE S)))) "1B3FE" "1B3FE" "1B3FE" "1B3FE" "1B3FE" " 1B3FE" "  1B3FE" "   1B3FE" "    1B3FE" "     1B3FE" "      1B3FE")
;; Loading (DEFTEST FORMAT.X.23 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~,,,#:X")) (N 78187493520)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~,,,#:x" N ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM N ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "1,2,3,4,5,6,7,8,9,0" "12,34,56,78,90" "1,234,567,890" "12,3456,7890" "12345,67890" "1234,567890" "123,4567890" "12,34567890" "1,234567890" "1234567890" "1234567890")
;; Loading (DEFTEST FORMAT.X.24 (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~,,,#@:X")) (N 78187493520)) (LOOP FOR I FROM 0 TO 10 FOR ARGS = (MAKE-LIST I) FOR S = (APPLY (FUNCTION FORMAT) NIL "~,,,#@:X" N ARGS) FOR S2 = (WITH-OUTPUT-TO-STRING (STREAM) (ASSERT (EQUAL (APPLY FN STREAM N ARGS) ARGS))) DO (ASSERT (STRING= S S2)) COLLECT S))) "+1,2,3,4,5,6,7,8,9,0" "+12,34,56,78,90" "+1,234,567,890" "+12,3456,7890" "+12345,67890" "+1234,567890" "+123,4567890" "+12,34567890" "+1,234567890" "+1234567890" "+1234567890")
;; Loading (DEF-FORMAT-TEST FORMAT.X.25 "~+10x" (4660) "      1234")
;; Loading (DEF-FORMAT-TEST FORMAT.X.26 "~+10@X" (4660) "     +1234")
;; Loading (DEF-FORMAT-TEST FORMAT.X.27 "~-1X" (4660) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.X.28 "~-1000000000000000000x" (4660) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.X.29 "~vx" ((1- MOST-NEGATIVE-FIXNUM) 4660) "1234")
;; Loading (DEFTEST FORMAT.X.30 (LET ((FN (FORMATTER "~v,v,v,vx"))) (LOOP FOR MINCOL = (AND (COIN) (RANDOM 50)) FOR PADCHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMACHAR = (AND (COIN) (RANDOM-FROM-SEQ +STANDARD-CHARS+)) FOR COMMAINT = (AND (COIN) (1+ (RANDOM 10))) FOR K = (ASH 1 (+ 2 (RANDOM 30))) FOR X = (- (RANDOM (+ K K)) K) FOR FMT = (CONCATENATE (QUOTE STRING) (IF MINCOL (FORMAT NIL "~~~d," MINCOL) "~,") (IF PADCHAR (FORMAT NIL "'~c," PADCHAR) ",") (IF COMMACHAR (FORMAT NIL "'~c," COMMACHAR) ",") (IF COMMAINT (FORMAT NIL "~dx" COMMAINT) "x")) FOR S1 = (FORMAT NIL FMT X) FOR S2 = (FORMAT NIL "~v,v,v,vx" MINCOL PADCHAR COMMACHAR COMMAINT X) FOR S3 = (FORMATTER-CALL-TO-STRING FN MINCOL PADCHAR COMMACHAR COMMAINT X) REPEAT 2000 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST MINCOL PADCHAR COMMACHAR COMMAINT FMT X S1 S2 S3))) NIL)
;; Loading (LOAD "format-f.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-f.lsp 81D60DB7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMAT.F.1 (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~F"))) (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR X IN (QUOTE (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~f" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (PRIN1-TO-STRING X)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S1 S2) (STRING= S1 S3)) COLLECT (LIST X TYPE S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.F.2 (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~f"))) (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR X = (EXPT (COERCE 10 TYPE) (- (RANDOM 10.0) 3)) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~f" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (PRIN1-TO-STRING X)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) REPEAT 1000 WHEN (AND (<= 1/1000 X) (< X 10000000) (OR (NOT (STRING= S1 S2)) (NOT (STRING= S1 S3)))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.F.3 (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~F"))) (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR X = (- (EXPT (COERCE 10 TYPE) (- (RANDOM 10.0) 3))) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~f" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (PRIN1-TO-STRING X)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) REPEAT 1000 WHEN (AND (>= 1/1000 X) (> X -10000000) (NOT (AND (STRING= S1 S2) (STRING= S1 S3)))) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.F.4 (LET ((FN (FORMATTER "~3f"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1 1.0 1.0 1.0 1.0))) FOR S = (FORMAT NIL "~3f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "1.0") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.5 (LET ((FN (FORMATTER "~2f"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1 1.0 1.0 1.0 1.0))) FOR S = (FORMAT NIL "~2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "1.") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.6 (LET ((FN (FORMATTER "~4F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1 1.0 1.0 1.0 1.0))) FOR S = (FORMAT NIL "~4F" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S " 1.0") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.7 (LET ((FN (FORMATTER "~4@F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1 1.0 1.0 1.0 1.0))) FOR S = (FORMAT NIL "~4@f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "+1.0") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.8 (LET ((FN (FORMATTER "~3@F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1 1.0 1.0 1.0 1.0))) FOR S = (FORMAT NIL "~3@F" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "+1.") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.9 (LET ((FN (FORMATTER "~4f"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1 1.0 1.0 1.0 1.0))) FOR S = (FORMAT NIL "~4f" (- X)) FOR S2 = (FORMATTER-CALL-TO-STRING FN (- X)) UNLESS (AND (STRING= S "-1.0") (STRING= S S2)) COLLECT (LIST (- X) S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.10 (LET ((FN (FORMATTER "~3F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~3f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "0.5") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.11 (LET ((FN (FORMATTER "~4f"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~4f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S " 0.5") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.12 (LET ((FN (FORMATTER "~4,2F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~4,2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "0.50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.13 (LET ((FN (FORMATTER "~3,2F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~3,2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S ".50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.14 (LET ((FN (FORMATTER "~2,1F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~2,1f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S ".5") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.15 (LET ((FN (FORMATTER "~4,2@F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~4,2@f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "+.50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.16 (LET ((FN (FORMATTER "~2,2F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~2,2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S ".50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.17 (LET ((FN (FORMATTER "~,2F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~,2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "0.50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.18 (LET ((FN (FORMATTER "~,2F"))) (LOOP FOR XN IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR X = (- XN) FOR S = (FORMAT NIL "~,2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "-0.50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.19 (LET ((FN (FORMATTER "~4,2,-1F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (5 5.0 5.0 5.0 5.0))) FOR S = (FORMAT NIL "~4,2,-1f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "0.50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.20 (LET ((FN (FORMATTER "~4,2,0F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5 0.5))) FOR S = (FORMAT NIL "~4,2,0f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "0.50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.21 (LET ((FN (FORMATTER "~4,2,1f"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/20 0.05 0.05 0.05 0.05))) FOR S = (FORMAT NIL "~4,2,1f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "0.50") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.22 (LET ((FN (FORMATTER "~5,1,,'*F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1000 1000.0 1000.0 1000.0 1000.0))) FOR S = (FORMAT NIL "~5,1,,'*f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "*****") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.23 (LET ((FN (FORMATTER "~5,1,,'*f"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (100 100.0 100.0 100.0 100.0))) FOR S = (FORMAT NIL "~5,1,,'*f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "100.0") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.24 (LET ((FN (FORMATTER "~4,0,,'*F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (100 100.0 100.0 100.0 100.0))) FOR S = (FORMAT NIL "~4,0,,'*f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "100.") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.25 (LET ((FN (FORMATTER "~1,1,,f"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (100 100.0 100.0 100.0 100.0))) FOR S = (FORMAT NIL "~1,1,,f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "100.0") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.26 (LET ((FN (FORMATTER "~10,1,,f"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (100 100.0 100.0 100.0 100.0))) FOR S = (FORMAT NIL "~10,1,,f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "     100.0") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.27 (LET ((FN (FORMATTER "~10,1,,,'*F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (100 100.0 100.0 100.0 100.0))) FOR S = (FORMAT NIL "~10,1,,,'*f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "*****100.0") (STRING= S S2)) COLLECT (LIST X S S2))) NIL)
;; Loading (DEFTEST FORMAT.F.28 (LET ((FN (FORMATTER "~VF"))) (LOOP FOR X = (RANDOM 100.0) FOR S1 = (FORMAT NIL "~f" X) FOR S2 = (FORMAT NIL "~vf" NIL X) FOR S3 = (FORMATTER-CALL-TO-STRING FN NIL X) REPEAT 100 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.F.29 (LET ((FN (FORMATTER "~,vf"))) (LOOP FOR X = (RANDOM 100.0) FOR S1 = (FORMAT NIL "~f" X) FOR S2 = (FORMAT NIL "~,vf" NIL X) FOR S3 = (FORMATTER-CALL-TO-STRING FN NIL X) REPEAT 100 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.F.30 (LET ((FN (FORMATTER "~,,Vf"))) (LOOP FOR X = (RANDOM 100.0) FOR S1 = (FORMAT NIL "~f" X) FOR S2 = (FORMAT NIL "~,,vf" NIL X) FOR S3 = (FORMATTER-CALL-TO-STRING FN NIL X) REPEAT 100 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.F.31 (LET ((FN (FORMATTER "~,,,vF"))) (LOOP FOR X = (RANDOM 100.0) FOR S1 = (FORMAT NIL "~f" X) FOR S2 = (FORMAT NIL "~,,,vf" NIL X) FOR S3 = (FORMATTER-CALL-TO-STRING FN NIL X) REPEAT 100 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST X S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.F.32 (LET ((FN (FORMATTER "~,,,,VF"))) (LOOP FOR X = (RANDOM 100.0) FOR S1 = (FORMAT NIL "~f" X) FOR S2 = (FORMAT NIL "~,,,,vf" NIL X) FOR S3 = (FORMATTER-CALL-TO-STRING FN NIL X) REPEAT 100 UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST X S1 S2 S3))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FORMAT.F.34 (WITH-STANDARD-IO-SYNTAX (LET ((*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SHORT-FLOAT))) (LOOP FOR I FROM (- 1 (ASH 1 13)) BELOW (ASH 1 13) FOR SF = (COERCE I (QUOTE SHORT-FLOAT)) FOR S = (FORMAT NIL "~f" SF) FOR I2 = (FLOOR (READ-FROM-STRING S)) UNLESS (OR (ZEROP I) (EQL I I2)) COLLECT (LIST I SF S I2)))) NIL)
;; Loading (DEFTEST FORMAT.F.35 (WITH-STANDARD-IO-SYNTAX (LET ((*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SINGLE-FLOAT))) (LOOP FOR I = (- (RANDOM (1- (ASH 1 25))) -1 (ASH 1 24)) FOR SF = (COERCE I (QUOTE SINGLE-FLOAT)) FOR S = (FORMAT NIL "~f" SF) FOR I2 = (FLOOR (READ-FROM-STRING S)) REPEAT 2000 UNLESS (OR (ZEROP I) (EQL I I2)) COLLECT (LIST I SF S I2)))) NIL)
;; Loading (DEFTEST FORMAT.F.36 (WITH-STANDARD-IO-SYNTAX (LET ((*READ-DEFAULT-FLOAT-FORMAT* (QUOTE DOUBLE-FLOAT))) (LOOP FOR I = (- (RANDOM (1- (ASH 1 51))) -1 (ASH 1 50)) FOR SF = (COERCE I (QUOTE DOUBLE-FLOAT)) FOR S = (FORMAT NIL "~f" SF) FOR I2 = (FLOOR (READ-FROM-STRING S)) REPEAT 2000 UNLESS (OR (ZEROP I) (EQL I I2)) COLLECT (LIST I SF S I2)))) NIL)
;; Loading (DEFTEST FORMAT.F.37 (WITH-STANDARD-IO-SYNTAX (LET ((*READ-DEFAULT-FLOAT-FORMAT* (QUOTE LONG-FLOAT))) (LOOP FOR I = (- (RANDOM (1- (ASH 1 51))) -1 (ASH 1 50)) FOR SF = (COERCE I (QUOTE LONG-FLOAT)) FOR S = (FORMAT NIL "~f" SF) FOR I2 = (FLOOR (READ-FROM-STRING S)) REPEAT 2000 UNLESS (OR (ZEROP I) (EQL I I2)) COLLECT (LIST I SF S I2)))) NIL)
;; Loading (DEFTEST FORMAT.F.38 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (WITH-STANDARD-IO-SYNTAX (LET ((*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SHORT-FLOAT)) (TOTAL 0) (LEN 0)) (LOOP FOR I FROM (- 1 (ASH 1 13)) BELOW (ASH 1 13) UNLESS (ZEROP I) NCONC (LOOP FOR SF = (COERCE I (QUOTE SHORT-FLOAT)) FOR W = (RANDOM 8) FOR D = (RANDOM 4) FOR S = (FORMAT NIL "~v,vf" W D SF) FOR I2 = (IGNORE-ERRORS (FLOOR (READ-FROM-STRING S))) REPEAT 5 UNLESS (EQL I I2) DO (INCF TOTAL) AND COLLECT (LIST I SF W D S I2)) WHEN (> TOTAL 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH)))))))) NIL)
;; Loading (DEFTEST FORMAT.F.39 (WITH-STANDARD-IO-SYNTAX (LET ((*READ-DEFAULT-FLOAT-FORMAT* (QUOTE SINGLE-FLOAT))) (LOOP FOR I = (- (RANDOM (1- (ASH 1 25))) -1 (ASH 1 24)) FOR SF = (COERCE I (QUOTE SINGLE-FLOAT)) FOR W = (AND (COIN) (RANDOM 16)) FOR D = (RANDOM 4) FOR S = (FORMAT NIL "~v,vf" W D SF) FOR I2 = (FLOOR (READ-FROM-STRING S)) REPEAT 2000 UNLESS (OR (ZEROP I) (EQL I I2)) COLLECT (LIST I SF W D S I2)))) NIL)
;; Loading (DEFTEST FORMAT.F.40 (WITH-STANDARD-IO-SYNTAX (LET ((*READ-DEFAULT-FLOAT-FORMAT* (QUOTE DOUBLE-FLOAT))) (LOOP FOR I = (- (RANDOM (1- (ASH 1 51))) -1 (ASH 1 50)) FOR SF = (COERCE I (QUOTE DOUBLE-FLOAT)) FOR W = (AND (COIN) (RANDOM 30)) FOR D = (RANDOM 6) FOR S = (FORMAT NIL "~v,vf" W D SF) FOR I2 = (FLOOR (READ-FROM-STRING S)) REPEAT 2000 UNLESS (OR (ZEROP I) (EQL I I2)) COLLECT (LIST I SF W D S I2)))) NIL)
;; Loading (DEFTEST FORMAT.F.41 (WITH-STANDARD-IO-SYNTAX (LET ((*READ-DEFAULT-FLOAT-FORMAT* (QUOTE LONG-FLOAT))) (LOOP FOR I = (- (RANDOM (1- (ASH 1 51))) -1 (ASH 1 50)) FOR SF = (COERCE I (QUOTE LONG-FLOAT)) FOR W = (AND (COIN) (RANDOM 30)) FOR D = (RANDOM 6) FOR S = (FORMAT NIL "~v,vf" W D SF) FOR I2 = (FLOOR (READ-FROM-STRING S)) REPEAT 2000 UNLESS (OR (ZEROP I) (EQL I I2)) COLLECT (LIST I SF W D S I2)))) NIL)
;; Loading (DEFTEST FORMAT.F.42 (LET ((CHARS +STANDARD-CHARS+)) (LOOP FOR K = (AND (COIN) (RANDOM 6)) FOR X = (RANDOM (/ (RANDOM-FROM-SEQ #(262112.0 4294967040.0 288230376151711744.0 288230376151711744.0)) (IF K (EXPT 10 K) 1))) FOR W = (AND (COIN) (RANDOM 30)) FOR D = (AND (COIN) (RANDOM 10)) FOR OVERFLOWCHAR = (AND (COIN) (RANDOM-FROM-SEQ CHARS)) FOR PADCHAR = (AND (COIN) (RANDOM-FROM-SEQ CHARS)) FOR F1 = (CONCATENATE (QUOTE STRING) "~" (IF W (FORMAT NIL "~d" W) "") "," (IF D (FORMAT NIL "~d" D) "") "," (IF K (FORMAT NIL "~d" K) "") "," (IF OVERFLOWCHAR (FORMAT NIL "'~c" OVERFLOWCHAR) "") "," (IF PADCHAR (FORMAT NIL "'~c" PADCHAR) "") (STRING (RANDOM-FROM-SEQ "fF"))) FOR S1 = (FORMAT NIL F1 X) FOR S2 = (FORMAT NIL "~v,v,v,v,vf" W D K OVERFLOWCHAR PADCHAR X) REPEAT 2000 UNLESS (STRING= S1 S2) COLLECT (LIST X W D K OVERFLOWCHAR PADCHAR F1 S1 S2))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.F.43 "~,,,,',f" (0.0) "0.0")
;; Loading (DEFTEST FORMAT.F.44 (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR X = 2312.981689 FOR C = (CODE-CHAR I) FOR F1 = (AND C (FORMAT NIL "~~,,,,'~cf" C)) FOR S1 = (AND C (IGNORE-ERRORS (FORMAT NIL F1 X))) FOR S2 = (AND C (FORMAT NIL "~,,,,vf" C X)) UNLESS (EQUAL S1 S2) COLLECT (LIST I C F1 S1 S2)) NIL)
;; Loading (LOAD "format-a.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-a.lsp C1CB3C07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.A.1 "~a" (NIL) "NIL")
;; Loading (DEFTEST FORMAT.A.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-CASE* :DOWNCASE)) (FORMAT NIL "~A" NIL))) "nil")
;; Loading (DEFTEST FORMATTER.A.2 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-CASE* :DOWNCASE)) (FORMATTER-CALL-TO-STRING (FORMATTER "~A") NIL))) "nil")
;; Loading (DEFTEST FORMAT.A.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-CASE* :CAPITALIZE)) (FORMAT NIL "~a" NIL))) "Nil")
;; Loading (DEFTEST FORMATTER.A.3 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-CASE* :CAPITALIZE)) (FORMATTER-CALL-TO-STRING (FORMATTER "~a") NIL))) "Nil")
;; Loading (DEF-FORMAT-TEST FORMAT.A.4 "~:a" (NIL) "()")
;; Loading (DEF-FORMAT-TEST FORMAT.A.5 "~:A" ((QUOTE (NIL))) "(NIL)")
;; Loading (DEF-FORMAT-TEST FORMAT.A.6 "~:A" (#(NIL)) "#(NIL)")
;; Loading (DEFTEST FORMAT.A.7 (LET ((FN (FORMATTER "~a"))) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S1 = (STRING C) FOR S2 = (FORMAT NIL "~a" S1) FOR S3 = (FORMATTER-CALL-TO-STRING FN S1) UNLESS (AND (STRING= S1 S2) (STRING= S2 S3)) COLLECT (LIST C S1 S2 S3))) NIL)
;; Loading (DEFTEST FORMAT.A.8 (LET ((FN (FORMATTER "~A"))) (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S1 = (AND C (STRING C)) FOR S2 = (AND C (FORMAT NIL "~A" S1)) FOR S3 = (AND C (FORMATTER-CALL-TO-STRING FN S1)) UNLESS (OR (NULL C) (STRING= S1 S2) (STRING= S2 S3)) DO (INCF COUNT) AND COLLECT (LIST C S1 S2 S3) WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH))) NIL)
;; Loading (DEFTEST FORMAT.A.9 (WITH-STANDARD-IO-SYNTAX (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR FMT = (FORMAT NIL "~~~d@a" I) FOR S = (FORMAT NIL FMT NIL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN NIL) DO (ASSERT (STRING= S S2)) COLLECT S))) "NIL" "NIL" "NIL" " NIL" "  NIL" "   NIL" "    NIL" "     NIL" "      NIL" "       NIL")
;; Loading (DEFTEST FORMAT.A.10 (WITH-STANDARD-IO-SYNTAX (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR FMT = (FORMAT NIL "~~~da" I) FOR S = (FORMAT NIL FMT NIL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN NIL) DO (ASSERT (STRING= S S2)) COLLECT S))) "NIL" "NIL" "NIL" "NIL " "NIL  " "NIL   " "NIL    " "NIL     " "NIL      " "NIL       ")
;; Loading (DEFTEST FORMAT.A.11 (WITH-STANDARD-IO-SYNTAX (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR FMT = (FORMAT NIL "~~~d@:A" I) FOR S = (FORMAT NIL FMT NIL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN NIL) DO (ASSERT (STRING= S S2)) COLLECT S))) "()" "()" " ()" "  ()" "   ()" "    ()" "     ()" "      ()" "       ()" "        ()")
;; Loading (DEFTEST FORMAT.A.12 (WITH-STANDARD-IO-SYNTAX (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR FMT = (FORMAT NIL "~~~d:a" I) FOR S = (FORMAT NIL FMT NIL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN NIL) DO (ASSERT (STRING= S S2)) COLLECT S))) "()" "()" "() " "()  " "()   " "()    " "()     " "()      " "()       " "()        ")
;; Loading (DEFTEST FORMAT.A.13 (WITH-STANDARD-IO-SYNTAX (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~V:a"))) (LOOP FOR I FROM 1 TO 10 FOR S = (FORMAT NIL "~v:A" I NIL) FOR S2 = (FORMATTER-CALL-TO-STRING FN I NIL) DO (ASSERT (STRING= S S2)) COLLECT S)))) "()" "()" "() " "()  " "()   " "()    " "()     " "()      " "()       " "()        ")
;; Loading (DEFTEST FORMAT.A.14 (WITH-STANDARD-IO-SYNTAX (APPLY (FUNCTION VALUES) (LET ((FN (FORMATTER "~V@:A"))) (LOOP FOR I FROM 1 TO 10 FOR S = (FORMAT NIL "~v:@a" I NIL) FOR S2 = (FORMATTER-CALL-TO-STRING FN I NIL) DO (ASSERT (STRING= S S2)) COLLECT S)))) "()" "()" " ()" "  ()" "   ()" "    ()" "     ()" "      ()" "       ()" "        ()")
;; Loading (DEF-FORMAT-TEST FORMAT.A.15 "~vA" (NIL NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.A.16 "~v:A" (NIL NIL) "()")
;; Loading (DEF-FORMAT-TEST FORMAT.A.17 "~@A" (NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.A.18 "~v@A" (NIL NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.A.19 "~v:@a" (NIL NIL) "()")
;; Loading (DEF-FORMAT-TEST FORMAT.A.20 "~v@:a" (NIL NIL) "()")
;; Loading (DEF-FORMAT-TEST FORMAT.A.21 "~3,1a" (NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.A.22 "~4,3a" (NIL) "NIL   ")
;; Loading (DEF-FORMAT-TEST FORMAT.A.23 "~3,3@a" (NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.A.24 "~4,4@a" (NIL) "    NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.A.25 "~5,3@a" (NIL) "   NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.A.26 "~5,3A" (NIL) "NIL   ")
;; Loading (DEF-FORMAT-TEST FORMAT.A.27 "~7,3@a" (NIL) "      NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.A.28 "~7,3A" (NIL) "NIL      ")
;; Loading (DEFTEST FORMAT.A.29 (LET ((FN (FORMATTER "~v,,2A"))) (LOOP FOR I FROM -4 TO 10 FOR S = (FORMAT NIL "~v,,2A" I "ABC") FOR S2 = (FORMATTER-CALL-TO-STRING FN I "ABC") DO (ASSERT (STRING= S S2)) COLLECT S)) ("ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC   " "ABC    " "ABC     " "ABC      " "ABC       "))
;; Loading (DEF-FORMAT-TEST FORMAT.A.30 "~3,,+2A" ("ABC") "ABC  ")
;; Loading (DEF-FORMAT-TEST FORMAT.A.31 "~3,,0A" ("ABC") "ABC")
;; Loading (DEF-FORMAT-TEST FORMAT.A.32 "~3,,-1A" ("ABC") "ABC")
;; Loading (DEF-FORMAT-TEST FORMAT.A.33 "~3,,0A" ("ABCD") "ABCD")
;; Loading (DEF-FORMAT-TEST FORMAT.A.34 "~3,,-1A" ("ABCD") "ABCD")
;; Loading (DEF-FORMAT-TEST FORMAT.A.35 "~4,,,'XA" ("AB") "ABXX")
;; Loading (DEF-FORMAT-TEST FORMAT.A.36 "~4,,,a" ("AB") "AB  ")
;; Loading (DEF-FORMAT-TEST FORMAT.A.37 "~4,,,'X@a" ("AB") "XXAB")
;; Loading (DEF-FORMAT-TEST FORMAT.A.38 "~4,,,@A" ("AB") "  AB")
;; Loading (DEF-FORMAT-TEST FORMAT.A.39 "~10,,,vA" (NIL "abcde") "abcde     ")
;; Loading (DEF-FORMAT-TEST FORMAT.A.40 "~10,,,v@A" (NIL "abcde") "     abcde")
;; Loading (DEF-FORMAT-TEST FORMAT.A.41 "~10,,,va" (#\* "abcde") "abcde*****")
;; Loading (DEF-FORMAT-TEST FORMAT.A.42 "~10,,,v@a" (#\* "abcde") "*****abcde")
;; Loading (DEF-FORMAT-TEST FORMAT.A.43 "~3,,vA" (NIL "ABC") "ABC")
;; Loading (DEFTEST FORMAT.A.44 (LET ((FN (FORMATTER "~3,,vA"))) (LOOP FOR I FROM 0 TO 6 FOR S = (FORMAT NIL "~3,,vA" I "ABC") FOR S2 = (FORMATTER-CALL-TO-STRING FN I "ABC") DO (ASSERT (STRING= S S2)) COLLECT S)) ("ABC" "ABC " "ABC  " "ABC   " "ABC    " "ABC     " "ABC      "))
;; Loading (DEFTEST FORMAT.A.44A (LET ((FN (FORMATTER "~3,,v@A"))) (LOOP FOR I FROM 0 TO 6 FOR S = (FORMAT NIL "~3,,v@A" I "ABC") FOR S2 = (FORMATTER-CALL-TO-STRING FN I "ABC") DO (ASSERT (STRING= S S2)) COLLECT S)) ("ABC" " ABC" "  ABC" "   ABC" "    ABC" "     ABC" "      ABC"))
;; Loading (DEF-FORMAT-TEST FORMAT.A.45 "~4,,va" (-1 "abcd") "abcd")
;; Loading (DEF-FORMAT-TEST FORMAT.A.46 "~5,vA" (NIL "abc") "abc  ")
;; Loading (DEF-FORMAT-TEST FORMAT.A.47 "~5,vA" (3 "abc") "abc   ")
;; Loading (DEF-FORMAT-TEST FORMAT.A.48 "~5,v@A" (3 "abc") "   abc")
;; Loading (DEF-FORMAT-TEST FORMAT.A.49 "~#A" ("abc" NIL NIL NIL) "abc " 3)
;; Loading (DEF-FORMAT-TEST FORMAT.A.50 "~#@a" ("abc" NIL NIL NIL NIL NIL) "   abc" 5)
;; Loading (DEF-FORMAT-TEST FORMAT.A.51 "~5,#a" ("abc" NIL NIL NIL) "abc    " 3)
;; Loading (DEF-FORMAT-TEST FORMAT.A.52 "~5,#@A" ("abc" NIL NIL NIL) "    abc" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.A.53 "~4,#A" ("abc" NIL NIL) "abc   " 2)
;; Loading (DEF-FORMAT-TEST FORMAT.A.54 "~4,#@A" ("abc" NIL NIL) "   abc" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.A.55 "~#,#A" ("abc" NIL NIL NIL) "abc    " 3)
;; Loading (DEF-FORMAT-TEST FORMAT.A.56 "~#,#@A" ("abc" NIL NIL NIL) "    abc" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.A.57 "~-100A" ("xyz") "xyz")
;; Loading (DEF-FORMAT-TEST FORMAT.A.58 "~-100000000000000000000a" ("xyz") "xyz")
;; Loading (LOAD "format-s.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-s.lsp C1EF9D17>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMAT.S.1 (LET ((*PRINT-READABLY* NIL) (*PRINT-CASE* :UPCASE)) (FORMAT NIL "~s" NIL)) "NIL")
;; Loading (DEFTEST FORMATTER.S.1 (LET ((*PRINT-READABLY* NIL) (*PRINT-CASE* :UPCASE)) (FORMATTER-CALL-TO-STRING (FORMATTER "~s") NIL)) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.2 "~:s" (NIL) "()")
;; Loading (DEFTEST FORMAT.S.3 (LET ((*PRINT-READABLY* NIL) (*PRINT-CASE* :UPCASE)) (FORMAT NIL "~:s" (QUOTE (NIL)))) "(NIL)")
;; Loading (DEFTEST FORMATTER.S.3 (LET ((*PRINT-READABLY* NIL) (*PRINT-CASE* :UPCASE)) (FORMATTER-CALL-TO-STRING (FORMATTER "~:s") (QUOTE (NIL)))) "(NIL)")
;; Loading (DEFTEST FORMAT.S.4 (LET ((*PRINT-READABLY* NIL) (*PRINT-CASE* :DOWNCASE)) (FORMAT NIL "~s" (QUOTE NIL))) "nil")
;; Loading (DEFTEST FORMATTER.S.4 (LET ((*PRINT-READABLY* NIL) (*PRINT-CASE* :DOWNCASE)) (FORMATTER-CALL-TO-STRING (FORMATTER "~s") (QUOTE NIL))) "nil")
;; Loading (DEFTEST FORMAT.S.5 (LET ((*PRINT-READABLY* NIL) (*PRINT-CASE* :CAPITALIZE)) (FORMAT NIL "~s" (QUOTE NIL))) "Nil")
;; Loading (DEFTEST FORMATTER.S.5 (LET ((*PRINT-READABLY* NIL) (*PRINT-CASE* :CAPITALIZE)) (FORMATTER-CALL-TO-STRING (FORMATTER "~s") (QUOTE NIL))) "Nil")
;; Loading (DEF-FORMAT-TEST FORMAT.S.6 "~:s" (#(NIL)) "#(NIL)")
;; Loading (DEFTEST FORMAT.S.7 (LET ((FN (FORMATTER "~S"))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (FORMAT NIL "~S" C) FOR S2 = (FORMATTER-CALL-TO-STRING FN C) FOR C2 = (READ-FROM-STRING S) UNLESS (AND (EQL C C2) (STRING= S S2)) COLLECT (LIST C S C2 S2))))) NIL)
;; Loading (DEFTEST FORMAT.S.8 (LET ((FN (FORMATTER "~s"))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (LOOP WITH COUNT = 0 FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S1 = (AND C (FORMAT NIL "#\\~:c" C)) FOR S2 = (AND C (FORMAT NIL "~S" C)) FOR S3 = (FORMATTER-CALL-TO-STRING FN C) UNLESS (OR (NULL C) (GRAPHIC-CHAR-P C) (AND (STRING= S1 S2) (STRING= S2 S3))) DO (INCF COUNT) AND COLLECT (LIST C S1 S2) WHEN (> COUNT 100) COLLECT "count limit exceeded" AND DO (LOOP-FINISH))))) NIL)
;; Loading (DEFTEST FORMAT.S.9 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR FMT = (FORMAT NIL "~~~d@s" I) FOR S = (FORMAT NIL FMT NIL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN NIL) DO (ASSERT (STRING= S S2)) COLLECT S)))) "NIL" "NIL" "NIL" " NIL" "  NIL" "   NIL" "    NIL" "     NIL" "      NIL" "       NIL")
;; Loading (DEFTEST FORMAT.S.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR FMT = (FORMAT NIL "~~~dS" I) FOR S = (FORMAT NIL FMT NIL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN NIL) DO (ASSERT (STRING= S S2)) COLLECT S)))) "NIL" "NIL" "NIL" "NIL " "NIL  " "NIL   " "NIL    " "NIL     " "NIL      " "NIL       ")
;; Loading (DEFTEST FORMAT.S.11 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR FMT = (FORMAT NIL "~~~d@:S" I) FOR S = (FORMAT NIL FMT NIL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN NIL) DO (ASSERT (STRING= S S2)) COLLECT S)))) "()" "()" " ()" "  ()" "   ()" "    ()" "     ()" "      ()" "       ()" "        ()")
;; Loading (DEFTEST FORMAT.S.12 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL)) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR FMT = (FORMAT NIL "~~~d:s" I) FOR S = (FORMAT NIL FMT NIL) FOR FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FORMATTER (SYSTEM.INTERNALS::BQ-COMMA FMT)))) FOR S2 = (FORMATTER-CALL-TO-STRING FN NIL) DO (ASSERT (STRING= S S2)) COLLECT S)))) "()" "()" "() " "()  " "()   " "()    " "()     " "()      " "()       " "()        ")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FORMAT.S.13 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~V:s"))) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR S = (FORMAT NIL "~v:S" I NIL) FOR S2 = (FORMATTER-CALL-TO-STRING FN I NIL) DO (ASSERT (STRING= S S2)) COLLECT S)))) "()" "()" "() " "()  " "()   " "()    " "()     " "()      " "()       " "()        ")
;; Loading (DEFTEST FORMAT.S.14 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~V@:s"))) (APPLY (FUNCTION VALUES) (LOOP FOR I FROM 1 TO 10 FOR S = (FORMAT NIL "~v:@s" I NIL) FOR S2 = (FORMATTER-CALL-TO-STRING FN I NIL) DO (ASSERT (STRING= S S2)) COLLECT S)))) "()" "()" " ()" "  ()" "   ()" "    ()" "     ()" "      ()" "       ()" "        ()")
;; Loading (DEF-FORMAT-TEST FORMAT.S.15 "~vS" (NIL NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.16 "~v:S" (NIL NIL) "()")
;; Loading (DEF-FORMAT-TEST FORMAT.S.17 "~@S" (NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.18 "~v@S" (NIL NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.19 "~v:@s" (NIL NIL) "()")
;; Loading (DEF-FORMAT-TEST FORMAT.S.20 "~v@:s" (NIL NIL) "()")
;; Loading (DEF-FORMAT-TEST FORMAT.S.21 "~3,1s" (NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.22 "~4,3s" (NIL) "NIL   ")
;; Loading (DEF-FORMAT-TEST FORMAT.S.23 "~3,3@s" (NIL) "NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.24 "~4,4@s" (NIL) "    NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.25 "~5,3@s" (NIL) "   NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.26 "~5,3S" (NIL) "NIL   ")
;; Loading (DEF-FORMAT-TEST FORMAT.S.27 "~7,3@s" (NIL) "      NIL")
;; Loading (DEF-FORMAT-TEST FORMAT.S.28 "~7,3S" (NIL) "NIL      ")
;; Loading (DEFTEST FORMAT.S.29 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (FN (FORMATTER "~V,,2s"))) (LOOP FOR I FROM -4 TO 10 FOR S = (FORMAT NIL "~v,,2S" I (QUOTE ABC)) FOR S2 = (FORMATTER-CALL-TO-STRING FN I (QUOTE ABC)) DO (ASSERT (STRING= S S2)) COLLECT S))) ("ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC  " "ABC   " "ABC    " "ABC     " "ABC      " "ABC       "))
;; Loading (DEF-FORMAT-TEST FORMAT.S.30 "~3,,+2S" ((QUOTE ABC)) "ABC  ")
;; Loading (DEF-FORMAT-TEST FORMAT.S.31 "~3,,0S" ((QUOTE ABC)) "ABC")
;; Loading (DEF-FORMAT-TEST FORMAT.S.32 "~3,,-1S" ((QUOTE ABC)) "ABC")
;; Loading (DEF-FORMAT-TEST FORMAT.S.33 "~3,,0S" ((QUOTE ABCD)) "ABCD")
;; Loading (DEF-FORMAT-TEST FORMAT.S.34 "~3,,-1S" ((QUOTE ABCD)) "ABCD")
;; Loading (DEF-FORMAT-TEST FORMAT.S.35 "~4,,,'XS" ((QUOTE AB)) "ABXX")
;; Loading (DEF-FORMAT-TEST FORMAT.S.36 "~4,,,s" ((QUOTE AB)) "AB  ")
;; Loading (DEF-FORMAT-TEST FORMAT.S.37 "~4,,,'X@s" ((QUOTE AB)) "XXAB")
;; Loading (DEF-FORMAT-TEST FORMAT.S.38 "~4,,,@S" ((QUOTE AB)) "  AB")
;; Loading (DEF-FORMAT-TEST FORMAT.S.39 "~10,,,vS" (NIL (QUOTE ABCDE)) "ABCDE     ")
;; Loading (DEF-FORMAT-TEST FORMAT.S.40 "~10,,,v@S" (NIL (QUOTE ABCDE)) "     ABCDE")
;; Loading (DEF-FORMAT-TEST FORMAT.S.41 "~10,,,vs" (#\* (QUOTE ABCDE)) "ABCDE*****")
;; Loading (DEF-FORMAT-TEST FORMAT.S.42 "~10,,,v@s" (#\* (QUOTE ABCDE)) "*****ABCDE")
;; Loading (DEF-FORMAT-TEST FORMAT.S.43 "~3,,vS" (NIL 246) "246")
;; Loading (DEFTEST FORMAT.S.44 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (FN (FORMATTER "~3,,vs"))) (LOOP FOR I FROM 0 TO 6 FOR S = (FORMAT NIL "~3,,vS" I (QUOTE ABC)) FOR S2 = (FORMATTER-CALL-TO-STRING FN I (QUOTE ABC)) DO (ASSERT (STRING= S S2)) COLLECT S))) ("ABC" "ABC " "ABC  " "ABC   " "ABC    " "ABC     " "ABC      "))
;; Loading (DEFTEST FORMAT.S.44A (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (FIND-PACKAGE :CL-TEST)) (FN (FORMATTER "~3,,V@S"))) (LOOP FOR I FROM 0 TO 6 FOR S = (FORMAT NIL "~3,,v@S" I (QUOTE ABC)) FOR S2 = (FORMATTER-CALL-TO-STRING FN I (QUOTE ABC)) DO (ASSERT (STRING= S S2)) COLLECT S))) ("ABC" " ABC" "  ABC" "   ABC" "    ABC" "     ABC" "      ABC"))
;; Loading (DEF-FORMAT-TEST FORMAT.S.45 "~4,,vs" (-1 1234) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.S.46 "~5,vS" (NIL 123) "123  ")
;; Loading (DEF-FORMAT-TEST FORMAT.S.47 "~5,vS" (3 456) "456   ")
;; Loading (DEF-FORMAT-TEST FORMAT.S.48 "~5,v@S" (3 789) "   789")
;; Loading (LOAD "format-underscore.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-underscore.lsp 81CBD567>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PPBLOCK-TEST FORMAT._.1 (PROGN (DOTIMES (I 2) (WRITE "A ") (PPRINT-NEWLINE :FILL)) (FORMAT T "B ~_") (DOTIMES (I 3) (WRITE "A ") (PPRINT-NEWLINE :FILL))) "A A B
A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT._.2 (PROGN (DOTIMES (I 2) (WRITE "A ") (PPRINT-NEWLINE :FILL)) (FORMAT T "B ~_") (DOTIMES (I 2) (WRITE "C ") (PPRINT-NEWLINE :FILL)) (FORMAT T "D ~_") (DOTIMES (I 3) (WRITE "A ") (PPRINT-NEWLINE :FILL))) "A A B
C C D
A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT._.3 (FORMAT T "A ~_A ~_A ~_A ~_") "A A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT._.4 (FORMAT T "A ~_A ~_A ~_A ~_") "A A A A " :MARGIN 10 :MISER 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT._.5 (FORMAT T "A ~_A ~_A ~_A ~_A ~_A ~_A ~_A ~_A ~_A ~_") "A A A A A A A A A A " :MARGIN 10 :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST FORMAT._.6 (DOTIMES (I 4) (FORMAT T "A             ~_")) "A
A
A
A
" :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT._.7 (FORMAT T "A ~_A ~_A ~_A ~_~%A ~_A ~_A ~_A ~_") "A
A
A
A

A
A
A
A
" :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT._.8 (PROGN (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (FORMAT T "A ~_A ~_A ~_A ~_")) (FORMAT T "~_") (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (FORMAT T "A ~_A ~_A ~_A ~_"))) "A A A A
A A A A " :MARGIN 10)
;; Loading (DEFTEST FORMAT._.9 (WITH-OUTPUT-TO-STRING (S) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* NIL)) (FORMAT S "A ~_A ~_A ~_A ~_A ~_")))) "A A A A A ")
;; Loading (DEFTEST FORMATTER._.9 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* NIL)) (FORMATTER-CALL-TO-STRING (FORMATTER "A ~_A ~_A ~_A ~_A ~_")))) "A A A A A ")
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.1 (FORMAT T "A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_") "A A A A A A A A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.2 (FORMAT T "A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_") "A A A A A A A A A A " :MARGIN 10 :MISER 0)
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.3 (FORMAT T "A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_") "A A A A A A A A A A " :MARGIN 10 :MISER 9)
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.4 (FORMAT T "A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_") "A
A
A
A
A
A
A
A
A
A
" :MARGIN 10 :MISER 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.5 (FORMAT T "A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_A ~@_") "A A A A A A A A A A " :MARGIN 10 :MISER 10 :PRETTY NIL)
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.6 (FORMAT T "~%A~@_") "
A
" :MARGIN 20 :MISER 20)
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.7 (FORMAT T "~@_A~%") "
A
" :MARGIN 20 :MISER 20)
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.8 (PROGN (FORMAT T "AAAA ~_") (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (FORMAT T "A ~@_A ~@_A ~@_A ~@_"))) "AAAA
A A A A " :MARGIN 10 :MISER 8)
;; Loading (DEF-PPBLOCK-TEST FORMAT.@_.9 (PROGN (FORMAT T "AAAA ~:@_") (PPRINT-LOGICAL-BLOCK (*STANDARD-OUTPUT* NIL) (FORMAT T "A ~@_A ~@_A ~@_A ~@_"))) "AAAA
A A A A " :MARGIN 10 :MISER 8)
;; Loading (DEFTEST FORMAT.@_.10 (WITH-OUTPUT-TO-STRING (S) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* 4)) (FORMAT S "A ~@_A ~@_A ~@_A ~@_A ~@_")))) "A A A A A ")
;; Loading (DEFTEST FORMATTER.@_.10 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* 4)) (FORMATTER-CALL-TO-STRING (FORMATTER "A ~@_A ~@_A ~@_A ~@_A ~@_")))) "A A A A A ")
;; Loading (DEF-PPBLOCK-TEST FORMAT.:_.1 (FORMAT T "A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_") "A A A A A
A A A A A " :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT.:_.2 (FORMAT T "A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_") "A A A
A A A
A A A
A " :MARGIN 6)
;; Loading (DEF-PPBLOCK-TEST FORMAT.:_.3 (FORMAT T "A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_") "A A A
A A A
A A A
A " :MARGIN 7)
;; Loading (DEF-PPBLOCK-TEST FORMAT.:_.4 (FORMAT T "A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_") "A A A A A
A A A A A " :MARGIN 10 :MISER 9)
;; Loading (DEF-PPBLOCK-TEST FORMAT.:_.5 (FORMAT T "A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_A ~:_") "A
A
A
A
A
A
A
A
A
A
" :MARGIN 10 :MISER 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT.:_.6 (FORMAT T "~W~W~:_~W~W~:_~W~W~:_~W~W~:_~W~W~:_" (QUOTE (A B)) #\Space (QUOTE (A B)) #\Space (QUOTE (A B)) #\Space (QUOTE (A B)) #\Space (QUOTE (A B)) #\Space) "(A B) (A B)
(A B) (A B)
(A B) " :MARGIN 12)
;; Loading (DEFTEST FORMAT.:_.7 (WITH-OUTPUT-TO-STRING (S) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-PRETTY* T) (*PRINT-MISER-WIDTH* NIL)) (FORMAT S "A ~:_A ~:_A ~:_A ~:_A ~:_")))) "A A A A A ")
;; Loading (DEFTEST FORMATTER.:_.7 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-PRETTY* T) (*PRINT-MISER-WIDTH* NIL)) (FORMATTER-CALL-TO-STRING (FORMATTER "A ~:_A ~:_A ~:_A ~:_A ~:_")))) "A A A A A ")
;; Loading (DEF-PPBLOCK-TEST FORMAT.:@_.1 (FORMAT T "A ~:@_A ~:@_A ~:@_A ~:@_") "A
A
A
A
")
;; Loading (DEF-PPBLOCK-TEST FORMAT.:@_.2 (FORMAT T "A ~@:_A ~@:_A ~@:_A ~@:_") "A
A
A
A
" :MARGIN 10)
;; Loading (DEF-PPBLOCK-TEST FORMAT.:@_.3 (FORMAT T "A ~@:_A ") "A
A " :MARGIN 1)
;; Loading (DEF-PPBLOCK-TEST FORMAT.:@_.4 (FORMAT T "A ~@:_A ~@:_A ~@:_A ~@:_") "A A A A " :PRETTY NIL)
;; Loading (DEFTEST FORMAT.:@_.5 (WITH-OUTPUT-TO-STRING (S) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* NIL)) (FORMAT S "A ~:@_A ~:@_A ~:@_A ~:@_A ~:@_")))) "A A A A A ")
;; Loading (DEFTEST FORMATTER.:@_.5 (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PRINT-ESCAPE* NIL) (*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 4) (*PRINT-MISER-WIDTH* NIL)) (FORMATTER-CALL-TO-STRING (FORMATTER "A ~:@_A ~:@_A ~:@_A ~:@_A ~:@_")))) "A A A A A ")
;; Loading (LOAD "format-logical-block.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-logical-block.lsp 81E47147>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.1 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<foo~A~;~A~;bar~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.2 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<foo~A~@;~A~;bar~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.3 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<foo~;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.4 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<foo~@;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.5 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<foo~A~;~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.6 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<foo~A~@;~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.7 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<~;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.8 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<~@;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.9 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~:<foo~A~;~A~;bar~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.10 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~:<foo~A~@;~A~;bar~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.11 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~:<foo~;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.12 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~:<foo~@;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.13 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~:<foo~A~;~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.14 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~:<foo~A~@;~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.15 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~:<~;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.16 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~:<~@;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.17 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~@<foo~A~;~A~;bar~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.18 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~@<foo~A~@;~A~;bar~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.19 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~@<foo~;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.20 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~@<foo~@;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.21 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~@<foo~A~;~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.22 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~@<foo~A~@;~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.23 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~@<~;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.24 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~@<~@;~A~;bar~A~:>" (QUOTE (X)) (QUOTE (Y))) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.25 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "1~<X~<Y~:>Z~>2" NIL NIL NIL) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.26 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<~:;~>~<~:>" NIL NIL NIL) ERROR) T T)
;; Loading (DEFTEST FORMAT.LOGICAL-BLOCK.ERROR.27 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<~:>~<~:;~>" NIL NIL NIL) ERROR) T T)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.1 (FORMAT NIL "~<~A~:>" (QUOTE (NIL))) "NIL")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.2 (FORMAT NIL "~@<~A~:>" NIL) "NIL")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.3 (FORMAT NIL "~:<~A~:>" (QUOTE (NIL))) "(NIL)")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.4 (FORMAT NIL "~:@<~A~:>" NIL) "(NIL)")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.5 (FORMAT NIL "~@:<~A~:>" NIL) "(NIL)")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.6 (FORMAT NIL "~<~@{~A~^*~}~:>" (QUOTE (1 2 3))) "1*2*3")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.7 (FORMAT NIL "~:<~@{~A~^*~}~:>" (QUOTE (1 2 3))) "(1*2*3)")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.8 (FORMAT NIL "~:<~@{~A~^*~}~:>" 1) "1")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.9 (FORMAT NIL "~<~;~A~;~:>" (QUOTE (1 2 3))) "1")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.10 (FORMAT NIL "~<~;~A~:>" (QUOTE (1 2 3))) "1")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.11 (FORMAT NIL "~@<~;~A~;~:>" (QUOTE (1 2 3))) "(1 2 3)")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.12 (FORMAT NIL "~@<~;~A~:>" (QUOTE (1 2 3))) "(1 2 3)")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.13 (FORMAT NIL "~:<[~;~@{~A~^/~}~:>" (QUOTE (1 2 3))) "[1/2/3)")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.14 (FORMAT NIL "~:<~;~@{~A~^/~}~;]~:>" (QUOTE (1 2 3))) "1/2/3]")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.15 (FORMAT NIL "~:<[~;~@{~A~^/~}~;]~:>" (QUOTE (1 2 3))) "[1/2/3]")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.16 (FORMAT NIL "~@<~@{~A~^*~}~:>" 1 2 3) "1*2*3")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.17 (FORMAT NIL "~@<~@{~A~^ ~_~}~:>" 1 2 3) "1 2 3")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.18 (FORMAT NIL "~@<~@{~A~^ ~_~}~:>" 1 2 3) "1
2
3" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.19 (FORMAT NIL "~:@<~@{~A~^ ~_~}~:>" 1 2 3) "(1
 2
 3)" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.20 (FORMAT NIL "~@:<~@{~A~^ ~}~:>" 1 2 3) "(1 2 3)" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.21 (FORMAT NIL "~@:<~@{~A~^ ~:_~}~:>" 1 2 3) "(1
 2
 3)" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.22 (FORMAT NIL "~:@<~@{~A~^ ~}~:@>" 1 2 3) "(1
 2
 3)" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.23 (FORMAT NIL "~:@<~@{~A~^/~
                   ~}~:@>" 1 2 3) "(1/2/3)" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.24 (FORMAT NIL "~:@<~@{~A~^            ~:_~}~:>" 1 2 3) "(1
 2
 3)" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.25 (FORMAT NIL "~:@<~@{~A~^            ~}~:@>" 1 2 3) "(1
 2
 3)" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.26 (FORMAT NIL "~:@<~@{~A~^~}~:@>" "1 2 3") "(1 2 3)" :MARGIN 2)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.27 (FORMAT NIL "~@<**~@;~@{~A~^       ~}~:@>" 1 2 3) "**1
**2
**3" :MARGIN 3)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.28 (FORMAT NIL "~@<**~@;~@{~A~^       ~}~;XX~:@>" 1 2 3) "**1
**2
**3XX" :MARGIN 3)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.29 (FORMAT NIL "~:@<**~@;~@{~A~^       ~}~:@>" 1 2 3) "**1
**2
**3)" :MARGIN 3)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.CIRCLE.1 (FORMAT NIL "~:<~@{~A~^ ~}~:>" (LET ((X (LIST 0))) (LIST X X))) "(#1=(0) #1#)" :CIRCLE T)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.CIRCLE.2 (FORMAT NIL "~:<~@{~A~^ ~}~:>" (LET ((X (LIST 0))) (CONS X X))) "(#1=(0) . #1#)" :CIRCLE T)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.CIRCLE.3 (FORMAT NIL "~:<~@{~A~^ ~}~:>" (LET ((X (LIST 0))) (SETF (CDR X) X) X)) "#1=(0GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
 . #1#)" :CIRCLE T :LEN 500)
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.CIRCLE.4 (FORMAT NIL "~:<~@{~A~^ ~}~:>" (LET ((X (LIST 0))) (LIST X X))) "((0) (0))")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.CIRCLE.5 (FORMAT NIL "~:<~@{~A~^ ~}~:>" (LET ((X (LIST 0))) (CONS X X))) "((0) 0)")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.ESCAPE.1 (FORMAT NIL "~<~A~^xxxx~:>" (QUOTE (1))) "1")
;; Loading (DEF-PPRINT-TEST FORMAT.LOGICAL-BLOCK.ESCAPE.2 (FORMAT NIL "~<~<~A~^xxx~:>yyy~:>" (QUOTE ((1)))) "1yyy")
;; Loading (LOAD "format-i.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-i.lsp C1BE98D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PPRINT-TEST FORMAT.I.1 (FORMAT NIL "~<M~3:i~:@_M~:>" (QUOTE (M M))) "M
    M")
;; Loading (DEF-PPRINT-TEST FORMAT.I.2 (FORMAT NIL "~:<M~1:I~@:_M~:>" (QUOTE (M M))) "(M
   M)")
;; Loading (DEF-PPRINT-TEST FORMAT.I.3 (FORMAT NIL "~<(~;M~-1:i~:@_M~;)~:>" (QUOTE (M M))) "(M
 M)")
;; Loading (DEF-PPRINT-TEST FORMAT.I.4 (FORMAT NIL "~:<M~-1:i~:@_M~:>" (QUOTE (M M))) "(M
 M)")
;; Loading (DEF-PPRINT-TEST FORMAT.I.5 (FORMAT NIL "~<(~;M~:I~:@_M~;)~:>" (QUOTE (M M))) "(M
  M)")
;; Loading (DEF-PPRINT-TEST FORMAT.I.6 (FORMAT NIL "~<(~;M~v:i~:@_M~;)~:>" (QUOTE (NIL))) "(M
  M)")
;; Loading (DEF-PPRINT-TEST FORMAT.I.7 (FORMAT NIL "~:<M~-2:i~:@_M~:>" (QUOTE (M M))) "(M
M)")
;; Loading (DEF-PPRINT-TEST FORMAT.I.8 (FORMAT NIL "~<M~:i~:@_M~:>" (QUOTE (M M))) "M
 M")
;; Loading (DEF-PPRINT-TEST FORMAT.I.9 (FORMAT NIL "~<MMM~I~:@_MMMMM~:>" (QUOTE (M M))) "MMM
MMMMM")
;; Loading (DEF-PPRINT-TEST FORMAT.I.10 (FORMAT NIL "~:<MMM~I~:@_MMMMM~:>" (QUOTE (M M))) "(MMM
 MMMMM)")
;; Loading (DEF-PPRINT-TEST FORMAT.I.11 (FORMAT NIL "~<MMM~1I~:@_MMMMM~:>" (QUOTE (M M))) "MMM
 MMMMM")
;; Loading (DEF-PPRINT-TEST FORMAT.I.12 (FORMAT NIL "XXX~<MMM~1I~:@_MMMMM~:>" (QUOTE (M M))) "XXXMMM
    MMMMM")
;; Loading (DEF-PPRINT-TEST FORMAT.I.13 (FORMAT NIL "XXX~<MMM~I~:@_MMMMM~:>" (QUOTE (M M))) "XXXMMM
   MMMMM")
;; Loading (DEF-PPRINT-TEST FORMAT.I.14 (FORMAT NIL "XXX~<MMM~-1I~:@_MMMMM~:>" (QUOTE (M M))) "XXXMMM
  MMMMM")
;; Loading (DEF-PPRINT-TEST FORMAT.I.15 (FORMAT NIL "XXX~<MMM~vI~:@_MMMMM~:>" (QUOTE (NIL))) "XXXMMM
   MMMMM")
;; Loading (DEF-PPRINT-TEST FORMAT.I.16 (FORMAT NIL "XXX~<MMM~vI~:@_MMMMM~:>" (QUOTE (2))) "XXXMMM
     MMMMM")
;; Loading (LOAD "format-slash.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-slash.lsp C1C798C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PPRINT-TEST FORMAT./.1 (FORMAT NIL "~/pprint-linear/" 1) "1")
;; Loading (DEF-PPRINT-TEST FORMAT./.2 (FORMAT NIL "~/pprint-linear/" 2) "2" :PRETTY NIL)
;; Loading (DEF-PPRINT-TEST FORMAT./.3 (FORMAT NIL "~/pprint-linear/" (QUOTE (17))) "17")
;; Loading (DEF-PPRINT-TEST FORMAT./.4 (FORMAT NIL "~:/pprint-linear/" (QUOTE (17))) "(17)")
;; Loading (DEF-PPRINT-TEST FORMAT./.5 (FORMAT NIL "~@/pprint-linear/" 1) "1")
;; Loading (DEF-PPRINT-TEST FORMAT./.6 (FORMAT NIL "~@:/pprint-linear/" 1) "1")
;; Loading (DEF-PPRINT-TEST FORMAT./.7 (FORMAT NIL "~/PPRINT-LINEAR/" 1) "1")
;; Loading (DEF-PPRINT-TEST FORMAT./.8 (FORMAT NIL "~/pPrINt-lINeaR/" 1) "1")
;; Loading (DEF-PPRINT-TEST FORMAT./.9 (PROGN (SETF (SYMBOL-FUNCTION (QUOTE FUNCTION-FOR-FORMAT-SLASH-9)) (FUNCTION PPRINT-LINEAR)) (FORMAT NIL "~/CL-TEST::FUNCTION-FOR-FORMAT-SLASH-9/" 1)) "1")
;; Loading (DEF-PPRINT-TEST FORMAT./.10 (PROGN (SETF (SYMBOL-FUNCTION (QUOTE FUNCTION-FOR-FORMAT-SLASH-10)) (FUNCTION PPRINT-LINEAR)) (FORMAT NIL "~/cl-test:FUNCTION-FOR-FORMAT-SLASH-10/" 1)) "1")
;; Loading (DEF-PPRINT-TEST FORMAT./.11 (PROGN (SETF (SYMBOL-FUNCTION (QUOTE FUNCTION:FOR::FORMAT:SLASH:11)) (FUNCTION PPRINT-LINEAR)) (FORMAT NIL "~/cL-tESt:FUNCTION:FOR::FORMAT:SLASH:11/" 1)) "1")
;; Loading (DEF-PPRINT-TEST FORMAT./.12 (FORMAT NIL "~<~/pprint-tabular/~:>" (QUOTE ((M)))) "M")
;; Loading (DEF-PPRINT-TEST FORMAT./.13 (FORMAT NIL "~<~:/pprint-tabular/~:>" (QUOTE ((M)))) "(M)")
;; Loading (DEF-PPRINT-TEST FORMAT./.14 (FORMAT NIL "~<~:@/pprint-tabular/~:>" (QUOTE ((M)))) "(M)")
;; Loading (DEF-PPRINT-TEST FORMAT./.15 (FORMAT NIL "~<~@/pprint-tabular/~:>" (QUOTE ((M)))) "M")
;; Loading (DEF-PPRINT-TEST FORMAT./.16 (FORMAT NIL "~<~4:/pprint-tabular/~:>" (QUOTE ((M M)))) "(M   M)")
;; Loading (DEF-PPRINT-TEST FORMAT./.17 (FORMAT NIL "~<~v:/pprint-tabular/~:>" (QUOTE (NIL (M M)))) "(M               M)")
;; Loading (DEF-PPRINT-TEST FORMAT./.18 (FORMAT NIL "~<~v:/pprint-tabular/~:>" (QUOTE (3 (M M)))) "(M  M)")
;; Loading (DECLAIM (SPECIAL *EXPECTED-ARGS*))
;; Loading (DEF-PPRINT-TEST FORMAT./.19 (PROGN (SETF (SYMBOL-FUNCTION (QUOTE FUNCTION-FOR-FORMAT-SLASH-19)) (FUNCTION (LAMBDA (STREAM &REST ARGS) (ASSERT (= (LENGTH ARGS) (LENGTH *EXPECTED-ARGS*))) (ASSERT (EQUAL (CAR ARGS) (CAR *EXPECTED-ARGS*))) (ASSERT (IF (CADR ARGS) (CADR *EXPECTED-ARGS*) (NOT (CADR *EXPECTED-ARGS*)))) (ASSERT (IF (CADDR ARGS) (CADDR *EXPECTED-ARGS*) (NOT (CADDR *EXPECTED-ARGS*)))) (APPLY (FUNCTION PPRINT-FILL) STREAM (SUBSEQ ARGS 0 3))))) (LIST (LET ((*EXPECTED-ARGS* (QUOTE (1 NIL NIL)))) (FORMAT NIL "~/cl-test::function-for-format-slash-19/" 1)) (LET ((*EXPECTED-ARGS* (QUOTE (2 T NIL)))) (FORMAT NIL "~:/cl-test::function-for-format-slash-19/" 2)) (LET ((*EXPECTED-ARGS* (QUOTE (3 NIL T)))) (FORMAT NIL "~@/cl-test::function-for-format-slash-19/" 3)) (LET ((*EXPECTED-ARGS* (QUOTE (4 T T)))) (FORMAT NIL "~:@/cl-test::function-for-format-slash-19/" 4)) (LET ((*EXPECTED-ARGS* (QUOTE (5 T T)))) (FORMAT NIL "~@:/cl-test::function-for-format-slash-19/" 5)) (LET ((*EXPECTED-ARGS* (QUOTE (6 T T 18)))) (FORMAT NIL "~18@:/cl-test::function-for-format-slash-19/" 6)) (LET ((*EXPECTED-ARGS* (QUOTE (7 NIL NIL 19)))) (FORMAT NIL "~v/cl-test::function-for-format-slash-19/" 19 7)) (LET ((*EXPECTED-ARGS* (QUOTE (8 T NIL #\X)))) (FORMAT NIL "~'X:/cl-test::function-for-format-slash-19/" 8)) (LET ((*EXPECTED-ARGS* (QUOTE (9 NIL T #\,)))) (FORMAT NIL "~',@/cl-test::function-for-format-slash-19/" 9)) (LET ((*EXPECTED-ARGS* (QUOTE (10 NIL T -1)))) (FORMAT NIL "~-1@/cl-test::function-for-format-slash-19/" 10)) (LET ((*EXPECTED-ARGS* (QUOTE (11 NIL T 1 2 3 4 5 6 7 8 9 10)))) (FORMAT NIL "~1,2,3,4,5,6,7,8,9,10@/cl-test::function-for-format-slash-19/" 11)) (LET ((*EXPECTED-ARGS* (QUOTE (12 NIL T 1 2 3 4 5 6 7 8 9 10)))) (FORMAT NIL "~v,v,v,v,v,v,v,v,v,v@/cl-test::function-for-format-slash-19/" 1 2 3 4 5 6 7 8 9 10 12)))) ("1" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" "12"))
;; Loading (LOAD "format-t.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-t.lsp C1D81637>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PPRINT-TEST FORMAT.T.1 (FORMAT NIL "~0,0T") "")
;; Loading (DEF-PPRINT-TEST FORMAT.T.2 (FORMAT NIL "~1,0T") " ")
;; Loading (DEF-PPRINT-TEST FORMAT.T.3 (FORMAT NIL "~0,1T") " ")
;; Loading (DEF-PPRINT-TEST FORMAT.T.4 (LOOP FOR I FROM 0 TO 20 FOR S = (FORMAT NIL "~0,vT" I) UNLESS (STRING= S (MAKE-STRING I :INITIAL-ELEMENT #\Space)) COLLECT (LIST I S)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.T.5 (LOOP FOR I FROM 0 TO 20 FOR S = (FORMAT NIL "~v,0T" I) UNLESS (STRING= S (MAKE-STRING I :INITIAL-ELEMENT #\Space)) COLLECT (LIST I S)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.T.6 (LOOP FOR N1 = (RANDOM 30) FOR S1 = (MAKE-STRING N1 :INITIAL-ELEMENT #\X) FOR N2 = (RANDOM 30) FOR INC = (RANDOM 20) FOR S2 = (COND ((< N1 N2) (CONCATENATE (QUOTE STRING) S1 (MAKE-STRING (- N2 N1) :INITIAL-ELEMENT #\Space))) ((= INC 0) S1) (T (LOOP DO (INCF N2 INC) WHILE (<= N2 N1)) (CONCATENATE (QUOTE STRING) S1 (MAKE-STRING (- N2 N1) :INITIAL-ELEMENT #\Space)))) FOR PRETTY = (COIN) FOR RESULT = (LET ((*PRINT-PRETTY* PRETTY)) (FORMAT NIL (FORMAT NIL "~A~~~D,~DT" S1 N2 INC))) REPEAT 100 UNLESS (STRING= S2 RESULT) COLLECT (LIST N1 N2 INC PRETTY S2 RESULT)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.T.7 (LOOP FOR N1 = (RANDOM 30) FOR S1 = (MAKE-STRING N1 :INITIAL-ELEMENT #\X) FOR N2 = (RANDOM 30) FOR INC = (RANDOM 20) FOR S2 = (COND ((< N1 N2) (CONCATENATE (QUOTE STRING) S1 (MAKE-STRING (- N2 N1) :INITIAL-ELEMENT #\Space))) ((= INC 0) S1) (T (LOOP DO (INCF N2 INC) WHILE (<= N2 N1)) (CONCATENATE (QUOTE STRING) S1 (MAKE-STRING (- N2 N1) :INITIAL-ELEMENT #\Space)))) FOR PRETTY = (COIN) FOR RESULT = (LET ((*PRINT-PRETTY* PRETTY)) (FORMAT NIL "~A~v,vt" S1 N2 INC)) REPEAT 100 UNLESS (STRING= S2 RESULT) COLLECT (LIST N1 N2 INC PRETTY S2 RESULT)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.T.8 (LOOP FOR I FROM 1 TO 20 FOR S = (FORMAT NIL " ~v,vT" NIL I) UNLESS (STRING= S (MAKE-STRING (1+ I) :INITIAL-ELEMENT #\Space)) COLLECT (LIST I S)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.T.9 (LOOP FOR I FROM 1 TO 20 FOR S = (FORMAT NIL "~v,vT" I NIL) UNLESS (STRING= S (MAKE-STRING I :INITIAL-ELEMENT #\Space)) COLLECT (LIST I S)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.T.10 (FORMAT NIL "XXXXX~2,0T") "XXXXX")
;; Loading (DEF-PPRINT-TEST FORMAT.@T.1 (FORMAT NIL "~1,1@t") " ")
;; Loading (DEF-PPRINT-TEST FORMAT.@T.2 (LOOP FOR COLNUM FROM 0 TO 20 FOR S1 = (FORMAT NIL "~v,1@t" COLNUM) FOR S2 = (MAKE-STRING COLNUM :INITIAL-ELEMENT #\Space) UNLESS (STRING= S1 S2) COLLECT (LIST COLNUM S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.@T.3 (LOOP FOR COLNUM = (RANDOM 50) FOR COLINC = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~v,v@t" COLNUM COLINC) FOR S2 = (MAKE-STRING (* COLINC (CEILING COLNUM COLINC)) :INITIAL-ELEMENT #\Space) REPEAT 100 UNLESS (STRING= S1 S2) COLLECT (LIST COLNUM COLINC S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.@T.4 (LOOP FOR COLNUM = (RANDOM 50) FOR COLINC = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~v,1@T~0,v@t" COLNUM COLINC) FOR S2 = (MAKE-STRING (* COLINC (CEILING COLNUM COLINC)) :INITIAL-ELEMENT #\Space) REPEAT 100 UNLESS (STRING= S1 S2) COLLECT (LIST COLNUM COLINC S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.@T.5 (LOOP FOR COLNUM = (RANDOM 50) FOR COLINC = (1+ (RANDOM 20)) FOR PRETTY = (COIN) FOR S1 = (LET ((*PRETTY* PRETTY)) (FORMAT NIL (FORMAT NIL "~~~d,~d@t" COLNUM COLINC))) FOR S2 = (MAKE-STRING (* COLINC (CEILING COLNUM COLINC)) :INITIAL-ELEMENT #\Space) REPEAT 100 UNLESS (STRING= S1 S2) COLLECT (LIST COLNUM COLINC PRETTY S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.:T.1 (FORMAT NIL "XX~10:tYY") "XXYY")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.2 (WITH-OUTPUT-TO-STRING (S) (PPRINT-LOGICAL-BLOCK (S (QUOTE (A B C))) (FORMAT S "XX~10:tYY"))) "XXYY" :PRETTY NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.:T.3 (WITH-OUTPUT-TO-STRING (S) (PPRINT-LOGICAL-BLOCK (S (QUOTE (A B C))) (LET ((*PRINT-PRETTY* NIL)) (FORMAT S "XX~10:tYY")))) "XXYY")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.4 (FORMAT NIL "~<[~;~0,0:T~;]~:>" (QUOTE (A))) "[]")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.5 (FORMAT NIL "~<[~;~1,0:T~;]~:>" (QUOTE (A))) "[ ]")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.5A (FORMAT NIL "~<[~;~,0:T~;]~:>" (QUOTE (A))) "[ ]")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.6 (FORMAT NIL "~<[~;~0,1:T~;]~:>" (QUOTE (A))) "[ ]")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.6A (FORMAT NIL "~<[~;~0,:T~;]~:>" (QUOTE (A))) "[ ]")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.6B (FORMAT NIL "~<[~;~0:T~;]~:>" (QUOTE (A))) "[ ]")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.7 (LOOP FOR I FROM 0 TO 20 FOR S = (FORMAT NIL "~<X~;~0,v:T~;Y~:>" (LIST I)) UNLESS (STRING= S (CONCATENATE (QUOTE STRING) "X" (MAKE-STRING I :INITIAL-ELEMENT #\Space) "Y")) COLLECT (LIST I S)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.:T.8 (LOOP FOR I FROM 0 TO 20 FOR S = (FORMAT NIL "~<ABC~;~v,0:T~;DEF~:>" (LIST I)) UNLESS (STRING= S (CONCATENATE (QUOTE STRING) "ABC" (MAKE-STRING I :INITIAL-ELEMENT #\Space) "DEF")) COLLECT (LIST I S)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.:T.9 (LOOP FOR N0 = (RANDOM 10) FOR S0 = (MAKE-STRING N0 :INITIAL-ELEMENT #\Space) FOR N1 = (RANDOM 30) FOR S1 = (MAKE-STRING N1 :INITIAL-ELEMENT #\X) FOR N2 = (RANDOM 30) FOR INC = (RANDOM 20) FOR S2 = (COND ((< N1 N2) (CONCATENATE (QUOTE STRING) S0 S1 (MAKE-STRING (- N2 N1) :INITIAL-ELEMENT #\Space))) ((= INC 0) (CONCATENATE (QUOTE STRING) S0 S1)) (T (LOOP DO (INCF N2 INC) WHILE (<= N2 N1)) (CONCATENATE (QUOTE STRING) S0 S1 (MAKE-STRING (- N2 N1) :INITIAL-ELEMENT #\Space)))) FOR RESULT = (FORMAT NIL (FORMAT NIL "~A~~<~A~~~D,~D:T~~:>" S0 S1 N2 INC) (QUOTE (A))) REPEAT 100 UNLESS (STRING= S2 RESULT) COLLECT (LIST N0 N1 N2 INC S2 RESULT)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.:T.10 (FORMAT NIL "~<[~;~2,0:T~;]~:>" (QUOTE (A))) "[  ]")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.11 (FORMAT NIL "~<[~;XXXX~2,0:T~;]~:>" (QUOTE (A))) "[XXXX]")
;; Loading (DEF-PPRINT-TEST FORMAT.:T.12 (LOOP FOR N0 = (RANDOM 20) FOR S0 = (MAKE-STRING N0 :INITIAL-ELEMENT #\Space) FOR N1 = (RANDOM 30) FOR S1 = (MAKE-STRING N1 :INITIAL-ELEMENT #\X) FOR N2 = (RANDOM 30) FOR INC = (RANDOM 20) FOR S2 = (COND ((< N1 N2) (CONCATENATE (QUOTE STRING) S0 S1 (MAKE-STRING (- N2 N1) :INITIAL-ELEMENT #\Space))) ((= INC 0) (CONCATENATE (QUOTE STRING) S0 S1)) (T (LOOP DO (INCF N2 INC) WHILE (<= N2 N1)) (CONCATENATE (QUOTE STRING) S0 S1 (MAKE-STRING (- N2 N1) :INITIAL-ELEMENT #\Space)))) FOR RESULT = (FORMAT NIL "~A~<~A~v,v:t~:>" S0 (LIST S1 N2 INC)) REPEAT 100 UNLESS (STRING= S2 RESULT) COLLECT (LIST N1 N2 INC S2 RESULT)) NIL)
;; Loading (DEFTEST FORMAT.:T.ERROR.1 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<XXX~1,1:TYYY~>") ERROR) T T)
;; Loading (DEFTEST FORMAT.:T.ERROR.2 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<XXX~:;YYY~>ZZZ~4,5:tWWW") ERROR) T T)
;; Loading (DEFTEST FORMAT.:T.ERROR.3 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "AAAA~1,1:TBBB~<XXX~:;YYY~>ZZZ") ERROR) T T)
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.1 (FORMAT NIL "~<XXX~;~1,1:@t~;YYY~:>" (QUOTE (A))) "XXX YYY")
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.1A (FORMAT NIL "~<XXX~;~,1:@t~;YYY~:>" (QUOTE (A))) "XXX YYY")
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.1B (FORMAT NIL "~<XXX~;~1,:@t~;YYY~:>" (QUOTE (A))) "XXX YYY")
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.1C (FORMAT NIL "~<XXX~;~1:@t~;YYY~:>" (QUOTE (A))) "XXX YYY")
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.1D (FORMAT NIL "~<XXX~;~:@t~;YYY~:>" (QUOTE (A))) "XXX YYY")
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.2 (LOOP FOR COLNUM FROM 0 TO 20 FOR S1 = (FORMAT NIL "~<XXXX~;~v,1:@t~:>" (LIST COLNUM)) FOR S2 = (CONCATENATE (QUOTE STRING) "XXXX" (MAKE-STRING COLNUM :INITIAL-ELEMENT #\Space)) UNLESS (STRING= S1 S2) COLLECT (LIST COLNUM S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.3 (LOOP FOR S0 = (MAKE-STRING (RANDOM 20) :INITIAL-ELEMENT #\M) FOR COLNUM = (RANDOM 50) FOR COLINC = (1+ (RANDOM 20)) FOR S1 = (FORMAT NIL "~A~<~v,v:@t~:>" S0 (LIST COLNUM COLINC)) FOR S2 = (CONCATENATE (QUOTE STRING) S0 (MAKE-STRING (* COLINC (CEILING COLNUM COLINC)) :INITIAL-ELEMENT #\Space)) REPEAT 100 UNLESS (STRING= S1 S2) COLLECT (LIST COLNUM COLINC S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.4 (FORMAT NIL "XX~10,20:@tYY") "XXYY" :PRETTY NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.:@T.5 (WITH-OUTPUT-TO-STRING (S) (PPRINT-LOGICAL-BLOCK (S (QUOTE (A B C))) (FORMAT S "XX~10,20@:tYY"))) "XXYY" :PRETTY NIL)
;; Loading (LOAD "format-justify.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-justify.lsp C1FA4097>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.1 (FORMAT NIL "~<~>") "")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.2 (LOOP FOR I FROM 1 TO 20 FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\x) FOR S2 = (FORMAT NIL "~<~A~>" S1) UNLESS (STRING= S1 S2) COLLECT (LIST I S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.3 (LOOP FOR I FROM 1 TO 20 FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\x) FOR S2 = (FORMAT NIL "~<~A~;~A~>" S1 S1) UNLESS (STRING= S2 (CONCATENATE (QUOTE STRING) S1 S1)) COLLECT (LIST I S1 S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.4 (LOOP FOR I FROM 1 TO 20 FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\x) FOR EXPECTED = (CONCATENATE (QUOTE STRING) S1 " " S1) FOR S2 = (FORMAT NIL "~,,1<~A~;~A~>" S1 S1) UNLESS (STRING= S2 EXPECTED) COLLECT (LIST I EXPECTED S2)) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.5 (LOOP FOR I FROM 1 TO 20 FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\x) FOR EXPECTED = (CONCATENATE (QUOTE STRING) S1 "," S1) FOR S2 = (FORMAT NIL "~,,1,',<~A~;~A~>" S1 S1) UNLESS (STRING= S2 EXPECTED) COLLECT (LIST I EXPECTED S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.6 (LOOP FOR I FROM 1 TO 20 FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\x) FOR EXPECTED = (CONCATENATE (QUOTE STRING) S1 "  " S1) FOR S2 = (FORMAT NIL "~,,2<~A~;~A~>" S1 S1) UNLESS (STRING= S2 EXPECTED) COLLECT (LIST I EXPECTED S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.7 (LOOP FOR MINCOL = (RANDOM 50) FOR LEN = (RANDOM 50) FOR S1 = (MAKE-STRING LEN :INITIAL-ELEMENT #\x) FOR S2 = (FORMAT NIL "~v<~A~>" MINCOL S1) FOR EXPECTED = (IF (< LEN MINCOL) (CONCATENATE (QUOTE STRING) (MAKE-STRING (- MINCOL LEN) :INITIAL-ELEMENT #\Space) S1) S1) REPEAT 100 UNLESS (STRING= S2 EXPECTED) COLLECT (LIST MINCOL LEN S1 S2 EXPECTED)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.8 (LOOP FOR MINCOL = (RANDOM 50) FOR MINPAD = (RANDOM 10) FOR LEN = (RANDOM 50) FOR S1 = (MAKE-STRING LEN :INITIAL-ELEMENT #\x) FOR S2 = (FORMAT NIL "~v,,v<~A~>" MINCOL MINPAD S1) FOR EXPECTED = (IF (< LEN MINCOL) (CONCATENATE (QUOTE STRING) (MAKE-STRING (- MINCOL LEN) :INITIAL-ELEMENT #\Space) S1) S1) REPEAT 100 UNLESS (STRING= S2 EXPECTED) COLLECT (LIST MINCOL MINPAD LEN S1 S2 EXPECTED)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.9 (LOOP FOR MINCOL = (RANDOM 50) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR LEN = (RANDOM 50) FOR S1 = (MAKE-STRING LEN :INITIAL-ELEMENT #\x) FOR S2 = (FORMAT NIL "~v,,,v<~A~>" MINCOL PADCHAR S1) FOR EXPECTED = (IF (< LEN MINCOL) (CONCATENATE (QUOTE STRING) (MAKE-STRING (- MINCOL LEN) :INITIAL-ELEMENT PADCHAR) S1) S1) REPEAT 100 UNLESS (STRING= S2 EXPECTED) COLLECT (LIST MINCOL PADCHAR LEN S1 S2 EXPECTED)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.10 (LOOP FOR MINCOL = (RANDOM 50) FOR PADCHAR = (RANDOM-FROM-SEQ +STANDARD-CHARS+) FOR LEN = (RANDOM 50) FOR S1 = (MAKE-STRING LEN :INITIAL-ELEMENT #\x) FOR S2 = (FORMAT NIL (FORMAT NIL "~~~d,,,'~c<~~A~~>" MINCOL PADCHAR) S1) FOR EXPECTED = (IF (< LEN MINCOL) (CONCATENATE (QUOTE STRING) (MAKE-STRING (- MINCOL LEN) :INITIAL-ELEMENT PADCHAR) S1) S1) REPEAT 500 UNLESS (STRING= S2 EXPECTED) COLLECT (LIST MINCOL PADCHAR LEN S1 S2 EXPECTED)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.11 (LOOP FOR I = (1+ (RANDOM 20)) FOR COLINC = (1+ (RANDOM 10)) FOR S1 = (MAKE-STRING I :INITIAL-ELEMENT #\x) FOR S2 = (FORMAT NIL "~,v<~A~>" COLINC S1) FOR EXPECTED-LEN = (* COLINC (CEILING I COLINC)) FOR EXPECTED = (CONCATENATE (QUOTE STRING) (MAKE-STRING (- EXPECTED-LEN I) :INITIAL-ELEMENT #\Space) S1) REPEAT 10 UNLESS (STRING= EXPECTED S2) COLLECT (LIST I COLINC EXPECTED S2)) NIL)
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.12 (FORMAT NIL "~<XXXXXX~^~>") "")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.13 (FORMAT NIL "~<XXXXXX~;YYYYYYY~^~>") "XXXXXX")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.13A (FORMAT NIL "~<~<XXXXXX~;YYYYYYY~^~>~>") "XXXXXX")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.14 (FORMAT NIL "~<XXXXXX~;YYYYYYY~^~;ZZZZZ~>") "XXXXXX")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.15 (FORMAT NIL "~13,,2<aaa~;bbb~;ccc~>") "aaa  bbb  ccc")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.16 (FORMAT NIL "~10@<abcdef~>") "abcdef    ")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.17 (FORMAT NIL "~10:@<abcdef~>") "  abcdef  ")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.18 (FORMAT NIL "~10:<abcdef~>") "    abcdef")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.19 (FORMAT NIL "~4@<~>") "    ")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.20 (FORMAT NIL "~5:@<~>") "     ")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.21 (FORMAT NIL "~6:<~>") "      ")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.22 (FORMAT NIL "~v<~A~>" NIL "XYZ") "XYZ")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.23 (FORMAT NIL "~,v<~A~;~A~>" NIL "ABC" "DEF") "ABCDEF")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.24 (FORMAT NIL "~,,v<~A~;~A~>" NIL "ABC" "DEF") "ABCDEF")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.25 (FORMAT NIL "~,,1,v<~A~;~A~>" NIL "ABC" "DEF") "ABC DEF")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.26 (FORMAT NIL "~,,1,v<~A~;~A~>" #\, "ABC" "DEF") "ABC,DEF")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.27 (FORMAT NIL "~6<abc~;def~^~>") "   abc")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.28 (FORMAT NIL "~6@<abc~;def~^~>") "abc   ")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.29 (FORMAT NIL "~%X ~,,1<~%X ~:;AAA~;BBB~;CCC~>") "
X AAA BBB CCC")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.30 (FORMAT NIL "~%X ~<~%X ~0,3:;AAA~>~<~%X ~0,3:;BBB~>~<~%X ~0,3:;CCC~>") "
X
X AAA
X BBB
X CCC")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.31 (FORMAT NIL "~%X ~<~%X ~0,30:;AAA~>~<~%X ~0,30:;BBB~>~<~%X ~0,30:;CCC~>") "
X AAABBBCCC")
;; Loading (DEF-PPRINT-TEST FORMAT.JUSTIFY.32 (FORMAT NIL "~%X ~<~%X ~0,3:;AAA~>,~<~%X ~0,3:;BBB~>,~<~%X ~0,3:;CCC~>") "
X
X AAA,
X BBB,
X CCC")
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR.W.1 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~< ~W ~>" NIL) ERROR) T T)
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR.W.2 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<X~:;Y~>~W" NIL) ERROR) T T)
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR.W.3 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~w~<X~:;Y~>" NIL) ERROR) T T)
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR._.1 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~< ~_ ~>") ERROR) T T)
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR._.2 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<X~:;Y~>~_") ERROR) T T)
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR._.3 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~_~<X~:;Y~>") ERROR) T T)
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR.I.1 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~< ~i ~>") ERROR) T T)
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR.I.2 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~<X~:;Y~>~I") ERROR) T T)
;; Loading (DEFTEST FORMAT.JUSTIFY.ERROR.I.3 (SIGNALS-ERROR-ALWAYS (FORMAT NIL "~i~<X~:;Y~>") ERROR) T T)
;; Loading (LOAD "format-goto.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-goto.lsp 81D35D87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.*.1 "~A~*~A" (1 2 3) "13")
;; Loading (DEF-FORMAT-TEST FORMAT.*.2 "~A~0*~A" (1 2 3) "12" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.*.3 "~A~v*~A" (1 0 2) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.*.4 "~A~v*~A" (1 1 2 3) "13")
;; Loading (DEF-FORMAT-TEST FORMAT.*.5 "~A~v*~A" (1 NIL 2 3) "13")
;; Loading (DEF-FORMAT-TEST FORMAT.*.6 "~A~1{~A~*~A~}~A" (0 (QUOTE (1 2 3)) 4) "0134")
;; Loading (DEF-FORMAT-TEST FORMAT.*.7 "~A~1{~A~0*~A~}~A" (0 (QUOTE (1 2 3)) 4) "0124")
;; Loading (DEF-FORMAT-TEST FORMAT.*.8 "~A~{~A~*~A~}~A" (0 (QUOTE (1 2 3 4 5 6)) 7) "013467")
;; Loading (DEF-FORMAT-TEST FORMAT.*.9 "~A~{~A~A~A~A~v*~^~A~A~A~A~}~A" (0 (QUOTE (1 2 3 4 NIL 6 7 8 9 #\A)) 5) "01234789A5")
;; Loading (DEF-FORMAT-TEST FORMAT.:*.1 "~A~:*~A" (1 2 3) "11" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:*.2 "~A~A~:*~A" (1 2 3) "122" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:*.3 "~A~A~0:*~A" (1 2 3) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.:*.4 "~A~A~2:*~A" (1 2 3) "121" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:*.5 "~A~A~v:*~A" (1 2 0 3) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.:*.6 "~A~A~v:*~A" (6 7 2 3) "677" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:*.7 "~A~A~v:*~A" (6 7 NIL 3) "67NIL" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:*.8 "~A~1{~A~:*~A~}~A" (0 (QUOTE (1 2 3)) 4) "0114")
;; Loading (DEF-FORMAT-TEST FORMAT.:*.9 "~A~1{~A~A~A~:*~A~}~A" (0 (QUOTE (1 2 3 4)) 5) "012335")
;; Loading (DEF-FORMAT-TEST FORMAT.:*.10 "~A~1{~A~A~A~2:*~A~A~}~A" (0 (QUOTE (1 2 3 4)) 5) "0123235")
;; Loading (DEF-FORMAT-TEST FORMAT.:*.11 "~A~{~A~A~A~3:*~A~A~A~A~}~A" (0 (QUOTE (1 2 3 4)) 5) "012312345")
;; Loading (DEF-FORMAT-TEST FORMAT.:*.12 "~A~{~A~A~A~A~4:*~^~A~A~A~A~}~A" (0 (QUOTE (1 2 3 4)) 5) "0123412345")
;; Loading (DEF-FORMAT-TEST FORMAT.:*.13 "~A~{~A~A~A~A~v:*~^~A~}~A" (0 (QUOTE (1 2 3 4 NIL)) 5) "01234NIL5")
;; Loading (DEF-FORMAT-TEST FORMAT.@*.1 "~A~A~@*~A~A" (1 2 3 4) "1212" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.@*.2 "~A~A~1@*~A~A" (1 2 3 4) "1223" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.@*.3 "~A~A~2@*~A~A" (1 2 3 4) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.@*.4 "~A~A~3@*~A~A" (1 2 3 4 5) "1245")
;; Loading (DEF-FORMAT-TEST FORMAT.@*.5 "~A~A~v@*~A~A" (1 2 NIL 3 4) "1212" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.@*.6 "~A~A~v@*~A~A" (1 2 1 3 4) "1221" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.@*.7 "~A~A~v@*~A~A" (6 7 2 3 4) "6723" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.@*.8 "~A~{~A~A~@*~A~A~}~A" (0 (QUOTE (1 2)) 9) "012129")
;; Loading (DEF-FORMAT-TEST FORMAT.@*.9 "~A~{~A~A~0@*~A~A~}~A" (0 (QUOTE (1 2)) 9) "012129")
;; Loading (DEF-FORMAT-TEST FORMAT.@*.10 "~A~1{~A~A~v@*~A~A~}~A" (0 (QUOTE (1 2 NIL)) 9) "012129")
;; Loading (DEF-FORMAT-TEST FORMAT.@*.11 "~A~{~A~A~1@*~A~}~A" (0 (QUOTE (1 2)) 9) "01229")
;; Loading (LOAD "format-conditional.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-conditional.lsp 81E26BC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.COND.1 "~[~]" (0) "")
;; Loading (DEF-FORMAT-TEST FORMAT.COND.2 "~[a~]" (0) "a")
;; Loading (DEF-FORMAT-TEST FORMAT.COND.3 "~[a~]" (-1) "")
;; Loading (DEF-FORMAT-TEST FORMAT.COND.4 "~[a~]" ((1- MOST-NEGATIVE-FIXNUM)) "")
;; Loading (DEF-FORMAT-TEST FORMAT.COND.5 "~[a~]" (1) "")
;; Loading (DEF-FORMAT-TEST FORMAT.COND.6 "~[a~]" ((1+ MOST-POSITIVE-FIXNUM)) "")
;; Loading (DEFTEST FORMAT.COND.7 (LOOP FOR I FROM -1 TO 10 COLLECT (FORMAT NIL "~[a~;b~;c~;d~;e~;f~;g~;h~;i~]" I)) ("" "a" "b" "c" "d" "e" "f" "g" "h" "i" "" ""))
;; Loading (DEFTEST FORMATTER.COND.7 (LET ((FN (FORMATTER "~[a~;b~;c~;d~;e~;f~;g~;h~;i~]"))) (LOOP FOR I FROM -1 TO 10 COLLECT (FORMATTER-CALL-TO-STRING FN I))) ("" "a" "b" "c" "d" "e" "f" "g" "h" "i" "" ""))
;; Loading (DEF-FORMAT-TEST FORMAT.COND.8 "~0[a~;b~;c~;d~]" (3) "a" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.COND.9 "~-1[a~;b~;c~;d~]" (3) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.COND.10 "~1[a~;b~;c~;d~]" (3) "b" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.COND.11 "~4[a~;b~;c~;d~]" (3) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.COND.12 "~100000000000000000000000000000000[a~;b~;c~;d~]" (3) "" 1)
;; Loading (DEFTEST FORMAT.COND.13 (LOOP FOR I FROM -1 TO 10 COLLECT (FORMAT NIL "~v[a~;b~;c~;d~;e~;f~;g~;h~;i~]" I NIL)) ("" "a" "b" "c" "d" "e" "f" "g" "h" "i" "" ""))
;; Loading (DEFTEST FORMATTER.COND.13 (LET ((FN (FORMATTER "~V[a~;b~;c~;d~;e~;f~;g~;h~;i~]"))) (LOOP FOR I FROM -1 TO 10 COLLECT (FORMATTER-CALL-TO-STRING FN I))) ("" "a" "b" "c" "d" "e" "f" "g" "h" "i" "" ""))
;; Loading (DEFTEST FORMAT.COND.14 (LOOP FOR I FROM -1 TO 10 COLLECT (FORMAT NIL "~v[a~;b~;c~;d~;e~;f~;g~;h~;i~]" NIL I)) ("" "a" "b" "c" "d" "e" "f" "g" "h" "i" "" ""))
;; Loading (DEFTEST FORMATTER.COND.14 (LET ((FN (FORMATTER "~v[a~;b~;c~;d~;e~;f~;g~;h~;i~]"))) (LOOP FOR I FROM -1 TO 10 COLLECT (FORMATTER-CALL-TO-STRING FN NIL I))) ("" "a" "b" "c" "d" "e" "f" "g" "h" "i" "" ""))
;; Loading (DEF-FORMAT-TEST FORMAT.COND.15 "~#[A~;B~]" NIL "A")
;; Loading (DEF-FORMAT-TEST FORMAT.COND.16 "~#[A~;B~]" (NIL) "B" 1)
;; Loading (DEFTEST FORMAT.COND:.1 (LOOP FOR I FROM -100 TO 100 FOR S = (FORMAT NIL "~[~:;a~]" I) UNLESS (OR (ZEROP I) (STRING= S "a")) COLLECT (LIST I S)) NIL)
;; Loading (DEFTEST FORMATTER.COND:.1 (LET ((FN (FORMATTER "~[~:;a~]"))) (LOOP FOR I FROM -100 TO 100 FOR S = (FORMATTER-CALL-TO-STRING FN I) UNLESS (OR (ZEROP I) (STRING= S "a")) COLLECT (LIST I S))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.COND:.2 "~[a~:;b~]" (0) "a")
;; Loading (DEF-FORMAT-TEST FORMAT.COND:.3 "~[a~:;b~]" ((1- MOST-NEGATIVE-FIXNUM)) "b")
;; Loading (DEF-FORMAT-TEST FORMAT.COND:.4 "~[a~:;b~]" ((1+ MOST-POSITIVE-FIXNUM)) "b")
;; Loading (DEFTEST FORMAT.COND:.5 (LOOP FOR I FROM -1 TO 10 COLLECT (FORMAT NIL "~[a~;b~;c~;d~:;e~]" I)) ("e" "a" "b" "c" "d" "e" "e" "e" "e" "e" "e" "e"))
;; Loading (DEFTEST FORMATTER.COND:.5 (LET ((FN (FORMATTER "~[a~;b~;c~;d~:;e~]"))) (LOOP FOR I FROM -1 TO 10 COLLECT (FORMATTER-CALL-TO-STRING FN I))) ("e" "a" "b" "c" "d" "e" "e" "e" "e" "e" "e" "e"))
;; Loading (DEFTEST FORMAT.COND:.6 (LOOP FOR I FROM -1 TO 10 COLLECT (FORMAT NIL "~v[a~;b~;c~;d~:;e~]" I NIL)) ("e" "a" "b" "c" "d" "e" "e" "e" "e" "e" "e" "e"))
;; Loading (DEFTEST FORMATTER.COND:.6 (LET ((FN (FORMATTER "~v[a~;b~;c~;d~:;e~]"))) (LOOP FOR I FROM -1 TO 10 COLLECT (FORMATTER-CALL-TO-STRING FN I))) ("e" "a" "b" "c" "d" "e" "e" "e" "e" "e" "e" "e"))
;; Loading (DEFTEST FORMAT.COND:.7 (LOOP FOR I FROM -1 TO 10 COLLECT (FORMAT NIL "~v[a~;b~;c~;d~:;e~]" NIL I)) ("e" "a" "b" "c" "d" "e" "e" "e" "e" "e" "e" "e"))
;; Loading (DEFTEST FORMATTER.COND:.7 (LET ((FN (FORMATTER "~v[a~;b~;c~;d~:;e~]"))) (LOOP FOR I FROM -1 TO 10 COLLECT (FORMATTER-CALL-TO-STRING FN NIL I))) ("e" "a" "b" "c" "d" "e" "e" "e" "e" "e" "e" "e"))
;; Loading (DEF-FORMAT-TEST FORMAT.COND:.8 "~#[A~:;B~]" NIL "A")
;; Loading (DEF-FORMAT-TEST FORMAT.COND:.9 "~#[A~:;B~]" (NIL NIL) "B" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:COND.1 "~:[a~;b~]" (NIL) "a")
;; Loading (DEFTEST FORMAT.:COND.2 (LOOP FOR X IN *MINI-UNIVERSE* FOR S = (FORMAT NIL "~:[a~;b~]" X) WHEN (AND X (NOT (STRING= S "b"))) COLLECT (LIST X S)) NIL)
;; Loading (DEFTEST FORMATTER.:COND.2 (LET ((FN (FORMATTER "~:[a~;b~]"))) (LOOP FOR X IN *MINI-UNIVERSE* FOR S = (FORMATTER-CALL-TO-STRING FN X) WHEN (AND X (NOT (STRING= S "b"))) COLLECT (LIST X S))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.@COND.1 "~@[X~]Y~A" (1) "XY1")
;; Loading (DEF-FORMAT-TEST FORMAT.@COND.2 "~@[X~]Y~A" (NIL 2) "Y2")
;; Loading (LOAD "format-brace.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-brace.lsp 81F6F887>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.{.1 (CONCATENATE (QUOTE STRING) "~{~" (STRING #\Newline) "~}") (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.1A "~{~}" ("" NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.1B "~0{~}" ("" (QUOTE (1 2 3))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.2 "~{ ~}" (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.3 "~{X Y Z~}" (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.4 "~{~A~}" ((QUOTE (1 2 3 4))) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.{.5 "~{~{~A~}~}" ((QUOTE ((1 2 3) (4 5) (6 7 8)))) "12345678")
;; Loading (DEF-FORMAT-TEST FORMAT.{.6 "~{~1{~A~}~}" ((QUOTE ((1 2 3) (4 5) (6 7 8)))) "146")
;; Loading (DEF-FORMAT-TEST FORMAT.{.7 (CONCATENATE (QUOTE STRING) "~1{~" (STRING #\Newline) "~}") (NIL) "")
;; Loading (DEFTEST FORMAT.{.8 (LOOP FOR I FROM 0 TO 10 FOR S = (FORMAT NIL "~v{~A~}" I (QUOTE (1 2 3 4 5 6 7 8 9 0))) UNLESS (STRING= S (SUBSEQ "1234567890" 0 I)) COLLECT (LIST I S)) NIL)
;; Loading (DEFTEST FORMATTER.{.8 (LET ((FN (FORMATTER "~V{~A~}"))) (LOOP FOR I FROM 0 TO 10 FOR S = (FORMATTER-CALL-TO-STRING FN I (QUOTE (1 2 3 4 5 6 7 8 9 0))) UNLESS (STRING= S (SUBSEQ "1234567890" 0 I)) COLLECT (LIST I S))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.{.9 "~#{~A~}" ((QUOTE (1 2 3 4 5 6 7)) NIL NIL NIL) "1234" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.{.15 "~0{~}" ("~A" (QUOTE (1 2 3))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.16 "~1{~}" ("~A" (QUOTE (4 5 6))) "4")
;; Loading (DEFTEST FORMAT.{.17 (FORMAT NIL "~{~}" (FORMATTER "") NIL) "")
;; Loading (DEFTEST FORMAT.{.18 (FORMAT NIL "~1{~}" (FORMATTER "") (QUOTE (1 2 3 4))) "")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST FORMAT.{.19 (FORMAT NIL "~{~}" (FORMATTER "~A") (QUOTE (1 2 3 4))) "1234")
;; Loading (DEFTEST FORMAT.{.20 (FORMAT NIL "~3{~}" (FORMATTER "~A") (QUOTE (1 2 3 4))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.{.21 "~V{~}" (2 "~A" (QUOTE (1 2 3 4 5))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.{.22 "~#{~}" ("~A" (QUOTE (1 2 3 4 5))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.{.23 "~{FOO~:}" (NIL) "FOO")
;; Loading (DEF-FORMAT-TEST FORMAT.{.24 "~{~A~:}" ((QUOTE (1))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.{.25 "~{~A~:}" ((QUOTE (1 2))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.{.26 "~{~A~:}" ((QUOTE (1 2 3))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.{.27 "~0{FOO~:}" (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.28 "~V{FOO~:}" (0 NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.29 "~1{FOO~:}" (NIL) "FOO")
;; Loading (DEF-FORMAT-TEST FORMAT.{.30 "~2{FOO~:}" (NIL) "FOO")
;; Loading (DEF-FORMAT-TEST FORMAT.{.31 (CONCATENATE (QUOTE STRING) "~2{~" (STRING #\Newline) "~:}") (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.32 "~2{FOO~}" (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.{.33 "~v{~a~}" (NIL (QUOTE (1 2 3 4 5 6 7))) "1234567")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.1 "~:{(~A ~A)~}" ((QUOTE ((1 2 3) (4 5) (6 7 8)))) "(1 2)(4 5)(6 7)")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.2 (CONCATENATE (QUOTE STRING) "~:{~" (STRING #\Newline) "~}") (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.3 "~:{~}" ("" NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.4 "~:{~}" ("~A" NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.5 "~:{~}" ("X" (QUOTE (NIL (1 2) (3)))) "XXX")
;; Loading (DEFTEST FORMAT.:{.6 (FORMAT NIL "~:{~}" (FORMATTER "~A") (QUOTE ((1 2) (3) (4 5 6)))) "134")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.7 "~0:{XYZ~}" ((QUOTE ((1)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.8 "~2:{XYZ~}" ((QUOTE ((1)))) "XYZ")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.9 "~2:{~A~}" ((QUOTE ((1) (2)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.10 "~2:{~A~}" ((QUOTE ((1 X) (2 Y) (3 Z)))) "12")
;; Loading (DEFTEST FORMAT.:{.11 (LOOP FOR I FROM 0 TO 10 COLLECT (FORMAT NIL "~v:{~A~}" I (QUOTE ((1) (2) (3 X) (4 Y Z) (5) (6))))) ("" "1" "12" "123" "1234" "12345" "123456" "123456" "123456" "123456" "123456"))
;; Loading (DEFTEST FORMATTER.:{.11 (LET ((FN (FORMATTER "~v:{~A~}"))) (LOOP FOR I FROM 0 TO 10 COLLECT (FORMATTER-CALL-TO-STRING FN I (QUOTE ((1) (2) (3 X) (4 Y Z) (5) (6)))))) ("" "1" "12" "123" "1234" "12345" "123456" "123456" "123456" "123456" "123456"))
;; Loading (DEF-FORMAT-TEST FORMAT.:{.12 "~V:{X~}" (NIL (QUOTE ((1) (2) (3) NIL (5)))) "XXXXX")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.13 "~#:{~A~}" ((QUOTE ((1) (2) (3) (4) (5))) (QUOTE FOO) (QUOTE BAR)) "123" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:{.14 "~:{~A~:}" ((QUOTE ((1 X) (2 Y) (3) (4 A B)))) "1234")
;; Loading (DEFTEST FORMAT.:{.15 (LOOP FOR I FROM 0 TO 10 COLLECT (FORMAT NIL "~v:{~A~:}" I (QUOTE ((1 X) (2 Y) (3) (4 A B))))) ("" "1" "12" "123" "1234" "1234" "1234" "1234" "1234" "1234" "1234"))
;; Loading (DEFTEST FORMATTER.:{.15 (LET ((FN (FORMATTER "~v:{~A~:}"))) (LOOP FOR I FROM 0 TO 10 COLLECT (FORMATTER-CALL-TO-STRING FN I (QUOTE ((1 X) (2 Y) (3) (4 A B)))))) ("" "1" "12" "123" "1234" "1234" "1234" "1234" "1234" "1234" "1234"))
;; Loading (DEF-FORMAT-TEST FORMAT.:{.16 "~:{ABC~:}" ((QUOTE (NIL))) "ABC")
;; Loading (DEF-FORMAT-TEST FORMAT.:{.17 "~v:{ABC~:}" (NIL (QUOTE (NIL))) "ABC")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.1 (CONCATENATE (QUOTE STRING) "~@{~" (STRING #\Newline) "~}") NIL "")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.1A "~@{~}" ("") "")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.2 "~@{ ~}" NIL "")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.3 "~@{X ~A Y Z~}" (NIL) "X NIL Y Z")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.4 "~@{~A~}" (1 2 3 4) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.5 "~@{~{~A~}~}" ((QUOTE (1 2 3)) (QUOTE (4 5)) (QUOTE (6 7 8))) "12345678")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.6 "~@{~1{~A~}~}" ((QUOTE (1 2 3)) (QUOTE (4 5)) (QUOTE (6 7 8))) "146")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.7 "~1@{FOO~}" NIL "")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.8 "~v@{~A~}" (NIL 1 4 7) "147")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.9 "~#@{~A~}" (1 2 3) "123")
;; Loading (DEFTEST FORMAT.@{.10 (LOOP FOR I FROM 0 TO 10 FOR X = NIL THEN (CONS I X) COLLECT (APPLY (FUNCTION FORMAT) NIL "~v@{~A~}" I (REVERSE X))) ("" "1" "12" "123" "1234" "12345" "123456" "1234567" "12345678" "123456789" "12345678910"))
;; Loading (DEFTEST FORMATTER.@{.10 (LET ((FN (FORMATTER "~v@{~A~}"))) (LOOP FOR I FROM 0 TO 10 FOR X = NIL THEN (CONS I X) FOR REST = (LIST (QUOTE A) (QUOTE B) (QUOTE C)) COLLECT (WITH-OUTPUT-TO-STRING (S) (ASSERT (EQUAL (APPLY FN S I (APPEND (REVERSE X) REST)) REST))))) ("" "1" "12" "123" "1234" "12345" "123456" "1234567" "12345678" "123456789" "12345678910"))
;; Loading (DEF-FORMAT-TEST FORMAT.@{.11 "~@{X~:}" NIL "X")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.12 "~@{~}" ((FORMATTER "X~AY") 1) "X1Y")
;; Loading (DEF-FORMAT-TEST FORMAT.@{.13 "~v@{~}" (1 (FORMATTER "X") (QUOTE FOO)) "X" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:@{.1 (CONCATENATE (QUOTE STRING) "~:@{~" (STRING #\Newline) "~}") NIL "")
;; Loading (DEF-FORMAT-TEST FORMAT.:@{.2 "~:@{~A~}" ((QUOTE (1 2)) (QUOTE (3)) (QUOTE (4 5 6))) "134")
;; Loading (DEF-FORMAT-TEST FORMAT.:@{.3 "~:@{(~A ~A)~}" ((QUOTE (1 2 4)) (QUOTE (3 7)) (QUOTE (4 5 6))) "(1 2)(3 7)(4 5)")
;; Loading (DEF-FORMAT-TEST FORMAT.:@{.4 "~:@{~}" ("(~A ~A)" (QUOTE (1 2 4)) (QUOTE (3 7)) (QUOTE (4 5 6))) "(1 2)(3 7)(4 5)")
;; Loading (DEF-FORMAT-TEST FORMAT.:@{.5 "~:@{~}" ((FORMATTER "(~A ~A)") (QUOTE (1 2 4)) (QUOTE (3 7)) (QUOTE (4 5 6))) "(1 2)(3 7)(4 5)")
;; Loading (DEF-FORMAT-TEST FORMAT.:@.6 "~:@{~A~:}" ((QUOTE (1 A)) (QUOTE (2 B)) (QUOTE (3)) (QUOTE (4 C D))) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.:@.7 "~0:@{~A~:}" ((QUOTE (1 A)) (QUOTE (2 B)) (QUOTE (3)) (QUOTE (4 C D))) "" 4)
;; Loading (DEF-FORMAT-TEST FORMAT.:@.8 "~#:@{A~:}" (NIL NIL NIL) "AAA")
;; Loading (DEF-FORMAT-TEST FORMAT.:@.9 "~v:@{~A~}" (NIL (QUOTE (1)) (QUOTE (2)) (QUOTE (3))) "123")
;; Loading (DEFTEST FORMAT.:@.10 (LOOP FOR I FROM 0 TO 10 FOR X = NIL THEN (CONS (LIST I) X) COLLECT (APPLY (FUNCTION FORMAT) NIL "~V:@{~A~}" I (REVERSE X))) ("" "1" "12" "123" "1234" "12345" "123456" "1234567" "12345678" "123456789" "12345678910"))
;; Loading (DEFTEST FORMATTER.:@.10 (LET ((FN (FORMATTER "~V@:{~A~}"))) (LOOP FOR I FROM 0 TO 10 FOR X = NIL THEN (CONS (LIST I) X) FOR REST = (LIST (QUOTE A) (QUOTE B)) COLLECT (WITH-OUTPUT-TO-STRING (S) (ASSERT (EQUAL (APPLY FN S I (APPEND (REVERSE X) REST)) REST))))) ("" "1" "12" "123" "1234" "12345" "123456" "1234567" "12345678" "123456789" "12345678910"))
;; Loading (DEFTEST FORMAT.{.ERROR.1 (SIGNALS-TYPE-ERROR X (QUOTE A) (FORMAT NIL "~{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.{.ERROR.2 (SIGNALS-TYPE-ERROR X 1 (FORMAT NIL "~{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.{.ERROR.3 (SIGNALS-TYPE-ERROR X "foo" (FORMAT NIL "~{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.{.ERROR.4 (SIGNALS-TYPE-ERROR X #*01101 (FORMAT NIL "~{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.{.ERROR.5 (SIGNALS-ERROR (FORMAT NIL "~{~A~}" (QUOTE (X Y . Z))) TYPE-ERROR) T)
;; Loading (DEFTEST FORMAT.:{.ERROR.1 (SIGNALS-ERROR (FORMAT NIL "~:{~A~}" (QUOTE (X))) TYPE-ERROR) T)
;; Loading (DEFTEST FORMAT.:{.ERROR.2 (SIGNALS-TYPE-ERROR X (QUOTE X) (FORMAT NIL "~:{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.:{.ERROR.3 (SIGNALS-ERROR (FORMAT NIL "~:{~A~}" (QUOTE ((X) . Y))) TYPE-ERROR) T)
;; Loading (DEFTEST FORMAT.:{.ERROR.4 (SIGNALS-ERROR (FORMAT NIL "~:{~A~}" (QUOTE ("X"))) TYPE-ERROR) T)
;; Loading (DEFTEST FORMAT.:{.ERROR.5 (SIGNALS-ERROR (FORMAT NIL "~:{~A~}" (QUOTE (#(X Y Z)))) TYPE-ERROR) T)
;; Loading (DEFTEST FORMAT.:@{.ERROR.1 (SIGNALS-TYPE-ERROR X (QUOTE X) (FORMAT NIL "~:@{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.:@{.ERROR.2 (SIGNALS-TYPE-ERROR X 0 (FORMAT NIL "~:@{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.:@{.ERROR.3 (SIGNALS-TYPE-ERROR X #*01101 (FORMAT NIL "~:@{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.:@{.ERROR.4 (SIGNALS-TYPE-ERROR X "abc" (FORMAT NIL "~:@{~A~}" X)) T)
;; Loading (DEFTEST FORMAT.:@{.ERROR.5 (SIGNALS-ERROR (FORMAT NIL "~:@{~A ~A~}" (QUOTE (X . Y))) TYPE-ERROR) T)
;; Loading (LOAD "format-question.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-question.lsp C1DF6647>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.?.1 "~?" ("" NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.?.2 "~?" ("~A" (QUOTE (1))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.?.3 "~?" ("" (QUOTE (1))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.?.4 "~? ~A" ("" (QUOTE (1)) 2) " 2")
;; Loading (DEF-FORMAT-TEST FORMAT.?.5 "a~?z" ("b~?y" (QUOTE ("c~?x" ("~A" (1))))) "abc1xyz")
;; Loading (DEF-FORMAT-TEST FORMAT.@?.1 "~@?" ("") "")
;; Loading (DEF-FORMAT-TEST FORMAT.@?.2 "~@?" ("~A" 1) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.@?.3 "~@? ~A" ("<~A>" 1 2) "<1> 2")
;; Loading (DEF-FORMAT-TEST FORMAT.@?.4 "a~@?z" ("b~@?y" "c~@?x" "~A" 1) "abc1xyz")
;; Loading (DEF-FORMAT-TEST FORMAT.@?.5 "~{~A~@?~A~}" ((QUOTE (1 "~4*" 2 3 4 5 6))) "16")
;; Loading (LOAD "format-paren.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-paren.lsp C1E5DA97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.1 "~(XXyy~AuuVV~)" ("ABc dEF ghI") "xxyyabc def ghiuuvv")
;; Loading (DEFTEST FORMAT.PAREN.2 (LOOP FOR I FROM 0 BELOW (MIN CHAR-CODE-LIMIT (ASH 1 16)) FOR C = (CODE-CHAR I) WHEN (AND C (EQL (CHAR-CODE C) (CHAR-INT C)) (UPPER-CASE-P C) (LET ((S1 (FORMAT NIL "~(~c~)" C)) (S2 (STRING (CHAR-DOWNCASE C)))) (IF (OR (NOT (EQL (LENGTH S1) 1)) (NOT (EQL (LENGTH S2) 1)) (NOT (EQL (ELT S1 0) (ELT S2 0)))) (LIST I C S1 S2) NIL))) COLLECT IT) NIL)
;; Loading (DEFTEST FORMATTER.PAREN.2 (LET ((FN (FORMATTER "~(~c~)"))) (LOOP FOR I FROM 0 BELOW (MIN CHAR-CODE-LIMIT (ASH 1 16)) FOR C = (CODE-CHAR I) WHEN (AND C (EQL (CHAR-CODE C) (CHAR-INT C)) (UPPER-CASE-P C) (LET ((S1 (FORMATTER-CALL-TO-STRING FN C)) (S2 (STRING (CHAR-DOWNCASE C)))) (IF (OR (NOT (EQL (LENGTH S1) 1)) (NOT (EQL (LENGTH S2) 1)) (NOT (EQL (ELT S1 0) (ELT S2 0)))) (LIST I C S1 S2) NIL))) COLLECT IT)) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.3 "~@(this is a TEST.~)" NIL "This is a test.")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.4 "~@(!@#$%^&*this is a TEST.~)" NIL "!@#$%^&*This is a test.")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.5 "~:(this is a TEST.~)" NIL "This Is A Test.")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.6 "~:(this is7a TEST.~)" NIL "This Is7a Test.")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.7 "~:@(this is AlSo A teSt~)" NIL "THIS IS ALSO A TEST")
;; Loading (DEFTEST FORMAT.PAREN.8 (LOOP FOR I FROM 0 BELOW (MIN CHAR-CODE-LIMIT (ASH 1 16)) FOR C = (CODE-CHAR I) WHEN (AND C (EQL (CHAR-CODE C) (CHAR-INT C)) (LOWER-CASE-P C) (LET ((S1 (FORMAT NIL "~@:(~c~)" C)) (S2 (STRING (CHAR-UPCASE C)))) (IF (OR (NOT (EQL (LENGTH S1) 1)) (NOT (EQL (LENGTH S2) 1)) (NOT (EQL (ELT S1 0) (ELT S2 0)))) (LIST I C S1 S2) NIL))) COLLECT IT) NIL)
;; Loading (DEFTEST FORMATTER.PAREN.8 (LET ((FN (FORMATTER "~@:(~c~)"))) (LOOP FOR I FROM 0 BELOW (MIN CHAR-CODE-LIMIT (ASH 1 16)) FOR C = (CODE-CHAR I) WHEN (AND C (EQL (CHAR-CODE C) (CHAR-INT C)) (LOWER-CASE-P C) (LET ((S1 (FORMATTER-CALL-TO-STRING FN C)) (S2 (STRING (CHAR-UPCASE C)))) (IF (OR (NOT (EQL (LENGTH S1) 1)) (NOT (EQL (LENGTH S2) 1)) (NOT (EQL (ELT S1 0) (ELT S2 0)))) (LIST I C S1 S2) NIL))) COLLECT IT)) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.9 "~(aBc ~:(def~) GHi~)" NIL "abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.10 "~(aBc ~(def~) GHi~)" NIL "abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.11 "~@(aBc ~:(def~) GHi~)" NIL "Abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.12 "~(aBc ~@(def~) GHi~)" NIL "abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.13 "~(aBc ~:(def~) GHi~)" NIL "abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.14 "~:(aBc ~(def~) GHi~)" NIL "Abc Def Ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.15 "~:(aBc ~:(def~) GHi~)" NIL "Abc Def Ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.16 "~:(aBc ~@(def~) GHi~)" NIL "Abc Def Ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.17 "~:(aBc ~@:(def~) GHi~)" NIL "Abc Def Ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.18 "~@(aBc ~(def~) GHi~)" NIL "Abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.19 "~@(aBc ~:(def~) GHi~)" NIL "Abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.20 "~@(aBc ~@(def~) GHi~)" NIL "Abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.21 "~@(aBc ~@:(def~) GHi~)" NIL "Abc def ghi")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.22 "~:@(aBc ~(def~) GHi~)" NIL "ABC DEF GHI")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.23 "~@:(aBc ~:(def~) GHi~)" NIL "ABC DEF GHI")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.24 "~:@(aBc ~@(def~) GHi~)" NIL "ABC DEF GHI")
;; Loading (DEF-FORMAT-TEST FORMAT.PAREN.25 "~@:(aBc ~@:(def~) GHi~)" NIL "ABC DEF GHI")
;; Loading (LOAD "format-p.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-p.lsp C1F8EFD7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.P.1 "~p" (1) "")
;; Loading (DEF-FORMAT-TEST FORMAT.P.2 "~P" (2) "s")
;; Loading (DEF-FORMAT-TEST FORMAT.P.3 "~p" (0) "s")
;; Loading (DEF-FORMAT-TEST FORMAT.P.4 "~P" (1.0) "s")
;; Loading (DEFTEST FORMAT.P.5 (LOOP FOR X IN *UNIVERSE* FOR S = (FORMAT NIL "~p" X) UNLESS (OR (EQL X 1) (STRING= S "s")) COLLECT (LIST X S)) NIL)
;; Loading (DEFTEST FORMATTER.P.5 (LET ((FN (FORMATTER "~p"))) (LOOP FOR X IN *UNIVERSE* FOR S = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (EQL X 1) (STRING= S "s")) COLLECT (LIST X S))) NIL)
;; Loading (DEF-FORMAT-TEST FORMAT.P.6 "~D cat~:P" (1) "1 cat")
;; Loading (DEF-FORMAT-TEST FORMAT.P.7 "~D cat~:p" (2) "2 cats")
;; Loading (DEF-FORMAT-TEST FORMAT.P.8 "~D cat~:P" (0) "0 cats")
;; Loading (DEF-FORMAT-TEST FORMAT.P.9 "~D cat~:p" ("No") "No cats")
;; Loading (DEF-FORMAT-TEST FORMAT.P.10 "~D penn~:@P" (1) "1 penny")
;; Loading (DEF-FORMAT-TEST FORMAT.P.11 "~D penn~:@p" (2) "2 pennies")
;; Loading (DEF-FORMAT-TEST FORMAT.P.12 "~D penn~@:P" (0) "0 pennies")
;; Loading (DEF-FORMAT-TEST FORMAT.P.13 "~D penn~@:p" ("No") "No pennies")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-FORMAT-TEST FORMAT.P.14 "~@p" (1) "y")
;; Loading (DEF-FORMAT-TEST FORMAT.P.15 "~@P" (2) "ies")
;; Loading (DEF-FORMAT-TEST FORMAT.P.16 "~@p" (0) "ies")
;; Loading (DEF-FORMAT-TEST FORMAT.P.17 "~@P" (1.0) "ies")
;; Loading (DEFTEST FORMAT.P.18 (LOOP FOR X IN *UNIVERSE* FOR S = (FORMAT NIL "~@p" X) UNLESS (OR (EQL X 1) (STRING= S "ies")) COLLECT (LIST X S)) NIL)
;; Loading (DEFTEST FORMATTER.P.18 (LET ((FN (FORMATTER "~@P"))) (LOOP FOR X IN *UNIVERSE* FOR S = (FORMATTER-CALL-TO-STRING FN X) UNLESS (OR (EQL X 1) (STRING= S "ies")) COLLECT (LIST X S))) NIL)
;; Loading (LOAD "format-circumflex.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-circumflex.lsp 81C49547>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.1 "~{X ~A~^ Y ~A~^ ~}" ((QUOTE (1 2 3 4 5))) "X 1 Y 2 X 3 Y 4 X 5")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.2 "~{X ~A~^ Y ~A~^ ~}" ((QUOTE (1 2 3 4))) "X 1 Y 2 X 3 Y 4")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.3 "~1{~A~^~A~}" ((QUOTE (1))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.4 "~0{~A~^~A~}" ((QUOTE (1))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.5 "~1{~A~^~A~}" ((QUOTE (1 2 3))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.6 "~{~A~A~0^~A~}" ((QUOTE (1 2 3 4 5 6))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.7 "~{~A~A~v^~A~}" ((QUOTE (1 2 3 4 5 6 0 7 8 9 10 11 12))) "12456")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.8 "~{~#,3^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10))) "1234567")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.9 "~{~2,#^~A~}~A" ((QUOTE (1 2 3 4 5 6 7 8 9 10)) 0) "123456780")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.10 "~{~#,#^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.11 "~{~#,#,#^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.12 "~{~#,1,2^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10))) "123456789")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.13 "~{~#,#,v^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10))) "246")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.14 "~{~#,#,v^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10 11))) "246")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.15 "~{~#,#,v^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10 11 12))) "246")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.16 "~{~#,#,v^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10 11 12 13))) "246")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.17 "~{~#,#,v^~A~}" ((QUOTE (1 2 3 4 5 6 7 8 9 10 11 12 13 14))) "2468")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.18 "~{~v,v^~A~}" ((LIST (1+ MOST-POSITIVE-FIXNUM) (1+ MOST-POSITIVE-FIXNUM) 1)) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.19 "~{~0,v,v^~A~}" ((LIST (1+ MOST-POSITIVE-FIXNUM) (1+ MOST-POSITIVE-FIXNUM) 1)) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.20 "~{~0,v,v^~A~}" ((LIST (1+ MOST-POSITIVE-FIXNUM) MOST-POSITIVE-FIXNUM 1)) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.21 "~{~1,v^~A~}" ((QUOTE (NIL 8 NIL 7 0 6 1 5))) "876")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.22 "~{~0,v^~A~}" ((QUOTE (3 8 1 7 3 6 NIL 5))) "876")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.23 "~{~1,2,v^~A~}" ((QUOTE (0 1 0 2 0 3 3 4))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.24 "~{~1,2,v^~A~}" ((QUOTE (0 1 0 2 0 3 NIL 4))) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.25 "~{~1,1,v^~A~}" ((QUOTE (0 1 0 2 0 3 NIL 4))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.26 "~{~'X^~A~}" ((QUOTE (1 2 3))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.27 "~{~v,'X^~A~}" ((QUOTE (0 1 #\x 2 NIL 3 #\X 4 0 5))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.28 "~{~'X,v^~A~}" ((QUOTE (0 1 #\x 2 NIL 3 #\X 4 0 5))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.29 "~{~v,v^~A~}" ((QUOTE (0 2 1 #\x #\X 2 5 #\X 3 #\y #\y 4 1 2 5))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.30 "~{~',,',^~A~}" ((QUOTE (1 2 3))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.31 "~{~1,v,v^~A~}" ((QUOTE (#\a NIL 0))) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.32 "~{~v,1,v^~A~}" ((QUOTE (#\a NIL 0))) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.{.33 "~{~v,v,v^~A~}" ((QUOTE (#\a #\a NIL 0))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.1 "~:{~A~^~A~A~}" ((QUOTE ((1) (2 3 4) (5 6 7 8)))) "1234567")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.2 "~:{~A~0^~A~A~}" ((QUOTE ((1) (2 3 4) (5 6 7 8)))) "125")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.3 "~:{~#^~A~}" ((QUOTE ((1) (2 3 4) NIL (5 6 7 8))) NIL) "125" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.4 "~:{~#^~A~#^~A~#^~A~#^~A~}" ((QUOTE ((1) (2 3 4) NIL (5 6 7 8))) NIL) "12345678" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.5 "~:{~v^~A~}" ((QUOTE ((1 2 3) (0) (2 4) (0 5) (1 6 7 8)))) "246")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.6 "~:{~v^~A~}" ((QUOTE ((NIL) (NIL 1) (1 2)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.7 "~:{~v^~A~}" ((QUOTE ((#\x 1) (#\y 2) (0 3) (1 4)))) "124")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.8 "~:{~v,3^~A~}" ((QUOTE ((1 1) (2 0) (3 4) (5 6)))) "106")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.9 "~:{~3,v^~A~}" ((QUOTE ((1 1) (2 0) (3 4) (5 6)))) "106")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.10 "~:{~v,3^~A~}" ((QUOTE ((#\x 1)))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.11 "~:{~2,v^~A~}" ((QUOTE ((#\x 1)))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.12 "~:{~v,v^~A~}" ((QUOTE ((1 2 0) (0 1 1) (1 0 2) (3 3 5) (4 5 6)))) "0126")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.13 "~:{~v,v^~A~}" ((QUOTE ((1 2 0) (#\a #\A 1) (#\A #\A 2) (1 2 3)))) "013")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.14 "~:{~'x,3^~A~}" ((QUOTE ((1)))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.15 "~:{~3,'x^~A~}" ((QUOTE ((1)))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.16 "~:{~'x,'x^~A~}" ((QUOTE ((1)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.17 "~:{~#,1^~A~}" ((QUOTE ((1) (2 10) (3 A B) (4) (5 X) (6) (7 8)))) "2357")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.18 "~:{~1,#^~A~}" ((QUOTE ((1) (2 10) (3 A B) (4) (5 X) (6) (7 8)))) "2357")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.19 "~:{~#,#^~A~}" ((QUOTE ((1) NIL (2 10) (3 A B) (4) (5 X) (6) (7 8)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.20 "~:{~0,v^~A~}" ((QUOTE ((0 1) (1 2) (NIL 3) (2 4)))) "24")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.21 "~:{~1,v^~A~}" ((QUOTE ((0 1) (1 2) (NIL 3) (2 4)))) "134")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.22 "~:{~1,1,1^~A~}" ((QUOTE ((1) (2 3) (4 5 6) (7 8 9 0)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.23 "~:{~1,2,3^~A~}" ((QUOTE ((1) (2 3) (4 5 6) (7 8 9 0)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.24 "~:{~1,2,1^~A~}" ((QUOTE ((1) (2 3) (4 5 6) (7 8 9 0)))) "1247")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.25 "~:{~1,0,1^~A~}" ((QUOTE ((1) (2 3) (4 5 6) (7 8 9 0)))) "1247")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.26 "~:{~3,2,1^~A~}" ((QUOTE ((1) (2 3) (4 5 6) (7 8 9 0)))) "1247")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.27 "~:{~v,2,3^~A~}" ((QUOTE ((1 10) (2 20) (3 30) (4 40)))) "3040")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.28 "~:{~1,v,3^~A~}" ((QUOTE ((0 7) (1 10) (2 20) (3 30) (4 40)))) "740")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.29 "~:{~1,2,v^~A~}" ((QUOTE ((0 0) (1 10) (2 20) (3 30) (4 40) (0 50)))) "01050")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.30 "~:{~1,2,v^~A~}" ((QUOTE ((NIL 0)))) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.31 "~:{~#,3,3^~A~}" ((QUOTE ((1) (2 1) (3 2 1) (4 3 2 1) (5 4 3 2 1)))) "45")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.32 "~:{~2,#,3^~A~}" ((QUOTE ((1) (2 1) (3 2 1) (4 3 2 1) (5 4 3 2 1)))) "145")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.33 "~:{~0,3,#^~A~}" ((QUOTE ((1) (2 1) (3 2 1) (4 3 2 1) (5 4 3 2 1)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.34 "~:{~#,#,3^~A~}" ((QUOTE ((1) (2 1) (3 2 1) (4 3 2 1) (5 4 3 2 1)))) "45")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.35 "~:{~3,#,#^~A~}" ((QUOTE ((1) (2 1) (3 2 1) (4 3 2 1) (5 4 3 2 1)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.36 "~:{~#,3,#^~A~}" ((QUOTE ((1) (2 1) (3 2 1) (4 3 2 1) (5 4 3 2 1)))) "1245")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.37 "~:{~#,#,#^~A~}" ((QUOTE ((1) (2 1) (3 2 1) (4 3 2 1) (5 4 3 2 1)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.38 "~:{~1,v,v^~A~}" ((QUOTE ((#\a NIL 0)))) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:{.39 "~:{~v,1,v^~A~}" ((QUOTE ((#\a NIL 0)))) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.1 "~@{X ~A~^ Y ~A~^ ~}" (1 2 3 4 5) "X 1 Y 2 X 3 Y 4 X 5")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.2 "~@{X ~A~^ Y ~A~^ ~}" (1 2 3 4) "X 1 Y 2 X 3 Y 4")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.3 "~1@{~A~^~A~}" (1) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.4 "~0@{~A~^~A~}" (1) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.5 "~1@{~A~^~A~}" (1 2 3) "12" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.6 "~@{~A~A~0^~A~}" (1 2 3 4 5 6) "12" 4)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.7 "~@{~A~A~v^~A~}" (1 2 3 4 5 6 0 7 8 9 10 11 12) "12456" 6)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.8 "~@{~#,3^~A~}" (1 2 3 4 5 6 7 8 9 10) "1234567" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.9 "~@{~2,#^~A~}X~A" (1 2 3 4 5 6 7 8 9 10) "12345678X9" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.10 "~@{~#,#^~A~}" (1 2 3 4 5 6 7 8 9 10) "" 10)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.11 "~@{~#,#,#^~A~}" (1 2 3 4 5 6 7 8 9 10) "" 10)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.12 "~@{~#,1,2^~A~}" (1 2 3 4 5 6 7 8 9 10) "123456789" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.13 "~@{~#,#,v^~A~}" (1 2 3 4 5 6 7 8 9 10) "246" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.14 "~@{~#,#,v^~A~}" (1 2 3 4 5 6 7 8 9 10 11) "246" 4)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.15 "~@{~#,#,v^~A~}" (1 2 3 4 5 6 7 8 9 10 11 12) "246" 5)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.16 "~@{~#,#,v^~A~}" (1 2 3 4 5 6 7 8 9 10 11 12 13) "246" 6)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.17 "~@{~#,#,v^~A~}" (1 2 3 4 5 6 7 8 9 10 11 12 13 14) "2468" 5)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.18 "~@{~v,v^~A~}" ((1+ MOST-POSITIVE-FIXNUM) (1+ MOST-POSITIVE-FIXNUM) 1) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.19 "~@{~0,v,v^~A~}" ((1+ MOST-POSITIVE-FIXNUM) (1+ MOST-POSITIVE-FIXNUM) 1) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.20 "~@{~0,v,v^~A~}" ((1+ MOST-POSITIVE-FIXNUM) MOST-POSITIVE-FIXNUM 1) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.21 "~@{~1,v^~A~}" (NIL 8 NIL 7 0 6 1 5) "876" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.22 "~@{~0,v^~A~}" (3 8 1 7 3 6 NIL 5) "876" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.23 "~@{~1,2,v^~A~}" (0 1 0 2 0 3 3 4) "123" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.24 "~@{~1,2,v^~A~}" (0 1 0 2 0 3 NIL 4) "1234")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.25 "~@{~1,1,v^~A~}" (0 1 0 2 0 3 NIL 4) "123" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.26 "~@{~'X^~A~}" (1 2 3) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.27 "~@{~v,'X^~A~}" (0 1 #\x 2 NIL 3 #\X 4 0 5) "123" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.28 "~@{~'X,v^~A~}" (0 1 #\x 2 NIL 3 #\X 4 0 5) "123" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.29 "~@{~v,v^~A~}" (0 2 1 #\x #\X 2 5 #\X 3 #\y #\y 4 1 2 5) "123" 4)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.30 "~@{~',,',^~A~}" (1 2 3) "" 3)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.31 "~@{~1,v,v^~A~}" (#\a NIL 0) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.32 "~@{~v,1,v^~A~}" (#\a NIL 0) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@{.33 "~@{~v,v,v^~A~}" (#\a #\a NIL 0) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.1 "~:@{~A~^~A~A~}" ((QUOTE (1)) (QUOTE (2 3 4)) (QUOTE (5 6 7 8))) "1234567")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.2 "~@:{~A~0^~A~A~}" ((QUOTE (1)) (QUOTE (2 3 4)) (QUOTE (5 6 7 8))) "125")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.3 "~:@{~#^~A~}" ((QUOTE (1)) (QUOTE (2 3 4)) NIL (QUOTE (5 6 7 8)) NIL) "125")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.4 "~@:{~#^~A~#^~A~#^~A~#^~A~}" ((QUOTE (1)) (QUOTE (2 3 4)) NIL (QUOTE (5 6 7 8)) NIL) "12345678")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.5 "~:@{~v^~A~}" ((QUOTE (1 2 3)) (QUOTE (0)) (QUOTE (2 4)) (QUOTE (0 5)) (QUOTE (1 6 7 8))) "246")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.6 "~:@{~v^~A~}" ((QUOTE (NIL)) (QUOTE (NIL 1)) (QUOTE (1 2))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.7 "~:@{~v^~A~}" ((QUOTE (#\x 1)) (QUOTE (#\y 2)) (QUOTE (0 3)) (QUOTE (1 4))) "124")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.8 "~:@{~v,3^~A~}" ((QUOTE (1 1)) (QUOTE (2 0)) (QUOTE (3 4)) (QUOTE (5 6))) "106")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.9 "~@:{~3,v^~A~}" ((QUOTE (1 1)) (QUOTE (2 0)) (QUOTE (3 4)) (QUOTE (5 6))) "106")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.10 "~:@{~v,3^~A~}" ((QUOTE (#\x 1))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.11 "~:@{~2,v^~A~}" ((QUOTE (#\x 1))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.12 "~:@{~v,v^~A~}" ((QUOTE (1 2 0)) (QUOTE (0 1 1)) (QUOTE (1 0 2)) (QUOTE (3 3 5)) (QUOTE (4 5 6))) "0126")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.13 "~:@{~v,v^~A~}" ((QUOTE (1 2 0)) (QUOTE (#\a #\A 1)) (QUOTE (#\A #\A 2)) (QUOTE (1 2 3))) "013")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.14 "~:@{~'x,3^~A~}" ((QUOTE (1))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.15 "~:@{~3,'x^~A~}" ((QUOTE (1))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.16 "~:@{~'x,'x^~A~}" ((QUOTE (1))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.17 "~:@{~#,1^~A~}" ((QUOTE (1)) (QUOTE (2 10)) (QUOTE (3 A B)) (QUOTE (4)) (QUOTE (5 X)) (QUOTE (6)) (QUOTE (7 8))) "2357")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.18 "~:@{~1,#^~A~}" ((QUOTE (1)) (QUOTE (2 10)) (QUOTE (3 A B)) (QUOTE (4)) (QUOTE (5 X)) (QUOTE (6)) (QUOTE (7 8))) "2357")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.19 "~:@{~#,#^~A~}" ((QUOTE (1)) (QUOTE NIL) (QUOTE (2 10)) (QUOTE (3 A B)) (QUOTE (4)) (QUOTE (5 X)) (QUOTE (6)) (QUOTE (7 8))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.20 "~:@{~0,v^~A~}" ((QUOTE (0 1)) (QUOTE (1 2)) (QUOTE (NIL 3)) (QUOTE (2 4))) "24")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.21 "~:@{~1,v^~A~}" ((QUOTE (0 1)) (QUOTE (1 2)) (QUOTE (NIL 3)) (QUOTE (2 4))) "134")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.22 "~:@{~1,1,1^~A~}" ((QUOTE (1)) (QUOTE (2 3)) (QUOTE (4 5 6)) (QUOTE (7 8 9 0))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.23 "~:@{~1,2,3^~A~}" ((QUOTE (1)) (QUOTE (2 3)) (QUOTE (4 5 6)) (QUOTE (7 8 9 0))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.24 "~:@{~1,2,1^~A~}" ((QUOTE (1)) (QUOTE (2 3)) (QUOTE (4 5 6)) (QUOTE (7 8 9 0))) "1247")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.25 "~:@{~1,0,1^~A~}" ((QUOTE (1)) (QUOTE (2 3)) (QUOTE (4 5 6)) (QUOTE (7 8 9 0))) "1247")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.26 "~:@{~3,2,1^~A~}" ((QUOTE (1)) (QUOTE (2 3)) (QUOTE (4 5 6)) (QUOTE (7 8 9 0))) "1247")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.27 "~:@{~v,2,3^~A~}" ((QUOTE (1 10)) (QUOTE (2 20)) (QUOTE (3 30)) (QUOTE (4 40))) "3040")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.28 "~:@{~1,v,3^~A~}" ((QUOTE (0 7)) (QUOTE (1 10)) (QUOTE (2 20)) (QUOTE (3 30)) (QUOTE (4 40))) "740")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.29 "~:@{~1,2,v^~A~}" ((QUOTE (0 0)) (QUOTE (1 10)) (QUOTE (2 20)) (QUOTE (3 30)) (QUOTE (4 40)) (QUOTE (0 50))) "01050")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.30 "~:@{~1,2,v^~A~}" ((QUOTE (NIL 0))) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.31 "~:@{~#,3,3^~A~}" ((QUOTE (1)) (QUOTE (2 1)) (QUOTE (3 2 1)) (QUOTE (4 3 2 1)) (QUOTE (5 4 3 2 1))) "45")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.32 "~:@{~2,#,3^~A~}" ((QUOTE (1)) (QUOTE (2 1)) (QUOTE (3 2 1)) (QUOTE (4 3 2 1)) (QUOTE (5 4 3 2 1))) "145")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.33 "~:@{~0,3,#^~A~}" ((QUOTE (1)) (QUOTE (2 1)) (QUOTE (3 2 1)) (QUOTE (4 3 2 1)) (QUOTE (5 4 3 2 1))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.34 "~:@{~#,#,3^~A~}" ((QUOTE (1)) (QUOTE (2 1)) (QUOTE (3 2 1)) (QUOTE (4 3 2 1)) (QUOTE (5 4 3 2 1))) "45")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.35 "~:@{~3,#,#^~A~}" ((QUOTE (1)) (QUOTE (2 1)) (QUOTE (3 2 1)) (QUOTE (4 3 2 1)) (QUOTE (5 4 3 2 1))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.36 "~:@{~#,3,#^~A~}" ((QUOTE (1)) (QUOTE (2 1)) (QUOTE (3 2 1)) (QUOTE (4 3 2 1)) (QUOTE (5 4 3 2 1))) "1245")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.37 "~:@{~#,#,#^~A~}" ((QUOTE (1)) (QUOTE (2 1)) (QUOTE (3 2 1)) (QUOTE (4 3 2 1)) (QUOTE (5 4 3 2 1))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.38 "~:@{~1,v,v^~A~}" ((QUOTE (#\a NIL 0))) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:@{.39 "~:@{~v,1,v^~A~}" ((QUOTE (#\a NIL 0))) "0")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.1 "~:{~:^~A~}" (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.2 "(~:{~A~:^,~})" ((QUOTE ((1) (2) (3)))) "(1,2,3)")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.3 "~:{~:^~A~}" ((QUOTE ((1) (2) (3) (4)))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.4 "~:{~0:^~A~}" ((QUOTE ((1) (2)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.5 "~:{~1:^~A~}" ((QUOTE ((1) (2)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.6 "~:{~'X:^~A~}" ((QUOTE ((1) (2)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.7 "~:{~v:^~A~}" ((QUOTE ((1 8) (2 3 4) (3 1) (0) (6 7) (8 10)))) "831")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.8 "~:{~V:^~A~}" ((QUOTE ((#\X 1) (0 2)))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.9 "~:{~#:^~A~}" ((QUOTE ((1) (2) (3 4) (5 6 7) NIL (8 9 10)))) "1235")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.10 "~:{~1,1:^~A~}" ((QUOTE (NIL (1) (2 3)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.11 "~:{~0,1:^~A~}" ((QUOTE ((1) (2 3)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.12 "~:{~v,1:^~A~}" ((QUOTE ((2 3) (4 5 6) (0 2) (1 7) (9 10)))) "352")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.13 "~:{~1,V:^~A~}" ((QUOTE ((2 3) (4 5 6) (0 2) (1 7) (9 10)))) "352")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.14 "~:{~V,v:^~A~}" ((QUOTE ((0 1 2) (1 0 3) (4 4) NIL (5 6 7)))) "23")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.15 "~:{~#,1:^~A~}" ((QUOTE ((2 3 4) (4 5) (0) (1 7) (9 10)))) "24")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.16 "~:{~1,#:^~A~}" ((QUOTE ((2 3 4) (4 5) (0) (1 7) (9 10)))) "24")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.17 "~:{~#,#:^~A~}" ((QUOTE (NIL))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.18 "~:{~#,#:^~A~}" ((QUOTE ((1)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.19 "~:{~#,v:^~A~}" ((QUOTE ((1 2) (3 4) (2 5 6) (1) (2)))) "245")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.20 "~:{~V,#:^~A~}" ((QUOTE ((0 2) (1 3 4) (1 3) NIL (0 7)))) "23")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.21 "~:{~'X,'Y:^~A~}" ((QUOTE ((1) (2)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.22 "~:{~'X,'X:^~A~}" ((QUOTE ((1) (2)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.23 "~:{~1,2,3:^~A~}" ((QUOTE ((1) (2)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.24 "~:{~1,2,1:^~A~}" ((QUOTE ((1) (2)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.25 "~:{~2,1,3:^~A~}" ((QUOTE ((1) (2)))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.26 "~:{~1,1,v:^~A~}" ((QUOTE ((0 4) (NIL 1) (0 5)))) "4")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.27 "~:{~v,2,2:^~A~}" ((QUOTE ((3 4) (1 1) (4 5)))) "4")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.28 "~:{~1,v,2:^~A~}" ((QUOTE ((0 2) (3 4) (1 1) (4 5)))) "24")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.29 "~:{~V,v,3:^~A~}" ((QUOTE ((1 4 0) (2 1 7) (4 4 8 0) (1 2 6) (9 8 0)))) "078")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.30 "~:{~v,2,v:^~A~}" ((QUOTE ((1 1 0) (3 2 5) (2 1 6) (1 2 0) (10 11 13)))) "056")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.31 "~:{~2,V,v:^~A~}" ((QUOTE ((1 1 0) (3 2 5) (2 1 6) (10 11 13) (0 1 0)))) "056")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.32 "~:{~v,v,V:^~A~}" ((QUOTE ((1 2 1 0) (2 1 1 4) (2 3 1 6) (1 2 3) (0 1 0 8)))) "046")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.33 "~:{~#,2,2:^~A~}" ((QUOTE ((1 2 3) (2 X X) (0 A B C D) (4 5) (5 7 8 9)))) "120")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.34 "~:{~2,#,3:^~A~}" ((QUOTE ((1) (2 3 4 5) (3 4) (4 5 6 7 8) NIL))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.35 "~:{~1,3,#:^~A~}" ((QUOTE ((1) (2 3) (3 4) (4 5 6) (5)))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.36 "~:{~#,#,2:^~A~}" ((QUOTE ((1 2 3) (2 X X) (0 A B C D) (4 5) (5 7 8 9)))) "120")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.37 "~:{~3,#,#:^~A~}" ((QUOTE ((1) (2 3) (3 4) (4 5 6) (5)))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.38 "~:{~#,2,#:^~A~}" ((QUOTE ((1 2 3) (2) (0 A B C D) (4 5) (5 7 8 9)))) "120")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:{.39 "~:{~#,#,#:^~A~}" ((QUOTE ((1 2 3) (2) (0 A B C D) (4 5) (5 7 8 9)))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.1 "~:@{~:^~A~}" NIL "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.2 "(~:@{~A~:^,~})" ((QUOTE (1)) (QUOTE (2)) (QUOTE (3))) "(1,2,3)")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.3 "~:@{~:^~A~}" ((QUOTE (1)) (QUOTE (2)) (QUOTE (3)) (QUOTE (4))) "123")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.4 "~:@{~0:^~A~}" ((QUOTE (1)) (QUOTE (2))) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.5 "~:@{~1:^~A~}" ((QUOTE (1)) (QUOTE (2))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.6 "~:@{~'X:^~A~}" ((QUOTE (1)) (QUOTE (2))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.7 "~:@{~v:^~A~}" ((QUOTE (1 8)) (QUOTE (2 3 4)) (QUOTE (3 1)) (QUOTE (0)) (QUOTE (6 7)) (QUOTE (8 10))) "831" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.8 "~:@{~V:^~A~}" ((QUOTE (#\X 1)) (QUOTE (0 2))) "1")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.9 "~:@{~#:^~A~}" ((QUOTE (1)) (QUOTE (2)) (QUOTE (3 4)) (QUOTE (5 6 7)) NIL (QUOTE (8 9 10))) "1235" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.10 "~:@{~1,1:^~A~}" (NIL (QUOTE (1)) (QUOTE (2 3))) "" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.11 "~:@{~0,1:^~A~}" ((QUOTE (1)) (QUOTE (2 3))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.12 "~:@{~v,1:^~A~}" ((QUOTE (2 3)) (QUOTE (4 5 6)) (QUOTE (0 2)) (QUOTE (1 7)) (QUOTE (9 10))) "352" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.13 "~:@{~1,V:^~A~}" ((QUOTE (2 3)) (QUOTE (4 5 6)) (QUOTE (0 2)) (QUOTE (1 7)) (QUOTE (9 10))) "352" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.14 "~:@{~V,v:^~A~}" ((QUOTE (0 1 2)) (QUOTE (1 0 3)) (QUOTE (4 4)) NIL (QUOTE (5 6 7))) "23" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.15 "~:@{~#,1:^~A~}" ((QUOTE (2 3 4)) (QUOTE (4 5)) (QUOTE (0)) (QUOTE (1 7)) (QUOTE (9 10))) "24" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.16 "~:@{~1,#:^~A~}" ((QUOTE (2 3 4)) (QUOTE (4 5)) (QUOTE (0)) (QUOTE (1 7)) (QUOTE (9 10))) "24" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.17 "~:@{~#,#:^~A~}" (NIL) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.18 "~:@{~#,#:^~A~}" ((QUOTE (1))) "")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.19 "~:@{~#,v:^~A~}" ((QUOTE (1 2)) (QUOTE (3 4)) (QUOTE (2 5 6)) (QUOTE (1)) (QUOTE (2))) "245" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.20 "~:@{~V,#:^~A~}" ((QUOTE (0 2)) (QUOTE (1 3 4)) (QUOTE (1 3)) NIL (QUOTE (0 7))) "23" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.21 "~:@{~'X,'Y:^~A~}" ((QUOTE (1)) (QUOTE (2))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.22 "~:@{~'X,'X:^~A~}" ((QUOTE (1)) (QUOTE (2))) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.23 "~:@{~1,2,3:^~A~}" ((QUOTE (1)) (QUOTE (2))) "" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.24 "~:@{~1,2,1:^~A~}" ((QUOTE (1)) (QUOTE (2))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.25 "~:@{~2,1,3:^~A~}" ((QUOTE (1)) (QUOTE (2))) "12")
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.26 "~:@{~1,1,v:^~A~}" ((QUOTE (0 4)) (QUOTE (NIL 1)) (QUOTE (0 5))) "4" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.27 "~:@{~v,2,2:^~A~}" ((QUOTE (3 4)) (QUOTE (1 1)) (QUOTE (4 5))) "4" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.28 "~:@{~1,v,2:^~A~}" ((QUOTE (0 2)) (QUOTE (3 4)) (QUOTE (1 1)) (QUOTE (4 5))) "24" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.29 "~:@{~V,v,3:^~A~}" ((QUOTE (1 4 0)) (QUOTE (2 1 7)) (QUOTE (4 4 8 0)) (QUOTE (1 2 6)) (QUOTE (9 8 0))) "078" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.30 "~:@{~v,2,v:^~A~}" ((QUOTE (1 1 0)) (QUOTE (3 2 5)) (QUOTE (2 1 6)) (QUOTE (1 2 0)) (QUOTE (10 11 13))) "056" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.31 "~:@{~2,V,v:^~A~}" ((QUOTE (1 1 0)) (QUOTE (3 2 5)) (QUOTE (2 1 6)) (QUOTE (10 11 13)) (QUOTE (0 1 0))) "056" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.32 "~:@{~v,v,V:^~A~}" ((QUOTE (1 2 1 0)) (QUOTE (2 1 1 4)) (QUOTE (2 3 1 6)) (QUOTE (1 2 3)) (QUOTE (0 1 0 8))) "046" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.33 "~:@{~#,2,2:^~A~}" ((QUOTE (1 2 3)) (QUOTE (2 X X)) (QUOTE (0 A B C D)) (QUOTE (4 5)) (QUOTE (5 7 8 9))) "120" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.34 "~:@{~2,#,3:^~A~}" ((QUOTE (1)) (QUOTE (2 3 4 5)) (QUOTE (3 4)) (QUOTE (4 5 6 7 8)) NIL) "12" 2)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.35 "~:@{~1,3,#:^~A~}" ((QUOTE (1)) (QUOTE (2 3)) (QUOTE (3 4)) (QUOTE (4 5 6)) (QUOTE (5))) "123" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.36 "~:@{~#,#,2:^~A~}" ((QUOTE (1 2 3)) (QUOTE (2 X X)) (QUOTE (0 A B C D)) (QUOTE (4 5)) (QUOTE (5 7 8 9))) "120" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.37 "~:@{~3,#,#:^~A~}" ((QUOTE (1)) (QUOTE (2 3)) (QUOTE (3 4)) (QUOTE (4 5 6)) (QUOTE (5))) "123" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.38 "~:@{~#,2,#:^~A~}" ((QUOTE (1 2 3)) (QUOTE (2)) (QUOTE (0 A B C D)) (QUOTE (4 5)) (QUOTE (5 7 8 9))) "120" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.:^.:@{.39 "~:@{~#,#,#:^~A~}" ((QUOTE (1 2 3)) (QUOTE (2)) (QUOTE (0 A B C D)) (QUOTE (4 5)) (QUOTE (5 7 8 9))) "" 4)
;; Loading (DEF-FORMAT-TEST FORMAT.^.?.1 "~AY~?X~A" (1 "~A~0^~A" (QUOTE (2 4)) 3) "1Y2X3")
;; Loading (DEF-FORMAT-TEST FORMAT.^.?.2 "~AY~?X~A" (1 "~A~^~A" (QUOTE (2)) 3) "1Y2X3")
;; Loading (DEF-FORMAT-TEST FORMAT.^.?.3 "~AY~?X~A" (1 "~A~^~A~^~A" (QUOTE (2 4)) 3) "1Y24X3")
;; Loading (DEF-FORMAT-TEST FORMAT.^.?.4 "~A~?X~A" (1 "~{~^~A~}~AY~A" (QUOTE ((2 3) 4 5)) 6) "1234Y5X6")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@?.1 "~AY~@?X~A" (1 "~A~0^~A" 2 3 4) "1Y2X3" 1)
;; Loading (DEF-FORMAT-TEST FORMAT.^.@?.2 "~A~@?X~A" (1 "~{~^~A~}~AY~A" (QUOTE (2 3)) 4 5 6) "1234Y5X6")
;; Loading (DEF-FORMAT-TEST FORMAT.^.[.1 "~{~[X~;Y~;Z~;~0^~]~}" ((QUOTE (0 1 2 3 4))) "XYZ")
;; Loading (DEF-FORMAT-TEST FORMAT.^.[.2 "~{~[X~;Y~;Z~:;~0^~]~}" ((QUOTE (1 0 2 8 9 10 0))) "YXZ")
;; Loading (DEF-FORMAT-TEST FORMAT.^.[.3 "~{~[X~;Y~0^NO~;Z~;~^~]~}" ((QUOTE (0 1 2 3 4))) "XY")
;; Loading (DEF-FORMAT-TEST FORMAT.^.(.1 "~{~(~C~C~0^~C~)W~}" ((QUOTE (#\X #\Y #\Z #\A))) "xy")
;; Loading (DEF-FORMAT-TEST FORMAT.^.:(.1 "~{~:(~C~C~0^~C~)U~}" ((QUOTE (#\X #\Y #\Z #\A))) "Xy")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@(.1 "~{~@(~CA ~Cb ~0^~C~)V~}" ((QUOTE (#\x #\y #\Z #\A))) "Xa yb ")
;; Loading (DEF-FORMAT-TEST FORMAT.^.@:(.1 "~{~@:(~CA ~Cb ~0^~C~)W~}" ((QUOTE (#\x #\Y #\Z #\A))) "XA YB ")
;; Loading (LOAD "format-newline.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/format-newline.lsp C1F21BC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "printer-aux.lsp")
;; Loading (DEF-FORMAT-TEST FORMAT.NEWLINE.1 (CONCATENATE (QUOTE STRING) "~" (STRING #\Newline) "   X") NIL "X")
;; Loading (DEF-FORMAT-TEST FORMAT.NEWLINE.2 (CONCATENATE (QUOTE STRING) "A~:" (STRING #\Newline) " X") NIL "A X")
;; Loading (DEF-FORMAT-TEST FORMAT.NEWLINE.3 (CONCATENATE (QUOTE STRING) "A~@" (STRING #\Newline) " X") NIL "A
X")
;; Loading (LOAD "load-reader.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-reader.lsp C1F79E77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (LOAD "reader-test.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/reader-test.lsp C1F8F677>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "reader-aux.lsp")
;; Compiling file #P"THAT-MAC-THING:/Users/henry/Documents/LispOS-home/source/ansi-tests/reader-aux.lsp".
;; Compiling form (IN-PACKAGE :CL-TEST).
;; Compiling form (DEFMACRO DEF-SYNTAX-TEST (NAME FORM &BODY EXPECTED-RESULTS) (GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (WITH-STANDARD-IO-SYNTAX (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (SYSTEM.INTERNALS::BQ-COMMA FORM))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN EXPECTED-RESULTS)))).
;; Compiling form (DEFMACRO DEF-SYNTAX-VECTOR-TEST (NAME FORM &BODY EXPECTED-ELEMENTS) (SYSTEM.INTERNALS::BACKQUOTE (DEF-SYNTAX-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((V (READ-FROM-STRING (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (ASSERT (SIMPLE-VECTOR-P V)) V) (SYSTEM.INTERNALS::BQ-COMMA (APPLY (FUNCTION VECTOR) EXPECTED-ELEMENTS))))).
;; Compiling form (DEFMACRO DEF-SYNTAX-BIT-VECTOR-TEST (NAME FORM &BODY EXPECTED-ELEMENTS) (SYSTEM.INTERNALS::BACKQUOTE (DEF-SYNTAX-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((V (READ-FROM-STRING (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (ASSERT (SIMPLE-BIT-VECTOR-P V)) V) (SYSTEM.INTERNALS::BQ-COMMA (MAKE-ARRAY (LENGTH EXPECTED-ELEMENTS) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS EXPECTED-ELEMENTS))))).
;; Compiling form (DEFMACRO DEF-SYNTAX-UNINTERN-TEST (NAME STRING) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((S (READ-FROM-STRING (SYSTEM.INTERNALS::BQ-COMMA (CONCATENATE (QUOTE STRING) "#:" STRING))))) (VALUES (SYMBOL-PACKAGE S) (SYMBOL-NAME S))) NIL (SYSTEM.INTERNALS::BQ-COMMA (STRING-UPCASE STRING))))).
;; Compiling form (DEFMACRO DEF-SYNTAX-ARRAY-TEST (NAME FORM EXPECTED-RESULT) (SYSTEM.INTERNALS::BACKQUOTE (DEF-SYNTAX-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((V (READ-FROM-STRING (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (ASSERT (TYPEP V (QUOTE SIMPLE-ARRAY))) (ASSERT (NOT (ARRAY-HAS-FILL-POINTER-P V))) (ASSERT (EQL (ARRAY-ELEMENT-TYPE V) (UPGRADED-ARRAY-ELEMENT-TYPE T))) V) (SYSTEM.INTERNALS::BQ-COMMA (EVAL EXPECTED-RESULT))))).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/reader-aux.llf 81F56CA7>
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.1 (READ-FROM-STRING "a") A 1)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.2 (READ-FROM-STRING "|a|") \a 3)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.3 (MULTIPLE-VALUE-BIND (S N) (READ-FROM-STRING "#:abc") (NOT (AND (SYMBOLP S) (EQL N 5) (NOT (SYMBOL-PACKAGE S)) (STRING-EQUAL (SYMBOL-NAME S) "abc")))) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.4 (MULTIPLE-VALUE-BIND (S N) (READ-FROM-STRING "#:|abc|") (NOT (AND (SYMBOLP S) (EQL N 7) (NOT (SYMBOL-PACKAGE S)) (STRING= (SYMBOL-NAME S) "abc")))) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.5 (MULTIPLE-VALUE-BIND (S N) (READ-FROM-STRING "#:||") (IF (NOT (SYMBOLP S)) S (NOT (NOT (AND (EQL N 4) (NOT (SYMBOL-PACKAGE S)) (STRING= (SYMBOL-NAME S) "")))))) T)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.6 (LET ((STR "cl-test::abcd0123")) (MULTIPLE-VALUE-BIND (S N) (READ-FROM-STRING STR) (IF (NOT (SYMBOLP S)) S (NOT (NOT (AND (EQL N (LENGTH STR)) (EQT (SYMBOL-PACKAGE S) (FIND-PACKAGE :CL-TEST)) (STRING-EQUAL (SYMBOL-NAME S) "abcd0123"))))))) T)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.7 (MULTIPLE-VALUE-BIND (S N) (READ-FROM-STRING ":ABCD") (IF (NOT (SYMBOLP S)) S (NOT (NOT (AND (EQL N 5) (EQT (SYMBOL-PACKAGE S) (FIND-PACKAGE "KEYWORD")) (STRING-EQUAL (SYMBOL-NAME S) "ABCD")))))) T)
;; Loading (DEFUN READ-SYMBOL.9-BODY (NATOMS MAXLEN &OPTIONAL (CHARS +STANDARD-CHARS+)) (LOOP REPEAT NATOMS COUNT (LET* ((LEN (RANDOM (1+ MAXLEN))) (ACTUAL-LEN 0) (S (MAKE-STRING (+ 2 (* 2 LEN)))) (S2 (MAKE-STRING LEN))) (LOOP FOR J FROM 0 TO (1- LEN) DO (LET ((C (RANDOM-FROM-SEQ CHARS))) (WHEN (MEMBER C (QUOTE (#\| #\\))) (SETF (ELT S ACTUAL-LEN) #\\) (INCF ACTUAL-LEN)) (SETF (ELT S ACTUAL-LEN) C) (SETF (ELT S2 J) C) (INCF ACTUAL-LEN))) (LET ((ACTUAL-STRING (SUBSEQ S 0 ACTUAL-LEN))) (MULTIPLE-VALUE-BIND (SYM NREAD) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "#:|" ACTUAL-STRING "|")) (UNLESS (AND (SYMBOLP SYM) (EQL NREAD (+ 4 ACTUAL-LEN)) (STRING-EQUAL S2 (SYMBOL-NAME SYM))) (LET ((*PRINT-READABLY* T)) (FORMAT T "Symbol read failed: ~S (~S) read as ~S~%" ACTUAL-STRING S2 SYM)) T))))))
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.9 (READ-SYMBOL.9-BODY 1000 100) 0)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.9A (LET ((CHARS (COERCE (LOOP FOR I BELOW (MIN 256 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) WHEN C COLLECT C) (QUOTE STRING)))) (IF (> (LENGTH CHARS) 0) (READ-SYMBOL.9-BODY 1000 100) 0)) 0)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.9B (LET ((CHARS (COERCE (LOOP FOR I BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) WHEN C COLLECT C) (QUOTE STRING)))) (IF (> (LENGTH CHARS) 0) (READ-SYMBOL.9-BODY 1000 100) 0)) 0)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.10 (EQUALT (SYMBOL-NAME (READ-FROM-STRING (WITH-OUTPUT-TO-STRING (S) (WRITE (MAKE-SYMBOL ":") :READABLY T :STREAM S)))) ":") T)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.11 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR STR = (MAKE-ARRAY 2 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (LIST #\\ C)) FOR SYM = (READ-FROM-STRING STR) UNLESS (AND (SYMBOLP SYM) (EQL SYM (FIND-SYMBOL (STRING C))) (EQUAL (SYMBOL-NAME SYM) (STRING C))) COLLECT (LIST C STR SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.12 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR STR = (MAKE-ARRAY 2 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS (LIST #\\ C)) FOR SYM = (READ-FROM-STRING STR) UNLESS (AND (SYMBOLP SYM) (EQL SYM (FIND-SYMBOL (STRING C))) (EQUAL (SYMBOL-NAME SYM) (STRING C))) COLLECT (LIST C STR SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.13 (LOOP FOR I BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR STR = (AND C (MAKE-ARRAY 2 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (LIST #\\ C))) FOR SYM = (AND C (READ-FROM-STRING STR)) UNLESS (OR (NOT C) (AND (SYMBOLP SYM) (EQL SYM (FIND-SYMBOL (STRING C))) (EQUAL (SYMBOL-NAME SYM) (STRING C)))) COLLECT (LIST C STR SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.14 (LOOP FOR I = (RANDOM (MIN (ASH 1 24) CHAR-CODE-LIMIT)) FOR C = (CODE-CHAR I) FOR STR = (AND C (MAKE-ARRAY 2 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (LIST #\\ C))) FOR SYM = (AND C (READ-FROM-STRING STR)) REPEAT 1000 UNLESS (OR (NOT C) (AND (SYMBOLP SYM) (EQL SYM (FIND-SYMBOL (STRING C))) (EQUAL (SYMBOL-NAME SYM) (STRING C)))) COLLECT (LIST C STR SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.15 (LOOP FOR C ACROSS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@$%^&*_-+={}[]<>?/~" FOR STR = (STRING C) FOR SYM = (READ-FROM-STRING STR) UNLESS (EQL SYM (FIND-SYMBOL (STRING (CHAR-UPCASE C)))) COLLECT (LIST C STR SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.16 (LET ((*READTABLE* (COPY-READTABLE))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (LOOP FOR C ACROSS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@$%^&*_-+={}[]<>?/~" FOR STR = (STRING C) FOR SYM = (READ-FROM-STRING STR) UNLESS (EQL SYM (FIND-SYMBOL (STRING (CHAR-DOWNCASE C)))) COLLECT (LIST C STR SYM))) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.17 (LET ((*READTABLE* (COPY-READTABLE))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (LOOP FOR C ACROSS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@$%^&*_-+={}[]<>?/~" FOR STR = (STRING C) FOR SYM = (READ-FROM-STRING STR) UNLESS (EQL SYM (FIND-SYMBOL STR)) COLLECT (LIST C STR SYM))) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.18 (LET ((*READTABLE* (COPY-READTABLE))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (LOOP FOR C ACROSS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@$%^&*_-+={}[]<>?/~" FOR STR = (STRING C) FOR SYM = (READ-FROM-STRING STR) FOR C2 = (COND ((UPPER-CASE-P C) (CHAR-DOWNCASE C)) ((LOWER-CASE-P C) (CHAR-UPCASE C)) (T C)) UNLESS (EQL SYM (FIND-SYMBOL (STRING C2))) COLLECT (LIST C C2 STR SYM))) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.19 (READ-FROM-STRING "123||") 123 5)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.20 (READ-FROM-STRING "123\\4") 1234 5)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.21 (READ-FROM-STRING "\\:1234") :1234 6)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.22 (READ-FROM-STRING "||")  2)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.23 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (CONCATENATE (QUOTE STRING) (STRING C) ".") FOR SYM = (INTERN (STRING-UPCASE S)) WHEN (ALPHA-CHAR-P C) NCONC (LET ((SYM2 (LET ((*READ-BASE* 36)) (READ-FROM-STRING S)))) (IF (EQ SYM SYM2) NIL (LIST C S SYM SYM2)))) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.24 (LOOP FOR C1 = (RANDOM-FROM-SEQ +ALPHA-CHARS+) FOR C2 = (RANDOM-FROM-SEQ +ALPHA-CHARS+) FOR D1 = (LOOP REPEAT (RANDOM 4) COLLECT (RANDOM-FROM-SEQ +DIGIT-CHARS+)) FOR D2 = (LOOP REPEAT (RANDOM 4) COLLECT (RANDOM-FROM-SEQ +DIGIT-CHARS+)) FOR S = (CONCATENATE (QUOTE STRING) D1 (LIST C1 C2) D2) FOR SYM = (INTERN (STRING-UPCASE S)) REPEAT 1000 NCONC (LET ((SYM2 (READ-FROM-STRING S))) (IF (EQ SYM SYM2) NIL (LIST C1 C2 D1 D2 S SYM SYM2)))) NIL)
;; Loading (DEF-SYNTAX-TEST READ-SYMBOL.25 (LET ((POTENTIAL-CHARS "01234567890123456789+-esdlf_^/") (*READTABLE* (COPY-READTABLE))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (LOOP FOR D1 = (LOOP REPEAT (RANDOM 6) COLLECT (RANDOM-FROM-SEQ POTENTIAL-CHARS)) FOR C = (RANDOM-FROM-SEQ POTENTIAL-CHARS) FOR D2 = (LOOP REPEAT (RANDOM 6) COLLECT (RANDOM-FROM-SEQ POTENTIAL-CHARS)) FOR S1 = (CONCATENATE (QUOTE STRING) D1 (LIST C) D2) FOR SYM1 = (INTERN S1) FOR S2 = (CONCATENATE (QUOTE STRING) D1 (LIST #\\ C) D2) FOR SYM2 = (READ-FROM-STRING S2) REPEAT 1000 UNLESS (EQL SYM1 SYM2) COLLECT (LIST D1 C D2 S1 SYM1 S2 SYM2))) NIL)
;; Loading (DEFTEST READ-FLOAT.1 (EQLT 0.0 (- 0.0)) T)
;; Loading (LOAD "with-standard-io-syntax.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-standard-io-syntax.lsp C1E2A067>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.1 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (WITH-STANDARD-IO-SYNTAX (EQLT *PACKAGE* (FIND-PACKAGE "CL-USER")))) T)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.2 (LET ((*PRINT-ARRAY* NIL)) (WITH-STANDARD-IO-SYNTAX *PRINT-ARRAY*)) T)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.3 (LET ((*PRINT-BASE* 8)) (WITH-STANDARD-IO-SYNTAX *PRINT-BASE*)) 10)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.4 (LET ((*PRINT-CASE* :DOWNCASE)) (WITH-STANDARD-IO-SYNTAX *PRINT-CASE*)) :UPCASE)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.5 (LET ((*PRINT-CIRCLE* T)) (WITH-STANDARD-IO-SYNTAX *PRINT-CIRCLE*)) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.6 (LET ((*PRINT-ESCAPE* NIL)) (WITH-STANDARD-IO-SYNTAX *PRINT-ESCAPE*)) T)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.7 (LET ((*PRINT-GENSYM* NIL)) (WITH-STANDARD-IO-SYNTAX *PRINT-GENSYM*)) T)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.8 (LET ((*PRINT-LENGTH* 100)) (WITH-STANDARD-IO-SYNTAX *PRINT-LENGTH*)) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.9 (LET ((*PRINT-LEVEL* 100)) (WITH-STANDARD-IO-SYNTAX *PRINT-LEVEL*)) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.10 (LET ((*PRINT-LINES* 100)) (WITH-STANDARD-IO-SYNTAX *PRINT-LINES*)) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.11 (LET ((*PRINT-MISER-WIDTH* 100)) (WITH-STANDARD-IO-SYNTAX *PRINT-MISER-WIDTH*)) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.12 (LET ((*PRINT-PRETTY* T)) (WITH-STANDARD-IO-SYNTAX *PRINT-PRETTY*)) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.13 (LET ((*PRINT-RIGHT-MARGIN* 100)) (WITH-STANDARD-IO-SYNTAX *PRINT-RIGHT-MARGIN*)) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.14 (LET ((*READ-BASE* 8)) (WITH-STANDARD-IO-SYNTAX *READ-BASE*)) 10)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.15 (LET ((*READ-DEFAULT-FLOAT-FORMAT (QUOTE LONG-FLOAT))) (WITH-STANDARD-IO-SYNTAX *READ-DEFAULT-FLOAT-FORMAT*)) SINGLE-FLOAT)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.16 (LET ((*READ-EVAL* NIL)) (WITH-STANDARD-IO-SYNTAX *READ-EVAL*)) T)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.17 (LET ((*READ-SUPPRESS* T)) (WITH-STANDARD-IO-SYNTAX *READ-SUPPRESS*)) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.18 (WITH-STANDARD-IO-SYNTAX (NOTNOT-MV (READTABLEP *READTABLE*))) T)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.19 (WITH-STANDARD-IO-SYNTAX) NIL)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.20 (WITH-STANDARD-IO-SYNTAX (VALUES (QUOTE A) (QUOTE B) (QUOTE C))) A B C)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.21 (BLOCK DONE (TAGBODY (WITH-STANDARD-IO-SYNTAX (GO 10) 10 (RETURN-FROM DONE :BAD)) 10 (RETURN-FROM DONE :GOOD))) :GOOD)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.22 (LET ((I 3)) (WITH-STANDARD-IO-SYNTAX (INCF I 10) (+ I 2))) 15)
;; Loading (DEFTEST WITH-STANDARD-IO-SYNTAX.23 (LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL))) (SET-PPRINT-DISPATCH (QUOTE SYMBOL) (FUNCTION (LAMBDA (STREAM OBJ) (DECLARE (IGNORE OBJ)) (WRITE-STRING "FOO" STREAM)))) (LIST (LET ((*PRINT-PRETTY* T)) (PRINC-TO-STRING (QUOTE BAR))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-PRETTY* T)) (PRINC-TO-STRING (QUOTE BAR)))))) ("FOO" "BAR"))
;; Loading (LOAD "copy-readtable.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/copy-readtable.lsp C1EF1197>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST COPY-READTABLE.1 (NOTNOT-MV (TYPEP (COPY-READTABLE) (QUOTE READTABLE))) T)
;; Loading (DEFTEST COPY-READTABLE.2 (NOTNOT-MV (TYPEP (COPY-READTABLE *READTABLE*) (QUOTE READTABLE))) T)
;; Loading (DEFTEST COPY-READTABLE.3 (NOTNOT-MV (TYPEP (COPY-READTABLE *READTABLE* NIL) (QUOTE READTABLE))) T)
;; Loading (DEFTEST COPY-READTABLE.4 (LET ((RT (COPY-READTABLE *READTABLE*))) (EQL RT *READTABLE*)) NIL)
;; Loading (DEFTEST COPY-READTABLE.5 (LET ((RT (COPY-READTABLE *READTABLE* NIL))) (EQL RT *READTABLE*)) NIL)
;; Loading (DEFTEST COPY-READTABLE.6 (LET* ((RT (COPY-READTABLE)) (RT2 (COPY-READTABLE *READTABLE* RT))) (NOTNOT (EQL RT RT2))) T)
;; Loading (DEFTEST COPY-READTABLE.7 (LET ((RT (COPY-READTABLE NIL))) (VALUES (NOTNOT RT) (NOTNOT (READTABLEP RT)) (NOT (EQL RT *READTABLE*)))) T T T)
;; Loading (DEFTEST COPY-READTABLE.ERROR.1 (SIGNALS-ERROR (COPY-READTABLE *READTABLE* NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "read.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read.lsp C1F40B87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READ.1 (BLOCK DONE (WITH-INPUT-FROM-STRING (IS "1 2 3") (WITH-OUTPUT-TO-STRING (OS) (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (RETURN-FROM DONE (READ T)))))) 1)
;; Loading (DEFTEST READ.2 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "1 2 3") (READ NIL)) 1)
;; Loading (DEFTEST READ.3 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "1 2 3") (READ)) 1)
;; Loading (DEFTEST READ.4 (WITH-INPUT-FROM-STRING (S "1 2 3") (READ S)) 1)
;; Loading (DEFTEST READ.5 (WITH-INPUT-FROM-STRING (S "") (READ S NIL)) NIL)
;; Loading (DEFTEST READ.6 (WITH-INPUT-FROM-STRING (S "") (READ S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST READ.7 (WITH-INPUT-FROM-STRING (S "1") (READ S)) 1)
;; Loading (DEFTEST READ.8 (LET ((*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (WITH-INPUT-FROM-STRING (S "X") (READ S))) X)
;; Loading (DEFTEST READ.9 (WITH-INPUT-FROM-STRING (S "1.2") (READ S)) 1.2)
;; Loading (DEFTEST READ.10 (WITH-INPUT-FROM-STRING (S "1.0s0") (READ S)) 1.0)
;; Loading (DEFTEST READ.11 (WITH-INPUT-FROM-STRING (S "1.0f0") (READ S)) 1.0)
;; Loading (DEFTEST READ.12 (WITH-INPUT-FROM-STRING (S "1.0d0") (READ S)) 1.0)
;; Loading (DEFTEST READ.13 (WITH-INPUT-FROM-STRING (S "1.0l0") (READ S)) 1.0)
;; Loading (DEFTEST READ.14 (WITH-INPUT-FROM-STRING (S "()") (READ S)) NIL)
;; Loading (DEFTEST READ.15 (WITH-INPUT-FROM-STRING (S "(1 2 3)") (READ S)) (1 2 3))
;; Loading (DEFTEST READ.16 (WITH-STANDARD-IO-SYNTAX (WITH-INPUT-FROM-STRING (S ":ABC X") (ASSERT (EQ (READ S) :ABC)) (READ-CHAR S))) #\X)
;; Loading (DEFTEST READ.17 (WITH-STANDARD-IO-SYNTAX (WITH-INPUT-FROM-STRING (S ":ABC  X") (ASSERT (EQ (READ S) :ABC)) (READ-CHAR S))) #\Space)
;; Loading (DEFTEST READ.18 (WITH-STANDARD-IO-SYNTAX (WITH-INPUT-FROM-STRING (S ":ABC(") (ASSERT (EQ (READ S) :ABC)) (READ-CHAR S))) #\()
;; Loading (DEFTEST READ.19 (WITH-INPUT-FROM-STRING (S "") (READ S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST READ.ERROR.1 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "") (READ S)) END-OF-FILE) T)
;; Loading (DEFTEST READ.ERROR.2 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "") (READ S)) STREAM-ERROR) T)
;; Loading (DEFTEST READ.ERROR.3 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "") (READ S T)) STREAM-ERROR) T)
;; Loading (DEFTEST READ.ERROR.4 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "(") (READ S NIL)) END-OF-FILE) T)
;; Loading (DEFTEST READ.ERROR.5 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "(") (READ S T)) END-OF-FILE) T)
;; Loading (DEFTEST READ.ERROR.6 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "#(") (READ S T)) END-OF-FILE) T)
;; Loading (DEFTEST READ.ERROR.7 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "#S(") (READ S T)) END-OF-FILE) T)
;; Loading (DEFTEST READ.ERROR.8 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "1 2 3") (READ S NIL NIL NIL NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "read-preserving-whitespace.lsp")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-preserving-whitespace.lsp 81A6EF67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.1 (BLOCK DONE (WITH-INPUT-FROM-STRING (IS "1 2 3") (WITH-OUTPUT-TO-STRING (OS) (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (RETURN-FROM DONE (READ-PRESERVING-WHITESPACE T)))))) 1)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.2 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "1 2 3") (READ-PRESERVING-WHITESPACE NIL)) 1)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.3 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "1 2 3") (READ-PRESERVING-WHITESPACE)) 1)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.4 (WITH-INPUT-FROM-STRING (S "1 2 3") (READ-PRESERVING-WHITESPACE S)) 1)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.5 (WITH-INPUT-FROM-STRING (S "") (READ-PRESERVING-WHITESPACE S NIL)) NIL)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.6 (WITH-INPUT-FROM-STRING (S "") (READ-PRESERVING-WHITESPACE S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.7 (WITH-INPUT-FROM-STRING (S "1") (READ-PRESERVING-WHITESPACE S)) 1)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.8 (LET ((*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (WITH-INPUT-FROM-STRING (S "X") (READ-PRESERVING-WHITESPACE S))) X)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.9 (WITH-INPUT-FROM-STRING (S "1.2") (READ-PRESERVING-WHITESPACE S)) 1.2)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.10 (WITH-INPUT-FROM-STRING (S "1.0s0") (READ-PRESERVING-WHITESPACE S)) 1.0)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.11 (WITH-INPUT-FROM-STRING (S "1.0f0") (READ-PRESERVING-WHITESPACE S)) 1.0)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.12 (WITH-INPUT-FROM-STRING (S "1.0d0") (READ-PRESERVING-WHITESPACE S)) 1.0)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.13 (WITH-INPUT-FROM-STRING (S "1.0l0") (READ-PRESERVING-WHITESPACE S)) 1.0)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.14 (WITH-INPUT-FROM-STRING (S "()") (READ-PRESERVING-WHITESPACE S)) NIL)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.15 (WITH-INPUT-FROM-STRING (S "(1 2 3)") (READ-PRESERVING-WHITESPACE S)) (1 2 3))
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.16 (WITH-STANDARD-IO-SYNTAX (WITH-INPUT-FROM-STRING (S ":ABC X") (ASSERT (EQ (READ-PRESERVING-WHITESPACE S) :ABC)) (READ-CHAR S))) #\Space)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.17 (WITH-STANDARD-IO-SYNTAX (WITH-INPUT-FROM-STRING (S ":ABC  X") (ASSERT (EQ (READ-PRESERVING-WHITESPACE S) :ABC)) (READ-CHAR S))) #\Space)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.18 (WITH-STANDARD-IO-SYNTAX (WITH-INPUT-FROM-STRING (S ":ABC(") (ASSERT (EQ (READ-PRESERVING-WHITESPACE S) :ABC)) (READ-CHAR S))) #\()
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.19 (WITH-INPUT-FROM-STRING (S "") (READ-PRESERVING-WHITESPACE S NIL (QUOTE FOO))) FOO)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.ERROR.1 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "") (READ-PRESERVING-WHITESPACE S)) END-OF-FILE) T)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.ERROR.2 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "") (READ-PRESERVING-WHITESPACE S)) STREAM-ERROR) T)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.ERROR.3 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "") (READ-PRESERVING-WHITESPACE S T)) STREAM-ERROR) T)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.ERROR.4 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "(") (READ-PRESERVING-WHITESPACE S NIL)) END-OF-FILE) T)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.ERROR.5 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "(") (READ-PRESERVING-WHITESPACE S T)) END-OF-FILE) T)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.ERROR.6 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "#(") (READ-PRESERVING-WHITESPACE S T)) END-OF-FILE) T)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.ERROR.7 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "#S(") (READ-PRESERVING-WHITESPACE S T)) END-OF-FILE) T)
;; Loading (DEFTEST READ-PRESERVING-WHITESPACE.ERROR.8 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (S "1 2 3") (READ-PRESERVING-WHITESPACE S NIL NIL NIL NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "read-delimited-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-delimited-list.lsp 81D69D47>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READ-DELIMITED-LIST.1 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "1 2 3)") (READ-DELIMITED-LIST #\))) (1 2 3))
;; Loading (DEFTEST READ-DELIMITED-LIST.2 (WITH-INPUT-FROM-STRING (*STANDARD-INPUT* "1 2 3 ]") (READ-DELIMITED-LIST #\] NIL)) (1 2 3))
;; Loading (DEFTEST READ-DELIMITED-LIST.3 (WITH-INPUT-FROM-STRING (IS "1 2 3)") (WITH-OPEN-STREAM (OS (MAKE-BROADCAST-STREAM)) (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM IS OS)) (READ-DELIMITED-LIST #\) T)))) (1 2 3))
;; Loading (DEFTEST READ-DELIMITED-LIST.4 (WITH-INPUT-FROM-STRING (IS "1 2 3)X") (VALUES (READ-DELIMITED-LIST #\) IS) (NOTNOT (EQL (READ-CHAR IS) #\X)))) (1 2 3) T)
;; Loading (DEFTEST READ-DELIMITED-LIST.5 (WITH-INPUT-FROM-STRING (IS "1 2 3) X") (VALUES (READ-DELIMITED-LIST #\) IS NIL) (NOTNOT (EQL (READ-CHAR IS) #\Space)))) (1 2 3) T)
;; Loading (DEFTEST READ-DELIMITED-LIST.6 (WITH-INPUT-FROM-STRING (IS (CONCATENATE (QUOTE STRING) "1 2 3" (STRING #\Newline) "]")) (READ-DELIMITED-LIST #\] IS)) (1 2 3))
;; Loading (DEFTEST READ-DELIMITED-LIST.ERROR.1 (SIGNALS-ERROR (READ-DELIMITED-LIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-DELIMITED-LIST.ERROR.2 (SIGNALS-ERROR (WITH-INPUT-FROM-STRING (IS "1 2 3)") (READ-DELIMITED-LIST #\) IS NIL NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "read-from-string.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-from-string.lsp 81DCCA77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READ-FROM-STRING.1 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "123") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S)))) (ASSERT (= (LENGTH VALS) 2)) (ASSERT (EQL (FIRST VALS) 123)) (ASSERT (MEMBER (SECOND VALS) (QUOTE (3 4))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.2 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "XYZ   ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S)))) (ASSERT (EQUAL VALS (QUOTE (XYZ 4))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.3 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "(1 2 3)X") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S)))) (ASSERT (EQUAL VALS (QUOTE ((1 2 3) 7))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.4 (DO-SPECIAL-STRINGS (S "") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S NIL :GOOD)))) (ASSERT (= (LENGTH VALS) 2)) (ASSERT (EQUAL (FIRST VALS) :GOOD)) (ASSERT (MEMBER (SECOND VALS) (QUOTE (0 1)))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.5 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "71235") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :START 1 :END 4)))) (ASSERT (EQUAL VALS (QUOTE (123 4))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.6 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "7123  ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :START 1)))) (ASSERT (EQUAL VALS (QUOTE (123 5))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.7 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "7123  ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :END 4)))) (ASSERT (EQUAL VALS (QUOTE (7123 4))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.8 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "7123") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S NIL (QUOTE FOO) :START 2 :END 2)))) (ASSERT (EQUAL VALS (QUOTE (FOO 2))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.9 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "123  ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :PRESERVE-WHITESPACE T)))) (ASSERT (EQUAL VALS (QUOTE (123 3))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.10 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S (CONCATENATE (QUOTE STRING) "( )" (STRING #\Newline))) (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :PRESERVE-WHITESPACE T)))) (ASSERT (EQUAL VALS (QUOTE (NIL 3))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.11 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "7123  ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :START 1 :START 2)))) (ASSERT (EQUAL VALS (QUOTE (123 5))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.12 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "7123  ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :END 4 :END 2)))) (ASSERT (EQUAL VALS (QUOTE (7123 4))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.13 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S (CONCATENATE (QUOTE STRING) "( )" (STRING #\Newline))) (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :PRESERVE-WHITESPACE T :PRESERVE-WHITESPACE NIL)))) (ASSERT (EQUAL VALS (QUOTE (NIL 3))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.14 (WITH-STANDARD-IO-SYNTAX (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "abc   ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :ALLOW-OTHER-KEYS NIL)))) (ASSERT (EQUAL VALS (QUOTE (ABC 4))) (VALS) "VALS is ~A" VALS))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.15 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "123   ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :FOO (QUOTE BAR) :ALLOW-OTHER-KEYS T)))) (ASSERT (EQUAL VALS (QUOTE (123 4))) (VALS) "VALS is ~A" VALS)))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.16 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "123   ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO (QUOTE BAR))))) (ASSERT (EQUAL VALS (QUOTE (123 4))) (VALS) "VALS is ~A" VALS)))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.17 (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (DO-SPECIAL-STRINGS (S "XYZ   ") (LET ((VALS (MULTIPLE-VALUE-LIST (READ-FROM-STRING S T NIL :END NIL)))) (ASSERT (EQUAL VALS (QUOTE (XYZ 4))))))) NIL)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING "") ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.2 (SIGNALS-ERROR (READ-FROM-STRING "(A B ") ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.3 (SIGNALS-ERROR (READ-FROM-STRING "" T) ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.4 (SIGNALS-ERROR (READ-FROM-STRING "" T NIL) ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.5 (SIGNALS-ERROR (READ-FROM-STRING "(A B " NIL) ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.6 (SIGNALS-ERROR (READ-FROM-STRING "(A B " T) ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.7 (SIGNALS-ERROR (READ-FROM-STRING "123" T NIL :START 0 :END 0) ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.8 (SIGNALS-ERROR (READ-FROM-STRING) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.9 (SIGNALS-ERROR (READ-FROM-STRING "A" NIL T :BAD-KEYWORD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.10 (SIGNALS-ERROR (READ-FROM-STRING "A" NIL T :BAD-KEYWORD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.11 (SIGNALS-ERROR (READ-FROM-STRING "A" NIL T :BAD-KEYWORD T :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.12 (SIGNALS-ERROR (READ-FROM-STRING "A" NIL T :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :BAD-KEYWORD T) PROGRAM-ERROR) T)
;; Loading (DEFTEST READ-FROM-STRING.ERROR.13 (SIGNALS-ERROR (READ-FROM-STRING "A" NIL T :START) PROGRAM-ERROR) T)
;; Loading (LOAD "readtable-case.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/readtable-case.lsp 81F3B607>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READTABLE-CASE.1 (WITH-STANDARD-IO-SYNTAX (READTABLE-CASE *READTABLE*)) :UPCASE)
;; Loading (DEFTEST READTABLE-CASE.2 (WITH-STANDARD-IO-SYNTAX (LET ((RT (COPY-READTABLE))) (READTABLE-CASE RT))) :UPCASE)
;; Loading (DEFTEST READTABLE-CASE.3 (LET ((RT (COPY-READTABLE))) (VALUES (SETF (READTABLE-CASE RT) :UPCASE) (READTABLE-CASE RT))) :UPCASE :UPCASE)
;; Loading (DEFTEST READTABLE-CASE.4 (LET ((RT (COPY-READTABLE))) (VALUES (SETF (READTABLE-CASE RT) :DOWNCASE) (READTABLE-CASE RT))) :DOWNCASE :DOWNCASE)
;; Loading (DEFTEST READTABLE-CASE.5 (LET ((RT (COPY-READTABLE))) (VALUES (SETF (READTABLE-CASE RT) :PRESERVE) (READTABLE-CASE RT))) :PRESERVE :PRESERVE)
;; Loading (DEFTEST READTABLE-CASE.6 (LET ((RT (COPY-READTABLE))) (VALUES (SETF (READTABLE-CASE RT) :INVERT) (READTABLE-CASE RT))) :INVERT :INVERT)
;; Loading (DEFTEST READTABLE-CASE.7 (LET ((RT (COPY-READTABLE))) (LOOP FOR RTC IN (QUOTE (:UPCASE :DOWNCASE :PRESERVE :INVERT)) DO (SETF (READTABLE-CASE RT) RTC) NCONC (LET ((RT2 (COPY-READTABLE RT))) (UNLESS (EQ (READTABLE-CASE RT2) RTC) (LIST RTC RT2))))) NIL)
;; Loading (DEFTEST READTABLE-CASE.ERROR.1 (SIGNALS-ERROR (READTABLE-CASE) PROGRAM-ERROR) T)
;; Loading (DEFTEST READTABLE-CASE.ERROR.2 (SIGNALS-ERROR (READTABLE-CASE *READTABLE* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST READTABLE-CASE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION READTABLE-CASE) (TYPEF (QUOTE READTABLE))) NIL)
;; Loading (DEFTEST READTABLE-CASE.ERROR.4 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (LET ((RT (COPY-READTABLE))) (SETF (READTABLE-CASE RT) X)))) (TYPEF (QUOTE (MEMBER :UPCASE :DOWNCASE :PRESERVE :INVERT)))) NIL)
;; Loading (DEFTEST READTABLE-CASE.ERROR.5 (CHECK-TYPE-ERROR (FUNCTION (LAMBDA (X) (SETF (READTABLE-CASE X) :UPCASE))) (TYPEF (QUOTE READTABLE))) NIL)
;; Loading (LOAD "readtablep.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/readtablep.lsp 81FB9637>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST READTABLEP.1 (AND (NOT (READTABLEP NIL)) (NOT (READTABLEP (QUOTE A))) (NOT (READTABLEP 0)) (NOT (READTABLEP 1/2)) (NOT (READTABLEP 1.2)) (NOT (READTABLEP 120.000007)) (NOT (READTABLEP 1200.0)) (NOT (READTABLEP 120.000007)) (NOT (READTABLEP 120.000007)) (NOT (READTABLEP (LIST (QUOTE A)))) (NOT (READTABLEP "abcde")) (NOT (READTABLEP T)) (NOT (READTABLEP (QUOTE *READTABLE*))) (NOT (READTABLEP (MAKE-ARRAY (QUOTE (10))))) (NOT (READTABLEP (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE FIXNUM)))) (NOT (READTABLEP (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE FLOAT)))) (NOT (READTABLEP (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (NOT (READTABLEP (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE STRING)))) (NOT (READTABLEP (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER)))) (NOT (READTABLEP (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT)))) (NOT (READTABLEP (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BOOLEAN)))) (NOT (NOT (READTABLEP (COPY-READTABLE)))) (NOT (READTABLEP (FUNCTION CAR)))) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST READTABLEP.2 (CHECK-TYPE-PREDICATE (FUNCTION READTABLEP) (QUOTE READTABLE)) NIL)
;; Loading (DEFTEST READTABLEP.3 (NOTNOT-MV (READTABLEP *READTABLE*)) T)
;; Loading (DEFTEST READTABLEP.4 (NOTNOT-MV (READTABLEP (COPY-READTABLE))) T)
;; Loading (DEFTEST READTABLEP.ERROR.1 (SIGNALS-ERROR (READTABLEP) PROGRAM-ERROR) T)
;; Loading (DEFTEST READTABLEP.ERROR.2 (SIGNALS-ERROR (READTABLEP *READTABLE* NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST READTABLEP.ERROR.3 (SIGNALS-ERROR (READTABLEP *READTABLE* NIL T T T T) PROGRAM-ERROR) T)
;; Loading (LOAD "get-macro-character.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/get-macro-character.lsp C1CA3507>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "reader-aux.lsp")
;; Loading (DEF-SYNTAX-TEST GET-MACRO-CHARACTER.1 (LOOP FOR C ACROSS "()';\"`,#" COLLECT (LET ((VALS (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C)))) (LIST (=T (LENGTH VALS) 2) (OR (NOTNOT (FUNCTIONP (CAR VALS))) (AND (SYMBOLP (CAR VALS)) (NOTNOT (FBOUNDP (CAR VALS))))) (NOTNOT (CADR VALS))))) ((T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T T)))
;; Loading (DEF-SYNTAX-TEST GET-MACRO-CHARACTER.2 (LOOP FOR C ACROSS (CONCATENATE (QUOTE STRING) "abcdefghijklmnopqrstuvwxyz" "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "1234567890!@$%^&*_-+={[}]<>?/~") FOR (FN NON-TERM-P) = (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C)) UNLESS (OR (NULL FN) NON-TERM-P) COLLECT (LIST C FN NON-TERM-P)) NIL)
;; Loading (DEF-SYNTAX-TEST GET-MACRO-CHARACTER.3 (LOOP FOR RT IN (LIST NIL *READTABLE* (COPY-READTABLE)) COLLECT (LOOP FOR C ACROSS "()';\"`,#" COLLECT (LET ((VALS (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C RT)))) (LIST (=T (LENGTH VALS) 2) (OR (NOTNOT (FUNCTIONP (CAR VALS))) (AND (SYMBOLP (CAR VALS)) (NOTNOT (FBOUNDP (CAR VALS))))) (NOTNOT (CADR VALS)))))) (((T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T T)) ((T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T T)) ((T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T NIL) (T T T))))
;; Loading (DEF-SYNTAX-TEST GET-MACRO-CHARACTER.4 (LOOP FOR RT IN (LIST NIL *READTABLE* (COPY-READTABLE)) NCONC (LOOP FOR C ACROSS (CONCATENATE (QUOTE STRING) "abcdefghijklmnopqrstuvwxyz" "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "1234567890!@$%^&*_-+={[}]<>?/~") FOR (FN NON-TERM-P) = (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C RT)) UNLESS (OR (NULL FN) NON-TERM-P) COLLECT (LIST RT C FN NON-TERM-P))) NIL)
;; Loading (DEF-SYNTAX-TEST GET-MACRO-CHARACTER.5 (LET ((RT (COPY-READTABLE))) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR (FN1 NTP1) = (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C)) FOR (FN2 NTP2) = (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C RT)) UNLESS (AND (OR (NOT (SYMBOLP FN1)) (NOT (SYMBOLP FN2)) (EQL FN1 FN2)) (IF NTP1 NTP2 (NOT NTP2))) COLLECT (LIST C FN1 NTP1 FN2 NTP2))) NIL)
;; Loading (DEF-SYNTAX-TEST GET-MACRO-CHARACTER.6 (LET ((RT (COPY-READTABLE))) (LOOP FOR I BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR (FN1 NTP1) = (IF C (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C)) (QUOTE (NIL NIL))) FOR (FN2 NTP2) = (IF C (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C RT)) (QUOTE (NIL NIL))) UNLESS (AND (OR (NOT (SYMBOLP FN1)) (NOT (SYMBOLP FN2)) (EQL FN1 FN2)) (IF NTP1 NTP2 (NOT NTP2))) COLLECT (LIST C FN1 NTP1 FN2 NTP2))) NIL)
;; Loading (DEF-SYNTAX-TEST GET-MACRO-CHARACTER.7 (LET ((RT (COPY-READTABLE))) (LOOP FOR I = (RANDOM (MIN CHAR-CODE-LIMIT (ASH 1 24))) FOR C = (CODE-CHAR I) FOR (FN1 NTP1) = (IF C (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C)) (QUOTE (NIL NIL))) FOR (FN2 NTP2) = (IF C (MULTIPLE-VALUE-LIST (GET-MACRO-CHARACTER C RT)) (QUOTE (NIL NIL))) REPEAT 10000 UNLESS (AND (OR (NOT (SYMBOLP FN1)) (NOT (SYMBOLP FN2)) (EQL FN1 FN2)) (IF NTP1 NTP2 (NOT NTP2))) COLLECT (LIST C FN1 NTP1 FN2 NTP2))) NIL)
;; Loading (DEFTEST GET-MACRO-CHARACTER.ERROR.1 (SIGNALS-ERROR (GET-MACRO-CHARACTER) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-MACRO-CHARACTER.ERROR.2 (SIGNALS-ERROR (GET-MACRO-CHARACTER #\; (COPY-READTABLE) NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "set-macro-character.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/set-macro-character.lsp C1DA7527>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEF-SYNTAX-TEST SET-MACRO-CHARACTER.1 (LET ((*READTABLE* (COPY-READTABLE)) (*PACKAGE* (FIND-PACKAGE :CL-TEST))) (LET ((V1 (READ-FROM-STRING "?!"))) (ASSERT (EQL V1 (QUOTE ?!))) (FLET ((%F (STREAM CHAR) (DECLARE (IGNORE STREAM)) (ASSERT (EQL CHAR #\?)) 17)) (LET ((FN (FUNCTION %F))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (SET-MACRO-CHARACTER #\? FN NIL)) (QUOTE (T)))) (VALUES (MULTIPLE-VALUE-LIST (READ-FROM-STRING "?!")) (MULTIPLE-VALUE-LIST (READ-FROM-STRING "!?"))))))) (17 1) (! 1))
;; Loading (DEF-SYNTAX-TEST SET-MACRO-CHARACTER.2 (LET ((RT (COPY-READTABLE)) (*PACKAGE* (FIND-PACKAGE :CL-TEST))) (LET ((V1 (READ-FROM-STRING "?!"))) (ASSERT (EQL V1 (QUOTE ?!))) (FLET ((%F (STREAM CHAR) (DECLARE (IGNORE STREAM)) (ASSERT (EQL CHAR #\?)) 17)) (LET ((FN (FUNCTION %F))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (SET-MACRO-CHARACTER #\? FN T RT)) (QUOTE (T)))) (LET ((*READTABLE* RT)) (VALUES (MULTIPLE-VALUE-LIST (READ-FROM-STRING "?!")) (MULTIPLE-VALUE-LIST (READ-FROM-STRING "!?")))))))) (17 1) (!? 2))
;; Loading (DEFUN SET-MACRO-CHARACTER.3-TEST-FN (STREAM CHAR) (DECLARE (IGNORE STREAM)) (ASSERT (EQL CHAR #\?)) :FOO)
;; Loading (DEF-SYNTAX-TEST SET-MACRO-CHARACTER.3 (LET ((*READTABLE* (COPY-READTABLE)) (*PACKAGE* (FIND-PACKAGE :CL-TEST))) (LET ((V1 (READ-FROM-STRING "?!")) (FN (QUOTE SET-MACRO-CHARACTER.3-TEST-FN))) (ASSERT (EQL V1 (QUOTE ?!))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (SET-MACRO-CHARACTER #\? FN NIL)) (QUOTE (T)))) (VALUES (MULTIPLE-VALUE-LIST (READ-FROM-STRING "?!")) (MULTIPLE-VALUE-LIST (READ-FROM-STRING "!?"))))) (:FOO 1) (! 1))
;; Loading (LOAD "read-suppress.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/read-suppress.lsp C1E1E887>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "reader-aux.lsp")
;; Loading (DEFMACRO DEF-READ-SUPPRESS-TEST (NAME STRING) (SYSTEM.INTERNALS::BACKQUOTE (DEF-SYNTAX-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET ((*READ-SUPPRESS* T)) (READ-FROM-STRING (SYSTEM.INTERNALS::BQ-COMMA STRING))) NIL (SYSTEM.INTERNALS::BQ-COMMA (LENGTH STRING)))))
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.1 "NONEXISTENT-PACKAGE::FOO")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.2 ":")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.3 "::")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.4 ":::")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.5 "123.45")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.7 "..")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.8 "...")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.9 "(1 2)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.10 "(1 . 2)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.11 "(1 .. 2 . 3)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.12 "(...)")
;; Loading (DEFPARAMETER *NON-MACRO-CHARS* "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-=+_~!@$%^&*{}[]<>/?.")
;; Loading (DECLAIM (TYPE SIMPLE-BASE-STRING *NON-MACRO-CHARS*))
;; Loading (DEFMACRO DEF-RANDOM-SUPPRESS-TEST (NAME &KEY (CHARS (QUOTE *NON-MACRO-CHARS*)) (REPS 1000) (MAXLEN 8) (COUNT 10) (PREFIX "") (SUFFIX "")) (SYSTEM.INTERNALS::BACKQUOTE (DEF-SYNTAX-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (LET* ((CHARS (SYSTEM.INTERNALS::BQ-COMMA CHARS)) (PREFIX (SYSTEM.INTERNALS::BQ-COMMA PREFIX)) (SUFFIX (SYSTEM.INTERNALS::BQ-COMMA SUFFIX)) (*READ-SUPPRESS* T) (COUNT 0) (MAXLEN (SYSTEM.INTERNALS::BQ-COMMA MAXLEN)) (REPS (SYSTEM.INTERNALS::BQ-COMMA REPS)) (MAXCOUNT (SYSTEM.INTERNALS::BQ-COMMA COUNT))) (LOOP FOR N = (1+ (RANDOM MAXLEN)) FOR S = (CONCATENATE (QUOTE STRING) PREFIX (LOOP REPEAT N COLLECT (RANDOM-FROM-SEQ CHARS)) SUFFIX) FOR VALS = (MULTIPLE-VALUE-LIST (HANDLER-CASE (READ-FROM-STRING S) (READER-ERROR (RC) RC))) REPEAT REPS UNLESS (EQUAL VALS (LIST NIL (LENGTH S))) COLLECT (PROGN (WHEN (> (INCF COUNT) MAXCOUNT) (LOOP-FINISH)) (LIST N S VALS)))) NIL)))
;; Loading (DEF-RANDOM-SUPPRESS-TEST READ-SUPPRESS.13)
;; Loading (DEF-RANDOM-SUPPRESS-TEST READ-SUPPRESS.14 :PREFIX "(" :SUFFIX ")")
;; Loading (DEF-RANDOM-SUPPRESS-TEST READ-SUPPRESS.15 :PREFIX "#(" :SUFFIX ")")
;; Loading (DEF-RANDOM-SUPPRESS-TEST READ-SUPPRESS.16 :CHARS "0123456789.eEfFsSdDlL+-")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SLASH.1 "#\\boguscharname")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SLASH.2 "#\\:x")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SLASH.3 "#\\::::")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SLASH.4 "#\\123")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SLASH.5 "#0\\ ")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SLASH.6 "#100000000\\Space")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-QUOTE.1 "#'foo")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-QUOTE.2 "#'1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-QUOTE.3 "#'(setf bar)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-QUOTE.5 "#'.")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-QUOTE.6 "#'1.2.3")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-QUOTE.7 "#0'F")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-QUOTE.8 "#1000000'F")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.1 "#()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.2 "#(A)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.3 "#(A B)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.4 "#0()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.5 "#0(A)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.6 "#1(A)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.7 "#1(A B C D E)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.8 "#4(A B C D E)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.9 "#10(A B C D E)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.10 "#100()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.11 "#10000000000000()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-LEFT-PAREN.12 "#10000000000000(A)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.1 "#*")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.2 "#0*")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.3 "#*1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.4 "#*0111001")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.5 "#*73298723497132")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.6 "#*abcdefghijklmnopqrstuvwxyz")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.7 "#*ABCDEFGHIJKLMNOPQRSTUVWXYZ")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.8 "#*:")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.9 "#*::::")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.10 "#1*")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.11 "#10000*")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.12 "#10000000000000*")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.13 "#4*001101001")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-ASTERISK.14 "#2*")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.1 "#:1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.2 "#:foo")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.3 "#0:1/2")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.4 "#10:-2")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.5 "#100000000000:x")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.6 "#3:foo")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.7 "#::")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.8 "#:123")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-COLON.9 "#:.")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-DOT.1 "#.1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-DOT.2 "#.#:foo")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-DOT.3 "#.(throw 'foo nil)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-DOT.4 "#0.1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-DOT.5 "#10.1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-DOT.6 "#1000000000000000.1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.1 "#b0")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.2 "#B1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.3 "#BX")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.4 "#b.")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.5 "#0b0")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.6 "#1B1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.7 "#100b010")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.8 "#1000000000000b010")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.9 "#B101/100")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-B.10 "#b101/100/11")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.1 "#o0")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.2 "#O1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.3 "#OX")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.4 "#o.")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.5 "#od6")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.6 "#1O9")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.7 "#100O010")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.8 "#1000000000000o27423")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.9 "#O123/457")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-O.10 "#o12/17/21")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.1 "#c(0 0)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.2 "#C(1.0 1.0)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.3 "#cFOO")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.4 "#c1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.5 "#C(1 2 3)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.6 "#c.")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.7 "#c()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.8 "#c(1)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.9 "#C(1 . 2)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.10 "#c(1 2 3)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.11 "#0c(1 2)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.12 "#1C(1 2)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.13 "#10c(1 2)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.14 "#123456789c(1 2)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-C.15 "#c(..)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.1 "#x0")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.2 "#X1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.3 "#XX")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.4 "#x.")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.5 "#xy6")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.6 "#1X9")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.7 "#100X010")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.8 "#1000000000000x2af23")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.9 "#X123/DE7")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-X.10 "#x12/17/21")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.1 "#2r1101")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.2 "#10R9871")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.3 "#36r721zwoqnASLDKJA22")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.4 "#r.")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.5 "#2r379ze")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.6 "#0r0")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.7 "#1r0")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.8 "#100r0A")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.9 "#1000000000000r0A")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-R.10 "#2r!@#$%^&*_-+={}[]:<>.?/")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.1 "#a()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.2 "#2a((a)(b c))")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.3 "#a1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.4 "#1a1")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.5 "#10a(a b c)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.6 "#100a(a b c)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.7 "#10000000000000a(a b c)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.8 "#a..")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-A.9 "#a(...)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.1 "#s()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.2 "#S(invalid-sname)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.3 "#s(..)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.4 "#S(foo bar)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.5 "#0s()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.6 "#1S()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.7 "#10s()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.8 "#271S()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-S.9 "#712897459812s()")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-P.1 "#p\"\"")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-P.2 "#P123")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-P.3 "#p1/3")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-P.4 "#0P\"\"")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-P.5 "#1p\"\"")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-P.6 "#100P\"\"")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-P.7 "#1234567890p\"\"")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-EQUAL.1 "#=nil")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-EQUAL.2 "#1=nil")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-EQUAL.3 "#100=nil")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-EQUAL.4 "(#1=nil #1=nil)")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SHARP.1 "##")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SHARP.2 "#1#")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SHARP.3 "#100#")
;; Loading (DEF-READ-SUPPRESS-TEST READ-SUPPRESS.SHARP-SHARP.4 "#123456789#")
;; Loading (DEF-SYNTAX-TEST READ-SUPPRESS.ERROR.1 (SIGNALS-ERROR (LET ((*READ-SUPPRESS* T)) (READ-FROM-STRING "')")) READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST READ-SUPPRESS.ERROR.2 (SIGNALS-ERROR (LET ((*READ-SUPPRESS* T)) (READ-FROM-STRING "#<")) READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST READ-SUPPRESS.ERROR.3 (SIGNALS-ERROR (LET ((*READ-SUPPRESS* T)) (READ-FROM-STRING "# ")) READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST READ-SUPPRESS.ERROR.4 (SIGNALS-ERROR (LET ((*READ-SUPPRESS* T)) (READ-FROM-STRING "#)")) READER-ERROR) T)
;; Loading (LOAD "set-syntax-from-char.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/set-syntax-from-char.lsp 81F8A4B7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "reader-aux.lsp")
;; Loading (DEFMACRO DEF-SET-SYNTAX-FROM-CHAR-TEST (NAME FORM &BODY EXPECTED-VALUES) (SYSTEM.INTERNALS::BACKQUOTE (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA NAME) (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (SYSTEM.INTERNALS::BQ-COMMA FORM))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN EXPECTED-VALUES))))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFMACRO DEF-SET-SYNTAX-FROM-CHAR-TRAIT-TEST (C TEST-FORM EXPECTED-VALUE) (SETQ C (TYPECASE C (CHARACTER C) ((OR STRING SYMBOL) (NAME-CHAR (STRING C))) (T NIL))) (WHEN C (SYSTEM.INTERNALS::BACKQUOTE (DEF-SET-SYNTAX-FROM-CHAR-TEST (SYSTEM.INTERNALS::BQ-COMMA (INTERN (CONCATENATE (QUOTE STRING) "SET-SYNTAX-FROM-CHAR-TRAIT-X-" (OR (CHAR-NAME C) (STRING C))) :CL-TEST)) (LET ((C (SYSTEM.INTERNALS::BQ-COMMA C))) (VALUES (SET-SYNTAX-FROM-CHAR C #\X) (SYSTEM.INTERNALS::BQ-COMMA TEST-FORM))) T (SYSTEM.INTERNALS::BQ-COMMA EXPECTED-VALUE)))))
;; Loading (DEFMACRO DEF-SET-SYNTAX-FROM-CHAR-ALPHABETIC-TRAIT-TEST (C) (SYSTEM.INTERNALS::BACKQUOTE (DEF-SET-SYNTAX-FROM-CHAR-TRAIT-TEST (SYSTEM.INTERNALS::BQ-COMMA C) (LET* ((*PACKAGE* (FIND-PACKAGE "CL-TEST")) (SYM (READ-FROM-STRING (STRING C)))) (LIST (LET ((SYM2 (FIND-SYMBOL (STRING C)))) (OR (EQT SYM SYM2) (LIST SYM SYM2))) (OR (EQUALT (SYMBOL-NAME SYM) (STRING C)) (LIST (SYMBOL-NAME SYM) (STRING C))))) (T T))))
;; Loading (LOOP FOR C ACROSS "\\|!\"#$%&'()*,;<=>?@[]^_`~{}+-/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" DO (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEF-SET-SYNTAX-FROM-CHAR-ALPHABETIC-TRAIT-TEST (SYSTEM.INTERNALS::BQ-COMMA C)))))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFMACRO DEF-SET-SYNTAX-FROM-CHAR-INVALID-TRAIT-TEST (C) (SYSTEM.INTERNALS::BACKQUOTE (DEF-SET-SYNTAX-FROM-CHAR-TRAIT-TEST (SYSTEM.INTERNALS::BQ-COMMA C) (HANDLER-CASE (LET* ((*PACKAGE* (FIND-PACKAGE "CL-TEST")) (SYM (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (STRING C) "Z")))) SYM) (READER-ERROR (C) (DECLARE (IGNORE C)) :GOOD)) :GOOD)))
;; Loading (LOOP FOR NAME IN (QUOTE ("Backspace" "Tab" "Newline" "Linefeed" "Page" "Return" "Space" "Rubout")) DO (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEF-SET-SYNTAX-FROM-CHAR-INVALID-TRAIT-TEST (SYSTEM.INTERNALS::BQ-COMMA NAME)))))
Warning: #<Simple-Warning Redefining test SET-SYNTAX-FROM-CHAR-TRAIT-X-N\E\W\L\I\N\E>
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.SINGLE-ESCAPE.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (LET ((RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\\) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\Z)))))) (UNLESS (EQUAL RESULTS (QUOTE (T Z))) (LIST (LIST C RESULTS))))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.SINGLE-ESCAPE.2 (LOOP FOR C ACROSS +STANDARD-CHARS+ UNLESS (EQL C #\") NCONC (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (LET ((RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\\) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST #\" C #\" #\")))))) (UNLESS (EQUAL RESULTS (QUOTE (T "\""))) (LIST (LIST C RESULTS))))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.MULTIPLE-ESCAPE (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (LET ((RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\|) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\Z C))) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\z #\|))) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST #\| #\Z C))) (ERROR (C) C))))) (UNLESS (OR (EQL C #\Z) (EQL C #\z) (EQUAL RESULTS (QUOTE (T Z \z Z)))) (LIST (LIST C RESULTS))))))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.SEMICOLON (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (EXPECTED (IF (EQL C #\0) (QUOTE 1) (QUOTE 0))) (C2 (IF (EQL C #\0) #\1 #\0))) (LET ((RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\;) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C2 C #\2))) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C2 C #\2 #\Newline #\3))) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\2 #\Newline C2))) (ERROR (C) C))))) (UNLESS (EQUAL RESULTS (LIST T EXPECTED EXPECTED EXPECTED)) (LIST (LIST C RESULTS))))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.LEFT-PAREN (LOOP FOR C ACROSS +STANDARD-CHARS+ UNLESS (FIND C ")") NCONC (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (EXPECTED (IF (EQL C #\0) (QUOTE (1)) (QUOTE (0)))) (C2 (IF (EQL C #\0) #\1 #\0))) (LET ((RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\() (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) ")")) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2) ")2" (LIST #\Newline #\3))) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2) ")")) (ERROR (C) C))))) (UNLESS (EQUAL RESULTS (LIST T NIL EXPECTED EXPECTED)) (LIST (LIST C RESULTS))))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.RIGHT-PAREN (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (LET ((RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\)) (HANDLER-CASE (READ-FROM-STRING (STRING C) NIL NIL) (READER-ERROR (C) :GOOD) (ERROR (C) C))))) (UNLESS (EQUAL RESULTS (QUOTE (T :GOOD))) (LIST (LIST C RESULTS))))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.SINGLE-QUOTE (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (EXPECTED (IF (EQL C #\0) (QUOTE (QUOTE 1)) (QUOTE (QUOTE 0)))) (C2 (IF (EQL C #\0) #\1 #\0))) (LET ((RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\') (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2))) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2) " 2")) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2) ")")) (ERROR (C) C))))) (UNLESS (EQUAL RESULTS (LIST T EXPECTED EXPECTED EXPECTED)) (LIST (LIST C RESULTS))))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.DOUBLE-QUOTE (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (WITH-STANDARD-IO-SYNTAX (LET ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (EXPECTED (IF (EQL C #\0) "1" "0")) (C2 (IF (EQL C #\0) #\1 #\0))) (LET ((RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\") (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2 C))) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2 C #\2))) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2 C) ")")) (ERROR (C) C))))) (UNLESS (EQUAL RESULTS (LIST T EXPECTED EXPECTED EXPECTED)) (LIST (LIST C RESULTS))))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.BACKQUOTE (LOOP FOR C ACROSS +STANDARD-CHARS+ UNLESS (FIND C ",x") NCONC (WITH-STANDARD-IO-SYNTAX (LET* ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (C2 (IF (EQL C #\Space) #\Newline #\Space)) (RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\`) (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X 0)) (SYSTEM.INTERNALS::BQ-COMMA (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\, #\x))))))) (ERROR (C) C)) (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X 0)) (SYSTEM.INTERNALS::BQ-COMMA (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\, #\x C2))))))) (ERROR (C) C)) (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X 0)) (SYSTEM.INTERNALS::BQ-COMMA (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C C2 #\, #\x C2))))))) (ERROR (C) C))))) (UNLESS (EQUAL RESULTS (QUOTE (T 0 0 0))) (LIST (LIST C RESULTS)))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.COMMA (LOOP FOR C ACROSS +STANDARD-CHARS+ UNLESS (FIND C "`x") NCONC (WITH-STANDARD-IO-SYNTAX (LET* ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (C2 (IF (EQL C #\Space) #\Newline #\Space)) (RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\,) (HANDLER-CASE (READ-FROM-STRING (STRING C)) (READER-ERROR (C) :GOOD) (ERROR (C) C)) (HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((X 0)) (SYSTEM.INTERNALS::BQ-COMMA (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "`" (LIST C) "x")))))) (ERROR (C) C))))) (UNLESS (EQUAL RESULTS (QUOTE (T :GOOD 0))) (LIST (LIST C RESULTS)))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.SHARP.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (WITH-STANDARD-IO-SYNTAX (LET* ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\#) (IF (NOT (EQL C #\Space)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\Space))) (READER-ERROR NIL :GOOD) (ERROR (C) C)) :GOOD) (IF (NOT (FIND C "'X")) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "'X")) (ERROR (C) C)) (QUOTE (FUNCTION X))) (IF (NOT (FIND C "(X)")) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "(X)")) (ERROR (C) C)) #(X)) (IF (NOT (FIND C ")")) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) ")")) (READER-ERROR (C) :GOOD) (ERROR (C) C)) :GOOD) (IF (NOT (FIND C "*")) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\*))) (ERROR (C) C)) #*) (IF (NOT (FIND C ":|")) (HANDLER-CASE (LET ((SYM (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) ":||")))) (AND (SYMBOLP SYM) (NULL (SYMBOL-PACKAGE SYM)) (SYMBOL-NAME SYM))) (ERROR (C) C)) "") (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\<))) (READER-ERROR (C) :GOOD) (ERROR (C) C)) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C #\\ #\X))) (ERROR (C) C)) (IF (NOT (FIND C "1")) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "|1111|#1")) (ERROR (C) C)) 1) (IF (NOT (FIND C "1")) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "|11#|111|#11|#1")) (ERROR (C) C)) 1)))) (UNLESS (EQUALP RESULTS (QUOTE (T :GOOD (FUNCTION X) #(X) :GOOD #* "" :GOOD #\X 1 1))) (LIST (LIST C RESULTS)))))) NIL)
;; Loading (DEFTEST SET-SYNTAX-FROM-CHAR.SHARP.2 (LOOP FOR C ACROSS +STANDARD-CHARS+ NCONC (WITH-STANDARD-IO-SYNTAX (LET* ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST")) (RESULTS (LIST (SET-SYNTAX-FROM-CHAR C #\#) (IF (NOT (FIND C "+XC ")) (HANDLER-CASE (LET ((*FEATURES* (CONS (QUOTE :X) *FEATURES*))) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "+X C"))) (ERROR (C) C)) (QUOTE C)) (IF (NOT (FIND C "-(OR)")) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "-(OR)R")) (ERROR (C) C)) (QUOTE R)) (IF (NOT (FIND C ".1")) (HANDLER-CASE (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) ".1")) (ERROR (C) C)) 1) (IF (NOT (FIND C "01aA")) (HANDLER-CASE (LIST (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "0a1")) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "0A1"))) (ERROR (C) C)) (QUOTE (#<(Array T Nil) C1E92173> #<(Array T Nil) C1E924F3>))) (IF (NOT (FIND C "01bB")) (HANDLER-CASE (LIST (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "b101")) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "B011"))) (ERROR (C) C)) (QUOTE (5 3))) (IF (NOT (FIND C "cC()12 ")) (HANDLER-CASE (LIST (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "c(1 2)")) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "C(2 1)"))) (ERROR (C) C)) (QUOTE (#C(1 2) #C(2 1)))) (IF (NOT (FIND C "oO0127")) (HANDLER-CASE (LIST (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "o172")) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "O7721"))) (ERROR (C) C)) (QUOTE (122 4049))) (IF (NOT (FIND C "pP\"")) (HANDLER-CASE (LIST (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "p\"\"")) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "P\"\""))) (ERROR (C) C)) (QUOTE ((PARSE-NAMESTRING (QUOTE "")) (PARSE-NAMESTRING (QUOTE ""))))) (IF (NOT (FIND C "rR0123")) (HANDLER-CASE (LIST (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "3r210")) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "3R1111"))) (ERROR (C) C)) (QUOTE (21 40))) (IF (NOT (FIND C "xX04dF")) (HANDLER-CASE (LIST (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "x40Fd")) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (LIST C) "XFd04"))) (ERROR (C) C)) (QUOTE (16637 64772)))))) (UNLESS (EQUALP RESULTS (QUOTE (T C R 1 (#<(Array T Nil) C1EDCED3> #<(Array T Nil) C1EDD253>) (5 3) (#C(1 2) #C(2 1)) (122 4049) ((PARSE-NAMESTRING (QUOTE "")) (PARSE-NAMESTRING (QUOTE ""))) (21 40) (16637 64772)))) (LIST (LIST C RESULTS)))))) NIL)
;; Loading (LOAD "dispatch-macro-characters.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/dispatch-macro-characters.lsp C1F2BC57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MAKE-DISPATCH-MACRO-CHARACTER.1 (WITH-STANDARD-IO-SYNTAX (LET* ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (VALUES (MAKE-DISPATCH-MACRO-CHARACTER #\!) (READ-FROM-STRING "123!")))) T 123)
;; Loading (DEFTEST MAKE-DISPATCH-MACRO-CHARACTER.2 (WITH-STANDARD-IO-SYNTAX (LET* ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (VALUES (MAKE-DISPATCH-MACRO-CHARACTER #\! T) (READ-FROM-STRING "123!")))) T 123!)
;; Loading (DEFTEST MAKE-DISPATCH-MACRO-CHARACTER.3 (WITH-STANDARD-IO-SYNTAX (LET* ((*READTABLE* (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (VALUES (MAKE-DISPATCH-MACRO-CHARACTER #\!) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR RESULT = (HANDLER-CASE (READ-FROM-STRING (COERCE (LIST #\! C #\X) (QUOTE STRING))) (READER-ERROR (C) :GOOD) (ERROR (C) :BAD)) UNLESS (EQL RESULT :GOOD) COLLECT (LIST C RESULT))))) T NIL)
;; Loading (DEFTEST MAKE-DISPATCH-MACRO-CHARACTER.4 (WITH-STANDARD-IO-SYNTAX (LET* ((RT (COPY-READTABLE NIL)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (VALUES (MAKE-DISPATCH-MACRO-CHARACTER #\! T RT) (READ-FROM-STRING "!") (LET ((*READTABLE* RT)) (READ-FROM-STRING "123!"))))) T ! 123!)
;; Loading (DEFTEST MAKE-DISPATCH-MACRO-CHARACTER.ERROR.1 (LET ((*READTABLE* (COPY-READTABLE NIL))) (SIGNALS-ERROR (MAKE-DISPATCH-MACRO-CHARACTER) PROGRAM-ERROR)) T)
;; Loading (DEFTEST MAKE-DISPATCH-MACRO-CHARACTER.ERROR.2 (LET ((*READTABLE* (COPY-READTABLE NIL))) (SIGNALS-ERROR (MAKE-DISPATCH-MACRO-CHARACTER #\! T *READTABLE* NIL) PROGRAM-ERROR)) T)
;; Loading (DEFTEST GET-DISPATCH-MACRO-CHARACTER.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ WHEN (AND (NOT (EQL C #\#)) (HANDLER-CASE (LIST (GET-DISPATCH-MACRO-CHARACTER C #\a) C) (ERROR (CND) NIL))) COLLECT IT) NIL)
;; Loading (LOAD "syntax.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/syntax.lsp C1FAFA77>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "reader-aux.lsp")
;; Loading (DEF-SYNTAX-TEST SYNTAX.WHITESPACE.1 (LET ((NAMES (QUOTE ("Tab" "Newline" "Linefeed" "Space" "Return" "Page")))) (LOOP FOR NAME IN NAMES FOR C = (NAME-CHAR NAME) NCONC (WHEN C (LET* ((S (CONCATENATE (QUOTE STRING) (STRING C) "123")) (VAL (READ-FROM-STRING S))) (UNLESS (EQL VAL 123) (LIST (LIST NAME C S VAL))))))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-SYNTAX-TEST SYNTAX.CONSTITUENT.1 (LET ((CHARS (CONCATENATE (QUOTE STRING) "!$%&*<=>?@[]^_-{}+/" "abcdefghijklmnopqrstuvwxyz" "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))) (LOOP FOR C ACROSS CHARS FOR S = (STRING C) FOR SYM = (READ-FROM-STRING S) UNLESS (STRING= (SYMBOL-NAME SYM) (STRING-UPCASE S)) COLLECT (LIST C SYM))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.BACKSPACE.INVALID (LET ((C (NAME-CHAR "Backspace"))) (IF (NOT C) T (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (READ-FROM-STRING (STRING (SYSTEM.INTERNALS::BQ-COMMA C))) READER-ERROR))))) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.RUBOUT.INVALID (LET ((C (NAME-CHAR "Rubout"))) (IF (NOT C) T (EVAL (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (READ-FROM-STRING (STRING (SYSTEM.INTERNALS::BQ-COMMA C))) READER-ERROR))))) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DIGITS.ALPHABETIC.1 (LOOP FOR BASE FROM 2 TO 9 NCONC (LET ((*READ-BASE* BASE)) (LOOP FOR DIGIT-VAL FROM BASE TO 9 FOR C = (ELT "0123456789" DIGIT-VAL) FOR S = (STRING C) FOR VAL = (READ-FROM-STRING S) UNLESS (AND (SYMBOLP VAL) (STRING= S (SYMBOL-NAME VAL))) COLLECT (LIST BASE DIGIT-VAL C S VAL)))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.ESCAPED.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S0 = (STRING C) FOR S = (CONCATENATE (QUOTE STRING) "\\" S0) FOR SYM = (READ-FROM-STRING S) UNLESS (AND (SYMBOLP SYM) (STRING= (SYMBOL-NAME SYM) S0)) COLLECT (LIST C S0 S SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.ESCAPED.2 (LET ((COUNT 0)) (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S0 = (AND C (STRING C)) FOR S = (AND C (CONCATENATE (QUOTE STRING) "\\" S0)) FOR SYM = (AND C (READ-FROM-STRING S)) UNLESS (OR (NOT C) (AND (SYMBOLP SYM) (STRING= (SYMBOL-NAME SYM) S0))) COLLECT (PROGN (WHEN (> (INCF COUNT) 100) (LOOP-FINISH)) (LIST I C S0 S SYM)))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.ESCAPED.3 (LOOP FOR I = (RANDOM (MIN CHAR-CODE-LIMIT (ASH 1 24))) FOR C = (CODE-CHAR I) FOR S0 = (AND C (STRING C)) FOR S = (AND C (CONCATENATE (QUOTE STRING) "\\" S0)) FOR SYM = (AND C (READ-FROM-STRING S)) REPEAT 1000 UNLESS (OR (NOT C) (AND (SYMBOLP SYM) (STRING= (SYMBOL-NAME SYM) S0))) COLLECT (LIST I C S0 S SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.ESCAPED.4 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR BAD = (FIND C "\\|") FOR S0 = (STRING C) FOR S = (CONCATENATE (QUOTE STRING) "|" S0 "|") FOR SYM = (AND (NOT BAD) (READ-FROM-STRING S)) UNLESS (OR BAD (AND (SYMBOLP SYM) (STRING= (SYMBOL-NAME SYM) S0))) COLLECT (LIST C S0 S SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.ESCAPED.5 (LET ((COUNT 0)) (LOOP FOR I FROM 0 BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR BAD = (OR (NOT C) (FIND C "\\|")) FOR S0 = (AND C (STRING C)) FOR S = (AND C (CONCATENATE (QUOTE STRING) "|" S0 "|")) FOR SYM = (AND C (NOT BAD) (READ-FROM-STRING S)) UNLESS (OR BAD (AND (SYMBOLP SYM) (STRING= (SYMBOL-NAME SYM) S0))) COLLECT (PROGN (WHEN (> (INCF COUNT) 100) (LOOP-FINISH)) (LIST C S0 S SYM)))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.ESCAPED.6 (LOOP FOR I = (RANDOM (MIN CHAR-CODE-LIMIT (ASH 1 24))) FOR C = (CODE-CHAR I) FOR BAD = (OR (NOT C) (FIND C "\\|")) FOR S0 = (AND C (STRING C)) FOR S = (AND C (CONCATENATE (QUOTE STRING) "|" S0 "|")) FOR SYM = (AND (NOT BAD) (READ-FROM-STRING S)) REPEAT 1000 UNLESS (OR BAD (AND (SYMBOLP SYM) (STRING= (SYMBOL-NAME SYM) S0))) COLLECT (LIST C S0 S SYM)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.ESCAPE.WHITESPACE.1 (LET ((NAMES (QUOTE ("Tab" "Newline" "Linefeed" "Space" "Return" "Page" "Rubout" "Backspace")))) (LOOP FOR NAME IN NAMES FOR C = (NAME-CHAR NAME) NCONC (WHEN C (LET* ((S (CONCATENATE (QUOTE STRING) "\\" (STRING C))) (VAL (READ-FROM-STRING S))) (UNLESS (EQL VAL (INTERN (STRING C))) (LIST (LIST NAME C S VAL))))))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.ESCAPE.WHITESPACE.2 (LET ((NAMES (QUOTE ("Tab" "Newline" "Linefeed" "Space" "Return" "Page")))) (LOOP FOR NAME IN NAMES FOR C = (NAME-CHAR NAME) NCONC (WHEN C (LET* ((S (CONCATENATE (QUOTE STRING) "|" (STRING C) "|")) (VAL (READ-FROM-STRING S))) (UNLESS (EQL VAL (INTERN (STRING C))) (LIST (LIST NAME C S VAL))))))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BACKSLASH.1 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (CONCATENATE (QUOTE STRING) "#\\" (STRING C)) FOR C2 = (READ-FROM-STRING S) UNLESS (EQL C C2) COLLECT (LIST C S C2)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BACKSLASH.2 (LET ((COUNT 0)) (LOOP FOR I BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S = (AND C (CONCATENATE (QUOTE STRING) "#\\" (STRING C))) FOR C2 = (AND C (READ-FROM-STRING S)) UNLESS (EQL C C2) COLLECT (PROGN (WHEN (> (INCF COUNT) 100) (LOOP-FINISH)) (LIST C S C2)))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BACKSLASH.3 (LOOP FOR I = (RANDOM (MIN (ASH 1 24) CHAR-CODE-LIMIT)) FOR C = (CODE-CHAR I) FOR S = (AND C (CONCATENATE (QUOTE STRING) "#\\" (STRING C))) FOR C2 = (AND C (READ-FROM-STRING S)) REPEAT 1000 UNLESS (EQL C C2) COLLECT (LIST I C S C2)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BACKSLASH.4 (FLET ((%F (S) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "#\\" S)))) (LOOP FOR S IN (QUOTE ("SPACE" "NEWLINE" "TAB" "RUBOUT" "BACKSPACE" "PAGE" "LINEFEED" "RETURN")) FOR C = (NAME-CHAR S) UNLESS (OR (NULL C) (AND (EQL (%F S) C) (EQL (%F (STRING-DOWNCASE S)) C) (EQL (%F (STRING-CAPITALIZE S)) C))) COLLECT (LIST S C))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BACKSLASH.5 (FLET ((%F (S) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "#\\" S)))) (LET ((GOOD-CHARS (CONCATENATE (QUOTE STRING) +ALPHANUMERIC-CHARS+ "<,.>\"':/?[]{}~`!@#$%^&*_-+="))) (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR NAME = (CHAR-NAME C) UNLESS (OR (NULL NAME) (STRING/= "" (STRING-TRIM GOOD-CHARS NAME)) (AND (EQL (%F NAME) C) (EQL (%F (STRING-DOWNCASE NAME)) C) (EQL (%F (STRING-UPCASE NAME)) C) (EQL (%F (STRING-CAPITALIZE NAME)) C))) COLLECT (LIST C NAME)))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BACKSLASH.6 (FLET ((%F (S) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "#\\" S)))) (LET ((GOOD-CHARS (CONCATENATE (QUOTE STRING) +ALPHANUMERIC-CHARS+ "<,.>\"':/?[]{}~`!@#$%^&*_-+="))) (LOOP FOR I BELOW (MIN 65536 CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR NAME = (AND C (CHAR-NAME C)) UNLESS (OR (NULL NAME) (STRING/= "" (STRING-TRIM GOOD-CHARS NAME)) (AND (EQL (%F NAME) C) (EQL (%F (STRING-DOWNCASE NAME)) C) (EQL (%F (STRING-UPCASE NAME)) C) (EQL (%F (STRING-CAPITALIZE NAME)) C))) COLLECT (LIST I C NAME)))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BACKSLASH.7 (FLET ((%F (S) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) "#\\" S)))) (LET ((GOOD-CHARS (CONCATENATE (QUOTE STRING) +ALPHANUMERIC-CHARS+ "<,.>\"':/?[]{}~`!@#$%^&*_-+="))) (LOOP FOR I = (RANDOM (MIN (ASH 1 24) CHAR-CODE-LIMIT)) FOR C = (CODE-CHAR I) FOR NAME = (AND C (CHAR-NAME C)) REPEAT 1000 UNLESS (OR (NULL NAME) (STRING/= "" (STRING-TRIM GOOD-CHARS NAME)) (AND (EQL (%F NAME) C) (EQL (%F (STRING-DOWNCASE NAME)) C) (EQL (%F (STRING-UPCASE NAME)) C) (EQL (%F (STRING-CAPITALIZE NAME)) C))) COLLECT (LIST I C NAME)))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-QUOTE.1 (READ-FROM-STRING "#'X") (FUNCTION X) 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-QUOTE.2 (READ-FROM-STRING "#':X") (FUNCTION :X) 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-QUOTE.3 (READ-FROM-STRING "#'17") (FUNCTION 17) 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-QUOTE.ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING "#'") END-OF-FILE) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-QUOTE.ERROR.2 (SIGNALS-ERROR (READ-FROM-STRING "(#'" NIL NIL) END-OF-FILE) T)
;; Loading (DEF-SYNTAX-VECTOR-TEST SYNTAX.SHARP-LEFT-PAREN.1 "#()")
;; Loading (DEF-SYNTAX-VECTOR-TEST SYNTAX.SHARP-LEFT-PAREN.2 "#0()")
;; Loading (DEF-SYNTAX-VECTOR-TEST SYNTAX.SHARP-LEFT-PAREN.3 "#(a)" A)
;; Loading (DEF-SYNTAX-VECTOR-TEST SYNTAX.SHARP-LEFT-PAREN.4 "#(a b c)" A B C)
;; Loading (DEF-SYNTAX-VECTOR-TEST SYNTAX.SHARP-LEFT-PAREN.5 "#2(a)" A A)
;; Loading (DEF-SYNTAX-VECTOR-TEST SYNTAX.SHARP-LEFT-PAREN.6 "#5(a b)" A B B B B)
;; Loading (DEF-SYNTAX-VECTOR-TEST SYNTAX.SHARP-LEFT-PAREN.7 "#5(a b c d e)" A B C D E)
;; Loading (DEF-SYNTAX-VECTOR-TEST SYNTAX.SHARP-LEFT-PAREN.8 "#9(a b c d e)" A B C D E E E E E)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-LEFT-PAREN.9 (LET ((*READ-BASE* 2)) (READ-FROM-STRING "#10(a)")) #(A A A A A A A A A A) 6)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-LEFT-PAREN.ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING "#(") END-OF-FILE) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-LEFT-PAREN.ERROR.2 (SIGNALS-ERROR (READ-FROM-STRING "(#(" NIL NIL) END-OF-FILE) T)
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.1 "#*")
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.2 "#0*")
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.3 "#1*0" 0)
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.4 "#1*1" 1)
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.5 "#2*1" 1 1)
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.6 "#2*0" 0 0)
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.7 "#5*010" 0 1 0 0 0)
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.8 "#7*0101" 0 1 0 1 1 1 1)
;; Loading (DEF-SYNTAX-BIT-VECTOR-TEST SYNTAX.SHARP-ASTERISK.9 "#10*01010" 0 1 0 1 0 0 0 0 0 0)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-ASTERISK.10 (LET ((*READ-BASE* 3)) (READ-FROM-STRING "#10*01")) #*0111111111 6)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-ASTERISK.11 (LET ((*READ-SUPPRESS* T)) (VALUES (READ-FROM-STRING "#1* "))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-ASTERISK.12 (LET ((*READ-SUPPRESS* T)) (VALUES (READ-FROM-STRING "#1*00"))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-ASTERISK.13 (LET ((*READ-SUPPRESS* T)) (VALUES (READ-FROM-STRING "#*012"))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-ASTERISK.ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING "#1* X") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-ASTERISK.ERROR.2 (SIGNALS-ERROR (READ-FROM-STRING "#2*011") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-ASTERISK.ERROR.3 (SIGNALS-ERROR (READ-FROM-STRING "#*012") READER-ERROR) T)
;; Loading (DEF-SYNTAX-UNINTERN-TEST SYNTAX.SHARP-COLON.3 "a")
;; Loading (DEF-SYNTAX-UNINTERN-TEST SYNTAX.SHARP-COLON.4 "A")
;; Loading (DEF-SYNTAX-UNINTERN-TEST SYNTAX.SHARP-COLON.5 "NIL")
;; Loading (DEF-SYNTAX-UNINTERN-TEST SYNTAX.SHARP-COLON.6 "T")
;; Loading (DEF-SYNTAX-UNINTERN-TEST SYNTAX.SHARP-COLON.7 ".")
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-DOT.1 (READ-FROM-STRING "#.(+ 1 2)") 3 9)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-DOT.2 (READ-FROM-STRING "#.'X") X 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-DOT.ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING "#.") END-OF-FILE) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-DOT.ERROR.2 (SIGNALS-ERROR (READ-FROM-STRING "(#." NIL NIL) END-OF-FILE) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-DOT.ERROR.3 (SIGNALS-ERROR (LET ((*READ-EVAL* NIL)) (READ-FROM-STRING "#.1")) READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.1 (READ-FROM-STRING "#b0") 0 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.2 (READ-FROM-STRING "#B1") 1 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.3 (READ-FROM-STRING "#b101101") 45 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.4 (READ-FROM-STRING "#B101101") 45 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.5 (READ-FROM-STRING "#b010001/100") 17/4 12)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.6 (READ-FROM-STRING "#b-10011") -19 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.7 (READ-FROM-STRING "#B-1/10") 1/2 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.8 (READ-FROM-STRING "#B-0/10") 0 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.9 (READ-FROM-STRING "#b0/111") 0 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-B.10 (LET ((*READ-EVAL* NIL)) (READ-FROM-STRING "#b-10/11")) 2/3 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.1 (READ-FROM-STRING "#o0") 0 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.2 (READ-FROM-STRING "#O7") 7 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.3 (READ-FROM-STRING "#o10") 8 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.4 (READ-FROM-STRING "#O011") 9 5)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.5 (READ-FROM-STRING "#o-0") 0 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.6 (READ-FROM-STRING "#O-1") -1 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.7 (READ-FROM-STRING "#O11/10") 9/8 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.8 (READ-FROM-STRING "#o-1/10") 1/8 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.9 (READ-FROM-STRING "#O0/10") 0 6)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-O.10 (LET ((*READ-EVAL* NIL)) (READ-FROM-STRING "#o-10/11")) 8/9 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.1 (READ-FROM-STRING "#x0") 0 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.2 (READ-FROM-STRING "#X1") 1 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.3 (READ-FROM-STRING "#xa") 10 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.4 (READ-FROM-STRING "#Xb") 11 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.5 (READ-FROM-STRING "#XC") 12 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.6 (READ-FROM-STRING "#xD") 13 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.7 (READ-FROM-STRING "#xe") 14 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.8 (READ-FROM-STRING "#Xf") 15 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.9 (READ-FROM-STRING "#x10") 16 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.10 (READ-FROM-STRING "#X1ab") 427 5)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.11 (READ-FROM-STRING "#x-1") -1 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.12 (READ-FROM-STRING "#X-0") 0 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.13 (READ-FROM-STRING "#xa/B") 10/11 5)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.14 (READ-FROM-STRING "#X-1/1c") 1/28 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-X.15 (LET ((*READ-EVAL* NIL)) (READ-FROM-STRING "#x-10/11")) 16/17 8)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-R.1 (LOOP FOR I = (RANDOM (ASH 1 (+ 2 (RANDOM 32)))) FOR BASE = (+ 2 (RANDOM 35)) FOR S = (WRITE-TO-STRING I :RADIX NIL :BASE BASE :READABLY NIL) FOR C = (RANDOM-FROM-SEQ "rR") FOR S2 = (FORMAT NIL "#~d~c~a" BASE C S) FOR S3 = (RCASE (1 (STRING-UPCASE S2)) (1 (STRING-DOWNCASE S2)) (1 (STRING-CAPITALIZE S2)) (1 S2)) FOR BASE2 = (+ 2 (RANDOM 35)) FOR VALS = (LET ((*READ-BASE* BASE2)) (MULTIPLE-VALUE-LIST (READ-FROM-STRING S3))) REPEAT 1000 UNLESS (EQUAL VALS (LIST I (LENGTH S3))) COLLECT (LIST I BASE S C S2 S3 BASE2 VALS)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-R.2 (READ-FROM-STRING "#2r0") 0 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-R.3 (READ-FROM-STRING "#36r0") 0 5)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-R.4 (READ-FROM-STRING "#29R-0") 0 6)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-R.5 (READ-FROM-STRING "#23r-1") -1 6)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-R.6 (READ-FROM-STRING "#17r11") 18 6)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-T.7 (READ-FROM-STRING "#3r10/11") 3/4 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-T.8 (READ-FROM-STRING "#5R-10/11") 5/6 9)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-C.1 (READ-FROM-STRING "#c(1 1)") #C(1 1) 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-C.2 (READ-FROM-STRING "#C(1 0)") 1 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-C.3 (READ-FROM-STRING "#c(0 1)") #C(0 1) 7)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-C.4 (READ-FROM-STRING "#c(-1/2 1)") #C(1/2 1) 10)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-C.5 (READ-FROM-STRING "#c (1 1)") #C(1 1) 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-C.6 (LOOP FOR FORMAT IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR C = (LET ((*READ-DEFAULT-FLOAT-FORMAT* FORMAT)) (READ-FROM-STRING "#c(1.0 0.0)")) UNLESS (EQL C (COMPLEX (COERCE 1 FORMAT) (COERCE 0 FORMAT))) COLLECT (LIST FORMAT C)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-C.7 (LOOP FOR FORMAT IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR C = (LET ((*READ-DEFAULT-FLOAT-FORMAT* FORMAT)) (READ-FROM-STRING "#C(0.0 1.0)")) UNLESS (EQL C (COMPLEX (COERCE 0 FORMAT) (COERCE 1 FORMAT))) COLLECT (LIST FORMAT C)) NIL)
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.1 "#0anil" (MAKE-ARRAY NIL :INITIAL-ELEMENT NIL))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.2 "#0a1" (MAKE-ARRAY NIL :INITIAL-ELEMENT 1))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.3 "#1a(1 2 3 5)" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.4 "#1a\"abcd\"" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.5 "#1a#1a(:a :b :c)" (MAKE-ARRAY (QUOTE (3)) :INITIAL-CONTENTS (QUOTE (:A :B :C))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.6 "#1a#.(coerce \"abcd\" 'simple-base-string)" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.7 "#1a#*000110" (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (0 0 0 1 1 0))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.8 "#1a#.(make-array 4 :element-type '(unsigned-byte 8)
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.9 "#1a#.(make-array 4 :element-type '(unsigned-byte 4)
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.10 "#1a#.(make-array 4 :element-type '(signed-byte 4)
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.11 "#1a#.(make-array 4 :element-type '(signed-byte 8)
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.12 "#1a#.(make-array 4 :element-type '(unsigned-byte 16)
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.13 "#1a#.(make-array 4 :element-type '(signed-byte 16)
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.14 "#1a#.(make-array 4 :element-type '(unsigned-byte 32)
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.15 "#1a#.(make-array 4 :element-type '(signed-byte 32)
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.16 "#1a#.(make-array 4 :element-type 'fixnum
                      :initial-contents '(1 2 3 5))" (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (1 2 3 5))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.17 "#1anil" (MAKE-ARRAY (QUOTE (0))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.18 "#2anil" (MAKE-ARRAY (QUOTE (0 0))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.19 "#2a((2))" (MAKE-ARRAY (QUOTE (1 1)) :INITIAL-ELEMENT 2))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.20 "#2a((1 2 3)(4 5 6))" (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS #(#(1 2 3) #(4 5 6))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.21 "#2a#(#(1 2 3)#(4 5 6))" (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((1 2 3) (4 5 6)))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.22 "#2a\"\"" (MAKE-ARRAY (QUOTE (0 0))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.23 "#2a#*" (MAKE-ARRAY (QUOTE (0 0))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.24 "#1a#.(make-array '(10) :fill-pointer 5 :initial-element 17)" (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (17 17 17 17 17))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.25 "#1a#.(make-array '(5) :adjustable t :initial-element 17)" (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (17 17 17 17 17))))
;; Loading (DEF-SYNTAX-ARRAY-TEST SYNTAX.SHARP-A.26 "#1A#.(let ((x (make-array '(10) :adjustable t
                      :initial-contents '(1 2 3 4 5 6 7 8 9 10))))
           (make-array '(5) :displaced-to x :displaced-index-offset 2))" (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS (QUOTE (3 4 5 6 7))))
;; Loading (UNLESS (FIND-CLASS (QUOTE SYNTAX-TEST-STRUCT-1) NIL) (DEFSTRUCT SYNTAX-TEST-STRUCT-1 A B C))
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.1 (LET ((V (READ-FROM-STRING "#s(syntax-test-struct-1)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T NIL NIL NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.2 (LET ((V (READ-FROM-STRING "#S(syntax-test-struct-1 :a x :c y :b z)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T X Z Y)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.3 (LET ((V (READ-FROM-STRING "#s(syntax-test-struct-1 \"A\" x)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T X NIL NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.4 (LET ((V (READ-FROM-STRING "#S(syntax-test-struct-1 #\\A x)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T X NIL NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.5 (LET ((V (READ-FROM-STRING "#s(syntax-test-struct-1 :a x :a y)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T X NIL NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.6 (LET ((V (READ-FROM-STRING "#S(syntax-test-struct-1 :a x :allow-other-keys 1)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T X NIL NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.7 (LET ((V (READ-FROM-STRING "#s(syntax-test-struct-1 :b z :allow-other-keys nil)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T NIL Z NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.8 (LET ((V (READ-FROM-STRING "#S(syntax-test-struct-1 :b z :allow-other-keys t :a x :foo bar)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T X Z NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.9 (LET ((V (READ-FROM-STRING "#s(syntax-test-struct-1 a x c y b z :a :bad :b bad2 :c bad3)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T X Z Y)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-S.10 (LET ((V (READ-FROM-STRING "#S(syntax-test-struct-1 #:a x #:c y #:b z)"))) (VALUES (NOTNOT (TYPEP V (QUOTE SYNTAX-TEST-STRUCT-1))) (SYNTAX-TEST-STRUCT-1-A V) (SYNTAX-TEST-STRUCT-1-B V) (SYNTAX-TEST-STRUCT-1-C V))) T X Z Y)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-P.1 (READ-FROM-STRING "#p\"\"") #P"THAT-MAC-THING:" 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-P.2 (READ-FROM-STRING "#P\"syntax.lsp\"") #P"THAT-MAC-THING:syntax.lsp" 14)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-P.3 (READ-FROM-STRING "#P \"syntax.lsp\"") #P"THAT-MAC-THING:syntax.lsp" 15)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-P.4 (LET ((*READ-EVAL* NIL)) (READ-FROM-STRING "#p\"syntax.lsp\"")) #P"THAT-MAC-THING:syntax.lsp" 14)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-P.5 (READ-FROM-STRING "#P#.(make-array '(10) :initial-contents \"syntax.lsp\" :element-type 'base-char)") #P"THAT-MAC-THING:syntax.lsp" 78)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-CIRCLE.1 (LET ((X (READ-FROM-STRING "(#1=(17) #1#)"))) (ASSERT (EQ (CAR X) (CADR X))) X) ((17) (17)))
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-CIRCLE.2 (LET ((X (READ-FROM-STRING "(#0=(17) #0#)"))) (ASSERT (EQ (CAR X) (CADR X))) X) ((17) (17)))
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-CIRCLE.3 (LET ((X (READ-FROM-STRING "(#123456789123456789=(17) #123456789123456789#)"))) (ASSERT (EQ (CAR X) (CADR X))) X) ((17) (17)))
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-CIRCLE.4 (LET ((X (READ-FROM-STRING "#1=(A B . #1#)"))) (ASSERT (EQ (CDDR X) X)) (VALUES (CAR X) (CADR X))) A B)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-CIRCLE.5 (LET ((X (READ-FROM-STRING "#1=#(A B #1#)"))) (ASSERT (TYPEP X (QUOTE (SIMPLE-VECTOR 3)))) (ASSERT (EQ (ELT X 2) X)) (VALUES (ELT X 0) (ELT X 1))) A B)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-CIRCLE.6 (LET ((X (READ-FROM-STRING "((#1=(17)) #1#)"))) (ASSERT (EQ (CAAR X) (CADR X))) X) (((17)) (17)))
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-CIRCLE.7 (LET ((X (READ-FROM-STRING "((#1=#2=(:x)) #1# #2#)"))) (ASSERT (EQ (CAAR X) (CADR X))) (ASSERT (EQ (CAAR X) (CADDR X))) X) (((:X)) (:X) (:X)))
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.1 (LET ((*FEATURES* NIL)) (READ-FROM-STRING "#+X :bad :good")) :GOOD 14)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.2 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+X :good :bad")) :GOOD 10)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.3 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+:x :good :bad")) :GOOD 11)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.4 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+(and):good :bad")) :GOOD 13)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.5 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+(:and):good :bad")) :GOOD 14)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.6 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+(or) :bad :good")) :GOOD 17)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.7 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+(:or) :bad :good")) :GOOD 18)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.8 (LET ((*FEATURES* (QUOTE (X)))) (READ-FROM-STRING "#+X :bad :good")) :GOOD 14)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.9 (LET ((*FEATURES* (QUOTE (X)))) (READ-FROM-STRING "#+CL-TEST::X :good :bad")) :GOOD 19)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.10 (LET ((*FEATURES* NIL)) (READ-FROM-STRING "#+(not x) :good :bad")) :GOOD 16)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.11 (LET ((*FEATURES* (QUOTE (:X)))) (READ-FROM-STRING "#+(not x) :bad :good")) :GOOD 20)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.12 (LET ((*FEATURES* NIL)) (READ-FROM-STRING "#+(:not :x) :good :bad")) :GOOD 18)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.13 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+(and a b) :good :bad")) :GOOD 18)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.14 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+(and a c) :bad :good")) :GOOD 22)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.15 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+(or c b) :good :bad")) :GOOD 17)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-PLUS.16 (LET ((*FEATURES* (QUOTE (:A :X :B)))) (READ-FROM-STRING "#+(or c d) :bad :good")) :GOOD 21)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.1 (READ-FROM-STRING "#||#1") 1 5)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.2 (READ-FROM-STRING "1#||#2") 1##2 6)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.3 (READ-FROM-STRING "#| #| |# |#1") 1 12)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.4 (READ-FROM-STRING "#| ; |#1") 1 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.5 (READ-FROM-STRING "#| ( |#1") 1 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.6 (READ-FROM-STRING "#| # |#1") 1 8)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.7 (READ-FROM-STRING "#| .. |#1") 1 9)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.8 (LOOP FOR C ACROSS +STANDARD-CHARS+ FOR S = (CONCATENATE (QUOTE STRING) "#| " (STRING C) " |#1") FOR VALS = (MULTIPLE-VALUE-LIST (READ-FROM-STRING S)) UNLESS (EQUAL VALS (QUOTE (1 8))) COLLECT (LIST C S VALS)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.9 (LOOP FOR I BELOW (MIN (ASH 1 16) CHAR-CODE-LIMIT) FOR C = (CODE-CHAR I) FOR S = (AND C (CONCATENATE (QUOTE STRING) "#| " (STRING C) " |#1")) FOR VALS = (AND C (MULTIPLE-VALUE-LIST (READ-FROM-STRING S))) UNLESS (OR (NOT C) (EQUAL VALS (QUOTE (1 8)))) COLLECT (LIST I C S VALS)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-BAR.10 (LOOP FOR I = (RANDOM (MIN (ASH 1 24) CHAR-CODE-LIMIT)) FOR C = (CODE-CHAR I) FOR S = (AND C (CONCATENATE (QUOTE STRING) "#| " (STRING C) " |#1")) FOR VALS = (AND C (MULTIPLE-VALUE-LIST (READ-FROM-STRING S))) REPEAT 1000 UNLESS (OR (NOT C) (EQUAL VALS (QUOTE (1 8)))) COLLECT (LIST I C S VALS)) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-WHITESPACE.1 (LET ((NAMES (QUOTE ("Tab" "Newline" "Linefeed" "Space" "Return" "Page")))) (LOOP FOR NAME IN NAMES FOR C = (NAME-CHAR NAME) WHEN C NCONC (LET* ((FORM (SYSTEM.INTERNALS::BACKQUOTE (SIGNALS-ERROR (READ-FROM-STRING (SYSTEM.INTERNALS::BQ-COMMA (CONCATENATE (QUOTE STRING) "#" (STRING C)))) READER-ERROR))) (VALS (MULTIPLE-VALUE-LIST (EVAL FORM)))) (UNLESS (EQUAL VALS (QUOTE (T))) (LIST (LIST NAME C FORM VALS)))))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-LESS-THAN.1 (SIGNALS-ERROR (READ-FROM-STRING "#<" NIL NIL) READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SHARP-CLOSE-PAREN.1 (SIGNALS-ERROR (READ-FROM-STRING "#)" NIL NIL) READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SINGLE-ESCAPE-EOF.1 (SIGNALS-ERROR (READ-FROM-STRING "\\") END-OF-FILE) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.SINGLE-ESCAPE-EOF.2 (SIGNALS-ERROR (READ-FROM-STRING "\\" NIL NIL) END-OF-FILE) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.MULTIPLE-ESCAPE-EOF.1 (SIGNALS-ERROR (READ-FROM-STRING "|") END-OF-FILE) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.MULTIPLE-ESCAPE-EOF.2 (SIGNALS-ERROR (READ-FROM-STRING "|" NIL NIL) END-OF-FILE) T)
;; Loading (LOAD "syntax-tokens.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/syntax-tokens.lsp 81D43DC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (COMPILE-AND-LOAD "reader-aux.lsp")
;; Loading (DEF-SYNTAX-TEST SYNTAX.NUMBER-TOKEN.ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING "1/0") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.NUMBER-TOKEN.3 (LOOP FOR TP IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR C ACROSS "sfdl" FOR S = (CONCATENATE (QUOTE STRING) "1.0" (MAKE-STRING 1000 :INITIAL-ELEMENT #\0) "1" (STRING C) "0") FOR N = (READ-FROM-STRING S) UNLESS (AND (TYPEP N TP) (<= 1 N) (< N 2)) COLLECT (LIST C TP S N)) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.NUMBER-TOKEN.4 (LOOP FOR TYPE IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) NCONC (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S (CONCATENATE (QUOTE STRING) "1." (MAKE-STRING 1000 :INITIAL-ELEMENT #\0) "1")) (N (READ-FROM-STRING S))) (UNLESS (AND (TYPEP N TYPE) (<= 1 N) (< N 2)) (LIST (LIST TYPE S N))))) NIL)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-TOKEN.1 (READ-FROM-STRING "\\.") . 2)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-TOKEN.2 (READ-FROM-STRING ".\\.") .. 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-TOKEN.3 (READ-FROM-STRING "\\..") .. 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-TOKEN.4 (READ-FROM-STRING "..\\.") ... 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-TOKEN.5 (READ-FROM-STRING ".\\..") ... 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-TOKEN.6 (READ-FROM-STRING "\\...") ... 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-TOKEN.7 (READ-FROM-STRING ".||") . 3)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-TOKEN.8 (READ-FROM-STRING "..||") .. 4)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING ".") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-ERROR.2 (SIGNALS-ERROR (READ-FROM-STRING "..") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-ERROR.3 (SIGNALS-ERROR (READ-FROM-STRING "...") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-ERROR.4 (SIGNALS-ERROR (READ-FROM-STRING "( . 1)") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-ERROR.5 (SIGNALS-ERROR (READ-FROM-STRING "(1 ..)") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-ERROR.6 (SIGNALS-ERROR (READ-FROM-STRING "(1 .. 2)") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.DOT-ERROR.7 (SIGNALS-ERROR (READ-FROM-STRING "#(1 . 2)") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.RIGHT-PAREN-ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING ")") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.COMMA-ERROR.1 (SIGNALS-ERROR (READ-FROM-STRING ",") READER-ERROR) T)
;; Loading (DEF-SYNTAX-TEST SYNTAX.COMMA-ERROR.2 (SIGNALS-ERROR (READ-FROM-STRING ",1") READER-ERROR) T)
;; Loading (LOAD "load-system-construction.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-system-construction.lsp 81E202C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (LOAD "compile-file.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/compile-file.lsp 81E36947>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN COMPILE-FILE-TEST (FILE FUNNAME &REST ARGS &KEY EXPECT-WARNINGS EXPECT-STYLE-WARNINGS OUTPUT-FILE (PRINT NIL PRINT-P) (VERBOSE NIL VERBOSE-P) (*COMPILE-PRINT* NIL) (*COMPILE-VERBOSE* NIL) EXTERNAL-FORMAT) (DECLARE (IGNORABLE EXTERNAL-FORMAT)) (LET* ((TARGET-PATHNAME (OR OUTPUT-FILE (COMPILE-FILE-PATHNAME FILE))) (ACTUAL-WARNINGS-P NIL) (ACTUAL-STYLE-WARNINGS-P NIL)) (WHEN (PROBE-FILE TARGET-PATHNAME) (DELETE-FILE TARGET-PATHNAME)) (FMAKUNBOUND FUNNAME) (LET* ((STR (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :FILL-POINTER 0)) (VALS (MULTIPLE-VALUE-LIST (HANDLER-BIND ((STYLE-WARNING (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (SETF ACTUAL-STYLE-WARNINGS-P T) NIL))) ((OR ERROR WARNING) (FUNCTION (LAMBDA (C) (UNLESS (TYPEP C (QUOTE STYLE-WARNING)) (SETF ACTUAL-WARNINGS-P T)) NIL)))) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT* STR) (APPLY (FUNCTION COMPILE-FILE) FILE :ALLOW-OTHER-KEYS T ARGS)))))) (ASSERT (= (LENGTH VALS) 3)) (DESTRUCTURING-BIND (OUTPUT-TRUENAME WARNINGS-P FAILURE-P) VALS (PRINT (NAMESTRING (TRUENAME TARGET-PATHNAME))) (PRINT (NAMESTRING OUTPUT-TRUENAME)) (VALUES (LET ((V1 (OR PRINT VERBOSE (AND (NOT PRINT-P) *COMPILE-PRINT*) (AND (NOT VERBOSE-P) *COMPILE-VERBOSE*) (STRING= STR ""))) (V2 (OR (AND VERBOSE-P (NOT VERBOSE)) (AND (NOT VERBOSE-P) (NOT *COMPILE-VERBOSE*)) (POSITION #\; STR))) (V3 (IF ACTUAL-WARNINGS-P FAILURE-P T)) (V4 (IF EXPECT-WARNINGS FAILURE-P T)) (V5 (IF EXPECT-STYLE-WARNINGS WARNINGS-P T)) (V6 (OR (NULL OUTPUT-TRUENAME) (PATHNAMEP OUTPUT-TRUENAME))) (V7 (EQUALPT-OR-REPORT (NAMESTRING (TRUENAME TARGET-PATHNAME)) (NAMESTRING OUTPUT-TRUENAME))) (V8 (NOT (FBOUNDP FUNNAME)))) (IF (AND V1 V2 V3 V4 V5 V6 (EQL V7 T) V8) T (LIST V1 V2 V3 V4 V5 V6 V7 V8))) (PROGN (LOAD OUTPUT-TRUENAME) (FUNCALL FUNNAME)))))))
;; Loading (DEFTEST COMPILE-FILE.1 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1)) T NIL)
;; Loading (DEFTEST COMPILE-FILE.2 (COMPILE-FILE-TEST "compile-file-test-file-2.lsp" (QUOTE COMPILE-FILE-TEST-FUN.2) :EXPECT-STYLE-WARNINGS T) T NIL)
;; Loading (DEFTEST COMPILE-FILE.2A (COMPILE-FILE-TEST "compile-file-test-file-2a.lsp" (QUOTE COMPILE-FILE-TEST-FUN.2A) :EXPECT-WARNINGS T) T NIL)
;; Loading (DEFTEST COMPILE-FILE.3 (LET ((*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (COMPILE-FILE-TEST "compile-file-test-file-3.lsp" (QUOTE COMPILE-FILE-TEST-FUN.3))) T NIL)
;; Loading (DEFTEST COMPILE-FILE.4 (LET ((*PACKAGE* (FIND-PACKAGE "CL-USER"))) (COMPILE-FILE-TEST "compile-file-test-file-3.lsp" (QUOTE COMMON-LISP-USER::COMPILE-FILE-TEST-FUN.3))) T NIL)
;; Loading (DEFTEST COMPILE-FILE.5 (COMPILE-FILE-TEST (PARSE-NAMESTRING (QUOTE "compile-file-test-file.lsp")) (QUOTE COMPILE-FILE-TEST-FUN.1)) T NIL)
;; Loading (DEFTEST COMPILE-FILE.6 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :OUTPUT-FILE "foo.fasl") T NIL)
;; Loading (DEFTEST COMPILE-FILE.6A (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :OUTPUT-FILE "foo.ufsl") T NIL)
;; Loading (DEFTEST COMPILE-FILE.7 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :EXTERNAL-FORMAT :DEFAULT) T NIL)
;; Loading (DEFTEST COMPILE-FILE.8 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :OUTPUT-FILE (PARSE-NAMESTRING (QUOTE "foo.fasl"))) T NIL)
;; Loading (DEFTEST COMPILE-FILE.9 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :PRINT T) T NIL)
;; Loading (DEFTEST COMPILE-FILE.10 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :VERBOSE T) T NIL)
;; Loading (DEFTEST COMPILE-FILE.11 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :PRINT NIL) T NIL)
;; Loading (DEFTEST COMPILE-FILE.12 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :VERBOSE NIL) T NIL)
;; Loading (DEFTEST COMPILE-FILE.13 (WITH-OPEN-FILE (S "compile-file-test-file.lsp" :DIRECTION :INPUT) (COMPILE-FILE-TEST S (QUOTE COMPILE-FILE-TEST-FUN.1))) T NIL)
;; Loading (DEFTEST COMPILE-FILE.14 (LET ((S (OPEN "foo.fasl" :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :IF-DOES-NOT-EXIST :CREATE))) (CLOSE S) (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :OUTPUT-FILE S)) T NIL)
;; Loading (DEFTEST COMPILE-FILE.15 (LET ((*READTABLE* (COPY-READTABLE NIL))) (SET-MACRO-CHARACTER #\! (GET-MACRO-CHARACTER #\')) (COMPILE-FILE-TEST "compile-file-test-file-4.lsp" (QUOTE COMPILE-FILE-TEST-FUN.4))) T FOO)
;; Loading (DEFTEST COMPILE-FILE.16 (LET* ((FILE (PARSE-NAMESTRING (QUOTE "compile-file-test-file-5.lsp"))) (TARGET-PATHNAME (COMPILE-FILE-PATHNAME FILE)) (*COMPILE-PRINT* NIL) (*COMPILE-VERBOSE* NIL)) (WHEN (PROBE-FILE TARGET-PATHNAME) (DELETE-FILE TARGET-PATHNAME)) (COMPILE-FILE FILE) (LOAD TARGET-PATHNAME) (VALUES (EQUALPT-OR-REPORT (TRUENAME FILE) (FUNCALL (QUOTE COMPILE-FILE-TEST-FUN.5))) (EQUALPT-OR-REPORT (PATHNAME (MERGE-PATHNAMES FILE)) (FUNCALL (QUOTE COMPILE-FILE-TEST-FUN.5A))))) T T)
;; Loading (DEFTEST COMPILE-FILE.17 (LET ((FILE (LOGICAL-PATHNAME "CLTEST:COMPILE-FILE-TEST-LP.LSP"))) (WITH-OPEN-FILE (S FILE :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :IF-DOES-NOT-EXIST :CREATE) (FORMAT S "(in-package :cl-test)~%(defun compile-file-test-lp.fun () nil)~%")) (COMPILE-FILE-TEST FILE (QUOTE COMPILE-FILE-TEST-LP.FUN))) T NIL)
;; Loading (DEFTEST COMPILE-FILE.18 (LET ((FILE (LOGICAL-PATHNAME "CLTEST:COMPILE-FILE-TEST-LP.OUT"))) (WITH-OPEN-FILE (S FILE :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :IF-DOES-NOT-EXIST :CREATE)) (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :OUTPUT-FILE FILE)) T NIL)
;; Loading (DEFTEST COMPILE-FILE.19 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :*COMPILE-VERBOSE* T) T NIL)
;; Loading (DEFTEST COMPILE-FILE.20 (COMPILE-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :*COMPILE-PRINT* T) T NIL)
;; Loading (DEFTEST COMPILE-FILE-PATHNAME.1 *COMPILE-FILE-PATHNAME* NIL)
;; Loading (DEFTEST COMPILE-FILE-TRUENAME.1 *COMPILE-FILE-TRUENAME* NIL)
;; Loading (DEFTEST COMPILE-FILE.ERROR.1 (SIGNALS-ERROR (COMPILE-FILE "nonexistent-file-to-compile.lsp") FILE-ERROR) T)
;; Loading (DEFTEST COMPILE-FILE.ERROR.2 (SIGNALS-ERROR (COMPILE-FILE) PROGRAM-ERROR) T)
;; Loading (LOAD "load.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load.lsp 81FB7CA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN LOAD-FILE-TEST (FILE FUNNAME &REST ARGS &KEY IF-DOES-NOT-EXIST (PRINT NIL PRINT-P) (VERBOSE NIL VERBOSE-P) (*LOAD-PRINT* NIL) (*LOAD-VERBOSE* NIL) EXTERNAL-FORMAT) (DECLARE (IGNORABLE EXTERNAL-FORMAT IF-DOES-NOT-EXIST PRINT PRINT-P VERBOSE VERBOSE-P)) (FMAKUNBOUND FUNNAME) (LET* ((STR (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :FILL-POINTER 0)) (VALS (MULTIPLE-VALUE-LIST (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT* STR) (APPLY (FUNCTION LOAD) FILE :ALLOW-OTHER-KEYS T ARGS)))) (PRINT? (IF PRINT-P PRINT *LOAD-PRINT*)) (VERBOSE? (IF VERBOSE-P VERBOSE *LOAD-VERBOSE*))) (VALUES (LET ((V1 (CAR VALS)) (V2 (OR (GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
AND VERBOSE-P (NOT VERBOSE)) (AND (NOT VERBOSE-P) (NOT *LOAD-VERBOSE*)) (POSITION #\; STR))) (V3 (OR (AND PRINT-P (NOT PRINT)) (AND (NOT PRINT-P) (NOT *LOAD-PRINT*)) (> (LENGTH STR) 0))) (V4 (IF (OR PRINT? VERBOSE?) (> (LENGTH STR) 0) T))) (IF (AND (= (LENGTH VALS) 1) V1 V2 V3 V4) T (LIST VALS V2 V3 V4 STR))) (FUNCALL FUNNAME))))
;; Loading (DEFTEST LOAD.1 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1)) T NIL)
;; Loading (DEFTEST LOAD.2 (LOAD-FILE-TEST (PARSE-NAMESTRING (QUOTE "compile-file-test-file.lsp")) (QUOTE COMPILE-FILE-TEST-FUN.1)) T NIL)
;; Loading (DEFTEST LOAD.3 (WITH-INPUT-FROM-STRING (S "(in-package :cl-test) (defun load-file-test-fun.2 () 'good)") (LOAD-FILE-TEST S (QUOTE LOAD-FILE-TEST-FUN.2))) T GOOD)
;; Loading (DEFTEST LOAD.4 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :EXTERNAL-FORMAT :DEFAULT) T NIL)
;; Loading (DEFTEST LOAD.5 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :VERBOSE T) T NIL)
;; Loading (DEFTEST LOAD.6 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :*LOAD-VERBOSE* T) T NIL)
;; Loading (DEFTEST LOAD.7 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :*LOAD-VERBOSE* T :VERBOSE NIL) T NIL)
;; Loading (DEFTEST LOAD.8 (WITH-INPUT-FROM-STRING (S "(in-package :cl-test) (defun load-file-test-fun.2 () 'good)") (LOAD-FILE-TEST S (QUOTE LOAD-FILE-TEST-FUN.2) :VERBOSE T)) T GOOD)
;; Loading (DEFTEST LOAD.9 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :PRINT T) T NIL)
;; Loading (DEFTEST LOAD.10 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :*LOAD-PRINT* T) T NIL)
;; Loading (DEFTEST LOAD.11 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :*LOAD-PRINT* T :PRINT NIL) T NIL)
;; Loading (DEFTEST LOAD.12 (LOAD-FILE-TEST "compile-file-test-file.lsp" (QUOTE COMPILE-FILE-TEST-FUN.1) :*LOAD-PRINT* NIL :PRINT T) T NIL)
;; Loading (DEFTEST LOAD.13 (WITH-INPUT-FROM-STRING (S "(in-package :cl-test) (defun load-file-test-fun.2 () 'good)") (LOAD-FILE-TEST S (QUOTE LOAD-FILE-TEST-FUN.2) :PRINT T)) T GOOD)
;; Loading (DEFTEST LOAD.14 (LOAD "nonexistent-file.lsp" :IF-DOES-NOT-EXIST NIL) NIL)
;; Loading (DEFPACKAGE LOAD-TEST-PACKAGE (:USE "COMMON-LISP"))
;; Loading (DEFTEST LOAD.15 (LET ((*PACKAGE* (FIND-PACKAGE "LOAD-TEST-PACKAGE"))) (WITH-INPUT-FROM-STRING (S "(defun f () 'good)") (LOAD-FILE-TEST S (QUOTE LOAD-TEST-PACKAGE::F)))) T LOAD-TEST-PACKAGE::GOOD)
;; Loading (DEFTEST LOAD.15A (LET ((*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (VALUES (WITH-INPUT-FROM-STRING (S "(eval-when (:load-toplevel :execute) (setq *package* (find-package \"LOAD-TEST-PACKAGE\")))
          (defun f () 'good)") (MULTIPLE-VALUE-LIST (LOAD-FILE-TEST S (QUOTE LOAD-TEST-PACKAGE::F)))) (READ-FROM-STRING "GOOD"))) (T LOAD-TEST-PACKAGE::GOOD) GOOD)
;; Loading (DEFTEST LOAD.16 (LET ((*READTABLE* (COPY-READTABLE NIL))) (SET-MACRO-CHARACTER #\! (GET-MACRO-CHARACTER #\')) (WITH-INPUT-FROM-STRING (S "(in-package :cl-test) (defun load-file-test-fun.3 () !good)") (LOAD-FILE-TEST S (QUOTE LOAD-FILE-TEST-FUN.3)))) T GOOD)
;; Loading (DEFTEST LOAD.16A (LET ((*READTABLE* *READTABLE*) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (VALUES (WITH-INPUT-FROM-STRING (S "(in-package :cl-test)
         (eval-when (:load-toplevel :execute)
            (setq *readtable* (copy-readtable nil))
            (set-macro-character #\\! (get-macro-character #\\')))
         (defun load-file-test-fun.3 () !good)") (MULTIPLE-VALUE-LIST (LOAD-FILE-TEST S (QUOTE LOAD-FILE-TEST-FUN.3)))) (READ-FROM-STRING "!FOO"))) (T GOOD) !FOO)
;; Loading (DEFTEST LOAD.17 (LET ((FILE (PARSE-NAMESTRING (QUOTE "load-test-file.lsp")))) (FMAKUNBOUND (QUOTE LOAD-FILE-TEST-FUN.1)) (FMAKUNBOUND (QUOTE LOAD-FILE-TEST-FUN.2)) (VALUES (NOTNOT (LOAD FILE)) (LET ((P1 (PATHNAME (MERGE-PATHNAMES FILE))) (P2 (FUNCALL (QUOTE LOAD-FILE-TEST-FUN.1)))) (EQUALPT-OR-REPORT P1 P2)) (LET ((P1 (TRUENAME FILE)) (P2 (FUNCALL (QUOTE LOAD-FILE-TEST-FUN.2)))) (EQUALPT-OR-REPORT P1 P2)))) T T T)
;; Loading (DEFTEST LOAD.18 (LET* ((FILE "load-test-file-2.lsp") (TARGET (ENOUGH-NAMESTRING (COMPILE-FILE-PATHNAME FILE)))) (DECLARE (SPECIAL *LOAD-TEST-VAR.1* *LOAD-TEST-VAR.2*)) (COMPILE-FILE FILE) (MAKUNBOUND (QUOTE *LOAD-TEST-VAR.1*)) (MAKUNBOUND (QUOTE *LOAD-TEST-VAR.2*)) (LOAD TARGET) (VALUES (LET ((P1 (PATHNAME (MERGE-PATHNAMES TARGET))) (P2 *LOAD-TEST-VAR.1*)) (EQUALPT-OR-REPORT P1 P2)) (LET ((P1 (TRUENAME TARGET)) (P2 *LOAD-TEST-VAR.2*)) (EQUALPT-OR-REPORT P1 P2)))) T T)
;; Loading (DEFTEST LOAD.19 (LET ((FILE (LOGICAL-PATHNAME "CLTEST:LDTEST.LSP")) (FN (QUOTE LOAD-TEST-FUN-3)) (*PACKAGE* (FIND-PACKAGE "CL-TEST"))) (WITH-OPEN-FILE (S FILE :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :IF-DOES-NOT-EXIST :CREATE) (FORMAT S "(in-package :cl-test) (defun ~a () :foo)" FN)) (FMAKUNBOUND FN) (VALUES (NOTNOT (LOAD FILE)) (FUNCALL FN))) T :FOO)
;; Loading (DEFTEST LOAD-PATHNAME.1 *LOAD-PATHNAME* NIL)
;; Loading (DEFTEST LOAD-TRUENAME.1 *LOAD-TRUENAME* NIL)
;; Loading (DEFTEST LOAD-PRINT.1 *LOAD-PRINT* NIL)
;; Loading (DEFTEST LOAD.ERROR.1 (SIGNALS-ERROR (LOAD "nonexistent-file.lsp") FILE-ERROR) T)
;; Loading (DEFTEST LOAD.ERROR.2 (SIGNALS-ERROR (LOAD) PROGRAM-ERROR) T)
;; Loading (DEFTEST LOAD.ERROR.3 (SIGNALS-ERROR (LOAD "compile-file-test-file.lsp" :BAD-KEY-ARG T) PROGRAM-ERROR) T)
;; Loading (LOAD "with-compilation-unit.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/with-compilation-unit.lsp C1E06F67>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST WITH-COMPILATION-UNIT.1 (WITH-COMPILATION-UNIT NIL) NIL)
;; Loading (DEFTEST WITH-COMPILATION-UNIT.2 (WITH-COMPILATION-UNIT NIL T) T)
;; Loading (DEFTEST WITH-COMPILATION-UNIT.3 (WITH-COMPILATION-UNIT NIL (VALUES)))
;; Loading (DEFTEST WITH-COMPILATION-UNIT.4 (WITH-COMPILATION-UNIT NIL (VALUES 1 2 3 4 5)) 1 2 3 4 5)
;; Loading (DEFTEST WITH-COMPILATION-UNIT.5 (WITH-COMPILATION-UNIT (:OVERRIDE NIL) :FOO) :FOO)
;; Loading (DEFTEST WITH-COMPILATION-UNIT.6 (WITH-COMPILATION-UNIT (:OVERRIDE T) (VALUES 10 17)) 10 17)
;; Loading (DEFTEST WITH-COMPILATION-UNIT.7 (LET ((X NIL)) (VALUES (BLOCK DONE (WITH-COMPILATION-UNIT (:OVERRIDE NIL) (SETQ X 1) (RETURN-FROM DONE 2) (SETQ X 2))) X)) 2 1)
;; Loading (LOAD "features.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/features.lsp C1E569C7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST FEATURES.1 (LET ((F *FEATURES*)) (OR (NOT (MEMBER :DRAFT-ANSI-CL F)) (NOT (INTERSECTION (QUOTE (:DRAFT-ANSI-CL-2 :ANSI-CL)) F)))) T)
;; Loading (DEFTEST FEATURES.2 (LET ((F *FEATURES*)) (OR (NOT (INTERSECTION (QUOTE (:X3J13 :DRAFT-ANSI-CL :ANSI-CL)) F)) (NOTNOT (MEMBER :COMMON-LISP F)))) T)
;; Loading (DEFTEST FEATURES.3 (NOT (MEMBER :CLTL2 *FEATURES*)) T)
;; Loading (DEFTEST FEATURES.4 (NOTNOT (EVERY (FUNCTION SYMBOLP) *FEATURES*)) T)
;; Loading (LOAD "modules.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/modules.lsp C1E8B477>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST MODULES.1 (NOTNOT (EVERY (FUNCTION STRINGP) *MODULES*)) T)
;; Loading (DEFTEST MODULES.2 (LET ((*MODULES* *MODULES*)) (PROVIDE "FOO") (NOTNOT (MEMBER "FOO" *MODULES* :TEST (FUNCTION STRING=)))) T)
;; Loading (DEFTEST MODULES.3 (LET ((*MODULES* *MODULES*)) (PROVIDE "FOO") (PROVIDE "FOO") (COUNT "FOO" *MODULES* :TEST (FUNCTION STRING=))) 1)
;; Loading (DEFTEST MODULES.4 (LET ((*MODULES* *MODULES*)) (PROVIDE "FOO") (REQUIRE "FOO") (VALUES)))
;; Loading (DEFTEST MODULES.5 (LET ((*MODULES* *MODULES*)) (PROVIDE :FOO) (NOTNOT (MEMBER "FOO" *MODULES* :TEST (FUNCTION STRING=)))) T)
;; Loading (DEFTEST MODULES.6 (LET ((*MODULES* *MODULES*)) (PROVIDE "FOO") (REQUIRE :FOO) (VALUES)))
;; Loading (DEFTEST MODULES.7 (LET ((*MODULES* *MODULES*) (FN (QUOTE MODULES7-FUN))) (WHEN (FBOUNDP FN) (FMAKUNBOUND FN)) (REQUIRE "MODULES-7" (PARSE-NAMESTRING (QUOTE "modules7.lsp"))) (FUNCALL FN)) :GOOD)
;; Loading (DEFTEST MODULES.8 (LET ((*MODULES* *MODULES*) (FNS (QUOTE (MODULES8A-FUN MODULES8B-FUN)))) (DOLIST (FN FNS) (WHEN (FBOUNDP FN) (FMAKUNBOUND FN))) (REQUIRE "MODULES-8" (QUOTE ((PARSE-NAMESTRING (QUOTE "modules8a.lsp")) (PARSE-NAMESTRING (QUOTE "modules8b.lsp"))))) (MAPCAR (FUNCTION FUNCALL) FNS)) (:GOOD :ALSO-GOOD))
;; Loading (DEFTEST MODULES.9 (SIGNALS-ERROR (REQUIRE "AB7djaCgaaL") ERROR) T)
;; Loading (DEFTEST MODULES.10 (DO-SPECIAL-STRINGS (S "FOO") (LET ((*MODULES* *MODULES*)) (PROVIDE S) (ASSERT (MEMBER "FOO" *MODULES* :TEST (FUNCTION STRING=))))) NIL)
;; Loading (DEFTEST MODULES.11 (DO-SPECIAL-STRINGS (S "FOO") (LET ((*MODULES* *MODULES*)) (PROVIDE "FOO") (REQUIRE S) (VALUES))) NIL)
;; Loading (DEFTEST MODULES.12 (UNLESS (MEMBER "Z" *MODULES* :TEST (FUNCTION STRING=)) (LET ((*MODULES* *MODULES*)) (PROVIDE #\Z) (NOT (MEMBER "Z" *MODULES* :TEST (FUNCTION STRING=))))) NIL)
;; Loading (DEFTEST MODULES.13 (UNLESS (MEMBER "Z" *MODULES* :TEST (FUNCTION STRING=)) (LET ((*MODULES* *MODULES*)) (PROVIDE "Z") (REQUIRE #\Z) NIL)) NIL)
;; Loading (LOAD "load-environment.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-environment.lsp C1F18C77>
;; Loading (LOAD "apropos.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/apropos.lsp C1F2D057>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST APROPOS.1 (LOOP FOR N FROM 10 FOR X = (COERCE (LOOP REPEAT N COLLECT (RANDOM-FROM-SEQ +STANDARD-CHARS+)) (QUOTE STRING)) UNLESS (APROPOS-LIST X) RETURN (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS X)))))) "")
;; Loading (DEFTEST APROPOS.2 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS "CAR"))))))) (NOTNOT (SEARCH "CAR" S :TEST (FUNCTION STRING-EQUAL)))) T)
;; Loading (DEFTEST APROPOS.3 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS "CAR" (FIND-PACKAGE "CL")))))))) (NOTNOT (SEARCH "CAR" S :TEST (FUNCTION STRING-EQUAL)))) T)
;; Loading (DEFTEST APROPOS.4 (LET ((RESULT NIL)) (DO-SPECIAL-STRINGS (S "CAR" T) (SETQ RESULT (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS S)))))) (ASSERT (SEARCH "CAR" RESULT :TEST (FUNCTION STRING-EQUAL))))) T)
;; Loading (DEFTEST APROPOS.5 (LET ((RESULT NIL) (PKG (FIND-PACKAGE "COMMON-LISP"))) (DO-SPECIAL-STRINGS (S "APROPOS" T) (SETQ RESULT (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS S PKG)))))) (ASSERT (SEARCH "APROPOS" RESULT :TEST (FUNCTION STRING-EQUAL))))) T)
;; Loading (DEFTEST APROPOS.6 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS "CAR" "CL"))))))) (NOTNOT (SEARCH "CAR" S :TEST (FUNCTION STRING-EQUAL)))) T)
;; Loading (DEFTEST APROPOS.7 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS "CAR" :CL))))))) (NOTNOT (SEARCH "CAR" S :TEST (FUNCTION STRING-EQUAL)))) T)
;; Loading (DEFTEST APROPOS.8 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS "CAR" NIL))))))) (NOTNOT (SEARCH "CAR" S :TEST (FUNCTION STRING-EQUAL)))) T)
;; Loading (DEFTEST APROPOS.9 (MACROLET ((%M (Z) Z)) (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS (EXPAND-IN-CURRENT-ENV (%M "CAR"))))))))) (NOTNOT (SEARCH "CAR" S :TEST (FUNCTION STRING-EQUAL))))) T)
;; Loading (DEFTEST APROPOS.10 (MACROLET ((%M (Z) Z)) (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (APROPOS "CAR" (EXPAND-IN-CURRENT-ENV (%M NIL))))))))) (NOTNOT (SEARCH "CAR" S :TEST (FUNCTION STRING-EQUAL))))) T)
;; Loading (DEFTEST APROPOS.ERROR.1 (SIGNALS-ERROR (APROPOS) PROGRAM-ERROR) T)
;; Loading (DEFTEST APROPOS.ERROR.2 (SIGNALS-ERROR (APROPOS "SJLJALKSJDKLJASKLDJKLAJDLKJA" (FIND-PACKAGE "CL") NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "apropos-list.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/apropos-list.lsp C1FDAD97>
;; Loading (IN-PACKAGE :CL-TEST)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST APROPOS-LIST.1 (LET ((PKG "CL-TEST-APROPOS-LIST-PACKAGE")) (SAFELY-DELETE-PACKAGE PKG) (UNWIND-PROTECT (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG) (:USE)))) (LET* ((SYM (INTERN "FOO" PKG))) (LOOP FOR P IN (LIST PKG (FIND-PACKAGE PKG) (MAKE-SYMBOL PKG)) NCONC (LOOP FOR STRING-DESIGNATOR IN (QUOTE ("F" "O" #\F #\O "" "FOO" "FO" "OO" :F :FO :FOO :O :OO)) FOR RESULT = (APROPOS-LIST STRING-DESIGNATOR P) UNLESS (EQUAL RESULT (LIST SYM)) COLLECT (LIST STRING-DESIGNATOR RESULT))))) (SAFELY-DELETE-PACKAGE PKG))) NIL)
;; Loading (DEFTEST APROPOS-LIST.2 (LET ((PKG #\A)) (SAFELY-DELETE-PACKAGE PKG) (UNWIND-PROTECT (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG) (:USE)))) (LET* ((SYM (INTERN "FOO" PKG))) (LOOP FOR STRING-DESIGNATOR IN (QUOTE ("F" "O" #\F #\O "" "FOO" "FO" "OO" :F :FO :FOO :O :OO)) FOR RESULT = (APROPOS-LIST STRING-DESIGNATOR PKG) UNLESS (EQUAL RESULT (LIST SYM)) COLLECT (LIST STRING-DESIGNATOR RESULT)))) (SAFELY-DELETE-PACKAGE PKG))) NIL)
;; Loading (DEFTEST APROPOS-LIST.3 (LET ((PKG "CL-TEST-APROPOS-LIST-PACKAGE")) (SAFELY-DELETE-PACKAGE PKG) (UNWIND-PROTECT (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PKG) (:USE)))) (INTERN "FOO" PKG) (APROPOS-LIST "X" PKG)) (SAFELY-DELETE-PACKAGE PKG))) NIL)
;; Loading (DEFTEST APROPOS-LIST.4 (LET ((SYM :X) (SYMBOLS (APROPOS-LIST "X"))) (NOTNOT (MEMBER SYM SYMBOLS))) T)
;; Loading (DEFTEST APROPOS-LIST.5 (LET ((SYM :X) (SYMBOLS (APROPOS-LIST (QUOTE #:X)))) (NOTNOT (MEMBER SYM SYMBOLS))) T)
;; Loading (DEFTEST APROPOS-LIST.6 (LET ((SYM :X) (SYMBOLS (APROPOS-LIST #\X))) (NOTNOT (MEMBER SYM SYMBOLS))) T)
;; Loading (DEFTEST APROPOS-LIST.7 (LET ((SYM :X) (SYMBOLS (APROPOS-LIST "X" NIL))) (NOTNOT (MEMBER SYM SYMBOLS))) T)
;; Loading (DEFTEST APROPOS-LIST.8 (LET ((*PACKAGE* (FIND-PACKAGE "COMMON-LISP"))) (MACROLET ((%M (Z) Z)) (INTERSECTION (QUOTE (CAR)) (APROPOS-LIST (EXPAND-IN-CURRENT-ENV (%M "CAR")))))) (CAR))
;; Loading (DEFTEST APROPOS-LIST.9 (MACROLET ((%M (Z) Z)) (INTERSECTION (QUOTE (CAR)) (APROPOS-LIST "CAR" (EXPAND-IN-CURRENT-ENV (%M (FIND-PACKAGE "COMMON-LISP")))))) (CAR))
;; Loading (DEFTEST APROPOS-LIST.ERROR.1 (SIGNALS-ERROR (APROPOS-LIST) PROGRAM-ERROR) T)
;; Loading (DEFTEST APROPOS-LIST.ERROR.2 (SIGNALS-ERROR (APROPOS-LIST "X" (FIND-PACKAGE "CL-TEST") NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "describe.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/describe.lsp 81D958A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN HARNESS-FOR-DESCRIBE (FN) (LET (S1 S2) (WITH-OPEN-STREAM (*STANDARD-OUTPUT* (MAKE-STRING-OUTPUT-STREAM)) (WITH-OPEN-STREAM (TIO-INPUT (MAKE-STRING-INPUT-STREAM "X")) (WITH-OPEN-STREAM (TIO-OUTPUT (MAKE-STRING-OUTPUT-STREAM)) (WITH-OPEN-STREAM (*TERMINAL-IO* (MAKE-TWO-WAY-STREAM TIO-INPUT TIO-OUTPUT)) (LET ((*PRINT-CIRCLE* T) (*PRINT-READABLY* NIL)) (ASSERT (NULL (MULTIPLE-VALUE-LIST (FUNCALL FN)))))) (SETQ S2 (GET-OUTPUT-STREAM-STRING TIO-OUTPUT))) (ASSERT (EQUAL (READ-CHAR TIO-INPUT) #\X))) (SETQ S1 (GET-OUTPUT-STREAM-STRING *STANDARD-OUTPUT*))) (VALUES S1 S2)))
;; Loading (DEFTEST DESCRIBE.1 (LOOP FOR X IN *UNIVERSE* FOR (S1 S2) = (MULTIPLE-VALUE-LIST (HARNESS-FOR-DESCRIBE (FUNCTION (LAMBDA NIL (DESCRIBE X))))) WHEN (AND (EQUAL S1 "") (EQUAL S2 "")) COLLECT X) NIL)
;; Loading (DEFTEST DESCRIBE.2 (LOOP FOR X IN *UNIVERSE* FOR S1 = NIL FOR S2 = NIL FOR S3 = (WITH-OUTPUT-TO-STRING (S) (SETF (VALUES S1 S2) (HARNESS-FOR-DESCRIBE (FUNCTION (LAMBDA NIL (DESCRIBE X S)))))) WHEN (OR (EQUAL S3 "") (NOT (EQUAL "" S2)) (NOT (EQUAL "" S1))) COLLECT (LIST X S1 S2 S3)) NIL)
;; Loading (DEFTEST DESCRIBE.3 (LOOP FOR X IN *UNIVERSE* FOR (S1 S2) = (MULTIPLE-VALUE-LIST (HARNESS-FOR-DESCRIBE (FUNCTION (LAMBDA NIL (DESCRIBE X T))))) WHEN (OR (EQUAL "" S2) (NOT (EQUAL "" S1))) COLLECT (LIST X S1 S2)) NIL)
;; Loading (DEFTEST DESCRIBE.4 (LOOP FOR X IN *UNIVERSE* FOR (S1 S2) = (MULTIPLE-VALUE-LIST (HARNESS-FOR-DESCRIBE (FUNCTION (LAMBDA NIL (DESCRIBE X NIL))))) WHEN (OR (EQUAL "" S1) (NOT (EQUAL "" S2))) COLLECT (LIST X S1 S2)) NIL)
;; Loading (DEFCLASS DESCRIBE-OBJECT-TEST-CLASS-01 NIL ((S1 :INITARG :S1) (S2 :INITARG :S2) (S3 :INITARG :S3)))
;; Loading (DEFMETHOD DESCRIBE-OBJECT ((OBJ DESCRIBE-OBJECT-TEST-CLASS-01) STREAM) (FORMAT STREAM "ABCDE ~A ~A ~A XYZ" (SLOT-VALUE OBJ (QUOTE S1)) (SLOT-VALUE OBJ (QUOTE S2)) (SLOT-VALUE OBJ (QUOTE S3))))
;; Loading (DEFTEST DESCRIBE.5 (LET ((OBJ (MAKE-INSTANCE (QUOTE DESCRIBE-OBJECT-TEST-CLASS-01) :S1 2 :S2 6 :S3 17))) (MULTIPLE-VALUE-BIND (STR1 STR2) (HARNESS-FOR-DESCRIBE (FUNCTION (LAMBDA NIL (DESCRIBE OBJ)))) (IF (OR (SEARCH "ABCDE 2 6 17 XYZ" STR1) (SEARCH "ABCDE 2 6 17 XYZ" STR2)) :GOOD (LIST STR1 STR2)))) :GOOD)
;; Loading (DEFTEST DESCRIBE.ERROR.1 (SIGNALS-ERROR (DESCRIBE) PROGRAM-ERROR) T)
;; Loading (DEFTEST DESCRIBE.ERROR.2 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (S) (DESCRIBE NIL S NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "disassemble.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/disassemble.lsp 81E43CC7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN DISASSEMBLE-IT (FN) (LET (VAL) (VALUES (NOTNOT (STRINGP (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETF VAL (DISASSEMBLE FN))))) VAL)))
;; Loading (DEFTEST DISASSEMBLE.1 (DISASSEMBLE-IT (QUOTE CAR)) T NIL)
;; Loading (DEFTEST DISASSEMBLE.2 (DISASSEMBLE-IT (SYMBOL-FUNCTION (QUOTE CAR))) T NIL)
;; Loading (DEFTEST DISASSEMBLE.3 (DISASSEMBLE-IT (QUOTE (LAMBDA (X Y) (CONS Y X)))) T NIL)
;; Loading (DEFTEST DISASSEMBLE.4 (DISASSEMBLE-IT (EVAL (QUOTE (FUNCTION (LAMBDA (X Y) (CONS X Y)))))) T NIL)
;; Loading (DEFTEST DISASSEMBLE.5 (DISASSEMBLE-IT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((X 0)) (FUNCTION (LAMBDA NIL (INCF X))))))))) T NIL)
;; Loading (DEFTEST DISASSEMBLE.6 (LET ((NAME (QUOTE DISASSEMBLE.FN.1))) (FMAKUNBOUND NAME) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA NAME) (X) X))) (DISASSEMBLE-IT NAME)) T NIL)
;; Loading (DEFTEST DISASSEMBLE.7 (LET ((NAME (QUOTE DISASSEMBLE.FN.2))) (FMAKUNBOUND NAME) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA NAME) (X) X))) (COMPILE NAME) (DISASSEMBLE-IT NAME)) T NIL)
;; Loading (DEFTEST DISASSEMBLE.8 (PROGN (EVAL (QUOTE (DEFUN (SETF DISASSEMBLE-EXAMPLE-FN) (VAL ARG) (SETF (CAR ARG) VAL)))) (DISASSEMBLE-IT (QUOTE (SETF DISASSEMBLE-EXAMPLE-FN)))) T NIL)
;; Loading (DEFTEST DISASSEMBLE.9 (PROGN (EVAL (QUOTE (DEFGENERIC DISASSEMBLE-EXAMPLE-FN2 (X Y Z)))) (DISASSEMBLE-IT (QUOTE DISASSEMBLE-EXAMPLE-FN2))) T NIL)
;; Loading (DEFTEST DISASSEMBLE.10 (PROGN (EVAL (QUOTE (DEFGENERIC DISASSEMBLE-EXAMPLE-FN3 (X Y Z)))) (EVAL (QUOTE (DEFMETHOD DISASSEMBLE-EXAMPLE-FN3 ((X T) (Y T) (Z T)) (LIST X Y Z)))) (DISASSEMBLE-IT (QUOTE DISASSEMBLE-EXAMPLE-FN3))) T NIL)
;; Loading (DEFTEST DISASSEMBLE.11 (LET ((FN (QUOTE DISASSEMBLE-EXAMPLE-FN4))) (WHEN (FBOUNDP FN) (FMAKUNBOUND FN)) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA FN) (X) X))) (LET ((IS-COMPILED? (TYPEP (SYMBOL-FUNCTION FN) (QUOTE COMPILED-FUNCTION)))) (MULTIPLE-VALUE-CALL (FUNCTION VALUES) (DISASSEMBLE-IT FN) (IF IS-COMPILED? (NOTNOT (TYPEP (SYMBOL-FUNCTION FN) (QUOTE COMPILED-FUNCTION))) (NOT (TYPEP (SYMBOL-FUNCTION FN) (QUOTE COMPILED-FUNCTION))))))) T NIL T)
;; Loading (DEFTEST DISASSEMBLE.ERROR.1 (SIGNALS-ERROR (DISASSEMBLE) PROGRAM-ERROR) T)
;; Loading (DEFTEST DISASSEMBLE.ERROR.2 (SIGNALS-ERROR (DISASSEMBLE (QUOTE CAR) NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST DISASSEMBLE.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION DISASSEMBLE) (TYPEF (QUOTE (OR FUNCTION SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL)))))) NIL)
;; Loading (LOAD "environment-functions.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/environment-functions.lsp 81EE3377>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFMACRO DEF-ENV-TESTS (FN-NAME) (FLET ((%NAME (SUFFIX) (INTERN (CONCATENATE (QUOTE STRING) (SYMBOL-NAME FN-NAME) SUFFIX) (FIND-PACKAGE :CL-TEST)))) (SYSTEM.INTERNALS::BACKQUOTE (PROGN (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (%NAME ".1")) (LET ((X ((SYSTEM.INTERNALS::BQ-COMMA FN-NAME)))) (OR (NOT X) (NOTNOT (STRINGP X)))) T) (DEFTEST (SYSTEM.INTERNALS::BQ-COMMA (%NAME ".ERROR.1")) (SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA FN-NAME) NIL) PROGRAM-ERROR) T)))))
;; Loading (DEF-ENV-TESTS LISP-IMPLEMENTATION-TYPE)
;; Loading (DEF-ENV-TESTS LISP-IMPLEMENTATION-VERSION)
;; Loading (DEF-ENV-TESTS SHORT-SITE-NAME)
;; Loading (DEF-ENV-TESTS LONG-SITE-NAME)
;; Loading (DEF-ENV-TESTS MACHINE-INSTANCE)
;; Loading (DEF-ENV-TESTS MACHINE-TYPE)
;; Loading (DEF-ENV-TESTS MACHINE-VERSION)
;; Loading (DEF-ENV-TESTS SOFTWARE-TYPE)
;; Loading (DEF-ENV-TESTS SOFTWARE-VERSION)
;; Loading (LOAD "room.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/room.lsp 81F6EA07>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ROOM.1 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ROOM)))) (NOT (ZEROP (LENGTH S)))) T)
;; Loading (DEFTEST ROOM.2 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ROOM NIL)))) (NOT (ZEROP (LENGTH S)))) T)
;; Loading (DEFTEST ROOM.3 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ROOM :DEFAULT)))) (NOT (ZEROP (LENGTH S)))) T)
;; Loading (DEFTEST ROOM.4 (LET ((S (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ROOM T)))) (NOT (ZEROP (LENGTH S)))) T)
;; Loading (DEFTEST ROOM.ERRPR.1 (SIGNALS-ERROR (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (ROOM NIL NIL)) PROGRAM-ERROR) T)
;; Loading (LOAD "time.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/time.lsp 81FADF57>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST TIME.1 (LET ((S (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (NULL (TIME NIL)))))) (= (LENGTH S) 0)) NIL)
;; Loading (DEFTEST TIME.2 (LET ((S (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (LET ((X (CONS (QUOTE A) (QUOTE B)))) (ASSERT (EQ (TIME X) X)))))) (= (LENGTH S) 0)) NIL)
;; Loading (DEFTEST TIME.3 (LET ((S (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (LET ((X (CONS (QUOTE A) (QUOTE B)))) (FLET ((%F NIL X)) (ASSERT (EQ (TIME (%F)) X))))))) (= (LENGTH S) 0)) NIL)
;; Loading (DEFTEST TIME.4 (LET ((S (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (NULL (MULTIPLE-VALUE-LIST (TIME (VALUES)))))))) (= (LENGTH S) 0)) NIL)
;; Loading (DEFTEST TIME.5 (LET ((S (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (EQUAL (QUOTE (A B C D)) (MULTIPLE-VALUE-LIST (TIME (VALUES (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))))))))) (= (LENGTH S) 0)) NIL)
;; Loading (DEFTEST TIME.6 (LET ((FN (COMPILE NIL (QUOTE (LAMBDA NIL (TIME NIL)))))) (LET ((S (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (NULL (FUNCALL FN)))))) (= (LENGTH S) 0))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST TIME.7 (FLET ((%F NIL (TIME NIL))) (LET ((S (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (NULL (%F)))))) (= (LENGTH S) 0))) NIL)
;; Loading (DEFTEST TIME.8 (LET ((S (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (MACROLET ((%M NIL 1)) (ASSERT (EQL (TIME (%M)) 1)))))) (= (LENGTH S) 0)) NIL)
;; Loading (LOAD "trace.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/trace.lsp C1D1D7A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFUN FUNCTION-TO-TRACE (X) (CAR X))
;; Loading (DEFUN ANOTHER-FUNCTION-TO-TRACE (X) (CDR X))
;; Loading (DEFUN (SETF FUNCTION-TO-TRACE) (VAL ARG) (SETF (CAR ARG) VAL))
;; Loading (DECLAIM (NOTINLINE FUNCTION-TO-TRACE ANOTHER-FUNCTION-TO-TRACE (SETF FUNCTION-TO-TRACE)))
;; Loading (DEFTEST TRACE.1 (PROGN (UNTRACE) (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (EQL (FUNCTION-TO-TRACE (QUOTE (A))) (QUOTE A))))) "")
;; Loading (DEFTEST TRACE.2 (PROGN (TRACE FUNCTION-TO-TRACE) (EQUAL "" (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (EQL (FUNCTION-TO-TRACE (QUOTE (B))) (QUOTE B)))))) NIL)
;; Loading (DEFTEST TRACE.3 (PROGN (UNTRACE) (TRACE FUNCTION-TO-TRACE) (PROG1 (TRACE) (UNTRACE) (ASSERT (NULL (TRACE))))) (FUNCTION-TO-TRACE))
;; Loading (DEFTEST TRACE.4 (PROGN (UNTRACE) (TRACE FUNCTION-TO-TRACE) (HANDLER-BIND ((WARNING (FUNCTION MUFFLE-WARNING))) (TRACE FUNCTION-TO-TRACE)) (PROG1 (TRACE) (UNTRACE) (ASSERT (NULL (TRACE))))) (FUNCTION-TO-TRACE))
;; Loading (DEFTEST TRACE.5 (PROGN (UNTRACE) (TRACE (SETF FUNCTION-TO-TRACE)) (PROG1 (TRACE) (UNTRACE) (ASSERT (NULL (TRACE))))) ((SETF FUNCTION-TO-TRACE)))
;; Loading (DEFTEST TRACE.6 (PROGN (UNTRACE) (TRACE (SETF FUNCTION-TO-TRACE)) (HANDLER-BIND ((WARNING (FUNCTION MUFFLE-WARNING))) (TRACE (SETF FUNCTION-TO-TRACE))) (PROG1 (TRACE) (UNTRACE) (ASSERT (NULL (TRACE))))) ((SETF FUNCTION-TO-TRACE)))
;; Loading (DEFTEST TRACE.7 (PROGN (UNTRACE) (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (LET ((X (LIST NIL))) (ASSERT (EQL (SETF (FUNCTION-TO-TRACE X) (QUOTE A)) (QUOTE A))) (ASSERT (EQUAL X (QUOTE (A))))))) "")
;; Loading (DEFTEST TRACE.8 (PROGN (UNTRACE) (TRACE (SETF FUNCTION-TO-TRACE)) (EQUAL "" (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (LET ((X (LIST NIL))) (ASSERT (EQL (SETF (FUNCTION-TO-TRACE X) (QUOTE A)) (QUOTE A))) (ASSERT (EQUAL X (QUOTE (A)))))))) NIL)
;; Loading (DEFTEST TRACE.9 (PROGN (UNTRACE) (TRACE FUNCTION-TO-TRACE ANOTHER-FUNCTION-TO-TRACE) (ASSERT (NOT (EQUAL "" (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (EQL (FUNCTION-TO-TRACE (QUOTE (B))) (QUOTE B))))))) (ASSERT (NOT (EQUAL "" (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (EQL (ANOTHER-FUNCTION-TO-TRACE (QUOTE (C . D))) (QUOTE D))))))) (PROG1 (SORT (COPY-LIST (TRACE)) (FUNCTION (LAMBDA (K1 K2) (STRING< (SYMBOL-NAME K1) (SYMBOL-NAME K2))))) (UNTRACE))) (ANOTHER-FUNCTION-TO-TRACE FUNCTION-TO-TRACE))
;; Loading (DEFTEST TRACE.10 (PROGN (UNTRACE) (ASSERT (NULL (TRACE))) (TRACE FUNCTION-TO-TRACE) (UNTRACE FUNCTION-TO-TRACE) (ASSERT (NULL (TRACE))) (HANDLER-BIND ((WARNING (FUNCTION MUFFLE-WARNING))) (UNTRACE FUNCTION-TO-TRACE)) (ASSERT (NULL (TRACE))) NIL) NIL)
;; Loading (DEFTEST TRACE.11 (PROGN (UNTRACE) (TRACE FUNCTION-TO-TRACE ANOTHER-FUNCTION-TO-TRACE) (UNTRACE FUNCTION-TO-TRACE ANOTHER-FUNCTION-TO-TRACE) (TRACE)) NIL)
;; Loading (DECLAIM (NOTINLINE GENERIC-FUNCTION-TO-TRACE))
;; Loading (DEFTEST TRACE.12 (PROGN (UNTRACE) (EVAL (QUOTE (DEFGENERIC GENERIC-FUNCTION-TO-TRACE (X Y)))) (TRACE GENERIC-FUNCTION-TO-TRACE) (PROG1 (TRACE) (UNTRACE))) (GENERIC-FUNCTION-TO-TRACE))
;; Loading (DEFTEST TRACE.13 (PROGN (UNTRACE) (EVAL (QUOTE (DEFGENERIC GENERIC-FUNCTION-TO-TRACE (X Y)))) (TRACE GENERIC-FUNCTION-TO-TRACE) (EVAL (QUOTE (DEFMETHOD GENERIC-FUNCTION-TO-TRACE ((X T) (Y T)) NIL))) (PROG1 (TRACE) (UNTRACE))) (GENERIC-FUNCTION-TO-TRACE))
;; Loading (DEFTEST TRACE.14 (PROGN (UNTRACE) (EVAL (QUOTE (DEFGENERIC GENERIC-FUNCTION-TO-TRACE (X Y)))) (TRACE GENERIC-FUNCTION-TO-TRACE) (EVAL (QUOTE (DEFMETHOD GENERIC-FUNCTION-TO-TRACE ((X T) (Y T)) NIL))) (ASSERT (NOT (EQUAL (WITH-OUTPUT-TO-STRING (*TRACE-OUTPUT*) (ASSERT (NULL (GENERIC-FUNCTION-TO-TRACE (QUOTE A) (QUOTE B))))) ""))) (PROG1 (TRACE) (UNTRACE GENERIC-FUNCTION-TO-TRACE) (ASSERT (NULL (TRACE))))) (GENERIC-FUNCTION-TO-TRACE))
;; Loading (DECLAIM (NOTINLINE GENERIC-FUNCTION-TO-TRACE2))
;; Loading (DEFTEST TRACE.15 (PROGN (UNTRACE) (LET* ((GF (EVAL (QUOTE (DEFGENERIC GENERIC-FUNCTION-TO-TRACE2 (X Y))))) (M (EVAL (QUOTE (DEFMETHOD GENERIC-FUNCTION-TO-TRACE2 ((X INTEGER) (Y INTEGER)) :FOO))))) (EVAL (QUOTE (DEFMETHOD GENERIC-FUNCTION-TO-TRACE2 ((X SYMBOL) (Y SYMBOL)) :BAR))) (ASSERT (EQL (GENERIC-FUNCTION-TO-TRACE2 1 2) :FOO)) (ASSERT (EQL (GENERIC-FUNCTION-TO-TRACE2 (QUOTE A) (QUOTE B)) :BAR)) (TRACE GENERIC-FUNCTION-TO-TRACE2) (ASSERT (EQUAL (TRACE) (QUOTE (GENERIC-FUNCTION-TO-TRACE2)))) (REMOVE-METHOD GF M) (PROG1 (TRACE) (UNTRACE)))) (GENERIC-FUNCTION-TO-TRACE2))
;; Loading (LOAD "user-homedir-pathname.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/user-homedir-pathname.lsp C1E33417>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST USER-HOMEDIR-PATHNAME.1 (LET ((PN (USER-HOMEDIR-PATHNAME))) (NOTNOT PN)) T)
;; Loading (DEFTEST USER-HOMEDIR-PATHNAME.2 (LET* ((PN-LIST (MULTIPLE-VALUE-LIST (USER-HOMEDIR-PATHNAME))) (PN (FIRST PN-LIST))) (VALUES (LENGTH PN-LIST) (NOTNOT-MV (PATHNAMEP PN)))) 1 T)
;; Loading (DEFTEST USER-HOMEDIR-PATHNAME.3 (LET ((PN (USER-HOMEDIR-PATHNAME))) (PATHNAME-NAME PN)) NIL)
;; Loading (DEFTEST USER-HOMEDIR-PATHNAME.4 (LET ((PN (USER-HOMEDIR-PATHNAME))) (PATHNAME-TYPE PN)) NIL)
;; Loading (DEFTEST USER-HOMEDIR-PATHNAME.5 (LET ((PN (USER-HOMEDIR-PATHNAME))) (PATHNAME-VERSION PN)) NIL)
;; Loading (DEFTEST USER-HOMEDIR-PATHNAME.7 (LET* ((PN (USER-HOMEDIR-PATHNAME :UNSPECIFIC))) (OR (NULL PN) (NOTNOT (PATHNAMEP PN)))) T)
;; Loading (DEFTEST USER-HOMEDIR-PATHNAME.ERROR.1 (SIGNALS-ERROR (USER-HOMEDIR-PATHNAME :UNSPECIFIC NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "decode-universal-time.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/decode-universal-time.lsp C1E83BF7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.1 (DECODE-UNIVERSAL-TIME 0 0) 0 0 0 1 1 1900 0 NIL 0)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.2 (DECODE-UNIVERSAL-TIME 0 -1) 0 0 1 1 1 1900 0 NIL -1)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.3 (LET ((COUNT 0)) (LOOP FOR TIME = (RANDOM 10000000000) FOR TZ = (- (RANDOM 49) 24) FOR (SECOND MINUTE HOUR DATE MONTH YEAR DAY DAYLIGHT-P ZONE) = (MULTIPLE-VALUE-LIST (DECODE-UNIVERSAL-TIME TIME TZ)) FOR TIME2 = (ENCODE-UNIVERSAL-TIME SECOND MINUTE HOUR DATE MONTH YEAR ZONE) REPEAT 1000 UNLESS (AND (EQL TZ ZONE) (EQL TIME TIME2) (NULL DAYLIGHT-P)) COLLECT (PROGN (INCF COUNT) (LIST TIME TZ (LIST SECOND MINUTE HOUR DATE MONTH YEAR DAY DAYLIGHT-P ZONE) TIME2)) UNTIL (>= COUNT 100))) NIL)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.4 (LET ((COUNT 0)) (LOOP FOR TIME = (RANDOM 10000000000) FOR TZ = (/ (- (RANDOM (1+ (* 48 3600))) (* 24 3600)) 3600) FOR (SECOND MINUTE HOUR DATE MONTH YEAR DAY DAYLIGHT-P ZONE) = (MULTIPLE-VALUE-LIST (DECODE-UNIVERSAL-TIME TIME TZ)) FOR TIME2 = (ENCODE-UNIVERSAL-TIME SECOND MINUTE HOUR DATE MONTH YEAR ZONE) REPEAT 1000 UNLESS (AND (EQL TZ ZONE) (EQL TIME TIME2) (NULL DAYLIGHT-P)) COLLECT (PROGN (INCF COUNT) (LIST TIME TZ (LIST SECOND MINUTE HOUR DATE MONTH YEAR DAY DAYLIGHT-P ZONE) TIME2)) UNTIL (>= COUNT 100))) NIL)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.5 (LET ((COUNT 0)) (LOOP FOR TIME = (RANDOM 10000000000) FOR (SECOND MINUTE HOUR DATE MONTH YEAR DAY DAYLIGHT-P ZONE) = (HANDLER-CASE (MULTIPLE-VALUE-LIST (DECODE-UNIVERSAL-TIME TIME)) (ERROR (C) (PRINT TIME) (ERROR C))) FOR TIME2 = (ENCODE-UNIVERSAL-TIME SECOND MINUTE HOUR DATE MONTH YEAR) REPEAT 1000 UNLESS (LET ((DAYLIGHT-P-2 (NTH-VALUE 7 (DECODE-UNIVERSAL-TIME TIME2)))) (OR (EQL TIME TIME2) (AND DAYLIGHT-P (NOT DAYLIGHT-P-2)) (AND (NOT DAYLIGHT-P) DAYLIGHT-P-2))) COLLECT (PROGN (INCF COUNT) (LIST TIME (LIST SECOND MINUTE HOUR DATE MONTH YEAR DAY DAYLIGHT-P ZONE) TIME2)) UNTIL (>= COUNT 100))) NIL)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.6 (LET ((VALS0 (MULTIPLE-VALUE-LIST (GET-DECODED-TIME))) (VALS1 (MULTIPLE-VALUE-LIST (DECODE-UNIVERSAL-TIME (GET-UNIVERSAL-TIME)))) (VALS2 (MULTIPLE-VALUE-LIST (GET-DECODED-TIME)))) (WHEN (EQUAL VALS0 VALS2) (ASSERT (= (LENGTH VALS1) 9)) (ASSERT (= (LENGTH VALS2) 9)) (ASSERT (EQUAL (SUBSEQ VALS1 0 7) (SUBSEQ VALS2 0 7))) (ASSERT (IF (ELT VALS1 7) (ELT VALS2 7) (NOT (ELT VALS2 7)))) (ASSERT (= (ELT VALS1 8) (ELT VALS2 8)))) (VALUES)))
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.7 (DECODE-UNIVERSAL-TIME (* 365 3600 24) 0) 0 0 0 1 1 1901 1 NIL 0)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.8 (DECODE-UNIVERSAL-TIME (* 2 365 3600 24) 0) 0 0 0 1 1 1902 2 NIL 0)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.9 (DECODE-UNIVERSAL-TIME (* 3 365 3600 24) 0) 0 0 0 1 1 1903 3 NIL 0)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.10 (DECODE-UNIVERSAL-TIME (* 4 365 3600 24) 0) 0 0 0 1 1 1904 4 NIL 0)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.11 (DECODE-UNIVERSAL-TIME (+ (* 24 3600) (* 5 365 3600 24)) 0) 0 0 0 1 1 1905 6 NIL 0)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.12 (LOOP FOR TIME = (RANDOM 100000000000) FOR TZ = (- (RANDOM 49) 24) FOR INTERVAL = (1+ (RANDOM 10000)) FOR TIME2 = (+ TIME (* INTERVAL 24 3600)) FOR DAY = (NTH-VALUE 6 (DECODE-UNIVERSAL-TIME TIME TZ)) FOR DAY2 = (NTH-VALUE 6 (DECODE-UNIVERSAL-TIME TIME2 TZ)) REPEAT 1000 UNLESS (= (MOD DAY2 7) (MOD (+ DAY INTERVAL) 7)) COLLECT (LIST TIME TIME2 TZ INTERVAL DAY DAY2)) NIL)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.ERROR.1 (SIGNALS-ERROR (DECODE-UNIVERSAL-TIME) PROGRAM-ERROR) T)
;; Loading (DEFTEST DECODE-UNIVERSAL-TIME.ERROR.2 (SIGNALS-ERROR (DECODE-UNIVERSAL-TIME 0 0 NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "encode-universal-time.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/encode-universal-time.lsp C1F79F97>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ENCODE-UNIVERSAL-TIME.1 (LOOP WITH COUNT = 0 FOR YEAR = (+ 1900 (RANDOM 1000)) FOR LEAP? = (AND (= (MOD YEAR 4) 0) (OR (/= (MOD YEAR 100) 0) (= (MOD YEAR 400) 0))) FOR MONTH = (1+ (RANDOM 12)) FOR DATE = (1+ (RANDOM (ELT (IF LEAP? #(0 31 29 31 30 31 30 31 31 30 31 30 31) #(0 31 28 31 30 31 30 31 31 30 31 30 31)) MONTH))) FOR HOUR = (RANDOM 24) FOR MINUTE = (RANDOM 60) FOR SECOND = (RANDOM 60) FOR TZ = (IF (AND (= YEAR 1900) (= DATE 0) (= MONTH 0)) (RANDOM 25) (- (RANDOM 49) 24)) FOR TIME = (ENCODE-UNIVERSAL-TIME SECOND MINUTE HOUR DATE MONTH YEAR TZ) FOR DECODED-VALS = (MULTIPLE-VALUE-LIST (DECODE-UNIVERSAL-TIME TIME TZ)) FOR VALS = (LIST SECOND MINUTE HOUR DATE MONTH YEAR (ELT DECODED-VALS 6) NIL TZ) REPEAT 20000 UNLESS (EQUAL VALS DECODED-VALS) COLLECT (PROGN (INCF COUNT) (LIST VALS TIME DECODED-VALS)) UNTIL (>= COUNT 100)) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST ENCODE-UNIVERSAL-TIME.3 (LOOP WITH COUNT = 0 FOR YEAR = (+ 1900 (RANDOM 1000)) FOR LEAP? = (AND (= (MOD YEAR 4) 0) (OR (/= (MOD YEAR 100) 0) (= (MOD YEAR 400) 0))) FOR MONTH = (1+ (RANDOM 12)) FOR DATE = (1+ (RANDOM (ELT (IF LEAP? #(0 31 29 31 30 31 30 31 31 30 31 30 31) #(0 31 28 31 30 31 30 31 31 30 31 30 31)) MONTH))) FOR HOUR = (RANDOM 24) FOR MINUTE = (RANDOM 60) FOR SECOND = (RANDOM 60) FOR TZ = (/ (IF (AND (= YEAR 1900) (= DATE 0) (= MONTH 0)) (RANDOM (1+ (* 24 3600))) (- (RANDOM (1+ (* 48 3600))) (* 24 3600))) 3600) FOR TIME = (ENCODE-UNIVERSAL-TIME SECOND MINUTE HOUR DATE MONTH YEAR TZ) FOR DECODED-VALS = (MULTIPLE-VALUE-LIST (DECODE-UNIVERSAL-TIME TIME TZ)) FOR VALS = (LIST SECOND MINUTE HOUR DATE MONTH YEAR (ELT DECODED-VALS 6) NIL TZ) REPEAT 20000 UNLESS (EQUAL VALS DECODED-VALS) COLLECT (PROGN (INCF COUNT) (LIST VALS TIME DECODED-VALS)) UNTIL (>= COUNT 100)) NIL)
;; Loading (DEFTEST ENCODE-UNIVERSAL-TIME.ERROR.1 (SIGNALS-ERROR (ENCODE-UNIVERSAL-TIME 0 0 0 1 1) PROGRAM-ERROR) T)
;; Loading (DEFTEST ENCODE-UNIVERSAL-TIME.ERROR.2 (SIGNALS-ERROR (ENCODE-UNIVERSAL-TIME 0 0 0 1 1 1901 0 NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "get-universal-time.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/get-universal-time.lsp 81D3A897>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST GET-UNIVERSAL-TIME.1 (NOTNOT-MV (TYPEP (GET-UNIVERSAL-TIME) (QUOTE UNSIGNED-BYTE))) T)
;; Loading (DEFTEST GET-UNIVERSAL-TIME.2 (LET* ((TIME1 (GET-UNIVERSAL-TIME)) (VALS (MULTIPLE-VALUE-LIST (GET-DECODED-TIME))) (TIME2 (GET-UNIVERSAL-TIME))) (WHEN (= TIME1 TIME2) (LET ((VALS2 (MULTIPLE-VALUE-LIST (DECODE-UNIVERSAL-TIME TIME1)))) (ASSERT (= (LENGTH VALS) 9)) (ASSERT (= (LENGTH VALS2) 9)) (ASSERT (EQUAL (SUBSEQ VALS 0 7) (SUBSEQ VALS2 0 7))) (ASSERT (IF (ELT VALS 7) (ELT VALS2 7) (NOT (ELT VALS2 7)))) (ASSERT (= (ELT VALS 8) (ELT VALS2 8))))) (VALUES)))
;; Loading (DEFTEST GET-UNIVERSAL-TIME.3 (LET* ((FIRST (GET-UNIVERSAL-TIME)) (PREV FIRST)) (LOOP FOR TIME = (GET-UNIVERSAL-TIME) DO (ASSERT (>= TIME PREV)) DO (SETF PREV TIME) UNTIL (>= TIME (+ 5 FIRST)))) NIL)
;; Loading (DEFTEST GET-UNIVERSAL-TIME.ERROR.1 (SIGNALS-ERROR (GET-UNIVERSAL-TIME NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-UNIVERSAL-TIME.ERROR.2 (SIGNALS-ERROR (GET-UNIVERSAL-TIME :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-DECODED-TIME.ERROR.1 (SIGNALS-ERROR (GET-DECODED-TIME NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-DECODED-TIME.ERROR.2 (SIGNALS-ERROR (GET-DECODED-TIME :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (LOAD "sleep.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/sleep.lsp 81DA1517>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST SLEEP.1 (SLEEP 0) NIL)
;; Loading (DEFTEST SLEEP.2 (SLEEP 0.0) NIL)
;; Loading (DEFTEST SLEEP.3 (SLEEP 0.0) NIL)
;; Loading (DEFTEST SLEEP.4 (SLEEP 0.0) NIL)
;; Loading (DEFTEST SLEEP.5 (SLEEP 0.0) NIL)
;; Loading (DEFTEST SLEEP.6 (SLEEP 0.0) NIL)
;; Loading (DEFTEST SLEEP.7 (SLEEP 1/100) NIL)
;; Loading (DEFTEST SLEEP.8 (SLEEP (/ INTERNAL-TIME-UNITS-PER-SECOND)) NIL)
;; Loading (DEFTEST SLEEP.9 (SLEEP (/ 1000000000000000000000000000000)) NIL)
;; Loading (DEFTEST SLEEP.10 (SLEEP LEAST-POSITIVE-SHORT-FLOAT) NIL)
;; Loading (DEFTEST SLEEP.11 (SLEEP LEAST-POSITIVE-SINGLE-FLOAT) NIL)
;; Loading (DEFTEST SLEEP.12 (SLEEP LEAST-POSITIVE-DOUBLE-FLOAT) NIL)
;; Loading (DEFTEST SLEEP.13 (SLEEP LEAST-POSITIVE-LONG-FLOAT) NIL)
;; Loading (DEFTEST SLEEP.ERROR.1 (SIGNALS-ERROR (SLEEP) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLEEP.ERROR.2 (SIGNALS-ERROR (SLEEP 100 NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST SLEEP.ERROR.3 (CHECK-TYPE-ERROR (FUNCTION SLEEP) (FUNCTION (LAMBDA (X) (AND (REALP X) (>= X 0))))) NIL)
;; Loading (LOAD "get-internal-time.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/get-internal-time.lsp 81DF75A7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST GET-INTERNAL-REAL-TIME.1 (NOTNOT-MV (TYPEP (MULTIPLE-VALUE-LIST (GET-INTERNAL-REAL-TIME)) (QUOTE (CONS UNSIGNED-BYTE NULL)))) T)
;; Loading (DEFTEST GET-INTERNAL-REAL-TIME.2 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((PREV (GET-INTERNAL-REAL-TIME))) (LOOP FOR NEXT = (GET-INTERNAL-REAL-TIME) REPEAT 100000 DO (ASSERT (>= NEXT PREV)) DO (SETF PREV NEXT))))))) NIL)
;; Loading (DEFTEST GET-INTERNAL-REAL-TIME.ERROR.1 (SIGNALS-ERROR (GET-INTERNAL-REAL-TIME NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-INTERNAL-REAL-TIME.ERROR.2 (SIGNALS-ERROR (GET-INTERNAL-REAL-TIME :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-INTERNAL-RUN-TIME.1 (NOTNOT-MV (TYPEP (MULTIPLE-VALUE-LIST (GET-INTERNAL-RUN-TIME)) (QUOTE (CONS UNSIGNED-BYTE NULL)))) T)
;; Loading (DEFTEST GET-INTERNAL-RUN-TIME.2 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((PREV (GET-INTERNAL-RUN-TIME))) (LOOP FOR NEXT = (GET-INTERNAL-RUN-TIME) REPEAT 100000 DO (ASSERT (>= NEXT PREV)) DO (SETF PREV NEXT))))))) NIL)
;; Loading (DEFTEST GET-INTERNAL-RUN-TIME.ERROR.1 (SIGNALS-ERROR (GET-INTERNAL-RUN-TIME NIL) PROGRAM-ERROR) T)
;; Loading (DEFTEST GET-INTERNAL-RUN-TIME.ERROR.2 (SIGNALS-ERROR (GET-INTERNAL-RUN-TIME :ALLOW-OTHER-KEYS T) PROGRAM-ERROR) T)
;; Loading (DEFTEST INTERNAL-TIME-UNITS-PER-SECOND.1 (NOTNOT-MV (CONSTANTP (QUOTE INTERNAL-TIME-UNITS-PER-SECOND))) T)
;; Loading (DEFTEST INTERNAL-TIME-UNITS-PER-SECOND.2 (NOTNOT-MV (TYPEP INTERNAL-TIME-UNITS-PER-SECOND (QUOTE (INTEGER 1)))) T)
;; Loading (LOAD "documentation.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/documentation.lsp 81E64727>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.1 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (DOCUMENTATION (SYMBOL-FUNCTION SYM) T)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.2 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (LET ((FN (SYMBOL-FUNCTION SYM)) (DOC "FOO1")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN T) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN T)) (EQUAL DOC (DOCUMENTATION FN T))))))) "FOO1")
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.3 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (DOCUMENTATION (MACRO-FUNCTION SYM) T)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.4 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (LET ((FN (MACRO-FUNCTION SYM)) (DOC "FOO2")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN T) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN T)) (EQUAL DOC (DOCUMENTATION FN T))))))) "FOO2")
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.6 (LET* ((SYM (GENSYM)) (FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA NIL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA SYM))))))) (DOC "FOO3")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN T) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN T)) (EQUAL DOC (DOCUMENTATION FN T)))))) "FOO3")
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.6A (LET* ((SYM (GENSYM)) (FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA SYM)))))) (DOC "FOO3A")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN T) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN T)) (EQUAL DOC (DOCUMENTATION FN T)))))) "FOO3A")
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.5 (LET* ((SYM (GENSYM)) (FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA NIL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA SYM)))))))) (DOCUMENTATION FN T)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.5A (LET* ((SYM (GENSYM)) (FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (QUOTE (SYSTEM.INTERNALS::BQ-COMMA SYM))))))) (DOCUMENTATION FN T)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.7 (LET* ((SYM (GENSYM)) (FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X)))))) (DOCUMENTATION FN T)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.8 (LET* ((SYM (GENSYM)) (FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X))))) (DOC "FOO4")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN T) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN T)) (EQUAL DOC (DOCUMENTATION FN T)))))) "FOO4")
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.9 (LOOP FOR S IN *CL-FUNCTION-SYMBOLS* FOR FN = (SYMBOL-FUNCTION S) FOR DOC = (DOCUMENTATION FN T) UNLESS (OR (NULL DOC) (STRING DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.10 (LOOP FOR S IN *CL-ACCESSOR-SYMBOLS* FOR FN = (SYMBOL-FUNCTION S) FOR DOC = (DOCUMENTATION FN T) UNLESS (OR (NULL DOC) (STRING DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.11 (LOOP FOR S IN *CL-MACRO-SYMBOLS* FOR FN = (MACRO-FUNCTION S) FOR DOC = (DOCUMENTATION FN T) UNLESS (OR (NULL DOC) (STRING DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.T.12 (LOOP FOR S IN *CL-STANDARD-GENERIC-FUNCTION-SYMBOLS* FOR FN = (SYMBOL-FUNCTION S) FOR DOC = (DOCUMENTATION FN T) UNLESS (OR (NULL DOC) (STRING DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.FUNCTION.1 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (DOCUMENTATION (SYMBOL-FUNCTION SYM) (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.FUNCTION.2 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (LET ((FN (SYMBOL-FUNCTION SYM)) (DOC "FOO5")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN (QUOTE FUNCTION)) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN (QUOTE FUNCTION))) (EQUAL DOC (DOCUMENTATION FN (QUOTE FUNCTION)))))))) "FOO5")
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.FUNCTION.3 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (DOCUMENTATION (MACRO-FUNCTION SYM) (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.FUNCTION.4 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (LET ((FN (MACRO-FUNCTION SYM)) (DOC "FOO6")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN T) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN (QUOTE FUNCTION))) (EQUAL DOC (DOCUMENTATION FN (QUOTE FUNCTION)))))))) "FOO6")
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.FUNCTION.5 (LET* ((SYM (GENSYM)) (FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X)))))) (DOCUMENTATION FN (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST DOCUMENTATION.FUNCTION.FUNCTION.8 (LET* ((SYM (GENSYM)) (FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X))))) (DOC "FOO4A")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN T) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN (QUOTE FUNCTION))) (EQUAL DOC (DOCUMENTATION FN (QUOTE FUNCTION))))))) "FOO4A")
;; Loading (DEFTEST DOCUMENTATION.LIST.FUNCTION.1 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)) (&REST ARGS) (DECLARE (IGNORE ARGS)) NIL))) (DOCUMENTATION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM))) (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST DOCUMENTATION.LIST.FUNCTION.2 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)) (&REST ARGS) (DECLARE (IGNORE ARGS)) NIL))) (LET ((FN (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (DOC "FOO7")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN (QUOTE FUNCTION)) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN (QUOTE FUNCTION))) (EQUAL DOC (DOCUMENTATION FN (QUOTE FUNCTION)))))))) "FOO7")
;; Loading (DEFTEST DOCUMENTATION.LIST.COMPILER-MACRO.1 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)) (&REST ARGS) (DECLARE (IGNORE ARGS)) NIL))) (DOCUMENTATION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM))) (QUOTE COMPILER-MACRO))) NIL)
;; Loading (DEFTEST DOCUMENTATION.LIST.COMPILER-MACRO.2 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)) (&REST ARGS) (DECLARE (IGNORE ARGS)) NIL))) (LET ((FN (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (DOC "FOO8")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION FN (QUOTE COMPILER-MACRO)) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION FN (QUOTE FUNCTION))) (EQUAL DOC (DOCUMENTATION FN (QUOTE COMPILER-MACRO)))))))) "FOO8")
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.1 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (DOCUMENTATION SYM (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.2 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (LET ((DOC "FOO9")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION SYM (QUOTE FUNCTION)) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE FUNCTION))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE FUNCTION)))))))) "FOO9")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.3 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (DOCUMENTATION SYM (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.4 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (LET ((DOC "FOO9A")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION SYM (QUOTE FUNCTION)) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE FUNCTION))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE FUNCTION)))))))) "FOO9A")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.5 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X)))) (DOCUMENTATION SYM (QUOTE FUNCTION))) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.6 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X)))) (LET ((DOC "FOO9B")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION SYM (QUOTE FUNCTION)) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE FUNCTION))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE FUNCTION)))))))) "FOO9B")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.7 (LOOP FOR S IN *CL-SPECIAL-OPERATOR-SYMBOLS* FOR DOC = (DOCUMENTATION S (QUOTE FUNCTION)) UNLESS (OR (NULL DOC) (STRINGP DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.8 (LOOP FOR S IN *CL-FUNCTION-OR-ACCESSOR-SYMBOLS* FOR DOC = (DOCUMENTATION S (QUOTE FUNCTION)) UNLESS (OR (NULL DOC) (STRINGP DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.FUNCTION.9 (LOOP FOR S IN *CL-MACRO-SYMBOLS* FOR DOC = (DOCUMENTATION S (QUOTE FUNCTION)) UNLESS (OR (NULL DOC) (STRINGP DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.COMPILER-MACRO.1 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (&REST ARGS) (DECLARE (IGNORE ARGS)) NIL))) (DOCUMENTATION SYM (QUOTE COMPILER-MACRO))) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.COMPILER-MACRO.2 (LET* ((SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) (&REST ARGS) (DECLARE (IGNORE ARGS)) NIL))) (LET ((DOC "FOO10")) (MULTIPLE-VALUE-PROG1 (SETF (DOCUMENTATION SYM (QUOTE COMPILER-MACRO)) (COPY-SEQ DOC)) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE COMPILER-MACRO))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE COMPILER-MACRO)))))))) "FOO10")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.SETF.1 (LET* ((SYM (GENSYM)) (DOC "FOO11")) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (DECLARE (SPECIAL *X*)) *X*))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-SETF-EXPANDER (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (LET ((G (GEMSYM))) (VALUES NIL NIL (LIST G) (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (SPECIAL *X*)) (SETF *X* (SYSTEM.INTERNALS::BQ-COMMA G)))) (QUOTE (LOCALLY (DECLARE (SPECIAL *X*)) *X*))))))) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE SETF)) (SETF (DOCUMENTATION SYM (QUOTE SETF)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE SETF))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE SETF))))))) NIL "FOO11")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.SETF.2 (LET* ((SYM (GENSYM)) (DOC "FOO12")) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (SPECIAL *X*)) *X*))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-SETF-EXPANDER (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL (LET ((G (GEMSYM))) (VALUES NIL NIL (LIST G) (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (SPECIAL *X*)) (SETF *X* (SYSTEM.INTERNALS::BQ-COMMA G)))) (QUOTE (LOCALLY (DECLARE (SPECIAL *X*)) *X*))))))) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE SETF)) (SETF (DOCUMENTATION SYM (QUOTE SETF)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE SETF))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE SETF))))))) NIL "FOO12")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.METHOD-COMBINATION.1 (LET* ((SYM (GENSYM)) (DOC "FOO13")) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-METHOD-COMBINATION (SYSTEM.INTERNALS::BQ-COMMA SYM) :IDENTITY-WITH-ONE-ARGUMENT T))) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE METHOD-COMBINATION)) (SETF (DOCUMENTATION SYM (QUOTE METHOD-COMBINATION)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE METHOD-COMBINATION))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE METHOD-COMBINATION))))))) NIL "FOO13")
;; Loading (DEFTEST DOCUMENTATION.STANDARD-METHOD.T.1 (LET* ((SYM (GENSYM)) (DOC "FOO14")) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA SYM) (X)))) (LET ((METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA SYM) ((X T)) NIL))))) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION METHOD T) (SETF (DOCUMENTATION METHOD T) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION METHOD (QUOTE T))) (EQUAL DOC (DOCUMENTATION METHOD (QUOTE T)))))))) NIL "FOO14")
;; Loading (DEFTEST DOCUMENTATION.PACKAGE.T.1 (LET ((PACKAGE-NAME "PACKAGE-NAME-FOR-DOCUMENATION-TESTS-1")) (UNWIND-PROTECT (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA PACKAGE-NAME) (:USE)))) (LET ((PKG (FIND-PACKAGE PACKAGE-NAME)) (DOC "FOO15")) (ASSERT PKG) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION PKG T) (SETF (DOCUMENTATION PKG T) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION PKG T)) (EQUAL DOC (DOCUMENTATION PKG T))))))) (DELETE-PACKAGE PACKAGE-NAME))) NIL "FOO15")
;; Loading (DEFTEST DOCUMENTATION.STANDARD-CLASS.T.1 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL)))) (EVAL CLASS-FORM) (LET ((CLASS (FIND-CLASS SYM)) (DOC "FOO16")) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION CLASS T) (SETF (DOCUMENTATION CLASS T) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION CLASS T)) (EQUAL DOC (DOCUMENTATION CLASS T))))))) NIL "FOO16")
;; Loading (DEFTEST DOCUMENTATION.STANDARD-CLASS.TYPE.1 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL)))) (EVAL CLASS-FORM) (LET ((CLASS (FIND-CLASS SYM)) (DOC "FOO17")) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION CLASS (QUOTE TYPE)) (SETF (DOCUMENTATION CLASS (QUOTE TYPE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION CLASS (QUOTE TYPE))) (EQUAL DOC (DOCUMENTATION CLASS (QUOTE TYPE)))))))) NIL "FOO17")
;; Loading (DEFTEST DOCUMENTATION.STRUCT-CLASS.T.1 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFSTRUCT (SYSTEM.INTERNALS::BQ-COMMA SYM) A B C)))) (EVAL CLASS-FORM) (LET ((CLASS (FIND-CLASS SYM)) (DOC "FOO18")) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION CLASS T) (SETF (DOCUMENTATION CLASS T) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION CLASS T)) (EQUAL DOC (DOCUMENTATION CLASS T))))))) NIL "FOO18")
;; Loading (DEFTEST DOCUMENTATION.STRUCT-CLASS.TYPE.1 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFSTRUCT (SYSTEM.INTERNALS::BQ-COMMA SYM) A B C)))) (EVAL CLASS-FORM) (LET ((CLASS (FIND-CLASS SYM)) (DOC "FOO19")) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION CLASS (QUOTE TYPE)) (SETF (DOCUMENTATION CLASS (QUOTE TYPE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION CLASS (QUOTE TYPE))) (EQUAL DOC (DOCUMENTATION CLASS (QUOTE TYPE)))))))) NIL "FOO19")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.TYPE.1 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL NIL))) (DOC "FOO20")) (EVAL CLASS-FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE TYPE)) (SETF (DOCUMENTATION SYM (QUOTE TYPE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE TYPE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE TYPE))))))) NIL "FOO20")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.TYPE.2 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFSTRUCT (SYSTEM.INTERNALS::BQ-COMMA SYM) A B C))) (DOC "FOO21")) (EVAL CLASS-FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE TYPE)) (SETF (DOCUMENTATION SYM (QUOTE TYPE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE TYPE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE TYPE))))))) NIL "FOO21")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.TYPE.3 (LET* ((SYM (GENSYM)) (TYPE-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFTYPE (SYSTEM.INTERNALS::BQ-COMMA SYM) NIL T))) (DOC "FOO21A")) (EVAL TYPE-FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE TYPE)) (SETF (DOCUMENTATION SYM (QUOTE TYPE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE TYPE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE TYPE))))))) NIL "FOO21A")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.TYPE.4 (LOOP FOR S IN *CL-ALL-TYPE-SYMBOLS* FOR DOC = (DOCUMENTATION S (QUOTE TYPE)) UNLESS (OR (NULL DOC) (STRINGP DOC)) COLLECT (LIST DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.STRUCTURE.1 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFSTRUCT (SYSTEM.INTERNALS::BQ-COMMA SYM) A B C))) (DOC "FOO22")) (EVAL CLASS-FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE STRUCTURE)) (SETF (DOCUMENTATION SYM (QUOTE STRUCTURE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE STRUCTURE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE STRUCTURE))))))) NIL "FOO22")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.STRUCTURE.2 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFSTRUCT ((SYSTEM.INTERNALS::BQ-COMMA SYM) (:TYPE LIST)) A B C))) (DOC "FOO23")) (EVAL CLASS-FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE STRUCTURE)) (SETF (DOCUMENTATION SYM (QUOTE STRUCTURE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE STRUCTURE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE STRUCTURE))))))) NIL "FOO23")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.STRUCTURE.3 (LET* ((SYM (GENSYM)) (CLASS-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFSTRUCT ((SYSTEM.INTERNALS::BQ-COMMA SYM) (:TYPE VECTOR)) A B C))) (DOC "FOO24")) (EVAL CLASS-FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE STRUCTURE)) (SETF (DOCUMENTATION SYM (QUOTE STRUCTURE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE STRUCTURE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE STRUCTURE))))))) NIL "FOO24")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.VARIABLE.1 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFVAR (SYSTEM.INTERNALS::BQ-COMMA SYM)))) (DOC "FOO25")) (EVAL FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE VARIABLE)) (SETF (DOCUMENTATION SYM (QUOTE VARIABLE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE VARIABLE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE VARIABLE))))))) NIL "FOO25")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.VARIABLE.2 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFVAR (SYSTEM.INTERNALS::BQ-COMMA SYM) T))) (DOC "FOO26")) (EVAL FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE VARIABLE)) (SETF (DOCUMENTATION SYM (QUOTE VARIABLE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE VARIABLE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE VARIABLE))))))) NIL "FOO26")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.VARIABLE.3 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFPARAMETER (SYSTEM.INTERNALS::BQ-COMMA SYM) T))) (DOC "FOO27")) (EVAL FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE VARIABLE)) (SETF (DOCUMENTATION SYM (QUOTE VARIABLE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE VARIABLE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE VARIABLE))))))) NIL "FOO27")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.VARIABLE.4 (LET* ((SYM (GENSYM)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFCONSTANT (SYSTEM.INTERNALS::BQ-COMMA SYM) T))) (DOC "FOO27")) (EVAL FORM) (MULTIPLE-VALUE-PROG1 (VALUES (DOCUMENTATION SYM (QUOTE VARIABLE)) (SETF (DOCUMENTATION SYM (QUOTE VARIABLE)) (COPY-SEQ DOC))) (ASSERT (OR (NULL (DOCUMENTATION SYM (QUOTE VARIABLE))) (EQUAL DOC (DOCUMENTATION SYM (QUOTE VARIABLE))))))) NIL "FOO27")
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.VARIABLE.5 (LOOP FOR S IN *CL-VARIABLE-SYMBOLS* FOR DOC = (DOCUMENTATION S (QUOTE VARIABLE)) UNLESS (OR (NULL DOC) (STRINGP DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (DEFTEST DOCUMENTATION.SYMBOL.VARIABLE.6 (LOOP FOR S IN *CL-CONSTANT-SYMBOLS* FOR DOC = (DOCUMENTATION S (QUOTE VARIABLE)) UNLESS (OR (NULL DOC) (STRINGP DOC)) COLLECT (LIST S DOC)) NIL)
;; Loading (IGNORE-ERRORS (DEFGENERIC DOCUMENTATION-TEST-CLASS-1-DOC-ACCESSOR (OBJ)) (DEFGENERIC (SETF DOCUMENTATION-TEST-CLASS-1-DOC-ACCESSOR) (NEWDOC OBJ)) (DEFCLASS DOCUMENTATION-TEST-CLASS-1 NIL ((MY-DOC :ACCESSOR DOCUMENTATION-TEST-CLASS-1-DOC-ACCESSOR :TYPE (OR NULL STRING) :INITFORM NIL))) (DEFMETHOD DOCUMENTATION-TEST-CLASS-1-DOC-ACCESSOR ((OBJ DOCUMENTATION-TEST-CLASS-1)) (SLOT-VALUE OBJ (QUOTE MY-DOC))) (DEFMETHOD (SETF DOCUMENTATION-TEST-CLASS-1-DOC-ACCESSOR) ((NEWDOC STRING) (OBJ DOCUMENTATION-TEST-CLASS-1)) (SETF (SLOT-VALUE OBJ (QUOTE MY-DOC)) NEWDOC)) (DEFMETHOD DOCUMENTATION ((OBJ DOCUMENTATION-TEST-CLASS-1) (DOCTYPE (EQL T))) (DOCUMENTATION-TEST-CLASS-1-DOC-ACCESSOR OBJ)) (DEFMETHOD (SETF DOCUMENTATION) ((NEWDOC STRING) (OBJ DOCUMENTATION-TEST-CLASS-1) (DOCTYPE (EQL T))) (SETF (DOCUMENTATION-TEST-CLASS-1-DOC-ACCESSOR OBJ) NEWDOC)))
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST DOCUMENTATION.NEW-METHOD.1 (LET ((OBJ (MAKE-INSTANCE (QUOTE DOCUMENTATION-TEST-CLASS-1)))) (VALUES (DOCUMENTATION OBJ T) (SETF (DOCUMENTATION OBJ T) "FOO28") (DOCUMENTATION OBJ T))) NIL "FOO28" "FOO28")
;; Loading (LOAD "inspect.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/inspect.lsp 81D3ADA7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST INSPECT.ERROR.1 (SIGNALS-ERROR (INSPECT) PROGRAM-ERROR) T)
;; Loading (DEFTEST INSPECT.ERROR.2 (SIGNALS-ERROR (INSPECT NIL NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "dribble.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/dribble.lsp 81D652D7>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST DRIBBLE.ERROR.1 (SIGNALS-ERROR (DRIBBLE "dribble.out" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "ed.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/ed.lsp 81D88D87>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST ED.ERROR.1 (SIGNALS-ERROR (ED "ed.lsp" NIL) PROGRAM-ERROR) T)
;; Loading (LOAD "load-misc.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/load-misc.lsp 81DB4607>
;; Loading (LOAD "misc.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/misc.lsp 81DCA247>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DECLAIM (SPECIAL *S1* *S2* *S3* *S4* *S5* *S6* *S7* *S8*))
;; Loading (DEFTEST MISC.1 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 8 22337) B)) (+ B 2607688420)))) 100) 2607688520)
;; Loading (DEFTEST MISC.2 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (INTEGER-LENGTH (DPB B (BYTE 4 28) -1005))))) 12800263) 32)
;; Loading (DEFTEST MISC.3 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1))) (LET ((V7 (LET ((V2 (BLOCK B5 (RETURN-FROM B5 (IF T B -4))))) A))) -65667836)))) 1 2) -65667836)
;; Loading (DEFTEST MISC.4 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -629491 -333) A) (TYPE (INTEGER -142 1) B) (TYPE (INTEGER 0 12604) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LET ((V6 (BLOCK B7 (RETURN-FROM B7 (IF (EQL B 0) 1358159 A))))) B)))) -1000 -17 6143) -17)
;; Loading (DEFTEST MISC.5 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (* 390 (- (SIGNUM (LOGEQV -8005440 -2310)) -10604863)))))) 4135896180)
;; Loading (DEFTEST MISC.6 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1))) (FLET ((%F14 NIL (IF C A -486826646))) (LET ((V7 (FLET ((%F18 NIL (%F14))) A))) (LET ((V5 (%F14))) 0)))))) 10 20) 0)
;; Loading (DEFTEST MISC.7 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1))) (FLET ((%F18 NIL -36)) (FLET ((%F13 NIL (LET NIL (BLOCK B8 (RETURN-FROM B8 C))))) (%F18)))))) 10) -36)
;; Loading (DEFTEST MISC.8 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1))) (LET ((V3 (FLET ((%F12 NIL (MIN B (BLOCK B2 (RETURN-FROM B2 A))))) A))) (BLOCK B7 (FLET ((%F5 NIL (RETURN-FROM B7 B))) (%F5))))))) 10 20) 20)
;; Loading (DEFTEST MISC.9 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1))) (BLOCK B6 (FLET ((%F3 NIL (LDB (BYTE 19 23) (BLOCK B1 (LET NIL (- (IF NIL (RETURN-FROM B6 89627) 1160) (RETURN-FROM B1 22923))))))) 1)))))) 1)
;; Loading (DEFTEST MISC.10 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1)) (TYPE (INTEGER -15417757 5816) C)) (FLET ((%F3 NIL (IF NIL -3143 C))) (BLOCK B5 (LET ((V7 (IF (< 23613642 (%F3)) C -23097977))) (LET ((V5 (RETURN-FROM B5 (IF (EQL C V7) (LET ((V6 (%F3))) 4650813) 782)))) -4362540))))))) -10000) 782)
;; Loading (DEFTEST MISC.11 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1))) (BLOCK B8 (LOGXOR (LET ((V3 (RETURN-FROM B8 120789657))) 3690) (BLOCK B2 (FLET ((%F9 NIL (FLET ((%F10 NIL -1)) C))) (FLET ((%F3 NIL (LET NIL (RETURN-FROM B2 B)))) A)))))))) 1 2 3) 120789657)
;; Loading (DEFTEST MISC.12 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1)) (TYPE (INTEGER -171067 -5) C)) (FLET ((%F16 NIL (FLET ((%F12 NIL 439)) 3358))) (FLET ((%F14 NIL C)) (IF (%F14) -1 (%F14))))))) -100) -1)
;; Loading (DEFTEST MISC.13 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1)) (TYPE (INTEGER -1554410 36086789) B) (TYPE (INTEGER -15033876209 126774299) C)) (BLOCK B3 (FLET ((%F9 NIL (ABS (FLET ((%F5 NIL (RETURN-FROM B3 -2))) (IF (IF (<= 1 C) B (%F5)) -65 -47895812))))) (MIN (LET ((V3 (LET ((V8 (%F9))) B))) B) (IF (= 1364001 (%F9)) (LOGEQV (BLOCK B5 -2713) -247) -19))))))) 0 0) -2)
;; Loading (DEFTEST MISC.14 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (NOTINLINE LOGANDC1)) (BLOCK B6 (FLET ((%F17 NIL (RETURN-FROM B6 C))) (LOGANDC1 (%F17) (IF 1 450967818 (LET ((V1 (%F17))) -17)))))))) 10) 10)
;; Loading (DEFTEST MISC.15 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (FLET ((%F6 NIL A)) (BLOCK B5 (FLET ((%F14 NIL (MIN 17593 (BLOCK B1 (RETURN-FROM B1 B))))) (BLOCK B7 (IF (%F6) (RETURN-FROM B7 28182012) (RETURN-FROM B5 0))))))))) 3 5) 28182012)
;; Loading (DEFTEST MISC.16 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (FLET ((%F14 NIL (BLOCK B6 (FLET ((%F7 NIL (RETURN-FROM B6 4))) (IF 587793 (IF (%F7) C -23086423) (%F7)))))) (BLOCK B1 (FLET ((%F18 NIL A)) (LOGANDC1 (RETURN-FROM B1 -2781) (IF (%F14) 58647578 -396746)))))))) 1 2) -2781)
;; Loading (DEFTEST MISC.17 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1)) (TYPE (INTEGER 4 23363) B) (TYPE (INTEGER -32681 41648) C)) (FLET ((%F18 NIL (IF NIL C B))) (IF (IF (> -71810514 A) 102077 465393) (BLOCK B3 (IF (%F18) (RETURN-FROM B3 C) C)) (%F18)))))) 0 10 1000) 1000)
;; Loading (DEFTEST MISC.18 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1)) (TYPE (INTEGER 7 58010860) A) (TYPE (INTEGER -3573280 -1) B) (TYPE (INTEGER -920848 -819) C)) (FLET ((%F15 NIL (IF (LOGBITP 5 A) A C))) (MIN (IF (%F15) B -39) (IF (> 0 -14756) B (%F15))))))) 8 -1000 -10000) -1000)
;; Loading (DEFTEST MISC.19 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 54 3862515) A) (TYPE (INTEGER -961325 1539) B) (TYPE (INTEGER 6 31455) C) (IGNORABLE A B C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LOGNOR (FLET ((%F13 NIL B)) (%F13)) (FLET ((%F1 NIL (RETURN-FROM %F1 A))) (LABELS ((%F3 NIL (%F1))) -428)))))) 100 0 200) 427)
;; Loading (DEFTEST MISC.20 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -1 31880308) A) (TYPE (INTEGER -11374222037 5331202966) B) (TYPE (INTEGER -483 -1) C) (IGNORABLE A B C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LABELS ((%F6 NIL A)) (IF (EQL (LET ((V9 (%F6))) -50072824) C) 28146341 (IF (< 119937 21304962) 21304962 (%F6))))))) 0 0 -1) 21304962)
;; Loading (DEFTEST MISC.21 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 398 3955) A) (TYPE (INTEGER 233 464963) B) (TYPE (INTEGER -124477 16) C) (IGNORABLE A B C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LOGIOR (FLET ((%F18 NIL -3584768)) (%F18)) (FLET ((%F1 NIL (RETURN-FROM %F1 C))) (FLET ((%F9 NIL (IF (%F1) 24181 7))) 56048)))))) 400 300 0) -3547152)
;; Loading (DEFTEST MISC.22 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -126378 -103) A) (TYPE (INTEGER -1158604975 1) B) (TYPE (INTEGER 502 28036) C) (IGNORABLE A B C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LABELS ((%F13 NIL C)) (LABELS ((%F3 NIL (LOGANDC1 C (BLOCK B6 (MAX -73100 (IF B (RETURN-FROM B6 4935) (%F13))))))) (%F13)))))) -200 0 1000) 1000)
;; Loading (DEFTEST MISC.23 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 1 18911480) A) (TYPE (INTEGER -1 48333) B) (TYPE (INTEGER -3881001767 -1937357) C) (IGNORABLE A B C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LABELS ((%F10 NIL C)) (BLOCK B7 (LOGORC2 (* (%F10) (IF (LDB-TEST (BYTE 27 1) -11337) (RETURN-FROM B7 -2) 246137101)) (MIN (%F10) (RETURN-FROM B7 -76114)))))))) 1 0 -2000000) -2)
;; Loading (DEFTEST MISC.24 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -1477249397 -10697252) A) (TYPE (INTEGER -7 54591) B) (TYPE (INTEGER -102559556 15) C) (IGNORABLE A B C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (BLOCK B8 (LET ((V1 (RETURN-FROM B8 A))) (1+ (BLOCK B3 (FLET ((%F10 NIL (MIN A (RETURN-FROM B3 -1)))) 16776220)))))))) -11000000 0 0) -11000000)
;; Loading (DEFTEST MISC.25 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -944 111244) A) (TYPE (INTEGER 100512 3286178) B) (TYPE (INTEGER -2170236 -107) C) (IGNORABLE A B C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LABELS ((%F17 NIL C)) (LABELS ((%F16 NIL A)) (IF (IF (LOGBITP 10 1029643) T 355) (IF (EQUAL (%F17) B) C A) (IF (= 1325844 (%F16)) -50285 (1- (%F17))))))))) 0 200000 -200) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.26 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE SPEED)) (BLOCK B5 (IF (LOGBITP 6 -97) (LET ((V2 (BLOCK B8 -42484))) C) (FLET ((%F10 NIL (RETURN-FROM B5 -785143))) (LET ((V3 (%F10))) (%F10)))))))) 0) -785143)
;; Loading (DEFTEST MISC.27 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1))) (LABELS ((%F14 NIL C)) (LOGAND (%F14) (LABELS ((%F15 NIL (LOGEQV (LET ((V1 B)) C) (RETURN-FROM %F15 -1740)))) (LABELS ((%F8 NIL (%F15))) A))))))) 5 2 3) 1)
;; Loading (DEFTEST MISC.28 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 1948 12024) B) (TYPE (INTEGER -104357939 -252) C) (OPTIMIZE (SPEED 3) (DEBUG 1))) (FLET ((%F18 NIL C)) (LOGANDC1 (IF (EQL B (%F18)) 0 A) (IF (LDB-TEST (BYTE 30 30) 1) (%F18) 1)))))) 0 2000 -300) 1)
;; Loading (DEFTEST MISC.29 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 661607 10451683348) A) (TYPE (INTEGER -2 -2) B) (TYPE (INTEGER 5996117 18803237) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LABELS ((%F16 NIL -29)) (FLET ((%F7 NIL (LABELS ((%F1 NIL A)) (LET NIL (BLOCK B3 (IF 37101207 (RETURN-FROM B3 -5322045) (LET ((V5 B)) 146099574))))))) (IF (%F16) C C)))))) 1000000 -2 6000000) 6000000)
;; Loading (DEFTEST MISC.30 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -253 -1) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (FLET ((%F8 NIL C)) (IF (= (%F8) 481) (%F8) 1779465))))) -100) 1779465)
;; Loading (DEFTEST MISC.31 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((V9 (LABELS ((%F13 NIL NIL)) NIL))) (LET ((V3 (LOGANDC2 97 3))) (* V3 (- 37391897 (LOGAND V3 -66))))))))) 3589619040)
;; Loading (DEFTEST MISC.32 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A D) (DECLARE (TYPE (INTEGER -8507 26755) A) (TYPE (INTEGER -393314538 2084485) D) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (GCD (IF (= 0 A) 10 (ABS -1)) (LOGXOR -1 (MIN -7580 (MAX (LOGAND A 31365125) D))))))) 1 1) 1)
;; Loading (DEFTEST MISC.33 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D) (DECLARE (TYPE (INTEGER 240 100434465) A) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LOGXOR (IF (LDB-TEST (BYTE 27 4) D) -1 (MAX 55546856 -431)) (LOGORC2 (IF (>= 0 B) (IF (> B C) (LOGANDC2 C D) (IF (> D 224002) 0 D)) (SIGNUM (LOGIOR C B))) (LOGIOR A -1)))))) 256 0 0 0) 55546856)
;; Loading (DEFTEST MISC.34 (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -23228343 2) B) (TYPE (INTEGER -115581022 512244512) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (* (* (LOGORC2 3 (DEPOSIT-FIELD 4667947 (BYTE 14 26) B)) (DEPOSIT-FIELD B (BYTE 25 27) -30424886)) (DPB B (BYTE 23 29) C))))) 0 0) 0)
;; Loading (DEFTEST MISC.35 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -5945502333 12668542) C) (OPTIMIZE (SPEED 3))) (LET ((V2 (* C 12))) (- (MAX (IF (/= 109335113 V2) -26479 V2) (DEPOSIT-FIELD 311 (BYTE 14 28) (MIN (MAX 521326 C) -51)))))))) 12668542) 26479)
;; Loading (DEFTEST MISC.36 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (NOTINLINE + LOGAND) (OPTIMIZE (SPEED 0))) (LOGAND (BLOCK B5 (FLET ((%F1 NIL (RETURN-FROM B5 -220))) (LET ((V7 (%F1))) (+ 359749 35728422)))) -24076))))) -24284)
;; Loading (DEFTEST MISC.37 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (NOTINLINE -) (OPTIMIZE (SPEED 0))) (- (BLOCK B4 (FLET ((%F4 NIL (RETURN-FROM B4 B))) (%F4))))))) 10) -10)
;; Loading (DEFTEST MISC.38 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (INTEGER 0 100) X) (OPTIMIZE (SPEED 3) (SAFETY 1))) (LOGANDC1 X X)))) 79) 0)
;; Loading (DEFTEST MISC.39 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (INTEGER 0 100) X) (OPTIMIZE (SPEED 3) (SAFETY 1))) (LOGANDC2 X X)))) 79) 0)
;; Loading (DEFTEST MISC.40 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (INTEGER 0 100) X) (OPTIMIZE (SPEED 3) (SAFETY 1))) (LOGORC1 X X)))) 79) -1)
;; Loading (DEFTEST MISC.41 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (INTEGER 0 100) X) (OPTIMIZE (SPEED 3) (SAFETY 1))) (LOGORC2 X X)))) 79) -1)
;; Loading (DEFTEST MISC.42 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (INTEGER -100 100) X)) (LDB (BYTE 1 32) X)))) -1) 1)
;; Loading (DEFTEST MISC.43 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (FLET ((%F2 NIL 288213285)) (+ (%F2) (* 13 (%F2)))))))) 4034985990)
;; Loading (DEFTEST MISC.44 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -917858 964754309) A) (OPTIMIZE (SPEED 3))) (* 25 (MIN (MAX A 171625820) 171626138))))) 861929141) 4290653450)
;; Loading (DEFTEST MISC.45 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 21 9673) B) (OPTIMIZE (SPEED 3))) (* (INTEGER-LENGTH -198435631) (+ B 137206182))))) 6027) 3841941852)
;; Loading (DEFTEST MISC.46 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER 0 1) B) (OPTIMIZE (SPEED 3))) (FLET ((%F2 NIL (LOGNOR (BLOCK B5 138) C))) (IF (NOT (OR (= -67399 B) B)) (DEPOSIT-FIELD (%F2) (BYTE 11 8) -3) C))))) 0 0) 0)
;; Loading (DEFTEST MISC.47 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -4005718822 -50081775) A) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LOGNOR (ASH A (MIN 0 A)) A)))) -2878148992) 0)
;; Loading (DEFTEST MISC.48 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (NOTINLINE ASH MIN)) (LOGNOR (ASH A (MIN 0 A)) A)))) -2878148992) 0)
;; Loading (DEFTEST MISC.49 (LET ((BODY (QUOTE (TRUNCATE (LOGORC1 -996082 C) -2))) (ARG 25337234)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (C) (SYSTEM.INTERNALS::BQ-COMMA BODY)))) ARG) (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (C) (DECLARE (NOTINLINE TRUNCATE)) (SYSTEM.INTERNALS::BQ-COMMA BODY)))) ARG))) -13099001 -13099001)
;; Loading (DEFTEST MISC.50 (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 3)) (TYPE (INTEGER 23062188 149459656) C)) (MOD C (MIN -2 0))))) 95019853) -1)
;; Loading (DEFTEST MISC.51 (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 3)) (TYPE (INTEGER 2 152044363) B)) (REM B (MIN -16 0))))) 108251912) 8)
;; Loading (DEFTEST MISC.53 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET (X) (BLOCK NIL (FLET ((%F (Y Z) (IF (> Y Z) (SETQ X Y) (SETQ X Z)))) (%F 1 2) (%F (RETURN 14) 2))) X))))) 2)
;; Loading (DEFTEST MISC.54 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (DECLARE (TYPE (INTEGER 8 117873977) A) (TYPE (INTEGER -131828754 234037511) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (* (MOD (SIGNUM A) (MAX 50 -358301)) (* -2320445737132 (* (* A (DEPOSIT-FIELD A (BYTE 32 19) A)) C)))))) 11386 165297671) -49725654774521915007942373712)
;; Loading (DEFTEST MISC.55 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -5498929 389890) A) (TYPE (INTEGER -5029571274946 48793670) B) (TYPE (INTEGER 9221496 260169518304) C) (IGNORABLE A B C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (- (MOD 1020122 (MIN -49 -420)) (LOGANDC1 (BLOCK B2 (MOD C (MIN -49 (IF T (RETURN-FROM B2 1582) B)))) (LABELS ((%F14 NIL (MOD A (MAX 76 8)))) B)))))) -1893077 -2965238893954 30902744890) 2965238894454)
;; Loading (DEFTEST MISC.56 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (DECLARE (TYPE (INTEGER -8691408487404 -9) A) (TYPE (INTEGER 266003133 2112105962) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (TRUNCATE (MAX (ROUND A) C) (* (* A A) A))))) -10 266003133) -266003 133)
;; Loading (DEFTEST MISC.57 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -1907 58388940297) A) (TYPE (INTEGER -646968358 294016) B) (TYPE (INTEGER -708435313 89383896) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LET ((V6 (ABS (MIN A (SIGNUM C))))) (IF (CEILING V6 (MAX 77 V6)) B 2))))) 50005747335 -363030456 17382819) -363030456)
;; Loading (DEFTEST MISC.58 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -23 66141285) A) (OPTIMIZE (SPEED 3))) (LOGORC2 (SETQ A 35191330) (* A 107))))) 4099241) -3764388885)
;; Loading (DEFTEST MISC.59 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -3966039360 -879349) A) (TYPE (INTEGER -62642199164 -8993827395) B) (TYPE (INTEGER -8065934654337 223) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (FLOOR (* (CEILING C) C) (MAX 78 (* B (* A (* A B)))))))) -1000000 -10000000000 0) 0 0)
;; Loading (DEFTEST MISC.60 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((V5 46660)) (SETQ V5 (SIGNUM (REM V5 (MAX 53 V5))))))))) 0)
;; Loading (DEFTEST MISC.61 (PROGN (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -1785799651 -2) A) (TYPE (INTEGER -27 614132331) B) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (CEILING (MAX (FLOOR -733432 (MAX 84 -20)) 346) (MIN -10 (* 17592186028032 (* (* A B) A))))))) :GOOD) :GOOD)
;; Loading (DEFTEST MISC.62 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (IF (AND (IF A T NIL) NIL) A (MIN (BLOCK B5 -1) A))))) 100) -1)
;; Loading (DEFTEST MISC.63 (LET* ((FORM (QUOTE (FLET ((%F12 NIL (SETQ C -9868204937))) (IF (<= C (%F12)) -2 (IF (= C C) B C))))) (FORM1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -80421740610 1395590616) C)) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FORM2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (-696742851945 686256271)))) (EQLT (APPLY (COMPILE NIL FORM1) VALS) (APPLY (COMPILE NIL FORM2) VALS))) T)
;; Loading (DEFTEST MISC.64 (LET* ((FORM (QUOTE (LOGCOUNT (IF (NOT (> C (LET ((V7 (SETQ C -246180))) -1))) (LDB (BYTE 24 11) C) C)))) (FORM1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -256128 207636) C)) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FORM2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (C) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (11292)))) (EQLT (APPLY (COMPILE NIL FORM1) VALS) (APPLY (COMPILE NIL FORM2) VALS))) T)
;; Loading (DEFTEST MISC.65 (LET ((FORM1 (QUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -350684427436 -255912007) B)) (LOGANDC2 C (IF (< B (SETQ B -25647585550)) B 0))))) (FORM2 (QUOTE (LAMBDA (B C) (LOGANDC2 C (IF (< B (SETQ B -25647585550)) B 0))))) (VALS (QUOTE (-297090677547 -20121092)))) (EQLT (APPLY (COMPILE NIL FORM1) VALS) (APPLY (COMPILE NIL FORM2) VALS))) T)
;; Loading (DEFTEST MISC.66 (LET* ((FORM (QUOTE (IF (> A (SETQ A -2198578292)) (MIN B (IF (<= A -14866) A -128363)) A))) (FORM1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -3709231882 0) A)) (DECLARE (TYPE (INTEGER -562051054 -1) B)) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FORM2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (-2095414787 -256985442)))) (EQLT (APPLY (COMPILE NIL FORM1) VALS) (APPLY (COMPILE NIL FORM2) VALS))) T)
;; Loading (DEFTEST MISC.67 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (INTEGER 10604862 10604862) X) (OPTIMIZE SPEED)) (* X 390)))) 10604862) 4135896180)
;; Loading (DEFTEST MISC.68 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (FLET ((%F8 NIL (REM B (IDENTITY (RETURN-FROM %F8 0))))) (LOGNOR (%F8) 0))))) 0) -1)
;; Loading (DEFTEST MISC.69 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (FLET ((%F11 NIL (LOGORC2 (BLOCK B1 (LET NIL (RETURN-FROM B1 B))) -1984))) B)))) 0) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.70 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER 46156191457 126998564334) C)) (TRUNCATE C (MIN -16 186196583))))) 87723029763) -5482689360 3)
;; Loading (DEFTEST MISC.71 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (BLOCK B8 (IF (IDENTITY (RETURN-FROM B8 30)) 1 (IDENTITY (BLOCK B5 (LABELS ((%F10 NIL (MIN -52 (RETURN-FROM B5 10)))) 20))))))))) 30)
;; Loading (DEFTEST MISC.72 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (FLET ((%F13 NIL (REM 1 (MIN 0 (RETURN-FROM %F13 17))))) (%F13)))))) 17)
;; Loading (DEFTEST MISC.73 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER 46156191457 126998564334) C)) (REM C (MIN -1 0))))) 87723029763) 0)
;; Loading (DEFTEST MISC.74 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 3) (SPEED 0) (DEBUG 0))) (ASH 6916244 (MIN 42 -185236061640)))))) 0)
;; Loading (DEFTEST MISC.75 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (FLET ((%F12 NIL (UNWIND-PROTECT 1))) 0))))) 0)
;; Loading (DEFTEST MISC.76 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (IF NIL (UNWIND-PROTECT (MAX 521739 (UNWIND-PROTECT C))) (LOGANDC2 3942 A))))) 0 0) 3942)
;; Loading (DEFTEST MISC.77 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (MOD 0 -53))))) 0)
;; Loading (DEFTEST MISC.78 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 0) (DEBUG 0))) (LET ((V4 (CASE 227 ((-11113 -106126) (UNWIND-PROTECT 8473)) (T 43916)))) -12))))) -12)
;; Loading (DEFTEST MISC.79 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((V4 (CASE 227 ((-11113 -106126) (UNWIND-PROTECT 8473)) (T 43916)))) -12))))) -12)
;; Loading (DEFTEST MISC.79A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 72504 351460) A)) (DECLARE (TYPE (INTEGER 2383 108330) B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 1))) (IF (OR (OR (/= B 0) (LOGBITP 0 0)) (LOGBITP 0 A)) 0 (FUNCALL (CONSTANTLY 0) B 0 (CATCH (QUOTE CT4) B)))))) 132318 12238) 0)
;; Loading (DEFTEST MISC.80 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (DECLARE (NOTINLINE > LOGIOR IMAGPART)) (DECLARE (OPTIMIZE (SPEED 0) (DEBUG 0))) (LABELS ((%F16 NIL (IMAGPART (BLOCK B3 (LOGEQV (LOGIOR -122516 (IF (> -1 0) (RETURN-FROM B3 C) B)) (RETURN-FROM %F16 32186310)))))) (LOGNOR (%F16) B))))) -123886 -1656) 57385)
;; Loading (DEFTEST MISC.81 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (BLOCK B7 (LET ((V3 (RETURN-FROM B7 B))) (UNWIND-PROTECT B)))))) 17) 17)
;; Loading (DEFTEST MISC.82 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (LABELS ((%F15 NIL (* (UNWIND-PROTECT C) (MAX -5726369 (RETURN-FROM %F15 3099206))))) C)))) 0) 0)
;; Loading (DEFTEST MISC.83 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (FLET ((%F8 NIL (MIN C (MIN A (RETURN-FROM %F8 C))))) C)))) 0 -10) -10)
;; Loading (DEFTEST MISC.84 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (FLET ((%F18 NIL (LET NIL (LET NIL (IF (LDB-TEST (BYTE 20 23) B) A (RETURN-FROM %F18 431)))))) -674)))) 0 0) -674)
;; Loading (DEFTEST MISC.85 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (LABELS ((%F14 NIL (LET NIL (LOGANDC1 (MIN -32 (RETURN-FROM %F14 -69793)) C)))) 156)))) 0) 156)
;; Loading (DEFTEST MISC.86 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (FLET ((%F10 NIL :BAD)) (LET ((V7 (LET ((V2 (%F10))) B))) (UNWIND-PROTECT B)))))) :GOOD) :GOOD)
;; Loading (DEFTEST MISC.87 (APPLY (COMPILE NIL (QUOTE (LAMBDA (A B C) (LET ((V9 A)) (LET ((V2 (SETQ V9 C))) (UNWIND-PROTECT C)))))) (QUOTE (X Y Z))) Z)
;; Loading (DEFTEST MISC.88 (EVAL (QUOTE (BLOCK B3 (MAX (RETURN-FROM B3 1) (IF (UNWIND-PROTECT (UNWIND-PROTECT 2)) 3 4))))) 1)
;; Loading (DEFTEST MISC.89 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER 0 130304) C)) (- (REM -26 (MAX 25 (LOAD-TIME-VALUE 505849129))) (* -15718867961526428520296254978781964 C))))) 0) -26)
;; Loading (DEFTEST MISC.89A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D) (DECLARE (TYPE (INTEGER -265115792172 -206231862770) A)) (DECLARE (TYPE (INTEGER 11069 58322510034) B)) (DECLARE (TYPE (INTEGER -7351 28730) C)) (DECLARE (TYPE (INTEGER -913299295156 3670905260104) D)) (DECLARE (IGNORABLE A B C D)) (DECLARE (OPTIMIZE (SAFETY 1) (SPACE 1) (COMPILATION-SPEED 2) (DEBUG 0) (SPEED 2))) (- (SIGNUM (CATCH (QUOTE CT6) 0)) (NUMERATOR (* -1303 D -20527703 D C)))))) -261283766805 41605749408 5110 1269102278886) -220139978315039892599545286437019126040)
;; Loading (DEFTEST MISC.89B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D) (DECLARE (TYPE (INTEGER -481454219025 239286093202) A)) (DECLARE (TYPE (INTEGER -1121405368785 213522) B)) (DECLARE (TYPE (INTEGER -103720347879 -241) C)) (DECLARE (TYPE (INTEGER -12830115357 3027711346) D)) (DECLARE (IGNORABLE A B C D)) (DECLARE (OPTIMIZE (SPEED 2) (COMPILATION-SPEED 1) (SPACE 1) (SAFETY 3) (DEBUG 2))) (FLOOR (LOAD-TIME-VALUE 0) (MIN -18 (* A C B -12626)))))) -78545446876 -460518205737 -38885914099 1598305189) 0 0)
;; Loading (DEFTEST MISC.90 (LET* ((FORM (QUOTE (- 0 (IGNORE-ERRORS 20763) (LOGXOR B 1 C -7672794) B))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -148895 -46982) B)) (DECLARE (TYPE (INTEGER 0 1) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (SYSTEM.INTERNALS::BQ-COMMA FORM))))) (LET ((V1 (FUNCALL (COMPILE NIL FN1) -76071 0)) (V2 (FUNCALL (COMPILE NIL FN2) -76071 0)) (V3 (FUNCALL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA FN2)))) -76071 0))) (IF (= V1 V2 V3) :GOOD (LIST V1 V2 V3)))) :GOOD)
;; Loading (DEFTEST MISC.91 (LET ((FN1 (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1))) (ASH -10 (MIN 8 -481))))) (FN2 (QUOTE (LAMBDA NIL (ASH -10 (MIN 8 -481)))))) (LET ((V1 (FUNCALL (COMPILE NIL FN1))) (V2 (FUNCALL (COMPILE NIL FN2))) (V3 (FUNCALL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA FN2))))))) (IF (= V1 V2 V3) :GOOD (LIST V1 V2 V3)))) :GOOD)
;; Loading (DEFTEST MISC.92 (LET* ((FORM (QUOTE (- -16179207 B (LOGNOR (LET NIL 3) (LOGXOR -17567197 C))))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -621 30) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (26291532469 -21)))) (LET ((V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS)) (V3 (APPLY (EVAL (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SYSTEM.INTERNALS::BQ-COMMA FN2)))) VALS))) (IF (= V1 V2 V3) :GOOD (LIST V1 V2 V3)))) :GOOD)
;; Loading (DEFTEST MISC.93 (LET* ((FORM (QUOTE (ASH (1+ (FLET ((%F5 (F5-1) C)) C)) (MIN 69 (LOGXOR A B))))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -128 -109) A) (TYPE (INTEGER -2 -1) B) (OPTIMIZE (SPEED 3) (SAFETY 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (-123 -1 2590941967601)))) (EQLT (APPLY (COMPILE NIL FN1) VALS) (APPLY (COMPILE NIL FN2) VALS))) T)
;; Loading (DEFTEST MISC.94 (NOT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (<= 268435280 (LOAD-TIME-VALUE 39763134374436777607194165739302560271120000))))))) NIL)
;; Loading (DEFTEST MISC.95 (LET* ((FORM (QUOTE (+ 272 C (IF (< B A) -49618 -29042) B))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -1585918 601848636) A)) (DECLARE (TYPE (INTEGER -4 16544323) B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (601739317 10891850 17452477960)))) (LET ((V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2)))) :GOOD)
;; Loading (DEFTEST MISC.96 (LET* ((FORM (QUOTE (MAX 26 (CEILING B (MIN -8 (MAX -1 C)))))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER 482134 96074347505) B)) (DECLARE (TYPE (INTEGER -4036 -50) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (90244278480 -338)))) (LET ((V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2)))) :GOOD)
;; Loading (DEFTEST MISC.97 (LET* ((FORM (QUOTE (- 349708 (GCD C 0) (LOGAND B B (IF (> -8543459 C) 83328 1073))))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER 301653 329907) B)) (DECLARE (TYPE (INTEGER 171971491 1073721279) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B C) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (321769 1073671227)))) (LET ((V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2)))) :GOOD)
;; Loading (DEFTEST MISC.98 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (INTEGER -1000000 1000000) X)) (LOGAND X X 0)))) 12345) 0)
;; Loading (DEFTEST MISC.99 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 4303063 101130078) A)) (MASK-FIELD (BYTE 18 2) (ASH A 77))))) 57132532) 0)
;; Loading (DEFTEST MISC.100 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -3924 1001809828) C)) (DECLARE (OPTIMIZE (SPEED 3))) (MIN 47 (IF (LDB-TEST (BYTE 2 14) C) -570344431 (IGNORE-ERRORS -732893970)))))) 705347625) -570344431)
;; Loading (DEFTEST MISC.101 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (DECLARE (TYPE (INTEGER 185501219873 303014665162) A)) (DECLARE (TYPE (INTEGER -160758 255724) C)) (DECLARE (OPTIMIZE (SPEED 3))) (LET ((V8 (- -554046873252388011622614991634432 (IGNORE-ERRORS C) (UNWIND-PROTECT 2791485)))) (MAX (IGNORE-ERRORS A) (LET ((V6 (- V8 (RESTART-CASE 980)))) (MIN V8 V6))))))) 259448422916 173715) 259448422916)
;; Loading (DEFTEST MISC.102 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -1598566306 2941) B)) (DECLARE (OPTIMIZE (SPEED 3))) (MAX -148949 (IGNORE-ERRORS B))))) 0) 0)
;; Loading (DEFTEST MISC.103 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (MIN -80 (ABS (IGNORE-ERRORS (+ (LOGEQV B (BLOCK B6 (RETURN-FROM B6 (LOAD-TIME-VALUE -6876935)))) (IF (LOGBITP 1 A) B (SETQ A -1522022182249))))))))) -1802767029877 -12374959963) -80)
;; Loading (DEFTEST MISC.104 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 55400028 60748067) A)) (LOGNAND 1505 (ASH A (LET NIL 40)))))) 58194485) -1)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.105 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -4 -3) C)) (BLOCK B7 (FLET ((%F1 (F1-1 F1-2 F1-3) (IF (LOGBITP 0 (RETURN-FROM B7 (- -815145138 F1-2))) (RETURN-FROM B7 -2611670) 99345))) (LET ((V2 (%F1 -2464 (%F1 -1146 C C) -2))) B)))))) 2950453607 -4) -815145134)
;; Loading (DEFTEST MISC.106 (PROGN (EVAL (QUOTE (DEFUN MISC.106-FN (A B C) (DECLARE (OPTIMIZE SPEED)) (BLOCK B6 (FLET ((%F8 (F8-1 F8-2) B)) (%F8 (%F8 C 338) (IF T (RETURN-FROM B6 A) C))))))) (MISC.106-FN -30271 -1 -3043)) -30271)
;; Loading (DEFTEST MISC.107 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -29742055786 23602182204) B)) (DECLARE (TYPE (INTEGER -7409 -2075) C)) (DECLARE (OPTIMIZE (SPEED 3))) (FLOOR (LABELS ((%F2 NIL (BLOCK B6 (IGNORE-ERRORS (RETURN-FROM B6 (IF (= C 8) B 82674)))))) (%F2)))))) 22992834060 -5833) 82674 0)
;; Loading (DEFTEST MISC.107A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 0))) (FLET ((%F14 (F14-1 &OPTIONAL (F14-2 (RATIONALIZE (CATCH (QUOTE CT4) 0))) (F14-3 0) (F14-4 0)) (DOTIMES (IV2 0 0) (PROGN F14-2)))) (APPLY (FUNCTION %F14) 0 0 0 NIL)))))) 0)
;; Loading (DEFTEST MISC.107B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 7215 1030625885) A)) (DECLARE (TYPE (INTEGER -4361 -6) B)) (DECLARE (TYPE (INTEGER -3798210806 -898) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 1))) (BLOCK B4 (LET ((*S7* (CONS C 0))) (DECLARE (SPECIAL *S7*)) (RETURN-FROM B4 (PROG1 0 (THE INTEGER (INTEGER-LENGTH (1+ (LET NIL (GCD (CDR *S7*) (CASE B ((31 38 20 0 5 45) 2) ((34 35 64 61 47) 39) ((58) A) (T 131788)))))))))))))) 734649164 -3343 -2306504518) 0)
;; Loading (DEFTEST MISC.107C (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 0))) (LET* ((*S6* (UNWIND-PROTECT 0 (THE INTEGER (ASH 2914825 (MIN 8 C)))))) (DECLARE (SPECIAL *S6*)) 0)))) -105) 0)
;; Loading (DEFTEST MISC.107D (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 1))) (CATCH (QUOTE CT4) (LOGORC1 (THE INTEGER (CASE (DOTIMES (IV2 2 2) (PROGN 203)) ((-51) -59598) ((-31 -150) A) (T B))) (THROW (QUOTE CT4) 0)))))) 10 20) 0)
;; Loading (DEFTEST MISC.107E (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 1))) (FLET ((%F11 (&KEY (KEY1 (THE INTEGER (- A 245241933)))) 0)) (%F11))))) 1) 0)
;; Loading (DEFTEST MISC.108 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (BLOCK B7 (- B (IGNORE-ERRORS (RETURN-FROM B7 57876))))))) 10) 57876)
;; Loading (DEFTEST MISC.109 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LOAD-TIME-VALUE (BLOCK B4 (* (RETURN-FROM B4 -27) (BLOCK B5 (RETURN-FROM B4 (RETURN-FROM B5 (IGNORE-ERRORS (UNWIND-PROTECT (RETURN-FROM B5 0))))))))))))) -27)
;; Loading (DEFTEST MISC.110 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -1441970837 -427) C)) (DECLARE (OPTIMIZE (SPEED 3))) (BLOCK B7 (ABS (MIN C (IGNORE-ERRORS (RETURN-FROM B7 C)))))))) -500) -500)
;; Loading (DEFTEST MISC.110A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F) (DECLARE (TYPE (INTEGER -1294746569 1640996137) A)) (DECLARE (TYPE (INTEGER 33628514900 90005963619) B)) (DECLARE (TYPE (INTEGER -807801310 3) C)) (DECLARE (TYPE (INTEGER 36607 121946) D)) (DECLARE (TYPE (INTEGER -6669690514043 -1776180885905) E)) (DECLARE (TYPE (INTEGER -1472 1979) F)) (DECLARE (IGNORABLE A B C D E F)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 3))) (CATCH (QUOTE CT7) (IF (LOGBITP 0 (IF (/= 0 A) C (IGNORE-ERRORS (PROGN (IF (LDB-TEST (BYTE 0 0) (RATIONAL (THROW (QUOTE CT7) 0))) 0 0) 0)))) 0 0))))) 391833530 36648101240 -32785211 91893 -4124561581760 1358) 0)
;; Loading (DEFTEST MISC.111 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (IF (OR (LDB-TEST (BYTE 12 18) A) (NOT (AND T (NOT (IF (NOT (AND C T)) NIL NIL))))) 170 -110730)))) 3035465333 1919088834) 170)
;; Loading (DEFTEST MISC.112 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -944 -472) A)) (DECLARE (OPTIMIZE (SPEED 3))) (ROUND (BLOCK B3 (RETURN-FROM B3 (IF (= 55957 A) -117 (IGNORE-ERRORS (RETURN-FROM B3 A))))))))) -589) -589 0)
;; Loading (DEFTEST MISC.113 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (IF (OR (LDB-TEST (BYTE 8 10) B) T) C (MIN (IF (<= -6467 C) C 6) (FLET ((%F3 (F3-1 F3-2) F3-1)) (MULTIPLE-VALUE-CALL (FUNCTION %F3) (VALUES B 107)))))))) -238 -23658556) -23658556)
;; Loading (DEFTEST MISC.114 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (UNWIND-PROTECT (BLOCK B2 (FLET ((%F1 NIL B)) (LOGIOR (IF A (IF (LDB-TEST (BYTE 23 1) 253966182) (RETURN-FROM B2 A) -103275090) 62410) (IF (NOT (NOT (IF (NOT NIL) T (LDB-TEST (BYTE 2 27) 253671809)))) (RETURN-FROM B2 -22) (%F1))))))))) 777595384624 -1510893868) 777595384624)
;; Loading (DEFTEST MISC.115 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 0 1000) A B C)) (IF (AND (IF B (NOT (AND (NOT (OR A T)) NIL)) NIL) (LOGBITP 6 C)) C B)))) 0 100 600) 600)
;; Loading (DEFTEST MISC.116 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (DECLARE (TYPE (INTEGER 0 1000) A C)) (IF (IF (AND (NOT (AND (NOT (OR A T)) NIL)) T) C NIL) 91 -1725615)))) 0 0) 91)
;; Loading (DEFTEST MISC.117 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (DECLARE (TYPE (INTEGER 0 1000) A C)) (IF (OR C (NOT (OR NIL (NOT (AND (NOT (OR A T)) NIL))))) 373146181 115)))) 0 0) 373146181)
;; Loading (DEFTEST MISC.118 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 0 10000) A)) (IF (OR (OR NIL (NOT (OR (NOT (OR A NIL)) T))) A) A 9376)))) 0) 0)
;; Loading (DEFTEST MISC.119 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (IF (AND (IF (1+ 0) NIL (NOT (AND (NOT (AND (<= 3) NIL)) NIL))) (IF (= -31) -20 -2371)) 1493 39720))))) 39720)
;; Loading (DEFTEST MISC.120 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER 377036 4184626) C)) (IF (OR (AND T (NOT (AND (NOT (AND C NIL)) NIL))) NIL) 3470653 C)))) 1000000) 3470653)
;; Loading (DEFTEST MISC.121 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (IF (AND (AND -92220 (NOT (AND (NOT (OR C NIL)) NIL))) A) B B)))) 2000000 150000 -1) 150000)
;; Loading (DEFTEST MISC.122 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 2872749 5754655) A)) (DECLARE (TYPE (INTEGER 24114340 89504792) B)) (DECLARE (TYPE (INTEGER 506491 1412971) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (- (LET ((V7 (IGNORE-ERRORS A))) -6) (LOGAND (IF C -13936 C) (BLOCK B3 (IF (IF (OR T B) (NOT NIL) C) (RETURN-FROM B3 -3114) (IGNORE-ERRORS 7)))))))) 3000000 30000000 600000) 15978)
;; Loading (DEFTEST MISC.123 (LET* ((FN1 (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SAFETY 1))) (LABELS ((%F7 (F7-1 F7-2) (LET ((V2 (SETQ B 723149855))) 25620))) (MAX B (MULTIPLE-VALUE-CALL (FUNCTION %F7) (VALUES B 2))))))) (FN2 (QUOTE (LAMBDA (B) (LABELS ((%F7 (F7-1 F7-2) (LET ((V2 (SETQ B 723149855))) 25620))) (MAX B (MULTIPLE-VALUE-CALL (FUNCTION %F7) (VALUES B 2))))))) (VALS (QUOTE (1439719153))) (V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2))) :GOOD)
;; Loading (DEFTEST MISC.124 (LET* ((FN1 (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SAFETY 1))) (LABELS ((%F7 (F7-1 F7-2) (LET ((V2 (SETQ B 723149855))) 25620))) (MAX B (FUNCALL (FUNCTION %F7) B 2)))))) (FN2 (QUOTE (LAMBDA (B) (LABELS ((%F7 (F7-1 F7-2) (LET ((V2 (SETQ B 723149855))) 25620))) (MAX B (FUNCALL (FUNCTION %F7) B 2)))))) (VALS (QUOTE (1439719153))) (V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2))) :GOOD)
;; Loading (DEFTEST MISC.125 (LET* ((FN1 (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SAFETY 1))) (LABELS ((%F7 (F7-1 F7-2) (LET ((V2 (SETQ B 723149855))) 25620))) (MAX B (%F7 B 2)))))) (FN2 (QUOTE (LAMBDA (B) (LABELS ((%F7 (F7-1 F7-2) (LET ((V2 (SETQ B 723149855))) 25620))) (MAX B (%F7 B 2)))))) (VALS (QUOTE (1439719153))) (V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2))) :GOOD)
;; Loading (DEFTEST MISC.126 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (SPECIAL *SHOULD-ALWAYS-BE-TRUE*)) (LABELS ((%F10 (F10-1 &OPTIONAL (F10-2 (COMMON-LISP:HANDLER-BIND NIL (IF *SHOULD-ALWAYS-BE-TRUE* (PROGN 878) (SHOULD-NEVER-BE-CALLED)))) (F10-3 (COMMON-LISP:HANDLER-CASE 10))) -15)) (%F10 -144)))))) -15)
;; Loading (DEFTEST MISC.127 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (FLET ((%F10 (F10-1 F10-2) 10)) (FLET ((%F4 (&OPTIONAL (F4-1 (LDB (BYTE 10 6) (* 828 (+ 30 (DPB C (BYTE 9 30) (%F10 1918433 34107)))))) (F4-2 (SETQ A 0))) 2)) (%F4 -5)))))) 0 0) 2)
;; Loading (DEFTEST MISC.128 (FLET ((%F14 (F14-1 F14-2 &OPTIONAL (F14-3 (UNWIND-PROTECT 13059412)) (F14-4 452384) (F14-5 -6714)) -1)) (%F14 -2 1 1279896 589726354 -11)) -1)
;; Loading (DEFTEST MISC.129 (LABELS ((%F17 (F17-1 F17-2 &OPTIONAL (F17-3 (UNWIND-PROTECT 178))) 483633925)) -661328075) -661328075)
;; Loading (DEFTEST MISC.130 (LET* ((FN1 (QUOTE (LAMBDA (A C) (FLET ((%F10 (&OPTIONAL (F10-1 -6489) (F10-2 (+ C))) A)) (MULTIPLE-VALUE-CALL (FUNCTION %F10) (VALUES -178858 A)))))) (FN2 (QUOTE (LAMBDA (A C) (DECLARE (NOTINLINE VALUES +) (OPTIMIZE (SPEED 0) (DEBUG 0))) (FLET ((%F10 (&OPTIONAL (F10-1 -6489) (F10-2 (+ C))) A)) (MULTIPLE-VALUE-CALL (FUNCTION %F10) (VALUES -178858 A)))))) (VALS (QUOTE (-13649921 -1813684177409))) (V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2))) :GOOD)
;; Loading (DEFTEST MISC.131 (LET* ((FN1 (QUOTE (LAMBDA (A B) (MAX (BLOCK B7 (ABS (IGNORE-ERRORS (IF (LDB-TEST (BYTE 33 15) (RETURN-FROM B7 A)) B B)))))))) (FN2 (QUOTE (LAMBDA (A B) (DECLARE (NOTINLINE ABS MAX)) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (MAX (BLOCK B7 (ABS (IGNORE-ERRORS (IF (LDB-TEST (BYTE 33 15) (RETURN-FROM B7 A)) B B)))))))) (VALS (QUOTE (-823894140303 -3))) (V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2))) :GOOD)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.132 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -3358662 7782429) B)) (DECLARE (TYPE (INTEGER -513018 12740) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (LABELS ((%F9 (&OPTIONAL (F9-1 (LABELS ((%F5 (F5-1 F5-2) (FLOOR (IGNORE-ERRORS F5-1) (MIN -67 (IF (EQUAL -56 C) -11197265 F5-2))))) C)) (F9-2 -439518) (F9-3 -2840573)) F9-1)) (%F9 -193644 B 1368))))) 10 20) -193644)
;; Loading (DEFTEST MISC.132A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 0))) (LABELS ((%F1 NIL 0)) (IF T 0 (DOTIMES (IV1 5 (IF (%F1) 0 0)) (CATCH (QUOTE CT1) 0)))))))) 0)
;; Loading (DEFTEST MISC.133 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE VALUES)) (DECLARE (OPTIMIZE (SPEED 0) (DEBUG 0))) (FLET ((%F15 (&OPTIONAL (F15-5 C)) F15-5)) (MULTIPLE-VALUE-CALL (FUNCTION %F15) (VALUES -2688612)))))) 1 2 3) -2688612)
;; Loading (DEFTEST MISC.134 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (LABELS ((%F5 (F5-1 F5-2 F5-3 &OPTIONAL (F5-4 0) (F5-5 (FLET ((%F13 (F13-1) (RETURN-FROM %F13 B))) B))) 900654472)) 183301)))) 13775799184) 183301)
;; Loading (DEFTEST MISC.135 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (LABELS ((%F4 (&OPTIONAL (F4-1 (LABELS ((%F17 NIL A)) B))) -14806404)) 190134)))) 1783745644 268410629) 190134)
;; Loading (DEFTEST MISC.136 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (FLET ((%F17 (&OPTIONAL (F17-1 (FLET ((%F9 NIL C)) 73574919))) 643)) 1039017546)))) 0) 1039017546)
;; Loading (DEFTEST MISC.137 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (FLET ((%F16 (&OPTIONAL (F16-2 (LOGNOR -3897747 (IF NIL -1 -127228378)))) 10)) 20))))) 20)
;; Loading (DEFTEST MISC.138 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER 2996 39280) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (IF (ZEROP (LABELS ((%F8 (&OPTIONAL (F8-2 (LOGORC2 C -161957))) 2176)) 3)) C C)))) 3000) 3000)
;; Loading (DEFTEST MISC.139 (LET* ((FN1 (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 3))) (LOGIOR (LABELS ((%F1 (F1-1 &OPTIONAL (F1-2 (SETQ C 7))) F1-1)) (%F1 774 3616592)) C)))) (FN2 (QUOTE (LAMBDA (C) (LOGIOR (LABELS ((%F1 (F1-1 &OPTIONAL (F1-2 (SETQ C 7))) F1-1)) (%F1 774 3616592)) C)))) (VALS (QUOTE (-3))) (V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2))) :GOOD)
;; Loading (DEFTEST MISC.140 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (LDB (BYTE 24 20) (LABELS ((%F12 (&OPTIONAL (F12-1 149) (F12-2 -3894159)) 34068)) (LET* ((V4 (%F12))) A)))))) -1) 16777215)
;; Loading (DEFTEST MISC.141 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LABELS ((%F11 (&OPTIONAL (F11-3 (RESTART-CASE 0))) F11-3)) (%F11 1)))))) 1)
;; Loading (DEFTEST MISC.142 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LABELS ((%F15 (&OPTIONAL (F15-3 (BLOCK B1 (+ 1 (RETURN-FROM B1 -10))))) F15-3)) (%F15)))))) -10)
;; Loading (DEFTEST MISC.143 (BLOCK B2 (MAX (RETURN-FROM B2 1) (LET ((V3 (UNWIND-PROTECT (LET* ((V1 (IGNORE-ERRORS -254))) 1)))) -2))) 1)
;; Loading (DEFTEST MISC.144 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 9739325 14941321) C)) (LABELS ((%F7 (F7-1 F7-2 F7-3 &OPTIONAL (F7-4 B)) (RETURN-FROM %F7 F7-4))) (IF (= -76482 C) (IF (>= C 10986082) (%F7 A B (%F7 -8088 C -147106 2)) -10502) (%F7 509252 B B)))))) -200 17 10000000) 17)
;; Loading (DEFTEST MISC.145 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SAFETY 3))) (BLOCK B5 (RETURN-FROM B5 (LOGIOR (IF (OR C T) B (LOAD-TIME-VALUE -61)) (RETURN-FROM B5 -3))))))) 1 2 3) -3)
;; Loading (DEFTEST MISC.146 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 3))) (FLET ((%F14 (&OPTIONAL (F14-1 301917227) (F14-2 (SETQ B 995196571))) F14-1)) (%F14 B (BLOCK B3 (%F14 -64))))))) 10) 10)
;; Loading (DEFTEST MISC.147 (FLET ((%F11 NIL (IF NIL (IGNORE-ERRORS -19884254) (UNWIND-PROTECT -2)))) :GOOD) :GOOD)
;; Loading (DEFTEST MISC.148 (BLOCK B2 (LOGIOR (RETURN-FROM B2 484) (RESTART-CASE (IGNORE-ERRORS 1737021)))) 484)
;; Loading (DEFTEST MISC.149 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (BLOCK B1 (- (LOGAND 0 -34 1026491) (IGNORE-ERRORS (RETURN-FROM B1 B))))))) 0) 0)
;; Loading (DEFTEST MISC.149A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (BLOCK B1 (- A (IGNORE-ERRORS (RETURN-FROM B1 1))))))) 0) 1)
;; Loading (DEFTEST MISC.150 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (FLET ((%F17 (&OPTIONAL (F17-4 (LABELS ((%F13 (F13-1 &OPTIONAL (F13-2 (MULTIPLE-VALUE-PROG1 B))) -4)) (%F13 B (%F13 190))))) -157596)) (LABELS ((%F6 NIL (%F17))) C))))) 10 20 30000) 30000)
;; Loading (DEFTEST MISC.150A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 2))) (CATCH (QUOTE CT6) (APPLY (CONSTANTLY 0) (LIST))))))) 0)
;; Loading (DEFTEST MISC.150B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE INTEGER A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 3))) (IF (= A 0) 0 (TRUNCATE A))))) 0) 0)
;; Loading (DEFTEST MISC.150C (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 3))) (LABELS ((%F4 (F4-1) 0)) (LABELS ((%F15 (F15-1 F15-2 &OPTIONAL (F15-3 (APPLY (FUNCTION %F4) 0 NIL)) (F15-4 0) (F15-5 (%F4 (%F4 (IF (/= 0 0) A 0))))) 0)) (LABELS ((%F13 (F13-1) (%F15 B 0 0 0))) 0)))))) 1 2) 0)
;; Loading (DEFTEST MISC.150D (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 4146834609223 16403344221223) A)) (DECLARE (TYPE (INTEGER -35470308180 3523580009) B)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 0))) (CATCH (QUOTE CT1) (LOGAND B A 0))))) 4146834609223 10) 0)
;; Loading (DEFTEST MISC.151 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -249 97) B)) (DECLARE (TYPE (INTEGER 3565969 6559088) C)) (LET* ((V7 (IF (NOT (= 1030 4)) C (LOGAND (IF (/= B C) B 34945725) (UNWIND-PROTECT -12443701))))) 5520737)))) -24 5657943) 5520737)
;; Loading (DEFTEST MISC.151A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 0))) (CASE 0 ((-12 -9 -12 -2 -5 -2 15) (CATCH (QUOTE CT7) (THROW (QUOTE CT7) 0))) (T 0)))))) 0)
;; Loading (DEFTEST MISC.152 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (BLOCK B5 (LET ((V1 (LET ((V8 (UNWIND-PROTECT 9365))) 8862008))) (* (RETURN-FROM B5 (LABELS ((%F11 (F11-1) F11-1)) (%F11 87246015))) (RETURN-FROM B5 (SETQ V1 (LABELS ((%F6 (F6-1 F6-2 F6-3) V1)) (DPB (UNWIND-PROTECT A) (BYTE 18 13) (LABELS ((%F4 NIL 27322826)) (%F6 -2 -108626545 (%F4))))))))))))) -6) 87246015)
;; Loading (DEFTEST MISC.153 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (IF (LOGBITP 3 (CASE -2 ((-96879 -1035 -57680 -106404 -94516 -125088) (UNWIND-PROTECT 90309179)) ((-20811 -86901 -9368 -98520 -71594) (LET ((V9 (UNWIND-PROTECT 136707))) (BLOCK B3 (SETQ V9 (LET ((V4 (RETURN-FROM B3 V9))) (- (IGNORE-ERRORS (RETURN-FROM B3 V4)))))))) (T -50))) -20343 A)))) 0) -20343)
;; Loading (DEFTEST MISC.154 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (LABELS ((%F8 NIL -39011)) (FLET ((%F4 (F4-1 F4-2 &OPTIONAL (F4-3 (%F8)) (F4-4 B)) (%F8))) (%F4 -260093 -75538 -501684 (LET ((V9 (%F8))) -3))))))) 0) -39011)
;; Loading (DEFTEST MISC.155 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (LABELS ((%F6 (F6-1 F6-2) C)) (MULTIPLE-VALUE-CALL (FUNCTION %F6) (VALUES A C)))))) 0 10 20) 20)
;; Loading (DEFTEST MISC.156 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((V6 (LDB (BYTE 30 1) 1473))) (LET ((V8 V6)) 2395)))))) 2395)
;; Loading (DEFTEST MISC.157 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (LABELS ((%F11 NIL 1)) (FLET ((%F9 (F9-1 F9-2) (CASE 17466182 ((-12) (%F11)) (T C)))) (%F9 -9913 C)))))) 17) 17)
;; Loading (DEFTEST MISC.158 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 79828 2625480458) A)) (DECLARE (TYPE (INTEGER -4363283 8171697) B)) (DECLARE (TYPE (INTEGER -301 0) C)) (IF (EQUAL 6392154 (LOGXOR A B)) 1706 (LET ((V5 (ABS C))) (LOGAND V5 (LOGIOR (LOGANDC2 C V5) (COMMON-LISP:HANDLER-CASE (ASH A (MIN 36 22477)))))))))) 100000 0 0) 0)
;; Loading (DEFTEST MISC.159 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((V8 70696)) (IF (EQUAL V8 -536145083) (LET ((V2 (SETQ V8 V8))) (FLET ((%F9 (F9-1 F9-2) 309257)) (MULTIPLE-VALUE-CALL (FUNCTION %F9) (VALUES V2 V2)))) 100)))))) 100)
;; Loading (DEFTEST MISC.159A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -105680 2104974) A)) (DECLARE (TYPE (INTEGER -1881 -1134) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (BLOCK B5 (LET ((V2 (IF (OR (>= 34 A) 108361696) (RETURN-FROM B5 -1) (LOGNAND B -16023672)))) (FLET ((%F10 (F10-1 &OPTIONAL (F10-2 (IF (EQL -30 V2) V2 -5)) (F10-3 V2) (F10-4 14)) (IF (EQUAL A F10-2) F10-4 380663047))) (FLET ((%F6 (F6-1 F6-2 F6-3) F6-1)) (MULTIPLE-VALUE-CALL (FUNCTION %F6) (VALUES A (%F10 -37243) -47691))))))))) 100 -1200) -1)
;; Loading (DEFTEST MISC.160 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (NOTINLINE + FUNCALL)) (+ (LABELS ((%F1 NIL -14)) (FUNCALL (FUNCTION %F1))) (FLET ((%F2 NIL (FLOOR C))) (FUNCALL (FUNCTION %F2))))))) 0) -14)
;; Loading (DEFTEST MISC.161 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (FLET ((%F17 (F17-1 F17-2 F17-3) (FLET ((%F2 (F2-1 F2-2 &OPTIONAL (F2-3 (RETURN-FROM %F17 F17-1)) (F2-4 (RETURN-FROM %F17 -57))) B)) (MULTIPLE-VALUE-CALL (FUNCTION %F2) (VALUES C -588 55101157))))) (IF NIL (LET* ((V6 (%F17 102136 3096194 A))) B) C))))) -511 -2269809964 250738) 250738)
;; Loading (DEFTEST MISC.161A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 0))) (PROGN (ABS 0) (- A) 0)))) 1) 0)
;; Loading (DEFTEST MISC.162 (LET* ((FN (GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A C) (DECLARE (NOTINLINE FUNCALL) (OPTIMIZE (SPEED 0) (DEBUG 0))) (LABELS ((%F17 (F17-1 &OPTIONAL (F17-4 C)) (RETURN-FROM %F17 (IF F17-4 F17-1 49572640)))) (FUNCALL (FUNCTION %F17) 15128425 A)))))) (FUNCALL (COMPILE NIL FN) 1 3)) 15128425)
;; Loading (DEFTEST MISC.163 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -15716 3947) B)) (CASE B ((-7 -6 -6) :GOOD) ((-5 -6) :BAD))))) -6) :GOOD)
;; Loading (DEFTEST MISC.164 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (LABELS ((%F6 (F6-1 F6-2) (COMMON-LISP:HANDLER-CASE (LABELS ((%F2 NIL (LOGIOR A))) (IF (EQL (%F2) (%F2)) 2829254 -10723)) (ERROR (C) (ERROR C))))) (FUNCALL (FUNCTION %F6) 10 20))))) 0) 2829254)
;; Loading (DEFTEST MISC.165 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (BLOCK B3 (FLET ((%F15 (F15-1 F15-2 F15-3 &OPTIONAL (F15-4 (FLET ((%F17 (F17-1 F17-2 F17-3 &OPTIONAL (F17-4 185155520) (F17-5 C) (F17-6 37)) C)) (%F17 -1046 A 1115306 (%F17 B -146330 422) -337817))) (F15-5 A) (F15-6 -40)) (RETURN-FROM B3 -16))) (MULTIPLE-VALUE-CALL (FUNCTION %F15) (VALUES -519354 A 121 C -1905))))))) 0 0 -5) -16)
;; Loading (DEFTEST MISC.166 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (LABELS ((%F4 (F4-1 F4-2 &OPTIONAL (F4-3 B) (F4-4 C) (F4-5 -170)) (LET ((V2 (FLET ((%F3 (F3-1 &OPTIONAL (F3-2 28476586) (F3-3 C) (F3-4 -9240)) (RETURN-FROM %F4 1))) (MULTIPLE-VALUE-CALL (FUNCTION %F3) (VALUES -479909 19843799 F4-5 -463858))))) B))) C)))) 0 0 -223721124) -223721124)
;; Loading (DEFTEST MISC.167 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (FLET ((%F5 (F5-1 F5-2) (RETURN-FROM %F5 604245664))) (FLET ((%F12 (F12-1 F12-2 &OPTIONAL (F12-3 C) (F12-4 -579456) (F12-5 (LABELS ((%F9 (F9-1 &OPTIONAL (F9-2 (%F5 1 (LET ((V4 (%F5 30732606 A))) B))) (F9-3 -29) (F9-4 (BLOCK B4 (LABELS ((%F14 NIL (LABELS ((%F18 (&OPTIONAL (F18-1 (LOCALLY 592928)) (F18-2 -3) (F18-3 (RETURN-FROM B4 A))) F18-1)) (%F18 74214190 A)))) (%F14))))) -1)) (FLET ((%F17 (F17-1 F17-2 &OPTIONAL (F17-3 -136045032)) -38655)) (%F17 43873 -138030706 -1372492))))) (RETURN-FROM %F12 -15216677))) (%F12 (%F5 B 2329383) A)))))) 1 2 3) -15216677)
;; Loading (DEFTEST MISC.168 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (BLOCK B3 (FLET ((%F11 (F11-1 F11-2 &OPTIONAL (F11-3 (BLOCK B6 (LABELS ((%F11 (F11-1 &OPTIONAL (F11-2 C) (F11-3 (RETURN-FROM B6 -1806))) (RETURN-FROM B3 -28432))) (APPLY (FUNCTION %F11) (LIST -114)))))) (RETURN-FROM %F11 F11-2))) (%F11 B C (LABELS ((%F10 (F10-1 F10-2 &OPTIONAL (F10-3 A) (F10-4 (%F11 -3931 170))) -1704759)) C))))))) 1 2 3) 3)
;; Loading (DEFTEST MISC.169 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (IF T -21705 (FLET ((%F15 (F15-1 F15-2) B)) (BLOCK B4 (%F15 -11112264 (LABELS ((%F2 (F2-1 &OPTIONAL (F2-2 (IF B -5485340 -1534)) (F2-3 -6)) (RETURN-FROM B4 F2-1))) (RETURN-FROM B4 (IF B (%F2 C -320813) (%F2 B A A))))))))))) 1 2 3) -21705)
;; Loading (DEFTEST MISC.170 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (FLET ((%F14 (F14-1 F14-2) (IF (IF (EQL B -7) NIL NIL) (LABELS ((%F10 (F10-1 F10-2 F10-3) 7466)) (RETURN-FROM %F14 (MIN (MULTIPLE-VALUE-CALL (FUNCTION %F10) (VALUES 0 492 F14-1)) (MAX 11 F14-1) (MULTIPLE-VALUE-CALL (FUNCTION %F10) (VALUES 439171 F14-2 0))))) 1))) (LET ((V6 (%F14 (LOGCOUNT B) -386283))) 56211))))) 17) 56211)
;; Loading (DEFTEST MISC.170A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -281 30570) A)) (DECLARE (TYPE (INTEGER -4247786 -199821) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 1))) (FLET ((%F14 (F14-1 F14-2) (COERCE 0 (QUOTE INTEGER)))) (LABELS ((%F3 (F3-1 F3-2 F3-3) (IF (IF (TYPEP (%F14 -864 -10620) (QUOTE (INTEGER -11672107617 -2))) T (TYPEP (IMAGPART (LCM 2120258 0 (LOGANDC2 -6222 -1057382553))) (QUOTE (INTEGER * -113)))) (DOTIMES (IV3 5 (FLET ((%F11 (F11-1 F11-2 F11-3) B)) (MULTIPLE-VALUE-CALL (FUNCTION %F11) (VALUES A A F3-3)))) 0) 0))) (CASE (%F3 A A 0) (T 0))))))) 22087 -1787181) 0)
;; Loading (DEFTEST MISC.171 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (BLOCK B6 (FLET ((%F11 (F11-1 F11-2 &OPTIONAL (F11-3 -2369157) (F11-4 409468)) (RETURN-FROM B6 1))) (BLOCK B2 (FLET ((%F10 (F10-1 F10-2 &OPTIONAL (F10-3 (RETURN-FROM B6 (RETURN-FROM B6 -3)))) -8)) (%F10 (MULTIPLE-VALUE-CALL (FUNCTION %F11) (VALUES -5945959 1654846427 -22)) (RETURN-FROM B2 B) (RETURN-FROM B2 31258361))))))))) 10) 1)
;; Loading (DEFTEST MISC.172 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE LIST APPLY)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (LABELS ((%F12 (F12-1 F12-2) (LABELS ((%F2 (F2-1 F2-2) (FLET ((%F6 NIL (FLET ((%F18 (F18-1 &OPTIONAL (F18-2 A) (F18-3 -207465075) (F18-4 A)) (RETURN-FROM %F12 B))) (%F18 -3489553 -7 (%F18 (%F18 150 -64 F12-1) (%F18 (%F18 -8531) 11410) B) 56362666)))) (LABELS ((%F7 (F7-1 F7-2 &OPTIONAL (F7-3 (%F6))) 7767415)) F12-1)))) (%F2 B -36582571)))) (APPLY (FUNCTION %F12) (LIST 774 -4413)))))) 0 1 2) 774)
;; Loading (DEFTEST MISC.173 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE VALUES)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (FLET ((%F11 (F11-1 F11-2 &OPTIONAL (F11-3 C) (F11-4 7947114) (F11-5 (FLET ((%F3 (F3-1 &OPTIONAL (F3-2 B) (F3-3 5529)) 8134)) (MULTIPLE-VALUE-CALL (FUNCTION %F3) (VALUES (%F3 -30637724 B) C))))) (SETQ C 555910))) (IF (AND NIL (%F11 A A)) (IF (%F11 A 421778 4030 1) (LABELS ((%F7 (F7-1 F7-2 &OPTIONAL (F7-3 (%F11 -79192293 (%F11 C A C -4 214720) B B (%F11 B 985))) (F7-4 A)) B)) (%F11 C B -25644)) 54) -32326608))))) 1 2 3) -32326608)
;; Loading (DEFTEST MISC.174 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 10292971433 14459537906) B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (IF (AND (AND (/= -51885 B) NIL) (CASE (1+ B) ((4 4 3 -4) (LET* ((V1 (FLET ((%F16 (F16-1) -1858366)) (APPLY (FUNCTION %F16) B (LIST))))) -1602321)) (T 3))) 19 C)))) 0 11000000000 0) 0)
;; Loading (DEFTEST MISC.174A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 23 365478242977) A)) (DECLARE (TYPE (INTEGER -38847 268231) B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (IF (NOT (IF (/= B 7) T (NOT (NOT A)))) (CASE (SETQ B -5880) ((8382 3401 2058 39167 62228) (FLET ((%F7 (F7-1 F7-2 F7-3) F7-1)) (MULTIPLE-VALUE-CALL (FUNCTION %F7) (VALUES -135629 A -410168200)))) (T A)) 15173)))) 30 0) 15173)
;; Loading (DEFTEST MISC.174B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -8688 2170) A)) (DECLARE (TYPE (INTEGER -9938931470 1964967743) B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (IF (AND (IF (IF (EQUAL B 9) NIL T) NIL (NOT (LOGBITP 5 (LABELS ((%F5 (F5-1 F5-2 F5-3) 4057223)) (LET ((V9 (%F5 -42 -27504 45026809))) 15011))))) (IF (OR A (LABELS ((%F16 (F16-1) 61)) (APPLY (FUNCTION %F16) 275 (LIST)))) A T)) (SETQ A -4803) (REM A (MAX 47 B)))))) 0 0) 0)
;; Loading (DEFTEST MISC.175 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE LIST APPLY VALUES SIGNUM FUNCALL)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (LABELS ((%F4 (F4-1 F4-2 F4-3) (LABELS ((%F1 (F1-1 F1-2 F1-3) 2)) (LABELS ((%F11 (F11-1 &OPTIONAL (F11-2 (RETURN-FROM %F4 (LABELS ((%F8 (F8-1 F8-2 F8-3 &OPTIONAL (F8-4 -35) (F8-5 F4-2)) F4-1)) (FUNCALL (FUNCTION %F8) 53 B F4-1))))) (RETURN-FROM %F4 A))) (SIGNUM (LET ((V4 (FLET ((%F8 (F8-1 F8-2 F8-3 &OPTIONAL (F8-4 B) (F8-5 -560367)) F8-4)) (%F8 -27 35395 C -69)))) (%F11 (MULTIPLE-VALUE-CALL (FUNCTION %F11) (VALUES (%F1 (%F11 B (%F11 V4 F4-3)) F4-3 77936) 1628490976)) (RETURN-FROM %F4 (%F1 -9432 F4-1 F4-1))))))))) (FLET ((%F7 (F7-1 F7-2 F7-3) (%F4 B F7-3 F7-3))) (FLET ((%F14 (F14-1) (APPLY (FUNCTION %F7) -252 -56169265 -7322946 (LIST)))) (%F14 A))))))) -70313091 577425217 28052774417) -70313091)
;; Loading (DEFTEST MISC.175A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (NOTINLINE VALUES LIST APPLY LOGIOR)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (IF NIL (LOGIOR (FLET ((%F5 (F5-1) B)) (%F5 56288)) (FLET ((%F17 (F17-1 F17-2 &OPTIONAL (F17-3 (LET NIL 6857)) (F17-4 (LABELS ((%F3 (F3-1 F3-2 F3-3 &OPTIONAL (F3-4 A) (F3-5 877)) 139)) (APPLY (FUNCTION %F3) (LIST -33052082 B A 1572))))) B)) (MULTIPLE-VALUE-CALL (FUNCTION %F17) (VALUES 31 B A B)))) 392)))) 0 0) 392)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.175B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -1185422977 2286472818) A)) (DECLARE (TYPE (INTEGER -211381289038 74868) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (LOGNOR (UNWIND-PROTECT -1248) (FLET ((%F7 (&OPTIONAL (F7-1 (FLET ((%F1 (F1-1 F1-2 F1-3) 121426)) (%F1 B 2337452 (%F1 61767 B A)))) (F7-2 (BLOCK B8 (LOGANDC1 (LABELS ((%F10 (F10-1 F10-2 F10-3) 323734600)) (%F10 (%F10 323734600 323734600 -10165) -607741 (IGNORE-ERRORS 971588))) (IF (>= B -27) (RETURN-FROM B8 -2) (IGNORE-ERRORS 237138926)))))) F7-2)) (APPLY (FUNCTION %F7) (LIST 761316125 B))))))) 1792769319 -60202244870) 5)
;; Loading (DEFTEST MISC.176 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 162180298 184143783) A)) (DECLARE (TYPE (INTEGER 702599480988 725878356286) B)) (DECLARE (TYPE (INTEGER 168 80719238530) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (BLOCK B6 (FLET ((%F10 (F10-1 F10-2) (LABELS ((%F6 (F6-1 F6-2) F6-1)) (LET ((V2 (FLET ((%F1 (F1-1 F1-2 F1-3) F1-3)) (LET ((V8 (%F1 -11350578 (%F6 10414199 13) -58931837))) -239755)))) 323)))) (LABELS ((%F4 (F4-1 &OPTIONAL (F4-2 204) (F4-3 -1) (F4-4 (FLET ((%F2 (F2-1) (IF T (RETURN-FROM B6 C) A))) (LOGORC2 (MULTIPLE-VALUE-CALL (FUNCTION %F2) (VALUES 1)) (LET* ((V5 (FLOOR (%F2 -1260)))) (CASE (ABS (LOGXOR 185664 A)) ((-2 5975) (IF (OR (< B V5) NIL) (RETURN-FROM B6 (LET ((V10 (%F2 C))) 0)) (MULTIPLE-VALUE-CALL (FUNCTION %F10) (VALUES -3 A)))) (T B))))))) 1503938)) (MULTIPLE-VALUE-CALL (FUNCTION %F4) (VALUES -1 A 1853966)))))))) 173549795 725346738048 993243799) 993243799)
;; Loading (DEFTEST MISC.177 (LET* ((FORM (QUOTE (FLET ((%F11 (F11-1 F11-2) (LABELS ((%F4 NIL (ROUND 200048 (MAX 99 C)))) (LOGAND F11-1 (LABELS ((%F3 (F3-1) -162967612)) (%F3 (LET* ((V8 (%F4))) (SETQ F11-1 (%F4))))))))) (%F11 -120429363 (%F11 62362 B))))) (VARS (QUOTE (A B C))) (VALS (QUOTE (6714367 9645616 -637681868))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (SYSTEM.INTERNALS::BQ-COMMA VARS) (DECLARE (TYPE (INTEGER 804561 7640697) A)) (DECLARE (TYPE (INTEGER -1 10441401) B)) (DECLARE (TYPE (INTEGER -864634669 55189745) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (SYSTEM.INTERNALS::BQ-COMMA VARS) (DECLARE (NOTINLINE LIST APPLY LOGAND MAX ROUND)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (COMPILED-FN1 (COMPILE NIL FN1)) (COMPILED-FN2 (COMPILE NIL FN2)) (RESULTS1 (MULTIPLE-VALUE-LIST (APPLY COMPILED-FN1 VALS))) (RESULTS2 (MULTIPLE-VALUE-LIST (APPLY COMPILED-FN2 VALS)))) (IF (EQUAL RESULTS1 RESULTS2) :GOOD (VALUES RESULTS1 RESULTS2))) :GOOD)
;; Loading (DEFTEST MISC.178 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (LET ((V9 (FLET ((%F9 (F9-1 F9-2 F9-3 &OPTIONAL (F9-4 -40538) (F9-5 (FLET ((%F10 (F10-1 F10-2) (LABELS ((%F11 (F11-1 F11-2) (LABELS ((%F10 (F10-1 F10-2) -1422)) (IF (< B (%F10 (%F10 28262437 95387) F10-2)) -1562 F10-2)))) (LET* ((V6 (%F11 59 B))) (RETURN-FROM %F10 (APPLY (FUNCTION %F11) F10-1 (LIST (RETURN-FROM %F10 2029647)))))))) (APPLY (FUNCTION %F10) -3067 3854883 (LIST))))) 64066)) (%F9 A 2774 0 C)))) (FLET ((%F18 (F18-1 F18-2 &OPTIONAL (F18-3 66) (F18-4 B)) -6939342)) (%F18 1274880 (%F18 B A 46746370 -1))))))) 0 0 0) -6939342)
;; Loading (DEFTEST MISC.179 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 1135 16722) A)) (DECLARE (TYPE (INTEGER -640723637053 -9049) B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (BLOCK B3 (RETURN-FROM B3 (FLET ((%F17 (F17-1 &OPTIONAL (F17-2 B) (F17-3 B)) (+ (IF T (RETURN-FROM B3 -64796) A)))) (CASE (%F17 -3908648 -7026139 A) ((41771 -113272 -48004 -39699 50691 -13222) (MULTIPLE-VALUE-CALL (FUNCTION %F17) (VALUES -1963404294 -105))) (T -7026139)))))))) 2000 -10000) -64796)
;; Loading (DEFTEST MISC.180 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 41 484) A)) (DECLARE (TYPE (INTEGER -2546947 1008697961708) B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (IF (AND (LDB-TEST (BYTE 30 10) B) NIL) (LABELS ((%F7 (F7-1 F7-2 &OPTIONAL (F7-3 -508405733)) 390004056)) (LET* ((V4 (MULTIPLE-VALUE-CALL (FUNCTION %F7) (VALUES B (%F7 B B))))) (MULTIPLE-VALUE-CALL (FUNCTION %F7) (VALUES (%F7 80199 A) (%F7 (%F7 A (LET* ((V6 (%F7 -226 250))) A)) (ABS (CEILING V4))))))) -6001)))) 50 0) -6001)
;; Loading (DEFTEST MISC.181 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -74233251043 -16478648860) A)) (DECLARE (TYPE (INTEGER 0 960962) B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (FLET ((%F14 NIL (IF 1 (RETURN-FROM %F14 A) (LABELS ((%F10 (F10-1 F10-2 F10-3 &OPTIONAL (F10-4 (LET* ((V7 A)) 915))) -1268205049)) (LABELS ((%F18 (F18-1) (MULTIPLE-VALUE-CALL (FUNCTION %F10) (VALUES F18-1 (%F10 (%F10 -1495 (%F10 -384 -84 (%F10 -1 48052 58909027 -35812) -114) (%F10 -391646964 -28131299 F18-1 (%F10 B 368193 A))) (%F10 F18-1 -1415811 F18-1 267932407) 174) -58 320)))) (LET* ((V3 (LET ((V7 (RETURN-FROM %F14 (%F18 -418731)))) (%F10 104871 -1196 -21 A)))) (LABELS ((%F1 NIL (%F18 (%F18 -794761)))) (RETURN-FROM %F14 B)))))))) (IF (%F14) B 887481))))) -51967629256 809047) 809047)
;; Loading (DEFTEST MISC.181A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -982285129 -90) A)) (DECLARE (TYPE (INTEGER 1 82987) B)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (LABELS ((%F1 (F1-1 &OPTIONAL (F1-2 -34) (F1-3 3318057) (F1-4 117)) (LET ((V9 (LET ((V9 (IF T (RETURN-FROM %F1 F1-2) 606042))) F1-1))) (FLET ((%F16 (F16-1 F16-2) 292)) (LABELS ((%F2 (F2-1 F2-2 F2-3 &OPTIONAL (F2-4 F1-3) (F2-5 F1-4) (F2-6 -418207187)) (%F16 2099 (%F16 F1-2 1157)))) (RETURN-FROM %F1 (%F2 F1-4 -12066040 V9 122107))))))) (FLET ((%F5 (F5-1 &OPTIONAL (F5-2 (LABELS ((%F13 (F13-1 F13-2 F13-3 &OPTIONAL (F13-4 A) (F13-5 B)) 1054213657)) (%F13 B 166441 -3))) (F5-3 20102220) (F5-4 (LABELS ((%F11 (F11-1 F11-2 F11-3) (%F1 -110148 (%F1 -12336576 F11-1 -61)))) (LET ((V1 (APPLY (FUNCTION %F11) -29706 A B (LIST)))) A)))) B)) (LABELS ((%F17 (F17-1 F17-2 F17-3 &OPTIONAL (F17-4 -107566292) (F17-5 63) (F17-6 -2)) 105656)) (%F5 (%F17 185703492 A A -511 (%F1 B B -218142 (%F17 -240978 2923208 22 (%F5 1542 68917407 A) B))) -2018 -1))))))) -100 1) 1)
;; Loading (DEFTEST MISC.182 (LET* ((FORM (QUOTE (LABELS ((%F14 (F14-1 F14-2) (LABELS ((%F16 (F16-1 F16-2 &OPTIONAL (F16-3 (SETQ F14-1 (ASH F14-1 (MIN 77 B))))) (LOGANDC2 C -100))) (RETURN-FROM %F14 (* 2 (GCD F14-1 (%F16 C F14-1))))))) (ROUND (%F14 C C) (MAX 83 (%F14 (MULTIPLE-VALUE-CALL (FUNCTION %F14) (VALUES 0 2)) 0)))))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 5628 8762) A)) (DECLARE (TYPE (INTEGER 778 33310188747) B)) (DECLARE (TYPE (INTEGER -6699 4554) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE VALUES MAX ROUND GCD * LOGANDC2 MIN ASH)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (7395 1602862793 -2384))) (CFN1 (COMPILE NIL FN1)) (CFN2 (COMPILE NIL FN2)) (RESULT1 (MULTIPLE-VALUE-LIST (APPLY CFN1 VALS))) (RESULT2 (MULTIPLE-VALUE-LIST (APPLY CFN2 VALS)))) (IF (EQUAL RESULT1 RESULT2) :GOOD (VALUES RESULT1 RESULT2))) :GOOD)
;; Loading (DEFTEST MISC.183 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -368154 377964) A)) (DECLARE (TYPE (INTEGER 5044 14959) B)) (DECLARE (TYPE (INTEGER -184859815 -8066427) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (BLOCK B7 (FLET ((%F3 (F3-1 F3-2 F3-3) 0)) (APPLY (FUNCTION %F3) 0 (CATCH (QUOTE FOO) (RETURN-FROM B7 (%F3 0 B C))) C NIL)))))) 0 6000 -9000000) 0)
;; Loading (DEFTEST MISC.183A (LET NIL (APPLY (FUNCTION LIST) 1 (LIST (CATCH (QUOTE A) (THROW (QUOTE A) (BLOCK B 2)))))) (1 2))
;; Loading (DEFTEST MISC.184 (FUNCALL (COMPILE NILGC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
 (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 867934833 3293695878) A)) (DECLARE (TYPE (INTEGER -82111 1776797) B)) (DECLARE (TYPE (INTEGER -1432413516 54121964) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (IF NIL (FLET ((%F15 (F15-1 &OPTIONAL (F15-2 C)) (LABELS ((%F1 (F1-1 F1-2) 0)) (%F1 A 0)))) (FLET ((%F4 NIL (MULTIPLE-VALUE-CALL (FUNCTION %F15) (VALUES (%F15 C 0) (%F15 0))))) (IF NIL (%F4) (FLET ((%F8 (F8-1 &OPTIONAL (F8-2 (%F4)) (F8-3 0)) F8-3)) 0)))) 0)))) 3040851270 1664281 -1340106197) 0)
;; Loading (DEFTEST MISC.185 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 5 155656586618) A)) (DECLARE (TYPE (INTEGER -15492 196529) B)) (DECLARE (TYPE (INTEGER 7 10) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (FLET ((%F3 (F3-1 F3-2 F3-3 &OPTIONAL (F3-4 A) (F3-5 0) (F3-6 (LABELS ((%F10 (F10-1 F10-2 F10-3) 0)) (APPLY (FUNCTION %F10) 0 A (- (IF (EQUAL A B) B (%F10 C A 0)) (CATCH (QUOTE CT2) (THROW (QUOTE CT2) C))) NIL)))) 0)) (%F3 (%F3 (%F3 B 0 0 0) A 0) A B B B C))))) 5 0 7) 0)
;; Loading (DEFTEST MISC.185A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -1304066 1995764) A)) (DECLARE (TYPE (INTEGER -52262604195 5419515202) B)) (DECLARE (TYPE (INTEGER -13 94521) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (FLET ((%F13 (F13-1 F13-2 F13-3) 0)) (APPLY (FUNCTION %F13) (%F13 B 0 0) (CATCH (QUOTE CT1) 0) (CATCH (QUOTE CT2) (THROW (QUOTE CT2) C)) NIL))))) 0 0 0) 0)
;; Loading (DEFTEST MISC.186 (LET* ((FORM (QUOTE (LABELS ((%F3 (F3-1 F3-2) F3-1)) (APPLY (FUNCTION %F3) B (CATCH (QUOTE CT8) (THROW (QUOTE CT8) (LOGEQV (%F3 C 0)))) NIL)))) (VARS (QUOTE (B C))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (SYSTEM.INTERNALS::BQ-COMMA VARS) (DECLARE (TYPE (INTEGER -2 19) B) (TYPE (INTEGER -1520 218978) C) (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (SYSTEM.INTERNALS::BQ-COMMA VARS) (DECLARE (NOTINLINE LOGEQV APPLY) (OPTIMIZE (SAFETY 3) (SPEED 0) (DEBUG 0))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (CF1 (COMPILE NIL FN1)) (CF2 (COMPILE NIL FN2)) (RESULT1 (MULTIPLE-VALUE-LIST (FUNCALL CF1 2 18886))) (RESULT2 (MULTIPLE-VALUE-LIST (FUNCALL CF2 2 18886)))) (IF (EQUAL RESULT1 RESULT2) :GOOD (VALUES RESULT1 RESULT2))) :GOOD)
;; Loading (DEFTEST MISC.187 (APPLY (EVAL (QUOTE (FUNCTION (LAMBDA (A B C) (DECLARE (NOTINLINE)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (FLET ((%F7 (&OPTIONAL (F7-1 (CATCH (QUOTE CT7) 0)) (F7-2 0)) C)) (LET ((V8 (FLET ((%F14 (F14-1 &OPTIONAL (F14-2 (%F7 B))) 0)) 0))) (%F7 B))))))) (QUOTE (2374299 70496 -6321798384))) -6321798384)
;; Loading (DEFTEST MISC.188 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE FLOOR MIN FUNCALL)) (DECLARE (OPTIMIZE (SAFETY 3) (SPEED 0) (DEBUG 0))) (FLOOR (FLET ((%F10 (F10-1 F10-2) B)) (%F10 (%F10 0 0) A)) (MIN -37 (LABELS ((%F6 (F6-1 F6-2 F6-3) B)) (FUNCALL (FUNCTION %F6) B B B))))))) 7187592 -3970792748407 -14760) 1 0)
;; Loading (DEFTEST MISC.189 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (LET* ((V7 (LABELS ((%F13 (F13-1 F13-2 F13-3) 0)) (MULTIPLE-VALUE-CALL (FUNCTION %F13) (VALUES A A A))))) (FLET ((%F10 NIL V7)) (%F10)))))) 1733 3000 1314076) 0)
;; Loading (DEFTEST MISC.190 (LET* ((FORM (QUOTE (FLET ((%F15 NIL (LABELS ((%F4 (F4-1) 0)) (FLET ((%F6 (&OPTIONAL (F6-2 (LOGAND (APPLY (FUNCTION %F4) (LIST (%F4 0))) (ROUND (* A))))) -284)) (%F6))))) (FUNCALL (FUNCTION %F15))))) (FN (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE VALUES EQUAL ABS ISQRT < >= BYTE MASK-FIELD FUNCALL + * LOGCOUNT LOGAND LOGIOR ROUND LIST APPLY MIN)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (538754530150 -199250645748 105109641)))) (APPLY (COMPILE NIL FN) VALS)) -284)
;; Loading (DEFTEST MISC.191 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1))) (LABELS ((%F1 NIL C)) (FLET ((%F12 (F12-1) (LABELS ((%F9 (F9-1 F9-2 F9-3) (%F1))) (APPLY (FUNCTION %F9) (%F9 A B 0) A 0 NIL)))) (APPLY (FUNCTION %F12) 0 NIL)))))) 0 0 0) 0)
;; Loading (DEFTEST MISC.192 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (FLET ((%F8 (F8-1 F8-2 F8-3) F8-2)) (CATCH (QUOTE CT6) (%F8 0 B (CATCH (QUOTE CT6) (THROW (QUOTE CT6) A)))))))) 1 2) 2)
;; Loading (DEFTEST MISC.193 (LET* ((FORM (QUOTE (IF (IF (<= A (TRUNCATE C (MIN -43 B))) (LOGBITP 0 0) (LOGBITP 0 -1)) 0 -36223))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -3 15350342) A)) (DECLARE (TYPE (INTEGER -4357 -1555) B)) (DECLARE (TYPE (INTEGER 5389300879793 6422214587951) C)) (DECLARE (OPTIMIZE (SPEED 3))) (DECLARE (OPTIMIZE (SAFETY 1))) (DECLARE (OPTIMIZE (DEBUG 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (FN2 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE LOGBITP MIN TRUNCATE <=)) (DECLARE (OPTIMIZE (SAFETY 3))) (DECLARE (OPTIMIZE (SPEED 0))) (DECLARE (OPTIMIZE (DEBUG 0))) (SYSTEM.INTERNALS::BQ-COMMA FORM)))) (VALS (QUOTE (7792101 -1615 6070931814551))) (RESULT1 (MULTIPLE-VALUE-LIST (APPLY (COMPILE NIL FN1) VALS))) (RESULT2 (MULTIPLE-VALUE-LIST (APPLY (COMPILE NIL FN2) VALS)))) (IF (EQUAL RESULT1 RESULT2) :GOOD (VALUES RESULT1 RESULT2))) :GOOD)
;; Loading (DEFTEST MISC.194 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE FUNCALL)) (DECLARE (OPTIMIZE (SAFETY 3) (SPEED 0) (DEBUG 3))) (FLET ((%F14 (F14-1 F14-2 &OPTIONAL (F14-3 0) (F14-4 (CATCH (QUOTE CT8) 0)) (F14-5 (UNWIND-PROTECT C))) 0)) (FUNCALL (FUNCTION %F14) 0 0))))) 1 2 3) 0)
;; Loading (DEFTEST MISC.195 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -5906488825 254936878485) A)) (DECLARE (TYPE (INTEGER -350857549 -11423) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (BLOCK B8 (LABELS ((%F6 (F6-1 &OPTIONAL (F6-2 0) (F6-3 0) (F6-4 0)) 0)) (MULTIPLE-VALUE-CALL (FUNCTION %F6) (VALUES 0))))))) 100 -100000) 0)
;; Loading (DEFTEST MISC.196 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 1 46794484349) A)) (DECLARE (TYPE (INTEGER -627 -2) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1))) (IF (NOT (LOGBITP 0 0)) 0 (LABELS ((%F9 (F9-1 F9-2 F9-3) 0)) (%F9 (CATCH (QUOTE CT6) A) (CATCH (QUOTE CT4) 0) 0)))))) 1 -200) 0)
;; Loading (DEFTEST MISC.197 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (NOTINLINE LOGCOUNT)) (DECLARE (OPTIMIZE (SAFETY 3) (SPEED 0) (DEBUG 3))) (LABELS ((%F5 (&OPTIONAL (F5-1 B) (F5-2 0) (F5-3 (CATCH (QUOTE CT2) 0))) (PROG1 (LOGCOUNT (BLOCK B1 F5-1))))) (IF (%F5 0 0 0) (%F5 A) 0))))) 1 2) 1)
;; Loading (DEFTEST MISC.198 (LET* ((FORM (QUOTE (MIN (CATCH (QUOTE CT4) (THROW (QUOTE CT4) (SETQ C 29119897960))) C))) (FN1 (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -70450 39128850560) C)) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1))) (SYSTEM.INTERNALS::BQ-COMMA FORM))))) (FUNCALL (COMPILE NIL FN1) 3512352656)) 29119897960)
;; Loading (DEFTEST MISC.199 (LET* ((FN (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 3352138624 13120037248) B)) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (SPACE 1))) (PROGN (CATCH (QUOTE CT1) (PROGN (SETQ B 11159349376) (THROW (QUOTE CT1) 0))) B))))) (FUNCALL (COMPILE NIL FN) 4108962100)) 11159349376)
;; Loading (DEFTEST MISC.200 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 1))) (CEILING (CEILING (FLET ((%F16 NIL 0)) (%F16)))))))) 0 0)
;; Loading (DEFTEST MISC.201 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 1))) (FLET ((%F10 (F10-1) (RETURN-FROM %F10 A))) (MULTIPLE-VALUE-CALL (FUNCTION %F10) (VALUES B)))))) 10 -100) 10)
;; Loading (DEFTEST MISC.202 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -363953100 5324773015552) A)) (DECLARE (TYPE (INTEGER -5744998440960 59520311) B)) (DECLARE (TYPE (INTEGER -1864645998 -14608) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 2) (DEBUG 0) (COMPILATION-SPEED 2))) (FLET ((%F1 (F1-1 F1-2) (LABELS ((%F1 (F1-1 F1-2) 0)) (%F1 A F1-2)))) (%F1 0 C))))) 10 20 -20000) 0)
;; Loading (DEFTEST MISC.203 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 2) (DEBUG 0) (COMPILATION-SPEED 0))) (LABELS ((%F18 (F18-1 F18-2 &OPTIONAL (F18-3 A) (F18-4 A)) F18-2)) (MULTIPLE-VALUE-CALL (FUNCTION %F18) (VALUES A 0)))))) 100) 0)
;; Loading (DEFTEST MISC.204 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -4801373 -50300) A)) (DECLARE (TYPE (INTEGER -62 -28) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 2))) (FLET ((%F12 (F12-1) 0)) (LABELS ((%F3 (F3-1 F3-2 F3-3 &OPTIONAL (F3-4 B) (F3-5 B) (F3-6 (LABELS ((%F9 NIL B)) (APPLY (FUNCTION %F12) (%F9) NIL)))) (%F12 0))) (%F3 B 0 A)))))) -2224841 -54) 0)
;; Loading (DEFTEST MISC.205 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 3))) (LABELS ((%F1 NIL B)) (FLET ((%F11 (F11-1 F11-2 F11-3) 0)) (APPLY (FUNCTION %F11) A (LOGAND (%F1)) (FLET ((%F13 (F13-1 F13-2) B)) (APPLY (FUNCTION %F13) 0 0 NIL)) NIL)))))) 100 200) 0)
;; Loading (DEFTEST MISC.206 (FUNCALL (FUNCTION (LAMBDA (A B) (DECLARE (NOTINLINE MASK-FIELD BYTE)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 2))) (MASK-FIELD (BYTE 0 0) (BLOCK B3 (LABELS ((%F14 NIL (RETURN-FROM B3 A))) (%F14)))))) 1 2) 0)
;; Loading (DEFTEST MISC.207 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 0) (DEBUG 1) (COMPILATION-SPEED 0))) (LABELS ((%F3 (F3-1) A)) (LABELS ((%F10 (F10-1 F10-2) A)) (APPLY (FUNCTION %F10) 0 (LOGIOR (%F3 0)) NIL)))))) -10000) -10000)
;; Loading (DEFTEST MISC.208 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 0))) (FLET ((%F6 (F6-1 F6-2 F6-3) F6-3)) (LABELS ((%F8 (F8-1) (LET* ((V1 (%F6 0 0 0))) 0))) (APPLY (FUNCTION %F6) B B (%F8 B) NIL)))))) 10) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.209 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 3))) (MAX (CATCH (QUOTE CT4) (THROW (QUOTE CT4) (SETQ B 0))) B)))) 6353) 0)
;; Loading (DEFTEST MISC.210 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER 3 65500689) C)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 2))) (CATCH (QUOTE CT6) (LET ((V10 (TRUNCATE (INTEGER-LENGTH (THROW (QUOTE CT6) 0))))) C))))) 100) 0)
;; Loading (DEFTEST MISC.210A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -55982525 -1) A)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 1))) (FLET ((%F11 (F11-1 F11-2 F11-3) A)) (LET ((V6 0)) (FLET ((%F12 (F12-1) V6)) (IF (<= 0) (%F11 V6 0 0) (MULTIPLE-VALUE-CALL (FUNCTION %F11) (VALUES 0 0 (%F11 0 0 (APPLY (FUNCTION %F12) 0 NIL))))))))))) -100) -100)
;; Loading (DEFTEST MISC.211 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -1439706333184 1191686946816) A)) (DECLARE (TYPE (INTEGER -28 282229324) B)) (DECLARE (TYPE (INTEGER -108149896 38889958912) C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 3))) (LET ((V4 (LABELS ((%F8 (F8-1 &OPTIONAL (F8-2 0) (F8-3 B)) 0)) (LOGIOR (%F8 0) (%F8 0 0))))) (TRUNCATE (LABELS ((%F4 (&OPTIONAL (F4-1 (CEILING C))) A)) (%F4 V4)) (MAX 38 (LABELS ((%F8 (F8-1 &OPTIONAL (F8-2 (+ C A))) 0)) (APPLY (FUNCTION %F8) A NIL)))))))) -979021452526 138874383 21099308459) -25763722434 -34)
;; Loading (DEFTEST MISC.212 (FUNCALL (FUNCTION (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 0))) (LET* ((V9 (UNWIND-PROTECT 0))) V9)))) 0)
;; Loading (DEFTEST MISC.213 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -2 -1) B)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 3))) (MAX (LABELS ((%F15 (F15-1) B)) (IF (< 0 (%F15 A)) 0 0)) (LABELS ((%F11 (F11-1 F11-2 F11-3) B)) (APPLY (FUNCTION %F11) 0 0 0 NIL)))))) 0 -2) 0)
;; Loading (DEFTEST MISC.213A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 0) (DEBUG 1) (COMPILATION-SPEED 3))) (MAX (LABELS ((%F7 (F7-1) A)) (%F7 0)) (FLET ((%F12 (F12-1 F12-2) (IF A F12-2 0))) (APPLY (FUNCTION %F12) 0 A NIL)))))) 123) 123)
;; Loading (DEFTEST MISC.214 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 2) (DEBUG 0) (COMPILATION-SPEED 2))) (FLET ((%F8 NIL (SETQ A 0))) (MAX A (%F8)))))) 100) 100)
;; Loading (DEFTEST MISC.215 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 2))) (LDB (BYTE 26 6) -1252))))) 67108844)
;; Loading (DEFTEST MISC.215A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 2))) (LDB (BYTE 30 0) -407020740))))) 666721084)
;; Loading (DEFTEST MISC.216 (TRUNCATE 0 -2549795210) 0 0)
;; Loading (DEFTEST MISC.217 (CEILING 0 -2549795210) 0 0)
;; Loading (DEFTEST MISC.218 (FLOOR 0 -2549795210) 0 0)
;; Loading (DEFTEST MISC.219 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LABELS ((%F (A B) (LABELS ((%F (C D) 0)) (%F 1 2)))) (%F 3 4)))))) 0)
;; Loading (DEFTEST MISC.220 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -3218770816 9386121) A)) (DECLARE (TYPE (INTEGER -1 13) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 1))) (LABELS ((%F18 (F18-1 F18-2 F18-3) A)) (APPLY (FUNCTION %F18) 0 A (%F18 B (- (LABELS ((%F11 (F11-1 F11-2 F11-3) A)) (%F11 0 0 0))) A) NIL))))) -468614602 3) -468614602)
;; Loading (DEFTEST MISC.221 (TRUNCATE 0 3006819284014656913408) 0 0)
;; Loading (DEFTEST MISC.222 (CEILING 0 3006819284014656913408) 0 0)
;; Loading (DEFTEST MISC.223 (FLOOR 0 3006819284014656913408) 0 0)
;; Loading (DEFTEST MISC.224 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 0) (DEBUG 1) (COMPILATION-SPEED 0))) (FLET ((%F14 (F14-1 F14-2 &OPTIONAL (F14-3 C) (F14-4 (IF (NOT NIL) (LABELS ((%F9 NIL 0)) (%F9)) A))) (FLET ((%F17 (F17-1 F17-2) F14-1)) (%F17 0 F14-3)))) (%F14 (%F14 0 A) 0 B A))))) 248000 5409415 227923) 0)
;; Loading (DEFTEST MISC.225 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (VALUES (VALUES (QUOTE A) (QUOTE B))))))) A)
;; Loading (DEFTEST MISC.226 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (FLET ((%F (&OPTIONAL (X (SETQ A 1)) (Y (SETQ A 2))) 0)) (%F 0 0))))) 0) 0)
;; Loading (DEFTEST MISC.227 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (FLET ((%F (&OPTIONAL X (Y (SETQ B 1))) X)) (%F 0))))) 0) 0)
;; Loading (DEFTEST MISC.228 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 2))) (CATCH (QUOTE CT2) (CASE 0 ((-56087 86404 -94716) (SIGNUM (LABELS ((%F7 (F7-1 F7-2 F7-3) F7-2)) 0))) ((12986) (LET ((V3 (CATCH (QUOTE CT2) (THROW (QUOTE CT2) 0)))) (LABELS ((%F14 (F14-1 F14-2) 0)) (%F14 B C)))) (T 0)))))) -3847091255 -13482 -7577750) 0)
;; Loading (DEFTEST MISC.228A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -249606 2) A)) (DECLARE (TYPE (INTEGER 125 511) B)) (DECLARE (TYPE (INTEGER -2 1) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 3))) (CATCH (QUOTE CT4) (RATIONAL (CASE B ((350 244 1059) (PROG2 (NUMERATOR C) 0)) ((1705 493) (UNWIND-PROTECT (THROW (QUOTE CT4) C) (LOOP FOR LV2 BELOW 2 COUNT (LOGBITP 0 C)))) (T A))))))) 0 200 -1) 0)
;; Loading (DEFTEST MISC.228B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -1 412413109) C)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 3))) (CATCH (QUOTE CT2) (LOGIOR (* (PROGN (IF C 0 (THROW (QUOTE CT2) 0)) 0) (CATCH (QUOTE CT2) (THROW (QUOTE CT2) 0))) (COMPLEX C 0)))))) 62151) 62151)
;; Loading (DEFTEST MISC.229 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 3))) (LABELS ((%F15 (F15-1) 0)) (LET ((V4 0)) (CATCH (QUOTE CT5) (%F15 (GCD (CATCH (QUOTE CT5) (LET* ((V5 (THROW (QUOTE CT5) 0))) 0)) V4))))))))) 0)
;; Loading (DEFTEST MISC.230 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -6527559920 -247050) A)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 3))) (LABELS ((%F10 (&OPTIONAL (F10-1 0) (F10-2 (SETQ A -4456327156))) 0)) (LOGXOR A (%F10 A)))))) -3444248334) -3444248334)
;; Loading (DEFTEST MISC.231 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -5209401 3339878) B)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 3))) (FLET ((%F3 (F3-1 F3-2) F3-1)) (APPLY (FUNCTION %F3) 0 (LOGXOR (CATCH (QUOTE CT2) B) (CATCH (QUOTE CT5) (THROW (QUOTE CT5) 0))) NIL))))) -2179757) 0)
;; Loading (DEFTEST MISC.232 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 197447754 495807327) A)) (DECLARE (TYPE (INTEGER -125379462 1863191461) B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 2))) (FLET ((%F8 (&OPTIONAL (F8-1 (MAX (CATCH (QUOTE CT4) 0) (CATCH (QUOTE CT6) (THROW (QUOTE CT6) 0))))) B)) (FLET ((%F16 (F16-1 F16-2 F16-3) 0)) (APPLY (FUNCTION %F16) A 0 (%F8) NIL)))))) 348270365 28780966) 0)
;; Loading (DEFTEST MISC.233 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -2333758327203 -321096206070) A)) (DECLARE (TYPE (INTEGER -2842843403569 258395684270) B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 2))) (FLET ((%F18 (F18-1) (THE INTEGER (LABELS ((%F9 (F9-1 F9-2) (* (- -1 -210032251) (1+ (FLOOR (LABELS ((%F11 (F11-1 F11-2) -96773966)) (%F11 B -3440758))))))) (FLET ((%F2 (F2-1 F2-2 F2-3 &OPTIONAL (F2-4 (%F9 -429204 -63)) (F2-5 (- (%F9 B 17) A)) (F2-6 (MULTIPLE-VALUE-CALL (FUNCTION %F9) (VALUES (LET NIL 7127585) (FLET ((%F1 (F1-1 F1-2 F1-3) (CATCH (QUOTE CT6) -569234))) (MACROLET NIL 13)))))) 1027)) (IF NIL (%F2 B A F18-1 69968 4 -217193265) (CATCH (QUOTE CT1) 129548688))))))) (MAX (APPLY (FUNCTION %F18) (LIST 0))))))) -2067244683733 143879071206) 129548688)
;; Loading (DEFTEST MISC.234 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -13583709 -3876310) B)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 1))) (FLET ((%F14 (F14-1 F14-2 F14-3) (FLET ((%F2 (F2-1 &OPTIONAL (F2-2 0) (F2-3 0) (F2-4 (BLOCK B8 (IF (LDB-TEST (BYTE 0 0) 0) (* 0 F14-2) 0)))) 0)) (%F2 B F14-2)))) (%F14 0 0 (%F14 0 0 0)))))) -5694124) 0)
;; Loading (DEFTEST MISC.235 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (NOTINLINE NOT)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 3))) (MULTIPLE-VALUE-PROG1 0 (CATCH (QUOTE CT2) (IF (NOT NIL) (THROW (QUOTE CT2) B) 0)))))) :WRONG) 0)
;; Loading (DEFTEST MISC.236 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 1))) (FLET ((%F8 (F8-1) 0)) (LABELS ((%F18 (F18-1 F18-2 &OPTIONAL (F18-3 0)) (%F8 (CATCH (QUOTE CT7) (THROW (QUOTE CT7) F18-1))))) (MULTIPLE-VALUE-PROG1 (CATCH (QUOTE CT7) A) 0 (MULTIPLE-VALUE-CALL (FUNCTION %F18) (VALUES 0 (%F8 B))))))))) :GOOD :BAD) :GOOD)
;; Loading (DEFTEST MISC.237 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 1))) (MULTIPLE-VALUE-PROG1 0 (CATCH (QUOTE CT7) (LOGANDC1 (BLOCK B7 0) (THROW (QUOTE CT7) -908543)))))))) 0)
;; Loading (DEFTEST MISC.238 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -77145797 -1) A)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 1))) (FLET ((%F5 (F5-1) A)) (%F5 (UNWIND-PROTECT 0 (LOGAND (- (CATCH (QUOTE CT5) 0))))))))) -100) -100)
;; Loading (DEFTEST MISC.238A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 0))) (MIN (LOAD-TIME-VALUE 0)) 0)))) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.239 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -2315418108387 111852261677) A)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 1))) (LABELS ((%F4 NIL (LABELS ((%F16 (F16-1 F16-2) 0)) (FLET ((%F9 NIL 0)) (%F16 0 (%F16 (%F9) A)))))) (FLET ((%F10 (F10-1 F10-2 F10-3) (FLET ((%F15 (F15-1 &OPTIONAL (F15-2 (%F4)) (F15-3 0)) F15-3)) 0))) 0))))) 100) 0)
;; Loading (DEFTEST MISC.239A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE SPEED SAFETY)) (LET ((X (PROG1 0 (ROUND 18916)))) (CATCH (QUOTE CT4) 0)))))) 0)
;; Loading (DEFTEST MISC.240 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 4 7) B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 3))) (UNWIND-PROTECT 0 (COMMON-LISP:HANDLER-CASE (MAX (LET ((*S1* B)) (DECLARE (SPECIAL *S1*)) (+ 0 *S1*)))))))) 5) 0)
;; Loading (DEFTEST MISC.241 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 2))) (LABELS ((%F17 (F17-1 F17-2) (MULTIPLE-VALUE-PROG1 0 0 0 (RETURN-FROM %F17 0)))) (%F17 0 0)))))) 0)
;; Loading (DEFTEST MISC.242 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (BLOCK B6 (MULTIPLE-VALUE-PROG1 A (RETURN-FROM B6 0)))))) :WRONG) 0)
;; Loading (DEFTEST MISC.243 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (BLOCK B3 (RETURN-FROM B3 (MULTIPLE-VALUE-PROG1 0 (RETURN-FROM B3 0)))))))) 0)
;; Loading (DEFTEST MISC.244 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 2))) (CATCH (QUOTE CT8) (LABELS ((%F4 (&OPTIONAL (F4-1 0) (F4-2 (THROW (QUOTE CT8) 0))) F4-1)) (%F4 B)))))) :WRONG) 0)
;; Loading (DEFTEST MISC.245 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 1))) (CATCH (QUOTE CT2) (LABELS ((%F11 (&OPTIONAL (F11-1 (THROW (QUOTE CT2) 0))) A)) (APPLY (FUNCTION %F11) 0 NIL)))))) 20) 20)
;; Loading (DEFTEST MISC.246 (LET ((X (UNWIND-PROTECT 0))) X) 0)
;; Loading (DEFTEST MISC.247 (LET ((X (DOTIMES (I 0 10)))) X) 10)
;; Loading (DEFTEST MISC.248 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DOTIMES (I 0 0) 0))))) 0)
;; Loading (DEFTEST MISC.249 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (NOTINLINE <=)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 0) (DEBUG 1) (COMPILATION-SPEED 3))) (IF (IF (<= 0) NIL NIL) (LABELS ((%F9 (F9-1 F9-2 F9-3) (IGNORE-ERRORS 0))) (DOTIMES (IV4 5 A) (%F9 0 0 B))) 0)))) 1 2) 0)
;; Loading (DEFTEST MISC.250 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -12 14) A)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 3))) (LET ((V6 0)) (FLET ((%F11 (F11-1 &OPTIONAL (F11-2 (CASE (CATCH (QUOTE CT7) 0) (T (LET* ((V2 (IGNORE-ERRORS A))) V6))))) 0)) (%F11 0 0)))))) 5) 0)
;; Loading (DEFTEST MISC.251 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -186585769 -7483) A)) (DECLARE (TYPE (INTEGER -550 524) B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 3))) (FLET ((%F3 (F3-1 F3-2 F3-3) 0)) (%F3 0 0 (FLET ((%F13 (F13-1 F13-2) 0)) (IF (/= B A) B (DEPOSIT-FIELD (%F3 0 B 0) (BYTE 0 0) (%F3 0 0 (%F13 0 0)))))))))) -10000 0) 0)
;; Loading (DEFTEST MISC.252 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -43443 9126488423) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 0))) (LOGAND (SETQ B 8061593093) (MIN B 0))))) 0) 0)
;; Loading (DEFTEST MISC.252A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -30189 -6047) A)) (DECLARE (TYPE (INTEGER -10 16391481067) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 0))) (IF (<= 0 (LET ((*S1* (SETQ B 12204309028))) (DECLARE (SPECIAL *S1*)) (TRUNCATE B))) A 0)))) -12618 16130777867) -12618)
;; Loading (DEFTEST MISC.253 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 2))) (FLET ((%F17 (F17-1) 0)) (%F17 (LOGANDC1 0 (CATCH (QUOTE CT2) 0)))))))) 0)
;; Loading (DEFTEST MISC.253A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 1))) (LABELS ((%F1 (F1-1 F1-2) (ISQRT (ABS (COMPLEX F1-1 0))))) (PROGN (/ (MULTIPLE-VALUE-CALL (FUNCTION %F1) (VALUES (1- (RESTART-BIND NIL 1416182210)) 123337746)) 1) (TAGBODY) C))))) -34661) -34661)
;; Loading (DEFTEST MISC.254 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -5241 -1159) A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 1))) (GCD A (LET ((*MISC.254* (SETQ A -4929))) (DECLARE (SPECIAL *MISC.254*)) 0))))) -3000) 3000)
;; Loading (DEFTEST MISC.255 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -3474321 15089206) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 0))) (- B (BLOCK B3 (SETQ B 9367613) 0))))) 10) 10)
;; Loading (DEFTEST MISC.256 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 0))) (TAGBODY (FLET ((%F6 NIL (GO 18))) (%F6)) 18))))) NIL)
;; Loading (DEFTEST MISC.257 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 1))) (DECLARE (SPECIAL B)) (TAGBODY (FLET ((%F1 (F1-1) (FLET ((%F9 (&OPTIONAL (F9-1 B) (F9-2 (GO TAG2)) (F9-3 0)) 0)) (%F9 0 0 0)))) (%F1 0)) TAG2))))) NIL)
;; Loading (DEFTEST MISC.258 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 0))) (LET ((*S4* :RIGHT)) (DECLARE (SPECIAL *S4*)) (PROGV (QUOTE (*S4*)) (LIST :WRONG1) (SETQ *S4* :WRONG2)) *S4*))))) :RIGHT)
;; Loading (DEFTEST MISC.259 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 177547470 226026978) A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 1))) (LOGAND A (* A 438810))))) 215067723) 13739018)
;; Loading (DEFTEST MISC.260 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 43369342 45325981) A)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 2) (DEBUG 0) (COMPILATION-SPEED 3))) (LOGAND 0 (* 5459177 A))))) 44219966) 0)
;; Loading (DEFTEST MISC.261 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 379442022 806547932) B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 2))) (LOGAND B (* 227 B))))) 551173513) 545263625)
;; Loading (DEFTEST MISC.262 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 515644 54674673) A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 1))) (MASK-FIELD (BYTE 0 0) (* 613783109 A))))) 28831407) 0)
;; Loading (DEFTEST MISC.263 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 862944 60462138) A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 0) (DEBUG 1) (COMPILATION-SPEED 1))) (LOGANDC2 0 (* A 18094747))))) 36157847) 0)
;; Loading (DEFTEST MISC.264 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 896520522 1249309734) A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 2))) (LOGNAND 0 (* A 1381212086))))) 1202966173) -1)
;; Loading (DEFTEST MISC.265 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -19621 11895) A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 3))) (* 0 A 103754)))) 1) 0)
;; Loading (DEFTEST MISC.266 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (TAGBODY (FLET ((%F (X) :BAD)) (MULTIPLE-VALUE-CALL (FUNCTION %F) (GO DONE))) DONE))))) NIL)
;; Loading (DEFTEST MISC.266A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -14356828946432 -24266) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 2))) (PROGN (TAGBODY (UNWIND-PROTECT 0 (GO 3)) 3) B)))) -30000) -30000)
;; Loading (DEFTEST MISC.266B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 2) (DEBUG 0) (COMPILATION-SPEED 0))) (UNWIND-PROTECT 0 (CATCH (QUOTE CT7) (PROG1 B 0)))))) 1) 0)
;; Loading (DEFTEST MISC.267 (LOCALLY (DECLARE (SPECIAL *S5*)) (LET ((V8 (PROGV (QUOTE (*S5*)) (LIST 0) (IF T *S5* *S5*)))) V8)) 0)
;; Loading (DEFTEST MISC.267A (LET ((X (PROGV NIL NIL 0))) X) 0)
;; Loading (DEFTEST MISC.268 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 2))) (CATCH (QUOTE CT7) (RATIONALIZE (LET ((V9 (1+ (THROW (QUOTE CT7) 0)))) 48955))))))) 0)
;; Loading (DEFTEST MISC.269 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -1 20) A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 3))) (IF (IF A (LOGBITP 34 A) NIL) 0 -230678)))) 14) -230678)
;; Loading (DEFTEST MISC.270 (LET ((*S3* (DOTIMES (IV4 0 10) (IF T IV4 8)))) (DECLARE (SPECIAL *S3*)) *S3*) 10)
;; Loading (DEFTEST MISC.271 (LET ((V2 (UNWIND-PROTECT 0))) V2) 0)
;; Loading (DEFTEST MISC.272 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 2))) (FLET ((%F17 (F17-1) 1)) (MULTIPLE-VALUE-CALL (FUNCTION %F17) (VALUES (FLOOR 0)))))))) 1)
;; Loading (DEFTEST MISC.273 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (D) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 0))) (GCD 39 (CATCH (QUOTE CT2) (BLOCK B7 (THROW (QUOTE CT2) (UNWIND-PROTECT (RETURN-FROM B7 17) (RETURN-FROM B7 (PROGV (QUOTE (*S6*)) (LIST 31) D)))))))))) 65) 13)
;; Loading (DEFTEST MISC.274 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 0))) (MULTIPLE-VALUE-PROG1 (IGNORE-ERRORS 0) 0 (CATCH (QUOTE CT7) 0) (CATCH (QUOTE CT1) (CATCH (QUOTE CT4) (COMPLEX (THROW (QUOTE CT4) (DOTIMES (IV4 0 0) (THROW (QUOTE CT1) 0))) 0)))))))) 0)
;; Loading (DEFTEST MISC.274A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 3))) (DOTIMES (IV4 3 0) (APPLY (CONSTANTLY 0) 0 (CATCH (QUOTE CT2) (THROW (QUOTE CT2) (REM 0 (MAX 46 0)))) NIL)))))) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.275 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (NOTINLINE FUNCALL MIN COERCE)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 1))) (FLET ((%F12 (F12-1) (COERCE (MIN (IF F12-1 (MULTIPLE-VALUE-PROG1 B (RETURN-FROM %F12 0)) 0)) (QUOTE INTEGER)))) (FUNCALL (FUNCTION %F12) 0))))) -33) 0)
;; Loading (DEFTEST MISC.275A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 1))) (BLOCK B4 (COERCE (LOGCOUNT (IF T 0 (MULTIPLE-VALUE-PROG1 (IDENTITY 0) (RETURN-FROM B4 0)))) (QUOTE INTEGER))))))) 0)
;; Loading (DEFTEST MISC.276 (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 3))) (LABELS ((%F2 NIL (LET ((V10 (PROGN (DOTIMES (IV2 0 0) IV2) B))) (UNWIND-PROTECT B (LABELS ((%F6 NIL)) (%F6)))))) (%F2))))) :GOOD) :GOOD)
;; Loading (DEFTEST MISC.277 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 0))) (LABELS ((%F15 (&OPTIONAL (F15-3 (TAGBODY (LABELS ((%F6 NIL (GO TAG1))) (%F6)) TAG1))) 0)) (%F15)))))) 0)
;; Loading (DEFTEST MISC.278 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 0))) (CATCH (QUOTE CT5) (FLET ((%F2 (&OPTIONAL (F2-4 (THROW (QUOTE CT5) 0))) 1)) (%F2 (%F2 0)))))))) 1)
;; Loading (DEFTEST MISC.279 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 3))) (FLET ((%F10 NIL (IF (< 0 (DOTIMES (IV2 1 -501162))) 0 -14))) (%F10)))))) -14)
;; Loading (DEFTEST MISC.280 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 2))) (CATCH (QUOTE CT6) (LABELS ((%F12 NIL (LABELS ((%F14 (&OPTIONAL (F14-3 (RETURN-FROM %F12 5))) 4)) (FUNCALL (CONSTANTLY 3) (LET ((V2 (%F14))) 2) (THROW (QUOTE CT6) 1))))) (%F12) A))))) :GOOD) :GOOD)
;; Loading (DEFTEST MISC.281 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 3))) (LDB (BYTE 24 0) C)))) -227016367797) 12919115)
;; Loading (DEFTEST MISC.282 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE SAFETY)) (LDB (BYTE 13 13) 43710))))) 5)
;; Loading (DEFTEST MISC.283 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B D) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 1) (COMPILATION-SPEED 3))) (EXPT (LOGXOR (PROGN (TAGBODY (MULTIPLE-VALUE-PROG1 0 (GO 7)) 7) 0) 0 B (RATIONAL D)) 0)))) 2 4) 1)
;; Loading (DEFTEST MISC.284 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 2))) (PROGN (TAGBODY (MULTIPLE-VALUE-PROG1 0 (GO TAG2)) 0 TAG2) (FUNCALL (CONSTANTLY 0) (APPLY (CONSTANTLY 0) (SIGNUM C) NIL)))))) 3) 0)
;; Loading (DEFTEST MISC.285 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 3))) (BLOCK B7 (LET* ((V1 (* (RETURN-FROM B7 0) A))) -4359852))))) 1) 0)
;; Loading (DEFTEST MISC.286 (LET ((V4 (DOTIMES (IV4 0 18494910) (PROGN 0)))) V4) 18494910)
;; Loading (DEFTEST MISC.287 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (E) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 1))) (FLET ((%F11 (F11-2) 0)) (%F11 (UNWIND-PROTECT E (TAGBODY (LET* ((V4 (UNWIND-PROTECT (GO 0)))) 0) 0) (LOGAND (HANDLER-BIND NIL 0)))))))) 10) 0)
;; Loading (DEFTEST MISC.288 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 2))) (LET ((V2 (INTEGER-LENGTH (EXPT 0 0)))) (DOTIMES (IV4 0 0) (LOGAND V2))))))) 0)
;; Loading (DEFTEST MISC.289 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 2))) (MULTIPLE-VALUE-PROG1 (APPLY (CONSTANTLY 0) B 0 0 NIL) (CATCH (QUOTE CT8) (THROW (QUOTE CT8) -2)))))) 1) 0)
;; Loading (DEFTEST MISC.290 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 0))) (APPLY (CONSTANTLY 0) (CATCH (QUOTE CT2) 0) 0 (CATCH (QUOTE CT2) 0) NIL))))) 0)
;; Loading (DEFTEST MISC.290A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 0))) (BOOLE BOOLE-NOR (EXPT (LET ((V2 (EXPT (CATCH (QUOTE CT7) 0) 0))) 0) 0) (EXPT (APPLY (CONSTANTLY 0) 0 0 (CATCH (QUOTE CT6) 0) NIL) 0)))))) -2)
;; Loading (DEFTEST MISC.291 (FUNCALL (FUNCTION (LAMBDA (A) (DECLARE (NOTINLINE NUMERATOR)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 2) (DEBUG 0) (COMPILATION-SPEED 2))) (TAGBODY (TAGBODY (PROGN A) TAG) (GO TAG) TAG))) 17) NIL)
;; Loading (DEFTEST MISC.292 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 1))) (FLET ((%F15 (F15-1 F15-2 F15-3) (APPLY (CONSTANTLY 0) 0 0 (IGNORE-ERRORS (LET ((V10 (APPLY (CONSTANTLY 0) B A (MAX 0 C) NIL))) 0)) NIL))) (FLET ((%F14 (F14-1 &OPTIONAL (F14-2 B) (F14-3 0) (F14-4 0)) (%F15 0 0 B))) (%F14 0 C)))))) 1 2 3) 0)
;; Loading (DEFTEST MISC.292A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 2))) (APPLY (CONSTANTLY 0) A 0 (CATCH (QUOTE CT6) (APPLY (CONSTANTLY 0) 0 0 (LET* ((V1 (LET ((*S7* 0)) B))) 0) 0 NIL)) 0 NIL)))) 1 2) 0)
;; Loading (DEFTEST MISC.293 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 3))) (LET ((V6 (LABELS ((%F9 (F9-1) (MULTIPLE-VALUE-PROG1 0 (RETURN-FROM %F9 0) A))) (LET ((*S4* (%F9 0))) 0)))) 0)))) 1) 0)
;; Loading (DEFTEST MISC.293A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 2))) (BLOCK B6 (MULTIPLE-VALUE-PROG1 0 B 0 (CATCH (QUOTE CT7) (RETURN-FROM B6 (CATCH (QUOTE CT2) (COMPLEX (COMMON-LISP:HANDLER-BIND NIL -254932942) 0))))))))) 1 2 3) -254932942)
;; Loading (DEFTEST MISC.293B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (NOTINLINE COMPLEX)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 3))) (FLET ((%F NIL (MULTIPLE-VALUE-PROG1 0 (RETURN-FROM %F 0)))) (COMPLEX (%F) 0)))))) 0)
;; Loading (DEFTEST MISC.293C (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -6556 -33) A)) (DECLARE (TYPE (INTEGER -1973908574551 1125) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SPACE 2) (SAFETY 0) (DEBUG 2) (SPEED 0))) (BLOCK B4 (MULTIPLE-VALUE-PROG1 0 (CATCH (QUOTE CT7) (RETURN-FROM B4 (CATCH (QUOTE CT6) (IF A 0 B)))) 0 0))))) -237 -1365751422718) 0)
;; Loading (DEFTEST MISC.293D (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (DEBUG 3) (SAFETY 0) (SPACE 2) (COMPILATION-SPEED 2) (SPEED 2))) (BLOCK B4 (MULTIPLE-VALUE-PROG1 0 (CATCH (QUOTE CT8) (RETURN-FROM B4 (CATCH (QUOTE CT2) (PROGN (TAGBODY) 0)))))))))) 0)
;; Loading (DEFTEST MISC.294 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE /=)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 1))) (CATCH (QUOTE CT1) (FLET ((%F1 (F1-1 F1-2 F1-3) (THROW (QUOTE CT1) (IF (/= 0) 0 (MULTIPLE-VALUE-PROG1 0 (THROW (QUOTE CT1) A) C))))) (LET ((*S3* (%F1 A A 0))) 0)))))) 1 2 3) 0)
;; Loading (DEFTEST MISC.294A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE EXPT)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 0))) (CATCH (QUOTE CT2) (EXPT (CATCH (QUOTE CT2) (THROW (QUOTE CT2) (IF A 0 (MULTIPLE-VALUE-PROG1 0 (THROW (QUOTE CT2) C) 0)))) 0))))) 1 2 3) 1)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.295 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -2858 1050811) A)) (DECLARE (TYPE (INTEGER -419372 1395833) B)) (DECLARE (TYPE (INTEGER -4717708 795706) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 2))) (MULTIPLE-VALUE-PROG1 (THE INTEGER (CATCH (QUOTE CT8) (CATCH (QUOTE CT5) (CATCH (QUOTE CT7) (FLET ((%F3 (F3-1 F3-2 &OPTIONAL (F3-3 A) (F3-4 C)) B)) (LABELS ((%F13 (F13-1 F13-2 F13-3) (LET* ((*S4* (RETURN-FROM %F13 (FLET ((%F18 (F18-1 F18-2) (APPLY (FUNCTION %F3) (PROGV NIL NIL F13-2) (LIST (%F3 -460 F18-1 10095 352819651))))) (FLET ((%F5 NIL (FUNCALL (FUNCTION %F3) F13-2 (FLET ((%F14 (F14-1 F14-2 &OPTIONAL (F14-3 F13-2) (F14-4 -15)) 160080387)) -196377) (ISQRT (ABS (IF (/= 117 (%F18 -14 -46574)) (RETURN-FROM %F13 (IGNORE-ERRORS (FLET ((%F12 (F12-1 F12-2 &OPTIONAL (F12-3 740148786) (F12-4 -20) (F12-5 -35261)) F12-3)) (%F3 (%F3 B (%F12 C B F13-3 F13-1 -1124)) 0 -1003264058 F13-1)))) (BLOCK B3 (LABELS ((%F15 NIL F13-2)) -4858377))))) (%F3 793 F13-2 F13-3 A)))) F13-3))))) (* -420793 (%F3 (%F3 F13-1 F13-3 F13-3 F13-2) 0 8604 F13-1))))) (LOGNOR (PROGV NIL NIL (IF (< -16 C) 15867134 (- (THROW (QUOTE CT5) (PROG1 7 (FLOOR (MAX (%F13 -4862 -888 -53824112) A -17974 1540006) (MIN -74 -473379))))))) (PROGV NIL NIL (PROG1 B 22 C A))))))))) (CATCH (QUOTE CT1) (THROW (QUOTE CT1) 0)) 0)))) 794801 211700 -1246335) 7)
;; Loading (DEFTEST MISC.296 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -2016726144 234357120) A)) (DECLARE (TYPE (INTEGER -10569521299456 -1307998945280) B)) (DECLARE (TYPE (INTEGER -45429002240 -17228484608) C)) (DECLARE (TYPE (INTEGER 228451840 1454976512) D)) (DECLARE (TYPE (INTEGER -4797 -2609) E)) (DECLARE (TYPE (INTEGER -21 36300536) F)) (DECLARE (TYPE (INTEGER -15983530 31646604) G)) (DECLARE (TYPE (INTEGER -208720272 -357) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 3))) (EXPT (LABELS ((%F14 (F14-1 F14-2) (PROGN (TAGBODY (+ (UNWIND-PROTECT (LABELS ((%F1 (F1-1) (GO TAG1))) (LET ((*S6* (%F1 D))) 0)))) TAG1 (+ (COMMON-LISP:HANDLER-BIND NIL (IF (<= -11215713 -819) (INTEGER-LENGTH (FLOOR (CONJUGATE F14-1) (MAX 12 (CEILING (BLOCK B2 (CATCH (QUOTE CT2) (IGNORE-ERRORS (FLET ((%F13 (F13-1) (LOGIOR 87 F14-2))) F14-1)))))))) (PROGV (QUOTE (*S8*)) (LIST 472865632) *S8*))))) 0))) (%F14 0 0)) 0)))) -28594854 -3859203606860 -40757449218 894599577 -4163 11621230 29558853 -92216802) 1)
;; Loading (DEFTEST MISC.297 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -4354712743936 666241234) A)) (DECLARE (TYPE (INTEGER -23496787232 13342697120) B)) (DECLARE (TYPE (INTEGER -6834570 6274788) C)) (DECLARE (TYPE (INTEGER -1988742 -250650) D)) (DECLARE (TYPE (INTEGER 10523345 10868247) E)) (DECLARE (TYPE (INTEGER -489185 -46267) F)) (DECLARE (TYPE (INTEGER -627627253760 226529) G)) (DECLARE (TYPE (INTEGER -1039260485 -22498) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 0))) (LABELS ((%F7 (F7-1 F7-2 F7-3 &OPTIONAL (F7-4 0) (F7-5 0) (F7-6 (LABELS ((%F6 (F6-1) (LABELS ((%F9 (F9-1) 0)) (PROGN (TAGBODY (UNWIND-PROTECT (IF (%F9 (GO TAG4)) 0 0)) TAG4 (COMMON-LISP:HANDLER-CASE 0)) H)))) (APPLY (FUNCTION %F6) 0 NIL)))) 0)) (%F7 0 D 0 F D))))) -4319330882538 -3195059121 -2799927 -1466395 10630639 -224479 -502579707077 -985908422) 0)
;; Loading (DEFTEST MISC.298 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER 1296736620544 1680954654720) A)) (DECLARE (TYPE (INTEGER -2 -2) B)) (DECLARE (TYPE (INTEGER 1 42303) C)) (DECLARE (TYPE (INTEGER -38881008000 1333202563072) D)) (DECLARE (TYPE (INTEGER -435684 1289298) E)) (DECLARE (TYPE (INTEGER -164302654464 -10150328832) F)) (DECLARE (TYPE (INTEGER 30759259904 38429537792) G)) (DECLARE (TYPE (INTEGER -1628949299200 -47724342) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 1))) (PROGN (TAGBODY (LET ((V9 (UNWIND-PROTECT (GO 0)))) 0) 0 (NUMERATOR (FUNCALL (CONSTANTLY 0) (LOGORC2 0 0) 0))) 0)))) 1451922002679 -2 285 1067997670626 1115209 -37445463114 36530345360 -80501559891) 0)
;; Loading (DEFTEST MISC.299 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -1814 3348) A)) (DECLARE (TYPE (INTEGER -32239015 12) B)) (DECLARE (TYPE (INTEGER 128412 101411593) C)) (DECLARE (TYPE (INTEGER -329076792320 -22) D)) (DECLARE (TYPE (INTEGER 77651198 86069496) E)) (DECLARE (TYPE (INTEGER -4616 3453771) F)) (DECLARE (TYPE (INTEGER -14889981824 53610580608) G)) (DECLARE (TYPE (INTEGER -1049733788 46605484288) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 2))) (CONJUGATE (PROGN (TAGBODY (FLET ((%F3 NIL 0)) (UNWIND-PROTECT (FLET ((%F10 (F10-1) (LET ((*S6* (%F3))) (GO 6)))) (FUNCALL (FUNCTION %F10) F)))) 6 (LET ((*S1* (RESTART-BIND NIL (LABELS ((%F1 (F1-1) 3136)) (LET NIL (PROGV (QUOTE (*S5* *S1*)) (LIST (LABELS ((%F2 NIL (CATCH (QUOTE CT8) -11))) -70941710) (IF NIL (%F1 -1) 87)) (PROGN (TAGBODY (%F1 *S1*) 3 (BLOCK B2 (PROGN A)) TAG3) H))))))) 0)) 0))))) 1555 -22062210 85224215 -161218251003 78463284 730073 33930166854 37839245921) 0)
;; Loading (DEFTEST MISC.300 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -29429 -3320) A)) (DECLARE (TYPE (INTEGER -407874593 279639852) B)) (DECLARE (TYPE (INTEGER -542849760256 3344389718016) C)) (DECLARE (TYPE (INTEGER -2 12012755) D)) (DECLARE (TYPE (INTEGER -248 -228) E)) (DECLARE (TYPE (INTEGER 5 15636824592) F)) (DECLARE (TYPE (INTEGER 21039 21595) G)) (DECLARE (TYPE (INTEGER -1867743555584 -1621183025152) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 3))) (LABELS ((%F12 (F12-1 F12-2 F12-3) 0)) (LABELS ((%F17 (F17-1) (PROGN (TAGBODY (MAX (APPLY (CONSTANTLY 0) (LIST (%F12 (UNWIND-PROTECT (GO TAG1)) 0 D) 0 F))) TAG1 (DPB (REALPART (EXPT (ROUND (RETURN-FROM %F17 (RESTART-BIND NIL (COMPLEX E 0))) (MAX 40 0)) 0)) (BYTE 0 0) 0)) 0))) (%F12 0 (%F17 0) 0)))))) -6416 -274982013 2946309248013 1724720 -228 5782683458 21484 -1681168611256) 0)
;; Loading (DEFTEST MISC.301 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -1814 3348) A)) (DECLARE (TYPE (INTEGER -32239015 12) B)) (DECLARE (TYPE (INTEGER 128412 101411593) C)) (DECLARE (TYPE (INTEGER -329076792320 -22) D)) (DECLARE (TYPE (INTEGER 77651198 86069496) E)) (DECLARE (TYPE (INTEGER -4616 3453771) F)) (DECLARE (TYPE (INTEGER -14889981824 53610580608) G)) (DECLARE (TYPE (INTEGER -1049733788 46605484288) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 2))) (CONJUGATE (PROGN (TAGBODY (FLET ((%F3 NIL 0)) (UNWIND-PROTECT (FLET ((%F10 (F10-1) (LET ((*S6* (%F3))) (GO 6)))) (FUNCALL (FUNCTION %F10) F)))) 6 (LET ((*S1* (RESTART-BIND NIL (LABELS ((%F1 (F1-1) 3136)) (LET NIL (PROGV (QUOTE (*S5* *S1*)) (LIST (LABELS ((%F2 NIL (CATCH (QUOTE CT8) -11))) -70941710) (IF NIL (%F1 -1) 87)) (PROGN (TAGBODY (%F1 *S1*) 3 (BLOCK B2 (PROGN A)) TAG3) H))))))) 0)) 0))))) 1555 -22062210 85224215 -161218251003 78463284 730073 33930166854 37839245921) 0)
;; Loading (DEFTEST MISC.302 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -206837809920 -126404559104) A)) (DECLARE (TYPE (INTEGER -277874608640 -63724432) B)) (DECLARE (TYPE (INTEGER -2 0) C)) (DECLARE (TYPE (INTEGER -5992710 9946878) D)) (DECLARE (TYPE (INTEGER -4345390743552 -76504514048) E)) (DECLARE (TYPE (INTEGER -330 3826137) F)) (DECLARE (TYPE (INTEGER -517792898560 -1193868) G)) (DECLARE (TYPE (INTEGER 2018 98092396) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 1))) (FLET ((%F12 (F12-1 F12-2 &OPTIONAL (F12-3 0) (F12-4 (PROGN (TAGBODY (UNWIND-PROTECT (GO TAG6)) TAG6) (FLET ((%F1 (F1-1 F1-2) 0)) (APPLY (FUNCTION %F1) 0 0 (LIST)))))) 0)) (%F12 0 E))))) -195379170409 -30212852077 -1 -2082141 -1686846623470 360505 -324299330279 37218064) 0)
;; Loading (DEFTEST MISC.303 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -55724018 0) A)) (DECLARE (TYPE (INTEGER -4929718 2777256) B)) (DECLARE (TYPE (INTEGER 18939493568 24064422528) C)) (DECLARE (TYPE (INTEGER -13157393 112210531) D)) (DECLARE (TYPE (INTEGER -75775 -4883) E)) (DECLARE (TYPE (INTEGER 5071 1584913674240) F)) (DECLARE (TYPE (INTEGER -1 -1) G)) (DECLARE (TYPE (INTEGER -100 7017454141440) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 1))) (LABELS ((%F7 (F7-1 &OPTIONAL (F7-2 0) (F7-3 0) (F7-4 0)) 0)) (PROGN (DENOMINATOR (PROGN (LET ((*S6* (PROGN (TAGBODY (UNWIND-PROTECT (%F7 0 0 (GO TAG6) D)) TAG6 (RESTART-CASE 0)) 0))) 0) 0)) 0))))) -23410726 -4342503 20297113275 80145634 -17664 937086103773 -1 2923877584757) 0)
;; Loading (DEFTEST MISC.304 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -11679 1672) A)) (DECLARE (TYPE (INTEGER -359757 -216048) B)) (DECLARE (TYPE (INTEGER -46345706880 -1824) C)) (DECLARE (TYPE (INTEGER -18 18) D)) (DECLARE (TYPE (INTEGER -70852138 427028370944) E)) (DECLARE (TYPE (INTEGER -428904547840 535369082368) F)) (DECLARE (TYPE (INTEGER -4372225 83) G)) (DECLARE (TYPE (INTEGER -2 0) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 1))) (LABELS ((%F1 (F1-1 F1-2 F1-3) 0)) (RATIONALIZE (%F1 (PROGN (TAGBODY (LET ((V3 (%F1 (UNWIND-PROTECT (GO TAG2)) B 0))) 0) TAG2) 0) H (COMMON-LISP:HANDLER-CASE 0))))))) -7209 -223767 -42093806027 -9 132172281069 138363461574 -3751010 0) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.305 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -438 247) A)) (DECLARE (TYPE (INTEGER -93662232 112841) B)) (DECLARE (TYPE (INTEGER 8769 2766606) C)) (DECLARE (TYPE (INTEGER -33007133760 32531429568) D)) (DECLARE (TYPE (INTEGER 419 3712) E)) (DECLARE (TYPE (INTEGER 1628 20513914304) F)) (DECLARE (TYPE (INTEGER -1347290 47) G)) (DECLARE (TYPE (INTEGER -12 3030073088) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 0))) (FLET ((%F5 (F5-1 F5-2 &OPTIONAL (F5-3 0) (F5-4 0) (F5-5 0)) (PROGN (TAGBODY (UNWIND-PROTECT (GO TAG1)) TAG1) (COERCE (LET* ((*S4* (FLET ((%F1 NIL (LET* ((V7 (DPB 0 (BYTE 0 0) C))) A))) (PROGV (QUOTE (*S6* *S7*)) (LIST (%F1) 0) G)))) C) (QUOTE INTEGER))))) (IF (%F5 D 0 E 0 0) H 0))))) -58 -22237190 2055343 -8144832891 1213 19038103159 -1009345 929619162) 929619162)
;; Loading (DEFTEST MISC.306 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER 261 234565) A)) (DECLARE (TYPE (INTEGER -1454263719936 -3279802168) B)) (DECLARE (TYPE (INTEGER -1251120498 -49518770) C)) (DECLARE (TYPE (INTEGER 0 369) D)) (DECLARE (TYPE (INTEGER -12465203856 -45) E)) (DECLARE (TYPE (INTEGER -94321486 -91941853) F)) (DECLARE (TYPE (INTEGER -16528338864 11322249648) G)) (DECLARE (TYPE (INTEGER -1230549 -1143976) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 0))) (DENOMINATOR (PROGN (TAGBODY (UNWIND-PROTECT (GO TAG7)) TAG7) (LOGXOR F (MULTIPLE-VALUE-BIND (*S4*) (LOGXOR 0 (EXPT -2 1)) (TRUNCATE 0)))))))) 130724 -736795298357 -1221747467 326 -9775240900 -94105708 -2273680158 -1156846) 1)
;; Loading (DEFTEST MISC.307 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -2903632 1282236) A)) (DECLARE (TYPE (INTEGER 7 10741) B)) (DECLARE (TYPE (INTEGER -249635 214804) C)) (DECLARE (TYPE (INTEGER -50422 10469) D)) (DECLARE (TYPE (INTEGER -52337314 10771161) E)) (DECLARE (TYPE (INTEGER 0 5333060) F)) (DECLARE (TYPE (INTEGER -1 0) G)) (DECLARE (TYPE (INTEGER 1595835 4577573) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 1))) (FLET ((%F11 (F11-1 F11-2) 0)) (%F11 0 (UNWIND-PROTECT E (PROGN (TAGBODY (LET* ((V4 (PROGN (UNWIND-PROTECT (GO 0)) 0))) 0) 0) (LOGAND (COMMON-LISP:HANDLER-BIND NIL (LOGAND -15 -2 32578787 10349 E -24781944 -8)))))))))) 60336 1625 124302 -33193 -8095855 4995857 0 4572381) 0)
;; Loading (DEFTEST MISC.308 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -2806612475904 8750665416704) A)) (DECLARE (TYPE (INTEGER -3 10) B)) (DECLARE (TYPE (INTEGER -94336824 116591592) C)) (DECLARE (TYPE (INTEGER 456813135872 903636350976) D)) (DECLARE (TYPE (INTEGER -2364199833600 -172353318912) E)) (DECLARE (TYPE (INTEGER 717 1760915) F)) (DECLARE (TYPE (INTEGER -21 105) G)) (DECLARE (TYPE (INTEGER -3579048169472 -346272903168) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 0))) (LABELS ((%F7 (F7-1) (MULTIPLE-VALUE-PROG1 0 0 (RETURN-FROM %F7 (MASK-FIELD (BYTE 0 0) 0))))) (UNWIND-PROTECT (%F7 0)))))) 1951007924893 10 -49879990 614214833752 -1808568999586 1282634 99 -2783010573143) 0)
;; Loading (DEFTEST MISC.309 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -521338 12) A)) (DECLARE (TYPE (INTEGER -1787856009216 1182078822400) B)) (DECLARE (TYPE (INTEGER -3313 28535137344) C)) (DECLARE (TYPE (INTEGER -38914612 -25121536) D)) (DECLARE (TYPE (INTEGER 403073126400 2632230309888) E)) (DECLARE (TYPE (INTEGER -39663606528 -1238304) F)) (DECLARE (TYPE (INTEGER -103560 -70383) G)) (DECLARE (TYPE (INTEGER -894 -227) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 2))) (BLOCK B8 (MULTIPLE-VALUE-PROG1 (LOGAND (LOGIOR 0 (IF (LOGBITP 0 0) 0 (MULTIPLE-VALUE-BIND (V2) 0 0)))) (GCD (LET* ((*S4* 0)) (LOGIOR 0 (RETURN-FROM B8 (LET ((*S8* 0)) (ROUND 0)))))) 0 0))))) -275760 -565946697213 9650536069 -37585973 1536165173011 -12895970021 -102192 -534) 0 0)
;; Loading (DEFTEST MISC.310 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -2016726144 234357120) A)) (DECLARE (TYPE (INTEGER -10569521299456 -1307998945280) B)) (DECLARE (TYPE (INTEGER -45429002240 -17228484608) C)) (DECLARE (TYPE (INTEGER 228451840 1454976512) D)) (DECLARE (TYPE (INTEGER -4797 -2609) E)) (DECLARE (TYPE (INTEGER -21 36300536) F)) (DECLARE (TYPE (INTEGER -15983530 31646604) G)) (DECLARE (TYPE (INTEGER -208720272 -357) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 3))) (EXPT (LABELS ((%F14 (F14-1 F14-2) (PROGN (TAGBODY (+ (UNWIND-PROTECT (LABELS ((%F1 (F1-1) (GO TAG1))) (LET ((*S6* (%F1 D))) 0)))) TAG1 (+ (COMMON-LISP:HANDLER-BIND NIL (IF (<= -11215713 -819) (INTEGER-LENGTH (FLOOR (CONJUGATE F14-1) (MAX 12 (CEILING (BLOCK B2 (CATCH (QUOTE CT2) (IGNORE-ERRORS (FLET ((%F13 (F13-1) (LOGIOR 87 F14-2))) F14-1)))))))) (PROGV (QUOTE (*S8*)) (LIST 472865632) *S8*))))) 0))) (%F14 0 0)) 0)))) -28594854 -3859203606860 -40757449218 894599577 -4163 11621230 29558853 -92216802) 1)
;; Loading (DEFTEST MISC.311 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -1203392327680 -3017953) A)) (DECLARE (TYPE (INTEGER -34222 -1) B)) (DECLARE (TYPE (INTEGER -871294987 19) C)) (DECLARE (TYPE (INTEGER 717979131904 3341735845888) D)) (DECLARE (TYPE (INTEGER -7521858 3) E)) (DECLARE (TYPE (INTEGER -52 49) F)) (DECLARE (TYPE (INTEGER 18 43) G)) (DECLARE (TYPE (INTEGER -503567246 -46) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 2))) (LABELS ((%F2 (F2-1 F2-2 F2-3 &OPTIONAL (F2-4 (LET ((*S6* (PROGN (TAGBODY (FLET ((%F17 (F17-1 F17-2 F17-3) (GO 6))) (%F17 0 B 0)) 6) 0))) (COMPLEX (PROGN (TAGBODY (LABELS ((%F18 (F18-1 F18-2 &OPTIONAL (F18-3 0) (F18-4 F)) 0)) (APPLY (FUNCTION %F18) G 0 0 (LIST))) 0) 0) 0))) (F2-5 0) (F2-6 0)) 0)) (%F2 0 0 F))))) -738307241633 -25016 -846570136 2181696281793 -983259 24 36 -185316211) 0)
;; Loading (DEFTEST MISC.312 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -18334222 14354736) A)) (DECLARE (TYPE (INTEGER 11163582 6421184978944) B)) (DECLARE (TYPE (INTEGER -13690431913984 -64765792960) C)) (DECLARE (TYPE (INTEGER -12750925 31112834) D)) (DECLARE (TYPE (INTEGER -5188669232 2246825616) E)) (DECLARE (TYPE (INTEGER -31235593088 -134) F)) (DECLARE (TYPE (INTEGER -1 -1) G)) (DECLARE (TYPE (INTEGER -647589424 12392126736) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 1))) (LET ((*S4* (IF (PROGN (TAGBODY (UNWIND-PROTECT (GO 2)) 2) 0) (NUMERATOR (LET* ((V1 (LET ((*S6* 0)) (LOGAND B (RATIONALIZE (COERCE 0 (QUOTE INTEGER))))))) 0)) 0))) 0)))) 7112398 3547401482305 -12827294644277 23312291 -444957551 -5443955020 -1 4998457143) 0)
;; Loading (DEFTEST MISC.313 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER 55474 401001) A)) (DECLARE (TYPE (INTEGER -8359558987776 8684176949248) B)) (DECLARE (TYPE (INTEGER -54332 116292) C)) (DECLARE (TYPE (INTEGER 0 0) D)) (DECLARE (TYPE (INTEGER -609311104000 959776553984) E)) (DECLARE (TYPE (INTEGER -2031580 3834807) F)) (DECLARE (TYPE (INTEGER -10955 2549) G)) (DECLARE (TYPE (INTEGER -8362590032 -210369) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 1))) (DOTIMES (IV1 3 0) (LABELS ((%F6 (F6-1 F6-2 F6-3 &OPTIONAL (F6-4 (FLET ((%F3 (F3-1 F3-2 F3-3 &OPTIONAL (F3-4 0)) (FLET ((%F11 NIL 0)) (ASH (PROGN (TAGBODY (LABELS ((%F3 (F3-1 &OPTIONAL (F3-2 (GO TAG4))) 0)) (%F3 0)) TAG4) 0) (MIN 42 (CONJUGATE (COERCE (CONJUGATE (LET ((V9 (%F11))) F3-1)) (QUOTE INTEGER)))))))) (%F3 C 0 A))) (F6-5 0)) 0)) (APPLY (FUNCTION %F6) 0 0 H NIL)))))) 93287 3146418586486 -51786 0 -63479145888 1935918 -10058 -2033798238) 0)
;; Loading (DEFTEST MISC.314 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H) (DECLARE (TYPE (INTEGER -176150296 698) A)) (DECLARE (TYPE (INTEGER -62799871488 -56234210816) B)) (DECLARE (TYPE (INTEGER -1 1) C)) (DECLARE (TYPE (INTEGER 31 215808) D)) (DECLARE (TYPE (INTEGER -3 -1) E)) (DECLARE (TYPE (INTEGER -3 3387651) F)) (DECLARE (TYPE (INTEGER -14370846720 -56648624) G)) (DECLARE (TYPE (INTEGER -8316238784 -6221617344) H)) (DECLARE (IGNORABLE A B C D E F G H)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 2))) (PROGN (TAGBODY (UNWIND-PROTECT (LET ((V10 (LET* ((V7 (IF (GO TAG6) 0 0))) 0))) 0)) TAG6 (LET ((V7 (FLET ((%F11 NIL 0)) (FLET ((%F13 (F13-1 F13-2 F13-3) F13-2)) (FUNCALL (FUNCTION %F13) 0 A (%F11)))))) 0)) 0)))) -90583503 -61289371485 -1 175888 -3 3257970 -3264725617 -6816839328) 0)
;; Loading (DEFTEST MISC.316 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 0))) (UNWIND-PROTECT 0 (PROGN (TAGBODY (BIT #*000000111 (MIN 8 (MAX 0 A))) TAG5 (FLET ((%F17 (F17-1 F17-2 F17-3) (COMPLEX (NUMERATOR (GO TAG4)) 0))) C) TAG4) C))))) 1 2) 0)
;; Loading (DEFTEST MISC.317 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 3))) (CATCH (QUOTE CT4) (ELT (QUOTE (40760)) (MIN 0 (MAX 0 (LET* ((V3 (* (THROW (QUOTE CT4) 0) 0))) 0))))))))) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.318 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -2050548150 4917) A)) (DECLARE (TYPE (INTEGER -4 1) B)) (DECLARE (TYPE (INTEGER 99335934976 442465125376) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 0))) (IF (RATIONALIZE (LABELS ((%F12 (F12-1) (IF C 0 (BIT #*101010011000011 (MIN 14 (MAX 0 0)))))) (IF (> 0 C) 0 (%F12 0)))) (PROGN (EXPT (FLET ((%F18 (F18-1 F18-2 &OPTIONAL (F18-3 0) (F18-4 C) (F18-5 B)) 0)) (APPLY (FUNCTION %F18) B B 0 0 NIL)) 0) A) 0)))) 10 1 99335934976) 10)
;; Loading (DEFTEST MISC.319 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -626615938 3649977016320) A)) (DECLARE (TYPE (INTEGER -3615553 6013683) B)) (DECLARE (TYPE (INTEGER -746719 1431737508) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 3))) (IF (LOGBITP 0 (FLET ((%F10 (F10-1 F10-2 F10-3) B)) (FLET ((%F4 (F4-1 F4-2) (APPLY (FUNCTION %F10) (%F10 0 A 0) 0 C NIL))) (COMPLEX (%F4 0 0) 0)))) 0 0)))) 2378435476701 1646880 246794654) 0)
;; Loading (DEFTEST MISC.320 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 0))) (CATCH (QUOTE CT2) (ELT (QUOTE (102)) (FLET ((%F12 NIL (REM 0 -43))) (MULTIPLE-VALUE-CALL (FUNCTION %F12) (VALUES))))))))) 102)
;; Loading (DEFTEST MISC.320A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 0))) (REDUCE (QUOTE *) (LIST (ELT (QUOTE (10 20 30 40 50)) B) (EXPT (REDUCE (FUNCTION (LAMBDA (LMV1 LMV3) (MOD LMV3 15))) (VECTOR 0 0)) 0) (REM 0 -71)))))) 2) 0)
;; Loading (DEFTEST MISC.320B (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -690191 -454473) A)) (DECLARE (TYPE (INTEGER -459197 -62) B)) (DECLARE (TYPE (INTEGER 445621505781 8489194559765) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 3))) (ELT (QUOTE (3327764 3386241)) (MIN 1 (MAX 0 (REDUCE (FUNCTION (LAMBDA (LMV6 LMV5) (MOD 0 (MIN -86 0)))) (LIST 0 0)))))))) -512398 -156405 1140919327630) 3327764)
;; Loading (DEFTEST MISC.321 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 3))) (CATCH (QUOTE CT2) (LET* ((V3 (- (IF P (THROW (QUOTE CT2) :GOOD) 0)))) :BAD))))) T) :GOOD)
;; Loading (DEFTEST MISC.322 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 2))) (LOGORC2 (LABELS ((%F14 (F14-1) A)) (%F14 0)) (REDUCE (FUNCTION (LAMBDA (LMV1 LMV2) A)) (LIST 0 0)))))) 3151096069) -1)
;; Loading (DEFTEST MISC.323 (LET* ((TAIL (QUOTE (:FROM-END T))) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 2))) (EVAL (QUOTE (REDUCE (FUNCTION LOGIOR) (VECTOR (REDUCE (FUNCTION LOGAND) (VECTOR 0 0) SYSTEM.INTERNALS::BQ-COMMA TAIL) 0) SYSTEM.INTERNALS::BQ-COMMA TAIL))))))) (FUNCALL (COMPILE NIL FORM))) 0)
;; Loading (DEFTEST MISC.324 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 3))) (LABELS ((%F6 (F6-1) (MULTIPLE-VALUE-SETQ (A) 0))) (REDUCE (FUNCTION (LAMBDA (LMV4 LMV3) A)) (LIST (%F6 0) 2)))))) 1) 0)
;; Loading (DEFTEST MISC.325 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -1659358 3099614928896) A)) (DECLARE (TYPE (INTEGER -492625 197903) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 1))) (REDUCE (FUNCTION (LAMBDA (LMV5 LMV6) (MULTIPLE-VALUE-SETQ (A) 2443855591508))) (VECTOR B A 0 0) :FROM-END T)))) 1 2) 2443855591508)
;; Loading (DEFTEST MISC.326 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 155 7955) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 0))) (FLET ((%F13 (F13-1) (SHIFTF B 3019))) (+ B (%F13 0)))))) 200) 400)
;; Loading (DEFTEST MISC.327 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -67668056 -55) A)) (DECLARE (TYPE (INTEGER -586950907 -10945000) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 1))) (LABELS ((%F15 (F15-1) (ELT #(1073730663 1073689230 596123606 1073713997 311527378 186184643 1073713230 1316881) (MIN 7 (MAX 0 (CATCH (QUOTE CT7) (REDUCE (FUNCTION MIN) (LIST 0 B (CATCH (QUOTE CT7) (THROW (QUOTE CT7) F15-1)) 0) :START 1 :FROM-END T))))))) (%F15 0))))) -38276611 -11001852) 1073730663)
;; Loading (DEFTEST MISC.327A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E) (DECLARE (NOTINLINE MAX VECTOR REDUCE)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 2))) (REDUCE (FUNCTION (LAMBDA (LMV6 LMV3) LMV3)) (VECTOR 0 (MAX 0) 0 0 (CATCH (QUOTE CT2) (CATCH (QUOTE CT2) (THROW (QUOTE CT2) 0))) 0 E 0) :END 2 :FROM-END T)))) 68664683637 328245 881497115 -303855 311427) 0)
;; Loading (DEFTEST MISC.328 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -11368047588 14412128900) A)) (DECLARE (TYPE (INTEGER -10 0) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 0))) (IF (LOGBITP 0 (IF (OR T NIL) (SETF A -2616861879) 0)) 0 0)))) -4836700955 -1) 0)
;; Loading (DEFTEST MISC.329 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -725661427 405092) A)) (DECLARE (TYPE (INTEGER 84176291516 98216856233) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 0))) (LET ((*S2* (CASE B ((53651 62711 29537 25305 62250) 0) (T 0)))) (DECLARE (SPECIAL *S2*)) (SETQ A -688292831))))) -406606203 84436335326) -688292831)
;; Loading (DEFTEST MISC.330 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -12816761394938 -8706928710678) A)) (DECLARE (TYPE (INTEGER -3683497948554 427) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 2))) (LCM (BLOCK B8 (SIGNUM (RETURN-FROM B8 A))))))) -12715609319989 -582329850697) 12715609319989)
;; Loading (DEFTEST MISC.331 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -777352478 239900) A)) (DECLARE (TYPE (INTEGER -63500163479 -8671) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 3))) (IF (IF (>= 0) T T) (SETQ B -25319949896) B)))) 0 -10000) -25319949896)
;; Loading (DEFTEST MISC.332 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (NOTINLINE MAX LOGORC1 NUMERATOR REM)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 2))) (REM (PROGN (TAGBODY (NUMERATOR (LOGORC1 0 (GO TAG5))) TAG5) 0) (MAX 93 0))))) -801 17641908) 0)
;; Loading (DEFTEST MISC.333 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (NOTINLINE LOGXOR)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 3))) (LOGXOR (PROGN (TAGBODY (LET* ((*S4* (PROGN (GO 1) 0))) 0) 1) 0)))))) 0)
;; Loading (DEFTEST MISC.334 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 1892675246514 8763564964618) A)) (DECLARE (TYPE (INTEGER -1353 -456) B)) (DECLARE (TYPE (INTEGER 2010840649 2119165101) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 1))) (+ (BLOCK B6 (EXPT (RETURN-FROM B6 B) 0)))))) 3966745735633 -1123 2030094113) -1123)
;; Loading (DEFTEST MISC.335 (LET ((C 10)) (DENOMINATOR (PROGN (TAGBODY (REALPART (LOOP FOR LV4 BELOW 2 SUM (GO 0))) 0) C))) 1)
;; Loading (DEFTEST MISC.336 (PROG2 (PROGN (TAGBODY (- (COMMON-LISP:HANDLER-CASE (GO TAG2))) TAG2) 0) 0) 0)
;; Loading (DEFTEST MISC.337 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 2) (DEBUG 0) (COMPILATION-SPEED 0))) (IMAGPART (BLOCK B8 (LOGIOR (BLOCK B7 (RETURN-FROM B8 225480400))))))))) 0)
;; Loading (DEFTEST MISC.338 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (CONJUGATE (BLOCK B8 (MAX (IF C (RETURN-FROM B8 0) 0))))))) 10)) 0)
;; Loading (DEFTEST MISC.339 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 0))) (BLOCK B1 (REDUCE (FUNCTION MIN) (LIST (RETURN-FROM B1 0)) :END 1 :START 0 :FROM-END T))))))) 0)
;; Loading (DEFTEST MISC.340 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -4379340 -1962) A)) (DECLARE (TYPE (INTEGER 1304043 3225940) B)) (DECLARE (TYPE (INTEGER -3229571579853 -180689150012) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 2))) (COERCE (RATIONALIZE (PROGN (TAGBODY (REDUCE (FUNCTION LOGAND) (LIST B 0 (GO TAG3)) :FROM-END T) TAG3) 0)) (QUOTE INTEGER))))) -1625211 3052955 -2091182035681) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.341 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 3))) (LOGEQV (BLOCK B6 (LOGEQV (CASE 0 ((45293 29462 60403) (RETURN-FROM B6 0)) (T C)))))))) 10)) 10)
;; Loading (DEFTEST MISC.342 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 2))) (PROGN (TAGBODY (IMAGPART (DOTIMES (IV3 0 A) (GO 4))) 4) 0)))) 1)) 0)
;; Loading (DEFTEST MISC.343 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 2))) (MASK-FIELD (BYTE 0 0) (BLOCK B8 (REDUCE (QUOTE LOGIOR) (LIST (RETURN-FROM B8 0) 0 0) :END 3 :START 0 :FROM-END T)))))))) 0)
;; Loading (DEFTEST MISC.344 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -3464434 12316202) A)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 2))) (PROGN (TAGBODY (GCD (EXPT (SETF A -2612809) 0) (GO 5)) 5) A)))) 1891348) -2612809)
;; Loading (DEFTEST MISC.345 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -1968 -1759) A)) (DECLARE (TYPE (INTEGER 91 2293818743282) B)) (DECLARE (TYPE (INTEGER -843793650839 -2) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 3))) (MAX (BLOCK B1 (CONJUGATE (DOTIMES (IV3 0 (BIT #*010 (MIN 2 (MAX 0 (RETURN-FROM B1 0))))) (PROGN 0)))) (SBIT #*0001011010010 (MIN 12 (MAX 0 0))))))) -1957 523078358699 -634832888815)) 0)
;; Loading (DEFTEST MISC.345A (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -3011346550 1630587670) C)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 1))) (PROGN (TAGBODY (DOTIMES (IV2 0 (- 0 (GO 7))) (PROGN 0)) 7 (PROGN (MASK-FIELD (BYTE 0 0) 0) C)) 0)))) 1)) 0)
;; Loading (DEFTEST MISC.346 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 2))) (BIT #*011100 (MIN 5 (MAX 0 (BLOCK B8 (AREF #(122010971004 126555236004) (MIN 1 (MAX 0 (PROGN (RETURN-FROM B8 191438621) 0)))))))))))) 0)
;; Loading (DEFTEST MISC.347 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 1))) (COMPLEX (* (BLOCK B2 (BOOLE BOOLE-XOR (LOGXOR (RETURN-FROM B2 0)) 0))) 0))))) 0)
;; Loading (DEFTEST MISC.348 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 1))) (MAX (CONJUGATE (SETQ A -4178265097)) (IF (> C 0) 0 A))))) -2408319173 -4307532101272) -4178265097)
;; Loading (DEFTEST MISC.349 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 2))) (MOD (LET ((*S7* (BLOCK B7 (LOGANDC2 (+ (RETURN-FROM B7 0)) 0)))) -10) (MAX 26 0)))))) 16)
;; Loading (DEFTEST MISC.350 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 1) (DEBUG 2) (COMPILATION-SPEED 3))) (PROGN (TAGBODY (COMPLEX (- 0 (IF (AND T) 0 (GO TAG1))) 0) TAG1) 0)))))) 0)
;; Loading (DEFTEST MISC.351 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -598962457711 -2902) C)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 3))) (LOGNOR C (BLOCK B1 (LOOP FOR LV3 BELOW 1 SUM (IF (/= 0) (RETURN-FROM B1 0) C))))))) -392248104420)) 392248104419)
;; Loading (DEFTEST MISC.352 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (SAFETY 3) (DEBUG 3) (COMPILATION-SPEED 1))) (PROGN (TAGBODY (+ 0 (IF (< 0) (GO 5) 0)) 5) 0)))))) 0)
;; Loading (DEFTEST MISC.353 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -8 -2) A)) (DECLARE (TYPE (INTEGER -67321 14697029362) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 2))) (EXPT (BLOCK B2 (LOOP FOR LV1 BELOW 3 SUM (PROG2 B 0 (EXPT (CASE 0 ((-13960 -57685 -37843 -34222 -14273 -40931 -2688) (RETURN-FROM B2 0)) (T A)) 0)))) 0)))) -7 772373806)) 1)
;; Loading (DEFTEST MISC.354 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -1309 67082465417) A)) (DECLARE (TYPE (INTEGER -7824641338734 -832606641) B)) (DECLARE (TYPE (INTEGER 7473698771 3542216118742) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 2))) (+ 0 (PROGN (TAGBODY (IF (IF (>= B (GO 3)) NIL T) A C) 3) 0))))) 29329060987 -4964942044116 512158612507) 0)
;; Loading (DEFTEST MISC.355 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER -1390043946499 -115168466439) C)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 1) (COMPILATION-SPEED 2))) (+ 0 (COERCE (PROGN (TAGBODY (IF (<= -1 (GO TAG1)) 0 C) TAG1) 0) (QUOTE INTEGER)))))) -115168466439) 0)
;; Loading (DEFTEST MISC.356 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 3))) (LET ((*S7* 0)) (DOTIMES (IV2 0 0) (BLOCK B3 (BLOCK B3 (BLOCK B3 (SETQ *S7* (RETURN-FROM B3 0)))))))))))) 0)
;; Loading (DEFTEST MISC.357 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -1750881587721 -327383867) B)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 2) (DEBUG 3) (COMPILATION-SPEED 3))) (DENOMINATOR (BLOCK B2 (LET* ((*S8* 0)) (SETQ *S8* (CASE 0 ((-26733 -244 -26253 -50028) 0) (T (RETURN-FROM B2 B)))))))))) -1153135130306)) 1)
;; Loading (DEFTEST MISC.358 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 1))) (RATIONALIZE (LET* ((*S1* 0)) (BLOCK B3 (CONJUGATE (LET* ((V10 (IF (LDB-TEST (BYTE 0 0) 0) (RETURN-FROM B3 *S1*) 0))) (SETQ *S1* (RETURN-FROM B3 0)))))))))))) 0)
;; Loading (DEFTEST MISC.359 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -477801566869 432060432661) A)) (DECLARE (TYPE (INTEGER 366578392 525704751) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 1))) (MAX (CASE B ((0 -3 -2 -2 -3) (PROGN (TAGBODY (LOOP FOR LV1 BELOW 2 COUNT (LET* ((*S1* A)) (SETQ *S1* (GO 4)))) 4) 0)) (T 0)))))) 287358622300 400248608)) 0)
;; Loading (DEFTEST MISC.360 (LET ((C :GOOD)) (TAGBODY (DOTIMES (J 1 (SETF C :BAD)) (GO DONE)) DONE) C) :GOOD)
;; Loading (DEFTEST MISC.361 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE BOOLE VALUES DENOMINATOR LIST)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 2))) (CATCH (QUOTE CT6) (PROGV (QUOTE (*S8*)) (LIST 0) (LET ((V9 (IGNORE-ERRORS (THROW (QUOTE CT6) 0)))) (DENOMINATOR (PROGV NIL NIL (VALUES (BOOLE BOOLE-AND 0 V9)))))))))) 1 2 3) 0)
;; Loading (DEFTEST MISC.362 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B G H) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 3))) (CATCH (QUOTE CT5) (UNWIND-PROTECT (LABELS ((%F15 (F15-1 F15-2 F15-3) (RATIONAL (THROW (QUOTE CT5) 0)))) (%F15 0 (APPLY (FUNCTION %F15) 0 H (PROGN (PROGV (QUOTE (*S2* *S5*)) (LIST 0 (%F15 0 G 0)) B) 0) NIL) 0)) (COMMON-LISP:HANDLER-CASE 0)))))) 1 2 3) 0)
;; Loading (DEFTEST MISC.363 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -17286401550789 15753784105886) A)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 2) (DEBUG 0) (COMPILATION-SPEED 3))) (IF (NOT (>= 0 (SHIFTF A 110236462073))) 0 (ELT (QUOTE (30 101 13 2 10 52 89 57)) (MIN 7 (MAX 0 A))))))) -3647332298473) 57)
;; Loading (DEFTEST MISC.364 (DOTIMES (IV1 2 0) (IF (> IV1 IV1) (SVREF #(2002 3778 1998 3466 530 3279 2033 521 4085) (MIN 8 (MAX 0 IV1))) 0)) 0)
;; Loading (DEFTEST MISC.365 (LET* ((FN1 (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -2 21) A)) (DECLARE (TYPE (INTEGER -5651364356 4324101092) B)) (DECLARE (TYPE (INTEGER -30766087 28182568) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 1))) (COERCE (LOGXOR B -1) (QUOTE INTEGER))))) (FN2 (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE LOGXOR COERCE)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 2))) (COERCE (LOGXOR B -1) (QUOTE INTEGER))))) (VALS (QUOTE (9 -328421075 -6406890))) (V1 (APPLY (COMPILE NIL FN1) VALS)) (V2 (APPLY (COMPILE NIL FN2) VALS))) (IF (EQL V1 V2) :GOOD (LIST V1 V2))) :GOOD)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.366 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F G H I) (DECLARE (TYPE (INTEGER 10 65866342) A)) (DECLARE (TYPE (INTEGER 151 702748905609) B)) (DECLARE (TYPE (INTEGER -60442925 167939283) C)) (DECLARE (TYPE (INTEGER 7706 10562) D)) (DECLARE (TYPE (INTEGER -97180326158 17496) E)) (DECLARE (TYPE (INTEGER -73249 -51989) F)) (DECLARE (TYPE (INTEGER -12 2718) G)) (DECLARE (TYPE (INTEGER -37832 591244) H)) (DECLARE (TYPE (INTEGER -2579781276 2108461452) I)) (DECLARE (IGNORABLE A B C D E F G H I)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 2))) (ELT (QUOTE (11751 8554 7393 1924 3418)) (MIN 4 (MAX 0 (BLOCK B4 (NUMERATOR (FLET ((%F5 (F5-1 F5-2 F5-3 &OPTIONAL (F5-4 (PROG1 0 (RETURN-FROM B4 0) 0)) (F5-5 D) (F5-6 0)) 0)) (NUMERATOR (APPLY (CONSTANTLY 0) 0 0 (RATIONALIZE (UNWIND-PROTECT (%F5 0 C (%F5 0 C (%F5 0 0 0 H (%F5 0 0 0) I) A)) (IGNORE-ERRORS 0))) 0 NIL))))))))))) 21956127 524275646496 101890987 8762 -88607922426 -55959 2177 147174 38469170) 11751)
;; Loading (DEFTEST MISC.367 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 11557968 115977463) A)) (DECLARE (TYPE (INTEGER -89510 -20616) B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 1))) (RATIONAL (FLET ((%F17 (F17-1 F17-2) 0)) (%F17 (NUMERATOR (%F17 (DENOMINATOR (CATCH (QUOTE CT5) (APPLY (CONSTANTLY 0) 0 (UNWIND-PROTECT (CATCH (QUOTE CT2) (THROW (QUOTE CT5) (PROGN (%F17 A B) A)))) NIL))) 0)) (%F17 0 A))))))) 112475717 -25829) 0)
;; Loading (DEFTEST MISC.368 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -5 -2) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 1))) (IF (AND (NOT (NOT (> A (NUMERATOR (SETF A -4))))) (LOGBITP 0 (CONJUGATE A))) 0 0)))) -3) 0)
;; Loading (DEFTEST MISC.369 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E) (DECLARE (TYPE (INTEGER -15256078323 33828721319) A)) (DECLARE (TYPE (INTEGER -44368 22872) B)) (DECLARE (TYPE (INTEGER -7623 -7522) C)) (DECLARE (TYPE (INTEGER -53 289) D)) (DECLARE (TYPE (INTEGER -1853649832248 2196352552304) E)) (DECLARE (IGNORABLE A B C D E)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 3))) (FLET ((%F2 (F2-1 &OPTIONAL &KEY (KEY1 0) (KEY2 E)) (LABELS ((%F5 (F5-1 F5-2 F5-3 &OPTIONAL &KEY (KEY1 (AREF #(397) (MIN 0 (MAX 0 (LET ((V7 (MAKE-ARRAY NIL :INITIAL-ELEMENT D))) (REDUCE (FUNCTION (LAMBDA (LMV5 LMV6) KEY1)) (VECTOR F2-1 0) :START 0)))))) &ALLOW-OTHER-KEYS) 0)) 0))) B)))) -2821485338 -35420 -7622 135 9592294022) -35420)
;; Loading (DEFTEST MISC.370 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -3070433 6) A)) (DECLARE (TYPE (INTEGER -5 -3) B)) (DECLARE (TYPE (INTEGER -4433759745778 -1) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 0) (DEBUG 2) (COMPILATION-SPEED 3))) (FLET ((%F15 (F15-1 F15-2 &OPTIONAL (F15-3 0) (F15-4 (DENOMINATOR (SETQ C -4214677583716))) (F15-5 0) &KEY (KEY1 C) &ALLOW-OTHER-KEYS) (PROGV (QUOTE (*S1* *S5* *S7*)) (LIST F15-2 0 F15-1) KEY1))) (%F15 0 (%F15 C 0) 0))))) -1233959 -4 -2643533316361) -4214677583716)
;; Loading (DEFTEST MISC.371 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -7288 10764) A)) (DECLARE (TYPE (INTEGER -7 24) B)) (DECLARE (TYPE (INTEGER 7951930344 11209871544) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 0))) (RATIONALIZE (BLOCK B1 (IF B (RETURN-FROM B1 (PROGN (TAGBODY (RETURN-FROM B1 (LET* ((*S1* (CONS (GO TAG3) 0))) (DECLARE (DYNAMIC-EXTENT *S1*)) 0)) TAG3) 0)) 0)))))) -5566 9 10557204445)) 0)
;; Loading (DEFTEST MISC.372 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -738508 627) A)) (DECLARE (TYPE (INTEGER -100241328874 104421) B)) (DECLARE (TYPE (INTEGER -71651668566 4932238952300) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 2) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 2))) (SBIT #*0 (MIN 0 (MAX 0 (MULTIPLE-VALUE-BIND (V1) (CONS C (TRUNCATE 0 (MIN -42 0))) (CDR V1)))))))) -657195 -10801112339 -4291316763) 0)
;; Loading (DEFTEST MISC.373 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 0 179061) A)) (DECLARE (TYPE (INTEGER -15793 42532) B)) (DECLARE (TYPE (INTEGER -2 0) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 0))) (REDUCE (QUOTE LOGXOR) (LIST 0 B 0 0 A 0 0 0 (BLOCK B6 (LET* ((V6 (CONS (IF C (RETURN-FROM B6 0) 0) B))) 0)) 0) :END 6 :FROM-END T)))) 141814 1445 -2)) 142419)
;; Loading (DEFTEST MISC.374 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -99 4) A)) (DECLARE (TYPE (INTEGER 35621436 36172433) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 0))) (LOGNAND (LET ((V6 0)) (DECLARE (DYNAMIC-EXTENT V6)) V6) (BLOCK B6 (LET* ((V10 (CONS (EXPT (CASE 0 ((30207) (RETURN-FROM B6 0)) (T B)) 0) 0))) (DECLARE (DYNAMIC-EXTENT V10)) 0)))))) -57 35725118)) -1)
;; Loading (DEFTEST MISC.375 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E F) (DECLARE (TYPE (INTEGER -3172868 25583841) A)) (DECLARE (TYPE (INTEGER -8176159 1565888775976) B)) (DECLARE (TYPE (INTEGER -2601325109 147819602) C)) (DECLARE (TYPE (INTEGER -502316251909 515874281072) D)) (DECLARE (TYPE (INTEGER 174 2604648) E)) (DECLARE (TYPE (INTEGER 1627646459 3124243119) F)) (DECLARE (IGNORABLE A B C D E F)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 3) (DEBUG 2) (COMPILATION-SPEED 2))) (LET* ((*S6* (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ADJUSTABLE T))) (IF (LOGBITP 0 (DENOMINATOR (PROG2 (TRUNCATE (DOTIMES (IV3 0 0) (PROGN 0))) (MULTIPLE-VALUE-BIND (*S7*) (CONS D 0) (CDR *S7*))))) 0 0))))) 12851164 182468232812 -2243976802 309299185674 2538150 1855615980) 0)
;; Loading (DEFTEST MISC.376 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 0))) (DOTIMES (IV4 3 (MULTIPLE-VALUE-BIND (*S6*) (CONS 0 0) (PROGN (CDR *S6*) 0))) (FLOOR (RATIONAL (LET ((*S2* (RATIONAL (COMMON-LISP:HANDLER-CASE 0)))) 0)))))))) 0)
;; Loading (DEFTEST MISC.377 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (E) (DECLARE (TYPE (INTEGER -46778182694 512) E)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 3) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 3))) (IF (BLOCK B3 (NUMERATOR (PROGN (TAGBODY (TRUNCATE (DOTIMES (IV3 0 0) (BLOCK B3 0))) (MULTIPLE-VALUE-BIND (*S5*) (CONS 0 E) (RATIONALIZE (CDR *S5*)))) 0))) 0 0)))) 10) 0)
;; Loading (DEFTEST MISC.378 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 2))) (DOTIMES (IV4 3 0) (RESTART-CASE (ROUND (MULTIPLE-VALUE-BIND (*S6*) (CONS C 0) (CAR *S6*)))))))) 1) 0)
;; Loading (DEFTEST MISC.379 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 2) (DEBUG 2) (COMPILATION-SPEED 1))) (VALUES (FLOOR 0) (MULTIPLE-VALUE-BIND (V3) (CONS 0 0) (CAR V3))))))) 0 0)
;; Loading (DEFTEST MISC.380 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -1397457 1846252) A)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 3))) (LET ((V9 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0))) (DECLARE (DYNAMIC-EXTENT V9)) (BLOCK B8 (LET ((*S1* 0)) (LET ((*S4* (LET ((*S1* (RETURN-FROM B8 (RATIONAL (SETF (AREF V9) (DEPOSIT-FIELD -5 (BYTE 20 30) A)))))) 0))) (LET ((*S8* (CONS 0 0))) 0)))))))) 399997) 1125898833500797)
;; Loading (DEFTEST MISC.381 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -1397457 1846252) A)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 3))) (LET ((V9 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0))) (DECLARE (DYNAMIC-EXTENT V9)) (BLOCK B8 (LET ((S1 0)) (LET ((S4 (LET ((S1 (RETURN-FROM B8 (RATIONAL (SETF (AREF V9) (DEPOSIT-FIELD -5 (BYTE 20 30) A)))))) 0))) (LET ((S8 (CONS 0 0))) 0)))))))) 399997) 1125898833500797)
;; Loading (DEFTEST MISC.382 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -65822755520 31689335872) B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 2) (SAFETY 3) (DEBUG 0) (COMPILATION-SPEED 1))) (LET ((S8 (MAKE-ARRAY NIL :INITIAL-ELEMENT (CATCH (QUOTE CT4) (COMPLEX (DOTIMES (IV1 1 0) (RATIONAL (THROW (QUOTE CT4) B))) 0))))) (ELT (QUOTE (13423701584)) (MIN 0 (MAX 0 (RATIONAL (LET ((S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0))) (IF (LDB-TEST (BYTE 0 0) (SHIFTF (AREF S8) (AREF S8))) 0 0)))))))))) -38169486910) 13423701584)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.383 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -93650 118967004056) A)) (DECLARE (TYPE (INTEGER -429173946 -3892) B)) (DECLARE (TYPE (INTEGER -229669685 -50537386) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 1) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 2))) (LOGORC2 (LET* ((*S3* (CONS 0 A))) (DECLARE (DYNAMIC-EXTENT *S3*)) (SHIFTF C -124766263)) 411942919)))) 79909316946 -347537841 -210771963) -142606339)
;; Loading (DEFTEST MISC.384 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (CATCH (QUOTE CT8) (THROW (QUOTE CT8) (CATCH (QUOTE CT7) 0)))))))) 0)
;; Loading (DEFTEST MISC.385 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (VALUES 1 (CATCH (QUOTE CT2) 2))))))) 1 2)
;; Loading (DEFTEST MISC.386 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (VALUES (RATIONALIZE (CATCH (QUOTE CT1) 1)) 2)))))) 1 2)
;; Loading (DEFTEST MISC.387 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (BLOCK B1 (CATCH (QUOTE CT1) (THROW (QUOTE CT1) (RETURN-FROM B1 0))))))))) 0)
;; Loading (DEFTEST MISC.388 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 200077 60836768) A)) (DECLARE (TYPE (INTEGER 339831915 371006999) B)) (DECLARE (TYPE (INTEGER -13 5553) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 0) (DEBUG 0) (COMPILATION-SPEED 0))) (DOTIMES (IV4 2 0) (MULTIPLE-VALUE-SETQ (C) 4212))))) 8959928 366395687 5048) 0)
;; Loading (DEFTEST MISC.389 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -49972981888 -48068810368) A)) (DECLARE (TYPE (INTEGER -452283089 -27620701) B)) (DECLARE (TYPE (INTEGER -24815 15089) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 1) (SAFETY 2) (DEBUG 1) (COMPILATION-SPEED 0))) (MULTIPLE-VALUE-SETQ (C) 8015)))) -49966124671 -68547159 12944) 8015)
;; Loading (DEFTEST MISC.390 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -257 -140) A)) (DECLARE (TYPE (INTEGER -1 1069496658) B)) (DECLARE (TYPE (INTEGER -4 2001960914944) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 1) (DEBUG 0) (COMPILATION-SPEED 1))) (LABELS ((%F12 (F12-1 &OPTIONAL (F12-2 (SETQ B 63838027)) &KEY (KEY1 0) (KEY2 0)) B)) (BOOLE BOOLE-ORC2 B (LET ((*S3* (%F12 0))) -14)))))) -173 1028908375 1289968133290) 1028908383)
;; Loading (DEFTEST MISC.391 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (SAFETY 0) (DEBUG 1) (COMPILATION-SPEED 3))) (LET* ((V5 (CONS B B))) (DECLARE (DYNAMIC-EXTENT V5)) A)))) (QUOTE X) (QUOTE Y)) X)
;; Loading (DEFTEST MISC.392 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (NOTINLINE /=)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 3))) (PROG2 0 0 (LOOP FOR LV4 BELOW 3 COUNT (OR B (/= B))))))) 1 2) 0)
;; Loading (DEFTEST MISC.393 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -995205 1035654) A)) (DECLARE (TYPE (INTEGER 473 114804994247) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (DEBUG 3) (SPEED 2) (COMPILATION-SPEED 0) (SPACE 3) (SAFETY 3))) (LABELS ((%F7 (F7-1 F7-2 F7-3 &OPTIONAL (F7-4 (LCM (IF (>= B A) 0 A))) (F7-5 0) &KEY) 0)) (PROGN (%F7 (%F7 B A A B) B 0) 0))))) 447930 66120263479) 0)
;; Loading (DEFTEST MISC.393A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -76 86) A)) (DECLARE (TYPE (INTEGER -13771285280 109) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SAFETY 3) (SPACE 1) (DEBUG 2) (COMPILATION-SPEED 3) (SPEED 3))) (DOTIMES (IV1 2 0) (CASE (MIN -3693810 A IV1) ((26 -4) (LDB (BYTE 13 0) A)) (T B)))))) 56 -1579426331) 0)
;; Loading (DEFTEST MISC.394 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -76645001 98715919) A)) (DECLARE (TYPE (INTEGER 0 856472753903) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 0) (DEBUG 3) (COMPILATION-SPEED 0) (SAFETY 3))) (LOGEQV 0 B)))) -34528661 843541658238) -843541658239)
;; Loading (DEFTEST MISC.395 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 6429252570156 8761983588786) A)) (DECLARE (TYPE (INTEGER -400378288 4971722) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (DEBUG 3) (SPEED 3) (SPACE 2) (SAFETY 0) (COMPILATION-SPEED 3))) (+ (SHIFTF A 8496033756259) (MIN 0 B))))) 8369430915156 -369704905) 8369061210251)
;; Loading (DEFTEST MISC.396 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -1601 485) A)) (DECLARE (TYPE (INTEGER -190428560464 -1444494) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (DEBUG 0) (SPACE 2) (SPEED 0) (SAFETY 3) (COMPILATION-SPEED 2))) (APPLY (CONSTANTLY 0) 0 (LIST (SIGNUM B)))))) -1365 -46960621335) 0)
;; Loading (DEFTEST MISC.397 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -168258525920 -2044) A)) (DECLARE (TYPE (INTEGER -522 54) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 3) (COMPILATION-SPEED 1) (SPACE 0) (DEBUG 2))) (LABELS ((%F4 (F4-1 F4-2 &KEY) (FLET ((%F7 (F7-1 F7-2 F7-3 &OPTIONAL &KEY (KEY1 A)) (PROGV (QUOTE (*S1* *S6* *S2*)) (LIST A 0 KEY1) F4-1))) F4-2))) (APPLY (FUNCTION %F4) (LIST A 0)))))) -156882103995 -38) 0)
;; Loading (DEFTEST MISC.398 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -319 7353) A)) (DECLARE (TYPE (INTEGER 31751 4233916489) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SAFETY 3) (COMPILATION-SPEED 1) (DEBUG 1) (SPEED 0) (SPACE 0))) (CONJUGATE (IF T (LABELS ((%F12 (F12-1 F12-2 F12-3) 0)) (%F12 0 B 0)) (DOTIMES (IV1 2 0) (CATCH (QUOTE CT2) A))))))) 4430 3476635674) 0)
;; Loading (DEFTEST MISC.399 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -3 1) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 0) (DEBUG 0) (SPEED 3) (COMPILATION-SPEED 2) (SAFETY 3))) (CATCH (QUOTE CT8) (LOGIOR A -457019 -1))))) 0) -1)
;; Loading (DEFTEST MISC.400 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 3376 4762) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (DEBUG 0) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 3) (SPEED 3))) (CASE (LOGNAND 775 A) ((-7) 0) (T 4))))) 4182) 0)
;; Loading (DEFTEST MISC.401 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 7299 257071514003) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 2) (SPACE 1) (SAFETY 2) (SPEED 1) (DEBUG 2))) (LOGEQV (SETQ A 220250126156) 0)))) 157474319912) -220250126157)
;; Loading (DEFTEST MISC.402 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -19116544 21344004) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 1) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 0) (SPEED 0))) (DOTIMES (IV3 2 0) (PROGN (APPLY (CONSTANTLY 0) (LIST (LET* ((*S1* 0)) *S1*))) 0))))) 10) 0)
;; Loading (DEFTEST MISC.403 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -6456 -32) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 3) (SAFETY 1) (COMPILATION-SPEED 1) (SPEED 0) (DEBUG 0))) (DOTIMES (IV1 0 A) (LOOP FOR LV4 BELOW 3 SUM (CATCH (QUOTE CT8) 0)))))) -1648) -1648)
;; Loading (DEFTEST MISC.404 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -77007578505 7500480849) A)) (DECLARE (TYPE (INTEGER 211464 53140083) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SPEED 2) (DEBUG 3) (SAFETY 1) (SPACE 3))) (PROGN (TAGBODY (LET ((V3 (CONS (CASE A ((13 5 -9 2 -13) (GO TAG8)) (T 0)) 0))) 0) TAG8) A)))) -1068524571 20786758)) -1068524571)
;; Loading (DEFTEST MISC.405 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -82196 13938) A)) (DECLARE (TYPE (INTEGER -44152792 -15846835) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 3) (SAFETY 2) (SPEED 3) (SPACE 0) (DEBUG 0))) (BLOCK B5 (LET ((*S7* (CONS (IF (POSITION (IF (EQL 0 0) (RETURN-FROM B5 (RETURN-FROM B5 (LET ((*S6* (CONS B A))) 0))) B) #(23) :TEST-NOT (QUOTE EQL)) 0 0) B))) 0))))) -10305 -26691848)) 0)
;; Loading (DEFTEST MISC.406 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -1 1412366903315) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (DEBUG 3) (SAFETY 3) (SPACE 3) (COMPILATION-SPEED 1) (SPEED 2))) (PROGN (TAGBODY (CASE 0 ((1 0 4) (VALUES (GO 1) 0)) (T 0)) 1) 0)))) 251841706892)) 0)
;; Loading (DEFTEST MISC.407 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -324 175) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SAFETY 0) (SPACE 0) (SPEED 2) (DEBUG 0) (COMPILATION-SPEED 0))) (MULTIPLE-VALUE-BIND (V5) (CONS (TRUNCATE 0) A) (CDR V5))))) -279) -279)
;; Loading (DEFTEST MISC.408 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 0 0) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SAFETY 3) (SPEED 0) (DEBUG 1) (SPACE 0))) (PROGN (TAGBODY (DOTIMES (IV4 0 (LET ((V5 (CONS 0 (IF (GO 3) 0 0)))) 0)) (PROGN 0)) 3) (ASH 0 (MIN 16 0)))))) 0)) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.409 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -40524 53538) A)) (DECLARE (TYPE (INTEGER -5967075 -235) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (SPACE 2) (COMPILATION-SPEED 3) (DEBUG 0))) (LABELS ((%F2 (F2-1 F2-2 &OPTIONAL (F2-3 0) (F2-4 A)) 0)) (APPLY (FUNCTION %F2) A (%F2 B (FLET ((%F12 (F12-1 F12-2 F12-3 &OPTIONAL &KEY (KEY1 0) (KEY2 0)) (%F2 0 0))) (REDUCE (FUNCTION (LAMBDA (LMV2 LMV1) (%F2 0 0 A))) (LIST 0 0 A 0 0 0 A) :END 7)) 0) NIL))))) -7465 -3590953) 0)
;; Loading (DEFTEST MISC.410 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 0) (SPACE 1) (COMPILATION-SPEED 0) (SPEED 2) (DEBUG 0))) (LET ((*S2* 0)) (DECLARE (SPECIAL *S2*)) (REDUCE (FUNCTION (LAMBDA (LMV1 LMV2) *S2*)) (VECTOR 0) :END 1 :START 0)))))) 0)
;; Loading (DEFTEST MISC.411 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 2) (DEBUG 0) (SPACE 0) (COMPILATION-SPEED 2) (SPEED 0))) (CATCH (QUOTE CT2) (VALUES 0 (THROW (QUOTE CT2) 0))) 0)))) 0)
;; Loading (DEFTEST MISC.412 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -25409 1946) A)) (DECLARE (TYPE (INTEGER -215956065 223815244) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 2) (SPACE 3) (DEBUG 2) (SAFETY 1) (SPEED 3))) (COMPLEX (FLET ((%F15 (F15-1 &OPTIONAL &KEY (KEY1 0)) 0)) (REDUCE (FUNCTION (LAMBDA (LMV6 LMV1) (%F15 LMV1))) (LIST B 0))) 0)))) -21802 -105983932) 0)
;; Loading (DEFTEST MISC.413 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -120206733 37762378) A)) (DECLARE (TYPE (INTEGER 2777758072 5675328792) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 3) (SPACE 3) (DEBUG 3) (SAFETY 0) (SPEED 1))) (LABELS ((%F8 (F8-1 F8-2 &OPTIONAL &KEY (KEY1 0)) (LET* ((V2 (ASH F8-1 (MIN 63 A)))) 0))) (IGNORE-ERRORS (LOGAND (APPLY (FUNCTION %F8) 0 B NIL) (UNWIND-PROTECT 0 (ASH (%F8 0 0) (MIN 48 (FLET ((%F12 (F12-1 F12-2 &OPTIONAL &KEY (KEY1 A) (KEY2 B) &ALLOW-OTHER-KEYS) 0)) B)))))))))) -4794909 4095236669) 0)
;; Loading (DEFTEST MISC.414 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 3) (COMPILATION-SPEED 3) (DEBUG 3) (SAFETY 1))) (IF (SETQ C 2) (CASE (SHIFTF C 1) ((2) C) (T 0)) 0)))) 0) 1)
;; Loading (DEFTEST MISC.415 (FUNCALL (FUNCTION (LAMBDA (A C) (CATCH (QUOTE CT2) (FLET ((%F17 (&OPTIONAL X &KEY) (LET* ((Y (CONS (DOTIMES (IV3 0)) 0))) A))) C)))) :BAD :GOOD) :GOOD)
;; Loading (DEFTEST MISC.416 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 12052668 22838464) B)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 3) (DEBUG 2) (SPEED 1) (SPACE 0) (SAFETY 3))) (MIN (MASK-FIELD (BYTE 2 18) B) 89582)))) 13891743) 0)
;; Loading (DEFTEST MISC.417 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (TYPE (INTEGER 995 22565094) C)) (DECLARE (OPTIMIZE (SAFETY 2) (DEBUG 1) (SPACE 0) (COMPILATION-SPEED 2) (SPEED 1))) (NUMERATOR (FLOOR (NUMERATOR (DEPOSIT-FIELD 0 (BYTE 0 0) C))))))) 17190042) 17190042)
;; Loading (DEFTEST MISC.418 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER 1670923021 2536883848) A)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SAFETY 3) (COMPILATION-SPEED 3) (SPEED 1) (DEBUG 1) (SPACE 2))) (IF (LOGIOR (SETF C 67) 0 A) A 0)))) 2161404325 -1968715305 83) 2161404325)
;; Loading (DEFTEST MISC.419 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 3) (SPEED 3) (COMPILATION-SPEED 1) (SPACE 1) (DEBUG 2))) (BOOLE BOOLE-SET 0 (CASE 2 ((0) 0) (T (NUMERATOR (CATCH (QUOTE CT2) 0))))))))) -1)
;; Loading (DEFTEST MISC.420 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -65954801 6519292634236) A)) (DECLARE (TYPE (INTEGER 5721249203 36508717226) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPACE 3) (COMPILATION-SPEED 2) (SAFETY 3) (SPEED 0) (DEBUG 2))) (FLET ((%F14 (F14-1 F14-2 &KEY) (PROG2 0 F14-2 (MIN (CATCH (QUOTE CT4) (FLOOR 120378948 (MAX 22 A))))))) (REDUCE (FUNCTION (LAMBDA (LMV6 LMV5) (%F14 0 0))) (VECTOR 0 0 0) :START 0 :FROM-END T))))) 6313133774518 10840050742) 0)
;; Loading (DEFTEST MISC.421 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (DEBUG 0) (SPACE 2) (COMPILATION-SPEED 1) (SAFETY 0) (SPEED 0))) (IMAGPART (BLOCK B8 (LOGIOR (CATCH (QUOTE CT7) (RETURN-FROM B8 A)) -1123785)))))) -1021899) 0)
;; Loading (DEFTEST MISC.422 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -13 -3) A)) (DECLARE (OPTIMIZE (SPACE 2) (DEBUG 1) (SAFETY 1) (SPEED 2) (COMPILATION-SPEED 1))) (LOGORC2 (SBIT #*0010000011101010 (MIN 15 (MAX 0 0))) A)))) -7) 6)
;; Loading (DEFTEST MISC.423 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 0 1) A)) (DECLARE (TYPE (INTEGER -8031148528 5509023941) B)) (DECLARE (OPTIMIZE (SPACE 2) (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 3) (SPEED 2))) (MIN 0 (IGNORE-ERRORS (LOGAND 0 B 388)))))) 0 4604112015) 0)
;; Loading (DEFTEST MISC.424 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -24 15) A)) (DECLARE (TYPE (INTEGER -99661829155 16) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SAFETY 3) (DEBUG 1) (COMPILATION-SPEED 1) (SPACE 3) (SPEED 3))) (CATCH (QUOTE CT4) (LOGANDC1 A (IGNORE-ERRORS (LET* ((V8 (COMPLEX (THROW (QUOTE CT4) 0) 0))) 0))))))) -18 -47519360453) 0)
;; Loading (DEFTEST MISC.425 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -394128 80657) A)) (DECLARE (TYPE (INTEGER 13729431 14852298) B)) (DECLARE (OPTIMIZE (SPACE 2) (COMPILATION-SPEED 1) (SAFETY 0) (DEBUG 0) (SPEED 2))) (LOGORC1 (* A (LOGIOR B 0)) 0)))) -80334 14527920) 1167085925279)
;; Loading (DEFTEST MISC.426 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 3) (SPACE 3) (SPEED 3) (DEBUG 1) (COMPILATION-SPEED 3))) (DOTIMES (IV3 1 0) (LOGXOR IV3 1285775)))))) 0)
;; Loading (DEFTEST MISC.427 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (NOTINLINE LIST REDUCE LOGIOR)) (DECLARE (OPTIMIZE (SAFETY 2) (COMPILATION-SPEED 1) (SPEED 3) (SPACE 2) (DEBUG 2))) (LOGIOR (LET* ((V5 (REDUCE (FUNCTION +) (LIST 0 A)))) (DECLARE (DYNAMIC-EXTENT V5)) (1- V5)))))) 17) 16)
;; Loading (DEFTEST MISC.428 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (NOTINLINE -)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SAFETY 1) (SPEED 0) (DEBUG 2) (SPACE 3))) (LET ((V10 (CATCH (QUOTE CT2) 1))) (DECLARE (DYNAMIC-EXTENT V10)) (- V10)))))) -1)
;; Loading (DEFTEST MISC.429 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 1) (DEBUG 1) (SPACE 2) (SPEED 2) (COMPILATION-SPEED 1))) (LET ((V8 (LET ((*S3* 0)) *S3*))) (DECLARE (DYNAMIC-EXTENT V8)) (LOGANDC1 V8 28)))))) 28)
;; Loading (DEFTEST MISC.430 (UNWIND-PROTECT 0 (THE INTEGER 1)) 0)
;; Loading (DEFTEST MISC.431 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (NOTINLINE > *)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SAFETY 2) (SPEED 2) (DEBUG 0) (SPACE 3))) (CATCH (QUOTE CT1) (* A (THROW (QUOTE CT1) (IF (> 0) A 0))))))) 5445205692802) 5445205692802)
;; Loading (DEFTEST MISC.432 (LOOP FOR X BELOW 2 COUNT (NOT (NOT (TYPEP X T)))) 2)
;; Loading (DEFTEST MISC.433 (LET ((A 1)) (IF (NOT (/= A 0)) A 0)) 0)
;; Loading (DEFTEST MISC.434 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -8431780939320 1571817471932) A)) (DECLARE (TYPE (INTEGER -4085 0) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPACE 2) (COMPILATION-SPEED 0) (DEBUG 2) (SAFETY 0) (SPEED 3))) (LET ((*S5* 0)) (DOTIMES (IV1 2 0) (LET ((*S5* (ELT (QUOTE (1954479092053)) (MIN 0 (MAX 0 (IF (< IV1 IV1) (LOGNAND IV1 (ASH IV1 (MIN 53 IV1))) IV1)))))) 0)))))) -7639589303599 -1368) 0)
;; Loading (DEFTEST MISC.435 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D) (DECLARE (NOTINLINE AREF LOGANDC2 GCD MAKE-ARRAY)) (DECLARE (OPTIMIZE (SPACE 0) (SAFETY 0) (COMPILATION-SPEED 3) (SPEED 3) (DEBUG 1))) (PROGN (TAGBODY (LET* ((V2 (MAKE-ARRAY NIL :INITIAL-ELEMENT (CATCH (QUOTE CT1) (GO TAG2))))) (DECLARE (DYNAMIC-EXTENT V2)) (GCD (GO TAG2) (LOGANDC2 (CATCH (QUOTE CT2) C) (AREF V2)))) TAG2) 0)))) 3021871717588 -866608 -2 -17194) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.436 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -2917822 2783884) A)) (DECLARE (TYPE (INTEGER 0 160159) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 1) (SPEED 3) (SAFETY 3) (SPACE 0) (DEBUG 0))) (IF (ODDP (LOOP FOR LV1 BELOW 2 COUNT (LOGBITP 0 (1- (ASH B (MIN 8 (COUNT 0 (QUOTE (-10197561 486 430631291 9674068))))))))) B 0)))) 1265797 110757) 0)
;; Loading (DEFTEST MISC.437 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E) (DECLARE (NOTINLINE VALUES COMPLEX EQL)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 3) (SPEED 3) (DEBUG 1) (SAFETY 1) (SPACE 0))) (FLET ((%F10 (F10-1 F10-2 F10-3 &OPTIONAL (F10-4 (IGNORE-ERRORS 0)) (F10-5 0) &KEY &ALLOW-OTHER-KEYS) (IF (OR (EQL 0 0) T) 0 (IF F10-1 0 0)))) (COMPLEX (MULTIPLE-VALUE-CALL (FUNCTION %F10) (VALUES A C B 0 0)) 0))))) 80043 74953652306 33658947 -63099937105 -27842393) 0)
;; Loading (DEFTEST MISC.438 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 0 1696) A)) (DECLARE (OPTIMIZE (SPACE 2) (DEBUG 0) (SAFETY 1) (COMPILATION-SPEED 0) (SPEED 1))) (IF (LOGBITP 0 (ASH (1- A) (MIN 11 A))) 0 0)))) 805) 0)
;; Loading (DEFTEST MISC.439 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -15205 18871) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 2) (SPEED 1) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 3))) (IF (<= A (- (SETF A 10305))) A 0)))) -13589) 10305)
;; Loading (DEFTEST MISC.440 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (NOTINLINE LOGIOR)) (DECLARE (OPTIMIZE (SAFETY 3) (DEBUG 1) (SPEED 0) (SPACE 1) (COMPILATION-SPEED 3))) (FLET ((%F10 (&OPTIONAL &KEY (KEY1 (LOGIOR (FLET ((%F4 (F4-1 &OPTIONAL &KEY (KEY1 0) (KEY2 B) &ALLOW-OTHER-KEYS) C)) (%F4 0)))) &ALLOW-OTHER-KEYS) 0)) (LET ((*S8* (%F10))) (DECLARE (SPECIAL *S8*)) *S8*))))) 13524 4484529434427 8109510572804) 0)
;; Loading (DEFTEST MISC.441 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (NOTINLINE COMPLEX)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 1) (SPACE 1) (SPEED 3) (SAFETY 2) (DEBUG 3))) (FLET ((%F8 (F8-1 F8-2 &OPTIONAL &KEY (KEY1 (LABELS ((%F9 NIL A)) (COMPLEX (%F9) 0))) (KEY2 0) &ALLOW-OTHER-KEYS) 0)) (%F8 0 A))))) 1 2) 0)
;; Loading (DEFTEST MISC.442 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (NOTINLINE APPLY EVENP)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (SAFETY 1) (COMPILATION-SPEED 0) (DEBUG 0))) (LABELS ((%F18 (F18-1 &OPTIONAL &KEY (KEY1 (FLET ((%F8 NIL B)) (IF (EVENP (%F8)) 0 A))) (KEY2 0)) 0)) (APPLY (FUNCTION %F18) B NIL))))) 505808341634 -39752189) 0)
;; Loading (DEFTEST MISC.443 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D E) (DECLARE (TYPE (INTEGER -2310674 2) A)) (DECLARE (TYPE (INTEGER -492505702625 -147091001460) B)) (DECLARE (TYPE (INTEGER -27638568 52971156) C)) (DECLARE (TYPE (INTEGER -151 203) D)) (DECLARE (TYPE (INTEGER -1400301 8173230) E)) (DECLARE (IGNORABLE A B C D E)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 3) (DEBUG 0) (SPACE 0) (SAFETY 1) (SPEED 1))) (CATCH (QUOTE CT7) (LCM (CASE 0 ((-4557) (LET ((*S7* (MAX D))) 0)) ((-15387) C) (T 0)) (UNWIND-PROTECT (THROW (QUOTE CT7) B) 0)))))) -1748290 -244489705763 38969920 -90 341977) -244489705763)
;; Loading (DEFTEST MISC.446 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C D) (DECLARE (TYPE (INTEGER -1254 1868060) A)) (DECLARE (TYPE (INTEGER -1 0) B)) (DECLARE (TYPE (INTEGER -424707253248 -82453721088) C)) (DECLARE (TYPE (INTEGER -252962 3018671) D)) (DECLARE (IGNORABLE A B C D)) (DECLARE (OPTIMIZE (SAFETY 3) (SPACE 3) (SPEED 3) (COMPILATION-SPEED 3) (DEBUG 3))) (* (LABELS ((%F8 (&OPTIONAL (F8-1 0)) (SETQ B 0))) (IF (> D 1668249724 (%F8)) 0 (COMPLEX A 0))) (IF (ODDP B) 0 C))))) 796131 -1 -338008808923 530637) -269099291056676913)
;; Loading (DEFTEST MISC.447 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 38632397 46632460288) A)) (DECLARE (OPTIMIZE (SPACE 0) (SAFETY 0) (DEBUG 1) (COMPILATION-SPEED 1) (SPEED 0))) (CATCH (QUOTE CT2) (IF (= A 0 (THROW (QUOTE CT2) 0)) 1 2289596))))) 18160383912) 0)
;; Loading (DEFTEST MISC.448 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -3716 1269) A)) (DECLARE (TYPE (INTEGER -1976579 2312) B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 1) (SAFETY 0) (SPEED 0) (SPACE 0) (DEBUG 3))) (IF (<= 0 B (SETQ A 117)) 0 A)))) -1147 -44004) 117)
;; Loading (DEFTEST MISC.449 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (* 10 A (SETQ A 1000))))) 1) 10000)
;; Loading (DEFTEST MISC.450 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (MIN 0 (REDUCE (FUNCTION MIN) (VECTOR A B 0)) 0)))) -10 -1) -10)
;; Loading (DEFTEST MISC.451 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (FLET ((%F3 NIL (SETQ A -2210))) (LOGXOR A B (%F3)))))) -22650 20595) 171)
;; Loading (DEFTEST MISC.452 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (D) (LABELS ((%F3 NIL (SETF D -1135) -983)) (+ D (%F3) 11267))))) -2914) 7370)
;; Loading (DEFTEST MISC.453 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (* A (SETF A 2) A (IDENTITY 5))))) 3) 60)
;; Loading (DEFTEST MISC.454 (LET* ((FORM (QUOTE (LET ((V1 0)) (DECF V1 (SETQ V1 -1))))) (VAL1 (EVAL FORM)) (VAL2 (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (SYSTEM.INTERNALS::BQ-COMMA FORM))))))) (IF (EQL VAL1 VAL2) :GOOD (LIST VAL1 VAL2))) :GOOD)
;; Loading (DEFTEST MISC.455 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -4079701634499 2272876436845) B)) (DECLARE (OPTIMIZE (SPACE 0) (COMPILATION-SPEED 1) (SAFETY 3) (SPEED 2) (DEBUG 0))) (LOGAND (* -775 B) A 37284)))) -18465060867 832909434173) 32772)
;; Loading (DEFTEST MISC.456 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B C) (DECLARE (TYPE (INTEGER -30606350847 35078064098) B)) (DECLARE (TYPE (INTEGER -6652 6638) C)) (DECLARE (OPTIMIZE (SPACE 3) (SAFETY 0) (SPEED 0) (COMPILATION-SPEED 2) (DEBUG 1))) (LOGAND (* -9964236 (SETQ C 6206) 2600) B C)))) 17296668225 -6574) 4096)
;; Loading (DEFTEST MISC.457 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -455461 343063) A)) (DECLARE (TYPE (INTEGER -1020097 -12430) B)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (COMPILATION-SPEED 3) (DEBUG 0) (SAFETY 3))) (DEPOSIT-FIELD (* (LOGEQV A A) B) (BYTE 6 24) 0)))) -212811 -985078) 0)
;; Loading (DEFTEST MISC.458 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -8175 27760966190) A)) (DECLARE (OPTIMIZE (SPACE 2) (SPEED 0) (COMPILATION-SPEED 1) (SAFETY 0) (DEBUG 3))) (LDB (BYTE 29 0) (* A A))))) 14774118941) 101418825)
;; Loading (DEFTEST MISC.459 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -32933298905 -168011) A)) (DECLARE (TYPE (INTEGER -190015111797 16) B)) (DECLARE (OPTIMIZE (SPEED 2) (COMPILATION-SPEED 0) (SPACE 0) (SAFETY 1) (DEBUG 0))) (LOGAND (+ B -9255) A 63)))) -8166030199 -45872222127) 8)
;; Loading (DEFTEST MISC.460 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 50354997 50514623) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 0) (COMPILATION-SPEED 3) (DEBUG 1) (SPACE 1))) (LOOP FOR LV3 BELOW 2 SUM (IF (FIND 0 (QUOTE (-17604051 126613572 -795198 12037855 127043241 -2 -59 -3458890 1505 -1 -2 107498637 -977489 172087 421813 543299114 12 4311490 569 -3509 -4051770 -1 1 1 216399387 -2482 143297 2 304550 -61 -195904988 57682175 2344 1294831 -247 -2 25779388 -296 -12115 -158487 -15)) :TEST (QUOTE EQL)) (IF (FIND 0 #(4193594) :TEST (QUOTE <)) (MIN (CATCH (QUOTE CT6) 0) (CATCH (QUOTE CT8) 0) 0) (LET ((*S1* (CONS A 0))) (CAR *S1*))) 0))))) 50395193) 0)
;; Loading (DEFTEST MISC.461 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -26657952320 0) A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SPACE 3) (SPEED 3) (SAFETY 0) (DEBUG 2))) (- A (ASH -1 (MIN 31 (- A))) -26715477)))) -26179151369) -24004952244)
;; Loading (DEFTEST MISC.462 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -2726808666112 -26532) A)) (DECLARE (TYPE (INTEGER 182701814 171137312256) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 3) (SAFETY 0) (SPEED 3) (SPACE 3) (DEBUG 3))) (ASH (LET* ((V8 (CONS 0 0))) 0) (MIN 15 A))))) -1982565461868 46279989780) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.463 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 0 0) A)) (DECLARE (TYPE (INTEGER -160364747008 264742845184) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (DEBUG 0) (SAFETY 0) (COMPILATION-SPEED 2) (SPACE 0) (SPEED 1))) (ASH (MULTIPLE-VALUE-SETQ (A) 0) (MIN 97 13027666096))))) 0 34670845086) 0)
;; Loading (DEFTEST MISC.464 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (DEBUG 1) (SAFETY 2) (COMPILATION-SPEED 0) (SPACE 1) (SPEED 1))) (COUNT (ASH (THE INTEGER (MACROLET NIL (REM -197 (MIN -72 215)))) (MIN 98 442719)) #(0 96) :TEST (QUOTE =)))))) 0)
;; Loading (DEFTEST MISC.465 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -18822 -1280) A)) (DECLARE (OPTIMIZE (DEBUG 0) (SPEED 1) (COMPILATION-SPEED 3) (SAFETY 0) (SPACE 0))) (ASH (THE INTEGER (LOGAND A (IF T A (IMAGPART -2607360)))) (MIN 79 (CATCH (QUOTE CT7) 0)))))) -17635) -17635)
;; Loading (DEFTEST MISC.466 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (MEMBER 4 -1) X) (OPTIMIZE SPEED (SAFETY 1))) (ISQRT X)))) 4) 2)
;; Loading (DEFTEST MISC.467 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2 P3) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER -990888631320) P2) (TYPE (INTEGER -20346 -19755) P3)) (+ -77 (THE (INTEGER * -990888630255) P2) P3)))) -990888630272 -19756) -990888650105)
;; Loading (DEFTEST MISC.468 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2 P3) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER * 151075404030) P2) (TYPE (INTEGER 6515518 *) P3)) (- 12967657127936 (THE (EQL 151075403520) P2) (THE (MEMBER 6515658 -14) P3))))) 151075403520 6515658) 12816575208758)
;; Loading (DEFTEST MISC.469 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE INTEGER P2)) (+ 30926 (THE (INTEGER -4025987543018 *) P2))))) -4025817763840) -4025817732914)
;; Loading (DEFTEST MISC.470 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER 3689224658939 *) P2)) (+ -1071 (THE (INTEGER * 3689229115390) P2))))) 3689228853248) 3689228852177)
;; Loading (DEFTEST MISC.471 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER -9024844 230253450) P1) (TYPE (EQL 35716681856) P2)) (* P1 (THE (INTEGER * 35716681856) P2))))) -9024809 35716681856) -322336231864165504)
;; Loading (DEFTEST MISC.472 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER -785238 -80) P1) (TYPE (EQL -523213622272) P2)) (MIN P1 (THE INTEGER P2))))) -259 -523213622272) -523213622272)
;; Loading (DEFTEST MISC.473 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER * 65861934352) P2)) (MAX 23939 (THE (INTEGER 64863825609 65878336765) P2))))) 65861912512) 65861912512)
;; Loading (DEFTEST MISC.474 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER -6750156308) P1)) (LOGAND (THE SIGNED-BYTE P1) -540165229)))) -6750156304) -7289140848)
;; Loading (DEFTEST MISC.475 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2 P3 P4 P6) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER -785238 61564048) P1) (TYPE (INTEGER * 65861934352) P2)) (+ P1 (THE (INTEGER -485480 -7019) P2) P3 P4 463666373060 P6)))) 61564048 -7457 24939545512 51 730)) 488667475944)
;; Loading (DEFTEST MISC.476 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P4) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER -115781893486) P4)) (- 1 -35 0 (THE (INTEGER -115778245122) P4) -2)))) -115778114900)) 115778114938)
;; Loading (DEFTEST MISC.477 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P4 P5) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER -126908726190 -126906628448) P4) (TYPE (INTEGER * 2202) P5)) (* -1950 -33610502463 2 P4 P5)))) -126906629040 1839)) -30591843552678654213361992000)
;; Loading (DEFTEST MISC.478 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER * 2343679) P2)) (LOGAND 12050257282405 P2 117775123 505354693 -415679150084)))) -6189)) 33816832)
;; Loading (DEFTEST MISC.479 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 32)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 32) NIL) R) (TYPE INTEGER P2)) (SETF (AREF R) (LOGXOR 0 (THE (INTEGER 2797513123 2798027357) P2))) (VALUES)))))) (FUNCALL FN R 2797674503) (AREF R)) 2797674503)
;; Loading (DEFTEST MISC.480 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE INTEGER))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY INTEGER NIL) R) (TYPE (INTEGER -797971 -797511) P1)) (SETF (AREF R) (LOGEQV P1 15 1078254884158 -12564176924 0 15096591909)) (VALUES)))))) (FUNCALL FN R -797965) (AREF R)) -1075415510532)
;; Loading (DEFTEST MISC.481 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 16)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 16) NIL) R) (TYPE (MEMBER 4194309 -123 1692 -4432 -760653 -1741 37) P1)) (SETF (AREF R) (LOGORC1 (THE (EQL -4432) P1) 0)) (VALUES)))))) (FUNCALL FN R -4432) (AREF R)) 4431)
;; Loading (DEFTEST MISC.482 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 4)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 4) NIL) R) (TYPE (EQL -4) P2)) (SETF (AREF R) (LOGORC2 13 P2)) (VALUES)))))) (FUNCALL FN R -4) (AREF R)) 15)
;; Loading (DEFTEST MISC.483 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 4)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P1 P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 4) NIL) R) (TYPE (INTEGER * 28306533) P1) (TYPE (INTEGER * 1245601) P2)) (SETF (AREF R) (LOGANDC1 P1 (THE (INTEGER -3308174) P2))) (VALUES)))))) (FUNCALL FN R -519 -28180) (AREF R)) 4)
;; Loading (DEFTEST MISC.484 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 4)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 4) NIL) R) (TYPE (MEMBER 260646 -348969 34359738370 -110167) P2)) (SETF (AREF R) (LOGANDC2 9 (THE (EQL -348969) P2))) (VALUES)))))) (FUNCALL FN R -348969) (AREF R)) 8)
;; Loading (DEFTEST MISC.485 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY BIT NIL) R) (TYPE (INTEGER -108220 256178) P2)) (SETF (AREF R) (LOGAND 1 (THE (MEMBER -1 2147483652 1 -5 3802) P2))) (VALUES)))))) (FUNCALL FN R -5) (AREF R)) 1)
;; Loading (DEFTEST MISC.486 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 4)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P1 P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 4) NIL) R) (TYPE (INTEGER -9) P1) (TYPE (INTEGER * 1234117) P2)) (SETF (AREF R) (LOGIOR (THE (INTEGER -295 *) P1) (THE (INTEGER -90 *) P2))) (VALUES)))))) (FUNCALL FN R 6 6) (AREF R)) 6)
;; Loading (DEFTEST MISC.487 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 16)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 16) NIL) R) (TYPE (INTEGER 1583040351 1587341394) P1)) (SETF (AREF R) (LOGANDC2 (THE (INTEGER 1587211196 1587341392) P1) -166174)) (VALUES)))))) (FUNCALL FN R 1587341392) (AREF R)) 34832)
;; Loading (DEFTEST MISC.488 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 32)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 32) NIL) R) (TYPE (INTEGER 1960409798 1960426181) P2)) (SETF (AREF R) (LOGORC1 -1 P2)) (VALUES)))))) (FUNCALL FN R 1960409801) (AREF R)) 1960409801)
;; Loading (DEFTEST MISC.489 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 32)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 32) NIL) R) (TYPE (INTEGER -55) P2)) (SETF (AREF R) (LOGORC2 0 (THE (MEMBER -51) P2))) (VALUES)))))) (FUNCALL FN R -51) (AREF R)) 50)
;; Loading (DEFTEST MISC.490 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 32)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (UNSIGNED-BYTE 32) NIL) R) (TYPE (INTEGER 761639858 1030075825) P1)) (SETF (AREF R) (LOGIOR (THE (INTEGER * 35389813668) P1) 0)) (VALUES)))))) (FUNCALL FN R 1030075308) (AREF R)) 1030075308)
;; Loading (DEFTEST MISC.491 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (SIGNED-BYTE 16)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (SIGNED-BYTE 16) NIL) R) (TYPE (INTEGER 505774114 573717424) P2)) (SETF (AREF R) (LOGNAND 58539 (THE (INTEGER * 910674467) P2))) (VALUES)))))) (FUNCALL FN R 506608551) (AREF R)) -8356)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.492 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE (SIGNED-BYTE 8)))) (FN (COMPILE NIL (QUOTE (LAMBDA (R P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY (SIGNED-BYTE 8) NIL) R) (TYPE (INTEGER * 22050378) P1)) (SETF (AREF R) (LOGNAND (THE (INTEGER 19464371) P1) 2257)) (VALUES)))))) (FUNCALL FN R 19469591) (AREF R)) -18)
;; Loading (DEFTEST MISC.493 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 2) (DEBUG 1) (SAFETY 3) (COMPILATION-SPEED 3) (SPACE 1))) (AREF #(41397376227 18660605846 49244777443) (MIN 2 (MAX 0 B)))))) -71)) 41397376227)
;; Loading (DEFTEST MISC.494 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 0) (SPACE 2) (DEBUG 3) (SPEED 0) (COMPILATION-SPEED 2))) (CONJUGATE (PROGN (CATCH (QUOTE CT5) (IF T 0 0)) 0))))))) 0)
;; Loading (DEFTEST MISC.495 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -4197 284380207) A)) (DECLARE (TYPE (INTEGER -23 5088) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 2) (DEBUG 0) (COMPILATION-SPEED 0) (SAFETY 2))) (IF (POSITION (PROGN (1+ B) 0) (QUOTE (169496 -726 -13623 53307916 128 -258391 156 7432659 30 20 -11))) 0 A)))) 72179019 5084) 72179019)
;; Loading (DEFTEST MISC.496 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -54915 -3396) A)) (DECLARE (OPTIMIZE (DEBUG 3) (SPACE 0) (SAFETY 2) (SPEED 2) (COMPILATION-SPEED 3))) (PROGN (1+ A) (CATCH (QUOTE CT6) (PROGN 0)))))) -25986)) 0)
;; Loading (DEFTEST MISC.497 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER -1 0) B)) (DECLARE (OPTIMIZE (SPACE 3) (COMPILATION-SPEED 1) (SAFETY 0) (DEBUG 1) (SPEED 0))) (IF 0 (PROG2 0 0 (1+ B)) 0)))) 0)) 0)
;; Loading (DEFTEST MISC.498 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -16191 4) A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 2) (SPACE 1) (DEBUG 0) (SAFETY 0) (SPEED 2))) (CONJUGATE (DOTIMES (IV1 0 0) (LET ((V2 (DOTIMES (IV3 0 0) (1+ A)))) 0)))))) -2840)) 0)
;; Loading (DEFTEST MISC.499 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -31415 133871) A)) (DECLARE (TYPE (INTEGER -993 6448) B)) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPACE 0) (DEBUG 2) (SAFETY 0) (SPEED 0) (COMPILATION-SPEED 0))) (PROGN (CEILING (PROGN (1+ B) A)) A)))) -16435 2620)) -16435)
;; Loading (DEFTEST MISC.500 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPACE 2) (DEBUG 2) (COMPILATION-SPEED 2) (SPEED 1) (SAFETY 3))) (THE INTEGER (INTEGER-LENGTH (DOTIMES (IV4 2 15790955)))))))) 24)
;; Loading (DEFTEST MISC.501 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -437165353 179983908) A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (DEBUG 1) (SPACE 1) (SAFETY 2) (SPEED 1))) (DOTIMES (IV1 0 0) (1+ A))))) 1)) 0)
;; Loading (DEFTEST MISC.502 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -7 84717795) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPEED 1) (SPACE 1) (DEBUG 1) (SAFETY 2) (COMPILATION-SPEED 0))) (+ A (SETQ A 35035201))))) 29207264) 64242465)
;; Loading (DEFTEST MISC.503 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPACE 3) (DEBUG 1) (SPEED 2) (SAFETY 0) (COMPILATION-SPEED 1))) (CATCH (QUOTE CT1) (THROW (QUOTE CT1) (CATCH (QUOTE CT5) (REDUCE (QUOTE MIN) (VECTOR 0 0 0 A A 0 0 (VALUES 0 0) (THROW (QUOTE CT5) -6)) :END 8 :START 6 :FROM-END T))))))) 17) -6)
;; Loading (DEFTEST MISC.504 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 196060 241373941) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 0) (SAFETY 2) (COMPILATION-SPEED 3) (SPACE 2))) (PROG2 (IF 0 (+ A A) 0) 0)))) 200000)) 0)
;; Loading (DEFTEST MISC.505 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -6 5) A)) (DECLARE (OPTIMIZE (SPEED 3) (SPACE 0) (SAFETY 2) (COMPILATION-SPEED 2) (DEBUG 3))) (DOTIMES (IV1 0 0) (+ A A))))) 1)) 0)
;; Loading (DEFTEST MISC.506 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -53 49) A)) (DECLARE (OPTIMIZE (DEBUG 0) (COMPILATION-SPEED 1) (SPACE 2) (SAFETY 0) (SPEED 0))) (UNWIND-PROTECT (+ A A) 0)))) -38)) -76)
;; Loading (DEFTEST MISC.507 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 2697 13005) A)) (DECLARE (OPTIMIZE (DEBUG 0) (SPACE 2) (SPEED 2) (COMPILATION-SPEED 3) (SAFETY 3))) (TRUNCATE (PROG1 0 A (+ A A)))))) 7695) 0 0)
;; Loading (DEFTEST MISC.508 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -57853147 -2) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (DEBUG 2) (SPACE 1) (COMPILATION-SPEED 3) (SAFETY 1) (SPEED 2))) (THE INTEGER (MASK-FIELD (BYTE 2 29) (ASH (MULTIPLE-VALUE-SETQ (A) -51781613) (MIN 1 A))))))) -29324754)) 1610612736)
;; Loading (DEFTEST MISC.509 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -38984312 657) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (DEBUG 1) (COMPILATION-SPEED 1) (SPEED 1) (SAFETY 2) (SPACE 3))) (THE INTEGER (IF (> A -27907941364) 116871 (COMMON-LISP:HANDLER-CASE (MULTIPLE-VALUE-SETQ (A) -34832621))))))) -26788929)) 116871)
;; Loading (DEFTEST MISC.510 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -2827 3400) A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 1) (SPACE 3) (DEBUG 1) (SAFETY 0) (SPEED 1))) (LOGAND (THE INTEGER (DOTIMES (IV4 2 A) (PROGN IV4))))))) 155)) 155)
;; Loading (DEFTEST MISC.511 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 18967 23584) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 1) (SPEED 1) (DEBUG 1) (COMPILATION-SPEED 3) (SAFETY 1))) (THE INTEGER (VALUES (LOOP FOR LV4 BELOW 2 COUNT (FIND A (QUOTE (16389))))))))) 21352)) 0)
;; Loading (DEFTEST MISC.512 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 1 188902468) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 2) (SPEED 3) (SAFETY 3) (COMPILATION-SPEED 0) (DEBUG 2))) (CATCH (QUOTE CT6) (THE INTEGER (LET* ((V3 (SIGNUM (IGNORE-ERRORS A)))) (DECLARE (DYNAMIC-EXTENT V3)) (THROW (QUOTE CT6) (ROUND (CASE (PROG2 (LOGNOR 290171664 V3) -3512003993 -550842867) ((4) (* 1 4092)) ((21 220 225) (BLOCK B1 (SETF V3 (LET* ((V9 V3)) A)))) (T -639367819)))))))))) 49008586)) -639367819 0)
;; Loading (DEFTEST MISC.513 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -2 75025568) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 0) (COMPILATION-SPEED 0) (SAFETY 0) (SPEED 2) (DEBUG 2))) (LET* ((V8 (CONS (THE INTEGER (PROG2 A -1558460 A (IGNORE-ERRORS (PROGN (TAGBODY) -49510826)) A)) 0))) 0)))) 68043554)) 0)
;; Loading (DEFTEST MISC.514 (LET NIL (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -6844832476 188341751) A)) (DECLARE (OPTIMIZE (SPEED 3) (DEBUG 1) (SAFETY 0) (SPACE 3) (COMPILATION-SPEED 1))) (THE INTEGER (MULTIPLE-VALUE-SETQ (A) -96073358))))) -3792864899)) -96073358)
;; Loading (DEFTEST MISC.515 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -1337016312 832159784) A)) (DECLARE (OPTIMIZE SPEED (SAFETY 1))) (LET* ((Y 0) (V9 0)) (DECLARE (DYNAMIC-EXTENT V9)) (SETQ V9 (+ A A)) (SETQ Y (1+ V9)))))) -1209913207) -2419826413)
;; Loading (DEFTEST MISC.516 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPACE 0) (DEBUG 0) (SAFETY 2) (COMPILATION-SPEED 3) (SPEED 1))) (LET ((*S2* (* -507991378 14))) (DECLARE (DYNAMIC-EXTENT *S2*)) (DECLARE (SPECIAL *S2*)) (1+ *S2*)))))) -7111879291)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.517 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 3) (SPACE 3) (DEBUG 1) (SPEED 1) (COMPILATION-SPEED 0))) (LET* ((*S8* (LET ((*S8* (MAKE-ARRAY NIL :INITIAL-ELEMENT 0))) (DECLARE (SPECIAL *S8*)) (PROGN (SHIFTF (AREF *S8*) 31508066) 0)))) (DECLARE (SPECIAL *S8*)) 0))))) 0)
;; Loading (DEFTEST MISC.518 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SAFETY 1) (DEBUG 1) (SPACE 0) (SPEED 3))) (FLET ((%F10 (&OPTIONAL (F10-1 0) (F10-2 0) &KEY) (PROGN (TAGBODY (DECF F10-2) (RETURN-FROM %F10 (COMPLEX (UNWIND-PROTECT (GO TAG7)) 0)) TAG7) F10-2))) (IF (EVENP (%F10 0 0)) 0 2140390)))))) 2140390)
;; Loading (DEFTEST MISC.519 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SPEED 1) (DEBUG 1) (SPACE 1) (SAFETY 3))) (LET ((*S3* (* (THE INTEGER (EXPT (RATIONALIZE (MULTIPLE-VALUE-BIND (*S3*) (MAKE-ARRAY NIL :INITIAL-ELEMENT 0) (SHIFTF (AREF *S3*) 0))) 2))))) 1))))) 1)
;; Loading (DEFTEST MISC.520 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A C E) (DECLARE (TYPE (INTEGER -44330 64753) C)) (DECLARE (TYPE (INTEGER -301534047 4291509) E)) (DECLARE (OPTIMIZE (SAFETY 3) (DEBUG 2) (SPEED 3) (SPACE 2) (COMPILATION-SPEED 2))) (IF (ODDP (ASH (LOGORC2 C E) (MIN 2 (MASK-FIELD (BYTE 0 0) (MOD 0 (MAX 69 0)))))) A 0)))) 1 -8156 -229264929) 0)
;; Loading (DEFTEST MISC.521 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 1) (DEBUG 1) (COMPILATION-SPEED 3) (SPACE 0))) (IF B (LET ((*S6* 0)) 0) (LET* ((*S6* (MAKE-ARRAY NIL :INITIAL-ELEMENT 0))) (AREF *S6*)))))) NIL) 0)
;; Loading (DEFTEST MISC.522 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -25 38) A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 3) (SAFETY 3) (DEBUG 1) (SPACE 2) (SPEED 1))) (FLET ((%F2 (F2-1 F2-2 &OPTIONAL (F2-3 (LABELS ((%F6 (&OPTIONAL (F6-1 0) (F6-2 0)) (MAX A))) (%F6 0))) (F2-4 0) (F2-5 0)) (FLET ((%F4 (F4-1 F4-2 F4-3) (FLET ((%F15 NIL F2-3)) A))) 0))) (REDUCE (FUNCTION (LAMBDA (LMV1 LMV6) A)) (VECTOR 0 0 0 (%F2 A A) 0 A 0 A 0) :START 4 :FROM-END T))))) 35) 35)
;; Loading (DEFTEST MISC.523 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -1011 978) A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 1) (SAFETY 3) (DEBUG 0) (SPEED 2) (SPACE 1))) (LET ((*S5* (CONS 0 (CATCH (QUOTE CT8) (ASH (FLET ((%F15 (F15-1) (RETURN-FROM %F15 A))) 0) (MIN 57 (LOGNOR (THROW (QUOTE CT8) (SHIFTF A 332)) (LET ((V1 (SETF A 371))) A)))))))) A)))) 99) 332)
;; Loading (DEFTEST MISC.524 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER -2432551 871) A)) (DECLARE (TYPE (INTEGER -6390 -1) B)) (DECLARE (IGNORABLE B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 0) (SAFETY 0) (SPACE 2) (SPEED 0) (DEBUG 3))) (FLET ((%F18 (F18-1 F18-2 F18-3 &OPTIONAL &KEY (KEY1 0) &ALLOW-OTHER-KEYS) (LABELS ((%F12 (F12-1 &OPTIONAL (F12-2 0) &KEY (KEY1 (CATCH (QUOTE CT7) (CONJUGATE KEY1))) (KEY2 0) &ALLOW-OTHER-KEYS) 0)) (%F12 A)))) (%F18 A 0 0))))) -925293 -1603) 0)
;; Loading (DEFTEST MISC.525 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -17179869184 -2147483648) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 2) (DEBUG 3) (SPEED 3) (COMPILATION-SPEED 3) (SAFETY 1))) (CATCH (QUOTE CT4) (MAX (CONJUGATE (UNWIND-PROTECT 0 (CATCH (QUOTE CT4) (VALUES 0)))) (THROW (QUOTE CT4) 0)))))) -17179869184) 0)
;; Loading (DEFTEST MISC.526 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -4 3025867) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 1) (SAFETY 0) (DEBUG 0) (SPEED 3) (COMPILATION-SPEED 0))) (FLET ((%F14 (F14-1 F14-2 F14-3 &KEY) (LET ((V4 (RETURN-FROM %F14 (FLET ((%F11 (&OPTIONAL (F11-1 0) (F11-2 0) (F11-3 (COERCE (REDUCE (FUNCTION (LAMBDA (LMV2 LMV5) A)) (VECTOR F14-1 F14-1 0 F14-3 A F14-3 A F14-1 0 F14-2)) (QUOTE INTEGER))) &KEY (KEY1 F14-3) (KEY2 A)) (FLET ((%F8 (F8-1 &OPTIONAL (F8-2 (FLET ((%F16 (F16-1 F16-2 F16-3 &OPTIONAL &KEY (KEY1 0) (KEY2 F11-3)) KEY1)) 0)) &KEY (KEY1 0)) F14-3)) 0))) (IF (%F11 F14-1 (%F11 0 F14-3) F14-1) 0 0))))) 0))) (%F14 0 A A))))) 857304) 0)
;; Loading (DEFTEST MISC.527 (LET ((V1 (MAKE-ARRAY 1 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (1)) :FILL-POINTER 0)) (V2 (MAKE-ARRAY 1 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (1)) :FILL-POINTER 1)) (R (MAKE-ARRAY NIL))) (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY T NIL) R) (TYPE (ARRAY *) P2)) (SETF (AREF R) (BIT-AND (SYSTEM.INTERNALS::BQ-COMMA V1) (THE (BIT-VECTOR *) P2))) (VALUES)))) R V2) (LET ((RESULT (AREF R))) (VALUES (NOTNOT (SIMPLE-BIT-VECTOR-P RESULT)) (=T (ARRAY-DIMENSION RESULT 0) 1) (=T (AREF RESULT 0) 1)))) T T T)
;; Loading (DEFTEST MISC.528 (LET* ((X 296.30661) (Y 22717067) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY SINGLE-FLOAT NIL) R) (TYPE (INTEGER -9369756340 22717335) P2)) (SETF (AREF R) (* (SYSTEM.INTERNALS::BQ-COMMA X) (THE (EQL 22717067) P2))) (VALUES)))) (R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE SINGLE-FLOAT))) (EXPECTED (* X Y))) (FUNCALL (COMPILE NIL FORM) R Y) (LET ((ACTUAL (AREF R))) (UNLESS (EQL EXPECTED ACTUAL) (LIST EXPECTED ACTUAL)))) NIL)
;; Loading (DEFTEST MISC.529 (LET* ((X -2367.329589) (Y 46790178) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (R P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY SINGLE-FLOAT NIL) R) (TYPE (EQL 46790178) P2)) (SETF (AREF R) (+ (SYSTEM.INTERNALS::BQ-COMMA X) (THE (INTEGER 45893897) P2))) (VALUES)))) (R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE SINGLE-FLOAT))) (EXPECTED (+ X Y))) (FUNCALL (COMPILE NIL FORM) R Y) (LET ((ACTUAL (AREF R))) (UNLESS (EQL EXPECTED ACTUAL) (LIST EXPECTED ACTUAL)))) NIL)
;; Loading (DEFTEST MISC.530 (LET* ((V (MAKE-ARRAY (QUOTE (11)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT) :INITIAL-CONTENTS (QUOTE (56826.585937 -57680.535156 68651.28125 30934.626953 47252.734375 35129.46875 -57804.414062 13000.374023 50263.683593 89386.085937 -89508.773437)))) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (R) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY T NIL) R)) (SETF (AREF R) (ARRAY-HAS-FILL-POINTER-P (SYSTEM.INTERNALS::BQ-COMMA V)))))) (R (MAKE-ARRAY NIL))) (FUNCALL (COMPILE NIL FORM) R) (EQLT (AREF R) (ARRAY-HAS-FILL-POINTER-P V))) T)
;; Loading (DEFTEST MISC.532 (LET ((R (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (R C) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY BASE-CHAR NIL) R) (TYPE BASE-CHAR C)) (SETF (AREF R) C) (VALUES)))) R #\Z) (AREF R)) #\Z)
;; Loading (DEFTEST MISC.533 (LET* ((R (MAKE-ARRAY NIL)) (C #C(208 51494/29889)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (R P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY T NIL) R) (TYPE NUMBER P1)) (SETF (AREF R) (+ (THE (EQL (SYSTEM.INTERNALS::BQ-COMMA C)) P1) -319284)) (VALUES)))) (FN (COMPILE NIL FORM))) (FUNCALL FN R C) (EQLT (AREF R) (+ -319284 C))) T)
;; Loading (DEFTEST MISC.534 (LET ((R0 (MAKE-ARRAY NIL))) (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (R P1 P2 P3) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (EQL 4134713351/6105637898) P2) (TYPE (EQL 2685) P3)) (SETF (AREF R) (IF P1 (THE (EQL 4134713351/6105637898) P2) (THE (INTEGER * 8391301) P3)))))) R0 T 4134713351/6105637898 2685) (AREF R0)) 4134713351/6105637898)
;; Loading (DEFTEST MISC.535 (LET ((C0 #C(4196.088867 -15943.360351))) (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY T NIL) R) (TYPE (EQL (SYSTEM.INTERNALS::BQ-COMMA C0)) P1) (TYPE NUMBER P2)) (EQL (THE (COMPLEX DOUBLE-FLOAT) P1) P2)))) C0 #C(12 612/979))) NIL)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.536 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (EQL #C(11963908204 1/6)) P1) (TYPE (COMPLEX RATIONAL) P2)) (EQL P1 (THE COMPLEX P2))))) #C(11963908204 1/6) #C(2343315619 5252231066)) NIL)
;; Loading (DEFTEST MISC.537 (LET ((P1 (MAKE-ARRAY (QUOTE (0)) :ELEMENT-TYPE (QUOTE BIT) :ADJUSTABLE T))) (NOTNOT (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (SIMPLE-ARRAY T NIL) R) (TYPE (SIMPLE-BIT-VECTOR 0) P2)) (EQUAL (SYSTEM.INTERNALS::BQ-COMMA P1) (THE (BIT-VECTOR 0) P2))))) #*))) T)
;; Loading (DEFTEST MISC.538 (NOTNOT (TYPEP (* 2/5 #C(3 4)) (QUOTE NUMBER))) T)
;; Loading (DEFTEST MISC.539 (NOTNOT-MV (COMPLEXP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (EQL #C(0 -8)) X)) (SQRT X)))) #C(0 -8)))) T)
;; Loading (DEFTEST MISC.540 (LET* ((D0 #(A B C D E F G H)) (D1 (MAKE-ARRAY 5 :FILL-POINTER 1 :DISPLACED-TO D0 :DISPLACED-INDEX-OFFSET 2))) (FIND #C(1.0 2.0) D1)) NIL)
;; Loading (DEFTEST MISC.541 (DOTIMES (I 1000) (LET* ((INIT (QUOTE (12 11 8 8 11 10 9 1 3 9 6 12 4 3 6 4 7 10 12 6 11 12 4 15 8 10 7 0 0 0 12 9 6 1 0 14 2 14 6 4 2 2 11 7 13 11 3 9 0 2 3 4 2 11 8 7 9 0 0 3 8 3 10 8 2 8 9 4 9 0 11 4 9 8 12 8 5 2 10 10 1 14 7 8 5 5 7 8 1 13 2 13 12 2 5 11 1 12 12 0 2 5 15 2 14 2 3 10 1 0 7 7 11 3 7 6 1 13 8 4 2 7 14 9 9 7 3 8 1 15 6 11 15 0 11 9 7 15 12 10 6 4 5 6 10 4 4 4 15 5 1 8 9 3 12 11 8 4 10 8 3 15 12 3 4 10 8 12 8 14 2 12 12 14 14 5 14 6 10 13 9 6 4 14 9 6 8 4 11 1 6 0 7 7 5 4 12 15 7 4 4 10 7 3 0 11 10 11 1 8 9 0 12 14 6 2 15 2 5 11 8 3 4 2 9 9 7 0 7 11 13 5 7 12 8 6 12 11 15 3 6 11 0 1 2 7 2 13 14 15 4))) (D0 (MAKE-ARRAY (QUOTE (251)) :ELEMENT-TYPE (QUOTE (INTEGER 0 15)) :INITIAL-CONTENTS INIT :ADJUSTABLE T))) (ASSERT (EQUALP (REMOVE 7 D0) (COERCE (REMOVE 7 INIT) (QUOTE (VECTOR (INTEGER 0 15)))))))) NIL)
;; Loading (DEFTEST MISC.542 (FUNCALL (COMPILE NIL (LET ((BV1 (COPY-SEQ #*1)) (BV2 (COPY-SEQ #*1))) (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (EQ (SYSTEM.INTERNALS::BQ-COMMA BV1) (SYSTEM.INTERNALS::BQ-COMMA BV2))))))) NIL)
;; Loading (DEFTEST MISC.543 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (INTEGER 2493220 2495515) P1)) (* P1 #C(1123113 -260528))))) 2493726) #C(2800736089038 -649685447328))
;; Loading (DEFTEST MISC.544 (LET ((N -1.0)) (NOTNOT-MV (COMPLEXP (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE SPEED (SAFETY 1)) (TYPE (LONG-FLOAT (SYSTEM.INTERNALS::BQ-COMMA N) 0.0) P1)) (SQRT P1)))) N)))) T)
;; Loading (DEFTEST MISC.545 (LET ((X #C(-1 1/2))) (DECLARE (TYPE (EQL #C(-1 1/2)) X)) X) #C(-1 1/2))
;; Loading (DEFTEST MISC.546 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 1) (DEBUG 2) (SPACE 3)) (TYPE (EQL A) P1)) (TYPEP P1 (TYPE-OF ""))))) (QUOTE A)) NIL)
;; Loading (DEFTEST MISC.547 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 3) (DEBUG 0) (SPACE 3)) (TYPE SYMBOL P1)) (TYPEP (THE (EQL :C1) P1) (TYPE-OF "b"))))) :C1) NIL)
;; Loading (DEFTEST MISC.548 (NOTNOT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 3) (SPACE 2))) (ATOM (THE (MEMBER F ASSOC-IF WRITE-LINE T W) P1))))) T)) T)
;; Loading (DEFTEST MISC.549 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 1) (DEBUG 0) (SPACE 3)) (TYPE SYMBOL P2)) (AND :A (THE (EQL T) P2))))) T) T)
;; Loading (DEFTEST MISC.550 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 2) (DEBUG 3) (SPACE 3)) (TYPE ATOM P1) (TYPE SYMBOL P2)) (OR P1 (THE (EQL T) P2))))) NIL T) T)
;; Loading (DEFTEST MISC.551 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 1) (DEBUG 3) (SPACE 3)) (TYPE SYMBOL P1) (TYPE (INTEGER * 55687) P2)) (FUNCALL (THE (EQL +) P1) (THE (INTEGER -93015310 16215) P2) 2952)))) (QUOTE +) 823) 3775)
;; Loading (DEFTEST MISC.551A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (OPTIMIZE (SPEED 2)) (TYPE SYMBOL X)) (THE (EQL T) X)))) T) T)
;; Loading (DEFTEST MISC.552 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 2) (SPACE 2)) (TYPE UNSIGNED-BYTE P1)) (LOGBITP (THE (INTEGER -780969457 *) P1) 9)))) 26) NIL)
;; Loading (DEFTEST MISC.553 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (EQL #C(1.0 2.0)) X)) X))) #C(1.0 2.0)) #C(1.0 2.0))
;; Loading (DEFTEST MISC.554 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (ARRAY T 1) X)) X))) #(A)) #(A))
;; Loading (DEFTEST MISC.555 (NOTNOT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 2) (DEBUG 2) (SPACE 0)) (TYPE KEYWORD P1)) (KEYWORDP P1)))) :C)) T)
;; Loading (DEFTEST MISC.556 (VALUES (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 0) (DEBUG 0) (SPACE 0)) (TYPE (MEMBER 8174.860351) P1) (TYPE (MEMBER -95195347) P2)) (FLOOR P1 P2)))) 8174.860351 -95195347)) -1)
;; Loading (DEFTEST MISC.557 (VALUES (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (DEBUG 3) (SPACE 1)) (TYPE (MEMBER -94430.085937) P1)) (FLOOR (THE SINGLE-FLOAT P1) 19311235)))) -94430.085937)) -1)
;; Loading (DEFTEST MISC.558 (VALUES (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 2) (DEBUG 2) (SPACE 3)) (TYPE (EQL -39466.558593) P1)) (FFLOOR P1 305598613)))) -39466.558593)) -1.0)
;; Loading (DEFTEST MISC.559 (VALUES (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 1) (DEBUG 1) (SPACE 2)) (TYPE (EQL -83232.09375) P1)) (CEILING P1 -83381228)))) -83232.09375)) 1)
;; Loading (DEFTEST MISC.560 (VALUES (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 1) (DEBUG 1) (SPACE 0)) (TYPE (MEMBER -66414.414062) P1)) (CEILING P1 -63019172.0)))) -66414.414062)) 1)
;; Loading (DEFTEST MISC.561 (VALUES (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 1) (DEBUG 0) (SPACE 1)) (TYPE (EQL 20851.398437) P1)) (FCEILING P1 80839863)))) 20851.398437)) 1.0)
;; Loading (DEFTEST MISC.562 (LET ((FN (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 0) (DEBUG 0) (SPACE 2)) (TYPE (COMPLEX RATIONAL) P1)) (LOG P1))))) (NOTNOT (COMPLEXP (FUNCALL (COMPILE NIL FN) #C(-215549 39/40))))) T)
;; Loading (DEFTEST MISC.563 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 0) (DEBUG 3) (SPACE 1)) (TYPE (COMPLEX RATIONAL) X)) (CONJUGATE (THE (EQL #C(1 2)) X))))) #C(1 2)) #C(1 -2))
;; Loading (DEFTEST MISC.564 (NOTNOT (TYPEP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 2) (DEBUG 3) (SPACE 0)) (TYPE COMPLEX P1)) (PHASE (THE (EQL #C(1.0 2.0)) P1))))) #C(1.0 2.0)) (QUOTE DOUBLE-FLOAT))) T)
;; Loading (DEFTEST MISC.565 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 3) (SPACE 0)) (TYPE DOUBLE-FLOAT X)) (NOT (THE (EQL 1.0) X))))) 1.0) NIL)
;; Loading (DEFTEST MISC.566 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 2) (DEBUG 2) (SPACE 0)) (TYPE (INTEGER 465 127871) P1)) (ASH P1 -35)))) 477) 0)
;; Loading (DEFTEST MISC.567 (EQLT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 0) (SPACE 1)) (TYPE (INTEGER -26794287907 505600792) P2)) (SCALE-FLOAT -15193.34082 (THE (INTEGER * 25) P2))))) -4) (SCALE-FLOAT -15193.34082 -4)) T)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.568 (VALUES (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 3) (DEBUG 3) (SPACE 1)) (TYPE (RATIONAL * 5325/3112) P2)) (FLOOR 13026.058593 (THE (MEMBER 5325/3112 0 2316/167 449/460) P2))))) 5325/3112)) 7612)
;; Loading (DEFTEST MISC.569 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 2) (DEBUG 1) (SPACE 2)) (TYPE T P2)) (ASH -2609443 (THE (INTEGER -3 0) P2))))) -1) -1304722)
;; Loading (DEFTEST MISC.570 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1))) (CHAR-EQUAL #\: #\: #\;))))) NIL)
;; Loading (DEFTEST MISC.571 (AND (< 1000 CHAR-CODE-LIMIT) (LET ((C1 (CODE-CHAR 1000)) (C2 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (OPTIMIZE SPEED (SAFETY 1))) (CODE-CHAR X)))) 1000))) (IF (NOT (EQL C1 C2)) (LIST C1 C2) NIL))) NIL)
;; Loading (DEFTEST MISC.572 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P4) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 2) (DEBUG 1) (SPACE 1)) (TYPE (INTEGER -59 65558) P4)) (STRING<= "1yapt1l7eeenz72u6xqhdfimcyk" "bababababbbabbabbababb" :START2 (THE (INTEGER -3735 *) P4))))) 22) NIL)
;; Loading (DEFTEST MISC.573 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P4) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 2) (SPACE 2)) (TYPE UNSIGNED-BYTE P4)) (STRING<= (COERCE "pdhd5oeynvqlthz3xrrdycotf" (QUOTE BASE-STRING)) (COERCE "" (QUOTE BASE-STRING)) :START1 (THE (INTEGER * 81) P4))))) 10) NIL)
;; Loading (DEFTEST MISC.574 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P4) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 1) (SPACE 2)) (TYPE (INTEGER * 397079023) P4)) (STRING<= (COERCE "e99mo7yAJ6oU4" (QUOTE BASE-STRING)) (COERCE "aaABAAbaa" (QUOTE BASE-STRING)) :START1 (THE (MEMBER -34 131074 67108872 9 -3305367300 335) P4))))) 9) 9)
;; Loading (DEFTEST MISC.575 (EQUALP #C(1269346.0 47870.121093) T) NIL)
;; Loading (DEFTEST MISC.576 (* -7023900320 #C(435422075/240892576 373)) #C(95573789122736375/7527893 -2619914819360))
;; Loading (DEFTEST MISC.577 (/ -3185994774 #C(555014/122849 -6641556271)) #C(217230410502882805764/665706755984253572883257634437 319343563321640207257301634954/665706755984253572883257634437))
;; Loading (DEFTEST MISC.578 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE SAFETY)) (THE (STRING 1) P1)))) (MAKE-ARRAY (QUOTE (1)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\x :FILL-POINTER 0)) "")
;; Loading (DEFTEST MISC.579 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 3) (DEBUG 3) (SPACE 0))) (MEMBER 61 (QUOTE (432445)) :ALLOW-OTHER-KEYS T :FOO T))))) NIL)
;; Loading (DEFTEST MISC.580 (NOTNOT-MV (TYPEP #C(1 2) (QUOTE (COMPLEX (OR RATIO FIXNUM))))) T)
;; Loading (DEFTEST MISC.581 (NOTNOT (FLOATP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (EQL -5067.205566) X)) (+ 213734822 X)))) -5067.205566))) T)
;; Loading (DEFTEST MISC.581A (NOTNOT (TYPEP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (TYPE (EQL -1.0) X)) (+ 16777217 X)))) -1.0) (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST MISC.582 (LET ((RESULT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 1) (DEBUG 1) (SPACE 1)) (TYPE (EQL -39887.644531) P1)) (MOD P1 382352925)))) -39887.644531))) (IF (PLUSP RESULT) T RESULT)) T)
;; Loading (DEFTEST MISC.583 (NOTNOT-MV (COMPLEXP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 0) (DEBUG 2) (SPACE 3)) (TYPE (COMPLEX RATIONAL) P1)) (SQRT P1)))) #C(-9003 -121)))) T)
;; Loading (DEFTEST MISC.584 (APPROX= (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 1) (DEBUG 0) (SPACE 1)) (TYPE (MEMBER -3712.844726) P1) (TYPE (INTEGER -34359738403 -24) P2)) (SCALE-FLOAT P1 P2)))) -3712.844726 -27) (SCALE-FLOAT -3712.844726 -27)) T)
;; Loading (DEFTEST MISC.585 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 0) (DEBUG 3) (SPACE 3)) (TYPE SYMBOL P1)) (COPY-LIST P1)))) NIL) NIL)
;; Loading (DEFTEST MISC.586 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P6) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 0)) (TYPE (INTEGER -2 3009181) P6)) (STRING> (COERCE "ababaaabb" (QUOTE BASE-STRING)) (COERCE "ubbm" (QUOTE BASE-STRING)) :START1 2 :START2 P6 :END1 8)))) 4) 2)
;; Loading (DEFTEST MISC.587 (LET ((RESULT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 3) (DEBUG 1) (SPACE 0)) (TYPE (EQL 33558541) P2)) (- 92215.265625 P2)))) 33558541))) (NOTNOT (TYPEP RESULT (QUOTE SINGLE-FLOAT)))) T)
;; Loading (DEFTEST MISC.588 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 1) (SPACE 1))) (FUNCTIONP 3502843))))) NIL)
;; Loading (DEFTEST MISC.589 (TYPEP 1 (QUOTE (ARRAY NIL))) NIL)
;; Loading (DEFTEST MISC.590 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE DEBUG)) (SYMBOLP -86755))))) NIL)
;; Loading (DEFTEST MISC.591 (LET* ((S1 (COERCE "708553218828630100500" (QUOTE BASE-STRING))) (S2 (MAKE-ARRAY (QUOTE (13)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO S1 :DISPLACED-INDEX-OFFSET 5))) (PARSE-INTEGER S2)) 3218828630100 13)
;; Loading (DEFTEST MISC.592 (EQUALP #*0 "0") NIL)
;; Loading (DEFTEST MISC.593 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPACE 3) (DEBUG 0) (SAFETY 1) (COMPILATION-SPEED 3) (SPEED 1))) (PROG2 (CATCH (QUOTE CT1) (IF (OR (AND T (NOT (AND (AND (OR A T) NIL) NIL))) NIL) A (REDUCE (FUNCTION (LAMBDA (LMV5 LMV2) 0)) (VECTOR B 0 A)))) 0)))) 2212755 3154856) 0)
;; Loading (DEFTEST MISC.594 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (IGNORABLE A B C)) (DECLARE (TYPE (INTEGER -1 0) A) (TYPE (INTEGER -1065019672 -181184465) B) (TYPE (INTEGER 30074 1948824693) C)) (DECLARE (OPTIMIZE (SAFETY 2) (COMPILATION-SPEED 1) (SPEED 2) (SPACE 0) (DEBUG 0))) (ASH C (MIN 82 -28192897))))) 0 -714979492 1474663829) 0)
;; Loading (DEFTEST MISC.595 (FLOOR 1/2 1.0) 0 0.5)
;; Loading (DEFTEST MISC.596 (NOTNOT (LET ((S (COERCE "a" (QUOTE BASE-STRING)))) (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 3) (DEBUG 2) (SPACE 1))) (TYPEP (SYSTEM.INTERNALS::BQ-COMMA S) (QUOTE (STRING 1))))))))) T)
;; Loading (DEFTEST MISC.597 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPEED 1) (COMPILATION-SPEED 2) (SPACE 1) (DEBUG 1) (SAFETY 2))) (DECLARE (TYPE (INTEGER 1 41) C)) (LOGXOR -1 C)))) 8) -9)
;; Loading (DEFTEST MISC.598 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 0) (DEBUG 3) (SPACE 1)) (TYPE SHORT-FLOAT P1)) (IMAGPART (THE SHORT-FLOAT P1))))) -79916.609375) 0.0)
;; Loading (DEFTEST MISC.599 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 19856842407 20640917103) B)) (DECLARE (OPTIMIZE (DEBUG 1) (SPEED 3) (COMPILATION-SPEED 2) (SAFETY 3) (SPACE 3))) (LOGNAND B (DEPOSIT-FIELD B (BYTE 0 0) 3762528061))))) 20408096470) -3225589269)
;; Loading (DEFTEST MISC.600 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (NOTINLINE MIN ASH)) (DECLARE (OPTIMIZE (SPEED 0) (DEBUG 1) (SAFETY 1) (SPACE 1) (COMPILATION-SPEED 3))) (LOGXOR (ASH 0 (MIN 90 0)) 0))))) 0)
;; Loading (DEFTEST MISC.601 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (NOTINLINE GCD)) (DECLARE (OPTIMIZE (DEBUG 3) (SPACE 3) (SAFETY 3) (COMPILATION-SPEED 2) (SPEED 3))) (LOGEQV 0 (GCD 0)))))) -1)
;; Loading (DEFTEST MISC.602 (LET ((FORM (QUOTE (LAMBDA NIL (IF (ODDP (PROGN (VECTOR) 3747237)) (QUOTE A) NIL))))) (LOOP REPEAT 10 COLLECT (FUNCALL (COMPILE NIL FORM)))) (A A A A A A A A A A))
;; Loading (DEFTEST MISC.603 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET ((X (VALUES 0))) 0))))) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.604 (LET ((FORM (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 3) (SPACE 3)) (TYPE REAL P1) (TYPE T P2)) (EQL (THE (RATIONAL 55253767/37931089) P1) (THE ATOM P2)))))) (FUNCALL (COMPILE NIL FORM) 55253767/37931089 (QUOTE A))) NIL)
;; Loading (DEFTEST MISC.605 (LET ((FORM (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 0) (SPACE 0)) (TYPE NUMBER P1) (TYPE (FLOAT 0.0 3579.313964) P2)) (EQL (THE REAL P1) P2))))) (NOT (FUNCALL (COMPILE NIL FORM) 3579.313964 3579.313964))) NIL)
;; Loading (DEFTEST MISC.606 (LET ((FORM (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 2) (DEBUG 3) (SPACE 2))) (EQUAL #\a #C(-1775806.0 88367.289062)))))) (FUNCALL (COMPILE NIL FORM))) NIL)
;; Loading (DEFTEST MISC.607 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 2) (SPACE 2))) (EQUAL #*1 1))))) NIL)
;; Loading (DEFTEST MISC.608 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 2) (DEBUG 3) (SPACE 3)) (TYPE (INTEGER -62603278 -31187) P1)) (EQUAL P1 #\&)))) -31228) NIL)
;; Loading (DEFTEST MISC.609 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 0) (DEBUG 0) (SPACE 3))) (EQUALP "b" #*))))) NIL)
;; Loading (DEFTEST MISC.610 (NOT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 1) (DEBUG 3) (SPACE 2)) (TYPE (CONS SYMBOL) P2)) (TYPEP -32 P2)))) (QUOTE (EQL -32)))) NIL)
;; Loading (DEFTEST MISC.611 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 3) (DEBUG 0) (SPACE 2)) (TYPE (CONS ATOM) P1)) (CAR P1)))) (QUOTE (48144509 . A))) 48144509)
;; Loading (DEFTEST MISC.612 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) ((LAMBDA (X Y) (TYPEP X (TYPE-OF Y))) P1 (THE (MEMBER "foo" #\- :B "bar") P2))))) #*1 :B) NIL)
;; Loading (DEFTEST MISC.613 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (OPTIMIZE (SPACE 3) (SAFETY 1) (DEBUG 3) (SPEED 1) (COMPILATION-SPEED 3))) (CATCH (QUOTE CT1) (REDUCE (FUNCTION (LAMBDA (LMV6 LMV5) (THROW (QUOTE CT1) 0))) (LIST A 0 0) :END 2))))) 1) 0)
;; Loading (DEFTEST MISC.614 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -3873004182 -3717314779) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (DEBUG 0) (SAFETY 1) (SPEED 3) (SPACE 0) (COMPILATION-SPEED 0))) (LET* ((V1 (MAKE-ARRAY NIL :INITIAL-ELEMENT (REDUCE (FUNCTION LOGAND) (LIST A 0 A))))) (DECLARE (DYNAMIC-EXTENT V1)) 0)))) -3755148485) 0)
;; Loading (DEFTEST MISC.615 (LET* ((X -8183.762695) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (P1) (EQL P1 (SYSTEM.INTERNALS::BQ-COMMA X)))))) (NOT (NOT (FUNCALL (COMPILE NIL FORM) X)))) T)
;; Loading (DEFTEST MISC.616 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B C) (DECLARE (TYPE (INTEGER -153105 -36629) A)) (DECLARE (TYPE (INTEGER -7811721705 3704985368) B)) (DECLARE (TYPE (INTEGER 0 15) C)) (DECLARE (IGNORABLE A B C)) (DECLARE (OPTIMIZE (SAFETY 1) (SPACE 0) (COMPILATION-SPEED 0) (SPEED 3) (DEBUG 3))) (CATCH (QUOTE CT7) (LABELS ((%F12 (F12-1 F12-2 &OPTIONAL &KEY (KEY1 0) (KEY2 (REDUCE (FUNCTION (LAMBDA (LMV2 LMV1) 0)) (VECTOR 0 0) :END 2 :START 0 :FROM-END T)) &ALLOW-OTHER-KEYS) A)) C))))) -134217 -3699719058 10) 10)
;; Loading (DEFTEST MISC.617 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (OPTIMIZE (SPACE 3) (SAFETY 2) (DEBUG 1) (SPEED 3) (COMPILATION-SPEED 2))) (LET* ((V2 16561216769)) (LOGNAND (LOOP FOR LV3 BELOW 0 SUM (SETF V2 LV3)) (IF (TYPEP V2 (QUOTE (INTEGER -39 7))) B 0)))))) -10298) -1)
;; Loading (DEFTEST MISC.618 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (C) (DECLARE (OPTIMIZE (SPACE 0) (COMPILATION-SPEED 2) (DEBUG 0) (SPEED 3) (SAFETY 0))) (BLOCK B1 (IGNORE-ERRORS (MULTIPLE-VALUE-PROG1 0 (APPLY (CONSTANTLY 0) C (CATCH (QUOTE CT2) (RETURN-FROM B1 0)) NIL))))))) -4951) 0)
;; Loading (DEFTEST MISC.619 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (B) (DECLARE (TYPE (INTEGER 75 206) B)) (DECLARE (OPTIMIZE (SPEED 0) (COMPILATION-SPEED 2) (DEBUG 2) (SPACE 2) (SAFETY 2))) (MASK-FIELD (BYTE 4 28) (ASH B 70))))) 79) 0)
;; Loading (DEFTEST MISC.620 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 3) (COMPILATION-SPEED 3) (DEBUG 1) (SPACE 3) (SPEED 1))) (LOOP FOR LV2 BELOW 1 SUM (ASH LV2 64)))))) 0)
;; Loading (DEFTEST MISC.621 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (DEBUG 1) (SPACE 0) (COMPILATION-SPEED 3) (SPEED 1) (SAFETY 3))) (LOOP FOR LV1 BELOW 2 SUM (DOTIMES (IV2 2 0) (MOD (DOTIMES (IV4 2 0) (PROGN (COUNT LV1 #*0) 0)) (MIN -63 (REM 0 (MIN -67 0)))))))))) 0)
;; Loading (DEFTEST MISC.622 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 2) (DEBUG 3) (SPACE 0)) (TYPE REAL P2)) (+ 81535869 (THE (MEMBER 17549.955078 #:G35917) P2))))) 17549.955078) 81553424.0)
;; Loading (DEFTEST MISC.623 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPACE 2) (SPEED 0) (DEBUG 2) (COMPILATION-SPEED 3) (SAFETY 0))) (LOOP FOR LV3 BELOW 1 COUNT (MINUSP (LOOP FOR LV2 BELOW 2 COUNT (LOGBITP 0 (BIT #*1001101001001 (MIN 12 (MAX 0 LV3))))))))))) 0)
;; Loading (DEFTEST MISC.624 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 21 28) A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 1) (SAFETY 2) (SPEED 0) (DEBUG 0) (SPACE 1))) (LET* ((V7 (FLET ((%F3 (F3-1 F3-2) (LOOP FOR LV2 BELOW 1 COUNT (LOGBITP 29 (SBIT #*10101111 (MIN 7 (MAX 0 (EVAL (QUOTE 0))))))))) (%F3 0 A)))) 0)))) 22) 0)
;; Loading (DEFTEST MISC.625 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -2 -1) A)) (DECLARE (OPTIMIZE (SPEED 0) (SPACE 0) (SAFETY 1) (DEBUG 3) (COMPILATION-SPEED 1))) (ELT (QUOTE (47119 39679 57498 35248 23784 40597 53473 29454)) (MIN 7 (MAX 0 (FLET ((%F7 (F7-1 F7-2 &OPTIONAL &KEY (KEY1 (ELT (QUOTE (0 25 30 12 27 5)) (MIN 5 (MAX 0 3))))) 0)) (FLET ((%F6 (&OPTIONAL &KEY (KEY1 (PROGN (%F7 0 A) A)) (KEY2 0)) 0)) (%F7 A A))))))))) -2) 47119)
;; Loading (DEFTEST MISC.625A (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A B) (DECLARE (TYPE (INTEGER 1 5) B)) (DECLARE (OPTIMIZE (SAFETY 2) (SPEED 2) (SPACE 0) (COMPILATION-SPEED 3) (DEBUG 3))) (PROGN (FLET ((%F3 (F3-1 F3-2 &OPTIONAL (F3-3 B) F3-4 (F3-5 (PROG1 0 (ELT (QUOTE (A B C D E F G H I J K L M)) 12)))) F3-1)) (%F3 0 (%F3 0 A 0 A) A 0 A)) (ELT (QUOTE (A B C D)) (MIN 3 B)))))) 0 2) C)
;; Loading (DEFTEST MISC.626 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -902970 2) A)) (DECLARE (OPTIMIZE (SPACE 2) (DEBUG 0) (COMPILATION-SPEED 1) (SPEED 0) (SAFETY 3))) (PROG2 (IF (LOGBITP 30 A) 0 (BLOCK B3 0)) A)))) -829253) -829253)
;; Loading (DEFTEST MISC.628 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SAFETY 3) (SPACE 3) (COMPILATION-SPEED 3) (SPEED 0) (DEBUG 1))) (NOT (NOT (LOGBITP 0 (FLOOR 2147483651 (MIN -23 0))))))))) T)
;; Loading (DEFSTRUCT MISC-629 A B)
;; Loading (DEFTEST MISC.629 (LET* ((S (MAKE-MISC-629 :A 1 :B 3)) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (X) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 3) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER 0 2 (SYSTEM.INTERNALS::BQ-COMMA S)) X)) (MISC-629-A GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
X))))) (FUNCALL (COMPILE NIL FORM) S)) 1)
;; Loading (DEFTEST MISC.630 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (DEBUG 0) (SPACE 2) (SAFETY 0) (COMPILATION-SPEED 0))) (UNWIND-PROTECT 0 (* (/ (MULTIPLE-VALUE-PROG1 -29457482 -5602513511) 1))))))) 0)
;; Loading (DEFTEST MISC.631 (IF (FLET ((%F17 (&KEY (KEY2 (IF (EVENP (MULTIPLE-VALUE-PROG1 0)) 0 0))) 0)) 0) :A :B) :A)
;; Loading (DEFTEST MISC.632 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA NIL (LET (B) (MULTIPLE-VALUE-SETQ (B) 10)))))) 10)
;; Loading (DEFTEST MISC.633 (LET* ((X -17045.0) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (P3 P4) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 3) (DEBUG 0) (SPACE 1)) (TYPE NUMBER P3) (TYPE (MEMBER -1451.125732 47889 #:3 (SYSTEM.INTERNALS::BQ-COMMA X) #:\a\a\b\b\a\a\a\a\a\a\b\a\b\a) P4)) (MIN 1 -251.245498 (THE NUMBER P3) (THE (MEMBER 1+ (SYSTEM.INTERNALS::BQ-COMMA X) #\b #:\u4\m7\k0\j\z6\o) P4) 1506/1283 65681158/19740963))))) (FUNCALL (COMPILE NIL FORM) 1861 X)) -17045.0)
;; Loading (DEFTEST MISC.634 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 3) (DEBUG 3) (SPACE 2)) (TYPE NUMBER P2)) (- -83659.0 (THE (MEMBER 35182846) P2)))))) (FUNCALL (COMPILE NIL FORM) 35182846)) -35266508.0)
;; Loading (DEFTEST MISC.635 (LET* ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 1) (DEBUG 2) (SPACE 2)) (TYPE (MEMBER -19261719) P2)) (CEILING -46022.09375 P2))))) (VALUES (FUNCALL (COMPILE NIL FORM) -19261719))) 1)
;; Loading (DEFTEST MISC.636 (LET* ((X 26899.875) (FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 1) (DEBUG 3) (SPACE 1)) (TYPE (MEMBER (SYSTEM.INTERNALS::BQ-COMMA X) #:G5437 CHAR-CODE #:G5438) P2)) (* 104102267 P2))))) (NOT (NOT (FLOATP (FUNCALL (COMPILE NIL FORM) X))))) T)
;; Loading (DEFTEST MISC.637 (LABELS ((%F11 (F11-2 &KEY KEY1) (LABELS ((%F8 (F8-2 &OPTIONAL (F8-5 (IF NIL (RETURN-FROM %F11 0) 0))) :BAD1)) (%F8 (%F8 0))) :BAD2)) :GOOD) :GOOD)
;; Loading (DEFTEST MISC.638 (LET* ((CODES (QUOTE (32779 60674 33150 60033 41146 23916 28908 58886 12776 21282 37346 25537 56184 40736 4845 41954 6663 44378 23466 46903 13661 36445 18784 6114 6266))) (CHARS (LOOP FOR CODE IN CODES COLLECT (OR (CODE-CHAR CODE) #\x))) (C (ELT CHARS 21)) (S (MAKE-ARRAY (QUOTE (25)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS CHARS))) (LET ((FORM (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 0) (DEBUG 3) (SPACE 1)) (TYPE (SIMPLE-STRING 25) P1)) (CHAR (THE (MEMBER (SYSTEM.INTERNALS::BQ-COMMA (LET ((S2 "abbbabbaaabbaba")) (MAKE-ARRAY (LENGTH S2) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS S2))) (SYSTEM.INTERNALS::BQ-COMMA S)) P1) 21))))) (NOT (NOT (EQL C (FUNCALL (COMPILE NIL FORM) S)))))) T)
;; Loading (DEFTEST MISC.639 (LET ((FORM (QUOTE (LAMBDA (A B D) (DECLARE (NOTINLINE >= EQL)) (DECLARE (OPTIMIZE (DEBUG 2) (SPEED 3) (SAFETY 0) (COMPILATION-SPEED 3) (SPACE 0))) (LABELS ((%F8 (F8-1 &OPTIONAL (F8-4 (IF (IF (EQL 0 -16) (>= D) NIL) 0 0))) A)) (%F8 B)))))) (FUNCALL (COMPILE NIL FORM) :GOOD 18 0)) :GOOD)
;; Loading (DEFTEST MISC.640 (LET ((FORM (QUOTE (LAMBDA (B G) (DECLARE (TYPE (INTEGER 303184 791836) B)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 2) (DEBUG 0) (SPACE 1) (SPEED 1) (SAFETY 2))) (LOOP FOR LV1 BELOW 2 SUM (IF (<= G LV1) (LABELS ((%F7 NIL (PROG1 B 0))) (%F7)) (SETF G -16188661082))))))) (FUNCALL (COMPILE NIL FORM) 335562 4655131896)) -16188325520)
;; Loading (DEFTEST MISC.641 (LET ((FORM (QUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 1) (SPACE 0) (DEBUG 2) (COMPILATION-SPEED 0) (SAFETY 1))) (FLET ((%F3 (F3-1 &KEY (KEY1 (COUNT (FLOOR 0 (MIN -74 0)) #()))) 0)) (APPLY (FUNCTION %F3) 0 NIL)))))) (FUNCALL (COMPILE NIL FORM))) 0)
;; Loading (DEFTEST MISC.642 (LET ((FORM (QUOTE (LAMBDA (A B C D E F G H I J) (DECLARE (TYPE (INTEGER 174130 60165950) A)) (DECLARE (TYPE (INTEGER -4076 6783) B)) (DECLARE (TYPE (INTEGER -178481569 -1) C)) (DECLARE (TYPE (INTEGER 236 954963169) D)) (DECLARE (TYPE (INTEGER -1334 407047) E)) (DECLARE (TYPE (INTEGER -507 -426) F)) (DECLARE (TYPE (INTEGER -1164301 148213922) G)) (DECLARE (TYPE (INTEGER -184324 14515) H)) (DECLARE (TYPE (INTEGER 258 323) I)) (DECLARE (TYPE (INTEGER -11825 109247) J)) (DECLARE (IGNORABLE A B C D E F G H I J)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 2) (DEBUG 0) (SPACE 1) (SPEED 3) (SAFETY 2))) (LABELS ((%F4 (F4-1) (FLET ((%F2 (F2-1 F2-2 F2-3 &KEY) (PROGN (RETURN-FROM %F4 0) F2-2))) (COMMON-LISP:HANDLER-BIND NIL (/ (COERCE (UNWIND-PROTECT (REDUCE (FUNCTION (LAMBDA (LMV2 LMV4) (REDUCE (FUNCTION *) (VECTOR (LET NIL H) C (REDUCE (FUNCTION (LAMBDA (LMV4 LMV3) (RETURN-FROM %F4 (DEPOSIT-FIELD LMV4 (BYTE 23 16) (MASK-FIELD (BYTE 3 27) (ELT (QUOTE (5309746)) (MIN 0 (MAX 0 J)))))))) (VECTOR (%F2 (%F2 12762 F4-1 6646240924) 1501 -15) 277 (MULTIPLE-VALUE-CALL (FUNCTION %F2) (VALUES -1486981 I (%F2 A 16777222 J))) 1033) :END 4 :START 3) (/ 823 -1)) :END 3 :START 1))) (VECTOR (COMMON-LISP:HANDLER-BIND NIL (- 0 H J B -2539837 28596 D 8161548 H -61)) -183768642 -1 31404552 81593) :START 3) (DPB I (BYTE 14 16) E) (DPB (COUNT F4-1 #(524279 8388596 1021351 101986) :TEST (QUOTE /=)) (BYTE 4 4) 131064) (IF (= 524287 F) (PROG2 (DENOMINATOR (ELT (QUOTE (1663 120)) (MIN 1 (MAX 0 -17745)))) F (DEPOSIT-FIELD E (BYTE 31 31) 0) (LABELS ((%F7 (F7-1 F7-2 F7-3 &OPTIONAL (F7-4 (COERCE (COERCE (THE INTEGER (+ -11045 114)) (QUOTE INTEGER)) (QUOTE INTEGER))) (F7-5 H)) -2286515)) J)) (MACROLET NIL (PROG2 -2195 1921675 H -183085 A)))) (QUOTE INTEGER)) 1))))) 0))))) (FUNCALL (COMPILE NIL FORM) 58162926 -3652 -63561386 935157597 63716 -504 108893677 -146677 308 99009)) 0)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST MISC.643 (LET ((FORM (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER 6 1273) A)) (DECLARE (OPTIMIZE (SPACE 0) (SAFETY 0) (DEBUG 3) (COMPILATION-SPEED 2) (SPEED 3))) (LOGORC2 0 (RESTART-BIND NIL (SHIFTF A 522))))))) (FUNCALL (COMPILE NIL FORM) 807)) -808)
;; Loading (DEFTEST MISC.644 (LET ((FORM (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -6568333536 -12667) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (COMPILATION-SPEED 1) (SAFETY 3) (SPEED 1) (DEBUG 1) (SPACE 3))) (UNWIND-PROTECT 0 (THE INTEGER (LOCALLY (DECLARE (SPECIAL *S3* *S4*)) (PROGV (QUOTE (*S4* *S3*)) (LIST A A) (EXPT *S3* 0))))))))) (LET ((*S3* 0)) (DECLARE (SPECIAL *S3*)) (FUNCALL (COMPILE NIL FORM) -1520586839))) 0)
;; Loading (DEFTEST MISC.645 (LET ((FORM (QUOTE (LAMBDA (A) (DECLARE (NOTINLINE ABS ISQRT)) (DECLARE (OPTIMIZE (DEBUG 3) (SAFETY 1) (SPACE 2) (COMPILATION-SPEED 1) (SPEED 0))) (PROGN (TAGBODY (PROG2 A 0 (LABELS ((%F9 (&KEY &ALLOW-OTHER-KEYS) (GO 3))) (%F9))) (ISQRT (ABS (UNWIND-PROTECT 0))) 3) A))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA FORM) 0)))) 0)
;; Loading (DEFTEST MISC.646 (LET ((FORM (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -125 -44) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPEED 0) (DEBUG 0) (SPACE 2) (COMPILATION-SPEED 3) (SAFETY 3))) (MASK-FIELD (BYTE 0 0) (BLOCK B3 (ISQRT (ABS (CATCH (QUOTE CT2) (RETURN-FROM B3 0)))))))))) (FUNCALL (COMPILE NIL FORM) -50)) 0)
;; Loading (DEFTEST MISC.647 (LET ((FORM (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -2494 534) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPEED 0) (SPACE 0) (COMPILATION-SPEED 3) (SAFETY 1) (DEBUG 1))) (DOTIMES (IV3 1 0) (BLOCK B1 (LOOP FOR LV1 BELOW 1 COUNT (LOGBITP 0 (REDUCE (FUNCTION (LAMBDA (LMV6 LMV2) (IF (> 2208446653 LMV6) (RETURN-FROM B1 LMV2) LV1))) (LIST 0 0 0 1928431123 IV3 IV3 A A) :END 5 :FROM-END T))))))))) (FUNCALL (COMPILE NIL FORM) 1)) 0)
;; Loading (DEFTEST MISC.648 (LET ((FORM (QUOTE (LAMBDA (A) (DECLARE (TYPE (INTEGER -8 11754838336) A)) (DECLARE (IGNORABLE A)) (DECLARE (OPTIMIZE (SPACE 0) (COMPILATION-SPEED 0) (SPEED 3) (DEBUG 3) (SAFETY 0))) (LABELS ((%F13 NIL (LOGORC1 (UNWIND-PROTECT 0) (PROG1 0 (PROG2 (MAX 0 A) 0 (PROGN (RETURN-FROM %F13 A) A)))))) 0))))) (FUNCALL (COMPILE NIL FORM) 2582756596)) 0)
;; Loading (DEFTEST MISC.649 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 0) (DEBUG 2) (SPACE 2)) (TYPE (MEMBER INTEGER *) P2)) (COERCE 523242 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) 523242)
;; Loading (DEFTEST MISC.650 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER INTEGER AND) P2)) (COERCE -12 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) -12)
;; Loading (DEFTEST MISC.651 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER INTEGER OR) P2)) (COERCE 1 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) 1)
;; Loading (DEFTEST MISC.652 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER INTEGER NOT) P2)) (COERCE 2 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) 2)
;; Loading (DEFTEST MISC.653 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER INTEGER SATISFIES) P2)) (COERCE 2 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) 2)
;; Loading (DEFTEST MISC.654 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER INTEGER EQL) P2)) (COERCE 2 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) 2)
;; Loading (DEFTEST MISC.655 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER INTEGER MEMBER) P2)) (COERCE 2 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) 2)
;; Loading (DEFTEST MISC.656 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER INTEGER MOD) P2)) (COERCE 2 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) 2)
;; Loading (DEFTEST MISC.657 (LET ((FORM (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 2) (DEBUG 0) (SPACE 2)) (TYPE (MEMBER INTEGER VALUES) P2)) (COERCE 2 P2))))) (FUNCALL (COMPILE NIL FORM) (QUOTE INTEGER))) 2)
;; Loading (LOAD "misc-cmucl-type-prop.lsp")
;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/misc-cmucl-type-prop.lsp 81F5C737>
;; Loading (IN-PACKAGE :CL-TEST)
;; Loading (DEFTEST CMUCL-TYPE-PROP.1 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 2) (SPACE 3)) (TYPE (MEMBER 2 -4 -211907662 -27215198) P1)) (LOGAND (THE (INTEGER * 161212781) P1) 10600829)))) -27215198) 2129952)
;; Loading (DEFTEST CMUCL-TYPE-PROP.2 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 3) (SPACE 3)) (TYPE (INTEGER 1619851121 1619868587) P1) (TYPE (INTEGER * 303689) P2)) (LOGANDC2 (THE (INTEGER -5359291650 1619851136) P1) (THE UNSIGNED-BYTE P2))))) 1619851124 300065) 1619551060)
;; Loading (DEFTEST CMUCL-TYPE-PROP.3 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 0) (SPACE 3)) (TYPE (INTEGER 59087 63964) P1)) (LOGIOR P1 -65887623)))) 59967) -65869185)
;; Loading (DEFTEST CMUCL-TYPE-PROP.4 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 0) (SPACE 3)) (TYPE (INTEGER 3585942 72924743) P1) (TYPE (INTEGER -70689 *) P2)) (LOGORC2 (THE (INTEGER * 8514860) P1) (THE (INTEGER 1 411) P2))))) 3586455 4) -1)
;; Loading (DEFTEST CMUCL-TYPE-PROP.5 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 2) (SPACE 3)) (TYPE (INTEGER -257 *) P2)) (LOGNAND 1020158769 (THE (INTEGER -5275217 2381998) P2))))) 2) -1)
;; Loading (DEFTEST CMUCL-TYPE-PROP.6 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 0) (SPACE 3)) (TYPE (INTEGER -96413017 -96297711) P1)) (LOGNAND P1 3472289945)))) -96413016) -3393245321)
;; Loading (DEFTEST CMUCL-TYPE-PROP.7 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 2) (SPACE 3)) (TYPE (INTEGER 438294 891242) P1) (TYPE (MEMBER 16317 -15 -541332155 33554427) P2)) (LOGAND (THE (INTEGER -33116139 1759877902) P1) P2)))) 438295 16317) 12309)
;; Loading (DEFTEST CMUCL-TYPE-PROP.8 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 1) (SPACE 3)) (TYPE (INTEGER -728025757 -727856169) P1)) (LOGORC1 (THE (INTEGER -734005577 -727855553) P1) -3311)))) -727856176) -2241)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (DEFTEST CMUCL-TYPE-PROP.9 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 3) (SPACE 3)) (TYPE (INTEGER * 1489068) P1) (TYPE (INTEGER -7455 *) P2)) (LOGEQV (THE (MEMBER 9543 -15 32766 -264472) P1) (THE (INTEGER -524303 11182721) P2))))) 9543 -8) 9536)
;; Loading (DEFTEST CMUCL-TYPE-PROP.10 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 3) (SPACE 3)) (TYPE (INTEGER -616605365 -616598658) P1) (TYPE (EQL 499113) P2)) (LOGEQV (THE REAL P1) P2)))) -616604953 499113) 617035953)
;; Loading (DEFTEST CMUCL-TYPE-PROP.11 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 0) (SPACE 3)) (TYPE (INTEGER -112225610 *) P1)) (LOGEQV (THE (INTEGER -2822315666 3) P1) 1679389)))) 1) -1679389)
;; Loading (DEFTEST CMUCL-TYPE-PROP.12 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 0) (SPACE 3)) (TYPE (INTEGER -67 268435455) P2)) (LOGEQV 1038360149 (THE (INTEGER -3605943309) P2))))) -1) 1038360149)
;; Loading (DEFTEST CMUCL-TYPE-PROP.13 (NOTNOT (TYPEP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 1) (SPACE 3)) (TYPE (EQL 64848.972656) P1)) (- (THE (EQL 64848.972656) P1) 2808/1031)))) 64848.972656) (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST CMUCL-TYPE-PROP.14 (NOTNOT (TYPEP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 1) (SPACE 3)) (TYPE (INTEGER 9297 *) P2)) (- 54090.828125 (THE (INTEGER * 1263530808) P2))))) 9590) (QUOTE DOUBLE-FLOAT))) T)
;; Loading (DEFTEST CMUCL-TYPE-PROP.15 (NOTNOT (TYPEP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 3) (SPACE 3)) (TYPE (EQL 328536/53893) P1)) (- P1 59218.632812)))) 328536/53893) (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST CMUCL-TYPE-PROP.16 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 3) (SPACE 3)) (TYPE (INTEGER -605782 -28141) P2)) (- -61118 P2)))) -28225) -32893)
;; Loading (DEFTEST CMUCL-TYPE-PROP.17 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 1) (SPACE 3)) (TYPE (INTEGER 5535202) P1)) (- (THE (INTEGER * 27858177) P1) 405)))) 5535436) 5535031)
;; Loading (DEFTEST CMUCL-TYPE-PROP.18 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 2) (SPACE 3)) (TYPE (INTEGER -1175231414 -3471291) P2)) (- -440 P2)))) -3536832) 3536392)
;; Loading (DEFTEST CMUCL-TYPE-PROP.19 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 2) (SPACE 3)) (TYPE (INTEGER -1015240116 5) P2)) (+ 491841 (THE UNSIGNED-BYTE P2))))) 0) 491841)
;; Loading (DEFTEST CMUCL-TYPE-PROP.20 (NOTNOT (TYPEP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 3) (SPACE 3)) (TYPE (RATIONAL 1255531/68466 4) P1)) (+ P1 41888.988281)))) 1255531/68466) (QUOTE DOUBLE-FLOAT))) T)
;; Loading (DEFTEST CMUCL-TYPE-PROP.21 (NOTNOT (TYPEP (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 1) (SPACE 3)) (TYPE (INTEGER -284887911 *) P1)) (+ (THE (INTEGER -50006902 19512639861) P1) 68648.28125)))) -16452463) (QUOTE SINGLE-FLOAT))) T)
;; Loading (DEFTEST CMUCL-TYPE-PROP.22 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 1) (SPACE 3)) (TYPE (COMPLEX DOUBLE-FLOAT) P1)) (= P1 1590311/896933)))) #C(1.0 1.0)) NIL)
;; Loading (DEFTEST CMUCL-TYPE-PROP.23 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 1) (SPACE 3)) (TYPE (COMPLEX SINGLE-FLOAT) P2)) (= -976855 (THE (EQL #C(-57420.039062 806984.0)) P2))))) #C(-57420.039062 806984.0)) NIL)
;; Loading (DEFTEST CMUCL-TYPE-PROP.24 (NOTNOT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 3) (SPACE 3)) (TYPE (INTEGER -3705845 488458) P1) (TYPE (INTEGER * 869076010) P2)) (/= P1 (THE (INTEGER -69832764 470) P2))))) 488456 465)) T)
;; Loading (DEFTEST CMUCL-TYPE-PROP.25 (NOTNOT (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 3) (DEBUG 2) (SPACE 3)) (TYPE (INTEGER -69741922) P1)) (/= (THE (INTEGER * 216) P1) 182)))) 103)) T)
;; Loading (DEFTEST CMUCL-TYPE-PROP.26 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 3) (SPACE 3)) (TYPE (INTEGER -451 204073899) P2)) (< 134799 (THE (INTEGER -56 8589934581) P2))))) -2) NIL)
;; Loading (DEFTEST CMUCL-TYPE-PROP.27 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P2) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 2) (SPACE 3)) (TYPE (INTEGER -93662 *) P2)) (<= -1 (THE (INTEGER -2975848 16770677) P2))))) -6548) NIL)
;; Loading (DEFTEST CMUCL-TYPE-PROP.28 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 0) (SPACE 3)) (TYPE (INTEGER -65545 80818) P1)) (1+ P1)))) -1) 0)
;; Loading (DEFTEST CMUCL-TYPE-PROP.29 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 1) (DEBUG 0) (SPACE 3)) (TYPE (INTEGER -4194320 11531) P1)) (- (THE (INTEGER -6253866924 34530147) P1))))) -20) 20)
;; Loading (DEFTEST CMUCL-TYPE-PROP.30 (LET ((A (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 2) (DEBUG 0) (SPACE 2))) (COPY-SEQ (SYSTEM.INTERNALS::BQ-COMMA (MAKE-ARRAY (QUOTE (0)) :ADJUSTABLE T))))))))) (AND (NOT (ADJUSTABLE-ARRAY-P A)) (= (LENGTH A) 0) T)) T)
;; Loading (DEFTEST CMUCL-TYPE-PROP.31 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (X) (DECLARE (OPTIMIZE (SPEED 2) (SPACE 3))) (PACKAGEP X)))) T) NIL)
;; Loading (DEFTEST CMUCL-TYPE-PROP.32 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P4) (DECLARE (OPTIMIZE (SPEED 1) (SAFETY 1) (DEBUG 1) (SPACE 0)) (TYPE (INTEGER -2040 9) P4)) (STRING< "bbaa" "" :START1 P4)))) 2) NIL)
;; Loading (DEFTEST CMUCL-TYPE-PROP.33 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P4) (DECLARE (OPTIMIZE (SPEED 0) (SAFETY 0) (DEBUG 2) (SPACE 0)) (TYPE (INTEGER -52340 *) P4)) (STRING< "baabbb" "bb" :START2 P4)))) 1) NIL)
;; Loading (DEFTEST CMUCL-TYPE-PROP.34 (FUNCALL (COMPILE NIL (QUOTE (LAMBDA (P1 P4) (DECLARE (OPTIMIZE (SPEED 2) (SAFETY 0) (DEBUG 3) (SPACE 0)) (TYPE (SIMPLE-STRING) P1) (TYPE REAL P4)) (STRING< (THE ARRAY P1) "bbbba" :START1 (THE (INTEGER -16382 *) P4) :END1 7)))) "J4sPI71C3Xn" 5) 5)
;; Loading (PROGN (REGRESSION-TEST:DISABLE-NOTE :ALLOW-NIL-ARRAYS) (REGRESSION-TEST:DISABLE-NOTE :NIL-VECTORS-ARE-STRINGS))
;; Loading (IN-PACKAGE :CL-TEST)
GC in progress...
Scav control stack
Scav data stack
Scav binding stack
Scav newspace
Sweeping static space
Sweeping static space
complete
;; Loading (WHEN *LOAD-PATHNAME* (MAPC (FUNCTION REM-TEST) (QUOTE (LOAD-PATHNAME.1 LOAD-TRUENAME.1))))
; Execution took 6059 seconds.
T
CL-USER> (time (regression-test:do-tests))
