Doing 19374 pending test of 19374 tests total.

 CL-TEST::SYMBOL-&ALLOW-OTHER-KEYS
 CL-TEST::SYMBOL-&AUX
 CL-TEST::SYMBOL-&BODY
 CL-TEST::SYMBOL-&ENVIRONMENT
 CL-TEST::SYMBOL-&KEY
 CL-TEST::SYMBOL-&OPTIONAL
 CL-TEST::SYMBOL-&REST
 CL-TEST::SYMBOL-&WHOLE
 CL-TEST::SYMBOL-*
 CL-TEST::SYMBOL-**
 CL-TEST::SYMBOL-***
 CL-TEST::SYMBOL-*BREAK-ON-SIGNALS*
 CL-TEST::SYMBOL-*COMPILE-FILE-PATHNAME*
 CL-TEST::SYMBOL-*COMPILE-FILE-TRUENAME*
 CL-TEST::SYMBOL-*COMPILE-PRINT*
 CL-TEST::SYMBOL-*COMPILE-VERBOSE*
 CL-TEST::SYMBOL-*DEBUG-IO*
 CL-TEST::SYMBOL-*DEBUGGER-HOOK*
 CL-TEST::SYMBOL-*DEFAULT-PATHNAME-DEFAULTS*
 CL-TEST::SYMBOL-*ERROR-OUTPUT*
 CL-TEST::SYMBOL-*FEATURES*
 CL-TEST::SYMBOL-*GENSYM-COUNTER*
 CL-TEST::SYMBOL-*LOAD-PATHNAME*
 CL-TEST::SYMBOL-*LOAD-PRINT*
 CL-TEST::SYMBOL-*LOAD-TRUENAME*
 CL-TEST::SYMBOL-*LOAD-VERBOSE*
 CL-TEST::SYMBOL-*MACROEXPAND-HOOK*
 CL-TEST::SYMBOL-*MODULES*
 CL-TEST::SYMBOL-*PACKAGE*
 CL-TEST::SYMBOL-*PRINT-ARRAY*
 CL-TEST::SYMBOL-*PRINT-BASE*
 CL-TEST::SYMBOL-*PRINT-CASE*
 CL-TEST::SYMBOL-*PRINT-CIRCLE*
 CL-TEST::SYMBOL-*PRINT-ESCAPE*
 CL-TEST::SYMBOL-*PRINT-GENSYM*
 CL-TEST::SYMBOL-*PRINT-LENGTH*
 CL-TEST::SYMBOL-*PRINT-LEVEL*
 CL-TEST::SYMBOL-*PRINT-LINES*
 CL-TEST::SYMBOL-*PRINT-MISER-WIDTH*
 CL-TEST::SYMBOL-*PRINT-PPRINT-DISPATCH*
 CL-TEST::SYMBOL-*PRINT-PRETTY*
 CL-TEST::SYMBOL-*PRINT-RADIX*
 CL-TEST::SYMBOL-*PRINT-READABLY*
 CL-TEST::SYMBOL-*PRINT-RIGHT-MARGIN*
 CL-TEST::SYMBOL-*QUERY-IO*
 CL-TEST::SYMBOL-*RANDOM-STATE*
 CL-TEST::SYMBOL-*READ-BASE*
 CL-TEST::SYMBOL-*READ-DEFAULT-FLOAT-FORMAT*
 CL-TEST::SYMBOL-*READ-EVAL*
 CL-TEST::SYMBOL-*READ-SUPPRESS*
 CL-TEST::SYMBOL-*READTABLE*
 CL-TEST::SYMBOL-*STANDARD-INPUT*
 CL-TEST::SYMBOL-*STANDARD-OUTPUT*
 CL-TEST::SYMBOL-*TERMINAL-IO*
 CL-TEST::SYMBOL-*TRACE-OUTPUT*
 CL-TEST::SYMBOL-+
 CL-TEST::SYMBOL-++
 CL-TEST::SYMBOL-+++
 CL-TEST::SYMBOL--
 CL-TEST::SYMBOL-/
 CL-TEST::SYMBOL-//
 CL-TEST::SYMBOL-///
 CL-TEST::SYMBOL-/=
 CL-TEST::SYMBOL-1+
 CL-TEST::SYMBOL-1-
 CL-TEST::SYMBOL-<
 CL-TEST::SYMBOL-<=
 CL-TEST::SYMBOL-=
 CL-TEST::SYMBOL->
 CL-TEST::SYMBOL->=
 CL-TEST::SYMBOL-ABORT
 CL-TEST::SYMBOL-ABS
 CL-TEST::SYMBOL-ACONS
 CL-TEST::SYMBOL-ACOS
 CL-TEST::SYMBOL-ACOSH
 CL-TEST::SYMBOL-ADD-METHOD
 CL-TEST::SYMBOL-ADJOIN
 CL-TEST::SYMBOL-ADJUST-ARRAY
 CL-TEST::SYMBOL-ADJUSTABLE-ARRAY-P
 CL-TEST::SYMBOL-ALLOCATE-INSTANCE
 CL-TEST::SYMBOL-ALPHA-CHAR-P
 CL-TEST::SYMBOL-ALPHANUMERICP
 CL-TEST::SYMBOL-AND
 CL-TEST::SYMBOL-APPEND
 CL-TEST::SYMBOL-APPLY
 CL-TEST::SYMBOL-APROPOS
 CL-TEST::SYMBOL-APROPOS-LIST
 CL-TEST::SYMBOL-AREF
 CL-TEST::SYMBOL-ARITHMETIC-ERROR
 CL-TEST::SYMBOL-ARITHMETIC-ERROR-OPERANDS
 CL-TEST::SYMBOL-ARITHMETIC-ERROR-OPERATION
 CL-TEST::SYMBOL-ARRAY
 CL-TEST::SYMBOL-ARRAY-DIMENSION
 CL-TEST::SYMBOL-ARRAY-DIMENSION-LIMIT
 CL-TEST::SYMBOL-ARRAY-DIMENSIONS
 CL-TEST::SYMBOL-ARRAY-DISPLACEMENT
 CL-TEST::SYMBOL-ARRAY-ELEMENT-TYPE
 CL-TEST::SYMBOL-ARRAY-HAS-FILL-POINTER-P
 CL-TEST::SYMBOL-ARRAY-IN-BOUNDS-P
 CL-TEST::SYMBOL-ARRAY-RANK
 CL-TEST::SYMBOL-ARRAY-RANK-LIMIT
 CL-TEST::SYMBOL-ARRAY-ROW-MAJOR-INDEX
 CL-TEST::SYMBOL-ARRAY-TOTAL-SIZE
 CL-TEST::SYMBOL-ARRAY-TOTAL-SIZE-LIMIT
 CL-TEST::SYMBOL-ARRAYP
 CL-TEST::SYMBOL-ASH
 CL-TEST::SYMBOL-ASIN
 CL-TEST::SYMBOL-ASINH
 CL-TEST::SYMBOL-ASSERT
 CL-TEST::SYMBOL-ASSOC
 CL-TEST::SYMBOL-ASSOC-IF
 CL-TEST::SYMBOL-ASSOC-IF-NOT
 CL-TEST::SYMBOL-ATAN
 CL-TEST::SYMBOL-ATANH
 CL-TEST::SYMBOL-ATOM
 CL-TEST::SYMBOL-BASE-CHAR
 CL-TEST::SYMBOL-BASE-STRING
 CL-TEST::SYMBOL-BIGNUM
 CL-TEST::SYMBOL-BIT
 CL-TEST::SYMBOL-BIT-AND
 CL-TEST::SYMBOL-BIT-ANDC1
 CL-TEST::SYMBOL-BIT-ANDC2
 CL-TEST::SYMBOL-BIT-EQV
 CL-TEST::SYMBOL-BIT-IOR
 CL-TEST::SYMBOL-BIT-NAND
 CL-TEST::SYMBOL-BIT-NOR
 CL-TEST::SYMBOL-BIT-NOT
 CL-TEST::SYMBOL-BIT-ORC1
 CL-TEST::SYMBOL-BIT-ORC2
 CL-TEST::SYMBOL-BIT-VECTOR
 CL-TEST::SYMBOL-BIT-VECTOR-P
 CL-TEST::SYMBOL-BIT-XOR
 CL-TEST::SYMBOL-BLOCK
 CL-TEST::SYMBOL-BOOLE
 CL-TEST::SYMBOL-BOOLE-1
 CL-TEST::SYMBOL-BOOLE-2
 CL-TEST::SYMBOL-BOOLE-AND
 CL-TEST::SYMBOL-BOOLE-ANDC1
 CL-TEST::SYMBOL-BOOLE-ANDC2
 CL-TEST::SYMBOL-BOOLE-C1
 CL-TEST::SYMBOL-BOOLE-C2
 CL-TEST::SYMBOL-BOOLE-CLR
 CL-TEST::SYMBOL-BOOLE-EQV
 CL-TEST::SYMBOL-BOOLE-IOR
 CL-TEST::SYMBOL-BOOLE-NAND
 CL-TEST::SYMBOL-BOOLE-NOR
 CL-TEST::SYMBOL-BOOLE-ORC1
 CL-TEST::SYMBOL-BOOLE-ORC2
 CL-TEST::SYMBOL-BOOLE-SET
 CL-TEST::SYMBOL-BOOLE-XOR
 CL-TEST::SYMBOL-BOOLEAN
 CL-TEST::SYMBOL-BOTH-CASE-P
 CL-TEST::SYMBOL-BOUNDP
 CL-TEST::SYMBOL-BREAK
 CL-TEST::SYMBOL-BROADCAST-STREAM
 CL-TEST::SYMBOL-BROADCAST-STREAM-STREAMS
 CL-TEST::SYMBOL-BUILT-IN-CLASS
 CL-TEST::SYMBOL-BUTLAST
 CL-TEST::SYMBOL-BYTE
 CL-TEST::SYMBOL-BYTE-POSITION
 CL-TEST::SYMBOL-BYTE-SIZE
 CL-TEST::SYMBOL-CAAAAR
 CL-TEST::SYMBOL-CAAADR
 CL-TEST::SYMBOL-CAAAR
 CL-TEST::SYMBOL-CAADAR
 CL-TEST::SYMBOL-CAADDR
 CL-TEST::SYMBOL-CAADR
 CL-TEST::SYMBOL-CAAR
 CL-TEST::SYMBOL-CADAAR
 CL-TEST::SYMBOL-CADADR
 CL-TEST::SYMBOL-CADAR
 CL-TEST::SYMBOL-CADDAR
 CL-TEST::SYMBOL-CADDDR
 CL-TEST::SYMBOL-CADDR
 CL-TEST::SYMBOL-CADR
 CL-TEST::SYMBOL-CALL-ARGUMENTS-LIMIT
 CL-TEST::SYMBOL-CALL-METHOD
 CL-TEST::SYMBOL-CALL-NEXT-METHOD
 CL-TEST::SYMBOL-CAR
 CL-TEST::SYMBOL-CASE
 CL-TEST::SYMBOL-CATCH
 CL-TEST::SYMBOL-CCASE
 CL-TEST::SYMBOL-CDAAAR
 CL-TEST::SYMBOL-CDAADR
 CL-TEST::SYMBOL-CDAAR
 CL-TEST::SYMBOL-CDADAR
 CL-TEST::SYMBOL-CDADDR
 CL-TEST::SYMBOL-CDADR
 CL-TEST::SYMBOL-CDAR
 CL-TEST::SYMBOL-CDDAAR
 CL-TEST::SYMBOL-CDDADR
 CL-TEST::SYMBOL-CDDAR
 CL-TEST::SYMBOL-CDDDAR
 CL-TEST::SYMBOL-CDDDDR
 CL-TEST::SYMBOL-CDDDR
 CL-TEST::SYMBOL-CDDR
 CL-TEST::SYMBOL-CDR
 CL-TEST::SYMBOL-CEILING
 CL-TEST::SYMBOL-CELL-ERROR
 CL-TEST::SYMBOL-CELL-ERROR-NAME
 CL-TEST::SYMBOL-CERROR
 CL-TEST::SYMBOL-CHANGE-CLASS
 CL-TEST::SYMBOL-CHAR
 CL-TEST::SYMBOL-CHAR-CODE
 CL-TEST::SYMBOL-CHAR-CODE-LIMIT
 CL-TEST::SYMBOL-CHAR-DOWNCASE
 CL-TEST::SYMBOL-CHAR-EQUAL
 CL-TEST::SYMBOL-CHAR-GREATERP
 CL-TEST::SYMBOL-CHAR-INT
 CL-TEST::SYMBOL-CHAR-LESSP
 CL-TEST::SYMBOL-CHAR-NAME
 CL-TEST::SYMBOL-CHAR-NOT-EQUAL
 CL-TEST::SYMBOL-CHAR-NOT-GREATERP
 CL-TEST::SYMBOL-CHAR-NOT-LESSP
 CL-TEST::SYMBOL-CHAR-UPCASE
 CL-TEST::SYMBOL-CHAR/=
 CL-TEST::SYMBOL-CHAR<
 CL-TEST::SYMBOL-CHAR<=
 CL-TEST::SYMBOL-CHAR=
 CL-TEST::SYMBOL-CHAR>
 CL-TEST::SYMBOL-CHAR>=
 CL-TEST::SYMBOL-CHARACTER
 CL-TEST::SYMBOL-CHARACTERP
 CL-TEST::SYMBOL-CHECK-TYPE
 CL-TEST::SYMBOL-CIS
 CL-TEST::SYMBOL-CLASS
 CL-TEST::SYMBOL-CLASS-NAME
 CL-TEST::SYMBOL-CLASS-OF
 CL-TEST::SYMBOL-CLEAR-INPUT
 CL-TEST::SYMBOL-CLEAR-OUTPUT
 CL-TEST::SYMBOL-CLOSE
 CL-TEST::SYMBOL-CLRHASH
 CL-TEST::SYMBOL-CODE-CHAR
 CL-TEST::SYMBOL-COERCE
 CL-TEST::SYMBOL-COMPILATION-SPEED
 CL-TEST::SYMBOL-COMPILE
 CL-TEST::SYMBOL-COMPILE-FILE
 CL-TEST::SYMBOL-COMPILE-FILE-PATHNAME
 CL-TEST::SYMBOL-COMPILED-FUNCTION
 CL-TEST::SYMBOL-COMPILED-FUNCTION-P
 CL-TEST::SYMBOL-COMPILER-MACRO
 CL-TEST::SYMBOL-COMPILER-MACRO-FUNCTION
 CL-TEST::SYMBOL-COMPLEMENT
 CL-TEST::SYMBOL-COMPLEX
 CL-TEST::SYMBOL-COMPLEXP
 CL-TEST::SYMBOL-COMPUTE-APPLICABLE-METHODS
 CL-TEST::SYMBOL-COMPUTE-RESTARTS
 CL-TEST::SYMBOL-CONCATENATE
 CL-TEST::SYMBOL-CONCATENATED-STREAM
 CL-TEST::SYMBOL-CONCATENATED-STREAM-STREAMS
 CL-TEST::SYMBOL-COND
 CL-TEST::SYMBOL-CONDITION
 CL-TEST::SYMBOL-CONJUGATE
 CL-TEST::SYMBOL-CONS
 CL-TEST::SYMBOL-CONSP
 CL-TEST::SYMBOL-CONSTANTLY
 CL-TEST::SYMBOL-CONSTANTP
 CL-TEST::SYMBOL-CONTINUE
 CL-TEST::SYMBOL-CONTROL-ERROR
 CL-TEST::SYMBOL-COPY-ALIST
 CL-TEST::SYMBOL-COPY-LIST
 CL-TEST::SYMBOL-COPY-PPRINT-DISPATCH
 CL-TEST::SYMBOL-COPY-READTABLE
 CL-TEST::SYMBOL-COPY-SEQ
 CL-TEST::SYMBOL-COPY-STRUCTURE
 CL-TEST::SYMBOL-COPY-SYMBOL
 CL-TEST::SYMBOL-COPY-TREE
 CL-TEST::SYMBOL-COS
 CL-TEST::SYMBOL-COSH
 CL-TEST::SYMBOL-COUNT
 CL-TEST::SYMBOL-COUNT-IF
 CL-TEST::SYMBOL-COUNT-IF-NOT
 CL-TEST::SYMBOL-CTYPECASE
 CL-TEST::SYMBOL-DEBUG
 CL-TEST::SYMBOL-DECF
 CL-TEST::SYMBOL-DECLAIM
 CL-TEST::SYMBOL-DECLARATION
 CL-TEST::SYMBOL-DECLARE
 CL-TEST::SYMBOL-DECODE-FLOAT
 CL-TEST::SYMBOL-DECODE-UNIVERSAL-TIME
 CL-TEST::SYMBOL-DEFCLASS
 CL-TEST::SYMBOL-DEFCONSTANT
 CL-TEST::SYMBOL-DEFGENERIC
 CL-TEST::SYMBOL-DEFINE-COMPILER-MACRO
 CL-TEST::SYMBOL-DEFINE-CONDITION
 CL-TEST::SYMBOL-DEFINE-METHOD-COMBINATION
 CL-TEST::SYMBOL-DEFINE-MODIFY-MACRO
 CL-TEST::SYMBOL-DEFINE-SETF-EXPANDER
 CL-TEST::SYMBOL-DEFINE-SYMBOL-MACRO
 CL-TEST::SYMBOL-DEFMACRO
 CL-TEST::SYMBOL-DEFMETHOD
 CL-TEST::SYMBOL-DEFPACKAGE
 CL-TEST::SYMBOL-DEFPARAMETER
 CL-TEST::SYMBOL-DEFSETF
 CL-TEST::SYMBOL-DEFSTRUCT
 CL-TEST::SYMBOL-DEFTYPE
 CL-TEST::SYMBOL-DEFUN
 CL-TEST::SYMBOL-DEFVAR
 CL-TEST::SYMBOL-DELETE
 CL-TEST::SYMBOL-DELETE-DUPLICATES
 CL-TEST::SYMBOL-DELETE-FILE
 CL-TEST::SYMBOL-DELETE-IF
 CL-TEST::SYMBOL-DELETE-IF-NOT
 CL-TEST::SYMBOL-DELETE-PACKAGE
 CL-TEST::SYMBOL-DENOMINATOR
 CL-TEST::SYMBOL-DEPOSIT-FIELD
 CL-TEST::SYMBOL-DESCRIBE
 CL-TEST::SYMBOL-DESCRIBE-OBJECT
 CL-TEST::SYMBOL-DESTRUCTURING-BIND
 CL-TEST::SYMBOL-DIGIT-CHAR
 CL-TEST::SYMBOL-DIGIT-CHAR-P
 CL-TEST::SYMBOL-DIRECTORY
 CL-TEST::SYMBOL-DIRECTORY-NAMESTRING
 CL-TEST::SYMBOL-DISASSEMBLE
 CL-TEST::SYMBOL-DIVISION-BY-ZERO
 CL-TEST::SYMBOL-DO
 CL-TEST::SYMBOL-DO*
 CL-TEST::SYMBOL-DO-ALL-SYMBOLS
 CL-TEST::SYMBOL-DO-EXTERNAL-SYMBOLS
 CL-TEST::SYMBOL-DO-SYMBOLS
 CL-TEST::SYMBOL-DOCUMENTATION
 CL-TEST::SYMBOL-DOLIST
 CL-TEST::SYMBOL-DOTIMES
 CL-TEST::SYMBOL-DOUBLE-FLOAT
 CL-TEST::SYMBOL-DOUBLE-FLOAT-EPSILON
 CL-TEST::SYMBOL-DOUBLE-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-DPB
 CL-TEST::SYMBOL-DRIBBLE
 CL-TEST::SYMBOL-DYNAMIC-EXTENT
 CL-TEST::SYMBOL-ECASE
 CL-TEST::SYMBOL-ECHO-STREAM
 CL-TEST::SYMBOL-ECHO-STREAM-INPUT-STREAM
 CL-TEST::SYMBOL-ECHO-STREAM-OUTPUT-STREAM
 CL-TEST::SYMBOL-ED
 CL-TEST::SYMBOL-EIGHTH
 CL-TEST::SYMBOL-ELT
 CL-TEST::SYMBOL-ENCODE-UNIVERSAL-TIME
 CL-TEST::SYMBOL-END-OF-FILE
 CL-TEST::SYMBOL-ENDP
 CL-TEST::SYMBOL-ENOUGH-NAMESTRING
 CL-TEST::SYMBOL-ENSURE-DIRECTORIES-EXIST
 CL-TEST::SYMBOL-ENSURE-GENERIC-FUNCTION
 CL-TEST::SYMBOL-EQ
 CL-TEST::SYMBOL-EQL
 CL-TEST::SYMBOL-EQUAL
 CL-TEST::SYMBOL-EQUALP
 CL-TEST::SYMBOL-ERROR
 CL-TEST::SYMBOL-ETYPECASE
 CL-TEST::SYMBOL-EVAL
 CL-TEST::SYMBOL-EVAL-WHEN
 CL-TEST::SYMBOL-EVENP
 CL-TEST::SYMBOL-EVERY
 CL-TEST::SYMBOL-EXP
 CL-TEST::SYMBOL-EXPORT
 CL-TEST::SYMBOL-EXPT
 CL-TEST::SYMBOL-EXTENDED-CHAR
 CL-TEST::SYMBOL-FBOUNDP
 CL-TEST::SYMBOL-FCEILING
 CL-TEST::SYMBOL-FDEFINITION
 CL-TEST::SYMBOL-FFLOOR
 CL-TEST::SYMBOL-FIFTH
 CL-TEST::SYMBOL-FILE-AUTHOR
 CL-TEST::SYMBOL-FILE-ERROR
 CL-TEST::SYMBOL-FILE-ERROR-PATHNAME
 CL-TEST::SYMBOL-FILE-LENGTH
 CL-TEST::SYMBOL-FILE-NAMESTRING
 CL-TEST::SYMBOL-FILE-POSITION
 CL-TEST::SYMBOL-FILE-STREAM
 CL-TEST::SYMBOL-FILE-STRING-LENGTH
 CL-TEST::SYMBOL-FILE-WRITE-DATE
 CL-TEST::SYMBOL-FILL
 CL-TEST::SYMBOL-FILL-POINTER
 CL-TEST::SYMBOL-FIND
 CL-TEST::SYMBOL-FIND-ALL-SYMBOLS
 CL-TEST::SYMBOL-FIND-CLASS
 CL-TEST::SYMBOL-FIND-IF
 CL-TEST::SYMBOL-FIND-IF-NOT
 CL-TEST::SYMBOL-FIND-METHOD
 CL-TEST::SYMBOL-FIND-PACKAGE
 CL-TEST::SYMBOL-FIND-RESTART
 CL-TEST::SYMBOL-FIND-SYMBOL
 CL-TEST::SYMBOL-FINISH-OUTPUT
 CL-TEST::SYMBOL-FIRST
 CL-TEST::SYMBOL-FIXNUM
 CL-TEST::SYMBOL-FLET
 CL-TEST::SYMBOL-FLOAT
 CL-TEST::SYMBOL-FLOAT-DIGITS
 CL-TEST::SYMBOL-FLOAT-PRECISION
 CL-TEST::SYMBOL-FLOAT-RADIX
 CL-TEST::SYMBOL-FLOAT-SIGN
 CL-TEST::SYMBOL-FLOATING-POINT-INEXACT
 CL-TEST::SYMBOL-FLOATING-POINT-INVALID-OPERATION
 CL-TEST::SYMBOL-FLOATING-POINT-OVERFLOW
 CL-TEST::SYMBOL-FLOATING-POINT-UNDERFLOW
 CL-TEST::SYMBOL-FLOATP
 CL-TEST::SYMBOL-FLOOR
 CL-TEST::SYMBOL-FMAKUNBOUND
 CL-TEST::SYMBOL-FORCE-OUTPUT
 CL-TEST::SYMBOL-FORMAT
 CL-TEST::SYMBOL-FORMATTER
 CL-TEST::SYMBOL-FOURTH
 CL-TEST::SYMBOL-FRESH-LINE
 CL-TEST::SYMBOL-FROUND
 CL-TEST::SYMBOL-FTRUNCATE
 CL-TEST::SYMBOL-FTYPE
 CL-TEST::SYMBOL-FUNCALL
 SYMBOL-FUNCTION
 CL-TEST::SYMBOL-FUNCTION-KEYWORDS
 CL-TEST::SYMBOL-FUNCTION-LAMBDA-EXPRESSION
 CL-TEST::SYMBOL-FUNCTIONP
 CL-TEST::SYMBOL-GCD
 CL-TEST::SYMBOL-GENERIC-FUNCTION
 CL-TEST::SYMBOL-GENSYM
 CL-TEST::SYMBOL-GENTEMP
 CL-TEST::SYMBOL-GET
 CL-TEST::SYMBOL-GET-DECODED-TIME
 CL-TEST::SYMBOL-GET-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-GET-INTERNAL-REAL-TIME
 CL-TEST::SYMBOL-GET-INTERNAL-RUN-TIME
 CL-TEST::SYMBOL-GET-MACRO-CHARACTER
 CL-TEST::SYMBOL-GET-OUTPUT-STREAM-STRING
 CL-TEST::SYMBOL-GET-PROPERTIES
 CL-TEST::SYMBOL-GET-SETF-EXPANSION
 CL-TEST::SYMBOL-GET-UNIVERSAL-TIME
 CL-TEST::SYMBOL-GETF
 CL-TEST::SYMBOL-GETHASH
 CL-TEST::SYMBOL-GO
 CL-TEST::SYMBOL-GRAPHIC-CHAR-P
 CL-TEST::SYMBOL-HANDLER-BIND
 CL-TEST::SYMBOL-HANDLER-CASE
 CL-TEST::SYMBOL-HASH-TABLE
 CL-TEST::SYMBOL-HASH-TABLE-COUNT
 CL-TEST::SYMBOL-HASH-TABLE-P
 CL-TEST::SYMBOL-HASH-TABLE-REHASH-SIZE
 CL-TEST::SYMBOL-HASH-TABLE-REHASH-THRESHOLD
 CL-TEST::SYMBOL-HASH-TABLE-SIZE
 CL-TEST::SYMBOL-HASH-TABLE-TEST
 CL-TEST::SYMBOL-HOST-NAMESTRING
 CL-TEST::SYMBOL-IDENTITY
 CL-TEST::SYMBOL-IF
 CL-TEST::SYMBOL-IGNORABLE
 CL-TEST::SYMBOL-IGNORE
 CL-TEST::SYMBOL-IGNORE-ERRORS
 CL-TEST::SYMBOL-IMAGPART
 CL-TEST::SYMBOL-IMPORT
 CL-TEST::SYMBOL-IN-PACKAGE
 CL-TEST::SYMBOL-INCF
 CL-TEST::SYMBOL-INITIALIZE-INSTANCE
 CL-TEST::SYMBOL-INLINE
 CL-TEST::SYMBOL-INPUT-STREAM-P
 CL-TEST::SYMBOL-INSPECT
 CL-TEST::SYMBOL-INTEGER
 CL-TEST::SYMBOL-INTEGER-DECODE-FLOAT
 CL-TEST::SYMBOL-INTEGER-LENGTH
 CL-TEST::SYMBOL-INTEGERP
 CL-TEST::SYMBOL-INTERACTIVE-STREAM-P
 CL-TEST::SYMBOL-INTERN
 CL-TEST::SYMBOL-INTERNAL-TIME-UNITS-PER-SECOND
 CL-TEST::SYMBOL-INTERSECTION
 CL-TEST::SYMBOL-INVALID-METHOD-ERROR
 CL-TEST::SYMBOL-INVOKE-DEBUGGER
 CL-TEST::SYMBOL-INVOKE-RESTART
 CL-TEST::SYMBOL-INVOKE-RESTART-INTERACTIVELY
 CL-TEST::SYMBOL-ISQRT
 CL-TEST::SYMBOL-KEYWORD
 CL-TEST::SYMBOL-KEYWORDP
 CL-TEST::SYMBOL-LABELS
 CL-TEST::SYMBOL-LAMBDA
 CL-TEST::SYMBOL-LAMBDA-LIST-KEYWORDS
 CL-TEST::SYMBOL-LAMBDA-PARAMETERS-LIMIT
 CL-TEST::SYMBOL-LAST
 CL-TEST::SYMBOL-LCM
 CL-TEST::SYMBOL-LDB
 CL-TEST::SYMBOL-LDB-TEST
 CL-TEST::SYMBOL-LDIFF
 CL-TEST::SYMBOL-LEAST-NEGATIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-LENGTH
 CL-TEST::SYMBOL-LET
 CL-TEST::SYMBOL-LET*
 CL-TEST::SYMBOL-LISP-IMPLEMENTATION-TYPE
 CL-TEST::SYMBOL-LISP-IMPLEMENTATION-VERSION
 CL-TEST::SYMBOL-LIST
 CL-TEST::SYMBOL-LIST*
 CL-TEST::SYMBOL-LIST-ALL-PACKAGES
 CL-TEST::SYMBOL-LIST-LENGTH
 CL-TEST::SYMBOL-LISTEN
 CL-TEST::SYMBOL-LISTP
 CL-TEST::SYMBOL-LOAD
 CL-TEST::SYMBOL-LOAD-LOGICAL-PATHNAME-TRANSLATIONS
 CL-TEST::SYMBOL-LOAD-TIME-VALUE
 CL-TEST::SYMBOL-LOCALLY
 CL-TEST::SYMBOL-LOG
 CL-TEST::SYMBOL-LOGAND
 CL-TEST::SYMBOL-LOGANDC1
 CL-TEST::SYMBOL-LOGANDC2
 CL-TEST::SYMBOL-LOGBITP
 CL-TEST::SYMBOL-LOGCOUNT
 CL-TEST::SYMBOL-LOGEQV
 CL-TEST::SYMBOL-LOGICAL-PATHNAME
 CL-TEST::SYMBOL-LOGICAL-PATHNAME-TRANSLATIONS
 CL-TEST::SYMBOL-LOGIOR
 CL-TEST::SYMBOL-LOGNAND
 CL-TEST::SYMBOL-LOGNOR
 CL-TEST::SYMBOL-LOGNOT
 CL-TEST::SYMBOL-LOGORC1
 CL-TEST::SYMBOL-LOGORC2
 CL-TEST::SYMBOL-LOGTEST
 CL-TEST::SYMBOL-LOGXOR
 CL-TEST::SYMBOL-LONG-FLOAT
 CL-TEST::SYMBOL-LONG-FLOAT-EPSILON
 CL-TEST::SYMBOL-LONG-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-LONG-SITE-NAME
 CL-TEST::SYMBOL-LOOP
 CL-TEST::SYMBOL-LOOP-FINISH
 CL-TEST::SYMBOL-LOWER-CASE-P
 CL-TEST::SYMBOL-MACHINE-INSTANCE
 CL-TEST::SYMBOL-MACHINE-TYPE
 CL-TEST::SYMBOL-MACHINE-VERSION
 CL-TEST::SYMBOL-MACRO-FUNCTION
 CL-TEST::SYMBOL-MACROEXPAND
 CL-TEST::SYMBOL-MACROEXPAND-1
 SYMBOL-MACROLET
 CL-TEST::SYMBOL-MAKE-ARRAY
 CL-TEST::SYMBOL-MAKE-BROADCAST-STREAM
 CL-TEST::SYMBOL-MAKE-CONCATENATED-STREAM
 CL-TEST::SYMBOL-MAKE-CONDITION
 CL-TEST::SYMBOL-MAKE-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-MAKE-ECHO-STREAM
 CL-TEST::SYMBOL-MAKE-HASH-TABLE
 CL-TEST::SYMBOL-MAKE-INSTANCE
 CL-TEST::SYMBOL-MAKE-INSTANCES-OBSOLETE
 CL-TEST::SYMBOL-MAKE-LIST
 CL-TEST::SYMBOL-MAKE-LOAD-FORM
 CL-TEST::SYMBOL-MAKE-LOAD-FORM-SAVING-SLOTS
 CL-TEST::SYMBOL-MAKE-METHOD
 CL-TEST::SYMBOL-MAKE-PACKAGE
 CL-TEST::SYMBOL-MAKE-PATHNAME
 CL-TEST::SYMBOL-MAKE-RANDOM-STATE
 CL-TEST::SYMBOL-MAKE-SEQUENCE
 CL-TEST::SYMBOL-MAKE-STRING
 CL-TEST::SYMBOL-MAKE-STRING-INPUT-STREAM
 CL-TEST::SYMBOL-MAKE-STRING-OUTPUT-STREAM
 CL-TEST::SYMBOL-MAKE-SYMBOL
 CL-TEST::SYMBOL-MAKE-SYNONYM-STREAM
 CL-TEST::SYMBOL-MAKE-TWO-WAY-STREAM
 CL-TEST::SYMBOL-MAKUNBOUND
 CL-TEST::SYMBOL-MAP
 CL-TEST::SYMBOL-MAP-INTO
 CL-TEST::SYMBOL-MAPC
 CL-TEST::SYMBOL-MAPCAN
 CL-TEST::SYMBOL-MAPCAR
 CL-TEST::SYMBOL-MAPCON
 CL-TEST::SYMBOL-MAPHASH
 CL-TEST::SYMBOL-MAPL
 CL-TEST::SYMBOL-MAPLIST
 CL-TEST::SYMBOL-MASK-FIELD
 CL-TEST::SYMBOL-MAX
 CL-TEST::SYMBOL-MEMBER
 CL-TEST::SYMBOL-MEMBER-IF
 CL-TEST::SYMBOL-MEMBER-IF-NOT
 CL-TEST::SYMBOL-MERGE
 CL-TEST::SYMBOL-MERGE-PATHNAMES
 CL-TEST::SYMBOL-METHOD
 CL-TEST::SYMBOL-METHOD-COMBINATION
 CL-TEST::SYMBOL-METHOD-COMBINATION-ERROR
 CL-TEST::SYMBOL-METHOD-QUALIFIERS
 CL-TEST::SYMBOL-MIN
 CL-TEST::SYMBOL-MINUSP
 CL-TEST::SYMBOL-MISMATCH
 CL-TEST::SYMBOL-MOD
 CL-TEST::SYMBOL-MOST-NEGATIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-FIXNUM
 CL-TEST::SYMBOL-MOST-NEGATIVE-LONG-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-FIXNUM
 CL-TEST::SYMBOL-MOST-POSITIVE-LONG-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-MUFFLE-WARNING
 CL-TEST::SYMBOL-MULTIPLE-VALUE-BIND
 CL-TEST::SYMBOL-MULTIPLE-VALUE-CALL
 CL-TEST::SYMBOL-MULTIPLE-VALUE-LIST
 CL-TEST::SYMBOL-MULTIPLE-VALUE-PROG1
 CL-TEST::SYMBOL-MULTIPLE-VALUE-SETQ
 CL-TEST::SYMBOL-MULTIPLE-VALUES-LIMIT
 CL-TEST::SYMBOL-NAME-CHAR
 CL-TEST::SYMBOL-NAMESTRING
 CL-TEST::SYMBOL-NBUTLAST
 CL-TEST::SYMBOL-NCONC
 CL-TEST::SYMBOL-NEXT-METHOD-P
 CL-TEST::SYMBOL-NIL
 CL-TEST::SYMBOL-NINTERSECTION
 CL-TEST::SYMBOL-NINTH
 CL-TEST::SYMBOL-NO-APPLICABLE-METHOD
 CL-TEST::SYMBOL-NO-NEXT-METHOD
 CL-TEST::SYMBOL-NOT
 CL-TEST::SYMBOL-NOTANY
 CL-TEST::SYMBOL-NOTEVERY
 CL-TEST::SYMBOL-NOTINLINE
 CL-TEST::SYMBOL-NRECONC
 CL-TEST::SYMBOL-NREVERSE
 CL-TEST::SYMBOL-NSET-DIFFERENCE
 CL-TEST::SYMBOL-NSET-EXCLUSIVE-OR
 CL-TEST::SYMBOL-NSTRING-CAPITALIZE
 CL-TEST::SYMBOL-NSTRING-DOWNCASE
 CL-TEST::SYMBOL-NSTRING-UPCASE
 CL-TEST::SYMBOL-NSUBLIS
 CL-TEST::SYMBOL-NSUBST
 CL-TEST::SYMBOL-NSUBST-IF
 CL-TEST::SYMBOL-NSUBST-IF-NOT
 CL-TEST::SYMBOL-NSUBSTITUTE
 CL-TEST::SYMBOL-NSUBSTITUTE-IF
 CL-TEST::SYMBOL-NSUBSTITUTE-IF-NOT
 CL-TEST::SYMBOL-NTH
 CL-TEST::SYMBOL-NTH-VALUE
 CL-TEST::SYMBOL-NTHCDR
 CL-TEST::SYMBOL-NULL
 CL-TEST::SYMBOL-NUMBER
 CL-TEST::SYMBOL-NUMBERP
 CL-TEST::SYMBOL-NUMERATOR
 CL-TEST::SYMBOL-NUNION
 CL-TEST::SYMBOL-ODDP
 CL-TEST::SYMBOL-OPEN
 CL-TEST::SYMBOL-OPEN-STREAM-P
 CL-TEST::SYMBOL-OPTIMIZE
 CL-TEST::SYMBOL-OR
 CL-TEST::SYMBOL-OTHERWISE
 CL-TEST::SYMBOL-OUTPUT-STREAM-P
 SYMBOL-PACKAGE
 CL-TEST::SYMBOL-PACKAGE-ERROR
 CL-TEST::SYMBOL-PACKAGE-ERROR-PACKAGE
 CL-TEST::SYMBOL-PACKAGE-NAME
 CL-TEST::SYMBOL-PACKAGE-NICKNAMES
 CL-TEST::SYMBOL-PACKAGE-SHADOWING-SYMBOLS
 CL-TEST::SYMBOL-PACKAGE-USE-LIST
 CL-TEST::SYMBOL-PACKAGE-USED-BY-LIST
 CL-TEST::SYMBOL-PACKAGEP
 CL-TEST::SYMBOL-PAIRLIS
 CL-TEST::SYMBOL-PARSE-ERROR
 CL-TEST::SYMBOL-PARSE-INTEGER
 CL-TEST::SYMBOL-PARSE-NAMESTRING
 CL-TEST::SYMBOL-PATHNAME
 CL-TEST::SYMBOL-PATHNAME-DEVICE
 CL-TEST::SYMBOL-PATHNAME-DIRECTORY
 CL-TEST::SYMBOL-PATHNAME-HOST
 CL-TEST::SYMBOL-PATHNAME-MATCH-P
 CL-TEST::SYMBOL-PATHNAME-NAME
 CL-TEST::SYMBOL-PATHNAME-TYPE
 CL-TEST::SYMBOL-PATHNAME-VERSION
 CL-TEST::SYMBOL-PATHNAMEP
 CL-TEST::SYMBOL-PEEK-CHAR
 CL-TEST::SYMBOL-PHASE
 CL-TEST::SYMBOL-PI
 CL-TEST::SYMBOL-PLUSP
 CL-TEST::SYMBOL-POP
 CL-TEST::SYMBOL-POSITION
 CL-TEST::SYMBOL-POSITION-IF
 CL-TEST::SYMBOL-POSITION-IF-NOT
 CL-TEST::SYMBOL-PPRINT
 CL-TEST::SYMBOL-PPRINT-DISPATCH
 CL-TEST::SYMBOL-PPRINT-EXIT-IF-LIST-EXHAUSTED
 CL-TEST::SYMBOL-PPRINT-FILL
 CL-TEST::SYMBOL-PPRINT-INDENT
 CL-TEST::SYMBOL-PPRINT-LINEAR
 CL-TEST::SYMBOL-PPRINT-LOGICAL-BLOCK
 CL-TEST::SYMBOL-PPRINT-NEWLINE
 CL-TEST::SYMBOL-PPRINT-POP
 CL-TEST::SYMBOL-PPRINT-TAB
 CL-TEST::SYMBOL-PPRINT-TABULAR
 CL-TEST::SYMBOL-PRIN1
 CL-TEST::SYMBOL-PRIN1-TO-STRING
 CL-TEST::SYMBOL-PRINC
 CL-TEST::SYMBOL-PRINC-TO-STRING
 CL-TEST::SYMBOL-PRINT
 CL-TEST::SYMBOL-PRINT-NOT-READABLE
 CL-TEST::SYMBOL-PRINT-NOT-READABLE-OBJECT
 CL-TEST::SYMBOL-PRINT-OBJECT
 CL-TEST::SYMBOL-PRINT-UNREADABLE-OBJECT
 CL-TEST::SYMBOL-PROBE-FILE
 CL-TEST::SYMBOL-PROCLAIM
 CL-TEST::SYMBOL-PROG
 CL-TEST::SYMBOL-PROG*
 CL-TEST::SYMBOL-PROG1
 CL-TEST::SYMBOL-PROG2
 CL-TEST::SYMBOL-PROGN
 CL-TEST::SYMBOL-PROGRAM-ERROR
 CL-TEST::SYMBOL-PROGV
 CL-TEST::SYMBOL-PROVIDE
 CL-TEST::SYMBOL-PSETF
 CL-TEST::SYMBOL-PSETQ
 CL-TEST::SYMBOL-PUSH
 CL-TEST::SYMBOL-PUSHNEW
 CL-TEST::SYMBOL-QUOTE
 CL-TEST::SYMBOL-RANDOM
 CL-TEST::SYMBOL-RANDOM-STATE
 CL-TEST::SYMBOL-RANDOM-STATE-P
 CL-TEST::SYMBOL-RASSOC
 CL-TEST::SYMBOL-RASSOC-IF
 CL-TEST::SYMBOL-RASSOC-IF-NOT
 CL-TEST::SYMBOL-RATIO
 CL-TEST::SYMBOL-RATIONAL
 CL-TEST::SYMBOL-RATIONALIZE
 CL-TEST::SYMBOL-RATIONALP
 CL-TEST::SYMBOL-READ
 CL-TEST::SYMBOL-READ-BYTE
 CL-TEST::SYMBOL-READ-CHAR
 CL-TEST::SYMBOL-READ-CHAR-NO-HANG
 CL-TEST::SYMBOL-READ-DELIMITED-LIST
 CL-TEST::SYMBOL-READ-FROM-STRING
 CL-TEST::SYMBOL-READ-LINE
 CL-TEST::SYMBOL-READ-PRESERVING-WHITESPACE
 CL-TEST::SYMBOL-READ-SEQUENCE
 CL-TEST::SYMBOL-READER-ERROR
 CL-TEST::SYMBOL-READTABLE
 CL-TEST::SYMBOL-READTABLE-CASE
 CL-TEST::SYMBOL-READTABLEP
 CL-TEST::SYMBOL-REAL
 CL-TEST::SYMBOL-REALP
 CL-TEST::SYMBOL-REALPART
 CL-TEST::SYMBOL-REDUCE
 CL-TEST::SYMBOL-REINITIALIZE-INSTANCE
 CL-TEST::SYMBOL-REM
 CL-TEST::SYMBOL-REMF
 CL-TEST::SYMBOL-REMHASH
 CL-TEST::SYMBOL-REMOVE
 CL-TEST::SYMBOL-REMOVE-DUPLICATES
 CL-TEST::SYMBOL-REMOVE-IF
 CL-TEST::SYMBOL-REMOVE-IF-NOT
 CL-TEST::SYMBOL-REMOVE-METHOD
 CL-TEST::SYMBOL-REMPROP
 CL-TEST::SYMBOL-RENAME-FILE
 CL-TEST::SYMBOL-RENAME-PACKAGE
 CL-TEST::SYMBOL-REPLACE
 CL-TEST::SYMBOL-REQUIRE
 CL-TEST::SYMBOL-REST
 CL-TEST::SYMBOL-RESTART
 CL-TEST::SYMBOL-RESTART-BIND
 CL-TEST::SYMBOL-RESTART-CASE
 CL-TEST::SYMBOL-RESTART-NAME
 CL-TEST::SYMBOL-RETURN
 CL-TEST::SYMBOL-RETURN-FROM
 CL-TEST::SYMBOL-REVAPPEND
 CL-TEST::SYMBOL-REVERSE
 CL-TEST::SYMBOL-ROOM
 CL-TEST::SYMBOL-ROTATEF
 CL-TEST::SYMBOL-ROUND
 CL-TEST::SYMBOL-ROW-MAJOR-AREF
 CL-TEST::SYMBOL-RPLACA
 CL-TEST::SYMBOL-RPLACD
 CL-TEST::SYMBOL-SAFETY
 CL-TEST::SYMBOL-SATISFIES
 CL-TEST::SYMBOL-SBIT
 CL-TEST::SYMBOL-SCALE-FLOAT
 CL-TEST::SYMBOL-SCHAR
 CL-TEST::SYMBOL-SEARCH
 CL-TEST::SYMBOL-SECOND
 CL-TEST::SYMBOL-SEQUENCE
 CL-TEST::SYMBOL-SERIOUS-CONDITION
 CL-TEST::SYMBOL-SET
 CL-TEST::SYMBOL-SET-DIFFERENCE
 CL-TEST::SYMBOL-SET-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-SET-EXCLUSIVE-OR
 CL-TEST::SYMBOL-SET-MACRO-CHARACTER
 CL-TEST::SYMBOL-SET-PPRINT-DISPATCH
 CL-TEST::SYMBOL-SET-SYNTAX-FROM-CHAR
 CL-TEST::SYMBOL-SETF
 CL-TEST::SYMBOL-SETQ
 CL-TEST::SYMBOL-SEVENTH
 CL-TEST::SYMBOL-SHADOW
 CL-TEST::SYMBOL-SHADOWING-IMPORT
 CL-TEST::SYMBOL-SHARED-INITIALIZE
 CL-TEST::SYMBOL-SHIFTF
 CL-TEST::SYMBOL-SHORT-FLOAT
 CL-TEST::SYMBOL-SHORT-FLOAT-EPSILON
 CL-TEST::SYMBOL-SHORT-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-SHORT-SITE-NAME
 CL-TEST::SYMBOL-SIGNAL
 CL-TEST::SYMBOL-SIGNED-BYTE
 CL-TEST::SYMBOL-SIGNUM
 CL-TEST::SYMBOL-SIMPLE-ARRAY
 CL-TEST::SYMBOL-SIMPLE-BASE-STRING
 CL-TEST::SYMBOL-SIMPLE-BIT-VECTOR
 CL-TEST::SYMBOL-SIMPLE-BIT-VECTOR-P
 CL-TEST::SYMBOL-SIMPLE-CONDITION
 CL-TEST::SYMBOL-SIMPLE-CONDITION-FORMAT-ARGUMENTS
 CL-TEST::SYMBOL-SIMPLE-CONDITION-FORMAT-CONTROL
 CL-TEST::SYMBOL-SIMPLE-ERROR
 CL-TEST::SYMBOL-SIMPLE-STRING
 CL-TEST::SYMBOL-SIMPLE-STRING-P
 CL-TEST::SYMBOL-SIMPLE-TYPE-ERROR
 CL-TEST::SYMBOL-SIMPLE-VECTOR
 CL-TEST::SYMBOL-SIMPLE-VECTOR-P
 CL-TEST::SYMBOL-SIMPLE-WARNING
 CL-TEST::SYMBOL-SIN
 CL-TEST::SYMBOL-SINGLE-FLOAT
 CL-TEST::SYMBOL-SINGLE-FLOAT-EPSILON
 CL-TEST::SYMBOL-SINGLE-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-SINH
 CL-TEST::SYMBOL-SIXTH
 CL-TEST::SYMBOL-SLEEP
 CL-TEST::SYMBOL-SLOT-BOUNDP
 CL-TEST::SYMBOL-SLOT-EXISTS-P
 CL-TEST::SYMBOL-SLOT-MAKUNBOUND
 CL-TEST::SYMBOL-SLOT-MISSING
 CL-TEST::SYMBOL-SLOT-UNBOUND
 CL-TEST::SYMBOL-SLOT-VALUE
 CL-TEST::SYMBOL-SOFTWARE-TYPE
 CL-TEST::SYMBOL-SOFTWARE-VERSION
 CL-TEST::SYMBOL-SOME
 CL-TEST::SYMBOL-SORT
 CL-TEST::SYMBOL-SPACE
 CL-TEST::SYMBOL-SPECIAL
 CL-TEST::SYMBOL-SPECIAL-OPERATOR-P
 CL-TEST::SYMBOL-SPEED
 CL-TEST::SYMBOL-SQRT
 CL-TEST::SYMBOL-STABLE-SORT
 CL-TEST::SYMBOL-STANDARD
 CL-TEST::SYMBOL-STANDARD-CHAR
 CL-TEST::SYMBOL-STANDARD-CHAR-P
 CL-TEST::SYMBOL-STANDARD-CLASS
 CL-TEST::SYMBOL-STANDARD-GENERIC-FUNCTION
 CL-TEST::SYMBOL-STANDARD-METHOD
 CL-TEST::SYMBOL-STANDARD-OBJECT
 CL-TEST::SYMBOL-STEP
 CL-TEST::SYMBOL-STORAGE-CONDITION
 CL-TEST::SYMBOL-STORE-VALUE
 CL-TEST::SYMBOL-STREAM
 CL-TEST::SYMBOL-STREAM-ELEMENT-TYPE
 CL-TEST::SYMBOL-STREAM-ERROR
 CL-TEST::SYMBOL-STREAM-ERROR-STREAM
 CL-TEST::SYMBOL-STREAM-EXTERNAL-FORMAT
 CL-TEST::SYMBOL-STREAMP
 CL-TEST::SYMBOL-STRING
 CL-TEST::SYMBOL-STRING-CAPITALIZE
 CL-TEST::SYMBOL-STRING-DOWNCASE
 CL-TEST::SYMBOL-STRING-EQUAL
 CL-TEST::SYMBOL-STRING-GREATERP
 CL-TEST::SYMBOL-STRING-LEFT-TRIM
 CL-TEST::SYMBOL-STRING-LESSP
 CL-TEST::SYMBOL-STRING-NOT-EQUAL
 CL-TEST::SYMBOL-STRING-NOT-GREATERP
 CL-TEST::SYMBOL-STRING-NOT-LESSP
 CL-TEST::SYMBOL-STRING-RIGHT-TRIM
 CL-TEST::SYMBOL-STRING-STREAM
 CL-TEST::SYMBOL-STRING-TRIM
 CL-TEST::SYMBOL-STRING-UPCASE
 CL-TEST::SYMBOL-STRING/=
 CL-TEST::SYMBOL-STRING<
 CL-TEST::SYMBOL-STRING<=
 CL-TEST::SYMBOL-STRING=
 CL-TEST::SYMBOL-STRING>
 CL-TEST::SYMBOL-STRING>=
 CL-TEST::SYMBOL-STRINGP
 CL-TEST::SYMBOL-STRUCTURE
 CL-TEST::SYMBOL-STRUCTURE-CLASS
 CL-TEST::SYMBOL-STRUCTURE-OBJECT
 CL-TEST::SYMBOL-STYLE-WARNING
 CL-TEST::SYMBOL-SUBLIS
 CL-TEST::SYMBOL-SUBSEQ
 CL-TEST::SYMBOL-SUBSETP
 CL-TEST::SYMBOL-SUBST
 CL-TEST::SYMBOL-SUBST-IF
 CL-TEST::SYMBOL-SUBST-IF-NOT
 CL-TEST::SYMBOL-SUBSTITUTE
 CL-TEST::SYMBOL-SUBSTITUTE-IF
 CL-TEST::SYMBOL-SUBSTITUTE-IF-NOT
 CL-TEST::SYMBOL-SUBTYPEP
 CL-TEST::SYMBOL-SVREF
 CL-TEST::SYMBOL-SXHASH
 CL-TEST::SYMBOL-SYMBOL
 CL-TEST::SYMBOL-SYMBOL-FUNCTION
 CL-TEST::SYMBOL-SYMBOL-MACROLET
 CL-TEST::SYMBOL-SYMBOL-NAME
 CL-TEST::SYMBOL-SYMBOL-PACKAGE
 CL-TEST::SYMBOL-SYMBOL-PLIST
 CL-TEST::SYMBOL-SYMBOL-VALUE
 CL-TEST::SYMBOL-SYMBOLP
 CL-TEST::SYMBOL-SYNONYM-STREAM
 CL-TEST::SYMBOL-SYNONYM-STREAM-SYMBOL
 CL-TEST::SYMBOL-T
 CL-TEST::SYMBOL-TAGBODY
 CL-TEST::SYMBOL-TAILP
 CL-TEST::SYMBOL-TAN
 CL-TEST::SYMBOL-TANH
 CL-TEST::SYMBOL-TENTH
 CL-TEST::SYMBOL-TERPRI
 CL-TEST::SYMBOL-THE
 CL-TEST::SYMBOL-THIRD
 CL-TEST::SYMBOL-THROW
 CL-TEST::SYMBOL-TIME
 CL-TEST::SYMBOL-TRACE
 CL-TEST::SYMBOL-TRANSLATE-LOGICAL-PATHNAME
 CL-TEST::SYMBOL-TRANSLATE-PATHNAME
 CL-TEST::SYMBOL-TREE-EQUAL
 CL-TEST::SYMBOL-TRUENAME
 CL-TEST::SYMBOL-TRUNCATE
 CL-TEST::SYMBOL-TWO-WAY-STREAM
 CL-TEST::SYMBOL-TWO-WAY-STREAM-INPUT-STREAM
 CL-TEST::SYMBOL-TWO-WAY-STREAM-OUTPUT-STREAM
 CL-TEST::SYMBOL-TYPE
 CL-TEST::SYMBOL-TYPE-ERROR
 CL-TEST::SYMBOL-TYPE-ERROR-DATUM
 CL-TEST::SYMBOL-TYPE-ERROR-EXPECTED-TYPE
 CL-TEST::SYMBOL-TYPE-OF
 CL-TEST::SYMBOL-TYPECASE
 CL-TEST::SYMBOL-TYPEP
 CL-TEST::SYMBOL-UNBOUND-SLOT
 CL-TEST::SYMBOL-UNBOUND-SLOT-INSTANCE
 CL-TEST::SYMBOL-UNBOUND-VARIABLE
 CL-TEST::SYMBOL-UNDEFINED-FUNCTION
 CL-TEST::SYMBOL-UNEXPORT
 CL-TEST::SYMBOL-UNINTERN
 CL-TEST::SYMBOL-UNION
 CL-TEST::SYMBOL-UNLESS
 CL-TEST::SYMBOL-UNREAD-CHAR
 CL-TEST::SYMBOL-UNSIGNED-BYTE
 CL-TEST::SYMBOL-UNTRACE
 CL-TEST::SYMBOL-UNUSE-PACKAGE
 CL-TEST::SYMBOL-UNWIND-PROTECT
 CL-TEST::SYMBOL-UPDATE-INSTANCE-FOR-DIFFERENT-CLASS
 CL-TEST::SYMBOL-UPDATE-INSTANCE-FOR-REDEFINED-CLASS
 CL-TEST::SYMBOL-UPGRADED-ARRAY-ELEMENT-TYPE
 CL-TEST::SYMBOL-UPGRADED-COMPLEX-PART-TYPE
 CL-TEST::SYMBOL-UPPER-CASE-P
 CL-TEST::SYMBOL-USE-PACKAGE
 CL-TEST::SYMBOL-USE-VALUE
 CL-TEST::SYMBOL-USER-HOMEDIR-PATHNAME
 CL-TEST::SYMBOL-VALUES
 CL-TEST::SYMBOL-VALUES-LIST
 CL-TEST::SYMBOL-VARIABLE
 CL-TEST::SYMBOL-VECTOR
 CL-TEST::SYMBOL-VECTOR-POP
 CL-TEST::SYMBOL-VECTOR-PUSH
 CL-TEST::SYMBOL-VECTOR-PUSH-EXTEND
 CL-TEST::SYMBOL-VECTORP
 CL-TEST::SYMBOL-WARN
 CL-TEST::SYMBOL-WARNING
 CL-TEST::SYMBOL-WHEN
 CL-TEST::SYMBOL-WILD-PATHNAME-P
 CL-TEST::SYMBOL-WITH-ACCESSORS
 CL-TEST::SYMBOL-WITH-COMPILATION-UNIT
 CL-TEST::SYMBOL-WITH-CONDITION-RESTARTS
 CL-TEST::SYMBOL-WITH-HASH-TABLE-ITERATOR
 CL-TEST::SYMBOL-WITH-INPUT-FROM-STRING
 CL-TEST::SYMBOL-WITH-OPEN-FILE
 CL-TEST::SYMBOL-WITH-OPEN-STREAM
 CL-TEST::SYMBOL-WITH-OUTPUT-TO-STRING
 CL-TEST::SYMBOL-WITH-PACKAGE-ITERATOR
 CL-TEST::SYMBOL-WITH-SIMPLE-RESTART
 CL-TEST::SYMBOL-WITH-SLOTS
 CL-TEST::SYMBOL-WITH-STANDARD-IO-SYNTAX
 CL-TEST::SYMBOL-WRITE
 CL-TEST::SYMBOL-WRITE-BYTE
 CL-TEST::SYMBOL-WRITE-CHAR
 CL-TEST::SYMBOL-WRITE-LINE
 CL-TEST::SYMBOL-WRITE-SEQUENCE
 CL-TEST::SYMBOL-WRITE-STRING
 CL-TEST::SYMBOL-WRITE-TO-STRING
 CL-TEST::SYMBOL-Y-OR-N-P
 CL-TEST::SYMBOL-YES-OR-NO-P
 CL-TEST::SYMBOL-ZEROP
 CL-TEST::KEYWORD-PACKAGE-NICKNAMES
 CL-TEST::COMMON-LISP-PACKAGE-NICKNAMES
 CL-TEST::COMMON-LISP-USER-PACKAGE-NICKNAMES
 CL-TEST::NO-EXTRA-SYMBOLS-EXPORTED-FROM-COMMON-LISP
 CL-TEST::KEYWORD-BEHAVIOR
Test CL-TEST::CL-FUNCTION-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN (APPEND CL-TEST::*CL-FUNCTION-SYMBOLS* CL-TEST::*CL-ACCESSOR-SYMBOLS*) WHEN (OR (NOT (FBOUNDP CL-TEST::S)) (MACRO-FUNCTION CL-TEST::S) (SPECIAL-OPERATOR-P CL-TEST::S) (NOT (SYMBOL-FUNCTION CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ACOS ACOSH APROPOS APROPOS-LIST ASIN ASINH ASSOC-IF-NOT ASSOC-IF ATANH BIT-AND BIT-ANDC1 BIT-ANDC2 BIT-EQV BIT-IOR BIT-NAND BIT-NOR BIT-NOT BIT-ORC1 BIT-ORC2 BIT-XOR CHAR-NOT-EQUAL CHAR/= CHARACTER CIS CONCATENATED-STREAM-STREAMS CONJUGATE COPY-ALIST COPY-TREE COSH DECODE-FLOAT DECODE-UNIVERSAL-TIME DELETE-IF-NOT DENOMINATOR DEPOSIT-FIELD DIGIT-CHAR DISASSEMBLE ENOUGH-NAMESTRING EXP FCEILING FFLOOR FILE-AUTHOR FILE-LENGTH FILE-STRING-LENGTH FLOAT-DIGITS FLOAT-PRECISION FLOAT-SIGN FROUND GCD GET-DECODED-TIME HOST-NAMESTRING INPUT-STREAM-P INSPECT INTERACTIVE-STREAM-P INVALID-METHOD-ERROR ISQRT LCM LOAD-LOGICAL-PATHNAME-TRANSLATIONS LOGCOUNT LOGICAL-PATHNAME MAKE-CONCATENATED-STREAM MAKE-LOAD-FORM-SAVING-SLOTS MAKE-SEQUENCE MAP-INTO MAPCON MAPL MEMBER-IF-NOT MERGE METHOD-COMBINATION-ERROR MISMATCH NBUTLAST NINTERSECTION NSET-DIFFERENCE NSET-EXCLUSIVE-OR NSTRING-CAPITALIZE NSUBLIS NSUBST NSUBST-IF NSUBST-IF-NOT NSUBSTITUTE NSUBSTITUTE-IF NSUBSTITUTE-IF-NOT NUMERATOR NUNION OPEN-STREAM-P OUTPUT-STREAM-P PACKAGE-SHADOWING-SYMBOLS PHASE POSITION-IF-NOT PPRINT-DISPATCH PPRINT-FILL PPRINT-LINEAR PPRINT-TABULAR RASSOC RASSOC-IF RASSOC-IF-NOT RATIONALIZE RATIONALP READ-CHAR-NO-HANG READ-DELIMITED-LIST REMPROP SCALE-FLOAT SET SET-EXCLUSIVE-OR SHADOWING-IMPORT SIMPLE-BIT-VECTOR-P SINH SLEEP STREAM-EXTERNAL-FORMAT STRING-CAPITALIZE STRING-GREATERP STRING-LESSP STRING-NOT-EQUAL STRING-NOT-GREATERP STRING-NOT-LESSP STRING-RIGHT-TRIM STRING-TRIM STRING/= STRING<= STRING> STRING>= SUBSETP SUBST-IF SUBST-IF-NOT SUBSTITUTE-IF-NOT TAN TANH TREE-EQUAL FTRUNCATE UNBOUND-SLOT-INSTANCE UNEXPORT UNUSE-PACKAGE UPGRADED-COMPLEX-PART-TYPE LOGICAL-PATHNAME-TRANSLATIONS MASK-FIELD) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-MACRO-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* WHEN (OR (NOT (FBOUNDP CL-TEST::S)) (NOT (MACRO-FUNCTION CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-CONSTANT-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-CONSTANT-SYMBOLS* WHEN (OR (NOT (BOUNDP CL-TEST::S)) (NOT (CONSTANTP CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LAMBDA-PARAMETERS-LIMIT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LONG-FLOAT-EPSILON LONG-FLOAT-NEGATIVE-EPSILON MULTIPLE-VALUES-LIMIT SHORT-FLOAT-EPSILON SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON) [Actual value: #<error during printing>

 NIL
 CL-TEST::CL-VARIABLE-SYMBOLS.1
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (FIND-CLASS CL-TEST::S NIL) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (FIND-CLASS CL-TEST::S NIL NIL) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((CL-TEST::%FOO (&ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (FIND-CLASS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) NIL CL-TEST::ENV)))) (CL-TEST::%FOO)))) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PRINT-NOT-READABLE PROGRAM-ERROR RATIO RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING) [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-PACKAGE.ERROR.1
 CL-TEST::SYMBOL-PACKAGE.ERROR.2Space
 CL-TEST::SYMBOL-PACKAGE.ERROR.3
 CL-TEST::SYMBOL-PLIST.ERROR.1
 CL-TEST::SYMBOL-PLIST.ERROR.2Space
 CL-TEST::SYMBOL-PLIST.ERROR.3Space
 CL-TEST::SYMBOL-PLIST.ERROR.4
 CL-TEST::SYMBOL-VALUE.ERROR.1
 CL-TEST::SYMBOL-VALUE.ERROR.2Space
 CL-TEST::SYMBOL-VALUE.ERROR.3Space
 CL-TEST::SYMBOL-VALUE.ERROR.4
 CL-TEST::SYMBOL-VALUE.ERROR.5
 CL-TEST::SYMBOLP.1
 CL-TEST::SYMBOLP.2
 CL-TEST::SYMBOLP.3
 CL-TEST::SYMBOLP.ERROR.1
 CL-TEST::SYMBOLP.ERROR.2
 CL-TEST::KEYWORDP.1
 CL-TEST::KEYWORDP.2
 CL-TEST::KEYWORDP.3
 CL-TEST::KEYWORDP.4
 CL-TEST::KEYWORDP.5
 CL-TEST::KEYWORDP.6
 CL-TEST::KEYWORDP.7
 CL-TEST::KEYWORDP.8
 CL-TEST::KEYWORDP.9
 CL-TEST::KEYWORDP.10
 CL-TEST::KEYWORDP.12
 CL-TEST::KEYWORDP.13
 CL-TEST::KEYWORDP.ORDER.1
 CL-TEST::KEYWORDP.ERROR.1
 CL-TEST::KEYWORDP.ERROR.2
 CL-TEST::MAKE-SYMBOL.1
 CL-TEST::MAKE-SYMBOL.2
 CL-TEST::MAKE-SYMBOL.3
 CL-TEST::MAKE-SYMBOL.4
 CL-TEST::MAKE-SYMBOL.5
 CL-TEST::MAKE-SYMBOL.6
 CL-TEST::MAKE-SYMBOL.7
 CL-TEST::MAKE-SYMBOL.8
 CL-TEST::MAKE-SYMBOL.9
 CL-TEST::MAKE-SYMBOL.10
 CL-TEST::MAKE-SYMBOL.12
 CL-TEST::MAKE-SYMBOL.13
 CL-TEST::MAKE-SYMBOL.14
 CL-TEST::MAKE-SYMBOL.15
 CL-TEST::MAKE-SYMBOL.16
 CL-TEST::MAKE-SYMBOL.ORDER.1Space
 CL-TEST::MAKE-SYMBOL.ERROR.1
 CL-TEST::MAKE-SYMBOL.ERROR.9
 CL-TEST::MAKE-SYMBOL.ERROR.10
 CL-TEST::MAKE-SYMBOL.ERROR.11
 CL-TEST::COPY-SYMBOL.1
 CL-TEST::COPY-SYMBOL.2
 CL-TEST::COPY-SYMBOL.3
 CL-TEST::COPY-SYMBOL.4
 CL-TEST::COPY-SYMBOL.5
 CL-TEST::COPY-SYMBOL.ERROR.1
 CL-TEST::COPY-SYMBOL.ERROR.2
 CL-TEST::GENSYM.1
 CL-TEST::GENSYM.2
 CL-TEST::GENSYM.3
 CL-TEST::GENSYM.4
 CL-TEST::GENSYM.5
 CL-TEST::GENSYM.6
 CL-TEST::GENSYM.7
 CL-TEST::GENSYM.8
 CL-TEST::GENSYM.9
 CL-TEST::GENSYM.12
 CL-TEST::GENSYM.13
 CL-TEST::GENSYM-COUNTER.1Space
 CL-TEST::GENSYM.ERROR.1
 CL-TEST::GENSYM.ERROR.7
 CL-TEST::GENSYM.ERROR.8
 CL-TEST::GENSYM.ERROR.9
 CL-TEST::GENTEMP.1
 CL-TEST::GENTEMP.2
 CL-TEST::GENTEMP.3
 CL-TEST::GENTEMP.4
 CL-TEST::GENTEMP.5
 CL-TEST::GENTEMP.6Space
 CL-TEST::GENTEMP.ERROR.1
Test CL-TEST::GENTEMP.ERROR.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (OR (TYPEP CL-TEST::X (QUOTE PACKAGE)) (CL-TEST::STRING-DESIGNATOR-P CL-TEST::X) (EQL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) (GENTEMP "T" CL-TEST::X)))) T)) CL-TEST::COLLECT CL-TEST::X)
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::GENTEMP.ERROR.3
 CL-TEST::SYMBOL-FUNCTION.1
 CL-TEST::SYMBOL-FUNCTION.ERROR.1
 CL-TEST::SYMBOL-FUNCTION.ERROR.2Space
 CL-TEST::SYMBOL-FUNCTION.ERROR.3Space
 CL-TEST::SYMBOL-FUNCTION.ERROR.4
 CL-TEST::SYMBOL-FUNCTION.ERROR.5
 CL-TEST::SYMBOL-NAME.1
 CL-TEST::SYMBOL-NAME.2
 CL-TEST::SYMBOL-NAME.3
 CL-TEST::SYMBOL-NAME.ERROR.1
 CL-TEST::SYMBOL-NAME.ERROR.2Space
 CL-TEST::SYMBOL-NAME.ERROR.3
 CL-TEST::BOUNDP.ERROR.1
 CL-TEST::BOUNDP.ERROR.2Space
 CL-TEST::BOUNDP.ERROR.3
 CL-TEST::BOUNDP.ERROR.4
 CL-TEST::BOUNDP.ERROR.5
 CL-TEST::BOUNDP.ERROR.6
 CL-TEST::BOUNDP.1
 CL-TEST::BOUNDP.2
 CL-TEST::BOUNDP.3
 CL-TEST::BOUNDP.4
 CL-TEST::BOUNDP.5
 CL-TEST::BOUNDP.6
 CL-TEST::BOUNDP.ORDER.1
 CL-TEST::SPECIAL-OPERATOR-P.1
 CL-TEST::SPECIAL-OPERATOR-P.2
 CL-TEST::SPECIAL-OPERATOR-P.ORDER.1Space
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.1
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.2
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.3
 CL-TEST::MAKUNBOUND.1
 CL-TEST::MAKUNBOUND.2
 CL-TEST::MAKUNBOUND.ERROR.1
 CL-TEST::MAKUNBOUND.ERROR.2Space
 CL-TEST::MAKUNBOUND.ERROR.3
Test CL-TEST::SET.1 failed
Form: (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A)) (CL-TEST::VAR (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (VALUES CL-TEST::*VAR-USED-IN-SET-TESTS* (SET CL-TEST::VAR (QUOTE CL-TEST::B)) CL-TEST::*VAR-USED-IN-SET-TESTS*))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::B
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.2 failed
Form: (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A)) (CL-TEST::VAR (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (VALUES (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::C))) (LIST (SET CL-TEST::VAR (QUOTE CL-TEST::B)) CL-TEST::*VAR-USED-IN-SET-TESTS* (SYMBOL-VALUE CL-TEST::VAR))) CL-TEST::*VAR-USED-IN-SET-TESTS*))
Expected value:
          (CL-TEST::B CL-TEST::C CL-TEST::B)
          CL-TEST::B
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SET) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (SET (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (SET (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*) NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::*VAR-USED-IN-SET-TESTS* (QUOTE CL-TEST::A)) (CL-TEST::*Y* (QUOTE CL-TEST::B))) (DECLARE (SPECIAL CL-TEST::*VAR-USED-IN-SET-TESTS*)) (SET (QUOTE CL-TEST::*VAR-USED-IN-SET-TESTS*) NIL (QUOTE CL-TEST::*Y*) NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (REMPROP CL-TEST::SYM :FOO)) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (NIL)
          NIL
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.2 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (QUOTE (:FOO 0)))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:FOO 0)
          (T)
          NIL
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.3 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (LIST :BAR 1 :FOO 0 :BAZ 2))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (COPY-LIST (SYMBOL-PLIST CL-TEST::SYM)) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:BAR 1 :FOO 0 :BAZ 2)
          (T)
          (:BAR 1 :BAZ 2)
          (NIL)
          (:BAR 1 :BAZ 2)
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.4 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (LIST :BAR 1 :FOO 0 :BAZ 2 :FOO 3))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (COPY-LIST (SYMBOL-PLIST CL-TEST::SYM)) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected value:
          NIL
          (:BAR 1 :FOO 0 :BAZ 2 :FOO 3)
          (T)
          (:BAR 1 :BAZ 2 :FOO 3)
          (T)
          (:BAR 1 :BAZ 2)
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (REMPROP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (REMPROP (GENSYM)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (REMPROP (GENSYM) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMPROP.ERROR.4 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (REMPROP CL-TEST::X NIL))) (FUNCTION SYMBOLP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function REMPROP> [Actual value: #<error during printing>

 NIL
 CL-TEST::GET.1
 CL-TEST::GET.2
 CL-TEST::GET.3
 CL-TEST::GET.4
 CL-TEST::GET.5
 CL-TEST::GET.6
 CL-TEST::GET.ORDER.1
 CL-TEST::GET.ORDER.2
 CL-TEST::GET.ORDER.3
 CL-TEST::GET.ORDER.4
 CL-TEST::GET.ERROR.1
 CL-TEST::GET.ERROR.2
 CL-TEST::GET.ERROR.3Space
 CL-TEST::GET.ERROR.4Space
 CL-TEST::GET.ERROR.5
 CL-TEST::EVAL.1
 CL-TEST::EVAL.2
 CL-TEST::EVAL.3
 CL-TEST::EVAL.4
 CL-TEST::EVAL.5
 CL-TEST::EVAL.6
 CL-TEST::EVAL.ORDER.1
 CL-TEST::EVAL.ERROR.1
 CL-TEST::EVAL.ERROR.2
 CL-TEST::EVAL.ERROR.3
 CL-TEST::EVAL.ERROR.4
 CL-TEST::EVAL-AND-COMPILE-FNS
Test CL-TEST::EVAL-AND-COMPILE-MACROS failed
Form: (REMOVE-IF (FUNCTION MACRO-FUNCTION) CL-TEST::*EVAL-AND-COMPILE-MACROS*)
Expected value:
          NIL
Actual value:
          (DEFINE-SYMBOL-MACRO) [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPILE.1 failed
Form: (PROGN (FMAKUNBOUND (QUOTE CL-TEST::COMPILE.1-FN)) (VALUES (EVAL (QUOTE (DEFUN CL-TEST::COMPILE.1-FN (CL-TEST::X) CL-TEST::X))) (COMPILED-FUNCTION-P (QUOTE CL-TEST::COMPILE.1-FN)) (LET ((CL-TEST::X (COMPILE (QUOTE CL-TEST::COMPILE.1-FN)))) (OR (CL-TEST::EQT CL-TEST::X (QUOTE CL-TEST::COMPILE.1-FN)) (CL-TEST::NOTNOT (COMPILED-FUNCTION-P CL-TEST::X)))) (COMPILED-FUNCTION-P (QUOTE CL-TEST::COMPILE.1-FN)) (NOT (COMPILED-FUNCTION-P (FUNCTION CL-TEST::COMPILE.1-FN))) (FMAKUNBOUND (QUOTE CL-TEST::COMPILE.1-FN))))
Expected value:
          CL-TEST::COMPILE.1-FN
          NIL
          T
          NIL
          NIL
          CL-TEST::COMPILE.1-FN
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::+FUNCTION-TYPE-INTERPRETED-FUNCTION+> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILE.2
 CL-TEST::COMPILE.3
 CL-TEST::COMPILE.4
 CL-TEST::COMPILE.5
 CL-TEST::COMPILE.6
 CL-TEST::COMPILE.7
 CL-TEST::COMPILE.8
 CL-TEST::COMPILE.9
 CL-TEST::COMPILE.ERROR.1
 CL-TEST::COMPILE.ERROR.2
 CL-TEST::CONSTANTP.ERROR.1
 CL-TEST::CONSTANTP.ERROR.2
 CL-TEST::CONSTANTP.1
 CL-TEST::CONSTANTP.2
 CL-TEST::CONSTANTP.3
 CL-TEST::CONSTANTP.4
 CL-TEST::CONSTANTP.5
 CL-TEST::CONSTANTP.6
 CL-TEST::CONSTANTP.7
 CL-TEST::CONSTANTP.8
 CL-TEST::CONSTANTP.9
 CL-TEST::CONSTANTP.10
 CL-TEST::CONSTANTP.11
 CL-TEST::CONSTANTP.ORDER.1
 CL-TEST::CONSTANTP.ORDER.2
 CL-TEST::LAMBDA.1
 CL-TEST::LAMBDA.2
 CL-TEST::LAMBDA.3
 CL-TEST::LAMBDA.4
 CL-TEST::LAMBDA.5
 CL-TEST::LAMBDA.6
 CL-TEST::LAMBDA.7
 CL-TEST::LAMBDA.8
 CL-TEST::LAMBDA.9
 CL-TEST::LAMBDA.10
 CL-TEST::LAMBDA.11
 CL-TEST::LAMBDA.12
 CL-TEST::LAMBDA.13
 CL-TEST::LAMBDA.14
 CL-TEST::LAMBDA.15
 CL-TEST::LAMBDA.16
 CL-TEST::LAMBDA.17
 CL-TEST::LAMBDA.18
 CL-TEST::LAMBDA.19
 CL-TEST::LAMBDA.20
Test CL-TEST::LAMBDA.21 failed
Form: (FLET ((CL-TEST::%F NIL (LOCALLY (DECLARE (SPECIAL CL-TEST::*X*)) (INCF CL-TEST::*X*)))) ((LAMBDA (CL-TEST::*X*) (DECLARE (SPECIAL CL-TEST::*X*)) (CL-TEST::%F) CL-TEST::*X*) 10))
Expected value:
          11
Actual value:
          #<Unbound-Variable CL-TEST::*X*> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.22 failed
Form: (FLET ((CL-TEST::%F NIL (LOCALLY (DECLARE (SPECIAL CL-TEST::*X*)) (1+ CL-TEST::*X*)))) ((LAMBDA (CL-TEST::*X*) (DECLARE (SPECIAL CL-TEST::*X*)) (CL-TEST::%F)) 15))
Expected value:
          16
Actual value:
          #<Unbound-Variable CL-TEST::*X*> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.23
 CL-TEST::LAMBDA.24
 CL-TEST::LAMBDA.25
 CL-TEST::LAMBDA.26
Test CL-TEST::LAMBDA.27 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.28 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS T :FOO T)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.29 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.30 failed
Form: ((LAMBDA (&KEY CL-TEST::X) CL-TEST::X) :ALLOW-OTHER-KEYS T :X 10 :ALLOW-OTHER-KEYS NIL :FOO T)
Expected value:
          10
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.31
Test CL-TEST::LAMBDA.32 failed
Form: ((LAMBDA (&REST CL-TEST::X &KEY) CL-TEST::X) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (:ALLOW-OTHER-KEYS NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.33 failed
Form: ((LAMBDA (&REST CL-TEST::X &KEY) CL-TEST::X) :W 5 :ALLOW-OTHER-KEYS T :X 10)
Expected value:
          (:W 5 :ALLOW-OTHER-KEYS T :X 10)
Actual value:
          #<Simple-Error Unknown &KEY argument :W.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.34
 CL-TEST::LAMBDA.35
Test CL-TEST::LAMBDA.36 failed
Form: ((LAMBDA (&KEY (CL-TEST::A 1 CL-TEST::A-P) (CL-TEST::B 2 CL-TEST::B-P) (CL-TEST::C 3 CL-TEST::C-P)) (LIST CL-TEST::A (CL-TEST::NOTNOT CL-TEST::A-P) CL-TEST::B (CL-TEST::NOTNOT CL-TEST::B-P) CL-TEST::C (CL-TEST::NOTNOT CL-TEST::C-P))) :C 5 :A 0 :ALLOW-OTHER-KEYS T (QUOTE CL-TEST::B) 100)
Expected value:
          (0 T 2 NIL 5 T)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.37
 CL-TEST::LAMBDA.38
 CL-TEST::LAMBDA.39
 CL-TEST::LAMBDA.40
 CL-TEST::LAMBDA.41
 CL-TEST::LAMBDA.42
 CL-TEST::LAMBDA.43
 CL-TEST::LAMBDA.44
 CL-TEST::LAMBDA.45
 CL-TEST::LAMBDA.46
Test CL-TEST::LAMBDA.47 failed
Form: ((LAMBDA (&KEY CL-TEST::A CL-TEST::B CL-TEST::ALLOW-OTHER-KEYS) (LIST CL-TEST::ALLOW-OTHER-KEYS CL-TEST::A CL-TEST::B)) :C 10 :ALLOW-OTHER-KEYS T :A 1 :B 2 :D 20)
Expected value:
          (T 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.48
 CL-TEST::LAMBDA.49
Test CL-TEST::LAMBDA.50 failed
Form: ((LAMBDA (&KEY CL-TEST::A CL-TEST::B ((:ALLOW-OTHER-KEYS CL-TEST::AOK))) (LIST CL-TEST::AOK CL-TEST::A CL-TEST::B)) :D 40 :A 1 :ALLOW-OTHER-KEYS T :B 2 :C 20)
Expected value:
          (T 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :D.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.51
 CL-TEST::LAMBDA.52
 CL-TEST::LAMBDA.53
 CL-TEST::LAMBDA.54
 CL-TEST::LAMBDA.55
 CL-TEST::LAMBDA.56
Test CL-TEST::LAMBDA.63 failed
Form: (LET ((CL-TEST::Y :BAD1)) (DECLARE (IGNORE CL-TEST::Y)) (LET ((CL-TEST::Y :BAD2)) (DECLARE (SPECIAL CL-TEST::Y)) (FLET ((CL-TEST::%F NIL CL-TEST::Y)) ((LAMBDA (CL-TEST::X &AUX (CL-TEST::Y :GOOD)) (DECLARE (SPECIAL CL-TEST::Y) (IGNORE CL-TEST::X)) (CL-TEST::%F)) NIL))))
Expected value:
          :GOOD
Actual value:
          :BAD2 [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA.64 failed
Form: (LET ((CL-TEST::X :BAD)) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) ((LAMBDA (CL-TEST::X &AUX (CL-TEST::Y (CL-TEST::%F))) (DECLARE (TYPE T CL-TEST::Y) (SPECIAL CL-TEST::X)) CL-TEST::Y) :GOOD)))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::LAMBDA.MACRO.1
 CL-TEST::LAMBDA.MACRO.2
 CL-TEST::LAMBDA.ERROR.1
 CL-TEST::LAMBDA.ERROR.2
 CL-TEST::LAMBDA.ERROR.3;;; Loading from #<Simple-File-Client::Simple-File-Character-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/generated-eval-when-test-file.lisp 81831137>
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (LET :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (LET :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (LET NIL (EVAL-WHEN NIL (PUSH (QUOTE (LET)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (:LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (:EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Loading (EVAL-WHEN NIL (PUSH (QUOTE NIL) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))
;; Compiling file "generated-eval-when-test-file.lisp".
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (LET :COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (LET :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (LET :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (LET :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (LET NIL (EVAL-WHEN NIL (PUSH (QUOTE (LET)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*))).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:COMPILE-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:COMPILE-TOPLEVEL) (PUSH (QUOTE (:COMPILE-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:LOAD-TOPLEVEL :EXECUTE) (PUSH (QUOTE (:LOAD-TOPLEVEL :EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:LOAD-TOPLEVEL) (PUSH (QUOTE (:LOAD-TOPLEVEL)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN (:EXECUTE) (PUSH (QUOTE (:EXECUTE)) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;; Compiling form (EVAL-WHEN NIL (PUSH (QUOTE NIL) CL-TEST::*EVAL-WHEN.1-COLLECTOR*)).
;;; Loading from #<Simple-File-Client::Simple-File-Stream :THAT-MAC-THING /Users/henry/Documents/LispOS-home/source/ansi-tests/generated-eval-when-test-file.llf 81C4CE87>

 CL-TEST::EVAL-WHEN.1
 CL-TEST::EVAL-WHEN.2
 CL-TEST::EVAL-WHEN.3
 CL-TEST::EVAL-WHEN.4
 CL-TEST::EVAL-WHEN.5
 CL-TEST::EVAL-WHEN.6
 CL-TEST::EVAL-WHEN.7
 CL-TEST::EVAL-WHEN.8
 CL-TEST::EVAL-WHEN.9
 CL-TEST::EVAL-WHEN.10
 CL-TEST::EVAL-WHEN.11
 CL-TEST::EVAL-WHEN.12
 CL-TEST::EVAL-WHEN.13
 CL-TEST::EVAL-WHEN.14
 CL-TEST::EVAL-WHEN.15
 CL-TEST::EVAL-WHEN.16
 CL-TEST::EVAL-WHEN.17
 CL-TEST::EVAL-WHEN.18
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.1
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.2
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.3
 CL-TEST::DEFINE-COMPILER-MACRO.1
 CL-TEST::DEFINE-COMPILER-MACRO.2
Test CL-TEST::DEFINE-COMPILER-MACRO.3 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (&WHOLE CL-TEST::FORM &REST CL-TEST::ARGS) (DECLARE (SPECIAL CL-TEST::*X*) (IGNORE CL-TEST::ARGS)) (SETF CL-TEST::*X* T) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::FORM)))) (CL-TEST::ORDINARY-MACRO-DEF-FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X) CL-TEST::X)))) (VALUES (CL-TEST::EQUALT (LIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (EVAL CL-TEST::ORDINARY-MACRO-DEF-FORM))) (CL-TEST::EQUALT (LIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (EVAL CL-TEST::MACRO-DEF-FORM))) (CL-TEST::NOTNOT (TYPEP (COMPILER-MACRO-FUNCTION CL-TEST::SYM) (QUOTE FUNCTION))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (QUOTE CL-TEST::A)))) (LET ((CL-TEST::FN (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::A)))))) (LET ((CL-TEST::*X* NIL)) (DECLARE (SPECIAL CL-TEST::*X*)) (LIST (FUNCALL CL-TEST::FN (QUOTE CL-TEST::B)) CL-TEST::*X*)))))
Expected value:
          T
          T
          T
          CL-TEST::A
          (CL-TEST::B NIL)
Actual value:
          #<Undefined-Function #:G78053> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-COMPILER-MACRO.4
 CL-TEST::DEFINE-COMPILER-MACRO.5
 CL-TEST::DEFINE-COMPILER-MACRO.6
Test CL-TEST::DEFINE-COMPILER-MACRO.7 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::*X*)) (SETF CL-TEST::*X* :BAD) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)))))) (CL-TEST::FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFUN (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (LIST CL-TEST::X CL-TEST::Y))))) (EVAL CL-TEST::FORM) (EVAL CL-TEST::FORM2) (COMPILE CL-TEST::SYM) (LET ((CL-TEST::*X* :GOOD)) (DECLARE (SPECIAL CL-TEST::*X*)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A CL-TEST::B) (DECLARE (NOTINLINE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM))) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::A CL-TEST::B)))) 5 11) CL-TEST::*X*)))
Expected value:
          (5 11)
          :GOOD
Actual value:
          (5 11) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-COMPILER-MACRO.8 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (DEFINE-COMPILER-MACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::*X*)) (SETF CL-TEST::*X* :BAD) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)))))) (CL-TEST::FORM2 (SYSTEM.INTERNALS::BACKQUOTE (DEFMACRO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y))))))) (EVAL CL-TEST::FORM) (EVAL CL-TEST::FORM2) (LET ((CL-TEST::*X* :GOOD)) (DECLARE (SPECIAL CL-TEST::*X*)) (VALUES (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA (CL-TEST::A CL-TEST::B) (DECLARE (NOTINLINE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM))) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) CL-TEST::A CL-TEST::B)))) 7 23) CL-TEST::*X*)))
Expected value:
          (7 23)
          :GOOD
Actual value:
          (7 23) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO CL-TEST::NONEXISTENT-SYMBOL-MACRO NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO CL-TEST::NONEXISTENT-SYMBOL-MACRO NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFMACRO.ERROR.1
 CL-TEST::DEFMACRO.ERROR.2
 CL-TEST::DEFMACRO.ERROR.3
Test CL-TEST::DEFMACRO.1 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.1-MACRO (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST 1 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) 2 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y) 3))) (QUOTE CL-TEST::DEFMACRO.1-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE CL-TEST::DEFMACRO.1-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.1-MACRO (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))))
Expected value:
          (1 CL-TEST::A 2 CL-TEST::B 3)
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.1-MACRO (CL-TEST::X CL-TEST::Y) (SYSTEM.INTERNALS::BACKQUOTE (LIST 1 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) 2 (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y) 3))) (QUOTE CL-TEST::DEFMACRO.1-MACRO)).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.2 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.2-MACRO (CL-TEST::X CL-TEST::Y) (RETURN-FROM CL-TEST::DEFMACRO.2-MACRO (SYSTEM.INTERNALS::BACKQUOTE (CONS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y))))) (QUOTE CL-TEST::DEFMACRO.2-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE CL-TEST::DEFMACRO.2-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.2-MACRO (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))))
Expected value:
          (CL-TEST::A . CL-TEST::B)
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.2-MACRO (CL-TEST::X CL-TEST::Y) (RETURN-FROM CL-TEST::DEFMACRO.2-MACRO (SYSTEM.INTERNALS::BACKQUOTE (CONS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y))))) (QUOTE CL-TEST::DEFMACRO.2-MACRO)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFMACRO.3
Test CL-TEST::DEFMACRO.4 failed
Form: (LET ((CL-TEST::Y :GOOD)) (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.4-MACRO (&OPTIONAL (CL-TEST::X CL-TEST::Y)) (DECLARE (SPECIAL CL-TEST::Y)) CL-TEST::X) (QUOTE CL-TEST::DEFMACRO.4-MACRO))) (LET ((CL-TEST::Y :BAD)) (DECLARE (SPECIAL CL-TEST::Y)) (VALUES (MACROEXPAND-1 (QUOTE (CL-TEST::DEFMACRO.4-MACRO))))))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.4-MACRO (&OPTIONAL (CL-TEST::X CL-TEST::Y)) (DECLARE (SPECIAL CL-TEST::Y)) CL-TEST::X) (QUOTE CL-TEST::DEFMACRO.4-MACRO)).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMACRO.5 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE CL-TEST::DEFMACRO.5-MACRO))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::DEFMACRO.5-MACRO))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE CL-TEST::DEFMACRO.5-MACRO)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFMACRO.6
 CL-TEST::DEFMACRO.7
 CL-TEST::DEFMACRO.8
 CL-TEST::DEFMACRO.9
 CL-TEST::DEFMACRO.10
 CL-TEST::DEFMACRO.11
 CL-TEST::DEFMACRO.12
 CL-TEST::DEFMACRO.13
 CL-TEST::DEFMACRO.14
 CL-TEST::DEFMACRO.15
 CL-TEST::DEFMACRO.16
 CL-TEST::DEFMACRO.17
 CL-TEST::DEFMACRO.17A
 CL-TEST::DEFMACRO.18
 CL-TEST::DEFMACRO.19
 CL-TEST::DEFMACRO.20
Test CL-TEST::DEFMACRO.21 failed
Form: (PROGN (DEFMACRO CL-TEST::DEFMACRO.21-MACRO (&KEY CL-TEST::X CL-TEST::Y CL-TEST::Z) (SYSTEM.INTERNALS::BACKQUOTE (LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Y)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::Z))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((CL-TEST::DEFMACRO.21-MACRO) (CL-TEST::DEFMACRO.21-MACRO :X CL-TEST::A) (CL-TEST::DEFMACRO.21-MACRO :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C) (CL-TEST::DEFMACRO.21-MACRO :X CL-TEST::A :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :X CL-TEST::A) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :X CL-TEST::A :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS NIL) (CL-TEST::DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS T :FOO CL-TEST::BAR)))))
Expected value:
          ((NIL NIL NIL) (CL-TEST::A NIL NIL) (NIL CL-TEST::B NIL) (NIL NIL CL-TEST::C) (CL-TEST::A CL-TEST::B NIL) (NIL CL-TEST::B CL-TEST::C) (CL-TEST::A NIL CL-TEST::C) (CL-TEST::A CL-TEST::B CL-TEST::C) (NIL NIL NIL) (NIL NIL NIL))
Actual value:
          #<Simple-Error Invalid keyword :ALLOW-OTHER-KEYS. Wanted one of (:Z :Y :X).> [Actual value: #<error during printing>

 NIL
 CL-TEST::THE.1
 CL-TEST::THE.2
 CL-TEST::THE.3
 CL-TEST::THE.4
 CL-TEST::THE.5
 CL-TEST::THE.6
 CL-TEST::THE.7
 CL-TEST::THE.8
 CL-TEST::THE.9
 CL-TEST::THE.10
 CL-TEST::THE.11
 CL-TEST::THE.12
 CL-TEST::THE.13
 CL-TEST::THE.14
 CL-TEST::THE.15
 CL-TEST::THE.16
 CL-TEST::THE.17
 CL-TEST::THE.18
 CL-TEST::THE.19
 CL-TEST::THE.20
 CL-TEST::THE.21
 CL-TEST::THE.22
 CL-TEST::THE.23
 CL-TEST::THE.24
 CL-TEST::THE.25
 CL-TEST::SYMBOL-MACROLET.1
 CL-TEST::SYMBOL-MACROLET.2
 CL-TEST::SYMBOL-MACROLET.3
 CL-TEST::SYMBOL-MACROLET.4
 CL-TEST::SYMBOL-MACROLET.5
 CL-TEST::SYMBOL-MACROLET.6
 CL-TEST::SYMBOL-MACROLET.7
 CL-TEST::SYMBOL-MACROLET.8
Test CL-TEST::SYMBOL-MACROLET.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::X 10)) (DECLARE (SPECIAL CL-TEST::X)) 20) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-MACROLET.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2 (QUOTE CL-TEST::A))) CL-TEST::CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SYMBOL-MACROLET.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::*PATHNAMES* 19)) CL-TEST::*PATHNAMES*) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::SYMBOL-MACROLET.9
 CL-TEST::PROCLAIM.1
 CL-TEST::PROCLAIM.2
 CL-TEST::PROCLAIM.3
 CL-TEST::PROCLAIM.ERROR.1
 CL-TEST::PROCLAIM.ERROR.2
Test CL-TEST::PROCLAIM.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (OPTIMIZE . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::PROCLAIM.ERROR.4
 CL-TEST::PROCLAIM.ERROR.5
Test CL-TEST::PROCLAIM.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (TYPE . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (SYSTEM.INTERNALS::BACKQUOTE (FTYPE . CL-TEST::FOO))) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (TYPE INTEGER . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (INTEGER . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (DECLARATION . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PROCLAIM.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (FTYPE (FUNCTION (T) T) . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DECLAIM.1
 CL-TEST::DECLAIM.2
 CL-TEST::DECLAIM.3
 CL-TEST::DECLAIM.4
 CL-TEST::DECLAIM.5
 CL-TEST::DECLAIM.6
 CL-TEST::DECLAIM.7
 CL-TEST::DECLAIM.8
 CL-TEST::DECLAIM.9
 CL-TEST::DECLAIM.10
 CL-TEST::DECLAIM.11
 CL-TEST::LOCALLY.1
 CL-TEST::LOCALLY.2
 CL-TEST::LOCALLY.3
 CL-TEST::LOCALLY.4
 CL-TEST::LOCALLY.5
 CL-TEST::LOCALLY.6
 CL-TEST::LOCALLY.7
 CL-TEST::LOCALLY.8
 CL-TEST::IGNORE.1
 CL-TEST::IGNORE.2
 CL-TEST::IGNORE.3
 CL-TEST::IGNORE.4
 CL-TEST::IGNORE.5
 CL-TEST::IGNORE.6
 CL-TEST::IGNORABLE.1
 CL-TEST::IGNORABLE.2
 CL-TEST::IGNORABLE.3
 CL-TEST::IGNORABLE.4
 CL-TEST::IGNORABLE.5
Test CL-TEST::IGNORABLE.6 failed
Form: (FLET (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (DECLARE (IGNORABLE (FUNCTION (SETF CL-TEST::%F)))) (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (VALUES (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)))
Expected value:
          CL-TEST::C
          (CL-TEST::C . CL-TEST::B)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::IGNORABLE.7
Test CL-TEST::IGNORABLE.8 failed
Form: (LABELS (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (DECLARE (IGNORABLE (FUNCTION (SETF CL-TEST::%F)))) (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (VALUES (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)))
Expected value:
          CL-TEST::C
          (CL-TEST::C . CL-TEST::B)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.1
 CL-TEST::DYNAMIC-EXTENT.2
 CL-TEST::DYNAMIC-EXTENT.3
 CL-TEST::DYNAMIC-EXTENT.4
 CL-TEST::DYNAMIC-EXTENT.5
 CL-TEST::DYNAMIC-EXTENT.6
 CL-TEST::DYNAMIC-EXTENT.7
Test CL-TEST::DYNAMIC-EXTENT.8 failed
Form: (LET ((CL-TEST::X (+ MOST-POSITIVE-FIXNUM 2))) (DECLARE (DYNAMIC-EXTENT CL-TEST::X) (OPTIMIZE SPEED (SAFETY 0))) (1- CL-TEST::X))
Expected value:
          1152921504606846976
Actual value:
          1152921504606846976 [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.9
 CL-TEST::DYNAMIC-EXTENT.10
 CL-TEST::DYNAMIC-EXTENT.11
Test CL-TEST::DYNAMIC-EXTENT.12 failed
Form: (LET* ((CL-TEST::CONTENTS (QUOTE (1 0 0 1 1 0 1 1 0 1))) (CL-TEST::N (LENGTH CL-TEST::CONTENTS))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 32 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) CL-TEST::FOR CL-TEST::FORM1 = (SYSTEM.INTERNALS::BACKQUOTE (MAKE-ARRAY (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))) :INITIAL-CONTENTS (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::CONTENTS)) :ELEMENT-TYPE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA TYPE)))) CL-TEST::FOR CL-TEST::FORM2 = (SYSTEM.INTERNALS::BACKQUOTE (LET ((CL-TEST::A (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FORM1))) (DECLARE (DYNAMIC-EXTENT CL-TEST::A)) (DECLARE (TYPE (SIMPLE-ARRAY (SYSTEM.INTERNALS::BQ-COMMA TYPE) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))))) (DECLARE (NOTINLINE COERCE)) (DECLARE (OPTIMIZE SPEED (SAFETY 0))) (EQUAL (COERCE CL-TEST::A (QUOTE LIST)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::CONTENTS))))) UNLESS (FUNCALL (COMPILE NIL (SYSTEM.INTERNALS::BACKQUOTE (LAMBDA NIL (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FORM2))))) CL-TEST::COLLECT CL-TEST::I))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::DYNAMIC-EXTENT.13
 CL-TEST::DYNAMIC-EXTENT.14
 CL-TEST::DYNAMIC-EXTENT.15
 CL-TEST::DYNAMIC-EXTENT.16
 CL-TEST::OPTIMIZE.1
 CL-TEST::OPTIMIZE.2
 CL-TEST::OPTIMIZE.3
 CL-TEST::OPTIMIZE.4
 CL-TEST::OPTIMIZE.5
 CL-TEST::OPTIMIZE.6
 CL-TEST::OPTIMIZE.7
 CL-TEST::OPTIMIZE.8
 CL-TEST::SPECIAL.1
 CL-TEST::SPECIAL.2
 CL-TEST::SPECIAL.3
 CL-TEST::MACROEXPAND.ERROR.1
 CL-TEST::MACROEXPAND.ERROR.2
 CL-TEST::MACROEXPAND.1
 CL-TEST::MACROEXPAND.2
 CL-TEST::MACROEXPAND.3
 CL-TEST::MACROEXPAND.4
 CL-TEST::MACROEXPAND.5
 CL-TEST::MACROEXPAND.6
 CL-TEST::MACROEXPAND-1.ERROR.1
 CL-TEST::MACROEXPAND-1.ERROR.2
 CL-TEST::MACROEXPAND-1.1
 CL-TEST::MACROEXPAND-1.2
 CL-TEST::MACROEXPAND-1.3
 CL-TEST::MACROEXPAND-1.4
 CL-TEST::MACROEXPAND-1.5
 CL-TEST::MACROEXPAND-1.6
 CL-TEST::DECLARATION.1
 CL-TEST::DECLARATION.2
 CL-TEST::DECLARATION.3
 CL-TEST::TYPE.1
 CL-TEST::TYPE.2
 CL-TEST::TYPE.3
 CL-TEST::TYPE.4
 CL-TEST::TYPE.5
 CL-TEST::TYPE.6
Test CL-TEST::MACRO-FUNCTION.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION CL-TEST::N) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACRO-FUNCTION.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION CL-TEST::N NIL) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACRO-FUNCTION.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((CL-TEST::%M (CL-TEST::S &ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION CL-TEST::S CL-TEST::ENV)))) (CL-TEST::%M (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))))) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO DEFSETF FORMATTER REMF STEP UNTRACE CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS) [Actual value: #<error during printing>

 NIL
 CL-TEST::MACRO-FUNCTION.4
 CL-TEST::MACRO-FUNCTION.5
 CL-TEST::MACRO-FUNCTION.6
 CL-TEST::MACRO-FUNCTION.7
 CL-TEST::MACRO-FUNCTION.8
 CL-TEST::MACRO-FUNCTION.9
 CL-TEST::MACRO-FUNCTION.10
 CL-TEST::MACRO-FUNCTION.11
 CL-TEST::MACRO-FUNCTION.12
 CL-TEST::MACRO-FUNCTION.13
 CL-TEST::MACRO-FUNCTION.14
 CL-TEST::MACRO-FUNCTION.15
 CL-TEST::MACRO-FUNCTION.ERROR.1
 CL-TEST::MACRO-FUNCTION.ERROR.2
 CL-TEST::DCF-FUNS
Test CL-TEST::DCF-MACROS failed
Form: (REMOVE-IF (FUNCTION MACRO-FUNCTION) CL-TEST::*DCF-MACROS*)
Expected value:
          NIL
Actual value:
          (CCASE DEFSETF) [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF.ORDER.1
 CL-TEST::SETF.ORDER.2
 CL-TEST::INCF.ORDER.1
 CL-TEST::DECF.ORDER.1
 CL-TEST::SETF-VAR
Test CL-TEST::SETF-VALUES.1 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3)))
Expected value:
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.2 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3)) (VALUES CL-TEST::Z CL-TEST::Y CL-TEST::X))
Expected value:
          3
          2
          1
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.3 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y NIL) (CL-TEST::Z NIL)) (SETF (VALUES CL-TEST::X CL-TEST::X CL-TEST::X) (VALUES 1 2 3)) CL-TEST::X)
Expected value:
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.4 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (SETF (VALUES (CAR CL-TEST::X) (CADR CL-TEST::X)) (VALUES 1 2)) CL-TEST::X)
Expected value:
          (1 2)
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.5 failed
Form: (LET ((CL-TEST::A (VECTOR NIL NIL)) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (SETF (VALUES (AREF CL-TEST::A (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 0)) (AREF CL-TEST::A (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) 1))) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (VALUES (QUOTE CL-TEST::FOO) (QUOTE CL-TEST::BAR)))) (VALUES CL-TEST::A CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #(CL-TEST::FOO CL-TEST::BAR)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-VALUES.6 failed
Form: (SETF (VALUES) (VALUES))
Expected value:
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-THE.1 failed
Form: (LET ((CL-TEST::X 1)) (SETF (THE INTEGER CL-TEST::X) 2) CL-TEST::X)
Expected value:
          2
Actual value:
          #<Unbound-Variable INTEGER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-THE.2 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A)))) (VALUES (SETF (THE SYMBOL (CAR CL-TEST::X)) (QUOTE CL-TEST::B)) CL-TEST::X))
Expected value:
          CL-TEST::B
          (CL-TEST::B)
Actual value:
          #<Unbound-Variable SYMBOL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.1 failed
Form: (LET ((CL-TEST::X (VECTOR 0 1 2 3 4 5))) (SETF (APPLY (FUNCTION AREF) CL-TEST::X (QUOTE (0))) 10) CL-TEST::X)
Expected value:
          #(10 1 2 3 4 5)
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.2 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0)))))) (SETF (APPLY (FUNCTION AREF) CL-TEST::A 1 1 NIL) (QUOTE CL-TEST::A)) (EQUALP CL-TEST::A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 CL-TEST::A))))))
Expected value:
          T
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.3 failed
Form: (LET ((CL-TEST::BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION BIT) CL-TEST::BV 4 NIL) 1) CL-TEST::BV)
Expected value:
          #*0000100000
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-APPLY.4 failed
Form: (LET ((CL-TEST::BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION SBIT) CL-TEST::BV 4 NIL) 1) CL-TEST::BV)
Expected value:
          #*0000100000
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF-MACRO.1
 CL-TEST::SETF-MACRO.3
 CL-TEST::SETF-MACRO.4
 CL-TEST::SETF-SYMBOL-MACRO.1
Test CL-TEST::SETF-SYMBOL-MACRO.2 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X CL-TEST::Y)) (LET ((CL-TEST::Y NIL)) (VALUES (SETQ CL-TEST::X 1) CL-TEST::X CL-TEST::Y)))
Expected value:
          1
          1
          1
Actual value:
          #<Type-Error C1E32D77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-SYMBOL-MACRO.3 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (VALUES CL-TEST::Y CL-TEST::Z))) (LET ((CL-TEST::Y NIL) (CL-TEST::Z NIL)) (VALUES (SETQ CL-TEST::X (VALUES 1 2)) CL-TEST::X CL-TEST::Y CL-TEST::Z)))
Expected value:
          1
          1
          1
          2
Actual value:
          #<Type-Error C1E3D1D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SETQ.1
 CL-TEST::SETQ.2
 CL-TEST::SETQ.3
 CL-TEST::SETQ.4
 CL-TEST::SETQ.5
 CL-TEST::SETQ.6
 CL-TEST::SETQ.7
 CL-TEST::SETF.1
 CL-TEST::SETF.2
 CL-TEST::SETF.3
 CL-TEST::SETF.4
 CL-TEST::SETF.5
 CL-TEST::SETF.6
 CL-TEST::SETF.7
 CL-TEST::SETF.8
 CL-TEST::PSETQ.1
 CL-TEST::PSETQ.2
 CL-TEST::PSETQ.3
 CL-TEST::PSETQ.4
 CL-TEST::PSETQ.5
 CL-TEST::PSETQ.6
Test CL-TEST::PSETQ.7 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I))) (CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I)))) (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETQ CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I)))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETQ.8
 CL-TEST::PSETQ.9
 CL-TEST::PSETQ.10
 CL-TEST::PSETQ.ERROR.1
 CL-TEST::PSETQ.ERROR.2
 CL-TEST::PSETQ.ERROR.3
Test CL-TEST::PSETF.ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) (VALUES CL-TEST::X CL-TEST::I))
Expected value:
          #(NIL 2 NIL NIL)
          2
Actual value:
          #(NIL NIL 1 NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETF.ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I 10)) (VALUES CL-TEST::X CL-TEST::I))
Expected value:
          #(NIL 2 NIL 13)
          13
Actual value:
          #<Simple-Error Subscript 12 is invalid for axis, should be non-negative and less than 4.> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.1
 CL-TEST::PSETF.2
 CL-TEST::PSETF.3
 CL-TEST::PSETF.4
 CL-TEST::PSETF.5
 CL-TEST::PSETF.6
Test CL-TEST::PSETF.7 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I))) (CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I)))) (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETF CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I)))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
Test CL-TEST::PSETF.8 failed
Form: (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I))
Expected value:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #(0 1 2 2 1 5 6 7 8 9) [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.9
 CL-TEST::PSETF.10
 CL-TEST::PSETF.11
 CL-TEST::PSETF.ERROR.1
 CL-TEST::PSETF.12
 CL-TEST::PSETF.12A
 CL-TEST::PSETF.13
 CL-TEST::PSETF.13A
 CL-TEST::PSETF.14
 CL-TEST::PSETF.15
 CL-TEST::PSETF.16
 CL-TEST::PSETF.17
 CL-TEST::PSETF.18
 CL-TEST::PSETF.18A
Test CL-TEST::PSETF.19 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100))) (PSETF (BIT CL-TEST::X 1) 0 (BIT CL-TEST::X 2) 1 (BIT CL-TEST::Y 4) 1 (BIT CL-TEST::Y 0) 0) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          #*10100
          #*01101
Actual value:
          #<Undefined-Function (SETF BIT)> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.20
Test CL-TEST::PSETF.21 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100))) (PSETF (SBIT CL-TEST::X 1) 0 (SBIT CL-TEST::X 2) 1 (SBIT CL-TEST::Y 4) 1 (SBIT CL-TEST::Y 0) 0) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          #*10100
          #*01101
Actual value:
          #<Undefined-Function (SETF SBIT)> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.22
 CL-TEST::PSETF.23
 CL-TEST::PSETF.24
 CL-TEST::PSETF.25
 CL-TEST::PSETF.26
 CL-TEST::PSETF.27
 CL-TEST::PSETF.28
 CL-TEST::PSETF.29
 CL-TEST::PSETF.30
 CL-TEST::PSETF.31
 CL-TEST::PSETF.32
 CL-TEST::PSETF.33
 CL-TEST::PSETF.34
 CL-TEST::PSETF.35
 CL-TEST::PSETF.36
Test CL-TEST::PSETF.37 failed
Form: (LET ((CL-TEST::B1 (BYTE 3 1)) (CL-TEST::B2 (BYTE 4 2)) (CL-TEST::X 51925) (CL-TEST::Y 13638) (CL-TEST::M1 21869) (CL-TEST::M2 15541)) (PSETF (MASK-FIELD CL-TEST::B1 CL-TEST::X) CL-TEST::M1 (MASK-FIELD CL-TEST::B2 CL-TEST::Y) CL-TEST::M2) (VALUES CL-TEST::X CL-TEST::Y))
Expected value:
          51933
          13686
Actual value:
          #<Undefined-Function (SETF MASK-FIELD)> [Actual value: #<error during printing>

 NIL
 CL-TEST::PSETF.39
 CL-TEST::PSETF.40
Test CL-TEST::SHIFTF-ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (CL-TEST::I 2)) (VALUES (SHIFTF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected value:
          CL-TEST::D
          #(CL-TEST::A CL-TEST::B CL-TEST::C 4 CL-TEST::E)
          4
Actual value:
          #<Simple-Error Subscript 5 is invalid for axis, should be non-negative and less than 5.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHIFTF-ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) (QUOTE CL-TEST::G) (QUOTE CL-TEST::H))) (CL-TEST::I 2)) (VALUES (SHIFTF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected value:
          CL-TEST::D
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E 5 CL-TEST::F CL-TEST::G CL-TEST::H)
          5
Actual value:
          CL-TEST::D [Actual value: #<error during printing>

 NIL
 CL-TEST::SHIFTF.1
 CL-TEST::SHIFTF.2
 CL-TEST::SHIFTF.3
 CL-TEST::SHIFTF.4
 CL-TEST::SHIFTF.5
 CL-TEST::SHIFTF.6
Test CL-TEST::ROTATEF-ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (CL-TEST::I 2)) (VALUES (ROTATEF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I))) CL-TEST::X CL-TEST::I))
Expected value:
          NIL
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E CL-TEST::D CL-TEST::F)
          4
Actual value:
          #<Simple-Error Subscript 6 is invalid for axis, should be non-negative and less than 6.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ROTATEF-ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (CL-TEST::I 2)) (VALUES (ROTATEF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I))) CL-TEST::X CL-TEST::I))
Expected value:
          NIL
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E CL-TEST::F CL-TEST::D)
          5
Actual value:
          #<Simple-Error Subscript 6 is invalid for axis, should be non-negative and less than 6.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.1
 CL-TEST::ROTATEF.2
 CL-TEST::ROTATEF.3
 CL-TEST::ROTATEF.4
 CL-TEST::ROTATEF.5
 CL-TEST::ROTATEF.6
 CL-TEST::ROTATEF.7
 CL-TEST::ROTATEF.8
 CL-TEST::ROTATEF.9
 CL-TEST::ROTATEF.10
 CL-TEST::ROTATEF.11
 CL-TEST::ROTATEF.12
 CL-TEST::ROTATEF.13
 CL-TEST::ROTATEF.14
 CL-TEST::ROTATEF.15
 CL-TEST::ROTATEF.16
Test CL-TEST::ROTATEF.17 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100)) (CL-TEST::Z 1)) (ROTATEF (BIT CL-TEST::X 1) (BIT CL-TEST::Y 3) CL-TEST::Z) (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*10000
          #*11110
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.18
Test CL-TEST::ROTATEF.21 failed
Form: (LET* ((CL-TEST::X (COPY-SEQ #*11000)) (CL-TEST::Y (COPY-SEQ #*11100)) (CL-TEST::Z 1)) (ROTATEF (BIT CL-TEST::X 1) (BIT CL-TEST::Y 3) CL-TEST::Z) (VALUES CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*10000
          #*11110
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROTATEF.22
 CL-TEST::ROTATEF.23
 CL-TEST::ROTATEF.24
 CL-TEST::ROTATEF.25
 CL-TEST::ROTATEF.26
 CL-TEST::ROTATEF.27
 CL-TEST::ROTATEF.28
 CL-TEST::ROTATEF.29
 CL-TEST::ROTATEF.30
 CL-TEST::ROTATEF.31
 CL-TEST::ROTATEF.32
 CL-TEST::ROTATEF.33
 CL-TEST::ROTATEF.34
 CL-TEST::ROTATEF.35
 CL-TEST::ROTATEF.36
 CL-TEST::ROTATEF.37
 CL-TEST::RETURN.ERROR.1
 CL-TEST::RETURN.ERROR.2
 CL-TEST::RETURN.ERROR.3
 CL-TEST::RETURN.1
 CL-TEST::RETURN.2
 CL-TEST::RETURN.3
 CL-TEST::RETURN-FROM.1
 CL-TEST::RETURN-FROM.2
 CL-TEST::RETURN-FROM.3
 CL-TEST::DEFINE-SETF-EXPANDER.ERROR.1
 CL-TEST::DEFINE-SETF-EXPANDER.1
 CL-TEST::DEFINE-SETF-EXPANDER.2
 CL-TEST::DEFINE-SETF-EXPANDER.3
Test CL-TEST::DEFINE-SETF-EXPANDER.4 failed
Form: (LET ((CL-TEST::A (LIST (LIST 1)))) (VALUES (COPY-TREE CL-TEST::A) (CL-TEST::MY-CAR (CL-TEST::MY-CAR CL-TEST::A)) (SETF (CL-TEST::MY-CAR (CL-TEST::MY-CAR CL-TEST::A)) 2) CL-TEST::A))
Expected value:
          ((1))
          1
          2
          ((2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-SETF-EXPANDER.5 failed
Form: (LET ((CL-TEST::X NIL)) (VALUES (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::FOO) CL-TEST::X) 1) (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::FOO) CL-TEST::X) 2) (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::BAR) CL-TEST::X) 3) (COPY-TREE CL-TEST::X)))
Expected value:
          NIL
          1
          ((CL-TEST::FOO . 1))
          2
          ((CL-TEST::FOO . 2))
          3
          ((CL-TEST::BAR . 3) (CL-TEST::FOO . 2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-SETF-EXPANDER.6
 CL-TEST::DEFINE-SETF-EXPANDER.7
 CL-TEST::AND.1
 CL-TEST::AND.2
 CL-TEST::AND.3
 CL-TEST::AND.4
 CL-TEST::AND.5
 CL-TEST::AND.6
 CL-TEST::AND.7
 CL-TEST::AND.8
 CL-TEST::AND.9
 CL-TEST::AND.10
 CL-TEST::AND.ORDER.1
 CL-TEST::AND.ORDER.2
 CL-TEST::AND.ERROR.1
 CL-TEST::AND.ERROR.2
 CL-TEST::AND.ERROR.3
 CL-TEST::APPLY.ERROR.1
 CL-TEST::APPLY.ERROR.2
 CL-TEST::APPLY.ERROR.3
 CL-TEST::APPLY.ERROR.4
 CL-TEST::APPLY.1
 CL-TEST::APPLY.2
 CL-TEST::APPLY.3
Test CL-TEST::APPLY.4 failed
Form: (LET ((CL-TEST::ZEROS (MAKE-LIST (MIN 10000 (1- CALL-ARGUMENTS-LIMIT)) :INITIAL-ELEMENT 1))) (APPLY (FUNCTION +) CL-TEST::ZEROS))
Expected value:
          499
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::APPLY.5
 CL-TEST::APPLY.6
 CL-TEST::APPLY.7
 CL-TEST::APPLY.8
 CL-TEST::APPLY.ORDER.1
 CL-TEST::BLOCK.1
 CL-TEST::BLOCK.2
 CL-TEST::BLOCK.3
 CL-TEST::BLOCK.4
 CL-TEST::BLOCK.5
 CL-TEST::BLOCK.6
 CL-TEST::BLOCK.7
 CL-TEST::BLOCK.8
 CL-TEST::BLOCK.9
 CL-TEST::BLOCK.10
 CL-TEST::BLOCK.11
 CL-TEST::BLOCK.12
 CL-TEST::CALL-ARGUMENTS-LIMIT.1
 CL-TEST::CALL-ARGUMENTS-LIMIT.2
 CL-TEST::CALL-ARGUMENTS-LIMIT.3
 CL-TEST::CALL-ARGUMENTS-LIMIT.4
Test CL-TEST::CALL-ARGUMENTS-LIMIT.5 failed
Form: (< CALL-ARGUMENTS-LIMIT LAMBDA-PARAMETERS-LIMIT)
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.1
 CL-TEST::CASE.2
 CL-TEST::CASE.3
 CL-TEST::CASE.4
Test CL-TEST::CASE.5 failed
Form: (CASE (1+ MOST-POSITIVE-FIXNUM) (1152921504606846976 (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.6
 CL-TEST::CASE.7
 CL-TEST::CASE.8
 CL-TEST::CASE.9
 CL-TEST::CASE.10
 CL-TEST::CASE.11
 CL-TEST::CASE.12
 CL-TEST::CASE.13
 CL-TEST::CASE.14
 CL-TEST::CASE.15
 CL-TEST::CASE.16
 CL-TEST::CASE.17
 CL-TEST::CASE.18
 CL-TEST::CASE.19
 CL-TEST::CASE.20
 CL-TEST::CASE.21
 CL-TEST::CASE.22
 CL-TEST::CASE.23
 CL-TEST::CASE.24
 CL-TEST::CASE.25
 CL-TEST::CASE.26
 CL-TEST::CASE.27
 CL-TEST::CASE.28
 CL-TEST::CASE.29
 CL-TEST::CASE.30
 CL-TEST::CASE.31
Test CL-TEST::CASE.32 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::A) (T (QUOTE CL-TEST::B)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::CASE.33 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)) (T))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::CASE.34 failed
Form: (CASE (QUOTE CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)) (OTHERWISE))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
 CL-TEST::CASE.35
 CL-TEST::CASE.36
 CL-TEST::CASE.37
 CL-TEST::CASE.ERROR.1
 CL-TEST::CASE.ERROR.2
 CL-TEST::CASE.ERROR.3
 CL-TEST::CATCH.1
 CL-TEST::CATCH.2
 CL-TEST::CATCH.3
 CL-TEST::CATCH.4
 CL-TEST::CATCH.5
 CL-TEST::CATCH.7
 CL-TEST::CATCH.8
 CL-TEST::CATCH.9
 CL-TEST::CATCH.10
 CL-TEST::CATCH.11
 CL-TEST::CATCH.12
 CL-TEST::CATCH.13
 CL-TEST::CATCH.14
 CL-TEST::CATCH.15
 CL-TEST::CATCH.16
 CL-TEST::THROW-ERROR
Test CL-TEST::CCASE.1 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (T NIL)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (OTHERWISE NIL)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.6 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::Z) 1) ((CL-TEST::Y CL-TEST::B CL-TEST::W) 2) ((CL-TEST::B CL-TEST::C) 3)))
Expected value:
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.7 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::Z))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::B CL-TEST::C) 1) ((CL-TEST::D CL-TEST::E) 2) ((CL-TEST::F CL-TEST::Z CL-TEST::G) 3)))
Expected value:
          3
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.8 failed
Form: (LET ((CL-TEST::X (1+ MOST-POSITIVE-FIXNUM))) (CCASE CL-TEST::X (1152921504606846976 (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X NIL (CCASE CL-TEST::X (NIL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.10 failed
Form: (LET (CL-TEST::X) (CCASE CL-TEST::X ((NIL) (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.11 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::A (VALUES 1 2 3)) (CL-TEST::C NIL)))
Expected value:
          1
          2
          3
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.12 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (CCASE CL-TEST::X (CL-TEST::A 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.13 failed
Form: (LET ((CL-TEST::X T)) (CCASE CL-TEST::X ((T) 10) (T 20)))
Expected value:
          10
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.14 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((CL-TEST::Y (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)))) (CCASE CL-TEST::Y (((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) 1) (CL-TEST::A 2))))))
Expected value:
          1
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.15 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE OTHERWISE) (CCASE CL-TEST::X ((T) 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.16 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (CCASE CL-TEST::X ((OTHERWISE) 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.17 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) (OTHERWISE 2)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.19 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((T) 2)))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.20 failed
Form: (LET ((CL-TEST::X #\a)) (CCASE CL-TEST::X ((#\b #\c) 10) ((#\d #\e #\A) 20) (NIL 30) ((#\z #\a #\y) 40)))
Expected value:
          40
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.21 failed
Form: (LET ((CL-TEST::X 1)) (CCASE CL-TEST::X (1 (VALUES)) (2 (QUOTE CL-TEST::A))))
Expected value:
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.23 failed
Form: (LET ((CL-TEST::X 1)) (CCASE CL-TEST::X (1 (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.25 failed
Form: (LET ((CL-TEST::A (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (CL-TEST::I 1)) (VALUES (CCASE (AREF CL-TEST::A (INCF CL-TEST::I)) (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4)) CL-TEST::I))
Expected value:
          3
          2
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.26 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::B CL-TEST::C) 10) (CL-TEST::B 20)))
Expected value:
          10
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.27 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::B 20) ((CL-TEST::A CL-TEST::B CL-TEST::C) 10)))
Expected value:
          20
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.28 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::B 20) (CL-TEST::B 10) (CL-TEST::D 0)))
Expected value:
          20
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.29 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y 2)) (VALUES (CCASE CL-TEST::Y (1 (SETQ CL-TEST::X (QUOTE CL-TEST::A)) (QUOTE CL-TEST::W)) (2 (SETQ CL-TEST::X (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y)) (3 (SETQ CL-TEST::X (QUOTE CL-TEST::C)) (QUOTE CL-TEST::Z))) CL-TEST::X))
Expected value:
          CL-TEST::Y
          CL-TEST::B
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.30 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.31 failed
Form: (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (STORE-VALUE 7 CL-TEST::C))))) (LET ((CL-TEST::X 0)) (CCASE CL-TEST::X (1 :BAD) (7 :GOOD) (2 NIL))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.32 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::A (GO 10) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::BAD))))) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.33 failed
Form: (LET ((CL-TEST::X :B)) (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CCASE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)) (:A :BAD1) (:B :GOOD) (:C :BAD2))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CCASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<Function CONS 288ECC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<Function CAR 209D3C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<Function APPEND 3B4BDC>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<Function VALUES 2C745C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<Function (MACRO-FUNCTION COND) 51BB2C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<Function CL-TEST::MEANINGLESS-USER-FUNCTION-FOR-UNIVERSE 1962B8C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 407045C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<System.Eval::Interpreted-Function SYSTEM.EVAL::INTERPRETED-FUNCTION 409A86C>) failed
(FUNCALL #<Function COMPILED-FUNCTION-P 2D2A6C> #<Function (LAMBDA :IN NIL) 40A038C>) failed
Test CL-TEST::COMPILED-FUNCTION-P.1 failed
Form: (CL-TEST::CHECK-TYPE-PREDICATE (FUNCTION COMPILED-FUNCTION-P) (QUOTE COMPILED-FUNCTION))
Expected value:
          NIL
Actual value:
          (#<Function CONS 288ECC> #<Function CAR 209D3C> #<Function APPEND 3B4BDC> #<Function VALUES 2C745C> #<Function (MACRO-FUNCTION COND) 51BB2C> #<Function CL-TEST::MEANINGLESS-USER-FUNCTION-FOR-UNIVERSE 1962B8C> #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 407045C> #<System.Eval::Interpreted-Function SYSTEM.EVAL::INTERPRETED-FUNCTION 409A86C> #<Function (LAMBDA :IN NIL) 40A038C>) [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILED-FUNCTION-P.2
Test CL-TEST::COMPILED-FUNCTION-P.3 failed
Form: (CL-TEST::NOTNOT-MV (COMPILED-FUNCTION-P (COMPILE NIL (QUOTE (LAMBDA (CL-TEST::Y CL-TEST::X) (CONS CL-TEST::X CL-TEST::Y))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::+FUNCTION-TYPE-INTERPRETED-FUNCTION+> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPILED-FUNCTION-P.ORDER.1
 CL-TEST::COMPILED-FUNCTION-P.ERROR.1
 CL-TEST::COMPILED-FUNCTION-P.ERROR.2
 CL-TEST::COMPLEMENT.1
 CL-TEST::COMPLEMENT.2
 CL-TEST::COMPLEMENT.3
 CL-TEST::COMPLEMENT.4
 CL-TEST::COMPLEMENT.5
 CL-TEST::COMPLEMENT.6
 CL-TEST::COMPLEMENT.7
Test CL-TEST::COMPLEMENT.8 failed
Form: (FLET ((CL-TEST::%F (&KEY CL-TEST::X CL-TEST::Y) (IF CL-TEST::X (NOT CL-TEST::Y) CL-TEST::Y))) (LET ((CL-TEST::CF (COMPLEMENT (FUNCTION CL-TEST::%F)))) (VALUES (LIST (CL-TEST::%F) (CL-TEST::%F :X NIL) (CL-TEST::%F :X T) (CL-TEST::%F :Y NIL) (CL-TEST::%F :Y T :Y NIL) (CL-TEST::%F :X NIL :Y NIL) (CL-TEST::%F :X T :Y NIL) (CL-TEST::%F :Y T :X NIL) (CL-TEST::%F :X T :Y T)) (LIST (FUNCALL CL-TEST::CF) (FUNCALL CL-TEST::CF :X NIL) (FUNCALL CL-TEST::CF :X T) (FUNCALL CL-TEST::CF :Y NIL) (FUNCALL CL-TEST::CF :Y T) (FUNCALL CL-TEST::CF :X NIL :Y NIL) (FUNCALL CL-TEST::CF :X T :Y NIL) (FUNCALL CL-TEST::CF :Y T :X NIL) (FUNCALL CL-TEST::CF :X T :Y T :X NIL)) (LIST (FUNCALL CL-TEST::CF :X NIL :Y T :FOO NIL :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::CF :X NIL :Y T :ALLOW-OTHER-KEYS NIL)))))
Expected value:
          (NIL NIL T NIL T NIL T T NIL)
          (T T NIL T NIL T NIL NIL T)
          (NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :FOO.> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPLEMENT.9
 CL-TEST::COMPLEMENT.10
 CL-TEST::COMPLEMENT.ORDER.1
 CL-TEST::COMPLEMENT.ERROR.1
 CL-TEST::COMPLEMENT.ERROR.2
 CL-TEST::COMPLEMENT.ERROR.3
 CL-TEST::COMPLEMENT.ERROR.4
Test CL-TEST::COMPLEMENT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :FOO T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :FOO.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPLEMENT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (CL-TEST::X &REST CL-TEST::Y) (AND CL-TEST::X (EVENP (LENGTH CL-TEST::Y))))))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::X &REST CL-TEST::Y)> [Actual value: #<error during printing>

 NIL
 CL-TEST::COND.1
 CL-TEST::COND.2
 CL-TEST::COND.3
 CL-TEST::COND.4
 CL-TEST::COND.5
 CL-TEST::COND.6
 CL-TEST::COND.7
 CL-TEST::COND.8
 CL-TEST::COND.9
 CL-TEST::COND.10
 CL-TEST::COND.11
 CL-TEST::COND.12
 CL-TEST::COND.13
 CL-TEST::COND.14
 CL-TEST::COND.15
 CL-TEST::COND.16
 CL-TEST::COND.17
 CL-TEST::COND.ERROR.1
 CL-TEST::COND.ERROR.2
 CL-TEST::COND.ERROR.3
 CL-TEST::CONSTANTLY.1
 CL-TEST::CONSTANTLY.2
 CL-TEST::CONSTANTLY.3
 CL-TEST::CONSTANTLY.ERROR.1
 CL-TEST::CONSTANTLY.ERROR.2
Test CL-TEST::CTYPECASE.1 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (QUOTE CL-TEST::A)) (T (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (CTYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A))))) (FUNCTION SYMBOLP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.3 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A)) (T (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::B
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.4 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (VALUES))))
Expected value:
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.5 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (VALUES)) (T (QUOTE CL-TEST::A))))
Expected value:
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.6 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (BIT (QUOTE CL-TEST::A)) (INTEGER (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.7 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.8 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.9 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (T NIL)))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.10 failed
Form: (LET ((CL-TEST::X 0) (CL-TEST::Y 1)) (VALUES (CTYPECASE CL-TEST::Y (BIT (INCF CL-TEST::X) (QUOTE CL-TEST::A)) (INTEGER (INCF CL-TEST::X 2) (QUOTE CL-TEST::B)) (T (INCF CL-TEST::X 4) (QUOTE CL-TEST::C))) CL-TEST::X))
Expected value:
          CL-TEST::A
          1
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.11 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER) (T (QUOTE CL-TEST::A))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.12 failed
Form: (LET ((CL-TEST::X 1)) (VALUES (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (EQL (TYPE-ERROR-DATUM CL-TEST::C) 1)) (ASSERT (NOT (TYPEP 1 (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) (STORE-VALUE (QUOTE CL-TEST::A) CL-TEST::C))))) (CTYPECASE CL-TEST::X (SYMBOL :GOOD) (FLOAT :BAD))) CL-TEST::X))
Expected value:
          :GOOD
          CL-TEST::A
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.13 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CTYPECASE CL-TEST::X (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL C00B5067> (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.14 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CTYPECASE CL-TEST::X (SYMBOL (GO 10) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::BAD))))) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.15 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CTYPECASE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :FOO)) (INTEGER :BAD1) (KEYWORD :GOOD) (SYMBOL :BAD2)))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.16 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CTYPECASE :FOO (INTEGER (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :BAD1))) (KEYWORD (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :GOOD))) (SYMBOL (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :BAD2)))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function CTYPECASE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CTYPECASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCONSTANT.1
 CL-TEST::DEFCONSTANT.2
 CL-TEST::DEFCONSTANT.3
Test CL-TEST::DEFCONSTANT.4 failed
Form: (DOCUMENTATION (QUOTE CL-TEST::TEST-CONSTANT-2) (QUOTE VARIABLE))
Expected value:
          "This is the documentation."
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCONSTANT.5
 CL-TEST::DEFCONSTANT.ERROR.1
 CL-TEST::DEFCONSTANT.ERROR.2
 CL-TEST::DEFCONSTANT.ERROR.3
Test CL-TEST::DEFINE-MODIFY-MACRO.1 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::DMM1-APPENDF (&REST CL-TEST::ARGS) APPEND "Append lists onto a list"))) (EVAL (QUOTE (LET ((CL-TEST::U (QUOTE (CL-TEST::P CL-TEST::Q CL-TEST::R))) CL-TEST::V) (LIST (SETQ CL-TEST::V CL-TEST::U) (CL-TEST::DMM1-APPENDF CL-TEST::U (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::DMM1-APPENDF CL-TEST::U NIL) (CL-TEST::DMM1-APPENDF CL-TEST::U (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G))) CL-TEST::U CL-TEST::V)))))
Expected value:
          CL-TEST::DMM1-APPENDF
          ((CL-TEST::P CL-TEST::Q CL-TEST::R) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R))
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::DMM1-APPENDF) 3DB51EC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.2 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::I 10)) (LIST (CL-TEST::NEW-INCF CL-TEST::I) (CL-TEST::NEW-INCF CL-TEST::I 100) CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF
          (11 111 111)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF) 3DC7A5C> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.3 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF1 (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::A (VECTOR 0 0 0 0 0)) (CL-TEST::I 1)) (LIST (CL-TEST::NEW-INCF1 (AREF CL-TEST::A (INCF CL-TEST::I))) CL-TEST::A CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF1
          (1 #(0 0 1 0 0) 2)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF1) 3DD51EC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFINE-MODIFY-MACRO.4 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF2 (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::A (VECTOR 0 0 0 0 0)) (CL-TEST::I 1)) (LIST (CL-TEST::NEW-INCF2 (AREF CL-TEST::A (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::A CL-TEST::I)))))
Expected value:
          CL-TEST::NEW-INCF2
          (3 #(0 0 3 0 0) 3)
Actual value:
          #<System.Eval::Interpreted-Function (MACRO-FUNCTION CL-TEST::NEW-INCF2) 3DDC2AC> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFINE-MODIFY-MACRO.ERROR.1
 CL-TEST::DEFINE-MODIFY-MACRO.DOCUMENTATION.1
 CL-TEST::DEFINE-MODIFY-MACRO.DOCUMENTATION.2
 CL-TEST::DEFPARAMETER.1
 CL-TEST::DEFPARAMETER.2
 CL-TEST::DEFPARAMETER.3
Test CL-TEST::DEFPARAMETER.4 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "Whatever."
          200
Actual value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPARAMETER.5 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2* (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 300 "And ever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "Whatever."
          200
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "And ever."
          300
Actual value:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFPARAMETER.ERROR.1
 CL-TEST::DEFPARAMETER.ERROR.2
 CL-TEST::DEFPARAMETER.ERROR.3
 CL-TEST::DEFUN.1
 CL-TEST::DEFUN.2
Test CL-TEST::DEFUN.3 failed
Form: (CL-TEST::DEFUN-TEST-FUN-3)
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          CL-TEST::A [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFUN.4
 CL-TEST::DEFUN.5
 CL-TEST::DEFUN.6
 CL-TEST::DEFUN.7
 CL-TEST::DEFUN.8
 CL-TEST::DEFUN.ERROR.1
 CL-TEST::DEFUN.ERROR.2
 CL-TEST::DEFUN.ERROR.3
Test CL-TEST::DEFUN.ERROR.4 failed
Form: (LET* ((CL-TEST::NAME (GENSYM))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW (MIN 100 LAMBDA-PARAMETERS-LIMIT) CL-TEST::FOR CL-TEST::PARAMS = NIL CL-TEST::THEN (CONS (GENSYM) CL-TEST::PARAMS) CL-TEST::FOR CL-TEST::ARGS = NIL CL-TEST::THEN (CONS NIL CL-TEST::ARGS) CL-TEST::FOR CL-TEST::EXPECTED = (QUOTE (1 2 3)) CL-TEST::FOR CL-TEST::FN = (EVAL (SYSTEM.INTERNALS::BACKQUOTE (PROG2 (PROCLAIM (QUOTE (OPTIMIZE (SAFETY 0)))) (DEFUN (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::PARAMS) (VALUES (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::EXPECTED))) (PROCLAIM (QUOTE (OPTIMIZE SAFETY)))))) WHEN (COND ((NOT (EQUAL (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN CL-TEST::ARGS)) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL1)) ((NOT (EQUAL (MULTIPLE-VALUE-LIST (APPLY (SYMBOL-FUNCTION CL-TEST::FN) CL-TEST::ARGS)) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL2)) ((NOT (EQUAL (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::ARGS))))) CL-TEST::EXPECTED)) (LIST CL-TEST::I :FAIL3)) ((AND (> CL-TEST::I 0) (LET ((CL-TEST::VAL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (CDR CL-TEST::ARGS))) PROGRAM-ERROR))))) (AND (NOT (EQ CL-TEST::VAL T)) :FAIL4)))) ((AND (< CL-TEST::I (1- CALL-ARGUMENTS-LIMIT)) (LET ((CL-TEST::VAL (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::ARGS)) PROGRAM-ERROR))))) (AND (NOT (EQ CL-TEST::VAL T)) :FAIL5))))) CL-TEST::COLLECT CL-TEST::IT))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFVAR.1
 CL-TEST::DEFVAR.2
 CL-TEST::DEFVAR.3
Test CL-TEST::DEFVAR.4 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*)) (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2*)
Expected value:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "Whatever."
          200
Actual value:
          CL-TEST::*DEFVAR-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFVAR.5 failed
Form: (LET ((CL-TEST::X 0)) (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*)) (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2* (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* (INCF CL-TEST::X) "And ever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2* CL-TEST::X))
Expected value:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "Whatever."
          200
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "And ever."
          200
          0
Actual value:
          CL-TEST::*DEFVAR-TEST-VAR-2* [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFVAR.ERROR.1
 CL-TEST::DEFVAR.ERROR.2
 CL-TEST::DEFVAR.ERROR.3
 CL-TEST::DESTRUCTURING-BIND.1
 CL-TEST::DESTRUCTURING-BIND.2
 CL-TEST::DESTRUCTURING-BIND.3
 CL-TEST::DESTRUCTURING-BIND.4
 CL-TEST::DESTRUCTURING-BIND.5
 CL-TEST::DESTRUCTURING-BIND.6
 CL-TEST::DESTRUCTURING-BIND.7
 CL-TEST::DESTRUCTURING-BIND.7A
 CL-TEST::DESTRUCTURING-BIND.8
 CL-TEST::DESTRUCTURING-BIND.9
 CL-TEST::DESTRUCTURING-BIND.10
 CL-TEST::DESTRUCTURING-BIND.11
 CL-TEST::DESTRUCTURING-BIND.12
 CL-TEST::DESTRUCTURING-BIND.12A
 CL-TEST::DESTRUCTURING-BIND.13
 CL-TEST::DESTRUCTURING-BIND.14
 CL-TEST::DESTRUCTURING-BIND.15
 CL-TEST::DESTRUCTURING-BIND.16
 CL-TEST::DESTRUCTURING-BIND.17
 CL-TEST::DESTRUCTURING-BIND.17A
 CL-TEST::DESTRUCTURING-BIND.17C
 CL-TEST::DESTRUCTURING-BIND.18
 CL-TEST::DESTRUCTURING-BIND.19
Test CL-TEST::DESTRUCTURING-BIND.20 failed
Form: (DESTRUCTURING-BIND (&WHOLE (CL-TEST::A . CL-TEST::B) CL-TEST::C . CL-TEST::D) (QUOTE (1 . 2)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))
Expected value:
          (1 2 1 2)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::NAME is (CL-TEST::A . CL-TEST::B), which is not of type SYMBOL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::DESTRUCTURING-BIND.21
 CL-TEST::DESTRUCTURING-BIND.22
 CL-TEST::DESTRUCTURING-BIND.23
 CL-TEST::DESTRUCTURING-BIND.24
 CL-TEST::DESTRUCTURING-BIND.25
 CL-TEST::DESTRUCTURING-BIND.26
 CL-TEST::DESTRUCTURING-BIND.27
 CL-TEST::DESTRUCTURING-BIND.28
 CL-TEST::DESTRUCTURING-BIND.29
 CL-TEST::DESTRUCTURING-BIND.30
 CL-TEST::DESTRUCTURING-BIND.31
 CL-TEST::DESTRUCTURING-BIND.ERROR.7
 CL-TEST::DESTRUCTURING-BIND.ERROR.8
 CL-TEST::DESTRUCTURING-BIND.ERROR.9
 CL-TEST::ECASE.1
Test CL-TEST::ECASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (CL-TEST::C CL-TEST::B CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (T NIL)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (T)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (OTHERWISE NIL)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (OTHERWISE)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.6
 CL-TEST::ECASE.7
Test CL-TEST::ECASE.8 failed
Form: (ECASE (1+ MOST-POSITIVE-FIXNUM) (1152921504606846976 (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error 1152921504606846976 fell through ECASE expression. Wanted one of (1152921504606846976)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X NIL (ECASE CL-TEST::X (NIL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Simple-Error NIL fell through ECASE expression. Wanted one of NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.10
 CL-TEST::ECASE.11
Test CL-TEST::ECASE.12 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (ECASE CL-TEST::X (CL-TEST::A 10)))
Expected value:
          T
Actual value:
          #<Simple-Error T fell through ECASE expression. Wanted one of (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.13
 CL-TEST::ECASE.14
Test CL-TEST::ECASE.15 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE OTHERWISE) (ECASE CL-TEST::X ((T) 10)))
Expected value:
          T
Actual value:
          #<Simple-Error OTHERWISE fell through ECASE expression. Wanted one of (T)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.16 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (ECASE CL-TEST::X ((OTHERWISE) 10)))
Expected value:
          T
Actual value:
          #<Simple-Error T fell through ECASE expression. Wanted one of (OTHERWISE)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.17 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) (OTHERWISE 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (OTHERWISE CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.18 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((OTHERWISE) 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (OTHERWISE CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ECASE.19 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((T) 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (T CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.20
 CL-TEST::ECASE.21
 CL-TEST::ECASE.23
 CL-TEST::ECASE.25
 CL-TEST::ECASE.26
 CL-TEST::ECASE.27
 CL-TEST::ECASE.28
 CL-TEST::ECASE.29
 CL-TEST::ECASE.31
Test CL-TEST::ECASE.32 failed
Form: (ECASE (QUOTE CL-TEST::A) (CL-TEST::A) (CL-TEST::B (QUOTE CL-TEST::B)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
 CL-TEST::ECASE.33
 CL-TEST::ECASE.34
 CL-TEST::ECASE.ERROR.1
 CL-TEST::ECASE.ERROR.2
 CL-TEST::ECASE.ERROR.3
 CL-TEST::EQL.1
 CL-TEST::EQL.2
 CL-TEST::EQL.3
 CL-TEST::EQL.4
Test CL-TEST::EQL.5 failed
Form: (CL-TEST::EQLT 12345678901234567890 12345678901234567890)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.7
Test CL-TEST::EQL.8 failed
Form: (CL-TEST::EQLT #C(1 -2) #C(1 -2))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.9
 CL-TEST::EQL.10
Test CL-TEST::EQL.11 failed
Form: (CL-TEST::EQLT #C(1 -2) (- #C(-1 2)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQL.ORDER.1
 CL-TEST::EQL.ERROR.1
 CL-TEST::EQL.ERROR.2
 CL-TEST::EQL.ERROR.3
 CL-TEST::EQ.ERROR.1
 CL-TEST::EQ.ERROR.2
 CL-TEST::EQ.ERROR.3
 CL-TEST::EQUAL.1
 CL-TEST::EQUAL.2
 CL-TEST::EQUAL.3
 CL-TEST::EQUAL.4
 CL-TEST::EQUAL.5
 CL-TEST::EQUAL.6
 CL-TEST::EQUAL.7
 CL-TEST::EQUAL.8
 CL-TEST::EQUAL.9
 CL-TEST::EQUAL.10
Test CL-TEST::EQUAL.11 failed
Form: (CL-TEST::EQUALT (COPY-SEQ #*000110) (COPY-SEQ #*000110))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUAL.12
 CL-TEST::EQUAL.15
 CL-TEST::EQUAL.16
 CL-TEST::EQUAL.17
Test CL-TEST::EQUAL.18 failed
Form: (LET ((CL-TEST::B (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*0110001110 :FILL-POINTER 5))) (VALUES (CL-TEST::EQUALT #*01100 CL-TEST::B) (CL-TEST::EQUALT #*01100 CL-TEST::B)))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUAL.19
 CL-TEST::EQUAL.ORDER.1
 CL-TEST::EQUAL.ERROR.1
 CL-TEST::EQUAL.ERROR.2
 CL-TEST::EQUAL.ERROR.3
 CL-TEST::EQUALP.1
 CL-TEST::EQUALP.2
 CL-TEST::EQUALP.3
 CL-TEST::EQUALP.4
Test CL-TEST::EQUALP.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::VAL = (RANDOM CL-TEST::BOUND) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY NIL :INITIAL-ELEMENT CL-TEST::VAL :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY NIL :INITIAL-ELEMENT CL-TEST::VAL) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VAL))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::N = (1+ (RANDOM 20)) CL-TEST::FOR CL-TEST::VALS = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (RANDOM CL-TEST::BOUND)) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VALS))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.9 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::N = (1+ (RANDOM 20)) CL-TEST::FOR CL-TEST::VALS = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (- (RANDOM CL-TEST::BOUND) (/ CL-TEST::BOUND 2))) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VALS))
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.10
 CL-TEST::EQUALP.11
 CL-TEST::EQUALP.12
 CL-TEST::EQUALP.13
 CL-TEST::EQUALP.14
 CL-TEST::EQUALP.15
 CL-TEST::EQUALP.16
Test CL-TEST::EQUALP.17 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW 8192 CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0S0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0F0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0F0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0D0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0D0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.20 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I = (- (RANDOM 10000000) 5000000) CL-TEST::FOR CL-TEST::F = (FLOAT CL-TEST::I CL-TEST::1.0L0) CL-TEST::REPEAT 1000 UNLESS (EQUALP CL-TEST::I CL-TEST::F) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::F))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::1.0L0> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.21
 CL-TEST::EQUALP.22
 CL-TEST::EQUALP.23
 CL-TEST::EQUALP.24
 CL-TEST::EQUALP.25
 CL-TEST::EQUALP.26
 CL-TEST::EQUALP.27
 CL-TEST::EQUALP.28
 CL-TEST::EQUALP.29
 CL-TEST::EQUALP.30
 CL-TEST::EQUALP.31
Test CL-TEST::EQUALP.32 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH #\a CL-TEST::HT1) T) (SETF (GETHASH #\A CL-TEST::HT2) T) (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          T
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.33 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH #\a CL-TEST::HT1) "a") (SETF (GETHASH #\a CL-TEST::HT2) "A") (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          T
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.34 failed
Form: (LET ((CL-TEST::HT1 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))) (CL-TEST::HT2 (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP)))) (SETF (GETHASH (QUOTE #:A) CL-TEST::HT1) T) (SETF (GETHASH (QUOTE #:A) CL-TEST::HT2) T) (CL-TEST::EQUALPT CL-TEST::HT1 CL-TEST::HT2))
Expected value:
          NIL
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EQUALP.35 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TEST CL-TEST::IN (QUOTE (EQ EQL EQUAL EQUALP)) CL-TEST::COLLECT (FLET ((CL-TEST::%MAKE-TABLE NIL (APPLY (FUNCTION MAKE-HASH-TABLE) :TEST CL-TEST::TEST (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :SIZE (RANDOM 100)))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :REHASH-SIZE (1+ (RANDOM 50))))) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :REHASH-THRESHOLD (RANDOM 1.0))))))))) (LOOP CL-TEST::REPEAT 200 COUNT (LET ((CL-TEST::HT1 (CL-TEST::%MAKE-TABLE)) (CL-TEST::HT2 (CL-TEST::%MAKE-TABLE)) (CL-TEST::PAIRS (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW (RANDOM 100) CL-TEST::COLLECT (CONS (GENSYM) CL-TEST::I)))) (LOOP CL-TEST::FOR (CL-TEST::K . CL-TEST::V) CL-TEST::IN CL-TEST::PAIRS DO (SETF (GETHASH CL-TEST::K CL-TEST::HT1) CL-TEST::V)) (SETF CL-TEST::PAIRS (CL-TEST:RANDOM-PERMUTE CL-TEST::PAIRS)) (LOOP CL-TEST::FOR (CL-TEST::K . CL-TEST::V) CL-TEST::IN CL-TEST::PAIRS DO (SETF (GETHASH CL-TEST::K CL-TEST::HT2) CL-TEST::V)) (NOT (EQUALP CL-TEST::HT1 CL-TEST::HT2))))))
Expected value:
          (0 0 0 0)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EQUALP.ORDER.1
 CL-TEST::EQUALP.ERROR.1
 CL-TEST::EQUALP.ERROR.2
 CL-TEST::EQUALP.ERROR.3
 CL-TEST::ETYPECASE.1
Test CL-TEST::ETYPECASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ETYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.3
 CL-TEST::ETYPECASE.4
 CL-TEST::ETYPECASE.5
 CL-TEST::ETYPECASE.6
 CL-TEST::ETYPECASE.7
 CL-TEST::ETYPECASE.8
 CL-TEST::ETYPECASE.9
 CL-TEST::ETYPECASE.10
Test CL-TEST::ETYPECASE.11 failed
Form: (ETYPECASE 1 (INTEGER) (T (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::ETYPECASE.12 failed
Form: (ETYPECASE (QUOTE CL-TEST::A) (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL 800B3CC7> (QUOTE CL-TEST::GOOD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Type-Error 81CEC6E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.13
 CL-TEST::ETYPECASE.14
Test CL-TEST::ETYPECASE.15 failed
Form: (LET* ((CL-TEST::U (COERCE CL-TEST:*UNIVERSE* (QUOTE VECTOR))) (CL-TEST::LEN1 (LENGTH CL-TEST::U)) (CL-TEST::TYPES (COERCE CL-TEST::*CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (CL-TEST::LEN2 (LENGTH CL-TEST::TYPES))) (LOOP CL-TEST::FOR CL-TEST::N = (RANDOM 10) CL-TEST::FOR CL-TEST::MY-TYPES = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (ELT CL-TEST::TYPES (RANDOM CL-TEST::LEN2))) CL-TEST::FOR CL-TEST::VAL = (ELT CL-TEST::U (RANDOM CL-TEST::LEN1)) CL-TEST::FOR CL-TEST::I = (POSITION CL-TEST::VAL CL-TEST::MY-TYPES :TEST (FUNCTION TYPEP)) CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (LAMBDA (CL-TEST::X) (CL-TEST::HANDLER-CASE (ETYPECASE CL-TEST::X (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::FOR TYPE CL-TEST::IN CL-TEST::MY-TYPES CL-TEST::COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I)))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (EQL CL-TEST::X (TYPE-ERROR-DATUM CL-TEST::C))) (LET* ((CL-TEST::EXPECTED (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C))) (LET ((CL-TEST::EQUIV (CL-TEST::CHECK-EQUIVALENCE CL-TEST::EXPECTED (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (CONS (QUOTE OR) CL-TEST::MY-TYPES)))))) (ASSERT (NULL CL-TEST::EQUIV) NIL "EQUIV = ~A" CL-TEST::EQUIV))) NIL))))) CL-TEST::FOR CL-TEST::J = (FUNCALL (EVAL CL-TEST::FORM) CL-TEST::VAL) CL-TEST::REPEAT 200 UNLESS (EQL CL-TEST::I CL-TEST::J) CL-TEST::COLLECT (LIST CL-TEST::N CL-TEST::MY-TYPES CL-TEST::VAL CL-TEST::I CL-TEST::FORM CL-TEST::J)))
Expected value:
          NIL
Actual value:
          #<Simple-Error #<Error 80BBB8F7> fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ETYPECASE.16
 CL-TEST::ETYPECASE.17
 CL-TEST::ETYPECASE.ERROR.1
 CL-TEST::ETYPECASE.ERROR.2
 CL-TEST::ETYPECASE.ERROR.3
 CL-TEST::EVERY.1
 CL-TEST::EVERY.2
 CL-TEST::EVERY.3
 CL-TEST::EVERY.4
 CL-TEST::EVERY.5
 CL-TEST::EVERY.6
 CL-TEST::EVERY.7
 CL-TEST::EVERY.8
 CL-TEST::EVERY.9
 CL-TEST::EVERY.10
 CL-TEST::EVERY.11
 CL-TEST::EVERY.12
 CL-TEST::EVERY.13
 CL-TEST::EVERY.14
 CL-TEST::EVERY.15
 CL-TEST::EVERY.16
 CL-TEST::EVERY.17
Test CL-TEST::EVERY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 1 1 1 1 1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (EVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (EVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.20
 CL-TEST::EVERY.21
 CL-TEST::EVERY.22
 CL-TEST::EVERY.23
Test CL-TEST::EVERY.24 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (EVERY (QUOTE EVENP) CL-TEST::V1)) (EVERY (FUNCTION EVENP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.25 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (EVERY (QUOTE EVENP) CL-TEST::V1)) (EVERY (FUNCTION EVENP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.26
 CL-TEST::EVERY.27
 CL-TEST::EVERY.28
 CL-TEST::EVERY.29
Test CL-TEST::EVERY.30 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.31 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 -1)))) UNLESS (EVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.32 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION COMPLEXP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 21 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.ORDER.1
 CL-TEST::EVERY.ORDER.2Space
 CL-TEST::EVERY.ERROR.1
Test CL-TEST::EVERY.ERROR.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (EVERY (FUNCTION NULL) CL-TEST::X))) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE SEQUENCE)))))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EVERY.ERROR.3 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (EVERY (FUNCTION EQ) NIL CL-TEST::X))) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE SEQUENCE)))))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::EVERY.ERROR.8
 CL-TEST::EVERY.ERROR.9
 CL-TEST::EVERY.ERROR.10
 CL-TEST::EVERY.ERROR.11
 CL-TEST::EVERY.ERROR.12
 CL-TEST::EVERY.ERROR.13
 CL-TEST::EVERY.ERROR.14
 CL-TEST::FBOUNDP.1
 CL-TEST::FBOUNDP.2
 CL-TEST::FBOUNDP.3
 CL-TEST::FBOUNDP.4
 CL-TEST::FBOUNDP.5
 CL-TEST::FBOUNDP.6
 CL-TEST::FBOUNDP.7
Test CL-TEST::FBOUNDP.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* WHEN (AND (FBOUNDP CL-TEST::X) (NOT (EQ CL-TEST::X (QUOTE ED)))) CL-TEST::COLLECT CL-TEST::X)
Expected value:
          NIL
Actual value:
          (STRUCTURE-CLASS) [Actual value: #<error during printing>

 NIL
 CL-TEST::FBOUNDP.ORDER.1
Test CL-TEST::FBOUNDP.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FBOUNDP) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (CL-TEST::X)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (CL-TEST::X).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF CL-TEST::FOO . CL-TEST::BAR)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH (SETF CL-TEST::FOO . CL-TEST::BAR) CL-TEST::BAR) [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF CL-TEST::FOO CL-TEST::BAR)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (SETF CL-TEST::FOO CL-TEST::BAR).> [Actual value: #<error during printing>

 NIL
 CL-TEST::FBOUNDP.ERROR.6
 CL-TEST::FBOUNDP.ERROR.7
Test CL-TEST::FBOUNDP.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FBOUNDP 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 1.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF . CL-TEST::FOO)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH (SETF . CL-TEST::FOO) CL-TEST::FOO) [Actual value: #<error during printing>

 NIL
Test CL-TEST::FBOUNDP.ERROR.10 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FBOUNDP (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C042DDB7> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C042DDB7>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C047A8B7> #<Simple-Error Invalid function name (SETF #<Hash-Table C047A8B7>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C00025C7> #<Simple-Error Invalid function name (SETF #<Readtable C00025C7>).>) (#<Cl-Test::Foo-Structure C0478557> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C0478557>).>) (#<Function CONS 288ECC> #<Simple-Error Invalid function name (SETF #<Function CONS 288ECC>).>) (#<Random-State C0479937> #<Simple-Error Invalid function name (SETF #<Random-State C0479937>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0006157> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0006157>).>)) [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.ERROR.1
 CL-TEST::FDEFINITION.ERROR.2
 CL-TEST::FDEFINITION.ERROR.3
Test CL-TEST::FDEFINITION.ERROR.4 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FDEFINITION 10) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 10.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . CL-TEST::FOO) (SETF CL-TEST::FOO . CL-TEST::BAR) (SETF CL-TEST::FOO CL-TEST::BAR))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FDEFINITION.ERROR.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C042DDB7> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C042DDB7>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C047A8B7> #<Simple-Error Invalid function name (SETF #<Hash-Table C047A8B7>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C00025C7> #<Simple-Error Invalid function name (SETF #<Readtable C00025C7>).>) (#<Cl-Test::Foo-Structure C0478557> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C0478557>).>) (#<Function CONS 288ECC> #<Simple-Error Invalid function name (SETF #<Function CONS 288ECC>).>) (#<Random-State C0479937> #<Simple-Error Invalid function name (SETF #<Random-State C0479937>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0006157> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0006157>).>)) [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.1
 CL-TEST::FDEFINITION.2
Test CL-TEST::FDEFINITION.3 failed
Form: (PROGN (FDEFINITION (QUOTE SETQ)) :GOOD)
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function SETQ> [Actual value: #<error during printing>

 NIL
 CL-TEST::FDEFINITION.4
 CL-TEST::FDEFINITION.5
Test CL-TEST::FDEFINITION.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (FDEFINITION (PROGN (INCF CL-TEST::I) (QUOTE SETQ))) CL-TEST::I)
Expected value:
          1
Actual value:
          #<Undefined-Function SETQ> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.1
 CL-TEST::FLET.2
 CL-TEST::FLET.3
 CL-TEST::FLET.4
 CL-TEST::FLET.4A
 CL-TEST::FLET.5
 CL-TEST::FLET.6
 CL-TEST::FLET.7
 CL-TEST::FLET.8
 CL-TEST::FLET.9
 CL-TEST::FLET.10
 CL-TEST::FLET.11
Test CL-TEST::FLET.12 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :C 4)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.13 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.14 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.15 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F 1 2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.16 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A) CL-TEST::A)) (CL-TEST::%F (QUOTE (CL-TEST::FOO)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.17 failed
Form: (FLET (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (LET ((CL-TEST::Z (LIST 1 2))) (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::A)) CL-TEST::Z))
Expected value:
          (CL-TEST::A 2)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.18
 CL-TEST::FLET.19
Test CL-TEST::FLET.20 failed
Form: (LET* ((CL-TEST::N (MIN (1- LAMBDA-PARAMETERS-LIMIT) 1024)) (CL-TEST::VARS (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (GENSYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::EQLT (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) (FLET ((CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (+ (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::VARS)))) (CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::VARS CL-TEST::COLLECT 1))))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.21
 CL-TEST::FLET.22
 CL-TEST::FLET.23
 CL-TEST::FLET.24
 CL-TEST::FLET.25
Test CL-TEST::FLET.26 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :WHATEVER NIL :ALLOW-OTHER-KEYS T) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ILLEGAL T :FOO (QUOTE CL-TEST::Z) :ALLOW-OTHER-KEYS T)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:FOO CL-TEST::H :WHATEVER NIL :ALLOW-OTHER-KEYS T) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:BAR CL-TEST::I :ILLEGAL T :FOO CL-TEST::Z :ALLOW-OTHER-KEYS T) CL-TEST::Z CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :WHATEVER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.27 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :ALLOW-OTHER-KEYS NIL) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ALLOW-OTHER-KEYS NIL)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:FOO CL-TEST::H :ALLOW-OTHER-KEYS NIL) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:BAR CL-TEST::I :ALLOW-OTHER-KEYS NIL) NIL CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.28 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR CL-TEST::ALLOW-OTHER-KEYS) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::ALLOW-OTHER-KEYS CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :WHATEVER NIL :ALLOW-OTHER-KEYS 100) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ILLEGAL T :FOO (QUOTE CL-TEST::Z) :ALLOW-OTHER-KEYS 200)))
Expected value:
          (10 1 NIL 2 NIL NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T 100 (:FOO CL-TEST::H :WHATEVER NIL :ALLOW-OTHER-KEYS 100) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T 200 (:BAR CL-TEST::I :ILLEGAL T :FOO CL-TEST::Z :ALLOW-OTHER-KEYS 200) CL-TEST::Z CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :WHATEVER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.29
 CL-TEST::FLET.30
 CL-TEST::FLET.31
 CL-TEST::FLET.32
 CL-TEST::FLET.33
 CL-TEST::FLET.34
Test CL-TEST::FLET.35 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G (QUOTE CL-TEST::GOOD)))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.36 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&AUX (CL-TEST::X (QUOTE CL-TEST::GOOD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.37 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&REST CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G (QUOTE CL-TEST::GOOD)))))
Expected value:
          (CL-TEST::GOOD)
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.38 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&KEY (CL-TEST::X (QUOTE CL-TEST::GOOD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.39 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (FLET ((CL-TEST::%G (&KEY (CL-TEST::X (QUOTE CL-TEST::BAD))) (DECLARE (SPECIAL CL-TEST::X)) (CL-TEST::%F))) (CL-TEST::%G :X (QUOTE CL-TEST::GOOD)))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.40
 CL-TEST::FLET.45
 CL-TEST::FLET.46
 CL-TEST::FLET.47
 CL-TEST::FLET.48
 CL-TEST::FLET.49
 CL-TEST::FLET.50
Test CL-TEST::FLET.51 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (FLET (((SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) (&REST CL-TEST::ARGS) (DECLARE (IGNORE CL-TEST::ARGS)) (QUOTE CL-TEST::A))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) 10)))) UNLESS (EQ (EVAL CL-TEST::FORM) (QUOTE CL-TEST::A)) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (WARNING VARIABLE UNSIGNED-BYTE UNDEFINED-FUNCTION UNBOUND-VARIABLE UNBOUND-SLOT TYPE-ERROR TYPE TWO-WAY-STREAM T SYNONYM-STREAM SYMBOL STYLE-WARNING STRUCTURE-OBJECT STRUCTURE-CLASS STRUCTURE STRING-STREAM STREAM-ERROR STREAM STORAGE-CONDITION STANDARD-OBJECT STANDARD-METHOD STANDARD-GENERIC-FUNCTION STANDARD-CLASS STANDARD-CHAR STANDARD SPEED SPECIAL SPACE SINGLE-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT SIMPLE-WARNING SIMPLE-VECTOR SIMPLE-TYPE-ERROR SIMPLE-STRING SIMPLE-ERROR SIMPLE-CONDITION SIMPLE-BIT-VECTOR SIMPLE-BASE-STRING SIMPLE-ARRAY SIGNED-BYTE SHORT-FLOAT-NEGATIVE-EPSILON SHORT-FLOAT-EPSILON SHORT-FLOAT SERIOUS-CONDITION SEQUENCE SATISFIES SAFETY RESTART REAL READTABLE READER-ERROR RATIO RANDOM-STATE PROGRAM-ERROR PRINT-NOT-READABLE PI PARSE-ERROR PACKAGE-ERROR PACKAGE OTHERWISE OPTIMIZE NUMBER NOTINLINE NIL MULTIPLE-VALUES-LIMIT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-LONG-FLOAT MOST-POSITIVE-FIXNUM MOST-POSITIVE-DOUBLE-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-LONG-FLOAT MOST-NEGATIVE-FIXNUM MOST-NEGATIVE-DOUBLE-FLOAT METHOD-COMBINATION METHOD LONG-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-EPSILON LONG-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LAMBDA-PARAMETERS-LIMIT LAMBDA-LIST-KEYWORDS KEYWORD INTERNAL-TIME-UNITS-PER-SECOND INTEGER INLINE IGNORE IGNORABLE HASH-TABLE GENERIC-FUNCTION FTYPE FLOATING-POINT-UNDERFLOW FLOATING-POINT-OVERFLOW FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-INEXACT FIXNUM FILE-STREAM FILE-ERROR EXTENDED-CHAR END-OF-FILE ECHO-STREAM DYNAMIC-EXTENT DOUBLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT DIVISION-BY-ZERO DECLARATION DEBUG CONTROL-ERROR CONDITION CONCATENATED-STREAM COMPILER-MACRO COMPILED-FUNCTION COMPILATION-SPEED CLASS CHAR-CODE-LIMIT CELL-ERROR CALL-ARGUMENTS-LIMIT BUILT-IN-CLASS BROADCAST-STREAM BOOLEAN BOOLE-XOR BOOLE-SET BOOLE-ORC2 BOOLE-ORC1 BOOLE-NOR BOOLE-NAND BOOLE-IOR BOOLE-EQV BOOLE-CLR BOOLE-C2 BOOLE-C1 BOOLE-ANDC2 BOOLE-ANDC1 BOOLE-AND BOOLE-2 BOOLE-1 BIT-VECTOR BIGNUM BASE-STRING BASE-CHAR ARRAY-TOTAL-SIZE-LIMIT ARRAY-RANK-LIMIT ARRAY-DIMENSION-LIMIT ARRAY ARITHMETIC-ERROR /// // +++ ++ *TRACE-OUTPUT* *TERMINAL-IO* *STANDARD-OUTPUT* *STANDARD-INPUT* *READTABLE* *READ-SUPPRESS* *READ-EVAL* *READ-DEFAULT-FLOAT-FORMAT* *READ-BASE* *RANDOM-STATE* *QUERY-IO* *PRINT-RIGHT-MARGIN* *PRINT-READABLY* *PRINT-RADIX* *PRINT-PRETTY* *PRINT-PPRINT-DISPATCH* *PRINT-MISER-WIDTH* *PRINT-LINES* *PRINT-LEVEL* *PRINT-LENGTH* *PRINT-GENSYM* *PRINT-ESCAPE* *PRINT-CIRCLE* *PRINT-CASE* *PRINT-BASE* *PRINT-ARRAY* *PACKAGE* *MODULES* *MACROEXPAND-HOOK* *LOAD-VERBOSE* *LOAD-TRUENAME* *LOAD-PRINT* *LOAD-PATHNAME* *GENSYM-COUNTER* *FEATURES* *ERROR-OUTPUT* *DEFAULT-PATHNAME-DEFAULTS* *DEBUGGER-HOOK* *DEBUG-IO* *COMPILE-VERBOSE* *COMPILE-PRINT* *COMPILE-FILE-TRUENAME* *COMPILE-FILE-PATHNAME* *BREAK-ON-SIGNALS* *** ** &WHOLE &REST &OPTIONAL &KEY &ENVIRONMENT &BODY &AUX &ALLOW-OTHER-KEYS) [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.52
 CL-TEST::FLET.53
 CL-TEST::FLET.54
 CL-TEST::FLET.55
 CL-TEST::FLET.56
Test CL-TEST::FLET.57 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.58 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FLET.59 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T :A 1 :B 2))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.60
Test CL-TEST::FLET.61 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY) :BAD)) (CL-TEST::%F NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.62
 CL-TEST::FLET.63
 CL-TEST::FLET.64
 CL-TEST::FLET.65
 CL-TEST::FLET.66
 CL-TEST::FLET.67
 CL-TEST::FLET.68
 CL-TEST::FLET.69
 CL-TEST::FLET.70
 CL-TEST::FLET.71
 CL-TEST::FLET.72
Test CL-TEST::FLET.73 failed
Form: (FLET ((CL-TEST::FLET.73 NIL :GOOD)) (CL-TEST::FLET.73))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::FLET.74
 CL-TEST::FMAKUNBOUND.1
 CL-TEST::FMAKUNBOUND.2
 CL-TEST::FMAKUNBOUND.3
 CL-TEST::FMAKUNBOUND.4
Test CL-TEST::FMAKUNBOUND.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . CL-TEST::FOO) (SETF CL-TEST::FOO . CL-TEST::BAR) (SETF CL-TEST::FOO CL-TEST::BAR))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (CL-TEST::X)) (FMAKUNBOUND CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (CL-TEST::X).> [Actual value: #<error during printing>

 NIL
 CL-TEST::FMAKUNBOUND.ERROR.4
 CL-TEST::FMAKUNBOUND.ERROR.5
Test CL-TEST::FMAKUNBOUND.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FMAKUNBOUND 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 1.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FMAKUNBOUND.ERROR.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FMAKUNBOUND (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error C059A1B7> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error C059A1B7>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table C05A04A7> #<Simple-Error Invalid function name (SETF #<Hash-Table C05A04A7>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Synonym-Stream for *TERMINAL-IO*> #<Simple-Error Invalid function name (SETF #<Synonym-Stream for *TERMINAL-IO*>).>) (#<Readtable C0002607> #<Simple-Error Invalid function name (SETF #<Readtable C0002607>).>) (#<Cl-Test::Foo-Structure C059E317> #<Simple-Error Invalid function name (SETF #<Cl-Test::Foo-Structure C059E317>).>) (#<Function CONS 288ECC> #<Simple-Error Invalid function name (SETF #<Function CONS 288ECC>).>) (#<Random-State C059F607> #<Simple-Error Invalid function name (SETF #<Random-State C059F607>).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C059C1D7> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C059C1D7>).>)) [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCALL.1
 CL-TEST::FUNCALL.2
 CL-TEST::FUNCALL.3
 CL-TEST::FUNCALL.4
 CL-TEST::FUNCALL.5
 CL-TEST::FUNCALL.6
 CL-TEST::FUNCALL.7
 CL-TEST::FUNCALL.8
 CL-TEST::FUNCALL.9
 CL-TEST::FUNCALL.ORDER.1
 CL-TEST::FUNCALL.ORDER.2
 CL-TEST::FUNCALL.ERROR.1
 CL-TEST::FUNCALL.ERROR.2
 CL-TEST::FUNCALL.ERROR.3
 CL-TEST::FUNCALL.ERROR.4
 CL-TEST::FUNCALL.ERROR.5
 CL-TEST::FUNCALL.ERROR.6
 CL-TEST::FUNCALL.ERROR.7
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.2
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.3
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ORDER.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ERROR.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ERROR.2
 CL-TEST::FUNCTION.1
 CL-TEST::FUNCTION.2
 CL-TEST::FUNCTION.3
 CL-TEST::FUNCTION.4
 CL-TEST::FUNCTION.5
 CL-TEST::FUNCTION.6
 CL-TEST::FUNCTION.7
 CL-TEST::FUNCTION.8
 CL-TEST::FUNCTION.9
 CL-TEST::FUNCTION.10
 CL-TEST::FUNCTION.11
 CL-TEST::FUNCTION.12
 CL-TEST::FUNCTION.13
 CL-TEST::FUNCTION.14
 CL-TEST::FUNCTION.15
 CL-TEST::FUNCTION.16
Test CL-TEST::FUNCTION.17 failed
Form: (FLET ((CL-TEST::%F (&OPTIONAL CL-TEST::X) CL-TEST::X)) (DECLARE (FTYPE (FUNCTION (&OPTIONAL INTEGER) T) CL-TEST::%F)) (VALUES (CL-TEST::%F) (CL-TEST::%F 10) (CL-TEST::%F) (CL-TEST::%F (1+ MOST-POSITIVE-FIXNUM))))
Expected value:
          NIL
          10
          NIL
          1152921504606846976
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCTION.18
 CL-TEST::FUNCTION.19
Test CL-TEST::FUNCTION.20 failed
Form: (FLET ((CL-TEST::%F (&KEY CL-TEST::FOO) CL-TEST::FOO)) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO T) (:ALLOW-OTHER-KEYS T)) T) CL-TEST::%F)) (VALUES (CL-TEST::%F) (CL-TEST::%F :FOO (QUOTE CL-TEST::A)) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL) (CL-TEST::%F :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::Z))))
Expected value:
          NIL
          CL-TEST::A
          NIL
          CL-TEST::Z
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FUNCTION.21
 CL-TEST::FUNCTION.22
 CL-TEST::FUNCTION.23
 CL-TEST::FUNCTION.24
 CL-TEST::FUNCTIONP.1
 CL-TEST::FUNCTIONP.2
 CL-TEST::FUNCTIONP.3
 CL-TEST::FUNCTIONP.4
 CL-TEST::FUNCTIONP.5
 CL-TEST::FUNCTIONP.6
 CL-TEST::FUNCTIONP.7
 CL-TEST::FUNCTIONP.8
 CL-TEST::FUNCTIONP.9
 CL-TEST::FUNCTIONP.10
 CL-TEST::FUNCTIONP.11
 CL-TEST::FUNCTIONP.12
 CL-TEST::FUNCTIONP.ORDER.1
 CL-TEST::FUNCTIONP.ERROR.1
 CL-TEST::FUNCTIONP.ERROR.2
 CL-TEST::GET-SETF-EXPANSION.ERROR.1
 CL-TEST::GET-SETF-EXPANSION.ERROR.2
Test CL-TEST::GET-SETF-EXPANSION.1 failed
Form: (LET* ((CL-TEST::FN (GENSYM)) (CL-TEST::VALS (MULTIPLE-VALUE-LIST (GET-SETF-EXPANSION (LIST CL-TEST::FN))))) (VALUES (LENGTH CL-TEST::VALS) (FIRST CL-TEST::VALS) (SECOND CL-TEST::VALS) (LENGTH (THIRD CL-TEST::VALS)) (BLOCK CL-TEST::DONE (SUBST-IF NIL (FUNCTION (LAMBDA (CL-TEST::TERM) (WHEN (EQUAL CL-TEST::TERM (SYSTEM.INTERNALS::BACKQUOTE (FUNCTION (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::FN))))) (RETURN-FROM CL-TEST::DONE :GOOD)))) (FOURTH CL-TEST::VALS))) (IF (EQUAL (FIFTH CL-TEST::VALS) (LIST CL-TEST::FN)) :GOOD (FIFTH CL-TEST::VALS))))
Expected value:
          5
          NIL
          NIL
          1
          :GOOD
          :GOOD
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 NIL
 CL-TEST::GET-SETF-EXPANSION.2
 CL-TEST::GET-SETF-EXPANSION.3
 CL-TEST::IDENTITY.1
 CL-TEST::IDENTITY.2
 CL-TEST::IDENTITY.3
 CL-TEST::IDENTITY.ORDER.1
 CL-TEST::IDENTITY.ERROR.1
 CL-TEST::IDENTITY.ERROR.2
 CL-TEST::IF.1
 CL-TEST::IF.2
 CL-TEST::IF.3
 CL-TEST::IF.4
 CL-TEST::IF.5
 CL-TEST::IF.6
 CL-TEST::IF.7
 CL-TEST::IF.8
 CL-TEST::IF.9
 CL-TEST::IF.10
 CL-TEST::IF.11
 CL-TEST::IF.12
 CL-TEST::IF.13
 CL-TEST::IF.ORDER.1
 CL-TEST::LABELS.1
 CL-TEST::LABELS.2
 CL-TEST::LABELS.3
 CL-TEST::LABELS.4
 CL-TEST::LABELS.4A
 CL-TEST::LABELS.5
 CL-TEST::LABELS.6
 CL-TEST::LABELS.7
 CL-TEST::LABELS.7B
 CL-TEST::LABELS.7C
 CL-TEST::LABELS.7D
 CL-TEST::LABELS.8
 CL-TEST::LABELS.9
 CL-TEST::LABELS.10
 CL-TEST::LABELS.11
Test CL-TEST::LABELS.12 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :C 4)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :C.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.13 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.14 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.15 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (CL-TEST::A) CL-TEST::A)) (CL-TEST::%F 1 2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::A)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.16 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A) CL-TEST::A)) (CL-TEST::%F (QUOTE (CL-TEST::FOO)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.17 failed
Form: (LABELS (((SETF CL-TEST::%F) (CL-TEST::X CL-TEST::Y) (SETF (CAR CL-TEST::Y) CL-TEST::X))) (LET ((CL-TEST::Z (LIST 1 2))) (SETF (CL-TEST::%F CL-TEST::Z) (QUOTE CL-TEST::A)) CL-TEST::Z))
Expected value:
          (CL-TEST::A 2)
Actual value:
          #<Undefined-Function (SETF CL-TEST::%F)> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.18
 CL-TEST::LABELS.19
Test CL-TEST::LABELS.20 failed
Form: (LET* ((CL-TEST::N (MIN (1- LAMBDA-PARAMETERS-LIMIT) 1024)) (CL-TEST::VARS (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (GENSYM)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::EQLT (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) (LABELS ((CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (+ (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN CL-TEST::VARS)))) (CL-TEST::%F (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::VARS CL-TEST::COLLECT 1))))))))
Expected value:
          T
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.21
 CL-TEST::LABELS.22
 CL-TEST::LABELS.23
 CL-TEST::LABELS.24
 CL-TEST::LABELS.25
Test CL-TEST::LABELS.26 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (IGNORE-ERRORS (LABELS (((SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) (&REST CL-TEST::ARGS) (DECLARE (IGNORE CL-TEST::ARGS)) (QUOTE CL-TEST::A))) (SETF ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)) 10)))) UNLESS (EQ (EVAL CL-TEST::FORM) (QUOTE CL-TEST::A)) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (WARNING VARIABLE UNSIGNED-BYTE UNDEFINED-FUNCTION UNBOUND-VARIABLE UNBOUND-SLOT TYPE-ERROR TYPE TWO-WAY-STREAM T SYNONYM-STREAM SYMBOL STYLE-WARNING STRUCTURE-OBJECT STRUCTURE-CLASS STRUCTURE STRING-STREAM STREAM-ERROR STREAM STORAGE-CONDITION STANDARD-OBJECT STANDARD-METHOD STANDARD-GENERIC-FUNCTION STANDARD-CLASS STANDARD-CHAR STANDARD SPEED SPECIAL SPACE SINGLE-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT SIMPLE-WARNING SIMPLE-VECTOR SIMPLE-TYPE-ERROR SIMPLE-STRING SIMPLE-ERROR SIMPLE-CONDITION SIMPLE-BIT-VECTOR SIMPLE-BASE-STRING SIMPLE-ARRAY SIGNED-BYTE SHORT-FLOAT-NEGATIVE-EPSILON SHORT-FLOAT-EPSILON SHORT-FLOAT SERIOUS-CONDITION SEQUENCE SATISFIES SAFETY RESTART REAL READTABLE READER-ERROR RATIO RANDOM-STATE PROGRAM-ERROR PRINT-NOT-READABLE PI PARSE-ERROR PACKAGE-ERROR PACKAGE OTHERWISE OPTIMIZE NUMBER NOTINLINE NIL MULTIPLE-VALUES-LIMIT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-LONG-FLOAT MOST-POSITIVE-FIXNUM MOST-POSITIVE-DOUBLE-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-LONG-FLOAT MOST-NEGATIVE-FIXNUM MOST-NEGATIVE-DOUBLE-FLOAT METHOD-COMBINATION METHOD LONG-FLOAT-NEGATIVE-EPSILON LONG-FLOAT-EPSILON LONG-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LAMBDA-PARAMETERS-LIMIT LAMBDA-LIST-KEYWORDS KEYWORD INTERNAL-TIME-UNITS-PER-SECOND INTEGER INLINE IGNORE IGNORABLE HASH-TABLE GENERIC-FUNCTION FTYPE FLOATING-POINT-UNDERFLOW FLOATING-POINT-OVERFLOW FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-INEXACT FIXNUM FILE-STREAM FILE-ERROR EXTENDED-CHAR END-OF-FILE ECHO-STREAM DYNAMIC-EXTENT DOUBLE-FLOAT-NEGATIVE-EPSILON DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT DIVISION-BY-ZERO DECLARATION DEBUG CONTROL-ERROR CONDITION CONCATENATED-STREAM COMPILER-MACRO COMPILED-FUNCTION COMPILATION-SPEED CLASS CHAR-CODE-LIMIT CELL-ERROR CALL-ARGUMENTS-LIMIT BUILT-IN-CLASS BROADCAST-STREAM BOOLEAN BOOLE-XOR BOOLE-SET BOOLE-ORC2 BOOLE-ORC1 BOOLE-NOR BOOLE-NAND BOOLE-IOR BOOLE-EQV BOOLE-CLR BOOLE-C2 BOOLE-C1 BOOLE-ANDC2 BOOLE-ANDC1 BOOLE-AND BOOLE-2 BOOLE-1 BIT-VECTOR BIGNUM BASE-STRING BASE-CHAR ARRAY-TOTAL-SIZE-LIMIT ARRAY-RANK-LIMIT ARRAY-DIMENSION-LIMIT ARRAY ARITHMETIC-ERROR /// // +++ ++ *TRACE-OUTPUT* *TERMINAL-IO* *STANDARD-OUTPUT* *STANDARD-INPUT* *READTABLE* *READ-SUPPRESS* *READ-EVAL* *READ-DEFAULT-FLOAT-FORMAT* *READ-BASE* *RANDOM-STATE* *QUERY-IO* *PRINT-RIGHT-MARGIN* *PRINT-READABLY* *PRINT-RADIX* *PRINT-PRETTY* *PRINT-PPRINT-DISPATCH* *PRINT-MISER-WIDTH* *PRINT-LINES* *PRINT-LEVEL* *PRINT-LENGTH* *PRINT-GENSYM* *PRINT-ESCAPE* *PRINT-CIRCLE* *PRINT-CASE* *PRINT-BASE* *PRINT-ARRAY* *PACKAGE* *MODULES* *MACROEXPAND-HOOK* *LOAD-VERBOSE* *LOAD-TRUENAME* *LOAD-PRINT* *LOAD-PATHNAME* *GENSYM-COUNTER* *FEATURES* *ERROR-OUTPUT* *DEFAULT-PATHNAME-DEFAULTS* *DEBUGGER-HOOK* *DEBUG-IO* *COMPILE-VERBOSE* *COMPILE-PRINT* *COMPILE-FILE-TRUENAME* *COMPILE-FILE-PATHNAME* *BREAK-ON-SIGNALS* *** ** &WHOLE &REST &OPTIONAL &KEY &ENVIRONMENT &BODY &AUX &ALLOW-OTHER-KEYS) [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.27
 CL-TEST::LABELS.28
 CL-TEST::LABELS.29
 CL-TEST::LABELS.30
 CL-TEST::LABELS.31
Test CL-TEST::LABELS.32 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.33 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LABELS.34 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T :A 1 :B 2))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.35
Test CL-TEST::LABELS.36 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY) :BAD)) (CL-TEST::%F NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.37
 CL-TEST::LABELS.38
 CL-TEST::LABELS.39
 CL-TEST::LABELS.40
 CL-TEST::LABELS.41
 CL-TEST::LABELS.42
 CL-TEST::LABELS.43
 CL-TEST::LABELS.44
 CL-TEST::LABELS.45
 CL-TEST::LABELS.46
 CL-TEST::LABELS.47
 CL-TEST::LABELS.48
 CL-TEST::LABELS.49
 CL-TEST::LABELS.50
Test CL-TEST::LABELS.51 failed
Form: (LABELS ((CL-TEST::LABELS.51 NIL :GOOD)) (CL-TEST::LABELS.51))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::LABELS.52
 CL-TEST::LAMBDA-LIST-KEYWORDS.1
 CL-TEST::LAMBDA-LIST-KEYWORDS.2
 CL-TEST::LAMBDA-LIST-KEYWORDS.3
 CL-TEST::LAMBDA-LIST-KEYWORDS.5
Test CL-TEST::LAMBDA-PARAMETERS-LIMIT.1 failed
Form: (NOT (TYPEP LAMBDA-PARAMETERS-LIMIT (QUOTE INTEGER)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAMBDA-PARAMETERS-LIMIT.2 failed
Form: (< LAMBDA-PARAMETERS-LIMIT 50)
Expected value:
          NIL
Actual value:
          #<Unbound-Variable LAMBDA-PARAMETERS-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::LET.1
 CL-TEST::LET.2
 CL-TEST::LET.3
 CL-TEST::LET.4
 CL-TEST::LET.5
 CL-TEST::LET.6
 CL-TEST::LET.7
 CL-TEST::LET.9
 CL-TEST::LET.11
Test CL-TEST::LET.14 failed
Form: (LET* ((CL-TEST::N 100) (CL-TEST::VARS (MAPCAR (FUNCTION GENSYM) (MAKE-LIST CL-TEST::N :INITIAL-ELEMENT "G"))) (CL-TEST::EXPR (SYSTEM.INTERNALS::BACKQUOTE (LET (SYSTEM.INTERNALS::BQ-COMMA (LET ((CL-TEST::I 0)) (MAPCAR (FUNCTION (LAMBDA (CL-TEST::V) (LIST CL-TEST::V (INCF CL-TEST::I)))) CL-TEST::VARS))) (SYSTEM.INTERNALS::BQ-COMMA (LET ((CL-TEST::SUMEXPR 0)) (DOLIST (CL-TEST::V CL-TEST::VARS) (SETQ CL-TEST::SUMEXPR (SYSTEM.INTERNALS::BACKQUOTE (+ (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::V) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SUMEXPR))))) CL-TEST::SUMEXPR))))) (CL-TEST::VAL (EVAL CL-TEST::EXPR))) (OR (CL-TEST::EQLT CL-TEST::VAL (/ (* CL-TEST::N (1+ CL-TEST::N)) 2)) (LIST CL-TEST::VAL)))
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::THING is NIL, which is not of type (OR STRING (INTEGER 0)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LET.15
 CL-TEST::LET.16
 CL-TEST::LET.17
 CL-TEST::LET.17A
 CL-TEST::LET.18
 CL-TEST::LET.19
 CL-TEST::LET.20
 CL-TEST::LET.21
 CL-TEST::LET*.1
 CL-TEST::LET*.2
 CL-TEST::LET*.3
 CL-TEST::LET*.4
 CL-TEST::LET*.5
 CL-TEST::LET*.6
 CL-TEST::LET*.7
 CL-TEST::LET*.8
 CL-TEST::LET*.9
 CL-TEST::LET*.10
 CL-TEST::LET*.11
 CL-TEST::LET*.12
Test CL-TEST::LET*.14 failed
Form: (LET* ((CL-TEST::N 100) (CL-TEST::VARS (MAPCAR (FUNCTION GENSYM) (MAKE-LIST CL-TEST::N :INITIAL-ELEMENT "G"))) (CL-TEST::EXPR (SYSTEM.INTERNALS::BACKQUOTE (LET* (SYSTEM.INTERNALS::BQ-COMMA (LET ((CL-TEST::I 0)) (MAPCAR (FUNCTION (LAMBDA (CL-TEST::V) (LIST CL-TEST::V (INCF CL-TEST::I)))) CL-TEST::VARS))) (SYSTEM.INTERNALS::BQ-COMMA (LET ((CL-TEST::SUMEXPR 0)) (DOLIST (CL-TEST::V CL-TEST::VARS) (SETQ CL-TEST::SUMEXPR (SYSTEM.INTERNALS::BACKQUOTE (+ (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::V) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SUMEXPR))))) CL-TEST::SUMEXPR))))) (CL-TEST::VAL (EVAL CL-TEST::EXPR))) (OR (CL-TEST::EQLT CL-TEST::VAL (/ (* CL-TEST::N (1+ CL-TEST::N)) 2)) (LIST CL-TEST::VAL)))
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::THING is NIL, which is not of type (OR STRING (INTEGER 0)).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LET*.15
 CL-TEST::LET*.16
 CL-TEST::LET*.17
 CL-TEST::LET*.17A
 CL-TEST::LET*.18
 CL-TEST::LET*.19
 CL-TEST::LET*.20
 CL-TEST::LET*.21
 CL-TEST::LET*.22
 CL-TEST::LET*.23
 CL-TEST::MACROLET.1
 CL-TEST::MACROLET.2
 CL-TEST::MACROLET.3
 CL-TEST::MACROLET.4
 CL-TEST::MACROLET.5
 CL-TEST::MACROLET.6
 CL-TEST::MACROLET.7
 CL-TEST::MACROLET.8
 CL-TEST::MACROLET.9
 CL-TEST::MACROLET.10
 CL-TEST::MACROLET.11
 CL-TEST::MACROLET.12
 CL-TEST::MACROLET.13
 CL-TEST::MACROLET.14
 CL-TEST::MACROLET.15
 CL-TEST::MACROLET.16
 CL-TEST::MACROLET.17
 CL-TEST::MACROLET.18
 CL-TEST::MACROLET.19
 CL-TEST::MACROLET.20
 CL-TEST::MACROLET.21
 CL-TEST::MACROLET.22
 CL-TEST::MACROLET.22A
 CL-TEST::MACROLET.23
 CL-TEST::MACROLET.24
 CL-TEST::MACROLET.25
 CL-TEST::MACROLET.26
 CL-TEST::MACROLET.27
 CL-TEST::MACROLET.28
 CL-TEST::MACROLET.29
 CL-TEST::MACROLET.30
 CL-TEST::MACROLET.31
Test CL-TEST::MACROLET.32 failed
Form: (MACROLET ((CL-TEST::%M (&KEY CL-TEST::A CL-TEST::B CL-TEST::C) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::A) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::B) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C)))))) (VALUES (CL-TEST::%M :ALLOW-OTHER-KEYS NIL) (CL-TEST::%M :A 1 :ALLOW-OTHER-KEYS NIL) (CL-TEST::%M :ALLOW-OTHER-KEYS T) (CL-TEST::%M :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T) (CL-TEST::%M :ALLOW-OTHER-KEYS T :C 1 :B 2 :A 3) (CL-TEST::%M :ALLOW-OTHER-KEYS NIL :C 1 :B 2 :A 3)))
Expected value:
          (NIL NIL NIL)
          (1 NIL NIL)
          (NIL NIL NIL)
          (NIL NIL NIL)
          (3 2 1)
          (3 2 1)
Actual value:
          #<Simple-Error Invalid keyword :ALLOW-OTHER-KEYS. Wanted one of (:C :B :A).> [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.33
 CL-TEST::MACROLET.34
 CL-TEST::MACROLET.35
Test CL-TEST::MACROLET.36 failed
Form: (MACROLET ((CL-TEST::%M (&WHOLE (CL-TEST::M CL-TEST::A CL-TEST::B) CL-TEST::C CL-TEST::D) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::M) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::A) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::B) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::D)))))) (CL-TEST::%M 1 2))
Expected value:
          (CL-TEST::%M 1 2 1 2)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::NAME is (CL-TEST::M CL-TEST::A CL-TEST::B), which is not of type SYMBOL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACROLET.37 failed
Form: (MACROLET ((CL-TEST::%F NIL :BAD)) (FLET ((CL-TEST::%F NIL :GOOD)) (CL-TEST::%F)))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.38
Test CL-TEST::MACROLET.39 failed
Form: (MACROLET ((CL-TEST::%M (NIL) :GOOD)) (CL-TEST::%M NIL))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error Cannot bind over constant NIL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MACROLET.40
 CL-TEST::MACROLET.41
 CL-TEST::MACROLET.42
 CL-TEST::MACROLET.43
 CL-TEST::MACROLET.44
 CL-TEST::MACROLET.45
 CL-TEST::MACROLET.46
 CL-TEST::MACROLET.47
 CL-TEST::MACROLET.48
 CL-TEST::MACROLET.49
 CL-TEST::MACROLET.50
 CL-TEST::MACROLET.51
 CL-TEST::MACROLET.52
 CL-TEST::MULTIPLE-VALUE-BIND.1
 CL-TEST::MULTIPLE-VALUE-BIND.2
 CL-TEST::MULTIPLE-VALUE-BIND.3
 CL-TEST::MULTIPLE-VALUE-BIND.4
 CL-TEST::MULTIPLE-VALUE-BIND.5
 CL-TEST::MULTIPLE-VALUE-BIND.6
Test CL-TEST::MULTIPLE-VALUE-BIND.7 failed
Form: (LET ((CL-TEST::Z 0) CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::Z)) (VALUES (FLET ((CL-TEST::%X NIL (SYMBOL-VALUE (QUOTE CL-TEST::X))) (CL-TEST::%Y NIL (SYMBOL-VALUE (QUOTE CL-TEST::Y))) (CL-TEST::%Z NIL (SYMBOL-VALUE (QUOTE CL-TEST::Z)))) (MULTIPLE-VALUE-BIND (CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3) (DECLARE (SPECIAL CL-TEST::X CL-TEST::Y)) (LIST (CL-TEST::%X) (CL-TEST::%Y) (CL-TEST::%Z)))) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 0)
          NIL
          NIL
          0
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-BIND.8
 CL-TEST::MULTIPLE-VALUE-BIND.9
 CL-TEST::MULTIPLE-VALUE-BIND.10
 CL-TEST::MULTIPLE-VALUE-BIND.11
 CL-TEST::MULTIPLE-VALUE-BIND.12
 CL-TEST::MULTIPLE-VALUE-BIND.13
 CL-TEST::MULTIPLE-VALUE-BIND.14
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.1
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.2
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.3
 CL-TEST::MULTIPLE-VALUE-CALL.1
 CL-TEST::MULTIPLE-VALUE-CALL.2
 CL-TEST::MULTIPLE-VALUE-CALL.3
 CL-TEST::MULTIPLE-VALUE-CALL.4
 CL-TEST::MULTIPLE-VALUE-CALL.5
 CL-TEST::MULTIPLE-VALUE-PROG1.1
 CL-TEST::MULTIPLE-VALUE-PROG1.2
 CL-TEST::MULTIPLE-VALUE-PROG1.3
 CL-TEST::MULTIPLE-VALUE-PROG1.4
 CL-TEST::MULTIPLE-VALUE-PROG1.5
 CL-TEST::MULTIPLE-VALUE-PROG1.6
 CL-TEST::MULTIPLE-VALUE-PROG1.7
Test CL-TEST::MULTIPLE-VALUE-PROG1.8 failed
Form: (LET* ((CL-TEST::N (MIN 100 MULTIPLE-VALUES-LIMIT))) (CL-TEST::NOT-MV (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW CL-TEST::N CL-TEST::FOR CL-TEST::X = (CL-TEST::MAKE-INT-LIST CL-TEST::I) CL-TEST::ALWAYS (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MULTIPLE-VALUE-PROG1 (VALUES-LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ CL-TEST::X)))) NIL)))) CL-TEST::X))))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-PROG1.9
 CL-TEST::MULTIPLE-VALUE-PROG1.10
 CL-TEST::MULTIPLE-VALUE-PROG1.11
 CL-TEST::MULTIPLE-VALUE-PROG1.12
Test CL-TEST::MULTIPLE-VALUE-SETQ.1 failed
Form: (LET ((CL-TEST::X 1) (CL-TEST::Y 2)) (VALUES (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::Y) (VALUES 3 4))) CL-TEST::X CL-TEST::Y))
Expected value:
          (3)
          3
          4
Actual value:
          (4) [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.2
Test CL-TEST::MULTIPLE-VALUE-SETQ.3 failed
Form: (LET (CL-TEST::X) (SYMBOL-MACROLET ((CL-TEST::Y CL-TEST::X)) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) (VALUES 1 2)) CL-TEST::X))
Expected value:
          1
Actual value:
          #<Type-Error C1D6DC37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.4 failed
Form: (LET ((CL-TEST::X (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) (VALUES 1 2)) CL-TEST::X))
Expected value:
          (1)
Actual value:
          #<Type-Error C1D78EC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.5 failed
Form: (LET ((CL-TEST::I 0) (CL-TEST::X (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR (PROGN (INCF CL-TEST::I) CL-TEST::X)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) CL-TEST::I)) CL-TEST::X)
Expected value:
          (1)
Actual value:
          #<Type-Error C1D84917> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.6 failed
Form: (LET ((CL-TEST::X (LIST NIL)) CL-TEST::Z) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::Z) (VALUES 1 2))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (1)
          2
Actual value:
          #<Type-Error C1D91C97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.7 failed
Form: (LET ((CL-TEST::X (LIST NIL)) (CL-TEST::Z (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR CL-TEST::X)) (CL-TEST::W (CAR CL-TEST::Z))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::W) (VALUES 1 2))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (1)
          (2)
Actual value:
          #<Type-Error C1D9F837> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.8 failed
Form: (LET ((CL-TEST::X (LIST NIL)) (CL-TEST::Z (LIST NIL)) (CL-TEST::I 0)) (SYMBOL-MACROLET ((CL-TEST::Y (CAR (PROGN (INCF CL-TEST::I 3) CL-TEST::X))) (CL-TEST::W (CAR (PROGN (INCF CL-TEST::I CL-TEST::I) CL-TEST::Z)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::W) (VALUES CL-TEST::I 10))) (VALUES CL-TEST::X CL-TEST::Z))
Expected value:
          (6)
          (10)
Actual value:
          #<Type-Error C1DAE667> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.9 failed
Form: (LET (CL-TEST::X) (VALUES (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::X) (VALUES 1 2)) CL-TEST::X))
Expected value:
          1
          2
Actual value:
          2 [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.10 failed
Form: (LET (CL-TEST::X) (VALUES (MULTIPLE-VALUE-SETQ (CL-TEST::X CL-TEST::X) (VALUES 1)) CL-TEST::X))
Expected value:
          1
          NIL
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.11
Test CL-TEST::MULTIPLE-VALUE-SETQ.12 failed
Form: (LET ((CL-TEST::N (MIN 100 MULTIPLE-VALUES-LIMIT)) (CL-TEST::VARS NIL) (CL-TEST::RESULT NIL)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::BELOW CL-TEST::N CL-TEST::FOR CL-TEST::FORM = (PROGN (PUSH (GENSYM) CL-TEST::VARS) (PUSH CL-TEST::I CL-TEST::RESULT) (SYSTEM.INTERNALS::BACKQUOTE (LET (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (AND (EQL (MULTIPLE-VALUE-SETQ (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VARS) (VALUES-LIST (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT)))) (SYSTEM.INTERNALS::BQ-COMMA (CAR CL-TEST::RESULT))) (EQUAL (SYSTEM.INTERNALS::BQ-COMMA (CL-TEST::MAKE-LIST-EXPR CL-TEST::VARS)) (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT))))))) UNLESS (EVAL CL-TEST::FORM) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::FORM)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.13 failed
Form: (MULTIPLE-VALUE-SETQ NIL :GOOD)
Expected value:
          :GOOD
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.14
Test CL-TEST::MULTIPLE-VALUE-SETQ.15 failed
Form: (MULTIPLE-VALUE-SETQ NIL (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::MULTIPLE-VALUE-SETQ.16 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X :BAD)) (SYMBOL-MACROLET ((CL-TEST::Z (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Z) :GOOD)) CL-TEST::X))
Expected value:
          :GOOD
Actual value:
          #<Type-Error C1E05017> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-SETQ.17
 CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.1
 CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.2
 CL-TEST::MULTIPLE-VALUE-SETQ.ERROR.3
 CL-TEST::MULTIPLE-VALUE-LIST.1
 CL-TEST::MULTIPLE-VALUE-LIST.2
 CL-TEST::MULTIPLE-VALUE-LIST.3
 CL-TEST::MULTIPLE-VALUE-LIST.4
 CL-TEST::MULTIPLE-VALUE-LIST.5
 CL-TEST::MULTIPLE-VALUE-LIST.6
Test CL-TEST::MULTIPLE-VALUE-LIST.7 failed
Form: (NOT (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW (MIN MULTIPLE-VALUES-LIMIT 100) CL-TEST::FOR CL-TEST::X = (MAKE-LIST CL-TEST::I :INITIAL-ELEMENT (QUOTE CL-TEST::A)) CL-TEST::ALWAYS (EQUAL CL-TEST::X (MULTIPLE-VALUE-LIST (VALUES-LIST CL-TEST::X)))))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::MULTIPLE-VALUE-LIST.8
 CL-TEST::MULTIPLE-VALUE-LIST.9
 CL-TEST::MULTIPLE-VALUE-LIST.ORDER.1
 CL-TEST::MULTIPLE-VALUE-LIST.ERROR.1
 CL-TEST::MULTIPLE-VALUE-LIST.ERROR.2
 CL-TEST::MULTIPLE-VALUE-LIST.ERROR.3
 CL-TEST::NIL.1
 CL-TEST::NIL.2
 CL-TEST::NIL.3
 CL-TEST::NIL.4
 CL-TEST::NIL.5
 CL-TEST::NIL.6
 CL-TEST::NIL.7
 CL-TEST::NIL.8
 CL-TEST::NULL.1
 CL-TEST::NULL.2
 CL-TEST::NULL.3
 CL-TEST::NULL.4
 CL-TEST::NULL.ERROR.1
 CL-TEST::NULL.ERROR.2
 CL-TEST::NOT.1
 CL-TEST::NOT.2
 CL-TEST::NOT.3
 CL-TEST::NOT.4
 CL-TEST::NOT.ERROR.1
 CL-TEST::NOT.ERROR.2
 CL-TEST::NOTANY.1
Test CL-TEST::NOTANY.2 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION IDENTITY) #()))
Expected value:
          NIL
Actual value:
          #<Type-Error 817B13A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.3
 CL-TEST::NOTANY.4
 CL-TEST::NOTANY.5
 CL-TEST::NOTANY.6
Test CL-TEST::NOTANY.7 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND CL-TEST::X CL-TEST::Y))) (QUOTE (NIL T T NIL T)) #(T NIL NIL T NIL NIL)))
Expected value:
          NIL
Actual value:
          #<Type-Error 817C36D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.8
Test CL-TEST::NOTANY.9 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION ZEROP) #*11111111111111))
Expected value:
          NIL
Actual value:
          #<Type-Error 818A7147> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.10 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION ZEROP) #*))
Expected value:
          NIL
Actual value:
          #<Type-Error 818AED57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.11 failed
Form: (NOTANY (FUNCTION ZEROP) #*1111111011111)
Expected value:
          NIL
Actual value:
          #<Type-Error 818B6157> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.12 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaaaa"))
Expected value:
          NIL
Actual value:
          #<Type-Error 818BDB27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.13 failed
Form: (CL-TEST::NOT-MV (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X #\a))) ""))
Expected value:
          NIL
Actual value:
          #<Type-Error 818C6B57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.14 failed
Form: (NOTANY (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaabaaaa")
Expected value:
          NIL
Actual value:
          #<Type-Error 818CF2A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.15
 CL-TEST::NOTANY.16
Test CL-TEST::NOTANY.17 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION PLUSP) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 818DEAF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::IN (QUOTE (0 0 0 0 1 2 3 4 5 6)) CL-TEST::COLLECT (MOD CL-TEST::J (ASH 1 CL-TEST::I))) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION PLUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error 81901377> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION MINUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.20 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 81936687> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.21 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 819496B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.22 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V)) (SETF (AREF CL-TEST::V 2) #\0) (NOTANY (FUNCTION DIGIT-CHAR-P) CL-TEST::V)))
Expected value:
          T
          #\0
          NIL
Actual value:
          #<Type-Error 819580E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.23 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) WHEN (NOTANY (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 8196BD67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.24 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :FILL-POINTER 6 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) UNLESS (NOTANY (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 81981CC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.25 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (NOTANY (COMPLEMENT (FUNCTION COMPLEXP)) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error 819992A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.26 failed
Form: (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (NOTANY (FUNCTION ODDP) CL-TEST::V1) (CL-TEST::NOTNOT (NOTANY (FUNCTION ODDP) CL-TEST::V2))))
Expected value:
          NIL
          T
Actual value:
          #<Type-Error 819AC4F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (NOTANY (QUOTE ODDP) CL-TEST::V1)) (NOTANY (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error 819BE897> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.28 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOT (NOTANY (QUOTE ODDP) CL-TEST::V1)) (NOTANY (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.29 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (NOT (NOTANY (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error 819EE0F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.30 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (NOT (NOTANY (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error 81A02277> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.31 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (NOTANY (FUNCTION MINUSP) CL-TEST::V))))
Expected value:
          T
          NIL
Actual value:
          #<Type-Error 81A12807> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTANY.32 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (CL-TEST::NOTNOT (NOTANY (FUNCTION MINUSP) CL-TEST::V)))))
Expected value:
          T
          T
Actual value:
          #<Type-Error 81A20877> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.ORDER.1Space
 CL-TEST::NOTANY.ERROR.1Space
 CL-TEST::NOTANY.ERROR.4
Test CL-TEST::NOTANY.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NOTANY (FUNCTION EQL) NIL CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          ((0 (NIL T)) (#\Space (NIL T)) (#<Arithmetic-Error 80579E27> (NIL T)) (#<Package "Cl"> (NIL T)) (#<Hash-Table 805801A7> (NIL T)) (#P"THAT-MAC-THING:foo" (NIL T)) (#<Synonym-Stream for *TERMINAL-IO*> (NIL T)) (#<Readtable 80002667> (NIL T)) (#<Cl-Test::Foo-Structure 8057DE47> (NIL T)) (#<Function CONS 288ECC> (NIL T)) (#<Random-State 8057F227> (NIL T)) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 8057BE37> (NIL T))) [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTANY.ERROR.8
 CL-TEST::NOTANY.ERROR.9
 CL-TEST::NOTANY.ERROR.10
 CL-TEST::NOTANY.ERROR.11
 CL-TEST::NOTANY.ERROR.12
 CL-TEST::NOTANY.ERROR.13
 CL-TEST::NOTEVERY.1
 CL-TEST::NOTEVERY.2
 CL-TEST::NOTEVERY.3
 CL-TEST::NOTEVERY.4
 CL-TEST::NOTEVERY.5
 CL-TEST::NOTEVERY.6
 CL-TEST::NOTEVERY.7
 CL-TEST::NOTEVERY.8
 CL-TEST::NOTEVERY.9
 CL-TEST::NOTEVERY.10
 CL-TEST::NOTEVERY.11
 CL-TEST::NOTEVERY.12
 CL-TEST::NOTEVERY.13
 CL-TEST::NOTEVERY.14
 CL-TEST::NOTEVERY.15
 CL-TEST::NOTEVERY.16
 CL-TEST::NOTEVERY.17
Test CL-TEST::NOTEVERY.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 1 1 1 1 1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (NOT (NOTEVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.20
 CL-TEST::NOTEVERY.21
 CL-TEST::NOTEVERY.22
 CL-TEST::NOTEVERY.23
Test CL-TEST::NOTEVERY.24 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOTEVERY (QUOTE EVENP) CL-TEST::V1) (NOT (NOTEVERY (FUNCTION EVENP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.25 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (NOTEVERY (QUOTE EVENP) CL-TEST::V1) (NOT (NOTEVERY (FUNCTION EVENP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.26
 CL-TEST::NOTEVERY.27
 CL-TEST::NOTEVERY.28
 CL-TEST::NOTEVERY.29
Test CL-TEST::NOTEVERY.30 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6)))) WHEN (NOTEVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.31 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE TYPE :FILL-POINTER 5 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 -1)))) WHEN (NOTEVERY (FUNCTION PLUSP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.32 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) WHEN (NOTEVERY (FUNCTION COMPLEXP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 21 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.ORDER.1Space
 CL-TEST::NOTEVERY.ERROR.1
Test CL-TEST::NOTEVERY.ERROR.4 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NOTEVERY (FUNCTION NULL) CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NOTEVERY.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NOTEVERY (FUNCTION EQL) NIL CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::NOTEVERY.ERROR.8
 CL-TEST::NOTEVERY.ERROR.9
 CL-TEST::NOTEVERY.ERROR.10
 CL-TEST::NOTEVERY.ERROR.11
 CL-TEST::NOTEVERY.ERROR.12
 CL-TEST::NOTEVERY.ERROR.13
 CL-TEST::NTH-VALUE.1
 CL-TEST::NTH-VALUE.2
 CL-TEST::NTH-VALUE.3
 CL-TEST::NTH-VALUE.4
 CL-TEST::NTH-VALUE.5
 CL-TEST::NTH-VALUE.6
 CL-TEST::NTH-VALUE.7
 CL-TEST::NTH-VALUE.ORDER.1
 CL-TEST::NTH-VALUE.ERROR.1
 CL-TEST::NTH-VALUE.ERROR.2
 CL-TEST::NTH-VALUE.ERROR.3
 CL-TEST::OR.1
 CL-TEST::OR.2
 CL-TEST::OR.3
 CL-TEST::OR.4
 CL-TEST::OR.5
 CL-TEST::OR.6
 CL-TEST::OR.7
 CL-TEST::OR.8
 CL-TEST::OR.9
 CL-TEST::OR.10
 CL-TEST::OR.11
 CL-TEST::OR.ERROR.1
 CL-TEST::OR.ERROR.2
 CL-TEST::OR.ERROR.3
 CL-TEST::PROG.1
 CL-TEST::PROG.2
 CL-TEST::PROG.3
 CL-TEST::PROG.4
 CL-TEST::PROG.5
 CL-TEST::PROG.6
 CL-TEST::PROG.7
 CL-TEST::PROG.8
 CL-TEST::PROG.9
 CL-TEST::PROG.10
 CL-TEST::PROG.11
 CL-TEST::PROG.12
 CL-TEST::PROG.ERROR.1
 CL-TEST::PROG*.1
 CL-TEST::PROG*.2
 CL-TEST::PROG*.3
 CL-TEST::PROG*.4
 CL-TEST::PROG*.5
 CL-TEST::PROG*.6
 CL-TEST::PROG*.7
 CL-TEST::PROG*.8
 CL-TEST::PROG*.9
 CL-TEST::PROG*.10
 CL-TEST::PROG*.11
 CL-TEST::PROG*.12
 CL-TEST::PROG*.ERROR.1
 CL-TEST::PROG1.1
 CL-TEST::PROG1.2
 CL-TEST::PROG1.3
 CL-TEST::PROG1.4
 CL-TEST::PROG1.5
 CL-TEST::PROG1.6
 CL-TEST::PROG1.7
 CL-TEST::PROG1.ERROR.1
 CL-TEST::PROG2.1
 CL-TEST::PROG2.2
 CL-TEST::PROG2.3
 CL-TEST::PROG2.4
 CL-TEST::PROG2.5
 CL-TEST::PROG2.6
 CL-TEST::PROG2.7
 CL-TEST::PROG2.8
 CL-TEST::PROG2.ERROR.1
 CL-TEST::PROGN.1
 CL-TEST::PROGN.2
 CL-TEST::PROGN.3
 CL-TEST::PROGN.4
 CL-TEST::PROGN.5
 CL-TEST::PROGN.6
 CL-TEST::PROGN.7
 CL-TEST::PROGN.8
 CL-TEST::PROGN.9
 CL-TEST::PROGN.10
 CL-TEST::PROGV.1
 CL-TEST::PROGV.2
 CL-TEST::PROGV.3
 CL-TEST::PROGV.4
 CL-TEST::PROGV.5
 CL-TEST::PROGV.6
 CL-TEST::PROGV.6A
 CL-TEST::PROGV.7
 CL-TEST::PROGV.8
 CL-TEST::PROGV.9
 CL-TEST::PROGV.10
 CL-TEST::PROGV.11
 CL-TEST::PROGV.12
 CL-TEST::PROGV.13
 CL-TEST::PROGV.14
 CL-TEST::PROGV.15
 CL-TEST::PROGV.16
 CL-TEST::PROGV.17
 CL-TEST::SOME.1
Test CL-TEST::SOME.2 failed
Form: (SOME (FUNCTION IDENTITY) #())
Expected value:
          NIL
Actual value:
          #<Type-Error 81F6ED97> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.3
 CL-TEST::SOME.4
 CL-TEST::SOME.5
 CL-TEST::SOME.6
Test CL-TEST::SOME.7 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND CL-TEST::X CL-TEST::Y))) (QUOTE (NIL T T NIL T)) #(T NIL NIL T NIL NIL))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F7EE97> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.8
Test CL-TEST::SOME.9 failed
Form: (SOME (FUNCTION ZEROP) #*11111111111111)
Expected value:
          NIL
Actual value:
          #<Type-Error 81F8EBC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.10 failed
Form: (SOME (FUNCTION ZEROP) #*)
Expected value:
          NIL
Actual value:
          #<Type-Error 81F95B77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.11 failed
Form: (CL-TEST::NOT-MV (SOME (FUNCTION ZEROP) #*1111111011111))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F9C9D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.12 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaaaa")
Expected value:
          NIL
Actual value:
          #<Type-Error 81FA4547> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.13 failed
Form: (SOME (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X #\a))) "")
Expected value:
          NIL
Actual value:
          #<Type-Error 81FAC917> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.14 failed
Form: (CL-TEST::NOT-MV (SOME (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X #\a)))) "aaaaaabaaaa"))
Expected value:
          NIL
Actual value:
          #<Type-Error 81FB4AC7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.15
 CL-TEST::SOME.16
Test CL-TEST::SOME.17 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 1 2 3 4 5 6)) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION PLUSP) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error 81FC4597> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::IN (QUOTE (0 0 0 0 1 2 3 4 5 6)) CL-TEST::COLLECT (MOD CL-TEST::J (ASH 1 CL-TEST::I))) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION PLUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error 81FE7097> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION MINUSP) CL-TEST::V))) (QUOTE (NIL NIL NIL NIL NIL T T T T T)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.20 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error C17152B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.21 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "abcd012345" :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 4))) (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          (NIL NIL NIL NIL NIL T T T T T)
Actual value:
          #<Type-Error C1728567> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.22 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V) (SETF (AREF CL-TEST::V 2) #\0) (CL-TEST::NOTNOT (SOME (FUNCTION DIGIT-CHAR-P) CL-TEST::V))))
Expected value:
          NIL
          #\0
          T
Actual value:
          #<Type-Error C17370E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.23 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) UNLESS (SOME (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error C174AC07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.24 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (9)) :ELEMENT-TYPE TYPE :FILL-POINTER 6 :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COERCE CL-TEST::X TYPE))) (QUOTE (1 2 3 4 5 6 0 8 3)))) WHEN (SOME (FUNCTION ZEROP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error C17608C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.25 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) WHEN (SOME (COMPLEMENT (FUNCTION COMPLEXP)) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Type-Error C1777A87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.26 failed
Form: (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 3 2 4 6 8 5 7 9 1)))) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2))) (VALUES (CL-TEST::NOTNOT (SOME (FUNCTION ODDP) CL-TEST::V1)) (SOME (FUNCTION ODDP) CL-TEST::V2)))
Expected value:
          T
          NIL
Actual value:
          #<Type-Error C178AB47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 1 0 0 0 0 1 1 1 1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (SOME (QUOTE ODDP) CL-TEST::V1)) (NOT (SOME (FUNCTION ODDP) CL-TEST::V2))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Type-Error C179CAB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.28 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) UNLESS (LET* ((CL-TEST::V1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (-1 -1 0 0 0 0 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE)) (CL-TEST::V2 (MAKE-ARRAY (QUOTE (4)) :DISPLACED-TO CL-TEST::V1 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE TYPE))) (AND (SOME (QUOTE ODDP) CL-TEST::V1) (NOT (SOME (FUNCTION ODDP) CL-TEST::V2)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          #<Simple-Error 10 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.29 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE CHARACTER)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error C17CBDB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.30 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS "12abc345" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 6 CL-TEST::FOR CL-TEST::S2 = (MAKE-ARRAY (QUOTE (2)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::S1 :DISPLACED-INDEX-OFFSET CL-TEST::I) CL-TEST::COLLECT (CL-TEST::NOTNOT (SOME (QUOTE DIGIT-CHAR-P) CL-TEST::S2))))
Expected value:
          (T T NIL NIL T T T)
Actual value:
          #<Type-Error C17E01B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.31 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :ADJUSTABLE T))) (VALUES (SOME (FUNCTION MINUSP) CL-TEST::V) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (CL-TEST::NOTNOT (SOME (FUNCTION MINUSP) CL-TEST::V)))))
Expected value:
          NIL
          T
Actual value:
          #<Type-Error C17F0897> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SOME.32 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 10 :ADJUSTABLE T))) (VALUES (SOME (FUNCTION MINUSP) CL-TEST::V) (PROGN (ADJUST-ARRAY CL-TEST::V (QUOTE (11)) :INITIAL-ELEMENT -1) (SOME (FUNCTION MINUSP) CL-TEST::V))))
Expected value:
          NIL
          NIL
Actual value:
          #<Type-Error C17FE517> [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.ORDER.1
 CL-TEST::SOME.ORDER.2Space
 CL-TEST::SOME.ERROR.1Space
 CL-TEST::SOME.ERROR.4
Test CL-TEST::SOME.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (SOME (FUNCTION EQL) NIL CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          ((0 (NIL NIL)) (#\Space (NIL NIL)) (#<Arithmetic-Error C058FBE7> (NIL NIL)) (#<Package "Cl"> (NIL NIL)) (#<Hash-Table C0596247> (NIL NIL)) (#P"THAT-MAC-THING:foo" (NIL NIL)) (#<Synonym-Stream for *TERMINAL-IO*> (NIL NIL)) (#<Readtable C0002667> (NIL NIL)) (#<Cl-Test::Foo-Structure C0594247> (NIL NIL)) (#<Function CONS 288ECC> (NIL NIL)) (#<Random-State C0595497> (NIL NIL)) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) C0591E37> (NIL NIL))) [Actual value: #<error during printing>

 NIL
 CL-TEST::SOME.ERROR.8
 CL-TEST::SOME.ERROR.9
 CL-TEST::SOME.ERROR.10
 CL-TEST::SOME.ERROR.11
 CL-TEST::SOME.ERROR.12
 CL-TEST::SOME.ERROR.13
 CL-TEST::SOME.ERROR.14
 CL-TEST::T.1
 CL-TEST::T.2
 CL-TEST::T.3
 CL-TEST::T.4
 CL-TEST::TAGBODY.1
 CL-TEST::TAGBODY.2
 CL-TEST::TAGBODY.3
 CL-TEST::TAGBODY.4
 CL-TEST::TAGBODY.5
 CL-TEST::TAGBODY.6
 CL-TEST::TAGBODY.7
 CL-TEST::TAGBODY.8
 CL-TEST::TAGBODY.9
 CL-TEST::TAGBODY.10
 CL-TEST::TAGBODY.11
 CL-TEST::TAGBODY.12
 CL-TEST::TAGBODY.13
 CL-TEST::TAGBODY.14
Test CL-TEST::TAGBODY.15 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (GO CL-TEST::AROUND) 1152921504606846976 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD)) CL-TEST::AROUND (GO 1152921504606846976)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No GO-tag named 1152921504606846976.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TAGBODY.16 failed
Form: (LET* ((CL-TEST::T1 (1+ MOST-POSITIVE-FIXNUM)) (CL-TEST::T2 (1+ MOST-POSITIVE-FIXNUM)) (CL-TEST::FORM (SYSTEM.INTERNALS::BACKQUOTE (BLOCK CL-TEST::DONE (TAGBODY (GO CL-TEST::AROUND) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::T1) (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD)) CL-TEST::AROUND (GO (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::T2))))))) (EVAL CL-TEST::FORM))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No GO-tag named 1152921504606846976.> [Actual value: #<error during printing>

 NIL
 CL-TEST::TAGBODY.17
 CL-TEST::TAGBODY.18
 CL-TEST::TYPECASE.1
 CL-TEST::TYPECASE.2
 CL-TEST::TYPECASE.3
 CL-TEST::TYPECASE.4
 CL-TEST::TYPECASE.5
 CL-TEST::TYPECASE.6
 CL-TEST::TYPECASE.7
 CL-TEST::TYPECASE.8
 CL-TEST::TYPECASE.9
 CL-TEST::TYPECASE.10
 CL-TEST::TYPECASE.11
Test CL-TEST::TYPECASE.12 failed
Form: (TYPECASE 1 (INTEGER) (T (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.13 failed
Form: (TYPECASE 1 (SYMBOL (QUOTE CL-TEST::A)) (T))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.14 failed
Form: (TYPECASE 1 (SYMBOL (QUOTE CL-TEST::A)) (OTHERWISE))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::TYPECASE.15 failed
Form: (TYPECASE (QUOTE CL-TEST::A) (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL C00B74A7> (QUOTE CL-TEST::GOOD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Type-Error C19569D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::TYPECASE.16
 CL-TEST::TYPECASE.17
 CL-TEST::TYPECASE.18
Test CL-TEST::TYPECASE.19 failed
Form: (LET* ((CL-TEST::U (COERCE CL-TEST:*UNIVERSE* (QUOTE VECTOR))) (CL-TEST::LEN1 (LENGTH CL-TEST::U)) (CL-TEST::TYPES (COERCE CL-TEST::*CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (CL-TEST::LEN2 (LENGTH CL-TEST::TYPES))) (LOOP CL-TEST::FOR CL-TEST::N = (RANDOM 10) CL-TEST::FOR CL-TEST::MY-TYPES = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (ELT CL-TEST::TYPES (RANDOM CL-TEST::LEN2))) CL-TEST::FOR CL-TEST::VAL = (ELT CL-TEST::U (RANDOM CL-TEST::LEN1)) CL-TEST::FOR CL-TEST::I = (POSITION CL-TEST::VAL CL-TEST::MY-TYPES :TEST (FUNCTION TYPEP)) CL-TEST::FOR CL-TEST::FORM = (SYSTEM.INTERNALS::BACKQUOTE (TYPECASE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::VAL)) (SYSTEM.INTERNALS::BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::FOR TYPE CL-TEST::IN CL-TEST::MY-TYPES CL-TEST::COLLECT (SYSTEM.INTERNALS::BACKQUOTE ((SYSTEM.INTERNALS::BQ-COMMA TYPE) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))))) (OTHERWISE NIL))) CL-TEST::FOR CL-TEST::J = (EVAL CL-TEST::FORM) CL-TEST::REPEAT 1000 UNLESS (EQL CL-TEST::I CL-TEST::J) CL-TEST::COLLECT (LIST CL-TEST::N CL-TEST::MY-TYPES CL-TEST::VAL CL-TEST::I CL-TEST::FORM CL-TEST::J)))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of CHARACTER is *PRINT-READABLY*, which is not of type CHARACTER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::TYPECASE.20
 CL-TEST::TYPECASE.21
 CL-TEST::TYPECASE.ERROR.1
 CL-TEST::TYPECASE.ERROR.2
 CL-TEST::TYPECASE.ERROR.3
 CL-TEST::UNLESS.1
 CL-TEST::UNLESS.2
 CL-TEST::UNLESS.3
 CL-TEST::UNLESS.4
 CL-TEST::UNLESS.5
 CL-TEST::UNLESS.6
 CL-TEST::UNLESS.7
 CL-TEST::UNLESS.8
 CL-TEST::UNLESS.9
 CL-TEST::UNLESS.10
 CL-TEST::UNLESS.11
 CL-TEST::UNLESS.12
 CL-TEST::UNLESS.13
 CL-TEST::UNLESS.ERROR.1
 CL-TEST::UNLESS.ERROR.2
 CL-TEST::UNLESS.ERROR.3
 CL-TEST::UNWIND-PROTECT.1
 CL-TEST::UNWIND-PROTECT.2
 CL-TEST::UNWIND-PROTECT.3
 CL-TEST::UNWIND-PROTECT.4
 CL-TEST::UNWIND-PROTECT.5
 CL-TEST::UNWIND-PROTECT.6
 CL-TEST::UNWIND-PROTECT.7
 CL-TEST::UNWIND-PROTECT.8
 CL-TEST::UNWIND-PROTECT.9
 CL-TEST::UNWIND-PROTECT.10
 CL-TEST::UNWIND-PROTECT.11
 CL-TEST::UNWIND-PROTECT.12
 CL-TEST::UNWIND-PROTECT.13
 CL-TEST::VALUES-LIST.ERROR.1
 CL-TEST::VALUES-LIST.ERROR.2
 CL-TEST::VALUES-LIST.ERROR.3
 CL-TEST::VALUES-LIST.ERROR.4
 CL-TEST::VALUES-LIST.1
 CL-TEST::VALUES-LIST.2
 CL-TEST::VALUES-LIST.3
 CL-TEST::VALUES-LIST.4
Test CL-TEST::VALUES-LIST.5 failed
Form: (LET ((CL-TEST::X (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO (MIN 1000 (1- CALL-ARGUMENTS-LIMIT) (1- MULTIPLE-VALUES-LIMIT)) CL-TEST::COLLECT CL-TEST::I))) (CL-TEST::EQUALT CL-TEST::X (MULTIPLE-VALUE-LIST (VALUES-LIST CL-TEST::X))))
Expected value:
          T
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.0
 CL-TEST::VALUES.1
 CL-TEST::VALUES.2
 CL-TEST::VALUES.3
 CL-TEST::VALUES.4
 CL-TEST::VALUES.10
 CL-TEST::VALUES.15
 CL-TEST::VALUES.19
Test CL-TEST::VALUES.20 failed
Form: (LET ((CL-TEST::A T) (CL-TEST::B T) (CL-TEST::C T) (CL-TEST::D T) (CL-TEST::E T) (CL-TEST::F T)) (SETF (VALUES CL-TEST::A (VALUES CL-TEST::B CL-TEST::C) (VALUES CL-TEST::D) (VALUES CL-TEST::E CL-TEST::F)) (VALUES 0 1 2 3 4 5 6)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))
Expected value:
          (0 1 NIL 2 3 NIL)
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VALUES.21 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F) (SETF (VALUES CL-TEST::A (VALUES CL-TEST::B CL-TEST::C) (VALUES CL-TEST::D) (VALUES CL-TEST::E CL-TEST::F)) (VALUES 0 1 2 3 4 5 6)))
Expected value:
          0
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF VALUES)> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.A
 CL-TEST::VALUES.B
Test CL-TEST::VALUES.C failed
Form: (LET ((CL-TEST::X (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO (MIN 1000 (1- CALL-ARGUMENTS-LIMIT) (1- MULTIPLE-VALUES-LIMIT)) CL-TEST::COLLECT CL-TEST::I))) (CL-TEST::EQUALT CL-TEST::X (MULTIPLE-VALUE-LIST (APPLY (FUNCTION VALUES) CL-TEST::X))))
Expected value:
          T
Actual value:
          #<Unbound-Variable MULTIPLE-VALUES-LIMIT> [Actual value: #<error during printing>

 NIL
 CL-TEST::VALUES.ORDER.1
 CL-TEST::WHEN.1
 CL-TEST::WHEN.2
 CL-TEST::WHEN.3
 CL-TEST::WHEN.4
 CL-TEST::WHEN.5
 CL-TEST::WHEN.6
 CL-TEST::WHEN.7
 CL-TEST::WHEN.8
 CL-TEST::WHEN.9
 CL-TEST::WHEN.10
 CL-TEST::WHEN.11
 CL-TEST::WHEN.ERROR.1
 CL-TEST::WHEN.ERROR.2
 CL-TEST::WHEN.ERROR.3
 CL-TEST::DO.1
 CL-TEST::DO.2
 CL-TEST::DO.3
 CL-TEST::DO.4
 CL-TEST::DO.5
 CL-TEST::DO.6
 CL-TEST::DO.7
 CL-TEST::DO.8
 CL-TEST::DO.9
 CL-TEST::DO.10
 CL-TEST::DO.11
 CL-TEST::DO.12
 CL-TEST::DO.13
 CL-TEST::DO.14
 CL-TEST::DO.15
 CL-TEST::DO.16
 CL-TEST::DO.17
 CL-TEST::DO.18
 CL-TEST::DO.19
 CL-TEST::DO.20
 CL-TEST::DO.21
 CL-TEST::DO.22
 CL-TEST::DO.23
 CL-TEST::DO.ERROR.1
 CL-TEST::DO*.1
 CL-TEST::DO*.2
 CL-TEST::DO*.3
 CL-TEST::DO*.4
 CL-TEST::DO*.5
 CL-TEST::DO*.6
 CL-TEST::DO*.7
 CL-TEST::DO*.8
 CL-TEST::DO*.9
 CL-TEST::DO*.10
 CL-TEST::DO*.11
 CL-TEST::DO*.12
 CL-TEST::DO*.13
 CL-TEST::DO*.14
 CL-TEST::DO*.15
 CL-TEST::DO*.16
 CL-TEST::DO*.17
 CL-TEST::DO*.18
 CL-TEST::DO*.19
 CL-TEST::DO*.20
 CL-TEST::DO*.21
 CL-TEST::DO*.22
 CL-TEST::DO*.23
 CL-TEST::DO*.ERROR.1
 CL-TEST::DOLIST.1
 CL-TEST::DOLIST.2
 CL-TEST::DOLIST.3
 CL-TEST::DOLIST.4
 CL-TEST::DOLIST.5
 CL-TEST::DOLIST.6
 CL-TEST::DOLIST.7
 CL-TEST::DOLIST.8
 CL-TEST::DOLIST.9
 CL-TEST::DOLIST.10
 CL-TEST::DOLIST.11
 CL-TEST::DOLIST.12
Test CL-TEST::DOLIST.13 failed
Form: (DOLIST (CL-TEST::E (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::E> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DOLIST.14 failed
Form: (LET ((CL-TEST::E 1)) (DOLIST (CL-TEST::E (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (SETF CL-TEST::E 2))) CL-TEST::E)
Expected value:
          1
Actual value:
          2 [Actual value: #<error during printing>

 NIL
 CL-TEST::DOLIST.15
 CL-TEST::DOLIST.16
Test CL-TEST::DOLIST.17 failed
Form: (LET ((CL-TEST::X :GOOD)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X :BAD)) (DOLIST (CL-TEST::E NIL CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)))))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::DOLIST.18
 CL-TEST::DOLIST.19
 CL-TEST::DOLIST.ERROR.1
 CL-TEST::DOTIMES.1
 CL-TEST::DOTIMES.2
 CL-TEST::DOTIMES.3
 CL-TEST::DOTIMES.3A
 CL-TEST::DOTIMES.4
 CL-TEST::DOTIMES.5
 CL-TEST::DOTIMES.6
 CL-TEST::DOTIMES.7
 CL-TEST::DOTIMES.8
 CL-TEST::DOTIMES.9
 CL-TEST::DOTIMES.10
 CL-TEST::DOTIMES.11
 CL-TEST::DOTIMES.12
 CL-TEST::DOTIMES.13
 CL-TEST::DOTIMES.14
 CL-TEST::DOTIMES.15
 CL-TEST::DOTIMES.16
 CL-TEST::DOTIMES.17
 CL-TEST::DOTIMES.17A
 CL-TEST::DOTIMES.18
 CL-TEST::DOTIMES.18A
 CL-TEST::DOTIMES.19
 CL-TEST::DOTIMES.20
 CL-TEST::DOTIMES.21
 CL-TEST::DOTIMES.22
 CL-TEST::DOTIMES.23
 CL-TEST::DOTIMES.23A
 CL-TEST::DOTIMES.24
 CL-TEST::DOTIMES.25
 CL-TEST::DOTIMES.26
 CL-TEST::DOTIMES.ERROR.1
 CL-TEST::SLOOP.1
 CL-TEST::SLOOP.2
 CL-TEST::SLOOP.3
 CL-TEST::SLOOP.4
 CL-TEST::SLOOP.5
 CL-TEST::SLOOP.6
 CL-TEST::SLOOP.7
 CL-TEST::LOOP.ERROR.1
 CL-TEST::LOOP-FINISH.ERROR.1
 CL-TEST::LOOP.1.1
 CL-TEST::LOOP.1.2
 CL-TEST::LOOP.1.3
 CL-TEST::LOOP.1.4
 CL-TEST::LOOP.1.5
 CL-TEST::LOOP.1.6
 CL-TEST::LOOP.1.7
Test CL-TEST::LOOP.1.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::FROM 1.0 CL-TEST::TO 5.0 COUNT CL-TEST::X)
Expected value:
          5
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.9
 CL-TEST::LOOP.1.10
 CL-TEST::LOOP.1.11
 CL-TEST::LOOP.1.12
Test CL-TEST::LOOP.1.13 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO 10 CL-TEST::FROM 1 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (1 3 5 7 9)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.14 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO 10 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 2 4 6 8 10)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 2 CL-TEST::TO).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.15
 CL-TEST::LOOP.1.16
 CL-TEST::LOOP.1.17
 CL-TEST::LOOP.1.18
 CL-TEST::LOOP.1.19
 CL-TEST::LOOP.1.20
Test CL-TEST::LOOP.1.21 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::FROM 0 CL-TEST::TO 5 CL-TEST::BY CL-TEST::1/2 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 CL-TEST::1/2 1 CL-TEST::3/2 2 CL-TEST::5/2 3 CL-TEST::7/2 4 CL-TEST::9/2 5)
Actual value:
          #<Unbound-Variable CL-TEST::1/2> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.22
 CL-TEST::LOOP.1.23
 CL-TEST::LOOP.1.24
 CL-TEST::LOOP.1.25
 CL-TEST::LOOP.1.26
Test CL-TEST::LOOP.1.27 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::ABOVE 6 CL-TEST::FROM 14 CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (14 12 10 8)
Actual value:
#<Simple-Condition Break> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.28
 CL-TEST::LOOP.1.29
 CL-TEST::LOOP.1.30
 CL-TEST::LOOP.1.31
Test CL-TEST::LOOP.1.32 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C (CL-TEST::I 0)) (VALUES (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY (PROGN (SETQ CL-TEST::C (INCF CL-TEST::I)) 2) CL-TEST::BELOW (PROGN (SETQ CL-TEST::B (INCF CL-TEST::I)) 9) CL-TEST::FROM (PROGN (SETQ CL-TEST::A (INCF CL-TEST::I)) 0) CL-TEST::COLLECT CL-TEST::X) CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::I))
Expected value:
          (0 2 4 6 8)
          3
          2
          1
          3
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY (PROGN (SETQ CL-TEST::C (INCF CL-TEST::I)) 2) CL-TEST::BELOW).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.33
 CL-TEST::LOOP.1.34
 CL-TEST::LOOP.1.35
 CL-TEST::LOOP.1.36
Test CL-TEST::LOOP.1.37 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::BY 3 CL-TEST::BELOW 20 CL-TEST::COLLECT CL-TEST::X)
Expected value:
          (0 3 6 9 12 15 18)
Actual value:
          #<Simple-Error CL-TEST::BY is an unknown keyword in FOR or AS clause in LOOP.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::BY 3 CL-TEST::BELOW).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.38
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.44 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1))
Actual value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.45 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::FROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1))
Actual value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(5 1) evaluated to #C(5 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(5 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.46 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(5 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(5 1) #C(4 1) #C(3 1) #C(2 1) #C(1 1))
Actual value:
          (#C(5 1) #C(4 1) #C(3 1) #C(2 1) #C(1 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(10 1) evaluated to #C(10 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(10 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.47 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::DOWNFROM #C(10 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(10 1) #C(8 1) #C(6 1) #C(4 1) #C(2 1))
Actual value:
          (#C(10 1) #C(8 1) #C(6 1) #C(4 1) #C(2 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.48 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1))
Actual value:
          (#C(0 1) #C(1 1) #C(2 1) #C(3 1) #C(4 1)) [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Warning The form #C(0 1) evaluated to #C(0 1), which was not of the anticipated type REAL.
Current LOOP context: (CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT).>
Test CL-TEST::LOOP.1.49 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 5 CL-TEST::FOR CL-TEST::C CL-TEST::UPFROM #C(0 1) CL-TEST::BY 2 CL-TEST::COLLECT CL-TEST::C)
Expected value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1))
Actual value:
          (#C(0 1) #C(2 1) #C(4 1) #C(6 1) #C(8 1)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.50 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 10 CL-TEST::TO 15 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.51 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 10 CL-TEST::BELOW 15 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.52
Test CL-TEST::LOOP.1.53 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 0 CL-TEST::TO 10 CL-TEST::BY 2 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.54 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 1 CL-TEST::TO 4 CL-TEST::FOR NIL CL-TEST::FROM 1 CL-TEST::TO 10 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.55 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 5 CL-TEST::DOWNTO 0 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.1.56 failed
Form: (LET ((CL-TEST::I 0)) (LOOP CL-TEST::FOR NIL CL-TEST::FROM 5 CL-TEST::ABOVE 0 CL-TEST::COLLECT (INCF CL-TEST::I)))
Expected value:
          (1 2 3 4 5)
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.1.57
 CL-TEST::LOOP.1.58
 CL-TEST::LOOP.1.59
 CL-TEST::LOOP.1.60
 CL-TEST::LOOP.1.61
 CL-TEST::LOOP.1.62
 CL-TEST::LOOP.1.63
 CL-TEST::LOOP.1.64
 CL-TEST::LOOP.1.65
 CL-TEST::LOOP.2.1
 CL-TEST::LOOP.2.2
 CL-TEST::LOOP.2.3
 CL-TEST::LOOP.2.4
 CL-TEST::LOOP.2.5
 CL-TEST::LOOP.2.6
 CL-TEST::LOOP.2.7
 CL-TEST::LOOP.2.8
 CL-TEST::LOOP.2.9
 CL-TEST::LOOP.2.10
 CL-TEST::LOOP.2.11
 CL-TEST::LOOP.2.12
 CL-TEST::LOOP.2.13
Test CL-TEST::LOOP.2.14 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) CL-TEST::COLLECT CL-TEST::X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR CL-TEST::X CL-TEST::IN (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LOOP.2.15 failed
Form: (CL-TEST:SIGNALS-ERROR (LOOP CL-TEST::FOR (CL-TEST::X . CL-TEST::X) CL-TEST::IN (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) CL-TEST::COLLECT CL-TEST::X) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Duplicated LOOP iteration variable CL-TEST::X.
Current LOOP context: (CL-TEST::FOR (CL-TEST::X . CL-TEST::X) CL-TEST::IN (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) CL-TEST::COLLECT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::LOOP.2.16
 CL-TEST::LOOP.2.17
 CL-TEST::LOOP.2.18
 CL-TEST::LOOP.2.19
 CL-TEST::LOOP.2.20
 CL-TEST::LOOP.2.21
 CL-TEST::LOOP.2.22
 CL-TEST::LOOP.2.23
 CL-TEST::LOOP.2.24
 CL-TEST::LOOP.2.25
 CL-TEST::LOOP.2.26
 CL-TEST::DEFCLASS-1-DEFCLASS-RETURNS-CLASS
 CL-TEST::DEFCLASS-1-IS-IN-ITS-METACLASS
Test CL-TEST::DEFCLASS-1S-ARE-STANDARD-OBJECTS failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::DEFCLASS-1) (QUOTE STANDARD-OBJECT))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS-1-ALLOCATE-INSTANCE
 CL-TEST::DEFCLASS-2-DEFCLASS-RETURNS-CLASS
 CL-TEST::DEFCLASS-2-IS-IN-ITS-METACLASS
Test CL-TEST::DEFCLASS-2S-ARE-STANDARD-OBJECTS failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::DEFCLASS-2) (QUOTE STANDARD-OBJECT))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS-2-HAS-SLOT-NAMED-SLOT1
 CL-TEST::DEFCLASS-2-HAS-SLOT-NAMED-SLOT2
 CL-TEST::DEFCLASS-2-HAS-SLOT-NAMED-SLOT3
 CL-TEST::DEFCLASS-2-ALLOCATE-INSTANCE
 CL-TEST::DEFCLASS-3-DEFCLASS-RETURNS-CLASS
 CL-TEST::DEFCLASS-3-IS-IN-ITS-METACLASS
Test CL-TEST::DEFCLASS-3S-ARE-STANDARD-OBJECTS failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::DEFCLASS-3) (QUOTE STANDARD-OBJECT))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS-3-ALLOCATE-INSTANCE
 CL-TEST::DEFCLASS-4-DEFCLASS-RETURNS-CLASS
 CL-TEST::DEFCLASS-4-IS-IN-ITS-METACLASS
Test CL-TEST::DEFCLASS-4S-ARE-STANDARD-OBJECTS failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::DEFCLASS-4) (QUOTE STANDARD-OBJECT))
Expected value:
          T
          T
Actual value: NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS-4-HAS-SLOT-NAMED-SLOT1
 CL-TEST::DEFCLASS-4-HAS-SLOT-NAMED-SLOT4
 CL-TEST::DEFCLASS-4-ALLOCATE-INSTANCE
 CL-TEST::CLASS-READERS/WRITERS/ACCESSORS-ARE-GENERIC-FUNCTIONS
 CL-TEST::CLASS-ACCESSORS-HAVE-GENERIC-SETF-FUNCTIONS
 CL-TEST::CLASS-01.1
 CL-TEST::CLASS-01.2
 CL-TEST::CLASS-01.3
 CL-TEST::CLASS-02.1
 CL-TEST::CLASS-02.2
 CL-TEST::CLASS-02.3
 CL-TEST::CLASS-03.1
 CL-TEST::CLASS-03.2
 CL-TEST::CLASS-03.3
 CL-TEST::CLASS-04.1
Test CL-TEST::CLASS-04.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION CL-TEST::S1-R) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-04.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION CL-TEST::S2-W) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-04.4 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION CL-TEST::S3-A) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-04.5 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION (SETF CL-TEST::S3-A)) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-05.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-05))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-05)))) (VALUES (NOT (EQL CL-TEST::C1 CL-TEST::C2)) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S1)) 12) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S1)) 17) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S1)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S1))) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S2)) (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S2)) (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S2)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S2))) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (QUOTE CL-TEST::X)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S3)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S3)) (QUOTE CL-TEST::Y)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S3)) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (QUOTE CL-TEST::Z)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S3)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S3))) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-05)) (QUOTE CL-TEST::S3))))
Expected value:
          T
          (12 17 12 17)
          (CL-TEST::A CL-TEST::B CL-TEST::A CL-TEST::B)
          (CL-TEST::X CL-TEST::X CL-TEST::X CL-TEST::Y CL-TEST::Y CL-TEST::Y CL-TEST::Z CL-TEST::Z CL-TEST::Z)
          CL-TEST::Z
Actual value:
          #<Simple-Error The slot CL-TEST::S3 is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-05 800B4337>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-06.1
 CL-TEST::CLASS-06.2
 CL-TEST::CLASS-07.1
 CL-TEST::CLASS-07.2
 CL-TEST::CLASS-07.3
 CL-TEST::CLASS-07.4
 CL-TEST::CLASS-07.5
 CL-TEST::CLASS-07.6
 CL-TEST::CLASS-07.7
 CL-TEST::CLASS-07.8
 CL-TEST::CLASS-07.9
 CL-TEST::CLASS-07.10
 CL-TEST::CLASS-07.11
 CL-TEST::CLASS-07.12
 CL-TEST::CLASS-08.1
 CL-TEST::CLASS-09.1
 CL-TEST::CLASS-09.2
 CL-TEST::CLASS-09.3
 CL-TEST::CLASS-09.4
 CL-TEST::CLASS-10.1
 CL-TEST::CLASS-10.2
 CL-TEST::CLASS-11.1
 CL-TEST::CLASS-11.2
 CL-TEST::CLASS-12.1
 CL-TEST::CLASS-12.2
Test CL-TEST::CLASS-13.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-13))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-13) :S1 (QUOTE CL-TEST::FOO)))) (VALUES (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::S1)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::S1))))
Expected value:
          CL-TEST::FOO
          CL-TEST::FOO
Actual value:
          #<Simple-Error The slot CL-TEST::S1 is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-13 800B3BA7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-14.1
 CL-TEST::CLASS-15.2
 CL-TEST::CLASS-15.3
 CL-TEST::CLASS-15.4
 CL-TEST::CLASS-15.5
 CL-TEST::CLASS-15.6
 CL-TEST::CLASS-15.7
 CL-TEST::CLASS-16.1
 CL-TEST::CLASS-16.2
 CL-TEST::CLASS-16.3
 CL-TEST::CLASS-17.1
 CL-TEST::CLASS-17.2
 CL-TEST::CLASS-17.3
 CL-TEST::CLASS-18.1
 CL-TEST::CLASS-18.2
 CL-TEST::CLASS-18.3
 CL-TEST::CLASS-18.4
 CL-TEST::CLASS-18.5
 CL-TEST::CLASS-19.1
 CL-TEST::CLASS-19.2
 CL-TEST::CLASS-19.3
 CL-TEST::CLASS-20.1
 CL-TEST::CLASS-20.2
 CL-TEST::CLASS-20.3
 CL-TEST::CLASS-21.1
 CL-TEST::CLASS-21.2
 CL-TEST::CLASS-21.3
 CL-TEST::CLASS-21.4
 CL-TEST::CLASS-21.5
 CL-TEST::CLASS-22.1
 CL-TEST::CLASS-23.1
 CL-TEST::CLASS-23.2
 CL-TEST::CLASS-23.3
 CL-TEST::CLASS-23.4
 CL-TEST::CLASS-24.1
 CL-TEST::CLASS-24.2
 CL-TEST::CLASS-24.3
 CL-TEST::CLASS-24.4
 CL-TEST::CLASS-25.1
 CL-TEST::CLASS-25.2
 CL-TEST::CLASS-25.3
 CL-TEST::CLASS-25.4
 CL-TEST::CLASS-25.5
 CL-TEST::CLASS-25.6
Test CL-TEST::CLASS-26.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-26)))) (VALUES (SLOT-BOUNDP CL-TEST::C (QUOTE CL-TEST::S1-26)) (SETF (CL-TEST::S1-26 CL-TEST::C) (QUOTE CL-TEST::X)) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::S1-26)) (CL-TEST::TYPEP* (FUNCTION (SETF CL-TEST::S1-26)) (QUOTE GENERIC-FUNCTION))))
Expected value:
          NIL
          CL-TEST::X
          CL-TEST::X
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-27.1 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::CLASS-27)))) (VALUES (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CLASS-27) (QUOTE STANDARD-OBJECT)) (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CLASS-27) T) (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CLASS-27) (FIND-CLASS (QUOTE STANDARD-OBJECT))) (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CLASS-27) (FIND-CLASS T)) (CL-TEST::SUBTYPEP* CLASS (QUOTE STANDARD-OBJECT)) (CL-TEST::SUBTYPEP* CLASS T) (CL-TEST::SUBTYPEP* CLASS (FIND-CLASS (QUOTE STANDARD-OBJECT))) (CL-TEST::SUBTYPEP* CLASS (FIND-CLASS T))))
Expected value:
          T
          T
          T
          T
          T
          T
          T
          T
Actual value:
          #<Simple-Error The slot SYSTEM.INTERNALS::CLASS-PRECEDENCE-LIST is missing from the class #<Standard-Class SYMBOL 800B4117>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-27.2
 CL-TEST::CLASS-27.3
Test CL-TEST::CLASS-28.1 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::CLASS-28)))) (FUNCALL CL-TEST::*CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*) (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-28)))) (LIST (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CLASS-28)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::S1 CL-TEST::S2))) (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*)))))
Expected value:
          ((5 10) (T T T (6 11) (6 11)))
Actual value:
          #<Type-Error C0081D67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-28.2 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::CLASS-28)))) (FUNCALL CL-TEST::*CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*) (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-28) :S1 17))) (LIST (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CLASS-28)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::S1 CL-TEST::S2))) (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*)))))
Expected value:
          ((5 10) (T T T (17 11) (5 11)))
Actual value:
          #<Type-Error C16E28C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-28.3 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::CLASS-28)))) (FUNCALL CL-TEST::*CLASS-28-RESET-FN* 5 10) (LIST (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*) (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-28) :S2 17))) (LIST (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CLASS-28)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::S1 CL-TEST::S2))) (FUNCALL CL-TEST::*CLASS-28-QUERY-FN*)))))
Expected value:
          ((5 10) (T T T (6 17) (6 10)))
Actual value:
          #<Type-Error C16F8D77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0201.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0201)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A)) (CL-TEST::MAP-TYPEP* CL-TEST::C (LIST (QUOTE CL-TEST::CLASS-0201) (QUOTE CL-TEST::CLASS-0202) (FIND-CLASS (QUOTE CL-TEST::CLASS-0201)) (FIND-CLASS (QUOTE CL-TEST::CLASS-0202)))) (CLASS-NAME (CLASS-OF CL-TEST::C))))
Expected value:
          (T NIL NIL)
          (T T T)
          CL-TEST::X
          (T NIL T NIL)
          CL-TEST::CLASS-0201
Actual value:
          #<Type-Error C170DE27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0202.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0202)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::E))) (CL-TEST::MAP-TYPEP* CL-TEST::C (LIST (QUOTE CL-TEST::CLASS-0201) (QUOTE CL-TEST::CLASS-0202) (FIND-CLASS (QUOTE CL-TEST::CLASS-0201)) (FIND-CLASS (QUOTE CL-TEST::CLASS-0202)))) (CLASS-NAME (CLASS-OF CL-TEST::C))))
Expected value:
          (T NIL NIL NIL T NIL)
          (CL-TEST::X CL-TEST::Y)
          (T T T T)
          CL-TEST::CLASS-0202
Actual value:
          #<Type-Error C17262C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0203.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0203))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0204)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::EQT (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) CL-TEST::C1) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          (NIL NIL)
          (NIL NIL NIL NIL)
          CL-TEST::X
          (T NIL)
          (T NIL NIL NIL)
          CL-TEST::X
          CL-TEST::X
          T
          (NIL NIL)
          (NIL NIL NIL NIL)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0203 C00B2D37>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0203.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0203))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0204)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::EQT (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::A)) CL-TEST::C2) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          (NIL NIL)
          (NIL NIL NIL NIL)
          CL-TEST::X
          (T NIL)
          (T NIL NIL NIL)
          CL-TEST::X
          CL-TEST::X
          T
          (NIL NIL)
          (NIL NIL NIL NIL)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0203 C00B2D37>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0205A.1
 CL-TEST::CLASS-0205B.1
Test CL-TEST::CLASS-0206.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0206A))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0206B)))) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B))) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (PROGN (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::B)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X))) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C1 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::C2 (QUOTE (CL-TEST::A CL-TEST::B))) (PROGN (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::B)) NIL)))
Expected value:
          (NIL NIL)
          (NIL NIL)
          CL-TEST::X
          CL-TEST::Y
          (T T)
          (NIL NIL)
          (CL-TEST::X CL-TEST::Y)
          CL-TEST::X
          CL-TEST::Y
          (NIL NIL)
          (T T)
          (CL-TEST::X CL-TEST::Y)
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0206A C00B3E07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0207.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0207A))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0207B))) (CL-TEST::C3 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0207C)))) (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C3 (QUOTE CL-TEST::A)) (VALUES (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::Y)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::Z)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::X
          T
          NIL
          NIL
          CL-TEST::X
          CL-TEST::Y
          T
          T
          NIL
          CL-TEST::X
          CL-TEST::Y
          CL-TEST::Z
          T
          T
          T
          CL-TEST::X
          CL-TEST::Y
          CL-TEST::Z
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0207A C00B2397>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0208.1 failed
Form: (VALUES (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0208A)) (QUOTE CL-TEST::A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0208B)) (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::X
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0208A C00B45A7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-REDEFINITION.1 failed
Form: (LET* ((CL-TEST::COBJ1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0209A NIL ((CL-TEST::A :ALLOCATION :CLASS :INITFORM (QUOTE CL-TEST::X))))))) (CL-TEST::COBJ2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0209B (CL-TEST::CLASS-0209A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ3 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0209A NIL ((CL-TEST::A :ALLOCATION :CLASS :INITFORM (QUOTE CL-TEST::X))))))) (CL-TEST::COBJ4 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0209B (CL-TEST::CLASS-0209A) ((CL-TEST::A :ALLOCATION :INSTANCE))))))) (VALUES (CL-TEST::EQT CL-TEST::COBJ1 CL-TEST::COBJ3) (CL-TEST::EQT CL-TEST::COBJ2 CL-TEST::COBJ4) (CLASS-NAME CL-TEST::COBJ1) (CLASS-NAME CL-TEST::COBJ2) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0209A)) (QUOTE CL-TEST::A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0209B)) (QUOTE CL-TEST::A))))
Expected value:
          T
          T
          CL-TEST::CLASS-0209A
          CL-TEST::CLASS-0209B
          CL-TEST::X
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0209A C1800C07>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-REDEFINITION.2 failed
Form: (LET* ((CL-TEST::COBJ1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210A NIL ((CL-TEST::A :ALLOCATION :CLASS)))))) (CL-TEST::COBJ2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210B (CL-TEST::CLASS-0210A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ3 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210C (CL-TEST::CLASS-0210B) ((CL-TEST::A :ALLOCATION :CLASS)))))) (CL-TEST::DUMMY (PROGN (SETF (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210A)) (QUOTE CL-TEST::A)) :BAD1) (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210B)) (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210C)) NIL)) (CL-TEST::COBJ4 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210A NIL ((CL-TEST::A :ALLOCATION :CLASS)))))) (CL-TEST::COBJ5 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210B (CL-TEST::CLASS-0210A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ6 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0210C (CL-TEST::CLASS-0210B) ((CL-TEST::A :ALLOCATION :CLASS))))))) (LIST (CL-TEST::EQT CL-TEST::COBJ1 CL-TEST::COBJ4) (CL-TEST::EQT CL-TEST::COBJ2 CL-TEST::COBJ5) (CL-TEST::EQT CL-TEST::COBJ3 CL-TEST::COBJ6) (CLASS-NAME CL-TEST::COBJ1) (CLASS-NAME CL-TEST::COBJ2) (CLASS-NAME CL-TEST::COBJ3) (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210A))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210B))) (CL-TEST::C3 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0210C)))) (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C3 (QUOTE CL-TEST::A)) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X)) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A))) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::Y)) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A))) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A))) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::Z)) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A))) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A))) (AND (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A)))))))
Expected value:
          (T T T CL-TEST::CLASS-0210A CL-TEST::CLASS-0210B CL-TEST::CLASS-0210C (CL-TEST::X CL-TEST::X NIL NIL CL-TEST::Y CL-TEST::X CL-TEST::Y NIL CL-TEST::Z CL-TEST::X CL-TEST::Y CL-TEST::Z))
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0210A C1827EA7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-REDEFINITION.3 failed
Form: (LET* ((CL-TEST::COBJ1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-REDEF-03A NIL ((CL-TEST::A :ALLOCATION :CLASS :INITFORM (QUOTE CL-TEST::X))))))) (CL-TEST::COBJ2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-REDEF-03B (CL-TEST::CLASS-REDEF-03A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ4 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-REDEF-03B (CL-TEST::CLASS-REDEF-03A) ((CL-TEST::A :ALLOCATION :INSTANCE)))))) (CL-TEST::COBJ3 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-REDEF-03A NIL ((CL-TEST::A :ALLOCATION :CLASS :INITFORM (QUOTE CL-TEST::X)))))))) (VALUES (CL-TEST::EQT CL-TEST::COBJ1 CL-TEST::COBJ3) (CL-TEST::EQT CL-TEST::COBJ2 CL-TEST::COBJ4) (CLASS-NAME CL-TEST::COBJ1) (CLASS-NAME CL-TEST::COBJ2) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-REDEF-03A)) (QUOTE CL-TEST::A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-REDEF-03B)) (QUOTE CL-TEST::A))))
Expected value:
          T
          T
          CL-TEST::CLASS-REDEF-03A
          CL-TEST::CLASS-REDEF-03B
          CL-TEST::X
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-REDEF-03A C1885657>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0211.1 failed
Form: (VALUES (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0211A)) (QUOTE CL-TEST::A)) (SLOT-VALUE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0211B)) (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::X
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0211B C00B3B47>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0212.1
 CL-TEST::CLASS-0212.2
 CL-TEST::CLASS-0212.3
 CL-TEST::CLASS-0212.4
 CL-TEST::CLASS-0212.5
 CL-TEST::CLASS-0213.1
 CL-TEST::CLASS-0213.2
Test CL-TEST::CLASS-0214.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0214A) :A1 (QUOTE CL-TEST::X)))) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0214A)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0214B)) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A)) (SLOT-EXISTS-P CL-TEST::C (QUOTE CL-TEST::B))))
Expected value:
          T
          NIL
          CL-TEST::X
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0214A C00B21D7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0214.2 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0214B) :A1 (QUOTE CL-TEST::Y)))) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0214A)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0214B)) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C (QUOTE CL-TEST::B))))
Expected value:
          T
          T
          CL-TEST::Y
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0214B C00B51D7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0215.1
Test CL-TEST::CLASS-0215.2 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0215B) :A1 (QUOTE CL-TEST::Y)))) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0215A)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0215B)) (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A))))
Expected value:
          T
          T
          CL-TEST::Y
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0215B C00B5E77>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0216.1
 CL-TEST::CLASS-0216.2
 CL-TEST::CLASS-0217.1
 CL-TEST::CLASS-0217.2
 CL-TEST::CLASS-0217.3
 CL-TEST::CLASS-0217.4
 CL-TEST::CLASS-0218.1
 CL-TEST::CLASS-0218.2
 CL-TEST::CLASS-0219.1
 CL-TEST::CLASS-0219.2
 CL-TEST::CLASS-0220.1
 CL-TEST::CLASS-0220.2
 CL-TEST::CLASS-0220.3
 CL-TEST::CLASS-0220.4
 CL-TEST::CLASS-0221.1
 CL-TEST::CLASS-0221.2
 CL-TEST::CLASS-0221.3
 CL-TEST::CLASS-0222.1
 CL-TEST::CLASS-0222.2
 CL-TEST::CLASS-0223.1
Test CL-TEST::CLASS-0301.1 failed
Form: (LET ((CL-TEST::C (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0301C)))) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0301A)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0301B)) (CL-TEST::TYPEP* CL-TEST::C (QUOTE CL-TEST::CLASS-0301C)) (CL-TEST::TYPEP* CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CLASS-0301A))) (CL-TEST::TYPEP* CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CLASS-0301B))) (CL-TEST::TYPEP* CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CLASS-0301C))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::A)) (QUOTE CL-TEST::W)) (SETF (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::B)) (QUOTE CL-TEST::X)) (SETF (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::C)) (QUOTE CL-TEST::Y)) (SETF (SLOT-VALUE CL-TEST::C (QUOTE CL-TEST::D)) (QUOTE CL-TEST::Z)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          T
          T
          T
          T
          T
          T
          (NIL NIL NIL NIL)
          CL-TEST::W
          CL-TEST::X
          CL-TEST::Y
          CL-TEST::Z
          (T T T T)
          (CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z)
Actual value:
          #<Type-Error C19515B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0302.1
Test CL-TEST::CLASS-0303.1 failed
Form: (LET ((CL-TEST::C1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0303A))) (CL-TEST::C2 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0303B))) (CL-TEST::C3 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0303C)))) (SLOT-MAKUNBOUND CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::C2 (QUOTE CL-TEST::B)) (VALUES (LOOP CL-TEST::FOR CL-TEST::C CL-TEST::IN (LIST CL-TEST::C1 CL-TEST::C2 CL-TEST::C3) CL-TEST::COLLECT (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::C (QUOTE (CL-TEST::A CL-TEST::B)))) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X1)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A))) (LIST (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X2)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A))) (LIST (SETF (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::X3)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::A))) (LIST (SETF (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y1)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C2 (QUOTE CL-TEST::B)) (CL-TEST::SLOT-BOUNDP* CL-TEST::C3 (QUOTE CL-TEST::B))) (LIST (SETF (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y2)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::B)) (SLOT-BOUNDP CL-TEST::C3 (QUOTE CL-TEST::B))) (LIST (SETF (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y3)) (SLOT-VALUE CL-TEST::C1 (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::C2 (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::C3 (QUOTE CL-TEST::B)))))
Expected value:
          ((NIL NIL) (NIL NIL) (NIL NIL))
          (CL-TEST::X1 NIL CL-TEST::X1)
          (CL-TEST::X2 CL-TEST::X1 CL-TEST::X2 CL-TEST::X1)
          (CL-TEST::X3 CL-TEST::X3 CL-TEST::X2 CL-TEST::X3)
          (CL-TEST::Y1 CL-TEST::Y1 NIL NIL)
          (CL-TEST::Y2 CL-TEST::Y1 CL-TEST::Y2 NIL)
          (CL-TEST::Y3 CL-TEST::Y1 CL-TEST::Y2 CL-TEST::Y3)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CLASS-0303A C00B4B47>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-0304.1
 CL-TEST::CLASS-0305.1
 CL-TEST::CLASS-0306.1
 CL-TEST::CLASS-0306.2
 CL-TEST::CLASS-0307.1
 CL-TEST::CLASS-0308.1
Test CL-TEST::CLASS-0309.1 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::CLASS-0309)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0309 NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C)))))) (CL-TEST::OBJ1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0309)))) (SETF (CLASS-NAME CL-TEST::CLASS1) NIL) (LET ((CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0309 NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C))))))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ1) CL-TEST::CLASS1) (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::CLASS2) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS1) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS2)))))
Expected value:
          T
          NIL
          T
          NIL
Actual value:
          #<Type-Error C1A0AAF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0310.1 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::CLASS-0310A)) NIL (FIND-CLASS (QUOTE CL-TEST::CLASS-0310B)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0310A NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C)))))) (CL-TEST::OBJ1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0310A)))) (SETF (CLASS-NAME CL-TEST::CLASS1) (QUOTE CL-TEST::CLASS-0310B)) (LET ((CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0310A NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C))))))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ1) CL-TEST::CLASS1) (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::CLASS2) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS1) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS2) (CLASS-NAME CL-TEST::CLASS1) (CLASS-NAME CL-TEST::CLASS2)))))
Expected value:
          T
          NIL
          T
          NIL
          CL-TEST::CLASS-0310B
          CL-TEST::CLASS-0310A
Actual value:
          #<Type-Error C1A2DED7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CLASS-0311.1 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::CLASS-0311)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0311 NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C)))))) (CL-TEST::OBJ1 (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-0311)))) (SETF (FIND-CLASS (QUOTE CL-TEST::CLASS-0311)) NIL) (LET ((CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::CLASS-0311 NIL ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C))))))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ1) CL-TEST::CLASS1) (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::CLASS2) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS1) (CL-TEST::TYPEP* CL-TEST::OBJ1 CL-TEST::CLASS2) (CLASS-NAME CL-TEST::CLASS1) (CLASS-NAME CL-TEST::CLASS2) (CL-TEST::EQT (FIND-CLASS (QUOTE CL-TEST::CLASS-0311)) CL-TEST::CLASS1) (CL-TEST::EQT (FIND-CLASS (QUOTE CL-TEST::CLASS-0311)) CL-TEST::CLASS2)))))
Expected value:
          T
          NIL
          T
          NIL
          CL-TEST::CLASS-0311
          CL-TEST::CLASS-0311
          NIL
          T
Actual value:
          #<Type-Error C1A54BF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.1 NIL (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::B CL-TEST::E)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.2 NIL ((CL-TEST::S1 :INITARG :FOO)) (:DEFAULT-INITARGS :FOO 1 :FOO 2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.3 NIL ((CL-TEST::S1 :INITFORM 0 :INITFORM 2))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.4 NIL ((CL-TEST::S1 :INITFORM 0 :INITFORM 0))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.5 NIL ((CL-TEST::S1 :TYPE FIXNUM :TYPE CHARACTER))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.6 NIL ((CL-TEST::S1 :TYPE T :TYPE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.7 NIL ((CL-TEST::S1 :DOCUMENTATION "foo" :DOCUMENTATION "bar"))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.9 NIL ((CL-TEST::S1 :ALLOCATION :CLASS :ALLOCATION :INSTANCE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.10 NIL ((CL-TEST::S1 :ALLOCATION :CLASS :ALLOCATION :CLASS))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.11 NIL ((CL-TEST::S1 :ALLOCATION :INSTANCE :ALLOCATION :INSTANCE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.12 NIL ((CL-TEST::S1 #:G21253 NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.13 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::ERRONEOUS-CLASS.13 NIL (CL-TEST::A CL-TEST::B CL-TEST::C) (#:G21254)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.14 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-14 NIL (CL-TEST::FOO CL-TEST::FOO)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.15 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-15 NIL (CL-TEST::FOO (CL-TEST::FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.16 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-16 NIL ((CL-TEST::FOO :INITARG CL-TEST::F1)) (:DEFAULT-INITARGS :F1 10 :F1 20)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.17 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-17 NIL ((CL-TEST::FOO :INITFORM 10 :INITFORM 20 :READER CL-TEST::DEFCLASS-ERROR-4/FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.18 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-18 NIL ((CL-TEST::FOO :INITFORM 10 :INITFORM 10 :READER CL-TEST::DEFCLASS-ERROR-5/FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.19 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-19 NIL ((CL-TEST::FOO :INITARG CL-TEST::F1 :TYPE T :TYPE T :READER CL-TEST::DEFCLASS-ERROR-6/FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.20 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-20 NIL ((CL-TEST::FOO :INITARG CL-TEST::F1 :DOCUMENTATION "x" :READER CL-TEST::DEFCLASS-ERROR-7/FOO :DOCUMENTATION "x"))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.21 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-21 NIL ((CL-TEST::FOO #:UNKNOWN-SLOT-OPTION NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.ERROR.22 failed
Form: (LET ((CL-TEST::OPTION (GENTEMP "UNKNOWN-OPTION" (SYMBOL-PACKAGE :FOO)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFCLASS CL-TEST::DEFCLASS-ERROR-22 NIL (CL-TEST::FOO CL-TEST::BAR) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::OPTION) NIL)) PROGRAM-ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFCLASS.ERROR.23
 CL-TEST::DEFCLASS.ERROR.24
Test CL-TEST::DEFCLASS.FORWARD-REF.1 failed
Form: (LET ((CL-TEST::C1 (GENSYM)) (CL-TEST::C2 (GENSYM))) (LET ((CL-TEST::CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2)) NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS1 (QUOTE CLASS))) 1 (LET ((CL-TEST::CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) NIL NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS2 (QUOTE CLASS))) 2 (LET ((CL-TEST::I1 (MAKE-INSTANCE CL-TEST::C1)) (CL-TEST::I2 (MAKE-INSTANCE CL-TEST::C2))) (COND ((NOT (TYPEP CL-TEST::I1 CL-TEST::C1)) 3) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS1)) 4) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C2)) 5) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS2)) 6) ((TYPEP CL-TEST::I2 CL-TEST::C1) 7) ((TYPEP CL-TEST::I2 CL-TEST::CLASS1) 8) ((NOT (TYPEP CL-TEST::I2 CL-TEST::C2)) 9) ((NOT (TYPEP CL-TEST::I2 CL-TEST::CLASS2)) 10) (T (QUOTE CL-TEST::GOOD)))))))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No class named #:G112439.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.FORWARD-REF.2 failed
Form: (LET ((CL-TEST::C1 (GENSYM)) (CL-TEST::C2 (GENSYM)) (CL-TEST::C3 (GENSYM))) (LET ((CL-TEST::CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3)) NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS1 (QUOTE CLASS))) 1 (LET ((CL-TEST::CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) NIL NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS2 (QUOTE CLASS))) 2 (LET ((CL-TEST::CLASS3 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3) NIL NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS3 (QUOTE CLASS))) 3 (LET ((CL-TEST::I1 (MAKE-INSTANCE CL-TEST::C1)) (CL-TEST::I2 (MAKE-INSTANCE CL-TEST::C2)) (CL-TEST::I3 (MAKE-INSTANCE CL-TEST::C3))) (COND ((NOT (TYPEP CL-TEST::I1 CL-TEST::C1)) 4) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS1)) 5) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C2)) 6) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS2)) 7) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C3)) 8) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS3)) 9) ((TYPEP CL-TEST::I2 CL-TEST::C1) 10) ((TYPEP CL-TEST::I2 CL-TEST::CLASS1) 11) ((TYPEP CL-TEST::I3 CL-TEST::C1) 12) ((TYPEP CL-TEST::I3 CL-TEST::CLASS1) 13) ((NOT (TYPEP CL-TEST::I2 CL-TEST::C2)) 14) ((NOT (TYPEP CL-TEST::I2 CL-TEST::CLASS2)) 15) ((NOT (TYPEP CL-TEST::I3 CL-TEST::C3)) 16) ((NOT (TYPEP CL-TEST::I3 CL-TEST::CLASS3)) 17) ((TYPEP CL-TEST::I2 CL-TEST::C3) 18) ((TYPEP CL-TEST::I2 CL-TEST::CLASS3) 19) ((TYPEP CL-TEST::I3 CL-TEST::C2) 20) ((TYPEP CL-TEST::I3 CL-TEST::CLASS2) 21) (T (QUOTE CL-TEST::GOOD)))))))))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No class named #:G112441.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.FORWARD-REF.3 failed
Form: (LET ((CL-TEST::C1 (GENSYM)) (CL-TEST::C2 (GENSYM)) (CL-TEST::C3 (GENSYM))) (LET ((CL-TEST::CLASS1 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2)) NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS1 (QUOTE CLASS))) 1 (LET ((CL-TEST::CLASS2 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3)) NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS2 (QUOTE CLASS))) 2 (LET ((CL-TEST::CLASS3 (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3) NIL NIL))))) (IF (NOT (TYPEP CL-TEST::CLASS3 (QUOTE CLASS))) 3 (LET ((CL-TEST::I1 (MAKE-INSTANCE CL-TEST::C1)) (CL-TEST::I2 (MAKE-INSTANCE CL-TEST::C2)) (CL-TEST::I3 (MAKE-INSTANCE CL-TEST::C3))) (COND ((NOT (TYPEP CL-TEST::I1 CL-TEST::C1)) 4) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS1)) 5) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C2)) 6) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS2)) 7) ((NOT (TYPEP CL-TEST::I1 CL-TEST::C3)) 8) ((NOT (TYPEP CL-TEST::I1 CL-TEST::CLASS3)) 9) ((TYPEP CL-TEST::I2 CL-TEST::C1) 10) ((TYPEP CL-TEST::I2 CL-TEST::CLASS1) 11) ((TYPEP CL-TEST::I3 CL-TEST::C1) 12) ((TYPEP CL-TEST::I3 CL-TEST::CLASS1) 13) ((NOT (TYPEP CL-TEST::I2 CL-TEST::C2)) 14) ((NOT (TYPEP CL-TEST::I2 CL-TEST::CLASS2)) 15) ((NOT (TYPEP CL-TEST::I3 CL-TEST::C3)) 16) ((NOT (TYPEP CL-TEST::I3 CL-TEST::CLASS3)) 17) ((NOT (TYPEP CL-TEST::I2 CL-TEST::C3)) 18) ((NOT (TYPEP CL-TEST::I2 CL-TEST::CLASS3)) 19) ((TYPEP CL-TEST::I3 CL-TEST::C2) 20) ((TYPEP CL-TEST::I3 CL-TEST::CLASS2) 21) (T (QUOTE CL-TEST::GOOD)))))))))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error No class named #:G112444.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFCLASS.FORWARD-REF.4 failed
Form: (BLOCK NIL (LET ((CL-TEST::C1 (GENSYM)) (CL-TEST::C2 (GENSYM)) (CL-TEST::C3 (GENSYM)) (CL-TEST::C4 (GENSYM)) (CL-TEST::C5 (GENSYM))) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C4) NIL NIL))) (QUOTE CLASS)) (RETURN 1)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C5) NIL NIL))) (QUOTE CLASS)) (RETURN 2)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3)) NIL))) (QUOTE CLASS)) (RETURN 3)) (UNLESS (TYPEP (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C2) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C4) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C5)) NIL))) (QUOTE CLASS)) (RETURN 4)) (CL-TEST::HANDLER-CASE (EVAL (SYSTEM.INTERNALS::BACKQUOTE (PROGN (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C3) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C5) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C4)) NIL) (MAKE-INSTANCE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::C1)))))) (ERROR NIL :GOOD))))
Expected value:
          :GOOD
Actual value:
          1 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.1 failed
Form: (IF (TYPEP (FUNCTION CAR) (QUOTE GENERIC-FUNCTION)) T (CL-TEST:SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE CAR)) ERROR))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
[[NOTE: Spectacular failure. This hosed the CAR function, but LispOS was able to keep on truckin'.]]
Test CL-TEST::ENSURE-GENERIC-FUNCTION.2 failed
Form: (CL-TEST:SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE DEFCLASS)) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.3 failed
Form: (CL-TEST:SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE TAGBODY)) ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.4 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-4))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (VALUES (FBOUNDP CL-TEST::F) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (TYPEP (SYMBOL-FUNCTION CL-TEST::F) (QUOTE GENERIC-FUNCTION)))))
Expected value:
          NIL
          T
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.5 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-5))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (VALUES (FBOUNDP CL-TEST::F) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X CL-TEST::Y))) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (TYPEP (SYMBOL-FUNCTION CL-TEST::F) (QUOTE GENERIC-FUNCTION)))))
Expected value:
          NIL
          T
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.6 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-6))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (VALUES (FBOUNDP CL-TEST::F) (CL-TEST::NOTNOT-MV (TYPEP (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (QUOTE GENERIC-FUNCTION))) (CL-TEST::NOTNOT-MV (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) ((CL-TEST::A T) (CL-TEST::B T) (CL-TEST::C T)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C))))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F)) :LAMBDA-LIST (QUOTE (CL-TEST::X CL-TEST::Y))) ERROR)))))
Expected value:
          NIL
          T
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.7 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-7))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:METHOD ((CL-TEST::X SYMBOL)) (LIST CL-TEST::X :A)) (:METHOD ((CL-TEST::X INTEGER)) (LIST CL-TEST::X :B)) (:METHOD ((CL-TEST::X T)) (LIST CL-TEST::X :C))))))) (VALUES (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::X 2 CL-TEST::3/2))) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)))) (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::X 2 CL-TEST::3/2))))))
Expected value:
          ((CL-TEST::X :A) (2 :B) (CL-TEST::3/2 :C))
          T
          ((CL-TEST::X :A) (2 :B) (CL-TEST::3/2 :C))
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.8 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-8))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X CL-TEST::Y) (:METHOD ((CL-TEST::X T) (CL-TEST::Y SYMBOL)) 1) (:METHOD ((CL-TEST::X SYMBOL) (CL-TEST::Y T)) 2)))))) (VALUES (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::A CL-TEST::A 3)) (QUOTE (CL-TEST::B 4 CL-TEST::B))) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X CL-TEST::Y)) :ARGUMENT-PRECEDENCE-ORDER (QUOTE (CL-TEST::Y CL-TEST::X)))) (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::A CL-TEST::A 3)) (QUOTE (CL-TEST::B 4 CL-TEST::B))))))
Expected value:
          (2 2 1)
          T
          (1 2 1)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.9 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-9))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:METHOD-COMBINATION +) (:METHOD + ((CL-TEST::X T)) 1) (:METHOD + ((CL-TEST::X SYMBOL)) 2) (:METHOD + ((CL-TEST::X (EQL NIL))) 4)))))) (VALUES (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::3/2 CL-TEST::A NIL))) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :METHOD-CLASS (QUOTE STANDARD-METHOD))) (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::3/2 CL-TEST::A NIL))) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :METHOD-CLASS (FIND-CLASS (QUOTE STANDARD-METHOD)))) (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::3/2 CL-TEST::A NIL))))))
Expected value:
          (1 3 7)
          T
          (1 3 7)
          T
          (1 3 7)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.10 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-10))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:METHOD ((CL-TEST::X T)) 1)))))) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :GENERIC-FUNCTION-CLASS (QUOTE STANDARD-GENERIC-FUNCTION))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :GENERIC-FUNCTION-CLASS (FIND-CLASS (QUOTE STANDARD-GENERIC-FUNCTION)))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)))))
Expected value:
          1
          T
          1
          T
          1
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.11 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-11))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:METHOD ((CL-TEST::X T)) 1)))))) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (CL-TEST::EQLT CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (ENSURE-GENERIC-FUNCTION (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F)) :LAMBDA-LIST (QUOTE (CL-TEST::X)) :ENVIRONMENT CL-TEST::ENV))) (CL-TEST::%M))))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)))))
Expected value:
          1
          T
          1
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.12 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-12))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X) (:DOCUMENTATION "foo") (:METHOD ((CL-TEST::X T)) 1)))))) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (OR (DOCUMENTATION CL-TEST::F (QUOTE FUNCTION)) "foo") (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X)) :DOCUMENTATION "bar")) (OR (DOCUMENTATION CL-TEST::F (QUOTE FUNCTION)) "bar") (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)))))
Expected value:
          1
          "foo"
          T
          "bar"
          1
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.13 failed
Form: (LET ((CL-TEST::F (QUOTE CL-TEST::EGF-FUN-13))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::X CL-TEST::Y) (DECLARE (OPTIMIZE SAFETY (SPEED 0) (DEBUG 0) (SPACE 0))) (:METHOD ((CL-TEST::X T) (CL-TEST::Y T)) (LIST CL-TEST::X CL-TEST::Y))))))) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::X CL-TEST::Y)) :DECLARE (QUOTE ((OPTIMIZE (SAFETY 0) (DEBUG 2) SPEED (SPACE 1)))))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) 1))))
Expected value:
          (CL-TEST::A CL-TEST::B)
          T
          (CL-TEST::A 1)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ENSURE-GENERIC-FUNCTION.14 failed
Form: (LET ((CL-TEST::F (QUOTE (SETF CL-TEST::EGF-FUN-14)))) (WHEN (FBOUNDP CL-TEST::F) (FMAKUNBOUND CL-TEST::F)) (LET ((CL-TEST::FN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::F) (CL-TEST::VAL CL-TEST::X) (:METHOD ((CL-TEST::VAL T) (CL-TEST::X CONS)) (SETF (CAR CL-TEST::X) CL-TEST::VAL))))))) (VALUES (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (LIST (SETF (CL-TEST::EGF-FUN-14 CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)) (CL-TEST::EQLT CL-TEST::FN (ENSURE-GENERIC-FUNCTION CL-TEST::F :LAMBDA-LIST (QUOTE (CL-TEST::VAL CL-TEST::X)))) (LET ((CL-TEST::Z (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (LIST (SETF (CL-TEST::EGF-FUN-14 CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)))))
Expected value:
          (CL-TEST::C (CL-TEST::C . CL-TEST::B))
          T
          (CL-TEST::C (CL-TEST::C . CL-TEST::B))
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::ENSURE-GENERIC-FUNCTION.ERROR.1
Test CL-TEST::ENSURE-GENERIC-FUNCTION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (ENSURE-GENERIC-FUNCTION (GENSYM) :LAMBDA-LIST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.1 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))))
Expected value:
          T
          T
          T
          (NIL NIL NIL NIL NIL NIL)
Actual value:
          #<Type-Error C1E4BBB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.2 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS :FOO T :A 10 :B 12 :C 1.0 :D (QUOTE CL-TEST::A) :E 17 :F NIL :BAR T))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))))
Expected value:
          T
          T
          T
          (NIL NIL NIL NIL NIL NIL)
Actual value:
          #<Type-Error C1E5EED7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.3 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS :ALLOW-OTHER-KEYS NIL :XYZZY T))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))))
Expected value:
          T
          T
          T
          (NIL NIL NIL NIL NIL NIL)
Actual value:
          #<Type-Error C1E734C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.4 failed
Form: (LET ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-02)))) (SETF (SLOT-VALUE (ALLOCATE-INSTANCE CLASS) (QUOTE CL-TEST::B)) (QUOTE CL-TEST::X)) (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-02)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::SLOT-BOUNDP* CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)))))
Expected value:
          T
          T
          T
          NIL
          CL-TEST::X
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::ALLOCATE-INSTANCE-CLASS-02 C00B5117>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.5 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-STRUCT-01))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (SETF (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-A CL-TEST::OBJ) (QUOTE CL-TEST::X) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-B CL-TEST::OBJ) 1234567890 (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-C CL-TEST::OBJ) #\Z (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-D CL-TEST::OBJ) (QUOTE CL-TEST::FOO)) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-STRUCT-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-A CL-TEST::OBJ) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-B CL-TEST::OBJ) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-C CL-TEST::OBJ) (CL-TEST::ALLOCATE-INSTANCE-STRUCT-01-D CL-TEST::OBJ)))
Expected value:
          T
          T
          T
          CL-TEST::X
          1234567890
          #\Z
          CL-TEST::FOO
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.ORDER.1 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01))) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W (CL-TEST::OBJ (ALLOCATE-INSTANCE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CLASS) :E (SETF CL-TEST::Y (INCF CL-TEST::I)) :B (SETF CL-TEST::Z (INCF CL-TEST::I)) :E (SETF CL-TEST::W (INCF CL-TEST::I))))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::ALLOCATE-INSTANCE-CLASS-01)) (CL-TEST::TYPEP* CL-TEST::OBJ CLASS) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          T
          T
          T
          4
          1
          2
          3
          4
Actual value:
          #<Type-Error C1EC7FF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ALLOCATE-INSTANCE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (ALLOCATE-INSTANCE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function ALLOCATE-INSTANCE 3A6090C>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::REINITIALIZE-INSTANCE.1
 CL-TEST::REINITIALIZE-INSTANCE.2
 CL-TEST::REINITIALIZE-INSTANCE.3
 CL-TEST::REINITIALIZE-INSTANCE.4
 CL-TEST::REINITIALIZE-INSTANCE.5
 CL-TEST::REINITIALIZE-INSTANCE.6
 CL-TEST::REINITIALIZE-INSTANCE.7
 CL-TEST::REINITIALIZE-INSTANCE.8
 CL-TEST::REINITIALIZE-INSTANCE.9
 CL-TEST::REINITIALIZE-INSTANCE.10
 CL-TEST::REINITIALIZE-INSTANCE.ORDER.1
Test CL-TEST::REINITIALIZE-INSTANCE.ERROR.1 failed
Form: (CL-TEST::HANDLER-CASE (EVAL (QUOTE (REINITIALIZE-INSTANCE (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-01)) :GARBAGE T))) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          #<Cl-Test::Class-01 C1F24B67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REINITIALIZE-INSTANCE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (REINITIALIZE-INSTANCE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function REINITIALIZE-INSTANCE 3A62F7C>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHARED-INITIALIZE.1.1
 CL-TEST::SHARED-INITIALIZE.1.2
 CL-TEST::SHARED-INITIALIZE.1.3
 CL-TEST::SHARED-INITIALIZE.1.4
 CL-TEST::SHARED-INITIALIZE.1.5
 CL-TEST::SHARED-INITIALIZE.1.6
 CL-TEST::SHARED-INITIALIZE.1.7
 CL-TEST::SHARED-INITIALIZE.1.8
 CL-TEST::SHARED-INITIALIZE.1.9
 CL-TEST::SHARED-INITIALIZE.1.10
 CL-TEST::SHARED-INITIALIZE.2.1
 CL-TEST::SHARED-INITIALIZE.2.2
 CL-TEST::SHARED-INITIALIZE.2.3
 CL-TEST::SHARED-INITIALIZE.2.4
 CL-TEST::SHARED-INITIALIZE.2.5
 CL-TEST::SHARED-INITIALIZE.2.6
 CL-TEST::SHARED-INITIALIZE.3.1
 CL-TEST::SHARED-INITIALIZE.4.1
 CL-TEST::SHARED-INITIALIZE.4.2
 CL-TEST::SHARED-INITIALIZE.4.3
 CL-TEST::SHARED-INITIALIZE.4.4
 CL-TEST::SHARED-INITIALIZE.4.5
 CL-TEST::SHARED-INITIALIZE.4.6
 CL-TEST::SHARED-INITIALIZE.4.7
Test CL-TEST::SHARED-INITIALIZE.5.1 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-05))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ T)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          T
          (NIL T)
          CL-TEST::FOO
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-05 C00B6437>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHARED-INITIALIZE.5.2 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-05))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ (QUOTE (CL-TEST::B)))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          T
          (NIL T)
          CL-TEST::FOO
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-05 C00B6437>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHARED-INITIALIZE.5.3 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-05))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS)) (CL-TEST::OBJ2 (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ T :A 117)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          T
          (T T)
          (117 CL-TEST::FOO)
          (117 CL-TEST::FOO)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-05 C00B6437>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHARED-INITIALIZE.5.4 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-05))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS)) (CL-TEST::OBJ2 (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (VALUES (SETF (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)) (QUOTE CL-TEST::BAR)) (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ T :A 117)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          CL-TEST::BAR
          T
          (T T)
          (117 CL-TEST::BAR)
          (117 CL-TEST::BAR)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-05 800B3797>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHARED-INITIALIZE.6.1
 CL-TEST::SHARED-INITIALIZE.6.2
 CL-TEST::SHARED-INITIALIZE.6.3
 CL-TEST::SHARED-INITIALIZE.6.4
 CL-TEST::SHARED-INITIALIZE.6.5
 CL-TEST::SHARED-INITIALIZE.6.6
 CL-TEST::SHARED-INITIALIZE.6.7
 CL-TEST::SHARED-INITIALIZE.6.8
 CL-TEST::SHARED-INITIALIZE.6.9
 CL-TEST::SHARED-INITIALIZE.7.1
 CL-TEST::SHARED-INITIALIZE.7.2
 CL-TEST::SHARED-INITIALIZE.8.1
 CL-TEST::SHARED-INITIALIZE.8.2
 CL-TEST::SHARED-INITIALIZE.8.3
Test CL-TEST::SHARED-INITIALIZE.9.1 failed
Form: (LET* ((CLASS (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-09))) (CL-TEST::OBJ (ALLOCATE-INSTANCE CLASS))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (SHARED-INITIALIZE CL-TEST::OBJ (QUOTE (CL-TEST::B)))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          (NIL NIL)
          T
          (NIL T)
          CL-TEST::Y
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SHARED-INIT-CLASS-09 800B38F7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHARED-INITIALIZE.ORDER.1
Test CL-TEST::SHARED-INITIALIZE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SHARED-INITIALIZE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function SHARED-INITIALIZE 3A6370C>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHARED-INITIALIZE.ERROR.2
Test CL-TEST::SHARED-INITIALIZE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-01))))) (SHARED-INITIALIZE CL-TEST::OBJ NIL :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHARED-INITIALIZE.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::SHARED-INIT-CLASS-01))))) (SHARED-INITIALIZE CL-TEST::OBJ NIL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::CHANGE-CLASS.1.1
 CL-TEST::CHANGE-CLASS.1.2
 CL-TEST::CHANGE-CLASS.1.3
 CL-TEST::CHANGE-CLASS.1.4
 CL-TEST::CHANGE-CLASS.1.5
 CL-TEST::CHANGE-CLASS.1.6
 CL-TEST::CHANGE-CLASS.1.7
 CL-TEST::CHANGE-CLASS.1.8
 CL-TEST::CHANGE-CLASS.1.9
 CL-TEST::CHANGE-CLASS.1.10
Test CL-TEST::CHANGE-CLASS.1.11 failed
Form: (CL-TEST::HANDLER-CASE (EVAL (QUOTE (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01B)))) (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS :NONSENSE T))))) (ERROR NIL :EXPECTED-ERROR))
Expected value:
          :EXPECTED-ERROR
Actual value:
          T [Actual value: #<error during printing>

 NIL
 CL-TEST::CHANGE-CLASS.1.12
Test CL-TEST::CHANGE-CLASS.2.1 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)))) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)) (CL-TEST::MAP-SLOT-BOUNDP* (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          (NIL NIL)
          T
          NIL
          T
          (NIL NIL)
          (NIL NIL)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-02A 800B63B7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.2.2 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (CL-TEST::OBJ2 (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) CL-TEST::OBJ3 (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)))) (SETF (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (QUOTE CL-TEST::FOO)) (SLOT-MAKUNBOUND CL-TEST::OBJ (QUOTE CL-TEST::B)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)) (CL-TEST::MAP-SLOT-BOUNDP* (SETF CL-TEST::OBJ3 (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ3 (QUOTE CL-TEST::A)) (CL-TEST::EQT CL-TEST::OBJ CL-TEST::OBJ2) (CL-TEST::EQT CL-TEST::OBJ CL-TEST::OBJ3) (CL-TEST::EQT CL-TEST::OBJ2 CL-TEST::OBJ3)))
Expected value:
          (T NIL)
          CL-TEST::FOO
          CL-TEST::FOO
          T
          NIL
          T
          (T NIL)
          (T NIL)
          CL-TEST::FOO
          CL-TEST::FOO
          CL-TEST::FOO
          NIL
          NIL
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-02A 800B63B7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.2.3 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (CL-TEST::OBJ2 (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)))) (SETF (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) 1 (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)) 16) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02B)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-02A)) (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (PROGN (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::B)) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))))))
Expected value:
          (T T)
          T
          NIL
          T
          (T T)
          (T T)
          (T T)
          (T T)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-02A 800B63B7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.3.1 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03B))) (CL-TEST::OBJ2 (MAKE-INSTANCE CL-TEST::NEW-CLASS)) CL-TEST::OBJ3) (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::B)) (VALUES (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03B)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::EQT (SETQ CL-TEST::OBJ3 (MAKE-INSTANCE CL-TEST::NEW-CLASS)) CL-TEST::OBJ) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ3 (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          T
          NIL
          T
          T
          NIL
          (NIL NIL)
          (NIL NIL)
          (NIL NIL)
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-03B 800B6B37>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.3.2 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03A) :A 1)) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03B))) (CL-TEST::OBJ2 (MAKE-INSTANCE CL-TEST::NEW-CLASS)) CL-TEST::OBJ3) (SLOT-MAKUNBOUND CL-TEST::OBJ2 (QUOTE CL-TEST::A)) (SETF (SLOT-VALUE CL-TEST::OBJ2 (QUOTE CL-TEST::B)) 17) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03A)) (CL-TEST::TYPEP* CL-TEST::OBJ (QUOTE CL-TEST::CHANGE-CLASS-CLASS-03B)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::EQT (SETQ CL-TEST::OBJ3 (MAKE-INSTANCE CL-TEST::NEW-CLASS)) CL-TEST::OBJ) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ2 (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ3 (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::OBJ2 (QUOTE CL-TEST::B)) (SLOT-VALUE CL-TEST::OBJ3 (QUOTE CL-TEST::B))))
Expected value:
          (NIL T)
          T
          NIL
          T
          T
          NIL
          (NIL T)
          (NIL T)
          (NIL T)
          17
          17
          17
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::CHANGE-CLASS-CLASS-03B 800B6B37>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CHANGE-CLASS.4.1
 CL-TEST::CHANGE-CLASS.4.2
 CL-TEST::CHANGE-CLASS.4.3
 CL-TEST::CHANGE-CLASS.4.4
 CL-TEST::CHANGE-CLASS.4.5
 CL-TEST::CHANGE-CLASS.5
 CL-TEST::CHANGE-CLASS.6.1
 CL-TEST::CHANGE-CLASS.6.2
 CL-TEST::CHANGE-CLASS.7.1
 CL-TEST::CHANGE-CLASS.7.2
 CL-TEST::CHANGE-CLASS.7.3
 CL-TEST::CHANGE-CLASS.7.4
 CL-TEST::CHANGE-CLASS.7.5
 CL-TEST::CHANGE-CLASS.7.6
 CL-TEST::CHANGE-CLASS.8.1
 CL-TEST::CHANGE-CLASS.8.2
 CL-TEST::CHANGE-CLASS.8.3
Test CL-TEST::CHANGE-CLASS.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (CHANGE-CLASS) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function CHANGE-CLASS 3A63F3C>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (CHANGE-CLASS (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function CHANGE-CLASS 3A63F3C>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01B)))) (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS :C2)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01B)))) (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS (QUOTE (CL-TEST::NONSENSE)) (QUOTE CL-TEST::A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.5 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST:*MINI-UNIVERSE* CL-TEST::FOR CLASS = (CLASS-OF CL-TEST::E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (CL-TEST::HANDLER-CASE (PROGN (CHANGE-CLASS (MAKE-INSTANCE (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A)) CLASS) T) (ERROR NIL NIL))) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CHANGE-CLASS.ERROR.6 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST:*MINI-UNIVERSE* CL-TEST::FOR CLASS = (CLASS-OF CL-TEST::E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (CL-TEST::HANDLER-CASE (PROGN (CHANGE-CLASS CL-TEST::E (FIND-CLASS (QUOTE CL-TEST::CHANGE-CLASS-CLASS-01A))) T) (ERROR NIL NIL))) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.1 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UIFDC-CLASS-01A))) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::UIFDC-CLASS-01B))) (CL-TEST::*UIFDC-01-OBJ* CL-TEST::OBJ)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B)))))
Expected value:
          (NIL NIL)
          T
          T
          (NIL NIL)
Actual value:
          #<Type-Error 819AF957> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.2 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UIFDC-CLASS-01A) :A 1)) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::UIFDC-CLASS-01B))) (CL-TEST::*UIFDC-01-OBJ* CL-TEST::OBJ)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          (T NIL)
          T
          T
          (NIL T)
          1
Actual value:
          #<Type-Error 819CA3E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.3 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UIFDC-CLASS-01A) :B 1)) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::UIFDC-CLASS-01B))) (CL-TEST::*UIFDC-01-OBJ* CL-TEST::OBJ)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A))))
Expected value:
          (NIL T)
          T
          T
          (T NIL)
          1
Actual value:
          #<Type-Error 819E6657> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.4 failed
Form: (LET* ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UIFDC-CLASS-01A) :A 1 :B 2)) (CL-TEST::NEW-CLASS (FIND-CLASS (QUOTE CL-TEST::UIFDC-CLASS-01B))) (CL-TEST::*UIFDC-01-OBJ* CL-TEST::OBJ)) (VALUES (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (CL-TEST::EQT CL-TEST::OBJ (CHANGE-CLASS CL-TEST::OBJ CL-TEST::NEW-CLASS)) (CL-TEST::TYPEP* CL-TEST::OBJ CL-TEST::NEW-CLASS) (CL-TEST::MAP-SLOT-BOUNDP* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B))) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B))))
Expected value:
          (T T)
          T
          T
          (T T)
          2
          1
Actual value:
          #<Type-Error 81A04587> [Actual value: #<error during printing>

 NIL
 CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.5
 CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.6
 CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.7
 CL-TEST::UPDATE-INSTANCE-FOR-DIFFERENT-CLASS.8
 CL-TEST::SLOT-BOUNDP.1
 CL-TEST::SLOT-BOUNDP.2
 CL-TEST::SLOT-BOUNDP.3
 CL-TEST::SLOT-BOUNDP.4
 CL-TEST::SLOT-BOUNDP.5
 CL-TEST::SLOT-BOUNDP.ORDER.1
 CL-TEST::SLOT-BOUNDP.ERROR.1
 CL-TEST::SLOT-BOUNDP.ERROR.2
 CL-TEST::SLOT-BOUNDP.ERROR.3
 CL-TEST::SLOT-BOUNDP.ERROR.4
Test CL-TEST::SLOT-BOUNDP.ERROR.5 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST:*MINI-UNIVERSE* CL-TEST::FOR CLASS = (CLASS-OF CL-TEST::E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (CL-TEST::HANDLER-CASE (PROGN (SLOT-BOUNDP CL-TEST::E (QUOTE CL-TEST::FOO)) T) (ERROR NIL NIL))) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-EXISTS-P.1
 CL-TEST::SLOT-EXISTS-P.2
 CL-TEST::SLOT-EXISTS-P.3
 CL-TEST::SLOT-EXISTS-P.4
 CL-TEST::SLOT-EXISTS-P.5
 CL-TEST::SLOT-EXISTS-P.6
 CL-TEST::SLOT-EXISTS-P.7
Test CL-TEST::SLOT-EXISTS-P.8 failed
Form: (LET ((CL-TEST::SLOT-NAME (GENSYM))) (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::X) (NOT (SLOT-EXISTS-P CL-TEST::X CL-TEST::SLOT-NAME))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function SYSTEM.CLOSETTE:SLOT-EXISTS-P-USING-CLASS 3A5E71C>.
Dispatching on class #<Structure-Class 800047B7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-EXISTS-P.9
 CL-TEST::SLOT-EXISTS-P.10
Test CL-TEST::SLOT-EXISTS-P.11 failed
Form: (LET ((CL-TEST::OBJ (CL-TEST::MAKE-SLOT-EXISTS-P-STRUCT-01))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::Z NIL))))
Expected value:
          (T T T NIL NIL)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-EXISTS-P.12 failed
Form: (LET ((CL-TEST::OBJ (CL-TEST::MAKE-SLOT-EXISTS-P-STRUCT-01 :A 1 :B 2 :C 3))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::Z NIL))))
Expected value:
          (T T T NIL NIL)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-EXISTS-P.13 failed
Form: (LET ((CL-TEST::OBJ (CL-TEST::MAKE-SLOT-EXISTS-P-STRUCT-02))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::Z NIL))))
Expected value:
          (T T T T T NIL NIL NIL)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-EXISTS-P.14 failed
Form: (LET ((CL-TEST::OBJ (CL-TEST::MAKE-SLOT-EXISTS-P-STRUCT-02 :A 1 :B 3 :E 5))) (CL-TEST::MAP-SLOT-EXISTS-P* CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::Z NIL))))
Expected value:
          (T T T T T NIL NIL NIL)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-EXISTS-P.15
 CL-TEST::SLOT-EXISTS-P.16
 CL-TEST::SLOT-EXISTS-P.ORDER.1
 CL-TEST::SLOT-EXISTS-P.ORDER.2
 CL-TEST::SLOT-EXISTS-P.ORDER.3
 CL-TEST::SLOT-EXISTS-P.ERROR.1
 CL-TEST::SLOT-EXISTS-P.ERROR.2
Test CL-TEST::SLOT-EXISTS-P.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SLOT-EXISTS-P (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-EXISTS-P-CLASS-01))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-EXISTS-P-CLASS-01 800B7F67>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-EXISTS-P.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SLOT-EXISTS-P (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-EXISTS-P-CLASS-01)) (QUOTE CL-TEST::A) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-EXISTS-P-CLASS-01 800B7F67>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::SLOT-NAME CL-TEST::IN (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) UNLESS (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))))) (AND (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (SLOT-MAKUNBOUND CL-TEST::OBJ CL-TEST::SLOT-NAME)) (LIST CL-TEST::OBJ)) (NOT (SLOT-BOUNDP CL-TEST::OBJ CL-TEST::SLOT-NAME)))) CL-TEST::COLLECT CL-TEST::SLOT-NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::SLOT-NAME CL-TEST::IN (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) CL-TEST::FOR SLOT-VALUE CL-TEST::IN (QUOTE (T T T 10 T (QUOTE (CL-TEST::A)))) UNLESS (LET ((CL-TEST::OBJ (ALLOCATE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))))) (SETF (SLOT-VALUE CL-TEST::OBJ CL-TEST::SLOT-NAME) SLOT-VALUE) (AND (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (SLOT-MAKUNBOUND CL-TEST::OBJ CL-TEST::SLOT-NAME)) (LIST CL-TEST::OBJ)) (NOT (SLOT-BOUNDP CL-TEST::OBJ CL-TEST::SLOT-NAME)))) CL-TEST::COLLECT CL-TEST::SLOT-NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.ORDER.1 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (CL-TEST::EQT (SLOT-MAKUNBOUND (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::OBJ) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::A))) CL-TEST::OBJ) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          T
          2
          1
          2
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B78C7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.ORDER.2 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (SETF (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) T) (VALUES (CL-TEST::EQT (SLOT-MAKUNBOUND (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::OBJ) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::A))) CL-TEST::OBJ) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          T
          2
          1
          2
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B78C7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-MAKUNBOUND.ERROR.1
Test CL-TEST::SLOT-MAKUNBOUND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SLOT-MAKUNBOUND (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B78C7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SLOT-MAKUNBOUND (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-MAKUNBOUND-CLASS-01)) (QUOTE CL-TEST::A) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error The slot CL-TEST::C is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-MAKUNBOUND-CLASS-01 800B78C7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-MAKUNBOUND.ERROR.4 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST:*MINI-UNIVERSE* CL-TEST::FOR CLASS = (CLASS-OF CL-TEST::E) WHEN (AND (EQ (CLASS-OF CLASS) BUILT-IN-CLASS) (CL-TEST::HANDLER-CASE (PROGN (SLOT-MAKUNBOUND CL-TEST::E (QUOTE CL-TEST::FOO)) T) (ERROR NIL NIL))) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-VALUE.1 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-VALUE-CLASS-01))) (CL-TEST::SLOT-NAMES CL-TEST::*SLOT-VALUE-TEST-SLOT-NAMES*) (CL-TEST::SLOT-VALUES CL-TEST::*SLOT-VALUE-TEST-SLOT-VALUES*)) (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::SLOT-NAMES CL-TEST::FOR CL-TEST::VAL CL-TEST::IN CL-TEST::SLOT-VALUES UNLESS (AND (EQUAL (MULTIPLE-VALUE-LIST (SETF (SLOT-VALUE CL-TEST::OBJ CL-TEST::NAME) CL-TEST::VAL)) (LIST CL-TEST::VAL)) (EQUAL (MULTIPLE-VALUE-LIST (SLOT-VALUE CL-TEST::OBJ CL-TEST::NAME)) (LIST CL-TEST::VAL))) CL-TEST::COLLECT CL-TEST::NAME))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-VALUE.2 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::SLOT-VALUE-CLASS-02))) (CL-TEST::SLOT-NAMES CL-TEST::*SLOT-VALUE-TEST-SLOT-NAMES*) (CL-TEST::SLOT-VALUES CL-TEST::*SLOT-VALUE-TEST-SLOT-VALUES*)) (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::SLOT-NAMES CL-TEST::FOR CL-TEST::VAL CL-TEST::IN CL-TEST::SLOT-VALUES UNLESS (AND (EQUAL (MULTIPLE-VALUE-LIST (SETF (SLOT-VALUE CL-TEST::OBJ CL-TEST::NAME) CL-TEST::VAL)) (LIST CL-TEST::VAL)) (EQUAL (MULTIPLE-VALUE-LIST (SLOT-VALUE CL-TEST::OBJ CL-TEST::NAME)) (LIST CL-TEST::VAL))) CL-TEST::COLLECT CL-TEST::NAME))
Expected value:
          NIL
Actual value:
          #<Simple-Error The slot CL-TEST::A is not an instance
slot in the class #<Standard-Class CL-TEST::SLOT-VALUE-CLASS-02 800B3AA7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::SLOT-VALUE.ORDER.1
 CL-TEST::SLOT-VALUE.ORDER.2
 CL-TEST::SLOT-VALUE.ERROR.1
 CL-TEST::SLOT-VALUE.ERROR.2
 CL-TEST::SLOT-VALUE.ERROR.3
 CL-TEST::SLOT-VALUE.ERROR.4
Test CL-TEST::SLOT-VALUE.ERROR.5 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS))) (CL-TEST::SLOT-NAME (GENSYM))) (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::E) (LET ((CLASS (CLASS-OF CL-TEST::E))) (OR (NOT (EQ (CLASS-OF CLASS) BUILT-IN-CLASS)) (CL-TEST::HANDLER-CASE (PROGN (SLOT-VALUE CL-TEST::E CL-TEST::SLOT-NAME) NIL) (ERROR NIL T))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SLOT-VALUE.ERROR.6 failed
Form: (LET ((BUILT-IN-CLASS (FIND-CLASS (QUOTE BUILT-IN-CLASS))) (CL-TEST::SLOT-NAME (GENSYM))) (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::E) (LET ((CLASS (CLASS-OF CL-TEST::E))) (OR (NOT (EQ (CLASS-OF CLASS) BUILT-IN-CLASS)) (CL-TEST::HANDLER-CASE (SETF (SLOT-VALUE CL-TEST::E CL-TEST::SLOT-NAME) NIL) (ERROR NIL T))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named BUILT-IN-CLASS.> [Actual value: #<error during printing>

 NIL
 CL-TEST::METHOD-QUALIFIERS.1
 CL-TEST::METHOD-QUALIFIERS.2
 CL-TEST::METHOD-QUALIFIERS.3
 CL-TEST::METHOD-QUALIFIERS.4
 CL-TEST::METHOD-QUALIFIERS.ERROR.1
 CL-TEST::METHOD-QUALIFIERS.ERROR.2
 CL-TEST::NO-APPLICABLE-METHOD.1
 CL-TEST::NO-NEXT-METHOD.1
 CL-TEST::NO-NEXT-METHOD.2
Test CL-TEST::REMOVE-METHOD.1 failed
Form: (AND (CL-TEST::EQT (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::*REMOVE-METH-GF-02-METHOD-T*) CL-TEST::*REMOVE-METH-GF-01*) (CL-TEST::REMOVE-METH-GF-01 :GOOD))
Expected value:
          :GOOD
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.2 failed
Form: (LET (CL-TEST::METH) (VALUES (CL-TEST::REMOVE-METH-GF-01 10) (PROGN (SETF CL-TEST::METH (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1+ CL-TEST::X))))) NIL) (CL-TEST::REMOVE-METH-GF-01 10) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH)) (CL-TEST::REMOVE-METH-GF-01 10)))
Expected value:
          10
          NIL
          11
          T
          10
Actual value:
          10 [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.3 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X SYMBOL)) (LIST CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))))
Expected value:
          (19 CL-TEST::A)
          (19 (CL-TEST::A))
          (20 (CL-TEST::A))
          T
          (20 CL-TEST::A)
          T
          (19 CL-TEST::A)
Actual value:
          (19 CL-TEST::A) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.4 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X SYMBOL)) (LIST CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (19 CL-TEST::A)))))
Expected value:
          (19 CL-TEST::A)
          (19 (CL-TEST::A))
          (20 (CL-TEST::A))
          T
          (19 (CL-TEST::A))
          T
          (19 CL-TEST::A)
Actual value:
          (19 CL-TEST::A) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.5 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1- CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))))
Expected value:
          (10 20.0)
          (9 20.0)
          (9 21.0)
          T
          (11 21.0)
          T
          (10 20.0)
Actual value:
          (10 20.0) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.6 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1- CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))))
Expected value:
          (10 20.0)
          (9 20.0)
          (9 21.0)
          T
          (9 20.0)
          T
          (10 20.0)
Actual value:
          (10 20.0) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.7 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1- CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))))
Expected value:
          (10 20.0)
          (11 21.0)
          (9 21.0)
          T
          (9 20.0)
          T
          (10 20.0)
Actual value:
          (10 20.0) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.8 failed
Form: (LET (CL-TEST::METH1 CL-TEST::METH2) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (PROGN (SETF CL-TEST::METH1 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X NUMBER)) (1+ CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (PROGN (SETF CL-TEST::METH2 (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-01 ((CL-TEST::X INTEGER)) (1- CL-TEST::X))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH2)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-01* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-01* CL-TEST::METH1)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-01) (QUOTE (10 20.0)))))
Expected value:
          (10 20.0)
          (11 21.0)
          (9 21.0)
          T
          (11 21.0)
          T
          (10 20.0)
Actual value:
          (10 20.0) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.9 failed
Form: (LET (CL-TEST::METH (CL-TEST::*RMGF-03-VAR* 0)) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A))) (PROGN (SETF CL-TEST::METH (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-03 :BEFORE ((CL-TEST::X NUMBER)) (INCF CL-TEST::*RMGF-03-VAR*))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-03* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-03* CL-TEST::METH)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))))
Expected value:
          ((0 5) (0 CL-TEST::A))
          ((1 5) (1 CL-TEST::A))
          T
          ((1 5) (1 CL-TEST::A))
Actual value:
          ((0 5) (0 CL-TEST::A)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.10 failed
Form: (LET (CL-TEST::METH (CL-TEST::*RMGF-03-VAR* 0)) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A))) (PROGN (SETF CL-TEST::METH (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-03 :AFTER ((CL-TEST::X NUMBER)) (INCF CL-TEST::*RMGF-03-VAR*))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-03* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-03* CL-TEST::METH)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))))
Expected value:
          ((0 5) (0 CL-TEST::A))
          ((0 5) (1 CL-TEST::A))
          T
          ((1 5) (1 CL-TEST::A))
Actual value:
          ((0 5) (0 CL-TEST::A)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMOVE-METHOD.11 failed
Form: (LET (CL-TEST::METH (CL-TEST::*RMGF-03-VAR* 0)) (VALUES (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A))) (PROGN (SETF CL-TEST::METH (EVAL (QUOTE (DEFMETHOD CL-TEST::REMOVE-METH-GF-03 :AROUND ((CL-TEST::X NUMBER)) (INCF CL-TEST::*RMGF-03-VAR*) (PROG1 (CALL-NEXT-METHOD) (DECF CL-TEST::*RMGF-03-VAR*)))))) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))) (CL-TEST::EQT CL-TEST::*REMOVE-METH-GF-03* (REMOVE-METHOD CL-TEST::*REMOVE-METH-GF-03* CL-TEST::METH)) (MAPCAR (FUNCTION CL-TEST::REMOVE-METH-GF-03) (QUOTE (5 CL-TEST::A)))))
Expected value:
          ((0 5) (0 CL-TEST::A))
          ((1 5) (0 CL-TEST::A))
          T
          ((0 5) (0 CL-TEST::A))
Actual value:
          ((0 5) (0 CL-TEST::A)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-INSTANCE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function MAKE-INSTANCE 3A61A9C>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-INSTANCE (QUOTE CL-TEST::MAKE-INSTANCE-CLASS-01) :A) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.3 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (MAKE-INSTANCE (QUOTE CL-TEST::MAKE-INSTANCE-CLASS-01) :Z 1))) T) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.4 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (EVAL (QUOTE (MAKE-INSTANCE (FIND-CLASS (QUOTE CL-TEST::MAKE-INSTANCE-CLASS-01)) :Z 1))) T) (ERROR NIL :GOOD))
Expected value:
          :GOOD
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCE.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LET NIL (MAKE-INSTANCE) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to generic function #<Standard-Generic-Function MAKE-INSTANCE 3A61A9C>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-INSTANCE.ERROR.6
 CL-TEST::MAKE-INSTANCE.1
 CL-TEST::MAKE-INSTANCE.2
 CL-TEST::MAKE-INSTANCE.ORDER.1
 CL-TEST::MAKE-INSTANCE.ORDER.2
 CL-TEST::MAKE-INSTANCE.ORDER.3
Test CL-TEST::MAKE-INSTANCES-OBSOLETE.1 failed
Form: (LET* ((CL-TEST::CLASS-DESIGNATOR (QUOTE CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01)) (CLASS (FIND-CLASS CL-TEST::CLASS-DESIGNATOR)) (CL-TEST::OBJ (MAKE-INSTANCE CLASS :A (QUOTE CL-TEST::X) :B (QUOTE CL-TEST::Y) :C (QUOTE CL-TEST::Z) :D 17))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (LET ((CL-TEST::VAL (MAKE-INSTANCES-OBSOLETE CLASS))) (OR (CL-TEST::EQT CL-TEST::VAL CL-TEST::CLASS-DESIGNATOR) (CL-TEST::EQT CL-TEST::VAL CLASS))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          T
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 17)
          T
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 17)
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01 800B7B27>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCES-OBSOLETE.2 failed
Form: (LET* ((CL-TEST::CLASS-DESIGNATOR (QUOTE CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01)) (CLASS (FIND-CLASS CL-TEST::CLASS-DESIGNATOR)) (CL-TEST::OBJ (MAKE-INSTANCE CLASS :A (QUOTE CL-TEST::X) :B (QUOTE CL-TEST::Y) :C (QUOTE CL-TEST::Z) :D 17))) (VALUES (CL-TEST::EQT (CLASS-OF CL-TEST::OBJ) CLASS) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (LET ((CL-TEST::VAL (MAKE-INSTANCES-OBSOLETE CL-TEST::CLASS-DESIGNATOR))) (OR (CL-TEST::EQT CL-TEST::VAL CL-TEST::CLASS-DESIGNATOR) (CL-TEST::EQT CL-TEST::VAL CLASS))) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))))
Expected value:
          T
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 17)
          T
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 17)
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01 800B7B27>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCES-OBSOLETE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-INSTANCES-OBSOLETE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAKE-INSTANCES-OBSOLETE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-INSTANCES-OBSOLETE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-INSTANCES-OBSOLETE (FIND-CLASS (QUOTE CL-TEST::MAKE-INSTANCES-OBSOLETE-CLASS-01)) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAKE-INSTANCES-OBSOLETE> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SLOTS.1
 CL-TEST::WITH-SLOTS.2
 CL-TEST::WITH-SLOTS.3
 CL-TEST::WITH-SLOTS.4
 CL-TEST::WITH-SLOTS.5
 CL-TEST::WITH-SLOTS.6
 CL-TEST::WITH-SLOTS.7
 CL-TEST::WITH-SLOTS.8
Test CL-TEST::WITH-SLOTS.9 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::WITH-SLOTS-CLASS-01) :A (QUOTE CL-TEST::X) :B (QUOTE CL-TEST::Y) :C (QUOTE CL-TEST::Z)))) (WITH-SLOTS (CL-TEST::A CL-TEST::B CL-TEST::C) CL-TEST::OBJ (VALUES (SETQ CL-TEST::A (QUOTE CL-TEST::P)) (SETQ CL-TEST::B (QUOTE CL-TEST::Q)) (SETQ CL-TEST::C (QUOTE CL-TEST::R)) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))))
Expected value:
          CL-TEST::P
          CL-TEST::Q
          CL-TEST::R
          (CL-TEST::P CL-TEST::Q CL-TEST::R)
Actual value:
          #<Type-Error 81FCF8E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SLOTS.10
 CL-TEST::WITH-SLOTS.11
Test CL-TEST::WITH-SLOTS.12 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::WITH-SLOTS-CLASS-01) :A (QUOTE CL-TEST::X) :B (QUOTE CL-TEST::Y) :C (QUOTE CL-TEST::Z)))) (WITH-SLOTS ((CL-TEST::A2 CL-TEST::A) (CL-TEST::B2 CL-TEST::B) (CL-TEST::C2 CL-TEST::C)) CL-TEST::OBJ (VALUES (SETQ CL-TEST::A2 (QUOTE CL-TEST::P)) (SETQ CL-TEST::B2 (QUOTE CL-TEST::Q)) (SETQ CL-TEST::C2 (QUOTE CL-TEST::R)) (CL-TEST::MAP-SLOT-VALUE CL-TEST::OBJ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))))
Expected value:
          CL-TEST::P
          CL-TEST::Q
          CL-TEST::R
          (CL-TEST::P CL-TEST::Q CL-TEST::R)
Actual value:
          #<Type-Error 81FEE4B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SLOTS.13
 CL-TEST::WITH-SLOTS.14
 CL-TEST::WITH-SLOTS.15
 CL-TEST::WITH-SLOTS.16
 CL-TEST::WITH-SLOTS.17
Test CL-TEST::WITH-SLOTS.18 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::WITH-SLOTS-CLASS-01)))) (WITH-SLOTS (CL-TEST::A CL-TEST::B CL-TEST::C) CL-TEST::OBJ (VALUES CL-TEST::A CL-TEST::B CL-TEST::C)))
Expected value:
          CL-TEST::MISSING
          CL-TEST::MISSING
          CL-TEST::MISSING
Actual value:
          #<Simple-Error The slot CL-TEST::A is unbound in the object #<Cl-Test::With-Slots-Class-01 C170BD27>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SLOTS.19
 CL-TEST::WITH-SLOTS.20
 CL-TEST::WITH-SLOTS.21
Test CL-TEST::DEFGENERIC.ERROR.1 failed
Form: (LET* ((CL-TEST::NAME (QUOTE CL-TEST::DEFGENERIC-TESTFN-01)) (CL-TEST::FN (SYMBOL-FUNCTION CL-TEST::NAME))) (IF (NOT (TYPEP CL-TEST::FN (QUOTE GENERIC-FUNCTION))) (CL-TEST::HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL))) :BAD) (PROGRAM-ERROR NIL :GOOD)) :GOOD))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.2 failed
Form: (LET* ((CL-TEST::NAME (QUOTE CL-TEST::DEFGENERIC-TESTMACRO-02))) (CL-TEST::HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL))) :BAD) (PROGRAM-ERROR NIL :GOOD)))
Expected value:
          :GOOD
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-SPECIAL-OPERATOR-SYMBOLS* CL-TEST::FOR CL-TEST::RESULT = (CL-TEST::HANDLER-CASE (PROGN (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::NAME) NIL))) T) (PROGRAM-ERROR NIL NIL)) WHEN CL-TEST::RESULT CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.4 (CL-TEST::X CL-TEST::Y) (:ARGUMENT-PRECEDENCE-ORDER CL-TEST::X CL-TEST::Y CL-TEST::X)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.5 (CL-TEST::X) (:DOCUMENTATION "some documentation") (:DOCUMENTATION "illegally repeated documentation")) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.6 (CL-TEST::X) (CL-TEST::UNKNOWN-OPTION NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFGENERIC.ERROR.7
Test CL-TEST::DEFGENERIC.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.8 (CL-TEST::X CL-TEST::Y) (:ARGUMENT-PRECEDENCE-ORDER CL-TEST::X)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFGENERIC.ERROR.9
 CL-TEST::DEFGENERIC.ERROR.10
 CL-TEST::DEFGENERIC.ERROR.11
 CL-TEST::DEFGENERIC.ERROR.12
 CL-TEST::DEFGENERIC.ERROR.13
 CL-TEST::DEFGENERIC.ERROR.14
 CL-TEST::DEFGENERIC.ERROR.15
 CL-TEST::DEFGENERIC.ERROR.16
 CL-TEST::DEFGENERIC.ERROR.17
 CL-TEST::DEFGENERIC.ERROR.18
 CL-TEST::DEFGENERIC.ERROR.19
Test CL-TEST::DEFGENERIC.ERROR.20 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::FN (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.20 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))) (FUNCALL CL-TEST::FN 1 :BAR (QUOTE CL-TEST::A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.21 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::FN (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.21 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO &ALLOW-OTHER-KEYS) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.ERROR.22 failed
Form: (PROGN (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.22 (CL-TEST::X)) (DEFMETHOD CL-TEST::DEFGENERIC-ERROR-FN.22 ((CL-TEST::X T)) NIL) (CL-TEST::HANDLER-CASE (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC-ERROR-FN.22 (CL-TEST::X CL-TEST::Y)))) (ERROR NIL :GOOD)))
Expected value:
          :GOOD
Actual value:
          #<Standard-Generic-Function CL-TEST::DEFGENERIC-ERROR-FN.22 3AE7C6C> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.1 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.1 (CL-TEST::X CL-TEST::Y CL-TEST::Z) (:METHOD ((CL-TEST::X T) (CL-TEST::Y T) (CL-TEST::Z T)) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (APPLY CL-TEST::FN 1 2 3 NIL) (APPLY CL-TEST::FN (LIST 4 5 6)) (MAPCAR CL-TEST::FN (QUOTE (1 2)) (QUOTE (3 4)) (QUOTE (5 6))) (CL-TEST::DEFGENERIC.FUN.1 (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))))
Expected value:
          T
          T
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (1 2 3)
          (4 5 6)
          ((1 3 5) (2 4 6))
          (CL-TEST::D CL-TEST::E CL-TEST::F)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.2 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.2 (CL-TEST::X CL-TEST::Y CL-TEST::Z) (:DOCUMENTATION "boo!") (:METHOD ((CL-TEST::X T) (CL-TEST::Y T) (CL-TEST::Z T)) (VECTOR CL-TEST::X CL-TEST::Y CL-TEST::Z))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::DEFGENERIC.FUN.2 (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F)) (LET ((CL-TEST::DOC (DOCUMENTATION CL-TEST::FN T))) (OR (NOT CL-TEST::DOC) (AND (STRINGP CL-TEST::DOC) (CL-TEST::STRING=T CL-TEST::DOC "boo!")))) (LET ((CL-TEST::DOC (DOCUMENTATION CL-TEST::FN (QUOTE FUNCTION)))) (OR (NOT CL-TEST::DOC) (AND (STRINGP CL-TEST::DOC) (CL-TEST::STRING=T CL-TEST::DOC "boo!")))) (SETF (DOCUMENTATION CL-TEST::FN T) "foo") (LET ((CL-TEST::DOC (DOCUMENTATION CL-TEST::FN T))) (OR (NOT CL-TEST::DOC) (AND (STRINGP CL-TEST::DOC) (CL-TEST::STRING=T CL-TEST::DOC "foo")))) (SETF (DOCUMENTATION CL-TEST::FN (QUOTE FUNCTION)) "bar") (LET ((CL-TEST::DOC (DOCUMENTATION CL-TEST::FN T))) (OR (NOT CL-TEST::DOC) (AND (STRINGP CL-TEST::DOC) (CL-TEST::STRING=T CL-TEST::DOC "bar"))))))
Expected value:
          T
          T
          #(CL-TEST::A CL-TEST::B CL-TEST::C)
          #(CL-TEST::D CL-TEST::E CL-TEST::F)
          T
          T
          "foo"
          T
          "bar"
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.3 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.3 (CL-TEST::X CL-TEST::Y) (:METHOD ((CL-TEST::X T) (CL-TEST::Y SYMBOL)) (LIST CL-TEST::X CL-TEST::Y)) (:METHOD ((CL-TEST::X SYMBOL) (CL-TEST::Y T)) (LIST CL-TEST::Y CL-TEST::X))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::FN 1 (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::B) 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))))
Expected value:
          T
          T
          (1 CL-TEST::A)
          (2 CL-TEST::B)
          (CL-TEST::B CL-TEST::A)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.4 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.4 (CL-TEST::X CL-TEST::Y) (:ARGUMENT-PRECEDENCE-ORDER CL-TEST::Y CL-TEST::X) (:METHOD ((CL-TEST::X T) (CL-TEST::Y SYMBOL)) (LIST CL-TEST::X CL-TEST::Y)) (:METHOD ((CL-TEST::X SYMBOL) (CL-TEST::Y T)) (LIST CL-TEST::Y CL-TEST::X))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::FN 1 (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::B) 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))))
Expected value:
          T
          T
          (1 CL-TEST::A)
          (2 CL-TEST::B)
          (CL-TEST::A CL-TEST::B)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.5 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.5 NIL (:METHOD NIL (VALUES))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN)) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.5)) (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN NIL))))
Expected value:
          T
          T
          NIL
          NIL
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.6 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.6 NIL (:METHOD NIL (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN)) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.6)) (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN NIL))))
Expected value:
          T
          T
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.7 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.7 NIL (:METHOD NIL (RETURN-FROM CL-TEST::DEFGENERIC.FUN.7 (QUOTE CL-TEST::A)) (QUOTE CL-TEST::B))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN)) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.7)) (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN NIL))))
Expected value:
          T
          T
          (CL-TEST::A)
          (CL-TEST::A)
          (CL-TEST::A)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.8 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.8 (CL-TEST::X &OPTIONAL CL-TEST::Y CL-TEST::Z) (:METHOD ((CL-TEST::X NUMBER) &OPTIONAL CL-TEST::Y CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) (:METHOD ((CL-TEST::P SYMBOL) &OPTIONAL CL-TEST::Q CL-TEST::R) (LIST CL-TEST::R CL-TEST::Q CL-TEST::P))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (CL-TEST::TYPEP* CL-TEST::FN (QUOTE GENERIC-FUNCTION)) (CL-TEST::TYPEP* CL-TEST::FN (QUOTE STANDARD-GENERIC-FUNCTION)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN 1)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN 1 2)) (MULTIPLE-VALUE-LIST (FUNCALL CL-TEST::FN 1 2 3)) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.8 (QUOTE CL-TEST::A))) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.8 (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (MULTIPLE-VALUE-LIST (CL-TEST::DEFGENERIC.FUN.8 (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (MULTIPLE-VALUE-LIST (APPLY CL-TEST::FN (QUOTE (CL-TEST::X CL-TEST::Y CL-TEST::Z))))))
Expected value:
          T
          T
          ((1 NIL NIL))
          ((1 2 NIL))
          ((1 2 3))
          ((NIL NIL CL-TEST::A))
          ((NIL CL-TEST::B CL-TEST::A))
          ((CL-TEST::C CL-TEST::B CL-TEST::A))
          ((CL-TEST::Z CL-TEST::Y CL-TEST::X))
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.9 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.9 (CL-TEST::X &OPTIONAL CL-TEST::Y CL-TEST::Z) (:METHOD ((CL-TEST::X NUMBER) &OPTIONAL (CL-TEST::Y 10) (CL-TEST::Z 20)) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) (:METHOD ((CL-TEST::P SYMBOL) &OPTIONAL (CL-TEST::Q (QUOTE CL-TEST::S)) (CL-TEST::R (QUOTE T))) (LIST CL-TEST::R CL-TEST::Q CL-TEST::P))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 2) (FUNCALL CL-TEST::FN 1 2 3) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))))
Expected value:
          (1 10 20)
          (1 2 20)
          (1 2 3)
          (T CL-TEST::S CL-TEST::A)
          (T CL-TEST::B CL-TEST::A)
          (CL-TEST::C CL-TEST::B CL-TEST::A)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.10 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.10 (CL-TEST::X &REST CL-TEST::Y) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A)) (CL-TEST::DEFGENERIC.FUN.10 CL-TEST::5/3 :FOO (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y)) (CL-TEST::DEFGENERIC.FUN.10 10 :BAR T :ALLOW-OTHER-KEYS T) (CL-TEST::DEFGENERIC.FUN.10 20 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE CL-TEST::X))))
Expected value:
          (1 NIL)
          (1 CL-TEST::A)
          (CL-TEST::5/3 CL-TEST::X)
          (10 NIL)
          (20 CL-TEST::X)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.11 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.11 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A)) (CL-TEST::DEFGENERIC.FUN.11 CL-TEST::5/3 :FOO (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y)) (CL-TEST::DEFGENERIC.FUN.11 11 :BAR T :ALLOW-OTHER-KEYS T) (CL-TEST::DEFGENERIC.FUN.11 20 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE CL-TEST::X))))
Expected value:
          (1 NIL)
          (1 CL-TEST::A)
          (CL-TEST::5/3 CL-TEST::X)
          (11 NIL)
          (20 CL-TEST::X)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.12 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.12 (CL-TEST::X &KEY CL-TEST::FOO CL-TEST::BAR CL-TEST::BAZ) (:METHOD ((CL-TEST::X NUMBER) &REST CL-TEST::Y) (LIST CL-TEST::X CL-TEST::Y))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A)) (CL-TEST::DEFGENERIC.FUN.12 CL-TEST::5/3 :FOO (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y) :BAR (QUOTE CL-TEST::Z)) (CL-TEST::DEFGENERIC.FUN.12 11 :ZZZ T :ALLOW-OTHER-KEYS T) (CL-TEST::DEFGENERIC.FUN.12 20 :ALLOW-OTHER-KEYS NIL :FOO (QUOTE CL-TEST::X))))
Expected value:
          (1 NIL)
          (1 (:FOO CL-TEST::A))
          (CL-TEST::5/3 (:FOO CL-TEST::X :FOO CL-TEST::Y :BAR CL-TEST::Z))
          (11 (:ZZZ T :ALLOW-OTHER-KEYS T))
          (20 (:ALLOW-OTHER-KEYS NIL :FOO CL-TEST::X))
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.13 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.13 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B))))
Expected value:
          (1 NIL)
          (CL-TEST::A NIL)
          (1 2)
          (CL-TEST::A CL-TEST::B)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.14 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.14 (CL-TEST::X &KEY &ALLOW-OTHER-KEYS) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN 1 :FOO 2 :BAR 3) (FUNCALL CL-TEST::FN 1 :BAR 4) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :FOO (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :FOO (QUOTE CL-TEST::C) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN 1 :BAZ 10) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :BAZ 10) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE CL-TEST::B))))
Expected value:
          (1 NIL)
          (CL-TEST::A NIL)
          (1 2)
          (1 2)
          (1 NIL)
          (CL-TEST::A NIL)
          (CL-TEST::A CL-TEST::B)
          (CL-TEST::A CL-TEST::B)
          (1 NIL)
          (CL-TEST::A NIL)
          (1 NIL)
          (CL-TEST::A NIL)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.15 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.15 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::FOO &ALLOW-OTHER-KEYS) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN 1 :FOO 2 :BAR 3) (FUNCALL CL-TEST::FN 1 :BAR 4) (FUNCALL CL-TESTL CL-TEST::FN (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) :FOO (QUOTE CL-TEST::C) :BAR (QUOTE CL-TEST::B) :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::FN 1 :BAZ 10) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS NIL :BAZ (QUOTE CL-TEST::A))))
Expected value:
          (1 NIL)
          (CL-TEST::A NIL)
          (1 2)
          (1 2)
          (1 NIL)
          (CL-TEST::A NIL)
          (CL-TEST::A CL-TEST::B)
          (CL-TEST::A CL-TEST::B)
          (1 NIL)
          (1 NIL)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.16 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.16 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY (CL-TEST::FOO (QUOTE CL-TEST::A))) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO NIL) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO NIL) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y))))
Expected value:
          (1 CL-TEST::A)
          (1 NIL)
          (1 2)
          (CL-TEST::X NIL)
          (CL-TEST::X NIL)
          (CL-TEST::X CL-TEST::Y)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.17 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.17 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY (CL-TEST::FOO (QUOTE CL-TEST::A) CL-TEST::FOO-P)) (LIST CL-TEST::X CL-TEST::FOO (CL-TEST::NOTNOT CL-TEST::FOO-P))) (:METHOD ((CL-TEST::X SYMBOL) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO NIL) (FUNCALL CL-TEST::FN 1 :FOO 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO NIL) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :FOO (QUOTE CL-TEST::Y))))
Expected value:
          (1 CL-TEST::A NIL)
          (1 NIL T)
          (1 2 T)
          (CL-TEST::X NIL)
          (CL-TEST::X NIL)
          (CL-TEST::X CL-TEST::Y)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.18 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.18 (CL-TEST::X &OPTIONAL CL-TEST::Y) (:METHOD ((CL-TEST::X NUMBER) &OPTIONAL (CL-TEST::Y (QUOTE CL-TEST::A))) (LIST CL-TEST::X CL-TEST::Y)) (:METHOD ((CL-TEST::X SYMBOL) &OPTIONAL (CL-TEST::Z NIL CL-TEST::Z-P)) (LIST CL-TEST::X CL-TEST::Z (CL-TEST::NOTNOT CL-TEST::Z-P)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 NIL) (FUNCALL CL-TEST::FN 1 2) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) NIL) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) (QUOTE CL-TEST::Y))))
Expected value:
          (1 CL-TEST::A)
          (1 NIL)
          (1 2)
          (CL-TEST::X NIL NIL)
          (CL-TEST::X NIL T)
          (CL-TEST::X CL-TEST::Y T)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.19 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.19 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY ((:BAR CL-TEST::FOO) (QUOTE CL-TEST::A) CL-TEST::FOO-P)) (LIST CL-TEST::X CL-TEST::FOO (CL-TEST::NOTNOT CL-TEST::FOO-P)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :BAR NIL) (FUNCALL CL-TEST::FN 1 :BAR 2)))
Expected value:
          (1 CL-TEST::A NIL)
          (1 NIL T)
          (1 2 T)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.20 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.20 (CL-TEST::X &OPTIONAL CL-TEST::Y CL-TEST::Z) (:METHOD ((CL-TEST::X NUMBER) &OPTIONAL (CL-TEST::Y (1+ CL-TEST::X) CL-TEST::Y-P) (CL-TEST::Z (IF CL-TEST::Y-P (1+ CL-TEST::Y) (+ CL-TEST::X 10)) CL-TEST::Z-P)) (LIST CL-TEST::X CL-TEST::Y (CL-TEST::NOTNOT CL-TEST::Y-P) CL-TEST::Z (CL-TEST::NOTNOT CL-TEST::Z-P)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 5) (FUNCALL CL-TEST::FN 1 5 9)))
Expected value:
          (1 2 NIL 11 NIL)
          (1 5 T 6 NIL)
          (1 5 T 9 T)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.21 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.21 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY (CL-TEST::Y (1+ CL-TEST::X) CL-TEST::Y-P) (CL-TEST::Z (IF CL-TEST::Y-P (1+ CL-TEST::Y) (+ CL-TEST::X 10)) CL-TEST::Z-P)) (LIST CL-TEST::X CL-TEST::Y (CL-TEST::NOTNOT CL-TEST::Y-P) CL-TEST::Z (CL-TEST::NOTNOT CL-TEST::Z-P)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :Y 5) (FUNCALL CL-TEST::FN 1 :Y 5 :Z 9) (FUNCALL CL-TEST::FN 1 :Z 8) (FUNCALL CL-TEST::FN 1 :Z 8 :Y 4)))
Expected value:
          (1 2 NIL 11 NIL)
          (1 5 T 6 NIL)
          (1 5 T 9 T)
          (1 2 NIL 8 T)
          (1 4 T 8 T)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.22 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.22 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X NUMBER) &KEY ((:ALLOW-OTHER-KEYS CL-TEST::Y))) (LIST CL-TEST::X CL-TEST::Y))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS NIL) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::X) :ALLOW-OTHER-KEYS T :BAR (QUOTE CL-TEST::Y)) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::X) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS T (QUOTE CL-TEST::FOO) (QUOTE CL-TEST::Y) :ALLOW-OTHER-KEYS NIL) (FUNCALL CL-TEST::FN 1 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:FOO) (QUOTE CL-TEST::Z))))
Expected value:
          (1 NIL)
          (1 NIL)
          (1 T)
          (1 T)
          (1 T)
          (1 NIL)
          (1 T)
          (1 T)
          (1 T)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.23 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.23 (CL-TEST::X) (:METHOD ((CL-TEST::X NUMBER) &AUX (CL-TEST::Y (1+ CL-TEST::X))) (LIST CL-TEST::X CL-TEST::Y)) (:METHOD ((CL-TEST::X SYMBOL) &AUX (CL-TEST::Z (LIST CL-TEST::X))) (LIST CL-TEST::X CL-TEST::Z))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A))))
Expected value:
          (1 2)
          (CL-TEST::A (CL-TEST::A))
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.24 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.24 (CL-TEST::X) (:METHOD ((CL-TEST::X NUMBER) &AUX (CL-TEST::Y (1+ CL-TEST::X)) (CL-TEST::Z (1+ CL-TEST::Y))) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) (:METHOD ((CL-TEST::X SYMBOL) &AUX (CL-TEST::Y (LIST CL-TEST::X)) (CL-TEST::Z (LIST CL-TEST::X CL-TEST::Y))) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z))))))) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A))))
Expected value:
          (1 2 3)
          (CL-TEST::A (CL-TEST::A) (CL-TEST::A (CL-TEST::A)))
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.25 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.25 (CL-TEST::X &OPTIONAL CL-TEST::Y &KEY) (:METHOD ((CL-TEST::X SYMBOL) &OPTIONAL (CL-TEST::Y (QUOTE CL-TEST::D) CL-TEST::Y-P) &KEY ((:FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y) CL-TEST::BAR-P) &AUX (CL-TEST::Z (LIST CL-TEST::X CL-TEST::Y (CL-TEST::NOTNOT CL-TEST::Y-P) CL-TEST::BAR (CL-TEST::NOTNOT CL-TEST::BAR-P)))) CL-TEST::Z)))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) :FOO (QUOTE CL-TEST::C))))
Expected value:
          (CL-TEST::A CL-TEST::D NIL (CL-TEST::A CL-TEST::D) NIL)
          (CL-TEST::A CL-TEST::B T (CL-TEST::A CL-TEST::B) NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.26 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.26 (CL-TEST::X) (DECLARE (OPTIMIZE (SAFETY 3))) (:METHOD ((CL-TEST::X SYMBOL)) CL-TEST::X) (DECLARE (OPTIMIZE (DEBUG 3)))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.28 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.28 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X INTEGER) &KEY CL-TEST::FOO) (LIST CL-TEST::X CL-TEST::FOO)) (:METHOD ((CL-TEST::X NUMBER) &KEY CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::BAR)) (:METHOD ((CL-TEST::X T) &KEY CL-TEST::BAZ) (LIST CL-TEST::X CL-TEST::BAZ))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN 1) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN 1 :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN 1 :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN 1 :BAR (QUOTE CL-TEST::B) :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A) :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN 1 :FOO (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B) :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN CL-TEST::5/3) (FUNCALL CL-TEST::FN CL-TEST::5/3 :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN CL-TEST::5/3 :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN CL-TEST::5/3 :BAR (QUOTE CL-TEST::B) :BAZ (QUOTE CL-TEST::C)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::FN (QUOTE CL-TEST::X) :BAZ (QUOTE CL-TEST::C))))
Expected value:
          (1 NIL)
          (1 CL-TEST::A)
          (1 NIL)
          (1 NIL)
          (1 NIL)
          (1 CL-TEST::A)
          (1 CL-TEST::A)
          (1 CL-TEST::A)
          (CL-TEST::5/3 NIL)
          (CL-TEST::5/3 CL-TEST::B)
          (CL-TEST::5/3 NIL)
          (CL-TEST::5/3 CL-TEST::B)
          (CL-TEST::X NIL)
          (CL-TEST::X CL-TEST::C)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.29 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.29 (CL-TEST::X &KEY) (:METHOD ((CL-TEST::X CL-TEST::DEFGENERIC.29.CLASS.1) &KEY CL-TEST::FOO) CL-TEST::FOO) (:METHOD ((CL-TEST::X CL-TEST::DEFGENERIC.29.CLASS.2) &KEY CL-TEST::BAR) CL-TEST::BAR)))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (LET ((CL-TEST::X (MAKE-INSTANCE (QUOTE CL-TEST::DEFGENERIC.29.CLASS.3)))) (VALUES (FUNCALL CL-TEST::FN CL-TEST::X) (FUNCALL CL-TEST::FN CL-TEST::X :FOO (QUOTE CL-TEST::A)) (FUNCALL CL-TEST::FN CL-TEST::X :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN CL-TEST::X :FOO (QUOTE CL-TEST::A) :BAR (QUOTE CL-TEST::B)) (FUNCALL CL-TEST::FN CL-TEST::X :BAR (QUOTE CL-TEST::B) :FOO (QUOTE CL-TEST::A)))))
Expected value:
          NIL
          CL-TEST::A
          NIL
          CL-TEST::A
          CL-TEST::A
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.31 failed
Form: (PROGN (DEFGENERIC CL-TEST::DEFGENERIC.FUN.31 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) T)) (DEFGENERIC CL-TEST::DEFGENERIC.FUN.31 (CL-TEST::X CL-TEST::Y) (:METHOD ((CL-TEST::X T) (CL-TEST::Y T)) (LIST CL-TEST::X CL-TEST::Y))) (CL-TEST::DEFGENERIC.FUN.31 (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))
Expected value:
          (CL-TEST::A CL-TEST::B)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.32 failed
Form: (PROGN (DEFGENERIC CL-TEST::DEFGENERIC.FUN.32 (CL-TEST::X) (:METHOD ((CL-TEST::X SYMBOL)) :BAD)) (DEFGENERIC CL-TEST::DEFGENERIC.FUN.32 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) :GOOD)) (CL-TEST::DEFGENERIC.FUN.32 (QUOTE CL-TEST::X)))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.33 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC (SETF CL-TEST::DEFGENERIC.FUN.33) (CL-TEST::X CL-TEST::Y &REST CL-TEST::ARGS) (:METHOD (CL-TEST::X (CL-TEST::Y CONS) &REST CL-TEST::ARGS) (ASSERT (NULL CL-TEST::ARGS)) (SETF (CAR CL-TEST::Y) CL-TEST::X)) (:METHOD (CL-TEST::X (CL-TEST::Y ARRAY) &REST CL-TEST::ARGS) (SETF (APPLY (FUNCTION AREF) CL-TEST::Y CL-TEST::ARGS) CL-TEST::X))))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (LET ((CL-TEST::Z (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (LIST (SETF (CL-TEST::DEFGENERIC.FUN.33 CL-TEST::Z) (QUOTE CL-TEST::C)) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT NIL))) (LIST (SETF (CL-TEST::DEFGENERIC.FUN.33 CL-TEST::A 5) (QUOTE CL-TEST::D)) CL-TEST::A))))
Expected value:
          (CL-TEST::C (CL-TEST::C CL-TEST::B))
          (CL-TEST::D #(NIL NIL NIL NIL NIL CL-TEST::D NIL NIL NIL NIL))
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.34 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC #:DEFGENERIC.FUN.34 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) (LIST CL-TEST::X :GOOD))))))) (FUNCALL CL-TEST::FN 10))
Expected value:
          (10 :GOOD)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFGENERIC.35 failed
Form: (LET ((CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::DEFGENERIC.FUN.35 (CL-TEST::X) (:METHOD ((CL-TEST::X (EQL (QUOTE CL-TEST::A)))) (DECLARE (OPTIMIZE (SPEED 0))) "FOO" (DECLARE (OPTIMIZE (SAFETY 3))) CL-TEST::X)))))) (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN (QUOTE CL-TEST::A)) (LET ((METHOD (FIRST (COMPUTE-APPLICABLE-METHODS CL-TEST::FN (QUOTE (CL-TEST::A)))))) (AND METHOD (LET ((CL-TEST::DOC (DOCUMENTATION METHOD T))) (LIST (OR (NULL CL-TEST::DOC) (CL-TEST::EQUALT CL-TEST::DOC "FOO")) (SETF (DOCUMENTATION METHOD T) "BAR") (LET ((CL-TEST::DOC (DOCUMENTATION METHOD T))) (OR (NULL CL-TEST::DOC) (CL-TEST::EQUALT CL-TEST::DOC "BAR")))))))))
Expected value:
          CL-TEST::A
          (T "BAR" T)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME T) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME NIL) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-CLASS.4
 CL-TEST::FIND-CLASS.5
 CL-TEST::FIND-CLASS.6
Test CL-TEST::FIND-CLASS.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME T NIL) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME NIL NIL) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.9 failed
Form: (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (LET ((CL-TEST::RESULT (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME NIL CL-TEST::ENV) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT)))))) (CL-TEST::%M))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.10 failed
Form: (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (LET ((CL-TEST::RESULT (LOOP CL-TEST::FOR CL-TEST::NAME CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* UNLESS (EQ (FIND-CLASS CL-TEST::NAME T CL-TEST::ENV) (FIND-CLASS CL-TEST::NAME)) CL-TEST::COLLECT CL-TEST::NAME))) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::RESULT)))))) (CL-TEST::%M))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-CLASS.11
 CL-TEST::FIND-CLASS.12
 CL-TEST::FIND-CLASS.13
 CL-TEST::FIND-CLASS.14
Test CL-TEST::FIND-CLASS.15 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (LET* ((CLASS (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS1 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01))) (CL-TEST::CLASS2 (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) CL-TEST::CLASS1))) (VALUES (CL-TEST::EQT CLASS CL-TEST::CLASS1) (CL-TEST::EQT CLASS CL-TEST::CLASS2) (CLASS-NAME CLASS))))
Expected value:
          T
          T
          CL-TEST::FIND-CLASS-CLASS-01
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.16 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) NIL) NIL) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) T) NIL) (LET* ((CL-TEST::I 0) (CLASS (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS1 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01))) (CL-TEST::CLASS2 (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) (INCF CL-TEST::I)) CL-TEST::CLASS1))) (VALUES CL-TEST::I (CL-TEST::EQT CLASS CL-TEST::CLASS1) (CL-TEST::EQT CLASS CL-TEST::CLASS2))))
Expected value:
          1
          T
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.17 failed
Form: (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (SYSTEM.INTERNALS::BACKQUOTE (QUOTE (SYSTEM.INTERNALS::BQ-COMMA (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (LET* ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z (CLASS (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS1 (FIND-CLASS (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) (SETF CL-TEST::Y (INCF CL-TEST::I)) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) CL-TEST::ENV))) (CL-TEST::CLASS2 (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) CL-TEST::CLASS1))) (LIST (CL-TEST::EQT CLASS CL-TEST::CLASS1) (CL-TEST::EQT CLASS CL-TEST::CLASS2) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z)))))))) (CL-TEST::%M))
Expected value:
          (T T 3 1 2 3)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.18 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (LET* ((CLASS (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS1 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01))) (CL-TEST::CLASS2 (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL)) (CL-TEST::CLASS3 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) NIL))) (VALUES (CL-TEST::EQT CLASS CL-TEST::CLASS1) (CL-TEST::EQT CLASS CL-TEST::CLASS2) CL-TEST::CLASS2 (CLASS-NAME CLASS) CL-TEST::CLASS3)))
Expected value:
          T
          NIL
          NIL
          CL-TEST::FIND-CLASS-CLASS-01
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.19 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) NIL) NIL) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) T) NIL) (LET* ((CLASS (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS1 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01))) (CL-TEST::CLASS2 (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) T NIL) CL-TEST::CLASS1))) (VALUES (CL-TEST::EQT CLASS CL-TEST::CLASS1) (CL-TEST::EQT CLASS CL-TEST::CLASS2))))
Expected value:
          T
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.20 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-02)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-02 NIL NIL))))) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) CL-TEST::CLASS2) (LET* ((CL-TEST::NEW-CLASS1 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) NIL)) (CL-TEST::NEW-CLASS2 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-02)))) (VALUES (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::CLASS2) (CL-TEST::EQT CL-TEST::CLASS2 CL-TEST::NEW-CLASS1) (CL-TEST::EQT CL-TEST::CLASS2 CL-TEST::NEW-CLASS2) (CLASS-NAME CL-TEST::CLASS2)))))
Expected value:
          NIL
          T
          T
          CL-TEST::FIND-CLASS-CLASS-02
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.21 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-02)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-02 NIL NIL))))) (PSETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) CL-TEST::CLASS2 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-02)) CL-TEST::CLASS1) (LET* ((CL-TEST::NEW-CLASS1 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01) NIL)) (CL-TEST::NEW-CLASS2 (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-02)))) (VALUES (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::CLASS2) (CL-TEST::EQT CL-TEST::CLASS2 CL-TEST::NEW-CLASS1) (CL-TEST::EQT CL-TEST::CLASS1 CL-TEST::NEW-CLASS2) (CLASS-NAME CL-TEST::NEW-CLASS1) (CLASS-NAME CL-TEST::NEW-CLASS2)))))
Expected value:
          NIL
          T
          T
          CL-TEST::FIND-CLASS-CLASS-02
          CL-TEST::FIND-CLASS-CLASS-01
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.22 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::FIND-CLASS-GF-01 (CL-TEST::X) (:METHOD ((CL-TEST::X CL-TEST::FIND-CLASS-CLASS-01)) :GOOD) (:METHOD ((CL-TEST::X T)) NIL))))) (CL-TEST::OBJ (MAKE-INSTANCE CL-TEST::CLASS1))) (ASSERT (TYPEP CL-TEST::FN (QUOTE FUNCTION))) (LOCALLY (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN NIL) (FUNCALL CL-TEST::FN CL-TEST::OBJ) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (FUNCALL CL-TEST::FN NIL) (FUNCALL CL-TEST::FN CL-TEST::OBJ)))))
Expected value:
          NIL
          :GOOD
          NIL
          NIL
          :GOOD
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-CLASS.23 failed
Form: (PROGN (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-02)) NIL) (LET* ((CL-TEST::CLASS1 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-01 NIL NIL)))) (CL-TEST::CLASS2 (EVAL (QUOTE (DEFCLASS CL-TEST::FIND-CLASS-CLASS-02 (CL-TEST::FIND-CLASS-CLASS-01) NIL)))) (CL-TEST::FN (EVAL (QUOTE (DEFGENERIC CL-TEST::FIND-CLASS-GF-02 (CL-TEST::X) (:METHOD ((CL-TEST::X CL-TEST::FIND-CLASS-CLASS-01)) 1) (:METHOD ((CL-TEST::X CL-TEST::FIND-CLASS-CLASS-02)) 2) (:METHOD ((CL-TEST::X T)) T))))) (CL-TEST::OBJ1 (MAKE-INSTANCE CL-TEST::CLASS1)) (CL-TEST::OBJ2 (MAKE-INSTANCE CL-TEST::CLASS2))) (ASSERT (TYPEP CL-TEST::FN (QUOTE FUNCTION))) (LOCALLY (DECLARE (TYPE FUNCTION CL-TEST::FN)) (VALUES (FUNCALL CL-TEST::FN NIL) (FUNCALL CL-TEST::FN CL-TEST::OBJ1) (FUNCALL CL-TEST::FN CL-TEST::OBJ2) (SETF (FIND-CLASS (QUOTE CL-TEST::FIND-CLASS-CLASS-01)) NIL) (FUNCALL CL-TEST::FN NIL) (FUNCALL CL-TEST::FN CL-TEST::OBJ1) (FUNCALL CL-TEST::FN CL-TEST::OBJ2)))))
Expected value:
          T
          1
          2
          NIL
          T
          1
          2
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-CLASS.ERROR.1
 CL-TEST::FIND-CLASS.ERROR.2
 CL-TEST::NEXT-METHOD-P.1
 CL-TEST::NEXT-METHOD-P.2
 CL-TEST::NEXT-METHOD-P.3
 CL-TEST::NEXT-METHOD-P.4
 CL-TEST::NEXT-METHOD-P.5
 CL-TEST::NEXT-METHOD-P.6
 CL-TEST::NEXT-METHOD-P.7
 CL-TEST::NEXT-METHOD-P.8
 CL-TEST::NEXT-METHOD-P.9
 CL-TEST::NEXT-METHOD-P.10
Test CL-TEST::NEXT-METHOD-P.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (PROGN (EVAL (QUOTE (DEFMETHOD CL-TEST::NMP-GF-06 ((CL-TEST::X T)) (NEXT-METHOD-P NIL)))) (CL-TEST::NMP-GF-06 NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No generic function named CL-TEST::NMP-GF-06.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CALL-NEXT-METHOD.1 failed
Form: (MAPCAR (FUNCTION CL-TEST::CNM-GF-01) (QUOTE (0 CL-TEST::2/3 1.299999 #C(1 1) CL-TEST::A)))
Expected value:
          ((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::C CL-TEST::D) (CL-TEST::D) NIL)
Actual value:
          ((CL-TEST::A CL-TEST::D) NIL (CL-TEST::D) NIL NIL) [Actual value: #<error during printing>

 NIL
 CL-TEST::CALL-NEXT-METHOD.2
 CL-TEST::CALL-NEXT-METHOD.3
 CL-TEST::CALL-NEXT-METHOD.4
Test CL-TEST::CALL-NEXT-METHOD.5 failed
Form: (MAPCAR (FUNCTION CL-TEST::CNM-GF-04) (QUOTE (0 1 2 CL-TEST::5/3 CL-TEST::9/2 1.0 #C(1 1))))
Expected value:
          (11 12 13 CL-TEST::8/3 CL-TEST::11/2 2.0 #C(2 1))
Actual value:
          #<Simple-Error No applicable methods to generic function #<Standard-Generic-Function CL-TEST::CNM-GF-04 3B7DE6C>.
Dispatching on class #<Standard-Class SYMBOL C0005EE7>.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CALL-NEXT-METHOD.6
 CL-TEST::CALL-NEXT-METHOD.7
 CL-TEST::CALL-NEXT-METHOD.8
 CL-TEST::CALL-NEXT-METHOD.9
 CL-TEST::CALL-NEXT-METHOD.10
 CL-TEST::CALL-NEXT-METHOD.11
Test CL-TEST::CALL-NEXT-METHOD.ERROR.1 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::CNM-ORDER-ERROR-GF-01 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CALL-NEXT-METHOD.ERROR.2 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CL-TEST::CNM-ORDER-ERROR-GF-02 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          :BAD [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPUTE-APPLICABLE-METHODS.1
 CL-TEST::COMPUTE-APPLICABLE-METHODS.2
 CL-TEST::COMPUTE-APPLICABLE-METHODS.3
 CL-TEST::COMPUTE-APPLICABLE-METHODS.4
 CL-TEST::COMPUTE-APPLICABLE-METHODS.5
Test CL-TEST::COMPUTE-APPLICABLE-METHODS.6 failed
Form: (CL-TEST::EQUALT (COMPUTE-APPLICABLE-METHODS (FUNCTION CL-TEST::CAM-GF-03) (LIST 0)) (LIST CL-TEST::*CAM-GF-03-METHOD1* CL-TEST::*CAM-GF-03-METHOD2* CL-TEST::*CAM-GF-03-METHOD3* CL-TEST::*CAM-GF-03-METHOD4* CL-TEST::*CAM-GF-03-METHOD5*))
Expected value:
          T
Actual value:
          #<Undefined-Function CL-TEST::CAM-GF-03> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPUTE-APPLICABLE-METHODS.7 failed
Form: (CL-TEST::EQUALT (COMPUTE-APPLICABLE-METHODS (FUNCTION CL-TEST::CAM-GF-04) (LIST 0)) (LIST CL-TEST::*CAM-GF-04-METHOD1* CL-TEST::*CAM-GF-04-METHOD2* CL-TEST::*CAM-GF-04-METHOD3* CL-TEST::*CAM-GF-04-METHOD4* CL-TEST::*CAM-GF-04-METHOD5*))
Expected value:
          T
Actual value:
          #<Undefined-Function CL-TEST::CAM-GF-04> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPUTE-APPLICABLE-METHODS.ERROR.1
 CL-TEST::COMPUTE-APPLICABLE-METHODS.ERROR.2
 CL-TEST::COMPUTE-APPLICABLE-METHODS.ERROR.3
 CL-TEST::FIND-METHOD.1
Test CL-TEST::FIND-METHOD.2 failed
Form: (CL-TEST::EQT (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE RATIONAL)))) CL-TEST::*FIND-METHOD-GF-01-METHOD2*)
Expected value:
          T
Actual value:
          #<Simple-Error No class named RATIONAL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-METHOD.3 failed
Form: (CL-TEST::EQT (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE REAL)))) CL-TEST::*FIND-METHOD-GF-01-METHOD3*)
Expected value:
          T
Actual value:
          #<Simple-Error No class named REAL.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-METHOD.4
 CL-TEST::FIND-METHOD.5
 CL-TEST::FIND-METHOD.6
Test CL-TEST::FIND-METHOD.7 failed
Form: (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) (LIST :BEFORE) (LIST (FIND-CLASS (QUOTE REAL))) NIL)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named REAL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-METHOD.8 failed
Form: (CL-TEST::EQT (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-02) NIL (LIST (QUOTE (EQL 1234567890)))) CL-TEST::*FIND-METHOD-GF-02-METHOD1*)
Expected value:
          T
Actual value:
          #<Simple-Error No such method for CL-TEST::FIND-METHOD-GF-02.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-METHOD.9 failed
Form: (CL-TEST::EQT (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-02) NIL (LIST (LIST (QUOTE EQL) CL-TEST::*FIND-METHOD-02-METHOD2-VALUE*))) CL-TEST::*FIND-METHOD-GF-02-METHOD2*)
Expected value:
          T
Actual value:
          #<Simple-Error No such method for CL-TEST::FIND-METHOD-GF-02.> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-METHOD.ERROR.1
 CL-TEST::FIND-METHOD.ERROR.2
 CL-TEST::FIND-METHOD.ERROR.3
 CL-TEST::FIND-METHOD.ERROR.4
 CL-TEST::FIND-METHOD.ERROR.5
 CL-TEST::FIND-METHOD.ERROR.6
 CL-TEST::FIND-METHOD.ERROR.7
 CL-TEST::FIND-METHOD.ERROR.8
Test CL-TEST::FIND-METHOD.ERROR.9 failed
Form: (CL-TEST::HANDLER-CASE (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) NIL NIL NIL) (ERROR NIL :ERROR))
Expected value:
          :ERROR
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-METHOD.ERROR.10 failed
Form: (CL-TEST::HANDLER-CASE (FIND-METHOD (FUNCTION CL-TEST::FIND-METHOD-GF-01) NIL (LIST (FIND-CLASS (QUOTE INTEGER)) (FIND-CLASS T)) NIL) (ERROR NIL :ERROR))
Expected value:
          :ERROR
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.1 failed
Form: (LET ((METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-01) NIL (LIST (FIND-CLASS T))))) (CL-TEST::HANDLER-CASE (ADD-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-02) METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Standard-Method CL-TEST::ADD-METHOD-GF-02 NIL (T) C0640B27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.2 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-03 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-03) NIL (LIST (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-04 (CL-TEST::X CL-TEST::Y)))))) (CL-TEST::HANDLER-CASE (ADD-METHOD CL-TEST::GF2 METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.3 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-05 (CL-TEST::X &OPTIONAL CL-TEST::Y) (:METHOD ((CL-TEST::X T) &OPTIONAL CL-TEST::Y) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-05) NIL (LIST (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-06 (CL-TEST::X CL-TEST::Y)))))) (CL-TEST::HANDLER-CASE (ADD-METHOD CL-TEST::GF2 METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::ADD-METHOD.ERROR.4
 CL-TEST::ADD-METHOD.ERROR.5
Test CL-TEST::ADD-METHOD.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-07 (CL-TEST::X) (:METHOD ((CL-TEST::X T)) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-07) NIL (LIST (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-08 (CL-TEST::X)))))) (REMOVE-METHOD CL-TEST::GF METHOD) (ADD-METHOD CL-TEST::GF2 METHOD NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.7 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-09 (CL-TEST::X CL-TEST::Y) (:METHOD ((CL-TEST::X T) (CL-TEST::Y T)) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-09) NIL (LIST (FIND-CLASS T) (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-10 (CL-TEST::X &OPTIONAL CL-TEST::Y)))))) (REMOVE-METHOD CL-TEST::GF METHOD) (CL-TEST::HANDLER-CASE (ADD-METHOD CL-TEST::GF2 METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.ERROR.8 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-11 (CL-TEST::X &KEY CL-TEST::Y) (:METHOD ((CL-TEST::X T) &KEY CL-TEST::Y) (QUOTE CL-TEST::A)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-11) NIL (LIST (FIND-CLASS T)))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-12 (CL-TEST::X)))))) (REMOVE-METHOD CL-TEST::GF METHOD) (CL-TEST::HANDLER-CASE (ADD-METHOD CL-TEST::GF2 METHOD) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.1 failed
Form: (LET* ((CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-13 (CL-TEST::X) (:METHOD ((CL-TEST::X INTEGER)) (QUOTE CL-TEST::A)) (:METHOD ((CL-TEST::X T)) (QUOTE CL-TEST::B)))))) (METHOD (FIND-METHOD (FUNCTION CL-TEST::ADD-METHOD-GF-13) NIL (LIST (FIND-CLASS (QUOTE INTEGER))))) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-14 (CL-TEST::X)))))) (DECLARE (TYPE GENERIC-FUNCTION CL-TEST::GF CL-TEST::GF2)) (VALUES (FUNCALL CL-TEST::GF 0) (FUNCALL CL-TEST::GF (QUOTE CL-TEST::X)) (CL-TEST::EQT CL-TEST::GF (REMOVE-METHOD CL-TEST::GF METHOD)) (CL-TEST::EQT CL-TEST::GF2 (ADD-METHOD CL-TEST::GF2 METHOD)) (FUNCALL CL-TEST::GF 0) (FUNCALL CL-TEST::GF (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::GF2 0)))
Expected value:
          CL-TEST::A
          CL-TEST::B
          T
          T
          CL-TEST::B
          CL-TEST::B
          CL-TEST::A
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADD-METHOD.2 failed
Form: (LET* ((CL-TEST::SPECIALIZERS (LIST (FIND-CLASS (QUOTE INTEGER)))) (CL-TEST::GF (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-15 (CL-TEST::X) (:METHOD ((CL-TEST::X INTEGER)) (QUOTE CL-TEST::A)) (:METHOD ((CL-TEST::X T)) (QUOTE CL-TEST::B)))))) (METHOD (FIND-METHOD CL-TEST::GF NIL CL-TEST::SPECIALIZERS)) (CL-TEST::GF2 (EVAL (QUOTE (DEFGENERIC CL-TEST::ADD-METHOD-GF-16 (CL-TEST::X) (:METHOD ((CL-TEST::X INTEGER)) (QUOTE CL-TEST::C)) (:METHOD ((CL-TEST::X T)) (QUOTE CL-TEST::D)))))) (CL-TEST::METHOD2 (FIND-METHOD CL-TEST::GF2 NIL CL-TEST::SPECIALIZERS))) (DECLARE (TYPE GENERIC-FUNCTION CL-TEST::GF CL-TEST::GF2)) (VALUES (FUNCALL CL-TEST::GF 0) (FUNCALL CL-TEST::GF (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::GF2 0) (FUNCALL CL-TEST::GF2 (QUOTE CL-TEST::X)) (CL-TEST::EQT CL-TEST::GF (REMOVE-METHOD CL-TEST::GF METHOD)) (CL-TEST::EQT CL-TEST::GF2 (ADD-METHOD CL-TEST::GF2 METHOD)) (CL-TEST::EQT METHOD (FIND-METHOD CL-TEST::GF2 NIL CL-TEST::SPECIALIZERS)) (CL-TEST::EQT CL-TEST::METHOD2 (FIND-METHOD CL-TEST::GF2 NIL CL-TEST::SPECIALIZERS)) (FUNCALL CL-TEST::GF 0) (FUNCALL CL-TEST::GF (QUOTE CL-TEST::X)) (FUNCALL CL-TEST::GF2 0) (FUNCALL CL-TEST::GF2 (QUOTE CL-TEST::X))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          T
          T
          T
          NIL
          CL-TEST::B
          CL-TEST::B
          CL-TEST::A
          CL-TEST::D
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-NAME.1
Test CL-TEST::CLASS-NAME.2 failed
Form: (CLASS-NAME (MAKE-INSTANCE (QUOTE CL-TEST::CLASS-NAME-CLASS-01)))
Expected value:
          CL-TEST::SILLY
Actual value:
          #<Simple-Error The slot SYSTEM.CLOSETTE::NAME is missing from the class #<Standard-Class CL-TEST::CLASS-NAME-CLASS-01 800B4EA7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-CLASS-NAME.1 failed
Form: (CL-TEST::TYPEP* (FUNCTION (SETF CLASS-NAME)) (QUOTE STANDARD-GENERIC-FUNCTION))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-CLASS-NAME.2 failed
Form: (LET ((CL-TEST::SYM (GENSYM)) (CL-TEST::NEWSYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFCLASS (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) NIL (CL-TEST::A CL-TEST::B CL-TEST::C)))) (LET ((CLASS (FIND-CLASS CL-TEST::SYM))) (VALUES (CL-TEST::EQLT (CLASS-NAME CLASS) CL-TEST::SYM) (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (SETF (CLASS-NAME (FIND-CLASS CL-TEST::SYM)) CL-TEST::NEWSYM)) (LIST CL-TEST::NEWSYM)) (CL-TEST::EQLT CL-TEST::NEWSYM (CLASS-NAME CLASS)))))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::CLASS-NAME.ERROR.1
 CL-TEST::CLASS-NAME.ERROR.2
 CL-TEST::CLASS-OF.ERROR.1
 CL-TEST::CLASS-OF.ERROR.2
Test CL-TEST::UNBOUND-SLOT.1 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UBS-CLASS-01)))) (CL-TEST::HANDLER-CASE (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::A)) (UNBOUND-SLOT (CL-TEST::C) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CELL-ERROR)) (CL-TEST::EQT (UNBOUND-SLOT-INSTANCE CL-TEST::C) CL-TEST::OBJ) (CELL-ERROR-NAME CL-TEST::C)))))
Expected value:
          T
          T
          CL-TEST::A
Actual value:
          #<Simple-Error The slot CL-TEST::A is unbound in the object #<Cl-Test::Ubs-Class-01 817C0FC7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNBOUND-SLOT.2 failed
Form: (LET ((CL-TEST::OBJ (MAKE-INSTANCE (QUOTE CL-TEST::UBS-CLASS-02)))) (CL-TEST::HANDLER-CASE (SLOT-VALUE CL-TEST::OBJ (QUOTE CL-TEST::B)) (UNBOUND-SLOT (CL-TEST::C) (VALUES (CL-TEST::TYPEP* CL-TEST::C (QUOTE CELL-ERROR)) (CL-TEST::EQT (UNBOUND-SLOT-INSTANCE CL-TEST::C) CL-TEST::OBJ) (CELL-ERROR-NAME CL-TEST::C)))))
Expected value:
          T
          T
          CL-TEST::B
Actual value:
          #<Simple-Error The slot CL-TEST::B is not an instance
slot in the class #<Standard-Class CL-TEST::UBS-CLASS-02 800B6C57>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (CL-TEST::TYPEP* (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X) (LIST CL-TEST::X)))) (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113236.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.2 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER)) (LIST CL-TEST::X)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113237.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.3 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LET ((CL-TEST::X 0)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X (EQL (INCF CL-TEST::X)))) (LIST CL-TEST::X))))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113238.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.4 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)) ((CL-TEST::X T) (CL-TEST::Y CONS)) (SETF (CAR CL-TEST::Y) CL-TEST::X)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (FBOUNDP CL-TEST::SYM) (CL-TEST::TYPEP* (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)))) (QUOTE STANDARD-GENERIC-FUNCTION)) (LET ((CL-TEST::X (CONS 1 2))) (LIST (FUNCALL (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)))) 3 CL-TEST::X) CL-TEST::X))))
Expected value:
          T
          NIL
          T
          (3 (3 . 2))
Actual value:
          #<Simple-Error No generic function named (SETF #:G113239).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.5 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER)) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (LIST CL-TEST::X))))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113240.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.6 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)) ((CL-TEST::X T) (CL-TEST::Y CONS)) (RETURN-FROM (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (SETF (CAR CL-TEST::Y) CL-TEST::X))))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (FBOUNDP CL-TEST::SYM) (CL-TEST::TYPEP* (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)))) (QUOTE STANDARD-GENERIC-FUNCTION)) (LET ((CL-TEST::X (CONS 1 2))) (LIST (FUNCALL (FDEFINITION (SYSTEM.INTERNALS::BACKQUOTE (SETF (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)))) 3 CL-TEST::X) CL-TEST::X))))
Expected value:
          T
          NIL
          T
          (3 (3 . 2))
Actual value:
          #<Simple-Error No generic function named (SETF #:G113241).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.7 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &AUX (CL-TEST::Y (LIST CL-TEST::X))) CL-TEST::Y))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1)))
Expected value:
          T
          T
          (1)
Actual value:
          #<Simple-Error No generic function named #:G113242.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.8 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &KEY CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Z)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 2 :Z 3) (FUNCALL CL-TEST::SYM 4 :ALLOW-OTHER-KEYS NIL) (FUNCALL CL-TEST::SYM 5 :ALLOW-OTHER-KEYS T :BOGUS 17) (FUNCALL CL-TEST::SYM 6 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BOGUS 17)))
Expected value:
          T
          T
          (1 NIL)
          (2 3)
          (4 NIL)
          (5 NIL)
          (6 NIL)
Actual value:
          #<Simple-Error No generic function named #:G113243.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.9 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &KEY (CL-TEST::Z :MISSING)) (LIST CL-TEST::X CL-TEST::Z)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 2 :Z 3) (FUNCALL CL-TEST::SYM 4 :ALLOW-OTHER-KEYS NIL)))
Expected value:
          T
          T
          (1 :MISSING)
          (2 3)
          (4 :MISSING)
Actual value:
          #<Simple-Error No generic function named #:G113244.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.10 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &KEY (CL-TEST::Z :MISSING CL-TEST::Z-P)) (LIST CL-TEST::X CL-TEST::Z (CL-TEST::NOTNOT CL-TEST::Z-P))))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 2 :Z 3) (FUNCALL CL-TEST::SYM 4 :ALLOW-OTHER-KEYS NIL)))
Expected value:
          T
          T
          (1 :MISSING NIL)
          (2 3 T)
          (4 :MISSING NIL)
Actual value:
          #<Simple-Error No generic function named #:G113245.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.11 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (METHOD (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X INTEGER) &REST CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Z)))))) (VALUES (CL-TEST::TYPEP* METHOD (QUOTE STANDARD-METHOD)) (CL-TEST::TYPEP* (FDEFINITION CL-TEST::SYM) (QUOTE STANDARD-GENERIC-FUNCTION)) (FUNCALL CL-TEST::SYM 1) (FUNCALL CL-TEST::SYM 2 3)))
Expected value:
          T
          T
          (1 NIL)
          (2 (3))
Actual value:
          #<Simple-Error No generic function named #:G113246.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T)) CL-TEST::X) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.2 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) (CL-TEST::Y T) (CL-TEST::Z T)) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.3 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y &OPTIONAL CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) (CL-TEST::Y T) (CL-TEST::Z T)) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.4 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y &OPTIONAL CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) (CL-TEST::Y T) &OPTIONAL) (LIST CL-TEST::X CL-TEST::Y)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.5 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y &OPTIONAL CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) (CL-TEST::Y T) &OPTIONAL CL-TEST::Z CL-TEST::W) (LIST CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.6 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X &REST CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T)) (LIST CL-TEST::X)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.7 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &REST CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Z)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.8 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X &KEY CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T)) (LIST CL-TEST::X)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.9 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY CL-TEST::Z) (LIST CL-TEST::X CL-TEST::Z)) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.10 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X &KEY CL-TEST::Z)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY) CL-TEST::X) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.11 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X &KEY)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T)) CL-TEST::X) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.12 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFGENERIC (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) (CL-TEST::X)))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY) CL-TEST::X) ERROR))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.13 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T)) CL-TEST::X)))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 2) PROGRAM-ERROR)))))
Expected value:
          T
          T
Actual value:
          #<Simple-Error No generic function named #:G113295.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.14 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY) CL-TEST::X)))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM)) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 2) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 :BOGUS T) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :BOGUS T) PROGRAM-ERROR)))))
Expected value:
          T
          T
          T
          T
Actual value:
          #<Simple-Error No generic function named #:G113296.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFMETHOD.ERROR.15 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (LOCALLY (DECLARE (OPTIMIZE SAFETY)) (DEFMETHOD (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) ((CL-TEST::X T) &KEY CL-TEST::Y) CL-TEST::X)))) (VALUES (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 :BOGUS T) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 :Y) PROGRAM-ERROR))) (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::SYM) 1 3 NIL) PROGRAM-ERROR)))))
Expected value:
          T
          T
          T
Actual value:
          #<Simple-Error No generic function named #:G113297.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION.1
Test CL-TEST::CONDITION.2 failed
Form: (LOOP CL-TEST::FOR (CL-TEST::CND . CL-TEST::SUPERS) CL-TEST::IN CL-TEST::*ALLOWED-CONDITION-INCLUSIONS* APPEND (LOOP CL-TEST::FOR CL-TEST::SUPER CL-TEST::IN CL-TEST::SUPERS UNLESS (SUBTYPEP CL-TEST::CND CL-TEST::SUPER) CL-TEST::COLLECT (LIST CL-TEST::CND CL-TEST::SUPER)))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::CNDS CL-TEST::IN CL-TEST::*ALLOWED-CONDITION-INCLUSIONS* CL-TEST::FOR CL-TEST::CND = (FIRST CL-TEST::CNDS) APPEND (LOOP CL-TEST::FOR CL-TEST::SUPER CL-TEST::IN (SET-DIFFERENCE CL-TEST::*CONDITION-TYPES* CL-TEST::CNDS) WHEN (SUBTYPEP CL-TEST::CND CL-TEST::SUPER) CL-TEST::COLLECT (LIST CL-TEST::CND CL-TEST::SUPER)))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::CELL-ERROR-NAME.1
 CL-TEST::CELL-ERROR-NAME.2
 CL-TEST::CELL-ERROR-NAME.3
 CL-TEST::CELL-ERROR-NAME.4
Test CL-TEST::CELL-ERROR-NAME.5 failed
Form: (CELL-ERROR-NAME (MAKE-CONDITION (QUOTE UNBOUND-SLOT) :NAME (QUOTE CL-TEST::S)))
Expected value:
          CL-TEST::S
Actual value:
          #<Simple-Error No class named UNBOUND-SLOT.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CELL-ERROR-NAME.6 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (CELL-ERROR-NAME (PROGN (INCF CL-TEST::I) (MAKE-CONDITION (QUOTE UNBOUND-SLOT) :NAME (QUOTE CL-TEST::S)))) CL-TEST::I))
Expected value:
          CL-TEST::S
          1
Actual value:
          #<Simple-Error No class named UNBOUND-SLOT.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CELL-ERROR-NAME.ERROR.1
 CL-TEST::CELL-ERROR-NAME.ERROR.2
 CL-TEST::ASSERT.1
 CL-TEST::ASSERT.2
 CL-TEST::ASSERT.3
 CL-TEST::ASSERT.3A
 CL-TEST::ASSERT.4
 CL-TEST::ASSERT.5
 CL-TEST::ASSERT.6
 CL-TEST::ASSERT.7
 CL-TEST::ASSERT.8
 CL-TEST::ASSERT.9
Test CL-TEST::ASSERT.10 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (ASSERT (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M T))))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSERT.11 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (ASSERT (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M T)) NIL "Foo!"))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::ERROR.1
 CL-TEST::ERROR.2
 CL-TEST::ERROR.3
 CL-TEST::ERROR.4
Test CL-TEST::ERROR.5 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Error"))) (CL-TEST::HANDLER-CASE (ERROR CL-TEST::FMT) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::ERROR.6
 CL-TEST::ERROR.7
 CL-TEST::ERROR.8
Test CL-TEST::ERROR.9 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Boo!"))) (CL-TEST::HANDLER-CASE (ERROR (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL CL-TEST::FMT) (SIMPLE-WARNING (CL-TEST::C) (CL-TEST::FROB-SIMPLE-WARNING CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ERROR.10 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Error"))) (CL-TEST::HANDLER-CASE (ERROR (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL CL-TEST::FMT) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ERROR.11 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Error"))) (CL-TEST::HANDLER-CASE (ERROR CL-TEST::FMT) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ERROR.12 failed
Form: (LET* ((CL-TEST::FMT (FORMATTER "Error")) (CL-TEST::CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL CL-TEST::FMT))) (CL-TEST::HANDLER-CASE (ERROR CL-TEST::CND) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::CERROR.1
 CL-TEST::CERROR.2
Test CL-TEST::CERROR.2A failed
Form: (LET* ((CL-TEST::FMT (FORMATTER "Cerror")) (CL-TEST::CND (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL CL-TEST::FMT))) (CL-TEST::HANDLER-CASE (CERROR "Continue on." CL-TEST::CND) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::CERROR.3
 CL-TEST::CERROR.4
Test CL-TEST::CERROR.4A failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Cerror: ~A"))) (CL-TEST::HANDLER-CASE (CERROR "On on" CL-TEST::FMT 10) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT 10))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CERROR.5 failed
Form: (LET ((CL-TEST::FMT (FORMATTER "Cerror"))) (CL-TEST::HANDLER-CASE (CERROR "Keep going." CL-TEST::FMT) (SIMPLE-ERROR (CL-TEST::C) (CL-TEST::FROB-SIMPLE-ERROR CL-TEST::C CL-TEST::FMT))))
Expected value:
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::CERROR.6
 CL-TEST::CERROR.ERROR.1
 CL-TEST::CERROR.ERROR.2
 CL-TEST::CHECK-TYPE.1
 CL-TEST::CHECK-TYPE.2
#<Simple-Condition Break>
Available restarts:
2 CONTINUE: Return from BREAK.
1 STORE-VALUE: Input a new value for CL-TEST::X.
0 ABORT: Return to READ-EVAL-PRINT loop.

10000E970 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E9D0 C876CC SYSTEM.INTERNALS::BACKTRACE
10000EA40 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000EA70 C7E46C INVOKE-DEBUGGER
10000EAD0 C7BE0C BREAK
10000EB90 2C46BC APPLY
10000EBC0 C32DBC (LAMBDA :IN (DEFMETHOD MAKE-INSTANCE (STANDARD-CLASS)))
10000EBF0 C331DC (DEFMETHOD MAKE-INSTANCE (STANDARD-CLASS))
10000EC20 C1A46C (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
10000EC50 C0D8AC (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
10000ECA0 2C46BC APPLY
10000ECD0 C343FC (LAMBDA :IN (DEFMETHOD MAKE-INSTANCE (SYMBOL)))
10000ED00 C347CC (DEFMETHOD MAKE-INSTANCE (SYMBOL))
10000ED30 C1A46C (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
10000ED60 C0D8AC (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
10000EDB0 2C46BC APPLY
Enter a restart number or evaluate a form.
0] (sys.int::backtrace)

10000E8E0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E940 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E970 D5368C SYSTEM.EVAL::EVAL-CONS
10000E9A0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E9D0 3AE9B9C EVAL
10000EA40 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000EA70 C7E46C INVOKE-DEBUGGER
10000EAD0 C7BE0C BREAK
10000EB90 2C46BC APPLY
10000EBC0 C32DBC (LAMBDA :IN (DEFMETHOD MAKE-INSTANCE (STANDARD-CLASS)))
10000EBF0 C331DC (DEFMETHOD MAKE-INSTANCE (STANDARD-CLASS))
10000EC20 C1A46C (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
10000EC50 C0D8AC (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
10000ECA0 2C46BC APPLY
10000ECD0 C343FC (LAMBDA :IN (DEFMETHOD MAKE-INSTANCE (SYMBOL)))
10000ED00 C347CC (DEFMETHOD MAKE-INSTANCE (SYMBOL))
10000ED30 C1A46C (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
10000ED60 C0D8AC (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
10000EDB0 2C46BC APPLY
10000EE70 C5D82C MAKE-CONDITION
10000EEC0 2C46BC APPLY
10000EEF0 C5DC2C SYSTEM.INTERNALS::COERCE-TO-CONDITION
10000EF20 C7729C ERROR
10000EF80 3138EC SYSTEM.INTERNALS::CHECK-TYPE-ERROR
10000EFB0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EFE0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F020 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F050 D5368C SYSTEM.EVAL::EVAL-CONS
10000F080 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F0B0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F0E0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F120 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F150 D5368C SYSTEM.EVAL::EVAL-CONS
10000F180 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F1B0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F1E0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F240 D4E4CC (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)
10000F270 D5368C SYSTEM.EVAL::EVAL-CONS
10000F2A0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F300 D4E4CC (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)
10000F330 D5368C SYSTEM.EVAL::EVAL-CONS
10000F360 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F390 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F3C0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F400 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F430 D5368C SYSTEM.EVAL::EVAL-CONS
10000F460 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F490 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F4F0 CA6E6C (SYSTEM.EVAL::SPECIAL-FORM BLOCK)
10000F520 D5368C SYSTEM.EVAL::EVAL-CONS
10000F550 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F580 D5368C SYSTEM.EVAL::EVAL-CONS
10000F5B0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F5E0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F610 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F640 D5368C SYSTEM.EVAL::EVAL-CONS
10000F670 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F6A0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F6D0 D47ACC (SYSTEM.EVAL::SPECIAL-FORM PROGN)
10000F700 D5368C SYSTEM.EVAL::EVAL-CONS
10000F730 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F760 CA9A3C (SYSTEM.EVAL::SPECIAL-FORM IF)
10000F790 D5368C SYSTEM.EVAL::EVAL-CONS
10000F7C0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F7F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F820 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F850 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F880 D47ACC (SYSTEM.EVAL::SPECIAL-FORM PROGN)
10000F8B0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F8E0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F910 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F940 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F980 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F9B0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F9E0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FA10 D5368C SYSTEM.EVAL::EVAL-CONS
10000FA40 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FA70 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000FAA0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000FAE0 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000FB10 D5368C SYSTEM.EVAL::EVAL-CONS
10000FB40 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FB70 D5368C SYSTEM.EVAL::EVAL-CONS
10000FBA0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FBD0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000FC00 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000FC40 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000FC70 D5368C SYSTEM.EVAL::EVAL-CONS
10000FCA0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FCD0 3AE9B9C EVAL
10000FDC0 18A67FC (LAMBDA :IN REGRESSION-TEST::DO-ENTRY)
10000FE20 2D4F3C SYSTEM.INTERNALS::%CATCH
10000FE50 18A865C REGRESSION-TEST::DO-ENTRY
10000FE80 18BE4FC REGRESSION-TEST::DO-ENTRIES
10000FEC0 18BBB6C REGRESSION-TEST:DO-TESTS
10000FEF0 D5368C SYSTEM.EVAL::EVAL-CONS
10000FF20 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FF50 3AE9B9C EVAL
10000FFC0 17B3B6C SYSTEM.INTERNALS::REPL
10000FFF0 26CEAC SYSTEM.INTERNALS::REINITIALIZE-LISP
NIL
0] ((regress(regres(regre(regr(reg(re(r(424shit-sshit-is-broke
Test CL-TEST::CHECK-TYPE.3 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (EQL (TYPE-ERROR-DATUM CL-TEST::C) CL-TEST::X)) (ASSERT (NOT (TYPEP CL-TEST::X (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) (STORE-VALUE 15 CL-TEST::C))))) (VALUES (CHECK-TYPE CL-TEST::X NUMBER) CL-TEST::X)))
Expected value:
          NIL
          15
Actual value:
          #<Unbound-Variable SHIT-IS-BROKE> [Actual value: #<error during printing>

 NIL
 CL-TEST::CHECK-TYPE.4
#<Simple-Condition Break>
Available restarts:
2 CONTINUE: Return from BREAK.
1 STORE-VALUE: Input a new value for CL-TEST::X.
0 ABORT: Return to READ-EVAL-PRINT loop.

10000E760 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E7C0 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E830 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E860 C7E46C INVOKE-DEBUGGER
10000E8C0 C7BE0C BREAK
10000E960 28D19C SYSTEM.INTERNALS::MAKE-CLOSURE
10000E9C0 C9E49C SYSTEM.EVAL::FIND-FUNCTION
10000E9F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EA20 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EA50 CA9A3C (SYSTEM.EVAL::SPECIAL-FORM IF)
10000EA80 D5368C SYSTEM.EVAL::EVAL-CONS
10000EAB0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EB10 D4E4CC (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)
10000EB40 D5368C SYSTEM.EVAL::EVAL-CONS
10000EB70 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EBA0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
Enter a restart number or evaluate a form.
0] still-broke
The variable STILL-BROKE is unbound.
Available restarts:
5 STORE-VALUE: Input a new value for STILL-BROKE.
4 USE-VALUE: Input a value to be used in place of STILL-BROKE.
3 ABORT: Return to debugger top level.
2 CONTINUE: Return from BREAK.
1 STORE-VALUE: Input a new value for CL-TEST::X.
0 ABORT: Return to READ-EVAL-PRINT loop.

10000E5A0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E600 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E670 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E6A0 C7E46C INVOKE-DEBUGGER
10000E6D0 C7729C ERROR
10000E700 2CBDCC SYSTEM.INTERNALS::RAISE-UNBOUND-ERROR
10000E760 D524AC SYSTEM.EVAL::EVAL-SYMBOL
10000E790 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E7C0 3AE9B9C EVAL
10000E830 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E860 C7E46C INVOKE-DEBUGGER
10000E8C0 C7BE0C BREAK
10000E960 28D19C SYSTEM.INTERNALS::MAKE-CLOSURE
10000E9C0 C9E49C SYSTEM.EVAL::FIND-FUNCTION
10000E9F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EA20 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
Enter a restart number or evaluate a form.
1] (throw sys.int(throw sys.in(throw sys.i(throw sys.(throw sys(throw sy(throw s(throw 'sys(throw 'sy(throw 's(throw 'regression-test::*(throw 'regression-test::(throw 'regression-test:(throw 'regression-test(throw 'regression-tes(throw 'regression-te(throw 'regression-t(throw 'regression-(throw 'regression(throw 'regressio(throw 'regressi(throw 'regress(throw 'regres(throw 'regre(throw 'regr(throw 'reg(throw 're(throw 'r(throw '(throw (throw(thro(thr(th(t(regression-test:continue(regression-test:continu(regression-test:contin(regression-test:conti(regression-test:cont(regression-test:con(regression-test:co(regression-test:c(regression-test:(regression-test(regression-tes(regression-te(regression-t(regression-(regression(regressio(regressi(regress(regres(regre(regr(reg(re(r(regression-test::*in-test*
T
1] (throw 't(throw 'regression-test::*in-test* nil)

 NIL
#<Simple-Condition Break>
Available restarts:
1 CONTINUE: Return from BREAK.
0 ABORT: Return to READ-EVAL-PRINT loop.

10000E990 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E9F0 C876CC SYSTEM.INTERNALS::BACKTRACE
10000EA60 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000EA90 C7E46C INVOKE-DEBUGGER
10000EAF0 C7BE0C BREAK
10000EB90 3B9B7C GETF
10000EBC0 3A2941C SYSTEM.CLOSETTE:SLOT-DEFINITION-NAME
10000EBF0 BDF58C SYSTEM.CLOSETTE::SLOT-LOCATION
10000EC20 BE2E6C SYSTEM.CLOSETTE::STD-SLOT-BOUNDP
10000EC50 BE36EC SLOT-BOUNDP
10000EC80 C3677C (LAMBDA :IN (DEFMETHOD SHARED-INITIALIZE (STANDARD-OBJECT T)))
10000ECB0 C36F8C (DEFMETHOD SHARED-INITIALIZE (STANDARD-OBJECT T))
10000ECE0 C1A46C (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
10000ED10 C0D8AC (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
10000ED70 2C46BC APPLY
10000EDA0 C34E8C (LAMBDA :IN (DEFMETHOD INITIALIZE-INSTANCE (STANDARD-OBJECT)))
Enter a restart number or evaluate a form.
0] barf
Test CL-TEST::CHECK-TYPE.6 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (EQL (TYPE-ERROR-DATUM CL-TEST::C) CL-TEST::X)) (ASSERT (NOT (TYPEP CL-TEST::X (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) (STORE-VALUE 15 NIL))))) (VALUES (CHECK-TYPE CL-TEST::X NUMBER) CL-TEST::X)))
Expected value:
          NIL
          15
Actual value:
          #<Unbound-Variable BARF> [Actual value: #<error during printing>

 NIL
#<Simple-Condition Break>
Available restarts:
2 CONTINUE: Return from BREAK.
1 STORE-VALUE: Input a new value for CL-TEST::X.
0 ABORT: Return to READ-EVAL-PRINT loop.

10000E580 C868DC MAP-BACKTRACE
10000E5E0 C876CC BACKTRACE
10000E650 C8308C ENTER-DEBUGGER
10000E680 C7E46C INVOKE-DEBUGGER
10000E6E0 C7BE0C BREAK
10000E780 33F40C ARRAYP
10000E7B0 349AAC ARRAY-DIMENSION
10000E7E0 3516DC (SETF AREF-1)
10000E820 34795C ADJUST-ARRAY
10000E850 357A5C VECTOR-PUSH-EXTEND
10000E880 D6F6FC STRING-OUTPUT-STREAM-WRITE-CHAR
10000E8C0 D6FBDC (LAMBDA IN (DEFMETHOD STREAM-WRITE-CHAR (STRING-OUTPUT-STREAM T)))
10000E8F0 D7006C (DEFMETHOD STREAM-WRITE-CHAR (STRING-OUTPUT-STREAM T))
10000E920 C1A46C (LAMBDA IN STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
10000E950 C0D8AC (LAMBDA IN COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
10000E980 D6B4AC WRITE-CHAR
Enter a restart number or evaluate a form.
0] barf
The variable BARF is unbound.
Available restarts:
5 STORE-VALUE: Input a new value for BARF.
4 USE-VALUE: Input a value to be used in place of BARF.
3 ABORT: Return to debugger top level.
2 CONTINUE: Return from BREAK.
1 STORE-VALUE: Input a new value for CL-TEST::X.
0 ABORT: Return to READ-EVAL-PRINT loop.

10000E3C0 C868DC MAP-BACKTRACE
10000E420 C876CC BACKTRACE
10000E490 C8308C ENTER-DEBUGGER
10000E4C0 C7E46C INVOKE-DEBUGGER
10000E4F0 C7729C ERROR
10000E520 2CBDCC RAISE-UNBOUND-ERROR
10000E580 D524AC EVAL-SYMBOL
10000E5B0 D53F2C EVAL-IN-LEXENV
10000E5E0 3AE9B9C EVAL
10000E650 C8308C ENTER-DEBUGGER
10000E680 C7E46C INVOKE-DEBUGGER
10000E6E0 C7BE0C BREAK
10000E780 33F40C ARRAYP
10000E7B0 349AAC ARRAY-DIMENSION
10000E7E0 3516DC (SETF AREF-1)
10000E820 34795C ADJUST-ARRAY
Enter a restart number or evaluate a form.
1] 3
0] barf
The variable BARF is unbound.
Available restarts:
5 STORE-VALUE: Input a new value for BARF.
4 USE-VALUE: Input a value to be used in place of BARF.
3 ABORT: Return to debugger top level.
2 CONTINUE: Return from BREAK.
1 STORE-VALUE: Input a new value for CL-TEST::X.
0 ABORT: Return to READ-EVAL-PRINT loop.

10000E3C0 C868DC MAP-BACKTRACE
10000E420 C876CC BACKTRACE
10000E490 C8308C ENTER-DEBUGGER
10000E4C0 C7E46C INVOKE-DEBUGGER
10000E4F0 C7729C ERROR
10000E520 2CBDCC RAISE-UNBOUND-ERROR
10000E580 D524AC EVAL-SYMBOL
10000E5B0 D53F2C EVAL-IN-LEXENV
10000E5E0 3AE9B9C EVAL
10000E650 C8308C ENTER-DEBUGGER
10000E680 C7E46C INVOKE-DEBUGGER
10000E6E0 C7BE0C BREAK
10000E780 33F40C ARRAYP
10000E7B0 349AAC ARRAY-DIMENSION
10000E7E0 3516DC (SETF AREF-1)
10000E820 34795C ADJUST-ARRAY
Enter a restart number or evaluate a form.
1] 3(throw 'regression-test::*in-test* nil)

 NIL
Test CL-TEST::CHECK-TYPE.8 failed
Form: (LET ((CL-TEST::X 10)) (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CHECK-TYPE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)) (INTEGER 8 13))))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::CHECK-TYPE.9
 CL-TEST::WARN.1
#<Simple-Error No applicable restart NIL>
Available restarts:
0 ABORT: Return to READ-EVAL-PRINT loop.

10000F0D0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000F130 C876CC SYSTEM.INTERNALS::BACKTRACE
10000F1A0 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000F1D0 C7E46C INVOKE-DEBUGGER
10000F200 C7729C ERROR
10000F230 C65DAC SYSTEM.INTERNALS::FIND-RESTART-OR-DIE
10000F260 C664CC INVOKE-RESTART
10000F290 3A9284C MUFFLE-WARNING
10000F2C0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F2F0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F320 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F350 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F380 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000F3C0 C5E56C SIGNAL
10000F450 C7D84C WARN
10000F480 D5368C SYSTEM.EVAL::EVAL-CONS
Enter a restart number or evaluate a form.
0] (throw 'regression-test::*in-test* nil)

 NIL
 CL-TEST::WARN.3
 CL-TEST::WARN.4
 CL-TEST::WARN.5
 CL-TEST::WARN.6
 CL-TEST::WARN.7
 CL-TEST::WARN.8
 CL-TEST::WARN.9
 CL-TEST::WARN.10
 CL-TEST::WARN.11
Warning: The condition CONDITION was signalled.
Test CL-TEST::WARN.12 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (QUOTE CONDITION)) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Condition >
Test CL-TEST::WARN.13 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (QUOTE SIMPLE-CONDITION)) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::WARN.14 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-WARNING)) :FORMAT-CONTROL "Foo") TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid condition designator #<Simple-Warning > (:FORMAT-CONTROL "Foo").> [Actual value: #<error during printing>

 NIL
 CL-TEST::WARN.15
Warning: The condition CONDITION was signalled.
Test CL-TEST::WARN.16 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE CONDITION))) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Warning: #<Simple-Condition >
Test CL-TEST::WARN.17 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-CONDITION))) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::WARN.18 failed
Form: (CL-TEST:SIGNALS-ERROR (WARN (MAKE-CONDITION (QUOTE SIMPLE-ERROR))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error > [Actual value: #<error during printing>

 NIL
Test CL-TEST::WARN.19 failed
Form: (LET ((CL-TEST::WARNED NIL)) (CL-TEST::HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (TYPEP CL-TEST::C (QUOTE SIMPLE-WARNING))) (SETF CL-TEST::WARNED T) (MUFFLE-WARNING CL-TEST::C))))) (VALUES (MULTIPLE-VALUE-LIST (WARN (MAKE-CONDITION (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL (FORMATTER "Foo!")))) CL-TEST::WARNED)))
Expected value:
          (NIL)
          T
Actual value:
          #<Undefined-Function FORMATTER> [Actual value: #<error during printing>

 NIL
 CL-TEST::INVOKE-DEBUGGER.1
 CL-TEST::INVOKE-DEBUGGER.ERROR.1
 CL-TEST::INVOKE-DEBUGGER.ERROR.2
Test CL-TEST::INVOKE-DEBUGGER.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA NIL NIL)))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INVOKE-DEBUGGER.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (CL-TEST::C) CL-TEST::C)))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too many arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::C)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INVOKE-DEBUGGER.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((*DEBUGGER-HOOK* (FUNCTION (LAMBDA (CL-TEST::C CL-TEST::HOOK CL-TEST::X) (LIST CL-TEST::C CL-TEST::HOOK CL-TEST::X))))) (INVOKE-DEBUGGER (MAKE-CONDITION (QUOTE SIMPLE-ERROR)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Too few arguments to function SYSTEM.EVAL::INTERPRETED-FUNCTION lambda-list (CL-TEST::C CL-TEST::HOOK CL-TEST::X)> [Actual value: #<error during printing>

 NIL
 CL-TEST::HANDLER-BIND.1
 CL-TEST::HANDLER-BIND.2
 CL-TEST::HANDLER-BIND.3
 CL-TEST::HANDLER-BIND.4
 CL-TEST::HANDLER-BIND.5
#<Simple-Error an error>
Available restarts:
0 ABORT: Return to READ-EVAL-PRINT loop.

10000EE60 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000EEC0 C876CC SYSTEM.INTERNALS::BACKTRACE
10000EF30 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000EF60 C7E46C INVOKE-DEBUGGER
10000EF90 C7729C ERROR
10000EFC0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EFF0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F020 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F050 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F080 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000F0C0 C5E56C SIGNAL
10000F0F0 C7729C ERROR
10000F120 D5368C SYSTEM.EVAL::EVAL-CONS
10000F150 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F180 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F1B0 D47ACC (SYSTEM.EVAL::SPECIAL-FORM PROGN)
Enter a restart number or evaluate a form.
0] (asdf
The variable ASDF is unbound.
Available restarts:
3 STORE-VALUE: Input a new value for ASDF.
2 USE-VALUE: Input a value to be used in place of ASDF.
1 ABORT: Return to debugger top level.
0 ABORT: Return to READ-EVAL-PRINT loop.

10000ECA0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000ED00 C876CC SYSTEM.INTERNALS::BACKTRACE
10000ED70 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000EDA0 C7E46C INVOKE-DEBUGGER
10000EDD0 C7729C ERROR
10000EE00 2CBDCC SYSTEM.INTERNALS::RAISE-UNBOUND-ERROR
10000EE60 D524AC SYSTEM.EVAL::EVAL-SYMBOL
10000EE90 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EEC0 3AE9B9C EVAL
10000EF30 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000EF60 C7E46C INVOKE-DEBUGGER
10000EF90 C7729C ERROR
10000EFC0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EFF0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F020 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F050 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
Enter a restart number or evaluate a form.
1] (throw regressin-(throw regressin(throw regressi(throw regress(throw regres(throw regre(throw regr(throw reg(throw re(throw r(throw 'regression-test::*in-test* nil)

 NIL
 CL-TEST::HANDLER-BIND.7
 CL-TEST::HANDLER-BIND.8
 CL-TEST::HANDLER-BIND.9
 CL-TEST::HANDLER-BIND.10
 CL-TEST::HANDLER-BIND.11
 CL-TEST::HANDLER-BIND.12
 CL-TEST::HANDLER-BIND.13
 CL-TEST::HANDLER-BIND.14
 CL-TEST::HANDLER-BIND.15
 CL-TEST::HANDLER-BIND.16 KEYWORD::DATUM #<unknown> KEYWORD::EXPECTED-TYPE COMMON-LISP::LIST
TYPE-ERROR
Available restarts:
0 ABORT: #<Restart 8007F1C7>

10000EC70 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000ECD0 C876CC SYSTEM.INTERNALS::BACKTRACE
10000ED40 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000ED70 C7E46C INVOKE-DEBUGGER
10000EDA0 C7729C ERROR
10000EDD0 2CC38C SYSTEM.INTERNALS::RAISE-TYPE-ERROR
10000EE00 3120EC TYPEP
10000EE40 C5E56C SIGNAL
10000EE70 C7729C ERROR
10000EEA0 2CC38C SYSTEM.INTERNALS::RAISE-TYPE-ERROR
10000EED0 3120EC TYPEP
10000EF10 C5E56C SIGNAL
10000EF40 C7729C ERROR
10000EF70 2CC38C SYSTEM.INTERNALS::RAISE-TYPE-ERROR
10000EFA0 3120EC TYPEP
10000EFE0 C5E56C SIGNAL
Enter a restart number or evaluate a form.
0] (throw 'regression-test::*in-test* nil)

 NIL
 CL-TEST::HANDLER-CASE.1
 CL-TEST::HANDLER-CASE.2
 CL-TEST::HANDLER-CASE.3
 CL-TEST::HANDLER-CASE.4 KEYWORD::DATUM #<unknown> KEYWORD::EXPECTED-TYPE COMMON-LISP::LIST
TYPE-ERROR
Available restarts:
0 ABORT: #<Restart 8007F1C7>

10000EBC0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000EC20 C876CC SYSTEM.INTERNALS::BACKTRACE
10000EC90 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000ECC0 C7E46C INVOKE-DEBUGGER
10000ECF0 C7729C ERROR
10000ED20 2CC38C SYSTEM.INTERNALS::RAISE-TYPE-ERROR
10000ED50 3120EC TYPEP
10000ED90 C5E56C SIGNAL
10000EDC0 C7729C ERROR
10000EDF0 2CC38C SYSTEM.INTERNALS::RAISE-TYPE-ERROR
10000EE20 3120EC TYPEP
10000EE60 C5E56C SIGNAL
10000EE90 C7729C ERROR
10000EEC0 2CC38C SYSTEM.INTERNALS::RAISE-TYPE-ERROR
10000EEF0 3120EC TYPEP
10000EF30 C5E56C SIGNAL
Enter a restart number or evaluate a form.
0] (throw 'regressin(throw 'regression-test::*in-test* nil)

 NIL
 CL-TEST::HANDLER-CASE.6
 CL-TEST::HANDLER-CASE.7
Test CL-TEST::HANDLER-CASE.9 failed
Form: (CL-TEST::HANDLER-CASE (VALUES 1 2 3 4 5 6 7 8) (CONDITION NIL NIL))
Expected value:
          1
          2
          3
          4
          5
          6
          7
          8
Actual value:
          1 [Actual value: #<error during printing>

 NIL
 CL-TEST::HANDLER-CASE.11
 CL-TEST::HANDLER-CASE.12
 CL-TEST::HANDLER-CASE.13
Test CL-TEST::HANDLER-CASE.14 failed
Form: (CL-TEST::HANDLER-CASE (ERROR "foo") (ERROR (CL-TEST::C) (VALUES 1 2 3 4 5 6 7 8)))
Expected value:
          1
          2
          3
          4
          5
          6
          7
          8
Actual value:
          1 [Actual value: #<error during printing>

 NIL
 CL-TEST::HANDLER-CASE.15
 CL-TEST::HANDLER-CASE.16
 CL-TEST::HANDLER-CASE.17
 CL-TEST::HANDLER-CASE.18
 CL-TEST::HANDLER-CASE.19
 CL-TEST::HANDLER-CASE.20
 CL-TEST::HANDLER-CASE.21
 CL-TEST::HANDLER-CASE.22
Test CL-TEST::HANDLER-CASE.23 failed
Form: (CL-TEST:SIGNALS-ERROR (CL-TEST::HANDLER-CASE (VALUES 1 2) (:NO-ERROR (CL-TEST::X) CL-TEST::X)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error 81F4FA07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::HANDLER-CASE.24 failed
Form: (CL-TEST:SIGNALS-ERROR (CL-TEST::HANDLER-CASE (VALUES) (:NO-ERROR (CL-TEST::X) CL-TEST::X)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error 81F5EDC7> [Actual value: #<error during printing>

 NIL
 CL-TEST::HANDLER-CASE.25
 CL-TEST::HANDLER-CASE.26
 CL-TEST::HANDLER-CASE.27
 CL-TEST::HANDLER-CASE.28
 CL-TEST::HANDLER-CASE.29
 CL-TEST::IGNORE-ERRORS.1
 CL-TEST::IGNORE-ERRORS.2
Test CL-TEST::IGNORE-ERRORS.3 failed
Form: (IGNORE-ERRORS (VALUES 1 2 3 4 5 6 7 8))
Expected value:
          1
          2
          3
          4
          5
          6
          7
          8
Actual value:
          1 [Actual value: #<error during printing>

 NIL
 CL-TEST::IGNORE-ERRORS.4
 CL-TEST::IGNORE-ERRORS.5
 CL-TEST::IGNORE-ERRORS.6
Test CL-TEST::CONDITION-1/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-1) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-1/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-1) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-1) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-1))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-1 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-1) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-1/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-1/IS-A/CONDITION
 CL-TEST::CONDITION-1/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-1/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-1/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-1)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81FC8F37> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-1/HANDLER-CASE-1
 CL-TEST::CONDITION-1/HANDLER-CASE-2
 CL-TEST::CONDITION-1/HANDLER-CASE-3
Test CL-TEST::CONDITION-2/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-2) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-2/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-2) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-2) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-2)))BTYPEP (QUOTE (AND CL-TEST::CONDITION-2 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-2) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-2/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-2/IS-A/CONDITION
 CL-TEST::CONDITION-2/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-2/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-2/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-2)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1703BA7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-2/HANDLER-CASE-1
 CL-TEST::CONDITION-2/HANDLER-CASE-2
 CL-TEST::CONDITION-2/HANDLER-CASE-3
Test CL-TEST::CONDITION-3/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE #:CONDITION-3) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-3/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE #:CONDITION-3) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((:CONDITION-3/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-3/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE #:CONDITION-3)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1740617> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-3/HANDLER-CASE-1
 CL-TEST::CONDITION-3/HANDLER-CASE-2
 CL-TEST::CONDITION-3/HANDLER-CASE-3
Test CL-TEST::CONDITION-4/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-4) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-4/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-4) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-4) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-4))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-4 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-4) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-4/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-4/IS-A/CONDITION
 CL-TEST::CONDITION-4/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-4/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-4/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-4)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C177CCE7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-4/HANDLER-CASE-1
 CL-TEST::CONDITION-4/HANDLER-CASE-2
 CL-TEST::CONDITION-4/HANDLER-CASE-3
 CL-TEST::CONDITION-4-SLOTS.1
Test CL-TEST::CONDITION-5/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-5) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-5/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-5) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-5) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-5))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-5 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-5) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-5/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-5/IS-A/CONDITION
 CL-TEST::CONDITION-5/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-5/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-5/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-5)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C17BDE67> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-5/HANDLER-CASE-1
 CL-TEST::CONDITION-5/HANDLER-CASE-2
 CL-TEST::CONDITION-5/HANDLER-CASE-3
 CL-TEST::CONDITION-5-SLOTS.1
 CL-TEST::CONDITION-5-SLOTS.2
 CL-TEST::CONDITION-5-SLOTS.3
 CL-TEST::CONDITION-5-SLOTS.4
Test CL-TEST::CONDITION-6/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-6) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-6/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-6) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-6) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-6))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-6 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-6) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-6/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-6/IS-A/CONDITION
 CL-TEST::CONDITION-6/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-6/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-6/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-6)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1805FC7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-6/HANDLER-CASE-1
 CL-TEST::CONDITION-6/HANDLER-CASE-2
 CL-TEST::CONDITION-6/HANDLER-CASE-3
 CL-TEST::CONDITION-6-SLOTS.1
 CL-TEST::CONDITION-6-SLOTS.2
 CL-TEST::CONDITION-6-SLOTS.3
 CL-TEST::CONDITION-6-SLOTS.4
 CL-TEST::CONDITION-6-SLOTS.5
Test CL-TEST::CONDITION-7/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-7) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-7/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-7) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-7) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-7))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-7 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-7) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-7/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-7/IS-A/CONDITION
 CL-TEST::CONDITION-7/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-7/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-7/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-7)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1850A47> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-7/HANDLER-CASE-1
 CL-TEST::CONDITION-7/HANDLER-CASE-2
 CL-TEST::CONDITION-7/HANDLER-CASE-3
 CL-TEST::CONDITION-7-SLOTS.1
 CL-TEST::CONDITION-7-SLOTS.2
 CL-TEST::CONDITION-7-SLOTS.3
 CL-TEST::CONDITION-7-SLOTS.4
Test CL-TEST::CONDITION-8/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-8) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-8/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-8) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-8) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-8))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-8 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-8) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-8/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-8/IS-A/CONDITION
 CL-TEST::CONDITION-8/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-8/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-8/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-8)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C18986C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-8/HANDLER-CASE-1
 CL-TEST::CONDITION-8/HANDLER-CASE-2
 CL-TEST::CONDITION-8/HANDLER-CASE-3
 CL-TEST::CONDITION-8-SLOTS.1
Test CL-TEST::CONDITION-9/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-9) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-9/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-9) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-9) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-9))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-9 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-9) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-9/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-9/IS-A/CONDITION
 CL-TEST::CONDITION-9/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-9/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-9/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-9)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C18DB2C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-9/HANDLER-CASE-1
 CL-TEST::CONDITION-9/HANDLER-CASE-2
 CL-TEST::CONDITION-9/HANDLER-CASE-3
 CL-TEST::CONDITION-9-SLOTS.1
 CL-TEST::CONDITION-9-SLOTS.2
 CL-TEST::CONDITION-9-SLOTS.3
 CL-TEST::CONDITION-9-SLOTS.4
 CL-TEST::CONDITION-9-SLOTS.5
 CL-TEST::CONDITION-9-SLOTS.6
Test CL-TEST::CONDITION-14/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-14) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-14/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-14) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-14) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-14))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-14 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-14) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-14/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-14/IS-A/CONDITION
 CL-TEST::CONDITION-14/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-14/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-14/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-14)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1928427> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-14/HANDLER-CASE-1
 CL-TEST::CONDITION-14/HANDLER-CASE-2
 CL-TEST::CONDITION-14/HANDLER-CASE-3
 CL-TEST::CONDITION-14-SLOTS.1
 CL-TEST::CONDITION-14-SLOTS.2
 CL-TEST::CONDITION-14-SLOTS.3
Test CL-TEST::CONDITION-15/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-15) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-15/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-15) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-15) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-15))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-15 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-15) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-15/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-15/IS-A/CONDITION
 CL-TEST::CONDITION-15/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-15/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-15/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-15)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C196DD87> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-15/HANDLER-CASE-1
 CL-TEST::CONDITION-15/HANDLER-CASE-2
 CL-TEST::CONDITION-15/HANDLER-CASE-3
Test CL-TEST::CONDITION-16/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-16) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-16/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-16) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-16) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-16))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-16 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-16) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-16/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-16/IS-A/CONDITION
 CL-TEST::CONDITION-16/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-16/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-16/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-16)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C19AAEB7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-16/HANDLER-CASE-1
 CL-TEST::CONDITION-16/HANDLER-CASE-2
 CL-TEST::CONDITION-16/HANDLER-CASE-3
 CL-TEST::CONDITION-16-REPORT.1
Test CL-TEST::CONDITION-17/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-17) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-17/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-17) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-17) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-17))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-17 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-17) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-17/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-17/IS-A/CONDITION
 CL-TEST::CONDITION-17/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-17/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-17/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-17)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C19F0987> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-17/HANDLER-CASE-1
 CL-TEST::CONDITION-17/HANDLER-CASE-2
 CL-TEST::CONDITION-17/HANDLER-CASE-3
 CL-TEST::CONDITION-17-REPORT.1
Test CL-TEST::CONDITION-18/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-18) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-18/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-18) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-18) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-18))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-18 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-18) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-18/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-18/IS-A/CONDITION
 CL-TEST::CONDITION-18/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-18/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-18/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-18)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1A361C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-18/HANDLER-CASE-1
 CL-TEST::CONDITION-18/HANDLER-CASE-2
 CL-TEST::CONDITION-18/HANDLER-CASE-3
 CL-TEST::CONDITION-18-REPORT.1
Test CL-TEST::CONDITION-19/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-19) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-19/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-19) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-19) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-19))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-19 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-19) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-19/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-19/IS-A/CONDITION
 CL-TEST::CONDITION-19/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-19/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-19/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-19)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1A7BFC7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-19/HANDLER-CASE-1
 CL-TEST::CONDITION-19/HANDLER-CASE-2
 CL-TEST::CONDITION-19/HANDLER-CASE-3
 CL-TEST::CONDITION-19-SLOTS.1
 CL-TEST::CONDITION-19-SLOTS.2
 CL-TEST::CONDITION-19-SLOTS.3
 CL-TEST::CONDITION-19-SLOTS.4
 CL-TEST::CONDITION-19-SLOTS.5
Test CL-TEST::CONDITION-20/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-20) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-20/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-20) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-20) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-20))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-20 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-20) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-20/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-20/IS-A/CONDITION
 CL-TEST::CONDITION-20/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-20/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-20/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-20)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1ACA237> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-20/HANDLER-CASE-1
 CL-TEST::CONDITION-20/HANDLER-CASE-2
 CL-TEST::CONDITION-20/HANDLER-CASE-3
 CL-TEST::CONDITION-20-SLOTS.1
 CL-TEST::CONDITION-20-SLOTS.2
 CL-TEST::CONDITION-20-SLOTS.3
 CL-TEST::CONDITION-20-SLOTS.4
Test CL-TEST::CONDITION-21/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-21) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-21/IS-SUBTYPE-OF/CONDITION-4 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-21) (QUOTE CL-TEST::CONDITION-4))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-21/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-21) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-21) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-21))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-21 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-21) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-21/IS-SUBTYPE-OF-2/CONDITION-4 failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-21) (QUOTE CL-TEST::CONDITION-4))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-21) (QUOTE CL-TEST::CONDITION-4)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-4)) (QUOTE (NOT CL-TEST::CONDITION-21))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-21 (NOT CL-TEST::CONDITION-4))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-21) CL-TEST::CONDITION-4))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-21/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-21/IS-NOT-SUPERTYPE-OF/CONDITION-4
 CL-TEST::CONDITION-21/IS-A/CONDITION
 CL-TEST::CONDITION-21/IS-A/CONDITION-4
 CL-TEST::CONDITION-21/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-21/IS-SUBCLASS-OF/CONDITION-4
 CL-TEST::CONDITION-21/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-21/IS-NOT-SUPERCLASS-OF/CONDITION-4
Test CL-TEST::CONDITION-21/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-21)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1B3EC67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-21/IS-A-MEMBER-OF-CLASS/CONDITION-4 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-21)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-4)))))
Expected value:
          T
Actual value:
          #<Type-Error C1B49E17> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-21/HANDLER-CASE-1
 CL-TEST::CONDITION-21/HANDLER-CASE-2
 CL-TEST::CONDITION-21/HANDLER-CASE-3
 CL-TEST::CONDITION-21-SLOTS.1
Test CL-TEST::CONDITION-22/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-22) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-22/IS-SUBTYPE-OF/CONDITION-4 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-22) (QUOTE CL-TEST::CONDITION-4))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-22/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-22) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-22) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-22))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-22 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-22) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-22/IS-SUBTYPE-OF-2/CONDITION-4 failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-22) (QUOTE CL-TEST::CONDITION-4))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-22) (QUOTE CL-TEST::CONDITION-4)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-4)) (QUOTE (NOT CL-TEST::CONDITION-22))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-22 (NOT CL-TEST::CONDITION-4))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-22) CL-TEST::CONDITION-4))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-22/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-22/IS-NOT-SUPERTYPE-OF/CONDITION-4
 CL-TEST::CONDITION-22/IS-A/CONDITION
 CL-TEST::CONDITION-22/IS-A/CONDITION-4
 CL-TEST::CONDITION-22/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-22/IS-SUBCLASS-OF/CONDITION-4
 CL-TEST::CONDITION-22/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-22/IS-NOT-SUPERCLASS-OF/CONDITION-4
Test CL-TEST::CONDITION-22/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-22)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1BAE477> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-22/IS-A-MEMBER-OF-CLASS/CONDITION-4 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-22)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-4)))))
Expected value:
          T
Actual value:
          #<Type-Error C1BB98D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-22/HANDLER-CASE-1
 CL-TEST::CONDITION-22/HANDLER-CASE-2
 CL-TEST::CONDITION-22/HANDLER-CASE-3
 CL-TEST::CONDITION-22-SLOTS.1
Test CL-TEST::CONDITION-23/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-23) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-23/IS-SUBTYPE-OF/CONDITION-5 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-23) (QUOTE CL-TEST::CONDITION-5))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-23/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-23) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-23) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-23))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-23 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-23) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-23/IS-SUBTYPE-OF-2/CONDITION-5 failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-23) (QUOTE CL-TEST::CONDITION-5))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-23) (QUOTE CL-TEST::CONDITION-5)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-5)) (QUOTE (NOT CL-TEST::CONDITION-23))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-23 (NOT CL-TEST::CONDITION-5))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-23) CL-TEST::CONDITION-5))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-23/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-23/IS-NOT-SUPERTYPE-OF/CONDITION-5
 CL-TEST::CONDITION-23/IS-A/CONDITION
 CL-TEST::CONDITION-23/IS-A/CONDITION-5
 CL-TEST::CONDITION-23/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-23/IS-SUBCLASS-OF/CONDITION-5
 CL-TEST::CONDITION-23/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-23/IS-NOT-SUPERCLASS-OF/CONDITION-5
Test CL-TEST::CONDITION-23/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-23)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1C20987> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-23/IS-A-MEMBER-OF-CLASS/CONDITION-5 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-23)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-5)))))
Expected value:
          T
Actual value:
          #<Type-Error C1C2BB57> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-23/HANDLER-CASE-1
 CL-TEST::CONDITION-23/HANDLER-CASE-2
 CL-TEST::CONDITION-23/HANDLER-CASE-3
 CL-TEST::CONDITION-23-SLOTS.1
 CL-TEST::CONDITION-23-SLOTS.2
 CL-TEST::CONDITION-23-SLOTS.3
 CL-TEST::CONDITION-23-SLOTS.4
Test CL-TEST::CONDITION-24/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-24) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-24/IS-SUBTYPE-OF/CONDITION-5 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-24) (QUOTE CL-TEST::CONDITION-5))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-24/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-24) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-24) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-24))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-24 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-24) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-24/IS-SUBTYPE-OF-2/CONDITION-5 failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-24) (QUOTE CL-TEST::CONDITION-5))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-24) (QUOTE CL-TEST::CONDITION-5)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-5)) (QUOTE (NOT CL-TEST::CONDITION-24))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-24 (NOT CL-TEST::CONDITION-5))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-24) CL-TEST::CONDITION-5))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-24/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-24/IS-NOT-SUPERTYPE-OF/CONDITION-5
 CL-TEST::CONDITION-24/IS-A/CONDITION
 CL-TEST::CONDITION-24/IS-A/CONDITION-5
 CL-TEST::CONDITION-24/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-24/IS-SUBCLASS-OF/CONDITION-5
 CL-TEST::CONDITION-24/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-24/IS-NOT-SUPERCLASS-OF/CONDITION-5
Test CL-TEST::CONDITION-24/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-24)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1C971F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-24/IS-A-MEMBER-OF-CLASS/CONDITION-5 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-24)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-5)))))
Expected value:
          T
Actual value:
          #<Type-Error C1CA23F7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-24/HANDLER-CASE-1
 CL-TEST::CONDITION-24/HANDLER-CASE-2
 CL-TEST::CONDITION-24/HANDLER-CASE-3
 CL-TEST::CONDITION-24-SLOTS.1
 CL-TEST::CONDITION-24-SLOTS.2
 CL-TEST::CONDITION-24-SLOTS.3
 CL-TEST::CONDITION-24-SLOTS.4
Test CL-TEST::CONDITION-25A/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25A) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25A/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25A) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25A) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-25A))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25A (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25A) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25A/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-25A/IS-A/CONDITION
 CL-TEST::CONDITION-25A/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-25A/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-25A/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25A)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1CEAD47> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25A/HANDLER-CASE-1
 CL-TEST::CONDITION-25A/HANDLER-CASE-2
 CL-TEST::CONDITION-25A/HANDLER-CASE-3
Test CL-TEST::CONDITION-25B/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25B) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25B/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25B) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25B) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-25B))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25B (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25B) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25B/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-25B/IS-A/CONDITION
 CL-TEST::CONDITION-25B/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-25B/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-25B/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25B)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1D28707> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25B/HANDLER-CASE-1
 CL-TEST::CONDITION-25B/HANDLER-CASE-2
 CL-TEST::CONDITION-25B/HANDLER-CASE-3
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF/CONDITION-25A failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25A))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF/CONDITION-25B failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25B))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-25))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF-2/CONDITION-25A failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25A))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25A)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-25A)) (QUOTE (NOT CL-TEST::CONDITION-25))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25 (NOT CL-TEST::CONDITION-25A))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25) CL-TEST::CONDITION-25A))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-SUBTYPE-OF-2/CONDITION-25B failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25B))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-25) (QUOTE CL-TEST::CONDITION-25B)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-25B)) (QUOTE (NOT CL-TEST::CONDITION-25))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-25 (NOT CL-TEST::CONDITION-25B))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-25) CL-TEST::CONDITION-25B))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-25/IS-NOT-SUPERTYPE-OF/CONDITION-25A
 CL-TEST::CONDITION-25/IS-NOT-SUPERTYPE-OF/CONDITION-25B
 CL-TEST::CONDITION-25/IS-A/CONDITION
 CL-TEST::CONDITION-25/IS-A/CONDITION-25A
 CL-TEST::CONDITION-25/IS-A/CONDITION-25B
 CL-TEST::CONDITION-25/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-25/IS-SUBCLASS-OF/CONDITION-25A
 CL-TEST::CONDITION-25/IS-SUBCLASS-OF/CONDITION-25B
 CL-TEST::CONDITION-25/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-25/IS-NOT-SUPERCLASS-OF/CONDITION-25A
 CL-TEST::CONDITION-25/IS-NOT-SUPERCLASS-OF/CONDITION-25B
Test CL-TEST::CONDITION-25/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1DADB47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-A-MEMBER-OF-CLASS/CONDITION-25A failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-25A)))))
Expected value:
          T
Actual value:
          #<Type-Error C1DB8E47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-25/IS-A-MEMBER-OF-CLASS/CONDITION-25B failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-25)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-25B)))))
Expected value:
          T
Actual value:
          #<Type-Error C1DC4867> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-25/HANDLER-CASE-1
 CL-TEST::CONDITION-25/HANDLER-CASE-2
 CL-TEST::CONDITION-25/HANDLER-CASE-3
 CL-TEST::CONDITION-25-SLOTS.1
 CL-TEST::CONDITION-25-SLOTS.2
 CL-TEST::CONDITION-25-SLOTS.3
 CL-TEST::CONDITION-25-SLOTS.4
 CL-TEST::CONDITION-25-SLOTS.5
Test CL-TEST::CONDITION-26A/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26A) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26A/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26A) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26A) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-26A))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26A (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26A) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26A/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-26A/IS-A/CONDITION
 CL-TEST::CONDITION-26A/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-26A/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-26A/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26A)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1E14337> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26A/HANDLER-CASE-1
 CL-TEST::CONDITION-26A/HANDLER-CASE-2
 CL-TEST::CONDITION-26A/HANDLER-CASE-3
Test CL-TEST::CONDITION-26B/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26B) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26B/IS-SUBTYPE-OF/CONDITION-26A failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26B) (QUOTE CL-TEST::CONDITION-26A))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26B/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26B) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26B) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-26B))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26B (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26B) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26B/IS-SUBTYPE-OF-2/CONDITION-26A failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26B) (QUOTE CL-TEST::CONDITION-26A))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26B) (QUOTE CL-TEST::CONDITION-26A)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-26A)) (QUOTE (NOT CL-TEST::CONDITION-26B))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26B (NOT CL-TEST::CONDITION-26A))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26B) CL-TEST::CONDITION-26A))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26B/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-26B/IS-NOT-SUPERTYPE-OF/CONDITION-26A
 CL-TEST::CONDITION-26B/IS-A/CONDITION
 CL-TEST::CONDITION-26B/IS-A/CONDITION-26A
 CL-TEST::CONDITION-26B/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-26B/IS-SUBCLASS-OF/CONDITION-26A
 CL-TEST::CONDITION-26B/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-26B/IS-NOT-SUPERCLASS-OF/CONDITION-26A
Test CL-TEST::CONDITION-26B/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26B)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1E75E87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26B/IS-A-MEMBER-OF-CLASS/CONDITION-26A failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26B)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-26A)))))
Expected value:
          T
Actual value:
          #<Type-Error C1E81067> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26B/HANDLER-CASE-1
 CL-TEST::CONDITION-26B/HANDLER-CASE-2
 CL-TEST::CONDITION-26B/HANDLER-CASE-3
Test CL-TEST::CONDITION-26C/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26C) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26C/IS-SUBTYPE-OF/CONDITION-26A failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26C) (QUOTE CL-TEST::CONDITION-26A))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26C/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26C) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26C) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-26C))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26C (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26C) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26C/IS-SUBTYPE-OF-2/CONDITION-26A failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26C) (QUOTE CL-TEST::CONDITION-26A))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26C) (QUOTE CL-TEST::CONDITION-26A)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-26A)) (QUOTE (NOT CL-TEST::CONDITION-26C))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26C (NOT CL-TEST::CONDITION-26A))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26C) CL-TEST::CONDITION-26A))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26C/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-26C/IS-NOT-SUPERTYPE-OF/CONDITION-26A
 CL-TEST::CONDITION-26C/IS-A/CONDITION
 CL-TEST::CONDITION-26C/IS-A/CONDITION-26A
 CL-TEST::CONDITION-26C/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-26C/IS-SUBCLASS-OF/CONDITION-26A
 CL-TEST::CONDITION-26C/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-26C/IS-NOT-SUPERCLASS-OF/CONDITION-26A
Test CL-TEST::CONDITION-26C/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26C)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1EE32D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26C/IS-A-MEMBER-OF-CLASS/CONDITION-26A failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26C)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-26A)))))
Expected value:
          T
Actual value:
          #<Type-Error C1EEE4B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26C/HANDLER-CASE-1
 CL-TEST::CONDITION-26C/HANDLER-CASE-2
 CL-TEST::CONDITION-26C/HANDLER-CASE-3
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF/CONDITION-26B failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26B))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF/CONDITION-26C failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26C))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-26))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF-2/CONDITION-26B failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26B))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26B)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-26B)) (QUOTE (NOT CL-TEST::CONDITION-26))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26 (NOT CL-TEST::CONDITION-26B))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26) CL-TEST::CONDITION-26B))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-SUBTYPE-OF-2/CONDITION-26C failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26C))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-26) (QUOTE CL-TEST::CONDITION-26C)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CL-TEST::CONDITION-26C)) (QUOTE (NOT CL-TEST::CONDITION-26))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-26 (NOT CL-TEST::CONDITION-26C))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-26) CL-TEST::CONDITION-26C))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-26/IS-NOT-SUPERTYPE-OF/CONDITION-26B
 CL-TEST::CONDITION-26/IS-NOT-SUPERTYPE-OF/CONDITION-26C
 CL-TEST::CONDITION-26/IS-A/CONDITION
 CL-TEST::CONDITION-26/IS-A/CONDITION-26B
 CL-TEST::CONDITION-26/IS-A/CONDITION-26C
 CL-TEST::CONDITION-26/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-26/IS-SUBCLASS-OF/CONDITION-26B
 CL-TEST::CONDITION-26/IS-SUBCLASS-OF/CONDITION-26C
 CL-TEST::CONDITION-26/IS-NOT-SUPERCLASS-OF/CONDITION
 CL-TEST::CONDITION-26/IS-NOT-SUPERCLASS-OF/CONDITION-26B
 CL-TEST::CONDITION-26/IS-NOT-SUPERCLASS-OF/CONDITION-26C
Test CL-TEST::CONDITION-26/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1F737D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-A-MEMBER-OF-CLASS/CONDITION-26B failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-26B)))))
Expected value:
          T
Actual value:
          #<Type-Error C1F7E8C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-26/IS-A-MEMBER-OF-CLASS/CONDITION-26C failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-26)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CL-TEST::CONDITION-26C)))))
Expected value:
          T
Actual value:
          #<Type-Error C1F8A0D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-26/HANDLER-CASE-1
 CL-TEST::CONDITION-26/HANDLER-CASE-2
 CL-TEST::CONDITION-26/HANDLER-CASE-3
 CL-TEST::CONDITION-26-SLOTS.1
 CL-TEST::CONDITION-26-SLOTS.2
Test CL-TEST::CONDITION-27A/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-27A) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-27A/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-27A) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-27A) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-27A))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-27A (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-27A) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-27A/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-27A/IS-A/CONDITION
 CL-TEST::CONDITION-27A/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-27A/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-27A/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-27A)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error C1FCDD17> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-27A/HANDLER-CASE-1
 CL-TEST::CONDITION-27A/HANDLER-CASE-2
 CL-TEST::CONDITION-27A/HANDLER-CASE-3
Test CL-TEST::CONDITION-27B/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-27B) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-27B/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-27B) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-27B) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-27B))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-27B (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-27B) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-27B/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-27B/IS-A/CONDITION
 CL-TEST::CONDITION-27B/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-27B/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-27B/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-27B)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 8170C4B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-27B/HANDLER-CASE-1
 CL-TEST::CONDITION-27B/HANDLER-CASE-2
 CL-TEST::CONDITION-27B/HANDLER-CASE-3
 CL-TEST::CONDITION-27-SLOTS.1
 CL-TEST::CONDITION-27-SLOTS.2
Test CL-TEST::CONDITION-27-READER-IS-GENERIC failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (FUNCTION CL-TEST::CONDITION-27/S1) (QUOTE GENERIC-FUNCTION)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-30/IS-SUBTYPE-OF/CONDITION failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CL-TEST::CONDITION-30) (QUOTE CONDITION))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONDITION-30/IS-SUBTYPE-OF-2/CONDITION failed
Form: (CL-TEST::CHECK-ALL-SUBTYPEP (QUOTE CL-TEST::CONDITION-30) (QUOTE CONDITION))
Expected value:
          NIL
Actual value:
          (((SUBTYPEP (QUOTE CL-TEST::CONDITION-30) (QUOTE CONDITION)) :==> NIL T) ((SUBTYPEP (QUOTE (NOT CONDITION)) (QUOTE (NOT CL-TEST::CONDITION-30))) :==> NIL T) ((SUBTYPEP (QUOTE (AND CL-TEST::CONDITION-30 (NOT CONDITION))) NIL) :==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT CL-TEST::CONDITION-30) CONDITION))) :==> NIL T)) [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-30/IS-NOT-SUPERTYPE-OF/CONDITION
 CL-TEST::CONDITION-30/IS-A/CONDITION
 CL-TEST::CONDITION-30/IS-SUBCLASS-OF/CONDITION
 CL-TEST::CONDITION-30/IS-NOT-SUPERCLASS-OF/CONDITION
Test CL-TEST::CONDITION-30/IS-A-MEMBER-OF-CLASS/CONDITION failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE CL-TEST::CONDITION-30)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C (FIND-CLASS (QUOTE CONDITION)))))
Expected value:
          T
Actual value:
          #<Type-Error 81758BB7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONDITION-30/HANDLER-CASE-1
 CL-TEST::CONDITION-30/HANDLER-CASE-2
 CL-TEST::CONDITION-30/HANDLER-CASE-3
Test CL-TEST::COMPUTE-RESTARTS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::R CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::ALWAYS (TYPEP CL-TEST::R (QUOTE RESTART)))
Expected value:
          T
Actual value:
          #<Simple-Error 817765F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPUTE-RESTARTS.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::R CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::ALWAYS (TYPEP CL-TEST::R (FIND-CLASS (QUOTE RESTART))))
Expected value:
          T
Actual value:
          #<Simple-Error 817817E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPUTE-RESTARTS.3
Test CL-TEST::COMPUTE-RESTARTS.4 failed
Form: (LOOP CL-TEST::FOR CL-TEST::R1 CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::FOR CL-TEST::R2 CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::ALWAYS (EQ CL-TEST::R1 CL-TEST::R2))
Expected value:
          T
Actual value:
          #<Simple-Error 81792D67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPUTE-RESTARTS.5 failed
Form: (RESTART-CASE (LOOP CL-TEST::FOR CL-TEST::R1 CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::FOR CL-TEST::R2 CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::ALWAYS (EQ CL-TEST::R1 CL-TEST::R2)) (CL-TEST::FOO NIL T) (CL-TEST::BAR NIL T) (CL-TEST::FOO NIL NIL))
Expected value:
          T
Actual value:
          #<Simple-Error 817A55D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COMPUTE-RESTARTS.6 failed
Form: (RESTART-CASE (LET* ((CL-TEST::RESTARTS (COMPUTE-RESTARTS)) (CL-TEST::P (POSITION (QUOTE CL-TEST::FOO) CL-TEST::RESTARTS :KEY (FUNCTION RESTART-NAME))) (CL-TEST::R (FIND (QUOTE CL-TEST::FOO) CL-TEST::RESTARTS :START (1+ CL-TEST::P) :KEY (FUNCTION RESTART-NAME)))) (INVOKE-RESTART CL-TEST::R)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error 817B7117> [Actual value: #<error during printing>

 NIL
 CL-TEST::COMPUTE-RESTARTS.7
 CL-TEST::COMPUTE-RESTARTS.8
Test CL-TEST::COMPUTE-RESTARTS.9 failed
Form: (LET ((CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (BLOCK CL-TEST::DONE (CL-TEST::HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (CL-TEST::C) (DECLARE (IGNORE CL-TEST::C)) (LET* ((CL-TEST::RESTARTS (COMPUTE-RESTARTS CL-TEST::C2)) (CL-TEST::R (REMOVE (QUOTE CL-TEST::FOO) CL-TEST::RESTARTS :TEST-NOT (FUNCTION EQ) :KEY (FUNCTION RESTART-NAME)))) (RETURN-FROM CL-TEST::DONE (VALUES CL-TEST::R (MAPCAR (FUNCTION RESTART-NAME) CL-TEST::R)))))))) (RESTART-CASE (ERROR "an error") (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::ALSO-BAD))))))
Expected value:
          NIL
          NIL
Actual value:
          (#<Restart 817DE027> #<Restart 817DE757>) [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-BIND.1
 CL-TEST::RESTART-BIND.2
 CL-TEST::RESTART-BIND.3
 CL-TEST::RESTART-BIND.4
 CL-TEST::RESTART-BIND.5
 CL-TEST::RESTART-BIND.6
 CL-TEST::RESTART-BIND.7
 CL-TEST::RESTART-BIND.8
 CL-TEST::RESTART-BIND.9
 CL-TEST::RESTART-BIND.10
 CL-TEST::RESTART-BIND.11
 CL-TEST::RESTART-BIND.12
 CL-TEST::RESTART-BIND.13
 CL-TEST::RESTART-BIND.14
 CL-TEST::RESTART-BIND.15
Test CL-TEST::RESTART-BIND.16 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (WITH-OUTPUT-TO-STRING (CL-TEST::S) (RESTART-BIND ((CL-TEST::FOO (FUNCTION (LAMBDA NIL NIL)) :REPORT-FUNCTION (PROGN (INCF CL-TEST::I) (FUNCTION (LAMBDA (CL-TEST::S) (FORMAT CL-TEST::S "A report")))))) (LET ((*PRINT-ESCAPE* NIL)) (FORMAT CL-TEST::S "~A" (FIND-RESTART (QUOTE CL-TEST::FOO)))))) CL-TEST::I))
Expected value:
          "A report"
          1
Actual value:
          "#<Restart 8182ECF7>" [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-BIND.17
 CL-TEST::RESTART-BIND.18
 CL-TEST::RESTART-BIND.19
 CL-TEST::RESTART-BIND.21
 CL-TEST::RESTART-BIND.22
Test CL-TEST::RESTART-BIND.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (RESTART-BIND ((CL-TEST::FOO (FUNCTION (LAMBDA NIL T)))) (INVOKE-RESTART (QUOTE CL-TEST::FOO) (QUOTE CL-TEST::A))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error 818535C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RESTART-BIND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (RESTART-BIND ((CL-TEST::FOO (FUNCTION (LAMBDA (CL-TEST::X) CL-TEST::X)))) (INVOKE-RESTART (QUOTE CL-TEST::FOO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error 81862E57> [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-BIND.ERROR.3
 CL-TEST::RESTART-BIND.23
 CL-TEST::RESTART-BIND.24
 CL-TEST::RESTART-CASE.1
 CL-TEST::RESTART-CASE.2
Test CL-TEST::RESTART-CASE.3 failed
Form: (RESTART-CASE (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F)))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          CL-TEST::A [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.4
 CL-TEST::RESTART-CASE.5
Test CL-TEST::RESTART-CASE.6 failed
Form: (RESTART-CASE (PROGN (INVOKE-RESTART (QUOTE CL-TEST::FOO)) (QUOTE CL-TEST::BAD)) (CL-TEST::BAR NIL (QUOTE CL-TEST::BAD2)) (CL-TEST::FOO NIL (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD3)))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD3 [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.7
 CL-TEST::RESTART-CASE.8
 CL-TEST::RESTART-CASE.9
 CL-TEST::RESTART-CASE.10
 CL-TEST::RESTART-CASE.11
 CL-TEST::RESTART-CASE.12
 CL-TEST::RESTART-CASE.13
 CL-TEST::RESTART-CASE.14
 CL-TEST::RESTART-CASE.15
 CL-TEST::RESTART-CASE.16
Test CL-TEST::RESTART-CASE.17 failed
Form: (RESTART-CASE (INVOKE-RESTART (QUOTE CL-TEST::FOO)) (CL-TEST::FOO NIL (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          CL-TEST::A [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.18
 CL-TEST::RESTART-CASE.19
Test CL-TEST::RESTART-CASE.20 failed
Form: (WITH-OUTPUT-TO-STRING (CL-TEST::S) (RESTART-CASE (LET ((RESTART (FIND-RESTART (QUOTE CL-TEST::FOO))) (*PRINT-ESCAPE* NIL)) (FORMAT CL-TEST::S "~A" RESTART)) (CL-TEST::FOO NIL :REPORT "A report")))
Expected value:
          "A report"
Actual value:
          "#<Restart 819211A7>" [Actual value: #<error during printing>

 NIL
Test CL-TEST::RESTART-CASE.21 failed
Form: (WITH-OUTPUT-TO-STRING (CL-TEST::S) (FLET ((CL-TEST::%F (CL-TEST::S2) (FORMAT CL-TEST::S2 "A report"))) (RESTART-CASE (LET ((RESTART (FIND-RESTART (QUOTE CL-TEST::FOO))) (*PRINT-ESCAPE* NIL)) (FORMAT CL-TEST::S "~A" RESTART)) (CL-TEST::FOO NIL :REPORT CL-TEST::%F))))
Expected value:
          "A report"
Actual value:
          "#<Restart 81930167>" [Actual value: #<error during printing>

 NIL
Test CL-TEST::RESTART-CASE.22 failed
Form: (WITH-OUTPUT-TO-STRING (CL-TEST::S) (RESTART-CASE (LET ((RESTART (FIND-RESTART (QUOTE CL-TEST::FOO))) (*PRINT-ESCAPE* NIL)) (FORMAT CL-TEST::S "~A" RESTART)) (CL-TEST::FOO NIL :REPORT (LAMBDA (CL-TEST::S2) (FORMAT CL-TEST::S2 "A report")))))
Expected value:
          "A report"
Actual value:
          "#<Restart 81940B77>" [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.23
 CL-TEST::RESTART-CASE.24
#<Simple-Error 81960A07>
Available restarts:
6 CL-TEST::FOO: #<Restart 8195FF67>
5 STORE-VALUE: #<Restart 81960047>
4 USE-VALUE: #<Restart 81960087>
3 CL-TEST::FOO: #<Restart 8195D707>
2 STORE-VALUE: #<Restart 8195D7E7>
1 USE-VALUE: #<Restart 8195D827>
0 ABORT: #<Restart 8007D6F7>

10000E530 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E590 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E600 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E630 C7E46C INVOKE-DEBUGGER
10000E660 C7729C ERROR
10000E690 D5368C SYSTEM.EVAL::EVAL-CONS
10000E6C0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E6F0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E720 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E750 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000E790 C5E56C SIGNAL
10000E7C0 C7729C ERROR
10000E7F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E820 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E860 CA784C (SYSTEM.EVAL::SPECIAL-FORM RETURN-FROM)
10000E890 D5368C SYSTEM.EVAL::EVAL-CONS
Enter a restart number or evaluate a form.
0] (si(s(throw 'regression-test::*in-test* nil)

 NIL
#<Simple-Error 819B71B7>
Available restarts:
6 CL-TEST::FOO: #<Restart 819B6727>
5 STORE-VALUE: #<Restart 819B6807>
4 USE-VALUE: #<Restart 819B6847>
3 CL-TEST::FOO: #<Restart 819B3EC7>
2 STORE-VALUE: #<Restart 819B3FA7>
1 USE-VALUE: #<Restart 819B3FE7>
0 ABORT: #<Restart 8007D6F7>

10000E560 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E5C0 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E630 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E660 C7E46C INVOKE-DEBUGGER
10000E690 C7729C ERROR
10000E6C0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E6F0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E720 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E750 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E780 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000E7C0 C5E56C SIGNAL
10000E7F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E820 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E860 CA784C (SYSTEM.EVAL::SPECIAL-FORM RETURN-FROM)
10000E890 D5368C SYSTEM.EVAL::EVAL-CONS
10000E8C0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
Enter a restart number or evaluate a form.
0] (throw 'regression-test::*in-test* nil)

 NIL
#<Simple-Error 819E13D7>
Available restarts:
7 CONTINUE: #<Restart 819E0FE7>
6 CL-TEST::FOO: #<Restart 819E0857>
5 STORE-VALUE: #<Restart 819E0937>
4 USE-VALUE: #<Restart 819E0977>
3 CL-TEST::FOO: #<Restart 819DDFF7>
2 STORE-VALUE: #<Restart 819DE0D7>
1 USE-VALUE: #<Restart 819DE117>
0 ABORT: #<Restart 8007D6F7>

10000E500 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E560 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E5D0 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E600 C7E46C INVOKE-DEBUGGER
10000E630 C7729C ERROR
10000E660 D5368C SYSTEM.EVAL::EVAL-CONS
10000E690 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E6C0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E6F0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E720 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000E760 C5E56C SIGNAL
10000E7C0 C78EDC CERROR
10000E7F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E820 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E860 CA784C (SYSTEM.EVAL::SPECIAL-FORM RETURN-FROM)
10000E890 D5368C SYSTEM.EVAL::EVAL-CONS
Enter a restart number or evaluate a form.
0] (throw 'regression-test::*in-test* nil)

 NIL
#<Simple-Error 81A0C107>
Available restarts:
6 CL-TEST::FOO: #<Restart 81A0B577>
5 STORE-VALUE: #<Restart 81A0B657>
4 USE-VALUE: #<Restart 81A0B697>
3 CL-TEST::FOO: #<Restart 81A08D17>
2 STORE-VALUE: #<Restart 81A08DF7>
1 USE-VALUE: #<Restart 81A08E37>
0 ABORT: #<Restart 8007D6F7>

10000E4D0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E530 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E5A0 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E5D0 C7E46C INVOKE-DEBUGGER
10000E600 C7729C ERROR
10000E630 D5368C SYSTEM.EVAL::EVAL-CONS
10000E660 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E690 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E6C0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E6F0 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000E730 C5E56C SIGNAL
10000E7C0 C7D84C WARN
10000E7F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E820 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E860 CA784C (SYSTEM.EVAL::SPECIAL-FORM RETURN-FROM)
10000E890 D5368C SYSTEM.EVAL::EVAL-CONS
Enter a restart number or evaluate a form.
0] (throw 'regree(throw 'regression-test::*in-test* nil)

 NIL
#<Simple-Error 81A38D87>
Available restarts:
6 CL-TEST::FOO: #<Restart 81A37987>
5 STORE-VALUE: #<Restart 81A37A67>
4 USE-VALUE: #<Restart 81A37AA7>
3 CL-TEST::FOO: #<Restart 81A35127>
2 STORE-VALUE: #<Restart 81A35207>
1 USE-VALUE: #<Restart 81A35247>
0 ABORT: #<Restart 8007D6F7>

10000E3E0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E440 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E4B0 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E4E0 C7E46C INVOKE-DEBUGGER
10000E510 C7729C ERROR
10000E540 D5368C SYSTEM.EVAL::EVAL-CONS
10000E570 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E5A0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E5D0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E600 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000E640 C5E56C SIGNAL
10000E670 C7729C ERROR
10000E6A0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E6D0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E700 D5368C SYSTEM.EVAL::EVAL-CONS
10000E730 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
Enter a restart number or evaluate a form.
0] (describe sys.int::*debugger-condition*)
A Closette object
Printed representation: #<Simple-Error 81A38D87>
Class: #<Standard-Class 800B2FD7>
Structure
    SYSTEM.INTERNALS::FORMAT-CONTROL <- "Blah"
    SYSTEM.INTERNALS::FORMAT-ARGUMENTS <- NIL
0] (sys.int::backtrace)

10000E350 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E3B0 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E3E0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E410 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E440 3AE9B9C EVAL
10000E4B0 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E4E0 C7E46C INVOKE-DEBUGGER
10000E510 C7729C ERROR
10000E540 D5368C SYSTEM.EVAL::EVAL-CONS
10000E570 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E5A0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E5D0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E600 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000E640 C5E56C SIGNAL
10000E670 C7729C ERROR
10000E6A0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E6D0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E700 D5368C SYSTEM.EVAL::EVAL-CONS
10000E730 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E770 CA784C (SYSTEM.EVAL::SPECIAL-FORM RETURN-FROM)
10000E7A0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E7D0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E800 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E830 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E870 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000E8A0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E8D0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E900 D5368C SYSTEM.EVAL::EVAL-CONS
10000E930 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E990 D4E4CC (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)
10000E9C0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E9F0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EA20 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000EA50 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000EA90 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000EAC0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EAF0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EB20 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000EB80 CA6E6C (SYSTEM.EVAL::SPECIAL-FORM BLOCK)
10000EBB0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EBE0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EC10 D5368C SYSTEM.EVAL::EVAL-CONS
10000EC40 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EC80 CA784C (SYSTEM.EVAL::SPECIAL-FORM RETURN-FROM)
10000ECB0 D5368C SYSTEM.EVAL::EVAL-CONS
10000ECE0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000ED10 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000ED40 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000ED80 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000EDB0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EDE0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EE10 D5368C SYSTEM.EVAL::EVAL-CONS
10000EE40 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EEA0 D4E4CC (SYSTEM.EVAL::SPECIAL-FORM TAGBODY)
10000EED0 D5368C SYSTEM.EVAL::EVAL-CONS
10000EF00 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000EF30 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000EF60 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000EFA0 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000EFD0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F000 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F030 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F090 CA6E6C (SYSTEM.EVAL::SPECIAL-FORM BLOCK)
10000F0C0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F0F0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F120 D5368C SYSTEM.EVAL::EVAL-CONS
10000F150 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F180 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F1B0 D47ACC (SYSTEM.EVAL::SPECIAL-FORM PROGN)
10000F1E0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F210 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F240 CA9A3C (SYSTEM.EVAL::SPECIAL-FORM IF)
10000F270 D5368C SYSTEM.EVAL::EVAL-CONS
10000F2A0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F2D0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F300 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F330 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F360 D47ACC (SYSTEM.EVAL::SPECIAL-FORM PROGN)
10000F390 D5368C SYSTEM.EVAL::EVAL-CONS
10000F3C0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F3F0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F420 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F460 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F490 D5368C SYSTEM.EVAL::EVAL-CONS
10000F4C0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F4F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F520 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F550 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F580 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F5C0 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F5F0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F620 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F650 D5368C SYSTEM.EVAL::EVAL-CONS
10000F680 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F6B0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F6E0 D47ACC (SYSTEM.EVAL::SPECIAL-FORM PROGN)
10000F710 D5368C SYSTEM.EVAL::EVAL-CONS
10000F740 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F770 CA9A3C (SYSTEM.EVAL::SPECIAL-FORM IF)
10000F7A0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F7D0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F800 D5368C SYSTEM.EVAL::EVAL-CONS
10000F830 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F860 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F890 D47ACC (SYSTEM.EVAL::SPECIAL-FORM PROGN)
10000F8C0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F8F0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000F920 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000F950 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000F990 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000F9C0 D5368C SYSTEM.EVAL::EVAL-CONS
10000F9F0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FA20 D5368C SYSTEM.EVAL::EVAL-CONS
10000FA50 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FA80 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000FAB0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000FAF0 CAC4BC (SYSTEM.EVAL::SPECIAL-FORM LET)
10000FB20 D5368C SYSTEM.EVAL::EVAL-CONS
10000FB50 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FB80 D5368C SYSTEM.EVAL::EVAL-CONS
10000FBB0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FBE0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000FC10 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000FC40 D4C10C (SYSTEM.EVAL::SPECIAL-FORM MACROLET)
10000FC70 D5368C SYSTEM.EVAL::EVAL-CONS
10000FCA0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FCD0 3AE9B9C EVAL
10000FDC0 18A67FC (LAMBDA :IN REGRESSION-TEST::DO-ENTRY)
10000FE20 2D4F3C SYSTEM.INTERNALS::%CATCH
10000FE50 18A865C REGRESSION-TEST::DO-ENTRY
10000FE80 18BE4FC REGRESSION-TEST::DO-ENTRIES
10000FEC0 18BBB6C REGRESSION-TEST:DO-TESTS
10000FEF0 D5368C SYSTEM.EVAL::EVAL-CONS
10000FF20 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000FF50 3AE9B9C EVAL
10000FFC0 17B3B6C SYSTEM.INTERNALS::REPL
10000FFF0 26CEAC SYSTEM.INTERNALS::REINITIALIZE-LISP
NIL
0] (throw 'de(throw 'd(throw 'poop nil)
#<Bad-Catch-Tag-Error 81AF6977>
Available restarts:
7 ABORT: #<Restart 81AF2DD7>
6 CL-TEST::FOO: #<Restart 81A37987>
5 STORE-VALUE: #<Restart 81A37A67>
4 USE-VALUE: #<Restart 81A37AA7>
3 CL-TEST::FOO: #<Restart 81A35127>
2 STORE-VALUE: #<Restart 81A35207>
1 USE-VALUE: #<Restart 81A35247>
0 ABORT: #<Restart 8007D6F7>

10000E210 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E270 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E2E0 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E310 C7E46C INVOKE-DEBUGGER
10000E340 C7729C ERROR
10000E370 2D57EC SYSTEM.INTERNALS::%THROW
10000E3B0 D4AD0C (SYSTEM.EVAL::SPECIAL-FORM THROW)
10000E3E0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E410 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E440 3AE9B9C EVAL
10000E4B0 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E4E0 C7E46C INVOKE-DEBUGGER
10000E510 C7729C ERROR
10000E540 D5368C SYSTEM.EVAL::EVAL-CONS
10000E570 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E5A0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
Enter a restart number or evaluate a form.
1] (throw regress(throw regres(throw regre(throw regr(throw reg(throw re(throw r(throw 'regression-test::*in-test* nil)

 NIL
#<Simple-Error 81B26FE7>
Available restarts:
6 CL-TEST::FOO: #<Restart 81B264F7>
5 STORE-VALUE: #<Restart 81B265D7>
4 USE-VALUE: #<Restart 81B26617>
3 CL-TEST::FOO: #<Restart 81B23C97>
2 STORE-VALUE: #<Restart 81B23D77>
1 USE-VALUE: #<Restart 81B23DB7>
0 ABORT: #<Restart 8007D6F7>

10000E3B0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E410 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E480 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E4B0 C7E46C INVOKE-DEBUGGER
10000E4E0 C7729C ERROR
10000E510 D5368C SYSTEM.EVAL::EVAL-CONS
10000E540 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E570 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E5A0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E5D0 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000E610 C5E56C SIGNAL
10000E640 C7729C ERROR
10000E670 D5368C SYSTEM.EVAL::EVAL-CONS
10000E6A0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E700 D524AC SYSTEM.EVAL::EVAL-SYMBOL
10000E730 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
Enter a restart number or evaluate a form.
0] (throw 'regression-test::*in-test* '(throw 'regression-test::*in-test* nil)

 NIL
#<Simple-Error 81B57417>
Available restarts:
6 CL-TEST::FOO: #<Restart 81B554D7>
5 STORE-VALUE: #<Restart 81B555B7>
4 USE-VALUE: #<Restart 81B555F7>
3 CL-TEST::FOO: #<Restart 81B52C77>
2 STORE-VALUE: #<Restart 81B52D57>
1 USE-VALUE: #<Restart 81B52D97>
0 ABORT: #<Restart 8007D6F7>

10000E2F0 C868DC SYSTEM.INTERNALS::MAP-BACKTRACE
10000E350 C876CC SYSTEM.INTERNALS::BACKTRACE
10000E3C0 C8308C SYSTEM.INTERNALS::ENTER-DEBUGGER
10000E3F0 C7E46C INVOKE-DEBUGGER
10000E420 C7729C ERROR
10000E450 D5368C SYSTEM.EVAL::EVAL-CONS
10000E480 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E4B0 CA543C SYSTEM.EVAL::EVAL-PROGN-BODY
10000E4E0 CA59CC SYSTEM.EVAL::EVAL-LOCALLY-BODY
10000E510 CA341C SYSTEM.EVAL::INTERPRET-FUNCTION
10000E550 C5E56C SIGNAL
10000E580 C7729C ERROR
10000E5B0 D5368C SYSTEM.EVAL::EVAL-CONS
10000E5E0 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
10000E610 D5368C SYSTEM.EVAL::EVAL-CONS
10000E640 D53F2C SYSTEM.EVAL::EVAL-IN-LEXENV
Enter a restart number or evaluate a form.
0] (throw 'regression-test::*in-test* nil)

 NIL
 CL-TEST::RESTART-CASE.32
 CL-TEST::RESTART-CASE.33
 CL-TEST::RESTART-CASE.34
Test CL-TEST::RESTART-CASE.35 failed
Form: (RESTART-CASE (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 4 CL-TEST::FOR CL-TEST::R CL-TEST::IN (COMPUTE-RESTARTS) CL-TEST::COLLECT (RESTART-NAME CL-TEST::R)) (CL-TEST::FOO NIL T) (CL-TEST::BAR NIL T) (CL-TEST::FOO NIL (QUOTE CL-TEST::A)) (NIL NIL :REPORT (LAMBDA (CL-TEST::S) (FORMAT CL-TEST::S "Anonymous restart")) 10))
Expected value:
          (CL-TEST::FOO CL-TEST::BAR CL-TEST::FOO NIL)
Actual value:
          #<Simple-Error 81B8F127> [Actual value: #<error during printing>

 NIL
 CL-TEST::RESTART-CASE.36
Test CL-TEST::WITH-CONDITION-RESTARTS.1 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C (CL-TEST::I 0)) (VALUES (WITH-CONDITION-RESTARTS (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) (MAKE-CONDITION (QUOTE ERROR))) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) NIL) (SETF CL-TEST::C (INCF CL-TEST::I))) CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::I))
Expected value:
          3
          1
          2
          3
          3
Actual value:
          #<Undefined-Function 81BA3A57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.2 failed
Form: (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (VALUES))
Expected value:
Actual value:
          #<Undefined-Function 81BB2F47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.3 failed
Form: (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F)))
Expected value:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
          CL-TEST::D
          CL-TEST::E
          CL-TEST::F
Actual value:
          #<Undefined-Function 81BBAFB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.4 failed
Form: (BLOCK CL-TEST::DONE (TAGBODY (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE ERROR)) NIL (GO 10) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::BAD))) 10 (RETURN-FROM CL-TEST::DONE (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81BC94D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.5 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C (LIST (FIND-RESTART (QUOTE CL-TEST::FOO))) (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81BD80B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-CONDITION-RESTARTS.6
Test CL-TEST::WITH-CONDITION-RESTARTS.7 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (CL-TEST::HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (CL-TEST::C) (INVOKE-RESTART (QUOTE CL-TEST::FOO)))))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C (LIST (FIND-RESTART (QUOTE CL-TEST::FOO))) (SIGNAL CL-TEST::C2)) (CL-TEST::FOO NIL (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD)))))
Expected value:
          CL-TEST::GOOD
Actual value:
          CL-TEST::BAD [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-CONDITION-RESTARTS.8 failed
Form: (LET ((CL-TEST::C (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (PROGN (WITH-CONDITION-RESTARTS CL-TEST::C (LIST (FIND-RESTART (QUOTE CL-TEST::FOO)))) (INVOKE-RESTART (FIND-RESTART (QUOTE CL-TEST::FOO) CL-TEST::C2))) (CL-TEST::FOO NIL (QUOTE CL-TEST::GOOD)) (CL-TEST::FOO NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81C05517> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SIMPLE-RESTART.1
 CL-TEST::WITH-SIMPLE-RESTART.2
Test CL-TEST::WITH-SIMPLE-RESTART.3 failed
Form: (WITH-SIMPLE-RESTART (CL-TEST::FOO "") (VALUES 1 2 3 4 5 6 7 8 9 10))
Expected value:
          1
          2
          3
          4
          5
          6
          7
          8
          9
          10
Actual value:
          1 [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-SIMPLE-RESTART.4
 CL-TEST::WITH-SIMPLE-RESTART.5
 CL-TEST::WITH-SIMPLE-RESTART.6
 CL-TEST::WITH-SIMPLE-RESTART.7
 CL-TEST::WITH-SIMPLE-RESTART.8
 CL-TEST::ABORT.1
Test CL-TEST::ABORT.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (ABORT CL-TEST::C2)) (ABORT NIL (QUOTE CL-TEST::BAD)) (ABORT NIL (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81C4EC27> [Actual value: #<error during printing>

 NIL
 CL-TEST::ABORT.3
Test CL-TEST::ABORT.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (ABORT NIL)) (ABORT NIL (QUOTE CL-TEST::GOOD)) (ABORT NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81C640A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ABORT.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (ABORT CL-TEST::C2))) CONTROL-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81C757C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::MUFFLE-WARNING.1
Test CL-TEST::MUFFLE-WARNING.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (MUFFLE-WARNING CL-TEST::C2)) (MUFFLE-WARNING NIL (QUOTE CL-TEST::BAD)) (MUFFLE-WARNING NIL (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81C893A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::MUFFLE-WARNING.3
Test CL-TEST::MUFFLE-WARNING.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (MUFFLE-WARNING NIL)) (MUFFLE-WARNING NIL (QUOTE CL-TEST::GOOD)) (MUFFLE-WARNING NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81C9FC67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MUFFLE-WARNING.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (MUFFLE-WARNING CL-TEST::C2))) CONTROL-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81CB22B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONTINUE.1
Test CL-TEST::CONTINUE.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (CONTINUE CL-TEST::C2)) (CONTINUE NIL (QUOTE CL-TEST::BAD)) (CONTINUE NIL (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81CC63A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONTINUE.3
Test CL-TEST::CONTINUE.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (CONTINUE NIL)) (CONTINUE NIL (QUOTE CL-TEST::GOOD)) (CONTINUE NIL (QUOTE CL-TEST::BAD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Undefined-Function 81CDBEE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CONTINUE.5 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (CONTINUE CL-TEST::C2)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81CE97E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::STORE-VALUE.1
Test CL-TEST::STORE-VALUE.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (STORE-VALUE 17 CL-TEST::C2)) (STORE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::BAD))) (STORE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::GOOD)))))
Expected value:
          (17 CL-TEST::GOOD)
Actual value:
          #<Undefined-Function 81CFC967> [Actual value: #<error during printing>

 NIL
 CL-TEST::STORE-VALUE.3
Test CL-TEST::STORE-VALUE.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (STORE-VALUE 18 NIL)) (STORE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::GOOD))) (STORE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::BAD)))))
Expected value:
          (18 CL-TEST::GOOD)
Actual value:
          #<Undefined-Function 81D14667> [Actual value: #<error during printing>

 NIL
Test CL-TEST::STORE-VALUE.5 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (STORE-VALUE 21 CL-TEST::C2)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81D23D17> [Actual value: #<error during printing>

 NIL
 CL-TEST::USE-VALUE.1
Test CL-TEST::USE-VALUE.2 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (USE-VALUE 17 CL-TEST::C2)) (USE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::BAD))) (USE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::GOOD)))))
Expected value:
          (17 CL-TEST::GOOD)
Actual value:
          #<Undefined-Function 81D37187> [Actual value: #<error during printing>

 NIL
 CL-TEST::USE-VALUE.3
Test CL-TEST::USE-VALUE.4 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (RESTART-CASE (WITH-CONDITION-RESTARTS CL-TEST::C1 (LIST (FIRST (COMPUTE-RESTARTS))) (USE-VALUE 18 NIL)) (USE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::GOOD))) (USE-VALUE (CL-TEST::X) (LIST CL-TEST::X (QUOTE CL-TEST::BAD)))))
Expected value:
          (18 CL-TEST::GOOD)
Actual value:
          #<Undefined-Function 81D4EA07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-VALUE.5 failed
Form: (LET ((CL-TEST::C1 (MAKE-CONDITION (QUOTE ERROR))) (CL-TEST::C2 (MAKE-CONDITION (QUOTE ERROR)))) (WITH-CONDITION-RESTARTS CL-TEST::C1 (COMPUTE-RESTARTS) (USE-VALUE 21 CL-TEST::C2)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81D5DD57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-CONDITION.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TP CL-TEST::IN CL-TEST::*CL-CONDITION-TYPE-SYMBOLS* CL-TEST::FOR CL-TEST::C = (MAKE-CONDITION CL-TEST::TP) UNLESS (AND (TYPEP CL-TEST::C CL-TEST::TP) (TYPEP CL-TEST::C (QUOTE CONDITION))) CL-TEST::COLLECT (LIST CL-TEST::TP CL-TEST::C))
Expected value:
          NIL
Actual value:
          #<Simple-Error 81D6CFF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-CONDITION.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TP CL-TEST::IN CL-TEST::*CL-CONDITION-TYPE-SYMBOLS* CL-TEST::FOR CLASS = (FIND-CLASS CL-TEST::TP) CL-TEST::FOR CL-TEST::C = (AND CLASS (MAKE-CONDITION CLASS)) UNLESS (OR (NOT CLASS) (AND (TYPEP CL-TEST::C CL-TEST::TP) (TYPEP CL-TEST::C CLASS) (TYPEP CL-TEST::C (QUOTE CONDITION)))) CL-TEST::COLLECT (LIST CL-TEST::TP CL-TEST::C))
Expected value:
          NIL
Actual value:
          #<Simple-Error 81D7EA07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-CONDITION.3 failed
Form: (LET* ((CL-TEST::TP (QUOTE (OR PROGRAM-ERROR TYPE-ERROR))) (CL-TEST::C (MAKE-CONDITION CL-TEST::TP))) (OR (NOT (AND (SUBTYPEP CL-TEST::TP (QUOTE CONDITION)) (OR (SUBTYPEP (QUOTE PROGRAM-ERROR) CL-TEST::TP) (SUBTYPEP (QUOTE TYPE-ERROR) CL-TEST::TP)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C CL-TEST::TP))))
Expected value:
          T
Actual value:
          #<Simple-Error 81D8E6F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-CONDITION.4 failed
Form: (LET* ((CL-TEST::TP (QUOTE (AND SIMPLE-ERROR TYPE-ERROR))) (CL-TEST::C (MAKE-CONDITION CL-TEST::TP))) (OR (NOT (AND (SUBTYPEP (QUOTE SIMPLE-ERROR) CL-TEST::TP) (SUBTYPEP (QUOTE TYPE-ERROR) CL-TEST::TP) (SUBTYPEP CL-TEST::TP (QUOTE CONDITION)))) (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::C CL-TEST::TP))))
Expected value:
          T
Actual value:
          #<Simple-Error 81D9C8E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-CONDITION.ERROR.1
 CL-TEST::CONS-OF-SYMBOLS
 CL-TEST::CONS-WITH-NIL
 CL-TEST::CONS-EQ-EQUAL
 CL-TEST::CONS-EQUAL-LIST
 CL-TEST::CONS.ORDER.1
 CL-TEST::CONS.FOLD.1
 CL-TEST::CONS.ERROR.1
 CL-TEST::CONS.ERROR.2
 CL-TEST::CONS.ERROR.3
 CL-TEST::CONSP-LIST
 CL-TEST::CONSP-CONS
 CL-TEST::CONSP-NIL
 CL-TEST::CONSP-EMPTY-LIST
 CL-TEST::CONSP-SINGLE-ELEMENT-LIST
 CL-TEST::CONSP-XOR-ATOM-UNIVERSE
 CL-TEST::CONSP-CONS-UNIVERSE
 CL-TEST::CONSP.ORDER.1
 CL-TEST::CONSP.ERROR.1
 CL-TEST::CONSP.ERROR.2
Test CL-TEST::ATOM.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*UNIVERSE* UNLESS (IF (ATOM CL-TEST::X) (NOT (CONSP CL-TEST::X)) (CONSP CL-TEST::X)) CL-TEST::COLLECT CL-TEST::X)
Expected value:
          NIL
Actual value:
          #<Simple-Error C171BF37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ATOM.2 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (ATOM (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M 0))))
Expected value:
          T
Actual value:
          #<Simple-Error C1729527> [Actual value: #<error during printing>

 NIL
 CL-TEST::ATOM.ORDER.1
 CL-TEST::ATOM.ERROR.1
 CL-TEST::ATOM.ERROR.2
Test CL-TEST::CONS.23 failed
Form: (CAR (QUOTE (CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1746907> [Actual value: #<error during printing>

 NIL
 CL-TEST::CONS.24
 CL-TEST::CONS.25
 CL-TEST::CONS.26
 CL-TEST::CONS.27
 CL-TEST::CONS.28
 CL-TEST::CONS.29
 CL-TEST::CONS.30
 CL-TEST::CONS.31
 CL-TEST::CONS.32
 CL-TEST::CONS.33
 CL-TEST::CONS.34
 CL-TEST::CONS.36
 CL-TEST::CONS.37
 CL-TEST::CONS.38
 CL-TEST::CONS.39
 CL-TEST::CONS.40
 CL-TEST::CONS.41
 CL-TEST::CONS.42
 CL-TEST::CONS.43
 CL-TEST::CONS.44
 CL-TEST::CONS.45
 CL-TEST::CONS.46
 CL-TEST::CONS.47
 CL-TEST::CONS.48
 CL-TEST::CONS.49
 CL-TEST::CONS.50
 CL-TEST::CONS.51
 CL-TEST::CONS.52
 CL-TEST::CONS.53
Test CL-TEST::CAR.1 failed
Form: (CAR (QUOTE (CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C176F377> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CAR-NIL failed
Form: (CAR NIL)
Expected value:
          NIL
Actual value:
          #<Simple-Error C17760B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CAR.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION CAR) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Simple-Error C177C837> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CAR.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (CAR (QUOTE CL-TEST::A)) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C17884F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::CAR.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (CAR (PROGN (INCF CL-TEST::I) (QUOTE (CL-TEST::A CL-TEST::B)))) CL-TEST::I))
Expected value:
          CL-TEST::A
          1
Actual value:
          #<Simple-Error C1791057> [Actual value: #<error during printing>

 NIL
 CL-TEST::CDR.1
 CL-TEST::CDR-NIL
 CL-TEST::CDR.ORDER.1
 CL-TEST::CDR.ERROR.1
 CL-TEST::CDR.ERROR.2
 CL-TEST::CAAR.ERROR.1
 CL-TEST::CAAR.ERROR.2
 CL-TEST::CADR.ERROR.1
 CL-TEST::CADR.ERROR.2
 CL-TEST::CDAR.ERROR.1
 CL-TEST::CDAR.ERROR.2
 CL-TEST::CDDR.ERROR.1
 CL-TEST::CDDR.ERROR.2
 CL-TEST::CAAAR.ERROR.1
 CL-TEST::CAAAR.ERROR.2
 CL-TEST::CAAAR.ERROR.3
 CL-TEST::CAADR.ERROR.1
 CL-TEST::CAADR.ERROR.2
 CL-TEST::CAADR.ERROR.3
 CL-TEST::CADAR.ERROR.1
 CL-TEST::CADAR.ERROR.2
 CL-TEST::CADAR.ERROR.3
 CL-TEST::CADDR.ERROR.1
 CL-TEST::CADDR.ERROR.2
 CL-TEST::CADDR.ERROR.3
 CL-TEST::CDAAR.ERROR.1
 CL-TEST::CDAAR.ERROR.2
 CL-TEST::CDAAR.ERROR.3
 CL-TEST::CDADR.ERROR.1
 CL-TEST::CDADR.ERROR.2
 CL-TEST::CDADR.ERROR.3
 CL-TEST::CDDAR.ERROR.1
 CL-TEST::CDDAR.ERROR.2
 CL-TEST::CDDAR.ERROR.3
 CL-TEST::CDDDR.ERROR.1
 CL-TEST::CDDDR.ERROR.2
 CL-TEST::CDDDR.ERROR.3
 CL-TEST::CAAAAR.ERROR.1
 CL-TEST::CAAAAR.ERROR.2
 CL-TEST::CAAAAR.ERROR.3
 CL-TEST::CAAAAR.ERROR.4
 CL-TEST::CAAADR.ERROR.1
 CL-TEST::CAAADR.ERROR.2
 CL-TEST::CAAADR.ERROR.3
 CL-TEST::CAAADR.ERROR.4
 CL-TEST::CAADAR.ERROR.1
 CL-TEST::CAADAR.ERROR.2
 CL-TEST::CAADAR.ERROR.3
 CL-TEST::CAADAR.ERROR.4
 CL-TEST::CAADDR.ERROR.1
 CL-TEST::CAADDR.ERROR.2
 CL-TEST::CAADDR.ERROR.3
 CL-TEST::CAADDR.ERROR.4
 CL-TEST::CADAAR.ERROR.1
 CL-TEST::CADAAR.ERROR.2
 CL-TEST::CADAAR.ERROR.3
 CL-TEST::CADAAR.ERROR.4
 CL-TEST::CADADR.ERROR.1
 CL-TEST::CADADR.ERROR.2
 CL-TEST::CADADR.ERROR.3
 CL-TEST::CADADR.ERROR.4
 CL-TEST::CADDAR.ERROR.1
 CL-TEST::CADDAR.ERROR.2
 CL-TEST::CADDAR.ERROR.3
 CL-TEST::CADDAR.ERROR.4
 CL-TEST::CADDDR.ERROR.1
 CL-TEST::CADDDR.ERROR.2
 CL-TEST::CADDDR.ERROR.3
 CL-TEST::CADDDR.ERROR.4
 CL-TEST::CDAAAR.ERROR.1
 CL-TEST::CDAAAR.ERROR.2
 CL-TEST::CDAAAR.ERROR.3
 CL-TEST::CDAAAR.ERROR.4
 CL-TEST::CDAADR.ERROR.1
 CL-TEST::CDAADR.ERROR.2
 CL-TEST::CDAADR.ERROR.3
 CL-TEST::CDAADR.ERROR.4
 CL-TEST::CDADAR.ERROR.1
 CL-TEST::CDADAR.ERROR.2
 CL-TEST::CDADAR.ERROR.3
 CL-TEST::CDADAR.ERROR.4
 CL-TEST::CDADDR.ERROR.1
 CL-TEST::CDADDR.ERROR.2
 CL-TEST::CDADDR.ERROR.3
 CL-TEST::CDADDR.ERROR.4
 CL-TEST::CDDAAR.ERROR.1
 CL-TEST::CDDAAR.ERROR.2
 CL-TEST::CDDAAR.ERROR.3
 CL-TEST::CDDAAR.ERROR.4
 CL-TEST::CDDADR.ERROR.1
 CL-TEST::CDDADR.ERROR.2
 CL-TEST::CDDADR.ERROR.3
 CL-TEST::CDDADR.ERROR.4
 CL-TEST::CDDDAR.ERROR.1
 CL-TEST::CDDDAR.ERROR.2
 CL-TEST::CDDDAR.ERROR.3
 CL-TEST::CDDDAR.ERROR.4
 CL-TEST::CDDDDR.ERROR.1
 CL-TEST::CDDDDR.ERROR.2
 CL-TEST::CDDDDR.ERROR.3
 CL-TEST::CDDDDR.ERROR.4
Test CL-TEST::CAR-SET-ALT failed
Form: (LET ((CL-TEST::X (CL-TEST::CREATE-C*R-TEST 1))) (AND (SETF (CAR CL-TEST::X) (QUOTE CL-TEST::A)) (EQL (CAR CL-TEST::X) (QUOTE CL-TEST::A)) (SETF (CAR CL-TEST::X) (QUOTE CL-TEST::NONE)) (CL-TEST::EQUALT CL-TEST::X (CL-TEST::CREATE-C*R-TEST 1))))
Expected value:
          T
Actual value:
          #<Simple-Error C1B7B087> [Actual value: #<error during printing>

 NIL
 CL-TEST::CDR-SET-ALT
 CL-TEST::CAAR-SET-ALT
 CL-TEST::CADR-SET-ALT
 CL-TEST::CDAR-SET-ALT
 CL-TEST::CDDR-SET-ALT
 CL-TEST::CAAAR-SET-ALT
 CL-TEST::CAADR-SET-ALT
 CL-TEST::CADAR-SET-ALT
 CL-TEST::CADDR-SET-ALT
 CL-TEST::CDAAR-SET-ALT
 CL-TEST::CDADR-SET-ALT
 CL-TEST::CDDAR-SET-ALT
 CL-TEST::CDDDR-SET-ALT
 CL-TEST::CAAAAR-SET-ALT
 CL-TEST::CAAADR-SET-ALT
 CL-TEST::CAADAR-SET-ALT
 CL-TEST::CAADDR-SET-ALT
 CL-TEST::CADAAR-SET-ALT
 CL-TEST::CADADR-SET-ALT
 CL-TEST::CADDAR-SET-ALT
 CL-TEST::CADDDR-SET-ALT
 CL-TEST::CDAAAR-SET-ALT
 CL-TEST::CDAADR-SET-ALT
 CL-TEST::CDADAR-SET-ALT
 CL-TEST::CDADDR-SET-ALT
 CL-TEST::CDDAAR-SET-ALT
 CL-TEST::CDDADR-SET-ALT
 CL-TEST::CDDDAR-SET-ALT
 CL-TEST::CDDDDR-SET-ALT
Test CL-TEST::FIRST-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (FIRST CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 1)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (FIRST CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 0 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C07847> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SECOND-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (SECOND CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 2)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (SECOND CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 1 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C18307> [Actual value: #<error during printing>

 NIL
Test CL-TEST::THIRD-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (THIRD CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 3)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (THIRD CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 2 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C28F17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FOURTH-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (FOURTH CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 4)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (FOURTH CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 3 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C399D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIFTH-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (FIFTH CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 5)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (FIFTH CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 4 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C4A5E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIXTH-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (SIXTH CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 6)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (SIXTH CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 5 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C5B0A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SEVENTH-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (SEVENTH CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 7)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (SEVENTH CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 6 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C6BB67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::EIGHTH-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (EIGHTH CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 8)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (EIGHTH CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 7 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C7C8C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTH-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (NINTH CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 9)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (NINTH CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 8 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C8D4D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TENTH-SET-ALT failed
Form: (LET ((CL-TEST::X (MAKE-LIST 20 :INITIAL-ELEMENT NIL))) (AND (SETF (TENTH CL-TEST::X) (QUOTE CL-TEST::A)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 20 DO (WHEN (AND (NOT (EQL CL-TEST::I 10)) (NTH (1- CL-TEST::I) CL-TEST::X)) (RETURN NIL)) CL-TEST::FINALLY (RETURN T)) (EQL (TENTH CL-TEST::X) (QUOTE CL-TEST::A)) (NTH 9 CL-TEST::X)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1C9DF97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RPLACA.1 failed
Form: (LET ((CL-TEST::X (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (LET ((CL-TEST::Y CL-TEST::X)) (AND (CL-TEST::EQT (RPLACA CL-TEST::X (QUOTE CL-TEST::C)) CL-TEST::Y) (CL-TEST::EQT CL-TEST::X CL-TEST::Y) (CL-TEST::EQT (CAR CL-TEST::X) (QUOTE CL-TEST::C)) (CL-TEST::EQT (CDR CL-TEST::X) (QUOTE CL-TEST::B)))))
Expected value:
          T
Actual value:
          #<Simple-Error C1CADA97> [Actual value: #<error during printing>

 NIL
 CL-TEST::RPLACA.ORDER.1
 CL-TEST::RPLACA.ERROR.1
 CL-TEST::RPLACA.ERROR.2
 CL-TEST::RPLACA.ERROR.3
 CL-TEST::RPLACA.ERROR.4
 CL-TEST::RPLACA.ERROR.6
Test CL-TEST::RPLACD.1 failed
Form: (LET ((CL-TEST::X (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (LET ((CL-TEST::Y CL-TEST::X)) (AND (CL-TEST::EQT (RPLACD CL-TEST::X (QUOTE CL-TEST::D)) CL-TEST::Y) (CL-TEST::EQT CL-TEST::X CL-TEST::Y) (CL-TEST::EQT (CAR CL-TEST::X) (QUOTE CL-TEST::A)) (CL-TEST::EQT (CDR CL-TEST::X) (QUOTE CL-TEST::D)))))
Expected value:
          T
Actual value:
          #<Simple-Error C1D20607> [Actual value: #<error during printing>

 NIL
 CL-TEST::RPLACD.ORDER.1
 CL-TEST::RPLACD.ERROR.1
 CL-TEST::RPLACD.ERROR.2
 CL-TEST::RPLACD.ERROR.3
 CL-TEST::RPLACD.ERROR.4
 CL-TEST::RPLACD.ERROR.6
Test CL-TEST::COPY-TREE.1 failed
Form: (LET* ((CL-TEST::X (CONS (QUOTE CL-TEST::A) (LIST (CONS (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CONS 1 1.2) (LIST (LIST "abcde" (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT (CONS (QUOTE CL-TEST::E) (QUOTE CL-TEST::F)))) (QUOTE CL-TEST::G))))) (CL-TEST::Y (COPY-TREE CL-TEST::X))) (CL-TEST::CHECK-CONS-COPY CL-TEST::X CL-TEST::Y))
Expected value:
          T
Actual value:
          #<Undefined-Function C1D933B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.2 failed
Form: (LET* ((CL-TEST::X (COPY-LIST CL-TEST:*UNIVERSE*)) (CL-TEST::Y (COPY-TREE CL-TEST::X))) (CL-TEST::CHECK-CONS-COPY CL-TEST::X CL-TEST::Y))
Expected value:
          T
Actual value:
          #<Undefined-Function C1DA3CA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (COPY-TREE (PROGN (INCF CL-TEST::I) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))) CL-TEST::I))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          1
Actual value:
          #<Undefined-Function C1DAD6F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (COPY-TREE (QUOTE (CL-TEST::A . CL-TEST::B))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function C1DB8AA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.FOLD.2 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (COPY-TREE (QUOTE (CL-TEST::A))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function C1DC46E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.FOLD.3 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function C1DCFE27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-TREE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function C1DDFF97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-TREE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-TREE (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function C1DEBC37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.1 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE ((CL-TEST::A CL-TEST::B) CL-TEST::G (CL-TEST::D CL-TEST::E 10 CL-TEST::G CL-TEST::H) 15 . CL-TEST::G)) (QUOTE ((CL-TEST::E . CL-TEST::E2) (CL-TEST::G . 17))))
Expected value:
          ((CL-TEST::A CL-TEST::B) 17 (CL-TEST::D CL-TEST::E2 10 17 CL-TEST::H) 15 . 17)
Actual value:
          #<Undefined-Function C1DF45C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.2 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE (CL-TEST::F6 10 (CL-TEST::F4 (CL-TEST::F3 (CL-TEST::F1 CL-TEST::A CL-TEST::B) (CL-TEST::F1 CL-TEST::A CL-TEST::P)) (CL-TEST::F2 CL-TEST::A CL-TEST::B)))) (QUOTE (((CL-TEST::F1 CL-TEST::A CL-TEST::B) CL-TEST::F2 CL-TEST::A CL-TEST::B) ((CL-TEST::F2 CL-TEST::A CL-TEST::B) CL-TEST::F1 CL-TEST::A CL-TEST::B))) :TEST (FUNCTION EQUAL))
Expected value:
          (CL-TEST::F6 10 (CL-TEST::F4 (CL-TEST::F3 (CL-TEST::F2 CL-TEST::A CL-TEST::B) (CL-TEST::F1 CL-TEST::A CL-TEST::P)) (CL-TEST::F1 CL-TEST::A CL-TEST::B)))
Actual value:
          #<Undefined-Function C1E012C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.3 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE (10 ((10 20 (CL-TEST::A CL-TEST::B CL-TEST::C) 30)) (((10 20 30 40))))) (QUOTE ((30 . "foo"))))
Expected value:
          (10 ((10 20 (CL-TEST::A CL-TEST::B CL-TEST::C) "foo")) (((10 20 "foo" 40))))
Actual value:
          #<Undefined-Function C1E13D47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.4 failed
Form: (CL-TEST::CHECK-SUBLIS (SUBLIS (COPY-TREE (QUOTE ((CL-TEST::A . 2) (CL-TEST::B . 4) (CL-TEST::C . 1)))) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::A CL-TEST::D CL-TEST::B) CL-TEST::F)))) (QUOTE ((T . "yes"))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (TYPEP CL-TEST::X (QUOTE INTEGER)) (EVENP CL-TEST::X)))))
Expected value:
          ("yes" "yes" 1 CL-TEST::D CL-TEST::E ("yes" "yes" 1 "yes" CL-TEST::D "yes") CL-TEST::F)
Actual value:
          #<Undefined-Function C1E1F1A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.5 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE ("fee" (("fee" "Fie" "foo")) CL-TEST::FIE ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))))
Expected value:
          ("fee" (("fee" "Fie" "foo")) CL-TEST::FIE ("fee" "fie"))
Actual value:
          #<Undefined-Function C1E314D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.6 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE ("fee" CL-TEST::FIE (("fee" "Fie" "foo") 1) ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))) :TEST (QUOTE EQUAL))
Expected value:
          ("fee" CL-TEST::FIE (("fee" "Fie" "foo") 1) ("fee" #\f))
Actual value:
          #<Undefined-Function C1E645C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.7 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE (("aa" CL-TEST::A CL-TEST::B) (CL-TEST::Z "bb" CL-TEST::D) ((CL-TEST::X . "aa")))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "aa")) . 1) ((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "bb")) . 2))) :TEST (QUOTE EQUAL) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (CONSP CL-TEST::X) (CAR CL-TEST::X) (QUOTE CL-TEST::*NOT-PRESENT*)))))
Expected value:
          (1 (CL-TEST::Z . 2) ((CL-TEST::X . "aa")))
Actual value:
          #<Undefined-Function C1E722B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.8 failed
Form: (CL-TEST::CHECK-SUBLIS (QUOTE (1 2 CL-TEST::A CL-TEST::B)) (QUOTE ((1 . 2) (CL-TEST::A . CL-TEST::B))) :KEY NIL)
Expected value:
          (2 2 CL-TEST::B CL-TEST::B)
Actual value:
          #<Undefined-Function C1E82C57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.9 failed
Form: (CL-TEST::CHECK-SUBLIS (LIST 0 3 8 20) (QUOTE ((1 . CL-TEST::X) (5 . CL-TEST::Y) (10 . CL-TEST::Z))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y)))))
Expected value:
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 20)
Actual value:
          #<Undefined-Function C1E8CE67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.10 failed
Form: (CL-TEST::CHECK-SUBLIS (LIST 0 3 8 20) (QUOTE ((1 . CL-TEST::X) (5 . CL-TEST::Y) (10 . CL-TEST::Z))) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (NOT (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y))))))
Expected value:
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 20)
Actual value:
          #<Undefined-Function C1E99F97> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBLIS.TEST-AND-TEST-NOT.1
 CL-TEST::SUBLIS.TEST-AND-TEST-NOT.2
Test CL-TEST::SUBLIS.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBLIS (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . CL-TEST::Z)))) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) :TEST (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::Z CL-TEST::B CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function C1EB5387> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBLIS (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . CL-TEST::Z)))) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL)))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::Z CL-TEST::B CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function C1ECD1A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBLIS.FOLD.1
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.1 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1EE49D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.2 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1EED2F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.3 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1EF59B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.4 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1EFDD97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ALLOW-OTHER-KEYS.5 failed
Form: (SUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error C1F066F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.KEYWORDS.6 failed
Form: (SUBLIS (QUOTE ((1 . CL-TEST::A))) (LIST 0 1 2) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (NUMBERP CL-TEST::X) (1+ CL-TEST::X) CL-TEST::X))) :KEY (FUNCTION IDENTITY))
Expected value:
          (CL-TEST::A 1 2)
Actual value:
          #<Simple-Error C1F0FCE7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBLIS.ERROR.1
 CL-TEST::SUBLIS.ERROR.2
Test CL-TEST::SUBLIS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS NIL (QUOTE CL-TEST::A) :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C1F31AF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS NIL (QUOTE CL-TEST::A) :BAD-KEYWORD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C1F3E1B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C1F4AC97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C1F5A537> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBLIS.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C1F69BF7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBLIS.ERROR.8
Test CL-TEST::SUBLIS.SHARED failed
Form: (LET* ((CL-TEST::SHARED-PIECE (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (CL-TEST::A (LIST CL-TEST::SHARED-PIECE CL-TEST::SHARED-PIECE))) (CL-TEST::CHECK-SUBLIS CL-TEST::A (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::B . CL-TEST::A)))))
Expected value:
          ((CL-TEST::B CL-TEST::A) (CL-TEST::B CL-TEST::A))
Actual value:
          #<Undefined-Function C1F7EFF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.1 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE ((CL-TEST::A CL-TEST::B) CL-TEST::G (CL-TEST::D CL-TEST::E 10 CL-TEST::G CL-TEST::H) 15 . CL-TEST::G)) (QUOTE ((CL-TEST::E . CL-TEST::E2) (CL-TEST::G . 17))))
Expected value:
          ((CL-TEST::A CL-TEST::B) 17 (CL-TEST::D CL-TEST::E2 10 17 CL-TEST::H) 15 . 17)
Actual value:
          #<Undefined-Function C1F8C527> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.2 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE (CL-TEST::F6 10 (CL-TEST::F4 (CL-TEST::F3 (CL-TEST::F1 CL-TEST::A CL-TEST::B) (CL-TEST::F1 CL-TEST::A CL-TEST::P)) (CL-TEST::F2 CL-TEST::A CL-TEST::B)))) (QUOTE (((CL-TEST::F1 CL-TEST::A CL-TEST::B) CL-TEST::F2 CL-TEST::A CL-TEST::B) ((CL-TEST::F2 CL-TEST::A CL-TEST::B) CL-TEST::F1 CL-TEST::A CL-TEST::B))) :TEST (FUNCTION EQUAL))
Expected value:
          (CL-TEST::F6 10 (CL-TEST::F4 (CL-TEST::F3 (CL-TEST::F2 CL-TEST::A CL-TEST::B) (CL-TEST::F1 CL-TEST::A CL-TEST::P)) (CL-TEST::F1 CL-TEST::A CL-TEST::B)))
Actual value:
          #<Undefined-Function C1F99317> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.3 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE (10 ((10 20 (CL-TEST::A CL-TEST::B CL-TEST::C) 30)) (((10 20 30 40))))) (QUOTE ((30 . "foo"))))
Expected value:
          (10 ((10 20 (CL-TEST::A CL-TEST::B CL-TEST::C) "foo")) (((10 20 "foo" 40))))
Actual value:
          #<Undefined-Function C1FABE87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.4 failed
Form: (CL-TEST::CHECK-NSUBLIS (NSUBLIS (COPY-TREE (QUOTE ((CL-TEST::A . 2) (CL-TEST::B . 4) (CL-TEST::C . 1)))) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::A CL-TEST::D CL-TEST::B) CL-TEST::F)))) (QUOTE ((T . "yes"))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (TYPEP CL-TEST::X (QUOTE INTEGER)) (EVENP CL-TEST::X)))))
Expected value:
          ("yes" "yes" 1 CL-TEST::D CL-TEST::E ("yes" "yes" 1 "yes" CL-TEST::D "yes") CL-TEST::F)
Actual value:
          #<Undefined-Function C1FB72A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.5 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE ("fee" (("fee" "Fie" "foo")) CL-TEST::FIE ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))))
Expected value:
          ("fee" (("fee" "Fie" "foo")) CL-TEST::FIE ("fee" "fie"))
Actual value:
          #<Undefined-Function C1FC9727> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.6 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE ("fee" CL-TEST::FIE (("fee" "Fie" "foo") 1) ("fee" "fie"))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "fie")) . #\f))) :TEST (QUOTE EQUAL))
Expected value:
          ("fee" CL-TEST::FIE (("fee" "Fie" "foo") 1) ("fee" #\f))
Actual value:
          #<Undefined-Function C1FD5E87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.7 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE (("aa" CL-TEST::A CL-TEST::B) (CL-TEST::Z "bb" CL-TEST::D) ((CL-TEST::X . "aa")))) (SYSTEM.INTERNALS::BACKQUOTE (((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "aa")) . 1) ((SYSTEM.INTERNALS::BQ-COMMA (COPY-SEQ "bb")) . 2))) :TEST (QUOTE EQUAL) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (CONSP CL-TEST::X) (CAR CL-TEST::X) (QUOTE CL-TEST::*NOT-PRESENT*)))))
Expected value:
          (1 (CL-TEST::Z . 2) ((CL-TEST::X . "aa")))
Actual value:
          #<Undefined-Function C1FE3C67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.8 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :BAD-KEYWORD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function C1FF4377> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.9 failed
Form: (CL-TEST::CHECK-NSUBLIS (QUOTE (1 2 CL-TEST::A CL-TEST::B)) (QUOTE ((1 . 2) (CL-TEST::A . CL-TEST::B))) :KEY NIL)
Expected value:
          (2 2 CL-TEST::B CL-TEST::B)
Actual value:
          #<Undefined-Function 80082F37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.10 failed
Form: (CL-TEST::CHECK-NSUBLIS (LIST 0 3 8 20) (QUOTE ((1 . CL-TEST::X) (5 . CL-TEST::Y) (10 . CL-TEST::Z))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y)))))
Expected value:
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 20)
Actual value:
          #<Undefined-Function 81709517> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.11 failed
Form: (CL-TEST::CHECK-NSUBLIS (LIST 0 3 8 20) (QUOTE ((1 . CL-TEST::X) (5 . CL-TEST::Y) (10 . CL-TEST::Z))) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (NOT (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y))))))
Expected value:
          (CL-TEST::X CL-TEST::Y CL-TEST::Z 20)
Actual value:
          #<Undefined-Function 81716E27> [Actual value: #<error during printing>

 NIL
 CL-TEST::NSUBLIS.TEST-AND-TEST-NOT.1
 CL-TEST::NSUBLIS.TEST-AND-TEST-NOT.2
Test CL-TEST::NSUBLIS.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBLIS (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . CL-TEST::Z)))) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) :TEST (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::Z CL-TEST::B CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function 8172ED07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBLIS (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . CL-TEST::Z)))) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL)))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::Z CL-TEST::B CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function 81743E37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.1 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81758E87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.2 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 817614C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.3 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81769B07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.4 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81771E67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ALLOW-OTHER-KEYS.5 failed
Form: (NSUBLIS NIL (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 8177A287> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.KEYWORDS.6 failed
Form: (NSUBLIS (QUOTE ((1 . CL-TEST::A))) (LIST 0 1 2) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (NUMBERP CL-TEST::X) (1+ CL-TEST::X) CL-TEST::X))) :KEY (FUNCTION IDENTITY))
Expected value:
          (CL-TEST::A 1 2)
Actual value:
          #<Undefined-Function 81783087> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 817922B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 8179E3D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS NIL (QUOTE CL-TEST::A) :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 817AA037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS NIL (QUOTE CL-TEST::A) :BAD-KEYWORD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 817B6677> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 817C3037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 817D27B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 817E1D57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBLIS.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBLIS (QUOTE ((CL-TEST::A . 1) . CL-TEST::BAD)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 817F1667> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.1 failed
Form: (CL-TEST::CHECK-SUBST "Z" 30 (COPY-TREE CL-TEST::*SUBST-TREE-1*))
Expected value:
          (10 ("Z" 20 10) (20 10) (10 20 "Z" 40))
Actual value:
          #<Undefined-Function 817FBFA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.2 failed
Form: (CL-TEST::CHECK-SUBST "A" 0 (COPY-TREE CL-TEST::*SUBST-TREE-1*))
Expected value:
          (10 (30 20 10) (20 10) (10 20 30 40))
Actual value:
          #<Undefined-Function 81804AE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.3 failed
Form: (CL-TEST::CHECK-SUBST "Z" 100 (COPY-TREE CL-TEST::*SUBST-TREE-1*) :TEST-NOT (FUNCTION EQL))
Expected value:
          "Z"
Actual value:
          #<Undefined-Function 8180D507> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.4 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::GRAPE) (QUOTE CL-TEST::DICK) (QUOTE (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK))))
Expected value:
          (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::GRAPE))
Actual value:
          #<Undefined-Function 81815B47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.5 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::CHA-CHA-CHA) (QUOTE NIL) (QUOTE (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK))))
Expected value:
          (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK . CL-TEST::CHA-CHA-CHA) . CL-TEST::CHA-CHA-CHA)
Actual value:
          #<Undefined-Function 81820C67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.6 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE (1 2)) (QUOTE (CL-TEST::FOO . CL-TEST::BAR)) (QUOTE ((CL-TEST::FOO . CL-TEST::BAZ) (CL-TEST::FOO . CL-TEST::BAR) (CL-TEST::BAR . CL-TEST::FOO) (CL-TEST::BAZ CL-TEST::FOO . CL-TEST::BAR))) :TEST (FUNCTION EQUAL))
Expected value:
          ((CL-TEST::FOO . CL-TEST::BAZ) (1 2) (CL-TEST::BAR . CL-TEST::FOO) (CL-TEST::BAZ 1 2))
Actual value:
          #<Undefined-Function 8182CF87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.7 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::FOO) "aaa" (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (AND (NUMBERP CL-TEST::X) (EVENP CL-TEST::X)) "aaa" NIL))) :TEST (FUNCTION STRING=))
Expected value:
          ((1 . CL-TEST::FOO) (CL-TEST::FOO . 5) (CL-TEST::FOO 7 CL-TEST::FOO 9 CL-TEST::FOO (11 CL-TEST::FOO)))
Actual value:
          #<Undefined-Function 8183BA57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.8 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::FOO) NIL (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (AND (NUMBERP CL-TEST::X) (EVENP CL-TEST::X)) (COPY-SEQ "aaa") NIL))) :TEST-NOT (FUNCTION EQUAL))
Expected value:
          ((1 . CL-TEST::FOO) (CL-TEST::FOO . 5) (CL-TEST::FOO 7 CL-TEST::FOO 9 CL-TEST::FOO (11 CL-TEST::FOO)))
Actual value:
          #<Undefined-Function 8184A6E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.9 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::B))) :KEY NIL)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::A)
Actual value:
          #<Undefined-Function 81858D87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.10 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y)))))
Expected value:
          (1 2 10 CL-TEST::X CL-TEST::X 4)
Actual value:
          #<Undefined-Function 818646A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.11 failed
Form: (CL-TEST::CHECK-SUBST (QUOTE CL-TEST::X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (NOT (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y))))))
Expected value:
          (1 2 10 CL-TEST::X CL-TEST::X 4)
Actual value:
          #<Undefined-Function 818705B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBSET.TEST-AND-TEST-NOT.1
 CL-TEST::SUBSET.TEST-AND-TEST-NOT.2
Test CL-TEST::SUBST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBST (PROGN (SETF CL-TEST::V (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE ((10 CL-TEST::A . CL-TEST::A) CL-TEST::A CL-TEST::B CL-TEST::C ((CL-TEST::A)) CL-TEST::Z)))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL))) CL-TEST::I CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          ((10 CL-TEST::B . CL-TEST::B) CL-TEST::B CL-TEST::B CL-TEST::C ((CL-TEST::B)) CL-TEST::Z)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function 8188C307> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBST (PROGN (SETF CL-TEST::V (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE ((10 CL-TEST::A . CL-TEST::A) CL-TEST::A CL-TEST::B CL-TEST::C ((CL-TEST::A)) CL-TEST::Z)))) :TEST-NOT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          ((10 CL-TEST::B . CL-TEST::B) CL-TEST::B CL-TEST::B CL-TEST::C ((CL-TEST::B)) CL-TEST::Z)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function 818A9B27> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBST.FOLD.1
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.1 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 818C54C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.2 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 818F78D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.3 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 81902F87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.4 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 8190E957> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.ALLOW-OTHER-KEYS.5 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 8191A7A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST.KEYWORDS.6 failed
Form: (SUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :TEST (FUNCTION EQ) :TEST (COMPLEMENT (FUNCTION EQ)))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments 81926D77> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBST.ERROR.1
 CL-TEST::SUBST.ERROR.2
 CL-TEST::SUBST.ERROR.3
 CL-TEST::SUBST.ERROR.4
 CL-TEST::SUBST.ERROR.5
 CL-TEST::SUBST.ERROR.6
 CL-TEST::SUBST.ERROR.7
 CL-TEST::SUBST.ERROR.8
 CL-TEST::SUBST.ERROR.9
 CL-TEST::SUBST.ERROR.10
Test CL-TEST::SUBST-IF.1 failed
Form: (CL-TEST::CHECK-SUBST-IF (QUOTE CL-TEST::A) (FUNCTION CONSP) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81991A27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.2 failed
Form: (CL-TEST::CHECK-SUBST-IF 17 (COMPLEMENT (FUNCTION LISTP)) (QUOTE (CL-TEST::A (CL-TEST::A CL-TEST::B) (CL-TEST::A CL-TEST::C CL-TEST::D) (CL-TEST::A NIL CL-TEST::E CL-TEST::F CL-TEST::G))))
Expected value:
          (17 (17 17) (17 17 17) (17 NIL 17 17 17))
Actual value:
          #<Undefined-Function 8199B7B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.3 failed
Form: (CL-TEST::CHECK-SUBST-IF (QUOTE (CL-TEST::Z)) (COMPLEMENT (FUNCTION CONSP)) (QUOTE (CL-TEST::A (CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D CL-TEST::E) (CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I))))
Expected value:
          ((CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) CL-TEST::Z)
Actual value:
          #<Undefined-Function 819A7847> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.4 failed
Form: (CL-TEST::CHECK-SUBST-IF (QUOTE CL-TEST::B) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))) :KEY (FUNCTION LISTP))
Expected value:
          CL-TEST::B
Actual value:
          #<Undefined-Function 819B7577> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.5 failed
Form: (CL-TEST::CHECK-SUBST-IF 4 (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X 1))) (QUOTE ((1 3) (1) (1 10 20 30) (1 3 CL-TEST::X CL-TEST::Y))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (CONSP CL-TEST::X) (CAR CL-TEST::X)))))
Expected value:
          (4 4 4 4)
Actual value:
          #<Undefined-Function 819C2707> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.6 failed
Form: (CL-TEST::CHECK-SUBST-IF (QUOTE CL-TEST::A) (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X (QUOTE CL-TEST::B)))) (QUOTE ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C) (CL-TEST::D))) :KEY NIL)
Expected value:
          ((CL-TEST::A) (CL-TEST::A) (CL-TEST::C) (CL-TEST::D))
Actual value:
          #<Undefined-Function 819CEE87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.7 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBST-IF (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X (QUOTE CL-TEST::B))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 2 CL-TEST::A CL-TEST::B CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 CL-TEST::A CL-TEST::A CL-TEST::C)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function 819DB5C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (SUBST-IF (QUOTE CL-TEST::X) (QUOTE NUMBERP) (QUOTE (CL-TEST::A CL-TEST::B 3 (4) CL-TEST::C CL-TEST::D . 12))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 819F0E47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.1 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 819FD9D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.2 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81A06767> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.3 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81A0F217> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.4 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81A17D87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ALLOW-OTHER-KEYS.5 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81A20B17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.KEYWORDS.6 failed
Form: (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81A2A127> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81A37507> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81A430B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81A4F3E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81A5BD77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81A68C47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81A759D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81A825E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) (LIST (QUOTE CL-TEST::A) NIL (QUOTE CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81A8FC77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.1 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT (QUOTE (CL-TEST::X)) (QUOTE CONSP) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))))
Expected value:
          ((CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) (CL-TEST::X) CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) (CL-TEST::X) (CL-TEST::X) CL-TEST::X) CL-TEST::X)
Actual value:
          #<Undefined-Function 81A99FE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.2 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT (QUOTE CL-TEST::A) (COMPLEMENT (FUNCTION LISTP)) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81AA77D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.3 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT (QUOTE CL-TEST::C) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))) :KEY (COMPLEMENT (FUNCTION LISTP)))
Expected value:
          CL-TEST::C
Actual value:
          #<Undefined-Function 81AB20A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.4 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT 40 (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X 17)))) (QUOTE ((17) (17 22) (17 22 31) (17 21 34 54))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (CONSP CL-TEST::X) (CAR CL-TEST::X)))))
Expected value:
          (40 40 40 40)
Actual value:
          #<Undefined-Function 81ABDB17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.5 failed
Form: (CL-TEST::CHECK-SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X (QUOTE CL-TEST::B))))) (QUOTE ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C) (CL-TEST::D))) :KEY NIL)
Expected value:
          ((CL-TEST::A) (CL-TEST::A) (CL-TEST::C) (CL-TEST::D))
Actual value:
          #<Undefined-Function 81ACA617> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.7 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SUBST-IF-NOT (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X (QUOTE CL-TEST::B)))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 2 CL-TEST::A CL-TEST::B CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 CL-TEST::A CL-TEST::A CL-TEST::C)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function 81AD7397> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION CONSP) (QUOTE ((1 . 2) 3 . 4))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81AED257> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.1 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81AF9247> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.2 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81B02517> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.3 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81B0B507> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.4 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81B145B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ALLOW-OTHER-KEYS.5 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81B1D887> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.KEYWORDS.6 failed
Form: (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81B273D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81B34CF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81B40C67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81B4D357> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81B5A0A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81B67337> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81B74487> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81B81457> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBST-IF-NOT.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) (LIST (QUOTE CL-TEST::A) NIL (QUOTE CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81B8EEA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.1 failed
Form: (CL-TEST::CHECK-NSUBST "Z" 30 (COPY-TREE CL-TEST::*NSUBST-TREE-1*))
Expected value:
          (10 ("Z" 20 10) (20 10) (10 20 "Z" 40))
Actual value:
          #<Undefined-Function 81B995F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.2 failed
Form: (CL-TEST::CHECK-NSUBST "A" 0 (COPY-TREE CL-TEST::*NSUBST-TREE-1*))
Expected value:
          (10 (30 20 10) (20 10) (10 20 30 40))
Actual value:
          #<Undefined-Function 81BA2287> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.3 failed
Form: (CL-TEST::CHECK-NSUBST "Z" 100 (COPY-TREE CL-TEST::*NSUBST-TREE-1*) :TEST-NOT (FUNCTION EQL))
Expected value:
          "Z"
Actual value:
          #<Undefined-Function 81BAADF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.4 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::GRAPE) (QUOTE CL-TEST::DICK) (QUOTE (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK))))
Expected value:
          (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::GRAPE))
Actual value:
          #<Undefined-Function 81BB3587> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.5 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::CHA-CHA-CHA) (QUOTE NIL) (QUOTE (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK))))
Expected value:
          (CL-TEST::MELVILLE CL-TEST::WROTE (CL-TEST::MOBY CL-TEST::DICK . CL-TEST::CHA-CHA-CHA) . CL-TEST::CHA-CHA-CHA)
Actual value:
          #<Undefined-Function 81BBE797> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.6 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE (1 2)) (QUOTE (CL-TEST::FOO . CL-TEST::BAR)) (QUOTE ((CL-TEST::FOO . CL-TEST::BAZ) (CL-TEST::FOO . CL-TEST::BAR) (CL-TEST::BAR . CL-TEST::FOO) (CL-TEST::BAZ CL-TEST::FOO . CL-TEST::BAR))) :TEST (FUNCTION EQUAL))
Expected value:
          ((CL-TEST::FOO . CL-TEST::BAZ) (1 2) (CL-TEST::BAR . CL-TEST::FOO) (CL-TEST::BAZ 1 2))
Actual value:
          #<Undefined-Function 81BCABA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.7 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::FOO) "aaa" (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (AND (NUMBERP CL-TEST::X) (EVENP CL-TEST::X)) "aaa" NIL))) :TEST (FUNCTION STRING=))
Expected value:
          ((1 . CL-TEST::FOO) (CL-TEST::FOO . 5) (CL-TEST::FOO 7 CL-TEST::FOO 9 CL-TEST::FOO (11 CL-TEST::FOO)))
Actual value:
          #<Undefined-Function 81BD9767> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.8 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::FOO) NIL (QUOTE ((1 . 2) (4 . 5) (6 7 8 9 10 (11 12)))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (IF (AND (NUMBERP CL-TEST::X) (EVENP CL-TEST::X)) (COPY-SEQ "aaa") NIL))) :TEST-NOT (FUNCTION EQUAL))
Expected value:
          ((1 . CL-TEST::FOO) (CL-TEST::FOO . 5) (CL-TEST::FOO 7 CL-TEST::FOO 9 CL-TEST::FOO (11 CL-TEST::FOO)))
Actual value:
          #<Undefined-Function 81BE84E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.9 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::B))) :KEY NIL)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::A)
Actual value:
          #<Undefined-Function 81BF6C77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.10 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y)))))
Expected value:
          (1 2 10 CL-TEST::X CL-TEST::X 4)
Actual value:
          #<Undefined-Function 81C02687> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.11 failed
Form: (CL-TEST::CHECK-NSUBST (QUOTE CL-TEST::X) 10 (COPY-TREE (QUOTE (1 2 10 20 30 4))) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (NOT (AND (REALP CL-TEST::X) (REALP CL-TEST::Y) (< CL-TEST::X CL-TEST::Y))))))
Expected value:
          (1 2 10 CL-TEST::X CL-TEST::X 4)
Actual value:
          #<Undefined-Function 81C0E687> [Actual value: #<error during printing>

 NIL
 CL-TEST::NSUBSET.TEST-AND-TEST-NOT.1
 CL-TEST::NSUBSET.TEST-AND-TEST-NOT.2
Test CL-TEST::NSUBST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBST (PROGN (SETF CL-TEST::V (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE ((10 CL-TEST::A . CL-TEST::A) CL-TEST::A CL-TEST::B CL-TEST::C ((CL-TEST::A)) CL-TEST::Z)))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL))) CL-TEST::I CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          ((10 CL-TEST::B . CL-TEST::B) CL-TEST::B CL-TEST::B CL-TEST::C ((CL-TEST::B)) CL-TEST::Z)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function 81C25667> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBST (PROGN (SETF CL-TEST::V (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-TREE (QUOTE ((10 CL-TEST::A . CL-TEST::A) CL-TEST::A CL-TEST::B CL-TEST::C ((CL-TEST::A)) CL-TEST::Z)))) :TEST-NOT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::V CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          ((10 CL-TEST::B . CL-TEST::B) CL-TEST::B CL-TEST::B CL-TEST::C ((CL-TEST::B)) CL-TEST::Z)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function 81C3EB37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.1 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function 81C57DB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.2 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function 81C62BA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.3 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function 81C6D6B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.4 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function 81C78287> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ALLOW-OTHER-KEYS.5 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function 81C83077> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.KEYWORDS.6 failed
Form: (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) :TEST (FUNCTION EQ) :TEST (COMPLEMENT (FUNCTION EQ)))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function 81C8E6E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81C9DE07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81CA97D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81CB5927> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81CC21F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81CCF007> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81CDBCD7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81CE8827> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81CF5DF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81D042E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :KEY (FUNCTION EQUAL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81D12957> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.1 failed
Form: (CL-TEST::CHECK-NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION CONSP) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81D1CC77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.2 failed
Form: (CL-TEST::CHECK-NSUBST-IF 17 (COMPLEMENT (FUNCTION LISTP)) (QUOTE (CL-TEST::A (CL-TEST::A CL-TEST::B) (CL-TEST::A CL-TEST::C CL-TEST::D) (CL-TEST::A NIL CL-TEST::E CL-TEST::F CL-TEST::G))))
Expected value:
          (17 (17 17) (17 17 17) (17 NIL 17 17 17))
Actual value:
          #<Undefined-Function 81D26AF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.3 failed
Form: (CL-TEST::CHECK-NSUBST-IF (QUOTE (CL-TEST::Z)) (COMPLEMENT (FUNCTION CONSP)) (QUOTE (CL-TEST::A (CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D CL-TEST::E) (CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I))))
Expected value:
          ((CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) ((CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) (CL-TEST::Z) CL-TEST::Z) CL-TEST::Z)
Actual value:
          #<Undefined-Function 81D32C77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.4 failed
Form: (CL-TEST::CHECK-NSUBST-IF (QUOTE CL-TEST::B) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))) :KEY (FUNCTION LISTP))
Expected value:
          CL-TEST::B
Actual value:
          #<Undefined-Function 81D42A97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.5 failed
Form: (CL-TEST::CHECK-NSUBST-IF 4 (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X 1))) (QUOTE ((1 3) (1) (1 10 20 30) (1 3 CL-TEST::X CL-TEST::Y))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (CONSP CL-TEST::X) (CAR CL-TEST::X)))))
Expected value:
          (4 4 4 4)
Actual value:
          #<Undefined-Function 81D4DD17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.6 failed
Form: (CL-TEST::CHECK-NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X (QUOTE CL-TEST::B)))) (QUOTE ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C) (CL-TEST::D))) :KEY NIL)
Expected value:
          ((CL-TEST::A) (CL-TEST::A) (CL-TEST::C) (CL-TEST::D))
Actual value:
          #<Undefined-Function 81D5A587> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.7 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81D66637> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.8 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBST-IF (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X (QUOTE CL-TEST::B))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 2 CL-TEST::A CL-TEST::B CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 CL-TEST::A CL-TEST::A CL-TEST::C)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function 81D6F2A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.1 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81D84217> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.2 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81D8D097> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.3 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81D95C37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.4 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81D9E897> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ALLOW-OTHER-KEYS.5 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81DA7717> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.KEYWORDS.6 failed
Form: (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81DB0E17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81DBE2E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81DC9F87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81DD63A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81DE2E27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81DEFDE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81DFCC67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81E09967> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF (QUOTE CL-TEST::A) (FUNCTION NULL) (LIST (QUOTE CL-TEST::A) NIL (QUOTE CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81E170E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.1 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT (QUOTE (CL-TEST::X)) (QUOTE CONSP) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))))
Expected value:
          ((CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) (CL-TEST::X) CL-TEST::X) ((CL-TEST::X) (CL-TEST::X) (CL-TEST::X) (CL-TEST::X) CL-TEST::X) CL-TEST::X)
Actual value:
          #<Undefined-Function 81E21547> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.2 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT (QUOTE CL-TEST::A) (COMPLEMENT (FUNCTION LISTP)) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81E2EE27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.3 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT (QUOTE CL-TEST::C) (FUNCTION IDENTITY) (QUOTE ((100 1) (2 3) (4 3 2 1) (CL-TEST::A CL-TEST::B CL-TEST::C))) :KEY (COMPLEMENT (FUNCTION LISTP)))
Expected value:
          CL-TEST::C
Actual value:
          #<Undefined-Function 81E397E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.4 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT 40 (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X 17)))) (QUOTE ((17) (17 22) (17 22 31) (17 21 34 54))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (CONSP CL-TEST::X) (CAR CL-TEST::X)))))
Expected value:
          (40 40 40 40)
Actual value:
          #<Undefined-Function 81E45347> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.5 failed
Form: (CL-TEST::CHECK-NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X (QUOTE CL-TEST::B))))) (QUOTE ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C) (CL-TEST::D))) :KEY NIL)
Expected value:
          ((CL-TEST::A) (CL-TEST::A) (CL-TEST::C) (CL-TEST::D))
Actual value:
          #<Undefined-Function 81E51F37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.6 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81E5E627> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.7 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSUBST-IF-NOT (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X (QUOTE CL-TEST::B)))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 2 CL-TEST::A CL-TEST::B CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 2 CL-TEST::A CL-TEST::A CL-TEST::C)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function 81E673B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.1 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81E7C967> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.2 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81E85D27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.3 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81E8EE07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.4 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81E97FA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ALLOW-OTHER-KEYS.5 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81EA1367> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.KEYWORDS.6 failed
Form: (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION IDENTITY) NIL :KEY NIL :KEY (CONSTANTLY (QUOTE CL-TEST::B)))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function 81EAAFA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81EB89B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81EC4A17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81ED11F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :FOO NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81EDE037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81EEB3B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81EF85F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81F056B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSUBST-IF-NOT.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSUBST-IF-NOT (QUOTE CL-TEST::A) (FUNCTION NULL) (LIST (QUOTE CL-TEST::A) NIL (QUOTE CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81F131F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.1 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE CL-TEST::A) (QUOTE CL-TEST::A)))
Expected value:
          T
Actual value:
          #<Undefined-Function 81F1DC47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.2 failed
Form: (TREE-EQUAL (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F25BC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.3 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))))
Expected value:
          T
Actual value:
          #<Undefined-Function 81F2D747> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.4 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F38F47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.5 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL 1 2 :TEST (FUNCTION <)))
Expected value:
          T
Actual value:
          #<Undefined-Function 81F42607> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.6 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL 1 2 :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (VALUES (< CL-TEST::X CL-TEST::Y) T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function 81F4A347> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.7 failed
Form: (TREE-EQUAL 1 2 :TEST (FUNCTION >))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F53807> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.8 failed
Form: (TREE-EQUAL (LIST 1) 2 :TEST (CONSTANTLY T))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F5AA87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.9 failed
Form: (TREE-EQUAL (LIST 1) (LIST 2) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (OR (AND (CONSP CL-TEST::X) (CONSP CL-TEST::Y)) (EQL CL-TEST::X CL-TEST::Y)))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F620A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.10 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE (10 20 . 30)) (QUOTE (11 22 . 34)) :TEST (FUNCTION <)))
Expected value:
          T
Actual value:
          #<Undefined-Function 81F6C707> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.11 failed
Form: (LET* ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (CL-TEST::Y (LIST CL-TEST::X CL-TEST::X)) (CL-TEST::Z (LIST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))))) (CL-TEST::NOTNOT-MV (TREE-EQUAL CL-TEST::Y CL-TEST::Z)))
Expected value:
          T
Actual value:
          #<Undefined-Function 81F75DA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.12 failed
Form: (TREE-EQUAL (QUOTE CL-TEST::A) (QUOTE (CL-TEST::A CL-TEST::B)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F82E37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.13 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A)) (QUOTE (CL-TEST::A CL-TEST::B)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F8AC07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.14 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F92AB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.15 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (CL-TEST::Y (VECTOR (QUOTE CL-TEST::A) (QUOTE (QUOTE CL-TEST::B)) (QUOTE CL-TEST::C)))) (TREE-EQUAL CL-TEST::X CL-TEST::Y))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81F9AD47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.16 failed
Form: (LET ((CL-TEST::X (COPY-SEQ "")) (CL-TEST::Y (COPY-SEQ ""))) (TREE-EQUAL CL-TEST::X CL-TEST::Y))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81FA67F7> [Actual value: #<error during printing>

 NIL
 CL-TEST::TREE-EQUAL.TEST-AND-TEST-NOT.1
 CL-TEST::TREE-EQUAL.TEST-AND-TEST-NOT.2
Test CL-TEST::TREE-EQUAL.ALLOW-OTHER-KEYS.1 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :ALLOW-OTHER-KEYS NIL))
Expected value:
          T
Actual value:
          #<Undefined-Function 81FB9E07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ALLOW-OTHER-KEYS.2 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::C)) :ALLOW-OTHER-KEYS NIL :TEST (FUNCTION EQL))
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81FC3F17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ALLOW-OTHER-KEYS.3 failed
Form: (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::Z)) :ALLOW-OTHER-KEYS T :FOO T)
Expected value:
          NIL
Actual value:
          #<Undefined-Function 81FCE127> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ALLOW-OTHER-KEYS.4 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T))
Expected value:
          T
Actual value:
          #<Undefined-Function 81FD8057> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.KEYWORDS.1 failed
Form: (CL-TEST::NOTNOT-MV (TREE-EQUAL (QUOTE (CL-TEST::A . CL-TEST::B)) (QUOTE (CL-TEST::B . CL-TEST::A)) :TEST (COMPLEMENT (FUNCTION EQL)) :TEST (FUNCTION EQL)))
Expected value:
          T
Actual value:
          #<Undefined-Function 81FE2F67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function 81FF18C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function C0082DF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A CL-TEST::B)) (GENSYM) T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function C170DE37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A CL-TEST::B)) (GENSYM) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function C171C647> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A CL-TEST::B)) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function C172AA17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TREE-EQUAL.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (TREE-EQUAL (QUOTE (CL-TEST::A CL-TEST::B)) (QUOTE (CL-TEST::A CL-TEST::B)) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y CL-TEST::Z) (EQ CL-TEST::X CL-TEST::Y)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function C1738B27> [Actual value: #<error during printing>

 NIL
 CL-TEST::COPY-LIST.1
Test CL-TEST::COPY-LIST.2 failed
Form: (CL-TEST::CHECK-COPY-LIST (QUOTE (CL-TEST::A . CL-TEST::B)))
Expected value:
          (CL-TEST::A . CL-TEST::B)
Actual value:
          #<Type-Error C1745A67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-LIST.3 failed
Form: (CL-TEST::CHECK-COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C . CL-TEST::D)))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C . CL-TEST::D)
Actual value:
          #<Type-Error C174DC57> [Actual value: #<error during printing>

 NIL
 CL-TEST::COPY-LIST.4
 CL-TEST::COPY-LIST.FOLD.1
Test CL-TEST::COPY-LIST.FOLD.2 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (COPY-LIST (QUOTE (CL-TEST::A . CL-TEST::B))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Type-Error C175BD97> [Actual value: #<error during printing>

 NIL
 CL-TEST::COPY-LIST.ERROR.1
Test CL-TEST::COPY-LIST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-LIST NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::LIST.1
 CL-TEST::LIST.2
 CL-TEST::LIST.ORDER.1
 CL-TEST::LIST.ORDER.2
 CL-TEST::LIST.ORDER.3
 CL-TEST::LIST.FOLD.1
 CL-TEST::LIST.FOLD.2
 CL-TEST::LIST.FOLD.3
 CL-TEST::LIST*.1
 CL-TEST::LIST*.2
 CL-TEST::LIST-LIST*.1
 CL-TEST::LIST*.3
 CL-TEST::LIST*.ORDER.1
 CL-TEST::LIST*.ORDER.2
 CL-TEST::LIST*.FOLD.1
 CL-TEST::LIST*.FOLD.2
 CL-TEST::LIST*.FOLD.3
 CL-TEST::LIST-LENGTH-NIL
 CL-TEST::LIST-LENGTH-LIST
 CL-TEST::LIST-LENGTH-CIRCULAR-LIST
 CL-TEST::LIST-LENGTH.ORDER.1
Test CL-TEST::LIST-LENGTH.4 failed
Form: (LIST-LENGTH (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))
Expected value:
          3
Actual value:
          #<Undefined-Function C17C25B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LIST-LENGTH.ERROR.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN (LIST (QUOTE CL-TEST::A) 1 1.0 #\w (MAKE-ARRAY (QUOTE (10))) (QUOTE (CL-TEST::A CL-TEST::B . CL-TEST::C)) (SYMBOL-PACKAGE (QUOTE CONS))) COUNT (NOT (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X)) (LIST-LENGTH CL-TEST::X))))))
Expected value:
          0
Actual value:
          #<Simple-Error C17CED27> [Actual value: #<error during printing>

 NIL
 CL-TEST::LIST-LENGTH.ERROR.2
 CL-TEST::LIST-LENGTH.ERROR.3
 CL-TEST::LIST-LENGTH.ERROR.4
 CL-TEST::LIST-LENGTH.ERROR.5
 CL-TEST::LIST-LENGTH-SYMBOL
Test CL-TEST::LIST-LENGTH-DOTTED-LIST failed
Form: (CL-TEST:SIGNALS-ERROR (LIST-LENGTH (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D . CL-TEST::E)))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function C1839EA7> [Actual value: #<error during printing>

 NIL
 CL-TEST::LISTP-NIL
 CL-TEST::LISTP-SYMBOL
 CL-TEST::LISTP-SINGLETON-LIST
 CL-TEST::LISTP-CIRCULAR-LIST
 CL-TEST::LISTP-LONGER-LIST
 CL-TEST::LISTP-UNIVERSE
 CL-TEST::LISTP.ORDER.1
 CL-TEST::LISTP.ERROR.1
 CL-TEST::LISTP.ERROR.2
 CL-TEST::MAKE-LIST-EMPTY.1
 CL-TEST::MAKE-LIST-EMPTY.2
 CL-TEST::MAKE-LIST-NO-INITIAL-ELEMENT
Test CL-TEST::MAKE-LIST-WITH-INITIAL-ELEMENT failed
Form: (MAKE-LIST 6 :INITIAL-ELEMENT (QUOTE CL-TEST::A))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          (CL-TEST::A NIL NIL NIL NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.1 failed
Form: (MAKE-LIST 5 :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::A))
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error C1892217> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.2 failed
Form: (MAKE-LIST 5 :BAR NIL :ALLOW-OTHER-KEYS T)
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error C189AFF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.3 failed
Form: (MAKE-LIST 5 :ALLOW-OTHER-KEYS NIL)
Expected      (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error C18A3597> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.4 failed
Form: (MAKE-LIST 5 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE CL-TEST::BAD) T)
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error C18ABBF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ALLOW-OTHER-KEYS.5 failed
Form: (MAKE-LIST 5 :ALLOW-OTHER-KEYS T)
Expected value:
          (NIL NIL NIL NIL NIL)
Actual value:
          #<Simple-Error C18B4F97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST-REPEATED-KEYWORD failed
Form: (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE CL-TEST::A) :INITIAL-ELEMENT (QUOTE CL-TEST::B))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          (CL-TEST::A NIL NIL NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (MAKE-LIST (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 5) :INITIAL-ELEMENT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::A))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
          2
          1
          2
Actual value:
          (CL-TEST::A NIL NIL NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (MAKE-LIST (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 5) :INITIAL-ELEMENT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) :INITIAL-ELEMENT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (QUOTE CL-TEST::B))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
          3
          1
          2
          3
Actual value:
          (CL-TEST::A NIL NIL NIL NIL) [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-LIST.FOLD.1
 CL-TEST::MAKE-LIST.FOLD.2
 CL-TEST::MAKE-LIST.ERROR.1
 CL-TEST::MAKE-LIST.ERROR.3
Test CL-TEST::MAKE-LIST.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-LIST 5 :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C193D257> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-LIST 5 :INITIAL-ELEMENT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C19491A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-LIST 5 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C19553A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-LIST.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-LIST 5 :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error C1961587> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-LIST.ERROR.8
 CL-TEST::PUSH.1
 CL-TEST::PUSH.2
Test CL-TEST::PUSH.3 failed
Form: (LET ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A))))) (PUSH CL-TEST::X CL-TEST::X) (AND (CL-TEST::EQT (CAR CL-TEST::X) (CDR CL-TEST::X)) CL-TEST::X))
Expected value:
          ((CL-TEST::A) CL-TEST::A)
Actual value:
          #<Undefined-Function C1979557> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSH.4 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X NIL)) (VALUES (PUSH (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M 1)) CL-TEST::X) CL-TEST::X)))
Expected value:
          (1)
          (1)
Actual value:
          #<Simple-Error C19870D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSH.5 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X NIL)) (VALUES (PUSH 1 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X))) CL-TEST::X)))
Expected value:
          (1)
          (1)
Actual value:
          #<Simple-Error C1993BF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSH.ORDER.1 failed
Form: (LET ((CL-TEST::X (LIST NIL)) (CL-TEST::I 0) CL-TEST::A CL-TEST::B) (VALUES (PUSH (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) (QUOTE CL-TEST::Z)) (CAR (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) CL-TEST::X))) CL-TEST::X CL-TEST::I CL-TEST::A CL-TEST::B))
Expected value:
          (CL-TEST::Z)
          ((CL-TEST::Z))
          2
          1
          2
Actual value:
          #<Simple-Error C19A2FB7> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSH.ORDER.2
 CL-TEST::PUSH.ORDER.3
 CL-TEST::PUSH.ERROR.1
Test CL-TEST::POP.1 failed
Form: (LET ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))) (LET ((CL-TEST::Y (POP CL-TEST::X))) (LIST CL-TEST::X CL-TEST::Y)))
Expected value:
          ((CL-TEST::B CL-TEST::C) CL-TEST::A)
Actual value:
          #<Undefined-Function C19D42A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::POP.2 failed
Form: (LET ((CL-TEST::X NIL)) (LET ((CL-TEST::Y (POP CL-TEST::X))) (LIST CL-TEST::X CL-TEST::Y)))
Expected value:
          (NIL NIL)
Actual value:
          #<Simple-Error C19E0677> [Actual value: #<error during printing>

 NIL
Test CL-TEST::POP.3 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))) (VALUES (POP (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X))) CL-TEST::X)))
Expected value:
          CL-TEST::A
          (CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error C19EB1E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::POP.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) (CL-TEST::A (VECTOR (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))))) (POP (AREF CL-TEST::A (PROGN (INCF CL-TEST::I) 0))) (VALUES CL-TEST::A CL-TEST::I))
Expected value:
          #((CL-TEST::B CL-TEST::C))
          1
Actual value:
          #<Simple-Error C19FB2F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSH-AND-POP failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B)))) (CL-TEST::Y CL-TEST::X)) (PUSH (QUOTE CL-TEST::C) CL-TEST::X) (AND (CL-TEST::EQT (CDR CL-TEST::X) CL-TEST::Y) (POP CL-TEST::X)))
Expected value:
          CL-TEST::C
Actual value:
          #<Undefined-Function C1A06F67> [Actual value: #<error during printing>

 NIL
 CL-TEST::POP.ERROR.1
 CL-TEST::PUSHNEW.1
Test CL-TEST::PUSHNEW.2 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::K CL-TEST::F CL-TEST::Q)))) (CL-TEST::Y (PUSHNEW (QUOTE CL-TEST::A) CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          (CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::A CL-TEST::K CL-TEST::F CL-TEST::Q)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.3 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (1 2 3 4 5 6 7 8)))) (CL-TEST::Y (PUSHNEW 7 CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          (1 2 3 4 5 6 7 8)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.4 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::C CL-TEST::D))) CL-TEST::X :TEST (QUOTE EQUAL)))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          ((CL-TEST::C CL-TEST::D) (CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.5 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B))) CL-TEST::X :TEST (QUOTE EQUAL)))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          ((CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.6 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::E) (CL-TEST::D CL-TEST::F) (CL-TEST::G CL-TEST::H))))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::D CL-TEST::I))) CL-TEST::X :KEY (FUNCTION CAR))) (CL-TEST::Z (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::Z 10))) CL-TEST::X :KEY (FUNCTION CAR)))) (AND (CL-TEST::EQT CL-TEST::Y (CDR CL-TEST::Z)) (CL-TEST::EQT CL-TEST::Z CL-TEST::X) CL-TEST::X))
Expected value:
          ((CL-TEST::Z 10) (CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::E) (CL-TEST::D CL-TEST::F) (CL-TEST::G CL-TEST::H))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.7 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) CL-TEST::X :KEY (FUNCTION CAR) :TEST (FUNCTION STRING=))) (CL-TEST::Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) CL-TEST::X :KEY (FUNCTION CAR) :TEST (FUNCTION STRING=)))) (AND (CL-TEST::EQT CL-TEST::Y (CDR CL-TEST::X)) (CL-TEST::EQT CL-TEST::X CL-TEST::Z) CL-TEST::X))
Expected value:
          (("xyz" 10) ("abc" 1) ("def" 2) ("ghi" 3))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.8 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) CL-TEST::X :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)))) (CL-TEST::Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) CL-TEST::X :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))))) (AND (CL-TEST::EQT CL-TEST::Y (CDR CL-TEST::X)) (CL-TEST::EQT CL-TEST::X CL-TEST::Z) CL-TEST::X))
Expected value:
          (("xyz" 10) ("abc" 1) ("def" 2) ("ghi" 3))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.9 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (("abc" 1) ("def" 2) ("ghi" 3))))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE ("def" 4))) CL-TEST::X :KEY (QUOTE CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)))) (CL-TEST::Z (PUSHNEW (COPY-TREE (QUOTE ("xyz" 10))) CL-TEST::X :KEY (QUOTE CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))))) (AND (CL-TEST::EQT CL-TEST::Y (CDR CL-TEST::X)) (CL-TEST::EQT CL-TEST::X CL-TEST::Z) CL-TEST::X))
Expected value:
          (("xyz" 10) ("abc" 1) ("def" 2) ("ghi" 3))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.10
Test CL-TEST::PUSHNEW.11 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::Y (PUSHNEW (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B))) CL-TEST::X :TEST (QUOTE EQUAL) :KEY NIL))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) CL-TEST::X))
Expected value:
          ((CL-TEST::A CL-TEST::B) 1 "and" CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.12
Test CL-TEST::PUSHNEW.13 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z (CL-TEST::D (QUOTE (CL-TEST::B CL-TEST::C)))) (VALUES (PUSHNEW (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) CL-TEST::D :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST-NOT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL)))) CL-TEST::D CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.14 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z (CL-TEST::D (QUOTE (CL-TEST::B CL-TEST::C)))) (VALUES (PUSHNEW (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) CL-TEST::D :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::D CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          3
          1
          3
          2
Actual value:
          (CL-TEST::A CL-TEST::B CL-TEST::C) [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.15 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z (CL-TEST::D (QUOTE (CL-TEST::B CL-TEST::C)))) (VALUES (PUSHNEW (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) CL-TEST::D :TEST-NOT (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::D CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          3
          1
          3
          2
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.16
Test CL-TEST::PUSHNEW.17 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 CL-TEST::X :TEST (FUNCTION >)) CL-TEST::X))
Expected value:
          (1 2 3)
          (1 2 3)
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.18 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 CL-TEST::X :TEST-NOT (FUNCTION >)) CL-TEST::X))
Expected value:
          (10 1 2 3)
          (10 1 2 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.19 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3)))) (VALUES (PUSHNEW 10 CL-TEST::X :TEST-NOT (FUNCTION <=)) CL-TEST::X))
Expected value:
          (1 2 3)
          (1 2 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X NIL)) (VALUES (PUSHNEW (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M 1)) CL-TEST::X) CL-TEST::X)))
Expected value:
          (1)
          (1)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X NIL)) (VALUES (PUSHNEW 1 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X))) CL-TEST::X)))
Expected value:
          (1)
          (1)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B)))) (VALUES (PUSHNEW 1 CL-TEST::X :TEST (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (FUNCTION EQL)))) CL-TEST::X)))
Expected value:
          (1 CL-TEST::A CL-TEST::B)
          (1 CL-TEST::A CL-TEST::B)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.23 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X (QUOTE (1)))) (VALUES (PUSHNEW 1 CL-TEST::X :TEST-NOT (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (FUNCTION EQL)))) CL-TEST::X)))
Expected value:
          (1 1)
          (1 1)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::PUSHNEW.24 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X (QUOTE (3)))) (VALUES (PUSHNEW 1 CL-TEST::X :KEY (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (FUNCTION EVENP)))) CL-TEST::X)))
Expected value:
          (3)
          (3)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.TEST-AND-TEST-NOT.1
 CL-TEST::PUSHNEW.TEST-AND-TEST-NOT.2
 CL-TEST::PUSHNEW.ORDER.1
 CL-TEST::PUSHNEW.ORDER.2
 CL-TEST::PUSHNEW.ORDER.3
 CL-TEST::PUSHNEW.ERROR.1
Test CL-TEST::PUSHNEW.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B)))) (PUSHNEW (QUOTE CL-TEST::C) CL-TEST::X :TEST-NOT (FUNCTION IDENTITY))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSHNEW.ERROR.3
 CL-TEST::PUSHNEW.ERROR.4
 CL-TEST::ADJOIN.1
 CL-TEST::ADJOIN.2
 CL-TEST::ADJOIN.3
 CL-TEST::ADJOIN.4
 CL-TEST::ADJOIN.5
 CL-TEST::ADJOIN.6
 CL-TEST::ADJOIN.7
 CL-TEST::ADJOIN.8
 CL-TEST::ADJOIN.9
 CL-TEST::ADJOIN.10
 CL-TEST::ADJOIN.11
Test CL-TEST::ADJOIN.12 failed
Form: (ADJOIN (COPY-SEQ "aaa") (QUOTE (CL-TEST::AAA "AAA" "aaa" #\a)) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)))
Expected value:
          (CL-TEST::AAA "AAA" "aaa" #\a)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.14
 CL-TEST::ADJOIN.15
 CL-TEST::ADJOIN.16
 CL-TEST::ADJOIN.17
Test CL-TEST::ADJOIN.18 failed
Form: (ADJOIN (COPY-SEQ "aaa") (QUOTE (CL-TEST::AAA "AAA" "aaa" #\a)) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)) :KEY NIL)
Expected value:
          (CL-TEST::AAA "AAA" "aaa" #\a)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.19
 CL-TEST::ADJOIN.20
Test CL-TEST::ADJOIN.21 failed
Form: (ADJOIN 10 (QUOTE (1 2 3)) :TEST-NOT (FUNCTION >))
Expected value:
          (10 1 2 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.22 failed
Form: (ADJOIN 10 (QUOTE (1 2 3)) :TEST-NOT (FUNCTION <))
Expected value:
          (1 2 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.24 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (VALUES (ADJOIN (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE CL-TEST::A))) (QUOTE (CL-TEST::B CL-TEST::C))) (ADJOIN (QUOTE CL-TEST::A) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE (CL-TEST::B CL-TEST::C))))) (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :TEST)) (QUOTE EQL)) (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::A CL-TEST::A)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :TEST-NOT)) (QUOTE EQL)) (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :TEST (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE EQL)))) (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :TEST (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (FUNCTION EQL)))) (ADJOIN 1 (QUOTE (1 2 3)) :KEY (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE IDENTITY))))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::A CL-TEST::A)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          (1 2 3)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.TEST-AND-TEST-NOT.1
 CL-TEST::ADJOIN.TEST-AND-TEST-NOT.2
 CL-TEST::ADJOIN.ORDER.1
Test CL-TEST::ADJOIN.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::P) (VALUES (ADJOIN (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (QUOTE CL-TEST::A)) (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE (CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E))) :TEST-NOT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF CL-TEST::P (INCF CL-TEST::I)) NIL)) CL-TEST::I CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::P))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)
          5
          1
          2
          3
          4
          5
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.FOLD.1
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.1 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.2 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS T :FOO T)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.3 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.4 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ALLOW-OTHER-KEYS.5 failed
Form: (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE CL-TEST::BAD) T)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.REPEAT-KEY
 CL-TEST::ADJOIN.ERROR.1
 CL-TEST::ADJOIN.ERROR.2
Test CL-TEST::ADJOIN.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument 1. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJOIN.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.ERROR.7
Test CL-TEST::ADJOIN.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJOIN (QUOTE CL-TEST::A) (QUOTE (CL-TEST::B CL-TEST::C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJOIN.ERROR.9
 CL-TEST::ADJOIN.ERROR.10
Test CL-TEST::NTH.1 failed
Form: (CL-TEST::NTH-1-BODY (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 2000 CL-TEST::COLLECT (* 4 CL-TEST::I)))
Expected value:
          0
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::NTH.2 failed
Form: (LET ((CL-TEST::X (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 2000 CL-TEST::COLLECT CL-TEST::I))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 1999 DO (SETF (NTH CL-TEST::I CL-TEST::X) (- 1999 CL-TEST::I))) (CL-TEST::EQUALT CL-TEST::X (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1999 CL-TEST::DOWNTO 0 CL-TEST::COLLECT CL-TEST::I)))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::NTH.ORDER.1
 CL-TEST::NTH.ORDER.2
 CL-TEST::NTH.ERROR.1
 CL-TEST::NTH.ERROR.2
 CL-TEST::NTH.ERROR.3
 CL-TEST::NTH.ERROR.4
 CL-TEST::ENDP-NIL
 CL-TEST::ENDP-CONS
 CL-TEST::ENDP-SINGLETON-LIST
 CL-TEST::ENDP.ORDER.1Space
 CL-TEST::ENDP.ERROR.1
 CL-TEST::ENDP.ERROR.4
 CL-TEST::ENDP.ERROR.5
 CL-TEST::ENDP.ERROR.6
 CL-TEST::NCONC.1
Test CL-TEST::NCONC.2 failed
Form: (NCONC (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::NCONC.4
 CL-TEST::NCONC.5
 CL-TEST::NCONC.6
Test CL-TEST::NCONC.7 failed
Form: (NCONC (COPY-TREE (QUOTE (CL-TEST::A . CL-TEST::B))) (COPY-TREE (QUOTE (CL-TEST::C . CL-TEST::D))) (COPY-TREE (QUOTE (CL-TEST::E . CL-TEST::F))) (QUOTE CL-TEST::FOO))
Expected value:
          (CL-TEST::A CL-TEST::C CL-TEST::E . CL-TEST::FOO)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::NCONC.ORDER.1
 CL-TEST::NCONC.ORDER.2
 CL-TEST::APPEND.1
 CL-TEST::APPEND.2
 CL-TEST::APPEND.3
 CL-TEST::APPEND.4
 CL-TEST::APPEND.5
Test CL-TEST::APPEND.6 failed
Form: (CL-TEST::APPEND-6-BODY)
Expected value:
          0
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::APPEND.7
Test CL-TEST::APPEND.8 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (APPEND (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::APPEND.9 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (APPEND (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (LIST 1 2 3))) (LIST 4 5 6)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::APPEND.10 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (APPEND (LIST 1 2 3) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (LIST 4 5 6)))))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::APPEND.ORDER.1
 CL-TEST::APPEND.ORDER.2
 CL-TEST::APPEND.FOLD.1
 CL-TEST::APPEND.FOLD.2
 CL-TEST::APPEND.ERROR.1
 CL-TEST::APPEND.ERROR.2
 CL-TEST::REVAPPEND.1
Test CL-TEST::REVAPPEND.2 failed
Form: (REVAPPEND (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E))) 10)
Expected value:
          (CL-TEST::E CL-TEST::D CL-TEST::C CL-TEST::B CL-TEST::A . 10)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REVAPPEND.3 failed
Form: (REVAPPEND NIL (QUOTE CL-TEST::A))
Expected value:
          CL-TEST::A
Actual value:
          #<Type-Error C1EB0A57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REVAPPEND.4 failed
Form: (REVAPPEND (COPY-TREE (QUOTE (CL-TEST::A (CL-TEST::B CL-TEST::C) CL-TEST::D))) NIL)
Expected value:
          (CL-TEST::D (CL-TEST::B CL-TEST::C) CL-TEST::A)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::REVAPPEND.ORDER.1
 CL-TEST::REVAPPEND.FOLD.1
 CL-TEST::REVAPPEND.FOLD.2
 CL-TEST::REVAPPEND.ERROR.1
 CL-TEST::REVAPPEND.ERROR.2
 CL-TEST::REVAPPEND.ERROR.3
 CL-TEST::REVAPPEND.ERROR.4
Test CL-TEST::NRECONC.1 failed
Form: (LET* ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (CL-TEST::Y (COPY-TREE (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::RESULT (NRECONC CL-TEST::X CL-TEST::Y))) (AND (EQUAL CL-TEST::Y (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F))) CL-TEST::RESULT))
Expected value:
          (CL-TEST::C CL-TEST::B CL-TEST::A CL-TEST::D CL-TEST::E CL-TEST::F)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NRECONC.2 failed
Form: (NRECONC NIL (QUOTE CL-TEST::A))
Expected value:
          CL-TEST::A
Actual value:
          #<Type-Error C1F00097> [Actual value: #<error during printing>

 NIL
 CL-TEST::NRECONC.ORDER.1
 CL-TEST::NRECONC.ERROR.1
 CL-TEST::NRECONC.ERROR.2
 CL-TEST::NRECONC.ERROR.3
 CL-TEST::NRECONC.ERROR.4
 CL-TEST::BUTLAST.1
 CL-TEST::BUTLAST.2
 CL-TEST::BUTLAST.3
 CL-TEST::BUTLAST.4
Test CL-TEST::BUTLAST.5 failed
Form: (BUTLAST (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C . CL-TEST::D))) 1)
Expected value:
          (CL-TEST::A CL-TEST::B)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::BUTLAST.6
 CL-TEST::BUTLAST.7
 CL-TEST::BUTLAST.8
Test CL-TEST::BUTLAST.9 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (VALUES (BUTLAST (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))))) (BUTLAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M 2)))))
Expected value:
          (CL-TEST::A CL-TEST::B)
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::BUTLAST.ORDER.1
 CL-TEST::BUTLAST.ORDER.2
 CL-TEST::BUTLAST.FOLD.1
 CL-TEST::BUTLAST.FOLD.2
 CL-TEST::BUTLAST.FOLD.3
Test CL-TEST::BUTLAST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BUTLAST (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (QUOTE CL-TEST::A)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BUTLAST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BUTLAST (QUOTE CL-TEST::A) 0) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::BUTLAST.ERROR.3
 CL-TEST::BUTLAST.ERROR.4
Test CL-TEST::BUTLAST.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (BUTLAST (QUOTE CL-TEST::A) 0) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.1 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E)))) (LET ((CL-TEST::Y (CDR CL-TEST::X)) (CL-TEST::Z (CDDR CL-TEST::X))) (LET ((CL-TEST::RESULT (NBUTLAST CL-TEST::X 2))) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::RESULT) (CL-TEST::EQT (CDR CL-TEST::X) CL-TEST::Y) (CL-TEST::EQT (CDDR CL-TEST::X) CL-TEST::Z) CL-TEST::RESULT))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.2 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E)))) (LET ((CL-TEST::RESULT (NBUTLAST CL-TEST::X 5))) (LIST CL-TEST::X CL-TEST::RESULT)))
Expected value:
          ((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E) NIL)
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.3 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E)))) (LET ((CL-TEST::RESULT (NBUTLAST CL-TEST::X 500))) (LIST CL-TEST::X CL-TEST::RESULT)))
Expected value:
          ((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E) NIL)
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.4 failed
Form: (LET ((CL-TEST::X (LIST* (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))) (LET ((CL-TEST::RESULT (NBUTLAST CL-TEST::X 1))) (AND (CL-TEST::EQT CL-TEST::RESULT CL-TEST::X) CL-TEST::RESULT)))
Expected value:
          (CL-TEST::A CL-TEST::B)
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.5 failed
Form: (NBUTLAST NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.6 failed
Form: (NBUTLAST (LIST (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.7 failed
Form: (NBUTLAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) (1+ MOST-POSITIVE-FIXNUM))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.8 failed
Form: (NBUTLAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) MOST-POSITIVE-FIXNUM)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.9 failed
Form: (NBUTLAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) (1- MOST-POSITIVE-FIXNUM))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (NBUTLAST (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) 2)) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          2
          1
          2
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ORDER.2 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (NBUTLAST (PROGN (INCF CL-TEST::I) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))) CL-TEST::I))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          1
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::X (LIST* (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))) (NBUTLAST CL-TEST::X (QUOTE CL-TEST::A))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NBUTLAST (QUOTE CL-TEST::A) 10) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NBUTLAST 2 10) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NBUTLAST #\w 10) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NBUTLAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)) -3) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NBUTLAST (LIST (QUOTE CL-TEST::A)) 20.0) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NBUTLAST (LIST (QUOTE CL-TEST::A)) -100.0) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NBUTLAST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NBUTLAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) 3 3) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NBUTLAST.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (NBUTLAST (QUOTE CL-TEST::A) 10) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NBUTLAST> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAST.1
Test CL-TEST::LAST.2 failed
Form: (LAST (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B))))
Expected value:
          (CL-TEST::B)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.3 failed
Form: (LAST (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B . CL-TEST::C))))
Expected value:
          (CL-TEST::B . CL-TEST::C)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.4 failed
Form: (LAST (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) 0)
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.5 failed
Form: (LAST (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) 1)
Expected value:
          (CL-TEST::D)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.6 failed
Form: (LAST (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) 2)
Expected value:
          (CL-TEST::C CL-TEST::D)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.7 failed
Form: (LAST (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) 5)
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.8 failed
Form: (LAST (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) 0)
Expected value:
          CL-TEST::B
Actual value:
          #<System.Internals::Invalid-Arguments 817D7C07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.9 failed
Form: (LAST (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) 1)
Expected value:
          (CL-TEST::A . CL-TEST::B)
Actual value:
          #<System.Internals::Invalid-Arguments 818069C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.10 failed
Form: (LAST (CONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) 2)
Expected value:
          (CL-TEST::A . CL-TEST::B)
Actual value:
          #<System.Internals::Invalid-Arguments 8180F2E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.11 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))) (CL-TEST::EQT (LAST CL-TEST::X (1+ MOST-POSITIVE-FIXNUM)) CL-TEST::X))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81817F77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.12 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C . CL-TEST::D)))) (CL-TEST::EQT (LAST CL-TEST::X (1+ MOST-POSITIVE-FIXNUM)) CL-TEST::X))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818221E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.13 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C . CL-TEST::D)))) (CL-TEST::EQT (LAST CL-TEST::X MOST-POSITIVE-FIXNUM) CL-TEST::X))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 8182C817> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.14 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C . CL-TEST::D)))) (CL-TEST::EQT (LAST CL-TEST::X (1- MOST-POSITIVE-FIXNUM)) CL-TEST::X))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81836D67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (LAST (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) (SETF CL-TEST::Y (INCF CL-TEST::I))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (CL-TEST::C CL-TEST::D)
          2
          1
          2
Actual value:
          #<System.Internals::Invalid-Arguments 81844397> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAST.ORDER.2
Test CL-TEST::LAST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (LAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) -1) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818597A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (LAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (QUOTE CL-TEST::A)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818673C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (LAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) 10.0) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81875627> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) -10.0) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81883377> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LAST.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (LAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) #\w) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81891127> [Actual value: #<error during printing>

 NIL
 CL-TEST::LAST.ERROR.6
 CL-TEST::LAST.ERROR.7
Test CL-TEST::LAST.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (LAST (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (QUOTE CL-TEST::A)) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818B1657> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LDIFF.1 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X))) (LET ((CL-TEST::RESULT (LDIFF CL-TEST::X (CDDDR CL-TEST::X)))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) CL-TEST::RESULT)))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LDIFF.2 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X))) (LET ((CL-TEST::RESULT (LDIFF CL-TEST::X (QUOTE CL-TEST::A)))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (ZEROP (LOOP CL-TEST::FOR CL-TEST::A CL-TEST::ON CL-TEST::X AND CL-TEST::B CL-TEST::ON CL-TEST::RESULT COUNT (CL-TEST::EQT CL-TEST::A CL-TEST::B))) CL-TEST::RESULT)))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::LDIFF.3 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E . CL-TEST::F)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X))) (LET ((CL-TEST::RESULT (LDIFF CL-TEST::X (QUOTE CL-TEST::A)))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) CL-TEST::RESULT)))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E . CL-TEST::F)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::LDIFF.4
 CL-TEST::LDIFF.5
 CL-TEST::LDIFF.6
 CL-TEST::LDIFF.7
Test CL-TEST::LDIFF.8 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))) (LET ((CL-TEST::RESULT (LDIFF CL-TEST::X (QUOTE (CL-TEST::E))))) (AND (EQUAL CL-TEST::X CL-TEST::RESULT) (LOOP CL-TEST::FOR CL-TEST::C1 CL-TEST::ON CL-TEST::X CL-TEST::FOR CL-TEST::C2 CL-TEST::ON CL-TEST::RESULT COUNT (CL-TEST::EQT CL-TEST::C1 CL-TEST::C2)))))
Expected value:
          0
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::LDIFF.ORDER.1
 CL-TEST::LDIFF.FOLD.1
 CL-TEST::LDIFF.FOLD.2
 CL-TEST::LDIFF.ERROR.1
Test CL-TEST::LDIFF.ERROR.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (LDIFF CL-TEST::X (QUOTE CL-TEST::A)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::LDIFF.ERROR.3
 CL-TEST::LDIFF.ERROR.4
 CL-TEST::LDIFF.ERROR.5
 CL-TEST::LDIFF.ERROR.6
 CL-TEST::LDIFF.ERROR.7
 CL-TEST::LDIFF.ERROR.8
Test CL-TEST::TAILP.1 failed
Form: (LET ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E . CL-TEST::F))))) (AND (TAILP CL-TEST::X CL-TEST::X) (TAILP (CDR CL-TEST::X) CL-TEST::X) (TAILP (CDDR CL-TEST::X) CL-TEST::X) (TAILP (CDDDR CL-TEST::X) CL-TEST::X) (TAILP (CDDDDR CL-TEST::X) CL-TEST::X) T))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TAILP.2 failed
Form: (CL-TEST::NOTNOT-MV (TAILP (QUOTE CL-TEST::E) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D . CL-TEST::E)))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::TAILP.3 failed
Form: (TAILP (QUOTE CL-TEST::Z) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D . CL-TEST::E))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::TAILP.4
 CL-TEST::TAILP.5
 CL-TEST::TAILP.ERROR.5
 CL-TEST::TAILP.ERROR.6
 CL-TEST::TAILP.ERROR.7
 CL-TEST::TAILP.6
 CL-TEST::TAILP.ORDER.1Space
 CL-TEST::NTHCDR.ERROR.1
Test CL-TEST::NTHCDR.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NTHCDR -10 (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::NTHCDR.ERROR.7
 CL-TEST::NTHCDR.ERROR.8
 CL-TEST::NTHCDR.ERROR.9
 CL-TEST::NTHCDR.ERROR.10
Test CL-TEST::NTHCDR.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (NTHCDR (QUOTE CL-TEST::A) (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NTHCDR.1 failed
Form: (NTHCDR 0 (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D . CL-TEST::E))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D . CL-TEST::E)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NTHCDR.2 failed
Form: (NTHCDR 1 (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))
Expected value:
          (CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::NTHCDR.3
 CL-TEST::NTHCDR.4
 CL-TEST::NTHCDR.5
 CL-TEST::NTHCDR.ORDER.1
 CL-TEST::REST.1
 CL-TEST::REST.ORDER.1
 CL-TEST::REST.ERROR.1
 CL-TEST::REST.ERROR.2
Test CL-TEST::MEMBER.1 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER (QUOTE CL-TEST::C) CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.2 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER (QUOTE CL-TEST::E) CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDDDDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.3 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER 4 CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDDDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.4 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE (2 4 6 8 10 12)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER 9 CL-TEST::X :KEY (FUNCTION 1+)))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDDDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.5 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F) (CL-TEST::G CL-TEST::H))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER (QUOTE (CL-TEST::C CL-TEST::D)) CL-TEST::X :TEST (FUNCTION EQUAL)))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.6 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F) (CL-TEST::G CL-TEST::H))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER (QUOTE CL-TEST::C) CL-TEST::X :KEY (FUNCTION CAR)))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.7 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F) (CL-TEST::G CL-TEST::H))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER (QUOTE CL-TEST::C) CL-TEST::X :KEY (FUNCTION CAR) :TEST (FUNCTION EQ)))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.8 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F) (CL-TEST::G CL-TEST::H))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER (QUOTE CL-TEST::C) CL-TEST::X :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQ))))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.9 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F) (CL-TEST::G CL-TEST::H))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER (QUOTE CL-TEST::C) CL-TEST::X :KEY (FUNCTION CAR) :TEST (FUNCTION EQL)))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.10 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F) (CL-TEST::G CL-TEST::H))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MEMBER (LIST (QUOTE CL-TEST::D)) CL-TEST::X :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)))) (AND (CL-TEST::EQT CL-TEST::RESULT (CDR CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.11 failed
Form: (MEMBER (COPY-SEQ "cc") (COPY-TREE (QUOTE ("aa" "bb" "cc" "dd" "ee"))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.12 failed
Form: (MEMBER 1 (COPY-TREE (QUOTE (3 4 1 31 423))))
Expected value:
          (1 31 423)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.13 failed
Form: (MEMBER (COPY-SEQ "cc") (COPY-TREE (QUOTE ("aa" "bb" "cc" "dd" "ee"))) :TEST (FUNCTION EQUAL))
Expected value:
          ("cc" "dd" "ee")
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::MEMBER.14
 CL-TEST::MEMBER.15
 CL-TEST::MEMBER.16
 CL-TEST::MEMBER.16-A
 CL-TEST::MEMBER.17
 CL-TEST::MEMBER.18
 CL-TEST::MEMBER.19
 CL-TEST::MEMBER.20
Test CL-TEST::MEMBER.21 failed
Form: (MEMBER 10 (QUOTE (1 2 3 4 10 11 14 18)) :TEST-NOT (FUNCTION >=))
Expected value:
          (11 14 18)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::MEMBER.TEST-AND-TEST-NOT.1
 CL-TEST::MEMBER.TEST-AND-TEST-NOT.2
 CL-TEST::MEMBER.ORDER.1
 CL-TEST::MEMBER.ORDER.2
 CL-TEST::MEMBER.ORDER.3
 CL-TEST::MEMBER.ORDER.4
 CL-TEST::MEMBER.ORDER.5
Test CL-TEST::MEMBER.ALLOW-OTHER-KEYS.1 failed
Form: (MEMBER (QUOTE CL-TEST::B) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.ALLOW-OTHER-KEYS.2 failed
Form: (MEMBER (QUOTE CL-TEST::B) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.ALLOW-OTHER-KEYS.3 failed
Form: (MEMBER (QUOTE CL-TEST::B) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.ALLOW-OTHER-KEYS.4 failed
Form: (MEMBER (QUOTE CL-TEST::B) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.ALLOW-OTHER-KEYS.5 failed
Form: (MEMBER (QUOTE CL-TEST::B) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :ALLOW-OTHER-KEYS 17 :ALLOW-OTHER-KEYS NIL (QUOTE #:X) T)
Expected value:
          (CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::MEMBER.KEYWORDS.6Space
 CL-TEST::MEMBER.ERROR.1
 CL-TEST::MEMBER.ERROR.2
 CL-TEST::MEMBER.ERROR.3
 CL-TEST::MEMBER.ERROR.4
 CL-TEST::MEMBER.ERROR.5
 CL-TEST::MEMBER.ERROR.6
 CL-TEST::MEMBER.ERROR.7
 CL-TEST::MEMBER.ERROR.8
 CL-TEST::MEMBER.ERROR.9
Test CL-TEST::MEMBER.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER NIL NIL :TEST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER.ERROR.13 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER NIL NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MEMBER.ERROR.14
 CL-TEST::MEMBER.ERROR.15
Test CL-TEST::MEMBER.ERROR.16 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER (QUOTE CL-TEST::A) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::MEMBER.ERROR.17
 CL-TEST::MEMBER-IF.1
 CL-TEST::MEMBER-IF.2
Test CL-TEST::MEMBER-IF.3 failed
Form: (MEMBER-IF (FUNCTION (LAMBDA (CL-TEST::X) (EQL CL-TEST::X 12))) (QUOTE (4 12 11 73 11)) :KEY (FUNCTION 1+))
Expected value:
          (11 73 11)
Actual value:
          #<System.Internals::Invalid-Arguments 81C8BB77> [Actual value: #<error during printing>

 NIL
 CL-TEST::MEMBER-IF.4
Test CL-TEST::MEMBER-IF.5 failed
Form: (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION EVENP))
Expected value:
          (2 3 4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81CD9757> [Actual value: #<error during printing>

 NIL
 CL-TEST::MEMBER-IF.ORDER.1
Test CL-TEST::MEMBER-IF.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (MEMBER-IF (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION IDENTITY)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (NIL NIL CL-TEST::A CL-TEST::B NIL CL-TEST::C CL-TEST::D))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION NOT))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (CL-TEST::A CL-TEST::B NIL CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<System.Internals::Invalid-Arguments 81CED517> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF.KEYWORDS.1 failed
Form: (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION EVENP) :KEY (FUNCTION ODDP))
Expected value:
          (2 3 4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81D02A87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF.ALLOW-OTHER-KEYS.2 failed
Form: (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (2 3 4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81D0CAE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF.ALLOW-OTHER-KEYS.3 failed
Form: (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (2 3 4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81D16A07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF.ALLOW-OTHER-KEYS.4 failed
Form: (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T)
Expected value:
          (2 3 4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81D206C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF.ALLOW-OTHER-KEYS.5 failed
Form: (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (2 3 4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81D2A0A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF.ALLOW-OTHER-KEYS.6 failed
Form: (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL)
Expected value:
          (2 3 4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81D33DA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF.ALLOW-OTHER-KEYS.7 failed
Form: (MEMBER-IF (FUNCTION IDENTITY) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL))
Expected value:
          (2 3 4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81D3E727> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::MEMBER-IF.ERROR.1
 CL-TEST::MEMBER-IF.ERROR.2
 CL-TEST::MEMBER-IF.ERROR.3
 CL-TEST::MEMBER-IF.ERROR.4
 CL-TEST::MEMBER-IF.ERROR.5
 CL-TEST::MEMBER-IF.ERROR.6
 CL-TEST::MEMBER-IF.ERROR.7
 CL-TEST::MEMBER-IF.ERROR.8
 CL-TEST::MEMBER-IF.ERROR.9
 CL-TEST::MEMBER-IF.ERROR.10
Test CL-TEST::MEMBER-IF-NOT.1 failed
Form: (MEMBER-IF-NOT (FUNCTION LISTP) NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.2 failed
Form: (MEMBER-IF-NOT (FUNCTION (LAMBDA (CL-TEST::X) (CL-TEST::EQT CL-TEST::X (QUOTE CL-TEST::A)))) (QUOTE (CL-TEST::A 1 2 CL-TEST::A 3 4)))
Expected value:
          (1 2 CL-TEST::A 3 4)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.3 failed
Form: (MEMBER-IF-NOT (FUNCTION (LAMBDA (CL-TEST::X) (NOT (EQL CL-TEST::X 12)))) (QUOTE (4 12 11 73 11)) :KEY (FUNCTION 1+))
Expected value:
          (11 73 11)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
On x = 1, returns:
#<Undefined-Function MEMBER-IF-NOT>
Test CL-TEST::MEMBER-IF-NOT.4 failed
Form: (LET ((CL-TEST::TEST-INPUTS (SYSTEM.INTERNALS::BACKQUOTE (1 CL-TEST::A 11.3121 CL-TEST::11.31S3 CL-TEST::1.123F5 -1 0 CL-TEST::13.13122D34 CL-TEST::581.131E-10 ((CL-TEST::A) (CL-TEST::B) (CL-TEST::C) . CL-TEST::D) (SYSTEM.INTERNALS::BQ-COMMA (MAKE-ARRAY (QUOTE (10)))) "ancadas" #\w)))) (NOT (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::RESULT (CL-TEST::CATCH-TYPE-ERROR (MEMBER-IF-NOT (FUNCTION LISTP) CL-TEST::X)))) (OR (CL-TEST::EQT CL-TEST::RESULT (QUOTE TYPE-ERROR)) (PROGN (FORMAT T "~%On x = ~S, returns: ~%~S" CL-TEST::X CL-TEST::RESULT) NIL))))) CL-TEST::TEST-INPUTS)))
Expected value:
          NIL
Actual value:
          T [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.5 failed
Form: (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION EVENP))
Expected value:
          (2 3 4 5)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (MEMBER-IF-NOT (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION NOT)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (NIL NIL CL-TEST::A CL-TEST::B NIL CL-TEST::C CL-TEST::D)))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (CL-TEST::A CL-TEST::B NIL CL-TEST::C CL-TEST::D)
          2
          1
          2
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (MEMBER-IF-NOT (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION NOT)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (NIL NIL CL-TEST::A CL-TEST::B NIL CL-TEST::C CL-TEST::D))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION NOT))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (CL-TEST::A CL-TEST::B NIL CL-TEST::C CL-TEST::D)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.KEYWORDS.1 failed
Form: (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (1 2 3 4 5)) :KEY (FUNCTION EVENP) :KEY (FUNCTION ODDP))
Expected value:
          (2 3 4 5)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ALLOW-OTHER-KEYS.2 failed
Form: (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (2 3 4 5)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ALLOW-OTHER-KEYS.3 failed
Form: (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (2 3 4 5)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ALLOW-OTHER-KEYS.4 failed
Form: (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T)
Expected value:
          (2 3 4 5)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ALLOW-OTHER-KEYS.5 failed
Form: (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (2 3 4 5)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ALLOW-OTHER-KEYS.6 failed
Form: (MEMBER-IF-NOT (FUNCTION NOT) (QUOTE (NIL 2 3 4 5)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL))
Expected value:
          (2 3 4 5)
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (MEMBER-IF-NOT (FUNCTION IDENTITY) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER-IF-NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION NULL) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (MEMBER-IF-NOT (FUNCTION IDENTITY) (QUOTE CL-TEST::A)) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MEMBER-IF-NOT.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (MEMBER-IF-NOT (FUNCTION IDENTITY) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MEMBER-IF-NOT> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPC.1
 CL-TEST::MAPC.2
Test CL-TEST::MAPC.3 failed
Form: (LET ((CL-TEST::X 0)) (LIST (MAPC (FUNCTION (LAMBDA (CL-TEST::Y CL-TEST::Z) (DECLARE (IGNORE CL-TEST::Y CL-TEST::Z)) (INCF CL-TEST::X))) (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE CL-TEST::A)) (MAKE-LIST 5)) CL-TEST::X))
Expected value:
          ((CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A) 5)
Actual value:
          ((CL-TEST::A NIL NIL NIL NIL) 5) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPC.4 failed
Form: (LET ((CL-TEST::X 0)) (LIST (MAPC (FUNCTION (LAMBDA (CL-TEST::Y CL-TEST::Z) (DECLARE (IGNORE CL-TEST::Y CL-TEST::Z)) (INCF CL-TEST::X))) (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE CL-TEST::A)) (MAKE-LIST 10)) CL-TEST::X))
Expected value:
          ((CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A) 5)
Actual value:
          ((CL-TEST::A NIL NIL NIL NIL) 5) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPC.5 failed
Form: (LET ((CL-TEST::X 0)) (LIST (MAPC (FUNCTION (LAMBDA (CL-TEST::Y CL-TEST::Z) (DECLARE (IGNORE CL-TEST::Y CL-TEST::Z)) (INCF CL-TEST::X))) (MAKE-LIST 5 :INITIAL-ELEMENT (QUOTE CL-TEST::A)) (MAKE-LIST 3)) CL-TEST::X))
Expected value:
          ((CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A) 3)
Actual value:
          ((CL-TEST::A NIL NIL NIL NIL) 3) [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPC.6
 CL-TEST::MAPC.ORDER.1Space
 CL-TEST::MAPC.ERROR.1
 CL-TEST::MAPC.ERROR.2
 CL-TEST::MAPC.ERROR.3
 CL-TEST::MAPC.ERROR.4
 CL-TEST::MAPC.ERROR.5
 CL-TEST::MAPC.ERROR.6
Test CL-TEST::MAPC.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPC (FUNCTION CAR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPC.ERROR.8
 CL-TEST::MAPCAR.1
 CL-TEST::MAPCAR.2
 CL-TEST::MAPCAR.3
 CL-TEST::MAPCAR.4
 CL-TEST::MAPCAR.5
 CL-TEST::MAPCAR.6
 CL-TEST::MAPCAR.ORDER.1
 CL-TEST::MAPCAR.FOLD.1
 CL-TEST::MAPCAR.FOLD.2Space
 CL-TEST::MAPCAR.ERROR.1
 CL-TEST::MAPCAR.ERROR.2
 CL-TEST::MAPCAR.ERROR.3
 CL-TEST::MAPCAR.ERROR.4
Test CL-TEST::MAPCAR.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPCAR (FUNCTION CAR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPCAR.ERROR.6
 CL-TEST::MAPCAR.ERROR.7
 CL-TEST::MAPCAR.ERROR.8
 CL-TEST::MAPCAN.1
 CL-TEST::MAPCAN.2
Test CL-TEST::MAPCAN.3 failed
Form: (LET* ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MAPCAN (FUNCTION LIST) CL-TEST::X))) (AND (= (LENGTH CL-TEST::X) (LENGTH CL-TEST::RESULT)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (LOOP CL-TEST::FOR CL-TEST::E1 CL-TEST::ON CL-TEST::X AND CL-TEST::E2 CL-TEST::ON CL-TEST::RESULT COUNT (OR (CL-TEST::EQT CL-TEST::E1 CL-TEST::E2) (NOT (EQL (CAR CL-TEST::E1) (CAR CL-TEST::E2)))))))
Expected value:
          0
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPCAN.4
Test CL-TEST::MAPCAN.5 failed
Form: (MAPCAN (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (MAKE-LIST CL-TEST::Y :INITIAL-ELEMENT CL-TEST::X))) (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (COPY-LIST (QUOTE (1 2 3 4))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::B CL-TEST::C CL-TEST::C CL-TEST::C CL-TEST::D CL-TEST::D CL-TEST::D CL-TEST::D)
Actual value:
          (CL-TEST::A CL-TEST::B NIL CL-TEST::C NIL NIL CL-TEST::D NIL NIL NIL) [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPCAN.6
 CL-TEST::MAPCAN.ORDER.1
Test CL-TEST::MAPCAN.8 failed
Form: (MAPCAN (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (MAKE-LIST CL-TEST::Y :INITIAL-ELEMENT CL-TEST::X))) (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (COPY-LIST (QUOTE (1 2 3 4 5 6))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::B CL-TEST::C CL-TEST::C CL-TEST::C CL-TEST::D CL-TEST::D CL-TEST::D CL-TEST::D)
Actual value:
          (CL-TEST::A CL-TEST::B NIL CL-TEST::C NIL NIL CL-TEST::D NIL NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCAN.9 failed
Form: (MAPCAN (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (MAKE-LIST CL-TEST::Y :INITIAL-ELEMENT CL-TEST::X))) (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (COPY-LIST (QUOTE (1 2 3 4))))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::B CL-TEST::C CL-TEST::C CL-TEST::C CL-TEST::D CL-TEST::D CL-TEST::D CL-TEST::D)
Actual value:
          (CL-TEST::A CL-TEST::B NIL CL-TEST::C NIL NIL CL-TEST::D NIL NIL NIL) [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPCAN.10
Test CL-TEST::MAPCAN.11 failed
Form: (MAPCAN (CONSTANTLY 1) (LIST (QUOTE CL-TEST::A)))
Expected value:
          1
Actual value:
          #<Type-Error C17FC8C7> [Actual value: #<error during printing>

 NILSpace
 CL-TEST::MAPCAN.ERROR.1
 CL-TEST::MAPCAN.ERROR.2
 CL-TEST::MAPCAN.ERROR.3
 CL-TEST::MAPCAN.ERROR.4
Test CL-TEST::MAPCAN.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPCAN (FUNCTION CAR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPCAN.ERROR.6
 CL-TEST::MAPCAN.ERROR.7
 CL-TEST::MAPCAN.ERROR.8
Test CL-TEST::MAPL.1 failed
Form: (MAPL (FUNCTION LIST) NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.2 failed
Form: (LET* ((CL-TEST::A NIL) (CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MAPL (FUNCTION (LAMBDA (CL-TEST::Y) (PUSH CL-TEST::Y CL-TEST::A))) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT CL-TEST::X) CL-TEST::A))
Expected value:
          ((CL-TEST::C) (CL-TEST::B CL-TEST::C) (CL-TEST::A CL-TEST::B CL-TEST::C))
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.3 failed
Form: (LET* ((CL-TEST::A NIL) (CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) (CL-TEST::Y (COPY-LIST (QUOTE (1 2 3 4)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::YCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::Y)) (CL-TEST::RESULT (MAPL (FUNCTION (LAMBDA (CL-TEST::XTAIL CL-TEST::YTAIL) (SETF CL-TEST::A (APPEND (MAPCAR (FUNCTION LIST) CL-TEST::XTAIL CL-TEST::YTAIL) CL-TEST::A)))) CL-TEST::X CL-TEST::Y))) (AND (CL-TEST::EQT CL-TEST::RESULT CL-TEST::X) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::Y CL-TEST::YCOPY) CL-TEST::A))
Expected value:
          ((CL-TEST::D 4) (CL-TEST::C 3) (CL-TEST::D 4) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4) (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4))
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.4 failed
Form: (LET* ((CL-TEST::A NIL) (CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) (CL-TEST::Y (COPY-LIST (QUOTE (1 2 3 4 5 6 7 8)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::YCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::Y)) (CL-TEST::RESULT (MAPL (FUNCTION (LAMBDA (CL-TEST::XTAIL CL-TEST::YTAIL) (SETF CL-TEST::A (APPEND (MAPCAR (FUNCTION LIST) CL-TEST::XTAIL CL-TEST::YTAIL) CL-TEST::A)))) CL-TEST::X CL-TEST::Y))) (AND (CL-TEST::EQT CL-TEST::RESULT CL-TEST::X) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::Y CL-TEST::YCOPY) CL-TEST::A))
Expected value:
          ((CL-TEST::D 4) (CL-TEST::C 3) (CL-TEST::D 4) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4) (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4))
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.5 failed
Form: (LET* ((CL-TEST::A NIL) (CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G)))) (CL-TEST::Y (COPY-LIST (QUOTE (1 2 3 4)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::YCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::Y)) (CL-TEST::RESULT (MAPL (FUNCTION (LAMBDA (CL-TEST::XTAIL CL-TEST::YTAIL) (SETF CL-TEST::A (APPEND (MAPCAR (FUNCTION LIST) CL-TEST::XTAIL CL-TEST::YTAIL) CL-TEST::A)))) CL-TEST::X CL-TEST::Y))) (AND (CL-TEST::EQT CL-TEST::RESULT CL-TEST::X) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::Y CL-TEST::YCOPY) CL-TEST::A))
Expected value:
          ((CL-TEST::D 4) (CL-TEST::C 3) (CL-TEST::D 4) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4) (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4))
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (MAPL (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (CONSTANTLY NIL)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (QUOTE (1 2 3)))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (MAPL (FUNCTION IDENTITY) CL-TEST::X))) (FUNCTION CL-TEST::SEQUENCEP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPL (FUNCTION APPEND)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (MAPL (FUNCTION IDENTITY) 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPL (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPL (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPL.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPL (FUNCTION CAAR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) TYPE-ERROR)
Expected value:
 CL-TEST::MAPLIST.4
 CL-TEST::MAPLIST.5
 CL-TEST::MAPLIST.6
Test CL-TEST::MAPLIST.7 failed
Form: (MAPLIST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (NTH (CAR CL-TEST::X) CL-TEST::Y))) (QUOTE (0 1 0 1 0 1 0)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G)))
Expected value:
          (CL-TEST::A CL-TEST::C CL-TEST::C CL-TEST::E CL-TEST::E CL-TEST::G CL-TEST::G)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPLIST.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (MAPLIST (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (DECLARE (IGNORE CL-TEST::X)) (CAR CL-TEST::Y)))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (QUOTE (1 2 3)))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TESLIST.FOLD.2Space
 CL-TEST::MAPLIST.ERROR.1
 CL-TEST::MAPLIST.ERROR.2
 CL-TEST::MAPLIST.ERROR.3
 CL-TEST::MAPLIST.ERROR.4
 CL-TEST::MAPLIST.ERROR.5
 CL-TEST::MAPLIST.ERROR.6
 CL-TEST::MAPLIST.ERROR.7
 CL-TEST::MAPLIST.ERROR.8
 CL-TEST::MAPLIST.ERROR.9
 CL-TEST::MAPLIST.ERROR.10
 CL-TEST::MAPLIST.ERROR.11
Test CL-TEST::MAPCON.1 failed
Form: (MAPCON (FUNCTION (LAMBDA (CL-TEST::X) (APPEND (QUOTE (CL-TEST::A)) CL-TEST::X NIL))) NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.2 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (MAPCON (FUNCTION (LAMBDA (CL-TEST::Y) (APPEND (QUOTE (CL-TEST::A)) CL-TEST::Y NIL))) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) CL-TEST::RESULT))
Expected value:
          (CL-TEST::A 1 2 3 4 CL-TEST::A 2 3 4 CL-TEST::A 3 4 CL-TEST::A 4)
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.3 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE (4 2 3 2 2)))) (CL-TEST::Y (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::YCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::Y)) (CL-TEST::RESULT (MAPCON (FUNCTION (LAMBDA (CL-TEST::XT CL-TEST::YT) (SUBSEQ CL-TEST::YT 0 (CAR CL-TEST::XT)))) CL-TEST::X CL-TEST::Y))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::Y CL-TEST::YCOPY) CL-TEST::RESULT))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::B CL-TEST::C CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::D CL-TEST::E CL-TEST::E CL-TEST::F)
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.4 failed
Form: (MAPCON (CONSTANTLY 1) (LIST (QUOTE CL-TEST::A)))
Expected value:
          1
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (MAPCON (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (LIST (CAR CL-TEST::X) (CAR CL-TEST::Y))))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (QUOTE (1 2 3)))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A 1 CL-TEST::B 2 CL-TEST::C 3)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (MAPCON (FUNCTION IDENTITY) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPCON) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPCON (FUNCTION APPEND)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (MAPCON (FUNCTION IDENTITY) 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPCON (FUNCTION CAAR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ERROR.6 failed
Fod value:
          T
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPCON (FUNCTION CONS) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (1 2 3)) (QUOTE (4 5 6))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAPCON.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (MAPCON (FUNCTION COPY-TREE) (CONS 1 2)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function MAPCON> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ACONS.1 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::C . CL-TEST::D) (CL-TEST::E . CL-TEST::F))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (ACONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT (CDR CL-TEST::RESULT) CL-TEST::X) CL-TEST::RESULT))
Expected value:
          ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D) (CL-TEST::E . CL-TEST::F))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::ACONS.2
 CL-TEST::ACONS.3
 CL-TEST::ACONS.4
 CL-TEST::ACONS.5
 CL-TEST::ACONS.6
Test CL-TEST::ACONS.7 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (ACONS (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE CL-TEST::A))) (QUOTE CL-TEST::B) (QUOTE (CL-TEST::C))))
Expected value:
          ((CL-TEST::A . CL-TEST::B) CL-TEST::C)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ACONS.8 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (ACONS (QUOTE CL-TEST::A) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE CL-TEST::B))) (QUOTE (CL-TEST::C))))
Expected value:
          ((CL-TEST::A . CL-TEST::B) CL-TEST::C)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::ACONS.9 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (ACONS (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE (CL-TEST::C))))))
Expected value:
          ((CL-TEST::A . CL-TEST::B) CL-TEST::C)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::ACONS.ORDER.1
 CL-TEST::ACONS.FOLD.1
 CL-TEST::ACONS.FOLD.2
 CL-TEST::ACONS.ERROR.1
 CL-TEST::ACONS.ERROR.2
 CL-TOC.1
 CL-TEST::ASSOC.2
Test CL-TEST::ASSOC.3 failed
Form: (ASSOC NIL (QUOTE (NIL (NIL . 2) (CL-TEST::A . CL-TEST::B))))
Expected value:
          (NIL . 2)
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.4
 CL-TEST::ASSOC.5
 CL-TEST::ASSOC.6
Test CL-TEST::ASSOC.7 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::B . CL-TEST::C) (CL-TEST::C . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (ASSOC (QUOTE CL-TEST::B) CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::RESULT (SECOND CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.8
 CL-TEST::ASSOC.9
Test CL-TEST::ASSOC.10 failed
Form: (ASSOC (COPY-LIST (QUOTE (CL-TEST::A))) (COPY-TREE (QUOTE (((CL-TEST::A) CL-TEST::B) ((CL-TEST::A) (CL-TEST::C))))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.11
 CL-TEST::ASSOC.12
Test CL-TEST::ASSOC.13 failed
Form: (ASSOC NIL (QUOTE (((CL-TEST::A) . CL-TEST::B) (NIL . CL-TEST::C) ((NIL) . CL-TEST::D))) :KEY (FUNCTION CAR))
Expected value:
          (NIL . CL-TEST::C)
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.14
 CL-TEST::ASSOC.15
Test CL-TEST::ASSOC.16 failed
Form: (ASSOC (COPY-LIST (QUOTE (CL-TEST::A))) (COPY-TREE (QUOTE (((CL-TEST::A) CL-TEST::B) ((CL-TEST::A) (CL-TEST::C))))) :TEST (FUNCTION EQUAL))
Expected value:
          ((CL-TEST::A) CL-TEST::B)
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.17 failed
Form: (ASSOC (COPY-SEQ "abc") (QUOTE ((CL-TEST::ABC . 1) (CL-TEST::A . CL-TEST::A) (CL-TEST::B . CL-TEST::B) ("abc" . 2) ("abc" . 3))) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP)))
Expected value:
          ("abc" . 2)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.18 failed
Form: (ASSOC (QUOTE CL-TEST::A) (QUOTE ((CL-TEST::A . CL-TEST::D) (CL-TEST::B . CL-TEST::C))) :TEST-NOT (FUNCTION EQ))
Expected value:
          (CL-TEST::B . CL-TEST::C)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.19
 CL-TEST::ASSOC.20
 CL-TEST::ASSOC.21
Test CL-TEST::ASSOC.22 failed
Form: (ASSOC "a" (QUOTE (("" . 1) (CL-TEST::A . 2) ("A" . 6) ("a" . 3) ("A" . 5))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (STRINGP CL-TEST::X) (STRING-DOWNCASE CL-TEST::X)))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)))
Expected value:
          ("A" . 6)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.23 failed
Form: (ASSOC "a" (QUOTE (("" . 1) (CL-TEST::A . 2) ("A" . 6) ("a" . 3) ("A" . 5))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (STRINGP CL-TEST::X) CL-TEST::X))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)))
Expected value:
          ("a" . 3)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.24
 CL-TEST::ASSOC.25
 CL-TEST::ASSOC.26
Test CL-TEST::ASSOC.27 failed
Form: (ASSOC 10 (QUOTE ((1 CL-TEST::A) (5 CL-TEST::B) (8 CL-TEST::C) (11 CL-TEST::D) (12 CL-TEST::E))) :TEST-NOT (FUNCTION >=))
Expected value:
          (11 CL-TEST::D)
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.30 failed
Form: (LET NIL (ASSOC NIL (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D) (NIL . CL-TEST::E) (NIL . CL-TEST::F) NIL (CL-TEST::G . CL-TEST::H)))))
Expected value:
          (NIL . CL-TEST::E)
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.31 failed
Form: (LET NIL (ASSOC NIL (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D) (NIL . CL-TEST::E) (NIL . CL-TEST::F) NIL (CL-TEST::G . CL-TEST::H))) :TEST (FUNCTION EQ)))
Expected value:
          (NIL . CL-TEST::E)
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.TEST-AND-TEST-NOT.1
 CL-TEST::ASSOC.TEST-AND-TEST-NOT.2
 CL-TEST::ASSOC.ORDER.1
 CL-TEST::ASSOC.ORDER.2
 CL-TEST::ASSOC.ORDER.3
 CL-TEST::ASSOC.ORDER.4
Test CL-TEST::ASSOC.ALLOW-OTHER-KEYS.1 failed
Form: (ASSOC (QUOTE CL-TEST::B) (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3))) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::B . 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.ALLOW-OTHER-KEYS.2 failed
Form: (ASSOC (QUOTE CL-TEST::B) (QUOTE (ing printing>

 NIL
Test CL-TEST::ASSOC.ALLOW-OTHER-KEYS.4 failed
Form: (ASSOC (QUOTE CL-TEST::B) (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS T)
Expected value:
          (CL-TEST::B . 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.ALLOW-OTHER-KEYS.5 failed
Form: (ASSOC (QUOTE CL-TEST::B) (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (CL-TEST::B . 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.KEYWORDS.6
 CL-TEST::ASSOC.KEYWORDS.7
 CL-TEST::ASSOC.ERROR.1
 CL-TEST::ASSOC.ERROR.2
Test CL-TEST::ASSOC.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC NIL NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC NIL NIL 1 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument 1. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:KEY :TEST :TEST-NOT).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.ERROR.7
Test CL-TEST::ASSOC.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC (QUOTE CL-TEST::A) (QUOTE ((CL-TEST::A . CL-TEST::B))) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ASSOC.ERROR.9
 CL-TEST::ASSOC.ERROR.10
 CL-TEST::ASSOC.ERROR.11
 CL-TEST::ASSOC.ERROR.12
Test CL-TEST::ASSOC-IF.1 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (ASSOC-IF (FUNCTION EVENP) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (THIRD CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (6 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.2 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (e:
          (6 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.3 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE ((1 . CL-TEST::A) NIL (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (ASSOC-IF (FUNCTION EVENP) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (FOURTH CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (6 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.4 failed
Form: (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D) (NIL . CL-TEST::E) (CL-TEST::F . CL-TEST::G))))
Expected value:
          (NIL . CL-TEST::E)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.5 failed
Form: (LET NIL (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D) (NIL . CL-TEST::E) (CL-TEST::F . CL-TEST::G)))))
Expected value:
          (NIL . CL-TEST::E)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (ASSOC-IF (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION NULL)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (NIL . 17) (CL-TEST::D . 4))))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (NIL . 17)
          2
          1
          2
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (ASSOC-IF (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION NULL)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (NIL . 17) (CL-TEST::D . 4)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION NULL))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A . 1)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ALLOW-OTHER-KEYS.1 failed
Form: (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ALLOW-OTHER-KEYS.2 failed
Form: (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T)
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ALLOW-OTHER-KEYS.3 failed
Form: (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T :KEY (FUNCTION NOT))
Expected value:
          (CL-TEST::A . 1)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ALLOW-OTHER-KEYS.4 failed
Form: (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS T)
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF> [Aected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.KEYWORDS.6 failed
Form: (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL))
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.KEYWORDS.7 failed
Form: (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :KEY NIL :KEY (FUNCTION NULL))
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ENV.1 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::ALIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (8 . CL-TEST::D) (-1 . CL-TEST::E))))) (VALUES (ASSOC-IF (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE EVENP))) CL-TEST::ALIST) (ASSOC-IF (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (FUNCTION EVENP))) CL-TEST::ALIST) (ASSOC-IF (FUNCTION EVENP) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::ALIST))) (ASSOC-IF (QUOTE ODDP) CL-TEST::ALIST (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :KEY)) (QUOTE 1+)) (ASSOC-IF (QUOTE ODDP) CL-TEST::ALIST :KEY (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (FUNCTION 1+)))))))
Expected value:
          (6 . CL-TEST::C)
          (6 . CL-TEST::C)
          (6 . CL-TEST::C)
          (6 . CL-TEST::C)
          (6 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION CONS) (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ASSOC-IF (FUNCTION CAR) (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D)))))
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.10 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ASSOC-IF (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) :KEY (FUNCTION CAR)))
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . CL-TEST::B) . CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF (FUNCTION NULL) (QUOTE ((CL-TEST::A . CL-TEST::B) :BAD (CL-TEST::C . CL-TEST::D)))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF.ERROR.13 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::Y) (ASSOC-IF (FUNCTION NULL) CL-TEST::X))
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.1 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (ASSOC-IF-NOT (FUNCTION ODDP) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (THIRD CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (6 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.2 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (ASSOC-IF-NOT (FUNCTION EVENP) CL-TEST::X :KEY (FUNCTION 1+)))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (THIRD CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (6 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.3 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE ((1 . CL-TEST::A) NIL (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (ASSOC-IF-NOT (FUNCTION ODDP) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (FOURTH CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (6 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.4 failed
Form: (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D) (NIL . CL-TEST::E) (CL-TEST::F . CL-TEST::G))))
Expected value:
          (NIL . CL-TEST::E)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (ASSOC-IF-NOT (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION IDENTITY)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (NIL . 17) (CL-TEST::D . 4))))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (NIL . 17)
          2
          1
          2
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (ASSOC-IF-NOT (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION IDENTITY)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (NIL . 17) (CL-TEST::D . 4)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION NULL))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (CL-TEST::A . 1)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ALLOW-OTHER-KEYS.1 failed
Form: (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ALLOW-OTHER-KEYS.2 failed
Form: (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T)
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ALLOW-OTHER-KEYS.3 failed
Form: (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS T :ALSO-BAD T :KEY (FUNCTION NOT))
Expected value:
          (CL-TEST::A . 1)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ALLOW-OTHER-KEYS.4 failed
Form: (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS T)
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ALLOW-OTHER-KEYS.5 failed
Form: (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.KEYWORDS.6 failed
Form: (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :KEY (FUNCTION IDENTITY) :KEY (FUNCTION NULL))
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.KEYWORDS.7 failed
Form: (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . 1) (NIL . 2) (CL-TEST::C . 3))) :KEY NIL :KEY (FUNCTION NULL))
Expected value:
          (NIL . 2)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ENV.1 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::ALIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (4 . CL-TEST::C) (6 . CL-TEST::D))))) (VALUES (ASSOC-IF-NOT (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE ODDP))) CL-TEST::ALIST) (ASSOC-IF-NOT (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (FUNCTION ODDP))) CL-TEST::ALIST) (ASSOC-IF-NOT (QUOTE ODDP) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::ALIST))))))
Expected value:
          (4 . CL-TEST::C)
          (4 . CL-TEST::C)
          (4 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ENV.2 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::ALIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (4 . CL-TEST::C) (6 . CL-TEST::D))))) (VALUES (ASSOC-IF-NOT (QUOTE EVENP) CL-TEST::ALIST (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :KEY)) (FUNCTION 1+)) (ASSOC-IF-NOT (FUNCTION EVENP) CL-TEST::ALIST :KEY (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE 1+)))))))
Expected value:
          (4 . CL-TEST::C)
          (4 . CL-TEST::C)
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION CONS) (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ASSOC-IF-NOT (FUNCTION CAR) (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D)))))
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.10 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D))) :KEY (FUNCTION CAR)))
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . CL-TEST::B) . CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . CL-TEST::B) :BAD (CL-TEST::C . CL-TEST::D)))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ASSOC-IF-NOT.ERROR.13 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::Y) (ASSOC-IF-NOT (FUNCTION IDENTITY) CL-TEST::X))
Expected value:
          T
Actual value:
          #<Undefined-Function ASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.1 failed
Form: (RASSOC NIL NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.2 failed
Form: (RASSOC NIL (QUOTE (NIL)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.3 failed
Form: (RASSOC NIL (CL-TEST::REV-ASSOC-LIST (QUOTE (NIL (NIL . 2) (CL-TEST::A . CL-TEST::B)))))
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.4 failed
Form: (RASSOC NIL (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.5 failed
Form: (RASSOC (QUOTE CL-TEST::A) (QUOTE ((CL-TEST::B . CL-TEST::A))))
Expected value:
          (CL-TEST::B . CL-TEST::A)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.6 failed
Form: (RASSOC (QUOTE CL-TEST::A) (CL-TEST::REV-ASSOC-LIST (QUOTE ((:A . CL-TEST::B) (#:A . CL-TEST::C) (CL-TEST::A . CL-TEST::D) (CL-TEST::A . CL-TEST::E) (CL-TEST::Z . CL-TEST::F)))))
Expected value:
          (CL-TEST::D . CL-TEST::A)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.7 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::B . CL-TEST::C) (CL-TEST::C . CL-TEST::D)))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (RASSOC (QUOTE CL-TEST::B) CL-TEST::X))) (AND (CL-TEST::EQT CL-TEST::RESULT (SECOND CL-TEST::X)) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY)))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.8 failed
Form: (RASSOC 1 (CL-TEST::REV-ASSOC-LIST (QUOTE ((0 . CL-TEST::A) (1 . CL-TEST::B) (2 . CL-TEST::C)))))
Expected value:
          (CL-TEST::B . 1)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.9 failed
Form: (RASSOC (COPY-SEQ "abc") (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::ABC . 1) ("abc" . 2) ("abc" . 3)))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.10 failed
Form: (RASSOC (COPY-LIST (QUOTE (CL-TEST::A))) (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE (((CL-TEST::A) CL-TEST::B) ((CL-TEST::A) (CL-TEST::C)))))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.11 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (RASSOC CL-TEST::X (CL-TEST::REV-ASSOC-LIST (SYSTEM.INTERNALS::BACKQUOTE (((CL-TEST::A CL-TEST::B) CL-TEST::C) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) . CL-TEST::D) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::X) . CL-TEST::E) ((CL-TEST::A CL-TEST::B) 1))))))
Expected value:
          (CL-TEST::D CL-TEST::A CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.12 failed
Form: (RASSOC #\e (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE (("abefd" . 1) ("aevgd" . 2) ("edada" . 3))))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (SCHAR CL-TEST::X 1))))
Expected value:
          (2 . "aevgd")
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.13 failed
Form: (RASSOC NIL (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE (((CL-TEST::A) . CL-TEST::B) (NIL . CL-TEST::C) ((NIL) . CL-TEST::D))))) :KEY (FUNCTION CAR))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.14 failed
Form: (RASSOC (COPY-SEQ "abc") (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::ABC . 1) ("abc" . 2) ("abc" . 3))))) :TEST (FUNCTION EQUAL))
Expected value:
          (2 . "abc")
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.15 failed
Form: (RASSOC (COPY-SEQ "abc") (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::ABC . 1) ("abc" . 2) ("abc" . 3))))) :TEST (FUNCTION EQUALP))
Expected value:
          (2 . "abc")
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.16 failed
Form: (RASSOC (COPY-LIST (QUOTE (CL-TEST::A))) (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE (((CL-TEST::A) CL-TEST::B) ((CL-TEST::A) (CL-TEST::C)))))) :TEST (FUNCTION EQUAL))
Expected value:
          ((CL-TEST::B) CL-TEST::A)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.17 failed
Form: (RASSOC (COPY-SEQ "abc") (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::ABC . 1) (CL-TEST::A . CL-TEST::A) (CL-TEST::B . CL-TEST::B) ("abc" . 2) ("abc" . 3))))) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP)))
Expected value:
          (2 . "abc")
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.18 failed
Form: (RASSOC (QUOTE CL-TEST::A) (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::A . CL-TEST::D) (CL-TEST::B . CL-TEST::C))))) :TEST-NOT (FUNCTION EQ))
Expected value:
          (CL-TEST::C . CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.19 failed
Form: (RASSOC (QUOTE CL-TEST::A) (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::A . CL-TEST::D) (CL-TEST::B . CL-TEST::C))))) :TEST (COMPLEMENT (FUNCTION EQ)))
Expected value:
          (CL-TEST::C . CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.20 failed
Form: (RASSOC "a" (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE (("" . 1) (CL-TEST::A . 2) ("A" . 6) ("a" . 3) ("A" . 5))))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (STRINGP CL-TEST::X) (STRING-DOWNCASE CL-TEST::X)))) :TEST (FUNCTION EQUAL))
Expected value:
          (6 . "A")
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.21 failed
Form: (RASSOC "a" (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE (("" . 1) (CL-TEST::A . 2) ("A" . 6) ("a" . 3) ("A" . 5))))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (STRINGP CL-TEST::X) CL-TEST::X))) :TEST (FUNCTION EQUAL))
Expected value:
          (3 . "a")
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.22 failed
Form: (RASSOC "a" (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE (("" . 1) (CL-TEST::A . 2) ("A" . 6) ("a" . 3) ("A" . 5))))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (STRINGP CL-TEST::X) (STRING-DOWNCASE CL-TEST::X)))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)))
Expected value:
          (6 . "A")
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.23 failed
Form: (RASSOC "a" (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE (("" . 1) (CL-TEST::A . 2) ("A" . 6) ("a" . 3) ("A" . 5))))) :KEY (FUNCTION (LAMBDA (CL-TEST::X) (AND (STRINGP CL-TEST::X) CL-TEST::X))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)))
Expected value:
          (3 . "a")
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.24 failed
Form: (RASSOC (QUOTE CL-TEST::A) (COPY-TREE (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::B . 1) (CL-TEST::A . 2) (CL-TEST::C . 3))))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (AND (CL-TEST::EQT CL-TEST::X CL-TEST::Y) (QUOTE CL-TEST::MATCHED)))))
Expected value:
          (2 . CL-TEST::A)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.25 failed
Form: (BLOCK CL-TEST::FAIL (RASSOC (QUOTE CL-TEST::A) (QUOTE ((1 . CL-TEST::B) (2 . CL-TEST::C) (3 . CL-TEST::A))) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (UNLESS (CL-TEST::EQT CL-TEST::X (QUOTE CL-TEST::A)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (CL-TEST::EQT CL-TEST::X CL-TEST::Y)))))
Expected value:
          (3 . CL-TEST::A)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.26 failed
Form: (RASSOC 10 (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 5) (CL-TEST::C . 10) (CL-TEST::D . 15) (CL-TEST::E . 40))) :TEST (FUNCTION <))
Expected value:
          (CL-TEST::D . 15)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.27 failed
Form: (RASSOC 10 (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 5) (CL-TEST::C . 10) (CL-TEST::D . 15) (CL-TEST::E . 40))) :TEST-NOT (FUNCTION >=))
Expected value:
          (CL-TEST::D . 15)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
 CL-TEST::RASSOC.TEST-AND-TEST-NOT.1
 CL-TEST::RASSOC.TEST-AND-TEST-NOT.2
Test CL-TEST::RASSOC.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (RASSOC (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::C)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C) (4 . CL-TEST::C))))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (3 . CL-TEST::C)
          2
          1
          2
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (RASSOC (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::C)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C) (4 . CL-TEST::C)))) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (3 . CL-TEST::C)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (RASSOC (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::C)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C) (4 . CL-TEST::C)))) :TEST (FUNCTION EQL)) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (3 . CL-TEST::C)
          2
          1
          2
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ORDER.4 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (RASSOC (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE CL-TEST::C)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C) (4 . CL-TEST::C)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION NOT))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (3 . CL-TEST::C)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ALLOW-OTHER-KEYS.1 failed
Form: (RASSOC (QUOTE CL-TEST::B) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C))) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (2 . CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ALLOW-OTHER-KEYS.2 failed
Form: (RASSOC (QUOTE CL-TEST::B) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (2 . CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ALLOW-OTHER-KEYS.3 failed
Form: (RASSOC (QUOTE CL-TEST::A) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T :BAD T :TEST-NOT (FUNCTION EQL))
Expected value:
          (2 . CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ALLOW-OTHER-KEYS.4 failed
Form: (RASSOC (QUOTE CL-TEST::B) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T)
Expected value:
          (2 . CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ALLOW-OTHER-KEYS.5 failed
Form: (RASSOC (QUOTE CL-TEST::B) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (2 . CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.KEYWORDS.6 failed
Form: (RASSOC (QUOTE CL-TEST::B) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (3 . CL-TEST::C))) :TEST (FUNCTION EQL) :TEST (COMPLEMENT (FUNCTION EQL)))
Expected value:
          (2 . CL-TEST::B)
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC NIL NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC NIL NIL 1 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC (QUOTE CL-TEST::A) (QUOTE ((CL-TEST::B . CL-TEST::A) (CL-TEST::C . CL-TEST::D))) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC (QUOTE CL-TEST::A) (QUOTE ((CL-TEST::B . CL-TEST::A) (CL-TEST::C . CL-TEST::D))) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC (QUOTE CL-TEST::A) (QUOTE ((CL-TEST::B . CL-TEST::A) (CL-TEST::C . CL-TEST::D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC (QUOTE CL-TEST::Z) (QUOTE ((CL-TEST::A . CL-TEST::B) . CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOCI.ERROR.11 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (RASSOC (QUOTE CL-TEST::A) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function RASSOC> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.1 failed
Form: (LET* ((CL-TEST::X (CL-TEST::REV-ASSOC-LIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (RASSOC-IF (FUNCTION EVENP) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (THIRD CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (CL-TEST::C . 6)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.2 failed
Form: (LET* ((CL-TEST::X (CL-TEST::REV-ASSOC-LIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (RASSOC-IF (FUNCTION ODDP) CL-TEST::X :KEY (FUNCTION 1+)))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (THIRD CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (CL-TEST::C . 6)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.3 failed
Form: (LET* ((CL-TEST::X (CL-TEST::REV-ASSOC-LIST (QUOTE ((1 . CL-TEST::A) NIL (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (RASSOC-IF (FUNCTION EVENP) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (FOURTH CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (CL-TEST::C . 6)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.4 failed
Form: (RASSOC-IF (FUNCTION NULL) (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D) (NIL . CL-TEST::E) (CL-TEST::F . CL-TEST::G)))))
Expected value:
          (CL-TEST::E)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (RASSOC-IF (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION NULL)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (17) (4 . CL-TEST::D))))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (17)
          2
          1
          2
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (RASSOC-IF (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION NULL)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (17) (4 . CL-TEST::D)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION NULL))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 . CL-TEST::A)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ALLOW-OTHER-KEYS.1 failed
Form: (RASSOC-IF (FUNCTION NULL) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ALLOW-OTHER-KEYS.2 failed
Form: (RASSOC-IF (FUNCTION NULL) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ALLOW-OTHER-KEYS.3 failed
Form: (RASSOC-IF (FUNCTION IDENTITY) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T :BAD T :KEY (QUOTE NOT))
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ALLOW-OTHER-KEYS.4 failed
Form: (RASSOC-IF (FUNCTION NULL) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ALLOW-OTHER-KEYS.5 failed
Form: (RASSOC-IF (FUNCTION NULL) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.KEYWORDS.6 failed
Form: (RASSOC-IF (FUNCTION IDENTITY) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :KEY (FUNCTION NOT) :KEY (FUNCTION IDENTITY))
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION CONS) (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION CAR) (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D)))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D))) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF (FUNCTION NOT) (QUOTE ((CL-TEST::A . CL-TEST::B) . CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF.ERROR.12 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (RASSOC-IF (FUNCTION IDENTITY) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function RASSOC-IF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.1 failed
Form: (LET* ((CL-TEST::X (CL-TEST::REV-ASSOC-LIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (RASSOC-IF-NOT (FUNCTION ODDP) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (THIRD CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (CL-TEST::C . 6)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.2 failed
Form: (LET* ((CL-TEST::X (CL-TEST::REV-ASSOC-LIST (QUOTE ((1 . CL-TEST::A) (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (RASSOC-IF-NOT (FUNCTION EVENP) CL-TEST::X :KEY (FUNCTION 1+)))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (THIRD CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (CL-TEST::C . 6)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.3 failed
Form: (LET* ((CL-TEST::X (CL-TEST::REV-ASSOC-LIST (QUOTE ((1 . CL-TEST::A) NIL (3 . CL-TEST::B) (6 . CL-TEST::C) (7 . CL-TEST::D))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (RASSOC-IF-NOT (FUNCTION ODDP) CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::EQT CL-TEST::RESULT (FOURTH CL-TEST::X)) CL-TEST::RESULT))
Expected value:
          (CL-TEST::C . 6)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.4 failed
Form: (RASSOC-IF-NOT (FUNCTION IDENTITY) (CL-TEST::REV-ASSOC-LIST (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D) (NIL . CL-TEST::E) (CL-TEST::F . CL-TEST::G)))))
Expected value:
          (CL-TEST::E)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (RASSOC-IF-NOT (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION IDENTITY)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (17) (4 . CL-TEST::D))))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (17)
          2
          1
          2
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (RASSOC-IF-NOT (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION IDENTITY)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE ((1 . CL-TEST::A) (2 . CL-TEST::B) (17) (4 . CL-TEST::D)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION NULL))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (1 . CL-TEST::A)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ALLOW-OTHER-KEYS.1 failed
Form: (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ALLOW-OTHER-KEYS.2 failed
Form: (RASSOC-IF-NOT (FUNCTION VALUES) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T :BAD T)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ALLOW-OTHER-KEYS.3 failed
Form: (RASSOC-IF-NOT (FUNCTION NOT) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T :BAD T :KEY (QUOTE NOT))
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ALLOW-OTHER-KEYS.4 failed
Form: (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ALLOW-OTHER-KEYS.5 failed
Form: (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ALLOW-OTHER-KEYS.6 failed
Form: (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T)
Expected value:
          (2)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.KEYWORDS.7 failed
Form: (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((1 . CL-TEST::A) (2) (3 . CL-TEST::C))) :KEY (FUNCTION NOT) :KEY NIL)
Expected value:
          (1 . CL-TEST::A)
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL) NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL) NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL) NIL 1 1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION NULL) NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION CONS) (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION CAR) (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D)))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D))) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D))) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE ((CL-TEST::A . CL-TEST::B) . CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RASSOC-IF-NOT.ERROR.12 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (RASSOC-IF-NOT (FUNCTION IDENTITY) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function RASSOC-IF-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-ALIST.1 failed
Form: (LET* ((CL-TEST::X (COPY-TREE (QUOTE ((CL-TEST::A . CL-TEST::B) (CL-TEST::C . CL-TEST::D) NIL (CL-TEST::E CL-TEST::F) ((CL-TEST::X) ((CL-TEST::Y CL-TEST::Z)) CL-TEST::W) ("foo" . "bar") (#\w . 1.233999) (CL-TEST::1/3 . CL-TEST::4123.4D5))))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::RESULT (COPY-ALIST CL-TEST::X))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (= (LENGTH CL-TEST::X) (LENGTH CL-TEST::RESULT)) (EVERY (FUNCTION (LAMBDA (CL-TEST::P1 CL-TEST::P2) (OR (AND (NULL CL-TEST::P1) (NULL CL-TEST::P2)) (AND (NOT (CL-TEST::EQT CL-TEST::P1 CL-TEST::P2)) (CL-TEST::EQLT (CAR CL-TEST::P1) (CAR CL-TEST::P2)) (CL-TEST::EQLT (CDR CL-TEST::P1) (CDR CL-TEST::P2)))))) CL-TEST::X CL-TEST::RESULT) T))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-ALIST.2 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (COPY-ALIST (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D)))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-ALIST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-ALIST.3 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (CAR (COPY-ALIST (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D))))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-ALIST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-ALIST.4 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (CADDR (COPY-ALIST (QUOTE ((CL-TEST::A . CL-TEST::B) NIL (CL-TEST::C . CL-TEST::D))))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-ALIST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-ALIST.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-ALIST) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-ALIST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-ALIST.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-ALIST NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-ALIST> [Actual value: #<error during printing>

 NIL
Test CL-TEST::COPY-ALIST.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-ALIST (QUOTE ((CL-TEST::A . CL-TEST::B) . CL-TEST::C))) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-ALIST> [Actual value: #<error during printing>

 NIL
 CL-TEST::PAIRLIS.1
 CL-TEST::PAIRLIS.2
Test CL-TEST::PAIRLIS.3 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::Y (COPY-LIST (QUOTE (1 2 3 4 5)))) (CL-TEST::YCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::Y)) (CL-TEST::RESULT (PAIRLIS CL-TEST::X CL-TEST::Y)) (CL-TEST::EXPECTED (CL-TEST::MY-PAIRLIS CL-TEST::X CL-TEST::Y))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::Y CL-TEST::YCOPY) (OR (EQUAL CL-TEST::RESULT CL-TEST::EXPECTED) (EQUAL CL-TEST::RESULT (REVERSE CL-TEST::EXPECTED))) T))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::PAIRLIS.4 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::Y (COPY-LIST (QUOTE (1 2 3 4 5)))) (CL-TEST::YCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::Y)) (CL-TEST::Z (QUOTE ((CL-TEST::X . 10) (CL-TEST::Y . 20)))) (CL-TEST::ZCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::Z)) (CL-TEST::RESULT (PAIRLIS CL-TEST::X CL-TEST::Y CL-TEST::Z)) (CL-TEST::EXPECTED (CL-TEST::MY-PAIRLIS CL-TEST::X CL-TEST::Y CL-TEST::Z))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::Y CL-TEST::YCOPY) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::Z CL-TEST::ZCOPY) (CL-TEST::EQT (CDR (CDDR (CDDR CL-TEST::RESULT))) CL-TEST::Z) (OR (EQUAL CL-TEST::RESULT CL-TEST::EXPECTED) (EQUAL CL-TEST::RESULT (APPEND (REVERSE (SUBSEQ CL-TEST::EXPECTED 0 5)) (SUBSEQ CL-TEST::EXPECTED 5)))) T))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::PAIRLIS.FOLD.1
 CL-TEST::PAIRLIS.ERROR.1
 CL-TEST::PAIRLIS.ERROR.2
 CL-TEST::PAIRLIS.ERROR.3
 CL-TEST::PAIRLIS.ERROR.4
 CL-TEST::PAIRLIS.ERROR.5
 CL-TEST::PAIRLIS.ERROR.6Space
 CL-TEST::PAIRLIS.ERROR.7Space
 CL-TEST::PAIRLIS.ERROR.8
 CL-TEST::GET-PROPERTIES.1
 CL-TEST::GET-PROPERTIES.2
 CL-TEST::GET-PROPERTIES.3
 CL-TEST::GET-PROPERTIES.4
 CL-TEST::GET-PROPERTIES.5
 CL-TEST::GET-PROPERTIES.6
 CL-TEST::GET-PROPERTIES.7
 CL-TEST::GET-PROPERTIES.9
 CL-TEST::GET-PROPERTIES.ORDER.1
 CL-TEST::GET-PROPERTIES.ERROR.1
 CL-TEST::GET-PROPERTIES.ERROR.2
 CL-TEST::GET-PROPERTIES.ERROR.3
 CL-TEST::GET-PROPERTIES.ERROR.4
 CL-TEST::GET-PROPERTIES.ERROR.5
 CL-TEST::GET-PROPERTIES.ERROR.6
 CL-TEST::GETF.1
 CL-TEST::GETF.2
 CL-TEST::GETF.3
 CL-TEST::GETF.4
 CL-TEST::GETF.5
 CL-TEST::GETF.ORDER.1
 CL-TEST::GETF.ORDER.2
Test CL-TEST::SETF-GETF.1 failed
Form: (LET ((CL-TEST::P (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2))))) (SETF (GETF CL-TEST::P (QUOTE CL-TEST::C)) 3) (AND (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::A)) 1) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::B)) 2) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::C)) 3) (CL-TEST::EQLT (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON CL-TEST::P CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))) 0) T))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-GETF.2 failed
Form: (LET ((CL-TEST::P (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2))))) (SETF (GETF CL-TEST::P (QUOTE CL-TEST::A)) 3) (AND (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::A)) 3) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::B)) 2) (CL-TEST::EQLT (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON CL-TEST::P CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B))))) 0) T))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-GETF.3 failed
Form: (LET ((CL-TEST::P (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2))))) (SETF (GETF CL-TEST::P (QUOTE CL-TEST::C) 17) 3) (AND (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::A)) 1) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::B)) 2) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::C)) 3) (CL-TEST::EQLT (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON CL-TEST::P CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))) 0) T))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-GETF.4 failed
Form: (LET ((CL-TEST::P (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2))))) (SETF (GETF CL-TEST::P (QUOTE CL-TEST::A) 17) 3) (AND (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::A)) 3) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::B)) 2) (CL-TEST::EQLT (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON CL-TEST::P CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B))))) 0) T))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-GETF.5 failed
Form: (LET ((CL-TEST::P (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2)))) (CL-TEST::FOO NIL)) (SETF (GETF CL-TEST::P (QUOTE CL-TEST::A) (PROGN (SETF CL-TEST::FOO T) 0)) 3) (AND (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::A)) 3) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::B)) 2) (CL-TEST::EQLT (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON CL-TEST::P CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B))))) 0) CL-TEST::FOO))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-GETF.ORDER.1 failed
Form: (LET ((CL-TEST::P (LIST (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2))))) (CL-TEST::CNT1 0) (CL-TEST::CNT2 0) (CL-TEST::CNT3 0)) (SETF (GETF (CAR (PROGN (INCF CL-TEST::CNT1) CL-TEST::P)) (QUOTE CL-TEST::C) (INCF CL-TEST::CNT3)) (PROGN (INCF CL-TEST::CNT2) 3)) (VALUES CL-TEST::CNT1 CL-TEST::CNT2 CL-TEST::CNT3 (GETF (CAR CL-TEST::P) (QUOTE CL-TEST::A)) (GETF (CAR CL-TEST::P) (QUOTE CL-TEST::B)) (GETF (CAR CL-TEST::P) (QUOTE CL-TEST::C)) (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON (CAR CL-TEST::P) CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))))))
Expected value:
          1
          1
          1
          1
          2
          3
          0
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-GETF.ORDER.2 failed
Form: (LET ((CL-TEST::P (LIST (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2))))) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (SETF (GETF (CAR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::P)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::C)) (SETF CL-TEST::Z (INCF CL-TEST::I))) (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) 3)) (VALUES CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W (GETF (CAR CL-TEST::P) (QUOTE CL-TEST::A)) (GETF (CAR CL-TEST::P) (QUOTE CL-TEST::B)) (GETF (CAR CL-TEST::P) (QUOTE CL-TEST::C)) (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON (CAR CL-TEST::P) CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))))))
Expected value:
          4
          1
          2
          3
          4
          1
          2
          3
          0
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::INCF-GETF.1 failed
Form: (LET ((CL-TEST::P (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2))))) (INCF (GETF CL-TEST::P (QUOTE CL-TEST::B))) (AND (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::A)) 1) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::B)) 3) (CL-TEST::EQLT (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON CL-TEST::P CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B))))) 0) T))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::INCF-GETF.2 failed
Form: (LET ((CL-TEST::P (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::B 2))))) (INCF (GETF CL-TEST::P (QUOTE CL-TEST::C) 19)) (AND (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::A)) 1) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::B)) 2) (CL-TEST::EQLT (GETF CL-TEST::P (QUOTE CL-TEST::C)) 20) (CL-TEST::EQLT (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON CL-TEST::P CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (MEMBER (CAR CL-TEST::PTR) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))) 0) T))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::PUSH-GETF.1
 CL-TEST::GETF.ERROR.1
 CL-TEST::GETF.ERROR.2
 CL-TEST::GETF.ERROR.3
 CL-TEST::GETF.ERROR.4
 CL-TEST::GETF.ERROR.5
Test CL-TEST::REMF.1 failed
Form: (LET ((CL-TEST::X NIL)) (VALUES (REMF CL-TEST::X (QUOTE CL-TEST::A)) CL-TEST::X))
Expected value:
          NIL
          NIL
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.2 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (VALUES (NOT (NULL (REMF CL-TEST::X (QUOTE CL-TEST::A)))) CL-TEST::X))
Expected value:
          T
          NIL
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.3 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::A) (QUOTE CL-TEST::C)))) (VALUES (NOT (NULL (REMF CL-TEST::X (QUOTE CL-TEST::A)))) CL-TEST::X))
Expected value:
          T
          (CL-TEST::A CL-TEST::C)
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.4 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))) (VALUES (AND (REMF CL-TEST::X (QUOTE CL-TEST::C)) T) (LOOP CL-TEST::FOR CL-TEST::PTR CL-TEST::ON CL-TEST::X CL-TEST::BY (FUNCTION CDDR) COUNT (NOT (CL-TEST::EQT (CAR CL-TEST::PTR) (QUOTE CL-TEST::A))))))
Expected value:
          T
          0
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.5 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X NIL)) (VALUES (REMF (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)) (QUOTE CL-TEST::A)) CL-TEST::X)))
Expected value:
          NIL
          NIL
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.6 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (VALUES (CL-TEST::NOTNOT (REMF (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)) (QUOTE CL-TEST::A))) CL-TEST::X)))
Expected value:
          T
          NIL
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.7 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))) (VALUES (CL-TEST::NOTNOT (REMF CL-TEST::X (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE CL-TEST::A))))) CL-TEST::X)))
Expected value:
          T
          (CL-TEST::C CL-TEST::D)
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y (CL-TEST::P (MAKE-ARRAY 1 :INITIAL-ELEMENT (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))))) (VALUES (CL-TEST::NOTNOT (REMF (AREF CL-TEST::P (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 0)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::C)))) (AREF CL-TEST::P 0) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          T
          (CL-TEST::A CL-TEST::B CL-TEST::E CL-TEST::F)
          2
          1
          2
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.ORDER.2 failed
Form: (LET ((CL-TEST::X (COPY-SEQ #(NIL :A :B))) (CL-TEST::PA (VECTOR (LIST :A 1) (LIST :B 2) (LIST :C 3) (LIST :D 4))) (CL-TEST::I 0)) (VALUES (NOT (REMF (AREF CL-TEST::PA (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)))) CL-TEST::PA))
Expected value:
          NIL
          #((:A 1) NIL (:C 3) (:D 4))
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.ORDER.3 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))) (PROGN "See CLtS 5.1.3" (VALUES (REMF CL-TEST::X (PROGN (SETQ CL-TEST::X (LIST (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (QUOTE CL-TEST::A))) CL-TEST::X)))
Expected value:
          NIL
          (CL-TEST::E CL-TEST::F)
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 NIL
Test CL-TEST::REMF.ERROR.1 failed
Form: (VALUES (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE REMF))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE REMF)) (QUOTE (REMF CL-TEST::X (QUOTE CL-TEST::A)))) PROGRAM-ERROR) (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE REMF)) (QUOTE (REMF CL-TEST::X (QUOTE CL-TEST::A))) NIL NIL) PROGRAM-ERROR))
Expected value:
          T
          T
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::INTERSECTION.1
Test CL-TEST::INTERSECTION.2 failed
Form: (INTERSECTION (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::COLLECT CL-TEST::I) NIL)
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.3 failed
Form: (INTERSECTION NIL (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::COLLECT CL-TEST::I))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.4 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::C 7 CL-TEST::B 4 3 CL-TEST::Z)))) (CL-TEST::XCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::X)) (CL-TEST::Y (COPY-LIST (QUOTE (3 CL-TEST::Y CL-TEST::C CL-TEST::Q CL-TEST::Z CL-TEST::A 18)))) (CL-TEST::YCOPY (CL-TEST::MAKE-SCAFFOLD-COPY CL-TEST::Y)) (CL-TEST::RESULT (INTERSECTION CL-TEST::X CL-TEST::Y))) (AND (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::X CL-TEST::XCOPY) (CL-TEST::CHECK-SCAFFOLD-COPY CL-TEST::Y CL-TEST::YCOPY) (+ (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::X COUNT (AND (MEMBER CL-TEST::E CL-TEST::Y) (NOT (MEMBER CL-TEST::E CL-TEST::RESULT)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::RESULT COUNT (OR (NOT (MEMBER CL-TEST::E CL-TEST::X)) (NOT (MEMBER CL-TEST::E CL-TEST::Y)))) (LOOP CL-TEST::FOR CL-TEST::HD CL-TEST::ON CL-TEST::RESULT COUNT (AND (CONSP CL-TEST::HD) (MEMBER (CAR CL-TEST::HD) (CDR CL-TEST::HD)))))))
Expected value:
          0
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::INTERSECTION.5
 CL-TEST::INTERSECTION.6
 CL-TEST::INTERSECTION.7
 CL-TEST::INTERSECTION.8
Test CL-TEST::INTERSECTION.9 failed
Form: (INTERSECTION (LIST (QUOTE CL-TEST::A) (COPY-SEQ "aaa") (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::D) (COPY-SEQ "aaa") (QUOTE CL-TEST::E)) :TEST (FUNCTION EQUAL))
Expected value:
          ("aaa")
Actual value:
          #<System.Internals::Invalid-Arguments 81F5E217> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.9-A failed
Form: (INTERSECTION (LIST (QUOTE CL-TEST::A) (COPY-SEQ "aaa") (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::D) (COPY-SEQ "aaa") (QUOTE CL-TEST::E)) :TEST (QUOTE EQUAL))
Expected value:
          ("aaa")
Actual value:
          #<System.Internals::Invalid-Arguments 81F69917> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.9-B failed
Form: (INTERSECTION (LIST (QUOTE CL-TEST::A) (COPY-SEQ "aaa") (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::D) (COPY-SEQ "aaa") (QUOTE CL-TEST::E)) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::P CL-TEST::Q) (NOT (EQUAL CL-TEST::P CL-TEST::Q)))))
Expected value:
          ("aaa")
Actual value:
          #<System.Internals::Invalid-Arguments 81F755E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.10 failed
Form: (CL-TEST::EQUALT (SORT (INTERSECTION (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 1000 CL-TEST::BY 3 CL-TEST::COLLECT CL-TEST::I) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 1000 CL-TEST::BY 7 CL-TEST::COLLECT CL-TEST::I)) (FUNCTION <)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 1000 CL-TEST::BY 21 CL-TEST::COLLECT CL-TEST::I))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.11 failed
Form: (CL-TEST::EQUALT (SORT (INTERSECTION (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY 5 CL-TEST::COLLECT CL-TEST::I) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY 7 CL-TEST::COLLECT CL-TEST::I) :TEST (FUNCTION (LAMBDA (CL-TEST::A CL-TEST::B) (AND (EQL CL-TEST::A CL-TEST::B) (= (MOD CL-TEST::A 3) 0))))) (FUNCTION <)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY (* 3 5 7) CL-TEST::COLLECT CL-TEST::I))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.11-A failed
Form: (CL-TEST::EQUALT (SORT (INTERSECTION (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY 5 CL-TEST::COLLECT CL-TEST::I) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY 7 CL-TEST::COLLECT CL-TEST::I) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::A CL-TEST::B) (NOT (AND (EQL CL-TEST::A CL-TEST::B) (= (MOD CL-TEST::A 3) 0)))))) (FUNCTION <)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY (* 3 5 7) CL-TEST::COLLECT CL-TEST::I))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
 CL-TEST::INTERSECTION.12
Test CL-TEST::INTERSECTION.13 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (0 5 8 13 31 42)))) (CL-TEST::Y (COPY-LIST (QUOTE (3 5 42 0 7 100 312 33))))) (CL-TEST::EQUALT (SORT (COPY-LIST (INTERSECTION CL-TEST::X CL-TEST::Y)) (FUNCTION <)) (SORT (COPY-LIST (INTERSECTION CL-TEST::X CL-TEST::Y :KEY (FUNCTION 1+))) (FUNCTION <))))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments C1BA0797> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.13-A failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (0 5 8 13 31 42)))) (CL-TEST::Y (COPY-LIST (QUOTE (3 5 42 0 7 100 312 33))))) (CL-TEST::EQUALT (SORT (COPY-LIST (INTERSECTION CL-TEST::X CL-TEST::Y)) (FUNCTION <)) (SORT (COPY-LIST (INTERSECTION CL-TEST::X CL-TEST::Y :KEY (QUOTE 1+))) (FUNCTION <))))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments C1BD7647> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.14 failed
Form: (LET ((CL-TEST::RESULT (INTERSECTION (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (COPY-LIST (QUOTE (CL-TEST::E CL-TEST::C CL-TEST::F CL-TEST::B CL-TEST::G))) :KEY NIL))) (AND (MEMBER (QUOTE CL-TEST::B) CL-TEST::RESULT) (MEMBER (QUOTE CL-TEST::C) CL-TEST::RESULT) (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (MEMBER CL-TEST::X (QUOTE (CL-TEST::B CL-TEST::C))))) CL-TEST::RESULT) T))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments C1BE5E07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.15 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (BLOCK CL-TEST::FAIL (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (EQL CL-TEST::X CL-TEST::Y))))))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1BF74D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.16 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (BLOCK CL-TEST::FAIL (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (EQL CL-TEST::X CL-TEST::Y))))))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1C068E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.17 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (BLOCK CL-TEST::FAIL (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (EQL CL-TEST::X CL-TEST::Y)))))))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1C16477> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.18 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (BLOCK CL-TEST::FAIL (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (EQL CL-TEST::X CL-TEST::Y)))))))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1C25C87> [Actual value: #<error during printing>

 NIL
 CL-TEST::INTERSECTION.TEST-AND-TEST-NOT.1
 CL-TEST::INTERSECTION.TEST-AND-TEST-NOT.2
 CL-TEST::INTERSECTION.ORDER.1
Test CL-TEST::INTERSECTION.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (INTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) :TEST (FUNCTION EQ)) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          NIL
          2
          1
          2
Actual value:
          #<System.Internals::Invalid-Arguments C1C48BD7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (INTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQ)) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQ)))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          NIL
          4
          1
          2
          3
          4
Actual value:
          #<System.Internals::Invalid-Arguments C1C5EEF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.ORDER.4 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (INTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQ)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          NIL
          4
          1
          2
          3
          4
Actual value:
          #<System.Internals::Invalid-Arguments C1C79D17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.ORDER.5 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (INTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION EQ))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          NIL
          4
          1
          2
          3
          4
Actual value:
          #<System.Internals::Invalid-Arguments C1C947F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTILOW-OTHER-KEYS.1 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :BAD T :ALLOW-OTHER-KEYS 1))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1CA9297> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.ALLOW-OTHER-KEYS.2 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1CB4D27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTIONALLOW-OTHER-KEYS.3 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1+ CL-TEST::Y))))))
Expected value:
          NIL
Actual value:
          #<System.Internals::Invalid-Arguments C1CC11C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.ALLOW-OTHER-KEYS.4 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS T))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1CCEC67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.ALLOW-OTHER-KEYS.5 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS NIL))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1CDA1B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.ALLOW-OTHER-KEYS.6 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T))
Expected value:
          (4)
Actual value:
          #<System.Internals::Invalid-Arguments C1CE5C87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.ALLOW-OTHER-KEYS.7 failed
Form: (SORT (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (EQL CL-TEST::X (1- CL-TEST::Y)))))) (FUNCTION <))
Expected value:
          (3 4)
Actual value:
          #<System.Internals::Invalid-Arguments C1CF27D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::INTERSECTION.KEYWORDS.8 failed
Form: (SORT (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (INTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (EQL CL-TEST::X (1- CL-TEST::Y)))) :TEST (FUNCTION EQL))) (FUNCTION <))
Expected value:
          (3 4)
Actual value:
          #<System.Internals::Invalid-Arguments C1D017C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::INTERSECTION.FOLD.1
 CL-TEST::INTERSECTION.ERROR.1
 CL-TEST::INTERSECTION.ERROR.2
 CL-TEST::INTERSECTION.ERROR.3
 CL-TEST::INTERSECTION.ERROR.4
 CL-TEST::INTERSECTION.ERROR.5
 CL-TEST::INTERSECTION.ERROR.6
 CL-TEST::INTERSECTION.ERROR.7
 CL-TEST::INTERSECTION.ERROR.8
 CL-TEST::INTERSECTION.ERROR.9
Test CL-TEST::INTERSECTION.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (INTERSECTION (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (CL-TEST::D CL-TEST::E CL-TEST::F)) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments C1D6CBA7> [Actual value: #<error during printing>

 NIL
 CL-TEST::INTERSECTION.ERROR.11
 CL-TEST::INTERSECTION.ERROR.12Space
 CL-TEST::INTERSECTION.ERROR.13Space
 CL-TEST::INTERSECTION.ERROR.14
Test CL-TEST::NINTERSECTION.1 failed
Form: (NINTERSECTION NIL NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.2 failed
Form: (NINTERSECTION (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::COLLECT CL-TEST::I) NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.3 failed
Form: (CL-TEST::NINTERSECTION-WITH-CHECK NIL (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::COLLECT CL-TEST::I))
Expected value:
          NIL
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.4 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A 1 CL-TEST::C 7 CL-TEST::B 4 3 CL-TEST::Z)))) (CL-TEST::XC (COPY-LIST CL-TEST::X)) (CL-TEST::Y (COPY-LIST (QUOTE (3 CL-TEST::Y CL-TEST::C CL-TEST::Q CL-TEST::Z CL-TEST::A 18)))) (CL-TEST::RESULT (CL-TEST::NINTERSECTION-WITH-CHECK CL-TEST::XC CL-TEST::Y))) (AND (NOT (CL-TEST::EQT CL-TEST::RESULT (QUOTE CL-TEST::FAILED))) (+ (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::X COUNT (AND (MEMBER CL-TEST::E CL-TEST::Y) (NOT (MEMBER CL-TEST::E CL-TEST::RESULT)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN CL-TEST::RESULT COUNT (OR (NOT (MEMBER CL-TEST::E CL-TEST::X)) (NOT (MEMBER CL-TEST::E CL-TEST::Y)))) (LOOP CL-TEST::FOR CL-TEST::HD CL-TEST::ON CL-TEST::RESULT COUNT (AND (CONSP CL-TEST::HD) (MEMBER (CAR CL-TEST::HD) (CDR CL-TEST::HD)))))))
Expected value:
          0
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.5 failed
Form: (LET* ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::A CL-TEST::A)))) (CL-TEST::Y (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::B CL-TEST::B CL-TEST::B)))) (CL-TEST::RESULT (CL-TEST::NINTERSECTION-WITH-CHECK CL-TEST::X CL-TEST::Y))) (AND (NOT (CL-TEST::EQT CL-TEST::RESULT (QUOTE CL-TEST::FAILED))) (MEMBER (QUOTE CL-TEST::A) CL-TEST::RESULT) (NOT (MEMBER (QUOTE CL-TEST::B) CL-TEST::RESULT))))
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.6 failed
Form: (CL-TEST::NINTERSECTION-WITH-CHECK (LIST 1000000000000 (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (LIST (1+ 999999999999) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F)))
Expected value:
          (1000000000000)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.7 failed
Form: (CL-TEST::NINTERSECTION-WITH-CHECK (LIST (QUOTE CL-TEST::A) 10 (QUOTE CL-TEST::B) 17) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) 4 (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) 10 1 13 (QUOTE CL-TEST::Z)))
Expected value:
          (10)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.8 failed
Form: (CL-TEST::NINTERSECTION-WITH-CHECK (LIST (QUOTE CL-TEST::A) (COPY-SEQ "aaa") (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::D) (COPY-SEQ "aaa") (QUOTE CL-TEST::E)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.9 failed
Form: (CL-TEST::NINTERSECTION-WITH-CHECK (LIST (QUOTE CL-TEST::A) (COPY-SEQ "aaa") (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::D) (COPY-SEQ "aaa") (QUOTE CL-TEST::E)) :TEST (FUNCTION EQUAL))
Expected value:
          ("aaa")
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.9-A failed
Form: (CL-TEST::NINTERSECTION-WITH-CHECK (LIST (QUOTE CL-TEST::A) (COPY-SEQ "aaa") (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::D) (COPY-SEQ "aaa") (QUOTE CL-TEST::E)) :TEST (QUOTE EQUAL))
Expected value:
          ("aaa")
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.9-B failed
Form: (NINTERSECTION (LIST (QUOTE CL-TEST::A) (COPY-SEQ "aaa") (QUOTE CL-TEST::B)) (LIST (QUOTE CL-TEST::D) (COPY-SEQ "aaa") (QUOTE CL-TEST::E)) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::P CL-TEST::Q) (NOT (EQUAL CL-TEST::P CL-TEST::Q)))))
Expected value:
          ("aaa")
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.10 failed
Form: (CL-TEST::EQUALT (SORT (LET ((CL-TEST::RESULT (CL-TEST::NINTERSECTION-WITH-CHECK (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 1000 CL-TEST::BY 3 CL-TEST::COLLECT CL-TEST::I) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 1000 CL-TEST::BY 7 CL-TEST::COLLECT CL-TEST::I)))) (IF (CL-TEST::EQT CL-TEST::RESULT (QUOTE CL-TEST::FAILED)) NIL CL-TEST::RESULT)) (FUNCTION <)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 1000 CL-TEST::BY 21 CL-TEST::COLLECT CL-TEST::I))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.11 failed
Form: (CL-TEST::EQUALT (SORT (LET ((CL-TEST::RESULT (CL-TEST::NINTERSECTION-WITH-CHECK (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY 5 CL-TEST::COLLECT CL-TEST::I) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY 7 CL-TEST::COLLECT CL-TEST::I) :TEST (FUNCTION (LAMBDA (CL-TEST::A CL-TEST::B) (AND (EQL CL-TEST::A CL-TEST::B) (= (MOD CL-TEST::A 3) 0))))))) (IF (CL-TEST::EQT CL-TEST::RESULT (QUOTE CL-TEST::FAILED)) NIL CL-TEST::RESULT)) (FUNCTION <)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 999 CL-TEST::BY (* 3 5 7) CL-TEST::COLLECT CL-TEST::I))
Expected value:
          T
Actual value:
          #<Simple-Error No primary methods for the generic function #<Standard-Generic-Function CAR 3C7E55C>. Called with > [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.12 failed
Form: (CL-TEST::NINTERSECTION-12-BODY 100 100)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.13 failed
Form: (LET ((CL-TEST::X (QUOTE (0 5 8 13 31 42))) (CL-TEST::Y (COPY-LIST (QUOTE (3 5 42 0 7 100 312 33))))) (CL-TEST::EQUALT (SORT (COPY-LIST (NINTERSECTION (COPY-LIST CL-TEST::X) CL-TEST::Y)) (FUNCTION <)) (SORT (COPY-LIST (NINTERSECTION (COPY-LIST CL-TEST::X) CL-TEST::Y :KEY (FUNCTION 1+))) (FUNCTION <))))
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.14 failed
Form: (LET ((CL-TEST::RESULT (NINTERSECTION (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (COPY-LIST (QUOTE (CL-TEST::E CL-TEST::C CL-TEST::F CL-TEST::B CL-TEST::G))) :KEY NIL))) (AND (MEMBER (QUOTE CL-TEST::B) CL-TEST::RESULT) (MEMBER (QUOTE CL-TEST::C) CL-TEST::RESULT) (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (MEMBER CL-TEST::X (QUOTE (CL-TEST::B CL-TEST::C))))) CL-TEST::RESULT) T))
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.15 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (BLOCK CL-TEST::FAIL (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (EQL CL-TEST::X CL-TEST::Y))))))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.16 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (BLOCK CL-TEST::FAIL (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (EQL CL-TEST::X CL-TEST::Y))))))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.17 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (BLOCK CL-TEST::FAIL (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (EQL CL-TEST::X CL-TEST::Y)))))))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.18 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (BLOCK CL-TEST::FAIL (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (EQL CL-TEST::X CL-TEST::Y)))))))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
 CL-TEST::NINTERSECTION.TEST-AND-TEST-NOT.1
 CL-TEST::NINTERSECTION.TEST-AND-TEST-NOT.2
Test CL-TEST::NINTERSECTION.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (NINTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D)))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          NIL
          2
          1
          2
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (NINTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) :TEST (FUNCTION EQ)) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          NIL
          2
          1
          2
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (NINTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQ)) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQ)))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          NIL
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ORDER.4 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (NINTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQ)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION IDENTITY))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          NIL
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ORDER.5 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (NINTERSECTION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::C) (QUOTE CL-TEST::D))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION EQ))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          NIL
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ALLOW-OTHER-KEYS.1 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :BAD T :ALLOW-OTHER-KEYS 1))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ALLOW-OTHER-KEYS.2 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ALLOW-OTHER-KEYS.3 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1+ CL-TEST::Y))))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ALLOW-OTHER-KEYS.4 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS T))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ALLOW-OTHER-KEYS.5 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS NIL))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ALLOW-OTHER-KEYS.6 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :BAD T))
Expected value:
          (4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ALLOW-OTHER-KEYS.7 failed
Form: (SORT (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (EQL CL-TEST::X (1- CL-TEST::Y)))))) (FUNCTION <))
Expected value:
          (3 4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.KEYWORDS.8 failed
Form: (SORT (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (EQL CL-TEST::X (1- CL-TEST::Y)))) :TEST (FUNCTION EQL))) (FUNCTION <))
Expected value:
          (3 4)
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ALLOW-OTHER-KEYS.9 failed
Form: (LET ((CL-TEST::LIST1 (LIST 1 2 3 4)) (CL-TEST::LIST2 (LIST 4 5 6 7))) (NINTERSECTION CL-TEST::LIST1 CL-TEST::LIST2 :ALLOW-OTHER-KEYS :FOO :ALSO-BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1+ CL-TEST::Y))))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION NIL NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION NIL NIL 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST 4 5 6) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST 4 5 6) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST 4 5 6) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST 4 5 6) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION (LIST 1 2 3) (LIST* 4 5 6 7)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (NINTERSECTION (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.13 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NINTERSECTION CL-TEST::X (COPY-SEQ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NINTERSECTION.ERROR.14 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NINTERSECTION (COPY-SEQ (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NINTERSECTION> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNION.1
 CL-TEST::UNION.2
 CL-TEST::UNION.3
 CL-TEST::UNION-4
 CL-TEST::UNION.5
 CL-TEST::UNION.6
Test CL-TEST::UNION.6-A failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::Y (COPY-LIST (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQ)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 817CD4F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.7 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::Y (COPY-LIST (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81804567> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.8 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::Y (COPY-LIST (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQUAL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81814A97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.9 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::Y (COPY-LIST (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818251E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.10 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::Y (COPY-LIST (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81835F17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.11 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)))) (CL-TEST::Y (COPY-LIST (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQ))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81846D97> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNION.12
Test CL-TEST::UNION.13 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQUAL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81859967> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.14 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81867C47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.15 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81875FC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.16 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81884AA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.17 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81893237> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.18 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+) :TEST (FUNCTION EQUAL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818A15C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.19 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+) :TEST (FUNCTION EQL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818B0277> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.20 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818BEFC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.21 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818CE477> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.22 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK-AND-KEY CL-TEST::X CL-TEST::Y NIL))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818DD567> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.23 failed
Form: (LET ((CL-TEST::X (COPY-LIST (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::Y (COPY-LIST (QUOTE (10 19 5 3 17 1001 2))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK-AND-KEY CL-TEST::X CL-TEST::Y (QUOTE 1+)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 818EB177> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNION.24
Test CL-TEST::UNION.25 failed
Form: (LET ((CL-TEST::X (CL-TEST::SHUFFLE (QUOTE (1 4 6 10 45 101)))) (CL-TEST::Y (COPY-LIST (QUOTE (102 5 2 11 44 6))))) (LET ((CL-TEST::RESULT (CL-TEST::UNION-WITH-CHECK CL-TEST::X CL-TEST::Y :TEST (FUNCTION (LAMBDA (CL-TEST::A CL-TEST::B) (<= (ABS (- CL-TEST::A CL-TEST::B)) 1)))))) (AND (NOT (CL-TEST::EQT CL-TEST::RESULT (QUOTE CL-TEST::FAILED))) (SORT (SUBLIS (QUOTE ((2 . 1) (5 . 4) (11 . 10) (45 . 44) (102 . 101))) (COPY-LIST CL-TEST::RESULT)) (FUNCTION <)))))
Expected value:
          (1 4 6 10 44 101)
Actual value:
          #<System.Internals::Invalid-Arguments 81E1FDD7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.26 failed
Form: (LET ((CL-TEST::X 1000) (CL-TEST::Y 1000)) (LOOP CL-TEST::WHILE (NOT (TYPEP CL-TEST::X (QUOTE BIGNUM))) DO (PROGN (SETF CL-TEST::X (* CL-TEST::X CL-TEST::X)) (SETF CL-TEST::Y (* CL-TEST::Y CL-TEST::Y)))) (CL-TEST::NOTNOT-MV (OR (CL-TEST::EQT CL-TEST::X CL-TEST::Y) (EQL (LENGTH (CL-TEST::UNION-WITH-CHECK (LIST CL-TEST::X) (LIST CL-TEST::X))) 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Full bignum * not implemented.> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNION.27
Test CL-TEST::UNION.28 failed
Form: (BLOCK CL-TEST::FAIL (SORT (CL-TEST::UNION-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (EQL CL-TEST::X CL-TEST::Y)))) (FUNCTION <)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<System.Internals::Invalid-Arguments 81E4BA77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.29 failed
Form: (BLOCK CL-TEST::FAIL (SORT (CL-TEST::UNION-WITH-CHECK-AND-KEY (LIST 1 2 3) (LIST 4 5 6) (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (EQL CL-TEST::X CL-TEST::Y)))) (FUNCTION <)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<System.Internals::Invalid-Arguments 81E59F57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.30 failed
Form: (BLOCK CL-TEST::FAIL (SORT (CL-TEST::UNION-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (EQL CL-TEST::X CL-TEST::Y))))) (FUNCTION <)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<System.Internals::Invalid-Arguments 81E68DE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.31 failed
Form: (BLOCK CL-TEST::FAIL (SORT (CL-TEST::UNION-WITH-CHECK-AND-KEY (LIST 1 2 3) (LIST 4 5 6) (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (EQL CL-TEST::X CL-TEST::Y))))) (FUNCTION <)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<System.Internals::Invalid-Arguments 81E776C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNION.TEST-AND-TEST-NOT.1
 CL-TEST::UNION.TEST-AND-TEST-NOT.2
 CL-TEST::UNION.ORDER.1
Test CL-TEST::UNION.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (UNION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (2 5 8)))) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION IDENTITY))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (1 2 3 5 8)
          4
          1
          2
          3
          4
Actual value:
          #<System.Internals::Invalid-Arguments 81E9C187> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (UNION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (2 5 8)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION EQL))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (1 2 3 5 8)
          4
          1
          2
          3
          4
Actual value:
          #<System.Internals::Invalid-Arguments 81EB6647> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.ALLOW-OTHER-KEYS.1 failed
Form: (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :BAD T :ALLOW-OTHER-KEYS "yes") (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<System.Internals::Invalid-Arguments 81ECAA07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.ALLOW-OTHER-KEYS.2 failed
Form: (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALSO-BAD T) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<System.Internals::Invalid-Arguments 81ED55F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.ALLOW-OTHER-KEYS.3 failed
Form: (SORT (UNION (LIST 1 2 3) (LIST 1 2 3) :ALLOW-OTHER-KEYS T :ALSO-BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (+ CL-TEST::Y 100))))) (FUNCTION <))
Expected value:
          (1 1 2 2 3 3)
Actual value:
          #<System.Internals::Invalid-Arguments 81EE08D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.ALLOW-OTHER-KEYS.4 failed
Form: (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<System.Internals::Invalid-Arguments 81EECCA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.ALLOW-OTHER-KEYS.5 failed
Form: (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS NIL) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<System.Internals::Invalid-Arguments 81EF71D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.ALLOW-OTHER-KEYS.6 failed
Form: (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<System.Internals::Invalid-Arguments 81F01A27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.ALLOW-OTHER-KEYS.7 failed
Form: (SORT (UNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<System.Internals::Invalid-Arguments 81F0CA57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNION.KEYWORDS.9 failed
Form: (SORT (UNION (LIST 1 2 3) (LIST 1 2 3) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (+ CL-TEST::Y 100)))) :TEST (FUNCTION EQL)) (FUNCTION <))
Expected value:
          (1 1 2 2 3 3)
Actual value:
          #<System.Internals::Invalid-Arguments 81F18457> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNION.FOLD.1
 CL-TEST::UNION.ERROR.1
 CL-TEST::UNION.ERROR.2
 CL-TEST::UNION.ERROR.3
 CL-TEST::UNION.ERROR.4
 CL-TEST::UNION.ERROR.5
 CL-TEST::UNION.ERROR.6
 CL-TEST::UNION.ERROR.7
 CL-TEST::UNION.ERROR.8
 CL-TEST::UNION.ERROR.9
Test CL-TEST::UNION.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (UNION (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81F7FD07> [Actual value: #<error during printing>

 NIL
 CL-TEST::UNION.ERROR.11
 CL-TEST::UNION.ERROR.12Space
 CL-TEST::UNION.ERROR.13Space
 CL-TEST::UNION.ERROR.14
Test CL-TEST::NUNION.1 failed
Form: (NUNION NIL NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.2 failed
Form: (CL-TEST::NUNION-WITH-COPY (LIST (QUOTE CL-TEST::A)) NIL)
Expected value:
          (CL-TEST::A)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.3 failed
Form: (CL-TEST::NUNION-WITH-COPY (LIST (QUOTE CL-TEST::A)) (LIST (QUOTE CL-TEST::A)))
Expected value:
          (CL-TEST::A)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.4 failed
Form: (CL-TEST::NUNION-WITH-COPY (LIST 1) (LIST 1))
Expected value:
          (1)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.5 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (CL-TEST::NUNION-WITH-COPY (LIST CL-TEST::X) (LIST CL-TEST::X)))
Expected value:
          ((CL-TEST::A CL-TEST::B))
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.6 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::Y (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.6-A failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::Y (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQ)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.7 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::Y (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.8 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::Y (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQUAL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.9 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::Y (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.10 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::Y (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.11 failed
Form: (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F))) (CL-TEST::Y (QUOTE (CL-TEST::Z CL-TEST::C CL-TEST::Y CL-TEST::A CL-TEST::V CL-TEST::B)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQ))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.12 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.13 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQUAL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.14 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST (FUNCTION EQL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.15 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.16 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST-NOT (COMPLEMENT (FUNCTION EQL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.17 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.18 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+) :TEST (FUNCTION EQUAL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.19 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+) :TEST (FUNCTION EQL)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.20 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.21 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY-AND-KEY CL-TEST::X CL-TEST::Y (FUNCTION 1+) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.22 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY-AND-KEY CL-TEST::X CL-TEST::Y NIL))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.23 failed
Form: (LET ((CL-TEST::X (QUOTE (1 2 3 4 5 6 7))) (CL-TEST::Y (QUOTE (10 19 5 3 17 1001 2)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY-AND-KEY CL-TEST::X CL-TEST::Y (QUOTE 1+)))) (CL-TEST::CHECK-UNION CL-TEST::X CL-TEST::Y CL-TEST::RESULT)))
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.24 failed
Form: (CL-TEST::DO-RANDOM-NUNIONS 100 100 200)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.25 failed
Form: (LET ((CL-TEST::X (CL-TEST::SHUFFLE (QUOTE (1 4 6 10 45 101)))) (CL-TEST::Y (QUOTE (102 5 2 11 44 6)))) (LET ((CL-TEST::RESULT (CL-TEST::NUNION-WITH-COPY CL-TEST::X CL-TEST::Y :TEST (FUNCTION (LAMBDA (CL-TEST::A CL-TEST::B) (<= (ABS (- CL-TEST::A CL-TEST::B)) 1)))))) (SORT (SUBLIS (QUOTE ((2 . 1) (5 . 4) (11 . 10) (45 . 44) (102 . 101))) (COPY-LIST CL-TEST::RESULT)) (FUNCTION <))))
Expected value:
          (1 4 6 10 44 101)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.26 failed
Form: (LET ((CL-TEST::X 1000) (CL-TEST::Y 1000)) (LOOP CL-TEST::WHILE (NOT (TYPEP CL-TEST::X (QUOTE BIGNUM))) DO (PROGN (SETF CL-TEST::X (* CL-TEST::X CL-TEST::X)) (SETF CL-TEST::Y (* CL-TEST::Y CL-TEST::Y)))) (CL-TEST::NOTNOT-MV (OR (CL-TEST::EQT CL-TEST::X CL-TEST::Y) (EQL (LENGTH (CL-TEST::NUNION-WITH-COPY (LIST CL-TEST::X) (LIST CL-TEST::X))) 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Full bignum * not implemented.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.27 failed
Form: (CL-TEST::NUNION-WITH-COPY (LIST (COPY-SEQ "aa")) (LIST (COPY-SEQ "aa")))
Expected value:
          ("aa" "aa")
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
 CL-TEST::NUNION.TEST-AND-TEST-NOT.1
 CL-TEST::NUNION.TEST-AND-TEST-NOT.2
Test CL-TEST::NUNION.28 failed
Form: (BLOCK CL-TEST::FAIL (SORT (CL-TEST::NUNION-WITH-COPY (QUOTE (1 2 3)) (QUOTE (4 5 6)) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (EQL CL-TEST::X CL-TEST::Y)))) (FUNCTION <)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.29 failed
Form: (BLOCK CL-TEST::FAIL (SORT (CL-TEST::NUNION-WITH-COPY-AND-KEY (QUOTE (1 2 3)) (QUOTE (4 5 6)) (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (EQL CL-TEST::X CL-TEST::Y)))) (FUNCTION <)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.30 failed
Form: (BLOCK CL-TEST::FAIL (SORT (CL-TEST::NUNION-WITH-COPY (QUOTE (1 2 3)) (QUOTE (4 5 6)) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (EQL CL-TEST::X CL-TEST::Y))))) (FUNCTION <)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.31 failed
Form: (BLOCK CL-TEST::FAIL (SORT (CL-TEST::NUNION-WITH-COPY-AND-KEY (QUOTE (1 2 3)) (QUOTE (4 5 6)) (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (EQL CL-TEST::X CL-TEST::Y))))) (FUNCTION <)))
Expected value:
          (1 2 3 4 5 6)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (SORT (NUNION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (2 5 8))))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (1 2 3 5 8)
          2
          1
          2
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (NUNION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (2 5 8)))) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION IDENTITY))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (1 2 3 5 8)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (NUNION (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (COPY-LIST (QUOTE (1 3 5)))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (COPY-LIST (QUOTE (2 5 8)))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION IDENTITY)) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION EQL))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (1 2 3 5 8)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ALLOW-OTHER-KEYS.1 failed
Form: (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :BAD T :ALLOW-OTHER-KEYS "yes") (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ALLOW-OTHER-KEYS.2 failed
Form: (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALSO-BAD T) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ALLOW-OTHER-KEYS.3 failed
Form: (SORT (NUNION (LIST 1 2 3) (LIST 1 2 3) :ALLOW-OTHER-KEYS T :ALSO-BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (+ CL-TEST::Y 100))))) (FUNCTION <))
Expected value:
          (1 1 2 2 3 3)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ALLOW-OTHER-KEYS.4 failed
Form: (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ALLOW-OTHER-KEYS.5 failed
Form: (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS NIL) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ALLOW-OTHER-KEYS.6 failed
Form: (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ALLOW-OTHER-KEYS.7 failed
Form: (SORT (NUNION (LIST 7 9 1 5) (LIST 10 11 9 20 1 2) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1) (FUNCTION <))
Expected value:
          (1 2 5 7 9 10 11 20)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.KEYWORDS.9 failed
Form: (SORT (NUNION (LIST 1 2 3) (LIST 1 2 3) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (+ CL-TEST::Y 100)))) :TEST (FUNCTION EQL)) (FUNCTION <))
Expected value:
          (1 1 2 2 3 3)
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION NIL NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION NIL NIL 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (NUNION (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.13 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NUNION CL-TEST::X (LIST 1 2 3)))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NUNION.ERROR.14 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NUNION (LIST 1 2 3) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NUNION> [Actual value: #<error during printing>

 NIL
 CL-TEST::SET-DIFFERENCE.1
 CL-TEST::SET-DIFFERENCE.2
 CL-TEST::SET-DIFFERENCE.3
 CL-TEST::SET-DIFFERENCE.4
 CL-TEST::SET-DIFFERENCE.5
Test CL-TEST::SET-DIFFERENCE.6 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :KEY NIL)
Expected value:
          (CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments C1A0C1F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.7 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments C1A3E717> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.8 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments C1A4A617> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.9 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQUAL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments C1A56577> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.10 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments C1A62477> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.11 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments C1A6E1C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.12 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQUAL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<System.Internals::Invalid-Arguments C1A79F77> [Actual value: #<error during printing>

 NIL
 CL-TEST::SET-DIFFERENCE.13
Test CL-TEST::SET-DIFFERENCE.14 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3))) (QUOTE ((CL-TEST::A . 1) (CL-TEST::C . 3))) :KEY (QUOTE CAR))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<System.Internals::Invalid-Arguments 818B8037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.15 failed
Form: (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3))) (QUOTE ((CL-TEST::A . 1) (CL-TEST::C . 3))) :KEY (FUNCTION CAR))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<System.Internals::Invalid-Arguments 818EBA67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.16 failed
Form: (BLOCK CL-TEST::FAIL (SORT (COPY-LIST (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (OR (MEMBER CL-TEST::X (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))) (MEMBER CL-TEST::Y (QUOTE (1 2 3 4)))) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (CL-TEST::EQT CL-TEST::X CL-TEST::Y))))) (FUNCTION <)))
Expected value:
          (1 2 3 4)
Actual value:
          #<System.Internals::Invalid-Arguments 818F7F07> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.17 failed
Form: (BLOCK CL-TEST::FAIL (SORT (COPY-LIST (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (OR (MEMBER CL-TEST::X (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))) (MEMBER CL-TEST::Y (QUOTE (1 2 3 4)))) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (CL-TEST::EQT CL-TEST::X CL-TEST::Y))))) (FUNCTION <)))
Expected value:
          (1 2 3 4)
Actual value:
          #<System.Internals::Invalid-Arguments 8190AA77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.18 failed
Form: (BLOCK CL-TEST::FAIL (SORT (COPY-LIST (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (OR (MEMBER CL-TEST::X (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))) (MEMBER CL-TEST::Y (QUOTE (1 2 3 4)))) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (CL-TEST::EQT CL-TEST::X CL-TEST::Y)))))) (FUNCTION <)))
Expected value:
          (1 2 3 4)
Actual value:
          #<System.Internals::Invalid-Arguments 8191DCF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.19 failed
Form: (BLOCK CL-TEST::FAIL (SORT (COPY-LIST (CL-TEST::SET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (OR (MEMBER CL-TEST::X (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))) (MEMBER CL-TEST::Y (QUOTE (1 2 3 4)))) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (CL-TEST::EQT CL-TEST::X CL-TEST::Y)))))) (FUNCTION <)))
Expected value:
          (1 2 3 4)
Actual value:
          #<System.Internals::Invalid-Arguments 81930997> [Actual value: #<error during printing>

 NIL
 CL-TEST::SET-DIFFERENCE.TEST-AND-TEST-NOT.1
 CL-TEST::SET-DIFFERENCE.TEST-AND-TEST-NOT.2
 CL-TEST::SET-DIFFERENCE.ORDER.1
Test CL-TEST::SET-DIFFERENCE.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SET-DIFFERENCE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 2 3 4)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1- CL-TEST::Y)))))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (4)
          3
          1
          2
          3
Actual value:
          #<System.Internals::Invalid-Arguments 81958B27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SET-DIFFERENCE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 2 3 4)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1- CL-TEST::Y))))) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) NIL)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (4)
          4
          1
          2
          3
          4
Actual value:
          #<System.Internals::Invalid-Arguments 819713D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.ALLOW-OTHER-KEYS.1 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :BAD T :ALLOW-OTHER-KEYS T)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81985CD7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.ALLOW-OTHER-KEYS.2 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :BAD T)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<System.Internals::Invalid-Arguments 81990C27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.ALLOW-OTHER-KEYS.3 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1- CL-TEST::Y)))))) (FUNCTION <))
Expected value:
          (4 5)
Actual value:
          #<System.Internals::Invalid-Arguments 8199C287> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.ALLOW-OTHER-KEYS.4 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<System.Internals::Invalid-Arguments 819A8F97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.ALLOW-OTHER-KEYS.5 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS NIL)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<System.Internals::Invalid-Arguments 819B39A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.ALLOW-OTHER-KEYS.6 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<System.Internals::Invalid-Arguments 819BE6D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.ALLOW-OTHER-KEYS.7 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<System.Internals::Invalid-Arguments 819C9BE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.KEYWORDS.8 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :TEST (FUNCTION EQL) :TEST (COMPLEMENT (FUNCTION EQL)))) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<System.Internals::Invalid-Arguments 819D57F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-DIFFERENCE.KEYWORDS.9 failed
Form: (SORT (COPY-LIST (SET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :TEST (COMPLEMENT (FUNCTION EQL)) :TEST (FUNCTION EQL))) (FUNCTION <))
Expected value:
          NIL
Actual value:
          #<System.Internals::Invalid-Arguments 819E0F67> [Actual value: #<error during printing>

 NIL
 CL-TEST::SET-DIFFERENCE.FOLD.1
 CL-TEST::SET-DIFFERENCE.ERROR.1
 CL-TEST::SET-DIFFERENCE.ERROR.2
 CL-TEST::SET-DIFFERENCE.ERROR.3
 CL-TEST::SET-DIFFERENCE.ERROR.4
 CL-TEST::SET-DIFFERENCE.ERROR.5
 CL-TEST::SET-DIFFERENCE.ERROR.6
 CL-TEST::SET-DIFFERENCE.ERROR.7
 CL-TEST::SET-DIFFERENCE.ERROR.8
 CL-TEST::SET-DIFFERENCE.ERROR.9
Test CL-TEST::SET-DIFFERENCE.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-DIFFERENCE (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments 81A4B0E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SET-DIFFERENCE.ERROR.11
 CL-TEST::SET-DIFFERENCE.ERROR.12Space
 CL-TEST::SET-DIFFERENCE.ERROR.13Space
 CL-TEST::SET-DIFFERENCE.ERROR.14
Test CL-TEST::NSET-DIFFERENCE.1 failed
Form: (NSET-DIFFERENCE NIL NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.2 failed
Form: (LET ((CL-TEST::RESULT (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) NIL))) (CL-TEST::CHECK-NSET-DIFFERENCE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) NIL CL-TEST::RESULT))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.3 failed
Form: (LET ((CL-TEST::RESULT (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)) (QUOTE (CL-TEST::F CL-TEST::B CL-TEST::D))))) (CL-TEST::CHECK-NSET-DIFFERENCE (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)) (QUOTE (CL-TEST::F CL-TEST::B CL-TEST::D)) CL-TEST::RESULT))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.4 failed
Form: (SORT (COPY-LIST (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (CL-TEST::SHUFFLE (QUOTE (1 2 3 4 5 6 7 8))) (QUOTE (10 101 4 74 2 1391 7 17831)))) (FUNCTION <))
Expected value:
          (1 3 5 6 8)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.5 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK NIL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.6 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :KEY NIL)
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.7 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.8 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.9 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQUAL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.10 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.11 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.12 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQUAL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.13 failed
Form: (CL-TEST::DO-RANDOM-NSET-DIFFERENCES 100 100)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.14 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3))) (QUOTE ((CL-TEST::A . 1) (CL-TEST::C . 3))) :KEY (QUOTE CAR))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.15 failed
Form: (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3))) (QUOTE ((CL-TEST::A . 1) (CL-TEST::C . 3))) :KEY (FUNCTION CAR))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.16 failed
Form: (BLOCK CL-TEST::FAIL (SORT (COPY-LIST (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (OR (MEMBER CL-TEST::X (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))) (MEMBER CL-TEST::Y (QUOTE (1 2 3 4)))) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (CL-TEST::EQT CL-TEST::X CL-TEST::Y))))) (FUNCTION <)))
Expected value:
          (1 2 3 4)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.17 failed
Form: (BLOCK CL-TEST::FAIL (SORT (COPY-LIST (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (OR (MEMBER CL-TEST::X (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))) (MEMBER CL-TEST::Y (QUOTE (1 2 3 4)))) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (CL-TEST::EQT CL-TEST::X CL-TEST::Y))))) (FUNCTION <)))
Expected value:
          (1 2 3 4)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.18 failed
Form: (BLOCK CL-TEST::FAIL (SORT (COPY-LIST (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (OR (MEMBER CL-TEST::X (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))) (MEMBER CL-TEST::Y (QUOTE (1 2 3 4)))) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (CL-TEST::EQT CL-TEST::X CL-TEST::Y)))))) (FUNCTION <)))
Expected value:
          (1 2 3 4)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.19 failed
Form: (BLOCK CL-TEST::FAIL (SORT (COPY-LIST (CL-TEST::NSET-DIFFERENCE-WITH-CHECK (QUOTE (1 2 3 4)) (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (OR (MEMBER CL-TEST::X (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))) (MEMBER CL-TEST::Y (QUOTE (1 2 3 4)))) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) (NOT (CL-TEST::EQT CL-TEST::X CL-TEST::Y)))))) (FUNCTION <)))
Expected value:
          (1 2 3 4)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
 CL-TEST::NSET-DIFFERENCE.TEST-AND-TEST-NOT.1
 CL-TEST::NSET-DIFFERENCE.TEST-AND-TEST-NOT.2
Test CL-TEST::NSET-DIFFERENCE.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (NSET-DIFFERENCE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 2 3 4))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (1)
          2
          1
          2
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (NSET-DIFFERENCE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 2 3 4)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1- CL-TEST::Y)))))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (4)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (NSET-DIFFERENCE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 2 3 4)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1- CL-TEST::Y))))) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) NIL)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (4)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ALLOW-OTHER-KEYS.1 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :BAD T :ALLOW-OTHER-KEYS T)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ALLOW-OTHER-KEYS.2 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :BAD T)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ALLOW-OTHER-KEYS.3 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1- CL-TEST::Y)))))) (FUNCTION <))
Expected value:
          (4 5)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ALLOW-OTHER-KEYS.4 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ALLOW-OTHER-KEYS.5 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS NIL)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ALLOW-OTHER-KEYS.6 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ALLOW-OTHER-KEYS.7 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1)) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.KEYWORDS.8 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :TEST (FUNCTION EQL) :TEST (COMPLEMENT (FUNCTION EQL)))) (FUNCTION <))
Expected value:
          (1 5)
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.KEYWORDS.9 failed
Form: (SORT (COPY-LIST (NSET-DIFFERENCE (LIST 1 2 3 4 5) (LIST 2 3 4) :TEST (COMPLEMENT (FUNCTION EQL)) :TEST (FUNCTION EQL))) (FUNCTION <))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE NIL NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE NIL NIL 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-DIFFERENCE (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.13 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NSET-DIFFERENCE (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-DIFFERENCE.ERROR.14 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NSET-DIFFERENCE CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-DIFFERENCE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.1 failed
Form: (SET-EXCLUSIVE-OR NIL NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.2 failed
Form: (LET ((CL-TEST::RESULT (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) NIL))) (CL-TEST::CHECK-SET-EXCLUSIVE-OR (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) NIL CL-TEST::RESULT))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.3 failed
Form: (LET ((CL-TEST::RESULT (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)) (QUOTE (CL-TEST::F CL-TEST::B CL-TEST::D))))) (CL-TEST::CHECK-SET-EXCLUSIVE-OR (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)) (QUOTE (CL-TEST::F CL-TEST::B CL-TEST::D)) CL-TEST::RESULT))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.4 failed
Form: (SORT (COPY-LIST (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (CL-TEST::SHUFFLE (QUOTE (1 2 3 4 5 6 7 8))) (QUOTE (10 101 4 74 2 1391 7 17831)))) (FUNCTION <))
Expected value:
          (1 3 5 6 8 10 74 101 1391 17831)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.5 failed
Form: (CL-TEST::CHECK-SET-EXCLUSIVE-OR NIL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK NIL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.6 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :KEY NIL)
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.7 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.7-A failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :TEST (FUNCTION EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.8 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.8-A failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::E CL-TEST::D CL-TEST::B CL-TEST::A)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :TEST (FUNCTION EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.8-B failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST-NOT (COMPLEMENT (FUNCTION EQL)))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.9 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQUAL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.10 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.11 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.12 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQUAL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.14 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3012))) (QUOTE ((CL-TEST::A . 10) (CL-TEST::C . 3))) :KEY (QUOTE CAR))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.15 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((CL-TEST::A . CL-TEST::XX) (CL-TEST::B . 2) (CL-TEST::C . 3))) (QUOTE ((CL-TEST::A . 1) (CL-TEST::C . 3313))) :KEY (FUNCTION CAR))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.16 failed
Form: (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((CL-TEST::A . CL-TEST::XX) (CL-TEST::B . 2) (CL-TEST::C . 3))) (QUOTE ((CL-TEST::A . 1) (CL-TEST::C . 3313))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQL)))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.17 failed
Form: (LET ((CL-TEST::LIST1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::LIST2 (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))) (BLOCK CL-TEST::FAIL (CL-TEST::NOTNOT-MV (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK CL-TEST::LIST1 CL-TEST::LIST2 :TEST (FUNCTION (LAMBDA (CL-TEST::S1 CL-TEST::S2) (WHEN (OR (MEMBER CL-TEST::S1 CL-TEST::LIST2) (MEMBER CL-TEST::S2 CL-TEST::LIST1)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAILED)))))))))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.17-A failed
Form: (LET ((CL-TEST::LIST1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::LIST2 (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))) (BLOCK CL-TEST::FAIL (CL-TEST::NOTNOT-MV (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK CL-TEST::LIST1 CL-TEST::LIST2 :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::S1 CL-TEST::S2) (WHEN (OR (MEMBER CL-TEST::S1 CL-TEST::LIST2) (MEMBER CL-TEST::S2 CL-TEST::LIST1)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAILED)))))))))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.18 failed
Form: (LET ((CL-TEST::LIST1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::LIST2 (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))) (BLOCK CL-TEST::FAIL (CL-TEST::NOTNOT-MV (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK CL-TEST::LIST1 CL-TEST::LIST2 :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::S1 CL-TEST::S2) (WHEN (OR (MEMBER CL-TEST::S1 CL-TEST::LIST2) (MEMBER CL-TEST::S2 CL-TEST::LIST1)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAILED))) T))))))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.18-A failed
Form: (LET ((CL-TEST::LIST1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::LIST2 (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))) (BLOCK CL-TEST::FAIL (CL-TEST::NOTNOT-MV (CL-TEST::SET-EXCLUSIVE-OR-WITH-CHECK CL-TEST::LIST1 CL-TEST::LIST2 :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::S1 CL-TEST::S2) (WHEN (OR (MEMBER CL-TEST::S1 CL-TEST::LIST2) (MEMBER CL-TEST::S2 CL-TEST::LIST1)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAILED))) T))))))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
 CL-TEST::SET-EXCLUSIVE-OR.TEST-AND-TEST-NOT.1
 CL-TEST::SET-EXCLUSIVE-OR.TEST-AND-TEST-NOT.2
Test CL-TEST::SET-EXCLUSIVE-OR.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (2 4 6 10)
          2
          1
          2
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (2 4 6 10)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) NIL)) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (2 4 6 10)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ORDER.4 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10)) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) NIL) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION EQL))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (2 4 6 10)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ORDER.5 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (SET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10)) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) NIL) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL)))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (2 4 6 10)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.ALLOW-OTHER-KEYS.1 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :BAD T :ALLOW-OTHER-KEYS T) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.ALLOW-OTHER-KEYS.2 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :BAD T) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.ALLOW-OTHER-KEYS.3 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1- CL-TEST::Y))))) (FUNCTION <))
Expected value:
          (1 6)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.ALLOW-OTHER-KEYS.4 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.ALLOW-OTHER-KEYS.5 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS NIL) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.ALLOW-OTHER-KEYS.6 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.ALLOW-OTHER-KEYS.7 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.KEYWORDS.8 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :TEST (FUNCTION EQL) :TEST (FUNCTION /=)) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE.KEYWORDS.9 failed
Form: (SORT (SET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :TEST (FUNCTION /=) :TEST (FUNCTION EQL)) (FUNCTION <))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (SET-EXCLUSIVE-OR (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)) (QUOTE (CL-TEST::B CL-TEST::X CL-TEST::E CL-TEST::Y CL-TEST::Z CL-TEST::C))))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL NIL 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (SET-EXCLUSIVE-OR (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.13 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (SET-EXCLUSIVE-OR CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SET-EXCLUSIVE-OR.ERROR.14 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (SET-EXCLUSIVE-OR (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RANDOM-SET-EXCLUSIVE-OR failed
Form: (CL-TEST::RANDOM-SET-EXCLUSIVE-OR-TEST 10 100)
Expected value:
          NIL
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.1 failed
Form: (NSET-EXCLUSIVE-OR NIL NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.2 failed
Form: (LET ((CL-TEST::RESULT (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) NIL))) (CL-TEST::CHECK-SET-EXCLUSIVE-OR (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) NIL CL-TEST::RESULT))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.3 failed
Form: (LET ((CL-TEST::RESULT (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)) (QUOTE (CL-TEST::F CL-TEST::B CL-TEST::D))))) (CL-TEST::CHECK-SET-EXCLUSIVE-OR (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)) (QUOTE (CL-TEST::F CL-TEST::B CL-TEST::D)) CL-TEST::RESULT))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.4 failed
Form: (SORT (COPY-LIST (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (CL-TEST::SHUFFLE (QUOTE (1 2 3 4 5 6 7 8))) (QUOTE (10 101 4 74 2 1391 7 17831)))) (FUNCTION <))
Expected value:
          (1 3 5 6 8 10 74 101 1391 17831)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.5 failed
Form: (CL-TEST::CHECK-SET-EXCLUSIVE-OR NIL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK NIL (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H))))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.6 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :KEY NIL)
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.7 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.7-A failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :TEST (FUNCTION EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.8 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.8-A failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::E CL-TEST::D CL-TEST::B CL-TEST::A)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :TEST (FUNCTION EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.8-B failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST-NOT (COMPLEMENT (FUNCTION EQL)))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.9 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (FUNCTION EQUAL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.10 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQ))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.11 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.12 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) (QUOTE (CL-TEST::D CL-TEST::A CL-TEST::B CL-TEST::E)) :TEST (QUOTE EQUAL))
Expected value:
          (CL-TEST::C)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.14 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((CL-TEST::A . 1) (CL-TEST::B . 2) (CL-TEST::C . 3012))) (QUOTE ((CL-TEST::A . 10) (CL-TEST::C . 3))) :KEY (QUOTE CAR))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.15 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((CL-TEST::A . CL-TEST::XX) (CL-TEST::B . 2) (CL-TEST::C . 3))) (QUOTE ((CL-TEST::A . 1) (CL-TEST::C . 3313))) :KEY (FUNCTION CAR))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.16 failed
Form: (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK (QUOTE ((CL-TEST::A . CL-TEST::XX) (CL-TEST::B . 2) (CL-TEST::C . 3))) (QUOTE ((CL-TEST::A . 1) (CL-TEST::C . 3313))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQL)))
Expected value:
          ((CL-TEST::B . 2))
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.17 failed
Form: (LET ((CL-TEST::LIST1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::LIST2 (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))) (BLOCK CL-TEST::FAIL (CL-TEST::NOTNOT-MV (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK CL-TEST::LIST1 CL-TEST::LIST2 :TEST (FUNCTION (LAMBDA (CL-TEST::S1 CL-TEST::S2) (WHEN (OR (MEMBER CL-TEST::S1 CL-TEST::LIST2) (MEMBER CL-TEST::S2 CL-TEST::LIST1)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAILED)))))))))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.17-A failed
Form: (LET ((CL-TEST::LIST1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::LIST2 (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))) (BLOCK CL-TEST::FAIL (CL-TEST::NOTNOT-MV (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK CL-TEST::LIST1 CL-TEST::LIST2 :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::S1 CL-TEST::S2) (WHEN (OR (MEMBER CL-TEST::S1 CL-TEST::LIST2) (MEMBER CL-TEST::S2 CL-TEST::LIST1)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAILED)))))))))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.18 failed
Form: (LET ((CL-TEST::LIST1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::LIST2 (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))) (BLOCK CL-TEST::FAIL (CL-TEST::NOTNOT-MV (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK CL-TEST::LIST1 CL-TEST::LIST2 :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::S1 CL-TEST::S2) (WHEN (OR (MEMBER CL-TEST::S1 CL-TEST::LIST2) (MEMBER CL-TEST::S2 CL-TEST::LIST1)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAILED))) T))))))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.18-A failed
Form: (LET ((CL-TEST::LIST1 (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::LIST2 (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)))) (BLOCK CL-TEST::FAIL (CL-TEST::NOTNOT-MV (CL-TEST::NSET-EXCLUSIVE-OR-WITH-CHECK CL-TEST::LIST1 CL-TEST::LIST2 :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::S1 CL-TEST::S2) (WHEN (OR (MEMBER CL-TEST::S1 CL-TEST::LIST2) (MEMBER CL-TEST::S2 CL-TEST::LIST1)) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAILED))) T))))))
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
 CL-TEST::NSET-EXCLUSIVE-OR.TEST-AND-TEST-NOT.1
 CL-TEST::NSET-EXCLUSIVE-OR.TEST-AND-TEST-NOT.2
Test CL-TEST::NSET-EXCLUSIVE-OR.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          (2 4 6 10)
          2
          1
          2
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          (2 4 6 10)
          3
          1
          2
          3
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10)) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) NIL)) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (2 4 6 10)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ORDER.4 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10)) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) NIL) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION EQL))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (2 4 6 10)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ORDER.5 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (SORT (NSET-EXCLUSIVE-OR (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (LIST 1 2 3 4)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (LIST 1 3 6 10)) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) NIL) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (COMPLEMENT (FUNCTION EQL)))) (FUNCTION <)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          (2 4 6 10)
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.1 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :BAD T :ALLOW-OTHER-KEYS T) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.2 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :BAD T) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.3 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= CL-TEST::X (1- CL-TEST::Y))))) (FUNCTION <))
Expected value:
          (1 6)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.4 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.5 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS NIL) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.6 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.ALLOW-OTHER-KEYS.7 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL (QUOTE #:X) 1) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.KEYWORDS.8 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :TEST (FUNCTION EQL) :TEST (FUNCTION /=)) (FUNCTION <))
Expected value:
          (1 2 5 6)
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE.KEYWORDS.9 failed
Form: (SORT (NSET-EXCLUSIVE-OR (LIST 1 2 3 4) (LIST 3 4 5 6) :TEST (FUNCTION /=) :TEST (FUNCTION EQL)) (FUNCTION <))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RANDOM-NSET-EXCLUSIVE-OR failed
Form: (CL-TEST::RANDOM-SET-EXCLUSIVE-OR-TEST 10 1000 (QUOTE NSET-EXCLUSIVE-OR))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL NIL 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (NSET-EXCLUSIVE-OR (LIST* 1 2 3) (LIST 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.13 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NSET-EXCLUSIVE-OR CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B))))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::NSET-EXCLUSIVE-OR.ERROR.14 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (NSET-EXCLUSIVE-OR (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NSET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.1 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (COPY-TREE (QUOTE (78))) CL-TEST::CONS-TEST-24-VAR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.2 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (COPY-TREE (QUOTE ((8 9)))) CL-TEST::CONS-TEST-24-VAR)
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.3 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (COPY-TREE (QUOTE ((8 9)))) CL-TEST::CONS-TEST-24-VAR :TEST (QUOTE EQUAL))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.4 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (LIST 78 (COPY-SEQ "Z")) CL-TEST::CONS-TEST-24-VAR :TEST (FUNCTION EQUALP))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.5 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (LIST 1) (LIST 0 2 3 4) :KEY (FUNCTION (LAMBDA (CL-TEST::I) (FLOOR (/ CL-TEST::I 2)))))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.6 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (LIST 1 6) (LIST 0 2 3 4) :KEY (FUNCTION (LAMBDA (CL-TEST::I) (FLOOR (/ CL-TEST::I 2)))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.7 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (LIST (QUOTE (CL-TEST::A . 10)) (QUOTE (CL-TEST::B . 20)) (QUOTE (CL-TEST::C . 30))) (LIST (QUOTE (CL-TEST::Z . CL-TEST::C)) (QUOTE (CL-TEST::A . CL-TEST::Y)) (QUOTE (CL-TEST::B . 100)) (QUOTE (CL-TEST::E . CL-TEST::F)) (QUOTE (CL-TEST::C . CL-TEST::FOO))) :KEY (FUNCTION CAR))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.8 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (COPY-TREE (QUOTE ((CL-TEST::A . 10) (CL-TEST::B . 20) (CL-TEST::C . 30)))) (COPY-TREE (QUOTE ((CL-TEST::Z . CL-TEST::C) (CL-TEST::A . CL-TEST::Y) (CL-TEST::B . 100) (CL-TEST::E . CL-TEST::F) (CL-TEST::C . CL-TEST::FOO)))) :KEY (QUOTE CAR))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.9 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (COPY-TREE (LIST (QUOTE (CL-TEST::Z . CL-TEST::C)) (QUOTE (CL-TEST::A . CL-TEST::Y)) (QUOTE (CL-TEST::B . 100)) (QUOTE (CL-TEST::E . CL-TEST::F)) (QUOTE (CL-TEST::C . CL-TEST::FOO)))) :TEST (FUNCTION (LAMBDA (CL-TEST::E1 CL-TEST::E2) (CL-TEST::EQT CL-TEST::E1 (CAR CL-TEST::E2)))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.10 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (COPY-TREE (LIST (QUOTE (CL-TEST::Z . CL-TEST::C)) (QUOTE (CL-TEST::A . CL-TEST::Y)) (QUOTE (CL-TEST::B . 100)) (QUOTE (CL-TEST::E . CL-TEST::F)) (QUOTE (CL-TEST::C . CL-TEST::FOO)))) :TEST (FUNCTION (LAMBDA (CL-TEST::E1 CL-TEST::E2) (CL-TEST::EQT CL-TEST::E1 (CAR CL-TEST::E2)))) :KEY NIL)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.11 failed
Form: (CL-TEST::SUBSETP-WITH-CHECK (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (COPY-TREE (LIST (QUOTE (CL-TEST::Z . CL-TEST::C)) (QUOTE (CL-TEST::A . CL-TEST::Y)) (QUOTE (CL-TEST::B . 100)) (QUOTE (CL-TEST::E . CL-TEST::F)) (QUOTE (CL-TEST::C . CL-TEST::FOO)))) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::E1 CL-TEST::E2) (NOT (CL-TEST::EQT CL-TEST::E1 (CAR CL-TEST::E2))))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.12 failed
Form: (BLOCK CL-TEST::FAIL (CL-TEST::SUBSETP-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) T))))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.13 failed
Form: (BLOCK CL-TEST::FAIL (CL-TEST::SUBSETP-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :KEY (FUNCTION IDENTITY) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) T))))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.14 failed
Form: (BLOCK CL-TEST::FAIL (CL-TEST::SUBSETP-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) NIL))))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.15 failed
Form: (BLOCK CL-TEST::FAIL (CL-TEST::SUBSETP-WITH-CHECK (LIST 1 2 3) (LIST 4 5 6) :KEY (FUNCTION IDENTITY) :TEST-NOT (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (WHEN (< CL-TEST::Y CL-TEST::X) (RETURN-FROM CL-TEST::FAIL (QUOTE CL-TEST::FAIL))) NIL))))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBSETP.TEST-AND-TEST-NOT.1
 CL-TEST::SUBSETP.TEST-AND-TEST-NOT.3
Test CL-TEST::SUBSETP.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (CL-TEST::NOTNOT (SUBSETP (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected value:
          T
          2
          1
          2
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (CL-TEST::NOTNOT (SUBSETP (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) :TEST (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (FUNCTION EQL)) :KEY (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) NIL))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          T
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ORDER.3 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W) (VALUES (CL-TEST::NOTNOT (SUBSETP (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) :KEY (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) NIL) :TEST (PROGN (SETF CL-TEST::W (INCF CL-TEST::I)) (FUNCTION EQL)))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          T
          4
          1
          2
          3
          4
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ALLOW-OTHER-KEYS.1 failed
Form: (CL-TEST::NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :BAD T :ALLOW-OTHER-KEYS 67))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ALLOW-OTHER-KEYS.2 failed
Form: (CL-TEST::NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :ALLOW-OTHER-KEYS (FUNCTION CONS) :BAD T))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ALLOW-OTHER-KEYS.3 failed
Form: (CL-TEST::NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4)) :ALLOW-OTHER-KEYS (MAKE-HASH-TABLE) :BAD T :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= (1+ CL-TEST::X) CL-TEST::Y)))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ALLOW-OTHER-KEYS.4 failed
Form: (CL-TEST::NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :ALLOW-OTHER-KEYS T))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ALLOW-OTHER-KEYS.5 failed
Form: (CL-TEST::NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :ALLOW-OTHER-KEYS NIL))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ALLOW-OTHER-KEYS.6 failed
Form: (CL-TEST::NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4 5)) :ALLOW-OTHER-KEYS T :BAD1 T :ALLOW-OTHER-KEYS NIL :BAD2 T))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.KEYWORDS.7 failed
Form: (CL-TEST::NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (0 1 2 3 4)) :TEST (FUNCTION (LAMBDA (CL-TEST::X CL-TEST::Y) (= (1+ CL-TEST::X) CL-TEST::Y))) :TEST (FUNCTION EQL)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.KEYWORDS.8 failed
Form: (CL-TEST::NOTNOT-MV (SUBSETP (QUOTE (1 2 3 4 10)) (QUOTE (0 1 2 3 4)) :KEY NIL :KEY (FUNCTION (LAMBDA (CL-TEST::X) (MOD CL-TEST::X 2)))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP NIL NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP NIL NIL :KEY) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP NIL NIL 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP NIL NIL :BAD T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP (LIST 1 2) (LIST 3 4) :TEST (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP (LIST 1 2) (LIST 3 4) :TEST-NOT (FUNCTION IDENTITY)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CONS)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP (LIST 1 2) (LIST 3 4) :KEY (FUNCTION CAR)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP (LIST 1 2 3) (LIST* 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.12 failed
Form: (CL-TEST:SIGNALS-ERROR (SUBSETP (LIST* 1 2 3) (LIST 1 2 3 4 5 6)) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.13 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (SUBSETP CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B))))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBSETP.ERROR.14 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (SUBSETP (QUOTE (CL-TEST::A CL-TEST::B)) CL-TEST::X))) (FUNCTION LISTP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBTYPEP-NULL-LIST failed
Form: (CL-TEST::SUBTYPEP* (QUOTE NULL) (QUOTE LIST))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SUBTYPEP-CONS-LIST failed
Form: (CL-TEST::SUBTYPEP* (QUOTE CONS) (QUOTE LIST))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBTYPEP-NULL-CONS
 CL-TEST::SUBTYPEP-CONS-NULL
Test CL-TEST::SUBTYPEP-NULL-ATOM failed
Form: (CL-TEST::SUBTYPEP* (QUOTE NULL) (QUOTE ATOM))
Expected value:
          T
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::SUBTYPEP-CONS-ATOM
 CL-TEST::SUBTYPEP-ATOM-CONS
 CL-TEST::SUBTYPEP-ATOM-LIST
 CL-TEST::SUBTYPEP-LIST-ATOM
 CL-TEST::NULL-NULL-UNIVERSE
COPY-TREE not bound to a function
Test CL-TEST::FUNCTION-BOUND-CONS-FNS failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST::*CONS-FNS* COUNT (WHEN (OR (NOT (FBOUNDP CL-TEST::X)) (NOT (FUNCTIONP (SYMBOL-FUNCTION CL-TEST::X)))) (FORMAT T "~%~S not bound to a function" CL-TEST::X) T))
Expected value:
          0
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MACRO-BOUND-CONS-MACROS failed
Form: (CL-TEST::NOTNOT-MV (EVERY (FUNCTION MACRO-FUNCTION) (LIST (QUOTE PUSH) (QUOTE POP) (QUOTE PUSHNEW) (QUOTE REMF))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::NO-CONS-FNS-ARE-MACROS
 CL-TEST::TYPEP-NIL-LIST
 CL-TEST::TYPEP-SYMBOL-LIST
 CL-TEST::TYPEP-SINGLETON-LIST-LIST
 CL-TEST::TYPEP-CIRCULAR-LIST-LIST
 CL-TEST::TYPEP-LONGER-LIST-LIST
 CL-TEST::FIRST-ETC-1
Test CL-TEST::FIRST-ETC-2 failed
Form: (LET ((CL-TEST::X (MAKE-LIST 15 :INITIAL-ELEMENT (QUOTE CL-TEST::A)))) (AND (EQL (SETF (FIRST CL-TEST::X) 1) 1) (EQL (SETF (SECOND CL-TEST::X) 2) 2) (EQL (SETF (THIRD CL-TEST::X) 3) 3) (EQL (SETF (FOURTH CL-TEST::X) 4) 4) (EQL (SETF (FIFTH CL-TEST::X) 5) 5) (EQL (SETF (SIXTH CL-TEST::X) 6) 6) (EQL (SETF (SEVENTH CL-TEST::X) 7) 7) (EQL (SETF (EIGHTH CL-TEST::X) 8) 8) (EQL (SETF (NINTH CL-TEST::X) 9) 9) (EQL (SETF (TENTH CL-TEST::X) 10) 10) CL-TEST::X))
Expected value:
          (1 2 3 4 5 6 7 8 9 10 CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          (1 2 3 4 5 6 7 8 9 10 NIL NIL NIL NIL NIL) [Actual value: #<error during printing>

 NIL
 CL-TEST::REST-SET-1
 CL-TEST::CAR-SET
 CL-TEST::CDR-SET
 CL-TEST::CAAR-SET
 CL-TEST::CADR-SET
 CL-TEST::CDAR-SET
 CL-TEST::CDDR-SET
 CL-TEST::CAAAR-SET
 CL-TEST::CAADR-SET
 CL-TEST::CADAR-SET
 CL-TEST::CADDR-SET
 CL-TEST::CDAAR-SET
 CL-TEST::CDADR-SET
 CL-TEST::CDDAR-SET
 CL-TEST::CDDDR-SET
 CL-TEST::CAAAAR-SET
 CL-TEST::CAAADR-SET
 CL-TEST::CAADAR-SET
 CL-TEST::CAADDR-SET
 CL-TEST::CADAAR-SET
 CL-TEST::CADADR-SET
 CL-TEST::CADDAR-SET
 CL-TEST::CADDDR-SET
 CL-TEST::CDAAAR-SET
 CL-TEST::CDAADR-SET
 CL-TEST::CDADAR-SET
 CL-TEST::CDADDR-SET
 CL-TEST::CDDAAR-SET
 CL-TEST::CDDADR-SET
 CL-TEST::CDDDAR-SET
 CL-TEST::CDDDDR-SET
 CL-TEST::FIRST-SET
 CL-TEST::SECOND-SET
 CL-TEST::THIRD-SET
 CL-TEST::FOURTH-SET
 CL-TEST::FIFTH-SET
 CL-TEST::SIXTH-SET
 CL-TEST::SEVENTH-SET
 CL-TEST::EIGHTH-SET
 CL-TEST::NINTH-SET
 CL-TEST::TENTH-SET
 CL-TEST::FIRST.ERROR.NO-ARGS
 CL-TEST::FIRST.ERROR.EXCESS-ARGS
 CL-TEST::SECOND.ERROR.NO-ARGS
 CL-TEST::SECOND.ERROR.EXCESS-ARGS
 CL-TEST::THIRD.ERROR.NO-ARGS
 CL-TEST::THIRD.ERROR.EXCESS-ARGS
 CL-TEST::FOURTH.ERROR.NO-ARGS
 CL-TEST::FOURTH.ERROR.EXCESS-ARGS
 CL-TEST::FIFTH.ERROR.NO-ARGS
 CL-TEST::FIFTH.ERROR.EXCESS-ARGS
 CL-TEST::SIXTH.ERROR.NO-ARGS
 CL-TEST::SIXTH.ERROR.EXCESS-ARGS
 CL-TEST::SEVENTH.ERROR.NO-ARGS
 CL-TEST::SEVENTH.ERROR.EXCESS-ARGS
 CL-TEST::EIGHTH.ERROR.NO-ARGS
 CL-TEST::EIGHTH.ERROR.EXCESS-ARGS
 CL-TEST::NINTH.ERROR.NO-ARGS
 CL-TEST::NINTH.ERROR.EXCESS-ARGS
 CL-TEST::TENTH.ERROR.NO-ARGS
 CL-TEST::TENTH.ERROR.EXCESS-ARGS
 CL-TEST::CAR.ERROR.NO-ARGS
 CL-TEST::CAR.ERROR.EXCESS-ARGS
 CL-TEST::CDR.ERROR.NO-ARGS
 CL-TEST::CDR.ERROR.EXCESS-ARGS
 CL-TEST::CAAR.ERROR.NO-ARGS
 CL-TEST::CAAR.ERROR.EXCESS-ARGS
 CL-TEST::CADR.ERROR.NO-ARGS
 CL-TEST::CADR.ERROR.EXCESS-ARGS
 CL-TEST::CDAR.ERROR.NO-ARGS
 CL-TEST::CDAR.ERROR.EXCESS-ARGS
 CL-TEST::CDDR.ERROR.NO-ARGS
 CL-TEST::CDDR.ERROR.EXCESS-ARGS
 CL-TEST::CAAAR.ERROR.NO-ARGS
 CL-TEST::CAAAR.ERROR.EXCESS-ARGS
 CL-TEST::CAADR.ERROR.NO-ARGS
 CL-TEST::CAADR.ERROR.EXCESS-ARGS
 CL-TEST::CADAR.ERROR.NO-ARGS
 CL-TEST::CADAR.ERROR.EXCESS-ARGS
 CL-TEST::CADDR.ERROR.NO-ARGS
 CL-TEST::CADDR.ERROR.EXCESS-ARGS
 CL-TEST::CDAAR.ERROR.NO-ARGS
 CL-TEST::CDAAR.ERROR.EXCESS-ARGS
 CL-TEST::CDADR.ERROR.NO-ARGS
 CL-TEST::CDADR.ERROR.EXCESS-ARGS
 CL-TEST::CDDAR.ERROR.NO-ARGS
 CL-TEST::CDDAR.ERROR.EXCESS-ARGS
 CL-TEST::CDDDR.ERROR.NO-ARGS
 CL-TEST::CDDDR.ERROR.EXCESS-ARGS
 CL-TEST::CAAAAR.ERROR.NO-ARGS
 CL-TEST::CAAAAR.ERROR.EXCESS-ARGS
 CL-TEST::CAAADR.ERROR.NO-ARGS
 CL-TEST::CAAADR.ERROR.EXCESS-ARGS
 CL-TEST::CAADAR.ERROR.NO-ARGS
 CL-TEST::CAADAR.ERROR.EXCESS-ARGS
 CL-TEST::CAADDR.ERROR.NO-ARGS
 CL-TEST::CAADDR.ERROR.EXCESS-ARGS
 CL-TEST::CADAAR.ERROR.NO-ARGS
 CL-TEST::CADAAR.ERROR.EXCESS-ARGS
 CL-TEST::CADADR.ERROR.NO-ARGS
 CL-TEST::CADADR.ERROR.EXCESS-ARGS
 CL-TEST::CADDAR.ERROR.NO-ARGS
 CL-TEST::CADDAR.ERROR.EXCESS-ARGS
 CL-TEST::CADDDR.ERROR.NO-ARGS
 CL-TEST::CADDDR.ERROR.EXCESS-ARGS
 CL-TEST::CDAAAR.ERROR.NO-ARGS
 CL-TEST::CDAAAR.ERROR.EXCESS-ARGS
 CL-TEST::CDAADR.ERROR.NO-ARGS
 CL-TEST::CDAADR.ERROR.EXCESS-ARGS
 CL-TEST::CDADAR.ERROR.NO-ARGS
 CL-TEST::CDADAR.ERROR.EXCESS-ARGS
 CL-TEST::CDADDR.ERROR.NO-ARGS
 CL-TEST::CDADDR.ERROR.EXCESS-ARGS
 CL-TEST::CDDAAR.ERROR.NO-ARGS
 CL-TEST::CDDAAR.ERROR.EXCESS-ARGS
 CL-TEST::CDDADR.ERROR.NO-ARGS
 CL-TEST::CDDADR.ERROR.EXCESS-ARGS
 CL-TEST::CDDDAR.ERROR.NO-ARGS
 CL-TEST::CDDDAR.ERROR.EXCESS-ARGS
 CL-TEST::CDDDDR.ERROR.NO-ARGS
 CL-TEST::CDDDDR.ERROR.EXCESS-ARGS
Test CL-TEST::AREF.1 failed
Form: (AREF T)
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of ARRAY is T, which is not of type ARRAY.> [Actual value: #<error during printing>

 NIL
 CL-TEST::AREF.2
Test CL-TEST::AREF.3 failed
Form: (AREF ((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) 1 2)
Expected value:
          CL-TEST::G
Actual value:
          #<Type-Error 8199EBE7> [Actual value: #<error during printing>

 NIL
 CL-TEST::AREF.4
 CL-TEST::AREF.5
 CL-TEST::AREF.6
 CL-TEST::AREF.7
 CL-TEST::AREF.ORDER.1
Test CL-TEST::AREF.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z (CL-TEST::A ((CL-TEST::A CL-TEST::B CL-TEST::C) (CL-TEST::D CL-TEST::E CL-TEST::F)))) (VALUES (AREF (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::A) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) 1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) 2)) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          CL-TEST::F
          3
          1
          2
          3
Actual value:
          #<Type-Error 819DF0B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF-AREF.1
Test CL-TEST::SETF-AREF.2 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY NIL :INITIAL-ELEMENT 1))) (VALUES (SETF (AREF CL-TEST::A) (QUOTE CL-TEST::Z)) CL-TEST::A))
Expected value:
          CL-TEST::Z
          CL-TEST::Z
Actual value:
          #<Type-Error 819F42B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-AREF.3 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-ELEMENT (QUOTE CL-TEST::A)))) (VALUES (SETF (AREF CL-TEST::A 0 1) (QUOTE CL-TEST::Z)) CL-TEST::A))
Expected value:
          CL-TEST::Z
          ((CL-TEST::A CL-TEST::Z CL-TEST::A) (CL-TEST::A CL-TEST::A CL-TEST::A))
Actual value:
          CL-TEST::Z [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF-AREF.4
 CL-TEST::SETF-AREF.5
Test CL-TEST::SETF-AREF.6 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-ELEMENT #\a :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (SETF (AREF CL-TEST::A 0 1) #\z) CL-TEST::A))
Expected value:
          #\z
          ((#\a #\z #\a) (#\a #\a #\a))
Actual value:
          #\z [Actual value: #<error during printing>

 NIL
Test CL-TEST::SETF-AREF.7 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (SETF (AREF CL-TEST::A 0 1) 0) CL-TEST::A))
Expected value:
          0
          ((1 0 1) (1 1 1))
Actual value:
          0 [Actual value: #<error during printing>

 NIL
 CL-TEST::SETF-AREF.ORDER.1
Test CL-TEST::AREF.SPECIAL-INTEGER.1 failed
Form: (CL-TEST::DO-SPECIAL-INTEGER-VECTORS (CL-TEST::V #(1 1 0 1 0 1) NIL) (ASSERT (= (AREF CL-TEST::V 0) 1)) (ASSERT (= (AREF CL-TEST::V 1) 1)) (ASSERT (= (AREF CL-TEST::V 2) 0)) (ASSERT (= (AREF CL-TEST::V 3) 1)) (ASSERT (= (AREF CL-TEST::V 4) 0)) (ASSERT (= (AREF CL-TEST::V 5) 1)))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::AREF.SPECIAL-STRINGS.1
 CL-TEST::AREF.ERROR.1
 CL-TEST::AREF.ERROR.2
 CL-TEST::ARRAY.1.1
Test CL-TEST::ARRAY.1.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE ARRAY)))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.1.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE ARRAY)))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY.1.4
 CL-TEST::ARRAY.1.5
 CL-TEST::ARRAY.1.6
 CL-TEST::ARRAY.1.7
 CL-TEST::ARRAY.1.8
 CL-TEST::ARRAY.1.9
 CL-TEST::ARRAY.1.10
 CL-TEST::ARRAY.1.11
 CL-TEST::ARRAY.1.12
 CL-TEST::ARRAY.1.13
 CL-TEST::ARRAY.2.1
Test CL-TEST::ARRAY.2.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (ARRAY *))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.2.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (ARRAY *))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY.2.4
 CL-TEST::ARRAY.2.5
 CL-TEST::ARRAY.2.6
 CL-TEST::ARRAY.3.1
Test CL-TEST::ARRAY.3.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (ARRAY * NIL))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.3.3 failed
Form: (TYPEP (NIL) (QUOTE (ARRAY * NIL)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY.3.4
 CL-TEST::ARRAY.3.5
 CL-TEST::ARRAY.3.6
Test CL-TEST::ARRAY.4.1 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #() (QUOTE (ARRAY * 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.4.2 failed
Form: (TYPEP CL-TEST::X (QUOTE (ARRAY * 1)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.4.3 failed
Form: (TYPEP (NIL) (QUOTE (ARRAY * 1)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.4.4 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (ARRAY * 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.4.5 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP "abcd" (QUOTE (ARRAY * 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.4.6 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #*010101 (QUOTE (ARRAY * 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.5.1 failed
Form: (TYPEP #() (QUOTE (ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.5.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (ARRAY * 0))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.5.3 failed
Form: (TYPEP (NIL) (QUOTE (ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.5.4 failed
Form: (TYPEP #(1 2 3) (QUOTE (ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.5.5 failed
Form: (TYPEP "abcd" (QUOTE (ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.5.6 failed
Form: (TYPEP #*010101 (QUOTE (ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY.6.1
Test CL-TEST::ARRAY.6.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (ARRAY * *))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.6.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (ARRAY * *))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY.6.4
 CL-TEST::ARRAY.6.5
 CL-TEST::ARRAY.6.6
Test CL-TEST::ARRAY.7.1 failed
Form: (TYPEP #() (QUOTE (ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.7.2 failed
Form: (TYPEP CL-TEST::X (QUOTE (ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.7.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (ARRAY * 2))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.7.4 failed
Form: (TYPEP #(1 2 3) (QUOTE (ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.7.5 failed
Form: (TYPEP "abcd" (QUOTE (ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.7.6 failed
Form: (TYPEP #*010101 (QUOTE (ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY.8.1
 CL-TEST::ARRAY.8.2
 CL-TEST::ARRAY.8.3
 CL-TEST::ARRAY.8.4
 CL-TEST::ARRAY.8.5
 CL-TEST::ARRAY.8.6
 CL-TEST::ARRAY.8.7
Test CL-TEST::ARRAY.8.8 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (ARRAY * (*))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81BF5097> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.8.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (ARRAY * (3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81BFCB57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.8.10 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (ARRAY * (1))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81C04617> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY.8.11
 CL-TEST::ARRAY.8.12
 CL-TEST::ARRAY.8.13
 CL-TEST::ARRAY.8.14
 CL-TEST::ARRAY.9.1
 CL-TEST::ARRAY.9.2
 CL-TEST::ARRAY.9.3
 CL-TEST::ARRAY.9.4
 CL-TEST::ARRAY.9.5
 CL-TEST::ARRAY.9.6
Test CL-TEST::ARRAY.9.7 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY * (* *)))))
Expected value:
          T
Actual value:
          #<Type-Error 81C188C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.9.8 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY * (3 *)))))
Expected value:
          T
Actual value:
          #<Type-Error 81C21DA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.9.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY * (2 *))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81C2AF27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.9.10 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY * (* 2)))))
Expected value:
          T
Actual value:
          #<Type-Error 81C33CA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.9.11 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY * (* 3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81C3CEB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.9.12 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY * (3 2)))))
Expected value:
          T
Actual value:
          #<Type-Error 81C45CC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY.9.13 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY * (2 3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81C4EED7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-T.2.1
Test CL-TEST::ARRAY-T.2.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (ARRAY T))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.2.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (ARRAY T))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-T.2.4
 CL-TEST::ARRAY-T.2.5
 CL-TEST::ARRAY-T.2.6
 CL-TEST::ARRAY-T.3.1
Test CL-TEST::ARRAY-T.3.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (ARRAY T NIL))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.3.3 failed
Form: (TYPEP (NIL) (QUOTE (ARRAY T NIL)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-T.3.4
 CL-TEST::ARRAY-T.3.5
 CL-TEST::ARRAY-T.3.6
Test CL-TEST::ARRAY-T.4.1 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #() (QUOTE (ARRAY T 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.4.2 failed
Form: (TYPEP CL-TEST::X (QUOTE (ARRAY T 1)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.4.3 failed
Form: (TYPEP (NIL) (QUOTE (ARRAY T 1)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.4.4 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (ARRAY T 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.4.5 failed
Form: (TYPEP "abcd" (QUOTE (ARRAY T 1)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.4.6 failed
Form: (TYPEP #*010101 (QUOTE (ARRAY T 1)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.5.1 failed
Form: (TYPEP #() (QUOTE (ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.5.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (ARRAY T 0))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.5.3 failed
Form: (TYPEP (NIL) (QUOTE (ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.5.4 failed
Form: (TYPEP #(1 2 3) (QUOTE (ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.5.5 failed
Form: (TYPEP "abcd" (QUOTE (ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.5.6 failed
Form: (TYPEP #*010101 (QUOTE (ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-T.6.1
Test CL-TEST::ARRAY-T.6.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (ARRAY T *))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.6.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (ARRAY T *))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-T.6.4
 CL-TEST::ARRAY-T.6.5
 CL-TEST::ARRAY-T.6.6
Test CL-TEST::ARRAY-T.7.1 failed
Form: (TYPEP #() (QUOTE (ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.7.2 failed
Form: (TYPEP CL-TEST::X (QUOTE (ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.7.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (ARRAY T 2))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.7.4 failed
Form: (TYPEP #(1 2 3) (QUOTE (ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.7.5 failed
Form: (TYPEP "abcd" (QUOTE (ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.7.6 failed
Form: (TYPEP #*010101 (QUOTE (ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-T.8.1
 CL-TEST::ARRAY-T.8.2
 CL-TEST::ARRAY-T.8.3
 CL-TEST::ARRAY-T.8.4
 CL-TEST::ARRAY-T.8.5
 CL-TEST::ARRAY-T.8.6
 CL-TEST::ARRAY-T.8.7
Test CL-TEST::ARRAY-T.8.8 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (ARRAY T (*))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81D40D27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.8.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (ARRAY T (3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81D48907> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.8.10 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (ARRAY T (1))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81D504E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-T.8.11
 CL-TEST::ARRAY-T.8.12
 CL-TEST::ARRAY-T.8.13
 CL-TEST::ARRAY-T.8.14
 CL-TEST::ARRAY-T.9.1
 CL-TEST::ARRAY-T.9.2
 CL-TEST::ARRAY-T.9.3
 CL-TEST::ARRAY-T.9.4
 CL-TEST::ARRAY-T.9.5
 CL-TEST::ARRAY-T.9.6
Test CL-TEST::ARRAY-T.9.7 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY T (* *)))))
Expected value:
          T
Actual value:
          #<Type-Error 81D649F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.9.8 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY T (3 *)))))
Expected value:
          T
Actual value:
          #<Type-Error 81D6DFF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.9.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY T (2 *))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81D77297> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.9.10 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY T (* 2)))))
Expected value:
          T
Actual value:
          #<Type-Error 81D80137> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.9.11 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY T (* 3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81D89467> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.9.12 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY T (3 2)))))
Expected value:
          T
Actual value:
          #<Type-Error 81D92397> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-T.9.13 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (ARRAY T (2 3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81D9B6C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.1 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #() (FIND-CLASS (QUOTE ARRAY))))
Expected value:
          T
Actual value:
          #<Type-Error 81DA4757> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #(CL-TEST::A CL-TEST::B CL-TEST::C) (FIND-CLASS (QUOTE ARRAY))))
Expected value:
          T
Actual value:
          #<Type-Error 81DAC6E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP NIL (FIND-CLASS (QUOTE ARRAY))))
Expected value:
          T
Actual value:
          #<Type-Error 81DB53F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.4 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D)) (FIND-CLASS (QUOTE ARRAY))))
Expected value:
          T
Actual value:
          #<Type-Error 81DBD227> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.5 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP "abcde" (FIND-CLASS (QUOTE ARRAY))))
Expected value:
          T
Actual value:
          #<Type-Error 81DC63B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.6 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #*0011101 (FIND-CLASS (QUOTE ARRAY))))
Expected value:
          T
Actual value:
          #<Type-Error 81DCE4C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.7 failed
Form: (CL-TEST::SUBTYPEP* (QUOTE ARRAY) (FIND-CLASS (QUOTE ARRAY)))
Expected value:
          T
          T
Actual value:
          #<Simple-Error The slot SYSTEM.INTERNALS::CLASS-PRECEDENCE-LIST is missing from the class #<Standard-Class SYMBOL 800B88F7>.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.8 failed
Form: (CL-TEST::SUBTYPEP* (FIND-CLASS (QUOTE ARRAY)) (QUOTE ARRAY))
Expected value:
          T
          T
Actual value:
          #<Type-Error 81DE1477> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.9 failed
Form: (TYPEP NIL (FIND-CLASS (QUOTE ARRAY)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81DE9827> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.10 failed
Form: (TYPEP (QUOTE CL-TEST::X) (FIND-CLASS (QUOTE ARRAY)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81DF0CF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.11 failed
Form: (TYPEP (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (FIND-CLASS (QUOTE ARRAY)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81DF8837> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.12 failed
Form: (TYPEP 10.0 (FIND-CLASS (QUOTE ARRAY)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81E00CD7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.13 failed
Form: (TYPEP (FUNCTION (LAMBDA (CL-TEST::X) (CONS CL-TEST::X NIL))) (FIND-CLASS (QUOTE ARRAY)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81E088B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.14 failed
Form: (TYPEP 1 (FIND-CLASS (QUOTE ARRAY)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81E11257> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-AS-CLASS.15 failed
Form: (TYPEP (1+ MOST-POSITIVE-FIXNUM) (FIND-CLASS (QUOTE ARRAY)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81E18957> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY.1.1
Test CL-TEST::SIMPLE-ARRAY.1.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE SIMPLE-ARRAY)))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.1.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE SIMPLE-ARRAY)))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY.1.4
 CL-TEST::SIMPLE-ARRAY.1.5
 CL-TEST::SIMPLE-ARRAY.1.6
 CL-TEST::SIMPLE-ARRAY.1.7
 CL-TEST::SIMPLE-ARRAY.1.8
 CL-TEST::SIMPLE-ARRAY.1.9
 CL-TEST::SIMPLE-ARRAY.1.10
 CL-TEST::SIMPLE-ARRAY.1.11
 CL-TEST::SIMPLE-ARRAY.1.12
 CL-TEST::SIMPLE-ARRAY.1.13
 CL-TEST::SIMPLE-ARRAY.2.1
Test CL-TEST::SIMPLE-ARRAY.2.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY *))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.2.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY *))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY.2.4
 CL-TEST::SIMPLE-ARRAY.2.5
 CL-TEST::SIMPLE-ARRAY.2.6
 CL-TEST::SIMPLE-ARRAY.3.1
Test CL-TEST::SIMPLE-ARRAY.3.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY * NIL))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.3.3 failed
Form: (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY * NIL)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY.3.4
 CL-TEST::SIMPLE-ARRAY.3.5
 CL-TEST::SIMPLE-ARRAY.3.6
Test CL-TEST::SIMPLE-ARRAY.4.1 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY * 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.4.2 failed
Form: (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY * 1)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.4.3 failed
Form: (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY * 1)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.4.4 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY * 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.4.5 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY * 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.4.6 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY * 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.5.1 failed
Form: (TYPEP #() (QUOTE (SIMPLE-ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.5.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY * 0))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.5.3 failed
Form: (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.5.4 failed
Form: (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.5.5 failed
Form: (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.5.6 failed
Form: (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY * 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY.6.1
Test CL-TEST::SIMPLE-ARRAY.6.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY * *))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.6.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY * *))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY.6.4
 CL-TEST::SIMPLE-ARRAY.6.5
 CL-TEST::SIMPLE-ARRAY.6.6
Test CL-TEST::SIMPLE-ARRAY.7.1 failed
Form: (TYPEP #() (QUOTE (SIMPLE-ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.7.2 failed
Form: (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.7.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY * 2))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.7.4 failed
Form: (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.7.5 failed
Form: (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.7.6 failed
Form: (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY * 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY.8.1
 CL-TEST::SIMPLE-ARRAY.8.2
 CL-TEST::SIMPLE-ARRAY.8.3
 CL-TEST::SIMPLE-ARRAY.8.4
 CL-TEST::SIMPLE-ARRAY.8.5
 CL-TEST::SIMPLE-ARRAY.8.6
 CL-TEST::SIMPLE-ARRAY.8.7
Test CL-TEST::SIMPLE-ARRAY.8.8 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (SIMPLE-ARRAY * (*))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F38707> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.8.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (SIMPLE-ARRAY * (3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F40857> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.8.10 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (SIMPLE-ARRAY * (1))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F489A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY.8.11
 CL-TEST::SIMPLE-ARRAY.8.12
 CL-TEST::SIMPLE-ARRAY.8.13
 CL-TEST::SIMPLE-ARRAY.8.14
 CL-TEST::SIMPLE-ARRAY.9.1
 CL-TEST::SIMPLE-ARRAY.9.2
 CL-TEST::SIMPLE-ARRAY.9.3
 CL-TEST::SIMPLE-ARRAY.9.4
 CL-TEST::SIMPLE-ARRAY.9.5
 CL-TEST::SIMPLE-ARRAY.9.6
Test CL-TEST::SIMPLE-ARRAY.9.7 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY * (* *)))))
Expected value:
          T
Actual value:
          #<Type-Error 81F5FA47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.9.8 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY * (3 *)))))
Expected value:
          T
Actual value:
          #<Type-Error 81F695B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.9.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY * (2 *))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F72DC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.9.10 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY * (* 2)))))
Expected value:
          T
Actual value:
          #<Type-Error 81F7C1D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.9.11 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY * (* 3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F85A77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.9.12 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY * (3 2)))))
Expected value:
          T
Actual value:
          #<Type-Error 81F8EF17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY.9.13 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY * (2 3))))
Expected value:
          NIL
Actual value:
          #<Type-Error 81F987B7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY-T.2.1
Test CL-TEST::SIMPLE-ARRAY-T.2.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY T))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.2.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY T))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY-T.2.4
 CL-TEST::SIMPLE-ARRAY-T.2.5
 CL-TEST::SIMPLE-ARRAY-T.2.6
 CL-TEST::SIMPLE-ARRAY-T.3.1
Test CL-TEST::SIMPLE-ARRAY-T.3.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY T NIL))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.3.3 failed
Form: (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY T NIL)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY-T.3.4
 CL-TEST::SIMPLE-ARRAY-T.3.5
 CL-TEST::SIMPLE-ARRAY-T.3.6
Test CL-TEST::SIMPLE-ARRAY-T.4.1 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #() (QUOTE (SIMPLE-ARRAY T 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.4.2 failed
Form: (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY T 1)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.4.3 failed
Form: (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY T 1)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.4.4 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T 1))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.4.5 failed
Form: (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T 1)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.4.6 failed
Form: (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T 1)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.5.1 failed
Form: (TYPEP #() (QUOTE (SIMPLE-ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.5.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY T 0))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.5.3 failed
Form: (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.5.4 failed
Form: (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.5.5 failed
Form: (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.5.6 failed
Form: (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T 0)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY-T.6.1
Test CL-TEST::SIMPLE-ARRAY-T.6.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY T *))))
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.6.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY T *))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY-T.6.4
 CL-TEST::SIMPLE-ARRAY-T.6.5
 CL-TEST::SIMPLE-ARRAY-T.6.6
Test CL-TEST::SIMPLE-ARRAY-T.7.1 failed
Form: (TYPEP #() (QUOTE (SIMPLE-ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.7.2 failed
Form: (TYPEP CL-TEST::X (QUOTE (SIMPLE-ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.7.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (NIL) (QUOTE (SIMPLE-ARRAY T 2))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.7.4 failed
Form: (TYPEP #(1 2 3) (QUOTE (SIMPLE-ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.7.5 failed
Form: (TYPEP "abcd" (QUOTE (SIMPLE-ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.7.6 failed
Form: (TYPEP #*010101 (QUOTE (SIMPLE-ARRAY T 2)))
Expected value:
          NIL
Actual value:
          #<Simple-Error Assertion failed: (OR (LISTP SYSTEM.INTERNALS::DIMENSION-SPEC) (EQL SYSTEM.INTERNALS::DIMENSION-SPEC (QUOTE *))).> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY-T.8.1
 CL-TEST::SIMPLE-ARRAY-T.8.2
 CL-TEST::SIMPLE-ARRAY-T.8.3
 CL-TEST::SIMPLE-ARRAY-T.8.4
 CL-TEST::SIMPLE-ARRAY-T.8.5
 CL-TEST::SIMPLE-ARRAY-T.8.6
 CL-TEST::SIMPLE-ARRAY-T.8.7
Test CL-TEST::SIMPLE-ARRAY-T.8.8 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (SIMPLE-ARRAY T (*))))
Expected value:
          NIL
Actual value:
          #<Type-Error C17CC127> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.8.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (SIMPLE-ARRAY T (3))))
Expected value:
          NIL
Actual value:
          #<Type-Error C17D4397> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.8.10 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C)) (QUOTE (SIMPLE-ARRAY T (1))))
Expected value:
          NIL
Actual value:
          #<Type-Error C17DC607> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-ARRAY-T.8.11
 CL-TEST::SIMPLE-ARRAY-T.8.12
 CL-TEST::SIMPLE-ARRAY-T.8.13
 CL-TEST::SIMPLE-ARRAY-T.8.14
 CL-TEST::SIMPLE-ARRAY-T.9.1
 CL-TEST::SIMPLE-ARRAY-T.9.2
 CL-TEST::SIMPLE-ARRAY-T.9.3
 CL-TEST::SIMPLE-ARRAY-T.9.4
 CL-TEST::SIMPLE-ARRAY-T.9.5
 CL-TEST::SIMPLE-ARRAY-T.9.6
Test CL-TEST::SIMPLE-ARRAY-T.9.7 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY T (* *)))))
Expected value:
          T
Actual value:
          #<Type-Error C17F3907> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.9.8 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY T (3 *)))))
Expected value:
          T
Actual value:
          #<Type-Error C17FD597> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.9.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY T (2 *))))
Expected value:
          NIL
Actual value:
          #<Type-Error C1806EC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.9.10 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY T (* 2)))))
Expected value:
          T
Actual value:
          #<Type-Error C18103F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.9.11 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY T (* 3))))
Expected value:
          NIL
Actual value:
          #<Type-Error C1819DB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.9.12 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY T (3 2)))))
Expected value:
          T
Actual value:
          #<Type-Error C1823377> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-ARRAY-T.9.13 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (QUOTE (SIMPLE-ARRAY T (2 3))))
Expected value:
          NIL
Actual value:
          #<Type-Error C182CD37> [Actual value: #<error during printing>

 NIL
 CL-TEST::BIT-VECTOR.1
 CL-TEST::BIT-VECTOR.2
 CL-TEST::BIT-VECTOR.3
 CL-TEST::BIT-VECTOR.4
 CL-TEST::BIT-VECTOR.5
 CL-TEST::BIT-VECTOR.6
 CL-TEST::BIT-VECTOR.7
 CL-TEST::BIT-VECTOR.8
 CL-TEST::BIT-VECTOR.9
 CL-TEST::BIT-VECTOR.10
 CL-TEST::BIT-VECTOR.11
 CL-TEST::BIT-VECTOR.12
 CL-TEST::BIT-VECTOR.13
 CL-TEST::BIT-VECTOR.14
 CL-TEST::BIT-VECTOR.15
 CL-TEST::BIT-VECTOR.16
 CL-TEST::BIT-VECTOR.17
Test CL-TEST::BIT-VECTOR.CLASS.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #* (FIND-CLASS (QUOTE BIT-VECTOR))))
Expected value:
          T
Actual value:
          #<Type-Error C184E807> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #*00101 (FIND-CLASS (QUOTE BIT-VECTOR))))
Expected value:
          T
Actual value:
          #<Type-Error C1856A37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.4 failed
Form: (TYPEP #(0 1 1 1 0 0) (FIND-CLASS (QUOTE BIT-VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C185EAE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.5 failed
Form: (TYPEP "011100" (FIND-CLASS (QUOTE BIT-VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1866797> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.6 failed
Form: (TYPEP 0 (FIND-CLASS (QUOTE BIT-VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C186E147> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.7 failed
Form: (TYPEP 1 (FIND-CLASS (QUOTE BIT-VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1875857> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.8 failed
Form: (TYPEP NIL (FIND-CLASS (QUOTE BIT-VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C187D087> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.9 failed
Form: (TYPEP (QUOTE CL-TEST::X) (FIND-CLASS (QUOTE BIT-VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1884857> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.10 failed
Form: (TYPEP (QUOTE (0 1 1 0)) (FIND-CLASS (QUOTE BIT-VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C188C607> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-VECTOR.CLASS.11 failed
Form: (TYPEP (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0) (FIND-CLASS (QUOTE BIT-VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1894867> [Actual value: #<error during printing>

 NIL
 CL-TEST::SIMPLE-BIT-VECTOR.2
 CL-TEST::SIMPLE-BIT-VECTOR.3
 CL-TEST::SIMPLE-BIT-VECTOR.4
 CL-TEST::SIMPLE-BIT-VECTOR.5
 CL-TEST::SIMPLE-BIT-VECTOR.6
 CL-TEST::SIMPLE-BIT-VECTOR.7
 CL-TEST::SIMPLE-BIT-VECTOR.8
 CL-TEST::SIMPLE-BIT-VECTOR.9
 CL-TEST::SIMPLE-BIT-VECTOR.10
 CL-TEST::SIMPLE-BIT-VECTOR.11
 CL-TEST::SIMPLE-BIT-VECTOR.12
 CL-TEST::SIMPLE-BIT-VECTOR.13
 CL-TEST::SIMPLE-BIT-VECTOR.14
 CL-TEST::SIMPLE-BIT-VECTOR.15
 CL-TEST::SIMPLE-BIT-VECTOR.16
 CL-TEST::SIMPLE-BIT-VECTOR.17
Test CL-TEST::MAKE-ARRAY.1 failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS 10))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C18B8C77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.1A failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (10))))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C18C14B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.2 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-ELEMENT (QUOTE CL-TEST::Z))
Expected value:
          #(CL-TEST::Z CL-TEST::Z CL-TEST::Z)
Actual value:
          #<Type-Error C18CA2A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.2A failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Type-Error C18D2E67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.2B failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-CONTENTS #(CL-TEST::A CL-TEST::B CL-TEST::C))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Type-Error C18DC477> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.2C failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-CONTENTS "abc")
Expected value:
          #(#\a #\b #\c)
Actual value:
          #<Type-Error C18E57A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.2D failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 3 :INITIAL-CONTENTS #*010)
Expected value:
          #(0 1 0)
Actual value:
          #<Type-Error C18ED757> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.3 failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT)))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C18F54E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.4 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1)
Expected value:
          #*11111
Actual value:
          #<Type-Error C18FE967> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.4A failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (1 0 0 1 0)))
Expected value:
          #*10010
Actual value:
          #<Type-Error C1906F27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.4B failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(1 0 0 1 0))
Expected value:
          #*10010
Actual value:
          #<Type-Error C190FD77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.4C failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*10010)
Expected value:
          #*10010
Actual value:
          #<Type-Error C19188E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.5 failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C19210B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.5A failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C192A617> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.6 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\x)
Expected value:
          "xxxx"
Actual value:
          #<Type-Error C1934167> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.6A failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS (QUOTE (#\a #\b #\c #\d)))
Expected value:
          "abcd"
Actual value:
          #<Type-Error C193C9C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.6B failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcd")
Expected value:
          "abcd"
Actual value:
          #<Type-Error C1945C17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.7 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE SYMBOL) :INITIAL-ELEMENT (QUOTE CL-TEST::A))
Expected value:
          #(CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          #<Type-Error C194EA17> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.7A failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 5 :ELEMENT-TYPE (QUOTE SYMBOL) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          #<Type-Error C1958E87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.7B failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE SYMBOL) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          #<Type-Error C19645A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.8 failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS 8 :ELEMENT-TYPE (QUOTE (INTEGER 0 (256)))))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C196FD37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.8A failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 8 :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-ELEMENT 9)
Expected value:
          #(9 9 9 9 9 9 9 9)
Actual value:
          #<Type-Error C1979837> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.8B failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (8)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (4 3 2 1 9 8 7 6)))
Expected value:
          #(4 3 2 1 9 8 7 6)
Actual value:
          #<Type-Error C1982A27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.8C failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 32 CL-TEST::FOR CL-TEST::TP = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) CL-TEST::FOR CL-TEST::A = (MAKE-ARRAY 5 :FILL-POINTER 3 :ELEMENT-TYPE CL-TEST::TP :INITIAL-CONTENTS (QUOTE (1 1 0 0 1))) WHEN (SYMBOLP CL-TEST::A) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::TP CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.8D failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 2 CL-TEST::TO 32 CL-TEST::FOR CL-TEST::TP = (SYSTEM.INTERNALS::BACKQUOTE (SIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::I))) CL-TEST::FOR CL-TEST::A = (MAKE-ARRAY 5 :FILL-POINTER 3 :ELEMENT-TYPE CL-TEST::TP :INITIAL-CONTENTS (QUOTE (1 1 0 0 1))) WHEN (SYMBOLP CL-TEST::A) CL-TEST::COLLECT (LIST CL-TEST::I CL-TEST::TP CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Simple-Error 11 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.8E failed
Form: (LOOP CL-TEST::FOR CL-TEST::TP CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V CL-TEST::IN (QUOTE (CL-TEST::1.0S0 CL-TEST::1.0F0 CL-TEST::1.0D0 CL-TEST::1.0L0)) CL-TEST::FOR CL-TEST::A = (MAKE-ARRAY 5 :FILL-POINTER 3 :ELEMENT-TYPE CL-TEST::TP :INITIAL-ELEMENT CL-TEST::V) WHEN (SYMBOLP CL-TEST::A) CL-TEST::COLLECT (LIST CL-TEST::TP CL-TEST::V CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C19C1097> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.8F failed
Form: (LOOP CL-TEST::FOR CL-TEST::TP CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::V CL-TEST::IN (QUOTE (CL-TEST::1.0S0 CL-TEST::1.0F0 CL-TEST::1.0D0 CL-TEST::1.0L0)) CL-TEST::FOR CL-TEST::A = (MAKE-ARRAY 5 :FILL-POINTER 3 :ELEMENT-TYPE (SYSTEM.INTERNALS::BACKQUOTE (COMPLEX (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::TP))) :INITIAL-ELEMENT (COMPLEX CL-TEST::V)) WHEN (SYMBOLP CL-TEST::A) CL-TEST::COLLECT (LIST CL-TEST::TP CL-TEST::V CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of REALPART is CL-TEST::1.0S0, which is not of type REAL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.9 failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS NIL))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C19EBB27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.10 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS NIL :INITIAL-ELEMENT 1)
Expected value:
          1
Actual value:
          #<Type-Error C19F45D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.11 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS NIL :INITIAL-CONTENTS 2)
Expected value:
          2
Actual value:
          #<Type-Error C19FC037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.12 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS 1)
Expected value:
          1
Actual value:
          #<Type-Error C1A03C47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.12A failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 10 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (1 0 0 1 1 0 0 1 0 0)) :FILL-POINTER 6)
Expected value:
          #*100110
Actual value:
          #<Type-Error C1A0C2F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.12B failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 10 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 8)
Expected value:
          "abcdefgh"
Actual value:
          #<Type-Error C1A15EB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.12C failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS 10 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij" :FILL-POINTER 8)
Expected value:
          "abcdefgh"
Actual value:
          #<Type-Error C1A1F597> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.13 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS NIL :ELEMENT-TYPE T :INITIAL-CONTENTS (QUOTE CL-TEST::A))
Expected value:
          CL-TEST::A
Actual value:
          #<Type-Error C1A28D47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.14 failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3))))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C1A31637> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.15 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :INITIAL-ELEMENT (QUOTE CL-TEST::X))
Expected value:
          ((CL-TEST::X CL-TEST::X CL-TEST::X) (CL-TEST::X CL-TEST::X CL-TEST::X))
Actual value:
          #<Type-Error C1A3A4C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.16 failed
Form: (CL-TEST::EQUALPT (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (0 0))) (READ-FROM-STRING "#2a()"))
Expected value:
          T
Actual value:
          #<Type-Error C1A443F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.17 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((CL-TEST::A CL-TEST::B CL-TEST::C) (CL-TEST::D CL-TEST::E CL-TEST::F))))
Expected value:
          ((CL-TEST::A CL-TEST::B CL-TEST::C) (CL-TEST::D CL-TEST::E CL-TEST::F))
Actual value:
          #<Type-Error C1A4CC27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.18 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE (#(CL-TEST::A CL-TEST::B CL-TEST::C) #(CL-TEST::D CL-TEST::E CL-TEST::F))))
Expected value:
          ((CL-TEST::A CL-TEST::B CL-TEST::C) (CL-TEST::D CL-TEST::E CL-TEST::F))
Actual value:
          #<Type-Error C1A583F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.19 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :INITIAL-CONTENTS (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 1 :FILL-POINTER 4))
Expected value:
          #(1 1 1 1)
Actual value:
          #<Type-Error C1A64097> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.20 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 1 :FILL-POINTER 4))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (3 4)) :INITIAL-CONTENTS (LIST CL-TEST::A CL-TEST::A CL-TEST::A)))
Expected value:
          ((1 1 1 1) (1 1 1 1) (1 1 1 1))
Actual value:
          #<Type-Error C1A6DFE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.21 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (3 4)) :INITIAL-CONTENTS (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT (QUOTE (1 2 3 4)) :FILL-POINTER 3))
Expected value:
          ((1 2 3 4) (1 2 3 4) (1 2 3 4))
Actual value:
          #<Type-Error C1A79EE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.22 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 3 CL-TEST::BELOW (MIN ARRAY-RANK-LIMIT 128) CL-TEST::ALWAYS (CL-TEST::EQUALPT (CL-TEST::MAKE-ARRAY-WITH-CHECKS (MAKE-LIST CL-TEST::I :INITIAL-ELEMENT 0)) (READ-FROM-STRING (FORMAT NIL "#~Aa()" CL-TEST::I))))
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::DIMENSION is NIL, which is not of type (INTEGER 0).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.23 failed
Form: (LET ((CL-TEST::LEN (1- ARRAY-RANK-LIMIT))) (CL-TEST::EQUALPT (CL-TEST::MAKE-ARRAY-WITH-CHECKS (MAKE-LIST CL-TEST::LEN :INITIAL-ELEMENT 0)) (READ-FROM-STRING (FORMAT NIL "#~Aa()" CL-TEST::LEN))))
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::DIMENSION is NIL, which is not of type (INTEGER 0).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.25 failed
Form: (MAKE-ARRAY (QUOTE (4)) :INITIAL-ELEMENT (QUOTE CL-TEST::X) :NONSENSE-ARGUMENT T :ALLOW-OTHER-KEYS T)
Expected value:
          #(CL-TEST::X CL-TEST::X CL-TEST::X CL-TEST::X)
Actual value:
          #<Simple-Error Unknown &KEY argument :NONSENSE-ARGUMENT. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.26 failed
Form: (MAKE-ARRAY (QUOTE (4)) :INITIAL-ELEMENT (QUOTE CL-TEST::X) :ALLOW-OTHER-KEYS NIL)
Expected value:
          #(CL-TEST::X CL-TEST::X CL-TEST::X CL-TEST::X)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.27 failed
Form: (MAKE-ARRAY (QUOTE (4)) :INITIAL-ELEMENT (QUOTE CL-TEST::X) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :NONSENSE-ARGUMENT T)
Expected value:
          #(CL-TEST::X CL-TEST::X CL-TEST::X CL-TEST::X)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.28 failed
Form: (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (LET ((CL-TEST::LEN (1- (MIN 10000 ARRAY-RANK-LIMIT)))) (CL-TEST::EQUALPT (MAKE-ARRAY (MAKE-LIST CL-TEST::LEN :INITIAL-ELEMENT 1) :INITIAL-ELEMENT (QUOTE CL-TEST::X)) (READ-FROM-STRING (CONCATENATE (QUOTE STRING) (FORMAT NIL "#~dA" CL-TEST::LEN) (MAKE-STRING CL-TEST::LEN :INITIAL-ELEMENT #\() "x" (MAKE-STRING CL-TEST::LEN :INITIAL-ELEMENT #\)))))))
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::DIMENSION is NIL, which is not of type (INTEGER 0).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.29 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (0 5 255 119 57)))
Expected value:
          #(0 5 255 119 57)
Actual value:
          #<Type-Error C1AE0E87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.30 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER -128 127)) :INITIAL-CONTENTS (QUOTE (-10 5 -128 86 127)))
Expected value:
          #(-10 5 -128 86 127)
Actual value:
          #<Simple-Error 13 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.31 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (65536))) :INITIAL-CONTENTS (QUOTE (0 100 65535 7623 13)))
Expected value:
          #(0 100 65535 7623 13)
Actual value:
          #<Type-Error C1AF69C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.32 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE FIXNUM) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5)))
Expected value:
          #(1 2 3 4 5)
Actual value:
          #<Type-Error C1B01537> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.33 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT) :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::3.0S0 CL-TEST::4.0S0 CL-TEST::5.0S0)))
Expected value:
          #(CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::3.0S0 CL-TEST::4.0S0 CL-TEST::5.0S0)
Actual value:
          #<Type-Error C1B0AEB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.34 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT) :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::3.0F0 CL-TEST::4.0F0 CL-TEST::5.0F0)))
Expected value:
          #(CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::3.0F0 CL-TEST::4.0F0 CL-TEST::5.0F0)
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.35 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT) :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::3.0D0 CL-TEST::4.0D0 CL-TEST::5.0D0)))
Expected value:
          #(CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::3.0D0 CL-TEST::4.0D0 CL-TEST::5.0D0)
Actual value:
          #<Simple-Error 18 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.36 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE LONG-FLOAT) :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::3.0L0 CL-TEST::4.0L0 CL-TEST::5.0L0)))
Expected value:
          #(CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::3.0L0 CL-TEST::4.0L0 CL-TEST::5.0L0)
Actual value:
          #<Simple-Error 19 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.1 failed
Form: (LET ((CL-TEST::A (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :ADJUSTABLE T))) (AND (SYMBOLP CL-TEST::A) CL-TEST::A))
Expected value:
          NIL
Actual value:
          #<Type-Error C1B42517> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.2 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :INITIAL-ELEMENT 6)
Expected value:
          #(6 6 6 6)
Actual value:
          #<Type-Error C1B4C0B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.3 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS NIL :ADJUSTABLE T :INITIAL-ELEMENT 7)
Expected value:
          7
Actual value:
          #<Type-Error C1B54FF7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.4 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :ADJUSTABLE T :INITIAL-ELEMENT 7)
Expected value:
          ((7 7 7) (7 7 7))
Actual value:
          #<Type-Error C1B5D707> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.5 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 3)) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE ((1 2 3) "abc")))
Expected value:
          ((1 2 3) (#\a #\b #\c))
Actual value:
          #<Type-Error C1B66957> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.6 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Type-Error C1B70757> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.7 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :FILL-POINTER T :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Type-Error C1B7BA37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.7A failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER T :INITIAL-CONTENTS (QUOTE (1 0 0 1)))
Expected value:
          #(1 0 0 1)
Actual value:
          #<Type-Error C1B87487> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.7B failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER T :INITIAL-CONTENTS "abcd")
Expected value:
          "abcd"
Actual value:
          #<Type-Error C1B91EA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.7C failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER T :INITIAL-CONTENTS "abcd")
Expected value:
          "abcd"
Actual value:
          #<Type-Error C1B9C427> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.8 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (1 4 7 9)))
Expected value:
          #(1 4 7 9)
Actual value:
          #<Type-Error C1BA6807> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.9 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcd")
Expected value:
          "abcd"
Actual value:
          #<Type-Error C1BB0E97> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.10 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 1 0)))
Expected value:
          #*0110
Actual value:
          #<Type-Error C1BBAAC7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ADJUSTABLE.11 failed
Form: (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (4)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE SYMBOL) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Type-Error C1BC4DB7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.1 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :DISPLACED-TO CL-TEST::A))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          #<Type-Error C1BD0AE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.2 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 3))
Expected value:
          #(CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)
Actual value:
          #<Type-Error C1BDF1D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.3 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 5))
Expected value:
          #(CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J)
Actual value:
          #<Type-Error C1BEE2C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.4 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 10))
Expected value:
          #()
Actual value:
          #<Type-Error C1BFD3B7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.5 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (1 3 5 7 9 11 13 15 17 19))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :DISPLACED-TO CL-TEST::A))
Expected value:
          #(1 3 5 7 9)
Actual value:
          #<Type-Error C1C0B1E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.6 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (1 3 5 7 9 11 13 15 17 19))))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 5 CL-TEST::COLLECT (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET CL-TEST::I)))
Expected value:
          (#(1 3 5 7 9) #(3 5 7 9 11) #(5 7 9 11 13) #(7 9 11 13 15) #(9 11 13 15 17) #(11 13 15 17 19))
Actual value:
          #<Type-Error C1C1BC77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.7 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :INITIAL-CONTENTS (QUOTE (1 3 5 7 9 11 13 15 17 19))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :ELEMENT-TYPE (QUOTE (INTEGER 0 (256))) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 10))
Expected value:
          #()
Actual value:
          #<Type-Error C1C2E427> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.8 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 1 0 1 1 1 0 1 0))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A))
Expected value:
          #*01101
Actual value:
          #<Type-Error C1C3C197> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.9 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 1 0 1 1 1 0 1 0))))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 5 CL-TEST::COLLECT (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET CL-TEST::I)))
Expected value:
          (#*01101 #*11011 #*10111 #*01110 #*11101 #*11010)
Actual value:
          #<Type-Error C1C4BB67> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.10 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 1 0 1 1 1 0 1 0))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 10))
Expected value:
          #*
Actual value:
          #<Type-Error C1C5C037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.11 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij"))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::A))
Expected value:
          "abcde"
Actual value:
          #<Type-Error C1C69077> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.12 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij"))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 5 CL-TEST::COLLECT (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET CL-TEST::I)))
Expected value:
          ("abcde" "bcdef" "cdefg" "defgh" "efghi" "fghij")
Actual value:
          #<Type-Error C1C78777> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.13 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "abcdefghij"))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 10))
Expected value:
          ""
Actual value:
          #<Type-Error C1C88977> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.14 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij"))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::A))
Expected value:
          "abcde"
Actual value:
          #<Type-Error C1C95657> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.15 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij"))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 5 CL-TEST::COLLECT (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (5)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET CL-TEST::I)))
Expected value:
          ("abcde" "bcdef" "cdefg" "defgh" "efghi" "fghij")
Actual value:
          #<Type-Error C1CA4D57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.16 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij"))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (0)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 10))
Expected value:
          ""
Actual value:
          #<Type-Error C1CB4F57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.17 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4) (5 6 7 8) (9 10 11 12)))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (8)) :DISPLACED-TO CL-TEST::A))
Expected value:
          #(1 2 3 4 5 6 7 8)
Actual value:
          #<Type-Error C1CC1A27> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.18 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4) (5 6 7 8) (9 10 11 12)))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (8)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 3))
Expected value:
          #(4 5 6 7 8 9 10 11)
Actual value:
          #<Type-Error C1CCD7D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.19 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (3 4)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4) (5 6 7 8) (9 10 11 12)))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 4))
Expected value:
          ((5 6 7 8) (9 10 11 12))
Actual value:
          #<Type-Error C1CDA047> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.20 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)) ((CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T) (CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (24)) :DISPLACED-TO CL-TEST::A))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::S T CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X)
Actual value:
          #<Simple-Error TODO: :INITIAL-CONTENTS for multidimensional arrays.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.21 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)) ((CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T) (CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (3 8)) :DISPLACED-TO CL-TEST::A))
Expected value:
          ((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))
Actual value:
          #<Simple-Error TODO: :INITIAL-CONTENTS for multidimensional arrays.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.22 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)) ((CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T) (CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 5))
Expected value:
          #(CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L CL-TEST::M CL-TEST::N CL-TEST::O)
Actual value:
          #<Simple-Error TODO: :INITIAL-CONTENTS for multidimensional arrays.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.23 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)) ((CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T) (CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 5 :FILL-POINTER T))
Expected value:
          #(CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L CL-TEST::M CL-TEST::N CL-TEST::O)
Actual value:
          #<Simple-Error TODO: :INITIAL-CONTENTS for multidimensional arrays.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.24 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)) ((CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T) (CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 5 :FILL-POINTER 5))
Expected value:
          #(CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J)
Actual value:
          #<Simple-Error TODO: :INITIAL-CONTENTS for multidimensional arrays.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.25 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)) ((CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T) (CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 5 :ADJUSTABLE T))
Expected value:
          #(CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L CL-TEST::M CL-TEST::N CL-TEST::O)
Actual value:
          #<Simple-Error TODO: :INITIAL-CONTENTS for multidimensional arrays.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.26 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)) ((CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T) (CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))))))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (10)) :DISPLACED-TO CL-TEST::A :DISPLACED-INDEX-OFFSET 5 :FILL-POINTER 8 :ADJUSTABLE T))
Expected value:
          #(CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L CL-TEST::M)
Actual value:
          #<Simple-Error TODO: :INITIAL-CONTENTS for multidimensional arrays.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.27 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER T))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO CL-TEST::A))
Expected value:
          ((1 2 3 4) (5 6 7 8))
Actual value:
          #<Type-Error C1D819E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.28 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8 9 10)) :FILL-POINTER 4))) (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO CL-TEST::A))
Expected value:
          ((1 2 3 4) (5 6 7 8))
Actual value:
          #<Type-Error C1D8DA47> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.29 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 0))) (PROG1 (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO CL-TEST::A) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW 10 DO (SETF (AREF CL-TEST::A CL-TEST::I) (1+ CL-TEST::I)))))
Expected value:
          ((1 2 3 4) (5 6 7 8))
Actual value:
          #<Type-Error C1D9A0C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.30 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO CL-TEST::A1))) (PROG1 (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO CL-TEST::A2) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW 10 DO (SETF (AREF CL-TEST::A2 CL-TEST::I) (1+ CL-TEST::I)))))
Expected value:
          ((1 2 3 4) (5 6 7 8))
Actual value:
          #<Type-Error C1DA83F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.DISPLACED.31 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (10)) :INITIAL-ELEMENT 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (10)) :DISPLACED-TO CL-TEST::A1))) (PROG1 (CL-TEST::MAKE-ARRAY-WITH-CHECKS (QUOTE (2 4)) :DISPLACED-TO CL-TEST::A2) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW 10 DO (SETF (AREF CL-TEST::A1 CL-TEST::I) (1+ CL-TEST::I)))))
Expected value:
          ((1 2 3 4) (5 6 7 8))
Actual value:
          #<Type-Error C1DB82A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ALLOW-OTHER-KEYS.1 failed
Form: (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T)
Expected value:
          #(CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ALLOW-OTHER-KEYS.2 failed
Form: (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS NIL)
Expected value:
          #(CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ALLOW-OTHER-KEYS.3 failed
Form: (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T (QUOTE #:BAD) T)
Expected value:
          #(CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ALLOW-OTHER-KEYS.4 failed
Form: (MAKE-ARRAY (QUOTE (5)) :INITIAL-ELEMENT (QUOTE CL-TEST::A) :BAD T :ALLOW-OTHER-KEYS T)
Expected value:
          #(CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error duing printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ALLOW-OTHER-KEYS.5 failed
Form: (MAKE-ARRAY (QUOTE (5)) :BAD T :INITIAL-ELEMENT (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T)
Expected value:
          #(CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ALLOW-OTHER-KEYS.6 failed
Form: (MAKE-ARRAY (QUOTE (5)) :BAD T :INITIAL-ELEMENT (QUOTE CL-TEST::A) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :ALSO-BAD NIL)
Expected value:
          #(CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ALLOW-OTHER-KEYS.7 failed
Form: (MAKE-ARRAY (QUOTE (5)) :ALLOW-OTHER-KEYS T :INITIAL-ELEMENT (QUOTE CL-TEST::A))
Expected value:
          #(CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A CL-TEST::A)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-ARRAY.KEYWORDS.8.
 CL-TEST::MAKE-ARRAY.ERROR.1
Test CL-TEST::MAKE-ARRAY.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) :ALLOW-OTHER-KEYS NIL :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) :BAD) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-ARRAY.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (MAKE-ARRAY (QUOTE (10)) 1 2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument 1. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :MEMORY :AREA).> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-ARRAY.ORDER.1
 CL-TEST::MAKE-ARRAY.ORDER.2
Test CL-TEST::ADJUST-ARRAY.1 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.2 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :INITIAL-ELEMENT (QUOTE CL-TEST::X)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::X CL-TEST::X CL-TEST::X)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.3 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :INITIAL-CONTENTS (QUOTE (CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z)
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.4 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :INITIAL-CONTENTS (QUOTE (8 7 6 5 4 3 2 1))))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(8 7 6 5 4 3 2 1)
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.5
 CL-TEST::ADJUST-ARRAY.6
Test CL-TEST::ADJUST-ARRAY.7 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER T))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          4
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.8 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER 2))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (PROGN (ASSERT (EQ (AREF CL-TEST::A2 2) (QUOTE CL-TEST::C))) (ASSERT (EQ (AREF CL-TEST::A2 3) (QUOTE CL-TEST::D)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          2
          #(CL-TEST::A CL-TEST::B)
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.9 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :FILL-POINTER 5 :INITIAL-ELEMENT (QUOTE CL-TEST::X)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 5) (AREF CL-TEST::A2 6) (AREF CL-TEST::A2 7)) (QUOTE (CL-TEST::X CL-TEST::X CL-TEST::X)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          5
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.10 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO NIL))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.11 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (CL-TEST::X CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::Y)))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Simple-Error TODO: Adjusting unusual array #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.12 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 0))) CL-TEST::A2)
Expected value:
          #(1 2 3 4)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.13 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 2))) CL-TEST::A2)
Expected value:
          #(3 4 5 6)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.14 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 0))) CL-TEST::A2)
Expected value:
          #(1 2 3 4)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.15 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1)) (CL-TEST::A2 (MAKE-ARRAY 4 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 1)) (CL-TEST::A3 (ADJUST-ARRAY CL-TEST::A2 4 :DISPLACED-TO CL-TEST::A1))) CL-TEST::A3)
Expected value:
          #(2 3 4 5)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.16 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7)))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 5 :DISPLACED-TO CL-TEST::A0))) CL-TEST::A2)
Expected value:
          #(1 2 3 4 5)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.17 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT (QUOTE CL-TEST::X))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          CL-TEST::X
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.18 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT (QUOTE CL-TEST::X))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :INITIAL-CONTENTS (QUOTE CL-TEST::Y)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          CL-TEST::Y
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.19 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT (QUOTE CL-TEST::X))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :INITIAL-ELEMENT (QUOTE CL-TEST::Y)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          CL-TEST::X
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.20 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY NIL :INITIAL-ELEMENT (QUOTE CL-TEST::X))) (CL-TEST::A1 (MAKE-ARRAY NIL :DISPLACED-TO CL-TEST::A0)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL))) CL-TEST::A2)
Expected value:
          CL-TEST::X
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.21 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4 5) (3 4 5 6 7) (5 6 7 8 9) (7 8 9 1 2))))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 (QUOTE (2 3))))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (4 5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (2 3)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          ((1 2 3) (3 4 5))
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.22 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4 5) (3 4 5 6 7) (5 6 7 8 9) (7 8 9 1 2))))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 (QUOTE (6 8)) :INITIAL-ELEMENT 0))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (4 5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (6 8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          ((1 2 3 4 5 0 0 0) (3 4 5 6 7 0 0 0) (5 6 7 8 9 0 0 0) (7 8 9 1 2 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.23 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ((#\1 #\2 #\3 #\4 #\5) (#\3 #\4 #\5 #\6 #\7) (#\5 #\6 #\7 #\8 #\9) (#\7 #\8 #\9 #\1 #\2))) :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (2 3))))) (ASSERT (NOT (TYPEP 0 (ARRAY-ELEMENT-TYPE CL-TEST::A2)))) CL-TEST::A2)
Expected value:
          ((#\1 #\2 #\3) (#\3 #\4 #\5))
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.24 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::A)) (QUOTE (4)))))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.25 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M (QUOTE (4)))))))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.26 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (4)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :ELEMENT-TYPE)) T)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.27 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (4)) :ELEMENT-TYPE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M T)))))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.28 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (6)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :INITIAL-ELEMENT)) 17)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D 17 17)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.29 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (7)) :INITIAL-ELEMENT (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M 5)))))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D 5 5 5)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.30 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (6)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :INITIAL-CONTENTS)) (QUOTE (1 2 3 4 5 6)))))
Expected value:
          #(1 2 3 4 5 6)
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.31 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (3)) :INITIAL-CONTENTS (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M "ABC")))))
Expected value:
          #(#\A #\B #\C)
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.32 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (4)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :FILL-POINTER)) NIL)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.33 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (4)) :FILL-POINTER (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL)))))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.34 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (4)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :DISPLACED-TO)) NIL)))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.35 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (4)) :DISPLACED-TO (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL)))))
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.36 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) (CL-TEST::C (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (3)) :DISPLACED-TO CL-TEST::C (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :DISPLACED-INDEX-OFFSET)) 2)))
Expected value:
          #(3 4 5)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.37 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (4)) :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)))) (CL-TEST::C (MAKE-ARRAY (QUOTE (8)) :INITIAL-CONTENTS (QUOTE (1 2 3 4 5 6 7 8))))) (ADJUST-ARRAY CL-TEST::A (QUOTE (5)) :DISPLACED-TO CL-TEST::C :DISPLACED-INDEX-OFFSET (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M 1)))))
Expected value:
          #(2 3 4 5 6)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.ADJUSTABLE.1
 CL-TEST::ADJUST-ARRAY.ADJUSTABLE.2
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.3 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :ADJUSTABLE T)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :INITIAL-CONTENTS (QUOTE (CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z))))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::W CL-TEST::X CL-TEST::Y CL-TEST::Z)
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.4 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :ADJUSTABLE T)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :INITIAL-CONTENTS (QUOTE (8 7 6 5 4 3 2 1))))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(8 7 6 5 4 3 2 1)
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.ADJUSTABLE.5
 CL-TEST::ADJUST-ARRAY.ADJUSTABLE.6
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.7 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :FILL-POINTER 3 :ADJUSTABLE T)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER T))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          4
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.8 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :FILL-POINTER 3 :ADJUSTABLE T)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER 2))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 2) (AREF CL-TEST::A2 3)) (QUOTE (CL-TEST::C CL-TEST::D)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          2
          #(CL-TEST::A CL-TEST::B)
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.9 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :FILL-POINTER 3 :ADJUSTABLE T)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :FILL-POINTER 5 :INITIAL-ELEMENT (QUOTE CL-TEST::X)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 5) (AREF CL-TEST::A2 6) (AREF CL-TEST::A2 7)) (QUOTE (CL-TEST::X CL-TEST::X CL-TEST::X)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          5
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.10 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E)) :ADJUSTABLE T)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO NIL))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.11 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (CL-TEST::X CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::Y)))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)
Actual value:
          #<Simple-Error TODO: Adjusting unusual array #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.12 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (CL-TEST::X CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::Y)))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) CL-TEST::A2)
Expected value:
          #(CL-TEST::X CL-TEST::A CL-TEST::B CL-TEST::C)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ADJUSTABLE.13 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (CL-TEST::X CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::Y)))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY 4 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 1))) (ASSERT (EQ CL-TEST::A1 (ADJUST-ARRAY CL-TEST::A1 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2))) CL-TEST::A2)
Expected value:
          #(CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::Y)
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.1 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.2 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\x))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcdexxx"
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.3 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "wxyz"))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "wxyz"
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.4 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "87654321"))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "87654321"
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.STRING.5
 CL-TEST::ADJUST-ARRAY.STRING.6
Test CL-TEST::ADJUST-ARRAY.STRING.7 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER T))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          4
          "abcd"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.8 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 2))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (PROGN (ASSERT (EQL (AREF CL-TEST::A2 2) #\c)) (ASSERT (EQL (AREF CL-TEST::A2 3) #\d))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          2
          "ab"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.9 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-ELEMENT #\x))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 5) (AREF CL-TEST::A2 6) (AREF CL-TEST::A2 7)) (QUOTE (#\x #\x #\x)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          5
          "abcde"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.10 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.11 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Simple-Error TODO: Adjusting unusual array "abcde".> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.12 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 0))) CL-TEST::A2)
Expected value:
          "1234"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.13 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 2))) CL-TEST::A2)
Expected value:
          "3456"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.14 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 0))) CL-TEST::A2)
Expected value:
          "1234"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.15 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (MAKE-ARRAY 4 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A3 (ADJUST-ARRAY CL-TEST::A2 4 :DISPLACED-TO CL-TEST::A1 :ELEMENT-TYPE (QUOTE CHARACTER)))) CL-TEST::A3)
Expected value:
          "2345"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.16 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 5 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) CL-TEST::A2)
Expected value:
          "12345"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.17 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) 809A2D83>
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.18 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :INITIAL-CONTENTS #\y :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) 809A2ED3>
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.19 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :INITIAL-ELEMENT #\y :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) 809A4173>
Actual value:
          #<Simple-Error Cannot convert array #<(Array Nil Nil) 81AFD2E3> to different element-type CHARACTER from NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.20 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY NIL :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) 809B9DA3>
Actual value:
          #<Simple-Error Cannot convert array #<(Array 0 Nil) 81B14003> to different element-type CHARACTER from 0.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.1
 CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.2
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.3 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :INITIAL-CONTENTS "wxyz" :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "wxyz"
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.4 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :INITIAL-CONTENTS "87654321" :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "87654321"
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.5
 CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.6
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.7 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER T :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\!))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          4
          "abcd"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.8 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER 2 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\X))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 2) (AREF CL-TEST::A2 3)) (QUOTE (#\c #\d)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          2
          "ab"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.9 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :FILL-POINTER 5 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 5) (AREF CL-TEST::A2 6) (AREF CL-TEST::A2 7)) (QUOTE (#\x #\x #\x)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          5
          "abcde"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.10 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.11 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Simple-Error TODO: Adjusting unusual array "abcde".> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.12 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) CL-TEST::A2)
Expected value:
          "xabc"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.ADJUSTABLE.13 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (MAKE-ARRAY 4 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ CL-TEST::A1 (ADJUST-ARRAY CL-TEST::A1 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE CHARACTER)))) CL-TEST::A2)
Expected value:
          "cdey"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.1 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.2 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\x))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcdexxx"
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.3 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "wxyz"))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "wxyz"
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.4 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "87654321"))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "87654321"
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.BASEST.5
 CL-TEST::ADJUST-ARRAY.BASEST.6
Test CL-TEST::ADJUST-ARRAY.BASEST.7 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER T))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          4
          "abcd"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.8 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 2))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (PROGN (ASSERT (EQL (AREF CL-TEST::A2 2) #\c)) (ASSERT (EQL (AREF CL-TEST::A2 3) #\d))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          2
          "ab"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.9 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde" :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 5 :INITIAL-ELEMENT #\x))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 5) (AREF CL-TEST::A2 6) (AREF CL-TEST::A2 7)) (QUOTE (#\x #\x #\x)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          5
          "abcde"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.10 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcde")) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.11 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Simple-Error TODO: Adjusting unusual array "abcde".> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.12 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 0))) CL-TEST::A2)
Expected value:
          "1234"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.13 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 2))) CL-TEST::A2)
Expected value:
          "3456"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.14 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 0))) CL-TEST::A2)
Expected value:
          "1234"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.15 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (MAKE-ARRAY 4 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A3 (ADJUST-ARRAY CL-TEST::A2 4 :DISPLACED-TO CL-TEST::A1 :ELEMENT-TYPE (QUOTE CHARACTER)))) CL-TEST::A3)
Expected value:
          "2345"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.16 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "1234567" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 5 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) CL-TEST::A2)
Expected value:
          "12345"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.17 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) 809A2D83>
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.18 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :INITIAL-CONTENTS #\y :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) 809A2ED3>
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.19 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :INITIAL-ELEMENT #\y :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) 809A4173>
Actual value:
          #<Simple-Error Cannot convert array #<(Array Nil Nil) 81D8BFE3> to different element-type CHARACTER from NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.20 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY NIL :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY NIL :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) 809B9DA3>
Actual value:
          #<Simple-Error Cannot convert array #<(Array 0 Nil) 81DA2D03> to different element-type CHARACTER from 0.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.1
 CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.2
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.3 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :INITIAL-CONTENTS "wxyz" :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "wxyz"
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.4 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :INITIAL-CONTENTS "87654321" :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "87654321"
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.5
 CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.6
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.7 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER T :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\!))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          4
          "abcd"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.8 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER 2 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-ELEMENT #\X))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 2) (AREF CL-TEST::A2 3)) (QUOTE (#\c #\d)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          2
          "ab"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.9 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :FILL-POINTER 5 :INITIAL-ELEMENT #\x :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 5) (AREF CL-TEST::A2 6) (AREF CL-TEST::A2 7)) (QUOTE (#\x #\x #\x)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          5
          "abcde"
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.10 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.11 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          "abcd"
Actual value:
          #<Simple-Error TODO: Adjusting unusual array "abcde".> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.12 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) CL-TEST::A2)
Expected value:
          "xabc"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BASEST.ADJUSTABLE.13 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS "xabcdey" :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (MAKE-ARRAY 4 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (EQ CL-TEST::A1 (ADJUST-ARRAY CL-TEST::A1 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE CHARACTER)))) CL-TEST::A2)
Expected value:
          "cdey"
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.21 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ("12345" "34567" "56789" "78912")) :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 (QUOTE (2 3))))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (4 5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (2 3)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Character (2 3)) 809CA073>
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.STRING.22 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE ("12345" "34567" "56789" "78912")) :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 (QUOTE (6 8)) :INITIAL-ELEMENT #\0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (4 5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (6 8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Character (6 8)) 809CE483>
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.1 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*0110
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.2 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*01100111
Actual value:
          #<Unbound-Variable SYSTEM.INTERNALS::OLD-ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.3 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*1011))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*1011
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.4 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*11110000))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*11110000
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.BIT-VECTOR.5
 CL-TEST::ADJUST-ARRAY.BIT-VECTOR.6
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.7 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100 :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER T))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          4
          #*0110
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.8 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100 :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 2))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (PROGN (ASSERT (EQL (AREF CL-TEST::A2 2) 1)) (ASSERT (EQL (AREF CL-TEST::A2 3) 0))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          2
          #*01
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.9 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100 :FILL-POINTER 3)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5 :INITIAL-ELEMENT 1))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 5) (AREF CL-TEST::A2 6) (AREF CL-TEST::A2 7)) (QUOTE (1 1 1)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          5
          #*01100
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.10 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*01100)) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*0110
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.11 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*0011001 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*0110
Actual value:
          #<Simple-Error TODO: Adjusting unusual array #*01100.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.12 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1010101 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS #*01100 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 0))) CL-TEST::A2)
Expected value:
          #*1010
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.13 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1011101 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS #*01100 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 2))) CL-TEST::A2)
Expected value:
          #*1110
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.14 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1011001 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (IF (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQ CL-TEST::A1 CL-TEST::A2) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2)) (LIST CL-TEST::A0 0))) CL-TEST::A2)
Expected value:
          #*1011
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.15 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1100010 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (MAKE-ARRAY 4 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A3 (ADJUST-ARRAY CL-TEST::A2 4 :DISPLACED-TO CL-TEST::A1 :ELEMENT-TYPE (QUOTE BIT)))) CL-TEST::A3)
Expected value:
          #*1000
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.16 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS #*1011011 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 5 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE BIT)))) CL-TEST::A2)
Expected value:
          #*10110
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.17 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) C0431F63>
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.18 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :INITIAL-CONTENTS 1 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) C0594CF3>
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.19 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) NIL))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) NIL)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) C066E983>
Actual value:
          #<Simple-Error Cannot convert array #<(Array Nil Nil) C1750823> to different element-type BIT from NIL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.20 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY NIL :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 NIL :ELEMENT-TYPE (QUOTE BIT)))) CL-TEST::A2)
Expected value:
          #<(Array Nil Nil) C081B2A3>
Actual value:
          #<Simple-Error Cannot convert array #<(Array 0 Nil) C1766F63> to different element-type BIT from 0.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.21 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE (#*11100 #*00110 #*00001 #*11111)) :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 (QUOTE (2 3))))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (4 5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (2 3)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Bit (2 3)) C0948BA3>
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.22 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (4 5)) :INITIAL-CONTENTS (QUOTE (#*11100 #*00110 #*00001 #*11111)) :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 (QUOTE (6 8)) :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (4 5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (6 8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #<(Array Bit (6 8)) C09927B3>
Actual value:
          #<Simple-Error TODO: adjust-array on non-vectors.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.1
 CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.2
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.3 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (0 1 0 1 0)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :INITIAL-CONTENTS (QUOTE (1 1 1 0)) :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*1110
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.4 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (1 0 0 1 0)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 0 1 0)) :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*01011010
Actual value:
          #<Simple-Error Unknown &KEY argument :INITIAL-CONTENTS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.5
 CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.6
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.7 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (1 1 0 1 1)) :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER T :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          4
          #*1101
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.8 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (0 1 1 1 0)) :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :FILL-POINTER 2 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (4)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 2) (AREF CL-TEST::A2 3)) (QUOTE (1 1)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          2
          #*01
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.9 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (1 0 0 0 1)) :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 8 :FILL-POINTER 5 :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P CL-TEST::A1)) (EQ CL-TEST::A1 CL-TEST::A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P CL-TEST::A1) (EQUAL (ARRAY-DIMENSIONS CL-TEST::A1) (QUOTE (5))))) (ASSERT (EQUAL (ARRAY-DIMENSIONS CL-TEST::A2) (QUOTE (8)))) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) (ASSERT (EQUAL (LIST (AREF CL-TEST::A2 5) (AREF CL-TEST::A2 6) (AREF CL-TEST::A2 7)) (QUOTE (1 1 1)))) (VALUES (FILL-POINTER CL-TEST::A2) CL-TEST::A2))
Expected value:
          5
          #*10001
Actual value:
          3 [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.10 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (0 1 1 0 1)) :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO NIL :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*0110
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.11 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (0 1 0 1 1 1 0)) :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) (ASSERT (NOT (ARRAY-DISPLACEMENT CL-TEST::A2))) CL-TEST::A2)
Expected value:
          #*1011
Actual value:
          #<Simple-Error TODO: Adjusting unusual array #*10111.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.12 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (0 0 1 1 1 1 1)) :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (ADJUST-ARRAY CL-TEST::A1 4 :DISPLACED-TO CL-TEST::A0 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (EQ CL-TEST::A1 CL-TEST::A2)) CL-TEST::A2)
Expected value:
          #*0011
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.BIT-VECTOR.ADJUSTABLE.13 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY 7 :INITIAL-CONTENTS (QUOTE (1 0 0 0 0 0 1)) :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A1 (MAKE-ARRAY 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 1 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::A2 (MAKE-ARRAY 4 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 1 :ELEMENT-TYPE (QUOTE BIT)))) (ASSERT (EQ CL-TEST::A1 (ADJUST-ARRAY CL-TEST::A1 5 :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2 :ELEMENT-TYPE (QUOTE BIT)))) CL-TEST::A2)
Expected value:
          #*0001
Actual value:
          #<Simple-Error Unknown &KEY argument :DISPLACED-TO. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.ERROR.1
 CL-TEST::ADJUST-ARRAY.ERROR.2
Test CL-TEST::ADJUST-ARRAY.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJUST-ARRAY (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL) 8 :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ERROR.4 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJUST-ARRAY (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL) 8 :INITIAL-ELEMENT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ADJUST-ARRAY.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (ADJUST-ARRAY (MAKE-ARRAY 10 :INITIAL-ELEMENT NIL) 8 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :BAD T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:ELEMENT-TYPE :INITIAL-ELEMENT :FILL-POINTER).> [Actual value: #<error during printing>

 NIL
 CL-TEST::ADJUST-ARRAY.ERROR.6
 CL-TEST::ADJUSTABLE-ARRAY-P.1
 CL-TEST::ADJUSTABLE-ARRAY-P.2
 CL-TEST::ADJUSTABLE-ARRAY-P.3
 CL-TEST::ADJUSTABLE-ARRAY-P.4
 CL-TEST::ADJUSTABLE-ARRAY-P.5
 CL-TEST::ADJUSTABLE-ARRAY-P.6
 CL-TEST::ADJUSTABLE-ARRAY-P.ORDER.1
 CL-TEST::ADJUSTABLE-ARRAY-P.ERROR.1
 CL-TEST::ADJUSTABLE-ARRAY-P.ERROR.2
 CL-TEST::ADJUSTABLE-ARRAY-P.ERROR.3Space
 CL-TEST::ADJUSTABLE-ARRAY-P.ERROR.4
 CL-TEST::ADJUSTABLE-ARRAY-P.ERROR.5
 CL-TEST::ADJUSTABLE-ARRAY-P.ERROR.6
 CL-TEST::ARRAY-DISPLACEMENT.7
 CL-TEST::ARRAY-DISPLACEMENT.8
 CL-TEST::ARRAY-DISPLACEMENT.9
 CL-TEST::ARRAY-DISPLACEMENT.10
 CL-TEST::ARRAY-DISPLACEMENT.11
 CL-TEST::ARRAY-DISPLACEMENT.12
 CL-TEST::ARRAY-DISPLACEMENT.13
 CL-TEST::ARRAY-DISPLACEMENT.14
 CL-TEST::ARRAY-DISPLACEMENT.15
 CL-TEST::ARRAY-DISPLACEMENT.ORDER.1
 CL-TEST::ARRAY-DISPLACEMENT.ERROR.1
 CL-TEST::ARRAY-DISPLACEMENT.ERROR.2Space
 CL-TEST::ARRAY-DISPLACEMENT.ERROR.3
 CL-TEST::ARRAY-DISPLACEMENT.ERROR.4
 CL-TEST::ARRAY-DIMENSION.1
 CL-TEST::ARRAY-DIMENSION.2
Test CL-TEST::ARRAY-DIMENSION.3 failed
Form: (ARRAY-DIMENSION ((1 2 3 4) (5 6 7 8)) 0)
Expected value:
          2
Actual value:
          #<Type-Error C1A3EEE7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAY-DIMENSION.4 failed
Form: (ARRAY-DIMENSION ((1 2 3 4) (5 6 7 8)) 1)
Expected value:
          4
Actual value:
          #<Type-Error C1A46407> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-DIMENSION.5
 CL-TEST::ARRAY-DIMENSION.6
 CL-TEST::ARRAY-DIMENSION.7
Test CL-TEST::ARRAY-DIMENSION.8 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (ARRAY-DIMENSION ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F)) (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M 0))))
Expected value:
          3
Actual value:
          #<Type-Error C1A56A97> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-DIMENSION.ORDER.1
 CL-TEST::ARRAY-DIMENSION.ERROR.1
 CL-TEST::ARRAY-DIMENSION.ERROR.2
 CL-TEST::ARRAY-DIMENSION.ERROR.3
Test CL-TEST::ARRAY-DIMENSIONS.1 failed
Form: (ARRAY-DIMENSIONS CL-TEST::X)
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::X> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-DIMENSIONS.2
 CL-TEST::ARRAY-DIMENSIONS.3
 CL-TEST::ARRAY-DIMENSIONS.4
Test CL-TEST::ARRAY-DIMENSIONS.5 failed
Form: (ARRAY-DIMENSIONS ((1 2 3) (4 5 6) (7 8 9) (10 11 12)))
Expected value:
          (4 3)
Actual value:
          #<Type-Error C1A8F5F7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-DIMENSIONS.6
 CL-TEST::ARRAY-DIMENSIONS.7
Test CL-TEST::ARRAY-DIMENSIONS.8 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (ARRAY-DIMENSIONS (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F))))))
Expected value:
          (3 2)
Actual value:
          #<Type-Error C1A9D3C7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-DIMENSIONS.ERROR.1
 CL-TEST::ARRAY-DIMENSIONS.ERROR.2Space
 CL-TEST::ARRAY-DIMENSIONS.ERROR.3
 CL-TEST::ARRAY-DIMENSIONS.ERROR.4
 CL-TEST::ARRAY-DIMENSIONS.ERROR.5
 CL-TEST::ARRAY-ELEMENT-TYPE.1
 CL-TEST::ARRAY-ELEMENT-TYPE.ORDER.1
 CL-TEST::ARRAY-ELEMENT-TYPE.ERROR.1
 CL-TEST::ARRAY-ELEMENT-TYPE.ERROR.2Space
 CL-TEST::ARRAY-ELEMENT-TYPE.ERROR.3
 CL-TEST::ARRAY-ELEMENT-TYPE.ERROR.4
 CL-TEST::ARRAY-IN-BOUNDS-P.1
 CL-TEST::ARRAY-IN-BOUNDS-P.2
 CL-TEST::ARRAY-IN-BOUNDS-P.3
Test CL-TEST::ARRAY-IN-BOUNDS-P.4 failed
Form: (CL-TEST::NOTNOT (ARRAY-IN-BOUNDS-P NIL))
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of ARRAY is NIL, which is not of type ARRAY.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-IN-BOUNDS-P.5
 CL-TEST::ARRAY-IN-BOUNDS-P.6
 CL-TEST::ARRAY-IN-BOUNDS-P.7
 CL-TEST::ARRAY-IN-BOUNDS-P.8
 CL-TEST::ARRAY-IN-BOUNDS-P.9
 CL-TEST::ARRAY-IN-BOUNDS-P.10
 CL-TEST::ARRAY-IN-BOUNDS-P.11
 CL-TEST::ARRAY-IN-BOUNDS-P.12
 CL-TEST::ARRAY-IN-BOUNDS-P.13
 CL-TEST::ARRAY-IN-BOUNDS-P.14
 CL-TEST::ARRAY-IN-BOUNDS-P.15
 CL-TEST::ARRAY-IN-BOUNDS-P.16
 CL-TEST::ARRAY-IN-BOUNDS-P.17
 CL-TEST::ARRAY-IN-BOUNDS-P.18
 CL-TEST::ARRAY-IN-BOUNDS-P.19
 CL-TEST::ARRAY-IN-BOUNDS-P.20
 CL-TEST::ARRAY-IN-BOUNDS-P.21
 CL-TEST::ARRAY-IN-BOUNDS-P.22
 CL-TEST::ARRAY-IN-BOUNDS-P.23
 CL-TEST::ARRAY-IN-BOUNDS-P.24
 CL-TEST::ARRAY-IN-BOUNDS-P.25
 CL-TEST::ARRAY-IN-BOUNDS-P.ORDER.1
 CL-TEST::ARRAY-IN-BOUNDS-P.ERROR.1
 CL-TEST::ARRAY-DIMENSION-LIMIT.1
 CL-TEST::ARRAY-DIMENSION-LIMIT.2
 CL-TEST::ARRAY-TOTAL-SIZE-LIMIT.1
 CL-TEST::ARRAY-TOTAL-SIZE-LIMIT.2
 CL-TEST::ARRAY-RANK-LIMIT.1
 CL-TEST::ARRAY-RANK-LIMIT.2
Test CL-TEST::ARRAY-RANK.1 failed
Form: (ARRAY-RANK NIL)
Expected value:
          0
Actual value:
          #<Simple-Type-Error The value of ARRAY is NIL, which is not of type ARRAY.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-RANK.2
 CL-TEST::ARRAY-RANK.3
 CL-TEST::ARRAY-RANK.ORDER.1
 CL-TEST::ARRAY-RANK.ERROR.1
 CL-TEST::ARRAY-RANK.ERROR.2Space
 CL-TEST::ARRAY-RANK.ERROR.3
 CL-TEST::ARRAY-RANK.ERROR.4
 CL-TEST::ARRAY-RANK.ERROR.5
Test CL-TEST::ARRAY-ROW-MAJOR-INDEX.1 failed
Form: (ARRAY-ROW-MAJOR-INDEX NIL)
Expected value:
          0
Actual value:
          #<Simple-Type-Error The value of ARRAY is NIL, which is not of type ARRAY.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-ROW-MAJOR-INDEX.2
 CL-TEST::ARRAY-ROW-MAJOR-INDEX.3
 CL-TEST::ARRAY-ROW-MAJOR-INDEX.4
 CL-TEST::ARRAY-ROW-MAJOR-INDEX.5
 CL-TEST::ARRAY-ROW-MAJOR-INDEX.ORDER.1
 CL-TEST::ARRAY-ROW-MAJOR-INDEX.ERROR.1
Test CL-TEST::ARRAY-TOTAL-SIZE.1 failed
Form: (ARRAY-TOTAL-SIZE NIL)
Expected value:
          1
Actual value:
          #<Simple-Type-Error The value of ARRAY is NIL, which is not of type ARRAY.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-TOTAL-SIZE.2
 CL-TEST::ARRAY-TOTAL-SIZE.3
 CL-TEST::ARRAY-TOTAL-SIZE.4
Test CL-TEST::ARRAY-TOTAL-SIZE.5 failed
Form: (ARRAY-TOTAL-SIZE ((1 2 3) (4 5 6) (7 8 9) (CL-TEST::A CL-TEST::B CL-TEST::C)))
Expected value:
          12
Actual value:
          #<Type-Error C1EDB547> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAY-TOTAL-SIZE.6
 CL-TEST::ARRAY-TOTAL-SIZE.ORDER.1
 CL-TEST::ARRAY-TOTAL-SIZE.ERROR.1
 CL-TEST::ARRAY-TOTAL-SIZE.ERROR.2Space
 CL-TEST::ARRAY-TOTAL-SIZE.ERROR.3
 CL-TEST::ARRAY-TOTAL-SIZE.ERROR.4
 CL-TEST::ARRAY-TOTAL-SIZE.ERROR.5
 CL-TEST::ARRAYP.1
 CL-TEST::ARRAYP.2
 CL-TEST::ARRAYP.3
Test CL-TEST::ARRAYP.4 failed
Form: (CL-TEST::NOTNOT-MV (ARRAYP NIL))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::ARRAYP.5 failed
Form: (CL-TEST::NOTNOT-MV (ARRAYP ((1 2 3) (4 5 6))))
Expected value:
          T
Actual value:
          #<Type-Error C1F6A5D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ARRAYP.6
 CL-TEST::ARRAYP.7
 CL-TEST::ARRAYP.ORDER.1
 CL-TEST::ARRAYP.ERROR.1
 CL-TEST::ARRAYP.ERROR.2
 CL-TEST::FILL-POINTER.1
 CL-TEST::FILL-POINTER.2
 CL-TEST::FILL-POINTER.3
 CL-TEST::FILL-POINTER.ORDER.1
 CL-TEST::FILL-POINTER.ORDER.2
 CL-TEST::FILL-POINTER.ERROR.1
 CL-TEST::FILL-POINTER.ERROR.2
Test CL-TEST::FILL-POINTER.ERROR.3 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :FILL-POINTER NIL))) (IF (ARRAY-HAS-FILL-POINTER-P CL-TEST::A) T (EVAL (SYSTEM.INTERNALS::BACKQUOTE (CL-TEST:SIGNALS-ERROR (FILL-POINTER (QUOTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::A))) TYPE-ERROR)))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::FILL-POINTER.ERROR.4
 CL-TEST::FILL-POINTER.ERROR.5Space
Test CL-TEST::FILL-POINTER.ERROR.6 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FILL-POINTER) (FUNCTION (LAMBDA (CL-TEST::X) (AND (VECTORP CL-TEST::X) (ARRAY-HAS-FILL-POINTER-P CL-TEST::X)))))
Expected value:
          NIL
Actual value:
          ((" " ((:IS-TYPEP " " VECTOR))) (#(0 0 0 0 0 0 0 0 0 0) ((:IS-TYPEP #(0 0 0 0 0 0 0 0 0 0) VECTOR)))) [Actual value: #<error during printing>

 NIL
 CL-TEST::FILL-POINTER.ERROR.7
 CL-TEST::ROW-MAJOR-AREF.1
Test CL-TEST::ROW-MAJOR-AREF.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 5 CL-TEST::COLLECT (ROW-MAJOR-AREF ((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H)) CL-TEST::I))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F)
Actual value:
          #<Type-Error 81775047> [Actual value: #<error during printing>

 NIL
Test CL-TEST::ROW-MAJOR-AREF.3 failed
Form: (ROW-MAJOR-AREF 100 0)
Expected value:
          100
Actual value:
          #<Simple-Type-Error The value of ARRAY is 100, which is not of type ARRAY.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROW-MAJOR-AREF.4
 CL-TEST::ROW-MAJOR-AREF.5
Test CL-TEST::ROW-MAJOR-AREF.6 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY NIL :INITIAL-ELEMENT (QUOTE CL-TEST::X)))) (VALUES (AREF CL-TEST::A) (SETF (ROW-MAJOR-AREF CL-TEST::A 0) (QUOTE CL-TEST::Y)) (AREF CL-TEST::A) CL-TEST::A))
Expected value:
          CL-TEST::X
          CL-TEST::Y
          CL-TEST::Y
          CL-TEST::Y
Actual value:
          #<Type-Error 8179BFD7> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROW-MAJOR-AREF.7
 CL-TEST::ROW-MAJOR-AREF.8
 CL-TEST::ROW-MAJOR-AREF.9
Test CL-TEST::ROW-MAJOR-AREF.10 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 3 4)) :INITIAL-CONTENTS (QUOTE (((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H) (CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L)) ((CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P) (CL-TEST::Q CL-TEST::R CL-TEST::S T) (CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X))))))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::TO 23 CL-TEST::COLLECT (ROW-MAJOR-AREF CL-TEST::A CL-TEST::I)))
Expected value:
          (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G CL-TEST::H CL-TEST::I CL-TEST::J CL-TEST::K CL-TEST::L CL-TEST::M CL-TEST::N CL-TEST::O CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::S T CL-TEST::U CL-TEST::V CL-TEST::W CL-TEST::X)
Actual value:
          #<Simple-Error TODO: :INITIAL-CONTENTS for multidimensional arrays.> [Actual value: #<error during printing>

 NIL
 CL-TEST::ROW-MAJOR-AREF.ORDER.1
 CL-TEST::ROW-MAJOR-AREF.ORDER.2
 CL-TEST::ROW-MAJOR-AREF.ERROR.1
 CL-TEST::SIMPLE-VECTOR-P.1
 CL-TEST::SIMPLE-VECTOR-P.2
 CL-TEST::SIMPLE-VECTOR-P.4
 CL-TEST::SIMPLE-VECTOR-P.7
 CL-TEST::SIMPLE-VECTOR-P.8
 CL-TEST::SIMPLE-VECTOR-P.9
 CL-TEST::SIMPLE-VECTOR-P.10
 CL-TEST::SIMPLE-VECTOR-P.11
 CL-TEST::SIMPLE-VECTOR-P.12
 CL-TEST::SIMPLE-VECTOR-P.ERROR.1
 CL-TEST::SIMPLE-VECTOR-P.ERROR.2
 CL-TEST::SVREF.1
 CL-TEST::SVREF.2
 CL-TEST::SVREF.ORDER.1
 CL-TEST::SVREF.ORDER.2
 CL-TEST::SVREF.ERROR.1
 CL-TEST::SVREF.ERROR.2
 CL-TEST::SVREF.ERROR.3
 CL-TEST::SVREF.ERROR.4
 CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.1
 CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.2
 CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.3
 CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.4
 CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.5
 CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.6
Test CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.7 failed
Form: (LET ((CL-TEST::UPGRADED-TYPES (MAPCAR (FUNCTION UPGRADED-ARRAY-ELEMENT-TYPE) CL-TEST::*UPGRADED-ARRAY-TYPES-TO-CHECK*))) (LOOP CL-TEST::FOR TYPE CL-TEST::IN CL-TEST::*UPGRADED-ARRAY-TYPES-TO-CHECK* CL-TEST::FOR CL-TEST::UPGRADED-TYPE CL-TEST::IN CL-TEST::UPGRADED-TYPES APPEND (LOOP CL-TEST::FOR CL-TEST::TYPE2 CL-TEST::IN CL-TEST::*UPGRADED-ARRAY-TYPES-TO-CHECK* CL-TEST::FOR CL-TEST::UPGRADED-TYPE2 CL-TEST::IN CL-TEST::UPGRADED-TYPES WHEN (AND (SUBTYPEP TYPE CL-TEST::TYPE2) (EQUAL (CL-TEST::SUBTYPEP* CL-TEST::UPGRADED-TYPE CL-TEST::UPGRADED-TYPE) (QUOTE (NIL T)))) CL-TEST::COLLECT (LIST TYPE CL-TEST::TYPE2))))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of CHARACTER is 1, which is not of type CHARACTER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.8 failed
Form: (LET ((CL-TEST::UPGRADED-TYPES (MAPCAR (FUNCTION UPGRADED-ARRAY-ELEMENT-TYPE) CL-TEST::*UPGRADED-ARRAY-TYPES-TO-CHECK*))) (LOOP CL-TEST::FOR CL-TEST::TYPE1 CL-TEST::IN CL-TEST::*UPGRADED-ARRAY-TYPES-TO-CHECK* CL-TEST::FOR CL-TEST::UAET1 CL-TEST::IN CL-TEST::UPGRADED-TYPES APPEND (LOOP CL-TEST::FOR CL-TEST::TYPE2 CL-TEST::IN CL-TEST::*UPGRADED-ARRAY-TYPES-TO-CHECK* CL-TEST::FOR CL-TEST::UAET2 CL-TEST::IN CL-TEST::UPGRADED-TYPES WHEN (AND (SUBTYPEP CL-TEST::TYPE1 CL-TEST::TYPE2) (NOT (CL-TEST::EMPIRICAL-SUBTYPEP CL-TEST::UAET1 CL-TEST::UAET2))) CL-TEST::COLLECT (LIST CL-TEST::TYPE1 CL-TEST::TYPE2))))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of CHARACTER is 1, which is not of type CHARACTER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.NIL.1 failed
Form: (LET ((CL-TEST::UAET-NIL (UPGRADED-ARRAY-ELEMENT-TYPE NIL))) (CL-TEST::CHECK-PREDICATE (CL-TEST:TYPEF (SYSTEM.INTERNALS::BACKQUOTE (NOT (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::UAET-NIL))))))
Expected value:
          NIL
Actual value:
          (0 1) [Actual value: #<error during printing>

 NIL
 CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.ERROR.1
 CL-TEST::UPGRADED-ARRAY-ELEMENT-TYPE.ERROR.2
 CL-TEST::VECTOR.TYPE.1
 CL-TEST::VECTOR.TYPE.2
 CL-TEST::VECTOR.TYPE.3
 CL-TEST::VECTOR.TYPE.4
 CL-TEST::VECTOR.TYPE.5
 CL-TEST::VECTOR.TYPE.6
 CL-TEST::VECTOR.TYPE.7
Test CL-TEST::VECTOR.TYPE.8 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D)) (QUOTE VECTOR))
Expected value:
          NIL
Actual value:
          #<Type-Error C1B07057> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR.TYPE.9
 CL-TEST::VECTOR.TYPE.10
 CL-TEST::VECTOR.TYPE.11
 CL-TEST::VECTOR.TYPE.12
 CL-TEST::VECTOR.TYPE.13
 CL-TEST::VECTOR.TYPE.14
 CL-TEST::VECTOR.TYPE.15
 CL-TEST::VECTOR.TYPE.16
 CL-TEST::VECTOR.TYPE.17
 CL-TEST::VECTOR.TYPE.18
 CL-TEST::VECTOR.TYPE.19
 CL-TEST::VECTOR.TYPE.20
 CL-TEST::VECTOR.TYPE.21
 CL-TEST::VECTOR.TYPE.23
 CL-TEST::VECTOR.TYPE.23A
 CL-TEST::VECTOR.TYPE.24
 CL-TEST::VECTOR.TYPE.25
 CL-TEST::VECTOR.TYPE.26
 CL-TEST::VECTOR.TYPE.27
 CL-TEST::VECTOR.TYPE.28
 CL-TEST::VECTOR.TYPE.29
 CL-TEST::VECTOR.TYPE.30
 CL-TEST::VECTOR.TYPE.31
 CL-TEST::VECTOR.TYPE.32
 CL-TEST::VECTOR.TYPE.33
 CL-TEST::VECTOR.TYPE.34
 CL-TEST::VECTOR.TYPE.35
 CL-TEST::VECTOR.TYPE.36
 CL-TEST::VECTOR.TYPE.37
 CL-TEST::VECTOR.TYPE.38
 CL-TEST::VECTOR.TYPE.39
 CL-TEST::VECTOR.TYPE.40
 CL-TEST::VECTOR.TYPE.41
 CL-TEST::VECTOR.TYPE.42
 CL-TEST::VECTOR.TYPE.43
 CL-TEST::VECTOR.TYPE.44
 CL-TEST::VECTOR-AS-CLASS.1
Test CL-TEST::VECTOR-AS-CLASS.2 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #() (FIND-CLASS (QUOTE VECTOR))))
Expected value:
          T
Actual value:
          #<Type-Error C1B4A1D7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.3 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #(CL-TEST::A CL-TEST::B CL-TEST::C) (FIND-CLASS (QUOTE VECTOR))))
Expected value:
          T
Actual value:
          #<Type-Error C1B52257> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.4 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP "" (FIND-CLASS (QUOTE VECTOR))))
Expected value:
          T
Actual value:
          #<Type-Error C1B5AF37> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.5 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP "abcd" (FIND-CLASS (QUOTE VECTOR))))
Expected value:
          T
Actual value:
          #<Type-Error C1B62F57> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.6 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #* (FIND-CLASS (QUOTE VECTOR))))
Expected value:
          T
Actual value:
          #<Type-Error C1B6B0F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.7 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP #*01101010100 (FIND-CLASS (QUOTE VECTOR))))
Expected value:
          T
Actual value:
          #<Type-Error C1B73117> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.8 failed
Form: (TYPEP NIL (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1B7B317> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.9 failed
Form: (TYPEP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D)) (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1B82777> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.10 failed
Form: (TYPEP (MAKE-ARRAY (QUOTE (1 0))) (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1B8B0A7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.11 failed
Form: (TYPEP (MAKE-ARRAY (QUOTE (0 1))) (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1B931C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.12 failed
Form: (TYPEP 1 (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1B9B177> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.13 failed
Form: (TYPEP NIL (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1BA2827> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.14 failed
Form: (TYPEP (QUOTE CL-TEST::X) (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1BA9E77> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.15 failed
Form: (TYPEP (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)) (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1BB1AA7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.16 failed
Form: (TYPEP 10.0 (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1BBA037> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.17 failed
Form: (TYPEP CL-TEST::3/5 (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Unbound-Variable CL-TEST::3/5> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-AS-CLASS.18 failed
Form: (TYPEP (1+ MOST-POSITIVE-FIXNUM) (FIND-CLASS (QUOTE VECTOR)))
Expected value:
          NIL
Actual value:
          #<Type-Error C1BC9D07> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR.1
 CL-TEST::VECTOR.2
 CL-TEST::VECTOR.3
 CL-TEST::VECTOR.4
 CL-TEST::VECTOR.5
 CL-TEST::VECTOR.6
 CL-TEST::VECTOR.7
 CL-TEST::VECTOR.8
 CL-TEST::VECTOR.9
 CL-TEST::VECTOR.10
 CL-TEST::VECTOR.ORDER.1
 CL-TEST::VECTOR-POP.1
Test CL-TEST::VECTOR-POP.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (LET ((CL-TEST::V (VECTOR 1 2 3))) (IF (ARRAY-HAS-FILL-POINTER-P CL-TEST::V) (ERROR (QUOTE TYPE-ERROR) :DATUM CL-TEST::V :EXPECTED-TYPE NIL) (VECTOR-POP CL-TEST::V))) TYPE-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR-POP.ERROR.2
 CL-TEST::VECTOR-POP.ERROR.3
 CL-TEST::VECTOR-POP.ERROR.4
 CL-TEST::VECTOR-PUSH.1
 CL-TEST::VECTOR-PUSH.2
 CL-TEST::VECTOR-PUSH.3
 CL-TEST::VECTOR-PUSH.4
 CL-TEST::VECTOR-PUSH.5
 CL-TEST::VECTOR-PUSH.6
 CL-TEST::VECTOR-PUSH.7
 CL-TEST::VECTOR-PUSH.8
 CL-TEST::VECTOR-PUSH.9
 CL-TEST::VECTOR-PUSH.10
 CL-TEST::VECTOR-PUSH.11
 CL-TEST::VECTOR-PUSH.12
Test CL-TEST::VECTOR-PUSH.13 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::3.0S0 CL-TEST::4.0S0 CL-TEST::5.0S0)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH CL-TEST::0.0S0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          2
          2
          3
          #(CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::0.0S0)
Actual value:
          #<Unbound-Variable CL-TEST::0.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.14 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::3.0S0 CL-TEST::4.0S0 CL-TEST::5.0S0)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH CL-TEST::0.0S0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          5
          NIL
          5
          #(CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::3.0S0 CL-TEST::4.0S0 CL-TEST::5.0S0)
Actual value:
          #<Unbound-Variable CL-TEST::0.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.15 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::3.0F0 CL-TEST::4.0F0 CL-TEST::5.0F0)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH CL-TEST::0.0F0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          2
          2
          3
          #(CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::0.0F0)
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.16 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::3.0F0 CL-TEST::4.0F0 CL-TEST::5.0F0)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH CL-TEST::0.0F0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          5
          NIL
          5
          #(CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::3.0F0 CL-TEST::4.0F0 CL-TEST::5.0F0)
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.17 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::3.0D0 CL-TEST::4.0D0 CL-TEST::5.0D0)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH CL-TEST::0.0D0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          2
          2
          3
          #(CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::0.0D0)
Actual value:
          #<Simple-Error 18 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.18 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::3.0D0 CL-TEST::4.0D0 CL-TEST::5.0D0)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH CL-TEST::0.0D0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          5
          NIL
          5
          #(CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::3.0D0 CL-TEST::4.0D0 CL-TEST::5.0D0)
Actual value:
          #<Simple-Error 18 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.19 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::3.0L0 CL-TEST::4.0L0 CL-TEST::5.0L0)) :ELEMENT-TYPE (QUOTE LONG-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH CL-TEST::0.0L0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          2
          2
          3
          #(CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::0.0L0)
Actual value:
          #<Simple-Error 19 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.20 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::3.0L0 CL-TEST::4.0L0 CL-TEST::5.0L0)) :ELEMENT-TYPE (QUOTE LONG-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH CL-TEST::0.0L0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          5
          NIL
          5
          #(CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::3.0L0 CL-TEST::4.0L0 CL-TEST::5.0L0)
Actual value:
          #<Simple-Error 19 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR-PUSH.ERROR.1
 CL-TEST::VECTOR-PUSH.ERROR.2
 CL-TEST::VECTOR-PUSH.ERROR.3
 CL-TEST::VECTOR-PUSH.ERROR.4
 CL-TEST::VECTOR-PUSH.ERROR.5
 CL-TEST::VECTOR-PUSH.ERROR.6
 CL-TEST::VECTOR-PUSH.ERROR.7
 CL-TEST::VECTOR-PUSH.ERROR.8
 CL-TEST::VECTOR-PUSH.ERROR.9
Test CL-TEST::VECTOR-PUSH.ERROR.10 failed
Form: (CL-TEST::VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE SHORT-FLOAT) :INITIAL-ELEMENT CL-TEST::1.0S0) CL-TEST::2.0S0)
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::1.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.ERROR.11 failed
Form: (CL-TEST::VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE LONG-FLOAT) :INITIAL-ELEMENT CL-TEST::1.0L0) CL-TEST::2.0L0)
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::1.0L0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.ERROR.12 failed
Form: (CL-TEST::VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT) :INITIAL-ELEMENT CL-TEST::1.0F0) CL-TEST::2.0F0)
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::1.0F0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH.ERROR.13 failed
Form: (CL-TEST::VECTOR-PUSH-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT) :INITIAL-ELEMENT CL-TEST::1.0D0) CL-TEST::2.0D0)
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::1.0D0> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR-PUSH.ERROR.14
 CL-TEST::VECTOR-PUSH.ERROR.15
 CL-TEST::VECTOR-PUSH.ERROR.16
 CL-TEST::VECTOR-PUSH-EXTEND.1
 CL-TEST::VECTOR-PUSH-EXTEND.2
 CL-TEST::VECTOR-PUSH-EXTEND.3
 CL-TEST::VECTOR-PUSH-EXTEND.4
 CL-TEST::VECTOR-PUSH-EXTEND.5
 CL-TEST::VECTOR-PUSH-EXTEND.6
 CL-TEST::VECTOR-PUSH-EXTEND.7
 CL-TEST::VECTOR-PUSH-EXTEND.8
 CL-TEST::VECTOR-PUSH-EXTEND.9
 CL-TEST::VECTOR-PUSH-EXTEND.10
 CL-TEST::VECTOR-PUSH-EXTEND.11
 CL-TEST::VECTOR-PUSH-EXTEND.12
Test CL-TEST::VECTOR-PUSH-EXTEND.13 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::3.0S0 CL-TEST::4.0S0 CL-TEST::5.0S0)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH-EXTEND CL-TEST::0.0S0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          2
          2
          3
          #(CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::0.0S0)
Actual value:
          #<Unbound-Variable CL-TEST::0.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.14 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::3.0S0 CL-TEST::4.0S0 CL-TEST::5.0S0)) :ELEMENT-TYPE (QUOTE SHORT-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH-EXTEND CL-TEST::0.0S0 CL-TEST::A 1) (FILL-POINTER CL-TEST::A) (<= (ARRAY-TOTAL-SIZE CL-TEST::A) 5) CL-TEST::A))
Expected value:
          5
          5
          6
          NIL
          #(CL-TEST::1.0S0 CL-TEST::2.0S0 CL-TEST::3.0S0 CL-TEST::4.0S0 CL-TEST::5.0S0 CL-TEST::0.0S0)
Actual value:
          #<Unbound-Variable CL-TEST::0.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.15 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::3.0F0 CL-TEST::4.0F0 CL-TEST::5.0F0)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH-EXTEND CL-TEST::0.0F0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          2
          2
          3
          #(CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::0.0F0)
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.16 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::3.0F0 CL-TEST::4.0F0 CL-TEST::5.0F0)) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH-EXTEND CL-TEST::0.0F0 CL-TEST::A 1) (FILL-POINTER CL-TEST::A) (<= (ARRAY-TOTAL-SIZE CL-TEST::A) 5) CL-TEST::A))
Expected value:
          5
          5
          6
          NIL
          #(CL-TEST::1.0F0 CL-TEST::2.0F0 CL-TEST::3.0F0 CL-TEST::4.0F0 CL-TEST::5.0F0 CL-TEST::0.0F0)
Actual value:
          #<Simple-Error 17 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.17 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::3.0D0 CL-TEST::4.0D0 CL-TEST::5.0D0)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH-EXTEND CL-TEST::0.0D0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          2
          2
          3
          #(CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::0.0D0)
Actual value:
          #<Simple-Error 18 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.18 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::3.0D0 CL-TEST::4.0D0 CL-TEST::5.0D0)) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH-EXTEND CL-TEST::0.0D0 CL-TEST::A 1) (FILL-POINTER CL-TEST::A) (<= (ARRAY-TOTAL-SIZE CL-TEST::A) 5) CL-TEST::A))
Expected value:
          5
          5
          6
          NIL
          #(CL-TEST::1.0D0 CL-TEST::2.0D0 CL-TEST::3.0D0 CL-TEST::4.0D0 CL-TEST::5.0D0 CL-TEST::0.0D0)
Actual value:
          #<Simple-Error 18 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.19 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::3.0L0 CL-TEST::4.0L0 CL-TEST::5.0L0)) :ELEMENT-TYPE (QUOTE LONG-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH-EXTEND CL-TEST::0.0L0 CL-TEST::A) (FILL-POINTER CL-TEST::A) CL-TEST::A))
Expected value:
          2
          2
          3
          #(CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::0.0L0)
Actual value:
          #<Simple-Error 19 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.20 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (5)) :FILL-POINTER 5 :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE (CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::3.0L0 CL-TEST::4.0L0 CL-TEST::5.0L0)) :ELEMENT-TYPE (QUOTE LONG-FLOAT)))) (VALUES (FILL-POINTER CL-TEST::A) (VECTOR-PUSH-EXTEND CL-TEST::0.0L0 CL-TEST::A 1) (FILL-POINTER CL-TEST::A) (<= (ARRAY-TOTAL-SIZE CL-TEST::A) 5) CL-TEST::A))
Expected value:
          5
          5
          6
          NIL
          #(CL-TEST::1.0L0 CL-TEST::2.0L0 CL-TEST::3.0L0 CL-TEST::4.0L0 CL-TEST::5.0L0 CL-TEST::0.0L0)
Actual value:
          #<Simple-Error 19 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR-PUSH-EXTEND.21
Test CL-TEST::VECTOR-PUSH-EXTEND.22 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 6 :INITIAL-ELEMENT NIL)) (CL-TEST::A2 (MAKE-ARRAY 0 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 0))) (VALUES (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (VECTOR-PUSH-EXTEND (QUOTE CL-TEST::FOO) CL-TEST::A2) (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A1) (CL-TEST::NOTNOT (ADJUSTABLE-ARRAY-P CL-TEST::A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2))))
Expected value:
          0
          NIL
          0
          1
          (CL-TEST::FOO)
          (NIL NIL NIL NIL NIL NIL)
          T
          (NIL 0)
Actual value:
          #<Simple-Error TODO: Adjusting unusual array #().> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR-PUSH-EXTEND.23
Test CL-TEST::VECTOR-PUSH-EXTEND.24 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY 4 :INITIAL-ELEMENT NIL)) (CL-TEST::A2 (MAKE-ARRAY 2 :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 2))) (VALUES (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A1) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (VECTOR-PUSH-EXTEND (QUOTE CL-TEST::FOO) CL-TEST::A2 7) (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A1) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (ARRAY-DIMENSION CL-TEST::A2 0) (CL-TEST::NOTNOT (ADJUSTABLE-ARRAY-P CL-TEST::A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A2))))
Expected value:
          (NIL NIL NIL NIL)
          (NIL NIL)
          2
          3
          (NIL NIL NIL NIL)
          (NIL NIL CL-TEST::FOO)
          9
          T
          (NIL 0)
Actual value:
          #<Simple-Error TODO: Adjusting unusual array #(NIL NIL).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.25 failed
Form: (LOOP CL-TEST::FOR CL-TEST::ADJ CL-TEST::IN (QUOTE (NIL T)) NCONC (LOOP CL-TEST::FOR CL-TEST::BITS CL-TEST::FROM 1 CL-TEST::TO 64 CL-TEST::FOR CL-TEST::ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::BITS))) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY 10 :INITIAL-ELEMENT 0 :ELEMENT-TYPE CL-TEST::ETYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE CL-TEST::ADJ :FILL-POINTER 0) CL-TEST::FOR CL-TEST::RESULT = (LIST (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (VECTOR-PUSH-EXTEND 1 CL-TEST::A2) (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A1)) UNLESS (EQUAL CL-TEST::RESULT (QUOTE (0 NIL 0 1 (1) (0 0 1 0 0 0 0 0 0 0)))) CL-TEST::COLLECT (LIST CL-TEST::ETYPE CL-TEST::ADJ CL-TEST::RESULT)))
Expected value:
          NIL
Actual value:
          #<Simple-Error 4 fell through ECASE expression. Wanted one of (16 9 8 7 6 3 2 1 0)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.26 failed
Form: (LOOP CL-TEST::FOR CL-TEST::BITS CL-TEST::FROM 1 CL-TEST::TO 64 CL-TEST::FOR CL-TEST::ETYPE = (SYSTEM.INTERNALS::BACKQUOTE (UNSIGNED-BYTE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::BITS))) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY 8 :INITIAL-ELEMENT 0 :ELEMENT-TYPE CL-TEST::ETYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 6) CL-TEST::FOR CL-TEST::RESULT = (LIST (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (VECTOR-PUSH-EXTEND 1 CL-TEST::A2) (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A1) (CL-TEST::NOTNOT (ADJUSTABLE-ARRAY-P CL-TEST::A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A1))) UNLESS (EQUAL CL-TEST::RESULT (QUOTE (6 (0 0 0 0 0 0) 6 7 (0 0 0 0 0 0 1) (0 0 0 0 0 0 0 0) T (NIL 0)))) CL-TEST::COLLECT (LIST CL-TEST::ETYPE CL-TEST::RESULT))
Expected value:
          NIL
Actual value:
          #<Simple-Error TODO: Adjusting unusual array #*000000.> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR-PUSH-EXTEND.27
Test CL-TEST::VECTOR-PUSH-EXTEND.28 failed
Form: (LOOP CL-TEST::FOR CL-TEST::ETYPE CL-TEST::IN (QUOTE (CHARACTER BASE-CHAR STANDARD-CHAR)) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY 8 :INITIAL-ELEMENT #\a :ELEMENT-TYPE CL-TEST::ETYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 6) CL-TEST::FOR CL-TEST::RESULT = (LIST (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (VECTOR-PUSH-EXTEND #\b CL-TEST::A2) (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A1) (CL-TEST::NOTNOT (ADJUSTABLE-ARRAY-P CL-TEST::A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A1))) UNLESS (EQUAL CL-TEST::RESULT (QUOTE (6 (#\a #\a #\a #\a #\a #\a) 6 7 (#\a #\a #\a #\a #\a #\a #\b) (#\a #\a #\a #\a #\a #\a #\a #\a) T (NIL 0)))) CL-TEST::COLLECT (LIST CL-TEST::ETYPE CL-TEST::RESULT))
Expected value:
          NIL
Actual value:
          #<Simple-Error TODO: Adjusting unusual array "aaaaaa".> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.29 failed
Form: (LOOP CL-TEST::FOR CL-TEST::ADJ CL-TEST::IN (QUOTE (NIL T)) NCONC (LOOP CL-TEST::FOR CL-TEST::ETYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::ZERO CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::ONE CL-TEST::IN (QUOTE (CL-TEST::1.0S0 CL-TEST::1.0F0 CL-TEST::1.0D0 CL-TEST::1.0L0)) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY 10 :INITIAL-ELEMENT CL-TEST::ZERO :ELEMENT-TYPE CL-TEST::ETYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE CL-TEST::ADJ :FILL-POINTER 0) CL-TEST::FOR CL-TEST::RESULT = (LIST (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (VECTOR-PUSH-EXTEND CL-TEST::ONE CL-TEST::A2) (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A1)) UNLESS (EQUAL CL-TEST::RESULT (SYSTEM.INTERNALS::BACKQUOTE (0 NIL 0 1 ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ONE)) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ONE) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO))))) CL-TEST::COLLECT (LIST CL-TEST::ETYPE CL-TEST::ADJ CL-TEST::RESULT)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81BA19E7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.30 failed
Form: (LOOP CL-TEST::FOR CL-TEST::ETYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::ZERO CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::ONE CL-TEST::IN (QUOTE (CL-TEST::1.0S0 CL-TEST::1.0F0 CL-TEST::1.0D0 CL-TEST::1.0L0)) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY 8 :INITIAL-ELEMENT CL-TEST::ZERO :ELEMENT-TYPE CL-TEST::ETYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY 6 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::A1 :DISPLACED-INDEX-OFFSET 2 :ADJUSTABLE T :FILL-POINTER 6) CL-TEST::FOR CL-TEST::RESULT = (LIST (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (VECTOR-PUSH-EXTEND CL-TEST::ONE CL-TEST::A2) (FILL-POINTER CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A2) (MAP (QUOTE LIST) (FUNCTION IDENTITY) CL-TEST::A1) (CL-TEST::NOTNOT (ADJUSTABLE-ARRAY-P CL-TEST::A2)) (MULTIPLE-VALUE-LIST (ARRAY-DISPLACEMENT CL-TEST::A1))) UNLESS (EQUAL CL-TEST::RESULT (SYSTEM.INTERNALS::BACKQUOTE (6 ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO)) 6 7 ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ONE)) ((SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::ZERO)) T (NIL 0)))) CL-TEST::COLLECT (LIST CL-TEST::ETYPE CL-TEST::RESULT))
Expected value:
          NIL
Actual value:
          #<Type-Error 81BD77A7> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.1
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.2
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.3
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.4
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.5
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.6
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.7
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.8
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.9
Test CL-TEST::VECTOR-PUSH-EXTEND.ERROR.10 failed
Form: (CL-TEST::VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE SHORT-FLOAT) :INITIAL-ELEMENT CL-TEST::1.0S0) CL-TEST::2.0S0)
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::1.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.ERROR.11 failed
Form: (CL-TEST::VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE LONG-FLOAT) :INITIAL-ELEMENT CL-TEST::1.0L0) CL-TEST::2.0L0)
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::1.0L0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.ERROR.12 failed
Form: (CL-TEST::VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE SINGLE-FLOAT) :INITIAL-ELEMENT CL-TEST::1.0F0) CL-TEST::2.0F0)
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::1.0F0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::VECTOR-PUSH-EXTEND.ERROR.13 failed
Form: (CL-TEST::VECTOR-PUSH-EXTEND-ERROR-TEST (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE DOUBLE-FLOAT) :INITIAL-ELEMENT CL-TEST::1.0D0) CL-TEST::2.0D0)
Expected value:
          T
Actual value:
          #<Unbound-Variable CL-TEST::1.0D0> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.14
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.15
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.16
 CL-TEST::VECTOR-PUSH-EXTEND.ERROR.17
 CL-TEST::VECTORP.1
 CL-TEST::VECTORP.2
 CL-TEST::VECTORP.3
 CL-TEST::VECTORP.4
 CL-TEST::VECTORP.5
 CL-TEST::VECTORP.6
 CL-TEST::VECTORP.7
Test CL-TEST::VECTORP.8 failed
Form: (VECTORP ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D)))
Expected value:
          NIL
Actual value:
          #<Type-Error 81CC44D7> [Actual value: #<error during printing>

 NIL
 CL-TEST::VECTORP.9
 CL-TEST::VECTORP.10
 CL-TEST::VECTORP.11
 CL-TEST::VECTORP.12
 CL-TEST::VECTORP.13
 CL-TEST::VECTORP.14
 CL-TEST::VECTORP.15
 CL-TEST::VECTORP.ERROR.1
 CL-TEST::VECTORP.ERROR.2
Test CL-TEST::BIT.1 failed
Form: (BIT #*0010 2)
Expected value:
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.2 failed
Form: (LET ((CL-TEST::A #*00000000)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW (LENGTH CL-TEST::A) CL-TEST::COLLECT (LET ((CL-TEST::B (COPY-SEQ CL-TEST::A))) (SETF (BIT CL-TEST::B CL-TEST::I) 1) CL-TEST::B)))
Expected value:
          (#*10000000 #*01000000 #*00100000 #*00010000 #*00001000 #*00000100 #*00000010 #*00000001)
Actual value:
          #<Undefined-Function (SETF BIT)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.3 failed
Form: (LET ((CL-TEST::A #*11111111)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW (LENGTH CL-TEST::A) CL-TEST::COLLECT (LET ((CL-TEST::B (COPY-SEQ CL-TEST::A))) (SETF (BIT CL-TEST::B CL-TEST::I) 0) CL-TEST::B)))
Expected value:
          (#*01111111 #*10111111 #*11011111 #*11101111 #*11110111 #*11111011 #*11111101 #*11111110)
Actual value:
          #<Undefined-Function (SETF BIT)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.4 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF CL-TEST::A) (BIT CL-TEST::A) (SETF (BIT CL-TEST::A) 1) (AREF CL-TEST::A) (BIT CL-TEST::A)))
Expected value:
          0
          0
          1
          1
          1
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::BIT-ARRAY is #<(Array Nil Nil) 81D15713>, which is not of type (ARRAY BIT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.5 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (1 1)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF CL-TEST::A 0 0) (BIT CL-TEST::A 0 0) (SETF (BIT CL-TEST::A 0 0) 1) (AREF CL-TEST::A 0 0) (BIT CL-TEST::A 0 0)))
Expected value:
          0
          0
          1
          1
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.6 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10 10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF CL-TEST::A 5 5) (BIT CL-TEST::A 5 5) (SETF (BIT CL-TEST::A 5 5) 1) (AREF CL-TEST::A 5 5) (BIT CL-TEST::A 5 5)))
Expected value:
          0
          0
          1
          1
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.7 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 1 0 0 1 1 1 0 0)) :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 5))) (VALUES (COERCE CL-TEST::A (QUOTE LIST)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW 10 CL-TEST::COLLECT (BIT CL-TEST::A CL-TEST::I)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW 10 CL-TEST::COLLECT (SETF (BIT CL-TEST::A CL-TEST::I) (- 1 (BIT CL-TEST::A CL-TEST::I)))) (COERCE CL-TEST::A (QUOTE LIST)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW 10 CL-TEST::COLLECT (BIT CL-TEST::A CL-TEST::I)) (FILL-POINTER CL-TEST::A)))
Expected value:
          (0 1 1 0 0)
          (0 1 1 0 0 1 1 1 0 0)
          (1 0 0 1 1 0 0 0 1 1)
          (1 0 0 1 1)
          (1 0 0 1 1 0 0 0 1 1)
          5
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.8 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 1 1 0 0 1 1 1 0 0)) :ELEMENT-TYPE (QUOTE BIT) :ADJUSTABLE T))) (VALUES (COERCE CL-TEST::A (QUOTE LIST)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW 10 CL-TEST::COLLECT (BIT CL-TEST::A CL-TEST::I)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW 10 CL-TEST::COLLECT (SETF (BIT CL-TEST::A CL-TEST::I) (- 1 (BIT CL-TEST::A CL-TEST::I)))) (COERCE CL-TEST::A (QUOTE LIST)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW 10 CL-TEST::COLLECT (BIT CL-TEST::A CL-TEST::I))))
Expected value:
          (0 1 1 0 0 1 1 1 0 0)
          (0 1 1 0 0 1 1 1 0 0)
          (1 0 0 1 1 0 0 0 1 1)
          (1 0 0 1 1 0 0 0 1 1)
          (1 0 0 1 1 0 0 0 1 1)
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.ORDER.1 failed
Form: (LET ((CL-TEST::X 0) CL-TEST::Y CL-TEST::Z (CL-TEST::B (COPY-SEQ #*01010))) (VALUES (BIT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::B) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) 1)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          1
          2
          1
          2
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT.ORDER.2 failed
Form: (LET ((CL-TEST::X 0) CL-TEST::Y CL-TEST::Z CL-TEST::W (CL-TEST::B (COPY-SEQ #*01010))) (VALUES (SETF (BIT (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::B) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) 1)) (PROGN (SETF CL-TEST::W (INCF CL-TEST::X)) 0)) CL-TEST::B CL-TEST::X CL-TEST::Y CL-TEST::Z CL-TEST::W))
Expected value:
          0
          #*00010
          3
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF BIT)> [Actual value: #<error during printing>

 NIL
 CL-TEST::BIT.ERROR.1
Test CL-TEST::SBIT.1 failed
Form: (SBIT #*0010 2)
Expected value:
          1
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SBIT.2 failed
Form: (LET ((CL-TEST::A #*00000000)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW (LENGTH CL-TEST::A) CL-TEST::COLLECT (LET ((CL-TEST::B (COPY-SEQ CL-TEST::A))) (SETF (SBIT CL-TEST::B CL-TEST::I) 1) CL-TEST::B)))
Expected value:
          (#*10000000 #*01000000 #*00100000 #*00010000 #*00001000 #*00000100 #*00000010 #*00000001)
Actual value:
          #<Undefined-Function (SETF SBIT)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SBIT.3 failed
Form: (LET ((CL-TEST::A #*11111111)) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::BELOW (LENGTH CL-TEST::A) CL-TEST::COLLECT (LET ((CL-TEST::B (COPY-SEQ CL-TEST::A))) (SETF (SBIT CL-TEST::B CL-TEST::I) 0) CL-TEST::B)))
Expected value:
          (#*01111111 #*10111111 #*11011111 #*11101111 #*11110111 #*11111011 #*11111101 #*11111110)
Actual value:
          #<Undefined-Function (SETF SBIT)> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SBIT.4 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF CL-TEST::A) (SBIT CL-TEST::A) (SETF (SBIT CL-TEST::A) 1) (AREF CL-TEST::A) (SBIT CL-TEST::A)))
Expected value:
          0
          0
          1
          1
          1
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::BIT-ARRAY is #<(Array Nil Nil) 81DD54F3>, which is not of type (SIMPLE-ARRAY BIT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SBIT.5 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (1 1)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF CL-TEST::A 0 0) (SBIT CL-TEST::A 0 0) (SETF (SBIT CL-TEST::A 0 0) 1) (AREF CL-TEST::A 0 0) (SBIT CL-TEST::A 0 0)))
Expected value:
          0
          0
          1
          1
          1
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::BIT-ARRAY is #<(Array Bit (1 1)) 81DE5463>, which is not of type (SIMPLE-ARRAY BIT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SBIT.6 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (10 10)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (AREF CL-TEST::A 5 5) (SBIT CL-TEST::A 5 5) (SETF (SBIT CL-TEST::A 5 5) 1) (AREF CL-TEST::A 5 5) (SBIT CL-TEST::A 5 5)))
Expected value:
          0
          0
          1
          1
          1
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::BIT-ARRAY is #<(Array Bit (10 10)) 81DF6293>, which is not of type (SIMPLE-ARRAY BIT).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SBIT.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::A CL-TEST::B) (VALUES (SBIT (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) #*001001) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) 1)) CL-TEST::I CL-TEST::A CL-TEST::B))
Expected value:
          0
          2
          1
          2
Actual value:
          #<Unbound-Variable ARRAY> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SBIT.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::A CL-TEST::B CL-TEST::C (CL-TEST::V (COPY-SEQ #*001001))) (VALUES (SETF (SBIT (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::V) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) 1)) (PROGN (SETF CL-TEST::C (INCF CL-TEST::I)) 1)) CL-TEST::V CL-TEST::I CL-TEST::A CL-TEST::B CL-TEST::C))
Expected value:
          1
          #*011001
          3
          1
          2
          3
Actual value:
          #<Undefined-Function (SETF SBIT)> [Actual value: #<error during printing>

 NIL
 CL-TEST::SBIT.ERROR.1
Test CL-TEST::BIT-AND.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-AND CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          0
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-AND CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          0
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-AND CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          1
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-AND CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          1
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-AND CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-AND CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          1
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-AND CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-AND CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0001
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-AND CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*0001
          #*0001
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*1110)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-AND CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*0001
          #*0011
          #*0101
          #*0001
          T
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-AND CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0001
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-AND CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (0 1))
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-AND CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 0) (0 1))
          ((0 0) (1 1))
          ((0 0) (0 1))
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-AND CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (0 1))
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-AND CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (0 1))
          ((0 0) (0 1))
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-AND CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (0 1))
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-AND CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (0 1))
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-AND CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*00010011
          ((0 0) (0 1))
          ((0 0) (1 1))
          ((0 0) (0 1))
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-AND CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100110001
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (0 1))
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-AND (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*0001
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-AND #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*1000
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-AND #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*00100010
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-AND (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*0
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-AND #*01101 #*01011))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-AND) (FUNCTION LOGAND))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-AND) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-AND #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-AND.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-AND #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-AND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC1 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          0
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC1 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          0
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC1 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          1
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC1 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          1
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          1
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0100
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*0100
          #*0100
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*0000)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*0100
          #*0011
          #*0101
          #*0100
          T
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0100
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (1 0))
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 0) (1 0))
          ((0 0) (1 1))
          ((0 0) (1 0))
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (1 0))
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (1 0))
          ((0 0) (1 0))
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (1 0))
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (1 0))
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*00100011
          ((0 0) (1 0))
          ((0 0) (1 1))
          ((0 0) (1 0))
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-ANDC1 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100110010
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 0) (1 0))
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ANDC1 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*0100
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ANDC1 #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*0100
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ANDC1 #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*01001000
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-ANDC1 (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*0
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-ANDC1 #*10010 #*01011))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-ANDC1) (FUNCTION LOGANDC1))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ANDC1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ANDC1 #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC1.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ANDC1 #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ANDC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC2 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          0
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC2 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          0
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC2 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          1
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ANDC2 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          1
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          0
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          0
          1
          0
          T
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0010
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*0010
          #*0010
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*1110)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*0010
          #*0011
          #*0101
          #*0010
          T
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0010
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (0 0))
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 0))
          ((0 0) (1 1))
          ((0 1) (0 0))
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (0 0))
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (0 0))
          ((0 1) (0 0))
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (0 0))
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (0 0))
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01000011
          ((0 1) (0 0))
          ((0 0) (1 1))
          ((0 1) (0 0))
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-ANDC2 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100110100
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (0 0))
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ANDC2 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*0010
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ANDC2 #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*0010
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ANDC2 #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*10000001
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-ANDC2 (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*0
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-ANDC2 #*01101 #*10100))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-ANDC2) (FUNCTION LOGANDC2))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ANDC2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ANDC2 #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ANDC2.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ANDC2 #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ANDC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-EQV CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          0
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-EQV CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          0
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-EQV CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          1
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-EQV CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          1
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-EQV CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-EQV CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          1
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-EQV CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-EQV CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1001
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-EQV CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*1001
          #*1001
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*0000)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-EQV CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*1001
          #*0011
          #*0101
          #*1001
          T
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-EQV CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1001
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-EQV CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-EQV CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((1 0) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-EQV CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-EQV CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-EQV CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-EQV CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-EQV CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*10010011
          ((1 0) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-EQV CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100111001
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-EQV (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*1001
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-EQV #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*1001
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-EQV #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*00110110
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-EQV (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*1
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-EQV #*01101 #*10100))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-EQV) (FUNCTION LOGEQV))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-EQV) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-EQV #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-EQV.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-EQV #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-EQV> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-IOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          0
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-IOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          0
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-IOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          1
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-IOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          1
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-IOR CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-IOR CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          1
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-IOR CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          1
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-IOR CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0111
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-IOR CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*0111
          #*0111
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*1110)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-IOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*0111
          #*0011
          #*0101
          #*0111
          T
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-IOR CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0111
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-IOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 1))
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-IOR CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (1 1))
          ((0 0) (1 1))
          ((0 1) (1 1))
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-IOR CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 1))
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-IOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 1))
          ((0 1) (1 1))
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-IOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 1))
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-IOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 1))
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-IOR CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01110011
          ((0 1) (1 1))
          ((0 0) (1 1))
          ((0 1) (1 1))
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-IOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100110111
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 1))
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-IOR (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*0111
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-IOR #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*1110
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-IOR #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*11101011
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-IOR (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*0
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-IOR #*00101 #*10100))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-IOR) (FUNCTION LOGIOR))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-IOR) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-IOR #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-IOR.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-IOR #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-IOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NAND CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          0
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NAND CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          0
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NAND CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          1
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NAND CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          1
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-NAND CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-NAND CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          1
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-NAND CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          1
          0
          1
          T
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-NAND CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1110
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-NAND CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*1110
          #*1110
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*1110)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-NAND CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*1110
          #*0011
          #*0101
          #*1110
          T
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-NAND CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1110
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-NAND CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-NAND CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((1 1) (1 0))
          ((0 0) (1 1))
          ((1 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-NAND CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-NAND CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (1 0))
          ((1 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-NAND CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-NAND CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-NAND CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*11100011
          ((1 1) (1 0))
          ((0 0) (1 1))
          ((1 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-NAND CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100111110
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-NAND (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*1110
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-NAND #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*0111
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-NAND #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*11011101
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-NAND (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*1
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-NAND #*00101 #*10100))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-NAND) (FUNCTION LOGNAND))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-NAND) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-NAND #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NAND.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-NAND #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-NAND> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          0
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          0
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          1
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-NOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          1
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-NOR CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-NOR CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          1
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-NOR CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-NOR CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1000
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-NOR CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*1000
          #*1000
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*1110)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-NOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*1000
          #*0011
          #*0101
          #*1000
          T
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-NOR CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1000
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-NOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 0))
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-NOR CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((1 0) (0 0))
          ((0 0) (1 1))
          ((1 0) (0 0))
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-NOR CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 0))
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-NOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 0))
          ((1 0) (0 0))
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-NOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 0))
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-NOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 0))
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-NOR CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*10000011
          ((1 0) (0 0))
          ((0 0) (1 1))
          ((1 0) (0 0))
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-NOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100111000
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (0 0))
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-NOR (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*1000
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-NOR #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*0001
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-NOR #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*00010100
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-NOR (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*1
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-NOR #*00101 #*10100))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-NOR) (FUNCTION LOGNOR))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-NOR) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-NOR #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOR.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-NOR #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-NOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC1 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          0
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC1 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          0
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC1 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          1
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC1 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          1
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          1
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-ORC1 CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1101
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-ORC1 CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*1101
          #*1101
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*1110)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-ORC1 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*1101
          #*0011
          #*0101
          #*1101
          T
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-ORC1 CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1101
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (1 1))
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((1 0) (1 1))
          ((0 0) (1 1))
          ((1 0) (1 1))
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (1 1))
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (1 1))
          ((1 0) (1 1))
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (1 1))
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (1 1))
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*10110011
          ((1 0) (1 1))
          ((0 0) (1 1))
          ((1 0) (1 1))
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-ORC1 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100111011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 0) (1 1))
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ORC1 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*1101
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ORC1 #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*1101
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ORC1 #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*01111110
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-ORC1 (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*1
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE SPEED (SAFETY 0) (SPACE 0))) (BIT-ORC1 #*11010 #*10100))) (VALUES (CL-TEST::%F) (LET ((CL-TEST::BV (CL-TEST::%F))) (SETF (ELT CL-TEST::BV 0) 0) CL-TEST::BV) (CL-TEST::%F)))
Expected value:
          #*10101
          #*00101
          #*10101
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-ORC1) (FUNCTION LOGORC1))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ORC1) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ORC1 #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC1.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ORC1 #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ORC1> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC2 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          0
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC2 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          0
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC2 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          1
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-ORC2 CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          1
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          1
          1
          1
          T
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          1
          0
          1
          T
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-ORC2 CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1011
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-ORC2 CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*1011
          #*1011
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*1110)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-ORC2 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*1011
          #*0011
          #*0101
          #*1011
          T
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-ORC2 CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1011
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (0 1))
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((1 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (0 1))
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (0 1))
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (0 1))
          ((1 1) (0 1))
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (0 1))
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (0 1))
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*11010011
          ((1 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (0 1))
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-ORC2 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100111101
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((1 1) (0 1))
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ORC2 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*1011
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ORC2 #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*1011
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-ORC2 #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*10110111
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-ORC2 (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*1
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE SPEED (SAFETY 0) (SPACE 0))) (BIT-ORC2 #*00101 #*01011))) (VALUES (CL-TEST::%F) (LET ((CL-TEST::BV (CL-TEST::%F))) (SETF (ELT CL-TEST::BV 0) 0) CL-TEST::BV) (CL-TEST::%F)))
Expected value:
          #*10101
          #*00101
          #*10101
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-ORC2) (FUNCTION LOGORC2))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ORC2) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ORC2 #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-ORC2.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-ORC2 #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-ORC2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-XOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          0
          0
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.2 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-XOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          1
          0
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.3 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-XOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          1
          0
          1
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.4 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT)))) (VALUES (BIT-XOR CL-TEST::S1 CL-TEST::S2) CL-TEST::S1 CL-TEST::S2))
Expected value:
          0
          1
          1
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.5 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-XOR CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          0
          0
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.6 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S3 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-XOR CL-TEST::S1 CL-TEST::S2 CL-TEST::S3))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S3 CL-TEST::RESULT)))
Expected value:
          1
          1
          0
          0
          T
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.7 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::RESULT (BIT-XOR CL-TEST::S1 CL-TEST::S2 T))) (VALUES CL-TEST::S1 CL-TEST::S2 CL-TEST::RESULT (CL-TEST::EQT CL-TEST::S1 CL-TEST::RESULT)))
Expected value:
          1
          0
          1
          T
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-XOR CL-TEST::A1 CL-TEST::A2)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0110
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.9 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-XOR CL-TEST::A1 CL-TEST::A2 T)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A1)))
Expected value:
          #*0110
          #*0110
          #*0101
          T
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.10 failed
Form: (LET* ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101)) (CL-TEST::A3 (COPY-SEQ #*1110)) (CL-TEST::RESULT (CL-TEST::CHECK-VALUES (BIT-XOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3)))) (VALUES CL-TEST::RESULT CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 (CL-TEST::EQT CL-TEST::RESULT CL-TEST::A3)))
Expected value:
          #*0110
          #*0011
          #*0101
          #*0110
          T
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.11 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011)) (CL-TEST::A2 (COPY-SEQ #*0101))) (VALUES (CL-TEST::CHECK-VALUES (BIT-XOR CL-TEST::A1 CL-TEST::A2 NIL)) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*0110
          #*0011
          #*0101
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.12 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-XOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.13 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-XOR CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (1 0))
          ((0 0) (1 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.14 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::RESULT (BIT-XOR CL-TEST::A1 CL-TEST::A2 NIL))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.15 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))))) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0))))) (CL-TEST::RESULT (BIT-XOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 0))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.16 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (0 1))) :ADJUSTABLE T)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 0) (1 1))) :ADJUSTABLE T)) (CL-TEST::RESULT (BIT-XOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.17 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-XOR CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01010011
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.18 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (8)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::RESULT (BIT-XOR CL-TEST::A1 CL-TEST::A2 T))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*01100011
          ((0 1) (1 0))
          ((0 0) (1 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.19 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 0 1 1 1 1 1 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 4)) (CL-TEST::A3 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 8)) (CL-TEST::RESULT (BIT-XOR CL-TEST::A1 CL-TEST::A2 CL-TEST::A3))) (VALUES CL-TEST::A0 CL-TEST::A1 CL-TEST::A2 CL-TEST::RESULT))
Expected value:
          #*010100110110
          ((0 1) (0 1))
          ((0 0) (1 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.20 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-XOR (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*0011)) #*0101))
Expected value:
          #*0110
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.21 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-XOR #*1010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*1100))))
Expected value:
          #*0110
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.22 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-XOR #*10100011 #*01101010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*11001001
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.ORDER.1 failed
Form: (LET* ((CL-TEST::S1 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::S2 (MAKE-ARRAY 1 :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE BIT))) (CL-TEST::X 0) CL-TEST::Y CL-TEST::Z) (VALUES (BIT-XOR (PROGN (SETF CL-TEST::Y (INCF CL-TEST::X)) CL-TEST::S1) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::X)) CL-TEST::S2)) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected value:
          #*0
          2
          1
          2
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-XOR #*00101 #*10100))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.RANDOM.1 failed
Form: (CL-TEST::BIT-RANDOM-TEST-FN (FUNCTION BIT-XOR) (FUNCTION LOGXOR))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-XOR) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-XOR #*000) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-XOR.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-XOR #*000 #*0100 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-XOR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.1 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (BIT-NOT CL-TEST::A1) CL-TEST::A1))
Expected value:
          1
          0
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.2 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1))) (VALUES (BIT-NOT CL-TEST::A1) CL-TEST::A1))
Expected value:
          0
          1
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.3 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (BIT-NOT CL-TEST::A1 T) CL-TEST::A1))
Expected value:
          1
          1
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.4 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1))) (VALUES (BIT-NOT CL-TEST::A1 T) CL-TEST::A1))
Expected value:
          0
          0
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.5 failed
Form: (LET* ((CL-TEST::A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1)) (CL-TEST::A2 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1)) (CL-TEST::RESULT (BIT-NOT CL-TEST::A1 CL-TEST::A2))) (VALUES CL-TEST::A1 CL-TEST::A2 (CL-TEST::EQT CL-TEST::A2 CL-TEST::RESULT)))
Expected value:
          1
          0
          T
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.6 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY NIL :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (BIT-NOT CL-TEST::A1 NIL) CL-TEST::A1))
Expected value:
          1
          0
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.7 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011010110))) (VALUES (BIT-NOT CL-TEST::A1) CL-TEST::A1))
Expected value:
          #*1100101001
          #*0011010110
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.8 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011010110))) (VALUES (BIT-NOT CL-TEST::A1 T) CL-TEST::A1))
Expected value:
          #*1100101001
          #*1100101001
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.9 failed
Form: (LET ((CL-TEST::A1 (COPY-SEQ #*0011010110)) (CL-TEST::A2 (COPY-SEQ #*0000000000))) (VALUES (BIT-NOT CL-TEST::A1 CL-TEST::A2) CL-TEST::A1 CL-TEST::A2))
Expected value:
          #*1100101001
          #*0011010110
          #*1100101001
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.10 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (1 0)))))) (VALUES (BIT-NOT CL-TEST::A1) CL-TEST::A1))
Expected value:
          ((1 0) (0 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.11 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (1 0)))))) (VALUES (BIT-NOT CL-TEST::A1 NIL) CL-TEST::A1))
Expected value:
          ((1 0) (0 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.12 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (1 0)))))) (VALUES (BIT-NOT CL-TEST::A1 T) CL-TEST::A1))
Expected value:
          ((1 0) (0 1))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.13 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1) (1 0))))) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (VALUES (BIT-NOT CL-TEST::A1 CL-TEST::A2) CL-TEST::A1 CL-TEST::A2))
Expected value:
          ((1 0) (0 1))
          ((0 1) (1 0))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.14 failed
Form: (LET ((CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :ADJUSTABLE T :INITIAL-CONTENTS (QUOTE ((0 1) (1 0)))))) (VALUES (BIT-NOT CL-TEST::A1) CL-TEST::A1))
Expected value:
          ((1 0) (0 1))
          ((0 1) (1 0))
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.15 failed
Form: (LET* ((CL-TEST::A0 (MAKE-ARRAY (QUOTE (12)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 0 0 1 1 0 0 0 0 0 0 0)))) (CL-TEST::A1 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 2)) (CL-TEST::A2 (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :DISPLACED-TO CL-TEST::A0 :DISPLACED-INDEX-OFFSET 6))) (VALUES (BIT-NOT CL-TEST::A1 CL-TEST::A2) CL-TEST::A0 CL-TEST::A1 CL-TEST::A2))
Expected value:
          ((1 0) (0 1))
          #*000110100100
          ((0 1) (1 0))
          ((1 0) (0 1))
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.16 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-NOT (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M #*10010011))))
Expected value:
          #*01101100
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.17 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (BIT-NOT #*1101011010 (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M NIL))))
Expected value:
          #*0010100101
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.ORDER.1 failed
Form: (LET ((CL-TEST::A (COPY-SEQ #*001101)) (CL-TEST::I 0) CL-TEST::X) (VALUES (BIT-NOT (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::A)) CL-TEST::I CL-TEST::X))
Expected value:
          #*110010
          1
          1
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.FOLD.1 failed
Form: (FLET ((CL-TEST::%F NIL (DECLARE (OPTIMIZE (SPEED 3) (SAFETY 0) (SPACE 0) (COMPILATION-SPEED 0) (DEBUG 0))) (BIT-NOT #*00101))) (EQ (CL-TEST::%F) (CL-TEST::%F)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-NOT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::BIT-NOT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (BIT-NOT #*000 NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function BIT-NOT> [Actual value: #<error during printing>

 NIL
 CL-TEST::BIT-VECTOR-P.2
 CL-TEST::BIT-VECTOR-P.3
 CL-TEST::BIT-VECTOR-P.4
 CL-TEST::BIT-VECTOR-P.5
 CL-TEST::BIT-VECTOR-P.6
 CL-TEST::BIT-VECTOR-P.7
 CL-TEST::BIT-VECTOR-P.8
 CL-TEST::BIT-VECTOR-P.9
 CL-TEST::BIT-VECTOR-P.10
 CL-TEST::BIT-VECTOR-P.11
 CL-TEST::BIT-VECTOR-P.12
 CL-TEST::BIT-VECTOR-P.13
 CL-TEST::BIT-VECTOR-P.ORDER.1
 CL-TEST::BIT-VECTOR-P.ORDER.2
 CL-TEST::BIT-VECTOR-P.ERROR.1
 CL-TEST::BIT-VECTOR-P.ERROR.2
Test CL-TEST::SIMPLE-BIT-VECTOR-P.2 failed
Form: (CL-TEST::NOTNOT-MV (SIMPLE-BIT-VECTOR-P #*))
Expected value:
          T
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.3 failed
Form: (CL-TEST::NOTNOT-MV (SIMPLE-BIT-VECTOR-P #*00101))
Expected value:
          T
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.4 failed
Form: (SIMPLE-BIT-VECTOR-P #(0 1 1 1 0 0))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.5 failed
Form: (SIMPLE-BIT-VECTOR-P "011100")
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.6 failed
Form: (SIMPLE-BIT-VECTOR-P 0)
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.7 failed
Form: (SIMPLE-BIT-VECTOR-P 1)
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.8 failed
Form: (SIMPLE-BIT-VECTOR-P NIL)
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.9 failed
Form: (SIMPLE-BIT-VECTOR-P (QUOTE CL-TEST::X))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.10 failed
Form: (SIMPLE-BIT-VECTOR-P (QUOTE (0 1 1 0)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.11 failed
Form: (SIMPLE-BIT-VECTOR-P (MAKE-ARRAY (QUOTE (2 2)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.12 failed
Form: (CL-TEST::CHECK-TYPE-PREDICATE (FUNCTION SIMPLE-BIT-VECTOR-P) (QUOTE SIMPLE-BIT-VECTOR))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SIMPLE-BIT-VECTOR-P) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SIMPLE-BIT-VECTOR-P.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SIMPLE-BIT-VECTOR-P #* #*) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SIMPLE-BIT-VECTOR-P> [Actual value: #<error during printing>

 NIL
 CL-TEST::HASH-TABLE.1
 CL-TEST::HASH-TABLE.2
Test CL-TEST::HASH-TABLE.3 failed
Form: (LET ((CL-TEST::C (FIND-CLASS (QUOTE HASH-TABLE)))) (LOOP CL-TEST::FOR CL-TEST::E CL-TEST::IN (QUOTE (NIL T 1 10.0 (CL-TEST::A CL-TEST::B CL-TEST::C) #(CL-TEST::A CL-TEST::B CL-TEST::C) #*1011 NIL ((CL-TEST::A CL-TEST::B) (CL-TEST::C CL-TEST::D)) (PARSE-NAMESTRING (QUOTE "foo")) "bar" #\a CL-TEST::3/5 #C(1.0 2.0))) WHEN (TYPEP CL-TEST::E CL-TEST::C) CL-TEST::COLLECT CL-TEST::E))
Expected value:
          NIL
Actual value:
          #<Type-Error 81ED15E7> [Actual value: #<error during printing>

 NIL
 CL-TEST::HASH-TABLE.4
Test CL-TEST::HASH-TABLE.5 failed
Form: (CL-TEST::NOTNOT-MV (TYPEP (MAKE-HASH-TABLE) (FIND-CLASS (QUOTE HASH-TABLE))))
Expected value:
          T
Actual value:
          #<Type-Error 81EE3B87> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-HASH-TABLE.1
 CL-TEST::MAKE-HASH-TABLE.2
 CL-TEST::MAKE-HASH-TABLE.3
 CL-TEST::MAKE-HASH-TABLE.4
 CL-TEST::MAKE-HASH-TABLE.5
 CL-TEST::MAKE-HASH-TABLE.6
 CL-TEST::MAKE-HASH-TABLE.7
 CL-TEST::MAKE-HASH-TABLE.8
 CL-TEST::MAKE-HASH-TABLE.9
 CL-TEST::MAKE-HASH-TABLE.10
 CL-TEST::MAKE-HASH-TABLE.11
 CL-TEST::MAKE-HASH-TABLE.12
 CL-TEST::MAKE-HASH-TABLE.13
Test CL-TEST::MAKE-HASH-TABLE.14 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-SIZE (+ CL-TEST::1.0F0 SINGLE-FLOAT-EPSILON)))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::1.0F0> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-HASH-TABLE.15
 CL-TEST::MAKE-HASH-TABLE.16
Test CL-TEST::MAKE-HASH-TABLE.17 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::0.0S0))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::0.0S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.18 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::0.0F0))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::0.0F0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.19 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::0.0D0))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::0.0D0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.20 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::0.0L0))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::0.0L0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.21 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::1/2))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::1/2> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.22 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::0.1S0))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::0.1S0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.23 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::0.2F0))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::0.2F0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.24 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::0.8D0))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::0.8D0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.25 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD CL-TEST::0.99F0))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable CL-TEST::0.99F0> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.26 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD LEAST-POSITIVE-SHORT-FLOAT))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable LEAST-POSITIVE-SHORT-FLOAT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.27 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD LEAST-POSITIVE-SINGLE-FLOAT))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable LEAST-POSITIVE-SINGLE-FLOAT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.28 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD LEAST-POSITIVE-DOUBLE-FLOAT))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable LEAST-POSITIVE-DOUBLE-FLOAT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-HASH-TABLE.29 failed
Form: (LET ((CL-TEST::HT (MAKE-HASH-TABLE :REHASH-THRESHOLD LEAST-POSITIVE-LONG-FLOAT))) (VALUES (CL-TEST::NOTNOT (TYPEP CL-TEST::HT (QUOTE HASH-TABLE))) (CL-TEST::NOTNOT (HASH-TABLE-P CL-TEST::HT)) (HASH-TABLE-COUNT CL-TEST::HT)))
Expected value:
          T
          T
          0
Actual value:
          #<Unbound-Variable LEAST-POSITIVE-LONG-FLOAT> [Actual value: #<error during printing>

 NIL
 CL-TEST::HASH-TABLE-P.1
 CL-TEST::HASH-TABLE-P.2
 CL-TEST::HASH-TABLE-P.3
 CL-TEST::HASH-TABLE-P.4
 CL-TEST::HASH-TABLE-P.5
 CL-TEST::HASH-TABLE-P.ERROR.1
 CL-TEST::HASH-TABLE-P.ERROR.2
 CL-TEST::HASH-TABLE-COUNT.1
 CL-TEST::HASH-TABLE-COUNT.2
 CL-TEST::HASH-TABLE-COUNT.3
 CL-TEST::HASH-TABLE-COUNT.4
 CL-TEST::HASH-TABLE-COUNT.5
 CL-TEST::HASH-TABLE-COUNT.6
 CL-TEST::HASH-TABLE-COUNT.7
 CL-TEST::HASH-TABLE-COUNT.8
 CL-TEST::HASH-TABLE-COUNT.9
 CL-TEST::HASH-TABLE-COUNT.10
 CL-TEST::HASH-TABLE-COUNT.11
 CL-TEST::HASH-TABLE-COUNT.ERROR.1
 CL-TEST::HASH-TABLE-COUNT.ERROR.2
 CL-TEST::HASH-TABLE-SIZE.ERROR.1
 CL-TEST::HASH-TABLE-SIZE.ERROR.2Space
Test CL-TEST::HASH-TABLE-SIZE.ERROR.3 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION HASH-TABLE-SIZE) (FUNCTION HASH-TABLE-P))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SYSTEM.INTERNALS::RAISE-BOUNDS-ERROR> [Actual value: #<error during printing>

 NIL
 CL-TEST::HASH-TABLE-REHASH-SIZE.1
 CL-TEST::HASH-TABLE-REHASH-SIZE.2
 CL-TEST::HASH-TABLE-REHASH-SIZE.3
 CL-TEST::HASH-TABLE-REHASH-SIZE.ERROR.1
 CL-TEST::HASH-TABLE-REHASH-SIZE.ERROR.2Space
Test CL-TEST::HASH-TABLE-REHASH-SIZE.ERROR.3 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION HASH-TABLE-REHASH-SIZE) (FUNCTION HASH-TABLE-P))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SYSTEM.INTERNALS::RAISE-BOUNDS-ERROR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::HASH-TABLE-REHASH-THRESHOLD.1 failed
Form: (CL-TEST::TYPEP* (HASH-TABLE-REHASH-THRESHOLD (MAKE-HASH-TABLE)) (QUOTE (REAL 0 1)))
Expected value:
          T
Actual value:
          #<System.Internals::Invalid-Arguments C17F8567> [Actual value: #<error during printing>

 NIL
Test CL-TEST::HASH-TABLE-REHASH-THRESHOLD.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TEST CL-TEST::IN (QUOTE (EQ EQL EQUAL EQUALP)) UNLESS (CL-TEST::TYPEP* (HASH-TABLE-REHASH-THRESHOLD (MAKE-HASH-TABLE :TEST CL-TEST::TEST)) (QUOTE (REAL 0 1))) CL-TEST::COLLECT CL-TEST::TEST)
Expected value:
          NIL
Actual value:
          #<System.Internals::Invalid-Arguments C18065F7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::HASH-TABLE-REHASH-THRESHOLD.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TEST CL-TEST::IN (QUOTE (EQ EQL EQUAL EQUALP)) CL-TEST::FOR CL-TEST::FN = (SYMBOL-FUNCTION CL-TEST::TEST) UNLESS (CL-TEST::TYPEP* (HASH-TABLE-REHASH-THRESHOLD (MAKE-HASH-TABLE :TEST CL-TEST::FN)) (QUOTE (REAL 0 1))) CL-TEST::COLLECT CL-TEST::TEST)
Expected value:
          NIL
Actual value:
          #<System.Internals::Invalid-Arguments C1818607> [Actual value: #<error during printing>

 NIL
 CL-TEST::HASH-TABLE-REHASH-THRESHOLD.ERROR.1
 CL-TEST::HASH-TABLE-REHASH-THRESHOLD.ERROR.2Space
Test CL-TEST::HASH-TABLE-REHASH-THRESHOLD.ERROR.3 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION HASH-TABLE-REHASH-THRESHOLD) (FUNCTION HASH-TABLE-P))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SYSTEM.INTERNALS::RAISE-BOUNDS-ERROR> [Actual value: #<error during printing>

 NIL
 CL-TEST::HASH-TABLE-TEST.1
 CL-TEST::HASH-TABLE-TEST.2
 CL-TEST::HASH-TABLE-TEST.3
 CL-TEST::HASH-TABLE-TEST.4
 CL-TEST::HASH-TABLE-TEST.ERROR.1
 CL-TEST::HASH-TABLE-TEST.ERROR.2Space
Test CL-TEST::HASH-TABLE-TEST.ERROR.3 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION HASH-TABLE-TEST) (FUNCTION HASH-TABLE-P))
Expected value:
          NIL
Actual value:
          ((#<Package "Cl"> (NIL "COMMON-LISP")) (#P"THAT-MAC-THING:foo" (NIL #<Simple-File-Client::Simple-File-Host :THAT-MAC-THING (192 168 1 13):2599 C00C4BB7>)) (#<Synonym-Stream for *TERMINAL-IO*> (NIL *TERMINAL-IO*)) (#<Readtable C0002677> (NIL :UPCASE)) (#<Cl-Test::Foo-Structure C04943D7> (NIL 1)) (#<Random-State C0495607> (NIL 264))) [Actual value: #<error during printing>

 NIL
 CL-TEST::GETHASH.1
 CL-TEST::GETHASH.2
 CL-TEST::GETHASH.3
 CL-TEST::GETHASH.4
 CL-TEST::GETHASH.5
 CL-TEST::GETHASH.ORDER.1
 CL-TEST::GETHASH.ORDER.2
 CL-TEST::GETHASH.ORDER.3
 CL-TEST::GETHASH.ORDER.4
Test CL-TEST::GETHASH.ZERO.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::PZ CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::NZ = (- CL-TEST::PZ) CL-TEST::FOR CL-TEST::RESULT = (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQ)))) (LIST (SETF (GETHASH CL-TEST::PZ CL-TEST::TABLE) :X) (GETHASH CL-TEST::PZ CL-TEST::TABLE) (GETHASH CL-TEST::NZ CL-TEST::TABLE) (SETF (GETHASH CL-TEST::NZ CL-TEST::TABLE) :Y) (GETHASH CL-TEST::PZ CL-TEST::TABLE) (GETHASH CL-TEST::NZ CL-TEST::TABLE))) UNLESS (OR (EQL CL-TEST::PZ CL-TEST::NZ) (EQUAL CL-TEST::RESULT (QUOTE (:X :X NIL :Y :X :Y)))) CL-TEST::COLLECT (LIST CL-TEST::PZ CL-TEST::NZ CL-TEST::RESULT))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is CL-TEST::0.0S0, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GETHASH.ZERO.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::PZ CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::NZ = (- CL-TEST::PZ) CL-TEST::FOR CL-TEST::RESULT = (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQL)))) (LIST (SETF (GETHASH CL-TEST::PZ CL-TEST::TABLE) :X) (GETHASH CL-TEST::PZ CL-TEST::TABLE) (GETHASH CL-TEST::NZ CL-TEST::TABLE) (SETF (GETHASH CL-TEST::NZ CL-TEST::TABLE) :Y) (GETHASH CL-TEST::PZ CL-TEST::TABLE) (GETHASH CL-TEST::NZ CL-TEST::TABLE))) UNLESS (OR (EQL CL-TEST::PZ CL-TEST::NZ) (EQUAL CL-TEST::RESULT (QUOTE (:X :X NIL :Y :X :Y)))) CL-TEST::COLLECT (LIST CL-TEST::PZ CL-TEST::NZ CL-TEST::RESULT))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is CL-TEST::0.0S0, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GETHASH.ZERO.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::PZ CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::NZ = (- CL-TEST::PZ) CL-TEST::FOR CL-TEST::RESULT = (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (LIST (SETF (GETHASH CL-TEST::PZ CL-TEST::TABLE) :X) (GETHASH CL-TEST::PZ CL-TEST::TABLE) (GETHASH CL-TEST::NZ CL-TEST::TABLE) (SETF (GETHASH CL-TEST::NZ CL-TEST::TABLE) :Y) (GETHASH CL-TEST::PZ CL-TEST::TABLE) (GETHASH CL-TEST::NZ CL-TEST::TABLE))) UNLESS (OR (EQL CL-TEST::PZ CL-TEST::NZ) (EQUAL CL-TEST::RESULT (QUOTE (:X :X NIL :Y :X :Y)))) CL-TEST::COLLECT (LIST CL-TEST::PZ CL-TEST::NZ CL-TEST::RESULT))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is CL-TEST::0.0S0, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::GETHASH.ZERO.4 failed
Form: (LOOP CL-TEST::FOR CL-TEST::PZ CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::NZ = (- CL-TEST::PZ) CL-TEST::FOR CL-TEST::RESULT = (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (LIST (SETF (GETHASH CL-TEST::PZ CL-TEST::TABLE) :X) (GETHASH CL-TEST::PZ CL-TEST::TABLE) (GETHASH CL-TEST::NZ CL-TEST::TABLE) (SETF (GETHASH CL-TEST::NZ CL-TEST::TABLE) :Y) (GETHASH CL-TEST::PZ CL-TEST::TABLE) (GETHASH CL-TEST::NZ CL-TEST::TABLE))) UNLESS (OR (EQL CL-TEST::PZ CL-TEST::NZ) (EQUAL CL-TEST::RESULT (QUOTE (:X :X :X :Y :Y :Y)))) CL-TEST::COLLECT (LIST CL-TEST::PZ CL-TEST::NZ CL-TEST::RESULT))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is CL-TEST::0.0S0, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::GETHASH.ERROR.1
 CL-TEST::GETHASH.ERROR.2
 CL-TEST::GETHASH.ERROR.3
 CL-TEST::REMHASH.1
 CL-TEST::REMHASH.2
 CL-TEST::REMHASH.3
Test CL-TEST::REMHASH.4 failed
Form: (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (VALUES (GETHASH (QUOTE CL-TEST::A) CL-TEST::TABLE) (REMHASH (QUOTE CL-TEST::A) CL-TEST::TABLE) (SETF (GETHASH (QUOTE CL-TEST::A) CL-TEST::TABLE) (QUOTE CL-TEST::B)) (GETHASH (QUOTE CL-TEST::A) CL-TEST::TABLE) (CL-TEST::NOTNOT (REMHASH (QUOTE CL-TEST::A) CL-TEST::TABLE)) (GETHASH (QUOTE CL-TEST::A) CL-TEST::TABLE)))
Expected value:
          NIL
          NIL
          CL-TEST::B
          CL-TEST::B
          T
          NIL
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
 CL-TEST::REMHASH.5
 CL-TEST::REMHASH.6
 CL-TEST::REMHASH.ORDER.1
 CL-TEST::REMHASH.ERROR.1
 CL-TEST::REMHASH.ERROR.2
 CL-TEST::REMHASH.ERROR.3
 CL-TEST::CLRHASH.1
 CL-TEST::CLRHASH.2
 CL-TEST::CLRHASH.3
Test CL-TEST::CLRHASH.4 failed
Form: (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (SETF (GETHASH (QUOTE CL-TEST::A) CL-TEST::TABLE) (QUOTE CL-TEST::B)) (VALUES (HASH-TABLE-COUNT CL-TEST::TABLE) (CL-TEST::EQUALT (MULTIPLE-VALUE-LIST (CLRHASH CL-TEST::TABLE)) (LIST CL-TEST::TABLE)) (HASH-TABLE-COUNT CL-TEST::TABLE)))
Expected value:
          1
          T
          0
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
 CL-TEST::CLRHASH.5
 CL-TEST::CLRHASH.ERROR.1
 CL-TEST::CLRHASH.ERROR.2
 CL-TEST::MAPHASH.1
 CL-TEST::MAPHASH.2
Test CL-TEST::MAPHASH.3 failed
Form: (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 1000 DO (SETF (GETHASH CL-TEST::I CL-TEST::TABLE) (+ CL-TEST::I CL-TEST::I))) (LET ((CL-TEST::S1 0) (CL-TEST::S2 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (CL-TEST::K CL-TEST::V) (INCF CL-TEST::S1 CL-TEST::K) (INCF CL-TEST::S2 CL-TEST::V))) CL-TEST::TABLE)) CL-TEST::S1 CL-TEST::S2)))
Expected value:
          (NIL)
          500500
          1001000
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPHASH.4
 CL-TEST::MAPHASH.5
Test CL-TEST::MAPHASH.6 failed
Form: (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP)))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 1000 DO (SETF (GETHASH CL-TEST::I CL-TEST::TABLE) (+ CL-TEST::I CL-TEST::I))) (LET ((CL-TEST::S1 0) (CL-TEST::S2 0)) (VALUES (MULTIPLE-VALUE-LIST (MAPHASH (FUNCTION (LAMBDA (CL-TEST::K CL-TEST::V) (INCF CL-TEST::S1 CL-TEST::K) (INCF CL-TEST::S2 CL-TEST::V) (REMHASH CL-TEST::K CL-TEST::TABLE))) CL-TEST::TABLE)) CL-TEST::S1 CL-TEST::S2 (HASH-TABLE-COUNT CL-TEST::TABLE))))
Expected value:
          (NIL)
          500500
          1001000
          0
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAPHASH.7
 CL-TEST::MAPHASH.8
 CL-TEST::MAPHASH.ORDER.1
 CL-TEST::MAPHASH.ERROR.1
 CL-TEST::MAPHASH.ERROR.2
 CL-TEST::MAPHASH.ERROR.3
 CL-TEST::WITH-HASH-TABLE-ITERATOR.1
 CL-TEST::WITH-HASH-TABLE-ITERATOR.2
 CL-TEST::WITH-HASH-TABLE-ITERATOR.3
 CL-TEST::WITH-HASH-TABLE-ITERATOR.4
 CL-TEST::WITH-HASH-TABLE-ITERATOR.5
 CL-TEST::WITH-HASH-TABLE-ITERATOR.6
Test CL-TEST::WITH-HASH-TABLE-ITERATOR.7 failed
Form: (LET ((CL-TEST::KEYS (QUOTE ("a" "b" "c" "d" "e")))) (LOOP CL-TEST::FOR CL-TEST::TEST CL-TEST::IN (QUOTE (EQ EQL EQUAL EQUALP)) CL-TEST::FOR CL-TEST::TEST-FN CL-TEST::OF-TYPE FUNCTION = (SYMBOL-FUNCTION CL-TEST::TEST) CL-TEST::COLLECT (LET ((CL-TEST::TABLE (MAKE-HASH-TABLE :TEST CL-TEST::TEST))) (LOOP CL-TEST::FOR CL-TEST::K CL-TEST::IN CL-TEST::KEYS CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 DO (SETF (GETHASH CL-TEST::K CL-TEST::TABLE) CL-TEST::I)) (LET ((COUNT 0) (CL-TEST::FOUND-KEYS)) (WITH-HASH-TABLE-ITERATOR (CL-TEST::%X CL-TEST::TABLE) (BLOCK CL-TEST::DONE (LOOP (MULTIPLE-VALUE-BIND (CL-TEST::SUCCESS CL-TEST::KEY CL-TEST::VAL) (CL-TEST::%X) (UNLESS CL-TEST::SUCCESS (RETURN-FROM CL-TEST::DONE NIL)) (INCF COUNT) (PUSH CL-TEST::KEY CL-TEST::FOUND-KEYS) (ASSERT (= CL-TEST::VAL (POSITION CL-TEST::KEY CL-TEST::KEYS :TEST CL-TEST::TEST-FN)))))) (AND (= COUNT (LENGTH CL-TEST::KEYS)) (EVERY CL-TEST::TEST-FN (SORT (REMOVE-DUPLICATES CL-TEST::FOUND-KEYS :TEST CL-TEST::TEST) (FUNCTION STRING<)) CL-TEST::KEYS) T))))))
Expected value:
          (T T T T)
Actual value:
          #<Simple-Error Not supported.> [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-HASH-TABLE-ITERATOR.8
 CL-TEST::WITH-HASH-TABLE-ITERATOR.8A
 CL-TEST::WITH-HASH-TABLE-ITERATOR.9
 CL-TEST::WITH-HASH-TABLE-ITERATOR.10
 CL-TEST::WITH-HASH-TABLE-ITERATOR.11
 CL-TEST::WITH-HASH-TABLE-ITERATOR.12
Test CL-TEST::SXHASH.1 failed
Form: (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP (SXHASH CL-TEST::X) (QUOTE (AND UNSIGNED-BYTE FIXNUM))))))
Expected value:
          NIL
Actual value:
          (1152921504606846970 1152921504606846971 1152921504606846972 1152921504606846973 1152921504606846974 144115188075855872 288230376151711743 576460752303423487 1152921504606846975 -2 -4 -8 -16 -32 -64 -128 -256 -512 -1024 -2048 -4096 -8192 -16384 -32768 -65536 -131072 -262144 -524288 -1048576 -2097152 -4194304 -8388608 -16777216 -33554432 -67108864 -134217728 -268435456 -536870912 -1073741824 -2147483648 -4294967296 -8589934592 -17179869184 -34359738368 -68719476736 -137438953472 -274877906944 -549755813888 -1099511627776 -2199023255552 -4398046511104 -8796093022208 -17592186044416 -35184372088832 -70368744177664 -140737488355328 -281474976710656 -562949953421312 -1125899906842624 -2251799813685248 -4503599627370496 -9007199254740992 -18014398509481984 -36028797018963968 -72057594037927936 -144115188075855872 -1 -3 -7 -15 -31 -63 -127 -255 -511 -1023 -2047 -4095 -8191 -16383 -32767 -65535 -131071 -262143 -524287 -1048575 -2097151 -4194303 -8388607 -16777215 -33554431 -67108863 -134217727 -268435455 -536870911 -1073741823 -2147483647 -4294967295 -8589934591 -17179869183 -34359738367 -68719476735 -137438953471 -274877906943 -549755813887 -1099511627775 -2199023255551 -4398046511103 -8796093022207 -17592186044415 -35184372088831 -70368744177663 -140737488355327 -281474976710655 -562949953421311 -1125899906842623 -2251799813685247 -4503599627370495 -9007199254740991 -18014398509481983 -36028797018963967 -72057594037927935 -144115188075855871 -131 -561823 -1234611312123 0.0 -0.0 1.0 -1.0) [Actual value: #<error during printing>

 NIL
 CL-TEST::SXHASH.2
 CL-TEST::SXHASH.3
Test CL-TEST::SXHASH.4 failed
Form: (LOOP CL-TEST::FOR CL-TEST::BV1 CL-TEST::IN (QUOTE (#* #*0 #*1 #*01 #*00 #*10 #*11 #*1100101101100 #*110010101011001011010000111001011)) CL-TEST::FOR CL-TEST::BV2 = (COPY-SEQ CL-TEST::BV1) CL-TEST::FOR CL-TEST::SX1 = (SXHASH CL-TEST::BV1) CL-TEST::FOR CL-TEST::SX2 = (SXHASH CL-TEST::BV2) CL-TEST::ALWAYS (AND (NOT (EQ CL-TEST::BV1 CL-TEST::BV2)) (EQUAL CL-TEST::BV1 CL-TEST::BV2) (TYPEP CL-TEST::SX1 (QUOTE (AND UNSIGNED-BYTE FIXNUM))) (TYPEP CL-TEST::SX2 (QUOTE (AND UNSIGNED-BYTE FIXNUM))) (= CL-TEST::SX1 CL-TEST::SX2)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::SXHASH.5
Test CL-TEST::SXHASH.6 failed
Form: (LET ((CL-TEST::S1 #*01101) (CL-TEST::S2 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #*0110111101 :FILL-POINTER 5))) (AND (CL-TEST::EQUALT CL-TEST::S1 CL-TEST::S2) (CL-TEST::=T (SXHASH CL-TEST::S1) (SXHASH CL-TEST::S2))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::SXHASH.7
 CL-TEST::SXHASH.9
 CL-TEST::SXHASH.10
 CL-TEST::SXHASH.11
Test CL-TEST::SXHASH.12 failed
Form: (LET ((CL-TEST::X (1+ MOST-POSITIVE-FIXNUM)) (CL-TEST::Y (1+ MOST-POSITIVE-FIXNUM))) (CL-TEST::=T (SXHASH CL-TEST::X) (SXHASH CL-TEST::Y)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SXHASH.13 failed
Form: (LET ((CL-TEST::SX1 (SXHASH (MAKE-SYMBOL "FOO"))) (CL-TEST::SX2 (SXHASH (MAKE-SYMBOL "FOO")))) (AND (TYPEP CL-TEST::SX1 (QUOTE (AND UNSIGNED-BYTE FIXNUM))) (CL-TEST::EQLT CL-TEST::SX1 CL-TEST::SX2)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::SXHASH.15 failed
Form: (LET* ((PACKAGE-NAME (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::FOR CL-TEST::NAME = (FORMAT NIL "PACKAGE-~A" CL-TEST::I) CL-TEST::FOR PACKAGE = (FIND-PACKAGE CL-TEST::NAME) UNLESS PACKAGE DO (RETURN CL-TEST::NAME))) (CL-TEST::SX1 (LET* ((PACKAGE (MAKE-PACKAGE PACKAGE-NAME :NICKNAMES NIL :USE NIL)) (SYMBOL (INTERN "FOO" PACKAGE))) (PROG1 (SXHASH SYMBOL) (DELETE-PACKAGE PACKAGE)))) (CL-TEST::SX2 (LET* ((PACKAGE (MAKE-PACKAGE PACKAGE-NAME :NICKNAMES NIL :USE NIL)) (SYMBOL (INTERN "FOO" PACKAGE))) (PROG1 (SXHASH SYMBOL) (DELETE-PACKAGE PACKAGE))))) (ASSERT (TYPEP CL-TEST::SX1 (QUOTE (AND UNSIGNED-BYTE FIXNUM)))) (IF (= CL-TEST::SX1 CL-TEST::SX2) :GOOD (LIST CL-TEST::SX1 CL-TEST::SX2)))
Expected value:
          :GOOD
Actual value:
          (2172337922 2172347778) [Actual value: #<error during printing>

 NIL
 CL-TEST::SXHASH.16
Test CL-TEST::SXHASH.17 failed
Form: (LOOP CL-TEST::FOR CL-TEST::C1 CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::C2 CL-TEST::IN (QUOTE (CL-TEST::-0.0S0 CL-TEST::-0.0F0 CL-TEST::-0.0D0 CL-TEST::-0.0L0)) CL-TEST::FOR CL-TEST::T1 = (TYPE-OF CL-TEST::C1) CL-TEST::FOR CL-TEST::T2 = (TYPE-OF CL-TEST::C2) CL-TEST::FOR CL-TEST::SX1 = (SXHASH CL-TEST::C1) CL-TEST::FOR CL-TEST::SX2 = (SXHASH CL-TEST::C2) UNLESS (OR (NOT (SUBTYPEP CL-TEST::T1 CL-TEST::T2)) (NOT (SUBTYPEP CL-TEST::T2 CL-TEST::T1)) (EQL CL-TEST::SX1 CL-TEST::SX2)) CL-TEST::COLLECT (LIST CL-TEST::C1 CL-TEST::C2 CL-TEST::SX1 CL-TEST::SX2))
Expected value:
          NIL
Actual value:
          ((CL-TEST::0.0S0 CL-TEST::-0.0S0 2149898946 2149924194) (CL-TEST::0.0F0 CL-TEST::-0.0F0 2149889826 2150568402) (CL-TEST::0.0D0 CL-TEST::-0.0D0 2149973874 2149912434) (CL-TEST::0.0L0 CL-TEST::-0.0L0 2149998162 2149919250)) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SXHASH.18 failed
Form: (LOOP CL-TEST::FOR CL-TEST::R1 CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::C1 = (COMPLEX CL-TEST::R1) CL-TEST::FOR CL-TEST::R2 CL-TEST::IN (QUOTE (CL-TEST::-0.0S0 CL-TEST::-0.0F0 CL-TEST::-0.0D0 CL-TEST::-0.0L0)) CL-TEST::FOR CL-TEST::C2 = (COMPLEX CL-TEST::R2) CL-TEST::FOR CL-TEST::T1 = (TYPE-OF CL-TEST::C1) CL-TEST::FOR CL-TEST::T2 = (TYPE-OF CL-TEST::C2) CL-TEST::FOR CL-TEST::SX1 = (SXHASH CL-TEST::C1) CL-TEST::FOR CL-TEST::SX2 = (SXHASH CL-TEST::C2) UNLESS (OR (NOT (SUBTYPEP CL-TEST::T1 CL-TEST::T2)) (NOT (SUBTYPEP CL-TEST::T2 CL-TEST::T1)) (EQL CL-TEST::SX1 CL-TEST::SX2)) CL-TEST::COLLECT (LIST CL-TEST::C1 CL-TEST::C2 CL-TEST::SX1 CL-TEST::SX2))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of REALPART is CL-TEST::0.0S0, which is not of type REAL.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SXHASH.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::R1 CL-TEST::IN (QUOTE (CL-TEST::0.0S0 CL-TEST::0.0F0 CL-TEST::0.0D0 CL-TEST::0.0L0)) CL-TEST::FOR CL-TEST::C1 = (COMPLEX 0 CL-TEST::R1) CL-TEST::FOR CL-TEST::R2 CL-TEST::IN (QUOTE (CL-TEST::-0.0S0 CL-TEST::-0.0F0 CL-TEST::-0.0D0 CL-TEST::-0.0L0)) CL-TEST::FOR CL-TEST::C2 = (COMPLEX 0 CL-TEST::R2) CL-TEST::FOR CL-TEST::T1 = (TYPE-OF CL-TEST::C1) CL-TEST::FOR CL-TEST::T2 = (TYPE-OF CL-TEST::C2) CL-TEST::FOR CL-TEST::SX1 = (SXHASH CL-TEST::C1) CL-TEST::FOR CL-TEST::SX2 = (SXHASH CL-TEST::C2) UNLESS (OR (NOT (SUBTYPEP CL-TEST::T1 CL-TEST::T2)) (NOT (SUBTYPEP CL-TEST::T2 CL-TEST::T1)) (EQL CL-TEST::SX1 CL-TEST::SX2)) CL-TEST::COLLECT (LIST CL-TEST::C1 CL-TEST::C2 CL-TEST::SX1 CL-TEST::SX2))
Expected value:
          NIL
Actual value:
          #<Simple-Type-Error The value of IMAGPART is CL-TEST::0.0S0, which is not of type (OR REAL NULL).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SXHASH.20 failed
Form: (LET* ((CL-TEST::PATHSPEC "sxhash.lsp") (CL-TEST::SX1 (SXHASH (PATHNAME (COPY-SEQ CL-TEST::PATHSPEC)))) (CL-TEST::SX2 (SXHASH (PATHNAME (COPY-SEQ CL-TEST::PATHSPEC))))) (IF (AND (TYPEP CL-TEST::SX1 (QUOTE (AND FIXNUM UNSIGNED-BYTE))) (EQL CL-TEST::SX1 CL-TEST::SX2)) :GOOD (LIST CL-TEST::SX1 CL-TEST::SX2)))
Expected value:
          :GOOD
Actual value:
          (2172942343 2172943607) [Actual value: #<error during printing>

 NIL
Test CL-TEST::SXHASH.21 failed
Form: (LET* ((CL-TEST::S1 "abc") (CL-TEST::S2 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS CL-TEST::S1)) (CL-TEST::S3 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS CL-TEST::S1)) (CL-TEST::S4 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE STANDARD-CHAR) :INITIAL-CONTENTS CL-TEST::S1)) (CL-TEST::S5 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "abc")) (CL-TEST::S6 (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3 :INITIAL-CONTENTS "abcde")) (CL-TEST::S7 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::S2 :DISPLACED-INDEX-OFFSET 0)) (CL-TEST::S8 (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO (MAKE-ARRAY (QUOTE (7)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "xxabcyy") :DISPLACED-INDEX-OFFSET 2)) (CL-TEST::STRINGS (LIST CL-TEST::S1 CL-TEST::S2 CL-TEST::S3 CL-TEST::S4 CL-TEST::S5 CL-TEST::S6 CL-TEST::S7 CL-TEST::S8)) (CL-TEST::HASHES (MAPCAR (FUNCTION SXHASH) CL-TEST::STRINGS))) (IF (AND (EVERY (FUNCTION (LAMBDA (CL-TEST::H) (TYPEP CL-TEST::H (QUOTE (AND UNSIGNED-BYTE FIXNUM))))) CL-TEST::HASHES) (NOT (POSITION (CAR CL-TEST::HASHES) CL-TEST::HASHES :TEST (FUNCTION /=)))) :GOOD CL-TEST::HASHES))
Expected value:
          :GOOD
Actual value:
          #<Type-Error 818563F7> [Actual value: #<error during printing>

 NIL
 CL-TEST::SXHASH.22
Test CL-TEST::SXHASH.23 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "A") (DEFPACKAGE "A" (:USE)) (LET* ((CL-TEST::PKG (FIND-PACKAGE "A")) (CL-TEST::SYM (INTERN "FOO" CL-TEST::PKG)) (CL-TEST::HASH (SXHASH CL-TEST::SYM))) (UNINTERN CL-TEST::SYM CL-TEST::PKG) (LET ((CL-TEST::HASH2 (SXHASH CL-TEST::SYM))) (IF (EQL CL-TEST::HASH CL-TEST::HASH2) NIL (LIST CL-TEST::HASH CL-TEST::HASH2)))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::SXHASH.ERROR.1
 CL-TEST::SXHASH.ERROR.2
 CL-TEST::FIND-SYMBOL.1
 CL-TEST::FIND-SYMBOL.2
 CL-TEST::FIND-SYMBOL.3
 CL-TEST::FIND-SYMBOL.4
 CL-TEST::FIND-SYMBOL.5
 CL-TEST::FIND-SYMBOL.6
 CL-TEST::FIND-SYMBOL.7
 CL-TEST::FIND-SYMBOL.8
 CL-TEST::FIND-SYMBOL.9
 CL-TEST::FIND-SYMBOL.10
 CL-TEST::FIND-SYMBOL.11
Test CL-TEST::FIND-SYMBOL.12 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::VALS (MULTIPLE-VALUE-LIST (FIND-SYMBOL "FOO" #\A)))) (VALUES (LENGTH CL-TEST::VALS) (PACKAGE-NAME (SYMBOL-PACKAGE (FIRST CL-TEST::VALS))) (SYMBOL-NAME (FIRST CL-TEST::VALS)) (SECOND CL-TEST::VALS))))
Expected value:
          2
          "A"
          "FOO"
          :EXTERNAL
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-SYMBOL.13 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (INTERN "X" (FIND-PACKAGE "A")) (LET ((CL-TEST::VALS (MULTIPLE-VALUE-LIST (FIND-SYMBOL "X" #\A)))) (VALUES (LENGTH CL-TEST::VALS) (PACKAGE-NAME (SYMBOL-PACKAGE (FIRST CL-TEST::VALS))) (SYMBOL-NAME (FIRST CL-TEST::VALS)) (SECOND CL-TEST::VALS))))
Expected value:
          2
          "A"
          "X"
          :INTERNAL
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-SYMBOL.14 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::VALS (MULTIPLE-VALUE-LIST (FIND-SYMBOL "FOO" #\B)))) (VALUES (LENGTH CL-TEST::VALS) (PACKAGE-NAME (SYMBOL-PACKAGE (FIRST CL-TEST::VALS))) (SYMBOL-NAME (FIRST CL-TEST::VALS)) (SECOND CL-TEST::VALS))))
Expected value:
          2
          "A"
          "FOO"
          :INHERITED
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-SYMBOL.15
 CL-TEST::FIND-SYMBOL.16
 CL-TEST::FIND-SYMBOL.17
 CL-TEST::FIND-SYMBOL.18
 CL-TEST::FIND-SYMBOL.19
 CL-TEST::FIND-SYMBOL.20
 CL-TEST::FIND-SYMBOL.21
 CL-TEST::FIND-SYMBOL.22
 CL-TEST::FIND-SYMBOL.23
 CL-TEST::FIND-SYMBOL.ORDER.1
 CL-TEST::FIND-SYMBOL.ERROR.1
 CL-TEST::FIND-SYMBOL.ERROR.2
Test CL-TEST::FIND-ALL-SYMBOLS.1 failed
Form: (LET ((CL-TEST::ALL-PACKAGES (LIST-ALL-PACKAGES))) (LOOP CL-TEST::FOR PACKAGE CL-TEST::IN CL-TEST::ALL-PACKAGES APPEND (LET ((CL-TEST::FAILURES NIL)) (DO-SYMBOLS (CL-TEST::SYM PACKAGE CL-TEST::FAILURES) (WHEN (EQL (SYMBOL-PACKAGE CL-TEST::SYM) PACKAGE) (LET* ((CL-TEST::NAME (SYMBOL-NAME CL-TEST::SYM)) (CL-TEST::SIMILAR (FIND-ALL-SYMBOLS CL-TEST::NAME)) (CL-TEST::SIMILAR2 (FIND-ALL-SYMBOLS CL-TEST::SYM))) (UNLESS (AND (MEMBER CL-TEST::SYM CL-TEST::SIMILAR) (SUBSETP CL-TEST::SIMILAR CL-TEST::SIMILAR2) (SUBSETP CL-TEST::SIMILAR2 CL-TEST::SIMILAR) (LOOP CL-TEST::FOR CL-TEST::SYM2 CL-TEST::IN CL-TEST::SIMILAR CL-TEST::ALWAYS (STRING= CL-TEST::NAME (SYMBOL-NAME CL-TEST::SYM2)))) (PUSH CL-TEST::SYM CL-TEST::FAILURES))))))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-ALL-SYMBOLS.2
 CL-TEST::FIND-ALL-SYMBOLS.3
 CL-TEST::FIND-ALL-SYMBOLS.4
 CL-TEST::FIND-ALL-SYMBOLS.5
 CL-TEST::FIND-ALL-SYMBOLS.6
 CL-TEST::FIND-ALL-SYMBOLS.7
 CL-TEST::FIND-ALL-SYMBOLS.8
 CL-TEST::FIND-ALL-SYMBOLS.9
 CL-TEST::FIND-ALL-SYMBOLS.ERROR.1
 CL-TEST::FIND-ALL-SYMBOLS.ERROR.2
 CL-TEST::FIND-PACKAGE.1
 CL-TEST::FIND-PACKAGE.2
 CL-TEST::FIND-PACKAGE.3
Test CL-TEST::FIND-PACKAGE.4 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::P (IGNORE-ERRORS (FIND-PACKAGE "A")))) (IF (PACKAGEP CL-TEST::P) T CL-TEST::P)))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-PACKAGE.5 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::P (IGNORE-ERRORS (FIND-PACKAGE #\A)))) (IF (PACKAGEP CL-TEST::P) T CL-TEST::P)))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-PACKAGE.6 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::P (IGNORE-ERRORS (FIND-PACKAGE "B")))) (IF (PACKAGEP CL-TEST::P) T CL-TEST::P)))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-PACKAGE.7 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::P (IGNORE-ERRORS (FIND-PACKAGE #\B)))) (IF (PACKAGEP CL-TEST::P) T CL-TEST::P)))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-PACKAGE.8 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::P (IGNORE-ERRORS (FIND-PACKAGE "Q"))) (CL-TEST::P2 (IGNORE-ERRORS (FIND-PACKAGE "A")))) (AND (PACKAGEP CL-TEST::P) (PACKAGEP CL-TEST::P2) (CL-TEST::EQT CL-TEST::P CL-TEST::P2))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::FIND-PACKAGE.9 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::P (IGNORE-ERRORS (FIND-PACKAGE "A"))) (CL-TEST::P2 (IGNORE-ERRORS (FIND-PACKAGE "B")))) (CL-TEST::EQT CL-TEST::P CL-TEST::P2)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printin
Test CL-TEST::FIND-PACKAGE.10 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LET ((CL-TEST::P (IGNORE-ERRORS (FIND-PACKAGE #\Q))) (CL-TEST::P2 (IGNORE-ERRORS (FIND-PACKAGE "Q")))) (AND (PACKAGEP CL-TEST::P) (CL-TEST::EQT CL-TEST::P CL-TEST::P2))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::FIND-PACKAGE.11
 CL-TEST::FIND-PACKAGE.12
 CL-TEST::FIND-PACKAGE.13
 CL-TEST::FIND-PACKAGE.14
 CL-TEST::FIND-PACKAGE.15
 CL-TEST::FIND-PACKAGE.16
 CL-TEST::FIND-PACKAGE.17
 CL-TEST::FIND-PACKAGE.ERROR.1
 CL-TEST::FIND-PACKAGE.ERROR.2
 CL-TEST::LIST-ALL-PACKAGES.1
Test CL-TEST::LIST-ALL-PACKAGES.2 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::NOTNOT (SUBSETP (LIST (FIND-PACKAGE "CL") (FIND-PACKAGE "CL-USER") (FIND-PACKAGE "KEYWORD") (FIND-PACKAGE "A") (FIND-PACKAGE "REGRESSION-TEST") (FIND-PACKAGE "CL-TEST") (FIND-PACKAGE "B")) (LIST-ALL-PACKAGES))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::LIST-ALL-PACKAGES.3
Test CL-TEST::LIST-ALL-PACKAGES.4 failed
Form: (LET ((CL-TEST::P1 (LIST-ALL-PACKAGES)) (CL-TEST::P2 (LIST-ALL-PACKAGES))) (AND (SUBSETP CL-TEST::P1 CL-TEST::P2) (SUBSETP CL-TEST::P2 CL-TEST::P1)))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
 CL-TEST::LIST-ALL-PACKAGES.ERROR.1
Test CL-TEST::PACKAGE-NAME.1 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NAME "A"))
Expected value:
          "A"
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NAME.2 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NAME #\A))
Expected value:
          "A"
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NAME.3 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NAME "Q"))
Expected value:
          "A"
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NAME.4 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NAME #\Q))
Expected value:
          "A"
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::PACKAGE-NAME.5
 CL-TEST::PACKAGE-NAME.6
 CL-TEST::PACKAGE-NAME.6A
Test CL-TEST::PACKAGE-NAME.7 failed
Form: (PACKAGE-NAME "CL")
Expected value:
          "COMMON-LISP"
Actual value:
          #<Type-Error C197C127> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NAME.8 failed
Form: (PACKAGE-NAME "COMMON-LISP")
Expected value:
          "COMMON-LISP"
Actual value:
          #<Type-Error C1982F87> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NAME.9 failed
Form: (PACKAGE-NAME "COMMON-LISP-USER")
Expected value:
          "COMMON-LISP-USER"
Actual value:
          #<Type-Error C198A147> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NAME.10 failed
Form: (PACKAGE-NAME "CL-USER")
Expected value:
          "COMMON-LISP-USER"
Actual value:
          #<Type-Error C19916C7> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NAME.11 failed
Form: (PACKAGE-NAME "KEYWORD")
Expected value:
          "KEYWORD"
Actual value:
          #<Type-Error C1998977> [Actual value: #<error during printing>

 NIL
 CL-TEST::PACKAGE-NAME.12
 CL-TEST::PACKAGE-NAME.13
Test CL-TEST::PACKAGE-NAME.14 failed
Form: (LOOP CL-TEST::FOR CL-TEST::P CL-TEST::IN (LIST-ALL-PACKAGES) COUNT (NOT (LET ((CL-TEST::NAME (PACKAGE-NAME CL-TEST::P))) (AND (STRINGP CL-TEST::NAME) (CL-TEST::EQT (FIND-PACKAGE CL-TEST::NAME) CL-TEST::P)))))
Expected value:
          0
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NAME.15 failed
Form: (LOOP CL-TEST::FOR CL-TEST::P CL-TEST::IN (LIST-ALL-PACKAGES) COUNT (NOT (EQUAL (PACKAGE-NAME CL-TEST::P) (PACKAGE-NAME (PACKAGE-NAME CL-TEST::P)))))
Expected value:
          0
Actual value:
          #<Type-Error C19D8CE7> [Actual value: #<error during printing>

 NIL
 CL-TEST::PACKAGE-NAME.16
 CL-TEST::PACKAGE-NAME.17
 CL-TEST::PACKAGE-NAME.18
 CL-TEST::PACKAGE-NAME.19
 CL-TEST::PACKAGE-NAME.20
 CL-TEST::PACKAGE-NAME.21
 CL-TEST::PACKAGE-NAME.22
 CL-TEST::PACKAGE-NAME.ERROR.1
 CL-TEST::PACKAGE-NAME.ERROR.2
Test CL-TEST::PACKAGE-NAME.ERROR.3 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION PACKAGE-NAME) (FUNCTION CL-TEST::PACKAGE-DESIGNATOR-P))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NICKNAMES.1 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NICKNAMES "A"))
Expected value:
          ("Q")
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NICKNAMES.2 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NICKNAMES #\A))
Expected value:
          ("Q")
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NICKNAMES.3 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NICKNAMES (QUOTE :A)))
Expected value:
          ("Q")
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NICKNAMES.4 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NICKNAMES "B"))
Expected value:
          NIL
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NICKNAMES.5 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NICKNAMES #\B))
Expected value:
          NIL
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NICKNAMES.6 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NICKNAMES (QUOTE #:B)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NICKNAMES.7 failed
Form: (SUBSETP (QUOTE ("CL")) (PACKAGE-NICKNAMES "COMMON-LISP") :TEST (FUNCTION STRING=))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
Test CL-TEST::PACKAGE-NICKNAMES.8 failed
Form: (CL-TEST::NOTNOT (SUBSETP (QUOTE ("CL-USER")) (PACKAGE-NICKNAMES "COMMON-LISP-USER") :TEST (FUNCTION STRING=)))
Expected value:
          T
Actual value:
          #<Undefined-Function SUBSETP> [Actual value: #<error during printing>

 NIL
 CL-TEST::PACKAGE-NICKNAMES.9
 CL-TEST::PACKAGE-NICKNAMES.9A
Test CL-TEST::PACKAGE-NICKNAMES.10 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (PACKAGE-NICKNAMES (FIND-PACKAGE "A")))
Expected value:
          ("Q")
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::PACKAGE-NICKNAMES.11
Test CL-TEST::PACKAGE-NICKNAMES.12 failed
Form: (LOOP CL-TEST::FOR CL-TEST::P CL-TEST::IN (LIST-ALL-PACKAGES) CL-TEST::SUM (LOOP CL-TEST::FOR CL-TEST::NK CL-TEST::IN (PACKAGE-NICKNAMES CL-TEST::P) COUNT (NOT (AND (STRINGP CL-TEST::NK) (CL-TEST::EQT CL-TEST::P (FIND-PACKAGE CL-TEST::NK))))))
Expected value:
          0
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::Y is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
 CL-TEST::PACKAGE-NICKNAMES.16
 CL-TEST::PACKAGE-NICKNAMES.17
 CL-TEST::PACKAGE-NICKNAMES.18
 CL-TEST::PACKAGE-NICKNAMES.19
 CL-TEST::PACKAGE-NICKNAMES.20
 CL-TEST::PACKAGE-NICKNAMES.21
 CL-TEST::PACKAGE-NICKNAMES.22
 CL-TEST::PACKAGE-NICKNAMES.ERROR.1
 CL-TEST::PACKAGE-NICKNAMES.ERROR.2
Test CL-TEST::PACKAGE-NICKNAMES.ERROR.3 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION PACKAGE-NICKNAMES) (FUNCTION CL-TEST::PACKAGE-DESIGNATOR-P))
Expected value:
          NIL
Actual value:
          #<Simple-Error 0 fell through ETYPECASE expression.> [Actual value: #<error during printing>

 NIL
 CL-TEST::INTERN.1
 CL-TEST::INTERN.2
 CL-TEST::INTERN.4
 CL-TEST::INTERN.5
 CL-TEST::INTERN.6
 CL-TEST::INTERN.7
 CL-TEST::INTERN.8
 CL-TEST::INTERN.9
 CL-TEST::INTERN.10
 CL-TEST::INTERN.11
 CL-TEST::INTERN.12
 CL-TEST::INTERN.13
 CL-TEST::INTERN.14
 CL-TEST::INTERN.15
 CL-TEST::INTERN.16
 CL-TEST::INTERN.17
 CL-TEST::INTERN.18
 CL-TEST::INTERN.ERROR.1
 CL-TEST::INTERN.ERROR.2
 CL-TEST::EXPORT.1
 CL-TEST::EXPORT.2
 CL-TEST::EXPORT.3
Test CL-TEST::EXPORT.4 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::HANDLER-CASE (EXPORT (QUOTE B:BAR) "A") (PACKAGE-ERROR NIL (QUOTE PACKAGE-ERROR)) (ERROR (CL-TEST::C) CL-TEST::C)))
Expected value:
          PACKAGE-ERROR
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NILCaught error in EXPORT.5: #<Simple-Error Newly exported symbol TEST1::X conflicts with symbol TEST2:X in package #<Package "Test2">.>

 CL-TEST::EXPORT.5
 CL-TEST::EXPORT.ERROR.1
 CL-TEST::EXPORT.ERROR.2
 CL-TEST::RENAME-PACKAGE.1
Test CL-TEST::RENAME-PACKAGE.2 failed
Form: (BLOCK NIL (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (CL-TEST::SAFELY-DELETE-PACKAGE "TEST2") (CL-TEST::SAFELY-DELETE-PACKAGE "TEST3") (CL-TEST::SAFELY-DELETE-PACKAGE "TEST4") (CL-TEST::SAFELY-DELETE-PACKAGE "TEST5") (LET ((CL-TEST::P (MAKE-PACKAGE "TEST1")) (CL-TEST::NICKNAMES (COPY-LIST (QUOTE ("TEST3" "TEST4" "TEST5"))))) (UNLESS (PACKAGEP CL-TEST::P) (RETURN NIL)) (LET ((CL-TEST::P2 (RENAME-PACKAGE "TEST1" "TEST2" CL-TEST::NICKNAMES))) (UNLESS (PACKAGEP CL-TEST::P2) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P) (RETURN CL-TEST::P2)) (UNLESS (AND (CL-TEST::EQT CL-TEST::P CL-TEST::P2) (EQUAL (PACKAGE-NAME CL-TEST::P2) "TEST2") (NULL (SET-EXCLUSIVE-OR CL-TEST::NICKNAMES (PACKAGE-NICKNAMES CL-TEST::P2) :TEST (FUNCTION EQUAL)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P2) (RETURN NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P2) T)))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
 CL-TEST::RENAME-PACKAGE.3
Test CL-TEST::RENAME-PACKAGE.4 failed
Form: (BLOCK NIL (CL-TEST::SAFELY-DELETE-PACKAGE "G") (CL-TEST::SAFELY-DELETE-PACKAGE "TEST2") (LET ((CL-TEST::P (MAKE-PACKAGE "G")) (CL-TEST::NICKNAMES NIL)) (UNLESS (PACKAGEP CL-TEST::P) (RETURN NIL)) (LET ((CL-TEST::P2 (IGNORE-ERRORS (RENAME-PACKAGE #\G "TEST2" CL-TEST::NICKNAMES)))) (UNLESS (PACKAGEP CL-TEST::P2) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P) (RETURN CL-TEST::P2)) (UNLESS (AND (CL-TEST::EQT CL-TEST::P CL-TEST::P2) (EQUAL (PACKAGE-NAME CL-TEST::P2) "TEST2") (NULL (SET-EXCLUSIVE-OR CL-TEST::NICKNAMES (PACKAGE-NICKNAMES CL-TEST::P2) :TEST (FUNCTION EQUAL)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P2) (RETURN NIL)) (IGNORE-ERRORS (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P2)) T)))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
Test CL-TEST::RENAME-PACKAGE.5 failed
Form: (BLOCK NIL (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET ((CL-TEST::P (MAKE-PACKAGE "TEST1")) (CL-TEST::NICKNAMES NIL)) (UNLESS (PACKAGEP CL-TEST::P) (RETURN NIL)) (LET ((CL-TEST::P2 (IGNORE-ERRORS (RENAME-PACKAGE "TEST1" #\G CL-TEST::NICKNAMES)))) (UNLESS (PACKAGEP CL-TEST::P2) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P) (RETURN CL-TEST::P2)) (UNLESS (AND (CL-TEST::EQT CL-TEST::P CL-TEST::P2) (EQUAL (PACKAGE-NAME CL-TEST::P2) "G") (NULL (SET-EXCLUSIVE-OR CL-TEST::NICKNAMES (PACKAGE-NICKNAMES CL-TEST::P2) :TEST (FUNCTION EQUAL)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P2) (RETURN NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P2) T)))
Expected value:
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
 CL-TEST::RENAME-PACKAGE.6
 CL-TEST::RENAME-PACKAGE.7
 CL-TEST::RENAME-PACKAGE.8
 CL-TEST::RENAME-PACKAGE.9
 CL-TEST::RENAME-PACKAGE.ERROR.1
 CL-TEST::RENAME-PACKAGE.ERROR.2
 CL-TEST::RENAME-PACKAGE.ERROR.3
Test CL-TEST::SHADOW.1 failed
Form: (PROG1 (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "TEST5") (CL-TEST::SAFELY-DELETE-PACKAGE "TEST4") (CL-TEST::HANDLER-CASE (LET* ((CL-TEST::P1 (PROG1 (MAKE-PACKAGE "TEST4" :USE NIL) (EXPORT (INTERN "A" "TEST4") "TEST4"))) (CL-TEST::P2 (MAKE-PACKAGE "TEST5" :USE (QUOTE ("TEST4")))) (CL-TEST::R1 (PACKAGE-SHADOWING-SYMBOLS "TEST4")) (CL-TEST::R2 (PACKAGE-SHADOWING-SYMBOLS "TEST5"))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S1 CL-TEST::KIND1) (FIND-SYMBOL "A" CL-TEST::P1) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S2 CL-TEST::KIND2) (FIND-SYMBOL "A" CL-TEST::P2) (LET ((CL-TEST::R3 (SHADOW "A" CL-TEST::P2))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S3 CL-TEST::KIND3) (FIND-SYMBOL "A" CL-TEST::P2) (LIST (PACKAGE-NAME CL-TEST::P1) (PACKAGE-NAME CL-TEST::P2) CL-TEST::R1 CL-TEST::R2 (SYMBOL-NAME CL-TEST::S1) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S1)) CL-TEST::KIND1 (SYMBOL-NAME CL-TEST::S2) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S2)) CL-TEST::KIND2 CL-TEST::R3 (SYMBOL-NAME CL-TEST::S3) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S3)) CL-TEST::KIND3)))))) (ERROR (CL-TEST::C) CL-TEST::C))) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST5") (CL-TEST::SAFELY-DELETE-PACKAGE "TEST4"))
Expected value:
          ("TEST4" "TEST5" NIL NIL "A" "TEST4" :EXTERNAL "A" "TEST4" :INHERITED T "A" "TEST5" :INTERNAL)
Actual value:
          #<Undefined-Function PACKAGE-SHADOWING-SYMBOLS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOW.2 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (CL-TEST::HANDLER-CASE (LET* ((CL-TEST::P1 (PROG1 (MAKE-PACKAGE "G" :USE NIL) (EXPORT (INTERN "A" "G") "G"))) (CL-TEST::P2 (MAKE-PACKAGE "H" :USE (QUOTE ("G")))) (CL-TEST::R1 (PACKAGE-SHADOWING-SYMBOLS "G")) (CL-TEST::R2 (PACKAGE-SHADOWING-SYMBOLS "H"))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S1 CL-TEST::KIND1) (FIND-SYMBOL "A" CL-TEST::P1) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S2 CL-TEST::KIND2) (FIND-SYMBOL "A" CL-TEST::P2) (LET ((CL-TEST::R3 (SHADOW "A" "H"))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S3 CL-TEST::KIND3) (FIND-SYMBOL "A" CL-TEST::P2) (PROG1 (LIST (PACKAGE-NAME CL-TEST::P1) (PACKAGE-NAME CL-TEST::P2) CL-TEST::R1 CL-TEST::R2 (SYMBOL-NAME CL-TEST::S1) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S1)) CL-TEST::KIND1 (SYMBOL-NAME CL-TEST::S2) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S2)) CL-TEST::KIND2 CL-TEST::R3 (SYMBOL-NAME CL-TEST::S3) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S3)) CL-TEST::KIND3) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P2) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P1))))))) (ERROR (CL-TEST::C) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") CL-TEST::C)))
Expected value:
          ("G" "H" NIL NIL "A" "G" :EXTERNAL "A" "G" :INHERITED T "A" "H" :INTERNAL)
Actual value:
          #<Undefined-Function PACKAGE-SHADOWING-SYMBOLS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOW.3 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (CL-TEST::HANDLER-CASE (LET* ((CL-TEST::P1 (PROG1 (MAKE-PACKAGE "G" :USE NIL) (EXPORT (INTERN "A" "G") "G"))) (CL-TEST::P2 (MAKE-PACKAGE "H" :USE (QUOTE ("G")))) (CL-TEST::R1 (PACKAGE-SHADOWING-SYMBOLS "G")) (CL-TEST::R2 (PACKAGE-SHADOWING-SYMBOLS "H"))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S1 CL-TEST::KIND1) (FIND-SYMBOL "A" CL-TEST::P1) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S2 CL-TEST::KIND2) (FIND-SYMBOL "A" CL-TEST::P2) (LET ((CL-TEST::R3 (SHADOW "A" #\H))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::S3 CL-TEST::KIND3) (FIND-SYMBOL "A" CL-TEST::P2) (PROG1 (LIST (PACKAGE-NAME CL-TEST::P1) (PACKAGE-NAME CL-TEST::P2) CL-TEST::R1 CL-TEST::R2 (SYMBOL-NAME CL-TEST::S1) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S1)) CL-TEST::KIND1 (SYMBOL-NAME CL-TEST::S2) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S2)) CL-TEST::KIND2 CL-TEST::R3 (SYMBOL-NAME CL-TEST::S3) (PACKAGE-NAME (SYMBOL-PACKAGE CL-TEST::S3)) CL-TEST::KIND3) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P2) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P1))))))) (ERROR (CL-TEST::C) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") CL-TEST::C)))
Expected value:
          ("G" "H" NIL NIL "A" "G" :EXTERNAL "A" "G" :INHERITED T "A" "H" :INTERNAL)
Actual value:
          #<Undefined-Function PACKAGE-SHADOWING-SYMBOLS> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHADOW.4
 CL-TEST::SHADOW.5
Test CL-TEST::SHADOW.6 failed
Form: (PROG1 (CL-TEST::HANDLER-CASE (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (SHADOW (QUOTE ("X" "Y" CL-TEST::Z)) :G) (LET ((CL-TEST::RESULTS (APPEND (MULTIPLE-VALUE-LIST (FIND-SYMBOL "X" :G)) (MULTIPLE-VALUE-LIST (FIND-SYMBOL "Y" :G)) (MULTIPLE-VALUE-LIST (FIND-SYMBOL "Z" :G)) NIL))) (LIST (SYMBOL-NAME (FIRST CL-TEST::RESULTS)) (SECOND CL-TEST::RESULTS) (SYMBOL-NAME (THIRD CL-TEST::RESULTS)) (FOURTH CL-TEST::RESULTS) (SYMBOL-NAME (FIFTH CL-TEST::RESULTS)) (SIXTH CL-TEST::RESULTS) (LENGTH (PACKAGE-SHADOWING-SYMBOLS :G))))) (ERROR (CL-TEST::C) CL-TEST::C)) (CL-TEST::SAFELY-DELETE-PACKAGE :G))
Expected value:
          ("X" :INTERNAL "Y" :INTERNAL "Z" :INTERNAL 3)
Actual value:
          #<Undefined-Function PACKAGE-SHADOWING-SYMBOLS> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOW.7 failed
Form: (PROG1 (CL-TEST::HANDLER-CASE (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (CL-TEST::SAFELY-DELETE-PACKAGE :G) (MAKE-PACKAGE :G :USE NIL) (SHADOW (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE (#\X #\Y))) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) :G)) (LET ((CL-TEST::RESULTS (APPEND (MULTIPLE-VALUE-LIST (FIND-SYMBOL "X" :G)) (MULTIPLE-VALUE-LIST (FIND-SYMBOL "Y" :G)) NIL))) (LIST CL-TEST::I CL-TEST::X CL-TEST::Y (SYMBOL-NAME (FIRST CL-TEST::RESULTS)) (SECOND CL-TEST::RESULTS) (SYMBOL-NAME (THIRD CL-TEST::RESULTS)) (FOURTH CL-TEST::RESULTS) (LENGTH (PACKAGE-SHADOWING-SYMBOLS :G))))) (ERROR (CL-TEST::C) CL-TEST::C)) (CL-TEST::SAFELY-DELETE-PACKAGE :G))
Expected value:
          (2 1 2 "X" :INTERNAL "Y" :INTERNAL 2)
Actual value:
          #<Undefined-Function PACKAGE-SHADOWING-SYMBOLS> [Actual value: #<error during printing>

 NIL
 CL-TEST::SHADOW.8
 CL-TEST::SHADOW.9
 CL-TEST::SHADOW.10
 CL-TEST::SHADOW.ERROR.1
 CL-TEST::SHADOW.ERROR.2
Test CL-TEST::SHADOWING-IMPORT.1 failed
Form: (LET ((CL-TEST::NAME1 "TEST1") (CL-TEST::NAME2 "TEST2")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME2) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL)) (CL-TEST::P2 (MAKE-PACKAGE CL-TEST::NAME2)) (CL-TEST::S1 (INTERN "X" CL-TEST::P1)) (CL-TEST::S2 (INTERN "X" CL-TEST::P2))) (LIST (CL-TEST::EQT CL-TEST::S1 CL-TEST::S2) (CL-TEST::EQT (FIND-SYMBOL "X" CL-TEST::P2) CL-TEST::S2) (SHADOWING-IMPORT CL-TEST::S1 CL-TEST::P2) (CL-TEST::EQUALT (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P2) (LIST CL-TEST::S1)) (CL-TEST::EQT (FIND-SYMBOL "X" CL-TEST::P2) CL-TEST::S1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME2)))
Expected value:
          (NIL T T T T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.2 failed
Form: (LET ((CL-TEST::NAME1 "TEST1") (CL-TEST::NAME2 "TEST2")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME2) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL)) (CL-TEST::P2 (MAKE-PACKAGE CL-TEST::NAME2)) (CL-TEST::S1 (INTERN "X" CL-TEST::P1))) (LIST (FIND-SYMBOL "X" CL-TEST::P2) (SHADOWING-IMPORT CL-TEST::S1 CL-TEST::P2) (CL-TEST::EQUALT (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P2) (LIST CL-TEST::S1)) (CL-TEST::EQT (FIND-SYMBOL "X" CL-TEST::P2) CL-TEST::S1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME2)))
Expected value:
          (NIL T T T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.3 failed
Form: (LET ((CL-TEST::NAME1 "TEST1") (CL-TEST::NAME2 "TEST2")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME2) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL)) (CL-TEST::P2 (MAKE-PACKAGE CL-TEST::NAME2 :USE NIL)) (CL-TEST::S1 (INTERN "X" CL-TEST::P1)) (CL-TEST::S2 (INTERN "X" CL-TEST::P2))) (LIST (CL-TEST::EQT CL-TEST::S1 CL-TEST::S2) (CL-TEST::EQT (FIND-SYMBOL "X" CL-TEST::P2) CL-TEST::S2) (LET ((*PACKAGE* CL-TEST::P2)) (SHADOWING-IMPORT CL-TEST::S1)) (CL-TEST::EQUALT (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P2) (LIST CL-TEST::S1)) (CL-TEST::EQT (FIND-SYMBOL "X" CL-TEST::P2) CL-TEST::S1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME2)))
Expected value:
          (NIL T T T T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.4 failed
Form: (LET ((CL-TEST::NAME1 "TEST1") (CL-TEST::NAME2 "TEST2") (CL-TEST::NAME3 "TEST3")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME2) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME3) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL)) (CL-TEST::P3 (MAKE-PACKAGE CL-TEST::NAME2 :USE NIL)) (CL-TEST::P2 (MAKE-PACKAGE CL-TEST::NAME3 :USE (LIST CL-TEST::P3))) (CL-TEST::S1 (INTERN "X" CL-TEST::P1)) (CL-TEST::S2 (INTERN "X" CL-TEST::P3))) (EXPORT CL-TEST::S2 CL-TEST::P3) (LIST (CL-TEST::EQT CL-TEST::S1 CL-TEST::S2) (CL-TEST::EQT (FIND-SYMBOL "X" CL-TEST::P2) CL-TEST::S2) (SHADOWING-IMPORT CL-TEST::S1 CL-TEST::P2) (CL-TEST::EQUALT (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P2) (LIST CL-TEST::S1)) (CL-TEST::EQT (FIND-SYMBOL "X" CL-TEST::P2) CL-TEST::S1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME3) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME2)))
Expected value:
          (NIL T T T T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.5 failed
Form: (LET ((CL-TEST::NAME1 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL))) (LIST (FIND-SYMBOL "T" CL-TEST::P1) (SHADOWING-IMPORT T CL-TEST::NAME1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P1) (FIND-SYMBOL "T" CL-TEST::P1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1)))
Expected value:
          (NIL T (T) T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.6 failed
Form: (LET ((CL-TEST::NAME1 (MAKE-ARRAY (QUOTE (7)) :INITIAL-CONTENTS "TEST1XX" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL))) (LIST (FIND-SYMBOL "T" CL-TES:P1) (SHADOWING-IMPORT T CL-TEST::NAME1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P1) (FIND-SYMBOL "T" CL-TEST::P1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1)))
Expected value:
          (NIL T (T) T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.7 failed
Form: (LET ((CL-TEST::NAME1 (MAKE-ARRAY (QUOTE (7)) :INITIAL-CONTENTS "TEST1XX" :FILL-POINTER 7 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL))) (LIST (FIND-SYMBOL "T" CL-TEST::P1) (SHADOWING-IMPORT T CL-TEST::NAME1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P1) (FIND-SYMBOL "T" CL-TEST::P1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1)))
Expected value:
          (NIL T (T) T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.8 failed
Form: (LET ((CL-TEST::NAME1 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL))) (LIST (FIND-SYMBOL "T" CL-TEST::P1) (SHADOWING-IMPORT T CL-TEST::NAME1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P1) (FIND-SYMBOL "T" CL-TEST::P1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1)))
Expected value:
          (NIL T (T) T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.9 failed
Form: (LET ((CL-TEST::NAME1 (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL))) (LIST (FIND-SYMBOL "T" CL-TEST::P1) (SHADOWING-IMPORT T CL-TEST::NAME1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P1) (FIND-SYMBOL "T" CL-TEST::P1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1)))
Expected value:
          (NIL T (T) T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.10 failed
Form: (LET ((CL-TEST::NAME1 (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME2 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "ABTEST1CDE" :ELEMENT-TYPE CL-TEST::ETYPE))) (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME2 :DISPLACED-INDEX-OFFSET 2)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL))) (LIST (FIND-SYMBOL "T" CL-TEST::P1) (SHADOWING-IMPORT T CL-TEST::NAME1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P1) (FIND-SYMBOL "T" CL-TEST::P1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1)))
Expected value:
          (NIL T (T) T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.11 failed
Form: (LET ((CL-TEST::NAME1 (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME2 (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS "ABTEST1CDE" :ELEMENT-TYPE CL-TEST::ETYPE))) (MAKE-ARRAY (QUOTE (5)) :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME2 :DISPLACED-INDEX-OFFSET 2)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1) (PROG1 (LET* ((CL-TEST::P1 (MAKE-PACKAGE CL-TEST::NAME1 :USE NIL))) (LIST (FIND-SYMBOL "T" CL-TEST::P1) (SHADOWING-IMPORT T CL-TEST::NAME1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P1) (FIND-SYMBOL "T" CL-TEST::P1))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME1)))
Expected value:
          (NIL T (T) T)
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SHADOWING-IMPORT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::SHADOWING-IMPORT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SHADOWING-IMPORT NIL *PACKAGE* NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function SHADOWING-IMPORT> [Actual value: #<error during printing>

 NIL
 CL-TEST::DELETE-PACKAGE.1
Test CL-TEST::DELETE-PACKAGE.2 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE :TEST1) (LET ((CL-TEST::P (MAKE-PACKAGE :TEST1 :USE NIL))) (LIST (CL-TEST::NOTNOT (DELETE-PACKAGE :TEST1)) (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (DELETE-PACKAGE CL-TEST::P))))
Expected value:
          (T T NIL)
Actual value:
          (T T T) [Actual value: #<error during printing>

 NIL
 CL-TEST::DELETE-PACKAGE.3
 CL-TEST::DELETE-PACKAGE.4
Test CL-TEST::DELETE-PACKAGE.5 failed
Form: (PROG (CL-TEST::P1 CL-TEST::S1 CL-TEST::P2 CL-TEST::S2 CL-TEST::P3) (DECLARE (IGNORABLE CL-TEST::P1 CL-TEST::P2 CL-TEST::P3 CL-TEST::S1 CL-TEST::S2)) (CL-TEST::SAFELY-DELETE-PACKAGE "P3") (CL-TEST::SAFELY-DELETE-PACKAGE "P2") (CL-TEST::SAFELY-DELETE-PACKAGE "P1") (SETQ CL-TEST::P1 (MAKE-PACKAGE "P1" :USE NIL)) (SETQ CL-TEST::S1 (INTERN "S1" CL-TEST::P1)) (EXPORT CL-TEST::S1 "P1") (SETQ CL-TEST::P2 (MAKE-PACKAGE "P2" :USE (QUOTE ("P1")))) (SETQ CL-TEST::S2 (INTERN "S2" CL-TEST::P2)) (EXPORT CL-TEST::S1 CL-TEST::P2) (EXPORT CL-TEST::S2 "P2") (SETF CL-TEST::P3 (MAKE-PACKAGE "P3" :USE (QUOTE ("P2")))) (LET ((CL-TEST::OUTER-RESTARTS (COMPUTE-RESTARTS))) (CL-TEST::HANDLER-BIND ((PACKAGE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (LET ((CL-TEST::MY-RESTARTS (REMOVE (QUOTE ABORT) (SET-DIFFERENCE (COMPUTE-RESTARTS CL-TEST::C) CL-TEST::OUTER-RESTARTS) :KEY (FUNCTION RESTART-NAME)))) (ASSERT CL-TEST::MY-RESTARTS) (WHEN (FIND (QUOTE CONTINUE) CL-TEST::MY-RESTARTS :KEY (FUNCTION RESTART-NAME)) (CONTINUE CL-TEST::C)) (RETURN T)))))) (DELETE-PACKAGE CL-TEST::P2))) (UNLESS (AND (EQUAL (PACKAGE-NAME CL-TEST::P1) "P1") (NULL (PACKAGE-NAME CL-TEST::P2)) (EQUAL (PACKAGE-NAME CL-TEST::P3) "P3")) (RETURN (QUOTE CL-TEST::FAIL1))) (UNLESS (CL-TEST::EQT (SYMBOL-PACKAGE CL-TEST::S1) CL-TEST::P1) (RETURN (QUOTE CL-TEST::FAIL2))) (UNLESS (EQUAL (PRIN1-TO-STRING CL-TEST::S1) "P1:S1") (RETURN (QUOTE CL-TEST::FAIL3))) (UNLESS (EQUAL (MULTIPLE-VALUE-LIST (FIND-SYMBOL "S1" CL-TEST::P3)) (QUOTE (NIL NIL))) (RETURN (QUOTE CL-TEST::FAIL4))) (UNLESS (EQUAL (MULTIPLE-VALUE-LIST (FIND-SYMBOL "S2" CL-TEST::P3)) (QUOTE (NIL NIL))) (RETURN (QUOTE CL-TEST::FAIL5))) (UNLESS (AND (NULL (PACKAGE-USED-BY-LIST CL-TEST::P1)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::P3))) (RETURN (QUOTE CL-TEST::FAIL6))) (UNLESS (AND (PACKAGEP CL-TEST::P1) (PACKAGEP CL-TEST::P2) (PACKAGEP CL-TEST::P3)) (RETURN (QUOTE CL-TEST::FAIL7))) (UNLESS (AND (NULL (PACKAGE-USE-LIST CL-TEST::P1)) (NULL (PACKAGE-USE-LIST CL-TEST::P3))) (RETURN (QUOTE CL-TEST::FAIL8))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P3) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P1) (RETURN T))
Expected value:
          T
Actual value:
          #<Simple-Error Package #<Package "P2"> is in use.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DELETE-PACKAGE.6 failed
Form: (BLOCK CL-TEST::DONE (LET ((CL-TEST::OUTER-RESTARTS (COMPUTE-RESTARTS))) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST-20") (CL-TEST::HANDLER-BIND ((PACKAGE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (SET-DIFFERENCE (COMPUTE-RESTARTS CL-TEST::C) CL-TEST::OUTER-RESTARTS)) (RETURN-FROM CL-TEST::DONE :GOOD))))) (DELETE-PACKAGE "TEST-20"))))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error No package named "TEST-20".> [Actual value: #<error during printing>

 NIL
 CL-TEST::DELETE-PACKAGE.7
 CL-TEST::DELETE-PACKAGE.8
 CL-TEST::DELETE-PACKAGE.9
 CL-TEST::DELETE-PACKAGE.10
 CL-TEST::DELETE-PACKAGE.11
 CL-TEST::DELETE-PACKAGE.12
 CL-TEST::DELETE-PACKAGE.13
 CL-TEST::DELETE-PACKAGE.ERROR.1
 CL-TEST::DELETE-PACKAGE.ERROR.2
 CL-TEST::MAKE-PACKAGE.1
 CL-TEST::MAKE-PACKAGE.2
 CL-TEST::MAKE-PACKAGE.3
 CL-TEST::MAKE-PACKAGE.4
 CL-TEST::MAKE-PACKAGE.5
 CL-TEST::MAKE-PACKAGE.6
Test CL-TEST::MAKE-PACKAGE.7 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (QUOTE ("A")))))) (PROG1 (AND (PACKAGEP CL-TEST::P) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.7A failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (QUOTE (#:A)))))) (PROG1 (AND (PACKAGEP CL-TEST::P) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.7B failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (QUOTE (#\A)))))) (PROG1 (AND (PACKAGEP CL-TEST::P) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.8 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE (QUOTE #:TEST1)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE (QUOTE #:TEST1) :USE (QUOTE ("A")))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.8A failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE (QUOTE #:TEST1)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE (QUOTE #:TEST1) :USE (QUOTE (#:A)))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.8B failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE (QUOTE #:TEST1)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE (QUOTE #:TEST1) :USE (QUOTE (#\A)))))) (MULTIPLE-VALUE-PROG1 (VALUES (PACKAGEP CL-TEST::P) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.9 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE #\X) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE #\X :USE (QUOTE ("A")))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "X") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.9A failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE #\X) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE #\X :USE (QUOTE (#:A)))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "X") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.9B failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE #\X) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE #\X :USE (QUOTE (#\A)))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "X") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-PACKAGE.10
 CL-TEST::MAKE-PACKAGE.11
 CL-TEST::MAKE-PACKAGE.12
Test CL-TEST::MAKE-PACKAGE.13 failed
Form: (PROGN (MAPC (FUNCTION CL-TEST::SAFELY-DELETE-PACKAGE) (QUOTE (#\X #\F #\G #\H))) (LET ((CL-TEST::P (MAKE-PACKAGE #\X :NICKNAMES (QUOTE ("F" #\G #:H))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "X") (SET-EXCLUSIVE-OR (PACKAGE-NICKNAMES CL-TEST::P) (QUOTE ("F" "G" "H")) :TEST (FUNCTION EQUAL)) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          NIL
          T
Actual value:
          #<Undefined-Function SET-EXCLUSIVE-OR> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-PACKAGE.14
 CL-TEST::MAKE-PACKAGE.15
 CL-TEST::MAKE-PACKAGE.16
 CL-TEST::MAKE-PACKAGE.17
 CL-TEST::MAKE-PACKAGE.18
 CL-TEST::MAKE-PACKAGE.19
 CL-TEST::MAKE-PACKAGE.20
 CL-TEST::MAKE-PACKAGE.21
 CL-TEST::MAKE-PACKAGE.22
 CL-TEST::MAKE-PACKAGE.23
 CL-TEST::MAKE-PACKAGE.24
 CL-TEST::MAKE-PACKAGE.25
 CL-TEST::MAKE-PACKAGE.26
 CL-TEST::MAKE-PACKAGE.27
Test CL-TEST::MAKE-PACKAGE.28 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 1 :INITIAL-CONTENTS "A" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (ASSERT (FIND-PACKAGE CL-TEST::NAME)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (LIST CL-TEST::NAME))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE CL-TEST::NAME))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.29 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 8 :INITIAL-CONTENTS "Axxxyyyz" :FILL-POINTER 1 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (ASSERT (FIND-PACKAGE CL-TEST::NAME)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (LIST CL-TEST::NAME))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE CL-TEST::NAME))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.30 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 8 :INITIAL-CONTENTS "Axxxyyyz" :FILL-POINTER 1 :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (ASSERT (FIND-PACKAGE CL-TEST::NAME)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (LIST CL-TEST::NAME))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE CL-TEST::NAME))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.31 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 1 :INITIAL-CONTENTS "A" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (ASSERT (FIND-PACKAGE CL-TEST::NAME)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (LIST CL-TEST::NAME))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE CL-TEST::NAME))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.32 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 1 :INITIAL-CONTENTS "A" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (ASSERT (FIND-PACKAGE CL-TEST::NAME)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (LIST CL-TEST::NAME))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE CL-TEST::NAME))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.33 failed
Form: (LET ((CL-TEST::NAME (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "xxAyyy0123" :ELEMENT-TYPE CL-TEST::ETYPE))) (MAKE-ARRAY 1 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 2)))) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (ASSERT (FIND-PACKAGE CL-TEST::NAME)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (LIST CL-TEST::NAME))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE CL-TEST::NAME))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.34 failed
Form: (LET ((CL-TEST::NAME (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :INITIAL-CONTENTS "xxAzzzzyyy" :ELEMENT-TYPE CL-TEST::ETYPE))) (MAKE-ARRAY 1 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 2)))) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (ASSERT (FIND-PACKAGE CL-TEST::NAME)) (LET ((CL-TEST::P (IGNORE-ERRORS (MAKE-PACKAGE "TEST1" :USE (LIST CL-TEST::NAME))))) (MULTIPLE-VALUE-PROG1 (VALUES (CL-TEST::NOTNOT (PACKAGEP CL-TEST::P)) (CL-TEST::EQUALT (PACKAGE-NAME CL-TEST::P) "TEST1") (CL-TEST::EQUALT (PACKAGE-NICKNAMES CL-TEST::P) NIL) (CL-TEST::EQUALT (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE CL-TEST::NAME))) (CL-TEST::EQUALT (PACKAGE-USED-BY-LIST CL-TEST::P) NIL)) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))
Expected value:
          T
          T
          T
          T
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.ERROR.1 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::HANDLE-NON-ABORT-RESTART (MAKE-PACKAGE "A")))
Expected value:
          CL-TEST::SUCCESS
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.ERROR.2 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::HANDLE-NON-ABORT-RESTART (MAKE-PACKAGE "Q")))
Expected value:
          CL-TEST::SUCCESS
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.ERROR.3 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::HANDLE-NON-ABORT-RESTART (CL-TEST::SAFELY-DELETE-PACKAGE "TEST1") (MAKE-PACKAGE "TEST1" :NICKNAMES (QUOTE ("A")))))
Expected value:
          CL-TEST::SUCCESS
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::MAKE-PACKAGE.ERROR.4
 CL-TEST::MAKE-PACKAGE.ERROR.5
Test CL-TEST::MAKE-PACKAGE.ERROR.6 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "MPE6") (CL-TEST:SIGNALS-ERROR (MAKE-PACKAGE "MPE6" :BAD T) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :BAD. Expected one of (:NICKNAMES :USE).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.ERROR.7 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "MPE7") (CL-TEST:SIGNALS-ERROR (MAKE-PACKAGE "MPE7" :NICKNAMES) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.ERROR.8 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "MPE8") (CL-TEST:SIGNALS-ERROR (MAKE-PACKAGE "MPE8" :USE) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.ERROR.9 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "MPE9") (CL-TEST:SIGNALS-ERROR (MAKE-PACKAGE "MPE9" (QUOTE CL-TEST::BAD) T) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument CL-TEST::BAD. Expected one of (:NICKNAMES :USE).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.ERROR.10 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "MPE10") (CL-TEST:SIGNALS-ERROR (MAKE-PACKAGE "MPE10" 1 2) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument 1. Expected one of (:NICKNAMES :USE).> [Actual value: #<error during printing>

 NIL
Test CL-TEST::MAKE-PACKAGE.ERROR.11 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "MPE11") (CL-TEST:SIGNALS-ERROR (MAKE-PACKAGE "MPE11" (QUOTE CL-TEST::BAD) T :ALLOW-OTHER-KEYS NIL) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument CL-TEST::BAD. Expected one of (:NICKNAMES :USE).> [Actual value: #<error during printing>

 NIL
Bad access type: S ==> #<Package "Cl-User">
Bad access type: POOP ==> #<Package "Cl-User">
Bad access type: PATHSPEC ==> #<Package "Cl-User">
Bad access type: STILL-BROKE ==> #<Package "Cl-User">
Bad access type: TARGET-WRITE-TIME ==> #<Package "Cl-User">
Bad access type: GC ==> #<Package "Cl-User">
Bad access type: *DUCK* ==> #<Package "Cl-User">
Bad access type: SHIT-IS-BROKE ==> #<Package "Cl-User">
Bad access type: COMPILE-AND-LOAD ==> #<Package "Cl-User">
Bad access type: COMPILE-FILE-TEST-FUN.3 ==> #<Package "Cl-User">
Bad access type: PKG ==> #<Package "Cl-User">
Bad access type: FILES ==> #<Package "Cl-User">
Bad access type: FN ==> #<Package "Cl-User">
Bad access type: XYZZY ==> #<Package "Cl-User">
Bad access type: NAME ==> #<Package "Cl-User">
Bad access type: *COMPILED-AND-LOADED-FILES* ==> #<Package "Cl-User">
Bad access type: FORMER-DATA ==> #<Package "Cl-User">
Bad access type: BARF ==> #<Package "Cl-User">
Bad access type: *PRINT-SAFE* ==> #<Package "Cl-User">
Bad access type: SOURCE-WRITE-TIME ==> #<Package "Cl-User">
Bad access type: FORCE ==> #<Package "Cl-User">
Further messages suppressed
Test CL-TEST::WITH-PACKAGE-ITERATOR.1 failed
Form: (CL-TEST::WITH-PACKAGE-ITERATOR-INTERNAL (LIST (FIND-PACKAGE "COMMON-LISP-USER")))
Expected value:
          T
Actual value:
          26 [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-PACKAGE-ITERATOR.2Bad access type: READ ==> #<Package "Cl-User">
Bad access type: DEFTYPE ==> #<Package "Cl-User">
Bad access type: MAP ==> #<Package "Cl-User">
Bad access type: PAIRLIS ==> #<Package "Cl-User">
Bad access type: STANDARD-CHAR-P ==> #<Package "Cl-User">
Bad access type: REMOVE-METHOD ==> #<Package "Cl-User">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Cl-User">
Bad access type: NAMESTRING ==> #<Package "Cl-User">
Bad access type: MAKUNBOUND ==> #<Package "Cl-User">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Cl-User">
Bad access type: EXP ==> #<Package "Cl-User">
Bad access type: APPEND ==> #<Package "Cl-User">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Cl-User">
Bad access type: MACROLET ==> #<Package "Cl-User">
Bad access type: THE ==> #<Package "Cl-User">
Bad access type: CONDITION ==> #<Package "Cl-User">
Bad access type: ETYPECASE ==> #<Package "Cl-User">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Cl-User">
Bad access type: SUBLIS ==> #<Package "Cl-User">
Bad access type: PUSH ==> #<Package "Cl-User">
Bad access type: LOOP ==> #<Package "Cl-User">
Further messages suppressed
Test CL-TEST::WITH-PACKAGE-ITERATOR.3 failed
Form: (CL-TEST::WITH-PACKAGE-ITERATOR-INHERITED (LIST (FIND-PACKAGE "COMMON-LISP-USER")))
Expected value:
          T
Actual value:
          978 [Actual value: #<error during printing>

 NILBad access type: READ ==> #<Package "Cl-User">
Bad access type: DEFTYPE ==> #<Package "Cl-User">
Bad access type: MAP ==> #<Package "Cl-User">
Bad access type: PAIRLIS ==> #<Package "Cl-User">
Bad access type: STANDARD-CHAR-P ==> #<Package "Cl-User">
Bad access type: REMOVE-METHOD ==> #<Package "Cl-User">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Cl-User">
Bad access type: NAMESTRING ==> #<Package "Cl-User">
Bad access type: MAKUNBOUND ==> #<Package "Cl-User">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Cl-User">
Bad access type: EXP ==> #<Package "Cl-User">
Bad access type: APPEND ==> #<Package "Cl-User">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Cl-User">
Bad access type: MACROLET ==> #<Package "Cl-User">
Bad access type: THE ==> #<Package "Cl-User">
Bad access type: CONDITION ==> #<Package "Cl-User">
Bad access type: ETYPECASE ==> #<Package "Cl-User">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Cl-User">
Bad access type: SUBLIS ==> #<Package "Cl-User">
Bad access type: PUSH ==> #<Package "Cl-User">
Bad access type: LOOP ==> #<Package "Cl-User">
Further messages suppressed
Test CL-TEST::WITH-PACKAGE-ITERATOR.4 failed
Form: (CL-TEST::WITH-PACKAGE-ITERATOR-ALL (LIST (FIND-PACKAGE "COMMON-LISP-USER")))
Expected value:
          T
Actual value:
          1004 [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-PACKAGE-ITERATOR.5 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::WITH-PACKAGE-ITERATOR-ALL (QUOTE ("A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-PACKAGE-ITERATOR.6 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::WITH-PACKAGE-ITERATOR-ALL (QUOTE (#:A))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-PACKAGE-ITERATOR.7 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::WITH-PACKAGE-ITERATOR-ALL (QUOTE (#\A))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-PACKAGE-ITERATOR.8 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::WITH-PACKAGE-ITERATOR-INTERNAL (LIST (FIND-PACKAGE "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-PACKAGE-ITERATOR.9 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::WITH-PACKAGE-ITERATOR-EXTERNAL (LIST (FIND-PACKAGE "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-PACKAGE-ITERATOR.10 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::WITH-PACKAGE-ITERATOR-INHERITED (LIST (FIND-PACKAGE "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::WITH-PACKAGE-ITERATOR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (WITH-PACKAGE-ITERATOR (CL-TEST::X "COMMON-LISP-USER")) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NILPackage #<Package "X">
Package #<Package "Test-Dpe2">
Package #<Package "P3">
Package #<Package "P2">
Package #<Package "P1">
Package #<Package "Test1xx">
Package #<Package "Test3">
Package #<Package "Test2">
Package #<Package "Load-Test-Package">
Bad access type: LOAD-TEST-PACKAGE::F ==> #<Package "Load-Test-Package">
Bad access type: LOAD-TEST-PACKAGE::GOOD ==> #<Package "Load-Test-Package">
Package #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::A35 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::A34 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::A33 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::A32 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::ST36-A36 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::B35 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::B34 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::B33 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::B32 ==> #<Package "Struct-Test-Package">
Bad access type: STRUCT-TEST-PACKAGE::ST26-B36 ==> #<Package "Struct-Test-Package">
Package #<Package "Ds4">
Bad access type: DS2::F ==> #<Package "Ds4">
Bad access type: DS4::Z ==> #<Package "Ds4">
Bad access type: DS4::Y ==> #<Package "Ds4">
Bad access type: DS4::X ==> #<Package "Ds4">
Package #<Package "Ds3">
Bad access type: DS3::M ==> #<Package "Ds3">
Bad access type: DS3::L ==> #<Package "Ds3">
Not same symbol (2): DS2:A DS1:A
Package #<Package "Ds2">
Bad access type: DS2::F ==> #<Package "Ds2">
Bad access type: DS2::E ==> #<Package "Ds2">
Package #<Package "Ds1">
Bad access type: DS1::D ==> #<Package "Ds1">
Bad access type: DS1::C ==> #<Package "Ds1">
Package #<Package "Fs-B">
Package #<Package "Fs-A">
Package #<Package "B">
Package #<Package "A">
Package #<Package "Cl-Test">
Bad access type: CL-TEST::DELETE-DUPLICATES.ALLOW-OTHER-KEYS.8 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::ARRAY-DISPLACEMENT.ERROR.4 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::ARRAY-DISPLACEMENT.ERROR.3 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::ARRAY-DISPLACEMENT.ERROR.2 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::ARRAY-DISPLACEMENT.ERROR.1 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::MULTIPLE-VALUE-SETQ.17 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::MULTIPLE-VALUE-SETQ.16 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::MAKE-STRUCT-TEST-09 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::MAKE-STRUCT-TEST-08 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::MAKE-STRUCT-TEST-07 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::MULTIPLE-VALUE-SETQ.12 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::STABLE-SORT-BIT-VECTOR.3 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::STABLE-SORT-BIT-VECTOR.2 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::STABLE-SORT-BIT-VECTOR.1 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::STRING.26 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::STRING.25 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::STRING.24 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::MISC.304 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::STRING.22 ==> #<Package "Cl-Test">
Bad access type: CL-TEST::SBT-15- ==> #<Package "Cl-Test">
Bad access type: CL-TEST::STRING.20 ==> #<Package "Cl-Test">
Further messages suppressed
Package #<Package "Rt">
Bad access type: REGRESSION-TEST::BINDING-FORMS ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::ENTRY ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::PRED ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::*OPTIMIZATION-SETTINGS* ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::VAR ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::*EXPANDED-EVAL* ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::COLLECT ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::NOTE ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::EXPANDED-EVAL ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::E2 ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::FOR ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::*IN-TEST* ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::E ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::FROM ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::COPY-ENTRY ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::NOTE-P ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::ADD-ENTRY ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::NOTE-NAME ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::VARS ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::DISABLED ==> #<Package "Rt">
Bad access type: REGRESSION-TEST::ABORTED ==> #<Package "Rt">
Further messages suppressed
Package #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::ADDRESS ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::DIR ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::OBJECT ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::NAME-ELEMENT ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::CON ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::I ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::VAR ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::NEW-PATH ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::NEW-NAME ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::TRANSLATE-DIRECTORY ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::PATHNAME-%NAME ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::*DEFAULT-SIMPLE-FILE-PORT* ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::VERSIONP ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::FILESPEC ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::MATCH ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::FROM ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::VERBOSE ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::DIRS ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::RENAME-FILE* ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::TRANSLATE-ONE ==> #<Package "Simple-File-Client">
Bad access type: SIMPLE-FILE-CLIENT::IF-DOES-NOT-EXIST-P ==> #<Package "Simple-File-Client">
Further messages suppressed
Package #<Package "Peek">
Bad access type: PEEK::PEEK-HELP ==> #<Package "Peek">
Bad access type: PEEK::PROCESSOR-TYPE ==> #<Package "Peek">
Bad access type: PEEK::FEATURE-SEQ ==> #<Package "Peek">
Bad access type: PEEK::INSTANCE ==> #<Package "Peek">
Bad access type: PEEK::DEV ==> #<Package "Peek">
Bad access type: PEEK::PEEK-TOP-LEVEL ==> #<Package "Peek">
Bad access type: PEEK::COLOUR ==> #<Package "Peek">
Bad access type: PEEK::CARD ==> #<Package "Peek">
Bad access type: PEEK::PROCESS ==> #<Package "Peek">
Bad access type: PEEK::MODEL ==> #<Package "Peek">
Bad access type: PEEK::STEPPING-ID ==> #<Package "Peek">
Bad access type: PEEK::VNAME ==> #<Package "Peek">
Bad access type: PEEK::*CPUID-1-EDX-FEATURES* ==> #<Package "Peek">
Bad access type: PEEK::PEEK-WINDOW ==> #<Package "Peek">
Bad access type: PEEK::PEEK-CPU ==> #<Package "Peek">
Bad access type: PEEK::DIMS ==> #<Package "Peek">
Bad access type: PEEK::MODE ==> #<Package "Peek">
Bad access type: PEEK::PRINT-HEADER ==> #<Package "Peek">
Bad access type: PEEK::PEEK-PROCESS ==> #<Package "Peek">
Bad access type: PEEK::CH ==> #<Package "Peek">
Bad access type: PEEK::VENDOR-3 ==> #<Package "Peek">
Further messages suppressed
Package #<Package "Telnet">
Bad access type: TELNET::+COMMAND-DATA-MARK+ ==> #<Package "Telnet">
Bad access type: TELNET::REPORT-UNKNOWN-ESCAPE ==> #<Package "Telnet">
Bad access type: TELNET::+COMMAND-SE+ ==> #<Package "Telnet">
Bad access type: TELNET::STATE ==> #<Package "Telnet">
Bad access type: TELNET::GLYPH ==> #<Package "Telnet">
Bad access type: TELNET::PORT ==> #<Package "Telnet">
Bad access type: TELNET::+COMMAND-INTERRUPT-PROCESS+ ==> #<Package "Telnet">
Bad access type: TELNET::+COMMAND-DONT+ ==> #<Package "Telnet">
Bad access type: TELNET::XTERM-INITIAL ==> #<Package "Telnet">
Bad access type: TELNET::READ-SUBNEGOTIATION ==> #<Package "Telnet">
Bad access type: TELNET::FRAMEBUFFER ==> #<Package "Telnet">
Bad access type: TELNET::FOREGROUND ==> #<Package "Telnet">
Bad access type: TELNET::TERMINAL-HEIGHT ==> #<Package "Telnet">
Bad access type: TELNET::INTERRUPT-CHARACTER ==> #<Package "Telnet">
Bad access type: TELNET::XTERM-SAW-BRACKET-QUESTION ==> #<Package "Telnet">
Bad access type: TELNET::XTERM-SAW-CLOSE-BRACKET ==> #<Package "Telnet">
Bad access type: TELNET::X-POS ==> #<Package "Telnet">
Bad access type: TELNET::TELNET-SERVER ==> #<Package "Telnet">
Bad access type: TELNET::CLEAR ==> #<Package "Telnet">
Bad access type: TELNET::XTERM-SAW-ESCAPE ==> #<Package "Telnet">
Bad access type: TELNET::COLOURS ==> #<Package "Telnet">
Further messages suppressed
Package #<Package "Irc-Client">
Bad access type: IRC-CLIENT::INSTANCE ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::RCV ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::IRC-COMMAND ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::I ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::IRC-COMMAND-PROCESS ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::*COMMAND-TABLE* ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::REST-START ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::START-Y ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::START-X ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::LAMBDA-LIST ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::QUIT-IRC ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::CONNECT ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::INPUT ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::CHAN ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::FROM ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::MESSAGE ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::CURRENT-CHANNEL ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::IRC-DISPLAY ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::FN ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::COMMAND-PROCESS ==> #<Package "Irc-Client">
Bad access type: IRC-CLIENT::IRC-INPUT ==> #<Package "Irc-Client">
Further messages suppressed
Package #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::%MAKE-FIFO ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::CHANGED ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::*COLOUR-NAMES* ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::WINDOW-PREV ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::%BITSET-MASK-8-LINE ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::WINDOW-BACKBUFFER ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::CURSOR-LINE ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::KEY ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::CH ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::STATE ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::FROM-WIDTH ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::GLYPH ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::BACKBUFFER ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::BLIT-WINDOW ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::BITSET-MASK-1-WHOLE ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::BUTTONS ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::TEXT-WIDGET-NEWLINE ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::WINDOW-HEIGHT ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::R ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::LISP-LISTENER-PROCESS ==> #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS::C2 ==> #<Package "Sys.Graphics">
Further messages suppressed
Package #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RTL8139-ANER+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::X ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::NIC ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RTL8139-MULINT+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RCR-WRAP+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+TSD-SIZE+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+CONFIG1-DRVLOAD+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RCR-AM+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RCR-32K-BUFFER+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+HEADER-RUNT+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::ISR ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RTL8139-MIIR+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+CONFIG0-16K-BOOT-ROM+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::RTL8139-TX ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::TX-DESCRIPTOR ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::TX ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+HEADER-ROK+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RTL8139-ERBCR+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RTL8139-CAPR+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RCR-8K-BUFFER+ ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.RTL8139::+RTL8139-CRC0+ ==> #<Package "System.Rtl8139">
Further messages suppressed
Package #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::BAR0 ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::X ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::+VRING-USED-F-NO-NOTIFY+ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::NIC ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::N-TX-BUFFERS ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::BUF ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::VQ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::+VRING-DESC-F-WRITE+ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::VIRTIO-NET-IO-BASE ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::+NET-F-GUEST-ECN+ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::VIRTQUEUE-ARRAY ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::DESCRIPTORS ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::+N-RX-BUFFERS+ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::+VRING-DESC-NEXT-OFFSET+ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::+NET-F-HOST-UFO+ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::VIRTQUEUE-INDEX ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::+VRING-USED-IDX-OFFSET+ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::VIRTIO-CONFIGURE-VIRTQUEUES ==> #<Package "Virtio-Net">
Bad access type: SYSTEM.INTERNALS::UB32REF/LE ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::+ISR-STATUS+ ==> #<Package "Virtio-Net">
Bad access type: VIRTIO-NET::VIRTIO-NET-TX-ARRAY ==> #<Package "Virtio-Net">
Further messages suppressed
Package #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::REMOTE-STREAM ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::ATTEMPT ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::TCP-STREAM-PACKET ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::SOURCE ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::NIC ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::IN-FLIGHT-PINGS ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::TCP-CONNECTION-WINDOW-SIZE ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::PROTOCOL ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::THA-START ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::PARSE-IPV4-ADDRESS ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::+ICMP-PARAMETER-PROBLEM+ ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::WITH-RAW-PACKET-HOOK ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::SPA ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::+ARP-OP-REQUEST+ ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::PARSE-HTTP-REQUEST ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::*TCP-CONNECTIONS* ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::HEADER-LENGTH ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::REFILL-TCP-STREAM-BUFFER ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::%TCP4-RECEIVE ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::HLEN ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING::IPV4-SOURCE ==> #<Package "Sys.Net">
Further messages suppressed
Package #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::IL-UNWIND-PROTECT ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::OK-LABEL ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::CONSTANT-FOLD ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::TAGBODY-INFORMATION-GO-TAGS ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::USE-COUNT ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::REQUIRED-ARGS ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::LOCALP ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::CP-IF ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::STMT ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::LAMBDA-INFORMATION-ALLOW-OTHER-KEYS ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::TARGET-REG ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::EXPAND-INLINE-FUNCTION ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::ADDRESS ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::KT-RETURN-FROM ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::+TLS-OFFSET-SHIFT+ ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::PASS1-FUNCTION ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::LAMBDA-INFORMATION-LAMBDA-LIST ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::BRANCH-TO ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::LAMBDA-INFORMATION-KEY-ARGS ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::UNUSED-LABELS ==> #<Package "Sys.C">
Bad access type: SYSTEM.COMPILER::*PERFORM-TCE* ==> #<Package "Sys.C">
Further messages suppressed
Package #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::OPERAND-SIZE ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::REG-NUMBER ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::OPC-MINOR ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::DEFINE-SIMPLE-INSTRUCTION-WITH-OPERAND-SIZE ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::DISPLACEMENT ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::DEFINE-UNARY-INTEGER-INSTRUCTION ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::1-OPC ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::PORT ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::ARGS ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::S ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::PO ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::CONDITION-BITS ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::DEFINE-INTEGER-DEFINE-INSTRUCTION ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::REG-NR ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::INDEX-NR ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::BE ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::LONG-OPC ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::EMIT-IMM ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::EMIT-REX ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::HIGH ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86::UMIN ==> #<Package "Sys.Lap-X86">
Further messages suppressed
Package #<Package "Sys.Lap">
Bad access type: SYS.LAP::VAL ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::*BYTES-EMITTED* ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::CODE-LIST ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::*MACHINE-CODE* ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::EMIT-D64/LE ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::OLD-VAL ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::K ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::I ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::HANDLER ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::*FIXUPS* ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::A ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::ATTEMPT ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::INITIAL-SYMBOLS ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::VALUE ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::EMIT-D8 ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::INSTRUCTION-SET ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::EMIT-D16/LE ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::PREV-BYTES-EMITTED ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::*SYMBOL-TABLE* ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::NAME ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP::BYTES ==> #<Package "Sys.Lap">
Further messages suppressed
Package #<Package "Sys.Loop">
Bad access type: SYS.LOOP::LOOP-DO-INITIALLY ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::END-LOOP ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::FORMAT-ARGS ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::LOOP-DECLARE-VARIABLE ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::LOOP-LOOKUP-KEYWORD ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::STEP-FUNCTION ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::HASH-VALUE ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::LOOP-MAKE-ITERATION-VARIABLE ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::OTHER-ENDTEST ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::LOOP-COLLECTOR-DTYPE ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::*LOOP-FINAL-VALUE-CULPRIT* ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::INTO ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::MAKE-STANDARD-LOOP-UNIVERSE ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::LOOP-BODY ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::EXPR ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::*LOOP-REAL-DATA-TYPE* ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::NAMES ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::PRESENT-SYMBOL ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::USER-HEAD-VAR ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::PREP-PHRASES ==> #<Package "Sys.Loop">
Bad access type: SYS.LOOP::ANS ==> #<Package "Sys.Loop">
Further messages suppressed
Package #<Package "Sys.Gray">
Bad access type: SYS.GRAY::END ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY::COLUMN ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY::POSITION-SPEC ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY::START ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY::SEQ ==> #<Package "Sys.Gray">
Package #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::SITUATION ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::OBJECT ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::INTERPRETED-FUNCTION-LAMBDA ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::VAR ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::DEF ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::DEFINITION ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::DEC ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::FORM-SYM ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::LAMBDA-LIST ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::EVAL-PROGN-BODY ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::NEW-LAMBDA-LIST ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::ALLOW-OTHER-KEYS ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::PAIRS ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::KEY ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::EVAL-LAMBDA ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::FIND-FUNCTION ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::SPECIAL-DECLARES ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::READ-ONLY-P ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::ENV-BINDING ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::REQUIRED ==> #<Package "Sys.Eval">
Bad access type: SYSTEM.EVAL::DEFINITIONS ==> #<Package "Sys.Eval">
Further messages suppressed
Package #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::BEFORE ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::AUXS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::THE-SLOTS-OF-STANDARD-CLASS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::CANONICALIZE-DEFCLASS-OPTIONS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::X ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::M1 ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::ALLOCATION ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::CANONICALIZE-DIRECT-SUPERCLASS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::MAKE-INSTANCE-STANDARD-CLASS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::AROUND-FN ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::SLOT-CONTENTS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::STATE ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::QUALIFIERS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::FC-STD-ALLOCATE-INSTANCE ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::KEY-ARGS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::METHOD2 ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::METHOD1 ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::FN-SPEC ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::NEW-INSTANCE ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::TBA ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE::MAKE-EFFECTIVE-SLOT-DEFINITION ==> #<Package "Clos">
Further messages suppressed
Package #<Package "Cl-User">
Bad access type: S ==> #<Package "Cl-User">
Bad access type: POOP ==> #<Package "Cl-User">
Bad access type: PATHSPEC ==> #<Package "Cl-User">
Bad access type: STILL-BROKE ==> #<Package "Cl-User">
Bad access type: TARGET-WRITE-TIME ==> #<Package "Cl-User">
Bad access type: GC ==> #<Package "Cl-User">
Bad access type: *DUCK* ==> #<Package "Cl-User">
Bad access type: SHIT-IS-BROKE ==> #<Package "Cl-User">
Bad access type: COMPILE-AND-LOAD ==> #<Package "Cl-User">
Bad access type: COMPILE-FILE-TEST-FUN.3 ==> #<Package "Cl-User">
Bad access type: PKG ==> #<Package "Cl-User">
Bad access type: FILES ==> #<Package "Cl-User">
Bad access type: FN ==> #<Package "Cl-User">
Bad access type: XYZZY ==> #<Package "Cl-User">
Bad access type: NAME ==> #<Package "Cl-User">
Bad access type: *PRINT-SAFE* ==> #<Package "Cl-User">
Bad access type: FORMER-DATA ==> #<Package "Cl-User">
Bad access type: BARF ==> #<Package "Cl-User">
Bad access type: SOURCE-WRITE-TIME ==> #<Package "Cl-User">
Bad access type: FORCE ==> #<Package "Cl-User">
Bad access type: ASDF ==> #<Package "Cl-User">
Further messages suppressed
Package #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::*PS/2-KEYBOARD-METAED* ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::MORE-SEQUENCES ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::PCI-HDR-TYPE ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::CONTROL-STACK-SIZE ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::CONFIGURE-PIT ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::WRITE-CASE-ESCAPED-STRING ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::*INITIAL-OBARRAY* ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::MEMREF-UNSIGNED-BYTE-8 ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::%%E\x\c\e\p\t\i\o\n-27-\t\h\u\n\k ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::BLOCK-NAME ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::CANONICALIZE-MEMORY-MAP ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::%%IRQ12-\t\h\u\n\k ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::HANDLE-TOP-LEVEL-LMS-BODY ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::FORMAT-UUID ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::REINITIALIZE-LISP ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::PTE ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::*PS/2-KEYBOARD-SHIFTED* ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::PPRINT-POP-FN ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::+KBOOT-ITAG-MAPPING-LENGTH+ ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::CHECK-TYPE-ERROR ==> #<Package "Sys.Int">
Bad access type: SYSTEM.INTERNALS::PEEK-TYPE ==> #<Package "Sys.Int">
Further messages suppressed
Package #<Package "Sys">
Package #<Package "Cl">
Package #<Package "Keyword">
Test CL-TEST::WITH-PACKAGE-ITERATOR.12 failed
Form: (LOOP CL-TEST::FOR CL-TEST::P CL-TEST::IN (LIST-ALL-PACKAGES) COUNT (CL-TEST::HANDLER-CASE (PROGN (FORMAT T "Package ~S~%" CL-TEST::P) (NOT (CL-TEST::WITH-PACKAGE-ITERATOR-INTERNAL (LIST CL-TEST::P)))) (ERROR (CL-TEST::C) (FORMAT "Error ~S on package ~A~%" CL-TEST::C CL-TEST::P) T)))
Expected value:
          0
Actual value:
          NIL [Actual value: #<error during printing>

 NILPackage #<Package "X">
Package #<Package "Test-Dpe2">
Package #<Package "P3">
Package #<Package "P2">
Bad access type: P2:S2 ==> #<Package "P2">
Bad access type: P1:S1 ==> #<Package "P2">
Package #<Package "P1">
Bad access type: P1:S1 ==> #<Package "P1">
Package #<Package "Test1xx">
Package #<Package "Test3">
Package #<Package "Test2">
Bad access type: TEST2:X ==> #<Package "Test2">
Package #<Package "Load-Test-Package">
Package #<Package "Struct-Test-Package">
Package #<Package "Ds4">
Package #<Package "Ds3">
Bad access type: DS3:K ==> #<Package "Ds3">
Bad access type: DS3:J ==> #<Package "Ds3">
Bad access type: DS3:I ==> #<Package "Ds3">
Bad access type: DS2:G ==> #<Package "Ds3">
Bad access type: DS1:B ==> #<Package "Ds3">
Bad access type: DS1:A ==> #<Package "Ds3">
Not same symbol (2): DS2:A DS1:A
Package #<Package "Ds2">
Bad access type: DS2:H ==> #<Package "Ds2">
Bad access type: DS2:G ==> #<Package "Ds2">
Bad access type: DS2:A ==> #<Package "Ds2">
Package #<Package "Ds1">
Bad access type: DS1:B ==> #<Package "Ds1">
Bad access type: DS1:A ==> #<Package "Ds1">
Package #<Package "Fs-B">
Bad access type: FS-B:BAR ==> #<Package "Fs-B">
Package #<Package "Fs-A">
Bad access type: FS-A:FOO ==> #<Package "Fs-A">
Package #<Package "B">
Bad access type: B:BAR ==> #<Package "B">
Package #<Package "A">
Bad access type: A:FOO ==> #<Package "A">
Package #<Package "Cl-Test">
Bad access type: CL-TEST:*MINI-UNIVERSE* ==> #<Package "Cl-Test">
Bad access type: CL-TEST:*CL-SYMBOLS* ==> #<Package "Cl-Test">
Bad access type: CL-TEST:TYPEF ==> #<Package "Cl-Test">
Bad access type: CL-TEST:RANDOM-CASE ==> #<Package "Cl-Test">
Bad access type: CL-TEST:RANDOM-FROM-SEQ ==> #<Package "Cl-Test">
Bad access type: CL-TEST:COIN ==> #<Package "Cl-Test">
Bad access type: CL-TEST:SIGNALS-ERROR ==> #<Package "Cl-Test">
Bad access type: CL-TEST:*UNIVERSE* ==> #<Package "Cl-Test">
Bad access type: CL-TEST:RANDOM-PERMUTE ==> #<Package "Cl-Test">
Not same symbol (2): HANDLER-BIND CL-TEST::HANDLER-BIND
Package #<Package "Rt">
Bad access type: REGRESSION-TEST:DO-EXTENDED-TESTS ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:CONTINUE-TESTING ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:*TEST* ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:PENDING-TESTS ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:*CATCH-ERRORS* ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:*FAILED-TESTS* ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:*DO-TESTS-WHEN-DEFINED* ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:DEFNOTE ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:DEFTEST ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:REM-ALL-TESTS ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:REM-TEST ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:GET-TEST ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:*PASSED-TESTS* ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:MY-AREF ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:DISABLE-NOTE ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:DO-TEST ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:DO-TESTS ==> #<Package "Rt">
Bad access type: REGRESSION-TEST:*COMPILE-TESTS* ==> #<Package "Rt">
Package #<Package "Simple-File-Client">
Package #<Package "Peek">
Package #<Package "Telnet">
Package #<Package "Irc-Client">
Bad access type: IRC-CLIENT:LRSSL ==> #<Package "Irc-Client">
Package #<Package "Sys.Graphics">
Bad access type: SYS.GRAPHICS:REGISTER-SCREEN ==> #<Package "Sys.Graphics">
Package #<Package "System.Rtl8139">
Package #<Package "Virtio-Net">
Package #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING:RECEIVE-PACKET ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING:TRANSMIT-PACKET ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING:ARP-LOOKUP ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING:COPY-PACKET ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING:PACKET-LENGTH ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING:ETHERNET-MAC ==> #<Package "Sys.Net">
Bad access type: SYSTEM.NETWORKING:REGISTER-NIC ==> #<Package "Sys.Net">
Package #<Package "Sys.C">
Package #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:SUB16 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:MOVDR ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:OUT8 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:CMOV16NGE ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:JGE ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:CMP8 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:SHR64 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:SHRD32 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:LEA32 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:CMPS32 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:MOVCR ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:OUT16 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:ADC64 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:SAR16 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:PMULHW ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:WRMSR ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:CMOV64PO ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:CMOV64PE ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:MUL32 ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:CMOV16E ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP-X86:STOS8 ==> #<Package "Sys.Lap-X86">
Further messages suppressed
Package #<Package "Sys.Lap">
Bad access type: SYS.LAP:RESOLVE-IMMEDIATE ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP:EMIT ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP:NOTE-FIXUP ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP:PERFORM-ASSEMBLY ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP:*CURRENT-ADDRESS* ==> #<Package "Sys.Lap">
Bad access type: SYS.LAP:IMMEDIATEP ==> #<Package "Sys.Lap">
Package #<Package "Sys.Loop">
Package #<Package "Sys.Gray">
Bad access type: SYS.GRAY:FUNDAMENTAL-CHARACTER-INPUT-STREAM ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-READ-SEQUENCE ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-READ-BYTE ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-READ-CHAR ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-START-LINE-P ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-CLEAR-OUTPUT ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-FILE-POSITION ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-FORCE-OUTPUT ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-WRITE-SEQUENCE ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-WRITE-BYTE ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-ADVANCE-TO-COLUMN ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:FUNDAMENTAL-BINARY-INPUT-STREAM ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-TERPRI ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-READ-LINE ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:FUNDAMENTAL-CHARACTER-STREAM ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:FUNDAMENTAL-BINARY-STREAM ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:FUNDAMENTAL-STREAM ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-CLEAR-INPUT ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:STREAM-LINE-COLUMN ==> #<Package "Sys.Gray">
Bad access type: SYS.GRAY:FUNDAMENTAL-OUTPUT-STREAM ==> #<Package "Sys.Gray">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.Gray">
Further messages suppressed
Package #<Package "Sys.Eval">
Package #<Package "Clos">
Bad access type: FIND-CLASS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:CLASS-DIRECT-METHODS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:CLASS-DIRECT-SLOTS ==> #<Package "Clos">
Bad access type: COMPUTE-APPLICABLE-METHODS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:APPLY-METHOD ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:COMPUTE-EFFECTIVE-METHOD-FUNCTION ==> #<Package "Clos">
Bad access type: STANDARD-METHOD ==> #<Package "Clos">
Bad access type: NEXT-METHOD-P ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:GENERIC-FUNCTION-DISCRIMINATING-FUNCTION ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:SET-FUNCALLABLE-INSTANCE-FUNCTION ==> #<Package "Clos">
Bad access type: SLOT-EXISTS-P ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:SLOT-BOUNDP-USING-CLASS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:SLOT-DEFINITION-INITARGS ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:CLASS-DIRECT-SUPERCLASSES ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:GENERIC-FUNCTION-NAME ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:COMPUTE-DISCRIMINATING-FUNCTION ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:EQL-SPECIALIZER-OBJECT ==> #<Package "Clos">
Bad access type: SYSTEM.CLOSETTE:EQL-SPECIALIZER ==> #<Package "Clos">
Bad access type: CLASS-NAME ==> #<Package "Clos">
Bad access type: SHARED-INITIALIZE ==> #<Package "Clos">
Bad access type: SLOT-MAKUNBOUND ==> #<Package "Clos">
Further messages suppressed
Package #<Package "Cl-User">
Package #<Package "Sys.Int">
Package #<Package "Sys">
Bad access type: SYSTEM:PARSE-ORDINARY-LAMBDA-LIST ==> #<Package "Sys">
Bad access type: SYSTEM:SYMBOL-MACRO-FUNCTION ==> #<Package "Sys">
Bad access type: SYSTEM:CHAR-BITS ==> #<Package "Sys">
Bad access type: SYSTEM:VARIABLE-INFORMATION ==> #<Package "Sys">
Bad access type: SYSTEM:DOTTED-LIST-LENGTH ==> #<Package "Sys">
Bad access type: SYSTEM:IO-PORT/8 ==> #<Package "Sys">
Bad access type: SYSTEM:LAMBDA-NAME ==> #<Package "Sys">
Bad access type: SYSTEM:IO-PORT/16 ==> #<Package "Sys">
Bad access type: SYSTEM:SYMBOL-MODE ==> #<Package "Sys">
Bad access type: SYSTEM:PROCLAIMED-SPECIAL-P ==> #<Package "Sys">
Bad access type: SYSTEM:FIXNUMP ==> #<Package "Sys">
Bad access type: SYSTEM:IO-PORT/32 ==> #<Package "Sys">
Package #<Package "Cl">
Bad access type: READ ==> #<Package "Cl">
Bad access type: DEFTYPE ==> #<Package "Cl">
Bad access type: MAP ==> #<Package "Cl">
Bad access type: PAIRLIS ==> #<Package "Cl">
Bad access type: STANDARD-CHAR-P ==> #<Package "Cl">
Bad access type: REMOVE-METHOD ==> #<Package "Cl">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Cl">
Bad access type: NAMESTRING ==> #<Package "Cl">
Bad access type: MAKUNBOUND ==> #<Package "Cl">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Cl">
Bad access type: EXP ==> #<Package "Cl">
Bad access type: APPEND ==> #<Package "Cl">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Cl">
Bad access type: MACROLET ==> #<Package "Cl">
Bad access type: THE ==> #<Package "Cl">
Bad access type: CONDITION ==> #<Package "Cl">
Bad access type: ETYPECASE ==> #<Package "Cl">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Cl">
Bad access type: SUBLIS ==> #<Package "Cl">
Bad access type: PUSH ==> #<Package "Cl">
Bad access type: LOOP ==> #<Package "Cl">
Further messages suppressed
Package #<Package "Keyword">
Bad access type: :CLOSING ==> #<Package "Keyword">
Bad access type: :BOOLE-2 ==> #<Package "Keyword">
Bad access type: :BOOLE-1 ==> #<Package "Keyword">
Bad access type: :WRITE-STRING ==> #<Package "Keyword">
Bad access type: :B19 ==> #<Package "Keyword">
Bad access type: :CONTROL-STACK-SIZE ==> #<Package "Keyword">
Bad access type: :B16 ==> #<Package "Keyword">
Bad access type: :B15 ==> #<Package "Keyword">
Bad access type: :CLASS-OF ==> #<Package "Keyword">
Bad access type: :ATOM ==> #<Package "Keyword">
Bad access type: :COMPILATION-SPEED ==> #<Package "Keyword">
Bad access type: :SOFTWARE-VERSION ==> #<Package "Keyword">
Bad access type: :HASH-TABLE-SIZE ==> #<Package "Keyword">
Bad access type: :PROGRAM-ERROR ==> #<Package "Keyword">
Bad access type: :*PRINT-LENGTH* ==> #<Package "Keyword">
Bad access type: :REST-VAR ==> #<Package "Keyword">
Bad access type: :ERR-INVITE-ONLY-CHAN ==> #<Package "Keyword">
Bad access type: :TITLECASE ==> #<Package "Keyword">
Bad access type: :READ-PRESERVING-WHITESPACE ==> #<Package "Keyword">
Bad access type: :PRE ==> #<Package "Keyword">
Bad access type: :MULTIPLE-VALUE-CALL ==> #<Package "Keyword">
Further messages suppressed
Test CL-TEST::WITH-PACKAGE-ITERATOR.13 failed
Form: (LOOP CL-TEST::FOR CL-TEST::P CL-TEST::IN (LIST-ALL-PACKAGES) COUNT (CL-TEST::HANDLER-CASE (PROGN (FORMAT T "Package ~S~%" CL-TEST::P) (NOT (CL-TEST::WITH-PACKAGE-ITERATOR-EXTERNAL (LIST CL-TEST::P)))) (ERROR (CL-TEST::C) (FORMAT "Error ~S on package ~A~%" CL-TEST::C CL-TEST::P) T)))
Expected value:
          0
Actual value:
          NIL [Actual value: #<error during printing>

 NILPackage #<Package "X">
Package #<Package "Test-Dpe2">
Package #<Package "P3">
Bad access type: P2:S2 ==> #<Package "P3">
Bad access type: P1:S1 ==> #<Package "P3">
Package #<Package "P2">
Bad access type: P1:S1 ==> #<Package "P2">
Package #<Package "P1">
Package #<Package "Test1xx">
Package #<Package "Test3">
Bad access type: TEST2:X ==> #<Package "Test3">
Package #<Package "Test2">
Package #<Package "Load-Test-Package">
Bad access type: READ ==> #<Package "Load-Test-Package">
Bad access type: DEFTYPE ==> #<Package "Load-Test-Package">
Bad access type: MAP ==> #<Package "Load-Test-Package">
Bad access type: PAIRLIS ==> #<Package "Load-Test-Package">
Bad access type: STANDARD-CHAR-P ==> #<Package "Load-Test-Package">
Bad access type: REMOVE-METHOD ==> #<Package "Load-Test-Package">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Load-Test-Package">
Bad access type: NAMESTRING ==> #<Package "Load-Test-Package">
Bad access type: MAKUNBOUND ==> #<Package "Load-Test-Package">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Load-Test-Package">
Bad access type: EXP ==> #<Package "Load-Test-Package">
Bad access type: APPEND ==> #<Package "Load-Test-Package">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Load-Test-Package">
Bad access type: MACROLET ==> #<Package "Load-Test-Package">
Bad access type: THE ==> #<Package "Load-Test-Package">
Bad access type: CONDITION ==> #<Package "Load-Test-Package">
Bad access type: ETYPECASE ==> #<Package "Load-Test-Package">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Load-Test-Package">
Bad access type: SUBLIS ==> #<Package "Load-Test-Package">
Bad access type: PUSH ==> #<Package "Load-Test-Package">
Bad access type: LOOP ==> #<Package "Load-Test-Package">
Further messages suppressed
Package #<Package "Struct-Test-Package">
Package #<Package "Ds4">
Bad access type: DS3:K ==> #<Package "Ds4">
Bad access type: DS3:J ==> #<Package "Ds4">
Bad access type: DS3:I ==> #<Package "Ds4">
Bad access type: DS2:G ==> #<Package "Ds4">
Bad access type: DS1:B ==> #<Package "Ds4">
Bad access type: DS1:A ==> #<Package "Ds4">
Bad access type: DS1:B ==> #<Package "Ds4">
Bad access type: DS1:A ==> #<Package "Ds4">
Package #<Package "Ds3">
Bad access type: DS2:H ==> #<Package "Ds3">
Bad access type: DS2:G ==> #<Package "Ds3">
Bad access type: DS2:A ==> #<Package "Ds3">
Bad access type: DS1:B ==> #<Package "Ds3">
Bad access type: DS1:A ==> #<Package "Ds3">
Not same symbol (2): DS2:A DS1:A
Package #<Package "Ds2">
Package #<Package "Ds1">
Package #<Package "Fs-B">
Bad access type: FS-A:FOO ==> #<Package "Fs-B">
Package #<Package "Fs-A">
Package #<Package "B">
Bad access type: A:FOO ==> #<Package "B">
Package #<Package "A">
Package #<Package "Cl-Test">
Bad access type: READ ==> #<Package "Cl-Test">
Bad access type: DEFTYPE ==> #<Package "Cl-Test">
Bad access type: MAP ==> #<Package "Cl-Test">
Bad access type: PAIRLIS ==> #<Package "Cl-Test">
Bad access type: STANDARD-CHAR-P ==> #<Package "Cl-Test">
Bad access type: REMOVE-METHOD ==> #<Package "Cl-Test">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Cl-Test">
Bad access type: NAMESTRING ==> #<Package "Cl-Test">
Bad access type: MAKUNBOUND ==> #<Package "Cl-Test">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Cl-Test">
Bad access type: EXP ==> #<Package "Cl-Test">
Bad access type: APPEND ==> #<Package "Cl-Test">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Cl-Test">
Bad access type: MACROLET ==> #<Package "Cl-Test">
Bad access type: THE ==> #<Package "Cl-Test">
Bad access type: CONDITION ==> #<Package "Cl-Test">
Bad access type: ETYPECASE ==> #<Package "Cl-Test">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Cl-Test">
Bad access type: SUBLIS ==> #<Package "Cl-Test">
Bad access type: PUSH ==> #<Package "Cl-Test">
Bad access type: LOOP ==> #<Package "Cl-Test">
Further messages suppressed
Package #<Package "Rt">
Bad access type: READ ==> #<Package "Rt">
Bad access type: DEFTYPE ==> #<Package "Rt">
Bad access type: MAP ==> #<Package "Rt">
Bad access type: PAIRLIS ==> #<Package "Rt">
Bad access type: STANDARD-CHAR-P ==> #<Package "Rt">
Bad access type: REMOVE-METHOD ==> #<Package "Rt">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Rt">
Bad access type: NAMESTRING ==> #<Package "Rt">
Bad access type: MAKUNBOUND ==> #<Package "Rt">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Rt">
Bad access type: EXP ==> #<Package "Rt">
Bad access type: APPEND ==> #<Package "Rt">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Rt">
Bad access type: MACROLET ==> #<Package "Rt">
Bad access type: THE ==> #<Package "Rt">
Bad access type: CONDITION ==> #<Package "Rt">
Bad access type: ETYPECASE ==> #<Package "Rt">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Rt">
Bad access type: SUBLIS ==> #<Package "Rt">
Bad access type: PUSH ==> #<Package "Rt">
Bad access type: LOOP ==> #<Package "Rt">
Further messages suppressed
Package #<Package "Simple-File-Client">
Bad access type: READ ==> #<Package "Simple-File-Client">
Bad access type: DEFTYPE ==> #<Package "Simple-File-Client">
Bad access type: MAP ==> #<Package "Simple-File-Client">
Bad access type: PAIRLIS ==> #<Package "Simple-File-Client">
Bad access type: STANDARD-CHAR-P ==> #<Package "Simple-File-Client">
Bad access type: REMOVE-METHOD ==> #<Package "Simple-File-Client">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Simple-File-Client">
Bad access type: NAMESTRING ==> #<Package "Simple-File-Client">
Bad access type: MAKUNBOUND ==> #<Package "Simple-File-Client">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Simple-File-Client">
Bad access type: EXP ==> #<Package "Simple-File-Client">
Bad access type: APPEND ==> #<Package "Simple-File-Client">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Simple-File-Client">
Bad access type: MACROLET ==> #<Package "Simple-File-Client">
Bad access type: THE ==> #<Package "Simple-File-Client">
Bad access type: CONDITION ==> #<Package "Simple-File-Client">
Bad access type: ETYPECASE ==> #<Package "Simple-File-Client">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Simple-File-Client">
Bad access type: SUBLIS ==> #<Package "Simple-File-Client">
Bad access type: PUSH ==> #<Package "Simple-File-Client">
Bad access type: LOOP ==> #<Package "Simple-File-Client">
Further messages suppressed
Package #<Package "Peek">
Bad access type: READ ==> #<Package "Peek">
Bad access type: DEFTYPE ==> #<Package "Peek">
Bad access type: MAP ==> #<Package "Peek">
Bad access type: PAIRLIS ==> #<Package "Peek">
Bad access type: STANDARD-CHAR-P ==> #<Package "Peek">
Bad access type: REMOVE-METHOD ==> #<Package "Peek">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Peek">
Bad access type: NAMESTRING ==> #<Package "Peek">
Bad access type: MAKUNBOUND ==> #<Package "Peek">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Peek">
Bad access type: EXP ==> #<Package "Peek">
Bad access type: APPEND ==> #<Package "Peek">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Peek">
Bad access type: MACROLET ==> #<Package "Peek">
Bad access type: THE ==> #<Package "Peek">
Bad access type: CONDITION ==> #<Package "Peek">
Bad access type: ETYPECASE ==> #<Package "Peek">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Peek">
Bad access type: SUBLIS ==> #<Package "Peek">
Bad access type: PUSH ==> #<Package "Peek">
Bad access type: LOOP ==> #<Package "Peek">
Further messages suppressed
Package #<Package "Telnet">
Bad access type: READ ==> #<Package "Telnet">
Bad access type: DEFTYPE ==> #<Package "Telnet">
Bad access type: MAP ==> #<Package "Telnet">
Bad access type: PAIRLIS ==> #<Package "Telnet">
Bad access type: STANDARD-CHAR-P ==> #<Package "Telnet">
Bad access type: REMOVE-METHOD ==> #<Package "Telnet">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Telnet">
Bad access type: NAMESTRING ==> #<Package "Telnet">
Bad access type: MAKUNBOUND ==> #<Package "Telnet">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Telnet">
Bad access type: EXP ==> #<Package "Telnet">
Bad access type: APPEND ==> #<Package "Telnet">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Telnet">
Bad access type: MACROLET ==> #<Package "Telnet">
Bad access type: THE ==> #<Package "Telnet">
Bad access type: CONDITION ==> #<Package "Telnet">
Bad access type: ETYPECASE ==> #<Package "Telnet">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Telnet">
Bad access type: SUBLIS ==> #<Package "Telnet">
Bad access type: PUSH ==> #<Package "Telnet">
Bad access type: LOOP ==> #<Package "Telnet">
Further messages suppressed
Package #<Package "Irc-Client">
Bad access type: SYSTEM.NETWORKING:RECEIVE-PACKET ==> #<Package "Irc-Client">
Bad access type: SYSTEM.NETWORKING:TRANSMIT-PACKET ==> #<Package "Irc-Client">
Bad access type: SYSTEM.NETWORKING:ARP-LOOKUP ==> #<Package "Irc-Client">
Bad access type: SYSTEM.NETWORKING:COPY-PACKET ==> #<Package "Irc-Client">
Bad access type: SYSTEM.NETWORKING:PACKET-LENGTH ==> #<Package "Irc-Client">
Bad access type: SYSTEM.NETWORKING:ETHERNET-MAC ==> #<Package "Irc-Client">
Bad access type: SYSTEM.NETWORKING:REGISTER-NIC ==> #<Package "Irc-Client">
Bad access type: READ ==> #<Package "Irc-Client">
Bad access type: DEFTYPE ==> #<Package "Irc-Client">
Bad access type: MAP ==> #<Package "Irc-Client">
Bad access type: PAIRLIS ==> #<Package "Irc-Client">
Bad access type: STANDARD-CHAR-P ==> #<Package "Irc-Client">
Bad access type: REMOVE-METHOD ==> #<Package "Irc-Client">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Irc-Client">
Bad access type: NAMESTRING ==> #<Package "Irc-Client">
Bad access type: MAKUNBOUND ==> #<Package "Irc-Client">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Irc-Client">
Bad access type: EXP ==> #<Package "Irc-Client">
Bad access type: APPEND ==> #<Package "Irc-Client">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Irc-Client">
Bad access type: MACROLET ==> #<Package "Irc-Client">
Further messages suppressed
Package #<Package "Sys.Graphics">
Bad access type: READ ==> #<Package "Sys.Graphics">
Bad access type: DEFTYPE ==> #<Package "Sys.Graphics">
Bad access type: MAP ==> #<Package "Sys.Graphics">
Bad access type: PAIRLIS ==> #<Package "Sys.Graphics">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.Graphics">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.Graphics">
Bad access type: UPGRADED-COMPLEX-PART-TYPE ==> #<Package "Sys.Graphics">
Bad access type: NAMESTRING ==> #<Package "Sys.Graphics">
Bad access type: MAKUNBOUND ==> #<Package "Sys.Graphics">
Bad access type: LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT ==> #<Package "Sys.Graphics">
Bad access type: EXP ==> #<Package "Sys.Graphics">
Bad access type: APPEND ==> #<Package "Sys.Graphics">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.Graphics">
Bad access type: MACROLET ==> #<Package "Sys.Graphics">
Bad access type: THE ==> #<Package "Sys.Graphics">
Bad access type: CONDITION ==> #<Package "Sys.Graphics">
Bad access type: ETYPECASE ==> #<Package "Sys.Graphics">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.Graphics">
Bad access type: SUBLIS ==> #<Package "Sys.Graphics">
Bad access type: PUSHphics">
Bad access type: LOOP ==> #<Package "Sys.Graphics">
Further messages suppressed
Package #<Package "System.Rtl8139">
Bad access type: SYSTEM:PARSE-ORDINARY-LAMBDA-LIST ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:SYMBOL-MACRO-FUNCTION ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:CHAR-BITS ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:VARIABLE-INFORMATION ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:DOTTED-LIST-LENGTH ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:IO-PORT/8 ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:LAMBDA-NAME ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:IO-PORT/16 ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:SYMBOL-MODE ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:PROCLAIMED-SPECIAL-P ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:FIXNUMP ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM:IO-PORT/32 ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.NETWORKING:RECEIVE-PACKET ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.NETWORKING:TRANSMIT-PACKET ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.NETWORKING:ARP-LOOKUP ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.NETWORKING:COPY-PACKET ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.NETWORKING:PACKET-LENGTH ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.NETWORKING:ETHERNET-MAC ==> #<Package "System.Rtl8139">
Bad access type: SYSTEM.NETWORKING:REGISTER-NIC ==> #<Package "System.Rtl8139">
Bad access type: READ ==> #<Package "System.Rtl8139">
Bad access type: DEFTYPE ==> #<Package "System.Rtl8139">
Further messages suppressed
Package #<Package "Virtio-Net">
Bad access type: READ ==> #<Package "Virtio-Net">
Bad access type: DEFTYPE ==> #<Package "Virtio-Net">
Bad access type: MAP ==> #<Package "Virtio-Net">
Bad access type: PAIRLIS ==> #<Package "Virtio-Net">
Bad access type: COMPILE ==> #<Package "Virtio-Net">
Bad access type: REMOVE-METHOD ==> #<Package "Virtio-Net">
Bad access type: WRITE-STRING ==> #<Package "Virtio-Net">
Bad access type: NAMESTRING ==> #<Package "Virtio-Net">
Bad access type: MAKUNBOUND ==> #<Package "Virtio-Net">
Bad access type: EXTENDED-CHAR ==> #<Package "Virtio-Net">
Bad access type: EXP ==> #<Package "Virtio-Net">
Bad access type: MEMBER ==> #<Package "Virtio-Net">
Bad access type: STANDARD-CHAR-P ==> #<Package "Virtio-Net">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Virtio-Net">
Bad access type: MACROLET ==> #<Package "Virtio-Net">
Bad access type: METHOD-COMBINATION ==> #<Package "Virtio-Net">
Bad access type: CONDITION ==> #<Package "Virtio-Net">
Bad access type: ETYPECASE ==> #<Package "Virtio-Net">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Virtio-Net">
Bad access type: SUBLIS ==> #<Package "Virtio-Net">
Bad access type: PUSH ==> #<Package "Virtio-Net">
Further messages suppressed
Package #<Package "Sys.Net">
Bad access type: READ ==> #<Package "Sys.Net">
Bad access type: DEFTYPE ==> #<Package "Sys.Net">
Bad access type: MAP ==> #<Package "Sys.Net">
Bad access type: PAIRLIS ==> #<Package "Sys.Net">
Bad access type: COMPILE ==> #<Package "Sys.Net">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.Net">
Bad access type: WRITE-STRING ==> #<Package "Sys.Net">
Bad access type: NAMESTRING ==> #<Package "Sys.Net">
Bad access type: MAKUNBOUND ==> #<Package "Sys.Net">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys.Net">
Bad access type: EXP ==> #<Package "Sys.Net">
Bad access type: MEMBER ==> #<Package "Sys.Net">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.Net">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.Net">
Bad access type: MACROLET ==> #<Package "Sys.Net">
Bad access type: METHOD-COMBINATION ==> #<Package "Sys.Net">
Bad access type: CONDITION ==> #<Package "Sys.Net">
Bad access type: ETYPECASE ==> #<Package "Sys.Net">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.Net">
Bad access type: SUBLIS ==> #<Package "Sys.Net">
Bad access type: PUSH ==> #<Package "Sys.Net">
Further messages suppressed
Package #<Package "Sys.C">
Bad access type: READ ==> #<Package "Sys.C">
Bad access type: DEFTYPE ==> #<Package "Sys.C">
Bad access type: MAP ==> #<Package "Sys.C">
Bad access type: PAIRLIS ==> #<Package "Sys.C">
Bad access type: COMPILE ==> #<Package "Sys.C">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.C">
Bad access type: WRITE-STRING ==> #<Package "Sys.C">
Bad access type: NAMESTRING ==> #<Package "Sys.C">
Bad access type: MAKUNBOUND ==> #<Package "Sys.C">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys.C">
Bad access type: EXP ==> #<Package "Sys.C">
Bad access type: MEMBER ==> #<Package "Sys.C">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.C">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.C">
Bad access type: MACROLET ==> #<Package "Sys.C">
Bad access type: METHOD-COMBINATION ==> #<Package "Sys.C">
Bad access type: CONDITION ==> #<Package "Sys.C">
Bad access type: ETYPECASE ==> #<Package "Sys.C">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.C">
Bad access type: SUBLIS ==> #<Package "Sys.C">
Bad access type: PUSH ==> #<Package "Sys.C">
Further messages suppressed
Package #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP:RESOLVE-IMMEDIATE ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP:EMIT ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP:NOTE-FIXUP ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP:PERFORM-ASSEMBLY ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP:*CURRENT-ADDRESS* ==> #<Package "Sys.Lap-X86">
Bad access type: SYS.LAP:IMMEDIATEP ==> #<Package "Sys.Lap-X86">
Bad access type: READ ==> #<Package "Sys.Lap-X86">
Bad access type: DEFTYPE ==> #<Package "Sys.Lap-X86">
Bad access type: MAP ==> #<Package "Sys.Lap-X86">
Bad access type: PAIRLIS ==> #<Package "Sys.Lap-X86">
Bad access type: COMPILE ==> #<Package "Sys.Lap-X86">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.Lap-X86">
Bad access type: WRITE-STRING ==> #<Package "Sys.Lap-X86">
Bad access type: NAMESTRING ==> #<Package "Sys.Lap-X86">
Bad access type: MAKUNBOUND ==> #<Package "Sys.Lap-X86">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys.Lap-X86">
Bad access type: EXP ==> #<Package "Sys.Lap-X86">
Bad access type: MEMBER ==> #<Package "Sys.Lap-X86">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.Lap-X86">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.Lap-X86">
Bad access type: MACROLET ==> #<Package "Sys.Lap-X86">
Further messages suppressed
Package #<Package "Sys.Lap">
Bad access type: READ ==> #<Package "Sys.Lap">
Bad access type: DEFTYPE ==> #<Package "Sys.Lap">
Bad access type: MAP ==> #<Package "Sys.Lap">
Bad access type: PAIRLIS ==> #<Package "Sys.Lap">
Bad access type: COMPILE ==> #<Package "Sys.Lap">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.Lap">
Bad access type: WRITE-STRING ==> #<Package "Sys.Lap">
Bad access type: NAMESTRING ==> #<Package "Sys.Lap">
Bad access type: MAKUNBOUND ==> #<Package "Sys.Lap">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys.Lap">
Bad access type: EXP ==> #<Package "Sys.Lap">
Bad access type: MEMBER ==> #<Package "Sys.Lap">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.Lap">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.Lap">
Bad access type: MACROLET ==> #<Package "Sys.Lap">
Bad access type: METHOD-COMBINATION ==> #<Package "Sys.Lap">
Bad access type: CONDITION ==> #<Package "Sys.Lap">
Bad access type: ETYPECASE ==> #<Package "Sys.Lap">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.Lap">
Bad access type: SUBLIS ==> #<Package "Sys.Lap">
Bad access type: PUSH ==> #<Package "Sys.Lap">
Further messages suppressed
Package #<Package "Sys.Loop">
Bad access type: READ ==> #<Package "Sys.Loop">
Bad access type: DEFTYPE ==> #<Package "Sys.Loop">
Bad access type: MAP ==> #<Package "Sys.Loop">
Bad access type: PAIRLIS ==> #<Package "Sys.Loop">
Bad access type: COMPILE ==> #<Package "Sys.Loop">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.Loop">
Bad access type: WRITE-STRING ==> #<Package "Sys.Loop">
Bad access type: NAMESTRING ==> #<Package "Sys.Loop">
Bad access type: MAKUNBOUND ==> #<Package "Sys.Loop">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys.Loop">
Bad access type: EXP ==> #<Package "Sys.Loop">
Bad access type: MEMBER ==> #<Package "Sys.Loop">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.Loop">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.Loop">
Bad access type: MACROLET ==> #<Package "Sys.Loop">
Bad access type: METHOD-COMBINATION ==> #<Package "Sys.Loop">
Bad access type: CONDITION ==> #<Package "Sys.Loop">
Bad access type: ETYPECASE ==> #<Package "Sys.Loop">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.Loop">
Bad access type: SUBLIS ==> #<Package "Sys.Loop">
Bad access type: PUSH ==> #<Package "Sys.Loop">
Further messages suppressed
Package #<Package "Sys.Gray">
Bad access type: READ ==> #<Package "Sys.Gray">
Bad access type: DEFTYPE ==> #<Package "Sys.Gray">
Bad access type: MAP ==> #<Package "Sys.Gray">
Bad access type: PAIRLIS ==> #<Package "Sys.Gray">
Bad access type: COMPILE ==> #<Package "Sys.Gray">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.Gray">
Bad access type: WRITE-STRING ==> #<Package "Sys.Gray">
Bad access type: NAMESTRING ==> #<Package "Sys.Gray">
Bad access type: MAKUNBOUND ==> #<Package "Sys.Gray">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys.Gray">
Bad access type: EXP ==> #<Package "Sys.Gray">
Bad access type: MEMBER ==> #<Package "Sys.Gray">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.Gray">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.Gray">
Bad access type: MACROLET ==> #<Package "Sys.Gray">
Bad access type: METHOD-COMBINATION ==> #<Package "Sys.Gray">
Bad access type: CONDITION ==> #<Package "Sys.Gray">
Bad access type: ETYPECASE ==> #<Package "Sys.Gray">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.Gray">
Bad access type: SUBLIS ==> #<Package "Sys.Gray">
Bad access type: PUSH ==> #<Package "Sys.Gray">
Further messages suppressed
Package #<Package "Sys.Eval">
Bad access type: READ ==> #<Package "Sys.Eval">
Bad access type: DEFTYPE ==> #<Package "Sys.Eval">
Bad access type: MAP ==> #<Package "Sys.Eval">
Bad access type: PAIRLIS ==> #<Package "Sys.Eval">
Bad access type: COMPILE ==> #<Package "Sys.Eval">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.Eval">
Bad access type: WRITE-STRING ==> #<Package "Sys.Eval">
Bad access type: NAMESTRING ==> #<Package "Sys.Eval">
Bad access type: MAKUNBOUND ==> #<Package "Sys.Eval">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys.Eval">
Bad access type: EXP ==> #<Package "Sys.Eval">
Bad access type: MEMBER ==> #<Package "Sys.Eval">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.Eval">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.Eval">
Bad access type: MACROLET ==> #<Package "Sys.Eval">
Bad access type: METHOD-COMBINATION ==> #<Package "Sys.Eval">
Bad access type: CONDITION ==> #<Package "Sys.Eval">
Bad access type: ETYPECASE ==> #<Package "Sys.Eval">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.Eval">
Bad access type: SUBLIS ==> #<Package "Sys.Eval">
Bad access type: PUSH ==> #<Package "Sys.Eval">
Further messages suppressed
Package #<Package "Clos">
Bad access type: READ ==> #<Package "Clos">
Bad access type: DEFTYPE ==> #<Package "Clos">
Bad access type: MAP ==> #<Package "Clos">
Bad access type: PAIRLIS ==> #<Package "Clos">
Bad access type: COMPILE ==> #<Package "Clos">
Bad access type: REMOVE-METHOD ==> #<Package "Clos">
Bad access type: WRITE-STRING ==> #<Package "Clos">
Bad access type: NAMESTRING ==> #<Package "Clos">
Bad access type: MAKUNBOUND ==> #<Package "Clos">
Bad access type: EXTENDED-CHAR ==> #<Package "Clos">
Bad access type: EXP ==> #<Package "Clos">
Bad access type: MEMBER ==> #<Package "Clos">
Bad access type: STANDARD-CHAR-P ==> #<Package "Clos">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Clos">
Bad access type: MACROLET ==> #<Package "Clos">
Bad access type: METHOD-COMBINATION ==> #<Package "Clos">
Bad access type: CONDITION ==> #<Package "Clos">
Bad access type: ETYPECASE ==> #<Package "Clos">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Clos">
Bad access type: SUBLIS ==> #<Package "Clos">
Bad access type: PUSH ==> #<Package "Clos">
Further messages suppressed
Package #<Package "Cl-User">
Bad access type: READ ==> #<Package "Cl-User">
Bad access type: DEFTYPE ==> #<Package "Cl-User">
Bad access type: MAP ==> #<Package "Cl-User">
Bad access type: PAIRLIS ==> #<Package "Cl-User">
Bad access type: COMPILE ==> #<Package "Cl-User">
Bad access type: REMOVE-METHOD ==> #<Package "Cl-User">
Bad access type: WRITE-STRING ==> #<Package "Cl-User">
Bad access type: NAMESTRING ==> #<Package "Cl-User">
Bad access type: MAKUNBOUND ==> #<Package "Cl-User">
Bad access type: EXTENDED-CHAR ==> #<Package "Cl-User">
Bad access type: EXP ==> #<Package "Cl-User">
Bad access type: MEMBER ==> #<Package "Cl-User">
Bad access type: STANDARD-CHAR-P ==> #<Package "Cl-User">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Cl-User">
Bad access type: MACROLET ==> #<Package "Cl-User">
Bad access type: METHOD-COMBINATION ==> #<Package "Cl-User">
Bad access type: CONDITION ==> #<Package "Cl-User">
Bad access type: ETYPECASE ==> #<Package "Cl-User">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Cl-User">
Bad access type: SUBLIS ==> #<Package "Cl-User">
Bad access type: PUSH ==> #<Package "Cl-User">
Further messages suppressed
Package #<Package "Sys.Int">
Bad access type: READ ==> #<Package "Sys.Int">
Bad access type: DEFTYPE ==> #<Package "Sys.Int">
Bad access type: MAP ==> #<Package "Sys.Int">
Bad access type: PAIRLIS ==> #<Package "Sys.Int">
Bad access type: COMPILE ==> #<Package "Sys.Int">
Bad access type: REMOVE-METHOD ==> #<Package "Sys.Int">
Bad access type: WRITE-STRING ==> #<Package "Sys.Int">
Bad access type: NAMESTRING ==> #<Package "Sys.Int">
Bad access type: MAKUNBOUND ==> #<Package "Sys.Int">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys.Int">
Bad access type: EXP ==> #<Package "Sys.Int">
Bad access type: MEMBER ==> #<Package "Sys.Int">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys.Int">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys.Int">
Bad access type: MACROLET ==> #<Package "Sys.Int">
Bad access type: METHOD-COMBINATION ==> #<Package "Sys.Int">
Bad access type: CONDITION ==> #<Package "Sys.Int">
Bad access type: ETYPECASE ==> #<Package "Sys.Int">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys.Int">
Bad access type: SUBLIS ==> #<Package "Sys.Int">
Bad access type: PUSH ==> #<Package "Sys.Int">
Further messages suppressed
Package #<Package "Sys">
Bad access type: READ ==> #<Package "Sys">
Bad access type: DEFTYPE ==> #<Package "Sys">
Bad access type: MAP ==> #<Package "Sys">
Bad access type: PAIRLIS ==> #<Package "Sys">
Bad access type: COMPILE ==> #<Package "Sys">
Bad access type: REMOVE-METHOD ==> #<Package "Sys">
Bad access type: WRITE-STRING ==> #<Package "Sys">
Bad access type: NAMESTRING ==> #<Package "Sys">
Bad access type: MAKUNBOUND ==> #<Package "Sys">
Bad access type: EXTENDED-CHAR ==> #<Package "Sys">
Bad access type: EXP ==> #<Package "Sys">
Bad access type: MEMBER ==> #<Package "Sys">
Bad access type: STANDARD-CHAR-P ==> #<Package "Sys">
Bad access type: ARRAY-DIMENSION-LIMIT ==> #<Package "Sys">
Bad access type: MACROLET ==> #<Package "Sys">
Bad access type: METHOD-COMBINATION ==> #<Package "Sys">
Bad access type: CONDITION ==> #<Package "Sys">
Bad access type: ETYPECASE ==> #<Package "Sys">
Bad access type: STREAM-ELEMENT-TYPE ==> #<Package "Sys">
Bad access type: SUBLIS ==> #<Package "Sys">
Bad access type: PUSH ==> #<Package "Sys">
Further messages suppressed
Package #<Package "Cl">
Package #<Package "Keyword">
Test CL-TEST::WITH-PACKAGE-ITERATOR.14 failed
Form: (LOOP CL-TEST::FOR CL-TEST::P CL-TEST::IN (LIST-ALL-PACKAGES) COUNT (CL-TEST::HANDLER-CASE (PROGN (FORMAT T "Package ~S~%" CL-TEST::P) (NOT (CL-TEST::WITH-PACKAGE-ITERATOR-INHERITED (LIST CL-TEST::P)))) (ERROR (CL-TEST::C) (FORMAT T "Error ~S on package ~S~%" CL-TEST::C CL-TEST::P) T)))
Expected value:
          0
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::WITH-PACKAGE-ITERATOR.ERROR.1
 CL-TEST::WITH-PACKAGE-ITERATOR.15
 CL-TEST::WITH-PACKAGE-ITERATOR.16
 CL-TEST::WITH-PACKAGE-ITERATOR.17
 CL-TEST::WITH-PACKAGE-ITERATOR.18
 CL-TEST::WITH-PACKAGE-ITERATOR.19
 CL-TEST::WITH-PACKAGE-ITERATOR.20
 CL-TEST::WITH-PACKAGE-ITERATOR.21
 CL-TEST::WITH-PACKAGE-ITERATOR.22
Test CL-TEST::UNEXPORT.1 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "X") (LET* ((CL-TEST::P (MAKE-PACKAGE "X" :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P)) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::SYM1) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) CL-TEST::P)) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::R T) (EQL CL-TEST::I 2) (EQL CL-TEST::X 1) (EQL CL-TEST::Y 2) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.2 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "X") (LET* ((CL-TEST::P (MAKE-PACKAGE "X" :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) "X") (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TES:R T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.3 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "X") (LET* ((CL-TEST::P (MAKE-PACKAGE "X" :USE NIL)) (CL-TEST::R1 (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P)) (CL-TEST::R2 (EXPORT (INTERN "Y" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1A CL-TEST::ACCESS1A) (FIND-SYMBOL "Y" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1 CL-TEST::SYM1A) (QUOTE #:X)) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2A CL-TEST::ACCESS2A) (FIND-SYMBOL "Y" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::SYM1A CL-TEST::SYM2A) (CL-TEST::EQT CL-TEST::R1 T) (CL-TEST::EQT CL-TEST::R2 T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (CL-TEST::EQT CL-TEST::ACCESS1A :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2A :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") (EQUAL (SYMBOL-NAME CL-TEST::SYM1A) "Y") T)))))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.4 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "X") (LET* ((CL-TEST::P (MAKE-PACKAGE "X" :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) #\X) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.5 failed
Form: (CL-TEST:SIGNALS-ERROR (PROGN (WHEN (FIND-PACKAGE "X") (DELETE-PACKAGE "X")) (UNEXPORT (QUOTE CL-TEST::A) (MAKE-PACKAGE "X" :USE NIL)) NIL) PACKAGE-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.6 failed
Form: (PROGN (WHEN (FIND-PACKAGE "X") (DELETE-PACKAGE "X")) (LET ((CL-TEST::P (MAKE-PACKAGE "X" :USE NIL))) (LET* ((CL-TEST::SYM (INTERN "FOO" CL-TEST::P)) (CL-TEST::R (UNEXPORT CL-TEST::SYM CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (CL-TEST::EQT CL-TEST::SYM CL-TEST::SYM2) (EQUAL (SYMBOL-NAME CL-TEST::SYM) "FOO") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.7 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (LET* ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) CL-TEST::NAME) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.8 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (LET* ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) CL-TEST::NAME) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.9 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (LET* ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) CL-TEST::NAME) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.10 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (LET* ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) CL-TEST::NAME) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.11 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (LET* ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) CL-TEST::NAME) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.12 failed
Form: (LET ((CL-TEST::NAME (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (LET* ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) CL-TEST::NAME) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCESS1 :EXTERNAL) (CL-TEST::EQT CL-TEST::ACCESS2 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.13 failed
Form: (LET ((CL-TEST::NAME (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (LET* ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL)) (CL-TEST::R (EXPORT (INTERN "X" CL-TEST::P) CL-TEST::P))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "X" CL-TEST::P) (UNEXPORT (LIST CL-TEST::SYM1) CL-TEST::NAME) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "X" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::R T) (CL-TEST::EQT CL-TEST::ACCEE CL-TEST::SYM1) "X") T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (UNEXPORT) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNEXPORT.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (UNEXPORT (QUOTE CL-TEST::XYZ) "CL-TEST" NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function UNEXPORT> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.1 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE "H" :USE NIL)) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::SYM) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) CL-TEST::P)) (EQL CL-TEST::I 2) (EQL CL-TEST::X 1) (EQL CL-TEST::Y 2) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE "H")))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.2 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((*PACKAGE* (MAKE-PACKAGE "H" :USE NIL))) (INTERN "FOO") (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO") (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO"))))) (CL-TEST::SAFELY-DELETE-PACKAGE "H")))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.3 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE "H" :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM "H") (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE "H")))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.4 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE "H" :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM (QUOTE #:H)) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE "H")))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.5 failed
Form: (CL-TEST::HANDLER-CASE (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE "H" :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM #\H) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE "H"))) (ERROR (CL-TEST::C) CL-TEST::C))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::UNINTERN.6
Test CL-TEST::UNINTERN.7 failed
Form: (BLOCK CL-TEST::FAILED (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (LIST CL-TEST::PG)))) (CL-TEST::HANDLER-CASE (SHADOW "FOO" CL-TEST::PH) (ERROR (CL-TEST::C) (RETURN-FROM CL-TEST::FAILED (LIST :SHADOW-ERROR CL-TEST::C)))) (EXPORT (INTERN "FOO" CL-TEST::PG) CL-TEST::PG) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND CL-TEST::SYM1 (CL-TEST::EQT (SYMBOL-PACKAGE CL-TEST::SYM1) CL-TEST::PH) (CL-TEST::EQT CL-TEST::ACCESS1 :INTERNAL) (EQUAL (LIST CL-TEST::SYM1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::PH)) (UNINTERN CL-TEST::SYM1 CL-TEST::PH) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND (NOT (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2)) (CL-TEST::EQT CL-TEST::ACCESS2 :INHERITED) (NULL (SYMBOL-PACKAGE CL-TEST::SYM1)) (CL-TEST::EQT (SYMBOL-PACKAGE CL-TEST::SYM2) CL-TEST::PG)))))))
Expected value:
          T
Actual value:
          #<Simple-Error Newly exported symbol G::FOO conflicts with symbol H::FOO in package #<Package "H">.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.8 failed
Form: (BLOCK CL-TEST::FAILED (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G1") (CL-TEST::SAFELY-DELETE-PACKAGE "G2") (LET* ((CL-TEST::PG1 (MAKE-PACKAGE "G1" :USE NIL)) (CL-TEST::PG2 (MAKE-PACKAGE "G2" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (LIST CL-TEST::PG1 CL-TEST::PG2)))) (CL-TEST::HANDLER-CASE (SHADOW "FOO" CL-TEST::PH) (ERROR (CL-TEST::C) (RETURN-FROM CL-TEST::FAILED (LIST :SHADOW-ERROR CL-TEST::C)))) (LET ((CL-TEST::GSYM1 (INTERN "FOO" CL-TEST::PG1)) (CL-TEST::GSYM2 (INTERN "FOO" CL-TEST::PG2))) (EXPORT CL-TEST::GSYM1 CL-TEST::PG1) (EXPORT CL-TEST::GSYM2 CL-TEST::PG2) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM1 CL-TEST::ACCESS1) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND (EQUAL (LIST CL-TEST::SYM1) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::PH)) (NOT (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::GSYM1)) (NOT (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::GSYM2)) (CL-TEST::EQT (SYMBOL-PACKAGE CL-TEST::SYM1) CL-TEST::PH) (CL-TEST::EQT CL-TEST::ACCESS1 :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM1) "FOO") (CL-TEST::HANDLER-CASE (PROGN (UNINTERN CL-TEST::SYM1 CL-TEST::PH) NIL) (ERROR (CL-TEST::C) (FORMAT T "Properly threw an error: ~S~%" CL-TEST::C) T)))))))
Expected value:
          T
Actual value:
          #<Simple-Error Newly exported symbol G1::FOO conflicts with symbol H::FOO in package #<Package "H">.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.9 failed
Form: (BLOCK CL-TEST::FAILED (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G1") (CL-TEST::SAFELY-DELETE-PACKAGE "G2") (CL-TEST::SAFELY-DELETE-PACKAGE "G3") (LET* ((CL-TEST::PG3 (MAKE-PACKAGE "G3" :USE NIL)) (CL-TEST::PG1 (MAKE-PACKAGE "G1" :USE (LIST CL-TEST::PG3))) (CL-TEST::PG2 (MAKE-PACKAGE "G2" :USE (LIST CL-TEST::PG3))) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (LIST CL-TEST::PG1 CL-TEST::PG2)))) (CL-TEST::HANDLER-CASE (SHADOW "FOO" CL-TEST::PH) (ERROR (CL-TEST::C) (RETURN-FROM CL-TEST::FAILED (LIST :SHADOW-ERROR CL-TEST::C)))) (LET ((CL-TEST::GSYM (INTERN "FOO" CL-TEST::PG3))) (EXPORT CL-TEST::GSYM CL-TEST::PG3) (EXPORT CL-TEST::GSYM CL-TEST::PG1) (EXPORT CL-TEST::GSYM CL-TEST::PG2) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND (EQUAL (LIST CL-TEST::SYM) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::PH)) (NOT (CL-TEST::EQT CL-TEST::SYM CL-TEST::GSYM)) (EQUAL (SYMBOL-NAME CL-TEST::SYM) "FOO") (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::PH) (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (CL-TEST::HANDLER-CASE (AND (UNINTERN CL-TEST::SYM CL-TEST::PH) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM2 CL-TEST::ACCESS2) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND (CL-TEST::EQT CL-TEST::GSYM CL-TEST::SYM2) (CL-TEST::EQT CL-TEST::ACCESS2 :INHERITED)))) (ERROR (CL-TEST::C) CL-TEST::C)))))))
Expected value:
          T
Actual value:
          #<Simple-Error Newly exported symbol G3:FOO conflicts with symbol H::FOO in package #<Package "H">.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.10 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM CL-TEST::NAME) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.11 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM CL-TEST::NAME) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.12 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM CL-TEST::NAME) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.13 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM CL-TEST::NAME) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.14 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM CL-TEST::NAME) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.15 failed
Form: (LET ((CL-TEST::NAME (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM CL-TEST::NAME) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNINTERN.16 failed
Form: (LET ((CL-TEST::NAME (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME) (PROG1 (LET ((CL-TEST::P (MAKE-PACKAGE CL-TEST::NAME :USE NIL))) (INTERN "FOO" CL-TEST::P) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (UNINTERN CL-TEST::SYM CL-TEST::NAME) (NULL (SYMBOL-PACKAGE CL-TEST::SYM)) (NOT (FIND-SYMBOL "FOO" CL-TEST::P))))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::NAME)))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::UNINTERN.ERROR.1
 CL-TEST::UNINTERN.ERROR.2
 CL-TEST::IN-PACKAGE.1
 CL-TEST::IN-PACKAGE.2
 CL-TEST::IN-PACKAGE.3
 CL-TEST::IN-PACKAGE.4
Test CL-TEST::IN-PACKAGE.5 failed
Form: (LET ((*PACKAGE* *PACKAGE*)) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::HANDLER-CASE (EVAL (QUOTE (IN-PACKAGE "H"))) (PACKAGE-ERROR NIL (QUOTE PACKAGE-ERROR)) (ERROR (CL-TEST::C) CL-TEST::C)))
Expected value:
          PACKAGE-ERROR
Actual value:
          #<Simple-Error No package named "H".> [Actual value: #<error during printing>

 NIL
 CL-TEST::IN-PACKAGE.ERROR.1
 CL-TEST::IN-PACKAGE.7
 CL-TEST::IN-PACKAGE.8
 CL-TEST::IN-PACKAGE.9
 CL-TEST::IN-PACKAGE.10
 CL-TEST::IN-PACKAGE.11
 CL-TEST::IN-PACKAGE.12
 CL-TEST::IN-PACKAGE.13
Test CL-TEST::UNUSE-PACKAGE.1 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (QUOTE ("G")))) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (UNUSE-PACKAGE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::PG) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) CL-TEST::PH)) (EQL CL-TEST::I 2) (EQL CL-TEST::X 1) (EQL CL-TEST::Y 2) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG))) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.2 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (UNUSE-PACKAGE "G" CL-TEST::PH) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG))) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.3 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (UNUSE-PACKAGE :G CL-TEST::PH) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG))) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.4 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (IGNORE-ERRORS (UNUSE-PACKAGE #\G CL-TEST::PH)) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG))) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G"))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.5 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (UNUSE-PACKAGE (LIST CL-TEST::PG) CL-TEST::PH) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG))) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.6 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (UNUSE-PACKAGE (LIST "G") CL-TEST::PH) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG))) (CL-TEAGE "G"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.7 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (UNUSE-PACKAGE (LIST :G) CL-TEST::PH) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG))) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.8 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE (QUOTE ("G"))))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (IGNORE-ERRORS (UNUSE-PACKAGE (LIST #\G) CL-TEST::PH)) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG))) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G"))))
Expected value:
          T
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.9 failed
Form: (PROGN (DOLIST (CL-TEST::P (QUOTE ("H1" "H2" "G1" "G2" "G3"))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P)) (LET* ((CL-TEST::PG1 (MAKE-PACKAGE "G1" :USE NIL)) (CL-TEST::PG2 (MAKE-PACKAGE "G2" :USE NIL)) (CL-TEST::PG3 (MAKE-PACKAGE "G3" :USE NIL)) (CL-TEST::PH1 (MAKE-PACKAGE "H1" :USE (LIST CL-TEST::PG1 CL-TEST::PG2 CL-TEST::PG3))) (CL-TEST::PH2 (MAKE-PACKAGE "H2" :USE (LIST CL-TEST::PG1 CL-TEST::PG2 CL-TEST::PG3)))) (LET ((CL-TEST::PUBG1 (CL-TEST::SORT-PACKAGE-LIST (PACKAGE-USED-BY-LIST CL-TEST::PG1))) (CL-TEST::PUBG2 (CL-TEST::SORT-PACKAGE-LIST (PACKAGE-USED-BY-LIST CL-TEST::PG2))) (CL-TEST::PUBG3 (CL-TEST::SORT-PACKAGE-LIST (PACKAGE-USED-BY-LIST CL-TEST::PG3))) (CL-TEST::PUH1 (CL-TEST::SORT-PACKAGE-LIST (PACKAGE-USE-LIST CL-TEST::PH1))) (CL-TEST::PUH2 (CL-TEST::SORT-PACKAGE-LIST (PACKAGE-USE-LIST CL-TEST::PH2)))) (PROG1 (AND (= (LENGTH (REMOVE-DUPLICATES (LIST CL-TEST::PG1 CL-TEST::PG2 CL-TEST::PG3 CL-TEST::PH1 CL-TEST::PH2))) 5) (EQUAL (LIST CL-TEST::PH1 CL-TEST::PH2) CL-TEST::PUBG1) (EQUAL (LIST CL-TEST::PH1 CL-TEST::PH2) CL-TEST::PUBG2) (EQUAL (LIST CL-TEST::PH1 CL-TEST::PH2) CL-TEST::PUBG3) (EQUAL (LIST CL-TEST::PG1 CL-TEST::PG2 CL-TEST::PG3) CL-TEST::PUH1) (EQUAL (LIST CL-TEST::PG1 CL-TEST::PG2 CL-TEST::PG3) CL-TEST::PUH2) (UNUSE-PACKAGE (LIST CL-TEST::PG1 CL-TEST::PG3) CL-TEST::PH1) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH1) (LIST CL-TEST::PG2)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG1) (LIST CL-TEST::PH2)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG3) (LIST CL-TEST::PH2)) (EQUAL (CL-TEST::SORT-PACKAGE-LIST (PACKAGE-USE-LIST CL-TEST::PH2)) (LIST CL-TEST::PG1 CL-TEST::PG2 CL-TEST::PG3)) (EQUAL (CL-TEST::SORT-PACKAGE-LIST (PACKAGE-USED-BY-LIST CL-TEST::PG2)) (LIST CL-TEST::PH1 CL-TEST::PH2)) T) (DOLIST (CL-TEST::P (QUOTE ("H1" "H2" "G1" "G2" "G3"))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P))))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.10 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.11 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.12 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.13 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
      -Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.14 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.15 failed
Form: (LET ((CL-TEST::USER-NAME (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.16 failed
Form: (LET ((CL-TEST::USER-NAME (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual vaUndefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.17 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.18 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.19 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.20 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.21 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.22 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.23 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE (LIST CL-TEST::USED-NAME)))) (PROG1 (AND (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (UNUSE-PACKAGE (LIST CL-TEST::USED-NAME) CL-TEST::USER-NAME) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) NIL) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (UNUSE-PACKAGE) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::UNUSE-PACKAGE.ERROR.2 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "UPE2A") (CL-TEST::SAFELY-DELETE-PACKAGE "UPE2") (MAKE-PACKAGE "UPE2" :USE NIL) (MAKE-PACKAGE "UPE2A" :USE (QUOTE ("UPE2"))) (CL-TEST:SIGNALS-ERROR (UNUSE-PACKAGE "UPE2" "UPE2A" NIL) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.1 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PG)) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PG) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PH)) (NULL (PACKAGE-USE-LIST CL-TEST::PG)) (NULL (PACKAGE-USE-LIST CL-TEST::PH)) (CL-TEST::EQT (USE-PACKAGE (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::PG) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) CL-TEST::PH)) T) (EQL CL-TEST::I 2) (EQL CL-TEST::X 1) (EQL CL-TEST::Y 2) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (NULL (PACKAGE-USE-LIST CL-TEST::PG)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PH)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PG CL-TEST::PH) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PH)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.2 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PG))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PG) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PH)) (NULL (PACKAGE-USE-LIST CL-TEST::PG)) (NULL (PACKAGE-USE-LIST CL-TEST::PH)) (CL-TEST::EQT (USE-PACKAGE "G" "H") T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (NULL (PACKAGE-USE-LIST CL-TEST::PG)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PH)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PG CL-TEST::PH) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PH)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.3 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PG))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PG) T) (NULL (PACKAE-USED-BY-LIST CL-TEST::PG)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PH)) (NULL (PACKAGE-USE-LIST CL-TEST::PG)) (NULL (PACKAGE-USE-LIST CL-TEST::PH)) (CL-TEST::EQT (USE-PACKAGE (QUOTE #:G) (QUOTE #:H)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (NULL (PACKAGE-USE-LIST CL-TEST::PG)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PH)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PG CL-TEST::PH) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PH)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.4 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET* ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL)) (CL-TEST::PH (MAKE-PACKAGE "H" :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PG))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PG) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PG)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PH)) (NULL (PACKAGE-USE-LIST CL-TEST::PG)) (NULL (PACKAGE-USE-LIST CL-TEST::PH)) (CL-TEST::EQT (IGNORE-ERRORS (USE-PACKAGE #\G #\H)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PH) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PH) (LIST CL-TEST::PG)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG) (LIST CL-TEST::PH)) (NULL (PACKAGE-USE-LIST CL-TEST::PG)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PH)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PG CL-TEST::PH) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PH)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.5 failed
Form: (LET ((CL-TEST::PKGS (QUOTE ("H" "G1" "G2" "G3"))) (CL-TEST::VARS (QUOTE ("FOO1" "FOO2" "FOO3")))) (DOLIST (CL-TEST::P CL-TEST::PKGS) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::P) (MAKE-PACKAGE CL-TEST::P :USE NIL)) (AND (EVERY (COMPLEMENT (FUNCTION PACKAGE-USE-LIST)) CL-TEST::PKGS) (EVERY (COMPLEMENT (FUNCTION PACKAGE-USED-BY-LIST)) CL-TEST::PKGS) (EVERY (FUNCTION (LAMBDA (CL-TEST::V CL-TEST::P) (EXPORT (INTERN CL-TEST::V CL-TEST::P) CL-TEST::P))) CL-TEST::VARS (CDR CL-TEST::PKGS)) (PROGN (DOLIST (CL-TEST::P (CDR CL-TEST::PKGS)) (INTERN "MINE" CL-TEST::P)) (CL-TEST::EQT (USE-PACKAGE (CDR CL-TEST::PKGS) (CAR CL-TEST::PKGS)) T)) (EVERY (FUNCTION (LAMBDA (CL-TEST::V CL-TEST::P) (CL-TEST::EQT (FIND-SYMBOL CL-TEST::V CL-TEST::P) (FIND-SYMBOL CL-TEST::V (CAR CL-TEST::PKGS))))) CL-TEST::VARS (CDR CL-TEST::PKGS)) (NULL (FIND-SYMBOL "MINE" (CAR CL-TEST::PKGS))) (EVERY (FUNCTION (LAMBDA (CL-TEST::P) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) (LIST (FIND-PACKAGE (CAR CL-TEST::PKGS)))))) (CDR CL-TEST::PKGS)) (EQUAL (CL-TEST::SORT-PACKAGE-LIST (PACKAGE-USE-LIST (CAR CL-TEST::PKGS))) (MAPCAR (FUNCTION FIND-PACKAGE) (CDR CL-TEST::PKGS))) (EVERY (COMPLEMENT (FUNCTION PACKAGE-USE-LIST)) (CDR CL-TEST::PKGS)) (NULL (PACKAGE-USED-BY-LIST (CAR CL-TEST::PKGS)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.6 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET ((CL-TEST::PG (MAKE-PACKAGE "G")) (CL-TEST::PH (MAKE-PACKAGE "H")) CL-TEST::SYM1 CL-TEST::SYM2 CL-TEST::SYM3 CL-TEST::SYM4 CL-TEST::A1 CL-TEST::A2 CL-TEST::A3 CL-TEST::A4) (PROG1 (AND (EXPORT (INTERN "X" CL-TEST::PG) CL-TEST::PG) (EXPORT (INTERN "Y" CL-TEST::PH) CL-TEST::PH) (USE-PACKAGE CL-TEST::PG CL-TEST::PH) (USE-PACKAGE CL-TEST::PH CL-TEST::PG) (PROGN (MULTIPLE-VALUE-SETQ (CL-TEST::SYM1 CL-TEST::A1) (FIND-SYMBOL "X" CL-TEST::PG)) (MULTIPLE-VALUE-SETQ (CL-TEST::SYM2 CL-TEST::A2) (FIND-SYMBOL "Y" CL-TEST::PH)) (MULTIPLE-VALUE-SETQ (CL-TEST::SYM3 CL-TEST::A3) (FIND-SYMBOL "Y" CL-TEST::PG)) (MULTIPLE-VALUE-SETQ (CL-TEST::SYM4 CL-TEST::A4) (FIND-SYMBOL "X" CL-TEST::PH)) (AND (CL-TEST::EQT CL-TEST::A1 :EXTERNAL) (CL-TEST::EQT CL-TEST::A2 :EXTERNAL) (CL-TEST::EQT CL-TEST::A3 :INHERITED) (CL-TEST::EQT CL-TEST::A4 :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM4) (CL-TEST::EQT CL-TEST::SYM2 CL-TEST::SYM3) (CL-TEST::EQT (SYMBOL-PACKAGE CL-TEST::SYM1) CL-TEST::PG) (CL-TEST::EQT (SYMBOL-PACKAGE CL-TEST::SYM2) CL-TEST::PH) (UNUSE-PACKAGE CL-TEST::PG CL-TEST::PH) (UNUSE-PACKAGE CL-TEST::PH CL-TEST::PG)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::PG) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::PH))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.7 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.10 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.11 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.12 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.13 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.14 failed
Form: (LET ((CL-TEST::USER-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQD-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.15 failed
Form: (LET ((CL-TEST::USER-NAME (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.16 failed
Form: (LET ((CL-TEST::USER-NAME (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5))) (CL-TEST::USED-NAME "G")) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.17 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.18 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.19 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 10 :INITIAL-CONTENTS "TEST1ABCDE" :FILL-POINTER 5 :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.20 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.21 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (MAKE-ARRAY 5 :INITIAL-CONTENTS "TEST1" :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.22 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::USE-PACKAGE.23 failed
Form: (LET ((CL-TEST::USER-NAME "H") (CL-TEST::USED-NAME (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME0 (MAKE-ARRAY 10 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "xxxxxTEST1"))) (MAKE-ARRAY 5 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 5)))) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USER-NAME) (CL-TEST::SAFELY-DELETE-PACKAGE CL-TEST::USED-NAME) (LET* ((CL-TEST::PUSED (MAKE-PACKAGE CL-TEST::USED-NAME :USE NIL)) (CL-TEST::PUSER (MAKE-PACKAGE CL-TEST::USER-NAME :USE NIL)) (CL-TEST::SYM1 (INTERN "FOO" CL-TEST::PUSED))) (AND (CL-TEST::EQT (EXPORT CL-TEST::SYM1 CL-TEST::PUSED) T) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSER)) (CL-TEST::EQT (LET ((*PACKAGE* CL-TEST::PUSER)) (USE-PACKAGE CL-TEST::PUSED)) T) (MULTIPLE-VALUE-BIND (CL-TEST::SYM2 CL-TEST::ACCESS) (FIND-SYMBOL "FOO" CL-TEST::PUSER) (AND (CL-TEST::EQT CL-TEST::ACCESS :INHERITED) (CL-TEST::EQT CL-TEST::SYM1 CL-TEST::SYM2))) (EQUAL (PACKAGE-USE-LIST CL-TEST::PUSER) (LIST CL-TEST::PUSED)) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PUSED) (LIST CL-TEST::PUSER)) (NULL (PACKAGE-USE-LIST CL-TEST::PUSED)) (NULL (PACKAGE-USED-BY-LIST CL-TEST::PUSER)) (CL-TEST::EQT (UNUSE-PACKAGE CL-TEST::PUSED CL-TEST::PUSER) T) (NULL (FIND-SYMBOL "FOO" CL-TEST::PUSER)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::USE-PACKAGE.ERROR.1
 CL-TEST::USE-PACKAGE.ERROR.2
Test CL-TEST::DEFPACKAGE.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN (QUOTE ("H" #:H #\H)) COUNT (NOT (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N))))))) (AND (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (NULL (DOCUMENTATION CL-TEST::P T)))))))
Expected value:
          0
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN (QUOTE ("I" #:I #\I)) COUNT (NOT (IGNORE-ERRORS (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:NICKNAMES (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) "J"))))))) (AND (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES CL-TEST::P)) (FUNCTION STRING<)) (QUOTE ("I" "J"))) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (NULL (DOCUMENTATION CL-TEST::P T))))))))
Expected value:
          0
Actual value:
          #<Simple-Type-Error The value of SYSTEM.INTERNALS::X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.3 failed
Form: (LET NIL (CL-TEST::SAFELY-DELETE-PACKAGE "H") (IGNORE-ERRORS (LET ((CL-TEST::P (EVAL (QUOTE (DEFPACKAGE "H" (:DOCUMENTATION "This is a doc string")))))) (AND (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (PROGN (DOCUMENTATION CL-TEST::P T) T)))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.4 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN (QUOTE ("A" :A #\A)) COUNT (NOT (IGNORE-ERRORS (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N)))))))) (AND (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) (LIST (FIND-PACKAGE "A"))) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (EQL (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P) (CL-TEST::NUM-EXTERNAL-SYMBOLS-IN-PACKAGE "A")) (EQUAL (DOCUMENTATION CL-TEST::P T) NIL))))))))
Expected value:
          0
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.5 failed
Form: (LET NIL (CL-TEST::SAFELY-DELETE-PACKAGE "H") (IGNORE-ERRORS (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE) (:SHADOW "foo"))))))) (MAPCAR (FUNCTION CL-TEST::NOTNOT) (LIST (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQL (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P) 1) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "foo" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM) "foo") (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::P) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) (LIST CL-TEST::SYM)))) (EQUAL (DOCUMENTATION CL-TEST::P T) NIL))))))
Expected value:
          (T T T T T T T T)
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.6 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN (QUOTE (:\f #\f)) CL-TEST::COLLECT (IGNORE-ERRORS (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE) (:SHADOW (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::S)))))))) (MAPCAR (FUNCTION CL-TEST::NOTNOT) (LIST (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQL (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P) 1) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "f" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM) "f") (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::P) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) (LIST CL-TEST::SYM)))) (EQUAL (DOCUMENTATION CL-TEST::P T) NIL))))))
Expected value:
          ((T T T T T T T T) (T T T T T T T T))
Actual value:
          (NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.7 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET ((CL-TEST::PG (MAKE-PACKAGE "G" :USE NIL))) (EXPORT (INTERN "A" CL-TEST::PG) CL-TEST::PG) (EXPORT (INTERN "foo" CL-TEST::PG) CL-TEST::PG) (INTERN "bar" CL-TEST::PG) (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN (QUOTE ("A" :A #\A)) CL-TEST::COLLECT (IGNORE-ERRORS (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE) (:SHADOWING-IMPORT-FROM "G" (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N)))))))) (MAPCAR (FUNCTION CL-TEST::NOTNOT) (LIST (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQL (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P) 1) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "A" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM) "A") (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::PG) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) (LIST CL-TEST::SYM)))) (EQUAL (DOCUMENTATION CL-TEST::P T) NIL))))))))
Expected value:
          ((T T T T T T T T) (T T T T T T T T) (T T T T T T T T))
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.8 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (LET ((CL-TEST::PG (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:INTERN "A" "B" "C")))))) (LOOP CL-TEST::FOR CL-TEST::PN CL-TEST::IN (QUOTE ("G" #:G #\G)) CL-TEST::COLLECT (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN (QUOTE ("B" #:B #\B)) CL-TEST::COLLECT (IGNORE-ERRORS (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:USE) (:IMPORT-FROM (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::PN) (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) "A"))))))) (MAPCAR (FUNCTION CL-TEST::NOTNOT) (LIST (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (EQL (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P) 2) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "A" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM) "A") (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::PG))) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL "B" CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM) "B") (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::PG))) (EQUAL (DOCUMENTATION CL-TEST::P T) NIL)))))))))
Expected value:
          (((T T T T T T T T T T) (T T T T T T T T T T) (T T T T T T T T T T)) ((T T T T T T T T T T) (T T T T T T T T T T) (T T T T T T T T T T)) ((T T T T T T T T T T) (T T T T T T T T T T) (T T T T T T T T T T)))
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.9 failed
Form: (PROGN (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN (QUOTE ("Z" #:Z #\Z)) CL-TEST::COLLECT (IGNORE-ERRORS (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:EXPORT "Q" (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) "R") (:USE))))))) (MAPCAR (FUNCTION CL-TEST::NOTNOT) (LIST (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (EQL (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P) 3) (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN (QUOTE ("Q" "Z" "R")) DO (UNLESS (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL CL-TEST::S CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :EXTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM) CL-TEST::S) (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::P))) (RETURN NIL)) CL-TEST::FINALLY (RETURN T))))))))
Expected value:
          ((T T T T T T T T) (T T T T T T T T) (T T T T T T T T))
Actual value:
          (NIL NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.10 failed
Form: (PROGN (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN (QUOTE ("Z" #:Z #\Z)) CL-TEST::COLLECT (IGNORE-ERRORS (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (SYSTEM.INTERNALS::BACKQUOTE (DEFPACKAGE "H" (:INTERN "Q" (SYSTEM.INTERNALS::BQ-COMMA CL-TEST::N) "R") (:USE))))))) (MAPCAR (FUNCTION CL-TEST::NOTNOT) (LIST (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (EQL (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P) 3) (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN (QUOTE ("Q" "Z" "R")) DO (UNLESS (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL CL-TEST::S CL-TEST::P) (AND (CL-TEST::EQT CL-TEST::ACCESS :INTERNAL) (EQUAL (SYMBOL-NAME CL-TEST::SYM) CL-TEST::S) (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::P))) (RETURN NIL)) CL-TEST::FINALLY (RETURN T))))))))
Expected value:
          ((T T T T T T T T) (T T T T T T T T) (T T T T T T T T))
Actual value:
          (NIL NIL NIL) [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.11 failed
Form: (LET NIL (IGNORE-ERRORS (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (QUOTE (DEFPACKAGE "H" (:USE) (:SIZE 0))))))) (MAPCAR (FUNCTION CL-TEST::NOTNOT) (LIST (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (ZEROP (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P)))))))
Expected value:
          (T T T T T T T)
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.12 failed
Form: (LET NIL (IGNORE-ERRORS (CL-TEST::SAFELY-DELETE-PACKAGE "H") (LET ((CL-TEST::P (IGNORE-ERRORS (EVAL (QUOTE (DEFPACKAGE "H" (:USE) (:SIZE 10000))))))) (MAPCAR (FUNCTION CL-TEST::NOTNOT) (LIST (PACKAGEP CL-TEST::P) (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (EQUAL (PACKAGE-USE-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::P) NIL) (EQUAL (PACKAGE-NICKNAMES CL-TEST::P) NIL) (EQUAL (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P) NIL) (ZEROP (CL-TEST::NUM-SYMBOLS-IN-PACKAGE CL-TEST::P)))))))
Expected value:
          (T T T T T T T)
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.13 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SIZE 10) (:SIZE 20)) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.14 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:DOCUMENTATION "foo") (:DOCUMENTATION "bar")) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.15 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:NICKNAMES "A")) PACKAGE-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.16 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:NICKNAMES "Q")) PACKAGE-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.17 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOW "A") (:SHADOWING-IMPORT-FROM "G" "A")) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.18 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOW "A") (:IMPORT-FROM "G" "A")) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.19 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOW "A") (:INTERN "A")) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.20 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOWING-IMPORT-FROM "G" "A") (:IMPORT-FROM "G" "A")) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.21 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:SHADOWING-IMPORT-FROM "G" "A") (:INTERN "A")) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.22 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE) (:EXPORT "A")))) (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:IMPORT-FROM "G" "A") (:INTERN "A")) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.23 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST:SIGNALS-ERROR (DEFPACKAGE "H" (:USE) (:EXPORT "A") (:INTERN "A")) PROGRAM-ERROR))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.24 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE)))) (CL-TEST::HANDLE-NON-ABORT-RESTART (EVAL (QUOTE (DEFPACKAGE "H" (:SHADOWING-IMPORT-FROM "G" "NOT-THERE"))))))
Expected value:
          CL-TEST::SUCCESS
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.25 failed
Form: (PROGN (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G") (EVAL (QUOTE (DEFPACKAGE "G" (:USE)))) (CL-TEST::HANDLE-NON-ABORT-RESTART (EVAL (QUOTE (DEFPACKAGE "H" (:IMPORT-FROM "G" "NOT-THERE"))))))
Expected value:
          CL-TEST::SUCCESS
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DEFPACKAGE.26 failed
Form: (LET NIL (IGNORE-ERRORS (FLET ((CL-TEST::%DO-IT% (CL-TEST::ARGS) (CL-TEST::SAFELY-DELETE-PACKAGE "H") (CL-TEST::SAFELY-DELETE-PACKAGE "G1") (CL-TEST::SAFELY-DELETE-PACKAGE "G2") (CL-TEST::SAFELY-DELETE-PACKAGE "G3") (LET ((CL-TEST::PG1 (PROGN (FORMAT T "Making G1...~%") (EVAL (QUOTE (DEFPACKAGE "G1" (:USE) (:EXPORT "A" "B" "C") (:INTERN "D" "E" "F")))))) (CL-TEST::PG2 (PROGN (FORMAT T "Making G2...~%") (EVAL (QUOTE (DEFPACKAGE "G2" (:USE) (:EXPORT "A" "D" "G") (:INTERN "E" "H" "I")))))) (CL-TEST::PG3 (PROGN (FORMAT T "Making G3...~%") (EVAL (QUOTE (DEFPACKAGE "G3" (:USE) (:EXPORT "J" "K" "L") (:INTERN "M" "N" "O"))))))) (LET ((CL-TEST::P (EVAL (LIST* (QUOTE DEFPACKAGE) "H" (COPY-TREE CL-TEST::ARGS))))) (PROG NIL (UNLESS (PACKAGEP CL-TEST::P) (RETURN 1)) (UNLESS (EQUAL (PACKAGE-NAME CL-TEST::P) "H") (RETURN 2)) (UNLESS (EQUAL (PACKAGE-NAME CL-TEST::PG1) "G1") (RETURN 3)) (UNLESS (EQUAL (PACKAGE-NAME CL-TEST::PG2) "G2") (RETURN 4)) (UNLESS (EQUAL (PACKAGE-NAME CL-TEST::PG3) "G3") (RETURN 5)) (UNLESS (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES CL-TEST::P)) (FUNCTION STRING<)) (QUOTE ("H1" "H2"))) (RETURN 6)) (UNLESS (OR (EQUAL (PACKAGE-USE-LIST CL-TEST::P) (LIST CL-TEST::PG1 CL-TEST::PG2)) (EQUAL (PACKAGE-USE-LIST CL-TEST::P) (LIST CL-TEST::PG2 CL-TEST::PG1))) (RETURN 7)) (UNLESS (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG1) (LIST CL-TEST::P)) (RETURN 8)) (UNLESS (EQUAL (PACKAGE-USED-BY-LIST CL-TEST::PG2) (LIST CL-TEST::P)) (RETURN 9)) (WHEN (PACKAGE-USED-BY-LIST CL-TEST::PG3) (RETURN 10)) (UNLESS (EQUAL (SORT (MAPCAR (FUNCTION SYMBOL-NAME) (PACKAGE-SHADOWING-SYMBOLS CL-TEST::P)) (FUNCTION STRING<)) (QUOTE ("A" "B"))) (RETURN 10)) (LET ((CL-TEST::NUM 11)) (UNLESS (EVERY (FUNCTION (LAMBDA (CL-TEST::STR CL-TEST::ACC CL-TEST::PKG) (CL-TEST::MULTIPLE-VALUE-BIND* (CL-TEST::SYM CL-TEST::ACCESS) (FIND-SYMBOL CL-TEST::STR CL-TEST::P) (OR (AND (OR (NOT CL-TEST::ACC) (EQUAL (SYMBOL-NAME CL-TEST::SYM) CL-TEST::STR)) (OR (NOT CL-TEST::ACC) (EQUAL (SYMBOL-PACKAGE CL-TEST::SYM) CL-TEST::PKG)) (EQUAL CL-TEST::ACCESS CL-TEST::ACC) (INCF CL-TEST::NUM)) (PROGN (FORMAT T "Failed on str = ~S, acc = ~S, pkg = ~S, sym = ~S, access = ~S~%" CL-TEST::STR CL-TEST::ACC CL-TEST::PKG CL-TEST::SYM CL-TEST::ACCESS) NIL))))) (LIST "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O") (LIST :INTERNAL :INTERNAL :EXTERNAL :INHERITED NIL NIL :INHERITED :INTERNAL NIL NIL NIL :EXTERNAL NIL NIL :INTERNAL) (LIST CL-TEST::PG2 CL-TEST::P CL-TEST::PG1 CL-TEST::PG2 NIL NIL CL-TEST::PG2 CL-TEST::P NIL NIL NIL CL-TEST::PG3 NIL NIL CL-TEST::PG3)) (RETURN CL-TEST::NUM))) (RETURN (QUOTE CL-TEST::SUCCESS))))))) (LET ((CL-TEST::ARGS (QUOTE ((:NICKNAMES "H1" "H2") (:USE "G1" "G2") (:SHADOW "B") (:SHADOWING-IMPORT-FROM "G2" "A") (:IMPORT-FROM "G3" "L" "O") (:INTERN "D" "H") (:EXPORT "L" "C") (:SIZE 20) (:DOCUMENTATION "A test package"))))) (LIST (CL-TEST::%DO-IT% CL-TEST::ARGS) (CL-TEST::%DO-IT% (REVERSE CL-TEST::ARGS)))))))
Expected value:
          (CL-TEST::SUCCESS CL-TEST::SUCCESS)
Actual value:
          NIL [Actual value: #<error during printing>

 NIL
 CL-TEST::DEFPACKAGE.ERROR.1
Test CL-TEST::DO-SYMBOLS.1 failed
Form: (PROGN (CL-TEST::SET-UP-PACKAGES) (CL-TEST::EQUALT (REMOVE-DUPLICATES (CL-TEST::SORT-SYMBOLS (LET ((CL-TEST::ALL NIL)) (DO-SYMBOLS (CL-TEST::X "B" CL-TEST::ALL) (PUSH CL-TEST::X CL-TEST::ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::DO-SYMBOLS.2
 CL-TEST::DO-SYMBOLS.3
Test CL-TEST::DO-SYMBOLS.4 failed
Form: (CL-TEST::COLLECT-SYMBOLS "DS3")
Expected value:
          (DS1:A DS1:B DS2:G DS2:H DS3:I DS3:J DS3:K DS3::L DS3::M)
Actual value:
          (DS1:A DS2:A DS1:B DS2:G DS2:H DS3:I DS3:J DS3:K DS3::L DS3::M) [Actual value: #<error during printing>

 NIL
 CL-TEST::DO-SYMBOLS.5
Test CL-TEST::DO-SYMBOLS.6 failed
Form: (DO-SYMBOLS (CL-TEST::S "DS1") (DECLARE (IGNORE CL-TEST::S)) T)
Expected value:
          NIL
Actual value:
          #<Undefined-Function DECLARE> [Actual value: #<error during printing>

 NIL
 CL-TEST::DO-SYMBOLS.7
 CL-TEST::DO-SYMBOLS.8
Test CL-TEST::DO-SYMBOLS.9 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 1 :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-CONTENTS "B"))) (ASSERT (STRING= CL-TEST::NAME "B")) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::EQUALT (REMOVE-DUPLICATES (CL-TEST::SORT-SYMBOLS (LET ((CL-TEST::ALL NIL)) (DO-SYMBOLS (CL-TEST::X CL-TEST::NAME CL-TEST::ALL) (PUSH CL-TEST::X CL-TEST::ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DO-SYMBOLS.10 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 1 :INITIAL-CONTENTS "BXXXX"))) (ASSERT (STRING= CL-TEST::NAME "B")) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::EQUALT (REMOVE-DUPLICATES (CL-TEST::SORT-SYMBOLS (LET ((CL-TEST::ALL NIL)) (DO-SYMBOLS (CL-TEST::X CL-TEST::NAME CL-TEST::ALL) (PUSH CL-TEST::X CL-TEST::ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DO-SYMBOLS.11 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BASE-CHAR) :FILL-POINTER 1 :INITIAL-CONTENTS "BXXXX"))) (ASSERT (STRING= CL-TEST::NAME "B")) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::EQUALT (REMOVE-DUPLICATES (CL-TEST::SORT-SYMBOLS (LET ((CL-TEST::ALL NIL)) (DO-SYMBOLS (CL-TEST::X CL-TEST::NAME CL-TEST::ALL) (PUSH CL-TEST::X CL-TEST::ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DO-SYMBOLS.12 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 1 :ELEMENT-TYPE (QUOTE BASE-CHAR) :ADJUSTABLE T :INITIAL-CONTENTS "B"))) (ASSERT (STRING= CL-TEST::NAME "B")) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::EQUALT (REMOVE-DUPLICATES (CL-TEST::SORT-SYMBOLS (LET ((CL-TEST::ALL NIL)) (DO-SYMBOLS (CL-TEST::X CL-TEST::NAME CL-TEST::ALL) (PUSH CL-TEST::X CL-TEST::ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DO-SYMBOLS.13 failed
Form: (LET ((CL-TEST::NAME (MAKE-ARRAY 1 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :INITIAL-CONTENTS "B"))) (ASSERT (STRING= CL-TEST::NAME "B")) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::EQUALT (REMOVE-DUPLICATES (CL-TEST::SORT-SYMBOLS (LET ((CL-TEST::ALL NIL)) (DO-SYMBOLS (CL-TEST::X CL-TEST::NAME CL-TEST::ALL) (PUSH CL-TEST::X CL-TEST::ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DO-SYMBOLS.14 failed
Form: (LET ((CL-TEST::NAME (LET* ((CL-TEST::ETYPE (QUOTE BASE-CHAR)) (CL-TEST::NAME0 (MAKE-ARRAY 4 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "XBYZ"))) (MAKE-ARRAY 1 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 1)))) (ASSERT (STRING= CL-TEST::NAME "B")) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::EQUALT (REMOVE-DUPLICATES (CL-TEST::SORT-SYMBOLS (LET ((CL-TEST::ALL NIL)) (DO-SYMBOLS (CL-TEST::X CL-TEST::NAME CL-TEST::ALL) (PUSH CL-TEST::X CL-TEST::ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
Test CL-TEST::DO-SYMBOLS.15 failed
Form: (LET ((CL-TEST::NAME (LET* ((CL-TEST::ETYPE (QUOTE CHARACTER)) (CL-TEST::NAME0 (MAKE-ARRAY 4 :ELEMENT-TYPE CL-TEST::ETYPE :INITIAL-CONTENTS "XBYZ"))) (MAKE-ARRAY 1 :ELEMENT-TYPE CL-TEST::ETYPE :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 1)))) (ASSERT (STRING= CL-TEST::NAME "B")) (CL-TEST::SET-UP-PACKAGES) (CL-TEST::EQUALT (REMOVE-DUPLICATES (CL-TEST::SORT-SYMBOLS (LET ((CL-TEST::ALL NIL)) (DO-SYMBOLS (CL-TEST::X CL-TEST::NAME CL-TEST::ALL) (PUSH CL-TEST::X CL-TEST::ALL))))) (LIST (FIND-SYMBOL "BAR" "B") (FIND-SYMBOL "FOO" "A"))))
Expected value:
          T
Actual value:
          #<Undefined-Function UNUSE-PACKAGE> [Actual value: #<error during printing>

 NIL
 CL-TEST::DO-SYMBOLS.16
Test CL-TEST::DO-SYMBOLS.17 failed
Form: (LET ((CL-TEST::X :GOOD)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X :BAD)) (DO-SYMBOLS (CL-TEST::S "CL-TEST" CL-TEST::X) (DECLARE (SPECIAL CL-TEST::X)))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function DECLARE> [Actual value: #<error during printing>

 NIL
 CL-TEST::DO-SYMBOLS.18
 CL-TEST::DO-SYMBOLS.19
 CL-TEST::DO-SYMBOLS.ERROR.1
 CL-TEST::DO-EXTERNAL-SYMBOLS.1
 CL-TEST::DO-EXTERNAL-SYMBOLS.2
 CL-TEST::DO-EXTERNAL-SYMBOLS.3
 CL-TEST::DO-EXTERNAL-SYMBOLS.4
[[System crashed after a GC. Probably blew the stack.]]
