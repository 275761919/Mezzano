Doing 20818 pending tests of 20818 tests total.

 CL-TEST::SYMBOL-&ALLOW-OTHER-KEYS
 CL-TEST::SYMBOL-&AUX
 CL-TEST::SYMBOL-&BODY
 CL-TEST::SYMBOL-&ENVIRONMENT
 CL-TEST::SYMBOL-&KEY
 CL-TEST::SYMBOL-&OPTIONAL
 CL-TEST::SYMBOL-&REST
 CL-TEST::SYMBOL-&WHOLE
 CL-TEST::SYMBOL-*
 CL-TEST::SYMBOL-**
 CL-TEST::SYMBOL-***
 CL-TEST::SYMBOL-*BREAK-ON-SIGNALS*
 CL-TEST::SYMBOL-*COMPILE-FILE-PATHNAME*
 CL-TEST::SYMBOL-*COMPILE-FILE-TRUENAME*
 CL-TEST::SYMBOL-*COMPILE-PRINT*
 CL-TEST::SYMBOL-*COMPILE-VERBOSE*
 CL-TEST::SYMBOL-*DEBUG-IO*
 CL-TEST::SYMBOL-*DEBUGGER-HOOK*
 CL-TEST::SYMBOL-*DEFAULT-PATHNAME-DEFAULTS*
 CL-TEST::SYMBOL-*ERROR-OUTPUT*
 CL-TEST::SYMBOL-*FEATURES*
 CL-TEST::SYMBOL-*GENSYM-COUNTER*
 CL-TEST::SYMBOL-*LOAD-PATHNAME*
 CL-TEST::SYMBOL-*LOAD-PRINT*
 CL-TEST::SYMBOL-*LOAD-TRUENAME*
 CL-TEST::SYMBOL-*LOAD-VERBOSE*
 CL-TEST::SYMBOL-*MACROEXPAND-HOOK*
 CL-TEST::SYMBOL-*MODULES*
 CL-TEST::SYMBOL-*PACKAGE*
 CL-TEST::SYMBOL-*PRINT-ARRAY*
 CL-TEST::SYMBOL-*PRINT-BASE*
 CL-TEST::SYMBOL-*PRINT-CASE*
 CL-TEST::SYMBOL-*PRINT-CIRCLE*
 CL-TEST::SYMBOL-*PRINT-ESCAPE*
 CL-TEST::SYMBOL-*PRINT-GENSYM*
 CL-TEST::SYMBOL-*PRINT-LENGTH*
 CL-TEST::SYMBOL-*PRINT-LEVEL*
 CL-TEST::SYMBOL-*PRINT-LINES*
 CL-TEST::SYMBOL-*PRINT-MISER-WIDTH*
 CL-TEST::SYMBOL-*PRINT-PPRINT-DISPATCH*
 CL-TEST::SYMBOL-*PRINT-PRETTY*
 CL-TEST::SYMBOL-*PRINT-RADIX*
 CL-TEST::SYMBOL-*PRINT-READABLY*
 CL-TEST::SYMBOL-*PRINT-RIGHT-MARGIN*
 CL-TEST::SYMBOL-*QUERY-IO*
 CL-TEST::SYMBOL-*RANDOM-STATE*
 CL-TEST::SYMBOL-*READ-BASE*
 CL-TEST::SYMBOL-*READ-DEFAULT-FLOAT-FORMAT*
 CL-TEST::SYMBOL-*READ-EVAL*
 CL-TEST::SYMBOL-*READ-SUPPRESS*
 CL-TEST::SYMBOL-*READTABLE*
 CL-TEST::SYMBOL-*STANDARD-INPUT*
 CL-TEST::SYMBOL-*STANDARD-OUTPUT*
 CL-TEST::SYMBOL-*TERMINAL-IO*
 CL-TEST::SYMBOL-*TRACE-OUTPUT*
 CL-TEST::SYMBOL-+
 CL-TEST::SYMBOL-++
 CL-TEST::SYMBOL-+++
 CL-TEST::SYMBOL--
 CL-TEST::SYMBOL-/
 CL-TEST::SYMBOL-//
 CL-TEST::SYMBOL-///
 CL-TEST::SYMBOL-/=
 CL-TEST::SYMBOL-1+
 CL-TEST::SYMBOL-1-
 CL-TEST::SYMBOL-<
 CL-TEST::SYMBOL-<=
 CL-TEST::SYMBOL-=
 CL-TEST::SYMBOL->
 CL-TEST::SYMBOL->=
 CL-TEST::SYMBOL-ABORT
 CL-TEST::SYMBOL-ABS
 CL-TEST::SYMBOL-ACONS
 CL-TEST::SYMBOL-ACOS
 CL-TEST::SYMBOL-ACOSH
 CL-TEST::SYMBOL-ADD-METHOD
 CL-TEST::SYMBOL-ADJOIN
 CL-TEST::SYMBOL-ADJUST-ARRAY
 CL-TEST::SYMBOL-ADJUSTABLE-ARRAY-P
 CL-TEST::SYMBOL-ALLOCATE-INSTANCE
 CL-TEST::SYMBOL-ALPHA-CHAR-P
 CL-TEST::SYMBOL-ALPHANUMERICP
 CL-TEST::SYMBOL-AND
 CL-TEST::SYMBOL-APPEND
 CL-TEST::SYMBOL-APPLY
 CL-TEST::SYMBOL-APROPOS
 CL-TEST::SYMBOL-APROPOS-LIST
 CL-TEST::SYMBOL-AREF
 CL-TEST::SYMBOL-ARITHMETIC-ERROR
 CL-TEST::SYMBOL-ARITHMETIC-ERROR-OPERANDS
 CL-TEST::SYMBOL-ARITHMETIC-ERROR-OPERATION
 CL-TEST::SYMBOL-ARRAY
 CL-TEST::SYMBOL-ARRAY-DIMENSION
 CL-TEST::SYMBOL-ARRAY-DIMENSION-LIMIT
 CL-TEST::SYMBOL-ARRAY-DIMENSIONS
 CL-TEST::SYMBOL-ARRAY-DISPLACEMENT
 CL-TEST::SYMBOL-ARRAY-ELEMENT-TYPE
 CL-TEST::SYMBOL-ARRAY-HAS-FILL-POINTER-P
 CL-TEST::SYMBOL-ARRAY-IN-BOUNDS-P
 CL-TEST::SYMBOL-ARRAY-RANK
 CL-TEST::SYMBOL-ARRAY-RANK-LIMIT
 CL-TEST::SYMBOL-ARRAY-ROW-MAJOR-INDEX
 CL-TEST::SYMBOL-ARRAY-TOTAL-SIZE
 CL-TEST::SYMBOL-ARRAY-TOTAL-SIZE-LIMIT
 CL-TEST::SYMBOL-ARRAYP
 CL-TEST::SYMBOL-ASH
 CL-TEST::SYMBOL-ASIN
 CL-TEST::SYMBOL-ASINH
 CL-TEST::SYMBOL-ASSERT
 CL-TEST::SYMBOL-ASSOC
 CL-TEST::SYMBOL-ASSOC-IF
 CL-TEST::SYMBOL-ASSOC-IF-NOT
 CL-TEST::SYMBOL-ATAN
 CL-TEST::SYMBOL-ATANH
 CL-TEST::SYMBOL-ATOM
 CL-TEST::SYMBOL-BASE-CHAR
 CL-TEST::SYMBOL-BASE-STRING
 CL-TEST::SYMBOL-BIGNUM
 CL-TEST::SYMBOL-BIT
 CL-TEST::SYMBOL-BIT-AND
 CL-TEST::SYMBOL-BIT-ANDC1
 CL-TEST::SYMBOL-BIT-ANDC2
 CL-TEST::SYMBOL-BIT-EQV
 CL-TEST::SYMBOL-BIT-IOR
 CL-TEST::SYMBOL-BIT-NAND
 CL-TEST::SYMBOL-BIT-NOR
 CL-TEST::SYMBOL-BIT-NOT
 CL-TEST::SYMBOL-BIT-ORC1
 CL-TEST::SYMBOL-BIT-ORC2
 CL-TEST::SYMBOL-BIT-VECTOR
 CL-TEST::SYMBOL-BIT-VECTOR-P
 CL-TEST::SYMBOL-BIT-XOR
 CL-TEST::SYMBOL-BLOCK
 CL-TEST::SYMBOL-BOOLE
 CL-TEST::SYMBOL-BOOLE-1
 CL-TEST::SYMBOL-BOOLE-2
 CL-TEST::SYMBOL-BOOLE-AND
 CL-TEST::SYMBOL-BOOLE-ANDC1
 CL-TEST::SYMBOL-BOOLE-ANDC2
 CL-TEST::SYMBOL-BOOLE-C1
 CL-TEST::SYMBOL-BOOLE-C2
 CL-TEST::SYMBOL-BOOLE-CLR
 CL-TEST::SYMBOL-BOOLE-EQV
 CL-TEST::SYMBOL-BOOLE-IOR
 CL-TEST::SYMBOL-BOOLE-NAND
 CL-TEST::SYMBOL-BOOLE-NOR
 CL-TEST::SYMBOL-BOOLE-ORC1
 CL-TEST::SYMBOL-BOOLE-ORC2
 CL-TEST::SYMBOL-BOOLE-SET
 CL-TEST::SYMBOL-BOOLE-XOR
 CL-TEST::SYMBOL-BOOLEAN
 CL-TEST::SYMBOL-BOTH-CASE-P
 CL-TEST::SYMBOL-BOUNDP
 CL-TEST::SYMBOL-BREAK
 CL-TEST::SYMBOL-BROADCAST-STREAM
 CL-TEST::SYMBOL-BROADCAST-STREAM-STREAMS
 CL-TEST::SYMBOL-BUILT-IN-CLASS
 CL-TEST::SYMBOL-BUTLAST
 CL-TEST::SYMBOL-BYTE
 CL-TEST::SYMBOL-BYTE-POSITION
 CL-TEST::SYMBOL-BYTE-SIZE
 CL-TEST::SYMBOL-CAAAAR
 CL-TEST::SYMBOL-CAAADR
 CL-TEST::SYMBOL-CAAAR
 CL-TEST::SYMBOL-CAADAR
 CL-TEST::SYMBOL-CAADDR
 CL-TEST::SYMBOL-CAADR
 CL-TEST::SYMBOL-CAAR
 CL-TEST::SYMBOL-CADAAR
 CL-TEST::SYMBOL-CADADR
 CL-TEST::SYMBOL-CADAR
 CL-TEST::SYMBOL-CADDAR
 CL-TEST::SYMBOL-CADDDR
 CL-TEST::SYMBOL-CADDR
 CL-TEST::SYMBOL-CADR
 CL-TEST::SYMBOL-CALL-ARGUMENTS-LIMIT
 CL-TEST::SYMBOL-CALL-METHOD
 CL-TEST::SYMBOL-CALL-NEXT-METHOD
 CL-TEST::SYMBOL-CAR
 CL-TEST::SYMBOL-CASE
 CL-TEST::SYMBOL-CATCH
 CL-TEST::SYMBOL-CCASE
 CL-TEST::SYMBOL-CDAAAR
 CL-TEST::SYMBOL-CDAADR
 CL-TEST::SYMBOL-CDAAR
 CL-TEST::SYMBOL-CDADAR
 CL-TEST::SYMBOL-CDADDR
 CL-TEST::SYMBOL-CDADR
 CL-TEST::SYMBOL-CDAR
 CL-TEST::SYMBOL-CDDAAR
 CL-TEST::SYMBOL-CDDADR
 CL-TEST::SYMBOL-CDDAR
 CL-TEST::SYMBOL-CDDDAR
 CL-TEST::SYMBOL-CDDDDR
 CL-TEST::SYMBOL-CDDDR
 CL-TEST::SYMBOL-CDDR
 CL-TEST::SYMBOL-CDR
 CL-TEST::SYMBOL-CEILING
 CL-TEST::SYMBOL-CELL-ERROR
 CL-TEST::SYMBOL-CELL-ERROR-NAME
 CL-TEST::SYMBOL-CERROR
 CL-TEST::SYMBOL-CHANGE-CLASS
 CL-TEST::SYMBOL-CHAR
 CL-TEST::SYMBOL-CHAR-CODE
 CL-TEST::SYMBOL-CHAR-CODE-LIMIT
 CL-TEST::SYMBOL-CHAR-DOWNCASE
 CL-TEST::SYMBOL-CHAR-EQUAL
 CL-TEST::SYMBOL-CHAR-GREATERP
 CL-TEST::SYMBOL-CHAR-INT
 CL-TEST::SYMBOL-CHAR-LESSP
 CL-TEST::SYMBOL-CHAR-NAME
 CL-TEST::SYMBOL-CHAR-NOT-EQUAL
 CL-TEST::SYMBOL-CHAR-NOT-GREATERP
 CL-TEST::SYMBOL-CHAR-NOT-LESSP
 CL-TEST::SYMBOL-CHAR-UPCASE
 CL-TEST::SYMBOL-CHAR/=
 CL-TEST::SYMBOL-CHAR<
 CL-TEST::SYMBOL-CHAR<=
 CL-TEST::SYMBOL-CHAR=
 CL-TEST::SYMBOL-CHAR>
 CL-TEST::SYMBOL-CHAR>=
 CL-TEST::SYMBOL-CHARACTER
 CL-TEST::SYMBOL-CHARACTERP
 CL-TEST::SYMBOL-CHECK-TYPE
 CL-TEST::SYMBOL-CIS
 CL-TEST::SYMBOL-CLASS
 CL-TEST::SYMBOL-CLASS-NAME
 CL-TEST::SYMBOL-CLASS-OF
 CL-TEST::SYMBOL-CLEAR-INPUT
 CL-TEST::SYMBOL-CLEAR-OUTPUT
 CL-TEST::SYMBOL-CLOSE
 CL-TEST::SYMBOL-CLRHASH
 CL-TEST::SYMBOL-CODE-CHAR
 CL-TEST::SYMBOL-COERCE
 CL-TEST::SYMBOL-COMPILATION-SPEED
 CL-TEST::SYMBOL-COMPILE
 CL-TEST::SYMBOL-COMPILE-FILE
 CL-TEST::SYMBOL-COMPILE-FILE-PATHNAME
 CL-TEST::SYMBOL-COMPILED-FUNCTION
 CL-TEST::SYMBOL-COMPILED-FUNCTION-P
 CL-TEST::SYMBOL-COMPILER-MACRO
 CL-TEST::SYMBOL-COMPILER-MACRO-FUNCTION
 CL-TEST::SYMBOL-COMPLEMENT
 CL-TEST::SYMBOL-COMPLEX
 CL-TEST::SYMBOL-COMPLEXP
 CL-TEST::SYMBOL-COMPUTE-APPLICABLE-METHODS
 CL-TEST::SYMBOL-COMPUTE-RESTARTS
 CL-TEST::SYMBOL-CONCATENATE
 CL-TEST::SYMBOL-CONCATENATED-STREAM
 CL-TEST::SYMBOL-CONCATENATED-STREAM-STREAMS
 CL-TEST::SYMBOL-COND
 CL-TEST::SYMBOL-CONDITION
 CL-TEST::SYMBOL-CONJUGATE
 CL-TEST::SYMBOL-CONS
 CL-TEST::SYMBOL-CONSP
 CL-TEST::SYMBOL-CONSTANTLY
 CL-TEST::SYMBOL-CONSTANTP
 CL-TEST::SYMBOL-CONTINUE
 CL-TEST::SYMBOL-CONTROL-ERROR
 CL-TEST::SYMBOL-COPY-ALIST
 CL-TEST::SYMBOL-COPY-LIST
 CL-TEST::SYMBOL-COPY-PPRINT-DISPATCH
 CL-TEST::SYMBOL-COPY-READTABLE
 CL-TEST::SYMBOL-COPY-SEQ
 CL-TEST::SYMBOL-COPY-STRUCTURE
 CL-TEST::SYMBOL-COPY-SYMBOL
 CL-TEST::SYMBOL-COPY-TREE
 CL-TEST::SYMBOL-COS
 CL-TEST::SYMBOL-COSH
 CL-TEST::SYMBOL-COUNT
 CL-TEST::SYMBOL-COUNT-IF
 CL-TEST::SYMBOL-COUNT-IF-NOT
 CL-TEST::SYMBOL-CTYPECASE
 CL-TEST::SYMBOL-DEBUG
 CL-TEST::SYMBOL-DECF
 CL-TEST::SYMBOL-DECLAIM
 CL-TEST::SYMBOL-DECLARATION
 CL-TEST::SYMBOL-DECLARE
 CL-TEST::SYMBOL-DECODE-FLOAT
 CL-TEST::SYMBOL-DECODE-UNIVERSAL-TIME
 CL-TEST::SYMBOL-DEFCLASS
 CL-TEST::SYMBOL-DEFCONSTANT
 CL-TEST::SYMBOL-DEFGENERIC
 CL-TEST::SYMBOL-DEFINE-COMPILER-MACRO
 CL-TEST::SYMBOL-DEFINE-CONDITION
 CL-TEST::SYMBOL-DEFINE-METHOD-COMBINATION
 CL-TEST::SYMBOL-DEFINE-MODIFY-MACRO
 CL-TEST::SYMBOL-DEFINE-SETF-EXPANDER
 CL-TEST::SYMBOL-DEFINE-SYMBOL-MACRO
 CL-TEST::SYMBOL-DEFMACRO
 CL-TEST::SYMBOL-DEFMETHOD
 CL-TEST::SYMBOL-DEFPACKAGE
 CL-TEST::SYMBOL-DEFPARAMETER
 CL-TEST::SYMBOL-DEFSETF
 CL-TEST::SYMBOL-DEFSTRUCT
 CL-TEST::SYMBOL-DEFTYPE
 CL-TEST::SYMBOL-DEFUN
 CL-TEST::SYMBOL-DEFVAR
 CL-TEST::SYMBOL-DELETE
 CL-TEST::SYMBOL-DELETE-DUPLICATES
 CL-TEST::SYMBOL-DELETE-FILE
 CL-TEST::SYMBOL-DELETE-IF
 CL-TEST::SYMBOL-DELETE-IF-NOT
 CL-TEST::SYMBOL-DELETE-PACKAGE
 CL-TEST::SYMBOL-DENOMINATOR
 CL-TEST::SYMBOL-DEPOSIT-FIELD
 CL-TEST::SYMBOL-DESCRIBE
 CL-TEST::SYMBOL-DESCRIBE-OBJECT
 CL-TEST::SYMBOL-DESTRUCTURING-BIND
 CL-TEST::SYMBOL-DIGIT-CHAR
 CL-TEST::SYMBOL-DIGIT-CHAR-P
 CL-TEST::SYMBOL-DIRECTORY
 CL-TEST::SYMBOL-DIRECTORY-NAMESTRING
 CL-TEST::SYMBOL-DISASSEMBLE
 CL-TEST::SYMBOL-DIVISION-BY-ZERO
 CL-TEST::SYMBOL-DO
 CL-TEST::SYMBOL-DO*
 CL-TEST::SYMBOL-DO-ALL-SYMBOLS
 CL-TEST::SYMBOL-DO-EXTERNAL-SYMBOLS
 CL-TEST::SYMBOL-DO-SYMBOLS
 CL-TEST::SYMBOL-DOCUMENTATION
 CL-TEST::SYMBOL-DOLIST
 CL-TEST::SYMBOL-DOTIMES
 CL-TEST::SYMBOL-DOUBLE-FLOAT
 CL-TEST::SYMBOL-DOUBLE-FLOAT-EPSILON
 CL-TEST::SYMBOL-DOUBLE-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-DPB
 CL-TEST::SYMBOL-DRIBBLE
 CL-TEST::SYMBOL-DYNAMIC-EXTENT
 CL-TEST::SYMBOL-ECASE
 CL-TEST::SYMBOL-ECHO-STREAM
 CL-TEST::SYMBOL-ECHO-STREAM-INPUT-STREAM
 CL-TEST::SYMBOL-ECHO-STREAM-OUTPUT-STREAM
 CL-TEST::SYMBOL-ED
 CL-TEST::SYMBOL-EIGHTH
 CL-TEST::SYMBOL-ELT
 CL-TEST::SYMBOL-ENCODE-UNIVERSAL-TIME
 CL-TEST::SYMBOL-END-OF-FILE
 CL-TEST::SYMBOL-ENDP
 CL-TEST::SYMBOL-ENOUGH-NAMESTRING
 CL-TEST::SYMBOL-ENSURE-DIRECTORIES-EXIST
 CL-TEST::SYMBOL-ENSURE-GENERIC-FUNCTION
 CL-TEST::SYMBOL-EQ
 CL-TEST::SYMBOL-EQL
 CL-TEST::SYMBOL-EQUAL
 CL-TEST::SYMBOL-EQUALP
 CL-TEST::SYMBOL-ERROR
 CL-TEST::SYMBOL-ETYPECASE
 CL-TEST::SYMBOL-EVAL
 CL-TEST::SYMBOL-EVAL-WHEN
 CL-TEST::SYMBOL-EVENP
 CL-TEST::SYMBOL-EVERY
 CL-TEST::SYMBOL-EXP
 CL-TEST::SYMBOL-EXPORT
 CL-TEST::SYMBOL-EXPT
 CL-TEST::SYMBOL-EXTENDED-CHAR
 CL-TEST::SYMBOL-FBOUNDP
 CL-TEST::SYMBOL-FCEILING
 CL-TEST::SYMBOL-FDEFINITION
 CL-TEST::SYMBOL-FFLOOR
 CL-TEST::SYMBOL-FIFTH
 CL-TEST::SYMBOL-FILE-AUTHOR
 CL-TEST::SYMBOL-FILE-ERROR
 CL-TEST::SYMBOL-FILE-ERROR-PATHNAME
 CL-TEST::SYMBOL-FILE-LENGTH
 CL-TEST::SYMBOL-FILE-NAMESTRING
 CL-TEST::SYMBOL-FILE-POSITION
 CL-TEST::SYMBOL-FILE-STREAM
 CL-TEST::SYMBOL-FILE-STRING-LENGTH
 CL-TEST::SYMBOL-FILE-WRITE-DATE
 CL-TEST::SYMBOL-FILL
 CL-TEST::SYMBOL-FILL-POINTER
 CL-TEST::SYMBOL-FIND
 CL-TEST::SYMBOL-FIND-ALL-SYMBOLS
 CL-TEST::SYMBOL-FIND-CLASS
 CL-TEST::SYMBOL-FIND-IF
 CL-TEST::SYMBOL-FIND-IF-NOT
 CL-TEST::SYMBOL-FIND-METHOD
 CL-TEST::SYMBOL-FIND-PACKAGE
 CL-TEST::SYMBOL-FIND-RESTART
 CL-TEST::SYMBOL-FIND-SYMBOL
 CL-TEST::SYMBOL-FINISH-OUTPUT
 CL-TEST::SYMBOL-FIRST
 CL-TEST::SYMBOL-FIXNUM
 CL-TEST::SYMBOL-FLET
 CL-TEST::SYMBOL-FLOAT
 CL-TEST::SYMBOL-FLOAT-DIGITS
 CL-TEST::SYMBOL-FLOAT-PRECISION
 CL-TEST::SYMBOL-FLOAT-RADIX
 CL-TEST::SYMBOL-FLOAT-SIGN
 CL-TEST::SYMBOL-FLOATING-POINT-INEXACT
 CL-TEST::SYMBOL-FLOATING-POINT-INVALID-OPERATION
 CL-TEST::SYMBOL-FLOATING-POINT-OVERFLOW
 CL-TEST::SYMBOL-FLOATING-POINT-UNDERFLOW
 CL-TEST::SYMBOL-FLOATP
 CL-TEST::SYMBOL-FLOOR
 CL-TEST::SYMBOL-FMAKUNBOUND
 CL-TEST::SYMBOL-FORCE-OUTPUT
 CL-TEST::SYMBOL-FORMAT
 CL-TEST::SYMBOL-FORMATTER
 CL-TEST::SYMBOL-FOURTH
 CL-TEST::SYMBOL-FRESH-LINE
 CL-TEST::SYMBOL-FROUND
 CL-TEST::SYMBOL-FTRUNCATE
 CL-TEST::SYMBOL-FTYPE
 CL-TEST::SYMBOL-FUNCALL
 SYMBOL-FUNCTION
 CL-TEST::SYMBOL-FUNCTION-KEYWORDS
 CL-TEST::SYMBOL-FUNCTION-LAMBDA-EXPRESSION
 CL-TEST::SYMBOL-FUNCTIONP
 CL-TEST::SYMBOL-GCD
 CL-TEST::SYMBOL-GENERIC-FUNCTION
 CL-TEST::SYMBOL-GENSYM
 CL-TEST::SYMBOL-GENTEMP
 CL-TEST::SYMBOL-GET
 CL-TEST::SYMBOL-GET-DECODED-TIME
 CL-TEST::SYMBOL-GET-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-GET-INTERNAL-REAL-TIME
 CL-TEST::SYMBOL-GET-INTERNAL-RUN-TIME
 CL-TEST::SYMBOL-GET-MACRO-CHARACTER
 CL-TEST::SYMBOL-GET-OUTPUT-STREAM-STRING
 CL-TEST::SYMBOL-GET-PROPERTIES
 CL-TEST::SYMBOL-GET-SETF-EXPANSION
 CL-TEST::SYMBOL-GET-UNIVERSAL-TIME
 CL-TEST::SYMBOL-GETF
 CL-TEST::SYMBOL-GETHASH
 CL-TEST::SYMBOL-GO
 CL-TEST::SYMBOL-GRAPHIC-CHAR-P
 CL-TEST::SYMBOL-HANDLER-BIND
 CL-TEST::SYMBOL-HANDLER-CASE
 CL-TEST::SYMBOL-HASH-TABLE
 CL-TEST::SYMBOL-HASH-TABLE-COUNT
 CL-TEST::SYMBOL-HASH-TABLE-P
 CL-TEST::SYMBOL-HASH-TABLE-REHASH-SIZE
 CL-TEST::SYMBOL-HASH-TABLE-REHASH-THRESHOLD
 CL-TEST::SYMBOL-HASH-TABLE-SIZE
 CL-TEST::SYMBOL-HASH-TABLE-TEST
 CL-TEST::SYMBOL-HOST-NAMESTRING
 CL-TEST::SYMBOL-IDENTITY
 CL-TEST::SYMBOL-IF
 CL-TEST::SYMBOL-IGNORABLE
 CL-TEST::SYMBOL-IGNORE
 CL-TEST::SYMBOL-IGNORE-ERRORS
 CL-TEST::SYMBOL-IMAGPART
 CL-TEST::SYMBOL-IMPORT
 CL-TEST::SYMBOL-IN-PACKAGE
 CL-TEST::SYMBOL-INCF
 CL-TEST::SYMBOL-INITIALIZE-INSTANCE
 CL-TEST::SYMBOL-INLINE
 CL-TEST::SYMBOL-INPUT-STREAM-P
 CL-TEST::SYMBOL-INSPECT
 CL-TEST::SYMBOL-INTEGER
 CL-TEST::SYMBOL-INTEGER-DECODE-FLOAT
 CL-TEST::SYMBOL-INTEGER-LENGTH
 CL-TEST::SYMBOL-INTEGERP
 CL-TEST::SYMBOL-INTERACTIVE-STREAM-P
 CL-TEST::SYMBOL-INTERN
 CL-TEST::SYMBOL-INTERNAL-TIME-UNITS-PER-SECOND
 CL-TEST::SYMBOL-INTERSECTION
 CL-TEST::SYMBOL-INVALID-METHOD-ERROR
 CL-TEST::SYMBOL-INVOKE-DEBUGGER
 CL-TEST::SYMBOL-INVOKE-RESTART
 CL-TEST::SYMBOL-INVOKE-RESTART-INTERACTIVELY
 CL-TEST::SYMBOL-ISQRT
 CL-TEST::SYMBOL-KEYWORD
 CL-TEST::SYMBOL-KEYWORDP
 CL-TEST::SYMBOL-LABELS
 CL-TEST::SYMBOL-LAMBDA
 CL-TEST::SYMBOL-LAMBDA-LIST-KEYWORDS
 CL-TEST::SYMBOL-LAMBDA-PARAMETERS-LIMIT
 CL-TEST::SYMBOL-LAST
 CL-TEST::SYMBOL-LCM
 CL-TEST::SYMBOL-LDB
 CL-TEST::SYMBOL-LDB-TEST
 CL-TEST::SYMBOL-LDIFF
 CL-TEST::SYMBOL-LEAST-NEGATIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-NEGATIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-LONG-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-LEAST-POSITIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-LENGTH
 CL-TEST::SYMBOL-LET
 CL-TEST::SYMBOL-LET*
 CL-TEST::SYMBOL-LISP-IMPLEMENTATION-TYPE
 CL-TEST::SYMBOL-LISP-IMPLEMENTATION-VERSION
 CL-TEST::SYMBOL-LIST
 CL-TEST::SYMBOL-LIST*
 CL-TEST::SYMBOL-LIST-ALL-PACKAGES
 CL-TEST::SYMBOL-LIST-LENGTH
 CL-TEST::SYMBOL-LISTEN
 CL-TEST::SYMBOL-LISTP
 CL-TEST::SYMBOL-LOAD
 CL-TEST::SYMBOL-LOAD-LOGICAL-PATHNAME-TRANSLATIONS
 CL-TEST::SYMBOL-LOAD-TIME-VALUE
 CL-TEST::SYMBOL-LOCALLY
 CL-TEST::SYMBOL-LOG
 CL-TEST::SYMBOL-LOGAND
 CL-TEST::SYMBOL-LOGANDC1
 CL-TEST::SYMBOL-LOGANDC2
 CL-TEST::SYMBOL-LOGBITP
 CL-TEST::SYMBOL-LOGCOUNT
 CL-TEST::SYMBOL-LOGEQV
 CL-TEST::SYMBOL-LOGICAL-PATHNAME
 CL-TEST::SYMBOL-LOGICAL-PATHNAME-TRANSLATIONS
 CL-TEST::SYMBOL-LOGIOR
 CL-TEST::SYMBOL-LOGNAND
 CL-TEST::SYMBOL-LOGNOR
 CL-TEST::SYMBOL-LOGNOT
 CL-TEST::SYMBOL-LOGORC1
 CL-TEST::SYMBOL-LOGORC2
 CL-TEST::SYMBOL-LOGTEST
 CL-TEST::SYMBOL-LOGXOR
 CL-TEST::SYMBOL-LONG-FLOAT
 CL-TEST::SYMBOL-LONG-FLOAT-EPSILON
 CL-TEST::SYMBOL-LONG-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-LONG-SITE-NAME
 CL-TEST::SYMBOL-LOOP
 CL-TEST::SYMBOL-LOOP-FINISH
 CL-TEST::SYMBOL-LOWER-CASE-P
 CL-TEST::SYMBOL-MACHINE-INSTANCE
 CL-TEST::SYMBOL-MACHINE-TYPE
 CL-TEST::SYMBOL-MACHINE-VERSION
 CL-TEST::SYMBOL-MACRO-FUNCTION
 CL-TEST::SYMBOL-MACROEXPAND
 CL-TEST::SYMBOL-MACROEXPAND-1
 SYMBOL-MACROLET
 CL-TEST::SYMBOL-MAKE-ARRAY
 CL-TEST::SYMBOL-MAKE-BROADCAST-STREAM
 CL-TEST::SYMBOL-MAKE-CONCATENATED-STREAM
 CL-TEST::SYMBOL-MAKE-CONDITION
 CL-TEST::SYMBOL-MAKE-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-MAKE-ECHO-STREAM
 CL-TEST::SYMBOL-MAKE-HASH-TABLE
 CL-TEST::SYMBOL-MAKE-INSTANCE
 CL-TEST::SYMBOL-MAKE-INSTANCES-OBSOLETE
 CL-TEST::SYMBOL-MAKE-LIST
 CL-TEST::SYMBOL-MAKE-LOAD-FORM
 CL-TEST::SYMBOL-MAKE-LOAD-FORM-SAVING-SLOTS
 CL-TEST::SYMBOL-MAKE-METHOD
 CL-TEST::SYMBOL-MAKE-PACKAGE
 CL-TEST::SYMBOL-MAKE-PATHNAME
 CL-TEST::SYMBOL-MAKE-RANDOM-STATE
 CL-TEST::SYMBOL-MAKE-SEQUENCE
 CL-TEST::SYMBOL-MAKE-STRING
 CL-TEST::SYMBOL-MAKE-STRING-INPUT-STREAM
 CL-TEST::SYMBOL-MAKE-STRING-OUTPUT-STREAM
 CL-TEST::SYMBOL-MAKE-SYMBOL
 CL-TEST::SYMBOL-MAKE-SYNONYM-STREAM
 CL-TEST::SYMBOL-MAKE-TWO-WAY-STREAM
 CL-TEST::SYMBOL-MAKUNBOUND
 CL-TEST::SYMBOL-MAP
 CL-TEST::SYMBOL-MAP-INTO
 CL-TEST::SYMBOL-MAPC
 CL-TEST::SYMBOL-MAPCAN
 CL-TEST::SYMBOL-MAPCAR
 CL-TEST::SYMBOL-MAPCON
 CL-TEST::SYMBOL-MAPHASH
 CL-TEST::SYMBOL-MAPL
 CL-TEST::SYMBOL-MAPLIST
 CL-TEST::SYMBOL-MASK-FIELD
 CL-TEST::SYMBOL-MAX
 CL-TEST::SYMBOL-MEMBER
 CL-TEST::SYMBOL-MEMBER-IF
 CL-TEST::SYMBOL-MEMBER-IF-NOT
 CL-TEST::SYMBOL-MERGE
 CL-TEST::SYMBOL-MERGE-PATHNAMES
 CL-TEST::SYMBOL-METHOD
 CL-TEST::SYMBOL-METHOD-COMBINATION
 CL-TEST::SYMBOL-METHOD-COMBINATION-ERROR
 CL-TEST::SYMBOL-METHOD-QUALIFIERS
 CL-TEST::SYMBOL-MIN
 CL-TEST::SYMBOL-MINUSP
 CL-TEST::SYMBOL-MISMATCH
 CL-TEST::SYMBOL-MOD
 CL-TEST::SYMBOL-MOST-NEGATIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-FIXNUM
 CL-TEST::SYMBOL-MOST-NEGATIVE-LONG-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-MOST-NEGATIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-DOUBLE-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-FIXNUM
 CL-TEST::SYMBOL-MOST-POSITIVE-LONG-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-SHORT-FLOAT
 CL-TEST::SYMBOL-MOST-POSITIVE-SINGLE-FLOAT
 CL-TEST::SYMBOL-MUFFLE-WARNING
 CL-TEST::SYMBOL-MULTIPLE-VALUE-BIND
 CL-TEST::SYMBOL-MULTIPLE-VALUE-CALL
 CL-TEST::SYMBOL-MULTIPLE-VALUE-LIST
 CL-TEST::SYMBOL-MULTIPLE-VALUE-PROG1
 CL-TEST::SYMBOL-MULTIPLE-VALUE-SETQ
 CL-TEST::SYMBOL-MULTIPLE-VALUES-LIMIT
 CL-TEST::SYMBOL-NAME-CHAR
 CL-TEST::SYMBOL-NAMESTRING
 CL-TEST::SYMBOL-NBUTLAST
 CL-TEST::SYMBOL-NCONC
 CL-TEST::SYMBOL-NEXT-METHOD-P
 CL-TEST::SYMBOL-NIL
 CL-TEST::SYMBOL-NINTERSECTION
 CL-TEST::SYMBOL-NINTH
 CL-TEST::SYMBOL-NO-APPLICABLE-METHOD
 CL-TEST::SYMBOL-NO-NEXT-METHOD
 CL-TEST::SYMBOL-NOT
 CL-TEST::SYMBOL-NOTANY
 CL-TEST::SYMBOL-NOTEVERY
 CL-TEST::SYMBOL-NOTINLINE
 CL-TEST::SYMBOL-NRECONC
 CL-TEST::SYMBOL-NREVERSE
 CL-TEST::SYMBOL-NSET-DIFFERENCE
 CL-TEST::SYMBOL-NSET-EXCLUSIVE-OR
 CL-TEST::SYMBOL-NSTRING-CAPITALIZE
 CL-TEST::SYMBOL-NSTRING-DOWNCASE
 CL-TEST::SYMBOL-NSTRING-UPCASE
 CL-TEST::SYMBOL-NSUBLIS
 CL-TEST::SYMBOL-NSUBST
 CL-TEST::SYMBOL-NSUBST-IF
 CL-TEST::SYMBOL-NSUBST-IF-NOT
 CL-TEST::SYMBOL-NSUBSTITUTE
 CL-TEST::SYMBOL-NSUBSTITUTE-IF
 CL-TEST::SYMBOL-NSUBSTITUTE-IF-NOT
 CL-TEST::SYMBOL-NTH
 CL-TEST::SYMBOL-NTH-VALUE
 CL-TEST::SYMBOL-NTHCDR
 CL-TEST::SYMBOL-NULL
 CL-TEST::SYMBOL-NUMBER
 CL-TEST::SYMBOL-NUMBERP
 CL-TEST::SYMBOL-NUMERATOR
 CL-TEST::SYMBOL-NUNION
 CL-TEST::SYMBOL-ODDP
 CL-TEST::SYMBOL-OPEN
 CL-TEST::SYMBOL-OPEN-STREAM-P
 CL-TEST::SYMBOL-OPTIMIZE
 CL-TEST::SYMBOL-OR
 CL-TEST::SYMBOL-OTHERWISE
 CL-TEST::SYMBOL-OUTPUT-STREAM-P
 SYMBOL-PACKAGE
 CL-TEST::SYMBOL-PACKAGE-ERROR
 CL-TEST::SYMBOL-PACKAGE-ERROR-PACKAGE
 CL-TEST::SYMBOL-PACKAGE-NAME
 CL-TEST::SYMBOL-PACKAGE-NICKNAMES
 CL-TEST::SYMBOL-PACKAGE-SHADOWING-SYMBOLS
 CL-TEST::SYMBOL-PACKAGE-USE-LIST
 CL-TEST::SYMBOL-PACKAGE-USED-BY-LIST
 CL-TEST::SYMBOL-PACKAGEP
 CL-TEST::SYMBOL-PAIRLIS
 CL-TEST::SYMBOL-PARSE-ERROR
 CL-TEST::SYMBOL-PARSE-INTEGER
 CL-TEST::SYMBOL-PARSE-NAMESTRING
 CL-TEST::SYMBOL-PATHNAME
 CL-TEST::SYMBOL-PATHNAME-DEVICE
 CL-TEST::SYMBOL-PATHNAME-DIRECTORY
 CL-TEST::SYMBOL-PATHNAME-HOST
 CL-TEST::SYMBOL-PATHNAME-MATCH-P
 CL-TEST::SYMBOL-PATHNAME-NAME
 CL-TEST::SYMBOL-PATHNAME-TYPE
 CL-TEST::SYMBOL-PATHNAME-VERSION
 CL-TEST::SYMBOL-PATHNAMEP
 CL-TEST::SYMBOL-PEEK-CHAR
 CL-TEST::SYMBOL-PHASE
 CL-TEST::SYMBOL-PI
 CL-TEST::SYMBOL-PLUSP
 CL-TEST::SYMBOL-POP
 CL-TEST::SYMBOL-POSITION
 CL-TEST::SYMBOL-POSITION-IF
 CL-TEST::SYMBOL-POSITION-IF-NOT
 CL-TEST::SYMBOL-PPRINT
 CL-TEST::SYMBOL-PPRINT-DISPATCH
 CL-TEST::SYMBOL-PPRINT-EXIT-IF-LIST-EXHAUSTED
 CL-TEST::SYMBOL-PPRINT-FILL
 CL-TEST::SYMBOL-PPRINT-INDENT
 CL-TEST::SYMBOL-PPRINT-LINEAR
 CL-TEST::SYMBOL-PPRINT-LOGICAL-BLOCK
 CL-TEST::SYMBOL-PPRINT-NEWLINE
 CL-TEST::SYMBOL-PPRINT-POP
 CL-TEST::SYMBOL-PPRINT-TAB
 CL-TEST::SYMBOL-PPRINT-TABULAR
 CL-TEST::SYMBOL-PRIN1
 CL-TEST::SYMBOL-PRIN1-TO-STRING
 CL-TEST::SYMBOL-PRINC
 CL-TEST::SYMBOL-PRINC-TO-STRING
 CL-TEST::SYMBOL-PRINT
 CL-TEST::SYMBOL-PRINT-NOT-READABLE
 CL-TEST::SYMBOL-PRINT-NOT-READABLE-OBJECT
 CL-TEST::SYMBOL-PRINT-OBJECT
 CL-TEST::SYMBOL-PRINT-UNREADABLE-OBJECT
 CL-TEST::SYMBOL-PROBE-FILE
 CL-TEST::SYMBOL-PROCLAIM
 CL-TEST::SYMBOL-PROG
 CL-TEST::SYMBOL-PROG*
 CL-TEST::SYMBOL-PROG1
 CL-TEST::SYMBOL-PROG2
 CL-TEST::SYMBOL-PROGN
 CL-TEST::SYMBOL-PROGRAM-ERROR
 CL-TEST::SYMBOL-PROGV
 CL-TEST::SYMBOL-PROVIDE
 CL-TEST::SYMBOL-PSETF
 CL-TEST::SYMBOL-PSETQ
 CL-TEST::SYMBOL-PUSH
 CL-TEST::SYMBOL-PUSHNEW
 CL-TEST::SYMBOL-QUOTE
 CL-TEST::SYMBOL-RANDOM
 CL-TEST::SYMBOL-RANDOM-STATE
 CL-TEST::SYMBOL-RANDOM-STATE-P
 CL-TEST::SYMBOL-RASSOC
 CL-TEST::SYMBOL-RASSOC-IF
 CL-TEST::SYMBOL-RASSOC-IF-NOT
 CL-TEST::SYMBOL-RATIO
 CL-TEST::SYMBOL-RATIONAL
 CL-TEST::SYMBOL-RATIONALIZE
 CL-TEST::SYMBOL-RATIONALP
 CL-TEST::SYMBOL-READ
 CL-TEST::SYMBOL-READ-BYTE
 CL-TEST::SYMBOL-READ-CHAR
 CL-TEST::SYMBOL-READ-CHAR-NO-HANG
 CL-TEST::SYMBOL-READ-DELIMITED-LIST
 CL-TEST::SYMBOL-READ-FROM-STRING
 CL-TEST::SYMBOL-READ-LINE
 CL-TEST::SYMBOL-READ-PRESERVING-WHITESPACE
 CL-TEST::SYMBOL-READ-SEQUENCE
 CL-TEST::SYMBOL-READER-ERROR
 CL-TEST::SYMBOL-READTABLE
 CL-TEST::SYMBOL-READTABLE-CASE
 CL-TEST::SYMBOL-READTABLEP
 CL-TEST::SYMBOL-REAL
 CL-TEST::SYMBOL-REALP
 CL-TEST::SYMBOL-REALPART
 CL-TEST::SYMBOL-REDUCE
 CL-TEST::SYMBOL-REINITIALIZE-INSTANCE
 CL-TEST::SYMBOL-REM
 CL-TEST::SYMBOL-REMF
 CL-TEST::SYMBOL-REMHASH
 CL-TEST::SYMBOL-REMOVE
 CL-TEST::SYMBOL-REMOVE-DUPLICATES
 CL-TEST::SYMBOL-REMOVE-IF
 CL-TEST::SYMBOL-REMOVE-IF-NOT
 CL-TEST::SYMBOL-REMOVE-METHOD
 CL-TEST::SYMBOL-REMPROP
 CL-TEST::SYMBOL-RENAME-FILE
 CL-TEST::SYMBOL-RENAME-PACKAGE
 CL-TEST::SYMBOL-REPLACE
 CL-TEST::SYMBOL-REQUIRE
 CL-TEST::SYMBOL-REST
 CL-TEST::SYMBOL-RESTART
 CL-TEST::SYMBOL-RESTART-BIND
 CL-TEST::SYMBOL-RESTART-CASE
 CL-TEST::SYMBOL-RESTART-NAME
 CL-TEST::SYMBOL-RETURN
 CL-TEST::SYMBOL-RETURN-FROM
 CL-TEST::SYMBOL-REVAPPEND
 CL-TEST::SYMBOL-REVERSE
 CL-TEST::SYMBOL-ROOM
 CL-TEST::SYMBOL-ROTATEF
 CL-TEST::SYMBOL-ROUND
 CL-TEST::SYMBOL-ROW-MAJOR-AREF
 CL-TEST::SYMBOL-RPLACA
 CL-TEST::SYMBOL-RPLACD
 CL-TEST::SYMBOL-SAFETY
 CL-TEST::SYMBOL-SATISFIES
 CL-TEST::SYMBOL-SBIT
 CL-TEST::SYMBOL-SCALE-FLOAT
 CL-TEST::SYMBOL-SCHAR
 CL-TEST::SYMBOL-SEARCH
 CL-TEST::SYMBOL-SECOND
 CL-TEST::SYMBOL-SEQUENCE
 CL-TEST::SYMBOL-SERIOUS-CONDITION
 CL-TEST::SYMBOL-SET
 CL-TEST::SYMBOL-SET-DIFFERENCE
 CL-TEST::SYMBOL-SET-DISPATCH-MACRO-CHARACTER
 CL-TEST::SYMBOL-SET-EXCLUSIVE-OR
 CL-TEST::SYMBOL-SET-MACRO-CHARACTER
 CL-TEST::SYMBOL-SET-PPRINT-DISPATCH
 CL-TEST::SYMBOL-SET-SYNTAX-FROM-CHAR
 CL-TEST::SYMBOL-SETF
 CL-TEST::SYMBOL-SETQ
 CL-TEST::SYMBOL-SEVENTH
 CL-TEST::SYMBOL-SHADOW
 CL-TEST::SYMBOL-SHADOWING-IMPORT
 CL-TEST::SYMBOL-SHARED-INITIALIZE
 CL-TEST::SYMBOL-SHIFTF
 CL-TEST::SYMBOL-SHORT-FLOAT
 CL-TEST::SYMBOL-SHORT-FLOAT-EPSILON
 CL-TEST::SYMBOL-SHORT-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-SHORT-SITE-NAME
 CL-TEST::SYMBOL-SIGNAL
 CL-TEST::SYMBOL-SIGNED-BYTE
 CL-TEST::SYMBOL-SIGNUM
 CL-TEST::SYMBOL-SIMPLE-ARRAY
 CL-TEST::SYMBOL-SIMPLE-BASE-STRING
 CL-TEST::SYMBOL-SIMPLE-BIT-VECTOR
 CL-TEST::SYMBOL-SIMPLE-BIT-VECTOR-P
 CL-TEST::SYMBOL-SIMPLE-CONDITION
 CL-TEST::SYMBOL-SIMPLE-CONDITION-FORMAT-ARGUMENTS
 CL-TEST::SYMBOL-SIMPLE-CONDITION-FORMAT-CONTROL
 CL-TEST::SYMBOL-SIMPLE-ERROR
 CL-TEST::SYMBOL-SIMPLE-STRING
 CL-TEST::SYMBOL-SIMPLE-STRING-P
 CL-TEST::SYMBOL-SIMPLE-TYPE-ERROR
 CL-TEST::SYMBOL-SIMPLE-VECTOR
 CL-TEST::SYMBOL-SIMPLE-VECTOR-P
 CL-TEST::SYMBOL-SIMPLE-WARNING
 CL-TEST::SYMBOL-SIN
 CL-TEST::SYMBOL-SINGLE-FLOAT
 CL-TEST::SYMBOL-SINGLE-FLOAT-EPSILON
 CL-TEST::SYMBOL-SINGLE-FLOAT-NEGATIVE-EPSILON
 CL-TEST::SYMBOL-SINH
 CL-TEST::SYMBOL-SIXTH
 CL-TEST::SYMBOL-SLEEP
 CL-TEST::SYMBOL-SLOT-BOUNDP
 CL-TEST::SYMBOL-SLOT-EXISTS-P
 CL-TEST::SYMBOL-SLOT-MAKUNBOUND
 CL-TEST::SYMBOL-SLOT-MISSING
 CL-TEST::SYMBOL-SLOT-UNBOUND
 CL-TEST::SYMBOL-SLOT-VALUE
 CL-TEST::SYMBOL-SOFTWARE-TYPE
 CL-TEST::SYMBOL-SOFTWARE-VERSION
 CL-TEST::SYMBOL-SOME
 CL-TEST::SYMBOL-SORT
 CL-TEST::SYMBOL-SPACE
 CL-TEST::SYMBOL-SPECIAL
 CL-TEST::SYMBOL-SPECIAL-OPERATOR-P
 CL-TEST::SYMBOL-SPEED
 CL-TEST::SYMBOL-SQRT
 CL-TEST::SYMBOL-STABLE-SORT
 CL-TEST::SYMBOL-STANDARD
 CL-TEST::SYMBOL-STANDARD-CHAR
 CL-TEST::SYMBOL-STANDARD-CHAR-P
 CL-TEST::SYMBOL-STANDARD-CLASS
 CL-TEST::SYMBOL-STANDARD-GENERIC-FUNCTION
 CL-TEST::SYMBOL-STANDARD-METHOD
 CL-TEST::SYMBOL-STANDARD-OBJECT
 CL-TEST::SYMBOL-STEP
 CL-TEST::SYMBOL-STORAGE-CONDITION
 CL-TEST::SYMBOL-STORE-VALUE
 CL-TEST::SYMBOL-STREAM
 CL-TEST::SYMBOL-STREAM-ELEMENT-TYPE
 CL-TEST::SYMBOL-STREAM-ERROR
 CL-TEST::SYMBOL-STREAM-ERROR-STREAM
 CL-TEST::SYMBOL-STREAM-EXTERNAL-FORMAT
 CL-TEST::SYMBOL-STREAMP
 CL-TEST::SYMBOL-STRING
 CL-TEST::SYMBOL-STRING-CAPITALIZE
 CL-TEST::SYMBOL-STRING-DOWNCASE
 CL-TEST::SYMBOL-STRING-EQUAL
 CL-TEST::SYMBOL-STRING-GREATERP
 CL-TEST::SYMBOL-STRING-LEFT-TRIM
 CL-TEST::SYMBOL-STRING-LESSP
 CL-TEST::SYMBOL-STRING-NOT-EQUAL
 CL-TEST::SYMBOL-STRING-NOT-GREATERP
 CL-TEST::SYMBOL-STRING-NOT-LESSP
 CL-TEST::SYMBOL-STRING-RIGHT-TRIM
 CL-TEST::SYMBOL-STRING-STREAM
 CL-TEST::SYMBOL-STRING-TRIM
 CL-TEST::SYMBOL-STRING-UPCASE
 CL-TEST::SYMBOL-STRING/=
 CL-TEST::SYMBOL-STRING<
 CL-TEST::SYMBOL-STRING<=
 CL-TEST::SYMBOL-STRING=
 CL-TEST::SYMBOL-STRING>
 CL-TEST::SYMBOL-STRING>=
 CL-TEST::SYMBOL-STRINGP
 CL-TEST::SYMBOL-STRUCTURE
 CL-TEST::SYMBOL-STRUCTURE-CLASS
 CL-TEST::SYMBOL-STRUCTURE-OBJECT
 CL-TEST::SYMBOL-STYLE-WARNING
 CL-TEST::SYMBOL-SUBLIS
 CL-TEST::SYMBOL-SUBSEQ
 CL-TEST::SYMBOL-SUBSETP
 CL-TEST::SYMBOL-SUBST
 CL-TEST::SYMBOL-SUBST-IF
 CL-TEST::SYMBOL-SUBST-IF-NOT
 CL-TEST::SYMBOL-SUBSTITUTE
 CL-TEST::SYMBOL-SUBSTITUTE-IF
 CL-TEST::SYMBOL-SUBSTITUTE-IF-NOT
 CL-TEST::SYMBOL-SUBTYPEP
 CL-TEST::SYMBOL-SVREF
 CL-TEST::SYMBOL-SXHASH
 CL-TEST::SYMBOL-SYMBOL
 CL-TEST::SYMBOL-SYMBOL-FUNCTION
 CL-TEST::SYMBOL-SYMBOL-MACROLET
 CL-TEST::SYMBOL-SYMBOL-NAME
 CL-TEST::SYMBOL-SYMBOL-PACKAGE
 CL-TEST::SYMBOL-SYMBOL-PLIST
 CL-TEST::SYMBOL-SYMBOL-VALUE
 CL-TEST::SYMBOL-SYMBOLP
 CL-TEST::SYMBOL-SYNONYM-STREAM
 CL-TEST::SYMBOL-SYNONYM-STREAM-SYMBOL
 CL-TEST::SYMBOL-T
 CL-TEST::SYMBOL-TAGBODY
 CL-TEST::SYMBOL-TAILP
 CL-TEST::SYMBOL-TAN
 CL-TEST::SYMBOL-TANH
 CL-TEST::SYMBOL-TENTH
 CL-TEST::SYMBOL-TERPRI
 CL-TEST::SYMBOL-THE
 CL-TEST::SYMBOL-THIRD
 CL-TEST::SYMBOL-THROW
 CL-TEST::SYMBOL-TIME
 CL-TEST::SYMBOL-TRACE
 CL-TEST::SYMBOL-TRANSLATE-LOGICAL-PATHNAME
 CL-TEST::SYMBOL-TRANSLATE-PATHNAME
 CL-TEST::SYMBOL-TREE-EQUAL
 CL-TEST::SYMBOL-TRUENAME
 CL-TEST::SYMBOL-TRUNCATE
 CL-TEST::SYMBOL-TWO-WAY-STREAM
 CL-TEST::SYMBOL-TWO-WAY-STREAM-INPUT-STREAM
 CL-TEST::SYMBOL-TWO-WAY-STREAM-OUTPUT-STREAM
 CL-TEST::SYMBOL-TYPE
 CL-TEST::SYMBOL-TYPE-ERROR
 CL-TEST::SYMBOL-TYPE-ERROR-DATUM
 CL-TEST::SYMBOL-TYPE-ERROR-EXPECTED-TYPE
 CL-TEST::SYMBOL-TYPE-OF
 CL-TEST::SYMBOL-TYPECASE
 CL-TEST::SYMBOL-TYPEP
 CL-TEST::SYMBOL-UNBOUND-SLOT
 CL-TEST::SYMBOL-UNBOUND-SLOT-INSTANCE
 CL-TEST::SYMBOL-UNBOUND-VARIABLE
 CL-TEST::SYMBOL-UNDEFINED-FUNCTION
 CL-TEST::SYMBOL-UNEXPORT
 CL-TEST::SYMBOL-UNINTERN
 CL-TEST::SYMBOL-UNION
 CL-TEST::SYMBOL-UNLESS
 CL-TEST::SYMBOL-UNREAD-CHAR
 CL-TEST::SYMBOL-UNSIGNED-BYTE
 CL-TEST::SYMBOL-UNTRACE
 CL-TEST::SYMBOL-UNUSE-PACKAGE
 CL-TEST::SYMBOL-UNWIND-PROTECT
 CL-TEST::SYMBOL-UPDATE-INSTANCE-FOR-DIFFERENT-CLASS
 CL-TEST::SYMBOL-UPDATE-INSTANCE-FOR-REDEFINED-CLASS
 CL-TEST::SYMBOL-UPGRADED-ARRAY-ELEMENT-TYPE
 CL-TEST::SYMBOL-UPGRADED-COMPLEX-PART-TYPE
 CL-TEST::SYMBOL-UPPER-CASE-P
 CL-TEST::SYMBOL-USE-PACKAGE
 CL-TEST::SYMBOL-USE-VALUE
 CL-TEST::SYMBOL-USER-HOMEDIR-PATHNAME
 CL-TEST::SYMBOL-VALUES
 CL-TEST::SYMBOL-VALUES-LIST
 CL-TEST::SYMBOL-VARIABLE
 CL-TEST::SYMBOL-VECTOR
 CL-TEST::SYMBOL-VECTOR-POP
 CL-TEST::SYMBOL-VECTOR-PUSH
 CL-TEST::SYMBOL-VECTOR-PUSH-EXTEND
 CL-TEST::SYMBOL-VECTORP
 CL-TEST::SYMBOL-WARN
 CL-TEST::SYMBOL-WARNING
 CL-TEST::SYMBOL-WHEN
 CL-TEST::SYMBOL-WILD-PATHNAME-P
 CL-TEST::SYMBOL-WITH-ACCESSORS
 CL-TEST::SYMBOL-WITH-COMPILATION-UNIT
 CL-TEST::SYMBOL-WITH-CONDITION-RESTARTS
 CL-TEST::SYMBOL-WITH-HASH-TABLE-ITERATOR
 CL-TEST::SYMBOL-WITH-INPUT-FROM-STRING
 CL-TEST::SYMBOL-WITH-OPEN-FILE
 CL-TEST::SYMBOL-WITH-OPEN-STREAM
 CL-TEST::SYMBOL-WITH-OUTPUT-TO-STRING
 CL-TEST::SYMBOL-WITH-PACKAGE-ITERATOR
 CL-TEST::SYMBOL-WITH-SIMPLE-RESTART
 CL-TEST::SYMBOL-WITH-SLOTS
 CL-TEST::SYMBOL-WITH-STANDARD-IO-SYNTAX
 CL-TEST::SYMBOL-WRITE
 CL-TEST::SYMBOL-WRITE-BYTE
 CL-TEST::SYMBOL-WRITE-CHAR
 CL-TEST::SYMBOL-WRITE-LINE
 CL-TEST::SYMBOL-WRITE-SEQUENCE
 CL-TEST::SYMBOL-WRITE-STRING
 CL-TEST::SYMBOL-WRITE-TO-STRING
 CL-TEST::SYMBOL-Y-OR-N-P
 CL-TEST::SYMBOL-YES-OR-NO-P
 CL-TEST::SYMBOL-ZEROP
 CL-TEST::KEYWORD-PACKAGE-NICKNAMES
 CL-TEST::COMMON-LISP-PACKAGE-NICKNAMES
 CL-TEST::COMMON-LISP-USER-PACKAGE-NICKNAMES
 CL-TEST::NO-EXTRA-SYMBOLS-EXPORTED-FROM-COMMON-LISP
 CL-TEST::KEYWORD-BEHAVIOR
Test CL-TEST::CL-FUNCTION-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN (APPEND CL-TEST::*CL-FUNCTION-SYMBOLS* CL-TEST::*CL-ACCESSOR-SYMBOLS*) WHEN (OR (NOT (FBOUNDP CL-TEST::S)) (MACRO-FUNCTION CL-TEST::S) (SPECIAL-OPERATOR-P CL-TEST::S) (NOT (SYMBOL-FUNCTION CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ACOS ACOSH ASIN ASINH ASSOC-IF-NOT ASSOC-IF ATANH BIT-AND BIT-ANDC1 BIT-ANDC2 BIT-EQV BIT-IOR BIT-NAND BIT-NOR BIT-NOT BIT-ORC1 BIT-ORC2 BIT-XOR CHAR-NOT-EQUAL CHAR/= CHARACTER CIS CONCATENATED-STREAM-STREAMS CONJUGATE COPY-ALIST COPY-SYMBOL COPY-TREE COSH DECODE-UNIVERSAL-TIME DELETE-IF-NOT DIGIT-CHAR DISASSEMBLE DRIBBLE ENOUGH-NAMESTRING EXP FCEILING FFLOOR FILE-AUTHOR FILE-STRING-LENGTH FLOAT-DIGITS FLOAT-PRECISION FLOAT-SIGN FROUND GET-DECODED-TIME HOST-NAMESTRING INPUT-STREAM-P INSPECT INTERACTIVE-STREAM-P INVALID-METHOD-ERROR ISQRT LCM LOAD-LOGICAL-PATHNAME-TRANSLATIONS LOGCOUNT LOGICAL-PATHNAME MAKE-CONCATENATED-STREAM MAKE-LOAD-FORM-SAVING-SLOTS MAP-INTO MAPCON MAPL MEMBER-IF-NOT METHOD-COMBINATION-ERROR NBUTLAST NINTERSECTION NSET-DIFFERENCE NSET-EXCLUSIVE-OR NSTRING-CAPITALIZE NSUBLIS NSUBST NSUBST-IF NSUBST-IF-NOT NSUBSTITUTE NSUBSTITUTE-IF NSUBSTITUTE-IF-NOT NUNION OPEN-STREAM-P OUTPUT-STREAM-P PACKAGE-SHADOWING-SYMBOLS PHASE PPRINT-DISPATCH PPRINT-FILL PPRINT-LINEAR PPRINT-TABULAR RASSOC RASSOC-IF RASSOC-IF-NOT READ-DELIMITED-LIST SCALE-FLOAT SET-EXCLUSIVE-OR SHADOWING-IMPORT SIMPLE-BIT-VECTOR-P SINH STREAM-EXTERNAL-FORMAT STRING-CAPITALIZE STRING-GREATERP STRING-LESSP STRING-NOT-EQUAL STRING-NOT-GREATERP STRING-NOT-LESSP STRING/= STRING<= STRING> STRING>= SUBSETP SUBST-IF SUBST-IF-NOT SUBSTITUTE-IF-NOT TAN TANH TREE-EQUAL FTRUNCATE UNBOUND-SLOT-INSTANCE UNEXPORT UNUSE-PACKAGE UPGRADED-COMPLEX-PART-TYPE LOGICAL-PATHNAME-TRANSLATIONS)
Test CL-TEST::CL-MACRO-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* WHEN (OR (NOT (FBOUNDP CL-TEST::S)) (NOT (MACRO-FUNCTION CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO FORMATTER REMF STEP CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS)
Test CL-TEST::CL-CONSTANT-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-CONSTANT-SYMBOLS* WHEN (OR (NOT (BOUNDP CL-TEST::S)) (NOT (CONSTANTP CL-TEST::S))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (DOUBLE-FLOAT-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-DOUBLE-FLOAT LEAST-NEGATIVE-NORMALIZED-LONG-FLOAT LEAST-NEGATIVE-NORMALIZED-SHORT-FLOAT LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-DOUBLE-FLOAT LEAST-POSITIVE-NORMALIZED-LONG-FLOAT LEAST-POSITIVE-NORMALIZED-SHORT-FLOAT LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LONG-FLOAT-EPSILON LONG-FLOAT-NEGATIVE-EPSILON SHORT-FLOAT-EPSILON SHORT-FLOAT-NEGATIVE-EPSILON SINGLE-FLOAT-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON)
Test CL-TEST::CL-VARIABLE-SYMBOLS.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-VARIABLE-SYMBOLS* WHEN (NOT (BOUNDP CL-TEST::S)) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (-)
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (FIND-CLASS CL-TEST::S NIL) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PATHNAME PRINT-NOT-READABLE PROGRAM-ERROR RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING)
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (FIND-CLASS CL-TEST::S NIL NIL) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          (ARITHMETIC-ERROR ARRAY BIT-VECTOR BROADCAST-STREAM BUILT-IN-CLASS CELL-ERROR CHARACTER CLASS CONCATENATED-STREAM CONDITION CONS CONTROL-ERROR DIVISION-BY-ZERO ECHO-STREAM END-OF-FILE ERROR FILE-ERROR FILE-STREAM FLOAT FLOATING-POINT-INEXACT FLOATING-POINT-INVALID-OPERATION FLOATING-POINT-OVERFLOW FLOATING-POINT-UNDERFLOW FUNCTION GENERIC-FUNCTION INTEGER LIST LOGICAL-PATHNAME METHOD METHOD-COMBINATION NULL NUMBER PACKAGE-ERROR PARSE-ERROR PATHNAME PRINT-NOT-READABLE PROGRAM-ERROR RATIONAL READER-ERROR REAL SEQUENCE SERIOUS-CONDITION SIMPLE-CONDITION SIMPLE-ERROR SIMPLE-TYPE-ERROR SIMPLE-WARNING STANDARD-CLASS STANDARD-GENERIC-FUNCTION STANDARD-METHOD STANDARD-OBJECT STORAGE-CONDITION STREAM STREAM-ERROR STRING STRING-STREAM STRUCTURE-CLASS STYLE-WARNING SYMBOL T TWO-WAY-STREAM TYPE-ERROR UNBOUND-SLOT UNBOUND-VARIABLE UNDEFINED-FUNCTION VECTOR WARNING)
Test CL-TEST::CL-TYPES-THAT-ARE-CLASSES.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::S CL-TEST::IN CL-TEST::*CL-TYPES-THAT-ARE-CLASSES-SYMBOLS* CL-TEST::FOR CL-TEST::C = (EVAL (BACKQUOTE (MACROLET ((CL-TEST::%FOO (&ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (FIND-CLASS (QUOTE (BQ-COMMA CL-TEST::S)) NIL CL-TEST::ENV)))) (CL-TEST::%FOO)))) UNLESS (AND CL-TEST::C (EQ (CLASS-NAME CL-TEST::C) CL-TEST::S) (TYPEP CL-TEST::C (QUOTE CLASS))) CL-TEST::COLLECT CL-TEST::S)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::SYMBOL-PACKAGE.ERROR.1
 CL-TEST::SYMBOL-PACKAGE.ERROR.2
 CL-TEST::SYMBOL-PACKAGE.ERROR.3
 CL-TEST::SYMBOL-PLIST.ERROR.1
 CL-TEST::SYMBOL-PLIST.ERROR.2
 CL-TEST::SYMBOL-PLIST.ERROR.3
 CL-TEST::SYMBOL-PLIST.ERROR.4
 CL-TEST::SYMBOL-VALUE.ERROR.1
 CL-TEST::SYMBOL-VALUE.ERROR.2
 CL-TEST::SYMBOL-VALUE.ERROR.3
 CL-TEST::SYMBOL-VALUE.ERROR.4
 CL-TEST::SYMBOL-VALUE.ERROR.5
 CL-TEST::SYMBOLP.1
 CL-TEST::SYMBOLP.2
 CL-TEST::SYMBOLP.3
 CL-TEST::SYMBOLP.ERROR.1
 CL-TEST::SYMBOLP.ERROR.2
 CL-TEST::KEYWORDP.1
 CL-TEST::KEYWORDP.2
 CL-TEST::KEYWORDP.3
 CL-TEST::KEYWORDP.4
 CL-TEST::KEYWORDP.5
 CL-TEST::KEYWORDP.6
 CL-TEST::KEYWORDP.7
 CL-TEST::KEYWORDP.8
 CL-TEST::KEYWORDP.9
 CL-TEST::KEYWORDP.10
 CL-TEST::KEYWORDP.12
 CL-TEST::KEYWORDP.13
 CL-TEST::KEYWORDP.ORDER.1
 CL-TEST::KEYWORDP.ERROR.1
 CL-TEST::KEYWORDP.ERROR.2
 CL-TEST::MAKE-SYMBOL.1
 CL-TEST::MAKE-SYMBOL.2
 CL-TEST::MAKE-SYMBOL.3
 CL-TEST::MAKE-SYMBOL.4
 CL-TEST::MAKE-SYMBOL.5
 CL-TEST::MAKE-SYMBOL.6
 CL-TEST::MAKE-SYMBOL.7
 CL-TEST::MAKE-SYMBOL.8
 CL-TEST::MAKE-SYMBOL.9
 CL-TEST::MAKE-SYMBOL.10
 CL-TEST::MAKE-SYMBOL.12
 CL-TEST::MAKE-SYMBOL.13
 CL-TEST::MAKE-SYMBOL.14
Test CL-TEST::MAKE-SYMBOL.15 failed
Form: (LET* ((CL-TEST::NAME0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (#\0 #\A #\B #\C #\D #\E)) :ELEMENT-TYPE (QUOTE CHARACTER))) (CL-TEST::NAME (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 1)) (CL-TEST::S (MAKE-SYMBOL CL-TEST::NAME)) (CL-TEST::NAME2 (SYMBOL-NAME CL-TEST::S))) (VALUES (SYMBOL-PACKAGE CL-TEST::S) (CL-TEST::STRING=T CL-TEST::NAME2 "ABCD")))
Expected values:
          NIL
          T
Actual value:
          #<Simple-Type-Error The value of MEZZANINE.RUNTIME::NAME is #(#\A #\B #\C #\D), which is not of type STRING.> [Actual value: #<error during printing>
Test CL-TEST::MAKE-SYMBOL.16 failed
Form: (LET* ((CL-TEST::NAME0 (MAKE-ARRAY (QUOTE (6)) :INITIAL-CONTENTS (QUOTE (#\0 #\A #\B #\C #\D #\E)) :ELEMENT-TYPE (QUOTE BASE-CHAR))) (CL-TEST::NAME (MAKE-ARRAY (QUOTE (4)) :ELEMENT-TYPE (QUOTE BASE-CHAR) :DISPLACED-TO CL-TEST::NAME0 :DISPLACED-INDEX-OFFSET 1)) (CL-TEST::S (MAKE-SYMBOL CL-TEST::NAME)) (CL-TEST::NAME2 (SYMBOL-NAME CL-TEST::S))) (VALUES (SYMBOL-PACKAGE CL-TEST::S) (CL-TEST::STRING=T CL-TEST::NAME2 "ABCD")))
Expected values:
          NIL
          T
Actual value:
          #<Simple-Type-Error The value of MEZZANINE.RUNTIME::NAME is #(#\A #\B #\C #\D), which is not of type STRING.> [Actual value: #<error during printing>

 CL-TEST::MAKE-SYMBOL.ORDER.1
 CL-TEST::MAKE-SYMBOL.ERROR.1
 CL-TEST::MAKE-SYMBOL.ERROR.9
 CL-TEST::MAKE-SYMBOL.ERROR.10
 CL-TEST::MAKE-SYMBOL.ERROR.11
Test CL-TEST::COPY-SYMBOL.1 failed
Form: (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X))) (AND (NULL (SYMBOL-PLIST CL-TEST::Y)) (SYMBOLP CL-TEST::Y) (NOT (BOUNDP CL-TEST::Y)) (NOT (FBOUNDP CL-TEST::Y)) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X) (SYMBOL-NAME CL-TEST::Y)) (SYMBOLP (COPY-SYMBOL CL-TEST::Y)))))) (QUOTE (NIL T CL-TEST::A CL-TEST::B CL-TEST::\a CL-TEST::123))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::COPY-SYMBOL.2 failed
Form: (PROGN (SETF (SYMBOL-PLIST (QUOTE CL-TEST::\f\o\o)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (MAKUNBOUND (QUOTE CL-TEST::\f\o\o)) (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X T))) (AND (EQUAL (SYMBOL-PLIST CL-TEST::Y) (SYMBOL-PLIST CL-TEST::X)) (SYMBOLP CL-TEST::Y) (IF (BOUNDP CL-TEST::X) (BOUNDP CL-TEST::Y) (NOT (BOUNDP CL-TEST::Y))) (IF (FBOUNDP CL-TEST::X) (FBOUNDP CL-TEST::Y) (NOT (FBOUNDP CL-TEST::Y))) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X) (SYMBOL-NAME CL-TEST::Y)))))) (QUOTE (NIL T CL-TEST::A CL-TEST::B CL-TEST::\f\o\o CL-TEST::\a CL-TEST::123)))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::COPY-SYMBOL.3 failed
Form: (PROGN (SETF (SYMBOL-PLIST (QUOTE CL-TEST::\f\o\o)) (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (SETF (SYMBOL-VALUE (QUOTE CL-TEST::\a)) 12345) (CL-TEST::NOTNOT-MV (EVERY (FUNCTION (LAMBDA (CL-TEST::X) (LET ((CL-TEST::Y (COPY-SYMBOL CL-TEST::X T))) (AND (EQL (LENGTH (SYMBOL-PLIST CL-TEST::Y)) (LENGTH (SYMBOL-PLIST CL-TEST::X))) (EVERY (FUNCTION EQ) (SYMBOL-PLIST CL-TEST::Y) (SYMBOL-PLIST CL-TEST::X)) (SYMBOLP CL-TEST::Y) (IF (BOUNDP CL-TEST::X) (CL-TEST::EQT (SYMBOL-VALUE CL-TEST::X) (SYMBOL-VALUE CL-TEST::Y)) (NOT (BOUNDP CL-TEST::Y))) (IF (FBOUNDP CL-TEST::X) (FBOUNDP CL-TEST::Y) (NOT (FBOUNDP CL-TEST::Y))) (NULL (SYMBOL-PACKAGE CL-TEST::Y)) (STRING= (SYMBOL-NAME CL-TEST::X) (SYMBOL-NAME CL-TEST::Y)) (EQL (LENGTH (SYMBOL-PLIST CL-TEST::X)) (LENGTH (SYMBOL-PLIST CL-TEST::Y))))))) (QUOTE (NIL T CL-TEST::A CL-TEST::B CL-TEST::\f\o\o CL-TEST::\a CL-TEST::123)))))
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::COPY-SYMBOL.4 failed
Form: (CL-TEST::EQT (COPY-SYMBOL (QUOTE CL-TEST::A)) (COPY-SYMBOL (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::COPY-SYMBOL.5 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y (CL-TEST::S (QUOTE #:\x))) (LET ((CL-TEST::S2 (COPY-SYMBOL (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) CL-TEST::S) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) NIL)))) (VALUES (SYMBOL-NAME CL-TEST::S2) (EQ CL-TEST::S CL-TEST::S2) CL-TEST::I CL-TEST::X CL-TEST::Y)))
Expected values:
          "x"
          NIL
          2
          1
          2
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::COPY-SYMBOL.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-SYMBOL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::COPY-SYMBOL.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (COPY-SYMBOL (QUOTE CL-TEST::A) T (QUOTE CL-TEST::FOO)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function COPY-SYMBOL> [Actual value: #<error during printing>

 CL-TEST::GENSYM.1
 CL-TEST::GENSYM.2
 CL-TEST::GENSYM.3
 CL-TEST::GENSYM.4
 CL-TEST::GENSYM.5
 CL-TEST::GENSYM.6
 CL-TEST::GENSYM.7
 CL-TEST::GENSYM.8
 CL-TEST::GENSYM.9
 CL-TEST::GENSYM.10
Test CL-TEST::GENSYM.11 failed
Form: (LET ((*GENSYM-COUNTER* 12345678901234567890123456789012345678901234567890)) (GENSYM) *GENSYM-COUNTER*)
Expected value:
          12345678901234567890123456789012345678901234567891
Actual value:
          12345678901234567890123456789012345678901234567891

 CL-TEST::GENSYM.12
 CL-TEST::GENSYM.13
 CL-TEST::GENSYM-COUNTER.1
 CL-TEST::GENSYM.ERROR.1
 CL-TEST::GENSYM.ERROR.7
 CL-TEST::GENSYM.ERROR.8
 CL-TEST::GENSYM.ERROR.9
 CL-TEST::GENTEMP.1
 CL-TEST::GENTEMP.2
 CL-TEST::GENTEMP.3
 CL-TEST::GENTEMP.4
 CL-TEST::GENTEMP.5
 CL-TEST::GENTEMP.6
 CL-TEST::GENTEMP.ERROR.1
 CL-TEST::GENTEMP.ERROR.2
 CL-TEST::GENTEMP.ERROR.3
Test CL-TEST::SYMBOL-FUNCTION.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM)) (CL-TEST::F (FUNCTION (LAMBDA NIL (VALUES 1 2 3))))) (VALUES (CL-TEST::EQT (SETF (SYMBOL-FUNCTION CL-TEST::SYM) CL-TEST::F) CL-TEST::F) (MULTIPLE-VALUE-LIST (EVAL (LIST CL-TEST::SYM)))))
Expected values:
          T
          (1 2 3)
Actual values:
          NIL
          (1 2 3)

 CL-TEST::SYMBOL-FUNCTION.ERROR.1
 CL-TEST::SYMBOL-FUNCTION.ERROR.2
 CL-TEST::SYMBOL-FUNCTION.ERROR.3
 CL-TEST::SYMBOL-FUNCTION.ERROR.4
 CL-TEST::SYMBOL-FUNCTION.ERROR.5
 CL-TEST::SYMBOL-NAME.1
 CL-TEST::SYMBOL-NAME.2
 CL-TEST::SYMBOL-NAME.3
 CL-TEST::SYMBOL-NAME.ERROR.1
 CL-TEST::SYMBOL-NAME.ERROR.2
 CL-TEST::SYMBOL-NAME.ERROR.3
 CL-TEST::BOUNDP.ERROR.1
 CL-TEST::BOUNDP.ERROR.2
 CL-TEST::BOUNDP.ERROR.3
 CL-TEST::BOUNDP.ERROR.4
 CL-TEST::BOUNDP.ERROR.5
 CL-TEST::BOUNDP.ERROR.6
 CL-TEST::BOUNDP.1
 CL-TEST::BOUNDP.2
 CL-TEST::BOUNDP.3
 CL-TEST::BOUNDP.4
 CL-TEST::BOUNDP.5
 CL-TEST::BOUNDP.6
Test CL-TEST::BOUNDP.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X) (VALUES (BOUNDP (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (QUOTE #:FOO))) CL-TEST::I CL-TEST::X))
Expected values:
          NIL
          1
          1
Actual values:
          NIL
          1
          NIL

 CL-TEST::SPECIAL-OPERATOR-P.1
 CL-TEST::SPECIAL-OPERATOR-P.2
 CL-TEST::SPECIAL-OPERATOR-P.ORDER.1
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.1
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.2
 CL-TEST::SPECIAL-OPERATOR-P.ERROR.3
 CL-TEST::MAKUNBOUND.1
 CL-TEST::MAKUNBOUND.2
 CL-TEST::MAKUNBOUND.ERROR.1
 CL-TEST::MAKUNBOUND.ERROR.2
 CL-TEST::MAKUNBOUND.ERROR.3
 CL-TEST::SET.1
 CL-TEST::SET.2
 CL-TEST::SET.ERROR.1
 CL-TEST::SET.ERROR.2
 CL-TEST::SET.ERROR.3
 CL-TEST::SET.ERROR.4
Test CL-TEST::REMPROP.1 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (REMPROP CL-TEST::SYM :FOO)) (SYMBOL-PLIST CL-TEST::SYM)))
Expected values:
          NIL
          (NIL)
          NIL
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>
Test CL-TEST::REMPROP.2 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (QUOTE (:FOO 0)))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected values:
          NIL
          (:FOO 0)
          (T)
          NIL
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>
Test CL-TEST::REMPROP.3 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (LIST :BAR 1 :FOO 0 :BAZ 2))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (COPY-LIST (SYMBOL-PLIST CL-TEST::SYM)) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected values:
          NIL
          (:BAR 1 :FOO 0 :BAZ 2)
          (T)
          (:BAR 1 :BAZ 2)
          (NIL)
          (:BAR 1 :BAZ 2)
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>
Test CL-TEST::REMPROP.4 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (VALUES (SYMBOL-PLIST CL-TEST::SYM) (COPY-LIST (SETF (SYMBOL-PLIST CL-TEST::SYM) (LIST :BAR 1 :FOO 0 :BAZ 2 :FOO 3))) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (COPY-LIST (SYMBOL-PLIST CL-TEST::SYM)) (MULTIPLE-VALUE-LIST (CL-TEST::NOTNOT-MV (REMPROP CL-TEST::SYM :FOO))) (SYMBOL-PLIST CL-TEST::SYM)))
Expected values:
          NIL
          (:BAR 1 :FOO 0 :BAZ 2 :FOO 3)
          (T)
          (:BAR 1 :BAZ 2 :FOO 3)
          (T)
          (:BAR 1 :BAZ 2)
Actual value:
          #<Undefined-Function REMF> [Actual value: #<error during printing>

 CL-TEST::REMPROP.ERROR.1
 CL-TEST::REMPROP.ERROR.2
 CL-TEST::REMPROP.ERROR.3
 CL-TEST::REMPROP.ERROR.4
 CL-TEST::GET.1
 CL-TEST::GET.2
 CL-TEST::GET.3
 CL-TEST::GET.4
 CL-TEST::GET.5
 CL-TEST::GET.6
Test CL-TEST::GET.ORDER.1 failed
Form: (LET (CL-TEST::A CL-TEST::B (CL-TEST::I 0) (CL-TEST::SYM (GENSYM))) (SETF (GET CL-TEST::SYM :FOO) T) (VALUES (GET (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::SYM) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) :FOO)) CL-TEST::A CL-TEST::B CL-TEST::I))
Expected values:
          T
          1
          2
          2
Actual values:
          T
          NIL
          NIL
          2
Test CL-TEST::GET.ORDER.2 failed
Form: (LET (CL-TEST::A CL-TEST::B (CL-TEST::I 0) (CL-TEST::SYM (GENSYM))) (VALUES (SETF (GET (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::SYM) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) :FOO)) T) CL-TEST::A CL-TEST::B CL-TEST::I (GET CL-TEST::SYM :FOO)))
Expected values:
          T
          1
          2
          2
          T
Actual values:
          T
          NIL
          NIL
          2
          T
Test CL-TEST::GET.ORDER.3 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C (CL-TEST::I 0) (CL-TEST::SYM (GENSYM))) (SETF (GET CL-TEST::SYM :FOO) T) (VALUES (GET (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::SYM) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) :FOO) (PROGN (SETF CL-TEST::C (INCF CL-TEST::I)) NIL)) CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::I))
Expected values:
          T
          1
          2
          3
          3
Actual values:
          T
          NIL
          NIL
          NIL
          3
Test CL-TEST::GET.ORDER.4 failed
Form: (LET (CL-TEST::A CL-TEST::B CL-TEST::C (CL-TEST::I 0) (CL-TEST::SYM (GENSYM))) (VALUES (SETF (GET (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::SYM) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) :FOO) (PROGN (SETF CL-TEST::C (INCF CL-TEST::I)) NIL)) T) CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::I (GET CL-TEST::SYM :FOO)))
Expected values:
          T
          1
          2
          3
          3
          T
Actual values:
          T
          NIL
          NIL
          NIL
          3
          T

 CL-TEST::GET.ERROR.1
 CL-TEST::GET.ERROR.2
 CL-TEST::GET.ERROR.3
 CL-TEST::GET.ERROR.4
 CL-TEST::GET.ERROR.5
 CL-TEST::EVAL.1
 CL-TEST::EVAL.2
 CL-TEST::EVAL.3
 CL-TEST::EVAL.4
 CL-TEST::EVAL.5
 CL-TEST::EVAL.6
 CL-TEST::EVAL.ORDER.1
 CL-TEST::EVAL.ERROR.1
 CL-TEST::EVAL.ERROR.2
 CL-TEST::EVAL.ERROR.3
 CL-TEST::EVAL.ERROR.4
 CL-TEST::EVAL-AND-COMPILE-FNS
Test CL-TEST::EVAL-AND-COMPILE-MACROS failed
Form: (REMOVE-IF (FUNCTION MACRO-FUNCTION) CL-TEST::*EVAL-AND-COMPILE-MACROS*)
Expected value:
          NIL
Actual value:
          (DEFINE-SYMBOL-MACRO)

 CL-TEST::COMPILE.1
 CL-TEST::COMPILE.2
 CL-TEST::COMPILE.3
 CL-TEST::COMPILE.4
 CL-TEST::COMPILE.5
 CL-TEST::COMPILE.6
 CL-TEST::COMPILE.7
 CL-TEST::COMPILE.8
Test CL-TEST::COMPILE.9 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::A CL-TEST::B) (VALUES (FUNCALL (COMPILE (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) NIL) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) (QUOTE (LAMBDA NIL (QUOTE CL-TEST::Z)))))) CL-TEST::I CL-TEST::A CL-TEST::B))
Expected values:
          CL-TEST::Z
          2
          1
          2
Actual values:
          CL-TEST::Z
          2
          NIL
          NIL

 CL-TEST::COMPILE.ERROR.1
 CL-TEST::COMPILE.ERROR.2
 CL-TEST::CONSTANTP.ERROR.1
 CL-TEST::CONSTANTP.ERROR.2
 CL-TEST::CONSTANTP.1
 CL-TEST::CONSTANTP.2
 CL-TEST::CONSTANTP.3
 CL-TEST::CONSTANTP.4
 CL-TEST::CONSTANTP.5
 CL-TEST::CONSTANTP.6
 CL-TEST::CONSTANTP.7
 CL-TEST::CONSTANTP.8
 CL-TEST::CONSTANTP.9
 CL-TEST::CONSTANTP.10
Test CL-TEST::CONSTANTP.11 failed
Form: (MACROLET ((CL-TEST::MACRO-FOR-CONSTANTP.11 (CL-TEST::Y) (DECLARE (IGNORE CL-TEST::Y)) (QUOTE *STANDARD-INPUT*))) (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (IF (CONSTANTP (QUOTE (CL-TEST::MACRO-FOR-CONSTANTP.11 0)) CL-TEST::ENV) :BAD :GOOD))) (CL-TEST::%M)))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::CONSTANTP.ORDER.1
Test CL-TEST::CONSTANTP.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (CL-TEST::NOTNOT (CONSTANTP (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 1) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) NIL))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected values:
          T
          2
          1
          2
Actual values:
          T
          2
          NIL
          NIL

 CL-TEST::LAMBDA.1
 CL-TEST::LAMBDA.2
 CL-TEST::LAMBDA.3
 CL-TEST::LAMBDA.4
 CL-TEST::LAMBDA.5
 CL-TEST::LAMBDA.6
 CL-TEST::LAMBDA.7
 CL-TEST::LAMBDA.8
 CL-TEST::LAMBDA.9
 CL-TEST::LAMBDA.10
 CL-TEST::LAMBDA.11
 CL-TEST::LAMBDA.12
 CL-TEST::LAMBDA.13
 CL-TEST::LAMBDA.14
 CL-TEST::LAMBDA.15
 CL-TEST::LAMBDA.16
 CL-TEST::LAMBDA.17
 CL-TEST::LAMBDA.18
 CL-TEST::LAMBDA.19
 CL-TEST::LAMBDA.20
 CL-TEST::LAMBDA.21
 CL-TEST::LAMBDA.22
 CL-TEST::LAMBDA.23
 CL-TEST::LAMBDA.24
 CL-TEST::LAMBDA.25
 CL-TEST::LAMBDA.26
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.27 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS NIL)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.28 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS T :FOO T)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.29 failed
Form: ((LAMBDA (&KEY) (QUOTE CL-TEST::GOOD)) :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T)
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.30 failed
Form: ((LAMBDA (&KEY CL-TEST::X) CL-TEST::X) :ALLOW-OTHER-KEYS T :X 10 :ALLOW-OTHER-KEYS NIL :FOO T)
Expected value:
          10
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:X).> [Actual value: #<error during printing>

 CL-TEST::LAMBDA.31
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.32 failed
Form: ((LAMBDA (&REST CL-TEST::X &KEY) CL-TEST::X) :ALLOW-OTHER-KEYS NIL)
Expected value:
          (:ALLOW-OTHER-KEYS NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.33 failed
Form: ((LAMBDA (&REST CL-TEST::X &KEY) CL-TEST::X) :W 5 :ALLOW-OTHER-KEYS T :X 10)
Expected value:
          (:W 5 :ALLOW-OTHER-KEYS T :X 10)
Actual value:
          #<Simple-Error Unknown &KEY argument :W. Expected one of NIL.> [Actual value: #<error during printing>

 CL-TEST::LAMBDA.34
 CL-TEST::LAMBDA.35
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.36 failed
Form: ((LAMBDA (&KEY (CL-TEST::A 1 CL-TEST::A-P) (CL-TEST::B 2 CL-TEST::B-P) (CL-TEST::C 3 CL-TEST::C-P)) (LIST CL-TEST::A (CL-TEST::NOTNOT CL-TEST::A-P) CL-TEST::B (CL-TEST::NOTNOT CL-TEST::B-P) CL-TEST::C (CL-TEST::NOTNOT CL-TEST::C-P))) :C 5 :A 0 :ALLOW-OTHER-KEYS T (QUOTE CL-TEST::B) 100)
Expected value:
          (0 T 2 NIL 5 T)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:A :B :C).> [Actual value: #<error during printing>

 CL-TEST::LAMBDA.37
 CL-TEST::LAMBDA.38
 CL-TEST::LAMBDA.39
 CL-TEST::LAMBDA.40
 CL-TEST::LAMBDA.41
 CL-TEST::LAMBDA.42
 CL-TEST::LAMBDA.43
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>

 CL-TEST::LAMBDA.44
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>

 CL-TEST::LAMBDA.45
 CL-TEST::LAMBDA.46
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.47 failed
Form: ((LAMBDA (&KEY CL-TEST::A CL-TEST::B CL-TEST::ALLOW-OTHER-KEYS) (LIST CL-TEST::ALLOW-OTHER-KEYS CL-TEST::A CL-TEST::B)) :C 10 :ALLOW-OTHER-KEYS T :A 1 :B 2 :D 20)
Expected value:
          (T 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :C. Expected one of (:A :B :ALLOW-OTHER-KEYS).> [Actual value: #<error during printing>
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>

 CL-TEST::LAMBDA.48
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>

 CL-TEST::LAMBDA.49
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>
Test CL-TEST::LAMBDA.50 failed
Form: ((LAMBDA (&KEY CL-TEST::A CL-TEST::B ((:ALLOW-OTHER-KEYS CL-TEST::AOK))) (LIST CL-TEST::AOK CL-TEST::A CL-TEST::B)) :D 40 :A 1 :ALLOW-OTHER-KEYS T :B 2 :C 20)
Expected value:
          (T 1 2)
Actual value:
          #<Simple-Error Unknown &KEY argument :D. Expected one of (:A :B :ALLOW-OTHER-KEYS).> [Actual value: #<error during printing>
Warning: #<Simple-Warning Not inlining LAMBDA, arguments do not match.>

 CL-TEST::LAMBDA.51
 CL-TEST::LAMBDA.52
 CL-TEST::LAMBDA.53
Test CL-TEST::LAMBDA.54 failed
Form: (LET ((CL-TEST::X :BAD)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X :GOOD)) ((LAMBDA (&AUX (CL-TEST::Y CL-TEST::X)) (DECLARE (SPECIAL CL-TEST::X)) CL-TEST::Y))))
Expected value:
          :GOOD
Actual value:
          :BAD

 CL-TEST::LAMBDA.55
 CL-TEST::LAMBDA.56
 CL-TEST::LAMBDA.63
 CL-TEST::LAMBDA.64
 CL-TEST::LAMBDA.MACRO.1
 CL-TEST::LAMBDA.MACRO.2
 CL-TEST::LAMBDA.ERROR.1
 CL-TEST::LAMBDA.ERROR.2
 CL-TEST::LAMBDA.ERROR.3;;; Loading from #<Mezzanine.File-System.Remote::Simple-File-Character-Stream "THAT-MAC-THING" /Users/henry/Documents/Mezzanine-Home/Source/ansi-tests/generated-eval-when-test-file.lisp 4000016FB2F9>
;; Compiling file "generated-eval-when-test-file.lisp".
;;; Loading from #<Mezzanine.File-System.Remote::Simple-File-Stream "THAT-MAC-THING" /Users/henry/Documents/Mezzanine-Home/Source/ansi-tests/generated-eval-when-test-file.llf 4000012BB9D9>

 CL-TEST::EVAL-WHEN.1
 CL-TEST::EVAL-WHEN.2
 CL-TEST::EVAL-WHEN.3
 CL-TEST::EVAL-WHEN.4
 CL-TEST::EVAL-WHEN.5
 CL-TEST::EVAL-WHEN.6
 CL-TEST::EVAL-WHEN.7
 CL-TEST::EVAL-WHEN.8
 CL-TEST::EVAL-WHEN.9
 CL-TEST::EVAL-WHEN.10
 CL-TEST::EVAL-WHEN.11
 CL-TEST::EVAL-WHEN.12
 CL-TEST::EVAL-WHEN.13
Test CL-TEST::EVAL-WHEN.14 failed
Form: (LET ((CL-TEST::X :BAD)) (VALUES (EVAL-WHEN (:EXECUTE) (SETQ CL-TEST::X :GOOD)) CL-TEST::X))
Expected values:
          :GOOD
          :GOOD
Actual values:
          NIL
          :GOOD

 CL-TEST::EVAL-WHEN.15
 CL-TEST::EVAL-WHEN.16
Test CL-TEST::EVAL-WHEN.17 failed
Form: (LET ((CL-TEST::X :BAD)) (VALUES (EVAL-WHEN (EVAL) (SETQ CL-TEST::X :GOOD)) CL-TEST::X))
Expected values:
          :GOOD
          :GOOD
Actual values:
          NIL
          :GOOD

 CL-TEST::EVAL-WHEN.18
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.1
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.2
 CL-TEST::DEFINE-COMPILER-MACRO.ERROR.3
 CL-TEST::DEFINE-COMPILER-MACRO.1
 CL-TEST::DEFINE-COMPILER-MACRO.2
Test CL-TEST::DEFINE-COMPILER-MACRO.3 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::MACRO-DEF-FORM (BACKQUOTE (DEFINE-COMPILER-MACRO (BQ-COMMA CL-TEST::SYM) (&WHOLE CL-TEST::FORM &REST CL-TEST::ARGS) (DECLARE (SPECIAL CL-TEST::*X*) (IGNORE CL-TEST::ARGS)) (SETF CL-TEST::*X* T) (RETURN-FROM (BQ-COMMA CL-TEST::SYM) CL-TEST::FORM)))) (CL-TEST::ORDINARY-MACRO-DEF-FORM (BACKQUOTE (DEFMACRO (BQ-COMMA CL-TEST::SYM) (CL-TEST::X) CL-TEST::X)))) (VALUES (CL-TEST::EQUALT (LIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (EVAL CL-TEST::ORDINARY-MACRO-DEF-FORM))) (CL-TEST::EQUALT (LIST CL-TEST::SYM) (MULTIPLE-VALUE-LIST (EVAL CL-TEST::MACRO-DEF-FORM))) (CL-TEST::NOTNOT (TYPEP (COMPILER-MACRO-FUNCTION CL-TEST::SYM) (QUOTE FUNCTION))) (EVAL (BACKQUOTE ((BQ-COMMA CL-TEST::SYM) (QUOTE CL-TEST::A)))) (LET ((CL-TEST::FN (COMPILE NIL (BACKQUOTE (LAMBDA (CL-TEST::A) ((BQ-COMMA CL-TEST::SYM) CL-TEST::A)))))) (LET ((CL-TEST::*X* NIL)) (DECLARE (SPECIAL CL-TEST::*X*)) (LIST (FUNCALL CL-TEST::FN (QUOTE CL-TEST::B)) CL-TEST::*X*)))))
Expected values:
          T
          T
          T
          CL-TEST::A
          (CL-TEST::B NIL)
Actual values:
          NIL
          T
          T
          CL-TEST::A
          (CL-TEST::B NIL)

 CL-TEST::DEFINE-COMPILER-MACRO.4
 CL-TEST::DEFINE-COMPILER-MACRO.5
 CL-TEST::DEFINE-COMPILER-MACRO.6
Test CL-TEST::DEFINE-COMPILER-MACRO.7 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::FORM (BACKQUOTE (DEFINE-COMPILER-MACRO (BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::*X*)) (SETF CL-TEST::*X* :BAD) (BACKQUOTE (LIST (BQ-COMMA CL-TEST::X) (BQ-COMMA CL-TEST::Y)))))) (CL-TEST::FORM2 (BACKQUOTE (DEFUN (BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (LIST CL-TEST::X CL-TEST::Y))))) (EVAL CL-TEST::FORM) (EVAL CL-TEST::FORM2) (COMPILE CL-TEST::SYM) (LET ((CL-TEST::*X* :GOOD)) (DECLARE (SPECIAL CL-TEST::*X*)) (VALUES (FUNCALL (COMPILE NIL (BACKQUOTE (LAMBDA (CL-TEST::A CL-TEST::B) (DECLARE (NOTINLINE (BQ-COMMA CL-TEST::SYM))) ((BQ-COMMA CL-TEST::SYM) CL-TEST::A CL-TEST::B)))) 5 11) CL-TEST::*X*)))
Expected values:
          (5 11)
          :GOOD
Actual values:
          (5 11)
          :BAD
Test CL-TEST::DEFINE-COMPILER-MACRO.8 failed
Form: (LET* ((CL-TEST::SYM (GENSYM)) (CL-TEST::FORM (BACKQUOTE (DEFINE-COMPILER-MACRO (BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::*X*)) (SETF CL-TEST::*X* :BAD) (BACKQUOTE (LIST (BQ-COMMA CL-TEST::X) (BQ-COMMA CL-TEST::Y)))))) (CL-TEST::FORM2 (BACKQUOTE (DEFMACRO (BQ-COMMA CL-TEST::SYM) (CL-TEST::X CL-TEST::Y) (BACKQUOTE (LIST (BQ-COMMA CL-TEST::X) (BQ-COMMA CL-TEST::Y))))))) (EVAL CL-TEST::FORM) (EVAL CL-TEST::FORM2) (LET ((CL-TEST::*X* :GOOD)) (DECLARE (SPECIAL CL-TEST::*X*)) (VALUES (FUNCALL (COMPILE NIL (BACKQUOTE (LAMBDA (CL-TEST::A CL-TEST::B) (DECLARE (NOTINLINE (BQ-COMMA CL-TEST::SYM))) ((BQ-COMMA CL-TEST::SYM) CL-TEST::A CL-TEST::B)))) 7 23) CL-TEST::*X*)))
Expected values:
          (7 23)
          :GOOD
Actual values:
          (7 23)
          :BAD
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO CL-TEST::NONEXISTENT-SYMBOL-MACRO NIL))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of FREF is NIL, which is not of type FUNCTION-REFERENCE.> [Actual value: #<error during printing>
Test CL-TEST::DEFINE-SYMBOL-MACRO.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE DEFINE-SYMBOL-MACRO)) (QUOTE (DEFINE-SYMBOL-MACRO CL-TEST::NONEXISTENT-SYMBOL-MACRO NIL)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of FREF is NIL, which is not of type FUNCTION-REFERENCE.> [Actual value: #<error during printing>

 CL-TEST::DEFMACRO.ERROR.1
 CL-TEST::DEFMACRO.ERROR.2
 CL-TEST::DEFMACRO.ERROR.3
Test CL-TEST::DEFMACRO.1 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.1-MACRO (CL-TEST::X CL-TEST::Y) (BACKQUOTE (LIST 1 (BQ-COMMA CL-TEST::X) 2 (BQ-COMMA CL-TEST::Y) 3))) (QUOTE CL-TEST::DEFMACRO.1-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE CL-TEST::DEFMACRO.1-MACRO))) (EVAL (BACKQUOTE (CL-TEST::DEFMACRO.1-MACRO (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))))
Expected value:
          (1 CL-TEST::A 2 CL-TEST::B 3)
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.1-MACRO (CL-TEST::X CL-TEST::Y) (BACKQUOTE (LIST 1 (BQ-COMMA CL-TEST::X) 2 (BQ-COMMA CL-TEST::Y) 3))) (QUOTE CL-TEST::DEFMACRO.1-MACRO)).> [Actual value: #<error during printing>
Test CL-TEST::DEFMACRO.2 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.2-MACRO (CL-TEST::X CL-TEST::Y) (RETURN-FROM CL-TEST::DEFMACRO.2-MACRO (BACKQUOTE (CONS (BQ-COMMA CL-TEST::X) (BQ-COMMA CL-TEST::Y))))) (QUOTE CL-TEST::DEFMACRO.2-MACRO))) (ASSERT (MACRO-FUNCTION (QUOTE CL-TEST::DEFMACRO.2-MACRO))) (EVAL (BACKQUOTE (CL-TEST::DEFMACRO.2-MACRO (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))))
Expected value:
          (CL-TEST::A . CL-TEST::B)
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.2-MACRO (CL-TEST::X CL-TEST::Y) (RETURN-FROM CL-TEST::DEFMACRO.2-MACRO (BACKQUOTE (CONS (BQ-COMMA CL-TEST::X) (BQ-COMMA CL-TEST::Y))))) (QUOTE CL-TEST::DEFMACRO.2-MACRO)).> [Actual value: #<error during printing>

 CL-TEST::DEFMACRO.3
Test CL-TEST::DEFMACRO.4 failed
Form: (LET ((CL-TEST::Y :GOOD)) (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.4-MACRO (&OPTIONAL (CL-TEST::X CL-TEST::Y)) (DECLARE (SPECIAL CL-TEST::Y)) CL-TEST::X) (QUOTE CL-TEST::DEFMACRO.4-MACRO))) (LET ((CL-TEST::Y :BAD)) (DECLARE (SPECIAL CL-TEST::Y)) (VALUES (MACROEXPAND-1 (QUOTE (CL-TEST::DEFMACRO.4-MACRO))))))
Expected value:
          :GOOD
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.4-MACRO (&OPTIONAL (CL-TEST::X CL-TEST::Y)) (DECLARE (SPECIAL CL-TEST::Y)) CL-TEST::X) (QUOTE CL-TEST::DEFMACRO.4-MACRO)).> [Actual value: #<error during printing>
Test CL-TEST::DEFMACRO.5 failed
Form: (PROGN (ASSERT (EQ (DEFMACRO CL-TEST::DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE CL-TEST::DEFMACRO.5-MACRO))) (EVAL (BACKQUOTE (CL-TEST::DEFMACRO.5-MACRO))))
Expected value:
          T
Actual value:
          #<Simple-Error Assertion failed: (EQ (DEFMACRO CL-TEST::DEFMACRO.5-MACRO NIL (DECLARE) (DECLARE) "a doc string" (DECLARE) T) (QUOTE CL-TEST::DEFMACRO.5-MACRO)).> [Actual value: #<error during printing>

 CL-TEST::DEFMACRO.6
 CL-TEST::DEFMACRO.7
 CL-TEST::DEFMACRO.8
 CL-TEST::DEFMACRO.9
 CL-TEST::DEFMACRO.10
 CL-TEST::DEFMACRO.11
 CL-TEST::DEFMACRO.12
 CL-TEST::DEFMACRO.13
 CL-TEST::DEFMACRO.14
 CL-TEST::DEFMACRO.15
 CL-TEST::DEFMACRO.16
 CL-TEST::DEFMACRO.17
 CL-TEST::DEFMACRO.17A
 CL-TEST::DEFMACRO.18
 CL-TEST::DEFMACRO.19
 CL-TEST::DEFMACRO.20
Test CL-TEST::DEFMACRO.21 failed
Form: (PROGN (DEFMACRO CL-TEST::DEFMACRO.21-MACRO (&KEY CL-TEST::X CL-TEST::Y CL-TEST::Z) (BACKQUOTE (LIST (QUOTE (BQ-COMMA CL-TEST::X)) (QUOTE (BQ-COMMA CL-TEST::Y)) (QUOTE (BQ-COMMA CL-TEST::Z))))) (MAPCAR (FUNCTION EVAL) (QUOTE ((CL-TEST::DEFMACRO.21-MACRO) (CL-TEST::DEFMACRO.21-MACRO :X CL-TEST::A) (CL-TEST::DEFMACRO.21-MACRO :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C) (CL-TEST::DEFMACRO.21-MACRO :X CL-TEST::A :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :X CL-TEST::A) (CL-TEST::DEFMACRO.21-MACRO :Z CL-TEST::C :X CL-TEST::A :Y CL-TEST::B) (CL-TEST::DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS NIL) (CL-TEST::DEFMACRO.21-MACRO :ALLOW-OTHER-KEYS T :FOO CL-TEST::BAR)))))
Expected value:
          ((NIL NIL NIL) (CL-TEST::A NIL NIL) (NIL CL-TEST::B NIL) (NIL NIL CL-TEST::C) (CL-TEST::A CL-TEST::B NIL) (NIL CL-TEST::B CL-TEST::C) (CL-TEST::A NIL CL-TEST::C) (CL-TEST::A CL-TEST::B CL-TEST::C) (NIL NIL NIL) (NIL NIL NIL))
Actual value:
          #<Simple-Error Invalid keyword :ALLOW-OTHER-KEYS. Wanted one of (:Z :Y :X).> [Actual value: #<error during printing>

 CL-TEST::THE.1
 CL-TEST::THE.2
 CL-TEST::THE.3
 CL-TEST::THE.4
 CL-TEST::THE.5
 CL-TEST::THE.6
 CL-TEST::THE.7
 CL-TEST::THE.8
 CL-TEST::THE.9
 CL-TEST::THE.10
 CL-TEST::THE.11
 CL-TEST::THE.12
Test CL-TEST::THE.13 failed
Form: (LET ((CL-TEST::X 0)) (VALUES (THE (OR SYMBOL INTEGER) (INCF CL-TEST::X)) CL-TEST::X))
Expected values:
          1
          1
Actual values:
          NIL
          1

 CL-TEST::THE.14
 CL-TEST::THE.15
 CL-TEST::THE.16
 CL-TEST::THE.17
 CL-TEST::THE.18
 CL-TEST::THE.19
 CL-TEST::THE.20
 CL-TEST::THE.21
 CL-TEST::THE.22
 CL-TEST::THE.23
 CL-TEST::THE.24
 CL-TEST::THE.25
 CL-TEST::SYMBOL-MACROLET.1
 CL-TEST::SYMBOL-MACROLET.2
 CL-TEST::SYMBOL-MACROLET.3
 CL-TEST::SYMBOL-MACROLET.4
Test CL-TEST::SYMBOL-MACROLET.5 failed
Form: (LET ((CL-TEST::X 10)) (SYMBOL-MACROLET ((CL-TEST::Y CL-TEST::X)) (LIST CL-TEST::X CL-TEST::Y (LET ((CL-TEST::X 20)) CL-TEST::X) (LET ((CL-TEST::Y 30)) CL-TEST::X) (LET ((CL-TEST::Y 50)) CL-TEST::Y) CL-TEST::X CL-TEST::Y)))
Expected value:
          (10 10 20 10 50 10 10)
Actual value:
          (10 10 20 10 10 10 10)

 CL-TEST::SYMBOL-MACROLET.6
 CL-TEST::SYMBOL-MACROLET.7
 CL-TEST::SYMBOL-MACROLET.8
Test CL-TEST::SYMBOL-MACROLET.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::X 10)) (DECLARE (SPECIAL CL-TEST::X)) 20) PROGRAM-ERROR)
Expected value:
          T
Actual values:
          NIL
          20
Test CL-TEST::SYMBOL-MACROLET.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2 (QUOTE CL-TEST::A))) CL-TEST::CONSTANT-FOR-SYMBOL-MACROLET.ERROR.2) PROGRAM-ERROR)
Expected value:
          T
Actual values:
          NIL
          CL-TEST::A
Test CL-TEST::SYMBOL-MACROLET.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (SYMBOL-MACROLET ((CL-TEST::*PATHNAMES* 19)) CL-TEST::*PATHNAMES*) PROGRAM-ERROR)
Expected value:
          T
Actual values:
          NIL
          19

 CL-TEST::SYMBOL-MACROLET.9
 CL-TEST::PROCLAIM.1
 CL-TEST::PROCLAIM.2
 CL-TEST::PROCLAIM.3
 CL-TEST::PROCLAIM.ERROR.1
 CL-TEST::PROCLAIM.ERROR.2
Test CL-TEST::PROCLAIM.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (BACKQUOTE (OPTIMIZE . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual values:
          NIL
          NIL

 CL-TEST::PROCLAIM.ERROR.4
 CL-TEST::PROCLAIM.ERROR.5
Test CL-TEST::PROCLAIM.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (BACKQUOTE (TYPE . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual values:
          NIL
          NIL
Test CL-TEST::PROCLAIM.ERROR.7 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (BACKQUOTE (FTYPE . CL-TEST::FOO))) TYPE-ERROR)
Expected value:
          T
Actual values:
          NIL
          NIL
Test CL-TEST::PROCLAIM.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (TYPE INTEGER . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual values:
          NIL
          NIL
Test CL-TEST::PROCLAIM.ERROR.9 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (INTEGER . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual values:
          NIL
          NIL
Test CL-TEST::PROCLAIM.ERROR.10 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (DECLARATION . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual values:
          NIL
          NIL
Test CL-TEST::PROCLAIM.ERROR.11 failed
Form: (CL-TEST:SIGNALS-ERROR (PROCLAIM (QUOTE (FTYPE (FUNCTION (T) T) . CL-TEST::FOO))) ERROR)
Expected value:
          T
Actual values:
          NIL
          NIL

 CL-TEST::DECLAIM.1
 CL-TEST::DECLAIM.2
 CL-TEST::DECLAIM.3
 CL-TEST::DECLAIM.4
 CL-TEST::DECLAIM.5
 CL-TEST::DECLAIM.6
 CL-TEST::DECLAIM.7
 CL-TEST::DECLAIM.8
 CL-TEST::DECLAIM.9
 CL-TEST::DECLAIM.10
 CL-TEST::DECLAIM.11
 CL-TEST::LOCALLY.1
 CL-TEST::LOCALLY.2
 CL-TEST::LOCALLY.3
 CL-TEST::LOCALLY.4
 CL-TEST::LOCALLY.5
 CL-TEST::LOCALLY.6
 CL-TEST::LOCALLY.7
 CL-TEST::LOCALLY.8
 CL-TEST::IGNORE.1
 CL-TEST::IGNORE.2
 CL-TEST::IGNORE.3
 CL-TEST::IGNORE.4
 CL-TEST::IGNORE.5
 CL-TEST::IGNORE.6
 CL-TEST::IGNORABLE.1
 CL-TEST::IGNORABLE.2
 CL-TEST::IGNORABLE.3
 CL-TEST::IGNORABLE.4
 CL-TEST::IGNORABLE.5
 CL-TEST::IGNORABLE.6
 CL-TEST::IGNORABLE.7
 CL-TEST::IGNORABLE.8
 CL-TEST::DYNAMIC-EXTENT.1
 CL-TEST::DYNAMIC-EXTENT.2
 CL-TEST::DYNAMIC-EXTENT.3
 CL-TEST::DYNAMIC-EXTENT.4
 CL-TEST::DYNAMIC-EXTENT.5
 CL-TEST::DYNAMIC-EXTENT.6
 CL-TEST::DYNAMIC-EXTENT.7
Test CL-TEST::DYNAMIC-EXTENT.8 failed
Form: (LET ((CL-TEST::X (+ MOST-POSITIVE-FIXNUM 2))) (DECLARE (DYNAMIC-EXTENT CL-TEST::X) (OPTIMIZE SPEED (SAFETY 0))) (1- CL-TEST::X))
Expected value:
          4611686018427387904
Actual value:
          4611686018427387904

 CL-TEST::DYNAMIC-EXTENT.9
 CL-TEST::DYNAMIC-EXTENT.10
 CL-TEST::DYNAMIC-EXTENT.11
Test CL-TEST::DYNAMIC-EXTENT.12 failed
Form: (LET* ((CL-TEST::CONTENTS (QUOTE (1 0 0 1 1 0 1 1 0 1))) (CL-TEST::N (LENGTH CL-TEST::CONTENTS))) (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 32 CL-TEST::FOR TYPE = (BACKQUOTE (UNSIGNED-BYTE (BQ-COMMA CL-TEST::I))) CL-TEST::FOR CL-TEST::FORM1 = (BACKQUOTE (MAKE-ARRAY (QUOTE ((BQ-COMMA CL-TEST::N))) :INITIAL-CONTENTS (QUOTE (BQ-COMMA CL-TEST::CONTENTS)) :ELEMENT-TYPE (QUOTE (BQ-COMMA TYPE)))) CL-TEST::FOR CL-TEST::FORM2 = (BACKQUOTE (LET ((CL-TEST::A (BQ-COMMA CL-TEST::FORM1))) (DECLARE (DYNAMIC-EXTENT CL-TEST::A)) (DECLARE (TYPE (SIMPLE-ARRAY (BQ-COMMA TYPE) ((BQ-COMMA CL-TEST::N))))) (DECLARE (NOTINLINE COERCE)) (DECLARE (OPTIMIZE SPEED (SAFETY 0))) (EQUAL (COERCE CL-TEST::A (QUOTE LIST)) (QUOTE (BQ-COMMA CL-TEST::CONTENTS))))) UNLESS (FUNCALL (COMPILE NIL (BACKQUOTE (LAMBDA NIL (BQ-COMMA CL-TEST::FORM2))))) CL-TEST::COLLECT CL-TEST::I))
Expected value:
          NIL
Actual value:
          (2 3 4)

 CL-TEST::DYNAMIC-EXTENT.13
 CL-TEST::DYNAMIC-EXTENT.14
 CL-TEST::DYNAMIC-EXTENT.15
 CL-TEST::DYNAMIC-EXTENT.16
 CL-TEST::OPTIMIZE.1
 CL-TEST::OPTIMIZE.2
 CL-TEST::OPTIMIZE.3
 CL-TEST::OPTIMIZE.4
 CL-TEST::OPTIMIZE.5
 CL-TEST::OPTIMIZE.6
 CL-TEST::OPTIMIZE.7
 CL-TEST::OPTIMIZE.8
 CL-TEST::SPECIAL.1
 CL-TEST::SPECIAL.2
 CL-TEST::SPECIAL.3
 CL-TEST::MACROEXPAND.ERROR.1
 CL-TEST::MACROEXPAND.ERROR.2
 CL-TEST::MACROEXPAND.1
 CL-TEST::MACROEXPAND.2
Test CL-TEST::MACROEXPAND.3 failed
Form: (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (BACKQUOTE (QUOTE (BQ-COMMA (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::X) (OR (SYMBOLP CL-TEST::X) (CONSP CL-TEST::X) (LET ((CL-TEST::VALS (MULTIPLE-VALUE-LIST (MACROEXPAND CL-TEST::X CL-TEST::ENV)))) (AND (= (LENGTH CL-TEST::VALS) 2) (EQL (CAR CL-TEST::VALS) CL-TEST::X) (NULL (CADR CL-TEST::VALS))))))))))))) (CL-TEST::%M))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>
Test CL-TEST::MACROEXPAND.4 failed
Form: (MACROLET ((CL-TEST::%M NIL (QUOTE (QUOTE CL-TEST::FOO)))) (MACROLET ((CL-TEST::%M2 (&ENVIRONMENT CL-TEST::ENV) (MACROEXPAND (QUOTE (CL-TEST::%M)) CL-TEST::ENV))) (CL-TEST::%M2)))
Expected value:
          CL-TEST::FOO
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::MACROEXPAND.5
Test CL-TEST::MACROEXPAND.6 failed
Form: (LET ((CL-TEST::FORM (LIST (GENSYM))) (CL-TEST::I 0) CL-TEST::A CL-TEST::B) (VALUES (CL-TEST::EQUALT (MACROEXPAND (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::FORM) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) NIL)) CL-TEST::FORM) CL-TEST::I CL-TEST::A CL-TEST::B))
Expected values:
          T
          2
          1
          2
Actual values:
          T
          2
          NIL
          NIL

 CL-TEST::MACROEXPAND-1.ERROR.1
 CL-TEST::MACROEXPAND-1.ERROR.2
 CL-TEST::MACROEXPAND-1.1
 CL-TEST::MACROEXPAND-1.2
Test CL-TEST::MACROEXPAND-1.3 failed
Form: (MACROLET ((CL-TEST::%M (&ENVIRONMENT CL-TEST::ENV) (BACKQUOTE (QUOTE (BQ-COMMA (CL-TEST::CHECK-PREDICATE (FUNCTION (LAMBDA (CL-TEST::X) (OR (SYMBOLP CL-TEST::X) (CONSP CL-TEST::X) (LET ((CL-TEST::VALS (MULTIPLE-VALUE-LIST (MACROEXPAND-1 CL-TEST::X CL-TEST::ENV)))) (AND (= (LENGTH CL-TEST::VALS) 2) (EQL (CAR CL-TEST::VALS) CL-TEST::X) (NULL (CADR CL-TEST::VALS))))))))))))) (CL-TEST::%M))
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>
Test CL-TEST::MACROEXPAND-1.4 failed
Form: (MACROLET ((CL-TEST::%M NIL (QUOTE (QUOTE CL-TEST::FOO)))) (MACROLET ((CL-TEST::%M2 (&ENVIRONMENT CL-TEST::ENV) (MACROEXPAND-1 (QUOTE (CL-TEST::%M)) CL-TEST::ENV))) (CL-TEST::%M2)))
Expected value:
          CL-TEST::FOO
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::MACROEXPAND-1.5
Test CL-TEST::MACROEXPAND-1.6 failed
Form: (LET ((CL-TEST::FORM (LIST (GENSYM))) (CL-TEST::I 0) CL-TEST::A CL-TEST::B) (VALUES (CL-TEST::EQUALT (MACROEXPAND-1 (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::FORM) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) NIL)) CL-TEST::FORM) CL-TEST::I CL-TEST::A CL-TEST::B))
Expected values:
          T
          2
          1
          2
Actual values:
          T
          2
          NIL
          NIL

 CL-TEST::DECLARATION.1
 CL-TEST::DECLARATION.2
 CL-TEST::DECLARATION.3
Test CL-TEST::TYPE.1 failed
Form: (LET ((CL-TEST::X 1)) (DECLARE (TYPE (INTEGER 0 1) CL-TEST::X)) (VALUES CL-TEST::X (SETQ CL-TEST::X 0) (1+ CL-TEST::X)))
Expected values:
          1
          0
          1
Actual values:
          1
          NIL
          1
Test CL-TEST::TYPE.2 failed
Form: (LET ((CL-TEST::X 1)) (DECLARE (TYPE (INTEGER -1 1) CL-TEST::X)) (LOCALLY (DECLARE (TYPE (INTEGER 0 2) CL-TEST::X)) (VALUES CL-TEST::X (SETQ CL-TEST::X 0) (1+ CL-TEST::X))))
Expected values:
          1
          0
          1
Actual values:
          1
          NIL
          1

 CL-TEST::TYPE.3
 CL-TEST::TYPE.4
 CL-TEST::TYPE.5
 CL-TEST::TYPE.6
Test CL-TEST::MACRO-FUNCTION.1 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION CL-TEST::N) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO FORMATTER REMF STEP CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS)
Test CL-TEST::MACRO-FUNCTION.2 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (MACRO-FUNCTION CL-TEST::N NIL) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          (CCASE DEFINE-METHOD-COMBINATION DEFINE-SYMBOL-MACRO FORMATTER REMF STEP CTYPECASE WITH-ACCESSORS WITH-CONDITION-RESTARTS)
Test CL-TEST::MACRO-FUNCTION.3 failed
Form: (LOOP CL-TEST::FOR CL-TEST::N CL-TEST::IN CL-TEST::*CL-MACRO-SYMBOLS* UNLESS (EVAL (BACKQUOTE (MACROLET ((CL-TEST::%M (CL-TEST::S &ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION CL-TEST::S CL-TEST::ENV)))) (CL-TEST::%M (BQ-COMMA CL-TEST::N))))) CL-TEST::COLLECT CL-TEST::N)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::MACRO-FUNCTION.4
 CL-TEST::MACRO-FUNCTION.5
 CL-TEST::MACRO-FUNCTION.6
Test CL-TEST::MACRO-FUNCTION.7 failed
Form: (LET ((CL-TEST::FN (MACROLET ((CL-TEST::%M NIL 16)) (MACROLET ((CL-TEST::%N (&ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION (QUOTE CL-TEST::%M) CL-TEST::ENV)))) (CL-TEST::%N))))) (VALUES (CL-TEST::NOTNOT (FUNCTIONP CL-TEST::FN)) (FUNCALL CL-TEST::FN (QUOTE (CL-TEST::%M)) NIL)))
Expected values:
          T
          16
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::MACRO-FUNCTION.8
 CL-TEST::MACRO-FUNCTION.9
 CL-TEST::MACRO-FUNCTION.10
Test CL-TEST::MACRO-FUNCTION.11 failed
Form: (LET ((CL-TEST::FN (FLET ((CL-TEST::%M NIL 16)) (MACROLET ((CL-TEST::%N (&ENVIRONMENT CL-TEST::ENV) (LIST (QUOTE QUOTE) (MACRO-FUNCTION (QUOTE CL-TEST::%M) CL-TEST::ENV)))) (CL-TEST::%N))))) CL-TEST::FN)
Expected value:
          NIL
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::MACRO-FUNCTION.12
Test CL-TEST::MACRO-FUNCTION.13 failed
Form: (LET ((CL-TEST::SYM (GENSYM))) (EVAL (BACKQUOTE (DEFMACRO (BQ-COMMA CL-TEST::SYM) NIL T))) (LET ((CL-TEST::I 0) CL-TEST::A CL-TEST::B) (VALUES (FUNCALL (MACRO-FUNCTION (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::SYM) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) NIL)) (LIST CL-TEST::SYM) NIL) CL-TEST::I CL-TEST::A CL-TEST::B)))
Expected values:
          T
          2
          1
          2
Actual values:
          T
          2
          NIL
          NIL

 CL-TEST::MACRO-FUNCTION.14
Test CL-TEST::MACRO-FUNCTION.15 failed
Form: (LET ((CL-TEST::SYM (GENSYM)) (CL-TEST::I 0) CL-TEST::A CL-TEST::B) (SETF (MACRO-FUNCTION (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::SYM) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) NIL)) (MACRO-FUNCTION (QUOTE POP))) (VALUES (EVAL (BACKQUOTE (LET ((CL-TEST::X (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C)))) (LIST ((BQ-COMMA CL-TEST::SYM) CL-TEST::X) CL-TEST::X)))) CL-TEST::I CL-TEST::A CL-TEST::B))
Expected values:
          (CL-TEST::A (CL-TEST::B CL-TEST::C))
          2
          1
          2
Actual values:
          (CL-TEST::A (CL-TEST::B CL-TEST::C))
          2
          NIL
          NIL

 CL-TEST::MACRO-FUNCTION.ERROR.1
 CL-TEST::MACRO-FUNCTION.ERROR.2
 CL-TEST::DCF-FUNS
Test CL-TEST::DCF-MACROS failed
Form: (REMOVE-IF (FUNCTION MACRO-FUNCTION) CL-TEST::*DCF-MACROS*)
Expected value:
          NIL
Actual value:
          (CCASE)
Test CL-TEST::SETF.ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (SETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) (VALUES CL-TEST::X CL-TEST::I))
Expected values:
          #(NIL 2 NIL NIL)
          2
Actual values:
          #(NIL NIL NIL NIL)
          2
Test CL-TEST::SETF.ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (SETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I 10)) (VALUES CL-TEST::X CL-TEST::I))
Expected values:
          #(NIL 2 NIL 13)
          13
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>
Test CL-TEST::INCF.ORDER.1 failed
Form: (LET ((CL-TEST::X (COPY-SEQ #(0 0 0 0 0))) (CL-TEST::I 1)) (VALUES (INCF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected values:
          3
          #(0 0 3 0 0)
          3
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>
Test CL-TEST::DECF.ORDER.1 failed
Form: (LET ((CL-TEST::X (COPY-SEQ #(0 0 0 0 0))) (CL-TEST::I 1)) (VALUES (DECF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected values:
          -3
          #(0 0 -3 0 0)
          3
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>

 CL-TEST::SETF-VAR
 CL-TEST::SETF-VALUES.1
 CL-TEST::SETF-VALUES.2
 CL-TEST::SETF-VALUES.3
 CL-TEST::SETF-VALUES.4
Test CL-TEST::SETF-VALUES.5 failed
Form: (LET ((CL-TEST::A (VECTOR NIL NIL)) (CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (SETF (VALUES (AREF CL-TEST::A (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) 0)) (AREF CL-TEST::A (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) 1))) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (VALUES (QUOTE CL-TEST::FOO) (QUOTE CL-TEST::BAR)))) (VALUES CL-TEST::A CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected values:
          #(CL-TEST::FOO CL-TEST::BAR)
          3
          1
          2
          3
Actual values:
          #(CL-TEST::FOO CL-TEST::BAR)
          3
          NIL
          NIL
          NIL

 CL-TEST::SETF-VALUES.6
 CL-TEST::SETF-THE.1
 CL-TEST::SETF-THE.2
Test CL-TEST::SETF-APPLY.1 failed
Form: (LET ((CL-TEST::X (VECTOR 0 1 2 3 4 5))) (SETF (APPLY (FUNCTION AREF) CL-TEST::X (QUOTE (0))) 10) CL-TEST::X)
Expected value:
          #(10 1 2 3 4 5)
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>
Test CL-TEST::SETF-APPLY.2 failed
Form: (LET ((CL-TEST::A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 0)))))) (SETF (APPLY (FUNCTION AREF) CL-TEST::A 1 1 NIL) (QUOTE CL-TEST::A)) (EQUALP CL-TEST::A (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((0 0) (0 CL-TEST::A))))))
Expected value:
          T
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>
Test CL-TEST::SETF-APPLY.3 failed
Form: (LET ((CL-TEST::BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION BIT) CL-TEST::BV 4 NIL) 1) CL-TEST::BV)
Expected value:
          #*0000100000
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>
Test CL-TEST::SETF-APPLY.4 failed
Form: (LET ((CL-TEST::BV (COPY-SEQ #*0000000000))) (SETF (APPLY (FUNCTION SBIT) CL-TEST::BV 4 NIL) 1) CL-TEST::BV)
Expected value:
          #*0000100000
Actual value:
          #<Undefined-Function (SETF APPLY)> [Actual value: #<error during printing>

 CL-TEST::SETF-MACRO.1
 CL-TEST::SETF-MACRO.3
 CL-TEST::SETF-MACRO.4
Test CL-TEST::SETF-SYMBOL-MACRO.1 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X CL-TEST::Y)) (LET ((CL-TEST::Y NIL)) (VALUES (SETF CL-TEST::X 1) CL-TEST::X CL-TEST::Y)))
Expected values:
          1
          1
          1
Actual values:
          NIL
          1
          1
Test CL-TEST::SETF-SYMBOL-MACRO.2 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X CL-TEST::Y)) (LET ((CL-TEST::Y NIL)) (VALUES (SETQ CL-TEST::X 1) CL-TEST::X CL-TEST::Y)))
Expected values:
          1
          1
          1
Actual values:
          NIL
          1
          1

 CL-TEST::SETF-SYMBOL-MACRO.3
 CL-TEST::SETQ.1
Test CL-TEST::SETQ.2 failed
Form: (LET ((CL-TEST::X 0) (CL-TEST::Y 0)) (VALUES (SETQ CL-TEST::X 1 CL-TEST::Y 2) CL-TEST::X CL-TEST::Y))
Expected values:
          2
          1
          2
Actual values:
          NIL
          1
          2

 CL-TEST::SETQ.3
 CL-TEST::SETQ.4
 CL-TEST::SETQ.5
 CL-TEST::SETQ.6
Test CL-TEST::SETQ.7 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X NIL)) (VALUES (SETQ CL-TEST::X (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :GOOD))) CL-TEST::X)))
Expected values:
          :GOOD
          :GOOD
Actual values:
          NIL
          :GOOD

 CL-TEST::SETF.1
Test CL-TEST::SETF.2 failed
Form: (LET ((CL-TEST::X 0) (CL-TEST::Y 0)) (VALUES (SETF CL-TEST::X 1 CL-TEST::Y 2) CL-TEST::X CL-TEST::Y))
Expected values:
          2
          1
          2
Actual values:
          NIL
          1
          2

 CL-TEST::SETF.3
 CL-TEST::SETF.4
 CL-TEST::SETF.5
 CL-TEST::SETF.6
Test CL-TEST::SETF.7 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X NIL)) (VALUES CL-TEST::X (SETF (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)) T) CL-TEST::X)))
Expected values:
          NIL
          T
          T
Actual values:
          NIL
          NIL
          T
Test CL-TEST::SETF.8 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (LET ((CL-TEST::X NIL)) (VALUES CL-TEST::X (SETF CL-TEST::X (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M T))) CL-TEST::X)))
Expected values:
          NIL
          T
          T
Actual values:
          NIL
          NIL
          T

 CL-TEST::PSETQ.1
 CL-TEST::PSETQ.2
 CL-TEST::PSETQ.3
 CL-TEST::PSETQ.4
 CL-TEST::PSETQ.5
 CL-TEST::PSETQ.6
Test CL-TEST::PSETQ.7 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I))) (CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I)))) (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETQ CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I)))
Expected values:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>

 CL-TEST::PSETQ.8
 CL-TEST::PSETQ.9
 CL-TEST::PSETQ.10
 CL-TEST::PSETQ.ERROR.1
 CL-TEST::PSETQ.ERROR.2
 CL-TEST::PSETQ.ERROR.3
Test CL-TEST::PSETF.ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) (VALUES CL-TEST::X CL-TEST::I))
Expected values:
          #(NIL 2 NIL NIL)
          2
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>
Test CL-TEST::PSETF.ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR NIL NIL NIL NIL)) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I 10)) (VALUES CL-TEST::X CL-TEST::I))
Expected values:
          #(NIL 2 NIL 13)
          13
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>

 CL-TEST::PSETF.1
 CL-TEST::PSETF.2
 CL-TEST::PSETF.3
 CL-TEST::PSETF.4
 CL-TEST::PSETF.5
 CL-TEST::PSETF.6
Test CL-TEST::PSETF.7 failed
Form: (SYMBOL-MACROLET ((CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I))) (CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I)))) (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETF CL-TEST::X (AREF CL-TEST::A (INCF CL-TEST::I)) CL-TEST::Y (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I)))
Expected values:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>
Test CL-TEST::PSETF.8 failed
Form: (LET ((CL-TEST::A (COPY-SEQ #(0 1 2 3 4 5 6 7 8 9))) (CL-TEST::I 0)) (PSETF (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I)) (AREF CL-TEST::A (INCF CL-TEST::I))) (VALUES CL-TEST::A CL-TEST::I))
Expected values:
          #(0 2 2 4 4 5 6 7 8 9)
          4
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>

 CL-TEST::PSETF.9
 CL-TEST::PSETF.10
 CL-TEST::PSETF.11
 CL-TEST::PSETF.ERROR.1
 CL-TEST::PSETF.12
 CL-TEST::PSETF.12A
 CL-TEST::PSETF.13
 CL-TEST::PSETF.13A
 CL-TEST::PSETF.14
 CL-TEST::PSETF.15
 CL-TEST::PSETF.16
 CL-TEST::PSETF.17
 CL-TEST::PSETF.18
 CL-TEST::PSETF.18A
 CL-TEST::PSETF.19
 CL-TEST::PSETF.20
 CL-TEST::PSETF.21
 CL-TEST::PSETF.22
 CL-TEST::PSETF.23
 CL-TEST::PSETF.24
 CL-TEST::PSETF.25
 CL-TEST::PSETF.26
 CL-TEST::PSETF.27
 CL-TEST::PSETF.28
 CL-TEST::PSETF.29
 CL-TEST::PSETF.30
 CL-TEST::PSETF.31
 CL-TEST::PSETF.32
 CL-TEST::PSETF.33
 CL-TEST::PSETF.34
 CL-TEST::PSETF.35
 CL-TEST::PSETF.36
 CL-TEST::PSETF.37
 CL-TEST::PSETF.39
 CL-TEST::PSETF.40
Test CL-TEST::SHIFTF-ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (CL-TEST::I 2)) (VALUES (SHIFTF (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected values:
          CL-TEST::D
          #(CL-TEST::A CL-TEST::B CL-TEST::C 4 CL-TEST::E)
          4
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>
Test CL-TEST::SHIFTF-ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) (QUOTE CL-TEST::G) (QUOTE CL-TEST::H))) (CL-TEST::I 2)) (VALUES (SHIFTF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::X CL-TEST::I))
Expected values:
          CL-TEST::D
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E 5 CL-TEST::F CL-TEST::G CL-TEST::H)
          5
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>

 CL-TEST::SHIFTF.1
 CL-TEST::SHIFTF.2
 CL-TEST::SHIFTF.3
 CL-TEST::SHIFTF.4
 CL-TEST::SHIFTF.5
 CL-TEST::SHIFTF.6
Test CL-TEST::ROTATEF-ORDER.1 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (CL-TEST::I 2)) (VALUES (ROTATEF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I))) CL-TEST::X CL-TEST::I))
Expected values:
          NIL
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E CL-TEST::D CL-TEST::F)
          4
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>
Test CL-TEST::ROTATEF-ORDER.2 failed
Form: (LET ((CL-TEST::X (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F))) (CL-TEST::I 2)) (VALUES (ROTATEF (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I)) (AREF CL-TEST::X (INCF CL-TEST::I))) CL-TEST::X CL-TEST::I))
Expected values:
          NIL
          #(CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::E CL-TEST::F CL-TEST::D)
          5
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>

 CL-TEST::ROTATEF.1
 CL-TEST::ROTATEF.2
 CL-TEST::ROTATEF.3
 CL-TEST::ROTATEF.4
 CL-TEST::ROTATEF.5
 CL-TEST::ROTATEF.6
 CL-TEST::ROTATEF.7
 CL-TEST::ROTATEF.8
 CL-TEST::ROTATEF.9
 CL-TEST::ROTATEF.10
 CL-TEST::ROTATEF.11
 CL-TEST::ROTATEF.12
 CL-TEST::ROTATEF.13
 CL-TEST::ROTATEF.14
 CL-TEST::ROTATEF.15
 CL-TEST::ROTATEF.16
 CL-TEST::ROTATEF.17
 CL-TEST::ROTATEF.18
 CL-TEST::ROTATEF.21
 CL-TEST::ROTATEF.22
 CL-TEST::ROTATEF.23
 CL-TEST::ROTATEF.24
 CL-TEST::ROTATEF.25
 CL-TEST::ROTATEF.26
 CL-TEST::ROTATEF.27
 CL-TEST::ROTATEF.28
 CL-TEST::ROTATEF.29
 CL-TEST::ROTATEF.30
 CL-TEST::ROTATEF.31
 CL-TEST::ROTATEF.32
 CL-TEST::ROTATEF.33
 CL-TEST::ROTATEF.34
 CL-TEST::ROTATEF.35
 CL-TEST::ROTATEF.36
 CL-TEST::ROTATEF.37
 CL-TEST::RETURN.ERROR.1
 CL-TEST::RETURN.ERROR.2
 CL-TEST::RETURN.ERROR.3
 CL-TEST::RETURN.1
 CL-TEST::RETURN.2
 CL-TEST::RETURN.3
 CL-TEST::RETURN-FROM.1
 CL-TEST::RETURN-FROM.2
 CL-TEST::RETURN-FROM.3
 CL-TEST::DEFINE-SETF-EXPANDER.ERROR.1
 CL-TEST::DEFINE-SETF-EXPANDER.1
 CL-TEST::DEFINE-SETF-EXPANDER.2
 CL-TEST::DEFINE-SETF-EXPANDER.3
Test CL-TEST::DEFINE-SETF-EXPANDER.4 failed
Form: (LET ((CL-TEST::A (LIST (LIST 1)))) (VALUES (COPY-TREE CL-TEST::A) (CL-TEST::MY-CAR (CL-TEST::MY-CAR CL-TEST::A)) (SETF (CL-TEST::MY-CAR (CL-TEST::MY-CAR CL-TEST::A)) 2) CL-TEST::A))
Expected values:
          ((1))
          1
          2
          ((2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>
Test CL-TEST::DEFINE-SETF-EXPANDER.5 failed
Form: (LET ((CL-TEST::X NIL)) (VALUES (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::FOO) CL-TEST::X) 1) (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::FOO) CL-TEST::X) 2) (COPY-TREE CL-TEST::X) (SETF (CL-TEST::MY-ASSOC (QUOTE CL-TEST::BAR) CL-TEST::X) 3) (COPY-TREE CL-TEST::X)))
Expected values:
          NIL
          1
          ((CL-TEST::FOO . 1))
          2
          ((CL-TEST::FOO . 2))
          3
          ((CL-TEST::BAR . 3) (CL-TEST::FOO . 2))
Actual value:
          #<Undefined-Function COPY-TREE> [Actual value: #<error during printing>

 CL-TEST::DEFINE-SETF-EXPANDER.6
 CL-TEST::DEFINE-SETF-EXPANDER.7
 CL-TEST::AND.1
 CL-TEST::AND.2
 CL-TEST::AND.3
 CL-TEST::AND.4
 CL-TEST::AND.5
 CL-TEST::AND.6
 CL-TEST::AND.7
 CL-TEST::AND.8
 CL-TEST::AND.9
 CL-TEST::AND.10
 CL-TEST::AND.ORDER.1
Test CL-TEST::AND.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (VALUES (AND (SETF CL-TEST::A (INCF CL-TEST::I)) (SETF CL-TEST::B (INCF CL-TEST::I)) (SETF CL-TEST::C (INCF CL-TEST::I)) (SETF CL-TEST::D (INCF CL-TEST::I))) CL-TEST::I CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))
Expected values:
          4
          4
          1
          2
          3
          4
Actual values:
          NIL
          1
          NIL
          NIL
          NIL
          NIL

 CL-TEST::AND.ERROR.1
 CL-TEST::AND.ERROR.2
 CL-TEST::AND.ERROR.3
 CL-TEST::APPLY.ERROR.1
 CL-TEST::APPLY.ERROR.2
 CL-TEST::APPLY.ERROR.3
 CL-TEST::APPLY.ERROR.4
 CL-TEST::APPLY.1
 CL-TEST::APPLY.2
 CL-TEST::APPLY.3
 CL-TEST::APPLY.4
 CL-TEST::APPLY.5
 CL-TEST::APPLY.6
 CL-TEST::APPLY.7
 CL-TEST::APPLY.8
Test CL-TEST::APPLY.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (APPLY (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION LIST)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE CL-TEST::B)) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (LIST (QUOTE CL-TEST::A)))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected values:
          (CL-TEST::B CL-TEST::A)
          3
          1
          2
          3
Actual values:
          (CL-TEST::B CL-TEST::A)
          3
          NIL
          NIL
          NIL

 CL-TEST::BLOCK.1
 CL-TEST::BLOCK.2
 CL-TEST::BLOCK.3
 CL-TEST::BLOCK.4
 CL-TEST::BLOCK.5
 CL-TEST::BLOCK.6
 CL-TEST::BLOCK.7
 CL-TEST::BLOCK.8
 CL-TEST::BLOCK.9
 CL-TEST::BLOCK.10
 CL-TEST::BLOCK.11
 CL-TEST::BLOCK.12
 CL-TEST::CALL-ARGUMENTS-LIMIT.1
 CL-TEST::CALL-ARGUMENTS-LIMIT.2
 CL-TEST::CALL-ARGUMENTS-LIMIT.3
 CL-TEST::CALL-ARGUMENTS-LIMIT.4
 CL-TEST::CALL-ARGUMENTS-LIMIT.5
 CL-TEST::CASE.1
 CL-TEST::CASE.2
 CL-TEST::CASE.3
 CL-TEST::CASE.4
Test CL-TEST::CASE.5 failed
Form: (CASE (1+ MOST-POSITIVE-FIXNUM) (4611686018427387904 (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          NIL

 CL-TEST::CASE.6
 CL-TEST::CASE.7
 CL-TEST::CASE.8
 CL-TEST::CASE.9
 CL-TEST::CASE.10
 CL-TEST::CASE.11
 CL-TEST::CASE.12
 CL-TEST::CASE.13
 CL-TEST::CASE.14
 CL-TEST::CASE.15
 CL-TEST::CASE.16
 CL-TEST::CASE.17
 CL-TEST::CASE.18
 CL-TEST::CASE.19
 CL-TEST::CASE.20
 CL-TEST::CASE.21
 CL-TEST::CASE.22
 CL-TEST::CASE.23
 CL-TEST::CASE.24
 CL-TEST::CASE.25
 CL-TEST::CASE.26
 CL-TEST::CASE.27
 CL-TEST::CASE.28
 CL-TEST::CASE.29
 CL-TEST::CASE.30
 CL-TEST::CASE.31
 CL-TEST::CASE.32
 CL-TEST::CASE.33
 CL-TEST::CASE.34
 CL-TEST::CASE.35
 CL-TEST::CASE.36
 CL-TEST::CASE.37
 CL-TEST::CASE.ERROR.1
 CL-TEST::CASE.ERROR.2
 CL-TEST::CASE.ERROR.3
 CL-TEST::CATCH.1
 CL-TEST::CATCH.2
 CL-TEST::CATCH.3
 CL-TEST::CATCH.4
 CL-TEST::CATCH.5
 CL-TEST::CATCH.7
 CL-TEST::CATCH.8
 CL-TEST::CATCH.9
 CL-TEST::CATCH.10
 CL-TEST::CATCH.11
 CL-TEST::CATCH.12
 CL-TEST::CATCH.13
 CL-TEST::CATCH.14
 CL-TEST::CATCH.15
 CL-TEST::CATCH.16
Test CL-TEST::THROW-ERROR failed
Form: (CL-TEST:SIGNALS-ERROR (THROW (GENSYM) NIL) CONTROL-ERROR)
Expected value:
          T
Actual value:
          #<Type-Error 5000017F45E9> [Actual value: #<error during printing>
Test CL-TEST::CCASE.1 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          2
Actual value:
          #<Undefined-Function CL-TEST::A> [Actual value: #<error during printing>
Test CL-TEST::CCASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X))
Expected value:
          T
Actual value:
          #<Undefined-Function CCASE> [Actual value: #<error during printing>
Test CL-TEST::CCASE.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          T
Actual value:
          #<Undefined-Function CL-TEST::A> [Actual value: #<error during printing>
Test CL-TEST::CCASE.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (T NIL)))
Expected value:
          T
Actual value:
          #<Undefined-Function T> [Actual value: #<error during printing>
Test CL-TEST::CCASE.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (CCASE CL-TEST::X (OTHERWISE NIL)))
Expected value:
          T
Actual value:
          #<Undefined-Function OTHERWISE> [Actual value: #<error during printing>
Test CL-TEST::CCASE.6 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::Z) 1) ((CL-TEST::Y CL-TEST::B CL-TEST::W) 2) ((CL-TEST::B CL-TEST::C) 3)))
Expected value:
          2
Actual value:
          #<Type-Error 400001741C49> [Actual value: #<error during printing>
Test CL-TEST::CCASE.7 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::Z))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::B CL-TEST::C) 1) ((CL-TEST::D CL-TEST::E) 2) ((CL-TEST::F CL-TEST::Z CL-TEST::G) 3)))
Expected value:
          3
Actual value:
          #<Type-Error 400001757039> [Actual value: #<error during printing>
Test CL-TEST::CCASE.8 failed
Form: (LET ((CL-TEST::X (1+ MOST-POSITIVE-FIXNUM))) (CCASE CL-TEST::X (4611686018427387904 (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Type-Error 40000176D229> [Actual value: #<error during printing>
Test CL-TEST::CCASE.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X NIL (CCASE CL-TEST::X (NIL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Undefined-Function NIL> [Actual value: #<error during printing>
Test CL-TEST::CCASE.10 failed
Form: (LET (CL-TEST::X) (CCASE CL-TEST::X ((NIL) (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Type-Error 400001917169> [Actual value: #<error during printing>
Test CL-TEST::CCASE.11 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::A (VALUES 1 2 3)) (CL-TEST::C NIL)))
Expected values:
          1
          2
          3
Actual value:
          #<Undefined-Function CL-TEST::B> [Actual value: #<error during printing>
Test CL-TEST::CCASE.12 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (CCASE CL-TEST::X (CL-TEST::A 10)))
Expected value:
          T
Actual value:
          #<Undefined-Function CL-TEST::A> [Actual value: #<error during printing>
Test CL-TEST::CCASE.13 failed
Form: (LET ((CL-TEST::X T)) (CCASE CL-TEST::X ((T) 10) (T 20)))
Expected value:
          10
Actual value:
          #<Type-Error 500001495E09> [Actual value: #<error during printing>
Test CL-TEST::CCASE.14 failed
Form: (LET ((CL-TEST::X (LIST (QUOTE CL-TEST::A) (QUOTE CL-TEST::B)))) (EVAL (BACKQUOTE (LET ((CL-TEST::Y (QUOTE (BQ-COMMA CL-TEST::X)))) (CCASE CL-TEST::Y (((BQ-COMMA CL-TEST::X)) 1) (CL-TEST::A 2))))))
Expected value:
          1
Actual value:
          #<Type-Error 5000014D1889> [Actual value: #<error during printing>
Test CL-TEST::CCASE.15 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE OTHERWISE) (CCASE CL-TEST::X ((T) 10)))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH OTHERWISE (T))
Test CL-TEST::CCASE.16 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (CCASE CL-TEST::X ((OTHERWISE) 10)))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH T (OTHERWISE))
Test CL-TEST::CCASE.17 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) (OTHERWISE 2)))
Expected value:
          T
Actual value:
          #<Undefined-Function CL-TEST::B> [Actual value: #<error during printing>
Test CL-TEST::CCASE.19 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (CCASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((T) 2)))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH CL-TEST::A (T))
Test CL-TEST::CCASE.20 failed
Form: (LET ((CL-TEST::X #\a)) (CCASE CL-TEST::X ((#\b #\c) 10) ((#\d #\e #\A) 20) (NIL 30) ((#\z #\a #\y) 40)))
Expected value:
          40
Actual value:
          #<Type-Error 40000149C9F9> [Actual value: #<error during printing>
Test CL-TEST::CCASE.21 failed
Form: (LET ((CL-TEST::X 1)) (CCASE CL-TEST::X (1 (VALUES)) (2 (QUOTE CL-TEST::A))))
Expected values:
Actual value:
          #<Type-Error 4000014E73D9> [Actual value: #<error during printing>
Test CL-TEST::CCASE.23 failed
Form: (LET ((CL-TEST::X 1)) (CCASE CL-TEST::X (1 (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))
Expected values:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Type-Error 4000014F6DD9> [Actual value: #<error during printing>
Test CL-TEST::CCASE.25 failed
Form: (LET ((CL-TEST::A (VECTOR (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C) (QUOTE CL-TEST::D) (QUOTE CL-TEST::E))) (CL-TEST::I 1)) (VALUES (CCASE (AREF CL-TEST::A (INCF CL-TEST::I)) (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3) (CL-TEST::D 4)) CL-TEST::I))
Expected values:
          3
          2
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>
Test CL-TEST::CCASE.26 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X ((CL-TEST::A CL-TEST::B CL-TEST::C) 10) (CL-TEST::B 20)))
Expected value:
          10
Actual value:
          #<Type-Error 400001566809> [Actual value: #<error during printing>
Test CL-TEST::CCASE.27 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::B 20) ((CL-TEST::A CL-TEST::B CL-TEST::C) 10)))
Expected value:
          20
Actual value:
          #<Type-Error 400001579629> [Actual value: #<error during printing>
Test CL-TEST::CCASE.28 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::B))) (CCASE CL-TEST::X (CL-TEST::B 20) (CL-TEST::B 10) (CL-TEST::D 0)))
Expected value:
          20
Actual value:
          #<Undefined-Function CL-TEST::B> [Actual value: #<error during printing>
Test CL-TEST::CCASE.29 failed
Form: (LET ((CL-TEST::X NIL) (CL-TEST::Y 2)) (VALUES (CCASE CL-TEST::Y (1 (SETQ CL-TEST::X (QUOTE CL-TEST::A)) (QUOTE CL-TEST::W)) (2 (SETQ CL-TEST::X (QUOTE CL-TEST::B)) (QUOTE CL-TEST::Y)) (3 (SETQ CL-TEST::X (QUOTE CL-TEST::C)) (QUOTE CL-TEST::Z))) CL-TEST::X))
Expected values:
          CL-TEST::Y
          CL-TEST::B
Actual value:
          #<Type-Error 4000015C3499> [Actual value: #<error during printing>
Test CL-TEST::CCASE.30 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CCASE CL-TEST::X (CL-TEST::A)))
Expected value:
          NIL
Actual value:
          #<Undefined-Function CL-TEST::A> [Actual value: #<error during printing>
Test CL-TEST::CCASE.31 failed
Form: (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (STORE-VALUE 7 CL-TEST::C))))) (LET ((CL-TEST::X 0)) (CCASE CL-TEST::X (1 :BAD) (7 :GOOD) (2 NIL))))
Expected value:
          :GOOD
Actual value:
          #<Type-Error 400001609229> [Actual value: #<error during printing>

 CL-TEST::CCASE.32
Test CL-TEST::CCASE.33 failed
Form: (LET ((CL-TEST::X :B)) (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CCASE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M CL-TEST::X)) (:A :BAD1) (:B :GOOD) (:C :BAD2))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function :A> [Actual value: #<error during printing>
Test CL-TEST::CCASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function %APPLY> [Actual value: #<error during printing>
Test CL-TEST::CCASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of FREF is NIL, which is not of type FUNCTION-REFERENCE.> [Actual value: #<error during printing>
Test CL-TEST::CCASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CCASE)) (QUOTE (CCASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of FREF is NIL, which is not of type FUNCTION-REFERENCE.> [Actual value: #<error during printing>
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Compiled-Function CONS 615269>) = T, (TYPEP #<Compiled-Function CONS 615269> 'COMPILED-FUNCTION) = NIL
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Compiled-Function CAR 21C749>) = T, (TYPEP #<Compiled-Function CAR 21C749> 'COMPILED-FUNCTION) = NIL
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Compiled-Function APPEND 800254A9>) = T, (TYPEP #<Compiled-Function APPEND 800254A9> 'COMPILED-FUNCTION) = NIL
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Compiled-Function VALUES 8007FE99>) = T, (TYPEP #<Compiled-Function VALUES 8007FE99> 'COMPILED-FUNCTION) = NIL
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Compiled-Function (MACRO-FUNCTION COND) 8014F849>) = T, (TYPEP #<Compiled-Function (MACRO-FUNCTION COND) 8014F849> 'COMPILED-FUNCTION) = NIL
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Compiled-Function CL-TEST::MEANINGLESS-USER-FUNCTION-FOR-UNIVERSE 805E1619>) = T, (TYPEP #<Compiled-Function CL-TEST::MEANINGLESS-USER-FUNCTION-FOR-UNIVERSE 805E1619> 'COMPILED-FUNCTION) = NIL
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 80096D79>) = T, (TYPEP #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 80096D79> 'COMPILED-FUNCTION) = NIL
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Compiled-Function (LAMBDA :IN (LAMBDA :IN NIL)) 800B4D69>) = T, (TYPEP #<Compiled-Function (LAMBDA :IN (LAMBDA :IN NIL)) 800B4D69> 'COMPILED-FUNCTION) = NIL
(FUNCALL #<Compiled-Function COMPILED-FUNCTION-P 805895E9> #<Compiled-Function (LAMBDA :IN NIL) 800B5169>) = T, (TYPEP #<Compiled-Function (LAMBDA :IN NIL) 800B5169> 'COMPILED-FUNCTION) = NIL
Test CL-TEST::COMPILED-FUNCTION-P.1 failed
Form: (CL-TEST::CHECK-TYPE-PREDICATE (FUNCTION COMPILED-FUNCTION-P) (QUOTE COMPILED-FUNCTION))
Expected value:
          NIL
Actual value:
          (#<Compiled-Function CONS 615269> #<Compiled-Function CAR 21C749> #<Compiled-Function APPEND 800254A9> #<Compiled-Function VALUES 8007FE99> #<Compiled-Function (MACRO-FUNCTION COND) 8014F849> #<Compiled-Function CL-TEST::MEANINGLESS-USER-FUNCTION-FOR-UNIVERSE 805E1619> #<Standard-Generic-Function CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE 80096D79> #<Compiled-Function (LAMBDA :IN (LAMBDA :IN NIL)) 800B4D69> #<Compiled-Function (LAMBDA :IN NIL) 800B5169>)

 CL-TEST::COMPILED-FUNCTION-P.2
 CL-TEST::COMPILED-FUNCTION-P.3
 CL-TEST::COMPILED-FUNCTION-P.ORDER.1
 CL-TEST::COMPILED-FUNCTION-P.ERROR.1
 CL-TEST::COMPILED-FUNCTION-P.ERROR.2
 CL-TEST::COMPLEMENT.1
 CL-TEST::COMPLEMENT.2
 CL-TEST::COMPLEMENT.3
 CL-TEST::COMPLEMENT.4
 CL-TEST::COMPLEMENT.5
 CL-TEST::COMPLEMENT.6
 CL-TEST::COMPLEMENT.7
Test CL-TEST::COMPLEMENT.8 failed
Form: (FLET ((CL-TEST::%F (&KEY CL-TEST::X CL-TEST::Y) (IF CL-TEST::X (NOT CL-TEST::Y) CL-TEST::Y))) (LET ((CL-TEST::CF (COMPLEMENT (FUNCTION CL-TEST::%F)))) (VALUES (LIST (CL-TEST::%F) (CL-TEST::%F :X NIL) (CL-TEST::%F :X T) (CL-TEST::%F :Y NIL) (CL-TEST::%F :Y T :Y NIL) (CL-TEST::%F :X NIL :Y NIL) (CL-TEST::%F :X T :Y NIL) (CL-TEST::%F :Y T :X NIL) (CL-TEST::%F :X T :Y T)) (LIST (FUNCALL CL-TEST::CF) (FUNCALL CL-TEST::CF :X NIL) (FUNCALL CL-TEST::CF :X T) (FUNCALL CL-TEST::CF :Y NIL) (FUNCALL CL-TEST::CF :Y T) (FUNCALL CL-TEST::CF :X NIL :Y NIL) (FUNCALL CL-TEST::CF :X T :Y NIL) (FUNCALL CL-TEST::CF :Y T :X NIL) (FUNCALL CL-TEST::CF :X T :Y T :X NIL)) (LIST (FUNCALL CL-TEST::CF :X NIL :Y T :FOO NIL :ALLOW-OTHER-KEYS T) (FUNCALL CL-TEST::CF :X NIL :Y T :ALLOW-OTHER-KEYS NIL)))))
Expected values:
          (NIL NIL T NIL T NIL T T NIL)
          (T T NIL T NIL T NIL NIL T)
          (NIL NIL)
Actual value:
          #<Simple-Error Unknown &KEY argument :FOO. Expected one of (:X :Y).> [Actual value: #<error during printing>

 CL-TEST::COMPLEMENT.9
 CL-TEST::COMPLEMENT.10
Test CL-TEST::COMPLEMENT.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (LET ((CL-TEST::FN (COMPLEMENT (PROGN (INCF CL-TEST::I) (FUNCTION NULL))))) (VALUES CL-TEST::I (MAPCAR CL-TEST::FN (QUOTE (CL-TEST::A CL-TEST::B NIL CL-TEST::C 1 NIL T NIL))) CL-TEST::I)))
Expected values:
          1
          (T T NIL T T NIL T NIL)
          1
Actual values:
          0
          (T T NIL T T NIL T NIL)
          1

 CL-TEST::COMPLEMENT.ERROR.1
 CL-TEST::COMPLEMENT.ERROR.2
 CL-TEST::COMPLEMENT.ERROR.3
 CL-TEST::COMPLEMENT.ERROR.4
Test CL-TEST::COMPLEMENT.ERROR.5 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :FOO T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :FOO. Expected one of NIL.> [Actual value: #<error during printing>
Test CL-TEST::COMPLEMENT.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (COMPLEMENT (FUNCTION (LAMBDA (&KEY) T))) :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T :FOO T) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>

 CL-TEST::COMPLEMENT.ERROR.7
 CL-TEST::COND.1
 CL-TEST::COND.2
 CL-TEST::COND.3
 CL-TEST::COND.4
 CL-TEST::COND.5
 CL-TEST::COND.6
 CL-TEST::COND.7
 CL-TEST::COND.8
 CL-TEST::COND.9
 CL-TEST::COND.10
 CL-TEST::COND.11
 CL-TEST::COND.12
 CL-TEST::COND.13
 CL-TEST::COND.14
 CL-TEST::COND.15
 CL-TEST::COND.16
 CL-TEST::COND.17
 CL-TEST::COND.ERROR.1
 CL-TEST::COND.ERROR.2
 CL-TEST::COND.ERROR.3
 CL-TEST::CONSTANTLY.1
 CL-TEST::CONSTANTLY.2
 CL-TEST::CONSTANTLY.3
 CL-TEST::CONSTANTLY.ERROR.1
 CL-TEST::CONSTANTLY.ERROR.2
Test CL-TEST::CTYPECASE.1 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (QUOTE CL-TEST::A)) (T (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function INTEGER> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::X) (CTYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A))))) (FUNCTION SYMBOLP))
Expected value:
          NIL
Actual value:
          #<Undefined-Function SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.3 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (SYMBOL (QUOTE CL-TEST::A)) (T (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::B
Actual value:
          #<Undefined-Function SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.4 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (VALUES))))
Expected values:
Actual value:
          #<Undefined-Function T> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.5 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (VALUES)) (T (QUOTE CL-TEST::A))))
Expected values:
Actual value:
          #<Undefined-Function INTEGER> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.6 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (BIT (QUOTE CL-TEST::A)) (INTEGER (QUOTE CL-TEST::B))))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Type-Error The value of BIT-ARRAY is CL-TEST::A, which is not of type (ARRAY BIT).> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.7 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (QUOTE CL-TEST::A))))
Expected value:
          CL-TEST::A
Actual value:
          #<Undefined-Function T> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.8 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (T (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)))))
Expected values:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function T> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.9 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER (VALUES (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C))) (T NIL)))
Expected values:
          CL-TEST::A
          CL-TEST::B
          CL-TEST::C
Actual value:
          #<Undefined-Function INTEGER> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.10 failed
Form: (LET ((CL-TEST::X 0) (CL-TEST::Y 1)) (VALUES (CTYPECASE CL-TEST::Y (BIT (INCF CL-TEST::X) (QUOTE CL-TEST::A)) (INTEGER (INCF CL-TEST::X 2) (QUOTE CL-TEST::B)) (T (INCF CL-TEST::X 4) (QUOTE CL-TEST::C))) CL-TEST::X))
Expected values:
          CL-TEST::A
          1
Actual value:
          #<Simple-Type-Error The value of BIT-ARRAY is NIL, which is not of type (ARRAY BIT).> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.11 failed
Form: (LET ((CL-TEST::X 1)) (CTYPECASE CL-TEST::X (INTEGER) (T (QUOTE CL-TEST::A))))
Expected value:
          NIL
Actual value:
          #<Undefined-Function INTEGER> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.12 failed
Form: (LET ((CL-TEST::X 1)) (VALUES (CL-TEST::HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CL-TEST::C) (ASSERT (EQL (TYPE-ERROR-DATUM CL-TEST::C) 1)) (ASSERT (NOT (TYPEP 1 (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) (STORE-VALUE (QUOTE CL-TEST::A) CL-TEST::C))))) (CTYPECASE CL-TEST::X (SYMBOL :GOOD) (FLOAT :BAD))) CL-TEST::X))
Expected values:
          :GOOD
          CL-TEST::A
Actual value:
          #<Undefined-Function SYMBOL> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.13 failed
Form: (LET ((CL-TEST::X (QUOTE CL-TEST::A))) (CTYPECASE CL-TEST::X (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL 500000012A89> (QUOTE CL-TEST::GOOD))))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Type-Error 5000015CBC59> [Actual value: #<error during printing>

 CL-TEST::CTYPECASE.14
Test CL-TEST::CTYPECASE.15 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CTYPECASE (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :FOO)) (INTEGER :BAD1) (KEYWORD :GOOD) (SYMBOL :BAD2)))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function INTEGER> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.16 failed
Form: (MACROLET ((CL-TEST::%M (CL-TEST::Z) CL-TEST::Z)) (CTYPECASE :FOO (INTEGER (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :BAD1))) (KEYWORD (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :GOOD))) (SYMBOL (CL-TEST::EXPAND-IN-CURRENT-ENV (CL-TEST::%M :BAD2)))))
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function INTEGER> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.ERROR.1 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Undefined-Function %APPLY> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.ERROR.2 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of FREF is NIL, which is not of type FUNCTION-REFERENCE.> [Actual value: #<error during printing>
Test CL-TEST::CTYPECASE.ERROR.3 failed
Form: (CL-TEST:SIGNALS-ERROR (FUNCALL (MACRO-FUNCTION (QUOTE CTYPECASE)) (QUOTE (CTYPECASE T)) NIL NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Type-Error The value of FREF is NIL, which is not of type FUNCTION-REFERENCE.> [Actual value: #<error during printing>

 CL-TEST::DEFCONSTANT.1
 CL-TEST::DEFCONSTANT.2
 CL-TEST::DEFCONSTANT.3
Test CL-TEST::DEFCONSTANT.4 failed
Form: (DOCUMENTATION (QUOTE CL-TEST::TEST-CONSTANT-2) (QUOTE VARIABLE))
Expected value:
          "This is the documentation."
Actual value:
          NIL

 CL-TEST::DEFCONSTANT.5
 CL-TEST::DEFCONSTANT.ERROR.1
 CL-TEST::DEFCONSTANT.ERROR.2
 CL-TEST::DEFCONSTANT.ERROR.3
Test CL-TEST::DEFINE-MODIFY-MACRO.1 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::DMM1-APPENDF (&REST CL-TEST::ARGS) APPEND "Append lists onto a list"))) (EVAL (QUOTE (LET ((CL-TEST::U (QUOTE (CL-TEST::P CL-TEST::Q CL-TEST::R))) CL-TEST::V) (LIST (SETQ CL-TEST::V CL-TEST::U) (CL-TEST::DMM1-APPENDF CL-TEST::U (QUOTE (CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))) (CL-TEST::DMM1-APPENDF CL-TEST::U NIL) (CL-TEST::DMM1-APPENDF CL-TEST::U (QUOTE (CL-TEST::E CL-TEST::F CL-TEST::G))) CL-TEST::U CL-TEST::V)))))
Expected values:
          CL-TEST::DMM1-APPENDF
          ((CL-TEST::P CL-TEST::Q CL-TEST::R) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R))
Actual values:
          #<Compiled-Function (MACRO-FUNCTION CL-TEST::DMM1-APPENDF) 807AD179>
          (NIL (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D CL-TEST::E CL-TEST::F CL-TEST::G) (CL-TEST::P CL-TEST::Q CL-TEST::R))
Test CL-TEST::DEFINE-MODIFY-MACRO.2 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::I 10)) (LIST (CL-TEST::NEW-INCF CL-TEST::I) (CL-TEST::NEW-INCF CL-TEST::I 100) CL-TEST::I)))))
Expected values:
          CL-TEST::NEW-INCF
          (11 111 111)
Actual values:
          #<Compiled-Function (MACRO-FUNCTION CL-TEST::NEW-INCF) 807AD989>
          (NIL NIL 111)
Test CL-TEST::DEFINE-MODIFY-MACRO.3 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF1 (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::A (VECTOR 0 0 0 0 0)) (CL-TEST::I 1)) (LIST (CL-TEST::NEW-INCF1 (AREF CL-TEST::A (INCF CL-TEST::I))) CL-TEST::A CL-TEST::I)))))
Expected values:
          CL-TEST::NEW-INCF1
          (1 #(0 0 1 0 0) 2)
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>
Test CL-TEST::DEFINE-MODIFY-MACRO.4 failed
Form: (VALUES (EVAL (QUOTE (DEFINE-MODIFY-MACRO CL-TEST::NEW-INCF2 (&OPTIONAL (CL-TEST::DELTA 1)) +))) (EVAL (QUOTE (LET ((CL-TEST::A (VECTOR 0 0 0 0 0)) (CL-TEST::I 1)) (LIST (CL-TEST::NEW-INCF2 (AREF CL-TEST::A (INCF CL-TEST::I)) (INCF CL-TEST::I)) CL-TEST::A CL-TEST::I)))))
Expected values:
          CL-TEST::NEW-INCF2
          (3 #(0 0 3 0 0) 3)
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type REAL.> [Actual value: #<error during printing>

 CL-TEST::DEFINE-MODIFY-MACRO.ERROR.1
 CL-TEST::DEFINE-MODIFY-MACRO.DOCUMENTATION.1
 CL-TEST::DEFINE-MODIFY-MACRO.DOCUMENTATION.2
 CL-TEST::DEFPARAMETER.1
 CL-TEST::DEFPARAMETER.2
 CL-TEST::DEFPARAMETER.3
Test CL-TEST::DEFPARAMETER.4 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2*)
Expected values:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "Whatever."
          200
Actual values:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          NAME
          NIL
          200
Test CL-TEST::DEFPARAMETER.5 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*)) (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2* (DEFPARAMETER CL-TEST::*DEFPARAMETER-TEST-VAR-2* 300 "And ever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFPARAMETER-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFPARAMETER-TEST-VAR-2*)
Expected values:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "Whatever."
          200
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          "And ever."
          300
Actual values:
          CL-TEST::*DEFPARAMETER-TEST-VAR-2*
          NAME
          NIL
          200
          NAME
          NIL
          300

 CL-TEST::DEFPARAMETER.ERROR.1
 CL-TEST::DEFPARAMETER.ERROR.2
 CL-TEST::DEFPARAMETER.ERROR.3
 CL-TEST::DEFUN.1
 CL-TEST::DEFUN.2
 CL-TEST::DEFUN.3
 CL-TEST::DEFUN.4
Test CL-TEST::DEFUN.5 failed
Form: (LET ((CL-TEST::X 1)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X 2)) (DEFUN CL-TEST::DEFUN-TEST-FUN-5 (&AUX (CL-TEST::Y CL-TEST::X)) (DECLARE (SPECIAL CL-TEST::X)) (VALUES CL-TEST::Y CL-TEST::X)) (CL-TEST::DEFUN-TEST-FUN-5)))
Expected values:
          2
          1
Actual values:
          1
          1

 CL-TEST::DEFUN.6
 CL-TEST::DEFUN.7
 CL-TEST::DEFUN.8
 CL-TEST::DEFUN.ERROR.1
 CL-TEST::DEFUN.ERROR.2
 CL-TEST::DEFUN.ERROR.3
 CL-TEST::DEFUN.ERROR.4
 CL-TEST::DEFVAR.1
 CL-TEST::DEFVAR.2
 CL-TEST::DEFVAR.3
Test CL-TEST::DEFVAR.4 failed
Form: (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*)) (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2*)
Expected values:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "Whatever."
          200
Actual values:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          NIL
          200
Test CL-TEST::DEFVAR.5 failed
Form: (LET ((CL-TEST::X 0)) (VALUES (MAKUNBOUND (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*)) (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* 200 "Whatever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2* (DEFVAR CL-TEST::*DEFVAR-TEST-VAR-2* (INCF CL-TEST::X) "And ever.") (DOCUMENTATION (QUOTE CL-TEST::*DEFVAR-TEST-VAR-2*) (QUOTE VARIABLE)) CL-TEST::*DEFVAR-TEST-VAR-2* CL-TEST::X))
Expected values:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "Whatever."
          200
          CL-TEST::*DEFVAR-TEST-VAR-2*
          "And ever."
          200
          0
Actual values:
          CL-TEST::*DEFVAR-TEST-VAR-2*
          CL-TEST::*DEFVAR-TEST-VAR-2*
          NIL
          200
          CL-TEST::*DEFVAR-TEST-VAR-2*
          NIL
          200
          0

 CL-TEST::DEFVAR.ERROR.1
 CL-TEST::DEFVAR.ERROR.2
 CL-TEST::DEFVAR.ERROR.3
 CL-TEST::DESTRUCTURING-BIND.1
 CL-TEST::DESTRUCTURING-BIND.2
 CL-TEST::DESTRUCTURING-BIND.3
 CL-TEST::DESTRUCTURING-BIND.4
 CL-TEST::DESTRUCTURING-BIND.5
 CL-TEST::DESTRUCTURING-BIND.6
 CL-TEST::DESTRUCTURING-BIND.7
 CL-TEST::DESTRUCTURING-BIND.7A
 CL-TEST::DESTRUCTURING-BIND.8
 CL-TEST::DESTRUCTURING-BIND.9
 CL-TEST::DESTRUCTURING-BIND.10
 CL-TEST::DESTRUCTURING-BIND.11
 CL-TEST::DESTRUCTURING-BIND.12
 CL-TEST::DESTRUCTURING-BIND.12A
 CL-TEST::DESTRUCTURING-BIND.13
 CL-TEST::DESTRUCTURING-BIND.14
 CL-TEST::DESTRUCTURING-BIND.15
 CL-TEST::DESTRUCTURING-BIND.16
 CL-TEST::DESTRUCTURING-BIND.17
 CL-TEST::DESTRUCTURING-BIND.17A
 CL-TEST::DESTRUCTURING-BIND.17C
 CL-TEST::DESTRUCTURING-BIND.18
 CL-TEST::DESTRUCTURING-BIND.19
Test CL-TEST::DESTRUCTURING-BIND.20 failed
Form: (DESTRUCTURING-BIND (&WHOLE (CL-TEST::A . CL-TEST::B) CL-TEST::C . CL-TEST::D) (QUOTE (1 . 2)) (LIST CL-TEST::A CL-TEST::B CL-TEST::C CL-TEST::D))
Expected value:
          (1 2 1 2)
Actual value:
          #<Unbound-Variable CL-TEST::A> [Actual value: #<error during printing>

 CL-TEST::DESTRUCTURING-BIND.21
 CL-TEST::DESTRUCTURING-BIND.22
 CL-TEST::DESTRUCTURING-BIND.23
 CL-TEST::DESTRUCTURING-BIND.24
 CL-TEST::DESTRUCTURING-BIND.25
 CL-TEST::DESTRUCTURING-BIND.26
 CL-TEST::DESTRUCTURING-BIND.27
 CL-TEST::DESTRUCTURING-BIND.28
 CL-TEST::DESTRUCTURING-BIND.29
 CL-TEST::DESTRUCTURING-BIND.30
 CL-TEST::DESTRUCTURING-BIND.31
 CL-TEST::DESTRUCTURING-BIND.ERROR.7
 CL-TEST::DESTRUCTURING-BIND.ERROR.8
 CL-TEST::DESTRUCTURING-BIND.ERROR.9
 CL-TEST::ECASE.1
Test CL-TEST::ECASE.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X))
Expected value:
          T
Actual value:
          #<Invalid-Arguments 4000016615D9> [Actual value: #<error during printing>
Test CL-TEST::ECASE.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (CL-TEST::A 1) (CL-TEST::B 2) (CL-TEST::C 3)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (CL-TEST::C CL-TEST::B CL-TEST::A)> [Actual value: #<error during printing>
Test CL-TEST::ECASE.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (T NIL)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (T)> [Actual value: #<error during printing>
Test CL-TEST::ECASE.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X 1 (ECASE CL-TEST::X (OTHERWISE NIL)))
Expected value:
          T
Actual value:
          #<Simple-Error 1 fell through ECASE expression. Wanted one of (OTHERWISE)> [Actual value: #<error during printing>

 CL-TEST::ECASE.6
 CL-TEST::ECASE.7
Test CL-TEST::ECASE.8 failed
Form: (ECASE (1+ MOST-POSITIVE-FIXNUM) (4611686018427387904 (QUOTE CL-TEST::A)))
Expected value:
          CL-TEST::A
Actual value:
          #<Simple-Error 4611686018427387904 fell through ECASE expression. Wanted one of (4611686018427387904)> [Actual value: #<error during printing>
Test CL-TEST::ECASE.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X NIL (ECASE CL-TEST::X (NIL (QUOTE CL-TEST::A))))
Expected value:
          T
Actual value:
          #<Invalid-Arguments 50000169E929> [Actual value: #<error during printing>

 CL-TEST::ECASE.10
 CL-TEST::ECASE.11
Test CL-TEST::ECASE.12 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (ECASE CL-TEST::X (CL-TEST::A 10)))
Expected value:
          T
Actual value:
          #<Simple-Error T fell through ECASE expression. Wanted one of (CL-TEST::A)> [Actual value: #<error during printing>

 CL-TEST::ECASE.13
 CL-TEST::ECASE.14
Test CL-TEST::ECASE.15 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE OTHERWISE) (ECASE CL-TEST::X ((T) 10)))
Expected value:
          T
Actual value:
          #<Simple-Error OTHERWISE fell through ECASE expression. Wanted one of (T)> [Actual value: #<error during printing>
Test CL-TEST::ECASE.16 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X T (ECASE CL-TEST::X ((OTHERWISE) 10)))
Expected value:
          T
Actual value:
          #<Simple-Error T fell through ECASE expression. Wanted one of (OTHERWISE)> [Actual value: #<error during printing>
Test CL-TEST::ECASE.17 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) (OTHERWISE 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (OTHERWISE CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>
Test CL-TEST::ECASE.18 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((OTHERWISE) 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (OTHERWISE CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>
Test CL-TEST::ECASE.19 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE CL-TEST::A) (ECASE CL-TEST::X (CL-TEST::B 0) (CL-TEST::C 1) ((T) 2)))
Expected value:
          T
Actual value:
          #<Simple-Error CL-TEST::A fell through ECASE expression. Wanted one of (T CL-TEST::C CL-TEST::B)> [Actual value: #<error during printing>

 CL-TEST::ECASE.20
 CL-TEST::ECASE.21
 CL-TEST::ECASE.23
 CL-TEST::ECASE.25
 CL-TEST::ECASE.26
 CL-TEST::ECASE.27
 CL-TEST::ECASE.28
 CL-TEST::ECASE.29
 CL-TEST::ECASE.31
 CL-TEST::ECASE.32
 CL-TEST::ECASE.33
 CL-TEST::ECASE.34
 CL-TEST::ECASE.ERROR.1
 CL-TEST::ECASE.ERROR.2
 CL-TEST::ECASE.ERROR.3
 CL-TEST::EQL.1
 CL-TEST::EQL.2
 CL-TEST::EQL.3
 CL-TEST::EQL.4
Test CL-TEST::EQL.5 failed
Form: (CL-TEST::EQLT 12345678901234567890 12345678901234567890)
Expected value:
          T
Actual value:
          NIL

 CL-TEST::EQL.7
Test CL-TEST::EQL.8 failed
Form: (CL-TEST::EQLT #C(1 -2) #C(1 -2))
Expected value:
          T
Actual value:
          NIL

 CL-TEST::EQL.9
 CL-TEST::EQL.10
Test CL-TEST::EQL.11 failed
Form: (CL-TEST::EQLT #C(1 -2) (- #C(-1 2)))
Expected value:
          T
Actual value:
          NIL
Test CL-TEST::EQL.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (EQL (SETF CL-TEST::X (INCF CL-TEST::I)) (SETF CL-TEST::Y (INCF CL-TEST::I))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected values:
          NIL
          2
          1
          2
Actual values:
          T
          2
          NIL
          NIL

 CL-TEST::EQL.ERROR.1
 CL-TEST::EQL.ERROR.2
 CL-TEST::EQL.ERROR.3
 CL-TEST::EQ.ERROR.1
 CL-TEST::EQ.ERROR.2
 CL-TEST::EQ.ERROR.3
 CL-TEST::EQUAL.1
 CL-TEST::EQUAL.2
 CL-TEST::EQUAL.3
 CL-TEST::EQUAL.4
 CL-TEST::EQUAL.5
 CL-TEST::EQUAL.6
 CL-TEST::EQUAL.7
 CL-TEST::EQUAL.8
 CL-TEST::EQUAL.9
 CL-TEST::EQUAL.10
 CL-TEST::EQUAL.11
 CL-TEST::EQUAL.12
 CL-TEST::EQUAL.15
 CL-TEST::EQUAL.16
 CL-TEST::EQUAL.17
 CL-TEST::EQUAL.18
 CL-TEST::EQUAL.19
Test CL-TEST::EQUAL.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (EQUAL (SETF CL-TEST::X (INCF CL-TEST::I)) (SETF CL-TEST::Y (INCF CL-TEST::I))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected values:
          NIL
          2
          1
          2
Actual values:
          T
          2
          NIL
          NIL

 CL-TEST::EQUAL.ERROR.1
 CL-TEST::EQUAL.ERROR.2
 CL-TEST::EQUAL.ERROR.3
 CL-TEST::EQUALP.1
 CL-TEST::EQUALP.2
 CL-TEST::EQUALP.3
 CL-TEST::EQUALP.4
 CL-TEST::EQUALP.7
Test CL-TEST::EQUALP.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (BACKQUOTE (UNSIGNED-BYTE (BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::N = (1+ (RANDOM 20)) CL-TEST::FOR CL-TEST::VALS = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (RANDOM CL-TEST::BOUND)) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VALS))
Expected value:
          NIL
Actual value:
          ((2 (UNSIGNED-BYTE 2) (1 2 3 0 1)) (3 (UNSIGNED-BYTE 3) (7 0 1 2 3 4 5 6 7 0 1)) (4 (UNSIGNED-BYTE 4) (11 12 13)))
Test CL-TEST::EQUALP.9 failed
Form: (LOOP CL-TEST::FOR CL-TEST::NBITS CL-TEST::FROM 1 CL-TEST::TO 100 CL-TEST::FOR TYPE = (BACKQUOTE (SIGNED-BYTE (BQ-COMMA CL-TEST::NBITS))) CL-TEST::FOR CL-TEST::BOUND = (ASH 1 CL-TEST::NBITS) CL-TEST::FOR CL-TEST::N = (1+ (RANDOM 20)) CL-TEST::FOR CL-TEST::VALS = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (- (RANDOM CL-TEST::BOUND) (/ CL-TEST::BOUND 2))) CL-TEST::FOR CL-TEST::A1 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS :ELEMENT-TYPE TYPE) CL-TEST::FOR CL-TEST::A2 = (MAKE-ARRAY CL-TEST::N :INITIAL-CONTENTS CL-TEST::VALS) UNLESS (EQUALP CL-TEST::A1 CL-TEST::A2) CL-TEST::COLLECT (LIST CL-TEST::NBITS TYPE CL-TEST::VALS))
Expected value:
          NIL
Actual value:
          #<Type-Error 50000131F169> [Actual value: #<error during printing>

 CL-TEST::EQUALP.10
 CL-TEST::EQUALP.11
 CL-TEST::EQUALP.12
 CL-TEST::EQUALP.13
 CL-TEST::EQUALP.14
 CL-TEST::EQUALP.15
 CL-TEST::EQUALP.16
 CL-TEST::EQUALP.17
 CL-TEST::EQUALP.18
 CL-TEST::EQUALP.19
 CL-TEST::EQUALP.20
 CL-TEST::EQUALP.21
 CL-TEST::EQUALP.22
 CL-TEST::EQUALP.23
 CL-TEST::EQUALP.24
 CL-TEST::EQUALP.25
 CL-TEST::EQUALP.26
 CL-TEST::EQUALP.27
 CL-TEST::EQUALP.28
 CL-TEST::EQUALP.29
 CL-TEST::EQUALP.30
 CL-TEST::EQUALP.31
 CL-TEST::EQUALP.32
 CL-TEST::EQUALP.33
 CL-TEST::EQUALP.34
Test CL-TEST::EQUALP.35 failed
Form: (LOOP CL-TEST::FOR CL-TEST::TEST CL-TEST::IN (QUOTE (EQ EQL EQUAL EQUALP)) CL-TEST::COLLECT (FLET ((CL-TEST::%MAKE-TABLE NIL (APPLY (FUNCTION MAKE-HASH-TABLE) :TEST CL-TEST::TEST (BACKQUOTE ((BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :SIZE (RANDOM 100)))) (BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :REHASH-SIZE (1+ (RANDOM 50))))) (BQ-COMMA-ATSIGN (WHEN (CL-TEST:COIN) (LIST :REHASH-THRESHOLD (RANDOM 1.0))))))))) (LOOP CL-TEST::REPEAT 200 COUNT (LET ((CL-TEST::HT1 (CL-TEST::%MAKE-TABLE)) (CL-TEST::HT2 (CL-TEST::%MAKE-TABLE)) (CL-TEST::PAIRS (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::BELOW (RANDOM 100) CL-TEST::COLLECT (CONS (GENSYM) CL-TEST::I)))) (LOOP CL-TEST::FOR (CL-TEST::K . CL-TEST::V) CL-TEST::IN CL-TEST::PAIRS DO (SETF (GETHASH CL-TEST::K CL-TEST::HT1) CL-TEST::V)) (SETF CL-TEST::PAIRS (CL-TEST:RANDOM-PERMUTE CL-TEST::PAIRS)) (LOOP CL-TEST::FOR (CL-TEST::K . CL-TEST::V) CL-TEST::IN CL-TEST::PAIRS DO (SETF (GETHASH CL-TEST::K CL-TEST::HT2) CL-TEST::V)) (NOT (EQUALP CL-TEST::HT1 CL-TEST::HT2))))))
Expected value:
          (0 0 0 0)
Actual value:
          (200 200 200 200)
Test CL-TEST::EQUALP.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (EQUALP (SETF CL-TEST::X (INCF CL-TEST::I)) (SETF CL-TEST::Y (INCF CL-TEST::I))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected values:
          NIL
          2
          1
          2
Actual values:
          T
          2
          NIL
          NIL

 CL-TEST::EQUALP.ERROR.1
 CL-TEST::EQUALP.ERROR.2
 CL-TEST::EQUALP.ERROR.3
 CL-TEST::ETYPECASE.1
 CL-TEST::ETYPECASE.2
 CL-TEST::ETYPECASE.3
 CL-TEST::ETYPECASE.4
 CL-TEST::ETYPECASE.5
 CL-TEST::ETYPECASE.6
 CL-TEST::ETYPECASE.7
 CL-TEST::ETYPECASE.8
 CL-TEST::ETYPECASE.9
 CL-TEST::ETYPECASE.10
Test CL-TEST::ETYPECASE.11 failed
Form: (ETYPECASE 1 (INTEGER) (T (QUOTE CL-TEST::A)))
Expected value:
          NIL
Actual value:
          T
Test CL-TEST::ETYPECASE.12 failed
Form: (ETYPECASE (QUOTE CL-TEST::A) (NUMBER (QUOTE CL-TEST::BAD)) (#<Standard-Class SYMBOL 5000004CC0B9> (QUOTE CL-TEST::GOOD)))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Type-Error 500001ABE0D9> [Actual value: #<error during printing>

 CL-TEST::ETYPECASE.13
 CL-TEST::ETYPECASE.14
Test CL-TEST::ETYPECASE.15 failed
Form: (LET* ((CL-TEST::U (COERCE CL-TEST:*UNIVERSE* (QUOTE VECTOR))) (CL-TEST::LEN1 (LENGTH CL-TEST::U)) (CL-TEST::TYPES (COERCE CL-TEST::*CL-ALL-TYPE-SYMBOLS* (QUOTE VECTOR))) (CL-TEST::LEN2 (LENGTH CL-TEST::TYPES))) (LOOP CL-TEST::FOR CL-TEST::N = (RANDOM 10) CL-TEST::FOR CL-TEST::MY-TYPES = (LOOP CL-TEST::REPEAT CL-TEST::N CL-TEST::COLLECT (ELT CL-TEST::TYPES (RANDOM CL-TEST::LEN2))) CL-TEST::FOR CL-TEST::VAL = (ELT CL-TEST::U (RANDOM CL-TEST::LEN1)) CL-TEST::FOR CL-TEST::I = (POSITION CL-TEST::VAL CL-TEST::MY-TYPES :TEST (FUNCTION TYPEP)) CL-TEST::FOR CL-TEST::FORM = (BACKQUOTE (FUNCTION (LAMBDA (CL-TEST::X) (CL-TEST::HANDLER-CASE (ETYPECASE CL-TEST::X (BQ-COMMA-ATSIGN (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 0 CL-TEST::FOR TYPE CL-TEST::IN CL-TEST::MY-TYPES CL-TEST::COLLECT (BACKQUOTE ((BQ-COMMA TYPE) (BQ-COMMA CL-TEST::I)))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (EQL CL-TEST::X (TYPE-ERROR-DATUM CL-TEST::C))) (LET* ((CL-TEST::EXPECTED (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C))) (LET ((CL-TEST::EQUIV (CL-TEST::CHECK-EQUIVALENCE CL-TEST::EXPECTED (QUOTE (BQ-COMMA (CONS (QUOTE OR) CL-TEST::MY-TYPES)))))) (ASSERT (NULL CL-TEST::EQUIV) NIL "EQUIV = ~A" CL-TEST::EQUIV))) NIL))))) CL-TEST::FOR CL-TEST::J = (FUNCALL (EVAL CL-TEST::FORM) CL-TEST::VAL) CL-TEST::REPEAT 200 UNLESS (EQL CL-TEST::I CL-TEST::J) CL-TEST::COLLECT (LIST CL-TEST::N CL-TEST::MY-TYPES CL-TEST::VAL CL-TEST::I CL-TEST::FORM CL-TEST::J)))
Expected value:
          NIL
Actual value:
          #<Simple-Error EQUIV = (((SUBTYPEP (QUOTE (AND (OR SIMPLE-CONDITION SERIOUS-CONDITION) (NOT (OR SIMPLE-CONDITION SERIOUS-CONDITION)))) NIL) ==> NIL T) ((SUBTYPEP (QUOTE (AND (OR SIMPLE-CONDITION SERIOUS-CONDITION) (NOT (OR SIMPLE-CONDITION SERIOUS-CONDITION)))) NIL) ==> NIL T) ((SUBTYPEP (QUOTE (AND (NOT (OR SIMPLE-CONDITION SERIOUS-CONDITION)) (OR SIMPLE-CONDITION SERIOUS-CONDITION))) NIL) ==> NIL T) ((SUBTYPEP (QUOTE (AND (NOT (OR SIMPLE-CONDITION SERIOUS-CONDITION)) (OR SIMPLE-CONDITION SERIOUS-CONDITION))) NIL) ==> NIL T) ((SUBTYPEP T (QUOTE (OR (OR SIMPLE-CONDITION SERIOUS-CONDITION) (NOT (OR SIMPLE-CONDITION SERIOUS-CONDITION))))) ==> NIL T) ((SUBTYPEP T (QUOTE (OR (OR SIMPLE-CONDITION SERIOUS-CONDITION) (NOT (OR SIMPLE-CONDITION SERIOUS-CONDITION))))) ==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT (OR SIMPLE-CONDITION SERIOUS-CONDITION)) (OR SIMPLE-CONDITION SERIOUS-CONDITION)))) ==> NIL T) ((SUBTYPEP T (QUOTE (OR (NOT (OR SIMPLE-CONDITION SERIOUS-CONDITION)) (OR SIMPLE-CONDITION SERIOUS-CONDITION)))) ==> NIL T))> [Actual value: #<error during printing>

 CL-TEST::ETYPECASE.16
 CL-TEST::ETYPECASE.17
 CL-TEST::ETYPECASE.ERROR.1
 CL-TEST::ETYPECASE.ERROR.2
 CL-TEST::ETYPECASE.ERROR.3
 CL-TEST::EVERY.1
 CL-TEST::EVERY.2
 CL-TEST::EVERY.3
 CL-TEST::EVERY.4
 CL-TEST::EVERY.5
 CL-TEST::EVERY.6
 CL-TEST::EVERY.7
 CL-TEST::EVERY.8
 CL-TEST::EVERY.9
 CL-TEST::EVERY.10
 CL-TEST::EVERY.11
 CL-TEST::EVERY.12
 CL-TEST::EVERY.13
 CL-TEST::EVERY.14
 CL-TEST::EVERY.15
 CL-TEST::EVERY.16
 CL-TEST::EVERY.17
 CL-TEST::EVERY.18
Test CL-TEST::EVERY.19 failed
Form: (LOOP CL-TEST::FOR CL-TEST::I CL-TEST::FROM 1 CL-TEST::TO 40 CL-TEST::FOR TYPE = (BACKQUOTE (SIGNED-BYTE (BQ-COMMA CL-TEST::I))) UNLESS (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (10)) :INITIAL-CONTENTS (QUOTE (0 0 0 0 -1 -1 -1 -1 -1 -1)) :ELEMENT-TYPE TYPE :FILL-POINTER 4))) (EQUAL (LOOP CL-TEST::FOR CL-TEST::J CL-TEST::FROM 0 CL-TEST::TO 9 DO (SETF (FILL-POINTER CL-TEST::V) CL-TEST::J) CL-TEST::COLLECT (CL-TEST::NOTNOT (EVERY (FUNCTION ZEROP) CL-TEST::V))) (QUOTE (T T T T T NIL NIL NIL NIL NIL)))) CL-TEST::COLLECT CL-TEST::I)
Expected value:
          NIL
Actual value:
          (1)

 CL-TEST::EVERY.20
 CL-TEST::EVERY.21
Test CL-TEST::EVERY.22 failed
Form: (LET ((CL-TEST::V (MAKE-ARRAY (QUOTE (5)) :INITIAL-CONTENTS "abcde" :ELEMENT-TYPE (QUOTE BASE-CHAR)))) (VALUES (CL-TEST::NOTNOT (EVERY (FUNCTION ALPHA-CHAR-P) CL-TEST::V)) (SETF (AREF CL-TEST::V 2) #\0) (EVERY (FUNCTION ALPHA-CHAR-P) CL-TEST::V)))
Expected values:
          T
          #\0
          NIL
Actual values:
          T
          48
          NIL

 CL-TEST::EVERY.23
 CL-TEST::EVERY.24
 CL-TEST::EVERY.25
 CL-TEST::EVERY.26
 CL-TEST::EVERY.27
 CL-TEST::EVERY.28
 CL-TEST::EVERY.29
 CL-TEST::EVERY.30
 CL-TEST::EVERY.31
Test CL-TEST::EVERY.32 failed
Form: (LOOP CL-TEST::FOR TYPE CL-TEST::IN (QUOTE (SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) CL-TEST::FOR CL-TEST::CTYPE = (BACKQUOTE (COMPLEX (BQ-COMMA TYPE))) CL-TEST::FOR CL-TEST::V = (MAKE-ARRAY (QUOTE (6)) :ELEMENT-TYPE CL-TEST::CTYPE :INITIAL-CONTENTS (MAPCAR (FUNCTION (LAMBDA (CL-TEST::X) (COMPLEX CL-TEST::X (COERCE CL-TEST::X TYPE)))) (QUOTE (1 2 3 4 5 6)))) UNLESS (EVERY (FUNCTION COMPLEXP) CL-TEST::V) CL-TEST::COLLECT (LIST TYPE CL-TEST::V))
Expected value:
          NIL
Actual value:
          #<Simple-Error 20 fell through ECASE expression. Wanted one of (16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0)> [Actual value: #<error during printing>
Test CL-TEST::EVERY.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y) (VALUES (EVERY (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION NULL)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (NIL NIL CL-TEST::A NIL)))) CL-TEST::I CL-TEST::X CL-TEST::Y))
Expected values:
          NIL
          2
          1
          2
Actual values:
          NIL
          2
          NIL
          NIL
Test CL-TEST::EVERY.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES (EVERY (PROGN (SETF CL-TEST::X (INCF CL-TEST::I)) (FUNCTION EQUAL)) (PROGN (SETF CL-TEST::Y (INCF CL-TEST::I)) (QUOTE (NIL NIL CL-TEST::A NIL))) (PROGN (SETF CL-TEST::Z (INCF CL-TEST::I)) (QUOTE (NIL NIL CL-TEST::A CL-TEST::B)))) CL-TEST::I CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected values:
          NIL
          3
          1
          2
          3
Actual values:
          NIL
          3
          NIL
          NIL
          NIL

 CL-TEST::EVERY.ERROR.1
 CL-TEST::EVERY.ERROR.2
 CL-TEST::EVERY.ERROR.3
 CL-TEST::EVERY.ERROR.8
 CL-TEST::EVERY.ERROR.9
 CL-TEST::EVERY.ERROR.10
 CL-TEST::EVERY.ERROR.11
 CL-TEST::EVERY.ERROR.12
 CL-TEST::EVERY.ERROR.13
 CL-TEST::EVERY.ERROR.14
 CL-TEST::FBOUNDP.1
 CL-TEST::FBOUNDP.2
 CL-TEST::FBOUNDP.3
 CL-TEST::FBOUNDP.4
 CL-TEST::FBOUNDP.5
 CL-TEST::FBOUNDP.6
 CL-TEST::FBOUNDP.7
Test CL-TEST::FBOUNDP.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST::*CL-NON-FUNCTION-MACRO-SPECIAL-OPERATOR-SYMBOLS* WHEN (AND (FBOUNDP CL-TEST::X) (NOT (EQ CL-TEST::X (QUOTE ED)))) CL-TEST::COLLECT CL-TEST::X)
Expected value:
          NIL
Actual value:
          (STRUCTURE-CLASS)

 CL-TEST::FBOUNDP.ORDER.1
Test CL-TEST::FBOUNDP.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FBOUNDP) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>
Test CL-TEST::FBOUNDP.ERROR.2 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (CL-TEST::X)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (CL-TEST::X).> [Actual value: #<error during printing>
Test CL-TEST::FBOUNDP.ERROR.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>
Test CL-TEST::FBOUNDP.ERROR.4 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF CL-TEST::FOO . CL-TEST::BAR)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH (SETF CL-TEST::FOO . CL-TEST::BAR) CL-TEST::BAR)
Test CL-TEST::FBOUNDP.ERROR.5 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF CL-TEST::FOO CL-TEST::BAR)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (SETF CL-TEST::FOO CL-TEST::BAR).> [Actual value: #<error during printing>

 CL-TEST::FBOUNDP.ERROR.6
 CL-TEST::FBOUNDP.ERROR.7
Test CL-TEST::FBOUNDP.ERROR.8 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FBOUNDP 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 1.> [Actual value: #<error during printing>
Test CL-TEST::FBOUNDP.ERROR.9 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (SETF . CL-TEST::FOO)) (FBOUNDP CL-TEST::X))
Expected value:
          T
Actual value:
          (:DATUM-MISMATCH (SETF . CL-TEST::FOO) CL-TEST::FOO)
Test CL-TEST::FBOUNDP.ERROR.10 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FBOUNDP (BACKQUOTE (SETF (BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error 400000DA5B89> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error 400000DA5B89>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table 400000DA5DB9> #<Simple-Error Invalid function name (SETF #<Hash-Table 400000DA5DB9>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Mezzanine.Gui.Basic-Repl::Basic-Repl 400000011BF9> #<Simple-Error Invalid function name (SETF #<Mezzanine.Gui.Basic-Repl::Basic-Repl 400000011BF9>).>) (#S(READTABLE :CASE :UPCASE :BASE-CHARACTERS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE :WHITESPACE NIL :WHITESPACE :WHITESPACE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE NIL (READ-DOUBLE-QUOTE T) (READ-DISPATCH-CHAR NIL #(NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID READ-#-INVALID NIL READ-#-INVALID NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID NIL NIL READ-#-SHARP-SIGN NIL NIL NIL READ-#-QUOTE READ-#-LEFT-PARENTHESIS READ-#-INVALID READ-#-ASTERISK READ-#-PLUS NIL READ-#-MINUS READ-#-DOT NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-COLON NIL READ-#-INVALID READ-#-EQUAL-SIGN NIL NIL NIL READ-#-ARRAY READ-#-RADIX READ-#-COMPLEX NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-RADIX READ-#-PATHNAME NIL READ-#-RADIX READ-#-STRUCT NIL NIL NIL NIL READ-#-RADIX NIL NIL NIL READ-#-BACKSLASH NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-VERTICAL-BAR NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) #<Hash-Table 500000EF4399>) NIL NIL NIL (READ-SINGLE-QUOTE T) (READ-LEFT-PARENTHESIS T) (READ-RIGHT-PARENTHESIS T) NIL NIL (READ-COMMA T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL (READ-SEMICOLON T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :SINGLE-ESCAPE NIL NIL NIL (READ-BACKQUOTE T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :MULTIPLE-ESCAPE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :EXTENDED-CHARACTERS #<Hash-Table 500000020F79>) #<Simple-Error Invalid function name (SETF #S(READTABLE :CASE :UPCASE :BASE-CHARACTERS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE :WHITESPACE NIL :WHITESPACE :WHITESPACE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE NIL (READ-DOUBLE-QUOTE T) (READ-DISPATCH-CHAR NIL #(NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID READ-#-INVALID NIL READ-#-INVALID NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID NIL NIL READ-#-SHARP-SIGN NIL NIL NIL READ-#-QUOTE READ-#-LEFT-PARENTHESIS READ-#-INVALID READ-#-ASTERISK READ-#-PLUS NIL READ-#-MINUS READ-#-DOT NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-COLON NIL READ-#-INVALID READ-#-EQUAL-SIGN NIL NIL NIL READ-#-ARRAY READ-#-RADIX READ-#-COMPLEX NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-RADIX READ-#-PATHNAME NIL READ-#-RADIX READ-#-STRUCT NIL NIL NIL NIL READ-#-RADIX NIL NIL NIL READ-#-BACKSLASH NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-VERTICAL-BAR NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) #<Hash-Table 500000EF4399>) NIL NIL NIL (READ-SINGLE-QUOTE T) (READ-LEFT-PARENTHESIS T) (READ-RIGHT-PARENTHESIS T) NIL NIL (READ-COMMA T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL (READ-SEMICOLON T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :SINGLE-ESCAPE NIL NIL NIL (READ-BACKQUOTE T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :MULTIPLE-ESCAPE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :EXTENDED-CHARACTERS #<Hash-Table 500000020F79>)).>) (#S(CL-TEST::FOO-STRUCTURE :X 1 :Y CL-TEST::A :Z NIL) #<Simple-Error Invalid function name (SETF #S(CL-TEST::FOO-STRUCTURE :X 1 :Y CL-TEST::A :Z NIL)).>) (#<Compiled-Function CONS 615269> #<Simple-Error Invalid function name (SETF #<Compiled-Function CONS 615269>).>) (#S(RANDOM-STATE :BITS 3106) #<Simple-Error Invalid function name (SETF #S(RANDOM-STATE :BITS 3106)).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 500000DA50C9> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 500000DA50C9>).>) (1.2 #<Simple-Error Invalid function name (SETF 1.2).>) (1.299999 #<Simple-Error Invalid function name (SETF 1.299999).>) (1.5 #<Simple-Error Invalid function name (SETF 1.5).>) (1.799999 #<Simple-Error Invalid function name (SETF 1.799999).>) (3/5 #<Simple-Error Invalid function name (SETF 3/5).>) (10000000000000000000000 #<Simple-Error Invalid function name (SETF 10000000000000000000000).>))

 CL-TEST::FDEFINITION.ERROR.1
 CL-TEST::FDEFINITION.ERROR.2
 CL-TEST::FDEFINITION.ERROR.3
Test CL-TEST::FDEFINITION.ERROR.4 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>
Test CL-TEST::FDEFINITION.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FDEFINITION 10) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 10.> [Actual value: #<error during printing>
Test CL-TEST::FDEFINITION.ERROR.7 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FDEFINITION) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . CL-TEST::FOO) (SETF CL-TEST::FOO . CL-TEST::BAR) (SETF CL-TEST::FOO CL-TEST::BAR))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>
Test CL-TEST::FDEFINITION.ERROR.8 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FDEFINITION (BACKQUOTE (SETF (BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error 400000DA6059> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error 400000DA6059>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table 400000DA62B9> #<Simple-Error Invalid function name (SETF #<Hash-Table 400000DA62B9>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Mezzanine.Gui.Basic-Repl::Basic-Repl 400000011BF9> #<Simple-Error Invalid function name (SETF #<Mezzanine.Gui.Basic-Repl::Basic-Repl 400000011BF9>).>) (#S(READTABLE :CASE :UPCASE :BASE-CHARACTERS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE :WHITESPACE NIL :WHITESPACE :WHITESPACE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE NIL (READ-DOUBLE-QUOTE T) (READ-DISPATCH-CHAR NIL #(NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID READ-#-INVALID NIL READ-#-INVALID NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID NIL NIL READ-#-SHARP-SIGN NIL NIL NIL READ-#-QUOTE READ-#-LEFT-PARENTHESIS READ-#-INVALID READ-#-ASTERISK READ-#-PLUS NIL READ-#-MINUS READ-#-DOT NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-COLON NIL READ-#-INVALID READ-#-EQUAL-SIGN NIL NIL NIL READ-#-ARRAY READ-#-RADIX READ-#-COMPLEX NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-RADIX READ-#-PATHNAME NIL READ-#-RADIX READ-#-STRUCT NIL NIL NIL NIL READ-#-RADIX NIL NIL NIL READ-#-BACKSLASH NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-VERTICAL-BAR NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) #<Hash-Table 500000EF4399>) NIL NIL NIL (READ-SINGLE-QUOTE T) (READ-LEFT-PARENTHESIS T) (READ-RIGHT-PARENTHESIS T) NIL NIL (READ-COMMA T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL (READ-SEMICOLON T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :SINGLE-ESCAPE NIL NIL NIL (READ-BACKQUOTE T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :MULTIPLE-ESCAPE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :EXTENDED-CHARACTERS #<Hash-Table 500000020E29>) #<Simple-Error Invalid function name (SETF #S(READTABLE :CASE :UPCASE :BASE-CHARACTERS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE :WHITESPACE NIL :WHITESPACE :WHITESPACE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE NIL (READ-DOUBLE-QUOTE T) (READ-DISPATCH-CHAR NIL #(NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID READ-#-INVALID NIL READ-#-INVALID NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID NIL NIL READ-#-SHARP-SIGN NIL NIL NIL READ-#-QUOTE READ-#-LEFT-PARENTHESIS READ-#-INVALID READ-#-ASTERISK READ-#-PLUS NIL READ-#-MINUS READ-#-DOT NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-COLON NIL READ-#-INVALID READ-#-EQUAL-SIGN NIL NIL NIL READ-#-ARRAY READ-#-RADIX READ-#-COMPLEX NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-RADIX READ-#-PATHNAME NIL READ-#-RADIX READ-#-STRUCT NIL NIL NIL NIL READ-#-RADIX NIL NIL NIL READ-#-BACKSLASH NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-VERTICAL-BAR NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) #<Hash-Table 500000EF4399>) NIL NIL NIL (READ-SINGLE-QUOTE T) (READ-LEFT-PARENTHESIS T) (READ-RIGHT-PARENTHESIS T) NIL NIL (READ-COMMA T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL (READ-SEMICOLON T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :SINGLE-ESCAPE NIL NIL NIL (READ-BACKQUOTE T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :MULTIPLE-ESCAPE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :EXTENDED-CHARACTERS #<Hash-Table 500000020E29>)).>) (#S(CL-TEST::FOO-STRUCTURE :X 1 :Y CL-TEST::A :Z NIL) #<Simple-Error Invalid function name (SETF #S(CL-TEST::FOO-STRUCTURE :X 1 :Y CL-TEST::A :Z NIL)).>) (#<Compiled-Function CONS 615269> #<Simple-Error Invalid function name (SETF #<Compiled-Function CONS 615269>).>) (#S(RANDOM-STATE :BITS 3106) #<Simple-Error Invalid function name (SETF #S(RANDOM-STATE :BITS 3106)).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 500000DA50A9> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 500000DA50A9>).>) (1.2 #<Simple-Error Invalid function name (SETF 1.2).>) (1.299999 #<Simple-Error Invalid function name (SETF 1.299999).>) (1.5 #<Simple-Error Invalid function name (SETF 1.5).>) (1.799999 #<Simple-Error Invalid function name (SETF 1.799999).>) (3/5 #<Simple-Error Invalid function name (SETF 3/5).>) (10000000000000000000000 #<Simple-Error Invalid function name (SETF 10000000000000000000000).>))

 CL-TEST::FDEFINITION.1
 CL-TEST::FDEFINITION.2
Test CL-TEST::FDEFINITION.3 failed
Form: (PROGN (FDEFINITION (QUOTE SETQ)) :GOOD)
Expected value:
          :GOOD
Actual value:
          #<Undefined-Function SETQ> [Actual value: #<error during printing>

 CL-TEST::FDEFINITION.4
 CL-TEST::FDEFINITION.5
Test CL-TEST::FDEFINITION.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (FDEFINITION (PROGN (INCF CL-TEST::I) (QUOTE SETQ))) CL-TEST::I)
Expected value:
          1
Actual value:
          #<Undefined-Function SETQ> [Actual value: #<error during printing>

 CL-TEST::FLET.1
 CL-TEST::FLET.2
 CL-TEST::FLET.3
 CL-TEST::FLET.4
 CL-TEST::FLET.4A
 CL-TEST::FLET.5
 CL-TEST::FLET.6
 CL-TEST::FLET.7
 CL-TEST::FLET.8
 CL-TEST::FLET.9
 CL-TEST::FLET.10
 CL-TEST::FLET.11
Test CL-TEST::FLET.12 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :C 4)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :C. Expected one of (:A :B).> [Actual value: #<error during printing>
Test CL-TEST::FLET.13 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>
#<Simple-Error No applicable restart NIL>
Available restarts:
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E3DB80 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E3DC20 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3DF60 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3E2D0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3E2F0 80978839 INVOKE-DEBUGGER
208000E3E340 80991129 ERROR
208000E3E3D0 80090C79 SYSTEM.INTERNALS::FIND-RESTART-OR-DIE
208000E3E400 80970039 INVOKE-RESTART
208000E3E470 800BBF89 MUFFLE-WARNING
208000E3E490 80599719 (LAMBDA :IN (LAMBDA :IN NIL))
208000E3E4B0 8096DFC9 SIGNAL
208000E3E570 80994249 WARN
208000E3E680 80B0A779 SYSTEM.COMPILER::LIFT-LAMBDA
208000E3E7C0 80B171A9 SYSTEM.COMPILER::LL-FUNCTION-FORM
208000E3E7F0 80B04DC9 SYSTEM.COMPILER::LL-FORM
208000E3E810 80B05519 SYSTEM.COMPILER::LL-IMPLICIT-PROGN
Enter a restart number or evaluate a form. :help for help.
0]
Type error. 1064965 is not of type (UNSIGNED-BYTE 8).
Available restarts:
1 ABORT: Return to debugger top level.
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E3C6A0 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E3C740 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3CA80 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3CDF0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3CE10 80978839 INVOKE-DEBUGGER
208000E3CE60 80991129 ERROR
208000E3CEF0 80081469 SYSTEM.INTERNALS::RAISE-TYPE-ERROR
208000E3CF10 80050999 (SETF SYSTEM.INTERNALS::%SIMPLE-ARRAY-AREF)
208000E3D040 80065249 (SETF SYSTEM.INTERNALS::%ROW-MAJOR-AREF)
208000E3D080 80066D39 (SETF SYSTEM.INTERNALS::AREF-1)
208000E3D0B0 80C1D439 (LAMBDA :IN (DEFMETHOD SYS.GRAY:STREAM-WRITE-BYTE (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-STREAM T)))
208000E3D130 8007F4D9 SYSTEM.INTERNALS::%APPLY
208000E3D140 80B83CD9 (DEFMETHOD SYS.GRAY:STREAM-WRITE-BYTE (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-STREAM T))
208000E3D160 80968629 (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
208000E3D190 80960449 (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
208000E3D210 80C20B79 (LAMBDA :IN (DEFMETHOD SYS.GRAY:STREAM-WRITE-CHAR (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-CHARACTER-STREAM T)))
Enter a restart number or evaluate a form. :help for help.
1]
Type error. 1064965 is not of type (UNSIGNED-BYTE 8).
Available restarts:
2 ABORT: Return to debugger top level.
1 ABORT: Return to debugger top level.
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E3B2A0 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E3B340 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3B680 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3B9F0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3BA10 80978839 INVOKE-DEBUGGER
208000E3BA60 80991129 ERROR
208000E3BAF0 80081469 SYSTEM.INTERNALS::RAISE-TYPE-ERROR
208000E3BB10 80050999 (SETF SYSTEM.INTERNALS::%SIMPLE-ARRAY-AREF)
208000E3BC40 80065249 (SETF SYSTEM.INTERNALS::%ROW-MAJOR-AREF)
208000E3BC80 80066D39 (SETF SYSTEM.INTERNALS::AREF-1)
208000E3BCB0 80C1D439 (LAMBDA :IN (DEFMETHOD SYS.GRAY:STREAM-WRITE-BYTE (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-STREAM T)))
208000E3BD30 8007F4D9 SYSTEM.INTERNALS::%APPLY
208000E3BD40 80B83CD9 (DEFMETHOD SYS.GRAY:STREAM-WRITE-BYTE (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-STREAM T))
208000E3BD60 80968629 (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
208000E3BD90 80960449 (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
208000E3BE10 80C20B79 (LAMBDA :IN (DEFMETHOD SYS.GRAY:STREAM-WRITE-CHAR (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-CHARACTER-STREAM T)))
Enter a restart number or evaluate a form. :help for help.
2]
Type error. 1064965 is not of type (UNSIGNED-BYTE 8).
Available restarts:
3 ABORT: Return to debugger top level.
2 ABORT: Return to debugger top level.
1 ABORT: Return to debugger top level.
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E39EA0 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E39F40 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3A280 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3A5F0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3A610 80978839 INVOKE-DEBUGGER
208000E3A660 80991129 ERROR
208000E3A6F0 80081469 SYSTEM.INTERNALS::RAISE-TYPE-ERROR
208000E3A710 80050999 (SETF SYSTEM.INTERNALS::%SIMPLE-ARRAY-AREF)
208000E3A840 80065249 (SETF SYSTEM.INTERNALS::%ROW-MAJOR-AREF)
208000E3A880 80066D39 (SETF SYSTEM.INTERNALS::AREF-1)
208000E3A8B0 80C1D439 (LAMBDA :IN (DEFMETHOD SYS.GRAY:STREAM-WRITE-BYTE (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-STREAM T)))
208000E3A930 8007F4D9 SYSTEM.INTERNALS::%APPLY
208000E3A940 80B83CD9 (DEFMETHOD SYS.GRAY:STREAM-WRITE-BYTE (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-STREAM T))
208000E3A960 80968629 (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
208000E3A990 80960449 (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
208000E3AA10 80C20B79 (LAMBDA :IN (DEFMETHOD SYS.GRAY:STREAM-WRITE-CHAR (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-CHARACTER-STREAM T)))
Enter a restart number or evaluate a form. :help for help.
3]
Type error. 1064965 is not of type (UNSIGNED-BYTE 8).
Available restarts:
4 ABORT: Return to debugger top level.
3 ABORT: Return to debugger top level.
2 ABORT: Return to debugger top level.
1 ABORT: Return to debugger top level.
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E38AA0 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E38B40 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E38E80 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E391F0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E39210 80978839 INVOKE-DEBUGGER
208000E39260 80991129 ERROR
208000E392F0 80081469 SYSTEM.INTERNALS::RAISE-TYPE-ERROR
208000E39310 80050999 (SETF SYSTEM.INTERNALS::%SIMPLE-ARRAY-AREF)
208000E39440 80065249 (SETF SYSTEM.INTERNALS::%ROW-MAJOR-AREF)
208000E39480 80066D39 (SETF SYSTEM.INTERNALS::AREF-1)
208000E394B0 80C1D439 (LAMBDA :IN (DEFMETHOD SYS.GRAY:STREAM-WRITE-BYTE (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-STREAM T)))
208000E39530 8007F4D9 SYSTEM.INTERNALS::%APPLY
208000E39540 80B83CD9 (DEFMETHOD SYS.GRAY:STREAM-WRITE-BYTE (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-STREAM T))
208000E39560 80968629 (LAMBDA :IN SYSTEM.CLOSETTE::STD-COMPUTE-EFFECTIVE-METHOD-FUNCTION)
208000E39590 80960449 (LAMBDA :IN SYSTEM.CLOSETTE::COMPUTE-1-EFFECTIVE-DISCRIMINATOR)
208000E39610 80C20B79 (LAMBDA :IN (DEFMETHOD SYS.GRAY:STREAM-WRITE-CHAR (MEZZANINE.FILE-SYSTEM.REMOTE::SIMPLE-FILE-CHARACTER-STREAM T)))
Enter a restart number or evaluate a form. :help for help.
4] 1
0] :hekl:hek:help
You are in the debugger. Commiserations!
Commands:
  :help      This help message.
  :restarts  Display available restarts.
  :up        Move to a higher (inner) frame.
  :down      Move to a lower (outer) frame.
  :bottom    Move to the lowest (outermost) frame.
  :top       Move to the highest (innermost) frame.
  :current   Print the current frame.
  :vars      Display variables in the current frame.
             Beware, *print-line* and *print-level don't work yet.
  :read      Read a variable by id (from :vars) from the current frame.
  :write     Write a variable by id (from :vars) to the current frame.
  :bt        Print a complete backtrace.
Integers are treated at restart IDs.
Good luck.
0] :restarts
Available restarts:
0 ABORT: Return to READ-EVAL-PRINT loop.
0] :bt

208000E3DB80 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E3DC20 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3DF60 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3E2D0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3E2F0 80978839 INVOKE-DEBUGGER
208000E3E340 80991129 ERROR
208000E3E3D0 80090C79 SYSTEM.INTERNALS::FIND-RESTART-OR-DIE
208000E3E400 80970039 INVOKE-RESTART
208000E3E470 800BBF89 MUFFLE-WARNING
208000E3E490 80599719 (LAMBDA :IN (LAMBDA :IN NIL))
208000E3E4B0 8096DFC9 SIGNAL
208000E3E570 80994249 WARN
208000E3E680 80B0A779 SYSTEM.COMPILER::LIFT-LAMBDA
208000E3E7C0 80B171A9 SYSTEM.COMPILER::LL-FUNCTION-FORM
208000E3E7F0 80B04DC9 SYSTEM.COMPILER::LL-FORM
208000E3E810 80B05519 SYSTEM.COMPILER::LL-IMPLICIT-PROGN
208000E3E850 80B17559 SYSTEM.COMPILER::LL-LAMBDA
208000E3E8B0 80B04DC9 SYSTEM.COMPILER::LL-FORM
208000E3E8D0 80AC1E49 SYSTEM.COMPILER::RUN-OPTIMIZERS
208000E3E930 80A900A9 SYSTEM.COMPILER::COMPILE-LAMBDA-1
208000E3E9B0 80039B19 SYSTEM.COMPILER::COMPILE-LAMBDA
208000E3E9D0 80002649 MEZZANINE.FAST-EVAL::EVAL-COMPILE
208000E3EA00 809AF259 MEZZANINE.FAST-EVAL::EVAL-CONS
208000E3EAF0 8005DBA9 MEZZANINE.FAST-EVAL:EVAL-IN-LEXENV
208000E3EB10 800DBA29 SYSTEM.INTERNALS::EVAL-IN-LEXENV
208000E3EB40 8006C709 EVAL
208000E3EB60 807B3279 (LAMBDA :IN NIL)
208000E3EC50 80002649 MEZZANINE.FAST-EVAL::EVAL-COMPILE
208000E3EC80 809AF259 MEZZANINE.FAST-EVAL::EVAL-CONS
208000E3ED70 8005DBA9 MEZZANINE.FAST-EVAL:EVAL-IN-LEXENV
208000E3ED90 809AF259 MEZZANINE.FAST-EVAL::EVAL-CONS
208000E3EE80 8005DBA9 MEZZANINE.FAST-EVAL:EVAL-IN-LEXENV
208000E3EEA0 800DBA29 SYSTEM.INTERNALS::EVAL-IN-LEXENV
208000E3EED0 8006C709 EVAL
208000E3EEF0 80608F09 SYSTEM.COMPILER::%%CATCH-BODY%%
208000E3F110 5EAE19 SYSTEM.INTERNALS::%CATCH
208000E3F250 8060AF99 REGRESSION-TEST::DO-ENTRY
208000E3F2B0 8060E229 REGRESSION-TEST::DO-ENTRIES
208000E3F350 8060D029 REGRESSION-TEST:DO-TESTS
208000E3F490 800F0A09 (LAMBDA :IN DOIT)
208000E3F4B0 8018DAD9 SYSTEM.INTERNALS::%TIME
208000E3F530 807A08D9 DOIT
208000E3F710 8007F4D9 SYSTEM.INTERNALS::%APPLY
208000E3F720 809AF259 MEZZANINE.FAST-EVAL::EVAL-CONS
208000E3F810 8005DBA9 MEZZANINE.FAST-EVAL:EVAL-IN-LEXENV
208000E3F830 800DBA29 SYSTEM.INTERNALS::EVAL-IN-LEXENV
208000E3F860 8006C709 EVAL
208000E3F880 80A09499 SYSTEM.INTERNALS::REPL
208000E3FAC0 80BDFB79 MEZZANINE.GUI.BASIC-REPL::REPL-MAIN
208000E3FC80 3BEC39 MEZZANINE.SUPERVISOR::%%WITH-FOOTHOLDS-PERMITTED-THUNK%%
208000E3FCA0 3AC629 MEZZANINE.SUPERVISOR::CALL-WITH-FOOTHOLDS-PERMITTED
208000E3FDB0 3BEDF9 SYSTEM.COMPILER::%%CATCH-BODY%%
208000E3FDF0 5EAE19 SYSTEM.INTERNALS::%CATCH
208000E3FF30 3BF479 MEZZANINE.SUPERVISOR::THREAD-ENTRY-TRAMPOLINE
208000E3FFF0 3BF849 MEZZANINE.SUPERVISOR::%%THREAD-ENTRY-TRAMPOLINE
0] :up
Frame 1(208000E3E2D0): #<Compiled-Function SYSTEM.INTERNALS::ENTER-DEBUGGER 8002FD79>
0] :up
Frame 2(208000E3E2F0): #<Compiled-Function INVOKE-DEBUGGER 80978839>
0] :up
Frame 3(208000E3E340): #<Compiled-Function ERROR 80991129>
0] :up
Frame 4(208000E3E3D0): #<Compiled-Function SYSTEM.INTERNALS::FIND-RESTART-OR-DIE 80090C79>
0] :up
Frame 5(208000E3E400): #<Compiled-Function INVOKE-RESTART 80970039>
0] :up
Frame 6(208000E3E470): #<Compiled-Function MUFFLE-WARNING 800BBF89>
0] :up
Frame 7(208000E3E490): #<Compiled-Function (LAMBDA :IN (LAMBDA :IN NIL)) 80599719>
0] :up
Frame 8(208000E3E4B0): #<Compiled-Function SIGNAL 8096DFC9>
0] :up
Frame 9(208000E3E570): #<Compiled-Function WARN 80994249>
0] :up
Frame 10(208000E3E680): #<Compiled-Function SYSTEM.COMPILER::LIFT-LAMBDA 80B0A779>
0] :up
Frame 11(208000E3E7C0): #<Compiled-Function SYSTEM.COMPILER::LL-FUNCTION-FORM 80B171A9>
0] :up:u:sys.int::*active-restarts*
((#<Restart STORE-VALUE 400001354C39> #<Restart USE-VALUE 400001354D09>) (#<Restart ABORT 400001346BC9>) (#<Restart MUFFLE-WARNING 400000EF5139>) (#<Restart ABORT 400000DA4A49>))
0] (thirds (thirds(third *)
(#<Restart MUFFLE-WARNING 400000EF5139>)
0] (first *)
#<Restart MUFFLE-WARNING 400000EF5139>
0] (describe *)
#<Restart MUFFLE-WARNING 400000EF5139> is a structure of type Restart, with address 400000EF5139
  SYSTEM.INTERNALS::NAME: MUFFLE-WARNING
  FUNCTION: #<System.Internals::Closure (LAMBDA :IN WARN) 400000FF14C9>
  SYSTEM.INTERNALS::INTERACTIVE-FUNCTION: NIL
  SYSTEM.INTERNALS::REPORT-FUNCTION: #<System.Internals::Closure (LAMBDA :IN WARN) 400000012AB9>
  SYSTEM.INTERNALS::TEST-FUNCTION: #<System.Internals::Closure (LAMBDA :IN WARN) 400000FF14E9>
0] :down
Frame 10(208000E3E680): #<Compiled-Function SYSTEM.COMPILER::LIFT-LAMBDA 80B0A779>
0] :down
Frame 9(208000E3E570): #<Compiled-Function WARN 80994249>
0] :vars
Frame 9(208000E3E570): #<Compiled-Function WARN 80994249>
Locals:
  1 SYSTEM.INTERNALS::DATUM: SIMPLE-WARNING
  2 #:E\n\v\i\r\o\n\m\e\n\t1310: #(0 17867071419088 NIL #<Simple-Warning Not inlining CL-TEST::%F, arguments do not match.> 17867071419136)
  3 WARN: 17867071419136
  4 SYSTEM.INTERNALS::ARGUMENTS: (:FORMAT-CONTROL "Not inlining ~S, arguments do not match." :FORMAT-ARGUMENTS (CL-TEST::%F))
Closed-over variables:
  5 #:G1307: NIL
  6 CONDITION: #<Simple-Warning Not inlining CL-TEST::%F, arguments do not match.>
0] ***
(#<Restart MUFFLE-WARNING 400000EF5139>)
0] ***
#<Restart MUFFLE-WARNING 400000EF5139>
0] (invoke-restart *)

 CL-TEST::FLET.14
#<Simple-Error No applicable restart NIL>
Available restarts:
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E3DB80 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E3DC20 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3DF60 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3E2D0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3E2F0 80978839 INVOKE-DEBUGGER
208000E3E340 80991129 ERROR
208000E3E3D0 80090C79 SYSTEM.INTERNALS::FIND-RESTART-OR-DIE
208000E3E400 80970039 INVOKE-RESTART
208000E3E470 800BBF89 MUFFLE-WARNING
208000E3E490 80527D09 (LAMBDA :IN (LAMBDA :IN NIL))
208000E3E4B0 8096DFC9 SIGNAL
208000E3E570 80994249 WARN
208000E3E680 80B0A779 SYSTEM.COMPILER::LIFT-LAMBDA
208000E3E7C0 80B171A9 SYSTEM.COMPILER::LL-FUNCTION-FORM
208000E3E7F0 80B04DC9 SYSTEM.COMPILER::LL-FORM
208000E3E810 80B05519 SYSTEM.COMPILER::LL-IMPLICIT-PROGN
Enter a restart number or evaluate a form. :help for help.
0] (invoke-restart *)
#<Simple-Error No applicable restart NIL>
Available restarts:
1 ABORT: Return to debugger top level.
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E3D1C0 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E3D260 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3D5A0 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3D910 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3D930 80978839 INVOKE-DEBUGGER
208000E3D980 80991129 ERROR
208000E3DA10 80090C79 SYSTEM.INTERNALS::FIND-RESTART-OR-DIE
208000E3DA40 80970039 INVOKE-RESTART
208000E3DAB0 8007F4D9 SYSTEM.INTERNALS::%APPLY
208000E3DAC0 809AF259 MEZZANINE.FAST-EVAL::EVAL-CONS
208000E3DBB0 8005DBA9 MEZZANINE.FAST-EVAL:EVAL-IN-LEXENV
208000E3DBD0 800DBA29 SYSTEM.INTERNALS::EVAL-IN-LEXENV
208000E3DC00 8006C709 EVAL
208000E3DC20 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3DF60 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3E2D0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
Enter a restart number or evaluate a form. :help for help.
1] 1
0] *acri*acr*ac*active-restarts*
The variable *ACTIVE-RESTARTS* is unbound.
Available restarts:
3 STORE-VALUE: Input a new value for *ACTIVE-RESTARTS*.
2 USE-VALUE: Input a value to be used in place of *ACTIVE-RESTARTS*.
1 ABORT: Return to debugger top level.
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E3D270 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E3D310 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3D650 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3D9C0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3D9E0 80978839 INVOKE-DEBUGGER
208000E3DA30 80991129 ERROR
208000E3DAC0 800812E9 SYSTEM.INTERNALS::RAISE-UNBOUND-ERROR
208000E3DAE0 809B15E9 MEZZANINE.FAST-EVAL::EVAL-SYMBOL
208000E3DBB0 8005DBA9 MEZZANINE.FAST-EVAL:EVAL-IN-LEXENV
208000E3DBD0 800DBA29 SYSTEM.INTERNALS::EVAL-IN-LEXENV
208000E3DC00 8006C709 EVAL
208000E3DC20 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3DF60 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3E2D0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3E2F0 80978839 INVOKE-DEBUGGER
208000E3E340 80991129 ERROR
Enter a restart number or evaluate a form. :help for help.
1] 1
0] (room)
General area: 2,452,170/2,621,440 words used (93%).
Cons area: 1,935,840/2,097,152 words used (92%).
Wired area: 557,224/1,048,576 words allocated (53%).
  Largest free area: 447,316 words.
Pinned area: 1,337,496/1,835,008 words allocated (72%).
  Largest free area: 241,814 words.
Total 6,297,084/7,602,176 words used (82%).
43,993/65,280 store blocks used (67%).
4,194,304 words to next GC.
0] (load "?(load "/Users/henry/Documents/Mezzanine/tmp4.lisp")
;;; Loading from #<Mezzanine.File-System.Remote::Simple-File-Character-Stream "THAT-MAC-THING" /Users/henry/Documents/Mezzanine/tmp4.lisp 5000013197C9>
T
0] :restarts
Available restarts:
0 ABORT: Return to READ-EVAL-PRINT loop.
0] a
The variable A is unbound.
Available restarts:
3 STORE-VALUE: Input a new value for A.
2 USE-VALUE: Input a value to be used in place of A.
1 ABORT: Return to debugger top level.
0 ABORT: Return to READ-EVAL-PRINT loop.

208000E3D270 8099B199 SYSTEM.INTERNALS::BACKTRACE
208000E3D310 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3D650 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3D9C0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3D9E0 80978839 INVOKE-DEBUGGER
208000E3DA30 80991129 ERROR
208000E3DAC0 800812E9 SYSTEM.INTERNALS::RAISE-UNBOUND-ERROR
208000E3DAE0 809B15E9 MEZZANINE.FAST-EVAL::EVAL-SYMBOL
208000E3DBB0 8005DBA9 MEZZANINE.FAST-EVAL:EVAL-IN-LEXENV
208000E3DBD0 800DBA29 SYSTEM.INTERNALS::EVAL-IN-LEXENV
208000E3DC00 8006C709 EVAL
208000E3DC20 809974C9 (LAMBDA :IN SYSTEM.INTERNALS::ENTER-DEBUGGER)
208000E3DF60 800FEAE9 SYSTEM.INTERNALS::%WITH-STANDARD-IO-SYNTAX
208000E3E2D0 8002FD79 SYSTEM.INTERNALS::ENTER-DEBUGGER
208000E3E2F0 80978839 INVOKE-DEBUGGER
208000E3E340 80991129 ERROR
Enter a restart number or evaluate a form. :help for help.
1] 1
0] sys.int::*acisys.int::*active-restarts*
((#<Restart STORE-VALUE 50000141B159> #<Restart USE-VALUE 50000141B279>) (#<Restart ABORT 500001410009>) (#<Restart MUFFLE-WARNING 500000EF6249>) (#<Restart ABORT 500000DA5B59>))
0] (third *)
(#<Restart MUFFLE-WARNING 500000EF6249>)
0] (first *)
#<Restart MUFFLE-WARNING 500000EF6249>
0] (invoke-ret(invoke-restart *)

 CL-TEST::FLET.15
Test CL-TEST::FLET.16 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY CL-TEST::A) CL-TEST::A)) (CL-TEST::%F (QUOTE (CL-TEST::FOO)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 CL-TEST::FLET.17
 CL-TEST::FLET.18
 CL-TEST::FLET.19
 CL-TEST::FLET.20
 CL-TEST::FLET.21
 CL-TEST::FLET.22
 CL-TEST::FLET.23
 CL-TEST::FLET.24
 CL-TEST::FLET.25
Test CL-TEST::FLET.26 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :WHATEVER NIL :ALLOW-OTHER-KEYS T) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ILLEGAL T :FOO (QUOTE CL-TEST::Z) :ALLOW-OTHER-KEYS T)))
Expected values:
          (10 1 NIL 2 NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:FOO CL-TEST::H :WHATEVER NIL :ALLOW-OTHER-KEYS T) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:BAR CL-TEST::I :ILLEGAL T :FOO CL-TEST::Z :ALLOW-OTHER-KEYS T) CL-TEST::Z CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :WHATEVER. Expected one of (:FOO :BAR).> [Actual value: #<error during printing>
Test CL-TEST::FLET.27 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :ALLOW-OTHER-KEYS NIL) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ALLOW-OTHER-KEYS NIL)))
Expected values:
          (10 1 NIL 2 NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:FOO CL-TEST::H :ALLOW-OTHER-KEYS NIL) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T (:BAR CL-TEST::I :ALLOW-OTHER-KEYS NIL) NIL CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:FOO :BAR).> [Actual value: #<error during printing>
Test CL-TEST::FLET.28 failed
Form: (FLET ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::Y 1 CL-TEST::Y-P) (CL-TEST::Z 2 CL-TEST::Z-P) &REST CL-TEST::R &KEY CL-TEST::FOO CL-TEST::BAR CL-TEST::ALLOW-OTHER-KEYS) (LIST CL-TEST::X CL-TEST::Y (NOT (NOT CL-TEST::Y-P)) CL-TEST::Z (NOT (NOT CL-TEST::Z-P)) CL-TEST::ALLOW-OTHER-KEYS CL-TEST::R CL-TEST::FOO CL-TEST::BAR))) (VALUES (CL-TEST::%F 10) (CL-TEST::%F 20 40) (CL-TEST::%F (QUOTE CL-TEST::A) (QUOTE CL-TEST::B) (QUOTE CL-TEST::C)) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :FOO (QUOTE CL-TEST::H) :WHATEVER NIL :ALLOW-OTHER-KEYS 100) (CL-TEST::%F (QUOTE CL-TEST::D) (QUOTE CL-TEST::E) (QUOTE CL-TEST::F) :BAR (QUOTE CL-TEST::I) :ILLEGAL T :FOO (QUOTE CL-TEST::Z) :ALLOW-OTHER-KEYS 200)))
Expected values:
          (10 1 NIL 2 NIL NIL NIL NIL NIL)
          (20 40 T 2 NIL NIL NIL NIL NIL)
          (CL-TEST::A CL-TEST::B T CL-TEST::C T NIL NIL NIL NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T 100 (:FOO CL-TEST::H :WHATEVER NIL :ALLOW-OTHER-KEYS 100) CL-TEST::H NIL)
          (CL-TEST::D CL-TEST::E T CL-TEST::F T 200 (:BAR CL-TEST::I :ILLEGAL T :FOO CL-TEST::Z :ALLOW-OTHER-KEYS 200) CL-TEST::Z CL-TEST::I)
Actual value:
          #<Simple-Error Unknown &KEY argument :WHATEVER. Expected one of (:FOO :BAR :ALLOW-OTHER-KEYS).> [Actual value: #<error during printing>

 CL-TEST::FLET.29
 CL-TEST::FLET.30
 CL-TEST::FLET.31
 CL-TEST::FLET.32
 CL-TEST::FLET.33
 CL-TEST::FLET.34
 CL-TEST::FLET.35
 CL-TEST::FLET.36
 CL-TEST::FLET.37
 CL-TEST::FLET.38
 CL-TEST::FLET.39
 CL-TEST::FLET.40
 CL-TEST::FLET.45
 CL-TEST::FLET.46
 CL-TEST::FLET.47
 CL-TEST::FLET.48
 CL-TEST::FLET.49
 CL-TEST::FLET.50
 CL-TEST::FLET.51
 CL-TEST::FLET.52
 CL-TEST::FLET.53
 CL-TEST::FLET.54
 CL-TEST::FLET.55
 CL-TEST::FLET.56
Test CL-TEST::FLET.57 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>
Test CL-TEST::FLET.58 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>
Test CL-TEST::FLET.59 failed
Form: (FLET ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T :A 1 :B 2))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>

 CL-TEST::FLET.60
Test CL-TEST::FLET.61 failed
Form: (CL-TEST:SIGNALS-ERROR (FLET ((CL-TEST::%F (&KEY) :BAD)) (CL-TEST::%F NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument NIL. Expected one of NIL.> [Actual value: #<error during printing>

 CL-TEST::FLET.62
 CL-TEST::FLET.63
 CL-TEST::FLET.64
 CL-TEST::FLET.65
 CL-TEST::FLET.66
Test CL-TEST::FLET.67 failed
Form: (LET ((CL-TEST::X :BAD)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X :GOOD)) (FLET ((CL-TEST::%F (&AUX (CL-TEST::Y CL-TEST::X)) (DECLARE (SPECIAL CL-TEST::X)) CL-TEST::Y)) (CL-TEST::%F))))
Expected value:
          :GOOD
Actual value:
          :BAD

 CL-TEST::FLET.68
 CL-TEST::FLET.69
 CL-TEST::FLET.70
 CL-TEST::FLET.71
 CL-TEST::FLET.72
Test CL-TEST::FLET.73 failed
Form: (FLET ((CL-TEST::FLET.73 NIL :GOOD)) (CL-TEST::FLET.73))
Expected value:
          :GOOD
Actual value:
          :BAD
Test CL-TEST::FLET.74 failed
Form: (FLET ((CL-TEST::FLET.74 NIL :GOOD)) (CL-TEST::FLET.74))
Expected value:
          :GOOD
Actual value:
          :BAD

 CL-TEST::FMAKUNBOUND.1
 CL-TEST::FMAKUNBOUND.2
 CL-TEST::FMAKUNBOUND.3
 CL-TEST::FMAKUNBOUND.4
Test CL-TEST::FMAKUNBOUND.ERROR.1 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (FUNCTION (LAMBDA (CL-TEST::X) (TYPEP CL-TEST::X (QUOTE (OR SYMBOL (CONS (EQL SETF) (CONS SYMBOL NULL))))))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name 0.> [Actual value: #<error during printing>
Test CL-TEST::FMAKUNBOUND.ERROR.2 failed
Form: (CL-TEST::CHECK-TYPE-ERROR (FUNCTION FMAKUNBOUND) (CONSTANTLY NIL) (QUOTE ((SETF) (SETF . CL-TEST::FOO) (SETF CL-TEST::FOO . CL-TEST::BAR) (SETF CL-TEST::FOO CL-TEST::BAR))))
Expected value:
          NIL
Actual value:
          #<Simple-Error Invalid function name (SETF).> [Actual value: #<error during printing>
Test CL-TEST::FMAKUNBOUND.ERROR.3 failed
Form: (CL-TEST::SIGNALS-TYPE-ERROR CL-TEST::X (QUOTE (CL-TEST::X)) (FMAKUNBOUND CL-TEST::X))
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name (CL-TEST::X).> [Actual value: #<error during printing>

 CL-TEST::FMAKUNBOUND.ERROR.4
 CL-TEST::FMAKUNBOUND.ERROR.5
Test CL-TEST::FMAKUNBOUND.ERROR.6 failed
Form: (CL-TEST:SIGNALS-ERROR (LOCALLY (FMAKUNBOUND 1) T) TYPE-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Invalid function name 1.> [Actual value: #<error during printing>
Test CL-TEST::FMAKUNBOUND.ERROR.7 failed
Form: (LOOP CL-TEST::FOR CL-TEST::X CL-TEST::IN CL-TEST:*MINI-UNIVERSE* UNLESS (SYMBOLP CL-TEST::X) NCONC (CL-TEST::HANDLER-CASE (LIST CL-TEST::X (FMAKUNBOUND (BACKQUOTE (SETF (BQ-COMMA CL-TEST::X))))) (TYPE-ERROR (CL-TEST::C) (ASSERT (NOT (TYPEP (TYPE-ERROR-DATUM CL-TEST::C) (TYPE-ERROR-EXPECTED-TYPE CL-TEST::C)))) NIL) (ERROR (CL-TEST::C) (LIST (LIST CL-TEST::X CL-TEST::C)))))
Expected value:
          NIL
Actual value:
          ((0 #<Simple-Error Invalid function name (SETF 0).>) (#\Space #<Simple-Error Invalid function name (SETF #\Space).>) (" " #<Simple-Error Invalid function name (SETF " ").>) ((CL-TEST::A CL-TEST::B) #<Simple-Error Invalid function name (SETF (CL-TEST::A CL-TEST::B)).>) (#<Arithmetic-Error 400000DA9779> #<Simple-Error Invalid function name (SETF #<Arithmetic-Error 500000DA3AE9>).>) (#<Package "Cl"> #<Simple-Error Invalid function name (SETF #<Package "Cl">).>) (#(0 0 0 0 0 0 0 0 0 0) #<Simple-Error Invalid function name (SETF #(0 0 0 0 0 0 0 0 0 0)).>) (#<Hash-Table 500000DA5129> #<Simple-Error Invalid function name (SETF #<Hash-Table 500000DA5129>).>) (#P"THAT-MAC-THING:foo" #<Simple-Error Invalid function name (SETF #P"THAT-MAC-THING:foo").>) (#<Mezzanine.Gui.Basic-Repl::Basic-Repl 500000011BF9> #<Simple-Error Invalid function name (SETF #<Mezzanine.Gui.Basic-Repl::Basic-Repl 500000011BF9>).>) (#S(READTABLE :CASE :UPCASE :BASE-CHARACTERS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE :WHITESPACE NIL :WHITESPACE :WHITESPACE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE NIL (READ-DOUBLE-QUOTE T) (READ-DISPATCH-CHAR NIL #(NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID READ-#-INVALID NIL READ-#-INVALID NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID NIL NIL READ-#-SHARP-SIGN NIL NIL NIL READ-#-QUOTE READ-#-LEFT-PARENTHESIS READ-#-INVALID READ-#-ASTERISK READ-#-PLUS NIL READ-#-MINUS READ-#-DOT NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-COLON NIL READ-#-INVALID READ-#-EQUAL-SIGN NIL NIL NIL READ-#-ARRAY READ-#-RADIX READ-#-COMPLEX NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-RADIX READ-#-PATHNAME NIL READ-#-RADIX READ-#-STRUCT NIL NIL NIL NIL READ-#-RADIX NIL NIL NIL READ-#-BACKSLASH NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-VERTICAL-BAR NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) #<Hash-Table 500000F00CF9>) NIL NIL NIL (READ-SINGLE-QUOTE T) (READ-LEFT-PARENTHESIS T) (READ-RIGHT-PARENTHESIS T) NIL NIL (READ-COMMA T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL (READ-SEMICOLON T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :SINGLE-ESCAPE NIL NIL NIL (READ-BACKQUOTE T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :MULTIPLE-ESCAPE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :EXTENDED-CHARACTERS #<Hash-Table 500000020679>) #<Simple-Error Invalid function name (SETF #S(READTABLE :CASE :UPCASE :BASE-CHARACTERS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE :WHITESPACE NIL :WHITESPACE :WHITESPACE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :WHITESPACE NIL (READ-DOUBLE-QUOTE T) (READ-DISPATCH-CHAR NIL #(NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID READ-#-INVALID NIL READ-#-INVALID NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-INVALID NIL NIL READ-#-SHARP-SIGN NIL NIL NIL READ-#-QUOTE READ-#-LEFT-PARENTHESIS READ-#-INVALID READ-#-ASTERISK READ-#-PLUS NIL READ-#-MINUS READ-#-DOT NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-COLON NIL READ-#-INVALID READ-#-EQUAL-SIGN NIL NIL NIL READ-#-ARRAY READ-#-RADIX READ-#-COMPLEX NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-RADIX READ-#-PATHNAME NIL READ-#-RADIX READ-#-STRUCT NIL NIL NIL NIL READ-#-RADIX NIL NIL NIL READ-#-BACKSLASH NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL READ-#-VERTICAL-BAR NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) #<Hash-Table 500000F00CF9>) NIL NIL NIL (READ-SINGLE-QUOTE T) (READ-LEFT-PARENTHESIS T) (READ-RIGHT-PARENTHESIS T) NIL NIL (READ-COMMA T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL (READ-SEMICOLON T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :SINGLE-ESCAPE NIL NIL NIL (READ-BACKQUOTE T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL :MULTIPLE-ESCAPE NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :EXTENDED-CHARACTERS #<Hash-Table 500000020679>)).>) (#S(CL-TEST::FOO-STRUCTURE :X 1 :Y CL-TEST::A :Z NIL) #<Simple-Error Invalid function name (SETF #S(CL-TEST::FOO-STRUCTURE :X 1 :Y CL-TEST::A :Z NIL)).>) (#<Compiled-Function CONS 615269> #<Simple-Error Invalid function name (SETF #<Compiled-Function CONS 615269>).>) (#S(RANDOM-STATE :BITS 3106) #<Simple-Error Invalid function name (SETF #S(RANDOM-STATE :BITS 3106)).>) (#<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 500000DA4F29> #<Simple-Error Invalid function name (SETF #<Standard-Method CL-TEST::MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE NIL (INTEGER INTEGER INTEGER) 500000DA4F29>).>) (1.2 #<Simple-Error Invalid function name (SETF 1.2).>) (1.299999 #<Simple-Error Invalid function name (SETF 1.299999).>) (1.5 #<Simple-Error Invalid function name (SETF 1.5).>) (1.799999 #<Simple-Error Invalid function name (SETF 1.799999).>) (3/5 #<Simple-Error Invalid function name (SETF 3/5).>) (10000000000000000000000 #<Simple-Error Invalid function name (SETF 10000000000000000000000).>))

 CL-TEST::FUNCALL.1
 CL-TEST::FUNCALL.2
 CL-TEST::FUNCALL.3
 CL-TEST::FUNCALL.4
 CL-TEST::FUNCALL.5
 CL-TEST::FUNCALL.6
 CL-TEST::FUNCALL.7
 CL-TEST::FUNCALL.8
 CL-TEST::FUNCALL.9
Test CL-TEST::FUNCALL.ORDER.1 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::A CL-TEST::B) (VALUES (FUNCALL (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) (FUNCTION CAR)) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) (QUOTE (CL-TEST::X . CL-TEST::Y)))) CL-TEST::I CL-TEST::A CL-TEST::B))
Expected values:
          CL-TEST::X
          2
          1
          2
Actual values:
          CL-TEST::X
          2
          NIL
          NIL
Test CL-TEST::FUNCALL.ORDER.2 failed
Form: (LET ((CL-TEST::I 0) CL-TEST::A CL-TEST::B CL-TEST::C) (VALUES (FUNCALL (PROGN (SETF CL-TEST::A (INCF CL-TEST::I)) (FUNCTION CONS)) (PROGN (SETF CL-TEST::B (INCF CL-TEST::I)) (QUOTE CL-TEST::X)) (PROGN (SETF CL-TEST::C (INCF CL-TEST::I)) (QUOTE CL-TEST::Y))) CL-TEST::I CL-TEST::A CL-TEST::B CL-TEST::C))
Expected values:
          (CL-TEST::X . CL-TEST::Y)
          3
          1
          2
          3
Actual values:
          (CL-TEST::X . CL-TEST::Y)
          3
          NIL
          NIL
          NIL

 CL-TEST::FUNCALL.ERROR.1
 CL-TEST::FUNCALL.ERROR.2
 CL-TEST::FUNCALL.ERROR.3
 CL-TEST::FUNCALL.ERROR.4
 CL-TEST::FUNCALL.ERROR.5
 CL-TEST::FUNCALL.ERROR.6
 CL-TEST::FUNCALL.ERROR.7
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.1
Test CL-TEST::FUNCTION-LAMBDA-EXPRESSION.2 failed
Form: (LET ((CL-TEST::X NIL)) (FLET ((CL-TEST::%F NIL CL-TEST::X)) (LET ((CL-TEST::RET-VALS (MULTIPLE-VALUE-LIST (FUNCTION-LAMBDA-EXPRESSION (FUNCTION CL-TEST::%F))))) (VALUES (LENGTH CL-TEST::RET-VALS) (CL-TEST::NOTNOT (SECOND CL-TEST::RET-VALS))))))
Expected values:
          3
          T
Actual values:
          3
          NIL

 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.3
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ORDER.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ERROR.1
 CL-TEST::FUNCTION-LAMBDA-EXPRESSION.ERROR.2
 CL-TEST::FUNCTION.1
 CL-TEST::FUNCTION.2
 CL-TEST::FUNCTION.3
 CL-TEST::FUNCTION.4
 CL-TEST::FUNCTION.5
 CL-TEST::FUNCTION.6
 CL-TEST::FUNCTION.7
 CL-TEST::FUNCTION.8
 CL-TEST::FUNCTION.9
 CL-TEST::FUNCTION.10
 CL-TEST::FUNCTION.11
 CL-TEST::FUNCTION.12
 CL-TEST::FUNCTION.13
 CL-TEST::FUNCTION.14
 CL-TEST::FUNCTION.15
 CL-TEST::FUNCTION.16
Test CL-TEST::FUNCTION.17 failed
Form: (FLET ((CL-TEST::%F (&OPTIONAL CL-TEST::X) CL-TEST::X)) (DECLARE (FTYPE (FUNCTION (&OPTIONAL INTEGER) T) CL-TEST::%F)) (VALUES (CL-TEST::%F) (CL-TEST::%F 10) (CL-TEST::%F) (CL-TEST::%F (1+ MOST-POSITIVE-FIXNUM))))
Expected values:
          NIL
          10
          NIL
          4611686018427387904
Actual values:
          NIL
          10
          NIL
          4611686018427387904

 CL-TEST::FUNCTION.18
 CL-TEST::FUNCTION.19
Test CL-TEST::FUNCTION.20 failed
Form: (FLET ((CL-TEST::%F (&KEY CL-TEST::FOO) CL-TEST::FOO)) (DECLARE (FTYPE (FUNCTION (&KEY (:FOO T) (:ALLOW-OTHER-KEYS T)) T) CL-TEST::%F)) (VALUES (CL-TEST::%F) (CL-TEST::%F :FOO (QUOTE CL-TEST::A)) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL) (CL-TEST::%F :ALLOW-OTHER-KEYS T :FOO (QUOTE CL-TEST::Z))))
Expected values:
          NIL
          CL-TEST::A
          NIL
          CL-TEST::Z
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of (:FOO).> [Actual value: #<error during printing>

 CL-TEST::FUNCTION.21
 CL-TEST::FUNCTION.22
 CL-TEST::FUNCTION.23
 CL-TEST::FUNCTION.24
 CL-TEST::FUNCTIONP.1
 CL-TEST::FUNCTIONP.2
 CL-TEST::FUNCTIONP.3
 CL-TEST::FUNCTIONP.4
 CL-TEST::FUNCTIONP.5
 CL-TEST::FUNCTIONP.6
 CL-TEST::FUNCTIONP.7
 CL-TEST::FUNCTIONP.8
 CL-TEST::FUNCTIONP.9
 CL-TEST::FUNCTIONP.10
 CL-TEST::FUNCTIONP.11
 CL-TEST::FUNCTIONP.12
 CL-TEST::FUNCTIONP.ORDER.1
 CL-TEST::FUNCTIONP.ERROR.1
 CL-TEST::FUNCTIONP.ERROR.2
 CL-TEST::GET-SETF-EXPANSION.ERROR.1
 CL-TEST::GET-SETF-EXPANSION.ERROR.2
Test CL-TEST::GET-SETF-EXPANSION.1 failed
Form: (LET* ((CL-TEST::FN (GENSYM)) (CL-TEST::VALS (MULTIPLE-VALUE-LIST (GET-SETF-EXPANSION (LIST CL-TEST::FN))))) (VALUES (LENGTH CL-TEST::VALS) (FIRST CL-TEST::VALS) (SECOND CL-TEST::VALS) (LENGTH (THIRD CL-TEST::VALS)) (BLOCK CL-TEST::DONE (SUBST-IF NIL (FUNCTION (LAMBDA (CL-TEST::TERM) (WHEN (EQUAL CL-TEST::TERM (BACKQUOTE (FUNCTION (SETF (BQ-COMMA CL-TEST::FN))))) (RETURN-FROM CL-TEST::DONE :GOOD)))) (FOURTH CL-TEST::VALS))) (IF (EQUAL (FIFTH CL-TEST::VALS) (LIST CL-TEST::FN)) :GOOD (FIFTH CL-TEST::VALS))))
Expected values:
          5
          NIL
          NIL
          1
          :GOOD
          :GOOD
Actual value:
          #<Undefined-Function SUBST-IF> [Actual value: #<error during printing>

 CL-TEST::GET-SETF-EXPANSION.2
 CL-TEST::GET-SETF-EXPANSION.3
 CL-TEST::IDENTITY.1
 CL-TEST::IDENTITY.2
 CL-TEST::IDENTITY.3
Test CL-TEST::IDENTITY.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (IDENTITY (INCF CL-TEST::I)) CL-TEST::I))
Expected values:
          1
          1
Actual values:
          NIL
          1

 CL-TEST::IDENTITY.ERROR.1
 CL-TEST::IDENTITY.ERROR.2
 CL-TEST::IF.1
 CL-TEST::IF.2
 CL-TEST::IF.3
 CL-TEST::IF.4
 CL-TEST::IF.5
 CL-TEST::IF.6
 CL-TEST::IF.7
 CL-TEST::IF.8
 CL-TEST::IF.9
 CL-TEST::IF.10
 CL-TEST::IF.11
 CL-TEST::IF.12
 CL-TEST::IF.13
Test CL-TEST::IF.ORDER.1 failed
Form: (LET ((CL-TEST::I 0)) (VALUES (IF (= (INCF CL-TEST::I) 1) (QUOTE T) NIL) CL-TEST::I))
Expected values:
          T
          1
Actual value:
          #<Simple-Type-Error The value of X is NIL, which is not of type NUMBER.> [Actual value: #<error during printing>

 CL-TEST::LABELS.1
 CL-TEST::LABELS.2
 CL-TEST::LABELS.3
 CL-TEST::LABELS.4
 CL-TEST::LABELS.4A
 CL-TEST::LABELS.5
 CL-TEST::LABELS.6
 CL-TEST::LABELS.7
 CL-TEST::LABELS.7B
Test CL-TEST::LABELS.7C failed
Form: (LABELS ((CL-TEST::%F (CL-TEST::X &OPTIONAL (CL-TEST::B (CL-TEST::%G CL-TEST::X))) CL-TEST::B) (CL-TEST::%G (CL-TEST::Y) (+ CL-TEST::Y CL-TEST::Y))) (CL-TEST::%F 10))
Expected value:
          20
Actual value:
          #<Simple-Error Can't find variable #<System.Compiler:Lexical-Variable CL-TEST::X> in environment.> [Actual value: #<error during printing>

 CL-TEST::LABELS.7D
 CL-TEST::LABELS.8
 CL-TEST::LABELS.9
 CL-TEST::LABELS.10
 CL-TEST::LABELS.11
Test CL-TEST::LABELS.12 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :C 4)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument :C. Expected one of (:A :B).> [Actual value: #<error during printing>
Test CL-TEST::LABELS.13 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A (CL-TEST::B 0 CL-TEST::B-P)) (VALUES CL-TEST::A CL-TEST::B (NOT (NOT CL-TEST::B-P))))) (CL-TEST::%F :A)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 CL-TEST::LABELS.14
 CL-TEST::LABELS.15
Test CL-TEST::LABELS.16 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY CL-TEST::A) CL-TEST::A)) (CL-TEST::%F (QUOTE (CL-TEST::FOO)))) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Odd number of &KEY arguments.> [Actual value: #<error during printing>

 CL-TEST::LABELS.17
 CL-TEST::LABELS.18
 CL-TEST::LABELS.19
 CL-TEST::LABELS.20
 CL-TEST::LABELS.21
 CL-TEST::LABELS.22
 CL-TEST::LABELS.23
 CL-TEST::LABELS.24
 CL-TEST::LABELS.25
 CL-TEST::LABELS.26
 CL-TEST::LABELS.27
 CL-TEST::LABELS.28
 CL-TEST::LABELS.29
 CL-TEST::LABELS.30
 CL-TEST::LABELS.31
Test CL-TEST::LABELS.32 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS NIL))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>
Test CL-TEST::LABELS.33 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>
Test CL-TEST::LABELS.34 failed
Form: (LABELS ((CL-TEST::%F (&KEY) (QUOTE CL-TEST::GOOD))) (CL-TEST::%F :ALLOW-OTHER-KEYS T :A 1 :B 2))
Expected value:
          CL-TEST::GOOD
Actual value:
          #<Simple-Error Unknown &KEY argument :ALLOW-OTHER-KEYS. Expected one of NIL.> [Actual value: #<error during printing>

 CL-TEST::LABELS.35
Test CL-TEST::LABELS.36 failed
Form: (CL-TEST:SIGNALS-ERROR (LABELS ((CL-TEST::%F (&KEY) :BAD)) (CL-TEST::%F NIL NIL)) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<Simple-Error Unknown &KEY argument NIL. Expected one of NIL.> [Actual value: #<error during printing>
Test CL-TEST::LABELS.37 failed
Form: (LABELS ((CL-TEST::F NIL (QUOTE CL-TEST::FOO))) (CL-TEST::EQT (FUNCTION CL-TEST::F) (FUNCTION CL-TEST::F)))
Expected value:
          T
Actual value:
          NIL

 CL-TEST::LABELS.38
Test CL-TEST::LABELS.39 failed
Form: (LABELS ((CL-TEST::F NIL (FUNCTION CL-TEST::F))) (CL-TEST::EQLT (CL-TEST::F) (FUNCTION CL-TEST::F)))
Expected value:
          T
Actual value:
          NIL
Test CL-TEST::LABELS.40 failed
Form: (LET ((CL-TEST::X (LABELS ((CL-TEST::F NIL (FUNCTION CL-TEST::F))) (FUNCTION CL-TEST::F)))) (CL-TEST::EQLT CL-TEST::X (FUNCALL CL-TEST::X)))
Expected value:
          T
Actual value:
          NIL

 CL-TEST::LABELS.41
 CL-TEST::LABELS.42
 CL-TEST::LABELS.43
 CL-TEST::LABELS.44
 CL-TEST::LABELS.45
Test CL-TEST::LABELS.46 failed
Form: (LET ((CL-TEST::X :BAD)) (DECLARE (SPECIAL CL-TEST::X)) (LET ((CL-TEST::X :GOOD)) (LABELS ((CL-TEST::%F (&AUX (CL-TEST::Y CL-TEST::X)) (DECLARE (SPECIAL CL-TEST::X)) CL-TEST::Y)) (CL-TEST::%F))))
Expected value:
          :GOOD
Actual value:
          :BAD

 CL-TEST::LABELS.47
 CL-TEST::LABELS.48
 CL-TEST::LABELS.49
 CL-TEST::LABELS.50
Test CL-TEST::LABELS.51 failed
Form: (LABELS ((CL-TEST::LABELS.51 NIL :GOOD)) (CL-TEST::LABELS.51))
Expected value:
          :GOOD
Actual value:
          :BAD
Test CL-TEST::LABELS.52 failed
Form: (LABELS ((CL-TEST::LABELS.52 NIL :GOOD)) (CL-TEST::LABELS.52))
Expected value:
          :GOOD
Actual value:
          :BAD

 CL-TEST::LAMBDA-LIST-KEYWORDS.1
 CL-TEST::LAMBDA-LIST-KEYWORDS.2
 CL-TEST::LAMBDA-LIST-KEYWORDS.3
 CL-TEST::LAMBDA-LIST-KEYWORDS.5
 CL-TEST::LAMBDA-PARAMETERS-LIMIT.1
 CL-TEST::LAMBDA-PARAMETERS-LIMIT.2
 CL-TEST::LET.1
 CL-TEST::LET.2
 CL-TEST::LET.3
 CL-TEST::LET.4
 CL-TEST::LET.5
 CL-TEST::LET.6
 CL-TEST::LET.7
 CL-TEST::LET.9
 CL-TEST::LET.11
 CL-TEST::LET.14
 CL-TEST::LET.15
 CL-TEST::LET.16
 CL-TEST::LET.17
 CL-TEST::LET.17A
 CL-TEST::LET.18
 CL-TEST::LET.19
 CL-TEST::LET.20
 CL-TEST::LET.21
 CL-TEST::LET*.1
 CL-TEST::LET*.2
 CL-TEST::LET*.3
 CL-TEST::LET*.4
 CL-TEST::LET*.5
 CL-TEST::LET*.6
 CL-TEST::LET*.7
 CL-TEST::LET*.8
 CL-TEST::LET*.9
 CL-TEST::LET*.10
 CL-TEST::LET*.11
 CL-TEST::LET*.12
 CL-TEST::LET*.14
 CL-TEST::LET*.15
 CL-TEST::LET*.16
 CL-TEST::LET*.17
 CL-TEST::LET*.17A
 CL-TEST::LET*.18
 CL-TEST::LET*.19
 CL-TEST::LET*.20
 CL-TEST::LET*.21
 CL-TEST::LET*.22
 CL-TEST::LET*.23
 CL-TEST::MACROLET.1
 CL-TEST::MACROLET.2
 CL-TEST::MACROLET.3
Test CL-TEST::MACROLET.4 failed
Form: (LET ((CL-TEST::X NIL)) (MACROLET ((CL-TEST::%M (&WHOLE CL-TEST::W CL-TEST::ARG) (BACKQUOTE (PROGN (SETQ CL-TEST::X (QUOTE (BQ-COMMA CL-TEST::W))) (BQ-COMMA CL-TEST::ARG))))) (VALUES (CL-TEST::%M 1) CL-TEST::X)))
Expected values:
          1
          (CL-TEST::%M 1)
Actual values:
          1
          (1)

 CL-TEST::MACROLET.5
Test CL-TEST::MACROLET.6 failed
Form: (LET ((CL-TEST::X NIL)) (MACROLET ((CL-TEST::%M (&KEY (CL-TEST::A (QUOTE CL-TEST::XXX)) CL-TEST::B) (BACKQUOTE (SETQ CL-TEST::X (QUOTE (BQ-COMMA CL-TEST::A)))))) (VALUES (CL-TEST::%M :A CL-TEST::FOO) CL-TEST::X (CL-TEST::%M :B CL-TEST::BAR) CL-TEST::X)))
Expected values:
          CL-TEST::FOO
          CL-TEST::FOO
          CL-TEST::XXX
          CL-TEST::XXX
Actual values:
          NIL
          CL-TEST::FOO
          NIL
          CL-TEST::XXX
Test CL-TEST::MACROLET.7 failed
Form: (LET ((CL-TEST::X NIL)) (MACROLET ((CL-TEST::%M ((&KEY CL-TEST::A CL-TEST::B)) (BACKQUOTE (SETQ CL-TEST::X (QUOTE (BQ-COMMA CL-TEST::A)))))) (VALUES (CL-TEST::%M (:A CL-TEST::FOO)) CL-TEST::X (CL-TEST::%M (:B CL-TEST::BAR)) CL-TEST::X)))
Expected values:
          CL-TEST::FOO
          CL-TEST::FOO
          NIL
          NIL
Actual values:
          NIL
          CL-TEST::FOO
          NIL
          NIL
Test CL-TEST::MACROLET.8 failed
Form: (LET ((CL-TEST::X NIL)) (MACROLET ((CL-TEST::%M ((&KEY (CL-TEST::A 10) CL-TEST::B)) (BACKQUOTE (SETQ CL-TEST::X (QUOTE (BQ-COMMA CL-TEST::A)))))) (VALUES (CL-TEST::%M (:A CL-TEST::FOO)) CL-TEST::X (CL-TEST::%M (:B CL-TEST::BAR)) CL-TEST::X)))
Expected values:
          CL-TEST::FOO
          CL-TEST::FOO
          10
          10
Actual values:
          NIL
          CL-TEST::FOO
          NIL
          10
Test CL-TEST::MACROLET.9 failed
Form: (LET ((CL-TEST::X NIL)) (MACROLET ((CL-TEST::%M (&KEY (CL-TEST::A (QUOTE CL-TEST::XXX) CL-TEST::A-P) CL-TEST::B) (BACKQUOTE (SETQ CL-TEST::X (QUOTE (BQ-COMMA (LIST CL-TEST::A (NOT (NOT CL-TEST::A-P))))))))) (VALUES (CL-TEST::%M :A CL-TEST::FOO) CL-TEST::X (CL-TEST::%M :B CL-TEST::BAR) CL-TEST::X)))
Expected values:
          (CL-TEST::FOO T)
          (CL-TEST::FOO T)
          (CL-TEST::XXX NIL)
          (CL-TEST::XXX NIL)
Actual values:
          NIL
          (CL-TEST::FOO T)
          NIL
          (CL-TEST::XXX NIL)
Test CL-TEST::MACROLET.10 failed
Form: (LET ((CL-TEST::X NIL)) (MACROLET ((CL-TEST::%M (CL-TEST::B &REST CL-TEST::A) (BACKQUOTE (SETQ CL-TEST::X (QUOTE (BQ-COMMA CL-TEST::A)))))) (VALUES (CL-TEST::%M CL-TEST::A1 CL-TEST::A2) CL-TEST::X)))
Expected values:
          (CL-TEST::A2)
          (CL-TEST::A2)
Actual values:
          NIL
          (CL-TEST::A2)
Test CL-TEST::MACROLET.11 failed
Form: (LET ((CL-TEST::X NIL)) (MACROLET ((CL-TEST::%M ((CL-TEST::B &REST CL-TEST::A)) (BACKQUOTE (SETQ CL-TEST::X (QUOTE (BQ-COMMA CL-TEST::A)))))) (VALUES (CL-TEST::%M (CL-TEST::A1 CL-TEST::A2)) CL-TEST::X)))
Expected values:
          (CL-TEST::A2)
          (CL-TEST::A2)
Actual values:
          NIL
          (CL-TEST::A2)
Test CL-TEST::MACROLET.12 failed
Form: (LET ((CL-TEST::X NIL)) (MACROLET ((CL-TEST::%M (&WHOLE CL-TEST::W CL-TEST::B &REST CL-TEST::A) (BACKQUOTE (SETQ CL-TEST::X (QUOTE (BQ-COMMA (LIST CL-TEST::A CL-TEST::W))))))) (VALUES (CL-TEST::%M CL-TEST::A1 CL-TEST::A2) CL-TEST::X)))
Expected values:
          ((CL-TEST::A2) (CL-TEST::%M CL-TEST::A1 CL-TEST::A2))
          ((CL-TEST::A2) (CL-TEST::%M CL-TEST::A1 CL-TEST::A2))
Actual values:
          NIL
          ((CL-TEST::A2) (CL-TEST::A1 CL-TEST::A2))
Test CL-TEST::MACROLET.13 failed
Form: (SYMBOL-MACROLET ((CL-TEST::A CL-TEST::B)) (MACROLET ((CL-TEST::FOO (CL-TEST::X &ENVIRONMENT CL-TEST::ENV) (LET ((CL-TEST::Y (MACROEXPAND CL-TEST::X CL-TEST::ENV))) (IF (EQ CL-TEST::Y (QUOTE CL-TEST::A)) 1 2)))) (CL-TEST::FOO CL-TEST::A)))
Expected value:
          2
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>
Test CL-TEST::MACROLET.14 failed
Form: (SYMBOL-MACROLET ((CL-TEST::A CL-TEST::B)) (MACROLET ((CL-TEST::FOO (CL-TEST::X &ENVIRONMENT CL-TEST::ENV) (LET ((CL-TEST::Y (MACROEXPAND-1 CL-TEST::X CL-TEST::ENV))) (IF (EQ CL-TEST::Y (QUOTE CL-TEST::A)) 1 2)))) (CL-TEST::FOO CL-TEST::A)))
Expected value:
          2
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::MACROLET.15
 CL-TEST::MACROLET.16
 CL-TEST::MACROLET.17
 CL-TEST::MACROLET.18
 CL-TEST::MACROLET.19
 CL-TEST::MACROLET.20
 CL-TEST::MACROLET.21
 CL-TEST::MACROLET.22
 CL-TEST::MACROLET.22A
 CL-TEST::MACROLET.23
 CL-TEST::MACROLET.24
 CL-TEST::MACROLET.25
 CL-TEST::MACROLET.26
 CL-TEST::MACROLET.27
 CL-TEST::MACROLET.28
 CL-TEST::MACROLET.29
 CL-TEST::MACROLET.30
 CL-TEST::MACROLET.31
Test CL-TEST::MACROLET.32 failed
Form: (MACROLET ((CL-TEST::%M (&KEY CL-TEST::A CL-TEST::B CL-TEST::C) (BACKQUOTE (QUOTE ((BQ-COMMA CL-TEST::A) (BQ-COMMA CL-TEST::B) (BQ-COMMA CL-TEST::C)))))) (VALUES (CL-TEST::%M :ALLOW-OTHER-KEYS NIL) (CL-TEST::%M :A 1 :ALLOW-OTHER-KEYS NIL) (CL-TEST::%M :ALLOW-OTHER-KEYS T) (CL-TEST::%M :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T) (CL-TEST::%M :ALLOW-OTHER-KEYS T :C 1 :B 2 :A 3) (CL-TEST::%M :ALLOW-OTHER-KEYS NIL :C 1 :B 2 :A 3)))
Expected values:
          (NIL NIL NIL)
          (1 NIL NIL)
          (NIL NIL NIL)
          (NIL NIL NIL)
          (3 2 1)
          (3 2 1)
Actual value:
          #<Simple-Error Invalid keyword :ALLOW-OTHER-KEYS. Wanted one of (:C :B :A).> [Actual value: #<error during printing>

 CL-TEST::MACROLET.33
 CL-TEST::MACROLET.34
 CL-TEST::MACROLET.35
Test CL-TEST::MACROLET.36 failed
Form: (MACROLET ((CL-TEST::%M (&WHOLE (CL-TEST::M CL-TEST::A CL-TEST::B) CL-TEST::C CL-TEST::D) (BACKQUOTE (QUOTE ((BQ-COMMA CL-TEST::M) (BQ-COMMA CL-TEST::A) (BQ-COMMA CL-TEST::B) (BQ-COMMA CL-TEST::C) (BQ-COMMA CL-TEST::D)))))) (CL-TEST::%M 1 2))
Expected value:
          (CL-TEST::%M 1 2 1 2)
Actual value:
          #<Unbound-Variable CL-TEST::M> [Actual value: #<error during printing>
Test CL-TEST::MACROLET.37 failed
Form: (MACROLET ((CL-TEST::%F NIL :BAD)) (FLET ((CL-TEST::%F NIL :GOOD)) (CL-TEST::%F)))
Expected value:
          :GOOD
Actual value:
          :BAD
Test CL-TEST::MACROLET.38 failed
Form: (MACROLET ((CL-TEST::FOO NIL 1)) (MACROLET ((CL-TEST::%F (&OPTIONAL (CL-TEST::X (MACROEXPAND (QUOTE (CL-TEST::FOO)) CL-TEST::ENV)) &ENVIRONMENT CL-TEST::ENV) CL-TEST::X)) (CL-TEST::%F)))
Expected value:
          1
Actual value:
          #<Simple-Error No class named INVALID-MACRO-LAMBDA-LIST.> [Actual value: #<error during printing>

 CL-TEST::MACROLET.39
 CL-TEST::MACROLET.40
 CL-TEST::MACROLET.41
 CL-TEST::MACROLET.42
 CL-TEST::MACROLET.43
 CL-TEST::MACROLET.44
 CL-TEST::MACROLET.45
 CL-TEST::MACROLET.46
 CL-TEST::MACROLET.47
 CL-TEST::MACROLET.48
 CL-TEST::MACROLET.49
 CL-TEST::MACROLET.50
 CL-TEST::MACROLET.51
Test CL-TEST::MACROLET.52 failed
Form: (MACROLET ((CL-TEST::MACROLET.52 NIL :GOOD)) (CL-TEST::MACROLET.52))
Expected value:
          :GOOD
Actual value:
          :BAD

 CL-TEST::MULTIPLE-VALUE-BIND.1
 CL-TEST::MULTIPLE-VALUE-BIND.2
 CL-TEST::MULTIPLE-VALUE-BIND.3
 CL-TEST::MULTIPLE-VALUE-BIND.4
 CL-TEST::MULTIPLE-VALUE-BIND.5
 CL-TEST::MULTIPLE-VALUE-BIND.6
Test CL-TEST::MULTIPLE-VALUE-BIND.7 failed
Form: (LET ((CL-TEST::Z 0) CL-TEST::X CL-TEST::Y) (DECLARE (SPECIAL CL-TEST::Z)) (VALUES (FLET ((CL-TEST::%X NIL (SYMBOL-VALUE (QUOTE CL-TEST::X))) (CL-TEST::%Y NIL (SYMBOL-VALUE (QUOTE CL-TEST::Y))) (CL-TEST::%Z NIL (SYMBOL-VALUE (QUOTE CL-TEST::Z)))) (MULTIPLE-VALUE-BIND (CL-TEST::X CL-TEST::Y CL-TEST::Z) (VALUES 1 2 3) (DECLARE (SPECIAL CL-TEST::X CL-TEST::Y)) (LIST (CL-TEST::%X) (CL-TEST::%Y) (CL-TEST::%Z)))) CL-TEST::X CL-TEST::Y CL-TEST::Z))
Expected values:
          (1 2 0)
          NIL
          NIL
          0
Actual values:
          NIL
          NIL
          NIL
          0

 CL-TEST::MULTIPLE-VALUE-BIND.8
 CL-TEST::MULTIPLE-VALUE-BIND.9
 CL-TEST::MULTIPLE-VALUE-BIND.10
 CL-TEST::MULTIPLE-VALUE-BIND.11
 CL-TEST::MULTIPLE-VALUE-BIND.12
 CL-TEST::MULTIPLE-VALUE-BIND.13
 CL-TEST::MULTIPLE-VALUE-BIND.14
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.1
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.2
 CL-TEST::MULTIPLE-VALUE-BIND.ERROR.3
 CL-TEST::MULTIPLE-VALUE-CALL.1
 CL-TEST::MULTIPLE-VALUE-CALL.2
 CL-TEST::MULTIPLE-VALUE-CALL.3
 CL-TEST::MULTIPLE-VALUE-CALL.4
 CL-TEST::MULTIPLE-VALUE-CALL.5
 CL-TEST::MULTIPLE-VALUE-PROG1.1
 CL-TEST::MULTIPLE-VALUE-PROG1.2
 CL-TEST::MULTIPLE-VALUE-PROG1.3
 CL-TEST::MULTIPLE-VALUE-PROG1.4
 CL-TEST::MULTIPLE-VALUE-PROG1.5
 CL-TEST::MULTIPLE-VALUE-PROG1.6
Test CL-TEST::MULTIPLE-VALUE-PROG1.7 failed
Form: (LET ((CL-TEST::X 0) (CL-TEST::Y 0)) (MULTIPLE-VALUE-CALL (FUNCTION LIST) (MULTIPLE-VALUE-PROG1 (VALUES (INCF CL-TEST::X) CL-TEST::Y) (INCF CL-TEST::X CL-TEST::X) (INCF CL-TEST::Y 10)) CL-TEST::X CL-TEST::Y))
Expected value:
          (1 0 2 10)
Actual value:
          (NIL 0 2 10)

 CL-TEST::MULTIPLE-VALUE-PROG1.8
 CL-TEST::MULTIPLE-VALUE-PROG1.9
 CL-TEST::MULTIPLE-VALUE-PROG1.10
 CL-TEST::MULTIPLE-VALUE-PROG1.11
 CL-TEST::MULTIPLE-VALUE-PROG1.12
 CL-TEST::MULTIPLE-VALUE-SETQ.1
 CL-TEST::MULTIPLE-VALUE-SETQ.2
 CL-TEST::MULTIPLE-VALUE-SETQ.3
 CL-TEST::MULTIPLE-VALUE-SETQ.4
Test CL-TEST::MULTIPLE-VALUE-SETQ.5 failed
Form: (LET ((CL-TEST::I 0) (CL-TEST::X (LIST NIL))) (SYMBOL-MACROLET ((CL-TEST::Y (CAR (PROGN (INCF CL-TEST::I) CL-TEST::X)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y) CL-TEST::I)) CL-TEST::X)
Expected value:
          (1)
Actual value:
          (0)

 CL-TEST::MULTIPLE-VALUE-SETQ.6
 CL-TEST::MULTIPLE-VALUE-SETQ.7
Test CL-TEST::MULTIPLE-VALUE-SETQ.8 failed
Form: (LET ((CL-TEST::X (LIST NIL)) (CL-TEST::Z (LIST NIL)) (CL-TEST::I 0)) (SYMBOL-MACROLET ((CL-TEST::Y (CAR (PROGN (INCF CL-TEST::I 3) CL-TEST::X))) (CL-TEST::W (CAR (PROGN (INCF CL-TEST::I CL-TEST::I) CL-TEST::Z)))) (MULTIPLE-VALUE-SETQ (CL-TEST::Y CL-TEST::W) (VALUES CL-TEST::I 10))) (VALUES CL-TEST::X CL-TEST::Z))
Expected values:
          (6)
          (10)
Actual values:
          (0)
          (10)

 CL-TEST::MULTIPLE-VALUE-SETQ.9
 CL-TEST::MULTIPLE-VALUE-SETQ.10
 CL-TEST::MULTIPLE-VALUE-SETQ.11

[Stack overflow during GC]
