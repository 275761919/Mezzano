(in-package "SYSTEM.INTERNALS")

(define-compiler-macro mapcar (function list &rest more-lists)
  (let* ((fn-sym (gensym "FN"))
         (result-sym (gensym "RESULT"))
         (tail-sym (gensym "TAIL"))
         (all-lists (list* list more-lists))
         (iterators (mapcar (lambda (x) (declare (ignore x)) (gensym))
                            all-lists)))
    `(do* ((,fn-sym ,function)
           (,result-sym (cons nil nil))
           (,tail-sym ,result-sym (cdr ,tail-sym))
           ,@(mapcar (lambda (name form)
                       (list name form `(cdr ,name)))
                     iterators all-lists))
          ((or ,@(mapcar (lambda (name) `(null ,name))
                         iterators))
           (cdr ,result-sym))
       (setf (cdr ,tail-sym)
             (cons (funcall ,fn-sym ,@(mapcar (lambda (name) `(car ,name))
                                              iterators))
                   nil)))))

(define-compiler-macro mapc (function list &rest more-lists)
  (let* ((fn-sym (gensym "FN"))
         (result-sym (gensym "RESULT"))
         (all-lists (list* list more-lists))
         (iterators (mapcar (lambda (x) (declare (ignore x)) (gensym))
                            all-lists)))
    `(do* ((,fn-sym ,function)
           ,@(mapcar (lambda (name form)
                       (list name form `(cdr ,name)))
                     iterators all-lists)
           (,result-sym ,(first iterators)))
          ((or ,@(mapcar (lambda (name) `(null ,name))
                         iterators))
           ,result-sym)
       (funcall ,fn-sym ,@(mapcar (lambda (name) `(car ,name))
                                  iterators)))))

(define-compiler-macro maplist (function list &rest more-lists)
  (let* ((fn-sym (gensym "FN"))
         (result-sym (gensym "RESULT"))
         (tail-sym (gensym "TAIL"))
         (all-lists (list* list more-lists))
         (iterators (mapcar (lambda (x) (declare (ignore x)) (gensym))
                            all-lists)))
    `(do* ((,fn-sym ,function)
           (,result-sym (cons nil nil))
           (,tail-sym ,result-sym (cdr ,tail-sym))
           ,@(mapcar (lambda (name form)
                       (list name form `(cdr ,name)))
                     iterators all-lists))
          ((or ,@(mapcar (lambda (name) `(null ,name))
                         iterators))
           (cdr ,result-sym))
       (setf (cdr ,tail-sym)
             (cons (funcall ,fn-sym ,@iterators) nil)))))
