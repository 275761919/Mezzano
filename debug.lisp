(in-package #:sys.int)

(declaim (special *debug-io*
                  *standard-input*
                  *standard-output*))

(defparameter *debugger-depth* 0)

(defun sys.int::enter-debugger (condition)
  (let* ((*standard-input* *debug-io*)
	 (*standard-output* *debug-io*)
	 (debug-level *debugger-depth*)
	 (*debugger-depth* (1+ *debugger-depth*))
	 (restarts (compute-restarts))
	 (restart-count (length restarts)))
    (fresh-line)
    (write condition :escape nil :readably nil)
    (write-char #\Space)
    (write-char #\()
    (write (class-name (class-of condition)))
    (write-char #\))
    (fresh-line)
    (show-restarts restarts)
    (fresh-line)
    (backtrace)
    (loop
       (fresh-line)
       (write-string "Pick a restart# ")
       (let ((form (read)))
         (when (and (integerp form) (>= form 0) (< form restart-count))
           (invoke-restart-interactively (nth (- restart-count form 1) restarts)))))))

(defun show-restarts (restarts)
  (let ((restart-count (length restarts)))
    (write-string "Available restarts:")(terpri)
    (do ((i 0 (1+ i))
	 (r restarts (cdr r)))
	((null r))
      (write i)
      (write-char #\Space)
      (write (restart-name (car r)))
      (terpri))))

(defun backtrace ()
  (do ((fp (read-frame-pointer)
           (memref-unsigned-byte-64 fp 0)))
      ((= fp 0))
    (write-char #\Newline)
    (write-integer fp 16)
    (write-char #\Space)
    (write-integer (memref-unsigned-byte-64 fp -2) 16)))
