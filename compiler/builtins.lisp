;;;; Functions which are built in to the compiler and have custom code generators.

(in-package #:system.compiler)

(defparameter *builtins* (make-hash-table))

(defmacro defbuiltin (name lambda-list &body body)
  `(progn (setf (gethash ',(sys.int::function-symbol name) *builtins*)
		(list ',lambda-list
		      (lambda ,lambda-list
			(declare (lambda-name ,name))
			,@body)))
	  ',name))

(defmacro define-reader (name type tag slot)
  `(defbuiltin ,name (object)
     (let ((type-error-label (gensym)))
       (emit-trailer (type-error-label)
         (raise-type-error :r8 ',type))
       (load-in-reg :r8 object t)
       (smash-r8)
       (emit `(sys.lap-x86:mov8 :al :r8l)
             `(sys.lap-x86:and8 :al #b1111)
             `(sys.lap-x86:cmp8 :al ,',tag)
             `(sys.lap-x86:jne ,type-error-label)
             `(sys.lap-x86:mov64 :r8 (,',slot :r8)))
       (setf *r8-value* (list (gensym))))))

(defmacro define-writer (name type tag slot)
  `(defbuiltin ,name (value object)
     (let ((type-error-label (gensym)))
       (emit-trailer (type-error-label)
         (raise-type-error :r9 ',type))
       (load-in-reg :r9 object t)
       (load-in-reg :r8 value t)
       (emit `(sys.lap-x86:mov8 :al :r9l)
             `(sys.lap-x86:and8 :al #b1111)
             `(sys.lap-x86:cmp8 :al ,',tag)
             `(sys.lap-x86:jne ,type-error-label)
             `(sys.lap-x86:mov64 (,',slot :r9) :r8))
       *r8-value*)))

(defmacro define-accessor (name type tag slot)
  `(progn (define-reader ,name ,type ,tag ,slot)
          (define-writer (setf ,name) ,type ,tag ,slot)))

(defmacro define-tag-type-predicate (name tag)
  `(defbuiltin ,name (object)
     (load-in-reg :r8 object t)
     (emit `(sys.lap-x86:mov8 :al :r8l)
           `(sys.lap-x86:and8 :al #b1111)
           `(sys.lap-x86:cmp8 :al ,',tag))
     (predicate-result :e)))

;; Produce an alist of symbol names and their associated functions.
(defun generate-builtin-functions ()
  (let ((functions '()))
    (maphash (lambda (name fn)
               (push (list name
                           `(lambda ,(first fn)
                              (declare (system:lambda-name ,name))
                              (,name ,@(first fn))))
                     functions))
             *builtins*)
    functions))

(defun match-builtin (symbol arg-count)
  (let ((x (gethash symbol *builtins*)))
    (when (and x (eql (length (first x)) arg-count))
      (second x))))

(defun constant-type-p (tag type)
  (and (consp tag)
       (consp (cdr tag))
       (null (cddr tag))
       (eql (first tag) 'quote)
       (typep (second tag) type)))

(defbuiltin (setf sys.int::memref-unsigned-byte-16) (new-value base offset)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :rdx '(unsigned-byte 16)))
    (load-in-reg :rax base t)
    (fixnum-check :rax)
    (load-in-reg :rcx offset t)
    (fixnum-check :rcx)
    (load-in-r8 new-value t)
    (emit `(sys.lap-x86:mov64 :rdx :r8)
	  `(sys.lap-x86:test64 :rdx #b111)
	  `(sys.lap-x86:jnz ,type-error-label)
	  `(sys.lap-x86:cmp64 :rdx ,(* #x10000 8))
	  `(sys.lap-x86:jae ,type-error-label)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 2).
	  `(sys.lap-x86:sar64 :rax 3)
	  `(sys.lap-x86:sar64 :rcx 2)
	  `(sys.lap-x86:sar64 :rdx 3)
	  ;; Write.
	  `(sys.lap-x86:mov16 (:rax :rcx) :dx))
    *r8-value*))

(defbuiltin (setf sys.int::memref-unsigned-byte-32) (new-value base offset)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :rdx '(unsigned-byte 32)))
    (load-in-reg :rax base t)
    (fixnum-check :rax)
    (load-in-reg :rcx offset t)
    (fixnum-check :rcx)
    (load-in-r8 new-value t)
    (emit `(sys.lap-x86:mov64 :rdx :r8)
	  `(sys.lap-x86:test64 :rdx #b111)
	  `(sys.lap-x86:jnz ,type-error-label)
          `(sys.lap-x86:mov64 :rsi ,(* #x100000000 8))
	  `(sys.lap-x86:cmp64 :rdx :rsi)
	  `(sys.lap-x86:jae ,type-error-label)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 2).
	  `(sys.lap-x86:sar64 :rax 3)
	  `(sys.lap-x86:sar64 :rcx 1)
	  `(sys.lap-x86:sar64 :rdx 3)
	  ;; Write.
	  `(sys.lap-x86:mov32 (:rax :rcx) :edx))
    *r8-value*))

(defbuiltin sys.int::memref-unsigned-byte-64 (base offset)
  (let ((overflow-error-label (gensym))
        (ok-label (gensym)))
    (emit-trailer (overflow-error-label)
      (load-constant :r10 'sys.int::memref-unsigned-byte-64)
      (load-constant :r13 'sys.int::raise-overflow)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
	    `(sys.lap-x86:call (:symbol-function :r13))
	    `(sys.lap-x86:ud2)))
    (load-in-reg :r8 base t)
    (fixnum-check :r8)
    (load-in-reg :r9 offset t)
    (fixnum-check :r9)
    (smash-r8)
    (emit `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:mov64 :rcx :r9)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rax 3)
          ;; Read.
          `(sys.lap-x86:mov64 :rax (:rax :rcx))
          ;; Check for overflow. Top 3 bits must be all 0 or all 1.
          `(sys.lap-x86:mov64 :rdx :rax)
          `(sys.lap-x86:sar64 :rdx 61)
          `(sys.lap-x86:jz ,ok-label)
          `(sys.lap-x86:cmp8 :dl -1)
          `(sys.lap-x86:jne ,overflow-error-label)
          ok-label
          ;; Convert to fixnum.
          `(sys.lap-x86:shl64 :rax 3)
          `(sys.lap-x86:mov64 :r8 :rax))
    (setf *r8-value* (list (gensym)))))

;;; TODO: bignums.
(defbuiltin (setf sys.int::memref-unsigned-byte-64) (new-value base offset)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 '(unsigned-byte 64)))
    (load-in-reg :rax base t)
    (fixnum-check :rax)
    (load-in-reg :rcx offset t)
    (fixnum-check :rcx)
    (load-in-r8 new-value t)
    (emit `(sys.lap-x86:mov64 :rdx :r8)
	  `(sys.lap-x86:test64 :rdx #b111)
	  `(sys.lap-x86:jnz ,type-error-label)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rax 3)
	  `(sys.lap-x86:sar64 :rdx 3)
	  ;; Write.
	  `(sys.lap-x86:mov64 (:rax :rcx) :rdx))
    *r8-value*))

(defbuiltin (setf sys.int::memref-t) (new-value base offset)
  (let ((type-error-label (gensym)))
    (load-in-reg :rax base t)
    (fixnum-check :rax)
    (load-in-reg :rcx offset t)
    (fixnum-check :rcx)
    (load-in-r8 new-value t)
    (emit ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rax 3)
	  ;; Write.
	  `(sys.lap-x86:mov64 (:rax :rcx) :r8))
    *r8-value*))

(defbuiltin sys.int::%simple-array-p (object)
  (let ((false-out (gensym))
        (out (gensym)))
    (load-in-reg :r8 object t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0111)
          `(sys.lap-x86:jne ,false-out)
          `(sys.lap-x86:mov8 :al (:simple-array-header :r8))
          `(sys.lap-x86:cmp8 :al ,(ash 23 1))
          `(sys.lap-x86:jnbe ,false-out)
          `(sys.lap-x86:mov64 :r8 t)
          `(sys.lap-x86:jmp ,out)
          false-out
          `(sys.lap-x86:mov64 :r8 nil)
          out)
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::%simple-array-length (array)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
		  (raise-type-error :r8 '(simple-array * (*))))
    (load-in-r8 array t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0111)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Ensure that it is a simple-array, not a struct or bignum or similar.
	  `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
	  `(sys.lap-x86:cmp8 :al ,(ash 23 1))
	  `(sys.lap-x86:jnbe ,type-error-label)
	  ;; Convert length to fixnum.
	  `(sys.lap-x86:shr64 :rax 5)
	  `(sys.lap-x86:and64 :rax -8)
	  `(sys.lap-x86:mov64 :r8 :rax))
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::%simple-array-type (array)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
		  (raise-type-error :r8 '(simple-array * (*))))
    (load-in-r8 array t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0111)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Ensure that it is a simple-array, not a struct or bignum or similar.
	  `(sys.lap-x86:mov8 :al (:simple-array-header :r8))
	  `(sys.lap-x86:cmp8 :al ,(ash 23 1))
	  `(sys.lap-x86:jnbe ,type-error-label)
	  ;; Convert tag to fixnum. Low bit is the GC bit, always clear.
          `(sys.lap-x86:and32 :eax #x000000FE)
	  `(sys.lap-x86:shl32 :eax 2)
	  `(sys.lap-x86:mov32 :r8d :eax))
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::binary-logior (x y)
  (when (constant-type-p y 'fixnum)
    (psetf x y
           y x))
  (cond ((constant-type-p x 'fixnum)
	 (load-in-r8 y t)
	 (fixnum-check :r8)
         (smash-r8)
	 ;; Small integers can be encoded directly into the instruction.
	 (if (typep (second x) '(signed-byte 28))
	     (emit `(sys.lap-x86:or64 :r8 ,(fixnum-to-raw (second x))))
	     (emit `(sys.lap-x86:mov64 :rax ,(fixnum-to-raw (second x)))
		   `(sys.lap-x86:or64 :r8 :rax)))
	 (setf *r8-value* (list (gensym))))
	(t (load-in-reg :r9 y t)
           (fixnum-check :r9)
           (load-in-reg :r8 x t)
           (fixnum-check :r8)
           (smash-r8)
           (emit `(sys.lap-x86:or64 :r8 :r9))
           (setf *r8-value* (list (gensym))))))

(defbuiltin sys.int::binary-logxor (x y)
  (when (constant-type-p y 'fixnum)
    (psetf x y
           y x))
  (cond ((constant-type-p x 'fixnum)
	 (load-in-r8 y t)
	 (fixnum-check :r8)
         (smash-r8)
	 ;; Small integers can be encoded directly into the instruction.
	 (if (typep (second x) '(signed-byte 28))
	     (emit `(sys.lap-x86:or64 :r8 ,(fixnum-to-raw (second x))))
	     (emit `(sys.lap-x86:mov64 :rax ,(fixnum-to-raw (second x)))
		   `(sys.lap-x86:or64 :r8 :rax)))
	 (setf *r8-value* (list (gensym))))
	(t (load-in-reg :r9 y t)
           (fixnum-check :r9)
           (load-in-reg :r8 x t)
           (fixnum-check :r8)
           (smash-r8)
           (emit `(sys.lap-x86:xor64 :r8 :r9))
           (setf *r8-value* (list (gensym))))))

(defbuiltin sys.int::binary-logand (x y)
  (when (constant-type-p y 'fixnum)
    (psetf x y
           y x))
  (cond ((constant-type-p x 'fixnum)
	 (load-in-r8 y t)
	 (fixnum-check :r8)
         (smash-r8)
	 ;; Small integers can be encoded directly into the instruction.
	 (if (typep (second x) '(signed-byte 28))
	     (emit `(sys.lap-x86:and64 :r8 ,(fixnum-to-raw (second x))))
	     (emit `(sys.lap-x86:mov64 :rax ,(fixnum-to-raw (second x)))
		   `(sys.lap-x86:and64 :r8 :rax)))
	 (setf *r8-value* (list (gensym))))
	(t (load-in-reg :r9 y t)
           (fixnum-check :r9)
           (load-in-reg :r8 x t)
           (fixnum-check :r8)
           (smash-r8)
           (emit `(sys.lap-x86:and64 :r8 :r9))
           (setf *r8-value* (list (gensym))))))

(defbuiltin lognot (integer)
  (load-in-reg :r8 integer t)
  (fixnum-check :r8)
  (smash-r8)
  (emit `(sys.lap-x86:xor64 :r8 -8))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::binary-+ (x y)
  (let ((ovfl (gensym)))
    (emit-trailer (ovfl)
      (when (constant-type-p x 'fixnum)
        (load-constant :r9 (second x)))
      (load-constant :r10 '+)
      (load-constant :r13 'sys.int::raise-overflow)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 3))
	    `(sys.lap-x86:call (:symbol-function :r13))
	    `(sys.lap-x86:ud2)))
    (when (constant-type-p y 'fixnum)
      (psetf x y
             y x))
    (cond ((constant-type-p x 'fixnum)
           (load-in-r8 y t)
           (fixnum-check :r8)
           (smash-r8)
           ;; Small integers can be encoded directly into the instruction.
           (if (typep (second x) '(signed-byte 28))
               (emit `(sys.lap-x86:add64 :r8 ,(fixnum-to-raw (second x))))
               (emit `(sys.lap-x86:mov64 :rax ,(fixnum-to-raw (second x)))
                     `(sys.lap-x86:add64 :r8 :rax)))
           (emit `(sys.lap-x86:jo ,ovfl))
           (setf *r8-value* (list (gensym))))
          (t (load-in-reg :r9 y t)
             (fixnum-check :r9)
             (load-in-reg :r8 x t)
             (fixnum-check :r8)
             (smash-r8)
             (emit `(sys.lap-x86:add64 :r8 :r9)
                   `(sys.lap-x86:jo ,ovfl))
             (setf *r8-value* (list (gensym)))))))

(defbuiltin sys.int::binary-- (x y)
  (let ((ovfl (gensym)))
    (emit-trailer (ovfl)
      (load-constant :r10 '-)
      (load-constant :r13 'sys.int::raise-overflow)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 3))
	    `(sys.lap-x86:call (:symbol-function :r13))
	    `(sys.lap-x86:ud2)))
    (cond ((and (constant-type-p x 'fixnum)
                (zerop (second x)))
           ;; Negate.
           (load-in-reg :r8 y t)
           (fixnum-check :r8)
           (smash-r8)
           (emit `(sys.lap-x86:neg64 :r8)
                 `(sys.lap-x86:jo ,ovfl)))
          (t (load-in-reg :r9 y t)
             (fixnum-check :r9)
             (load-in-reg :r8 x t)
             (fixnum-check :r8)
             (smash-r8)
             (emit `(sys.lap-x86:sub64 :r8 :r9)
                   `(sys.lap-x86:jo ,ovfl)))))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::binary-* (x y)
  (let ((ovfl (gensym)))
    (emit-trailer (ovfl)
      (load-constant :r10 '*)
      (load-constant :r13 'sys.int::raise-overflow)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 3))
	    `(sys.lap-x86:call (:symbol-function :r13))
	    `(sys.lap-x86:ud2)))
    (load-in-reg :r9 y t)
    (fixnum-check :r9)
    (load-in-reg :r8 x t)
    (fixnum-check :r8)
    (smash-r8)
    (emit `(sys.lap-x86:mov64 :rax :r8)
          ;; Convert RAX to raw integer.
          `(sys.lap-x86:sar64 :rax 3)
          `(sys.lap-x86:imul64 :r9)
          `(sys.lap-x86:jo ,ovfl)
          ;; R9 was not converted to a raw integer, so the result
          ;; was automatically converted to a fixnum.
          `(sys.lap-x86:mov64 :r8 :rax))
    (setf *r8-value* (list (gensym)))))

;; FIXME: check for /0
;; FIXME: default divisor to 1
(defbuiltin rem (number divisor)
  (load-in-reg :r8 divisor t)
  (fixnum-check :r8)
  (load-in-reg :r9 number t)
  (fixnum-check :r9)
  (smash-r8)
  (emit `(sys.lap-x86:mov64 :rax :r9)
        `(sys.lap-x86:cqo)
        `(sys.lap-x86:idiv64 :r8)
        ;; :rdx holds the remainder as a fixnum.
        `(sys.lap-x86:mov64 :r8 :rdx))
  (setf *r8-value* (list (gensym))))

;; FIXME: check for /0.
;; FIXME: default divisor to 1
(defbuiltin truncate (number divisor)
  (load-in-reg :r8 divisor t)
  (fixnum-check :r8)
  (load-in-reg :r9 number t)
  (fixnum-check :r9)
  (smash-r8)
  (emit `(sys.lap-x86:mov64 :rax :r9)
        `(sys.lap-x86:cqo)
        `(sys.lap-x86:idiv64 :r8)
        ;; :rax holds the dividend as a integer.
        ;; :rdx holds the remainder as a fixnum.
        ;; FIXME: Figure out what to do in the overflow case...
        `(sys.lap-x86:shl64 :rax 3)
        `(sys.lap-x86:mov64 :r8 :rax))
  (cond ((eql *for-value* :multiple)
         (emit `(sys.lap-x86:mov64 :r9 :rdx)
               `(sys.lap-x86:mov64 :rbx :lsp))
         (load-constant :rcx 2)
         :multiple)
        (t (setf *r8-value* (list (gensym))))))

(defbuiltin ash (integer count)
  (cond ((constant-type-p count 'fixnum)
         (setf count (second count))
         (load-in-reg :r8 integer t)
         (fixnum-check :r8)
         (cond ((minusp count)
                ;; Right shift.
                (setf count (- count))
                (smash-r8)
                (cond ((>= count 61)
                       ;; All bits shifted out.
                       (emit `(sys.lap-x86:cqo)
                             `(sys.lap-x86:and64 :rdx -8)
                             `(sys.lap-x86:mov64 :r8 :rdx)))
                      (t (emit `(sys.lap-x86:mov64 :rax :r8)
                               `(sys.lap-x86:sar64 :rax ,count)
                               `(sys.lap-x86:and64 :rax -8)
                               `(sys.lap-x86:mov64 :r8 :rax))))
                (setf *r8-value* (list (gensym))))
               ((plusp count)
                ;; Left shift.
                ;; Perform the shift one bit at a time so that overflow can be checked for.
                (let ((ovfl (gensym)))
                  (emit-trailer (ovfl)
                    (load-constant :r9 count)
                    (load-constant :r10 'ash)
                    (load-constant :r13 'sys.int::raise-overflow)
                    (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 3))
                          `(sys.lap-x86:call (:symbol-function :r13))
                          `(sys.lap-x86:ud2)))
                  (smash-r8)
                  (dotimes (i count)
                    (emit `(sys.lap-x86:shl64 :r8 1)
                          `(sys.lap-x86:jo ,ovfl)))
                  (setf *r8-value* (list (gensym)))))
               ((zerop count)
                ;; Type check only.
                integer)))
        (t (let ((done-label (gensym))
                 (shift-left (gensym))
                 (shift-right (gensym))
                 (sign-extend (gensym))
                 (ovfl (gensym)))
             (emit-trailer (ovfl)
                           (load-constant :r10 'ash)
                           (load-constant :r13 'sys.int::raise-overflow)
                           (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 3))
                                 `(sys.lap-x86:call (:symbol-function :r13))
                                 `(sys.lap-x86:ud2)))
             (load-in-reg :r9 count t)
             (fixnum-check :r9)
             (load-in-reg :r8 integer t)
             (smash-r8)
             (fixnum-check :r8)
             (emit `(sys.lap-x86:mov64 :rcx :r9)
                   `(sys.lap-x86:mov64 :rax :r8)
                   `(sys.lap-x86:cmp64 :rcx 0)
                   `(sys.lap-x86:jz ,done-label)
                   `(sys.lap-x86:jl ,shift-right)
                   ;; Left shift.
                   ;; Perform the shift one bit at a time so that overflow can be checked for.
                   `(sys.lap-x86:sar64 :rcx 3)
                   shift-left
                   `(sys.lap-x86:shl64 :rax 1)
                   `(sys.lap-x86:jo ,ovfl)
                   `(sys.lap-x86:sub64 :rcx 1)
                   `(sys.lap-x86:jnz ,shift-left)
                   `(sys.lap-x86:jmp ,done-label)
                   ;; x86 masks the shift count to 6 bits, test if all the bits were shifted out.
                   shift-right
                   `(sys.lap-x86:cmp64 :rcx ,(fixnum-to-raw -64))
                   `(sys.lap-x86:jle ,sign-extend)
                   `(sys.lap-x86:sar64 :rcx 3)
                   `(sys.lap-x86:neg64 :rcx)
                   `(sys.lap-x86:sar64 :rax :cl)
                   `(sys.lap-x86:and64 :rax -8)
                   `(sys.lap-x86:jmp ,done-label)
                   sign-extend
                   `(sys.lap-x86:cqo)
                   `(sys.lap-x86:and64 :rdx -8)
                   `(sys.lap-x86:mov64 :rax :rdx)
                   done-label
                   `(sys.lap-x86:mov64 :r8 :rax))
             (setf *r8-value* (list (gensym)))))))

(defbuiltin sys.int::binary-< (x y)
  (load-in-reg :r9 x t)
  (fixnum-check :r9)
  (load-in-r8 y t)
  (fixnum-check :r8)
  (emit `(sys.lap-x86:cmp64 :r9 :r8))
  (predicate-result :l))

(defbuiltin sys.int::binary-<= (x y)
  (load-in-reg :r9 x t)
  (fixnum-check :r9)
  (load-in-r8 y t)
  (fixnum-check :r8)
  (emit `(sys.lap-x86:cmp64 :r9 :r8))
  (predicate-result :le))

(defbuiltin sys.int::binary-> (x y)
  (load-in-reg :r9 x t)
  (fixnum-check :r9)
  (load-in-r8 y t)
  (fixnum-check :r8)
  (emit `(sys.lap-x86:cmp64 :r9 :r8))
  (predicate-result :g))

(defbuiltin sys.int::binary->= (x y)
  (load-in-reg :r9 x t)
  (fixnum-check :r9)
  (load-in-r8 y t)
  (fixnum-check :r8)
  (emit `(sys.lap-x86:cmp64 :r9 :r8))
  (predicate-result :ge))

(defbuiltin sys.int::binary-= (x y)
  (load-in-reg :r9 x t)
  (fixnum-check :r9)
  (load-in-r8 y t)
  (fixnum-check :r8)
  (emit `(sys.lap-x86:cmp64 :r9 :r8))
  (predicate-result :e))

(defbuiltin schar (string index)
  (let ((bound-error-label (gensym))
	(type-error-label (gensym))
	(base-string-label (gensym))
	(out-label (gensym)))
    (emit-trailer (bound-error-label)
      (load-constant :r13 'sys.int::raise-bound-error)
      (emit `(sys.lap-x86:mov64 :r9 :rax)
	    `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
	    `(sys.lap-x86:call (:symbol-function :r13))
	    `(sys.lap-x86:ud2)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'simple-string))
    (load-in-reg :rax index t)
    (fixnum-check :rax)
    (load-in-r8 string t)
    (smash-r8)
    (emit `(sys.lap-x86:mov64 :rdx :rax)
	  `(sys.lap-x86:sar64 :rdx 3)
	  `(sys.lap-x86:mov8 :cl :r8l)
	  `(sys.lap-x86:and8 :cl #b1111)
	  `(sys.lap-x86:cmp8 :cl #b0111)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Ensure that it is a simple-string.
	  `(sys.lap-x86:mov64 :rcx (:simple-array-header :r8))
	  `(sys.lap-x86:cmp8 :cl ,(ash 1 1))
	  `(sys.lap-x86:je ,base-string-label)
	  `(sys.lap-x86:cmp8 :cl ,(ash 2 1))
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; simple-string (not simple-base-string).
	  `(sys.lap-x86:shr64 :rcx 8)
	  `(sys.lap-x86:cmp64 :rdx :rcx)
	  `(sys.lap-x86:jae ,bound-error-label)
	  `(sys.lap-x86:mov32 :eax (:r8 1 (:rdx 4)))
	  `(sys.lap-x86:jmp ,out-label)
	  ;; simple-base-string.
	  base-string-label
	  `(sys.lap-x86:shr64 :rcx 8)
	  `(sys.lap-x86:cmp64 :rdx :rcx)
	  `(sys.lap-x86:jae ,bound-error-label)
	  `(sys.lap-x86:xor32 :eax :eax)
	  `(sys.lap-x86:mov8 :al (:r8 1 :rdx))
	  out-label
	  ;; Convert EAX to a real character.
	  `(sys.lap-x86:shl32 :eax 4)
	  `(sys.lap-x86:or32 :eax #b1010)
	  `(sys.lap-x86:mov32 :r8d :eax))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf schar) (value string index)
  (let ((bound-error-label (gensym))
	(type-error-label (gensym))
	(char-type-error-label (gensym))
	(base-char-type-error-label (gensym))
	(base-string-label (gensym))
	(out-label (gensym)))
    (emit-trailer (bound-error-label)
      (load-constant :r13 'sys.int::raise-bound-error)
      (emit `(sys.lap-x86:mov64 :r9 :rax)
	    `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
	    `(sys.lap-x86:call (:symbol-function :r13))
	    `(sys.lap-x86:ud2)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'simple-string))
    (emit-trailer (char-type-error-label)
      (raise-type-error :r8 'character))
    (emit-trailer (base-char-type-error-label)
      (raise-type-error :r8 'base-char))
    (load-in-reg :rax index t)
    (fixnum-check :rax)
    (load-in-reg :r9 string t)
    (load-in-reg :r8 value t)
    (emit `(sys.lap-x86:mov64 :rdx :rax)
	  `(sys.lap-x86:sar64 :rdx 3)
	  `(sys.lap-x86:mov8 :cl :r9l)
	  `(sys.lap-x86:and8 :cl #b1111)
	  `(sys.lap-x86:cmp8 :cl #b0111)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Ensure that it is a simple-string.
	  `(sys.lap-x86:mov64 :rcx (:simple-array-header :r9))
	  `(sys.lap-x86:cmp8 :cl ,(ash 1 1))
	  `(sys.lap-x86:je ,base-string-label)
	  `(sys.lap-x86:cmp8 :cl ,(ash 2 1))
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; simple-string (not simple-base-string).
	  `(sys.lap-x86:shr64 :rcx 8)
	  `(sys.lap-x86:cmp64 :rdx :rcx)
	  `(sys.lap-x86:jae ,bound-error-label)
          `(sys.lap-x86:mov8 :cl :r8l)
          `(sys.lap-x86:and8 :cl #b1111)
          `(sys.lap-x86:cmp8 :cl #b1010)
          `(sys.lap-x86:jne ,char-type-error-label)
          `(sys.lap-x86:mov32 :eax :r8d)
          `(sys.lap-x86:shr32 :eax 4)
	  `(sys.lap-x86:mov32 (:r9 1 (:rdx 4)) :eax)
	  `(sys.lap-x86:jmp ,out-label)
	  ;; simple-base-string.
	  base-string-label
	  `(sys.lap-x86:shr64 :rcx 8)
	  `(sys.lap-x86:cmp64 :rdx :rcx)
	  `(sys.lap-x86:jae ,bound-error-label)
	  `(sys.lap-x86:xor32 :eax :eax)
          `(sys.lap-x86:mov8 :cl :r8l)
          `(sys.lap-x86:and8 :cl #b1111)
          `(sys.lap-x86:cmp8 :cl #b1010)
          `(sys.lap-x86:jne ,base-char-type-error-label)
          `(sys.lap-x86:mov32 :eax :r8d)
          `(sys.lap-x86:shr32 :eax 4)
          `(sys.lap-x86:cmp32 :eax 256)
          `(sys.lap-x86:jae ,base-char-type-error-label)
	  `(sys.lap-x86:mov8 (:r9 1 :rdx) :al)
	  out-label)
    *r8-value*))

(define-tag-type-predicate symbolp #b0010)
(define-reader symbol-name symbol #b0010 :symbol-name)
(define-accessor symbol-package symbol #b0010 :symbol-package)

(defbuiltin symbol-value (symbol)
  (let ((unbound-error-label (gensym))
	(type-error-label (gensym)))
    (emit-trailer (unbound-error-label)
      (load-constant :r13 'sys.int::raise-unbound-error)
      (emit `(sys.lap-x86:mov64 :r8 :r9)
	    `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 1))
	    `(sys.lap-x86:call (:symbol-function :r13))
	    `(sys.lap-x86:ud2)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'symbol))
    (load-in-reg :r9 symbol t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r9l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0010)
	  `(sys.lap-x86:jne ,type-error-label)
	  `(sys.lap-x86:mov64 :r8 (:symbol-value :r9))
	  `(sys.lap-x86:cmp64 :r8 #b1110)
	  `(sys.lap-x86:je ,unbound-error-label))
    (setf *r8-value* (list (gensym)))))

;;; TODO: this should do some type checking.
(define-writer (setf symbol-value) symbol #b0010 :symbol-value)

(defbuiltin symbol-function (symbol)
  (let ((type-error-label (gensym))
	(undefined-function-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (emit-trailer (undefined-function-error-label)
      (load-constant :r13 'sys.int::raise-undefined-function)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 1))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r8 symbol t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0010)
	  `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:cmp64 (:symbol-function :r8) undefined-function)
	  `(sys.lap-x86:je ,undefined-function-error-label)
          `(sys.lap-x86:mov64 :r8 (:symbol-function :r8)))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf symbol-function) (value symbol)
  (let ((symbol-type-error-label (gensym))
	(function-type-error-label (gensym)))
    (emit-trailer (symbol-type-error-label)
      (raise-type-error :r9 'symbol))
    (emit-trailer (function-type-error-label)
      (raise-type-error :r8 'function))
    (load-in-reg :r9 symbol t)
    (load-in-r8 value t)
    (emit `(sys.lap-x86:mov8 :al :r9l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0010)
	  `(sys.lap-x86:jne ,symbol-type-error-label)
	  `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b1100)
	  `(sys.lap-x86:jne ,function-type-error-label)
	  `(sys.lap-x86:mov64 (:symbol-function :r9) :r8))
    *r8-value*))

(define-reader symbol-plist symbol #b0010 :symbol-plist)

;; TODO: type checking, value should be a fixnum.
(define-accessor sys.int::%symbol-flags symbol #b0010 :symbol-flags)

(defbuiltin boundp (symbol)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (load-in-reg :r8 symbol t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0010)
	  `(sys.lap-x86:jne ,type-error-label)
	  `(sys.lap-x86:cmp64 (:symbol-value :r8) #b1110))
    (predicate-result :ne)))

(defbuiltin makunbound (symbol)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (load-in-reg :r8 symbol t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0010)
	  `(sys.lap-x86:jne ,type-error-label)
	  `(sys.lap-x86:mov64 (:symbol-value :r8) #b1110))
    *r8-value*))

;;; FBOUNDP but just for symbols.
(defbuiltin sys.int::%fboundp (symbol)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (load-in-reg :r8 symbol t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0010)
	  `(sys.lap-x86:jne ,type-error-label)
	  `(sys.lap-x86:cmp64 (:symbol-function :r8) undefined-function))
    (predicate-result :ne)))

;;; FMAKUNBOUND but just for symbols.
(defbuiltin sys.int::%fmakunbound (symbol)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (load-in-reg :r8 symbol t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b0010)
	  `(sys.lap-x86:jne ,type-error-label)
	  `(sys.lap-x86:mov64 (:symbol-function :r8) undefined-function))
    *r8-value*))

(define-tag-type-predicate consp #b0001)

(defbuiltin car (list)
  (let ((type-error-label (gensym))
        (out-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'list))
    (load-in-reg :r8 list t)
    (smash-r8)
    (emit `(sys.lap-x86:cmp64 :r8 nil)
          `(sys.lap-x86:je ,out-label)
          `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0001)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :r8 (:car :r8))
          out-label)
    (setf *r8-value* (list (gensym)))))

(defbuiltin cdr (list)
  (let ((type-error-label (gensym))
        (out-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'list))
    (load-in-reg :r8 list t)
    (smash-r8)
    (emit `(sys.lap-x86:cmp64 :r8 nil)
          `(sys.lap-x86:je ,out-label)
          `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0001)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :r8 (:cdr :r8))
          out-label)
    (setf *r8-value* (list (gensym)))))

(define-writer (setf car) cons #b0001 :car)
(define-writer (setf cdr) cons #b0001 :cdr)

(define-tag-type-predicate sys.int::%array-header-p #b0011)
(define-accessor sys.int::%array-header-dimensions
    sys.int::%array-header #b0011 :array-header-dimensions)
(define-accessor sys.int::%array-header-fill-pointer
    sys.int::%array-header #b0011 :array-header-fill-pointer)
(define-accessor sys.int::%array-header-info
    sys.int::%array-header #b0011 :array-header-info)
(define-accessor sys.int::%array-header-storage
    sys.int::%array-header #b0011 :array-header-storage)

(defbuiltin null (object)
  (load-in-reg :r8 object t)
  (emit `(sys.lap-x86:cmp64 :r8 nil))
  (predicate-result :e))

(defbuiltin not (object)
  (load-in-reg :r8 object t)
  (emit `(sys.lap-x86:cmp64 :r8 nil))
  (predicate-result :e))

(defbuiltin eq (x y)
  (load-in-reg :r9 y t)
  (load-in-reg :r8 x t)
  (emit `(sys.lap-x86:cmp64 :r8 :r9))
  (predicate-result :e))

(defbuiltin eql (x y)
  (load-in-reg :r9 y t)
  (load-in-reg :r8 x t)
  (emit `(sys.lap-x86:cmp64 :r8 :r9))
  (predicate-result :e))

(defbuiltin system:io-port/8 (port)
  (smash-r8)
  (emit `(sys.lap-x86:xor32 :eax :eax))
  (cond ((and (consp port)
              (eql (first port) 'quote)
              (<= 0 (second port) 255))
         (smash-r8)
         (setf *load-list* (delete port *load-list*))
         (emit `(sys.lap-x86:in8 ,(second port))))
        (t (let ((type-error-label (gensym)))
             (emit-trailer (type-error-label)
               (raise-type-error :r8 '(unsigned-byte 16)))
             (load-in-r8 port t)
             (emit `(sys.lap-x86:test64 :r8 #b111)
                   `(sys.lap-x86:jnz ,type-error-label)
                   `(sys.lap-x86:cmp64 :r8 ,(* #x10000 8))
                   `(sys.lap-x86:jae ,type-error-label)
                   `(sys.lap-x86:mov64 :rdx :r8)
                   ;; Convert to a raw integer.
                   `(sys.lap-x86:sar32 :edx 3)
                   `(sys.lap-x86:in8 :dx)))))
  (emit `(sys.lap-x86:shl32 :eax 3)
        `(sys.lap-x86:mov32 :r8d :eax))
  (setf *r8-value* (list (gensym))))

(defbuiltin (setf system:io-port/8) (value port)
  (load-in-r8 value t)
  (let ((value-type-error-label (gensym)))
    (emit-trailer (value-type-error-label)
      (raise-type-error :r8 '(unsigned-byte 8)))
    (emit `(sys.lap-x86:test64 :r8 #b111)
          `(sys.lap-x86:jnz ,value-type-error-label)
          `(sys.lap-x86:cmp64 :r8 ,(* #x100 8))
          `(sys.lap-x86:jae ,value-type-error-label)
          `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:sar32 :eax 3))
    (cond ((and (consp port)
                (eql (first port) 'quote)
                (<= 0 (second port) 255))
           (smash-r8)
           (setf *load-list* (delete port *load-list*))
           (emit `(sys.lap-x86:out8 ,(second port))))
          (t (let ((type-error-label (gensym)))
               (emit-trailer (type-error-label)
                             (raise-type-error :r9 '(unsigned-byte 16)))
               (load-in-reg :r9 port t)
               (emit `(sys.lap-x86:test64 :r9 #b111)
                     `(sys.lap-x86:jnz ,type-error-label)
                     `(sys.lap-x86:cmp64 :r9 ,(* #x10000 8))
                     `(sys.lap-x86:jae ,type-error-label)
                     `(sys.lap-x86:mov64 :rdx :r9)
                     ;; Convert to a raw integer.
                     `(sys.lap-x86:sar32 :edx 3)
                     `(sys.lap-x86:out8 :dx)))))
    value))

(defbuiltin svref (simple-vector index)
  (let ((type-error-label (gensym))
        (bounds-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'simple-vector))
    (emit-trailer (bounds-error-label)
      (load-constant :r13 'sys.int::raise-bounds-error)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r8 simple-vector t)
    (smash-r8)
    (load-in-reg :r9 index t)
    (fixnum-check :r9)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0111)
          `(sys.lap-x86:jne ,type-error-label)
          ;; Load header word.
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
          ;; Check array type.
          `(sys.lap-x86:test8 :al :al)
          `(sys.lap-x86:jnz ,type-error-label)
          ;; Check bounds.
          `(sys.lap-x86:mov64 :rcx :r9)
          `(sys.lap-x86:shr64 :rcx 3)
          `(sys.lap-x86:shr64 :rax 8)
          `(sys.lap-x86:cmp64 :rcx :rax)
          `(sys.lap-x86:jae ,bounds-error-label)
          ;; Load!
          `(sys.lap-x86:mov64 :r8 (:r8 1 (:rcx 8))))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf svref) (value simple-vector index)
  (let ((type-error-label (gensym))
        (bounds-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'simple-vector))
    (emit-trailer (bounds-error-label)
      (load-constant :r13 'sys.int::raise-bounds-error)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r8 value t)
    (load-in-reg :r9 simple-vector t)
    (load-in-reg :r10 index t)
    (fixnum-check :r10)
    (emit `(sys.lap-x86:mov8 :al :r9l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0111)
          `(sys.lap-x86:jne ,type-error-label)
          ;; Load header word.
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r9))
          ;; Check array type.
          `(sys.lap-x86:test8 :al :al)
          `(sys.lap-x86:jnz ,type-error-label)
          ;; Check bounds.
          `(sys.lap-x86:mov64 :rcx :r10)
          `(sys.lap-x86:shr64 :rcx 3)
          `(sys.lap-x86:shr64 :rax 8)
          `(sys.lap-x86:cmp64 :rcx :rax)
          `(sys.lap-x86:jae ,bounds-error-label)
          ;; Store!
          `(sys.lap-x86:mov64 (:r9 1 (:rcx 8)) :r8))
    (setf *r8-value* (list (gensym)))))

(define-tag-type-predicate characterp #b1010)

(defbuiltin system.internals::read-frame-pointer ()
  (smash-r8)
  (emit `(sys.lap-x86:mov64 :rax :cfp)
        `(sys.lap-x86:shl64 :rax 3)
        `(sys.lap-x86:mov64 :r8 :rax))
  (setf *r8-value* (list (gensym))))

(defbuiltin system.internals::structure-object-p (object)
  (let ((out (gensym)))
    (load-in-reg :r9 object t)
    (smash-r8)
    ;; Check tag.
    (emit `(sys.lap-x86:mov64 :r8 nil)
          `(sys.lap-x86:mov8 :al :r9l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0111)
          `(sys.lap-x86:jne ,out)
          `(sys.lap-x86:mov8 :al (:simple-array-header :r9))
          `(sys.lap-x86:cmp8 :al ,(ash 31 1))
          `(sys.lap-x86:mov64 :r9 t)
          `(sys.lap-x86:cmov64e :r8 :r9)
          out)
    (setf *r8-value* (list (gensym)))))

(defbuiltin system.internals::%struct-slot (object slot)
  (let ((type-error-label (gensym))
        (bounds-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'structure-object))
    (emit-trailer (bounds-error-label)
      (load-constant :r13 'sys.int::raise-bounds-error)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r9 slot t)
    (fixnum-check :r9)
    (load-in-reg :r8 object t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0111)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
          `(sys.lap-x86:cmp8 :al ,(ash 31 1))
          `(sys.lap-x86:jne ,type-error-label)
          ;; Convert size and slot number to integers.
          `(sys.lap-x86:shr64 :rax 8)
          `(sys.lap-x86:mov64 :rcx :r9)
          `(sys.lap-x86:shr64 :rcx 3)
          ;; Check bounds.
          `(sys.lap-x86:cmp64 :rcx :rax)
          `(sys.lap-x86:jae ,bounds-error-label)
          ;; Load.
          `(sys.lap-x86:mov64 :r8 (:r8 1 (:rcx 8))))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf system.internals::%struct-slot) (value object slot)
  (let ((type-error-label (gensym))
        (bounds-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'structure-object))
    (emit-trailer (bounds-error-label)
      (load-constant :r13 'sys.int::raise-bounds-error)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r10 slot t)
    (fixnum-check :r10)
    (load-in-reg :r9 object t)
    (load-in-reg :r8 value t)
    (emit `(sys.lap-x86:mov8 :al :r9l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0111)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r9))
          `(sys.lap-x86:cmp8 :al ,(ash 31 1))
          `(sys.lap-x86:jne ,type-error-label)
          ;; Convert size and slot number to integers.
          `(sys.lap-x86:shr64 :rax 8)
          `(sys.lap-x86:mov64 :rcx :r10)
          `(sys.lap-x86:shr64 :rcx 3)
          ;; Check bounds.
          `(sys.lap-x86:cmp64 :rcx :rax)
          `(sys.lap-x86:jae ,bounds-error-label)
          ;; Store.
          `(sys.lap-x86:mov64 (:r9 1 (:rcx 8)) :r8))
    *r8-value*))

(defbuiltin char-code (char)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
		  (raise-type-error :r8 'character))
    (load-in-r8 char t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b1010)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Mask away the non-code bits.
	  `(sys.lap-x86:and32 :r8d #x01fffff0)
	  ;; Shift to fixnum.
	  `(sys.lap-x86:shr32 :r8d 1))
    (setf *r8-value* (list (gensym)))))

(defbuiltin system:char-bits (character)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'character))
    (load-in-r8 character t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b1010)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:and32 :r8d #x1e000000)
          `(sys.lap-x86:shr32 :r8d 22))
    (setf *r8-value* (list (gensym)))))

(defbuiltin char-int (char)
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
		  (raise-type-error :r8 'character))
    (load-in-r8 char t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al #b1010)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Mask away the tag bits.
	  `(sys.lap-x86:and32 :r8d -16)
	  ;; Shift to fixnum.
	  `(sys.lap-x86:shr32 :r8d 1))
    (setf *r8-value* (list (gensym)))))

(defbuiltin system:fixnump (object)
  (load-in-reg :r8 object t)
  (emit `(sys.lap-x86:test8 :r8l #b0111))
  (predicate-result :z))

(defbuiltin sys.int::%%assemble-value (address tag)
  (load-in-reg :rax tag t)
  (load-in-reg :r8 address t)
  (smash-r8)
  (emit `(sys.lap-x86:shr32 :eax 3)
        `(sys.lap-x86:shr64 :r8 3)
        `(sys.lap-x86:or64 :r8 :rax))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::lisp-object-address (value)
  (load-in-reg :r8 value t)
  (smash-r8)
  ;; Convert to fixnum.
  (emit `(sys.lap-x86:shl64 :r8 3))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::%make-symbol (address name)
  (load-in-reg :r9 name t)
  (load-in-reg :r8 address t)
  (smash-r8)
  (emit `(sys.lap-x86:shr64 :r8 3)
        `(sys.lap-x86:or64 :r8 #b0010)
        `(sys.lap-x86:mov64 (:symbol-name :r8) :r9)
        `(sys.lap-x86:mov64 (:symbol-package :r8) nil)
        `(sys.lap-x86:mov64 (:symbol-value :r8) #b1110)
        `(sys.lap-x86:mov64 (:symbol-function :r8) undefined-function)
        `(sys.lap-x86:mov64 (:symbol-plist :r8) nil)
        `(sys.lap-x86:mov64 (:symbol-flags :r8) 0))
  (setf *r8-value* (list (gensym))))

(defbuiltin apply (function arguments)
  (let ((type-error-label (gensym))
        (fn-type-error-label (gensym))
        (loop-test (gensym))
        (loop-head (gensym))
        (rev-loop-test (gensym))
        (rev-loop-head (gensym))
        (arg-done (gensym))
        (function-label (gensym))
        (out-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'list))
    (emit-trailer (fn-type-error-label)
      (raise-type-error :r13 '(or function symbol)))
    (load-in-reg :r13 function t)
    (load-in-reg :r8 arguments t)
    (smash-r8)
    ;; Unpack the argument list on the stack in reverse and count
    ;; the number of arguments.
    (emit `(sys.lap-x86:xor32 :ecx :ecx)
          `(sys.lap-x86:jmp ,loop-test)
          loop-head
          `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b0001)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 (:lsp -8) nil)
          `(sys.lap-x86:sub64 :lsp 8)
          `(sys.lap-x86:mov64 :r9 (:car :r8))
          `(sys.lap-x86:mov64 (:lsp) :r9)
          `(sys.lap-x86:mov64 :r8 (:cdr :r8))
          `(sys.lap-x86:add64 :rcx 8)
          loop-test
          `(sys.lap-x86:cmp64 :r8 nil)
          `(sys.lap-x86:jne ,loop-head)
          ;; Arguments are now on the stack, in reverse and RCX holds the list length.
          ;; Reverse them.
          `(sys.lap-x86:lea64 :rax (:rcx -8))
          `(sys.lap-x86:xor32 :edx :edx)
          `(sys.lap-x86:jmp ,rev-loop-test)
          rev-loop-head
          `(sys.lap-x86:mov64 :r9 (:lsp :rax))
          `(sys.lap-x86:mov64 :r10 (:lsp :rdx))
          `(sys.lap-x86:mov64 (:lsp :rax) :r10)
          `(sys.lap-x86:mov64 (:lsp :rdx) :r9)
          `(sys.lap-x86:add64 :rdx 8)
          `(sys.lap-x86:sub64 :rax 8)
          rev-loop-test
          `(sys.lap-x86:cmp64 :rax :rdx)
          `(sys.lap-x86:jg ,rev-loop-head)
          ;; Put arguments into registers.
          `(sys.lap-x86:test64 :rcx :rcx)
          `(sys.lap-x86:jz ,arg-done)
          `(sys.lap-x86:mov64 :r8 (:lsp))
          `(sys.lap-x86:add64 :lsp 8)
          `(sys.lap-x86:cmp64 :rcx ,(fixnum-to-raw 1))
          `(sys.lap-x86:je ,arg-done)
          `(sys.lap-x86:mov64 :r9 (:lsp))
          `(sys.lap-x86:add64 :lsp 8)
          `(sys.lap-x86:cmp64 :rcx ,(fixnum-to-raw 2))
          `(sys.lap-x86:je ,arg-done)
          `(sys.lap-x86:mov64 :r10 (:lsp))
          `(sys.lap-x86:add64 :lsp 8)
          `(sys.lap-x86:cmp64 :rcx ,(fixnum-to-raw 3))
          `(sys.lap-x86:je ,arg-done)
          `(sys.lap-x86:mov64 :r11 (:lsp))
          `(sys.lap-x86:add64 :lsp 8)
          `(sys.lap-x86:cmp64 :rcx ,(fixnum-to-raw 4))
          `(sys.lap-x86:je ,arg-done)
          `(sys.lap-x86:mov64 :r12 (:lsp))
          `(sys.lap-x86:add64 :lsp 8)
          arg-done
          ;; Finally, do the call.
          `(sys.lap-x86:mov8 :al :r13l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al #b1100)
          `(sys.lap-x86:je ,function-label)
          `(sys.lap-x86:cmp8 :al #b0010)
          `(sys.lap-x86:jne ,fn-type-error-label)
          `(sys.lap-x86:call (:symbol-function :r13))
          `(sys.lap-x86:jmp ,out-label)
          function-label
          `(sys.lap-x86:call :r13)
          out-label)
    (cond ((eql *for-value* :multiple)
           :multiple)
          (t (emit `(sys.lap-x86:mov64 :lsp :rbx))
             (setf *r8-value* (list (gensym)))))))

(define-tag-type-predicate sys.int::std-instance-p #b0100)
(define-accessor sys.int::std-instance-class sys.int::std-instance #b0100 :std-instance-class)
(define-accessor sys.int::std-instance-slots sys.int::std-instance #b0100 :std-instance-slots)

(define-tag-type-predicate functionp #b1100)
