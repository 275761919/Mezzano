;;;; Functions which are built in to the compiler and have custom code generators.

(in-package :sys.c)

(defparameter *builtins* (make-hash-table))

(defmacro defbuiltin (name lambda-list (&optional (emit-function t) suppress-binding-stack-check) &body body)
  `(progn (setf (gethash (sys.int::function-symbol ',name) *builtins*)
		(list ',lambda-list
		      (lambda ,lambda-list
			(declare (system:lambda-name ,name)
                                 ,@(when suppress-binding-stack-check
                                     '((sys.int::suppress-ssp-checking))))
			,@body)
                      ',emit-function
                      ',name
                      ',suppress-binding-stack-check))
	  ',name))

(defmacro define-reader (name type tag slot)
  `(defbuiltin ,name (object) ()
     (let ((type-error-label (gensym)))
       (emit-trailer (type-error-label)
         (raise-type-error :r8 ',type))
       (load-in-reg :r8 object t)
       (smash-r8)
       (emit `(sys.lap-x86:mov8 :al :r8l)
             `(sys.lap-x86:and8 :al #b1111)
             `(sys.lap-x86:cmp8 :al ,,tag)
             `(sys.lap-x86:jne ,type-error-label)
             `(sys.lap-x86:mov64 :r8 (,',slot :r8)))
       (setf *r8-value* (list (gensym))))))

(defmacro define-writer (name type tag slot)
  `(defbuiltin ,name (value object) ()
     (let ((type-error-label (gensym)))
       (emit-trailer (type-error-label)
         (raise-type-error :r9 ',type))
       (load-in-reg :r9 object t)
       (load-in-reg :r8 value t)
       (emit `(sys.lap-x86:mov8 :al :r9l)
             `(sys.lap-x86:and8 :al #b1111)
             `(sys.lap-x86:cmp8 :al ,,tag)
             `(sys.lap-x86:jne ,type-error-label)
             `(sys.lap-x86:mov64 (,',slot :r9) :r8))
       *r8-value*)))

(defmacro define-accessor (name type tag slot)
  `(progn (define-reader ,name ,type ,tag ,slot)
          (define-writer (setf ,name) ,type ,tag ,slot)))

(defmacro define-tag-type-predicate (name tag)
  `(defbuiltin ,name (object) ()
     (load-in-reg :r8 object t)
     (emit `(sys.lap-x86:mov8 :al :r8l)
           `(sys.lap-x86:and8 :al #b1111)
           `(sys.lap-x86:cmp8 :al ,,tag))
     (predicate-result :e)))

(defmacro define-array-like-predicate (name array-type)
  `(defbuiltin ,name (object) ()
     (let ((out (gensym)))
       (load-in-reg :r9 object t)
       (smash-r8)
       ;; Check tag.
       (emit `(sys.lap-x86:mov64 :r8 nil)
             `(sys.lap-x86:mov8 :al :r9l)
             `(sys.lap-x86:and8 :al #b1111)
             `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
             `(sys.lap-x86:jne ,out)
             `(sys.lap-x86:mov8 :al (:simple-array-header :r9))
             `(sys.lap-x86:cmp8 :al ,(ash ,array-type sys.int::+array-type-shift+))
             `(sys.lap-x86:mov64 :r9 t)
             `(sys.lap-x86:cmov64e :r8 :r9)
             out)
       (setf *r8-value* (list (gensym))))))

(defmacro define-array-like-reader (name type-name array-type slot)
  `(defbuiltin ,name (object) ()
     (let ((type-error-label (gensym)))
       (emit-trailer (type-error-label)
         (raise-type-error :r8 ',type-name))
       (load-in-reg :r8 object t)
       (smash-r8)
       (emit `(sys.lap-x86:mov8 :al :r8l)
             `(sys.lap-x86:and8 :al #b1111)
             `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
             `(sys.lap-x86:jne ,type-error-label)
             `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
             `(sys.lap-x86:cmp8 :al ,(ash ,array-type sys.int::+array-type-shift+))
             `(sys.lap-x86:jne ,type-error-label)
             ;; Load.
             `(sys.lap-x86:mov64 :r8 (:r8 ,(+ 1 (* ,slot 8))))))
    (setf *r8-value* (list (gensym)))))

(defmacro define-array-like-writer (name type-name array-type slot)
  `(defbuiltin ,name (value object) ()
     (let ((type-error-label (gensym)))
       (emit-trailer (type-error-label)
         (raise-type-error :r9 ',type-name))
       (load-in-reg :r9 object t)
       (load-in-reg :r8 value t)
       (emit `(sys.lap-x86:mov8 :al :r9l)
             `(sys.lap-x86:and8 :al #b1111)
             `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
             `(sys.lap-x86:jne ,type-error-label)
             `(sys.lap-x86:mov64 :rax (:simple-array-header :r9))
             `(sys.lap-x86:cmp8 :al ,(ash ,array-type sys.int::+array-type-shift+))
             `(sys.lap-x86:jne ,type-error-label)
             ;; Store.
             `(sys.lap-x86:mov64 (:r9 ,(+ 1 (* ,slot 8))) :r8)))
    *r8-value*))

(defmacro define-array-like-accessor (name type-name array-type slot)
  `(progn (define-array-like-reader ,name ,type-name ,array-type ,slot)
          (define-array-like-writer (setf ,name) ,type-name ,array-type ,slot)))

;; Produce an alist of symbol names and their associated functions.
(defun generate-builtin-functions ()
  (let ((functions '()))
    (maphash (lambda (symbol info)
               (declare (ignore symbol))
               (when (third info)
                 (push (list (fourth info)
                             `(lambda ,(first info)
                                (declare (system:lambda-name ,(fourth info)))
                                (funcall #',(fourth info) ,@(first info))))
                       functions)))
             *builtins*)
    functions))

(defun match-builtin (symbol arg-count)
  (let ((x (gethash symbol *builtins*)))
    (when (and x (eql (length (first x)) arg-count))
      (second x))))

(defun quoted-constant-p (tag)
  (and (consp tag)
       (consp (cdr tag))
       (null (cddr tag))
       (eql (first tag) 'quote)))

(defun constant-type-p (tag type)
  (and (quoted-constant-p tag)
       (typep (second tag) type)))

(defmacro define-u-b-memref (name shift read-op write-op register size)
  `(progn
     (defbuiltin ,name (base offset) ()
       (load-in-reg :r9 base t)
       (fixnum-check :r9)
       (emit `(sys.lap-x86:mov64 :rdx :r9))
       (load-in-reg :r9 offset t)
       (fixnum-check :r9)
       (emit `(sys.lap-x86:mov64 :rcx :r9))
       (smash-r8)
       ;; BASE to raw integer.
       (emit '(sys.lap-x86:sar64 :rdx 3))
       ;; Convert OFFSET to a scaled raw integer & read it.
       (emit '(sys.lap-x86:sar64 :rcx ,shift)
             '(,read-op :eax (:rdx :rcx)))
       ;; Convert to fixnum.
       (emit '(sys.lap-x86:lea64 :r8 ((:rax 8))))
       (setf *r8-value* (list (gensym))))
     (defbuiltin (setf ,name) (new-value base offset) ()
       (let ((type-error-label (gensym)))
         (emit-trailer (type-error-label)
           (raise-type-error :r8 '(unsigned-byte ,size)))
         (load-in-reg :r9 base t)
         (fixnum-check :r9)
         (emit `(sys.lap-x86:mov64 :rdx :r9))
         (load-in-reg :r9 offset t)
         (fixnum-check :r9)
         (emit `(sys.lap-x86:mov64 :rcx :r9))
         (load-in-r8 new-value t)
         (emit '(sys.lap-x86:mov64 :rax :r8)
               '(sys.lap-x86:test64 :rax #b111)
               `(sys.lap-x86:jnz ,type-error-label)
               '(sys.lap-x86:mov64 :rsi ,(fixnum-to-raw (ash 1 size)))
               '(sys.lap-x86:cmp64 :rax :rsi)
               `(sys.lap-x86:jae ,type-error-label)
               ;; Convert to raw integers, leaving offset correctly scaled.
               '(sys.lap-x86:sar64 :rdx 3)
               '(sys.lap-x86:sar64 :rcx ,shift)
               '(sys.lap-x86:sar64 :rax 3)
               ;; Write.
               '(,write-op (:rdx :rcx) ,register))
         *r8-value*))))

(define-u-b-memref sys.int::memref-unsigned-byte-8 3 sys.lap-x86:movzx8 sys.lap-x86:mov8 :al 8)
(define-u-b-memref sys.int::memref-unsigned-byte-16 2 sys.lap-x86:movzx16 sys.lap-x86:mov16 :ax 16)
(define-u-b-memref sys.int::memref-unsigned-byte-32 1 sys.lap-x86:mov32 sys.lap-x86:mov32 :eax 32)

(defbuiltin sys.int::memref-unsigned-byte-64 (base offset) ()
  (let ((overflow-error-label (gensym))
        (ok-label (gensym))
        (resume (gensym)))
    (emit-trailer (overflow-error-label)
      (emit `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
            `(sys.lap-x86:xor32 :edx :edx)
            ;; CL holds the high 4 bits of the word.
            ;; If bit 3 is non-zero, then the sign bit of word was set & a 128-bit bignum
            ;; is required.
            `(sys.lap-x86:test8 :cl #b1000)
            `(sys.lap-x86:cmov64nz :r13 (:constant sys.int::%%make-bignum-128-rdx-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r8 base t)
    (fixnum-check :r8)
    (load-in-reg :r9 offset t)
    (fixnum-check :r9)
    (smash-r8)
    (emit `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:mov64 :rcx :r9)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rax 3)
          ;; Read.
          `(sys.lap-x86:mov64 :rax (:rax :rcx))
          ;; Check for overflow. Top 4 bits must be all 0.
          `(sys.lap-x86:mov64 :rcx :rax)
          `(sys.lap-x86:sar64 :rcx 60)
          `(sys.lap-x86:jnz ,overflow-error-label)
          ok-label
          ;; Convert to fixnum.
          `(sys.lap-x86:shl64 :rax 3)
          `(sys.lap-x86:mov64 :r8 :rax)
          resume)
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf sys.int::memref-unsigned-byte-64) (new-value base offset) ()
  (let ((type-error-label (gensym))
        (bignum-path (gensym "mr-ub64-bignum"))
        (len-2-bignum (gensym "mr-ub64-len-2-bignum"))
        (value-extracted (gensym "mr-ub64-value-extracted")))
    (emit-trailer (bignum-path)
      ;; Check for bignumness.
      (emit `(sys.lap-x86:and8 :dl #b1111)
            `(sys.lap-x86:cmp8 :dl #.sys.int::+tag-array-like+)
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:mov64 :rdx (:simple-array-header :r8))
            `(sys.lap-x86:cmp8 :dl #.(ash sys.int::+array-type-bignum+ 3))
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:shr64 :rdx 8)
            ;; RDX = bignum length.
            `(sys.lap-x86:cmp64 :rdx 2)
            `(sys.lap-x86:je ,len-2-bignum)
            ;; Not length 2, must be length 1.
            `(sys.lap-x86:cmp64 :rdx 1)
            `(sys.lap-x86:jne ,type-error-label)
            ;; And the sign bit must be clear.
            `(sys.lap-x86:mov64 :rdx (:r8 #.(+ (- sys.int::+tag-array-like+) 8)))
            `(sys.lap-x86:shl64 :rdx 1)
            `(sys.lap-x86:jc ,type-error-label)
            `(sys.lap-x86:rcr64 :rdx 1)
            `(sys.lap-x86:jmp ,value-extracted)
            len-2-bignum
            ;; Length 2 bignums must have the high word be 0.
            `(sys.lap-x86:cmp64 (:r8 #.(+ (- sys.int::+tag-array-like+) 16)) 0)
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:mov64 :rdx (:r8 #.(+ (- sys.int::+tag-array-like+) 8)))
            `(sys.lap-x86:jmp ,value-extracted)
            type-error-label)
      (raise-type-error :r8 '(unsigned-byte 64)))
    (load-in-reg :r9 base t)
    (fixnum-check :r9)
    (emit `(sys.lap-x86:mov64 :rax :r9))
    (load-in-reg :r9 offset t)
    (fixnum-check :r9)
    (emit `(sys.lap-x86:mov64 :rcx :r9))
    (load-in-r8 new-value t)
    (emit `(sys.lap-x86:sar64 :rax 3)
          `(sys.lap-x86:mov64 :rdx :r8)
	  `(sys.lap-x86:test64 :rdx #b111)
	  `(sys.lap-x86:jnz ,bignum-path)
          `(sys.lap-x86:cmp64 :r8 0)
          `(sys.lap-x86:jl ,type-error-label)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rdx 3)
          value-extracted
	  ;; Write.
	  `(sys.lap-x86:mov64 (:rax :rcx) :rdx))
    *r8-value*))

(defmacro define-s-b-memref (name shift read-op write-op register size)
  `(progn
     (defbuiltin ,name (base offset) ()
       (load-in-reg :r9 base t)
       (fixnum-check :r9)
       (emit `(sys.lap-x86:mov64 :rdx :r9))
       (load-in-reg :r9 offset t)
       (fixnum-check :r9)
       (emit `(sys.lap-x86:mov64 :rcx :r9))
       (smash-r8)
       ;; BASE to raw integer.
       (emit '(sys.lap-x86:sar64 :rdx 3))
       ;; Convert OFFSET to a scaled raw integer & read it.
       (emit '(sys.lap-x86:sar64 :rcx ,shift)
             '(,read-op :rax (:rdx :rcx)))
       ;; Convert to fixnum.
       (emit '(sys.lap-x86:lea64 :r8 ((:rax 8))))
       (setf *r8-value* (list (gensym))))
     (defbuiltin (setf ,name) (new-value base offset) ()
       (let ((type-error-label (gensym)))
         (emit-trailer (type-error-label)
           (raise-type-error :r8 '(signed-byte ,size)))
         (load-in-reg :r9 base t)
         (fixnum-check :r9)
         (emit `(sys.lap-x86:mov64 :rdx :r9))
         (load-in-reg :r9 offset t)
         (fixnum-check :r9)
         (emit `(sys.lap-x86:mov64 :rcx :r9))
         (load-in-r8 new-value t)
         (emit '(sys.lap-x86:mov64 :rax :r8)
               '(sys.lap-x86:test64 :rax #b111)
               `(sys.lap-x86:jnz ,type-error-label)
               '(sys.lap-x86:sar64 :rax 3)
               '(sys.lap-x86:mov64 :rsi :rax)
               '(sys.lap-x86:mov64 :rdi ,(ash 1 (1- size)))
               '(sys.lap-x86:cmp64 :rsi :rdi)
               `(sys.lap-x86:jge ,type-error-label)
               '(sys.lap-x86:mov64 :rdi ,(- (ash 1 (1- size))))
               '(sys.lap-x86:cmp64 :rsi :rdi)
               `(sys.lap-x86:jl ,type-error-label)
               ;; Convert to raw integers, leaving offset correctly scaled.
               '(sys.lap-x86:sar64 :rdx 3)
               '(sys.lap-x86:sar64 :rcx ,shift)
               ;; Write.
               '(,write-op (:rdx :rcx) ,register))
         *r8-value*))))

(define-s-b-memref sys.int::memref-signed-byte-8 3 sys.lap-x86:movsx8 sys.lap-x86:mov8 :al 8)
(define-s-b-memref sys.int::memref-signed-byte-16 2 sys.lap-x86:movsx16 sys.lap-x86:mov16 :ax 16)
(define-s-b-memref sys.int::memref-signed-byte-32 1 sys.lap-x86:movsx32 sys.lap-x86:mov32 :eax 32)

(defbuiltin sys.int::memref-signed-byte-64 (base offset) ()
  (let ((overflow-error-label (gensym))
        (ok-label (gensym))
        (resume (gensym)))
    (emit-trailer (overflow-error-label)
      (emit `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r8 base t)
    (fixnum-check :r8)
    (load-in-reg :r9 offset t)
    (fixnum-check :r9)
    (smash-r8)
    (emit `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:mov64 :rcx :r9)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rax 3)
          ;; Read.
          `(sys.lap-x86:mov64 :rax (:rax :rcx))
          ;; Check for overflow. Top 3 bits must be all 0 or all 1.
          `(sys.lap-x86:mov64 :rdx :rax)
          `(sys.lap-x86:sar64 :rdx 60)
          `(sys.lap-x86:jz ,ok-label)
          `(sys.lap-x86:cmp8 :dl -1)
          `(sys.lap-x86:jne ,overflow-error-label)
          ok-label
          ;; Convert to fixnum.
          `(sys.lap-x86:shl64 :rax 3)
          `(sys.lap-x86:mov64 :r8 :rax)
          resume)
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf sys.int::memref-signed-byte-64) (new-value base offset) ()
  (let ((type-error-label (gensym))
        (bignum-path (gensym "mr-sb64-bignum"))
        (value-extracted (gensym "mr-sb64-value-extracted")))
    (emit-trailer (bignum-path)
      ;; Check for bignumness.
      (emit `(sys.lap-x86:and8 :dl #b1111)
            `(sys.lap-x86:cmp8 :dl #.sys.int::+tag-array-like+)
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:mov64 :rdx (:simple-array-header :r8))
            `(sys.lap-x86:cmp8 :dl #.(ash sys.int::+array-type-bignum+ 3))
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:shr64 :rdx 8)
            ;; RDX = bignum length.
            `(sys.lap-x86:cmp64 :rdx 1)
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:mov64 :rdx (:r8 #.(+ (- sys.int::+tag-array-like+) 8)))
            `(sys.lap-x86:jmp ,value-extracted)
            type-error-label)
      (raise-type-error :r8 '(signed-byte 64)))
    (load-in-reg :r9 base t)
    (fixnum-check :r9)
    (emit `(sys.lap-x86:mov64 :rax :r9))
    (load-in-reg :r9 offset t)
    (fixnum-check :r9)
    (emit `(sys.lap-x86:mov64 :rcx :r9))
    (load-in-r8 new-value t)
    (emit `(sys.lap-x86:mov64 :rdx :r8)
	  `(sys.lap-x86:test64 :rdx #b111)
	  `(sys.lap-x86:jnz ,bignum-path)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rdx 3)
          value-extracted
	  `(sys.lap-x86:sar64 :rax 3)
	  ;; Write.
	  `(sys.lap-x86:mov64 (:rax :rcx) :rdx))
    *r8-value*))

(defbuiltin sys.int::memref-t (base offset) ()
  (load-in-reg :r9 base t)
  (fixnum-check :r9)
  (emit `(sys.lap-x86:mov64 :rax :r9))
  (load-in-reg :r9 offset t)
  (fixnum-check :r9)
  (emit `(sys.lap-x86:mov64 :rcx :r9))
  (smash-r8)
  (emit ;; Convert to raw integers, leaving offset correctly scaled (* 8).
   `(sys.lap-x86:sar64 :rax 3)
   ;; Read.
   `(sys.lap-x86:mov64 :r8 (:rax :rcx)))
  (setf *r8-value* (list (gensym))))

(defbuiltin (setf sys.int::memref-t) (new-value base offset) ()
  (load-in-reg :r9 base t)
  (fixnum-check :r9)
  (emit `(sys.lap-x86:mov64 :rax :r9))
  (load-in-reg :r9 offset t)
  (fixnum-check :r9)
  (emit `(sys.lap-x86:mov64 :rcx :r9))
  (load-in-r8 new-value t)
  (emit ;; Convert to raw integers, leaving offset correctly scaled (* 8).
   `(sys.lap-x86:sar64 :rax 3)
   ;; Write.
   `(sys.lap-x86:mov64 (:rax :rcx) :r8))
  *r8-value*)

(defmacro define-u-b-alref (name shift read-op write-op register size)
  `(progn
     (defbuiltin ,name (array offset) ()
       (load-in-reg :r9 array t)
       (load-in-reg :r10 offset t)
       (fixnum-check :r10)
       (emit `(sys.lap-x86:mov64 :rcx :r10))
       (smash-r8)
       ;; Convert OFFSET to a scaled raw integer & read it.
       (emit '(sys.lap-x86:sar64 :rcx ,shift)
             '(,read-op :eax (:r9 :rcx #.(+ (- sys.int::+tag-array-like+) 8))))
       ;; Convert to fixnum.
       (emit '(sys.lap-x86:lea64 :r8 ((:rax 8))))
       (setf *r8-value* (list (gensym))))
     (defbuiltin (setf ,name) (new-value array offset) ()
       (let ((type-error-label (gensym)))
         (emit-trailer (type-error-label)
           (raise-type-error :r8 '(unsigned-byte ,size)))
         (load-in-reg :r9 array t)
         (load-in-reg :r10 offset t)
         (fixnum-check :r10)
         (emit `(sys.lap-x86:mov64 :rcx :r10))
         (load-in-r8 new-value t)
         (emit '(sys.lap-x86:mov64 :rax :r8)
               '(sys.lap-x86:test64 :rax #b111)
               `(sys.lap-x86:jnz ,type-error-label)
               '(sys.lap-x86:mov64 :rsi ,(fixnum-to-raw (ash 1 size)))
               '(sys.lap-x86:cmp64 :rax :rsi)
               `(sys.lap-x86:jae ,type-error-label)
               ;; Convert to raw integers, leaving offset correctly scaled.
               '(sys.lap-x86:sar64 :rcx ,shift)
               '(sys.lap-x86:sar64 :rax 3)
               ;; Write.
               '(,write-op (:r9 :rcx #.(+ (- sys.int::+tag-array-like+) 8)) ,register))
         *r8-value*))))

(define-u-b-alref sys.int::%array-like-ref-unsigned-byte-8  3 sys.lap-x86:movzx8  sys.lap-x86:mov8  :al   8)
(define-u-b-alref sys.int::%array-like-ref-unsigned-byte-16 2 sys.lap-x86:movzx16 sys.lap-x86:mov16 :ax  16)
(define-u-b-alref sys.int::%array-like-ref-unsigned-byte-32 1 sys.lap-x86:mov32   sys.lap-x86:mov32 :eax 32)

(defbuiltin sys.int::%array-like-ref-unsigned-byte-64 (array offset) ()
  (let ((overflow-error-label (gensym))
        (ok-label (gensym))
        (resume (gensym)))
    (emit-trailer (overflow-error-label)
      (emit `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
            `(sys.lap-x86:xor32 :edx :edx)
            ;; CL holds the high 4 bits of the word.
            ;; If bit 3 is non-zero, then the sign bit of word was set & a 128-bit bignum
            ;; is required.
            `(sys.lap-x86:test8 :cl #b1000)
            `(sys.lap-x86:cmov64nz :r13 (:constant sys.int::%%make-bignum-128-rdx-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r8 array t)
    (load-in-reg :r9 offset t)
    (fixnum-check :r9)
    (smash-r8)
    (emit `(sys.lap-x86:mov64 :rcx :r9)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rax 3)
          ;; Read.
          `(sys.lap-x86:mov64 :rax (:r8 :rcx #.(+ (- sys.int::+tag-array-like+) 8)))
          ;; Check for overflow. Top 4 bits must be all 0.
          `(sys.lap-x86:mov64 :rcx :rax)
          `(sys.lap-x86:sar64 :rcx 60)
          `(sys.lap-x86:jnz ,overflow-error-label)
          ok-label
          ;; Convert to fixnum.
          `(sys.lap-x86:shl64 :rax 3)
          `(sys.lap-x86:mov64 :r8 :rax)
          resume)
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf sys.int::%array-like-ref-unsigned-byte-64) (new-value array offset) ()
  (let ((type-error-label (gensym))
        (bignum-path (gensym "alr-ub64-bignum"))
        (len-2-bignum (gensym "alr-ub64-len-2-bignum"))
        (value-extracted (gensym "alr-ub64-value-extracted")))
    (emit-trailer (bignum-path)
      ;; Check for bignumness.
      (emit `(sys.lap-x86:and8 :dl #b1111)
            `(sys.lap-x86:cmp8 :dl #.sys.int::+tag-array-like+)
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:mov64 :rdx (:simple-array-header :r8))
            `(sys.lap-x86:cmp8 :dl #.(ash sys.int::+array-type-bignum+ 3))
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:shr64 :rdx 8)
            ;; RDX = bignum length.
            `(sys.lap-x86:cmp64 :rdx 2)
            `(sys.lap-x86:je ,len-2-bignum)
            ;; Not length 2, must be length 1.
            `(sys.lap-x86:cmp64 :rdx 1)
            `(sys.lap-x86:jne ,type-error-label)
            ;; And the sign bit must be clear.
            `(sys.lap-x86:mov64 :rdx (:r8 #.(+ (- sys.int::+tag-array-like+) 8)))
            `(sys.lap-x86:shl64 :rdx 1)
            `(sys.lap-x86:jc ,type-error-label)
            `(sys.lap-x86:rcr64 :rdx 1)
            `(sys.lap-x86:jmp ,value-extracted)
            len-2-bignum
            ;; Length 2 bignums must have the high word be 0.
            `(sys.lap-x86:cmp64 (:r8 #.(+ (- sys.int::+tag-array-like+) 16)) 0)
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:mov64 :rdx (:r8 #.(+ (- sys.int::+tag-array-like+) 8)))
            `(sys.lap-x86:jmp ,value-extracted)
            type-error-label)
      (raise-type-error :r8 '(unsigned-byte 64)))
    (load-in-reg :r9 array t)
    (load-in-reg :r10 offset t)
    (fixnum-check :r10)
    (emit `(sys.lap-x86:mov64 :rcx :r10))
    (load-in-r8 new-value t)
    (emit `(sys.lap-x86:mov64 :rdx :r8)
	  `(sys.lap-x86:test64 :rdx #b111)
	  `(sys.lap-x86:jnz ,bignum-path)
          `(sys.lap-x86:cmp64 :r8 0)
          `(sys.lap-x86:jl ,type-error-label)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rdx 3)
          value-extracted
	  ;; Write.
	  `(sys.lap-x86:mov64 (:r9 :rcx #.(+ (- sys.int::+tag-array-like+) 8)) :rdx))
    *r8-value*))

(defmacro define-s-b-alref (name shift read-op write-op register size)
  `(progn
     (defbuiltin ,name (array offset) ()
       (load-in-reg :r9 array t)
       (load-in-reg :r10 offset t)
       (fixnum-check :r10)
       (emit `(sys.lap-x86:mov64 :rcx :r10))
       (smash-r8)
       ;; Convert OFFSET to a scaled raw integer & read it.
       (emit '(sys.lap-x86:sar64 :rcx ,shift)
             '(,read-op :rax (:r9 :rcx #.(+ (- sys.int::+tag-array-like+) 8))))
       ;; Convert to fixnum.
       (emit '(sys.lap-x86:lea64 :r8 ((:rax 8))))
       (setf *r8-value* (list (gensym))))
     (defbuiltin (setf ,name) (new-value array offset) ()
       (let ((type-error-label (gensym)))
         (emit-trailer (type-error-label)
           (raise-type-error :r8 '(signed-byte ,size)))
         (load-in-reg :r9 array t)
         (load-in-reg :r10 offset t)
         (fixnum-check :r10)
         (emit `(sys.lap-x86:mov64 :rcx :r10))
         (load-in-r8 new-value t)
         (emit '(sys.lap-x86:mov64 :rax :r8)
               '(sys.lap-x86:test64 :rax #b111)
               `(sys.lap-x86:jnz ,type-error-label)
               '(sys.lap-x86:sar64 :rax 3)
               '(sys.lap-x86:mov64 :rsi :rax)
               '(sys.lap-x86:mov64 :rdi ,(ash 1 (1- size)))
               '(sys.lap-x86:cmp64 :rsi :rdi)
               `(sys.lap-x86:jge ,type-error-label)
               '(sys.lap-x86:mov64 :rdi ,(- (ash 1 (1- size))))
               '(sys.lap-x86:cmp64 :rsi :rdi)
               `(sys.lap-x86:jl ,type-error-label)
               ;; Convert to raw integers, leaving offset correctly scaled.
               '(sys.lap-x86:sar64 :rcx ,shift)
               ;; Write.
               '(,write-op (:r9 :rcx #.(+ (- sys.int::+tag-array-like+) 8)) ,register))
         *r8-value*))))

(define-s-b-alref sys.int::%array-like-ref-signed-byte-8  3 sys.lap-x86:movsx8  sys.lap-x86:mov8  :al  8)
(define-s-b-alref sys.int::%array-like-ref-signed-byte-16 2 sys.lap-x86:movsx16 sys.lap-x86:mov16 :ax  16)
(define-s-b-alref sys.int::%array-like-ref-signed-byte-32 1 sys.lap-x86:movsx32 sys.lap-x86:mov32 :eax 32)

(defbuiltin sys.int::%array-like-ref-signed-byte-64 (array offset) ()
  (let ((overflow-error-label (gensym))
        (ok-label (gensym))
        (resume (gensym)))
    (emit-trailer (overflow-error-label)
      (emit `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r8 array t)
    (load-in-reg :r9 offset t)
    (fixnum-check :r9)
    (smash-r8)
    (emit `(sys.lap-x86:mov64 :rcx :r9)
          ;; Read. Offset is prescaled due to fixnumness.
          `(sys.lap-x86:mov64 :rax (:r8 :rcx #.(+ (- sys.int::+tag-array-like+) 8)))
          ;; Check for overflow. Top 3 bits must be all 0 or all 1.
          `(sys.lap-x86:mov64 :rdx :rax)
          `(sys.lap-x86:sar64 :rdx 60)
          `(sys.lap-x86:jz ,ok-label)
          `(sys.lap-x86:cmp8 :dl -1)
          `(sys.lap-x86:jne ,overflow-error-label)
          ok-label
          ;; Convert to fixnum.
          `(sys.lap-x86:shl64 :rax 3)
          `(sys.lap-x86:mov64 :r8 :rax)
          resume)
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf sys.int::%array-like-ref-signed-byte-64) (new-value array offset) ()
  (let ((type-error-label (gensym))
        (bignum-path (gensym "alr-sb64-bignum"))
        (value-extracted (gensym "alr-sb64-value-extracted")))
    (emit-trailer (bignum-path)
      ;; Check for bignumness.
      (emit `(sys.lap-x86:and8 :dl #b1111)
            `(sys.lap-x86:cmp8 :dl #.sys.int::+tag-array-like+)
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:mov64 :rdx (:simple-array-header :r8))
            `(sys.lap-x86:cmp8 :dl #.(ash sys.int::+array-type-bignum+ 3))
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:shr64 :rdx 8)
            ;; RDX = bignum length.
            `(sys.lap-x86:cmp64 :rdx 1)
            `(sys.lap-x86:jne ,type-error-label)
            `(sys.lap-x86:mov64 :rdx (:r8 #.(+ (- sys.int::+tag-array-like+) 8)))
            `(sys.lap-x86:jmp ,value-extracted)
            type-error-label)
      (raise-type-error :r8 '(signed-byte 64)))
    (load-in-reg :r9 array t)
    (load-in-reg :r10 offset t)
    (fixnum-check :r10)
    (emit `(sys.lap-x86:mov64 :rcx :r10))
    (load-in-r8 new-value t)
    (emit `(sys.lap-x86:mov64 :rdx :r8)
	  `(sys.lap-x86:test64 :rdx #b111)
	  `(sys.lap-x86:jnz ,bignum-path)
	  ;; Convert to raw integers, leaving offset correctly scaled (* 8).
	  `(sys.lap-x86:sar64 :rdx 3)
          value-extracted
	  ;; Write. Offset is correctly scaled.
	  `(sys.lap-x86:mov64 (:r9 :rcx #.(+ (- sys.int::+tag-array-like+) 8)) :rdx))
    *r8-value*))

(defbuiltin sys.int::%array-like-ref-t (array offset) ()
  (load-in-reg :r8 array t)
  (load-in-reg :r9 offset t)
  (fixnum-check :r9)
  (emit `(sys.lap-x86:mov64 :rcx :r9))
  (smash-r8)
  ;; Read. Offset is prescaled.
  (emit `(sys.lap-x86:mov64 :r8 (:r8 :rcx #.(+ (- sys.int::+tag-array-like+) 8))))
  (setf *r8-value* (list (gensym))))

(defbuiltin (setf sys.int::%array-like-ref-t) (new-value array offset) ()
  (load-in-reg :r9 array t)
  (load-in-reg :r10 offset t)
  (fixnum-check :r10)
  (emit `(sys.lap-x86:mov64 :rcx :r10))
  (load-in-r8 new-value t)
  ;; Write. Offset is prescaled.
  (emit `(sys.lap-x86:mov64 (:r9 :rcx #.(+ (- sys.int::+tag-array-like+) 8)) :r8))
  *r8-value*)

(defbuiltin sys.int::%simple-array-p (object) ()
  (let ((false-out (gensym))
        (out (gensym)))
    (load-in-reg :r8 object t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
          `(sys.lap-x86:jne ,false-out)
          `(sys.lap-x86:mov8 :al (:simple-array-header :r8))
          `(sys.lap-x86:cmp8 :al ,(ash sys.int::+last-array-type+ sys.int::+array-type-shift+))
          `(sys.lap-x86:jnbe ,false-out)
          `(sys.lap-x86:mov64 :r8 t)
          `(sys.lap-x86:jmp ,out)
          false-out
          `(sys.lap-x86:mov64 :r8 nil)
          out)
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::%simple-array-length (array) ()
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
		  (raise-type-error :r8 '(simple-array * (*))))
    (load-in-r8 array t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Ensure that it is a simple-array, not a struct or bignum or similar.
	  `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
	  `(sys.lap-x86:cmp8 :al ,(ash sys.int::+last-array-type+ sys.int::+array-type-shift+))
	  `(sys.lap-x86:jnbe ,type-error-label)
	  ;; Convert length to fixnum.
	  `(sys.lap-x86:shr64 :rax 5)
	  `(sys.lap-x86:and64 :rax -8)
	  `(sys.lap-x86:mov64 :r8 :rax))
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::%simple-array-type (array) ()
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
		  (raise-type-error :r8 '(simple-array * (*))))
    (load-in-r8 array t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Ensure that it is a simple-array, not a struct or bignum or similar.
	  `(sys.lap-x86:mov8 :al (:simple-array-header :r8))
	  `(sys.lap-x86:cmp8 :al ,(ash sys.int::+last-array-type+ sys.int::+array-type-shift+))
	  `(sys.lap-x86:jnbe ,type-error-label)
	  ;; Convert tag to fixnum. Low 3 bits are for the GC, always clear.
          `(sys.lap-x86:and32 :eax ,(ash (- (ash 1 sys.int::+array-type-size+) 1) sys.int::+array-type-shift+))
	  `(sys.lap-x86:mov32 :r8d :eax))
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::binary-logior (x y) ()
  (let ((full-logior (gensym))
        (resume (gensym)))
    (when (constant-type-p y 'fixnum)
      (psetf x y
             y x))
    (emit-trailer (full-logior)
      (when (constant-type-p x 'fixnum)
        (load-constant :r9 (second x)))
      (call-support-function 'sys.int::generic-logior 2)
      (emit `(sys.lap-x86:jmp ,resume)))
    (cond ((constant-type-p x 'fixnum)
           (load-in-r8 y t)
           (smash-r8)
           (emit `(sys.lap-x86:test64 :r8 7)
                 `(sys.lap-x86:jnz ,full-logior))
           ;; Small integers can be encoded directly into the instruction.
           (if (typep (second x) '(signed-byte 28))
               (emit `(sys.lap-x86:or64 :r8 ,(fixnum-to-raw (second x))))
               (emit `(sys.lap-x86:mov64 :rax ,(fixnum-to-raw (second x)))
                     `(sys.lap-x86:or64 :r8 :rax)))
           (emit resume)
           (setf *r8-value* (list (gensym))))
          (t (load-in-reg :r9 y t)
             (load-in-reg :r8 x t)
             (smash-r8)
             (emit `(sys.lap-x86:test64 :r8 7)
                   `(sys.lap-x86:jnz ,full-logior)
                   `(sys.lap-x86:test64 :r9 7)
                   `(sys.lap-x86:jnz ,full-logior)
                   `(sys.lap-x86:or64 :r8 :r9)
                   resume)
             (setf *r8-value* (list (gensym)))))))

(defbuiltin sys.int::binary-logxor (x y) ()
  (let ((full-logxor (gensym))
        (resume (gensym)))
    (when (constant-type-p y 'fixnum)
      (psetf x y
             y x))
    (emit-trailer (full-logxor)
      (when (constant-type-p x 'fixnum)
        (load-constant :r9 (second x)))
      (call-support-function 'sys.int::generic-logxor 2)
      (emit `(sys.lap-x86:jmp ,resume)))
    (cond ((constant-type-p x 'fixnum)
           (load-in-r8 y t)
           (smash-r8)
           (emit `(sys.lap-x86:test64 :r8 7)
                 `(sys.lap-x86:jnz ,full-logxor))
           ;; Small integers can be encoded directly into the instruction.
           (if (typep (second x) '(signed-byte 28))
               (emit `(sys.lap-x86:xor64 :r8 ,(fixnum-to-raw (second x))))
               (emit `(sys.lap-x86:mov64 :rax ,(fixnum-to-raw (second x)))
                     `(sys.lap-x86:xor64 :r8 :rax)))
           (emit resume)
           (setf *r8-value* (list (gensym))))
          (t (load-in-reg :r9 y t)
             (load-in-reg :r8 x t)
             (smash-r8)
             (emit `(sys.lap-x86:test64 :r8 7)
                   `(sys.lap-x86:jnz ,full-logxor)
                   `(sys.lap-x86:test64 :r9 7)
                   `(sys.lap-x86:jnz ,full-logxor)
                   `(sys.lap-x86:xor64 :r8 :r9)
                   resume)
             (setf *r8-value* (list (gensym)))))))

(defbuiltin sys.int::binary-logand (x y) ()
  (let ((full-logand (gensym))
        (resume (gensym)))
    (when (constant-type-p y 'fixnum)
      (psetf x y
             y x))
    (emit-trailer (full-logand)
      (when (constant-type-p x 'fixnum)
        (load-constant :r9 (second x)))
      (call-support-function 'sys.int::generic-logand 2)
      (emit `(sys.lap-x86:jmp ,resume)))
    (cond ((constant-type-p x 'fixnum)
           (load-in-r8 y t)
           (smash-r8)
           (emit `(sys.lap-x86:test64 :r8 7)
                 `(sys.lap-x86:jnz ,full-logand))
           ;; Small integers can be encoded directly into the instruction.
           (if (typep (second x) '(signed-byte 28))
               (emit `(sys.lap-x86:and64 :r8 ,(fixnum-to-raw (second x))))
               (emit `(sys.lap-x86:mov64 :rax ,(fixnum-to-raw (second x)))
                     `(sys.lap-x86:and64 :r8 :rax)))
           (emit resume)
           (setf *r8-value* (list (gensym))))
          (t (load-in-reg :r9 y t)
             (load-in-reg :r8 x t)
             (smash-r8)
             (emit `(sys.lap-x86:test64 :r8 7)
                   `(sys.lap-x86:jnz ,full-logand)
                   `(sys.lap-x86:test64 :r9 7)
                   `(sys.lap-x86:jnz ,full-logand)
                   `(sys.lap-x86:and64 :r8 :r9)
                   resume)
             (setf *r8-value* (list (gensym)))))))

(defbuiltin lognot (integer) ()
  (let ((not-fixnum (gensym "lognot-other"))
        (resume (gensym "lognot-resume")))
    (emit-trailer (not-fixnum)
      (call-support-function 'sys.int::generic-lognot 1)
      (emit `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r8 integer t)
    (smash-r8)
    (emit `(sys.lap-x86:test64 :r8 #b111)
          `(sys.lap-x86:jnz ,not-fixnum)
          `(sys.lap-x86:xor64 :r8 -8)
          resume)
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::binary-+ (x y) ()
  (let ((ovfl (gensym "+ovfl"))
        (resume (gensym "+resume"))
        (full-add (gensym "+full")))
    (when (constant-type-p y 'fixnum)
      (psetf x y
             y x))
    (emit-trailer (ovfl)
      ;; Recover the full value using the carry bit.
      (emit `(sys.lap-x86:mov64 :rax :r8)
            `(sys.lap-x86:rcr64 :rax 1)
            ;; Drop the two remaining fixnum tag bits.
            `(sys.lap-x86:sar64 :rax 2)
            ;; Call assembly helper function.
            `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)))
    (emit-trailer (full-add)
      (when (constant-type-p x 'fixnum)
        (load-constant :r9 (second x)))
      (call-support-function 'sys.int::generic-+ 2)
      (emit `(sys.lap-x86:jmp ,resume)))
    (cond ((constant-type-p x 'fixnum)
           (load-in-r8 y t)
           (emit `(sys.lap-x86:test64 :r8 7)
                 `(sys.lap-x86:jnz ,full-add))
           (smash-r8)
           ;; Small integers can be encoded directly into the instruction.
           (if (typep (second x) '(signed-byte 28))
               (emit `(sys.lap-x86:add64 :r8 ,(fixnum-to-raw (second x))))
               (emit `(sys.lap-x86:mov64 :rax ,(fixnum-to-raw (second x)))
                     `(sys.lap-x86:add64 :r8 :rax))))
          (t (load-in-reg :r9 y t)
             (load-in-reg :r8 x t)
             (emit `(sys.lap-x86:test64 :r9 7)
                   `(sys.lap-x86:jnz ,full-add)
                   `(sys.lap-x86:test64 :r8 7)
                   `(sys.lap-x86:jnz ,full-add))
             (smash-r8)
             (emit `(sys.lap-x86:add64 :r8 :r9))))
    (emit `(sys.lap-x86:jo ,ovfl)
          resume)
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::binary-- (x y) ()
  (let ((ovfl (gensym "-ovfl"))
        (resume (gensym "-resume"))
        (full-sub (gensym "-full")))
    (emit-trailer (ovfl)
      ;; Recover the full value.
      (emit `(sys.lap-x86:cmc)
            `(sys.lap-x86:mov64 :rax :r8)
            `(sys.lap-x86:rcr64 :rax 1)
            ;; Drop the two remaining fixnum tag bits.
            `(sys.lap-x86:sar64 :rax 2)
            ;; Call assembly helper function.
            `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)))
    (emit-trailer (full-sub)
      (call-support-function 'sys.int::generic-- 2)
      (emit `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r8 x t)
    (load-in-reg :r9 y t)
    (smash-r8)
    (emit `(sys.lap-x86:test64 :r8 7)
          `(sys.lap-x86:jnz ,full-sub)
          `(sys.lap-x86:test64 :r9 7)
          `(sys.lap-x86:jnz ,full-sub)
          `(sys.lap-x86:sub64 :r8 :r9)
          `(sys.lap-x86:jo ,ovfl)
          resume)
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::binary-* (x y) ()
  (let ((ovfl (gensym "*ovfl"))
        (resume (gensym "*resume"))
        (full-mul (gensym "*full"))
        (small-bignum (gensym "*small-result")))
    (emit-trailer (ovfl)
      ;; 128-bit result in rdx:rax.
      ;; Unbox the result.
      (emit `(sys.lap-x86:shrd64 :rax :rdx 3)
            `(sys.lap-x86:sar64 :rdx 3)
            ;; Check if the result will fit in 64 bits.
            ;; Save the high bits.
            `(sys.lap-x86:mov64 :rcx :rdx)
            `(sys.lap-x86:cqo)
            `(sys.lap-x86:cmp64 :rcx :rdx)
            `(sys.lap-x86:je ,small-bignum)
            ;; Nope.
            `(sys.lap-x86:mov64 :rdx :rcx)
            `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-128-rdx-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)
            small-bignum
            ;; Yup.
            `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)))
    (emit-trailer (full-mul)
      (call-support-function 'sys.int::generic-* 2)
      (emit `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r9 y t)
    (load-in-reg :r8 x t)
    (smash-r8)
    (emit `(sys.lap-x86:test64 :r8 7)
          `(sys.lap-x86:jnz ,full-mul)
          `(sys.lap-x86:test64 :r9 7)
          `(sys.lap-x86:jnz ,full-mul)
          `(sys.lap-x86:mov64 :rax :r8)
          ;; Convert RAX to raw integer.
          `(sys.lap-x86:sar64 :rax 3)
          `(sys.lap-x86:imul64 :r9)
          `(sys.lap-x86:jo ,ovfl)
          ;; R9 was not converted to a raw integer, so the result
          ;; was automatically converted to a fixnum.
          `(sys.lap-x86:mov64 :r8 :rax)
          resume)
    (setf *r8-value* (list (gensym)))))

;; FIXME: default divisor to 1
(defbuiltin rem (number divisor) ()
  (let ((full-rem (gensym "full-rem"))
        (resume (gensym "resume-rem")))
    (emit-trailer (full-rem)
      (call-support-function 'sys.int::generic-rem 2)
      (emit `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r9 divisor t)
    (load-in-reg :r8 number t)
    (smash-r8)
    (emit `(sys.lap-x86:test64 :r8 7)
          `(sys.lap-x86:jnz ,full-rem)
          `(sys.lap-x86:test64 :r9 7)
          `(sys.lap-x86:jnz ,full-rem)
          ;; Bail out to the full REM on /0.
          `(sys.lap-x86:test64 :r9 :r9)
          `(sys.lap-x86:jz ,full-rem)
          ;; Don't check for REM -1, don't care about the quotient.
          `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:cqo)
          `(sys.lap-x86:idiv64 :r9)
          ;; :rdx holds the remainder as a fixnum.
          `(sys.lap-x86:mov64 :r8 :rdx)
          resume)
    (setf *r8-value* (list (gensym)))))

;; FIXME: default divisor to 1
(defbuiltin sys.int::%truncate (number divisor) ()
  (let ((full-truncate (gensym "full-truncate"))
        (resume (gensym "resume-truncate")))
    (emit-trailer (full-truncate)
      (call-support-function 'sys.int::generic-truncate 2
                             (not (member *for-value* '(:multiple :tail))))
      (emit `(sys.lap-x86:jmp ,resume)))
    (load-in-reg :r9 divisor t)
    (load-in-reg :r8 number t)
    (smash-r8)
    (emit `(sys.lap-x86:test64 :r8 7)
          `(sys.lap-x86:jnz ,full-truncate)
          `(sys.lap-x86:test64 :r9 7)
          `(sys.lap-x86:jnz ,full-truncate)
          ;; Bail out to the full truncate when /0 or /-1.
          `(sys.lap-x86:test64 :r9 :r9)
          `(sys.lap-x86:jz ,full-truncate)
          `(sys.lap-x86:cmp64 :r9 -8)
          `(sys.lap-x86:je ,full-truncate)
          `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:cqo)
          `(sys.lap-x86:idiv64 :r9)
          ;; :rax holds the dividend as a integer.
          ;; :rdx holds the remainder as a fixnum.
          `(sys.lap-x86:shl64 :rax 3)
          `(sys.lap-x86:mov64 :r8 :rax))
    (prog1 (cond ((member *for-value* '(:multiple :tail))
                  (emit `(sys.lap-x86:mov64 :r9 :rdx))
                  (load-constant :rcx 2)
                  :multiple)
                 (t (setf *r8-value* (list (gensym)))))
      (emit resume))))

(defbuiltin ash (integer count) ()
  (cond ((constant-type-p count 'fixnum)
         (setf count (second count))
         (load-in-reg :r8 integer t)
         (let ((not-fixnum (gensym "ash-not-fixnum"))
               (resume (gensym "ash-resume")))
           (emit-trailer (not-fixnum)
             (load-constant :r9 count)
             (call-support-function 'sys.int::%ash 2)
             (load-constant :r13 'sys.int::%ash)
             (emit `(sys.lap-x86:jmp ,resume)))
           (emit `(sys.lap-x86:test64 :r8 #b111)
                 `(sys.lap-x86:jnz ,not-fixnum))
           (cond ((minusp count)
                  ;; Right shift.
                  (setf count (- count))
                  (smash-r8)
                  (cond ((>= count 61)
                         ;; All bits shifted out.
                         (emit `(sys.lap-x86:cqo)
                               `(sys.lap-x86:and64 :rdx -8)
                               `(sys.lap-x86:mov64 :r8 :rdx)))
                        (t (emit `(sys.lap-x86:mov64 :rax :r8)
                                 `(sys.lap-x86:sar64 :rax ,count)
                                 `(sys.lap-x86:and64 :rax -8)
                                 `(sys.lap-x86:mov64 :r8 :rax))))
                  (emit resume)
                  (setf *r8-value* (list (gensym))))
                 ((plusp count)
                  ;; Left shift.
                  ;; Perform the shift one bit at a time so that overflow can be checked for.
                  (let ((ovfl (gensym))
                        (loop-head (gensym)))
                    (emit-trailer (ovfl)
                      ;; Shift count in R9, overflowed value in R8, carry bit set to last
                      ;; bit shifted out.
                      ;; Undo the last shift, then call into the helper function.
                      (emit `(sys.lap-x86:rcr64 :r8 1))
                      (call-support-function 'sys.int::%ash 2)
                      (emit `(sys.lap-x86:jmp ,resume)))
                    (load-constant :r9 count)
                    (smash-r8)
                    (emit loop-head)
                    (emit `(sys.lap-x86:shl64 :r8 1)
                          `(sys.lap-x86:jo ,ovfl)
                          `(sys.lap-x86:sub64 :r9 ,(fixnum-to-raw 1))
                          `(sys.lap-x86:jnz ,loop-head))
                    (emit resume)
                    (setf *r8-value* (list (gensym)))))
                 ((zerop count)
                  ;; Type check only.
                  (emit resume)
                  integer))))
        (t (let ((done-label (gensym))
                 (shift-left (gensym))
                 (shift-right (gensym))
                 (sign-extend (gensym))
                 (ovfl (gensym))
                 (full (gensym))
                 (really-done (gensym)))
             (emit-trailer (ovfl)
               (emit
                ;; Stash the count in the spare stack slot.
                `(sys.lap-x86:mov64 (:cfp -32) :rcx)
                ;; Recover carry.
                `(sys.lap-x86:rcr64 :rax 1)
                ;; Drop the two remaining fixnum tag bits.
                `(sys.lap-x86:sar64 :rax 2)
                ;; Turn it into a bignum.
                `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
                `(sys.lap-x86:call (:symbol-function :r13))
                ;; Fall into the bignum helper.
                `(sys.lap-x86:mov64 :rcx (:cfp -32))
                `(sys.lap-x86:lea64 :r9 ((:rcx 8) -8)))
               (call-support-function 'sys.int::%ash 2)
               (emit
                `(sys.lap-x86:jmp ,really-done)))
             (emit-trailer (full)
               (call-support-function 'sys.int::%ash 2)
               (emit
                `(sys.lap-x86:jmp ,really-done)))
             (load-in-reg :r9 count t)
             (emit `(sys.lap-x86:test64 :r9 7)
                   `(sys.lap-x86:jnz ,full))
             (fixnum-check :r9)
             (load-in-reg :r8 integer t)
             (smash-r8)
             (emit `(sys.lap-x86:test64 :r8 7)
                   `(sys.lap-x86:jnz ,full))
             (fixnum-check :r8)
             (emit `(sys.lap-x86:mov64 :rcx :r9)
                   `(sys.lap-x86:mov64 :rax :r8)
                   `(sys.lap-x86:cmp64 :rcx 0)
                   `(sys.lap-x86:jz ,done-label)
                   `(sys.lap-x86:jl ,shift-right)
                   ;; Left shift.
                   ;; Perform the shift one bit at a time so that overflow can be checked for.
                   `(sys.lap-x86:sar64 :rcx 3)
                   shift-left
                   `(sys.lap-x86:shl64 :rax 1)
                   `(sys.lap-x86:jo ,ovfl)
                   `(sys.lap-x86:sub64 :rcx 1)
                   `(sys.lap-x86:jnz ,shift-left)
                   `(sys.lap-x86:jmp ,done-label)
                   ;; x86 masks the shift count to 6 bits, test if all the bits were shifted out.
                   shift-right
                   `(sys.lap-x86:cmp64 :rcx ,(fixnum-to-raw -64))
                   `(sys.lap-x86:jle ,sign-extend)
                   `(sys.lap-x86:sar64 :rcx 3)
                   `(sys.lap-x86:neg64 :rcx)
                   `(sys.lap-x86:sar64 :rax :cl)
                   `(sys.lap-x86:and64 :rax -8)
                   `(sys.lap-x86:jmp ,done-label)
                   sign-extend
                   `(sys.lap-x86:cqo)
                   `(sys.lap-x86:and64 :rdx -8)
                   `(sys.lap-x86:mov64 :rax :rdx)
                   done-label
                   `(sys.lap-x86:mov64 :r8 :rax)
                   really-done)
             (setf *r8-value* (list (gensym)))))))

(defmacro define-conditional-builtin (name generic-name conditional)
  `(defbuiltin ,name (x y) ()
     (let ((generic (gensym))
           (resume (gensym)))
       (emit-trailer (generic)
         (call-support-function ',generic-name 2)
         (emit `(sys.lap-x86:jmp ,resume)))
       (load-in-reg :r9 y t)
       (load-in-reg :r8 x t)
       (smash-r8)
       (emit `(sys.lap-x86:test64 :r8 7)
             `(sys.lap-x86:jnz ,generic)
             `(sys.lap-x86:test64 :r9 7)
             `(sys.lap-x86:jnz ,generic)
             `(sys.lap-x86:cmp64 :r8 :r9)
             `(sys.lap-x86:mov64 :r8 nil)
             `(sys.lap-x86:mov64 :r9 t)
             `(,',(fourth (predicate-info conditional)) :r8 :r9)
             resume)
       (setf *r8-value* (list (gensym))))))

(define-conditional-builtin sys.int::binary-< sys.int::generic-< :l)
(define-conditional-builtin sys.int::binary->= sys.int::generic->= :ge)
(define-conditional-builtin sys.int::binary-> sys.int::generic-> :g)
(define-conditional-builtin sys.int::binary-<= sys.int::generic-<= :le)
(define-conditional-builtin sys.int::binary-= sys.int::generic-= :e)

(defbuiltin schar (string index) ()
  (let ((bound-error-label (gensym))
	(type-error-label (gensym))
	(base-string-label (gensym))
	(out-label (gensym)))
    (emit-trailer (bound-error-label)
      (emit `(sys.lap-x86:mov64 :r9 :rax))
      (call-support-function 'sys.int::raise-bound-error 2)
      (emit `(sys.lap-x86:ud2)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'simple-string))
    (load-in-reg :rax index t)
    (fixnum-check :rax)
    (load-in-r8 string t)
    (smash-r8)
    (emit `(sys.lap-x86:mov64 :rdx :rax)
	  `(sys.lap-x86:sar64 :rdx 3)
	  `(sys.lap-x86:mov8 :cl :r8l)
	  `(sys.lap-x86:and8 :cl #b1111)
	  `(sys.lap-x86:cmp8 :cl ,sys.int::+tag-array-like+)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Ensure that it is a simple-string.
	  `(sys.lap-x86:mov64 :rcx (:simple-array-header :r8))
	  `(sys.lap-x86:cmp8 :cl ,(ash sys.int::+array-type-base-char+ sys.int::+array-type-shift+))
	  `(sys.lap-x86:je ,base-string-label)
	  `(sys.lap-x86:cmp8 :cl ,(ash sys.int::+array-type-character+ sys.int::+array-type-shift+))
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; simple-string (not simple-base-string).
	  `(sys.lap-x86:shr64 :rcx 8)
	  `(sys.lap-x86:cmp64 :rdx :rcx)
	  `(sys.lap-x86:jae ,bound-error-label)
	  `(sys.lap-x86:mov32 :eax (:r8 1 (:rdx 4)))
	  `(sys.lap-x86:jmp ,out-label)
	  ;; simple-base-string.
	  base-string-label
	  `(sys.lap-x86:shr64 :rcx 8)
	  `(sys.lap-x86:cmp64 :rdx :rcx)
	  `(sys.lap-x86:jae ,bound-error-label)
	  `(sys.lap-x86:xor32 :eax :eax)
	  `(sys.lap-x86:mov8 :al (:r8 1 :rdx))
	  out-label
	  ;; Convert EAX to a real character.
	  `(sys.lap-x86:shl32 :eax 4)
	  `(sys.lap-x86:or32 :eax ,sys.int::+tag-character+)
	  `(sys.lap-x86:mov32 :r8d :eax))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf schar) (value string index) ()
  (let ((bound-error-label (gensym))
	(type-error-label (gensym))
	(char-type-error-label (gensym))
	(base-char-type-error-label (gensym))
	(base-string-label (gensym))
	(out-label (gensym)))
    (emit-trailer (bound-error-label)
      (emit `(sys.lap-x86:mov64 :r9 :rax))
      (call-support-function 'sys.int::raise-bound-error 2)
      (emit `(sys.lap-x86:ud2)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'simple-string))
    (emit-trailer (char-type-error-label)
      (raise-type-error :r8 'character))
    (emit-trailer (base-char-type-error-label)
      (raise-type-error :r8 'base-char))
    (load-in-reg :rax index t)
    (fixnum-check :rax)
    (load-in-reg :r9 string t)
    (load-in-reg :r8 value t)
    (emit `(sys.lap-x86:mov64 :rdx :rax)
	  `(sys.lap-x86:sar64 :rdx 3)
	  `(sys.lap-x86:mov8 :cl :r9l)
	  `(sys.lap-x86:and8 :cl #b1111)
	  `(sys.lap-x86:cmp8 :cl ,sys.int::+tag-array-like+)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Ensure that it is a simple-string.
	  `(sys.lap-x86:mov64 :rcx (:simple-array-header :r9))
	  `(sys.lap-x86:cmp8 :cl ,(ash sys.int::+array-type-base-char+ sys.int::+array-type-shift+))
	  `(sys.lap-x86:je ,base-string-label)
	  `(sys.lap-x86:cmp8 :cl ,(ash sys.int::+array-type-character+ sys.int::+array-type-shift+))
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; simple-string (not simple-base-string).
	  `(sys.lap-x86:shr64 :rcx 8)
	  `(sys.lap-x86:cmp64 :rdx :rcx)
	  `(sys.lap-x86:jae ,bound-error-label)
          `(sys.lap-x86:mov8 :cl :r8l)
          `(sys.lap-x86:and8 :cl #b1111)
          `(sys.lap-x86:cmp8 :cl ,sys.int::+tag-character+)
          `(sys.lap-x86:jne ,char-type-error-label)
          `(sys.lap-x86:mov32 :eax :r8d)
          `(sys.lap-x86:shr32 :eax 4)
	  `(sys.lap-x86:mov32 (:r9 1 (:rdx 4)) :eax)
	  `(sys.lap-x86:jmp ,out-label)
	  ;; simple-base-string.
	  base-string-label
	  `(sys.lap-x86:shr64 :rcx 8)
	  `(sys.lap-x86:cmp64 :rdx :rcx)
	  `(sys.lap-x86:jae ,bound-error-label)
	  `(sys.lap-x86:xor32 :eax :eax)
          `(sys.lap-x86:mov8 :cl :r8l)
          `(sys.lap-x86:and8 :cl #b1111)
          `(sys.lap-x86:cmp8 :cl ,sys.int::+tag-character+)
          `(sys.lap-x86:jne ,base-char-type-error-label)
          `(sys.lap-x86:mov32 :eax :r8d)
          `(sys.lap-x86:shr32 :eax 4)
          `(sys.lap-x86:cmp32 :eax 256)
          `(sys.lap-x86:jae ,base-char-type-error-label)
	  `(sys.lap-x86:mov8 (:r9 1 :rdx) :al)
	  out-label)
    *r8-value*))

(define-tag-type-predicate symbolp sys.int::+tag-symbol+)
(define-reader symbol-name symbol sys.int::+tag-symbol+ :symbol-name)
(define-accessor symbol-package symbol sys.int::+tag-symbol+ :symbol-package)

(defbuiltin symbol-value (symbol) ()
  (let ((unbound-error-label (gensym))
	(type-error-label (gensym))
        (no-tls-slot (gensym))
        (test-bound (gensym)))
    (emit-trailer (unbound-error-label)
      (emit `(sys.lap-x86:mov64 :r8 :r9))
      (call-support-function 'sys.int::raise-unbound-error 1)
      (emit `(sys.lap-x86:ud2)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'symbol))
    (load-in-reg :r9 symbol t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r9l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-symbol+)
	  `(sys.lap-x86:jne ,type-error-label)
          ;; Extract the TLS offset.
          `(sys.lap-x86:mov32 :eax (:symbol-flags :r9))
          `(sys.lap-x86:shr32 :eax ,+tls-offset-shift+)
          `(sys.lap-x86:and32 :eax #xFFFF)
          `(sys.lap-x86:jz ,no-tls-slot)
          ;; Read from the TLS slot.
          `(sys.lap-x86:gs)
          `(sys.lap-x86:mov64 :r8 ((:rax 8) ,+tls-base-offset+))
          ;; Check if the TLS slot holds a value.
          `(sys.lap-x86:cmp64 :r8 -2)
          `(sys.lap-x86:jne ,test-bound)
          no-tls-slot
	  `(sys.lap-x86:mov64 :r8 (:symbol-value :r9))
          test-bound
	  `(sys.lap-x86:cmp64 :r8 ,sys.int::+tag-unbound-value+)
	  `(sys.lap-x86:je ,unbound-error-label))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf symbol-value) (value symbol) ()
  (let ((type-error-label (gensym))
        (no-tls-slot (gensym))
        (out (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'symbol))
    (load-in-reg :r9 symbol t)
    (load-in-reg :r8 value t)
    (emit `(sys.lap-x86:mov8 :al :r9l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-symbol+)
          `(sys.lap-x86:jne ,type-error-label)
          ;; Extract the TLS offset.
          `(sys.lap-x86:mov32 :eax (:symbol-flags :r9))
          `(sys.lap-x86:shr32 :eax ,+tls-offset-shift+)
          `(sys.lap-x86:and32 :eax #xFFFF)
          `(sys.lap-x86:jz ,no-tls-slot)
          ;; Check if the TLS slot holds a value.
          `(sys.lap-x86:gs)
          `(sys.lap-x86:cmp64 ((:rax 8) ,+tls-base-offset+) -2)
          `(sys.lap-x86:je ,no-tls-slot)
          `(sys.lap-x86:gs)
          `(sys.lap-x86:mov64 ((:rax 8) ,+tls-base-offset+) :r8)
          `(sys.lap-x86:jmp ,out)
          no-tls-slot
          `(sys.lap-x86:mov64 (:symbol-value :r9) :r8)
          out)
    *r8-value*))

(defbuiltin symbol-function (symbol) ()
  (let ((type-error-label (gensym))
	(undefined-function-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (emit-trailer (undefined-function-error-label)
      (load-constant :r13 'sys.int::raise-undefined-function-via-%symbol-function)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 1))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r8 symbol t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-symbol+)
	  `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:cmp64 (:symbol-function :r8) undefined-function)
	  `(sys.lap-x86:je ,undefined-function-error-label)
          `(sys.lap-x86:mov64 :r8 (:symbol-function :r8)))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf symbol-function) (value symbol) ()
  (let ((symbol-type-error-label (gensym))
	(function-type-error-label (gensym)))
    (emit-trailer (symbol-type-error-label)
      (raise-type-error :r9 'symbol))
    (emit-trailer (function-type-error-label)
      (raise-type-error :r8 'function))
    (load-in-reg :r9 symbol t)
    (load-in-r8 value t)
    (emit `(sys.lap-x86:mov8 :al :r9l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-symbol+)
	  `(sys.lap-x86:jne ,symbol-type-error-label)
	  `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-function+)
	  `(sys.lap-x86:jne ,function-type-error-label)
	  `(sys.lap-x86:mov64 (:symbol-function :r9) :r8))
    *r8-value*))

;; TODO type checking? ensure value is a plist?
(define-accessor symbol-plist symbol sys.int::+tag-symbol+ :symbol-plist)

;; TODO: type checking, value should be a fixnum.
(define-accessor sys.int::%symbol-flags symbol sys.int::+tag-symbol+ :symbol-flags)

;;; TODO: should just test the tag bits.
(defbuiltin boundp (symbol) ()
  (let ((type-error-label (gensym))
        (no-tls-slot (gensym))
        (out (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (load-in-reg :r8 symbol t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-symbol+)
	  `(sys.lap-x86:jne ,type-error-label)
          ;; Extract the TLS offset.
          `(sys.lap-x86:mov32 :eax (:symbol-flags :r8))
          `(sys.lap-x86:shr32 :eax ,+tls-offset-shift+)
          `(sys.lap-x86:and32 :eax #xFFFF)
          `(sys.lap-x86:jz ,no-tls-slot)
          ;; Check if the TLS slot holds a value.
          `(sys.lap-x86:gs)
          `(sys.lap-x86:cmp64 ((:rax 8) ,+tls-base-offset+) -2)
          `(sys.lap-x86:je ,no-tls-slot)
          `(sys.lap-x86:gs)
          `(sys.lap-x86:cmp64 ((:rax 8) ,+tls-base-offset+) ,sys.int::+tag-unbound-value+)
          `(sys.lap-x86:jmp ,out)
          no-tls-slot
	  `(sys.lap-x86:cmp64 (:symbol-value :r8) ,sys.int::+tag-unbound-value+)
          out)
    (predicate-result :ne)))

(defbuiltin makunbound (symbol) ()
  (let ((type-error-label (gensym))
        (no-tls-slot (gensym))
        (out (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (load-in-reg :r8 symbol t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-symbol+)
	  `(sys.lap-x86:jne ,type-error-label)
          ;; Extract the TLS offset.
          `(sys.lap-x86:mov32 :eax (:symbol-flags :r8))
          `(sys.lap-x86:shr32 :eax ,+tls-offset-shift+)
          `(sys.lap-x86:and32 :eax #xFFFF)
          `(sys.lap-x86:jz ,no-tls-slot)
          ;; Check if the TLS slot holds a value.
          `(sys.lap-x86:gs)
          `(sys.lap-x86:cmp64 ((:rax 8) ,+tls-base-offset+) -2)
          `(sys.lap-x86:je ,no-tls-slot)
          `(sys.lap-x86:gs)
          `(sys.lap-x86:mov64 ((:rax 8) ,+tls-base-offset+) ,sys.int::+tag-unbound-value+)
          `(sys.lap-x86:jmp ,out)
          no-tls-slot
	  `(sys.lap-x86:mov64 (:symbol-value :r8) ,sys.int::+tag-unbound-value+)
          out)
    *r8-value*))

;;; FBOUNDP but just for symbols.
(defbuiltin sys.int::%fboundp (symbol) ()
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (load-in-reg :r8 symbol t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-symbol+)
	  `(sys.lap-x86:jne ,type-error-label)
	  `(sys.lap-x86:cmp64 (:symbol-function :r8) undefined-function))
    (predicate-result :ne)))

;;; FMAKUNBOUND but just for symbols.
(defbuiltin sys.int::%fmakunbound (symbol) ()
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'symbol))
    (load-in-reg :r8 symbol t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-symbol+)
	  `(sys.lap-x86:jne ,type-error-label)
	  `(sys.lap-x86:mov64 (:symbol-function :r8) undefined-function))
    *r8-value*))

(define-tag-type-predicate consp sys.int::+tag-cons+)

(defbuiltin car (list) ()
  (let ((type-error-label (gensym))
        (out-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'list))
    (load-in-reg :r8 list t)
    (smash-r8)
    (emit `(sys.lap-x86:cmp64 :r8 nil)
          `(sys.lap-x86:je ,out-label)
          `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-cons+)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :r8 (:car :r8))
          out-label)
    (setf *r8-value* (list (gensym)))))

(defbuiltin cdr (list) ()
  (let ((type-error-label (gensym))
        (out-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'list))
    (load-in-reg :r8 list t)
    (smash-r8)
    (emit `(sys.lap-x86:cmp64 :r8 nil)
          `(sys.lap-x86:je ,out-label)
          `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-cons+)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :r8 (:cdr :r8))
          out-label)
    (setf *r8-value* (list (gensym)))))

(define-writer (setf car) cons sys.int::+tag-cons+ :car)
(define-writer (setf cdr) cons sys.int::+tag-cons+ :cdr)

(define-tag-type-predicate sys.int::%array-header-p sys.int::+tag-array-header+)
(define-accessor sys.int::%array-header-dimensions
    sys.int::%array-header sys.int::+tag-array-header+
    :array-header-dimensions)
(define-accessor sys.int::%array-header-fill-pointer
    sys.int::%array-header sys.int::+tag-array-header+
    :array-header-fill-pointer)
(define-accessor sys.int::%array-header-info
    sys.int::%array-header sys.int::+tag-array-header+
    :array-header-info)
(define-accessor sys.int::%array-header-storage
    sys.int::%array-header sys.int::+tag-array-header+
    :array-header-storage)

(defbuiltin null (object) ()
  (load-in-reg :r8 object t)
  (emit `(sys.lap-x86:cmp64 :r8 nil))
  (predicate-result :e))

(defbuiltin not (object) ()
  (load-in-reg :r8 object t)
  (emit `(sys.lap-x86:cmp64 :r8 nil))
  (predicate-result :e))

(defbuiltin eq (x y) ()
  ;; Ensure constants are on the right-hand side.
  (when (quoted-constant-p x)
    (rotatef x y))
  (cond ((quoted-constant-p y)
         (let ((constant (second y)))
           (load-in-reg :r8 x t)
           ;; Should characters and single-floats be loaded into a register
           ;; for comparison or should they be compared through the constant
           ;; pool? Currently they go through the constant pool...
           (etypecase constant
             ((signed-byte 28) ; Must fit in an IMM32 after fixnumization.
              (emit `(sys.lap-x86:cmp64 :r8 ,(* constant 8))))
             (t (emit `(sys.lap-x86:cmp64 :r8 (:constant ,constant)))))
           (predicate-result :e)))
        (t (load-in-reg :r9 y t)
           (load-in-reg :r8 x t)
           (emit `(sys.lap-x86:cmp64 :r8 :r9))
           (predicate-result :e))))

(defbuiltin eql (x y) ()
  ;; Ensure constants are on the right-hand side.
  (when (quoted-constant-p x)
    (rotatef x y))
  (cond ((quoted-constant-p y)
         (let ((constant (second y)))
           (load-in-reg :r8 x t)
           ;; Should characters and single-floats be loaded into a register
           ;; for comparison or should they be compared through the constant
           ;; pool? Currently they go through the constant pool...
           (etypecase constant
             ((signed-byte 28) ; Must fit in an IMM32 after fixnumization.
              (emit `(sys.lap-x86:cmp64 :r8 ,(* constant 8))))
             (t (emit `(sys.lap-x86:cmp64 :r8 (:constant ,constant)))))
           (predicate-result :e)))
        (t (load-in-reg :r9 y t)
           (load-in-reg :r8 x t)
           (emit `(sys.lap-x86:cmp64 :r8 :r9))
           (predicate-result :e))))

(defbuiltin system:io-port/8 (port) ()
  (smash-r8)
  (emit `(sys.lap-x86:xor32 :eax :eax))
  (cond ((and (consp port)
              (eql (first port) 'quote)
              (<= 0 (second port) 255))
         (smash-r8)
         (setf *load-list* (delete port *load-list*))
         (emit `(sys.lap-x86:in8 ,(second port))))
        (t (let ((type-error-label (gensym)))
             (emit-trailer (type-error-label)
               (raise-type-error :r8 '(unsigned-byte 16)))
             (load-in-r8 port t)
             (emit `(sys.lap-x86:test64 :r8 #b111)
                   `(sys.lap-x86:jnz ,type-error-label)
                   `(sys.lap-x86:cmp64 :r8 ,(* #x10000 8))
                   `(sys.lap-x86:jae ,type-error-label)
                   `(sys.lap-x86:mov64 :rdx :r8)
                   ;; Convert to a raw integer.
                   `(sys.lap-x86:sar32 :edx 3)
                   `(sys.lap-x86:in8 :dx)))))
  (emit `(sys.lap-x86:shl32 :eax 3)
        `(sys.lap-x86:mov32 :r8d :eax))
  (setf *r8-value* (list (gensym))))

(defbuiltin (setf system:io-port/8) (value port) ()
  (load-in-r8 value t)
  (let ((value-type-error-label (gensym)))
    (emit-trailer (value-type-error-label)
      (raise-type-error :r8 '(unsigned-byte 8)))
    (emit `(sys.lap-x86:test64 :r8 #b111)
          `(sys.lap-x86:jnz ,value-type-error-label)
          `(sys.lap-x86:cmp64 :r8 ,(* #x100 8))
          `(sys.lap-x86:jae ,value-type-error-label)
          `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:sar32 :eax 3))
    (cond ((and (consp port)
                (eql (first port) 'quote)
                (<= 0 (second port) 255))
           (setf *load-list* (delete port *load-list*))
           (emit `(sys.lap-x86:out8 ,(second port))))
          (t (let ((type-error-label (gensym)))
               (emit-trailer (type-error-label)
                             (raise-type-error :r9 '(unsigned-byte 16)))
               (load-in-reg :r9 port t)
               (emit `(sys.lap-x86:test64 :r9 #b111)
                     `(sys.lap-x86:jnz ,type-error-label)
                     `(sys.lap-x86:cmp64 :r9 ,(* #x10000 8))
                     `(sys.lap-x86:jae ,type-error-label)
                     `(sys.lap-x86:mov64 :rdx :r9)
                     ;; Convert to a raw integer.
                     `(sys.lap-x86:sar32 :edx 3)
                     `(sys.lap-x86:out8 :dx)))))
    value))

(defbuiltin system:io-port/16 (port) ()
  (smash-r8)
  (emit `(sys.lap-x86:xor32 :eax :eax))
  (cond ((and (consp port)
              (eql (first port) 'quote)
              (<= 0 (second port) 255))
         (smash-r8)
         (setf *load-list* (delete port *load-list*))
         (emit `(sys.lap-x86:in16 ,(second port))))
        (t (let ((type-error-label (gensym)))
             (emit-trailer (type-error-label)
               (raise-type-error :r8 '(unsigned-byte 16)))
             (load-in-r8 port t)
             (emit `(sys.lap-x86:test64 :r8 #b111)
                   `(sys.lap-x86:jnz ,type-error-label)
                   `(sys.lap-x86:cmp64 :r8 ,(* #x10000 8))
                   `(sys.lap-x86:jae ,type-error-label)
                   `(sys.lap-x86:mov64 :rdx :r8)
                   ;; Convert to a raw integer.
                   `(sys.lap-x86:sar32 :edx 3)
                   `(sys.lap-x86:in16 :dx)))))
  (emit `(sys.lap-x86:shl32 :eax 3)
        `(sys.lap-x86:mov32 :r8d :eax))
  (setf *r8-value* (list (gensym))))

(defbuiltin (setf system:io-port/16) (value port) ()
  (load-in-r8 value t)
  (let ((value-type-error-label (gensym)))
    (emit-trailer (value-type-error-label)
      (raise-type-error :r8 '(unsigned-byte 16)))
    (emit `(sys.lap-x86:test64 :r8 #b111)
          `(sys.lap-x86:jnz ,value-type-error-label)
          `(sys.lap-x86:cmp64 :r8 ,(* #x10000 8))
          `(sys.lap-x86:jae ,value-type-error-label)
          `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:sar32 :eax 3))
    (cond ((and (consp port)
                (eql (first port) 'quote)
                (<= 0 (second port) 255))
           (setf *load-list* (delete port *load-list*))
           (emit `(sys.lap-x86:out16 ,(second port))))
          (t (let ((type-error-label (gensym)))
               (emit-trailer (type-error-label)
                             (raise-type-error :r9 '(unsigned-byte 16)))
               (load-in-reg :r9 port t)
               (emit `(sys.lap-x86:test64 :r9 #b111)
                     `(sys.lap-x86:jnz ,type-error-label)
                     `(sys.lap-x86:cmp64 :r9 ,(* #x10000 8))
                     `(sys.lap-x86:jae ,type-error-label)
                     `(sys.lap-x86:mov64 :rdx :r9)
                     ;; Convert to a raw integer.
                     `(sys.lap-x86:sar32 :edx 3)
                     `(sys.lap-x86:out16 :dx)))))
    value))

(defbuiltin system:io-port/32 (port) ()
  (smash-r8)
  (emit `(sys.lap-x86:xor32 :eax :eax))
  (cond ((and (consp port)
              (eql (first port) 'quote)
              (<= 0 (second port) 255))
         (smash-r8)
         (setf *load-list* (delete port *load-list*))
         (emit `(sys.lap-x86:in32 ,(second port))))
        (t (let ((type-error-label (gensym)))
             (emit-trailer (type-error-label)
               (raise-type-error :r8 '(unsigned-byte 16)))
             (load-in-r8 port t)
             (emit `(sys.lap-x86:test64 :r8 #b111)
                   `(sys.lap-x86:jnz ,type-error-label)
                   `(sys.lap-x86:cmp64 :r8 ,(* #x10000 8))
                   `(sys.lap-x86:jae ,type-error-label)
                   `(sys.lap-x86:mov64 :rdx :r8)
                   ;; Convert to a raw integer.
                   `(sys.lap-x86:sar32 :edx 3)
                   `(sys.lap-x86:in32 :dx)))))
  (emit `(sys.lap-x86:shl64 :rax 3)
        `(sys.lap-x86:mov64 :r8 :rax))
  (setf *r8-value* (list (gensym))))

(defbuiltin (setf system:io-port/32) (value port) ()
  (load-in-r8 value t)
  (let ((value-type-error-label (gensym)))
    (emit-trailer (value-type-error-label)
      (raise-type-error :r8 '(unsigned-byte 32)))
    (emit `(sys.lap-x86:test64 :r8 #b111)
          `(sys.lap-x86:jnz ,value-type-error-label)
          `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:sar64 :rax 3)
          `(sys.lap-x86:mov64 :rdx :rax)
          `(sys.lap-x86:sar64 :rdx 32)
          `(sys.lap-x86:jnz ,value-type-error-label))
    (cond ((and (consp port)
                (eql (first port) 'quote)
                (<= 0 (second port) 255))
           (setf *load-list* (delete port *load-list*))
           (emit `(sys.lap-x86:out32 ,(second port))))
          (t (let ((type-error-label (gensym)))
               (emit-trailer (type-error-label)
                             (raise-type-error :r9 '(unsigned-byte 16)))
               (load-in-reg :r9 port t)
               (emit `(sys.lap-x86:test64 :r9 #b111)
                     `(sys.lap-x86:jnz ,type-error-label)
                     `(sys.lap-x86:cmp64 :r9 ,(* #x10000 8))
                     `(sys.lap-x86:jae ,type-error-label)
                     `(sys.lap-x86:mov64 :rdx :r9)
                     ;; Convert to a raw integer.
                     `(sys.lap-x86:sar32 :edx 3)
                     `(sys.lap-x86:out32 :dx)))))
    value))

(defbuiltin simple-vector-p (object) ()
  (let ((out (gensym)))
    (load-in-r8 object t)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
          `(sys.lap-x86:jne ,out)
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
          `(sys.lap-x86:test8 :al :al)
          ;; Subtle. OUT can be reached through either the tag check
          ;; or through the array type check. Both checks clear ZF when
          ;; they fail.
          out)
    (predicate-result :z)))

(defbuiltin svref (simple-vector index) ()
  (let ((type-error-label (gensym))
        (bounds-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'simple-vector))
    (emit-trailer (bounds-error-label)
      (load-constant :r13 'sys.int::raise-bounds-error)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r8 simple-vector t)
    (smash-r8)
    (load-in-reg :r9 index t)
    (fixnum-check :r9)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
          `(sys.lap-x86:jne ,type-error-label)
          ;; Load header word.
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
          ;; Check array type.
          `(sys.lap-x86:test8 :al :al)
          `(sys.lap-x86:jnz ,type-error-label)
          ;; Check bounds.
          `(sys.lap-x86:mov64 :rcx :r9)
          `(sys.lap-x86:shr64 :rcx 3)
          `(sys.lap-x86:shr64 :rax 8)
          `(sys.lap-x86:cmp64 :rcx :rax)
          `(sys.lap-x86:jae ,bounds-error-label)
          ;; Load!
          `(sys.lap-x86:mov64 :r8 (:r8 1 (:rcx 8))))
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::%svref (simple-vector index) ()
  "Fast SVREF. No type check or bounds check."
  (load-in-r8 simple-vector t)
  (smash-r8)
  (cond ((quoted-constant-p index)
         (emit `(sys.lap-x86:mov64 :r8 (:r8 ,(+ 1 (* (second index) 8))))))
        (t (load-in-reg :r9 index t)
           (emit `(sys.lap-x86:mov64 :r8 (:r8 1 :r9)))))
  (setf *r8-value* (list (gensym))))

(defbuiltin (setf svref) (value simple-vector index) ()
  (let ((type-error-label (gensym))
        (bounds-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'simple-vector))
    (emit-trailer (bounds-error-label)
      (load-constant :r13 'sys.int::raise-bounds-error)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r8 value t)
    (load-in-reg :r9 simple-vector t)
    (load-in-reg :r10 index t)
    (fixnum-check :r10)
    (emit `(sys.lap-x86:mov8 :al :r9l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
          `(sys.lap-x86:jne ,type-error-label)
          ;; Load header word.
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r9))
          ;; Check array type.
          `(sys.lap-x86:test8 :al :al)
          `(sys.lap-x86:jnz ,type-error-label)
          ;; Check bounds.
          `(sys.lap-x86:mov64 :rcx :r10)
          `(sys.lap-x86:shr64 :rcx 3)
          `(sys.lap-x86:shr64 :rax 8)
          `(sys.lap-x86:cmp64 :rcx :rax)
          `(sys.lap-x86:jae ,bounds-error-label)
          ;; Store!
          `(sys.lap-x86:mov64 (:r9 1 (:rcx 8)) :r8))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf sys.int::%svref) (value simple-vector index) ()
  "Fast SVREF. No type check or bounds check."
  (load-in-reg :r8 value t)
  (load-in-reg :r9 simple-vector t)
  (cond ((quoted-constant-p index)
         (emit `(sys.lap-x86:mov64 (:r9 ,(+ 1 (* (second index) 8))) :r8)))
        (t (load-in-reg :r10 index t)
           (emit `(sys.lap-x86:mov64 (:r9 1 :r10) :r8))))
  (setf *r8-value* (list (gensym))))

(define-tag-type-predicate characterp sys.int::+tag-character+)

(defbuiltin system.internals::read-frame-pointer () ()
  (smash-r8)
  (emit `(sys.lap-x86:mov64 :rax :cfp)
        `(sys.lap-x86:shl64 :rax 3)
        `(sys.lap-x86:mov64 :r8 :rax))
  (setf *r8-value* (list (gensym))))

(define-array-like-predicate system.internals::structure-object-p
    sys.int::+array-type-struct+)

(defbuiltin system.internals::%struct-slot (object slot) ()
  (let ((type-error-label (gensym))
        (bounds-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'structure-object))
    (emit-trailer (bounds-error-label)
      (load-constant :r13 'sys.int::raise-bounds-error)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r9 slot t)
    (fixnum-check :r9)
    (load-in-reg :r8 object t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
          `(sys.lap-x86:cmp8 :al ,(ash sys.int::+array-type-struct+ sys.int::+array-type-shift+))
          `(sys.lap-x86:jne ,type-error-label)
          ;; Convert size and slot number to integers.
          `(sys.lap-x86:shr64 :rax 8)
          `(sys.lap-x86:mov64 :rcx :r9)
          `(sys.lap-x86:shr64 :rcx 3)
          ;; Check bounds.
          `(sys.lap-x86:cmp64 :rcx :rax)
          `(sys.lap-x86:jae ,bounds-error-label)
          ;; Load.
          `(sys.lap-x86:mov64 :r8 (:r8 1 (:rcx 8))))
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf system.internals::%struct-slot) (value object slot) ()
  (let ((type-error-label (gensym))
        (bounds-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r9 'structure-object))
    (emit-trailer (bounds-error-label)
      (load-constant :r13 'sys.int::raise-bounds-error)
      (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw 2))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:ud2)))
    (load-in-reg :r10 slot t)
    (fixnum-check :r10)
    (load-in-reg :r9 object t)
    (load-in-reg :r8 value t)
    (emit `(sys.lap-x86:mov8 :al :r9l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r9))
          `(sys.lap-x86:cmp8 :al ,(ash sys.int::+array-type-struct+ sys.int::+array-type-shift+))
          `(sys.lap-x86:jne ,type-error-label)
          ;; Convert size and slot number to integers.
          `(sys.lap-x86:shr64 :rax 8)
          `(sys.lap-x86:mov64 :rcx :r10)
          `(sys.lap-x86:shr64 :rcx 3)
          ;; Check bounds.
          `(sys.lap-x86:cmp64 :rcx :rax)
          `(sys.lap-x86:jae ,bounds-error-label)
          ;; Store.
          `(sys.lap-x86:mov64 (:r9 1 (:rcx 8)) :r8))
    *r8-value*))

(defbuiltin char-code (char) ()
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
		  (raise-type-error :r8 'character))
    (load-in-r8 char t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-character+)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Mask away the non-code bits.
	  `(sys.lap-x86:and32 :r8d #x01fffff0)
	  ;; Shift to fixnum.
	  `(sys.lap-x86:shr32 :r8d 1))
    (setf *r8-value* (list (gensym)))))

(defbuiltin system:char-bits (character) ()
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 'character))
    (load-in-r8 character t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
          `(sys.lap-x86:and8 :al #b1111)
          `(sys.lap-x86:cmp8 :al ,sys.int::+tag-character+)
          `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:and32 :r8d #x1e000000)
          `(sys.lap-x86:shr32 :r8d 22))
    (setf *r8-value* (list (gensym)))))

(defbuiltin char-int (char) ()
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
		  (raise-type-error :r8 'character))
    (load-in-r8 char t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-character+)
	  `(sys.lap-x86:jne ,type-error-label)
	  ;; Mask away the tag bits.
	  `(sys.lap-x86:and32 :r8d -16)
	  ;; Shift to fixnum.
	  `(sys.lap-x86:shr32 :r8d 1))
    (setf *r8-value* (list (gensym)))))

(defbuiltin system:fixnump (object) ()
  (load-in-reg :r8 object t)
  (emit `(sys.lap-x86:test8 :r8l #b111))
  (predicate-result :z))

(defbuiltin sys.int::%%assemble-value (address tag) ()
  (load-in-reg :rax tag t)
  (load-in-reg :r8 address t)
  (smash-r8)
  (emit `(sys.lap-x86:shr32 :eax 3)
        `(sys.lap-x86:shr64 :r8 3)
        `(sys.lap-x86:or64 :r8 :rax))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::%pointer-field (value) ()
  (load-in-reg :r8 value t)
  (smash-r8)
  (emit `(sys.lap-x86:and64 :r8 -16)
        `(sys.lap-x86:shr64 :r8 1))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::%tag-field (value) ()
  (load-in-reg :r8 value t)
  (smash-r8)
  (emit `(sys.lap-x86:shl64 :r8 3)
        `(sys.lap-x86:and64 :r8 #b1111000))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::lisp-object-address (value) ()
  (load-in-reg :r8 value t)
  (smash-r8)
  ;; Convert to fixnum.
  (emit `(sys.lap-x86:shl64 :r8 3))
  (setf *r8-value* (list (gensym))))

(define-array-like-predicate sys.int::std-instance-p sys.int::+array-type-std-instance+)
(define-array-like-accessor sys.int::std-instance-class
    sys.int::std-instance sys.int::+array-type-std-instance+
    0)
(define-array-like-accessor sys.int::std-instance-slots
    sys.int::std-instance sys.int::+array-type-std-instance+
    1)

(define-tag-type-predicate functionp sys.int::+tag-function+)

(defbuiltin sys.int::%stihlt () ()
  (emit `(sys.lap-x86:sti)
        `(sys.lap-x86:hlt))
  ''nil)

(defbuiltin sys.int::%sti () ()
  (emit `(sys.lap-x86:sti))
  ''nil)

(defbuiltin sys.int::%cli () ()
  (emit `(sys.lap-x86:cli))
  ''nil)

(defbuiltin sys.int::%hlt () ()
  (emit `(sys.lap-x86:hlt))
  ''nil)

(defbuiltin sys.int::%interrupt-state () ()
  (emit `(sys.lap-x86:pushf)
        `(sys.lap-x86:pop :rax)
        `(sys.lap-x86:test32 :eax #x200))
  (predicate-result :nz))

(defbuiltin sys.int::%cr3 () ()
  (smash-r8)
  (emit `(sys.lap-x86:movcr :rax :cr3)
        `(sys.lap-x86:shl64 :rax 3)
        `(sys.lap-x86:mov64 :r8 :rax))
  (setf *r8-value* (list (gensym))))

(defbuiltin (setf sys.int::%cr3) (value) ()
  (load-in-r8 value t)
  (fixnum-check :r8)
  (emit `(sys.lap-x86:mov64 :rax :r8)
        `(sys.lap-x86:shr64 :rax 3)
        `(sys.lap-x86:movcr :cr3 :rax))
  value)

(define-array-like-predicate sys.int::bignump sys.int::+array-type-bignum+)
(define-tag-type-predicate floatp sys.int::+tag-single-float+)

(defbuiltin sys.int::%array-like-length (thing) ()
  (let ((type-error-label (gensym)))
    (emit-trailer (type-error-label)
      (raise-type-error :r8 '%array-like))
    (load-in-r8 thing t)
    (smash-r8)
    (emit `(sys.lap-x86:mov8 :al :r8l)
	  `(sys.lap-x86:and8 :al #b1111)
	  `(sys.lap-x86:cmp8 :al ,sys.int::+tag-array-like+)
	  `(sys.lap-x86:jne ,type-error-label)
          `(sys.lap-x86:mov64 :rax (:simple-array-header :r8))
	  ;; Convert length to fixnum.
	  `(sys.lap-x86:shr64 :rax 5)
	  `(sys.lap-x86:and64 :rax -8)
	  `(sys.lap-x86:mov64 :r8 :rax))
    (setf *r8-value* (list (gensym)))))

(defbuiltin sys.int::%%special-stack-pointer () ()
  (smash-r8)
  (emit `(sys.lap-x86:gs)
        `(sys.lap-x86:mov64 :r8 (,+binding-stack-gs-offset+)))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::%%block-info-binding-stack-pointer (block-info) ()
  ;; Read the saved binding stack pointer from a block-info.
  (load-in-r8 block-info t)
  (smash-r8)
  (emit `(sys.lap-x86:mov64 :r8 (:r8 8)))
  (setf *r8-value* (list (gensym))))

(defbuiltin sys.int::%%tagbody-info-binding-stack-pointer (tagbody-info) ()
  ;; Read the saved binding stack pointer from a tagbody-info.
  (load-in-r8 tagbody-info t)
  (smash-r8)
  (emit `(sys.lap-x86:mov64 :r8 (:r8 8)))
  (setf *r8-value* (list (gensym))))

;;; TODO: Check for constants here.
(defbuiltin sys.int::%%bind (symbol value) (t nil)
  ;; Don't kill here, going to reload & kill later in the function.
  (load-in-reg :r9 symbol)
  (smash-r8)
  (let ((has-tls-slot (gensym)))
    ;; Ensure there is a TLS slot.
    (emit `(sys.lap-x86:mov32 :eax (:symbol-flags :r9))
          `(sys.lap-x86:shr32 :eax ,+tls-offset-shift+)
          `(sys.lap-x86:and32 :eax #xFFFF)
          `(sys.lap-x86:jnz ,has-tls-slot))
    ;; Nope, allocate a new one.
    (emit `(sys.lap-x86:mov64 :r8 :r9))
    (call-support-function 'sys.int::%allocate-tls-slot 1)
    (load-in-reg :r9 symbol t)
    (emit `(sys.lap-x86:mov64 :rax :r8)
          `(sys.lap-x86:shr32 :eax 3)
          has-tls-slot
          ;; Save the old value on the binding stack.
          ;; See also: http://www.sbcl.org/sbcl-internals/Binding-and-unbinding.html
          ;; Bump binding stack.
          `(sys.lap-x86:gs)
          `(sys.lap-x86:sub64 (,+binding-stack-gs-offset+) 16)
          ;; Load binding stack pointer into RDX.
          `(sys.lap-x86:gs)
          `(sys.lap-x86:mov64 :rdx (,+binding-stack-gs-offset+))
          ;; Read the old symbol value.
          `(sys.lap-x86:gs)
          `(sys.lap-x86:mov64 :r10 ((:rax 8) ,+tls-base-offset+))
          ;; Store the old value on the stack.
          `(sys.lap-x86:mov64 (:rdx 8) :r10)
          ;; Store the symbol.
          `(sys.lap-x86:mov64 (:rdx) :r9)))
  ;; Store new value.
  (load-in-r8 value t)
  (emit `(sys.lap-x86:gs)
        `(sys.lap-x86:mov64 ((:rax 8) ,+tls-base-offset+) :r8))
  ''nil)

;;; TODO: Check for constants here.
(defbuiltin sys.int::%%push-special-stack (a b) (t nil)
  (load-in-reg :r9 b t)
  (load-in-reg :r8 a t)
  (emit `(sys.lap-x86:gs)
        `(sys.lap-x86:sub64 (,+binding-stack-gs-offset+) 16)
        `(sys.lap-x86:gs)
        `(sys.lap-x86:mov64 :rax (,+binding-stack-gs-offset+))
        `(sys.lap-x86:mov64 (:rax 8) :r9)
        `(sys.lap-x86:mov64 (:rax 0) :r8))
  ''nil)

(defbuiltin sys.int::%%unbind () (t nil)
  ;; Top entry in the binding stack is a special variable binding.
  ;; It's a symbol and the old value.
  ;; Pop the stack & restore the old value.
  (smash-r8)
  (emit `(sys.lap-x86:gs)
        `(sys.lap-x86:mov64 :rax (,+binding-stack-gs-offset+))
        `(sys.lap-x86:mov64 :r8 (:rax))
        `(sys.lap-x86:mov64 :r9 (:rax 8))
        `(sys.lap-x86:mov32 :edx (:symbol-flags :r8))
        `(sys.lap-x86:shr32 :edx ,+tls-offset-shift+)
        `(sys.lap-x86:and32 :edx #xFFFF)
        `(sys.lap-x86:gs)
        `(sys.lap-x86:mov64 ((:rdx 8) ,+tls-base-offset+) :r9)
        `(sys.lap-x86:mov64 (:rax 0) 0)
        `(sys.lap-x86:mov64 (:rax 8) 0)
        `(sys.lap-x86:gs)
        `(sys.lap-x86:add64 (,+binding-stack-gs-offset+) 16))
  ''nil)

(defbuiltin sys.int::%%disestablish-block-or-tagbody () (t nil)
  ;; Top entry in the binding stack is a block or tagbody entry.
  ;; It's a environment simple-vector & an offset.
  ;; Pop the stack & set env[offset] = NIL.
  (smash-r8)
  (emit `(sys.lap-x86:gs)
        `(sys.lap-x86:mov64 :rax (,+binding-stack-gs-offset+))
        `(sys.lap-x86:mov64 :r8 (:rax 0))
        `(sys.lap-x86:mov64 :rcx (:rax 8))
        `(sys.lap-x86:mov64 (:r8 :rcx ,(+ (- sys.int::+tag-array-like+) 8)) nil)
        `(sys.lap-x86:mov64 (:rax 0) 0)
        `(sys.lap-x86:mov64 (:rax 8) 0)
        `(sys.lap-x86:gs)
        `(sys.lap-x86:add64 (,+binding-stack-gs-offset+) 16))
  ''nil)

(defbuiltin sys.int::%%disestablish-unwind-protect () (t nil)
  ;; Top entry in the binding stack is an unwind-protect entry.
  ;; It's a function and environment object.
  ;; Pop the stack & call the function with the environment object.
  (smash-r8)
  (emit `(sys.lap-x86:gs)
        `(sys.lap-x86:mov64 :rax (,+binding-stack-gs-offset+))
        `(sys.lap-x86:mov64 :r13 (:rax 0))
        `(sys.lap-x86:mov64 :rbx (:rax 8))
        `(sys.lap-x86:mov64 (:rax 0) 0)
        `(sys.lap-x86:mov64 (:rax 8) 0)
        `(sys.lap-x86:gs)
        `(sys.lap-x86:add64 (,+binding-stack-gs-offset+) 16)
        `(sys.lap-x86:xor32 :ecx :ecx)
        `(sys.lap-x86:call :r13))
  ''nil)

(defun call-support-function (symbol n-args &optional (single-value t))
  (declare (ignore single-value))
  (load-constant :r13 symbol)
  (emit `(sys.lap-x86:mov32 :ecx ,(fixnum-to-raw n-args))
        `(sys.lap-x86:call (:symbol-function :r13))))

(defun emit-type-error (register type)
  (let ((label (gensym "type-error")))
    (emit-trailer (label)
      (raise-type-error register type))
    label))

(defbuiltin sys.int::msr (register) ()
  (smash-r8)
  (cond ((and (quoted-constant-p register)
              (typep (second register) '(unsigned-byte 32)))
         (emit `(sys.lap-x86:mov32 :ecx ,(second register))))
        (t (let ((type-error-label (emit-type-error :r8 '(unsigned-byte 32))))
             (load-in-r8 register t)
             (smash-r8)
             (emit `(sys.lap-x86:test64 :r8 #b111)
                   `(sys.lap-x86:jnz ,type-error-label)
                   `(sys.lap-x86:mov64 :rsi ,(fixnum-to-raw (ash 1 32)))
                   `(sys.lap-x86:cmp64 :r8 :rsi)
                   `(sys.lap-x86:jae ,type-error-label)
                   `(sys.lap-x86:mov64 :rcx :r8)
                   `(sys.lap-x86:shr64 :rcx 3)))))
  (let ((overflow-error-label (gensym))
        (ok-label (gensym))
        (resume (gensym)))
    (emit-trailer (overflow-error-label)
      (emit `(sys.lap-x86:mov64 :r13 (:constant sys.int::%%make-bignum-64-rax))
            `(sys.lap-x86:xor32 :edx :edx)
            ;; CL holds the high 4 bits of the word.
            ;; If bit 3 is non-zero, then the sign bit of word was set & a 128-bit bignum
            ;; is required.
            `(sys.lap-x86:test8 :cl #b1000)
            `(sys.lap-x86:cmov64nz :r13 (:constant sys.int::%%make-bignum-128-rdx-rax))
            `(sys.lap-x86:call (:symbol-function :r13))
            `(sys.lap-x86:jmp ,resume)))
    (emit `(sys.lap-x86:rdmsr)
          ;; Convert result to integer.
          `(sys.lap-x86:shl64 :rdx 32)
          `(sys.lap-x86:or64 :rax :rdx)
          ;; Check for overflow. Top 4 bits must be all 0.
          `(sys.lap-x86:mov64 :rcx :rax)
          `(sys.lap-x86:sar64 :rcx 60)
          `(sys.lap-x86:jnz ,overflow-error-label)
          ok-label
          ;; Convert to fixnum.
          `(sys.lap-x86:lea64 :r8 ((:rax 8)))
          resume)
    (setf *r8-value* (list (gensym)))))

(defbuiltin (setf sys.int::msr) (value register) ()
  (smash-r8)
  (cond ((and (quoted-constant-p register)
              (typep (second register) '(unsigned-byte 32)))
         (emit `(sys.lap-x86:mov32 :ecx ,(second register))))
        (t (let ((type-error-label (emit-type-error :r8 '(unsigned-byte 32))))
             (load-in-r8 register t)
             (smash-r8)
             (emit `(sys.lap-x86:test64 :r8 #b111)
                   `(sys.lap-x86:jnz ,type-error-label)
                   `(sys.lap-x86:mov64 :rsi ,(fixnum-to-raw (ash 1 32)))
                   `(sys.lap-x86:cmp64 :r8 :rsi)
                   `(sys.lap-x86:jae ,type-error-label)
                   `(sys.lap-x86:mov64 :rcx :r8)
                   `(sys.lap-x86:shr64 :rcx 3)))))
  (cond ((and (quoted-constant-p value)
              (typep (second value) '(unsigned-byte 64)))
         (emit `(sys.lap-x86:mov32 :eax ,(ldb (byte 32 0) (second value)))
               `(sys.lap-x86:mov32 :edx ,(ldb (byte 32 32) (second value)))))
        (t (let ((type-error-label (gensym))
                 (bignum-path (gensym "mr-ub64-bignum"))
                 (len-2-bignum (gensym "mr-ub64-len-2-bignum"))
                 (value-extracted (gensym "mr-ub64-value-extracted")))
             (emit-trailer (bignum-path)
               ;; Check for bignumness.
               (emit `(sys.lap-x86:and8 :dl #b1111)
                     `(sys.lap-x86:cmp8 :dl #.sys.int::+tag-array-like+)
                     `(sys.lap-x86:jne ,type-error-label)
                     `(sys.lap-x86:mov64 :rdx (:simple-array-header :r8))
                     `(sys.lap-x86:cmp8 :dl #.(ash sys.int::+array-type-bignum+ 3))
                     `(sys.lap-x86:jne ,type-error-label)
                     `(sys.lap-x86:shr64 :rdx 8)
                     ;; RDX = bignum length.
                     `(sys.lap-x86:cmp64 :rdx 2)
                     `(sys.lap-x86:je ,len-2-bignum)
                     ;; Not length 2, must be length 1.
                     `(sys.lap-x86:cmp64 :rdx 1)
                     `(sys.lap-x86:jne ,type-error-label)
                     ;; And the sign bit must be clear.
                     `(sys.lap-x86:mov64 :rdx (:r8 #.(+ (- sys.int::+tag-array-like+) 8)))
                     `(sys.lap-x86:shl64 :rdx 1)
                     `(sys.lap-x86:jc ,type-error-label)
                     `(sys.lap-x86:rcr64 :rdx 1)
                     `(sys.lap-x86:jmp ,value-extracted)
                     len-2-bignum
                     ;; Length 2 bignums must have the high word be 0.
                     `(sys.lap-x86:cmp64 (:r8 #.(+ (- sys.int::+tag-array-like+) 16)) 0)
                     `(sys.lap-x86:jne ,type-error-label)
                     `(sys.lap-x86:mov64 :rdx (:r8 #.(+ (- sys.int::+tag-array-like+) 8)))
                     `(sys.lap-x86:jmp ,value-extracted)
                     type-error-label)
               (raise-type-error :r8 '(unsigned-byte 64)))
             (load-in-r8 value t)
             (emit `(sys.lap-x86:mov64 :rdx :r8)
                   `(sys.lap-x86:test64 :rdx #b111)
                   `(sys.lap-x86:jnz ,bignum-path)
                   `(sys.lap-x86:cmp64 :r8 0)
                   `(sys.lap-x86:jl ,type-error-label)
                   `(sys.lap-x86:sar64 :rdx 3)
                   value-extracted
                   `(sys.lap-x86:mov64 :rax :rdx)
                   `(sys.lap-x86:shr64 :rdx 32)))))
  ;; ECX, EAX & EDX are set correctly.
  ;; If VALUE is non-constant then it'll be loaded in R8.
  (emit `(sys.lap-x86:wrmsr))
  value)
